[{"title": "nested attributes modelsave", "body": "model contains subobject attempting save model explicit indication resave subobject run issues nested object picked eventsapi method map deconstructed change change b calls correct adding silent true solves fact want notified changes", "num": "3642", "d": "5/2015"}, {"title": "collection invoke working properly", "body": "calling collection previous versions would properly call models collection specified longer seems work caused issue upgrading one applications reduced sample case jsfiddle switching backbone produces different results backbone backbone full test code javascript var model backbonemodelextend defaults b var collection backbonecollectionextend model model updateall function data return thisinvoke set data var mylist new collection var new model var new model mylistadd mylistadd mylistupdateall b models show b consolelog mylisttojson possible issue also affects underscore methods within collections able reproduce", "num": "3641", "d": "5/2015"}, {"title": "collection fetch wrongly populates byid property subsequent fetches", "body": "found issue investigating collection get nt work half time fetching collection itunes need use parse collection model first fetch empty collection works fine keys collectionbyid object see models referenced property also indicates model parse called collection addreference expected behaviour fetching collection second time options passed collectionbyid basically investigation assuming problem collection set method marks models duplicatenonexistent based presence attribute variable thing attrs parsed model parse method might exist yet case nt models later considered nonexistent removed possible fixes might include instantinating class calling parse include pull request later mentioning documentation model parse method touch", "num": "3638", "d": "5/2015"}, {"title": "nt update history async request opera", "body": "singular question please bear faced strange issue executing backbone app rather ancient browser opera routes registered browser history little research saw would happen following scenario user interaction ajax request ajax callback handler executes cases url change app could navigate route nt update browser history hence user ca nt navigate back smell browser bug created small demo bingo happens updating ajax request handler question situation looking fix found use instead backbonehistoryupdatehash method works app testing green looks like problem solved question new issue although could nt find anything regarding strange one experience safe override backbone method way see preceding method name assume nt designed override fixed backbone instead case could pr alternative workaround think thank", "num": "3634", "d": "5/2015"}, {"title": "prevent new prototyped method appear loop keys object", "body": "function want make available objects mergeobject object function defined objectprototypemergeobjects function object typeof object object return var key object objecthasownproperty key key object key return events json events click retrybtn onretrybtnclick click cancelbtn oncancelbtnclick click dialogbutton ondialogbtnclick backbone view delegateevents delegateevents function events events events result events return thisundelegateevents var key events lt loops inherited properties var method events key isfunction method method events key method continue loop events iterates inherited properties gives error mergeobjects function encountered shouldnt loop check hasownproperty events iterate parent view stop iterating base object prototype", "num": "3624", "d": "5/2015"}, {"title": "remove root trailing slash wantpuststate", "body": "example browser pushstate server force trailing slash request receive redirection visit due commit replaced url server returns redirection lead additional request time hash lost ca nt reached read thinking tailing slash also optional means", "num": "3623", "d": "5/2015"}, {"title": "documentation delegate undelegate", "body": "ca nt get right needed something remember document later", "num": "3622", "d": "5/2015"}, {"title": "api function backward compatible changes", "body": "previously way defining events map passing context worked fine upgrading need set second argument undefined define context third", "num": "3621", "d": "5/2015"}, {"title": "view events property problem", "body": "updated project noticed different behaviour update ca nt set events property view initialize function anymore least callbacks nt get triggered set events directly view property extend context still works need create selectors events dynamically therefore build events property initialize ideas", "num": "3620", "d": "5/2015"}, {"title": "default complex attributes reference multiple instances model", "body": "object specified default attribute model instances model share reference object reason nt deep clone defaults object creating new model instance currently make changes deep attribute object updating model instances design", "num": "3619", "d": "5/2015"}, {"title": "documentation underscore", "body": "matches matcher bb documentation amp link underscore site needs updated matches deprecated", "num": "3618", "d": "5/2015"}, {"title": "add events raised unexpected order collectionset", "body": "stumbled upon feature surprised slightly reflection nt think bug wanted let know decide want anything collection defines comparator add add event handler collection create new view new model render add dom populate collection multiple models either calling calling collection populated sorted correctly add events raised original order models passed collection sorted order code worked around calling instead fetching instead created js bin demonstrates hope nt mind also created blog post describing behaviour anyone else encountered would know use reset instead set", "num": "3617", "d": "5/2015"}, {"title": "listento change behavior", "body": "using release listento able listen events objects provide typical interface case ace editor session emits change events eg editsessionon change function e used listento listen events editor session using release listento appear able listen events emitted editor session present view listeningto callback longer fired using listento automatic cleanup listener function curious never supposed work manner bug changes listening quite extensive bit difficult see might key difference one unfamiliar", "num": "3611", "d": "5/2015"}, {"title": "regression collectioninvoke calling expected methods", "body": "app noticed collectioninvoke stopped forwarding arguments individual method calls upgraded backbone created reduced example seeing log anything using example works properly save html run var samplemodel backbonemodelextend samplemethod function arg consolelog arg var samplecollection backbonecollectionextend model samplemodel var samplecollection new samplecollection samplecollectionadd new samplemodel samplecollectioninvoke samplemethod samplearg test succeeds see samplearg printed console", "num": "3610", "d": "5/2015"}, {"title": "modelid getter nt work polymorphic model getter", "body": "think found bug inside version collection contains different models used getter solve upgrading trobles app collection couldnt find already exsiting models inside digged source found bug nt always model function sometimes think everybody using function custom idattribute defined backbone wo nt find already existing models overridden function using inside collection works maybe function needs something like", "num": "3608", "d": "5/2015"}, {"title": "missing packagejson", "body": "dropping stops backbone working webpack box", "num": "3607", "d": "5/2015"}, {"title": "advice add function router give users chance populate callbacks routes", "body": "suggested change router add new function callback whatever name like router users override populate callbacks according name users specified routes change wo nt affect existing projects using backbone route function route name callback isregexp route route thisroutetoregexp route isfunction name callback name name callback callback thiscallback name changed name return users override function populate callback functions according name callback function name return name simple example modules router module", "num": "3601", "d": "5/2015"}, {"title": "event handlers executed stoplistening called", "body": "issue ran might unhandled case actual bug consider following setup views b amp c b amp c listen event triggered cases b destroys remove stop listening c event triggered event handler c still executed even c already destroyed b jsfiddle aware might ideal architecturally b destroy c rather c destroy use case unavoidable also guarantee order b c bound use case point expected behaviour calling event handlers executed anymore assuming backbone internal caching callback functions event fires check anymore callbacks unbound interim bug intended behavior supposed handle case", "num": "3599", "d": "5/2015"}, {"title": "annotated source version number misleading", "body": "published annotated source gives impression annotated source version misleading really whatever state master last lost bunch time thinking gone mad consequence nt ruled would consider bumping version number master generated docs less surprising generating docs tag contents match release publishing stable amp master docs labelled happy make pr wanted see route preferred", "num": "3597", "d": "5/2015"}, {"title": "possibble create tabs navigation drawer", "body": "since days researching topic possible create tabs navigation drawer android studio", "num": "3596", "d": "5/2015"}, {"title": "method get return value default", "body": "method get value object added couple useful arguments eg user age number return na thus age user overwritten null undefined interface look good besides define function checks data type", "num": "3595", "d": "5/2015"}, {"body": "post jsfiddle showing issue able confirm working properly suspect server response model side note backbone highly encourages simple primitive attributes nested objects", "d": "5/2015"}, {"body": "dupe fixed releasing accepted", "d": "5/2015"}, {"body": "thanks sorry dupe", "d": "5/2015"}, {"body": "thanks write taking look make sure right track could also post small jsfiddle shows issue", "d": "5/2015"}, {"body": "justin probably need run code locally though use plugin cors let quickly explain going attribute model created method fetching collection twice notice first time property contains keys ids cids expected second time keys cids", "d": "5/2015"}, {"body": "looking dupe know particular problem resolved setting", "d": "5/2015"}, {"body": "may worth mentioning documentation method even issues related underlying cause like edit also people might google issue solution actually makes problem worse property never populated model ids correct approach use make sure equivalent property persisted parse like", "d": "5/2015"}, {"body": "hi thanks pointing answers questions definitely new yes methods attached prototype otherwise hidden need check new releases case changes maybe certainly look pull sent thing concerns nt think anyone actively tests opera going entirely faith passing existing tests nah got nuthin", "d": "5/2015"}, {"body": "hi braddunbar noted tested simple fix working end nevertheless trying test prove right path got tangled since ca nt test current setup qunit create pull discuss make work", "d": "5/2015"}, {"body": "testing realized solved using jquery strange reason could figure using jquery fixes issue", "d": "5/2015"}, {"body": "certainly could check properties would mildly since plain object normal case breaking change however considered antipattern modify core js prototypes define modifications", "d": "5/2015"}, {"body": "say best modify use helper function instead", "d": "5/2015"}, {"body": "dupe", "d": "5/2015"}, {"body": "ah seems commits removed call calling best follow removed early implementation pr argument juggling nt cleanest api however implementation rewritten nt see ca nt supported", "d": "5/2015"}, {"body": "think relevant pull also build events method js var view backboneviewextend events function return geteventsfor", "d": "5/2015"}, {"body": "think relevant pull makes sense wanted make sure nt oversight", "d": "5/2015"}, {"body": "also use directly", "d": "5/2015"}, {"body": "extending views mixins dynamically inside initialize method work event handler defined mixin although ok calling method manually would nice document bc break", "d": "5/2015"}, {"body": "mean mixins getting called would nice document bc break sure let fix", "d": "5/2015"}, {"body": "far know mixin pattern insert functions one object another maybe wrong naming situation event handlers talking following js var mymixin eventhandler function consolelog mixin var myview backboneviewextend events click mybutton eventhandler initialize function chose mixin dynamically ie based arguments model etc extend mymixin registered called view extended mixin btw thanks docs", "d": "5/2015"}, {"body": "ah case want try extend instead instance js var myview backboneviewextend events click mybutton eventhandler extend myviewprototype mymixin really need nt need move call view think though maybe opt handle exceptional cases event handlers instead jridgewell noted delegate events directly", "d": "5/2015"}, {"body": "know solution using places sometimes need choose right mixin based constructor arguments extending instance mixin method calling wrote right done method also drawbacks nt remember moment", "d": "5/2015"}, {"body": "common gotcha javasscript backbone better using function returns defaults instead", "d": "5/2015"}, {"body": "backbone discourage use objects model attributes", "d": "5/2015"}, {"body": "yap see", "d": "5/2015"}, {"body": "feel free open pull", "d": "5/2015"}, {"body": "mind writing small test case take look interested see code looks like", "d": "5/2015"}, {"body": "javascript test case var events var obj non backboneevents event implementation work name callback events name callback name events name null var view new backboneview viewlistento obj test consolelog viewstoplistening sideeffect fixing since listener listenee able clean memory object share private state two objects internalon used private data never leaked outside backbone also means uses internal backbone code instead public able fix sharing state privately inside backbone instead private function look performance impact", "d": "5/2015"}, {"body": "ah say contract support events systems make work probably way singleton event jridgewell seems pretty hacky brittle", "d": "5/2015"}, {"body": "reverting also trick since listener keep track events", "d": "5/2015"}, {"body": "get us kind hard follow discussions", "d": "5/2015"}, {"body": "since baby jridgewell go ahead revert think reasonable appropriate fix", "d": "5/2015"}, {"body": "fixed pretty severe memory leak javascript objon event function obj event function still holds reference obj also allowed listenee clean references javascript obj event function objoff still holds reference obj cleaned implementation nt taking library interop account hence function instead using public let get test cases setup revert know fix library interop", "d": "5/2015"}, {"body": "oh man even revert previous implementation used private nt call public reverting wo nt fix look resolve going pretty solution", "d": "5/2015"}, {"body": "point clarification current approach fine except ca nt event different events library yes", "d": "5/2015"}, {"body": "current approach fine except ca nt event different events library yes exactly", "d": "5/2015"}, {"body": "let leave current approach stands bazineta viable approach ace editor session object mixin backboneevents", "d": "5/2015"}, {"body": "number viable approaches exist one agree fwiw nt seem good paths forward respect changing current behavior instead recommend documenting warning ie would worked fail silently addressed via means", "d": "5/2015"}, {"body": "jashkenas point clarification current approach fine except ca nt event different events library yes message maps broken code triggering b c wo nt fire event handler thislistento hello function thishello true", "d": "5/2015"}, {"body": "thanks spotting fix", "d": "5/2015"}, {"body": "thanks fix", "d": "5/2015"}, {"body": "fix merits anything else outstanding deserves make", "d": "5/2015"}, {"body": "jashkenas considered", "d": "5/2015"}, {"body": "jashkenas actually milestone particular considered well", "d": "5/2015"}, {"body": "plain function undefined line fall back catching common case models advanced idattribute override though would nt recommend creating new model instance get id property", "d": "5/2015"}, {"body": "thanks see reason submitted updating code nt work properly think one run issue especially mentioning documentation changelog without warnings", "d": "5/2015"}, {"body": "right totally document let put something together", "d": "5/2015"}, {"body": "antpaw", "d": "5/2015"}, {"body": "curious using webpack resolverplugin", "d": "5/2015"}, {"body": "nt use one try however perspective reason drop package description files", "d": "5/2015"}, {"body": "right probably nt huge deal keep around bower package certainly nt necessary besides webpack enhancedresolve unmaintained unsupported give resolverplugin try reopen still experiencing troubles", "d": "5/2015"}, {"body": "hi freegink already exists called hope works", "d": "5/2015"}, {"body": "different execute happens route function found callback inherited router either add route manually using route function add callback functions inherited router suggestion give users chance dynamically populate callback function according name specified routes nt put callback functions inherited router look example provided example accountlogin nt function inherited router override execute callback parameter would null", "d": "5/2015"}, {"body": "example accountlogin nt function inherited router override execute callback parameter would null right argument still use look function", "d": "5/2015"}, {"body": "right nt notice execute gotten name parameter looking backbone documentation thanks work execute routerexecute callback args", "d": "5/2015"}, {"body": "ah nt realize look getting fixed later", "d": "5/2015"}, {"body": "change master nt yet added release documentation website reflects current released version really release version bump soon", "d": "5/2015"}, {"body": "already exists called execute taken using event implement older backbone really release version bump soon think last change", "d": "5/2015"}, {"body": "cool saw new release hooray", "d": "5/2015"}, {"body": "assuming backbone internal caching callback functions event fires check anymore callbacks unbound interim exactly correct event triggered listeners already bound called bit discussion mutable events involved large amount code support", "d": "5/2015"}, {"body": "annotated source website version nt republishing docs version bump case", "d": "5/2015"}, {"body": "ran well case point search annotated source modelid occurrences source code search release occurrences", "d": "5/2015"}, {"body": "aye ing ghpages branch months ago", "d": "5/2015"}, {"body": "extend write get method nt think go core lib tho", "d": "5/2015"}, {"body": "extend backbonemodel write get method exactly special purpose simple method", "d": "5/2015"}, {"body": "ca nt see case would nt want wrap potentially errorthrowing code trycatch within change handler could deal uncaught errors probably nt mess backbone internal state thrown uncaught error program crashed difference make happens backbone ca nt wrap userland code trycatch would slow hell", "d": "5/2015"}, {"body": "thrown uncaught error program crashed turn event loop place think backbone break next turn well storing state support nested events ca nt wrap userland code trycatch definitely nt want suggest fine error breaking app end dev catch potential errors feels funny error break backbone api following event loops ca nt wrap userland code trycatch would slow hell mitigate wrapper function might appropriate underscore easily add private function backbone javascript function trycatch func try func return true catch e return false class model set key val options var model silent changeslength thispending options var ok trycatch function var lt changeslength modeltrigger change changes model current changes options", "d": "5/2015"}, {"body": "would nt sustainable potentially every event listener could screw backbone internal state ca nt wrap code throws error responsibility clean see coming though jridgewell change listeners different story valid point forgot deopt fix perf look applied change events potentially complex change events", "d": "5/2015"}, {"body": "would nt sustainable potentially every parse initialize event listener could screw backbone internal state completely agree ca nt wrap everything situation leave backbone inconsistent state initialize blows listener model data could inconsistent definitely dev concern listener longer trigger events seems like library concern perf look applied change events potentially complex change events", "d": "5/2015"}, {"body": "test nt using jbone try general note every edge case needs accounted building nuclear testing software sometimes added code handle edge cases makes rest code harder reason see latest events refactor eg sometimes say know thing bad idea nt nt going account nt responsible wrapping faulty dev code", "d": "5/2015"}, {"body": "test nt using jbone try man knew something fishy sometimes say know thing bad idea nt nt going account nt responsible wrapping faulty dev code works", "d": "5/2015"}, {"body": "real problem know proper course action state already broken exception handled user code future code executes broken contract alludes detailed long event system reasoned way user adjust inflight events even catch exception correct course fail fail hard change current correct behavior severely breaking", "d": "5/2015"}, {"body": "disruptek", "d": "5/2015"}, {"body": "like idea nt think reimplement would invalid encodings throw away take guess think common case expect well formed urls including percent encoding said would rather make bit easier deal errors", "d": "5/2015"}, {"body": "like idea nt think reimplement decodeuri decodeuricomponent oh definitely would nt backbone code since exposed really simple define", "d": "5/2015"}, {"body": "could", "d": "5/2015"}, {"body": "thejameskyle pass properties default options superclass constructor option stuckouttongue", "d": "5/2015"}, {"body": "instead relying setup class could simply function something javascript class documentrow extends backboneview", "d": "5/2015"}, {"body": "milesj hmm error immediately final class spec derived class must call super use even work never actually calling backbone constructor get initialization code see link first post", "d": "5/2015"}, {"body": "milesj thing call setting like since ensure element view constructor already created element ever set", "d": "5/2015"}, {"body": "milesj still allowed subclassing jridgewell oh sorry missed seem like natural option spoke jeffmo sebmck give guys backstory reasoning order support extending native types ie array nt determined call method otherwise run initialization issue dom presumably places", "d": "5/2015"}, {"body": "jridgewell thejameskyle simply call super first updated example really nt see issue done thing classes move views constructor logic method", "d": "5/2015"}, {"body": "lot expensive code run twice", "d": "5/2015"}, {"body": "milesj read original blog post running super first means properties nt processed see full depth explanation", "d": "5/2015"}, {"body": "yes read still curious solution everyone keeps talking views constructor needing called nt necessarily case nt something like following solution albeit bit contrived javascript var view backboneview function options thiscid uniqueid view extend ing options longer needed properties set directly viewprototypesetup function thisensureelement thisinitializecall arguments class documentrow extends backboneview constructor super thistagname li thisclassname documentrow thisevents click icon open click buttonedit openeditdialog click buttondelete destroy thissetup arguments guessing backwards compatibility", "d": "5/2015"}, {"body": "default class would nt work since constructor never calls forcing subclass call anything going super annoying", "d": "5/2015"}, {"body": "issue classes deal backbone personally solved using babel class properties spec", "d": "5/2015"}, {"body": "milesj stated class properties solve issue nt instantiated end constructor spoke jeffmo sebmck js class root rootprop root constructor consolelog root thisrootprop consolelog root thisderivedprop class derived extends root derivedprop derived constructor super consolelog derived thisrootprop consolelog derived thisderivedprop desugaring js function root thisrootprop root consolelog root thisrootprop consolelog root thisderivedprop function derived super thisderivedprop derived consolelog derived thisrootprop consolelog derived thisderivedprop still nt fix issue leads inconsistency", "d": "5/2015"}, {"body": "issue classes deal backbone hm personally solved using babel class properties spec gon na lot div elements see last point", "d": "5/2015"}, {"body": "see case suggest going pass properties default options superclass constructor option last line creating properties method nt touch constructor javascript class documentrow extends backboneview loadproperties return tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy foo bar contrived example var view backboneview function options thiscid uniqueid view options options extend thisloadproperties pick options viewoptions thisensureelement thisinitializeapply arguments something similar toolkit seen", "d": "5/2015"}, {"body": "hi understand correctly discussion backbone developers discussing workarounds best practice intention actually making changes bb core deal issue suggesting would idea changes could words suggestion use either properties functions getters final word topic thanks", "d": "5/2015"}, {"body": "gotofritz discussing workarounds solution forcing properties live instances nt scale backbone class system right thing discussion adding static prototype properties classes far nothing concrete meantime say stick backbone", "d": "5/2015"}, {"body": "thanks try classes little longer benefit anyone else stumbling upon practice find pass properties default options superclass constructor better example app dynamic localized routes need passed instantiation time routes method nt work whereas following class router extends backbonerouter constructor localizedroutes defaults localizedroutes nonlocalizedroutea routea actions defaultroute super routes localizedroutes", "d": "5/2015"}, {"body": "seems like conversation run course still happy entertain pr explores notion continuous tracking unvalidated changes", "d": "5/2015"}, {"body": "reading old tutorial see model used validate set well save understand would reduced save ca nt understand efficiency option think option find useful simplifying invariant alternative complex semantics loading work handling contingencies client library", "d": "5/2015"}, {"body": "nt solve issue second instantiation meant ifmodified false fetching first time var gists new gists gistsfetch var new gists empty passing ifmodified false first fetch would grab new data needed second instance caching layer would solve since empty response body would replaced original request", "d": "5/2015"}, {"body": "pr address", "d": "5/2015"}, {"body": "jashkenas would solve breaking change", "d": "5/2015"}, {"body": "yes think intentional reason pass wish validate time docs make clear", "d": "5/2015"}, {"body": "validation supposed holistic resource fields nt exist isolation app means write function handle partial attributes passed", "d": "5/2015"}, {"body": "kolorahl op wants achieve clear current model attributes pass new json becomes new attributes model manner nt really want hit backend already json", "d": "5/2015"}, {"body": "somehow agree clear set method think one functionality needs considered something like backbonecollection reset", "d": "5/2015"}, {"body": "reason needed world changing backbone assumes model fetch xhr primary method loading data server lot stuff using websockets data gets pushed client redundant call fetch need decent way sideload data still get event hook trigger", "d": "5/2015"}, {"body": "nt using", "d": "5/2015"}, {"body": "jridgewell set make attributes dirty let try using set see happens actual outcome desired outcome set fine state changed outofsync server model reset needed way mark state synchronize w server", "d": "5/2015"}, {"body": "ended writing different monkey patch feature allow sideloading data server calling sync event afterwards param attributes param options backbonemodelprototypesyncset function attributes options var attrs attributes optionsparse attrs thisparse attrs options thisset attrs options thischanged thistrigger sync attributes options return probably needs unset missing items also sure model set attributes", "d": "5/2015"}, {"body": "utilitylib improve performance optimize code backbone code running mobile", "d": "5/2015"}, {"body": "yes adding items one time keeping list sorted going fundamentally slower case roll additions single addition operation would trigger one sort suggest finding way correct way deal issue one reasons exists", "d": "5/2015"}, {"body": "jashkenas possible kidplug suggests add new event modifying monkeypatching backbone support seem like fantastic solution either also involves modifying backbone internals seen way without bungling innards backbone raised issue nt seem compelling reason preventing correctlocation insertion item mergesort basically except sortedindex method nt accept comparators", "d": "5/2015"}, {"body": "thanks ur suggestions", "d": "5/2015"}, {"body": "let move conversation ticket", "d": "5/2015"}, {"body": "fixed", "d": "5/2015"}, {"body": "still problem come issue keeps getting closed", "d": "5/2015"}, {"body": "slavajacobson provide test case", "d": "5/2015"}, {"body": "think better solve irregularity", "d": "5/2015"}, {"body": "would nice switch browserify webpack way would best worlds multiple files single file easily", "d": "5/2015"}, {"body": "wrote little wrapper sorts routes specificity registering naive proof concept hope nt reopen issue", "d": "5/2015"}, {"body": "option", "d": "5/2015"}]