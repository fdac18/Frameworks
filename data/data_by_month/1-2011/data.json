[{"title": "id url encoded", "body": "backbonemodelprototypeurl one greetings johannes", "num": "203", "d": "1/2011"}, {"title": "validate preventing save", "body": "hey reading documentation validate understanding defining method model return something prevents happening though seems happening set modified version example app nt set default content todo requires field empty submitting empty item nt anything viewwise expected upon refreshing page one see still adds empty entries anyway tried thing without localstorage make sure problem nt adapter confirm reproducible even actual backend taking responding requests posts still go invalid records question actually prevent happening validations thanks", "num": "202", "d": "1/2011"}, {"title": "would secure api endpoints collections would wrap json serialized arrays inside object literal", "body": "backbonesync expects api endpoints collections return toplevel json serialized array therefore possible another site capture data using csrf json hijacking flask documentation json security practical csrf json security appears exploit prevented wrapping array inside object literal facebook uses pattern graph api request handlers return collections see example api endpoint friends facebook graph api documentation course one pose question worthwhile introduce backwards incompatible change default backbonesync implementation since web apps vulnerable data capturing anyway using ssltls still think proposed change would prevent csrf json hijacking attacks change would provide protection similar attacks worth tradeoff would love people experience csrf json hijacking scenarios chime provide insight question basically toplevel object literal countermeasure csrf json hijacking useless security obscurity", "num": "201", "d": "1/2011"}, {"title": "question organising model instances shared collections", "body": "getting started backbone wondering little organizing models may contained several collections guys kind management model instances client make sure particular server model represented exactly one backbonemodel instance client regardless many collections fetched mean guess fetching collections may shared ticket models ideally would one ticket model instance memory single update would reflected views guess solved many ways wondering thinking right way thanks", "num": "199", "d": "1/2011"}, {"title": "add previoussavedattributes model", "body": "changedattributes previousattributes refer set previoussavedattributes refers create attribute created set null read initial load return update enables backbone easily keep track thinks server helpful ui wants indicate something changed server needs saved using code accomplished view simply adding line initialize success callbacks updates setting previoussavedattributes new model done simply supplying defaults easy using code use often would easier two spots source code given time hope fork get least idea", "num": "196", "d": "1/2011"}, {"title": "collection events refresh add remove", "body": "borrowing commented source collection internal add method invoking triggers model event nt trigger collection event seems really odd amp counterintuitive typically would want things like", "num": "195", "d": "1/2011"}, {"title": "bind unbind several events time enhancement", "body": "would great allowing bind unbind methods use syntax jquery bindings specifying several events separated commas bind callback events ie peoplebind add bind thisonpeoplechanged peoplebind remove bind thisonpeoplechanged become peoplebind add remove bind thisonpeoplechanged", "num": "193", "d": "1/2011"}, {"title": "question backbone best practice file upload", "body": "documentcloud website clear documentcloud app includes file uploads curious guys handle context backbone app use jquery plugin abstract pull iframe force page load etc", "num": "192", "d": "1/2011"}, {"title": "using functions events passed delegateevents", "body": "hello want define event view calls function object ca nt pass function define events delegateevents nt check see function supplied name function found function already delegateevents something similar please thankyou", "num": "191", "d": "1/2011"}, {"title": "referencing nested models collections", "body": "read docs faq around issues understand models contain collections models questions related common think may complex scenarios explained anywhere like present specific use case nt seen solved yet gain insight ways solve note simple example faq makes complete sense still unclear best handle nested models collections multiple collections need references nested models json illustrate better notice project b members manager project also member project well projects besides fact sending redundant user information multiple times problem sue model project different model sue project b phone number changed one model would views model get updated rather sending redundant user information multiple times thought would better simply pass references json would look like var users id name tom phone id name sue phone id name kim phone var projects id name projecta members manager id name projectb members manager notice projects members collection contains references users manager reference single user need start managing global repository user models order place lookup user ids global user repository would use code like wire questions good way better pattern using best place global repository users like app object controller controller loads users projects initialize function variable app nt exist yet projects initialized finding load users separately load projects access appusers would better pass reference app collection model tree controller app object would create project collection include app several levels json hierarchy pass app collection model creates collection models forth since use users would lookup appusers fetchingcreating users would need keep adding global repository way manage references would need created repository could purge models longer used anywhere means standard backbonecollection probably would nt work user repository repository object would needed perhaps overcomplicating things fact hope really seems like global model repositories would simplify complex scenarios nested models model references better solution would repository object best way go would backbone interested repository implementation contribution", "num": "190", "d": "1/2011"}, {"title": "add newest route start handlers array rather end", "body": "would nice added new routes start array rather end would allow override previously set routes allow following application logic work pdvcontrollersapp backbonecontrollerextend initialize function options create app model collection view thisroute path thischeckpath createpath function stub thisgetdata stub function data create model add collection getdata function stub callback get data server data callbackcall data else show page", "num": "189", "d": "1/2011"}, {"title": "call backbonehistorystart twice", "body": "hello call backbonehistorystart twice start another interval loop check think would pretty easy start single history per window avoid error call dumb spent debugging simple error thx julien", "num": "188", "d": "1/2011"}, {"title": "eventbindunbind", "body": "hi feasible make subj methods take arrays event names also best regards vladimir", "num": "187", "d": "1/2011"}, {"title": "small documentation typo", "body": "think drew", "num": "186", "d": "1/2011"}, {"title": "broken link backbonejs documentation page", "body": "top documentation page link broken new link also could find page repository hosted repo people fix things", "num": "184", "d": "1/2011"}, {"title": "incorrect documentation backbonesync method signature", "body": "states backbonesync method signature sync method model success error latest version method signature sync method model options options success error", "num": "183", "d": "1/2011"}, {"title": "mention super docs", "body": "looking source see extend method defines super docs mention javascript nt super gives example workaround perhaps example changed use super instead", "num": "182", "d": "1/2011"}, {"title": "controllerremovelastlocation request modify history", "body": "thought work done add functionality remove last location history addition adding", "num": "181", "d": "1/2011"}, {"title": "events savedestroycreate", "body": "hello right would much easier already triggered backbone", "num": "180", "d": "1/2011"}, {"title": "collectioncreate logic", "body": "hi cases want create new record nevertheless id set consider new user signup id set new model breaks save logic causing put fooid instead post foo suggest workaround prepend tia feedback vladimir", "num": "178", "d": "1/2011"}, {"title": "optionssuccesserror called multiple times", "body": "since started get passed fell situations callbacks got called multiple times consider case cascading model fetches modelbind change function options anothermodelfetch options modelfetch success function consolelog fetch model success error function consolelog fetch model error trigger success callback whereas solution implemented remove properties object inside fetch function options options options var onsuccess optionssuccess optionssuccess delete optionssuccess var onerror optionserror optionserror delete optionserror var model var success function resp modelset modelparse resp options return false onsuccess onsuccess model resp var error wraperror onerror model options thissync backbonesync read success error return", "num": "177", "d": "1/2011"}, {"title": "undo set failed save", "body": "wondering guys think would best practice undo failed save understand saving model backbone use set save validate model gets called times first time save succeed let say server unreachable want save model reason model persisted would result error roll first set set new data model back old version save", "num": "176", "d": "1/2011"}, {"title": "nested models suggestion idea", "body": "writing point concept app using backbone heavily referential modelscollections pointing back forth one another first used suggestion faq nested models quickly grew cumbersome maintain finally settled following feel much cleaner maintain allows events propagate item backbonemodelextend initialize function thissetupassociations bins binlist lots lotlist unitsofmeasure unitsofmeasurelist barcodes barcodelist using method write code like following change events flow associated modelcollection chance getting setupassociations amp setassociated methods added model class set using name associated anyone better thought also way determine event method called would nt necessary bind inside setupassociations would nice event name passed handler inside backbone trigger method thanks great library", "num": "174", "d": "1/2011"}, {"title": "pushstate etc", "body": "plans", "num": "173", "d": "1/2011"}, {"title": "view scoped events causes issues multiple views element", "body": "updated head following commit introduced bug app views bind element particular instance problem longer unbinding previously bound events events stacking sure best solution obviously write method unbind redelegate great backbone could less clever", "num": "172", "d": "1/2011"}, {"title": "framework adapter", "body": "like backbone many people including use frameworks different jquery support ported versions backbone becomes hellish work let us get things use jquery put separate adapter concept might look like", "num": "171", "d": "1/2011"}, {"title": "bind ambiguity", "body": "hi constantly confused modelbind event handler sense call modelon event handler word bind seems associated js particular underscore bind underscore bindall thus constructions like bindall render thisbind change render common code bit confusing suggest get rid word bind event binding code favor bindall render thison change render think tia vladimir", "num": "170", "d": "1/2011"}, {"title": "adding different models collection", "body": "make sense collection includes models different types share common interface collection work sorting etc example component page consists sorted image text elements mixed together collection concept backbone seems bit singlemodelspecific", "num": "169", "d": "1/2011"}, {"title": "better doc example modeltojson", "body": "backbone docs example modeltojson bit confusing since tojson method nt overriden code imho example compare default behaviour tojson custom overriden version also still nt understand modelcollectionfromjson method", "num": "168", "d": "1/2011"}, {"title": "unsetting id model remove thisid", "body": "calling modelunset id model thisid attribute deleted matches setting thisid id attribute assigned", "num": "166", "d": "1/2011"}, {"title": "view html instantiation event binding", "body": "understanding backbone needs create insert html generated view instance dom bind events project thousands models viewed several different view instances appending html dom models viewed could degrade performance would great way bind el element cached view instance simply swap view instance dom needed render function something like feasible possible thanks", "num": "165", "d": "1/2011"}, {"title": "backbone history method list hashes", "body": "way view hashes cached history", "num": "163", "d": "1/2011"}, {"title": "delete", "body": "delete", "num": "162", "d": "1/2011"}, {"title": "mongodb id needs aliased id work well modelcollection", "body": "mongodb document ids stored primary key id backbone primary key id retrieving document mongo id needs aliasedreplaced id work well backbone would nice backbone id field could also read id field well guess possible logic model constructor creating backbone model tojson building json db storage wondering preferredbetter approach thanks bunch", "num": "161", "d": "1/2011"}, {"body": "patch", "d": "1/2011"}, {"body": "holds empty record", "d": "1/2011"}, {"body": "sure mean commented code added unless input something record invalid hence would fire expected happening still fires refresh page see empty entry managed slip", "d": "1/2011"}, {"body": "mean check condition holds eg", "d": "1/2011"}, {"body": "nt seem problem even set always fail still save record", "d": "1/2011"}, {"body": "checked ever gets called", "d": "1/2011"}, {"body": "quote original ticket yes preventing view new record created though firing described documentation", "d": "1/2011"}, {"body": "confirmed failing really preveng backbonesync firing effectively means prevent view rendered nt help stopping model sent storage remote otherwise design intended", "d": "1/2011"}, {"body": "personally treat bug moreover one calls validation nt occur call coded pity could nt get documentcloud reply whether bug feature admit serverside validation localstorage case serverside", "d": "1/2011"}, {"body": "problem example app calls rather whilst validation function still called model created manually fires model added list forces save best fix well firstly nt used situation however bug collectioncreate still save models invalid data fix change julio let make pull request", "d": "1/2011"}, {"body": "tried product defined checking whether number backbonesync still firing even though validation failed hence started thinking bug though considered might missing something question whether design decision bug name chrislloyddiditformebutstillletmedoit open suggestions", "d": "1/2011"}, {"body": "one fundamental things backbone took understand dirty attributes exist dom model reflect server bulk saving attributes always called argument nt passed attributes validate validations run equivilant running fix could lie checking validation save called arguments would wait jashkenas chime design decision easily worked around mean time", "d": "1/2011"}, {"body": "would wary solving problem way problem objectarray combo talking still perfectly valid javascript however due way browsers handle javascript currently possible access data implement run risk browser changing behavior ever slightly destroying security way typically seen done add prefix kind data prefix valid javascript eg throw text javascript ca nt parse either way point ensure crossdomain request via tag fail able get data solutions slightly better less likely constructs become valid future although still possible said advice browser security handbook advocates slightly different solution note quite json interfaces intended crossdomain consumption rely somewhat fragile defense assumption certain specific object serializations param value meaningless prefixes amp amp amp start amp amp amp parse via endless loop prefixes prevent interception remainder data cases assumptions likely futuresafe better option require custom xmlhttprequest headers employ parserbreaking prefix unlikely ever work long basic structure javascript maintained one example string followed newline", "d": "1/2011"}, {"body": "seems suggestion require xrequestedwith xmlhttprequest header set best way handle much better js tweaking nt make assumptions javascript syntax implementations way think get around http request splitting exploit via proxy return data xhrs protected origin policy tags get data", "d": "1/2011"}, {"body": "security obscurity data given harvested weird format original poster could nt understand nothing stopping throwing data php page using jsondecode throwing database secure way way making sure request originating internally hence edit authenticating get session stored id changes request", "d": "1/2011"}, {"body": "radiosilence using prefix nt security obscurity plenty stopping throwing data php page origin policy mechanism ensures request originating internally cases allowing attacker site access documentcookies api site allowing attacker site make xhr request api site xhr method much simpler implement", "d": "1/2011"}, {"body": "coderrr please elaborate stops data nothing stopping using regex simply filter yeah method advocating", "d": "1/2011"}, {"body": "radiosilence please elaborate extract data element way aforementioned js hacks things like would prohibit", "d": "1/2011"}, {"body": "coderrr right xrequestedwith radiosilence nt seem understand origin policy check", "d": "1/2011"}, {"body": "okay malicious script loads data url text using authenticated cookie sends data text php script whatnot strip etc parse data missing something", "d": "1/2011"}, {"body": "saying js refuse use cookie load url", "d": "1/2011"}, {"body": "part missing malicious script loading data using authenticated cookie", "d": "1/2011"}, {"body": "something like jquery get would use cookie", "d": "1/2011"}, {"body": "exactly origin policy nt allow authenticated crossdomain requests via xmlhttprequest", "d": "1/2011"}, {"body": "riiight okay sorry clears csrf work around origin", "d": "1/2011"}, {"body": "typically using xmlhttprequest forge crossdomain postget request using plain javascript easiest way build fake form html use javascript submit allows make crossdomain requests ca nt see results though nt matter long request causes user take action website attacking instance lets pretend facebook nt protections place prevent possible cause person poke another person b making get request uid user id person poke could trick people browsing url would make poke target user edit clear though would nt work goal retrieve contents page", "d": "1/2011"}, {"body": "thanks nealpoole patched adding hash end linksactions work via get compared changing value session link work certain routes attack data compromised work", "d": "1/2011"}, {"body": "addressed much detail original description issue look top links flask documentation json security practical csrf json security give brief overview though basically passing back data considered valid javascript via get request malicious site use tags load data make authenticated crossdomain requests via tag returning actually javascript accessing data trivial json data depending format may possible get access data ie overriding constructors", "d": "1/2011"}, {"body": "sorry noise discovered issue actually discusses", "d": "1/2011"}, {"body": "tifroz understand coming certainly look odd counterintuitive model event would triggered collection event next time try opening github issue backbone proxies model events collection model currently contained", "d": "1/2011"}, {"body": "understand coming certainly worked hard make sound like nitpicking source code created issue try listener collection never received event stepped code went haha came across part obviously shortcoming somewhere else likely code resume investigation left thanks answer amp sorry came wrong way big fan backbonejs", "d": "1/2011"}, {"body": "please let us leak jquery code ideas backbone instead could accept array events mean providing comma separated tokens right best regards vladimir", "d": "1/2011"}, {"body": "vladimir right new backbone used philosophy behind api comment using array makes sense j", "d": "1/2011"}, {"body": "might also find useful best regards vladimir", "d": "1/2011"}, {"body": "sorry ignore forgot doh ca nt see delete issue otherwise would", "d": "1/2011"}, {"body": "considering ca nt delete location browser history proposing work", "d": "1/2011"}, {"body": "sorry please remove question moment frustration complex hash changes given certain object states late night grasped way hence question working fine though", "d": "1/2011"}, {"body": "could nt use historyreplace replace current state noop", "d": "1/2011"}, {"body": "nt tried issue renderinginitializing different views based hash wanted modify hash different times page view based various object states multiple savelocations single page view good thing ended simply using global variable represent revised hash using generate modified views one savelocation end modified hash different backbonehistorygetfragment", "d": "1/2011"}, {"body": "thanks code example share using ie binding", "d": "1/2011"}, {"body": "mostly ui update stuff basic exemple saving label form data saved backend also expense lines view line successfully created create new empty line right bind change id new comers would much practical bind create save update etc", "d": "1/2011"}, {"body": "cases callback seems better suited generic event spinnershow saving modelsave attrs success function spinnerhide rowsave attrs success function addnewrow", "d": "1/2011"}, {"body": "actually access save function put success callback tend rely binding heavily old os x dev habit seems setup views listen many events refresh accordingly save triggered outside view success event still catched view exemple controller saves model another view trigger save must hard decide must go must stay keep framework simple", "d": "1/2011"}, {"body": "sure hard sort decisions need based around concrete use cases sounds like good one different controller view calling save indeed reopening ticket got events like see added", "d": "1/2011"}, {"body": "far couple hundreds coffeescript lines using backbone events really missing", "d": "1/2011"}, {"body": "im agreeing jashkenas love javascripts event based world lets remember events used callbacks used event listeners perfect something needs happen sometime event triggered real dependencies nt always know whats event queue ahead behind callbacks used something must triggered code happen precisely called function running including callback run uninterupted done guaranteeing callback run event listener even event triggered callback block code provided weird async behavior via ajax web workers callbacks fired function finished garbage collection eventloop start running see runs next going argue existing code supports callbacks perfectly obviously desparately want event fire trigger one callback underscore jquery etc bind trigger custom events choosing god wrote muchbut hope helps move discussion along", "d": "1/2011"}, {"body": "mix event callbacks exemple error event also called backbonesync fails might lead confusion look sproutcore event loop events triggered async start event loop one first newbie mistake events also called specific order simplicity like use events callbacks backbone build around events facilities within framework use mechanism favor callbacks", "d": "1/2011"}, {"body": "wow absolutely right events backbone events callbacks still think best treat events asynchronous submit patch turn current triggering async event loop based one tying dom time id create custom trigger called save whatever need wrap save handler function trigger think best help move project actual async events first thanks insight sorry nt read bind trigger code prior commenting", "d": "1/2011"}, {"body": "quick note turning current triggering async event loop based one tying dom really really bad idea events pattern inversion control necessarily imply asynchronicity use events instead method calls whenever multiple objects notified central object state changes without central object aware observers done avoid models tightlycoupled ui example instead model like business model concerned views may may present page time instead allows model oblivious ui ui register events model changes making events async necessary browser involve extreme amount computation browser appear lock code much calculation means use break smaller chunks events async default merely slows things introduces nondeterminism none needed sorry strong opinion listening sproutcore messes confusion runloop recently", "d": "1/2011"}, {"body": "opinion sproutcore events async stuff whenever use confused stuff happens", "d": "1/2011"}, {"body": "thanks input understand decoupling difference callbacks events thought juggy wanted asynchronous approach side note nt believe async browser lockups avoid appearance code written async environment already written handle nondeterminism implicit environment fairness nt write way beginning hard get head around coded handle later date perhaps middle ground sproutcore messes neverintroduceasync approach hey give take", "d": "1/2011"}, {"body": "also need append post fooid issued instead post foo", "d": "1/2011"}, {"body": "reason ca nt new record created put rest point view put means place resource specified location tend think backbone current implementation correct change serverside logic create update put fine", "d": "1/2011"}, {"body": "right constrains serverside wo gain plus consider user chooses id signup accidently overrides stuff user x already chose login id iow serverside distinguish create bail id already exists update real problem", "d": "1/2011"}, {"body": "gain correctness putting representation resource specified location put definition fine put nt mean update also mean create want pass special parameter along request feel free setting id allowing server decide wants respect value", "d": "1/2011"}, {"body": "right passing additional params spoil model continues live clientside model containing collection parameters pure service need draws collection create becomes helper method call want persist", "d": "1/2011"}, {"body": "guess way call model", "d": "1/2011"}, {"body": "nevermind found modelpreviousattributes sorry closed guess", "d": "1/2011"}, {"body": "right however prepared multiuser environment become outdated", "d": "1/2011"}, {"body": "look work done", "d": "1/2011"}, {"body": "nathanstitt thanks sharing ideas going give try kind scenario juggy backboneorm project looks interesting unfortunately written coffeescript barrier entry many many developers wo nt even look incorporate application would need include coffeescript adding yet another library download need alter build process compile javascript coffeescript opinion tools like coffeescript used creating custom client code frameworks libraries written plain javascript widely used chance converting javascript least provide precompiled javascript version simplify using", "d": "1/2011"}, {"body": "added compiled version", "d": "1/2011"}, {"body": "juggy wow fast", "d": "1/2011"}, {"body": "juggy like approach better mine better separation existing backbone model amp collection classes also like method causes two relations refer back one another unclear call relation namespace porkepic though extraction existing project also agree taeren big fan coffee script know quite smart people though maybe one things nt get yet thanks much bringing attention think going investigate using project", "d": "1/2011"}, {"body": "coffeescript matter taste butyou save much keystroke code much readable ca nt live used namespapce porkepic solutions company reference something shorter needed much work done project especially big data different relations loaded lazily andor completed different backend request play code something extend would really like see", "d": "1/2011"}, {"body": "", "d": "1/2011"}, {"body": "would nice see logic statements made explained kind alternative history proposal would nt require special handling server", "d": "1/2011"}, {"body": "looking backbonehistory code say implementing pushstate possible server side nt problem project case serving essentially page location letting js rendering hashchange clients get redirected root path hash fragment comuserdetails com userdetails worth bothering real patch wiser monkeypatch including modified backbonehistory additional file", "d": "1/2011"}, {"body": "case nt aware project pushstate shim older browsers nt work ideally think backbone would allow integration otherwise optional use pushstate also planning looking besides redirects web application also possible rewrites url server level", "d": "1/2011"}, {"body": "would great see backbone compatible frameworks find abstraction layers useful server side plug different databases orm whatever however client side important keep file sizes small possible sort abstraction layer going require code biggest concern would increasing size backbone much really like backbone small personally use jquery makes happy looking code nt look bad requires many boilerplate function definitions adds bytes backbone course could optimized degree ie renaming frameworkadapter adapter fa something small overall minimized probably would nt increase size much", "d": "1/2011"}, {"body": "probably comes jquery similar bind used events however case agree using bindall bind confusing changing would okay", "d": "1/2011"}, {"body": "agree little confusion jquery user would argue keep bind events change underscore bind bindall context contextall something like either case change would break backwards compatibility sure worth trouble two cents", "d": "1/2011"}, {"body": "need break underscore bindbindall deal function object instead consider aliasing backboneevents bind backboneevents would ok mark backboneevents bind deprecated possibly stub could way", "d": "1/2011"}, {"body": "totally agree confusing bad underscore jquery use bind mean two different things would nice jquery underscore backbone could similar apis think could happen especially since two three libraries managed documentcloud obviously nt way change jquery point especially massive user base reluctantly agree martindrapeau name change underscore would preferred dilute meaning bind could handled alias well break existing code mark bind deprecated say reluctantly really prefer bind dealing events leaving underscore alone would certainly simpler easier much larger install base backbone simplest solution suggested dvv alias events bind events since backbone needs changed since backbone fairly new late change recommended approach use events instead events bind yet keep bind deprecated backwards compatibility bottom line something done approach taken less importance long two different bind methods different meanings nt used right next initialize could dang confusing less experienced developers", "d": "1/2011"}, {"body": "want add note deprecation consolelog recently app break firefox users nt firebug installed using consolelog take route please make sure consolelog exists function", "d": "1/2011"}, {"body": "yes work perfectly fine couple caveats models ca nt conflicting ids wo nt able use make new instances", "d": "1/2011"}, {"body": "conflicting ids might issue means use id mapper id prefix thanks reply", "d": "1/2011"}, {"body": "afraid nt builtin way view hashes routes created hashes routing strings also pass regex directly function said use get ahold internal array routes callbacks", "d": "1/2011"}, {"body": "thanks jeremy application case storing hash every state change ui url link used get right back users example hash workflow amp buttondocuments amp zoomworkflow plan log url visited user server usage analysis must say extremely impressed good backbone creating sophisticated ux thanks", "d": "1/2011"}, {"body": "take quick peek previous ticket let know think solutions presented workable", "d": "1/2011"}, {"body": "hi jeremy conclusion", "d": "1/2011"}, {"body": "better patch see pull", "d": "1/2011"}, {"body": "resolved", "d": "1/2011"}, {"body": "hi jeremy conclusion", "d": "1/2011"}, {"body": "functionality much needed especially dealing nested collections", "d": "1/2011"}, {"body": "agree regards nested collections", "d": "1/2011"}, {"body": "maybe somebody interest couchdb application come works well little advantage wrapping backbonesync eg backbonecollectionget works even collection bootstrapped via backbonecollectionrefresh data using id property greetings johannes", "d": "1/2011"}, {"body": "overrode tojson rails app id id instead reason might cause problems seems working little bit tested", "d": "1/2011"}]