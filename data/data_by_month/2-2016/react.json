[{"title": "svg elements missing", "body": "built run alpha still use svg elements like issue closure messages implied related tiedin issues fixed closed issues fixed passed reopen general svg issue ticket address", "num": "6146", "d": "2/2016"}, {"title": "way update react child components", "body": "parent element child component child elements showing anything componetwillrecieveprops componentdidupdate code working well change code like use first one code make wizard like content thanks advance", "num": "6145", "d": "2/2016"}, {"title": "componen render call lifecycle functions", "body": "project creates html layout based json file step components call lifecycle functions example component code basenode empty class rendering result console output mini project reproducible error project", "num": "6144", "d": "2/2016"}, {"title": "allow specifying new children append vs prepend reacttransitiongroup", "body": "reacttransitiongroup given dynamic array children eg first reacttransitiongroup holds exiting dom nodes see dom called see fine however transition entirely new array dom see instead see following fiddle seems next child mappings merged previous child mappings order probably fine cases would great could control order got version working locally adding prop type boolean defaults false happy turn pr perhaps another way achieve missing edit looking clear currently works actually intended behaviour looks comment like fact trying add new item existing ones object preserving intended source order bug implementation", "num": "6142", "d": "2/2016"}, {"title": "validation reactproptypesoneof compare values using objectis", "body": "check value proper also related", "num": "6131", "d": "2/2016"}, {"title": "implement reactproptypesexactly", "body": "took use case gitter chat justblackbird wanted property exactly use case instead implement make sense", "num": "6130", "d": "2/2016"}, {"title": "reactdom cost extra bytes", "body": "reactdom react good separation concerns however except special cases react applications almost always require reactdom well special cases obviously builds remove unnecessary dependency react officially serve single library includes reactdom single resource absolutely makes sense extra network request library bytes gzipped cost even multiplied since official cdns seem already redirection place moment filing issue request ends similar redirects reactdom requests place could requests mere bytes words taking overhead tcpip http add fact included part file due binary compression honestly quite surprised even decided separate libraries terms deployment", "num": "6128", "d": "2/2016"}, {"title": "spanish docs", "body": "hi noticed docs translated multiple languages right see italian japanese chinese korean would like contribute spanish version start", "num": "6126", "d": "2/2016"}, {"title": "use static get proptypes classes", "body": "regarding could something like jsx class thing extends component static get proptypes return name proptypesstringisrequired render return hello thispropsname", "num": "6125", "d": "2/2016"}, {"title": "elements visible user chrome hidpi displays", "body": "chrome hidpi displays elements exist dom react components properly displayed exist dom visible part dynamic list filtered try link recreation issue soon", "num": "6122", "d": "2/2016"}, {"title": "improve error message objects valid react child found object keys", "body": "error takes significant amount time debug reason offending object put tree information error message could provide keys would help know line code setting object child stack trace reference code render forced step thru lines code always reveal culprit least starting given line would speed process elimination keys help still enough determine precise cause code would help way detect condition debugger tried things like references", "num": "6120", "d": "2/2016"}, {"title": "requires value attribute property due inputs", "body": "landed still one final issue fix ironically initial reason problem managed property purpose requires attribute attribute correctly removed null discussed second comment seems right approach actually remove special property logic dompropertyoperations instead implement appropriate wrappers instead reactdominput etc repro original issue cc jimfb spicyj", "num": "6119", "d": "2/2016"}, {"title": "datatransfergetdata xxx handler ondragover available chrome", "body": "ca nt get data handler ondragover eventdatatransfergetdata", "num": "6118", "d": "2/2016"}, {"title": "demo page rendering properly", "body": "happening chrome safari os x", "num": "6117", "d": "2/2016"}, {"title": "way render subcomponents different dom roots would huge win", "body": "trying accomplish something could figure way would killer paradigm elegant reusable view components gotten habit rendering views like etc magic components actually render component injected via context means instance one fell swoop reskin view bootstrap modal panel etc jsx class modal extends component static childcontexttypes headerskin proptypesany titleskin proptypesany getchildcontext return headerskin modalheaderskin adds modalheader class titleskin modaltitleskin adds modaltitle class class panel extends component const modalview const panelview awesome highly recommend one pesky little thing ca nt cases animate transitions individually switching views created component provides special animate transitions one view another crossfades header pans body horizontally like typical drilldowns transitions work two views react component type different react ca nt keep component instance mounted wondering could welldesigned system rendering components like etc kind wormhole placeholder controlled ancestor component capability would possible drop view components type animate transitions subcomponents remember trying create wormhole less experienced react quickly became hacky never got working completely basically revolved around passing elements callback inside methods callback would put rendered element desired location ancestor seem remember problem things like refs though also needing use delay rendering wormholed component since triggering rendering kosher anyone tried similar things thoughts", "num": "6116", "d": "2/2016"}, {"title": "cloneelement vs createelement", "body": "anyone let know using cloneelement exist element instance createelement react element class one better term performance sometimes cloning something faster create new instance please let know thanks", "num": "6115", "d": "2/2016"}, {"title": "warn calling setstate getchildcontext", "body": "code causes maximum call stack getchildcontext thissetstate foo bar return foo thisstatefoo sort errors hard track stack trace deep react place give user invariant let know wrong", "num": "6114", "d": "2/2016"}, {"title": "button href updated component rerendered", "body": "using react seems reason react diffs dom buttons replaces text updating href attribute anchors correctly updating text href attribute code illustrates issue component cycles internal state renders link button move state next stage link works fine button href updated text var bug reactcreateclass", "num": "6111", "d": "2/2016"}, {"title": "html jsx compiler broken", "body": "displays referenceerror htmltojsx defined", "num": "6110", "d": "2/2016"}, {"title": "test swipe testutils", "body": "anyone knows simulate swipe using testutils event simulation", "num": "6108", "d": "2/2016"}, {"title": "navigator defined", "body": "running tests watch mode results eventual error navigator defined happening test run executionenvironmentcanusedom becomes true", "num": "6107", "d": "2/2016"}, {"title": "proposal bind component syntheticevent", "body": "common way send additional properties onclick handlers jsx thispropsitemsmap x gt x eslint suggests constant bind calls render good performance recommends pass data child onclick handler back parent handler jsx var list reactcreateclass render return thispropsitemsmap item gt var listitem reactcreateclass render return onclick thispropsonitemclick thispropsitemid however feel bit detrimental readability mention bit pain write something simple partial functions get used everywhere seemingly another programmer need go child definition could well another file find exactly child passing parameter list mention complex onclick handler may become another developer coming modifying code handle event properly well god help propagate amp modify params multiple layers example jsx function foo text return text class bar extends reactcomponent handleclick e consolelog ecomponentpropstext idea attach component event originated synthetic event would something like possiblefeasibleeven needed bind really bring much impact another better way without", "num": "6105", "d": "2/2016"}, {"title": "string proptype proptypesstring boolean proptype proptypesbool", "body": "one abbreviated match typeof", "num": "6103", "d": "2/2016"}, {"title": "way handle setstate changes output ssr", "body": "wondering best way render serverside without rendering client handle state changes mean get html server component state changing example server gets requests generate html server requires react component passing props react component renders server ajaxsocket query get info event sent response comes later react component changes state changing output hmtl generated ready latest state changes happening reactdomrendertostaticmarkup expected nt wait component finish state changes case wait data rerender achieve queries first passing data props way thanks", "num": "6102", "d": "2/2016"}, {"title": "testutils simulate nt set synthetic event type", "body": "undefined received handler nativeevent type matter needs added somewhere realize sustainable set possible fields simulated event type least makes sense verification getting right sort event", "num": "6100", "d": "2/2016"}, {"title": "warning iecompatibilitymode undefind", "body": "read snippet source reactdomjs pic show confused documentdocumentmode value undefined running react compatibility mode got errors like pic show without warning compatibilty mode may know meaning snippet whether add code deal case suffered", "num": "6098", "d": "2/2016"}, {"title": "shouldcomponentupdate vs componentshouldupdate", "body": "choose former latter matches bit better componentdidmount", "num": "6096", "d": "2/2016"}, {"title": "react addons make react code imported application bundle", "body": "stumbled problem days getting really famous error two copies react inside project nt know project decided bundle react one file application code another one happening even explicitly saying wanted react external browserify still getting inside application bundle two bundles react addons something like following entry point reacttransitiongroup statement telling browserify webpack treat react external still get react code inside application bundle forget treat addon external since last importing react inside npm package declared external browserifywebpack chance changing future like example exporting addon code completely outside react code imports react npm package concern react project developers using asking saw dozens questions addcomponentasrefto error people asking seem error described demo", "num": "6093", "d": "2/2016"}, {"title": "testutils search custom component within dom element", "body": "old issue invariant violation findallinrenderedtree instance must composite component know brought somehow declared ok keeps causing trouble tests thought give one shot problem search custom component within dom node made sample illustrate problem sample simplified version real problem facing datagrid component renders bunch row components turn render bunch cell components cell either render readonly text custom component passed via props custom editor want turn cell functional stateless component better performance problem tests given row find custom editor cell given index previously react v lt think possible find div rendered given cell within div find custom editor longer possible also since cell stateless functional component locate using test api really believe testing api incomplete right change guys could take another look", "num": "6088", "d": "2/2016"}, {"title": "onchange event input type number", "body": "seen altering value input type number element triggered thing case react pen illustrate case view console", "num": "6087", "d": "2/2016"}, {"title": "allow cite attribute blockquote element", "body": "currently supported element attribute since unknown react thrown away render cite url designates source document message information quoted attribute intended point information explaining context reference quote", "num": "6084", "d": "2/2016"}, {"title": "calling rendertostring twice second time nt fire lifecycle events", "body": "trying implement server side rendering reactredux components use start fetching data rest api use simple counter redux store see many fetching requests pending code server side javascript reactdomrendertostring rootele storesubscribe gt const state storegetstate statewait const html reactdomrendertostring rootele resrender html would work except fact second fires componentwillmount events increase wait counter results infinite loop ideally wondering way call wait seconds wait counter go zero edit temporary fix unsubscribing redux store reach wait javascript reactdomrendertostring rootele const unsubscribe storesubscribe gt const state storegetstate statewait unsubscribe const html reactdomrendertostring rootele ressend html though still bunch useless async calls second rendertostring calls componentwillmount methods", "num": "6083", "d": "2/2016"}, {"title": "add optout contenteditable warning", "body": "", "num": "6081", "d": "2/2016"}, {"title": "environment checks done", "body": "going source react npm install noticed blocks like calls warning feature ternary environment check wrapping environment conditional seems unnecessary already gone foundreplaced instances wanted see philosophical reason submitting pr thanks", "num": "6080", "d": "2/2016"}, {"title": "issue native change event select valuelink", "body": "hello trying make validator forms want make possible usage linkedstatemixin validator inputs validation use native events addeventlistener make following actions approximate algorithm event handlers change blur keyup code perform setstate method valid state chaged input tag works fine value changed expected select tag stateselectvalue changed one time problem think issue possible make things work wrong way jest tests share needed", "num": "6079", "d": "2/2016"}, {"title": "frameworks", "body": "facebook recommend good backend go react maybe something already login page features built", "num": "6078", "d": "2/2016"}, {"title": "html jsx compiler broken", "body": "hi today tried use html jsx compiler looks broken", "num": "6077", "d": "2/2016"}, {"title": "reactjs setstate bugmy fault", "body": "hello guys made exemple see exactly talking used context storeinput function app passes one component sorry short message nt best writing english skills easier show nt understand something please let know thanks", "num": "6075", "d": "2/2016"}, {"title": "thispropschildren rerender", "body": "example js class parent extends reactcomponent componentdidmount settimeout gt thisforceupdate render return thispropschildren class child extends reactcomponent render return thispropsrandom class app extends reactcomponent render return", "num": "6072", "d": "2/2016"}, {"title": "disabled radio button fires onchange event double click internet explorer", "body": "internet explorer disabled radio button fire onchange event double clicked checked state change onchange event fires nonetheless", "num": "6069", "d": "2/2016"}, {"title": "proposal componentwillprepareunmount continuecallback", "body": "edit discussion thread amended proposal working lot animations combination react lately lifecycle methods make transitions components walk park struggled get scenario unmounting pleasant experience end though come lifecycle method proposal could incredibly powerful would declared component delay actual unmount nothing happened component calls provided callback would resume actual unmounting component pending unmount state restored actual unmount takes place unmount canceled component treats change regular update fires etc addition called give chance react specifically event edge case mitigation ancestors override descendants ancestor component using unmount preparation unmounts descendant unmounts instantly without preparation unless ancestor also utilizes would give arbitrary time prepare would allow us gracefully perform animation components right really unmounted letting component specific code decide disappear example javascript var styles styling var tweenoptions tween options menu item fades scales mount fades scales unmount class menuitem extends reactcomponent componentwillmount thistweens opacity new tween tweenoptions scaley new tween tweenoptions thisanimateshow usage javascript class menu extends reactcomponent render var itemelements thispropsitemsmap item gt return return menuproptypes items reactproptypesarrayof reactproptypesshape id reactproptypesany label reactproptypesstring isrequired think", "num": "6067", "d": "2/2016"}, {"title": "dynamic proptypes", "body": "hi trying construct mixin takes devdefined component specification constructs proptypes defaults accordingly trying something like code work anyway something similar many thanks", "num": "6066", "d": "2/2016"}, {"title": "locate line number react makes warning like unknown dom property class mean classname", "body": "locate line number react makes warning like unknown dom property class mean classname hint code made warning", "num": "6062", "d": "2/2016"}, {"title": "seperate react reactdom original react", "body": "past import react react import hello componentjsx main function main reactrender documentgetelementbyid app import react react import hello componentjsx import reactdom reactdom main function main reactdomrender documentgetelementbyid app look like past easy import react post indicate react change", "num": "6061", "d": "2/2016"}, {"title": "try statements vs perf", "body": "profiling app noticed warnings app reallly slow code tryfinally even without catch reasons use", "num": "6057", "d": "2/2016"}, {"title": "performance unmounting amp mounting component vs hiding", "body": "preferred method performance benefit hiding node dom via css vs mounting unmounting example render function following code javascript const map thiscontext let selectedfeature let content infer selected feature info window mapinfowindow amp amp mapinfowindowgetselectedfeature selectedfeature mapinfowindowgetselectedfeature selectedfeature undefined content else content return content wondering preferred something like first snippet mounts unmounts node feel cleaner analysis component since know selectedfeature always defined nt need conditional code snippet analysis component change frequently application wondering one method preferred performant performance probably go first snippet feels cleaner im guaranteed value selectedfeature", "num": "6056", "d": "2/2016"}, {"title": "react unmount components upon event", "body": "event fired eg tabwindow closed page reloaded react unmount components prevent memory leaks", "num": "6055", "d": "2/2016"}, {"title": "elements altattribute default true used without value", "body": "consider following result fails load user displayed instead nothing fiddle alt attribute defines alternative text describing image users see displayed image url wrong image one supported formats image yet gt downloaded usage note omitting attribute indicates image key part content textual equivalent available setting attribute empty string indicates image key part content nonvisual browsers may omit rendering", "num": "6054", "d": "2/2016"}, {"title": "reactdom define react", "body": "reactrender works fine reactdomrender name version description main indexjs scripts test echo error test specified amp amp exit build webpack dev webpackdevserver devtool eval progress colors hot contentbase build author eason license isc dependencies babelcore babelloader react webpack webpackdevserver devdependencies babelpresetreact", "num": "6053", "d": "2/2016"}, {"title": "programmatically access warnings errors rendering", "body": "let say component proptypes want ensure contract broken test unfortunately nt throw error display warning statement like warning statement available thus able alter test thus ensuring contract maintained", "num": "6051", "d": "2/2016"}, {"title": "breaking change testing events", "body": "test passing context selectchange function var eventstub var rendered assertion last line failing seems related change perhaps cleaning error objects next tick mean time work around", "num": "6050", "d": "2/2016"}, {"title": "oncancel event", "body": "nt see event list supported events would possible add list used dialog element already available chrome", "num": "6049", "d": "2/2016"}, {"title": "following npm getting started guide incomplete results errors", "body": "decided try react today began following getting started guide using react npm unfortunately unable get example running first problem encountered missing html file scavenged lower page adapted however loaded file html page received following error browser console step missed somewhere", "num": "6047", "d": "2/2016"}, {"title": "property key allowed", "body": "heads anybody going debugging hell fancy component eg think smart passing prop named component set know one react complains needing multiple elements level undefined within component key ref reserved words allowed passed props renaming prop resolves issue bad react nt warn many things would great would reflected prominently docs reserved names similar", "num": "6045", "d": "2/2016"}, {"title": "failed execute write document", "body": "try something like react example append embedcode render return examplejs like raise error failed execute write document insert script tag like react", "num": "6043", "d": "2/2016"}, {"title": "react lenient returning jsx expression render", "body": "random hello react fiddle plucked google var hello reactcreateclass render function return hello thispropsname reactdomrender documentgetelementbyid container reference suppose formattingstylistic purposes want format inline return expression like var hello reactcreateclass render function return hello thispropsname reactdomrender documentgetelementbyid container react throws invariant violation put actual expression new line instead line return statement reference react made lenient example allowed react version referenced fiddles", "num": "6042", "d": "2/2016"}, {"title": "async routes cause serverside checksum invalid error", "body": "note may issue react router instead please inform notify using webpack reactrouter react got error using reactrouter async routes serverside rendering routescjsx coffee routes path game getcomponent location cb gt requireensure require gt cb null require viewsgame change longer get error coffee routes path game getcomponent location cb gt cb null require viewsgame bug something else", "num": "6041", "d": "2/2016"}, {"title": "dangerouslysetinnerhtml warn markup invalid", "body": "expects valid sanitized markup library like may able guarantee markup sanitized spot many obvious errors indication markup unsanitized things like instead per also good thing warn catch subtle ssr markup checksum issues markup nt validate warn tricky part nt want markup validation library required production build", "num": "6040", "d": "2/2016"}, {"title": "use mixed arrays strings warning", "body": "js var hello reactcreateclass render function return thispropsname reactrender working gt documentbody warning jsfiddle", "num": "6038", "d": "2/2016"}, {"title": "libraries version jquery marked old tutorial", "body": "seeing indexhtml found libraries jquery marked version old jquery latest version version indexhtml marked latest version version indexhtml nt update libraries", "num": "6036", "d": "2/2016"}, {"title": "dynamic pure components reinitialized despite key attribute using jsx", "body": "hello using pure components generating dynamically registers change react diffing algorithm despite key attribute therefore components state ex focus resets rerender example expect weird way using components example function internal work assign state event handlers form components returns bound components array additional props provided assigned using destructuring case functions return input controls stateevent handling work bit repetitive depending number fields lot trying new ways extracting components used elements diffed get reinstantiated time lose focus key stroke alternatively write view portion follows everything works fine since components functions bit odd looking especially considering old deprecated component syntax suspect issue something changed way appreciate help thanks", "num": "6035", "d": "2/2016"}, {"title": "extending reactdom", "body": "would like create renderer extends reactdom overrides parts goal able keep reactdom swap parts ultimately since reactdom buried inside react created script downloads reactdom files created jscodeshift transform rewrites imports files like customize fun seems react bring significant changes regarding reactdom react separation work around end custom try render something custom get error since injection called custom injection possible missing something suspect global tying things somehow ca nt figure created repo little experiment", "num": "6033", "d": "2/2016"}, {"title": "profile attribute supported", "body": "profile missing meanwhile profile attributes standards kind blatant copy hey worked also anticipating need glance mozilla developer site one day closed wo nt issue anymore", "num": "6029", "d": "2/2016"}, {"title": "render reconciliation causes npe", "body": "view controlled select onchange event fires resulting function actually changes view removing select get error reproduced react also noticed nt get error older version line throws reactdomselect javascript function handlechange event var props thiscurrentelementprops wrapper state null var returnvalue linkedvalueutilsexecuteonchange props event thiswrapperstatependingupdate true wrapperstate null executeonchange happens reactupdatesasap updateoptionsifpendingupdateandmounted return returnvalue able see fix similar situation nt know similar check could applied maybe nt remove select result onchange event", "num": "6027", "d": "2/2016"}, {"title": "optional href property removed render set empty", "body": "optional specific meaning set without value ie vs former link back current uri latter placeholder link especially irksome react app unexpectedly set easily change meant full page reload fiddle demoing bug see rendered instead", "num": "6026", "d": "2/2016"}, {"title": "getting started docs ambiguous", "body": "working user new would run following nt work webpack throws error correct webpack invocation know note default react development mode slower advised production use react production mode set environment variable nodeenv production using envify webpack defineplugin example new webpackdefineplugin processenv content go filename", "num": "6025", "d": "2/2016"}, {"title": "reactjs app wo nt run android webview", "body": "getting following error upon loading app runs well modern browsers pcmac ios uiwebview mobile safari android also chrome android gt consulting table shows android supports well run reactjs applications fine ideas", "num": "6024", "d": "2/2016"}, {"title": "setters preserved reactcreateclass", "body": "setters ignored work class syntax would nt possible create component class object given preserve settersgetters", "num": "6023", "d": "2/2016"}, {"title": "respondereventplugin assumes touch events", "body": "based comment implemented dragndrop browser respondereventplugin worked like charm upgrading breaks plugin problem assumption plugin used touch events besides plugin referencing touch events throughout code breaking line expects properties enabling also breaks reactbrowsereventemittertest multiple tests break adding respondereventplugin commenting call appears fix plugin like continue using plugin concerned longer intended used use case expected reactnative configurationconcept missing nt tested releases believe case", "num": "6021", "d": "2/2016"}, {"title": "porting reactperf new devtools api", "body": "concerns heard order importance gated react native wants way enable production builds pass accumulated info systrace often broken refactoring appears generic depends specific module method names obscure bugs hard fix coupling visualization poor working new devtools api align mistaken please let know started introducing new set apis firstclass instrumentation makes sense transition new api fix issues talked people react native understand far asap want remove function wrapping completely addresses somewhat mitigates overhead fixing want create devtool like eg addresses unlike gated addresses methods profiling functions addresses granular methods specific parts react lifecycle needed addresses calls gated runtime flag eg addresses future rather reach profiled functions accept arbitrary arguments addresses would separate generating usermeaningful data accumulation would easy test addresses bonus use noop decorator babel plugin insert calls mitigates pain potential breakage addressing bonus rather api provide component interprets data displays overlay web native addresses decorator babel plugin part one sure would involve complicating tooling hand allow adding performance measurement functions codebase without risking early missing calls similar breakage refactorings first actionable step opinion would remove function wrapping gate existing replace explicit calls gated wherever used would still pass function argument rewrite everything would give rn team freedom unlock future refactorings also combine introducing decorator babel transform way want go avoid adding manual calls place make sense missed", "num": "6015", "d": "2/2016"}, {"title": "input rerender happen expected value null", "body": "building app series singlecharacter text inputs auto advances input app syncs data servers input one list characters null minimal demo illustrate happening const clearedvalue null const component reactcreatecomponent getinitialstate function return myinputvalue clearedvalue validateinput function value return value valuematch g getstorablevalue function value value return clearedvalue return value onchange function e consolelog onchange event fired thisvalidateinput etargetvalue consolelog onchange event accepted thissetstate myinputvalue thisgetstorablevalue etargetvalue else consolelog onchange event rejected epreventdefault render function return notice clear field type anything valid onchange fired suspect something culprit since tells react component nt controlled nt know rerender input correct state changing empty string corrects issue issue really nt want convert nulls empty strings since data server nulls intentionally obviously nothing stopping getinputvalue function thisstatemyinputvalue null return return thisstatemyinputvalue return workarounds discussion tell input element controlled avoiding constant lt null conversion would ideal situation since lot moving parts app may times per render definitely edge case multicharacter input validation second character would kick validation would good", "num": "6014", "d": "2/2016"}, {"title": "closer control reconciliation", "body": "running use case nt seem supported react using redux reactredux example problem could potentially extend component takes children trying build set components independent one another point included page script tags component stateless component container connects redux store const widget data update gt data data const widgetcontainer connect state gt data statedata dispatch gt update val gt dispatch type update payload val widget redux store present welldefined location want render component way store present want render way written helper functions generic way initially render component target dom node store becomes present fires event helper functions listening render container component wrapped target dom node works great dom state however want allow user interact widget store present instance example able enter text dom state persist rendered place currently possible due react reconciliation algorithm two components different react attempt reconcile subtrees relevant code causes existing node thrown away along anything user may typed way tell react want two components reconciled foreknowledge generate identical dom structure want know workaround issue nt valid enough use case consider adding way force react reconcile two elements different one potential solution may infeasible due unfamiliarity codebase consider two elements different identical candidates reconciliation", "num": "6013", "d": "2/2016"}, {"title": "svg clippath wrong namespace", "body": "hi svgclippath created dynamically ie via button click wrong namespace details press button test use react latest react thought work thanks pull request see added works ok", "num": "6012", "d": "2/2016"}, {"title": "link expired", "body": "hi link got expired update", "num": "6010", "d": "2/2016"}, {"title": "remove event listener used bind syntax", "body": "trying communicate iframe postmessage api issue eventlisteners management stated docs react every method automatically bound component instance except using class syntax problem done event ca nt remove listener ca nt keep reference handler could try encapsulate function encapsulating function would also need binding could try super constructor sure good idea plus nt know args need quite sure missing important point help would much appreciated export default class somecomponent extends component handleiframedata event stuff need set component context get props example componentdidmount windowaddeventlistener message thishandleiframedatabind false componentwillunmount wo nt work thishandleiframedatabind thishandleiframedata windowremoveeventlistener message thishandleiframedata false render return thanks anyway", "num": "6007", "d": "2/2016"}, {"title": "reactcloneelement onclick work", "body": "hi im trying add onclick handler already existing element example jsx render let element return reactcloneelement element onclick function consolelog test result nothing happens click element setting directly works", "num": "6006", "d": "2/2016"}, {"title": "defer execution unmount life cycle hooks", "body": "unmounting take significant unbounded time traverse tree call lifecycles smallest problem incremental reconciliation mount arbitrary location gt update boundary gt mount boundary gt unmount theory remove node tree first call lifecycles later idle time means refs wo nt access nodes document anymore reading information would longer work problem space might also related animations exit animations want componentnode exist tree long needs finish animation offscreen asynchronously get deleted tree eventually get cleaned calling unmount lifecycles", "num": "6003", "d": "2/2016"}, {"title": "fails called spec created", "body": "hi react team right following code fails fails function called references created nt regular prototype methods like patch fixes issue let know based explanation agree worth fixing submit pr motivation fixing experimenting building react bindings language called skew skew compiles javascript among languages maptype skew compiles instances skew code translates roughly sensible need map inherit skew like able something like regular function defined react library fails passes skew map javascript instead something like wrap input something inherits passing real works means api wo nt mirror react directly means harder people learn", "num": "6002", "d": "2/2016"}, {"title": "eventpersist present running tests", "body": "nt seem give event function result event handler debouncedthrottled becomes null actual handler called", "num": "5998", "d": "2/2016"}, {"title": "console shows error uncaught invariant violation", "body": "making app based boilerplate ref gist app building fine console shows error uncaught invariant violation element type invalid expected string builtin components classfunction composite components got undefined", "num": "5995", "d": "2/2016"}, {"title": "license offline use", "body": "hi react utilized offline commercial product free needs done license file cryptic understand xdvarpunen", "num": "5993", "d": "2/2016"}, {"title": "visit official site writing language default english", "body": "visit link gettingstarted english page read page writing language", "num": "5991", "d": "2/2016"}, {"title": "updates queued properly using unstablerendersubtreeintocontainer", "body": "cursor jump end text field editing text probably nt need fixed milestone get fixed point cc jquense", "num": "5990", "d": "2/2016"}, {"title": "pull request htmltojsx", "body": "hi put pull request htmltojsx reactmagic fix improperrenderingofbrackets issue days ago wondering typical timeline reviewing cheers", "num": "5985", "d": "2/2016"}, {"title": "chrome dev tools warning reactdomcomponent access props dom node", "body": "created component uses ref attribute read width height dom node looks like javascript import styles makewrappercss import react component react import makeheader makeheadermakeheader import makebarchart makebarchartmakebarchart export default class makewrapper extends component render return resize width height offsettop offsetleft thispropsonresizemakewrapper width height offsettop offsetleft everything looks good open chrome dev tools look properties div element get following warning console warning reactdomcomponent access props dom node instead recreate props render originally read dom propertiesattributes directly node eg thisrefsboxclassname dom node rendered message actually shown twice console also noticed two different properties exists might causing error show twice chrome looping dom properties something wrong code side effect using chrome dev tools", "num": "5984", "d": "2/2016"}, {"title": "error boundary catch errors componentwillunmount", "body": "", "num": "5983", "d": "2/2016"}, {"title": "finddom audio tag nt work", "body": "assuming audio tag correctly playing audio file currenttime seconds run following code output console replace first line everything works expected beginning thought deep copy issue would nt explain consolelog inside try", "num": "5981", "d": "2/2016"}, {"title": "error boundaries attempting unmount notyetmounted siblings", "body": "shows failing component composite sibling within error boundary yet rendered", "num": "5980", "d": "2/2016"}, {"title": "componentdidmount called visual rendered", "body": "trying get visual attributes width precise component rendered css applied trying width still sure wrong output click header button reroute back page ie trigger update called proper width missing something bug thanks lots folks javascript import react component react export default class ribbonheader extends component componentdidmount consolelog component mount ribbon width thisrefsribbonsvgwidthanimvalvalue thispaintinsvg shouldcomponentupdate consolelog component update never called return true componentdidupdate automatically called generate routing event updates consolelog component update ribbon width thisrefsribbonsvgwidthanimvalvalue width good thispaintinsvg paintinsvg const refribbon thisrefsribbonsvg dosomesvgmagicthatdependsonthewidth refribbon render consolelog rendering edit adding timeout componentdidmount job although probably normal", "num": "5979", "d": "2/2016"}, {"title": "defined", "body": "class trying get request componentdidmount function however initially load page component get following error followed example xxx changed perhaps using something improperly class nativeapp extends reactcomponent state banners loadbanners thisserverrequest get apibanners function res thissetstate res bind componentdidmount thisloadbanners render return manually load banners export default nativeapp", "num": "5975", "d": "2/2016"}, {"title": "react reactdom split proposal", "body": "following bit planning understand reactdom split completely react shared global owner referenced sebmarkbage gist relevant part owner owner concept relies able track shared global state flag time creating elements means create dependency single shared global stateful module react components also means effectively react render function truly pure function since creating element depends global state idempotent means ca nt reliably use things like memoized functions kind functional goodies react native currently appears migration path following two files reactlibreactnativejs reactlibreactdomnativejs solutions need way share module rn get free understand works correctly future npm solution reactdom apply rn react reactdom npm distro shared npm module accomplish shared dependency react reactdom browser distro likely need similar hack current first two pretty straightforward create new package purely file split published never changed add react reactdom packagejson files publish fin carry browser distro need custom build files current idea react browser distro gets hook reactdom hook onto majority purely chore work curious would provide attack vector leaking internal state current reactdom hook leak internals far aware although may important since reactdevtoolshook also allows visitor react page get internal state continuing work proposal make sense alternative solutions team considered", "num": "5974", "d": "2/2016"}, {"title": "touch events android", "body": "hello touch events android nt working using react according issue fixed still working ideas", "num": "5972", "d": "2/2016"}, {"title": "docs run demo code get false true docs", "body": "doc code test comes false somebody help", "num": "5971", "d": "2/2016"}, {"title": "include sri hashes fbme links download page", "body": "need little bit hard code since actually want generate release time could least manually generate hashes need docs display sri", "num": "5970", "d": "2/2016"}, {"title": "uiexplorer crash", "body": "execute gradlew examples uiexplorer android app installdebug open uiexplorer app crash crash log reacttxt", "num": "5969", "d": "2/2016"}, {"title": "typeerror set property initialvalue null reactdomselectpostupdatewrapper", "body": "issue using latest running issue error select navigating away one place another place causing select throw even though unmounted error reports happening setup currently integrating app pieces render empty container renders components render appropriate dom containers seemingly error narrowed calling occurs removed error stops happening realize mounting existing node react root cause unmount mount correct things repro attempted reproduce luck moment even though narrowed call click originating different reactdomrender container sure eventing thing clicks different reactdom roots applying everywhere else stack trace code code causing issue looks like import react component proptypes react import render unmountcomponentatnode reactdom import provider reactredux import applicationsrenderer applications let getcontainer gt documentgetelementbyid dashboardbody export default class dashboardrenderer extends component constructor props context super props context thisrenderintocontainer thisrenderintocontainerbind componentdidmount thisrenderintocontainer renderintocontainer let store container container thispropsroute let router thiscontext thissection getcontainer thissection unmountcomponentatnode thissection render thissection componentdidupdate prevprops let container thispropsroute let container prevcontainer prevpropsroute componentwillunmount unmountcomponentatnode thissection render return null dashboardrenderercontexttypes router proptypesobject", "num": "5968", "d": "2/2016"}, {"title": "", "body": "looking tests stating nt get fired click button disabled nt seem shown anywhere documentation slightly tangental parent element somebody clicks button fired parent element", "num": "5967", "d": "2/2016"}, {"title": "attributes set ssr used", "body": "maybe nt care attributes currently set ssr used sure worse old behavior different initial render compared subsequent renders could tricky one people debug hit since depends subtle difference ssr vs csr imagine people frequently fail test components ssr difference likely catch surprise", "num": "5966", "d": "2/2016"}, {"title": "bug jsx allow tag use property", "body": "node ver babel deps babelcli babelcore babeleslint babelloader babelpluginaddmoduleexports babelpolyfill babelpresetreact babelpresetreacthmre seems cause custom html tag", "num": "5964", "d": "2/2016"}, {"title": "validate attributes element", "body": "mistakenly used attribute style element html label required color red soon found attribute removed running code attribute still element realize attribute standard attribute elements like etc think allowed render component mount phase like arbitrary names xyz else cause people confusion notice solves problem flag rendered component mount removed correctly inconsistent attributes selectchecked rendered react validate attributes element like", "num": "5963", "d": "2/2016"}, {"title": "jquerybootstrap example uses exist", "body": "introduced", "num": "5959", "d": "2/2016"}, {"title": "enhancement build way generate function sets state variable", "body": "created mixin morning handle creating functions call setstate component mounted would nice built react component since think pretty common pattern handle ui events setting state variable", "num": "5958", "d": "2/2016"}, {"title": "bug resolving default props htmlallcollection fix", "body": "introduction found bug resolving default props component props property htmlallcollection react ignores value uses default value take collection look end topic simple function test internet explorer version lower simple use case chromefirefoxmodern ie yeah know returns htmlallcolection documentall old ie returns true htmlallcollection weird collection source bug fix release file reactjs line code bug typeof props propname undefined code fix props propname undefined btw undefined faster typeof undefined chrome ie reproduction open firefox chrome higher fiddle raw workaround change", "num": "5957", "d": "2/2016"}, {"title": "nesting components fails latest stable react typescript amdrequirejs", "body": "currently working example project uses latest react typescript using tsx files together amd module loading system requirejs buildingrunningdebugging visual studio ce however try nest react components parent react component getting exceptions requirejs running app child react components working fine individually problem really seems come nesting run project using older version react using amd modules app works fine also nesting react components made test repository public hellopenguin old project using react using amd new project latest react using amd remove lines applicationviewtsx see app runs fine individual react components also work fine must something overlooking ca nt seem pin anyone know could wrong fix problem thanks", "num": "5956", "d": "2/2016"}, {"title": "add new without namespace", "body": "list elements push new elements added without namespace ideas", "num": "5954", "d": "2/2016"}, {"title": "controlled inputs update order causing cursor jump", "body": "subtle change introduced dominput component switched current lighter weight wrappers order ensure things like nt happen inputs defer update updates flushed controlled gives incoming props chance make component inadvertently resets value last essentially old set dom node new chance pushed input props causes cursor jump end originally seen addressed however recent changes removed call directly difference enqueues update queue whereas updatewrapper leads cases input actually updates parents finished updating related issue however cause nothing actually async relevant userland implementations uncontrolled components create situations parent component input also deferring update tried bit put together pr address nt know easy fix long domcomponent using something like test case demonstrating bug expected set manually set actual set js var wrapper reactcreateclass eventuallyupdate e thisvalue etargetvalue render return var inst reacttestutilsrenderintodocument var inputnode reactdomfinddomnode instrefsinput var setcount inputnodevalue bar var desc objectgetownpropertydescriptor inputnodeconstructorprototype value objectdefineproperty inputnode value get function return descgetcall set function val setcount descsetcall val reacttestutilssimulatechange input target value bar expect setcount tobe", "num": "5952", "d": "2/2016"}, {"body": "pinged cpojer look might want downgrade jest meantime", "d": "2/2016"}, {"body": "mean use get error message get filtered fail subtle ways specifically issue would helpful provide minimal testcase jsfiddle feel free fork describes expected behavior demonstrates actual behavior differs", "d": "2/2016"}, {"body": "entirely clear mean child elements showing anything componetwillrecieveprops componentdidupdate tried pulling code jsfiddle nt run missing setup code among things anyway looks like probably usage question use github track bugs react core rather usage questions appropriate place usage questions stackoverflow going close issue feel free continue conversation thread move discussion stackoverflow provide jsfiddle demonstrates bug react core happy reinvestigate", "d": "2/2016"}, {"body": "sorry explain prop called data initially set data thisstatedata executed first shows props values thisstatedata change parent element shows nothing child element normally componentwillreceiveprops work prop changes share entire code call react wizard import react component react import reactwizard reactwizardjs class autoplaylistvideo extends component constructor super openautovideomodal addautovideoform modal show render return video play lists create class theadelement extends component constructor super render let theadtitles var titlevalues thispropsheadingssplit titlevalueslength gt theadtitles titlevaluesmap function value index return return theadtitles class tbodyelement extends component render return class createautoplaylistmodal extends component constructor super thisstate data render export default autoplaylistvideo react wizard component use stricts import react component react import reactwizarditem reactwizarditemsjs import categorystore storecategorystorejs import subcategorystore storesubcategorystorejs class reactwizard extends component constructor props super props thisstate childitems step styleclass null category null data thisdivstyle thisdivstylebind thischangestep thischangestepbind thisupdatewizard thisupdatewizardbind componentwillmount thisupdatewizard updatewizard var wizarditems thissetstate childitems wizarditems thisforceupdate componentdidmount thissetstate styleclass thisdivstyle thisstatestep divstyle step return width thisstatechilditemslength px transform translatex step px render var currentbutton switch thisstatestep case currentbutton prev cancel next next prevclass btndefault nextclass btnprimary break case thisstatechilditemslength currentbutton prev back next finish prevclass btnprimary nextclass btnsuccess break default currentbutton prev back next next prevclass btnprimary nextclass btnprimary break var childitems thisstatechilditemslength gt childitems thisstatechilditemsmap value index gt return var currentstep thisstatestep return childitems next current var var currentstateelement datawizard current find formcontrol var currentdata var currentstatedate thisstatedata currentstateelementval currentdata currentstateelementattr name currentstateelementval var newobject extend currentstatedate currentdata thissetstate data newobject switch current case thischangestep thisstatestep break case thisstatechilditemslength thischangestep thisstatechilditemslength break default thischangestep thisstatestep break prev current var switch current case thischangestep break case thisstatechilditemslength thischangestep thisstatechilditemslength break default thischangestep thisstatestep break changestep step thissetstate step step styleclass thisdivstyle step export default reactwizard react wizard child components created sibin import react component react import categorystore storecategorystorejs import subcategorystore storesubcategorystorejs var reactwizarditem class reactwizarditemstart extends component constructor super thisstate categories null componentdidmount thissetstate categories categorystoregetcategories render var mycategoriesr null thisstatecategories null mycategoriesr thisstatecategoriesmap function value index return return category select mycategoriesr reactwizarditemstart reactwizarditemstart class reactwizarditemcenter extends component constructor props super props componentwillreceiveprops nextprops consolelog nextprops consolelog props updated componentwillupdate consolelog run state changes render consolelog render return subcategory select reactwizarditemcenter reactwizarditemcenter class reactwizarditemfinish extends component render return playlist reactwizarditemfinish reactwizarditemfinish export default reactwizarditem", "d": "2/2016"}, {"body": "mini project minimal example appear using extensions like could certainly contribute lifecycle weirdness repro little complex see going first glance clear bug react something else going create minimal repro within masterfuture jsfiddle would help us identify issue base jsfiddle includes use starting point", "d": "2/2016"}, {"body": "polyfilled", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "seems reasonable inlined couple places short probably", "d": "2/2016"}, {"body": "zpao point places maybe time use polyfill instead inlining", "d": "2/2016"}, {"body": "discussion elsewhere least time trying avoid another polyfill", "d": "2/2016"}, {"body": "absolutely makes sense extra network request library bytes gzipped bytes aims keep postsplit compatibility version since still support warning standalone react build include reactdom avoid breaking people updated code yet since want duplicate code use trick reexporting hidden export old new code works however next versions support old anymore deprecated ongoing work really splitting two packages track split bytes anymore", "d": "2/2016"}, {"body": "gaearon true even move code around still eating second round trip apparent reason common case user want iff using makes sense default packaged together notable counterexamples like reactart people using commonjs anyway deduplicate easy make argument bundled default", "d": "2/2016"}, {"body": "thanks explanation however seems little harsh requests could divide scenarios present time discussion separation terms deployments make sense could well remained library exported separately future user scenarios pretty much almost always browser libraries going taken even including redirects take place mention longer relevant however seem prudent deployment option include single unit", "d": "2/2016"}, {"body": "jimfb prasannavl yeah definitely seeing points hand feels like different packaging commonjs umd might get really confusing", "d": "2/2016"}, {"body": "yeah could maintain api export react reactdom mentioned thread going close thread favor reopening", "d": "2/2016"}, {"body": "would awesome one day might change way look languages pattern open pull request ideally could find another native spanish speaker could review translations would help us ensure quality lot docs get updated may want find people help working branch fork commit review would recommended workflow go route", "d": "2/2016"}, {"body": "would code spanish", "d": "2/2016"}, {"body": "going traditional spanish yes going use different locale use appropriate code eg", "d": "2/2016"}, {"body": "thanks", "d": "2/2016"}, {"body": "montogeek maybe join efforts inside org mantain docs people think enough spanish community need etc", "d": "2/2016"}, {"body": "spanish community countries speak spanish language spain", "d": "2/2016"}, {"body": "hi paul hola montogeek montogeek bjrmatos would love help translatereview spanish docs based nyc come mexico would love contribute making react accessible hispanos", "d": "2/2016"}, {"body": "yes truth community need translate eses", "d": "2/2016"}, {"body": "hi could help guys count make space tomorrow", "d": "2/2016"}, {"body": "keeping translations uptodate ongoing effort rather actionable issue nt need separate issue track language tracking improved translation management going close issue valuable discussion please continue discussion thread move discussreactjsorg", "d": "2/2016"}, {"body": "lucyorbach foxplatevevo normancarcamo feel free comment", "d": "2/2016"}, {"body": "sorry forgot mention montogeek sweatsmile", "d": "2/2016"}, {"body": "yes technically however nt like static getters avoid one reason nt match behavior static properties getter could something mutative allocating call could return different things time nt match expected behavior preferred syntax property initializers spec reached point standardization process comfortable recommending documentation", "d": "2/2016"}, {"body": "please suspecting issue end never seen hidpi anything special would love proven wrong", "d": "2/2016"}, {"body": "zpao jimfb created demo application attempt recreate issue using identical code app issue replicated possibly due dependency configuration process go ahead close", "d": "2/2016"}, {"body": "try include name object currently rendering ensuring components important warnings also throw catch error turn pause caught exceptions option js debugger inspect stack bit getting exact line number probably something want follow along going close nt anything else actionable nt tracked elsewhere", "d": "2/2016"}, {"body": "fixed fix site next minutes", "d": "2/2016"}, {"body": "entirely sure trying think looking experimentalunstable feature undocumented look unit tests source code find info use github track bugs react core rather usage questions appropriate place usage questions stackoverflow usage question duplicate something like going close issue feel free continue conversation thread move discussion stackoverflow", "d": "2/2016"}, {"body": "jimfb oh cool thanks letting know", "d": "2/2016"}, {"body": "use github track bugs react core rather usage questions appropriate place usage questions stackoverflow usage question going close issue feel free continue conversation thread move discussion stackoverflow regards question roughly speed want superaccurate results benchmarking use case data", "d": "2/2016"}, {"body": "warn call setstate getchildcontext", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "reproduced error console", "d": "2/2016"}, {"body": "good way start", "d": "2/2016"}, {"body": "raineroviir find places called places defined warn called think already basically thing calling within use thing copy", "d": "2/2016"}, {"body": "ok thank", "d": "2/2016"}, {"body": "give pointers stuck figuring whether called tried got type error trying access context nt revealed clues either warning code shown trying within shows pretty simple predicate warning curious try well", "d": "2/2016"}, {"body": "getchildcontext might immediate caller wo nt work going need set state getchildcontext already warn users call setstate render take look code", "d": "2/2016"}, {"body": "reactcurrentownercurrent set getchildcontext call looks like currently seen", "d": "2/2016"}, {"body": "danweaver think set owner render", "d": "2/2016"}, {"body": "fyi worked", "d": "2/2016"}, {"body": "appears work latestfuture fiddle desired behavior", "d": "2/2016"}, {"body": "yes indeed seems fixed fiddle show code working button", "d": "2/2016"}, {"body": "ok thanks going close fixed master", "d": "2/2016"}, {"body": "workaround backport expect stable", "d": "2/2016"}, {"body": "issue nt actually supported property nt mean anything support focused valid case anchor tags set anchors property linked attribute happens buttons changed default use attribute things stable soon ultimately though case would generally argue use attributes really need read data dom even better would write code nt write read dom nodes instead manage state component", "d": "2/2016"}, {"body": "aha right realise href actually standard button attribute thanks lot clarification", "d": "2/2016"}, {"body": "looks like already fix master edit load page without need", "d": "2/2016"}, {"body": "correct fixed", "d": "2/2016"}, {"body": "great question stackoverflow bug tracker bugs", "d": "2/2016"}, {"body": "thanks yaycmyk", "d": "2/2016"}, {"body": "running seems work fine react repository looks like running tests repository may providing sufficient test isolation tests provide minimal sequence calls react demonstrate bug react reinvestigate", "d": "2/2016"}, {"body": "using mock global object whatever using passing execution env check probably needs add well", "d": "2/2016"}, {"body": "creating component probably least much overhead using bind choosing two options personally use bind point one solution define constructor nt rebinding render problem binding event component event might passed via component api app attaches event handler bar would expected value naturally would want instance app ca nt instance app since react way knowing app ultimate source event handler handler passed along thus think model proposed broken general case going use one workarounds described", "d": "2/2016"}, {"body": "conceptually agree however proptypes mostly legacy maintenance mode replaced tools like flow probably worth api churn feature legacy", "d": "2/2016"}, {"body": "duplicate", "d": "2/2016"}, {"body": "red errors say", "d": "2/2016"}, {"body": "jimfb says object nt support property function", "d": "2/2016"}, {"body": "jacty print page also url post results please assume exposed polyfill truly native simulated", "d": "2/2016"}, {"body": "show little devtools screenshot document mode visible like say standards guessing one properly set", "d": "2/2016"}, {"body": "syranide spicyj thank allhere pic snapshot could get documentmode console write code log documentmode reactdomjs get nothing red errors think something leads errors blocks code loging documentmode", "d": "2/2016"}, {"body": "nt know would probably digging figure going want fixed since nt heard anyone else hitting anything like", "d": "2/2016"}, {"body": "question returning boolean", "d": "2/2016"}, {"body": "came facebookreact discussed reactjsreactfuture", "d": "2/2016"}, {"body": "ah ok sorry guys good point tundrax", "d": "2/2016"}, {"body": "pen appears demonstrate react triggering correct time least browser chrome browserversion using", "d": "2/2016"}, {"body": "chrome stable suggesting increasingdecreasing value using arrows cast change event input one", "d": "2/2016"}, {"body": "ah ok event firing native event different type reason listen native event want fire character typed unlike input event change event necessarily fired change element value details sometimes call change handler underlyingnative change event pass thus reason always pass input event instead want change event oppose input event", "d": "2/2016"}, {"body": "actually want handle way done natively ie changing value clicking arrows bluring possible things without adding native listener", "d": "2/2016"}, {"body": "want handle onchange way done natively ie changing value clicking arrows bluring rarely intendeddesired behavior people generally want onchange fire time change current behavior always add native listener want bail get behavior escape hatches going close intended behavior bug therefore nt anything actionable feel free continue discussion thread reopen thinking matter changes dramatically", "d": "2/2016"}, {"body": "thank responses jimfb resolve suggest passing native listener", "d": "2/2016"}, {"body": "like take", "d": "2/2016"}, {"body": "aprilarcus let know questions", "d": "2/2016"}, {"body": "cool", "d": "2/2016"}, {"body": "think asking closing duplicate", "d": "2/2016"}, {"body": "spicyj think optout grab ref set contenteditable attribute imperatively reason need something mind", "d": "2/2016"}, {"body": "devonly warning also prod also prod perhaps limiting dev would enough", "d": "2/2016"}, {"body": "devonly", "d": "2/2016"}, {"body": "see also", "d": "2/2016"}, {"body": "thanks closing one primary motivation", "d": "2/2016"}, {"body": "intentional though nt remember reasoning hand maybe spicyj remembers iirc might dead code elimination wrapping warning call block avoid invoking noop function outside module makes code path easier optimize many cases block necessary anyway want avoid work like warning deduplication logic creating values print error message warning never going shown", "d": "2/2016"}, {"body": "yes warning calls completely eliminated minifier", "d": "2/2016"}, {"body": "ahh makes perfect sense thanks", "d": "2/2016"}, {"body": "entirely sure asking looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow regards specifics code mentioned using aware native events synthetic events nt play nicely together may work case pattern generally avoided going shoot foot going deprecated recommendation set directly entirely sure mean select tag stateselectvalue changed one time think found bug react please create simple jsfiddle demonstrates issue using onchange handler reinvestigate", "d": "2/2016"}, {"body": "jimfb tnx answer describe situation sure bug going depricated nt think following investigation needed", "d": "2/2016"}, {"body": "recommended architecture flux facebook uses backend called relay use github track bugs react core rather usage questions appropriate place usage questions stackoverflow usage question going close issue feel free continue conversation thread move discussion stackoverflow", "d": "2/2016"}, {"body": "thank following detailed response jimfb ca nt really use stackoverflow community would attack everything say glad kind enough answer question thank", "d": "2/2016"}, {"body": "mixed content page loaded https requested insecure script request blocked content must served https edit", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "thank", "d": "2/2016"}, {"body": "solution storeinput inputname inputvalue const state thisinputs thisinputs inputname inputvalue thissetstate state form stateform thisinputs", "d": "2/2016"}, {"body": "use github track bugs react core rather usage questions appropriate place usage questions stackoverflow usage question going close issue feel free continue conversation thread move discussion stackoverflow", "d": "2/2016"}, {"body": "executed component parent grandparent rerendered rerender component want also use github track bugs react core rather usage questions appropriate place usage questions stackoverflow usage question going close issue feel free continue conversation thread move discussion stackoverflow", "d": "2/2016"}, {"body": "duplicate", "d": "2/2016"}, {"body": "first glance actually seems pretty clever cc sebmarkbage vjeux", "d": "2/2016"}, {"body": "essentially transition group except one nt allow abstraction child hierarchy control animation consequently want something like however parent parent aware stage thing still alive nt delete set completion propagation mentioned make work would also need kind completion propagation parent know child supposed remain undeleted safe remove parent also happens key gets restored still happening components eg parent allowed update state happening something like api certainly something need dependent complexities make work", "d": "2/2016"}, {"body": "sebmarkbage good point restoration thinking safe assume reattached component cancel ongoing unmount preparation ignoring continuecallback called one following imitate mount procedure ultimately triggering componentwillmount etc seems bit aggressive though made think component instead gets updated like react update though special follow another lifecycle method would give granularity customize event although scenarios probably run code", "d": "2/2016"}, {"body": "probably component also needs know removal interrupted animate back previous state", "d": "2/2016"}, {"body": "sebmarkbage amended proposal addressing issues mentioned", "d": "2/2016"}, {"body": "nt essentially deduce component child finished animating calls ie tells parent delete list children perhaps missing something sounds like suggested possible design reusable baseclassmixinwhatever today issue recommends core instead parents needs keep track children removed also keep rendering somehow handled transparently generic case one also provide abstraction simplifying dealing even hiding", "d": "2/2016"}, {"body": "syranide true achieve result ways another great way use reacttransitiongroup addon solution wrapping logic required idea proposition able perform unmount transition solely using component wrapping also explain handled transparently generic case", "d": "2/2016"}, {"body": "also explain handled transparently generic case parent simply stop rendering child still child remain rendered animating least child ordered among children without child actively rendered information simply available react consider three children removed starts animating away new child added rendered implicit removed placed information available unless parent still rendering entirely removed rendering unless missing something proposal requires mine one way another transparent parent seems core nt actually provide obvious benefit edit solution wrapping logic required solution require wrapping logic requires child extend different base class apply mixin unless want reimplement shared logic every time", "d": "2/2016"}, {"body": "chenglou thought lot resulted reactmotion found thoughts animation quite insightful", "d": "2/2016"}, {"body": "discussions sebastian thinking issue agree nt elegantly handle edge cases reasons mentioned classic problem proposed solutions animation reason going close issue feel free continue discussion thread reopen thinking changes dramatically", "d": "2/2016"}, {"body": "little hard tell without able run code fragment especially since nt tell us error messageproblem getting assume failing expression assuming case note mixin object accessible going restructure code avoid using context also use github track bugs react core rather usage questions appropriate place usage questions stackoverflow looks like usage question going close issue feel free continue conversation thread move discussion stackoverflow", "d": "2/2016"}, {"body": "yes todo list", "d": "2/2016"}, {"body": "like take crack jimfb imagine warning like full filenameline number warning component name", "d": "2/2016"}, {"body": "mxstbr honestly probably nt greatest first bug first blaze trail providing example replicate desired output would something like welcomed take stab know probably rough time terms code review get idea structure need look want emit event start processing element event operation think event already exists event finish processing element devtool grab source element enabling reactjsxsource use display fileline information part error least would first approach alternate approach process element replicating control logic detects invalid props feels sucky relies two totally separate code paths behavior never getting sync sure approach would ultimately pan preferred", "d": "2/2016"}, {"body": "want emit event start processing element event operation think event already exists event finish processing element need three separate events thought using onsetvalueforproperty add information warning missing", "d": "2/2016"}, {"body": "mxstbr nt access element ca nt access source passing element source would require routing data core internal apis sole purpose warnings nt make sense dompropertyoperations api perspective avoiding one motivations moving warnings devtools want cleanup core internals currently pass data allover place", "d": "2/2016"}, {"body": "fair enough makes sense leave anything might better first bug ping", "d": "2/2016"}, {"body": "mxstbr whole list recommended ones particular jumped", "d": "2/2016"}, {"body": "done closed open pr tleunen reserved keep lookout list though", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "cauburtin also first glance looks like using development build react try reactjsminjs better performance generally try avoid try blocks within production codepaths extent possible performance reasons using try block reset current owner probably go away owners go away", "d": "2/2016"}, {"body": "ok thanks yes dev version saw try statements min version less though ok", "d": "2/2016"}, {"body": "yeah far know necessary find one removed love accept pr", "d": "2/2016"}, {"body": "hiding via css slightly faster downside means domreact tree bigger means reconciliations bigger slower app using memory even tree visible ca nt tell difference two terms performance would recommend unmounting since cleaning memory keeping tree small ultimately usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "2/2016"}, {"body": "thanks response recommendation ca nt notice difference performance yet since app still relatively small go unmount route something wanted make sure figured going apologies posting wrong place keep mind future questions", "d": "2/2016"}, {"body": "works cause memory leaks want behavior unmount unload degrade performance navigating away site", "d": "2/2016"}, {"body": "tab closedpage reloaded whole page destroyed browser memory leak come", "d": "2/2016"}, {"body": "saw leaks firefox event listeners registered component reloads tab memory usage went added cleanup code though fine something added react", "d": "2/2016"}, {"body": "also observed memory leaks firefox independent react clearly browser bugs react bugs syranide correct want waste cpu time unload would degrade performance navigating away", "d": "2/2016"}, {"body": "equivalent thus props become since string property boolean stringified want", "d": "2/2016"}, {"body": "syranide specifying indicate usage error warning", "d": "2/2016"}, {"body": "jimfb saying disagree intentionally stringified react really sure stand personally much prefer type strictness would nt mind warning really js general current behavior also kind logical sense would get passed user component expected string prints concatenates something else js strictly typed would nt problem flow technically handle afaik possible", "d": "2/2016"}, {"body": "saying disagree true intentionally stringified true react agree saying behavior change image probably makes sense actually nt feel super strongly wonder makes sense add warning imgalt props probably bunch others similarly nonsensical", "d": "2/2016"}, {"body": "jimfb applies nonboolean props nonboolean props nt really benefit accepting boolean also kind tricky practice decide draw line booleans strings warning nt number strings warning objects booleans actually leak memory sense would nt mind type strictness nt seem js nt go way type strictness seems really rather arbitrary draw line makes sense kind makes sense", "d": "2/2016"}, {"body": "personally lean favor strict warnings sure rest team feels course dom bunch edge cases probably prevent blanket rule string props general think rule holds", "d": "2/2016"}, {"body": "imho sensible way would value provided browser would browsers decide either obviously happens much going option leads least havoc would way go agree throwing errors cases make sense good thing also think lead worst plain something must always provided rendered prop markup would even partial approach caveats aware", "d": "2/2016"}, {"body": "agree throwing errors cases make sense good thing also think lead worst plain tabindex tabindex tabindex something must always provided rendered prop markup petetnt seems rather arbitrary means jsx treating etc react seems super weird would even partial known attribute value render attribute name markupapproach caveats aware js strings treated numbers anything treated boolean etc different depending types problematic first would whereas second would would even want context current behavior makes lot sense", "d": "2/2016"}, {"body": "syranide sake particular issue talking elements known attributes values attached", "d": "2/2016"}, {"body": "petetnt problem though result jsx transform giving value even though nt explicitly provided transform adds shorthand enabled initial jsx transform carried babel becomes react idea intentional could end firing lot warnings false positives tried determine intent order insert blank string must explicitly going one quirks jsx html", "d": "2/2016"}, {"body": "zpao yeah right guess something live closing feel free reopen ideas", "d": "2/2016"}, {"body": "nt dependency package", "d": "2/2016"}, {"body": "nt require reactdom using reactrender shortcoming rather using reactdom", "d": "2/2016"}, {"body": "deprecated react generic library independent specific frontend ie need use want target dom etc", "d": "2/2016"}, {"body": "syranide correct usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "2/2016"}, {"body": "look within unit tests react repository either way usage question rather bug core usage questions better addressed sites like stackoverflow", "d": "2/2016"}, {"body": "persisting event", "d": "2/2016"}, {"body": "correct api always required events persisted want use outside scope event handler strictly enforced", "d": "2/2016"}, {"body": "think would need added source code", "d": "2/2016"}, {"body": "wanted nt really know category shoul put events used dialog ui category", "d": "2/2016"}, {"body": "goes ui category properties otherwise would probably go category", "d": "2/2016"}, {"body": "jsfiddle dialog element events reference works chrome canary", "d": "2/2016"}, {"body": "fyi subcategory", "d": "2/2016"}, {"body": "npm beast first time try use troubles npm distribution try guide without npm", "d": "2/2016"}, {"body": "maybe add tiny html file npm version", "d": "2/2016"}, {"body": "npm section already getting really long starter pack designed help get started working demos files preconfigured readytogo", "d": "2/2016"}, {"body": "sure think adding would help beginner never worked browserify idea need include file file like normally loc like", "d": "2/2016"}, {"body": "thanks jimfb recommendation got quiet bit experience working npm node browser based applications got zero minutes practical experience react however looks like code may executing prior dom load event simple box method like delay safe manipulate dom like jquery function opinion experienced js developer npm section extremely short compared starter pack viewport versus viewports browser especially since npm example nt work box transition guide using react standard build tool pipelines like npm bower starter pack mxstbr example html file great confirmed problem encountered result script tag child head element opposed body element thanks eager find keep script tag within head element", "d": "2/2016"}, {"body": "think starting browserify idea wrong thing make obvious really thinking completely separate page getting started npm browserify webpack prerequisites get started end immediate distraction issues going close one mean time meschbach step missed probably putting script runs markup need able find node render", "d": "2/2016"}, {"body": "effectively", "d": "2/2016"}, {"body": "makes sense let know help", "d": "2/2016"}, {"body": "thanks pointer zpao incomplete documentation glanced starter pack however nt integrate nicely build system already using npm could tell many know would nt consider started framework using obtained via dependency management system particular tutorial attractive using getting started could begin obtain experience framework using tools otherwise knew yet told inexperienced use tools react little confused issue marked closed documentation nt complete root cause issue despite knowledgable person offering fix incomplete documentation could please explain reasoning behind closing issue may better understand way react uses issues", "d": "2/2016"}, {"body": "meschbach paul already answered said think starting browserify idea wrong thing make obvious really thinking completely separate page getting started npm browserify webpack prerequisites get started end immediate distraction issues going close one mean time specifically read last sentence nt use github issues track usage issuesquestions usage questions better addressed sites like stackoverflow", "d": "2/2016"}, {"body": "since seem two different view points please allow elaborate mine filed issue documentation incomplete since directed github project documentation wrong create issue documentation incomplete resulting error could nt worked around new users additionally searched issues regarding problem prior creating one could nt find others would mind adding references issues", "d": "2/2016"}, {"body": "thinking though got closed pr accident intended longer lived ultimately helpful us hundreds open issues track slight variations issue multiple places gotten aggressive closing issues right away know tracked elsewhere wrong create issue", "d": "2/2016"}, {"body": "duplicate", "d": "2/2016"}, {"body": "please followup stack overflow try keep focused bugs usage questions unless linked bugs case sounds like script getting inserted fine code executed quick google search sounds like left half error failed execute write document nt possible write document asynchronouslyloaded external script unless explicitly opened blog post discussing relation adwords lessons widely applicable find discussions searching error nt think anything react specific really think", "d": "2/2016"}, {"body": "see thanks anyway", "d": "2/2016"}, {"body": "example actually returning undefined due automatic semicolon insertion good thing look lots js nothing react put opening paren line return ok going close since inactionable feel free follow questions", "d": "2/2016"}, {"body": "zpao oh well least technical explanation problem thanks heads", "d": "2/2016"}, {"body": "sawtaytoes already mentioned threads stackoverflow appropriate place usage questions likely issue codeconfiguration rather bug react core reason going close issue simple jsfiddle demonstrates bug react core happy reinvestigate", "d": "2/2016"}, {"body": "using without", "d": "2/2016"}, {"body": "legal mentioned", "d": "2/2016"}, {"body": "jimfb html way legal may bad practice wrong follows valid entity much like valid even intentionally designed allow omitting closing tags urgh someone smart optimizing markup size markup manually written handy write may enjoy emitted warnings also good thing warn catch subtle ssr markup checksum issues nt see would affect always get ssr markup checksum error markup different invalid markup factor", "d": "2/2016"}, {"body": "syranide threw gave validation error despite followed valid entity appears may function doctype validator default doctype html transitional code fails doctypes nt complain mutation case mind markup looks like chrome automatically converts assumed chrome mutating markup comply validation rules like moves tags markup cleanup perhaps cleanup browser exercising prerogative right checksum validated browser touches markup nonissue think got confused assuming wrong think close since validating html appears harder initially thinkingexpecting part due doctypes validation differences valueadd less initially thinkingexpecting", "d": "2/2016"}, {"body": "nt think anything strings passing react element inside array rendering children add key element react identify element", "d": "2/2016"}, {"body": "case give key whatever like warning goes away", "d": "2/2016"}, {"body": "bfwg yes", "d": "2/2016"}, {"body": "thank", "d": "2/2016"}, {"body": "update every using latest version important tutorial would like submit pull request upgrade references update sooner", "d": "2/2016"}, {"body": "createelement generated element field assigned first argument used internally optimizations update unmount create new instance identity comparison creating new identity render making react think teardown amp recreate operation simple update means tearing dom nodes entirely especially bad form elements since nt really applying state sense really setting props use jsx spread achieve thing really unlikely able optimize case would come costs think likely maintain current behavior hopefully provides insight come different pattern", "d": "2/2016"}, {"body": "yes thank much explanation thinking kind internal tracking appreciate taking time provide details mechanism", "d": "2/2016"}, {"body": "potentially try requiring react entrypoint main react lib still reactdom therefore likely calling defaultinjection typical caveat playing nonpublic apis break time", "d": "2/2016"}, {"body": "sure understand mean requiring react like app get different error must say absolutely nt understand react points reactlibreactisomorphic could prevent react using reactdom thank helping yeah know private apis bad", "d": "2/2016"}, {"body": "nt files calling", "d": "2/2016"}, {"body": "okay got imports assigns methods error root component node", "d": "2/2016"}, {"body": "phone ca nt dig things would start ensure require react funnels reactisomorphic debug starting error message work way backwards ensure missing required internal properties custom renderer", "d": "2/2016"}, {"body": "tried tweak webpack conf resolve require differently instead seems good way post findings go thank pointing right solution", "d": "2/2016"}, {"body": "since discussion topic bug react core would appropriate place discussion alternatives include reactiflux irc regardless bug core going close issue feel free continue discussion thread move another medium", "d": "2/2016"}, {"body": "reasoning issue related implement custom renderers get point", "d": "2/2016"}, {"body": "guess obsoleted fine would like add", "d": "2/2016"}, {"body": "embarrassingly nt know whole lot though like learning seems like would pretty straightforward copy change solved want double check would required", "d": "2/2016"}, {"body": "terms obsoleted still seems use opensearch imagining useful around", "d": "2/2016"}, {"body": "pretty much important thing check updating value would look like even case server rendering common way test load data uri manipulate dom via js set propertyattribute see works visit open console use result right diff ends pretty identical leave docs update though try batch changes release time", "d": "2/2016"}, {"body": "confident know talking noticing currently wrap property null instead admitting ignorance sure value means tracked file even lost going ask zpao hold hand little longer", "d": "2/2016"}, {"body": "saiichihashimoto recently changed using using default whole variety reasons learn properties vs attributes values updated via attributes set value null html elements must updated using property instead attribute otherwise changes wo nt take effect browser case value must verify browsers especially something like tends behave weirdly verify browser honoring new value case entirely sure browser even anything attribute presence lack thereof actually influence browser behavior using attributes certainly fine", "d": "2/2016"}, {"body": "jimfb nt tested specifically browsers actually use however according opensearch specs html element include profile attribute contains value part specs opensearch clients future well may check", "d": "2/2016"}, {"body": "saiichihashimoto right browsers nt actually use almost certainly sufficient set attribute property therefore answer question probably appropriate value", "d": "2/2016"}, {"body": "ah mistake forgot switched attributes default mentioned test code property nt work need use attributes", "d": "2/2016"}, {"body": "probably affects unstablesubtree also nt think need fix milestone since regression introduced first hearing valid bug", "d": "2/2016"}, {"body": "jimfb would check pr linked sufficient check add would happy add", "d": "2/2016"}, {"body": "sambev sorry sure understand question pr linked merged problem still exists master specifically would fix", "d": "2/2016"}, {"body": "jimfb sorry nt clear simply applied conditional pr however nt know full impact change", "d": "2/2016"}, {"body": "fixed verified", "d": "2/2016"}, {"body": "works reactfuture", "d": "2/2016"}, {"body": "assuming intended instructions written nt work error pops syntaxerror unexpected token reactdomrender hello world documentgetelementbyid example parserppraise parserppunexpected parserppparseexpratom parserppparseexprsubscripts parserppparsemaybeunary parserppparseexprops parserppparsemaybeconditional parserppparsemaybeassign parserppparseexprlistitem parserppparsecallexpressionarguments guide missing jsx js step", "d": "2/2016"}, {"body": "yeah agree npm super complexconfusing piece software familiar npm first got started uphill battle installing npm hard guide missing jsx js step reactpresets babel conversion npm hard never used kind wish made nonnpm instructions prominent new users perhaps reversing order two sets instructions anyway scroll gettingstarted page find nonnpm instructions much easier follow checking react first time", "d": "2/2016"}, {"body": "would nt better nonnpm instructions rather instructions nt work written", "d": "2/2016"}, {"body": "would nt better nonnpm instructions rather instructions nt work written yes", "d": "2/2016"}, {"body": "looks like fixing webpack docs tracked", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "surprises strongly suspect usage error facebookcom uses react mean unable load news feed within web view simple repro", "d": "2/2016"}, {"body": "left line number debug info would helpful jump appropriate line number bundle copypaste code along previous subsequent lines context see failing", "d": "2/2016"}, {"body": "ok", "d": "2/2016"}, {"body": "mostly certain nt react one common cases seen happen less obvious duplicate props jsx eg result props object duplicate keys lookout maybe enable lint rule prevent", "d": "2/2016"}, {"body": "ok go full error line one marked function interoprequiredefault obj return obj amp amp objesmodule obj default obj var electronname function react component inherits electronname react component default component", "d": "2/2016"}, {"body": "thought properties object nt react issue something code going close ca nt actually provide better error syntax error comes runtime", "d": "2/2016"}, {"body": "zpao well babel could warnthrow transformation time matter babel probably produce validlegal output filed", "d": "2/2016"}, {"body": "fwiw valid strict mode think computed properties one reasons reasons change sticky situation different runtimes see babel ends meantime suggest linting like reactjsnoduplicateprops rule", "d": "2/2016"}, {"body": "issue solved removing dup refs thanks support bug filing say however strange problem surfaced android webview browser", "d": "2/2016"}, {"body": "probably remotely performant way performance module initialization directly influences initial load time would fatal going close edge case people rarely hit nt think support performant way workaround use classes feel free continue discussion thread reopen reexamine thinking matter changes dramatically said curious hear use case trying", "d": "2/2016"}, {"body": "discussion amp give background nt think intend make fundamental changes way createclass works really unlikely make setters work", "d": "2/2016"}, {"body": "ah ok thanks guys performance see even mixins possible nt manage well jimfb html wysiwyg editor components bit dirty updated many different events selectionchange keydown mousedown quite frequently even throttled sometimes choose update position popovers div overlays manually rather vanilla js put less things state sometimes even nothing another example ca nt use react react slow sort things could something like important thanks", "d": "2/2016"}, {"body": "cc spicyj wrote original comment", "d": "2/2016"}, {"body": "nt recall history mix repo rn nt currently use browser supposed work going close since nt really support send pr unit tests makes compatible probably take looks like set emitted events nt want lose rn least though", "d": "2/2016"}, {"body": "existing issue aop style measurement nt always convenient wrap recursive function calls difficult measure self time component another issue numbers intuitive necessarily actionable would probably require thinking around design turning seems like good first step however like even something like avoids indirection runtime look callsite becomes constant jit compiler safely exclude code paths downside ca nt turn profiling onoff already running nt think required use case though another alternative simply build three different builds prodprofiledebug packager choose wants profile production case maybe something", "d": "2/2016"}, {"body": "points care reactperf reach internal properties event component names etc everything needs colocated code change implementation details without breaking one way achieve could fire events tree reconstructed perf tool however also rely execution order events eg probably want render children different stack frame parent therefore inclusiveexclusive perf measurement parent ca nt depend child rendering within stack parent rendering might mean react code needs high level knowledge use case rather spewing events b make things slower add profiling even temporarily need way disable completely day one", "d": "2/2016"}, {"body": "turning measure reactperfisactive startmeasurement seems like good first step downside ca nt turn profiling onoff already running nt think required use case though tadeuzagallo told use case rn team details maybe provide meantime suggested first measure perf impact making lookup reconsider use case compelling enough another alternative simply build three different builds prodprofiledebug packager choose wants profile production one reasons rn team wants revamp reactperf unnecessary friction getting trace results adding another build would increase friction compared runtime switch even runtime switched computed start time would amount less friction therefore going runtime flag reconsider later find good reasons separate build example performance regression flag turn worse expectations reactperf reach internal properties event component names etc everything needs colocated code change implementation details without breaking one way achieve could fire events tree reconstructed perf tool keep mind bigger priority seemed first implementing would require significant revamp reactperf hand seems require us start emitting lifecycle events may useful react devtools extension later need explore much work remove reliance implementation details reactperf make things slower add profiling even temporarily need way disable completely day one start adding onetime runtime switch measure regress noise resort making special profiling build frustrating rn team switch builds make build default one cases except shipping appstore guess", "d": "2/2016"}, {"body": "thing worries usage pattern inside react increase plus less noise inside react eg layout start noticeable become hot paths really satisfied noise today also seems wasteful switch always production builds rn wants easy toggle always run profile build development friction feb dan abramov notifications githubcom wrote turning measure reactperfisactive startmeasurement seems like good first step downside ca nt turn profiling onoff already running nt think required use case though tadeuzagallo told use case rn team details maybe provide meantime suggested first measure perf impact making lookup reconsider use case compelling enough another alternative simply build three different builds prodprofiledebug packager choose wants profile production one reasons rn team wants revamp reactperf unnecessary friction getting trace results adding another build would increase friction compared runtime switch even runtime switched computed start time would amount less friction therefore going runtime flag reconsider later find good reasons separate build example performance regression flag turn worse expectations reactperf reach internal properties event component names etc everything needs colocated code change implementation details without breaking one way achieve could fire events tree reconstructed perf tool keep mind bigger priority seemed first implementing would require significant revamp reactperf hand seems require us start emitting lifecycle events may useful chrome devtools later need explore much work remove reliance implementation details reactperf make things slower add profiling even temporarily need way disable completely day one start adding onetime runtime switch measure regress noise resort making special profiling build frustrating rn team switch builds make profile build default one cases except shipping appstore guess reply email directly view github", "d": "2/2016"}, {"body": "rn wants easy toggle always run profile build development friction ok however also rely execution order events eg probably want render children different stack frame parent therefore inclusiveexclusive perf measurement parent ca nt depend child rendering within stack parent rendering putting logs better idea currently works saying best rely happening inside part parent future plan allow deferring child updates next batches would mean child could reconciled next parent stack however every change would still happen inside keep existing result structure every single entry corresponds batch thing would need change count times differently without relying execution order components would even make sense world like child update deferred another batch parent reconciliation count inclusive time towards parent understanding issue correct far", "d": "2/2016"}, {"body": "superseded", "d": "2/2016"}, {"body": "reactperf reach internal properties event component names etc everything needs colocated code change implementation details without breaking turned fairly important working internal id composite component using key measurements object removed broke perf code ended require keys component seems bad reactperf attaching properties reactperfinstanceid something obscure avoid future name collisions components break well", "d": "2/2016"}, {"body": "update title misleading issue react nt know rerender input value changes null character ui stops reflecting state data", "d": "2/2016"}, {"body": "switching component controlled uncontrolled bad idea prohibited react get warning try need convert nulls empty strings", "d": "2/2016"}, {"body": "jimfb think missed point implying way setting inputs controlled uncontrolled implicit override like understand system currently place nt make application less predictable dealing data includes nulls", "d": "2/2016"}, {"body": "warning help catch situations accidentally pass null part added user accidentally switching controlled uncontrolled components", "d": "2/2016"}, {"body": "fair enough thanks", "d": "2/2016"}, {"body": "seems constraint tight store present want render way would nt render behave properly definition render without store undefinednull", "d": "2/2016"}, {"body": "way reactredux implemented required prop requires present since created could create wrapper sort would similar would bubble problem since eventually going different components", "d": "2/2016"}, {"body": "store present first render could pass fake store", "d": "2/2016"}, {"body": "nt want components require store present page render throw errors store included script tag later page reason company chosen use something called adobe experience manager aem build components essentially allows content authors draganddrop components onto pages means ca nt guarantee order anything appears nt think aem good solution building applications money spent contracts signed really end goal build components nt care whether store present hook automatically store onceif available", "d": "2/2016"}, {"body": "think passing fake store initially might work trying figure get around fact nt support swapping store fly looks like due changes version reactredux seems related hotreloading dynamically changing store rendered", "d": "2/2016"}, {"body": "looking ca nt figure would implement intuitively seems like possible something missing ca nt put finger maybe gaearon would kind take look", "d": "2/2016"}, {"body": "constrained situation p required prop requires present since created would look could write provider provides default store undefined wrapper around current provider could write wrapper around provides store one unavailable etc forcing react reconcile two elements different types element probably good would confusing edge case people among things keys automatically introduced things like arrays ca nt use keys reconciliation identity anyway nt see anything actionable think problem coming using bunch different technologies including redux aem others imposing semicontradictory constraints challenge ahead figure mitigate one constraints nt think actionable fix within react core going close issue guys continue discussion thread", "d": "2/2016"}, {"body": "however want allow user interact widget store present instance widget example able enter text input dom state persist widgetcontainer rendered place would state stored associated store ephemeral storage like component state would reconcile changes real redux store becomes available", "d": "2/2016"}, {"body": "may come back explore later disabling inputs store available think might possible create save dom state component would store state input dispatch action based state store dispatch available pretty sure possible think issue thanks help", "d": "2/2016"}, {"body": "try fiddle also fiddle trying map prop never pass thus error", "d": "2/2016"}, {"body": "fiddle works ok new react solved could recommend patch react since stable react fiddle new react also updated link original message sorry bad fiddle", "d": "2/2016"}, {"body": "ok going close since fixed master could try cherrypicking commits honestly would recommend waiting released really hurry play could try using future build eg aware nt guarantee stable", "d": "2/2016"}, {"body": "thanks found fixed via problem thanks guys work", "d": "2/2016"}, {"body": "seems working cc benigeri case closing react bug", "d": "2/2016"}, {"body": "providing screenshot", "d": "2/2016"}, {"body": "banned users shown expired link fwiw", "d": "2/2016"}, {"body": "issue tracker bugs react general support use stack overflow irc said generic solution problem keep reference bound handler around eg bind method constructor see also blog post introduced classes", "d": "2/2016"}, {"body": "fkling exactly going say p correct points thanks", "d": "2/2016"}, {"body": "sry thanks", "d": "2/2016"}, {"body": "found set handler directly component inside component something like", "d": "2/2016"}, {"body": "interesting api direction might consider example assumes available instance method entire component lifecycle components would keep reference count causes unmount time reaches zero components would start reference count created would decremented longer rendered parent calls would increment reference count return idempotent function called would decrease reference count example assume action completed component deparented causes called call inside could halt unmounting process returned function called imagine would called second time sure whether would defer entire parent chain unmounted suspect would would unify deferred unmount mechanic normal component lifecycle seem like potentially dangerous feature particularly exception safe prone leaks etc maybe could coupled method maybe said tool building libraries react think would open number opportunities exit animations major use case thought nt good understanding edge cases around love feedback think would play nicely well", "d": "2/2016"}, {"body": "skew support classes classes exist largely allow language interoperability also mostly legacy anyway regards specifics patch seems fine looks like virtually zero perf impact see reason take", "d": "2/2016"}, {"body": "jimfb going take patch let super thorough see places supporting prototypeless objects", "d": "2/2016"}, {"body": "jimfb thanks fast response mostly legacy unaware going dig find make things work similarly extending skew post back update zpao makes sense move ahead take stab looking around else would come", "d": "2/2016"}, {"body": "jimfb update skew seems support classes nt solve problem two reasons classes nt firstclass objects skew ca nt pass class function like could keep using might workaround trick skew compiler letting pass class around bigger problem zpao anticipated many places react api takes would like take prototypeless map examples problem spec could prototypeless var spec reactcreateclass spec usecases cause exception called expect find play around proposal would happy find update apireachable calls write tests make sure specific calls nt regress seems like sizable piece work wanted sure board please let know board note scope task examples prototypeless could run issue method would sweep codebase apireachable methodcalls might belong instead instance far seems primary offender react codebase others nt account much alternative proposal instead finding apireachable uses could change every use codebase since nt see reasonable case calling method instance want calling nt may simpler approach would easier maintain codebase guideline always use objectprototypeblahblahblah instead objblahblahblah lint rule would still write tests make sure parts api currently break longer break change let know think", "d": "2/2016"}, {"body": "ryankaplan personally agnostic whole change change helpful youothers nt cause undue code complexity perf regressions nt appear generally lean favor taking however person team value proposition case fairly marginal would possible someone find reason block proposals seem fine best guess would likely take change since nt see reason take ca nt make promises", "d": "2/2016"}, {"body": "jimfb fair enough thanks response prepare pr time next days let know ready see goes mean time think reason likely blocked particular people team think likely issues please let know", "d": "2/2016"}, {"body": "ankeetmaini create unit test demonstrates problem", "d": "2/2016"}, {"body": "two weeks responserepro unable reproduce", "d": "2/2016"}, {"body": "need return statement common use arrow function situation maybe saw one example confusing arrow functions needing return statement use brackets", "d": "2/2016"}, {"body": "maartenbusstra nt help either updating gist", "d": "2/2016"}, {"body": "import statement working", "d": "2/2016"}, {"body": "almost certainly usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "2/2016"}, {"body": "maartenbusstra yes also things working fine long pass string value object like able render tasklist component", "d": "2/2016"}, {"body": "hmm seems issue reacttransformboilerplate since code working fine another setup maartenbusstra since pass tasklist object string value instead array objects able render fine", "d": "2/2016"}, {"body": "far software licensing goes license super simple clear lawyer give legal advice specifics situation recommendation check organization legal department able give clear answer general yes utilize react offline commercial products free long nt remove copyright notice react code per conditions mentioned license file", "d": "2/2016"}, {"body": "duplicate", "d": "2/2016"}, {"body": "thanks jim", "d": "2/2016"}, {"body": "thanks pruning noise original repro much clearer seems like firstclass subtree concept would probably address probably larger discussion concept would also helpful tooling thinking modals particular case likely way fix without fair amount work", "d": "2/2016"}, {"body": "reference solugebefola talking want poke someone diff creating new issue different repository correct solution appropriate technique would add comment diff question like would love get merged get code review cc people context leaving comment ccing people maintain repository help bring attention case missed tell people looking commit history repository", "d": "2/2016"}, {"body": "thanks info still pretty new saw original bug posted forum thought origin react issues", "d": "2/2016"}, {"body": "psumstr dont think component provided throws warning could something happening within child components add context would great", "d": "2/2016"}, {"body": "jenriquejr created example js bin reproduced run js inspect element comment box div chrome click properties tab expand divcommentbox see messages console", "d": "2/2016"}, {"body": "yes sideeffect inspecting dom node dev mode getter dom nodes refs support previous pattern refs react components chrome devtools reading every property results warning nothing right gone next major release", "d": "2/2016"}, {"body": "good know zpao open issue use reference", "d": "2/2016"}, {"body": "jenriquejr open issue already fixed master", "d": "2/2016"}, {"body": "thanks jimfb", "d": "2/2016"}, {"body": "suspect user error provide simple jsfiddle demonstrates issue investigate", "d": "2/2016"}, {"body": "safe assume typo code actually looks like assuming since said works fine", "d": "2/2016"}, {"body": "audio tag zpao correct indeed rewrote code instead copying pasting updated main post", "d": "2/2016"}, {"body": "nicolabortignon need use ref react component work fine either way see example open browser console see log result", "d": "2/2016"}, {"body": "nicolabortignon working fiddle demonstrate issue", "d": "2/2016"}, {"body": "created fiddle work trying understand going current codebase cose problem assume safe mark able reproduce february jim notifications githubcom wrote nicolabortignon working fiddle demonstrate issue reply email directly view github", "d": "2/2016"}, {"body": "hmm \u30c4 try", "d": "2/2016"}, {"body": "slightly better still looking timeout", "d": "2/2016"}, {"body": "hmm get times even check full second later honestly svg expert looks like usage question react responsible creating domsvg nodes calling componentdidmount everything seeing seems indicate react done correctly beyond browser looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core nt see anything indicate react nt job suspect kind race condition svg nodes created browser still svg layout something perhaps command force svg flush perhaps bug chrome something able come clear examplejsfiddle demonstrates bug react core let know reinvestigate otherwise recommend asking stackoverflow", "d": "2/2016"}, {"body": "cc sebmarkbage ideas", "d": "2/2016"}, {"body": "add header usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation thread move stackoverflow", "d": "2/2016"}, {"body": "ahh known simple sorry wasting time", "d": "2/2016"}, {"body": "let keep discussion main thread unless distinct alternative proposal looks like continuation proposaldiscussion single proposal discussed multiple separate threads confusing harder track", "d": "2/2016"}, {"body": "initial discussion happened twitter current pr minute thing twitter convo taking step back issue ensure requirements clear solution agreed upon continuing pr", "d": "2/2016"}, {"body": "pr closed favor discussion", "d": "2/2016"}, {"body": "since additional feedback took smaller step direction", "d": "2/2016"}, {"body": "provide two jsfiddles one showing nt work react another showing touch events work without react try dig phone test end", "d": "2/2016"}, {"body": "sorry fucked everything working", "d": "2/2016"}, {"body": "comes word true jsfiddle demonstrates coming false", "d": "2/2016"}, {"body": "would absolutely fantastic making things simple copyandpaste would go long ways towards increasing sri adoption", "d": "2/2016"}, {"body": "repository react core react native reactnative repository gradlew failing box guess environment issue end related reactnative codebase", "d": "2/2016"}, {"body": "first glance suspect probably duplicate without repro really nt whole lot end since suspect duplicate since nothing actionable end since ca nt repro issue issue going close able find good repro jsfiddle let know reopenreinvestigate", "d": "2/2016"}, {"body": "jimfb sounds good thanks pointing issues spend time later attempting create reproduction reopen", "d": "2/2016"}, {"body": "browniefed able figure causing problem fix facing problem nested components one containing select rerendered unmounted mounted new props constantly getting error mentioned remove select completely render wrapper component everything works fine", "d": "2/2016"}, {"body": "lkay entirely using instead calling new component dom container worked fine seemingly sync mounting issue moved pretty quickly converted things full react app nt integration work", "d": "2/2016"}, {"body": "probably included part html specification see section", "d": "2/2016"}, {"body": "ah okay", "d": "2/2016"}, {"body": "css selectors use dom attribute nt generating markup inserting initial values also set way updates uses property attribute unless everything set via attribute nt possible need cases nt possible catch could potentially start using attributes everything possible cc spicyj", "d": "2/2016"}, {"body": "essentially dupe gon na call wontfix", "d": "2/2016"}, {"body": "bug duplicate", "d": "2/2016"}, {"body": "jimfb thx", "d": "2/2016"}, {"body": "whitelist attributes nt check ensure used corresponding tags regards validation probably headed opposite direction issues like however may reason set attribute even already setting property", "d": "2/2016"}, {"body": "tested removed removeattribute run keep required", "d": "2/2016"}, {"body": "ah correct fwiw also nt specify attributes unless using server side rendering", "d": "2/2016"}, {"body": "mistake edited checkedselected rendered use nodexx set", "d": "2/2016"}, {"body": "going close favor since actionable part issue far tell", "d": "2/2016"}, {"body": "theblasfem beat haha noticed though fix nt address fact event listener added hidden event begin also event name actually made changes mine addition responding prop also implemented", "d": "2/2016"}, {"body": "nice catch markmurphy thanks notice continue solution", "d": "2/2016"}, {"body": "whole point warning useful mixin automatically calls opposite would recommend details", "d": "2/2016"}, {"body": "jimfb good read thanks without ismounted still find function useful edit especially multiple buttons component control multiple state variables", "d": "2/2016"}, {"body": "without could write without mixin mixin version without mixin syntactically shorter readable nt depend details mixin therefore still would nt recommend mixin find mixin useful power", "d": "2/2016"}, {"body": "fair enough nt use transpiler nt think looks lambda functions", "d": "2/2016"}, {"body": "haha browsers suck want submit pr looks like thing unnecessarily places react codebase note need use typeof binding might exist need look case individually make sure change valid", "d": "2/2016"}, {"body": "went react repo configuration build tests execution fix nt break anything far nt find solution make good test phantomjs nt documentall property documentall htmlallcollection probably exception typeof documentall html standard longer supported starting internet explorer use getelementbyid info see compatibility changes suggestions unit test fiximprovement", "d": "2/2016"}, {"body": "long tested manually worked ie think accept change without unit test", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "lol even", "d": "2/2016"}, {"body": "ca nt reproduce ie ie windows either standards quirks mode missing", "d": "2/2016"}, {"body": "ie lt fine problem occurs using modern browser like chrome firefox ie gt edge returns set component prop chrome react compare prop default prop chrome react treats missing value default prop selected end prop always set modern browser case", "d": "2/2016"}, {"body": "oh sorry totally misread yes repro", "d": "2/2016"}, {"body": "looks like probably usage question related environmentconfiguration rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation thread move stackoverflow reduce problem demonstrable bug react core reinvestigate", "d": "2/2016"}, {"body": "ok jim right usageconfiguration issue really react bug someone also found issue meantime fixed path prefix subcomponents needed prefix sorry noise", "d": "2/2016"}, {"body": "see support yet pity first time render correct", "d": "2/2016"}, {"body": "work fiddle", "d": "2/2016"}, {"body": "yeah work fine mean", "d": "2/2016"}, {"body": "ok check time", "d": "2/2016"}, {"body": "spicyj syranide", "d": "2/2016"}, {"body": "know fairly obscure seeming bug one could call bug actually affecting lot code running lot libraries iwe provide done check smaller percentage affected reactbootstrap instance since use controllable helpers encapsulate behavior lots components using context wrap bunch field read inputs big form component really common use case parent form props needs settled children inputs fields update values right uncontrolled parent elements exhibit sort bug also realize using bad form since internal api impossible correctly implement controlleduncontrolled components without would love see form larger aside", "d": "2/2016"}, {"body": "sorry trouble understanding issue reactupdatesasap public api use settimeout requestanimationframe would expect behavior describe incorrect using reactupdatesasap case", "d": "2/2016"}, {"body": "reason test case using mostly demonstrate updates seem order even occur tick illustrates something worked nt covers case settimoutraf per discussion problem seems intractable reason using actual modules reason reactdominput uses correctly implement controlleduncontrolled api components practical use case something like course entirely possible expecting something work never intended work fine want say least inadvertently relying behavior behavior changed figure adjust bunch code potential cost using private apis thought make sure behavior change intendedacceptable", "d": "2/2016"}, {"body": "clarity problem use internal ultimate cause bug avoid bug", "d": "2/2016"}, {"body": "draftjs might somehow related", "d": "2/2016"}, {"body": "think opt keep core clean provide building blocks nt support every possible property node might focusing markup attributes markup generation another example could described declaratively supported", "d": "2/2016"}, {"body": "assume comments etc referring primarily homepage keep mind homepage sales pitch users see deciding framework use ease useunderstanding paramount stage users ready learn best practices read full docs learn various features design patterns reason nt want introduce two different componentdefinition styles homepage two concepts harder understand one wanted submit pr two pages mentioned seems like appropriate place surface stateless functions prominently", "d": "2/2016"}, {"body": "yes referring homepage keep mind homepage sales pitch two concepts harder understand one gotcha", "d": "2/2016"}, {"body": "pretty sure close", "d": "2/2016"}, {"body": "yep thanks", "d": "2/2016"}, {"body": "thought looked like good first bug", "d": "2/2016"}, {"body": "would completely agree fact people would good designing apps scratch would probably still use jshtml heavy oop structure would better example problematic access child properties grandparent even though scenario quite reccuring especially considering heavy folding popular actually context would trick children prop access default cascading magic one context midchildren even would fp way biggest problem child component might universal suitable current grandparent usecase example coming everupdating library hence youde update everything even small change child component happened question still remains nt want hear live without want hear might dangerous leading bad practices", "d": "2/2016"}, {"body": "agree texttechne requires implicit knowledge component works general component black box soon start peaking component implementation things get really messy esseswann said actually kind nt want know works want set props occur likewise nt know make selector css understand going imho one worst properties css lack style isolation least double edged sword imagine designing page like big checkboxes double size checkboxes page using css selector component used checkbox internally depending size checkbox align size another node things broken longer import arbitrary components components depend ambient styles page danger bad practice interesting discussion thanks proposing going close reasons texttechne mentioned feel free continue discussion thread fwiw think could use context achieve behavior looking", "d": "2/2016"}, {"body": "jimfb ty response gave good explanation still concerns general component black box soon start peaking component implementation things get really messy feel bit dumb nt understand controlling props component grandparent differs controlling props parent corresponding use case expose props parent context anyways component used checkbox internally depending size checkbox align size another node two ways make dependant something abstract add logic component would make less reusable thing unlike css affect almost everything cascading props affect obviously props component made recieve without breaking", "d": "2/2016"}, {"body": "esseswann parent reason possible props chooses forward child ca nt easily reason things grandparent might grandparent allowed bypass parent api", "d": "2/2016"}, {"body": "far checked parent context overrides grandparent context props btw webpack hmr somehow ignores deletion contexttypes parent renders thiscontextsomething undefinied overall subject referenced inversion control", "d": "2/2016"}, {"body": "thought thinking something included react possible write custom prop type validators", "d": "2/2016"}, {"body": "using trycatch rather windowonerror get access thrown error object browsers support unfortunately still includes ie safari error object also gives us stack trace ie safari windowonerror nt give us access error object stack trace react would call type onerror hook catch block root event handler could get access error information need issues see", "d": "2/2016"}, {"body": "biggest issue performance would require wrapping every event even mousemove events fire super frequently trycatch block causes jsvm deopt also gets complicated used errorboundary catch point clear semantics parent error boundary passes callback child error boundary exception thrown child invokes grandparent function case grandparent broken component ie one potentially erroneous state child exception pops system thus nt know fatal grandparent probably best solution would figure solution smooth interface", "d": "2/2016"}, {"body": "must missing something performance point look call stack one react event handlers see three react functions stack already trycatchfinally blocks lastchance error handling could integrated one existing exception handlers performance cost anyway thought deoptimization occurs function level adding trycatch block otherwise trivial dispatcher function practical impact please correct know otherwise since mind simple change seems shame get wrapped complications error boundaries issue react team nt see good fit core project guess go ahead implement fork meet needs system", "d": "2/2016"}, {"body": "think fit probably best solution would figure solution smooth interface super high priority us since upside ability log slightly detailed error information specifically stack traces legacy browsers nt far tell affect control flow program nt affect primary browsers ultimately think request synthetic version specific global event seems relevant nt see solutions cleaner missing something let know simple change performanceapi impact submit pr happy take look", "d": "2/2016"}, {"body": "please see pr meets needs project hope find fits well design react welcome suggestions improve", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "think bug pretty clearly equal", "d": "2/2016"}, {"body": "made pr", "d": "2/2016"}, {"body": "would restore default value behavior would expect intuitively", "d": "2/2016"}, {"body": "mattzeunert otherwise could create element using could created using", "d": "2/2016"}, {"body": "cc sebmarkbage nt recall talked expected behavior defaultprops resolution explicitly resolved createelement adding second pass cloning", "d": "2/2016"}, {"body": "yea think bug reason jimfb mentioned gives way guarantee type prop never going idea guarantee never get undefined another example explain semantic roughly equivalent", "d": "2/2016"}, {"body": "sure pr going get merged reused defaultprop process used createelement cloneelement fix bug", "d": "2/2016"}, {"body": "try get test case put together", "d": "2/2016"}, {"body": "cdonohue ping", "d": "2/2016"}, {"body": "tried putting together different scenarios honestly think something iframes within iframes open another issue find root cause reason keep open problem intermittent sorry delay", "d": "2/2016"}, {"body": "per comment proptypes mostly sort maintenance mode really planning add right would breaking change would inverting default requiredness something proptypes replaced static analyzers like flow reason thinking probably would nt", "d": "2/2016"}, {"body": "provide simple usage example component creates problem", "d": "2/2016"}, {"body": "hi seem problem side started raise warning soon decorated components cssmodules reactcssmodules", "d": "2/2016"}, {"body": "hi could nt separate error repoexample ca nt identify source problem romaingweb nt use reactcssmodules problem came using implementing server side authorization anyway last time nt saw error", "d": "2/2016"}, {"body": "reasonably sure fixed masterfuture since reactdataid numeric ssr", "d": "2/2016"}, {"body": "either method works optimal solution probably depends use case usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "2/2016"}, {"body": "sorry comment ignorant bit noob key path always unique immutable would need counter short reactgetuniqueid localid would return unique id based key path optional second argument provided function would pure would always return output given inputs ie counter one id needed within component optional second argument could provided differentiate two course key paths nt immutible unique obviously wo nt work", "d": "2/2016"}, {"body": "problem fixed removing unused refs one components getting error check refs nt use rendering component giving error", "d": "2/2016"}, {"body": "made pr", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "duplicate warning useful cases pretty sure get paste event nodes contenteditable capturing events preventing browser changes specified avoid warning bail react call reactrender contenteditable container node cause us warn afaik", "d": "2/2016"}, {"body": "needs contenteditable order enable browser cursor behavior input events etc render different mount point preventing events bubbling parent components longer works correctly see stopgap solution ended overriding app ignoring messages match regex pretty silly works course enabled production anyway definitely love option component say hey react know though", "d": "2/2016"}, {"body": "capture input events without content editable simulate cursor behavior basically need anyway order implement good editor per browsers different behaviors regards cursor position works want truly nice editor end using almost nothing contenteditable get trying reuse browser functionality optimistic assumption contenteditable gets way regards hack better stopgap solution hack would probably set contenteditable imperatively demonstrated fiddle way react nt even know set share component without overwriting people method", "d": "2/2016"}, {"body": "yeah google docs method reimplement everything however nonword processors possible get way using content editable code manage selection even medium new facebook notes made react still use content editable degree like new hack much better thanks", "d": "2/2016"}, {"body": "jimfb spicyj seems like something could take look internal discussion optout would look like could imagine function exposed similar back day another property specified component could make bit hard work purpose similar benefit also drawback first option appwide whereas second one would specified every component", "d": "2/2016"}, {"body": "generally avoid global configuration like plague would almost certainly prefer specified component first glance kind like second proposal bikeshed little ben see come", "d": "2/2016"}, {"body": "two best naming proposals right like little", "d": "2/2016"}, {"body": "mirrors", "d": "2/2016"}, {"body": "like suppress better silence allow also fine problem implies possible change behavior rather merely disabling warning reason think favor", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "document content editable doc", "d": "2/2016"}, {"body": "want send pr sure", "d": "2/2016"}, {"body": "graue proposal object spread syntax simpler eventually built js emphasis mine hopefully risk involved using worth considering whether something want encourage users case would suggest consider including note mentioning helper mainly useful nested objects cases object spread helpful also addressed albeit verbosely zpao nt shipped react though somebody came better name split tomorrow filed long time ago let sit closing somebody oss wanted take ship version fine sorry misunderstanding something nt already split shipped better names eg reactaddonsupdate remaining issues things like bundling react changing internal usage putting separate repo etc", "d": "2/2016"}, {"body": "hmm well see shell reexports better name take mean something even referencing react", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "spent hours tracking one tried googling something like could nt find anything useful maybe documentation due", "d": "2/2016"}, {"body": "jackielii documented pretty clearly big red note box also render function pure function state without side effects supposed nt able tell many times called", "d": "2/2016"}, {"body": "news issue", "d": "2/2016"}, {"body": "tested unable reproduce fiddle", "d": "2/2016"}, {"body": "lucaspin verify nt work version ie andor provide fiddle demonstrates issue", "d": "2/2016"}, {"body": "jimfb fiddle works fine ie however nt understand realize using version react maybe reason nt work fiddle", "d": "2/2016"}, {"body": "ok cool going assume fixed issue unless hear otherwise let know discover repro reinvestigate", "d": "2/2016"}, {"body": "jimfb thanks man one question new version going released", "d": "2/2016"}, {"body": "lucaspin current thinking probably month subject change", "d": "2/2016"}, {"body": "reopening track longer term ideas", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "pretty sure artifact order documentlevel event listeners get registered react uses synthetic event system interaction native events synthetic events strictly undefined sebastian wrote post onceuponatime native synthetic event systems large inherently interoperable", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "nt think presence refs elements docs referring say refs nt supported regardless using string refs legacy pattern likely go away eventually would try avoid relying code linked appears rely", "d": "2/2016"}, {"body": "nt need button illustrating problem", "d": "2/2016"}, {"body": "passed dom component", "d": "2/2016"}, {"body": "running similar issue onleave calls delayed onenter animation time v", "d": "2/2016"}, {"body": "also seeing exactly situation internal ui library written react uses refs since want develop time main application ed whenever try test component via running webpack build fine probably due deduping going get following error javascript import react react export const foo reactcreateclass render return foo javascript import react react import reactdom reactdom import testutils reactaddonstestutils import foo uilibraryfoo shouldnt blow gt const foo testutilsrenderintodocument reactdomfinddomnode foo textcontentshouldequal foo crashes following output", "d": "2/2016"}, {"body": "also still happens latest node npm versions", "d": "2/2016"}, {"body": "anyone gets stuck workaround works fine", "d": "2/2016"}, {"body": "ran today link babel old documentation leads page link take endorsement swap docs inbrowser transforms directly link update text accordingly", "d": "2/2016"}, {"body": "babelstandalone nt actually transforming script tags write wrapper done need get shipping somewhere update docs stop linking entirely", "d": "2/2016"}, {"body": "got issue handle transforming tags babelstandalone however nt time implement built looks like work happy accept pull requests add babelstandalone smile", "d": "2/2016"}, {"body": "pr submitted tonight actually", "d": "2/2016"}, {"body": "wrote intention building us ship docs though think need fix something nt tested couple weeks nice thing code jsxtransformer mostly changed transform call problem throwinthetowel nt things learned along way jsxtransfomer biggest thing going actually creating script tags right order vital sourcemaps fun issues forget exactly figure pr worth going feel free cc", "d": "2/2016"}, {"body": "anybody looked guy bedford systemjs babel plugin possible solution", "d": "2/2016"}, {"body": "mentioned could export two globals issue keeps coming eg good reason common case user want iff using makes sense default packaged together notable counterexamples like reactart people using commonjs anyway deduplicate easy make argument bundled default least could provide optional bundled build cdns", "d": "2/2016"}, {"body": "jimfb optional build seems best option keep everyone happy without downsides eventually natural course things terms browser requests pulling combined bundle ensuring sensible browser caches", "d": "2/2016"}, {"body": "completeness would arguably want reactcore reactdom separate requests still optimal scenarios asking react team maintain minimum following distributions npm reactcore npm reactdom cdn reactcore cdn reactdom cdn reactcoredom cdn reactcoremin cdn reactdommin cdn reactcoremindommin potential builds prod profile dev", "d": "2/2016"}, {"body": "least could provide optional bundled build cdns sounds better providing single build need one two new builds though confused umd would work builds think library two independent exports global environment work exactly like commonjs umd builds currently support today using umd builds hypothetical umd would either look like merged public api potential name clashes inconsistent import vanilla builds saying importing commonjs umd build common use case worried potential confusion maybe understand umd builds work sweatsmile", "d": "2/2016"}, {"body": "wo nt single build replace another bundled build probably umd set globals", "d": "2/2016"}, {"body": "imagine another renderer page would need use still shared global state still needs separate distributions one well maybe combine want add seems complicated", "d": "2/2016"}, {"body": "wild suggestion even though may apply explicitly react facebook considered cdns take optional request like google eg google fonts facebook cdn take request multiple keys say ends providing one request facebook needs cache requests dependency arithmetic side solve problems quite succinctly would render entire discussion irrelevant dependencies matter sizes usage patterns kept clean separate", "d": "2/2016"}, {"body": "also adding usage patterns isolated provided cleaner requests eg instead usage b could pull set predefined dependencies example typical browser request react dom could either would even enable unknown potential future use cases clean way ps something done dashes true dependency arithmetic used could ignored well considering additions course details spec requests would decided consistency idea", "d": "2/2016"}, {"body": "take even could actually make react lot smaller since optional flag since opens possibility sending custom builds open browser specific requirements removing compatibility layers based react dependency served directly cdn specific particular browser less code smaller network packages lesser latency smiling faces react starting modularizing even allowing custom builds removing compatibility layers could interesting area explore", "d": "2/2016"}, {"body": "dropping say observing still case react", "d": "2/2016"}, {"body": "afaik nothing actionable assuming understanding comment correctly browser behavior nt anything end", "d": "2/2016"}, {"body": "lovedota looks like hitting error callback called three times animating three elements refactor code call work better resilient behavior reacttransitiongroup though original code also works", "d": "2/2016"}, {"body": "seems work per wrong feel free reopen please provide fiddle", "d": "2/2016"}, {"body": "yes fixed", "d": "2/2016"}, {"body": "issue mean nonstandard characters removed", "d": "2/2016"}, {"body": "ampersand non standard character normally would escape via", "d": "2/2016"}, {"body": "jimfb might something could look adding next", "d": "2/2016"}, {"body": "nt looked sounds reasonable", "d": "2/2016"}, {"body": "two added ie support still add seperate events fine asis", "d": "2/2016"}, {"body": "solution added component superclasses could easily import assign fn class nt require changes scu garbage collects properly component dies js class supercomponent extends reactcomponent preserve reference equality costs creating bound function storing reference based identity source function consider like bind except always returns fn callback amp data bindcallback callback data thiscallbacks thiscallbacks new map let datamap thiscallbacksget callback check already got datamap amp amp datamapget data return datamapget data else datamap datamap new map could also make support multiple arguments making params using", "d": "2/2016"}, {"body": "nice goal hopefully make functional example wouldnt work stateless components", "d": "2/2016"}, {"body": "true seems generally would nt problems stateless components stateless component generally leaf node nt make much sense use stateless component instantiate array children usually want bind data callback", "d": "2/2016"}, {"body": "agreed strml experience stateless components difficult optimize anyway", "d": "2/2016"}, {"body": "yeah going argue playing around elm kinds architectures entire state held atom passed stateless components entire ui stateless", "d": "2/2016"}, {"body": "supposed fixed cpojer", "d": "2/2016"}, {"body": "yet fix need add tests tests performance definitely fixed final though", "d": "2/2016"}, {"body": "publish new version prerelease fixes issue today", "d": "2/2016"}, {"body": "may gods praised sun feb pm christoph pojer notifications githubcom wrote publish new version jestcli next prerelease fixes issue today reply email directly view github", "d": "2/2016"}, {"body": "problem still present cause unexpected breakage older browsers production builds since profiling shown function call actually bottleneck think makes sense put back table blessed api even somewhat undocumented break apps production would great interop optimizing runtimes fast path alternative fewer validations alternatively could constructor simply exposed babel helpers interesting desire remain pure nt consider relying symbol polyfill failing interop polyfill native pure seems longterm solution fix good", "d": "2/2016"}, {"body": "work also shared symbol need handled way library code", "d": "2/2016"}, {"body": "case symbol would polyfilled library code would used symboliterator polyfills would fall back globalsymbol present crux problem react fallback symbol present polyfill use magicnum possible user code uses polyfill say via babel library thus uses magicnum magicnum polyfill thinking way fix fix babelplugintransformreactinlineelements make existence unnecessary originally thought replacing function call inline object would faster turns true transform uses function function create react elements faster production nt actual implementation production mode aware may loss context error conditions errors generally thrown away production anyway could configured", "d": "2/2016"}, {"body": "inlining part story point decouple react package needing dependency think missing point though point explore generic solution around nominal branding eg polyfilling pattern matching react particular value type number similar data structures would nt use one library use trick used forever also larger issue polyfills work across boundaries suspect partial polyfilling solution thing broken break ways particular case others similar problems feature library authors able use therefore transpilepolyfills story fixed obvious react fallback different feature tests standard practice eg also use obviously problem feature testing per say global identity required needs polyfill would best way polyfill library code eg react immutablejs check string possible property name nt cause problem similar problem would occur anything requires global state spec intentionally tried avoid global state example zones proposal would similar requirement suppose global state really need shared object reference global polyfill solution maybe global polyfills best practice", "d": "2/2016"}, {"body": "purpose tostringtag nt rather reactelement defining typeof define environments ca nt prevent xss way matters robust solution aside using types jsonserializable course oneanddone library uses actually works could set inlineelements would set typeof tostringtag think magicnum ditched entirely would fix bug check exists returns otherwise return objectassign thing objectassign polyfills real thing result definition symbol polyfill actual symbol reference equality reference equality primary use symbol bug also affects resolved fact previously problems simply multiple instances polyfill returning different symbols reproduction say pass iterable react environment without native symbol userland code polyfill libraries iterable property symboliterator polyfill react checks global symbol exists nt checks also nt exist assumes collection iterable error thrown ca nt iterate plain object run verify indeed fails case runtime missing support node succeeds newer runtimes like specific case react actions taken remove typeof next release simply return global symbol input object real security environments without global polyfill unless willing claim even nt save us structured cloning vectors add check evaluate whether inlineelements transform even exist since function call still fast ca nt production react make optimizations decided optimization still exist update babel set symboltostringtag checking global", "d": "2/2016"}, {"body": "hoping able find way share objects across api workers even crossorigin part would allow symbols transfer workers shared across workers spoofable however true shares identity maybe neither share identity lot research needed space admit long shot many pieces need fit together something consider meantime way read three variables using global polyfills everywhere local polyfills using branding strategy using detect iterability use local polyfills breaks code broken fix something fix still breaks code broken b fix changing works code works c avoid use local polyfills ensure everyone uses global polyfills work fine option nt fix anything helpful option b wo nt work unless change libraries feature detection change specification neither seems realistic option c seems plausible manage fix option c point changing react works options", "d": "2/2016"}, {"body": "mentioned intentional objects would work across boundaries instead explicitly put constructor tag chance raw data coming across boundary interpreted element", "d": "2/2016"}, {"body": "idea would work across default unless explicitly provided way share symbol", "d": "2/2016"}, {"body": "looks like fixed thinking picking upon investigation appears fixed maybe closed", "d": "2/2016"}, {"body": "nt explicitly call whitespace yeah hopefully clear enough", "d": "2/2016"}, {"body": "updates well ca nt use inside svg ie svg preexisting ca nt render entire thing react either", "d": "2/2016"}, {"body": "think works masterfuture wrong let know reinvestigate", "d": "2/2016"}, {"body": "thanks jimfb seems fixed latest fixed futurenext glad know resolved stable release soon", "d": "2/2016"}, {"body": "fixed master let add test make sure continues working interest sending pr", "d": "2/2016"}, {"body": "sealed object consuming property expensive", "d": "2/2016"}, {"body": "hi sebmarkbage use case might help working grommet ux framework top react decided move components stateless functions following guidelines defined release notes things working well us except fact started receive issues existing clients ref applied components got converted stateless functions use cases focus management positioning resize could document components support refs nt really good solution opinion feel exposing internals components good idea result thinking adding stateless functions internal components scenario internal components ones used inside core exposed users", "d": "2/2016"}, {"body": "also would like refs stateless components taking measurements wrapped components hocs possible first wrap another hoc make ref one need real dom node", "d": "2/2016"}, {"body": "vlinder yes common strategy recommend nt need dom node", "d": "2/2016"}, {"body": "react really seems less ideal able treat components opaque things instead think whether functional", "d": "2/2016"}, {"body": "taion discussed means creating instances means loose benefits making stateless functions first place attaching refs really escape hatch anyway avoided extent possible people use refs often probably largely refs give access imperative api aligns way historically trained write programs get functional midset writing react code life much easier anyway whole discussion", "d": "2/2016"}, {"body": "agree refs avoided general jquense mentioned often unavoidable dom manipulation many cases eg displays overlays really need get dom node corresponding react element like burden users libraries think whether components stateless think precisely refs bit dirty okay attach suboptimal behavior like creating instances elements refs attached philosophy use refs feature may incur performance costs", "d": "2/2016"}, {"body": "stands though stateless components actually instances assume concern lets block future optimizations even still refs conversation really standin root dom node render probably always going known react least internally right right refs mechanism reliable access child dom node aside annoying sort stuff parent si think folks want see something first class even acknowledging would first class escape hatch", "d": "2/2016"}, {"body": "taion think missing point missing vlinder said nt need burden users wrap user component stateful component attach ref stateful component jquense yes future optimizations ca nt dom node reference referenced dom node could change stateless component rerenders would need handle component could updated react part rerender aka instance", "d": "2/2016"}, {"body": "future allow multiple components returned render finddomnode wo nt work likewise might return null component chooses drilling using finddomnode really thing recommend however due artifacts css convenient way handle layout likewise focus useful however currently rethinking layout focus able handle using react concepts alone future", "d": "2/2016"}, {"body": "right refs mechanism reliable access child dom node aside annoying finddomnode children firstchild sort stuff parent note pass refs props need kind access js function componentwithinput inputref return function parent return whatever breaking encapsulation pretty much explicit equivalent breaking encapsulation worse way", "d": "2/2016"}, {"body": "gaearon work stateless components also set refs maybe string refs case nt quite solve issue child components would need coordinate parent ones provide specific data discussed big win encapsulation nt work components like need measure arbitrary children say nothing currently impossible current api taion said less ideal able treat components opaque things instead think whether functional also amazing focus able handle using react concepts alone future seriously would anything get focus model nt dom one think could demonstrate uncomfortably large percentage bugsfrustrationhacks ui libraries focus related", "d": "2/2016"}, {"body": "nt null nan values still get error updating style via dispatcher store gt changelistening thoughts divstylerendernull", "d": "2/2016"}, {"body": "essekia added fontsize need create new style object instead changing existing one", "d": "2/2016"}, {"body": "used jquery extend clone object solved thanks spicyj", "d": "2/2016"}, {"body": "ran issue using set target empty object new memory reference", "d": "2/2016"}, {"body": "looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "2/2016"}, {"body": "looks like nt discussion topic scope appropriate general type checker", "d": "2/2016"}, {"body": "hi got problem used densejs tried set custom data attribute xxx behavior accepted future", "d": "2/2016"}, {"body": "sure densejs issue think duplicate fixed appears work latest", "d": "2/2016"}, {"body": "jimfb thanks answer mentioned dense got problem using check jsfiddle problem looks working great however work jsfiddle attribute nt show correctly", "d": "2/2016"}, {"body": "imgarylai bugfix git version jimfb fiddle using released react", "d": "2/2016"}, {"body": "cody correct imgarylai yes works", "d": "2/2016"}, {"body": "cody jimfb thank", "d": "2/2016"}, {"body": "anyone feel like sort consensus model something like react least enough ya would open pr explores gather conversation single serializable state treeatom allows use cases folks want see state continues exposed local components changing current component api disagreement api expose state tree user", "d": "2/2016"}, {"body": "gajus link broken exact problem", "d": "2/2016"}, {"body": "gajus link broken exact problem appears react turned monolithic repository specific issue likely component including often scenario developing multiple components using link using webpack make sure one version used forcing primary resolution path webpack config eg let know addresses issue", "d": "2/2016"}, {"body": "going close say nt going", "d": "2/2016"}, {"body": "realistically probably nt going fact pulling reactlink stuff core really beneficial pattern threw reactlink stuff addon try pull even later effort make easier community fork provide utilities community finds useful let die community nt find useful anyway feel free fork add improvements", "d": "2/2016"}, {"body": "think official recommendation point would use context things like also allows simulate serverside render initial mount client side pretty handy trickfeature make nodeschecksums align", "d": "2/2016"}, {"body": "issue nt seen activity six months fixed classes nt think likely make change old style classes", "d": "2/2016"}, {"body": "ping kureev simple testcase", "d": "2/2016"}, {"body": "response six months closing", "d": "2/2016"}, {"body": "similar issue checked two copies react ref success tried small test created two library project x one application project first test made react reactdom peerdependencies library projects project depends project x application project depends react reactdom projecty error reported second test project x used refs made project use component project x refs application project used project component time error reported though library project react reactdom external also resided peerdependencies turns library project using main property packagejson pointing distributable version path rather pointing npm module version path caused trouble thought sharing guys double check library packagejson", "d": "2/2016"}, {"body": "proptypes mostly maintenance mode probably nt making big api changes point", "d": "2/2016"}, {"body": "spicyj also looking answer question mikkoh asked", "d": "2/2016"}, {"body": "spicyj may possible feasible add refs children nodes case one query dom node downstream reference", "d": "2/2016"}, {"body": "miguelguedes vinspee miguelguedes look solution madlittlemods provided solution correct somethingthatwillfindstuff simply clone props obviously immutable immutable props prevent cloning may possible feasible add refs children nodes case one query dom node downstream propschildren reference use callback refs always feasible new callback ref also call previous callback ref making completely transparent whomever ref pass reference actual dom node call walk dom recommended solution attach ref said usage questions better answered sites like stackoverflow try use github issues tracking bugs react core generally answer usage questions github", "d": "2/2016"}, {"body": "directly require react react dom min get error even though using reactcreateclass webpack directly requiring min versions server build reason wanting directly require min versions", "d": "2/2016"}, {"body": "discussion six months nt see anything actionable going close", "d": "2/2016"}, {"body": "wanted circle back think blocks changes wanted look streaming async started implementing suggestion moving recursion tests updated yet basic examples working unfortunate thing calls depended mounted images executed within components move logic actual mounting happening think best way resolve would move forks respective return simpler meta objects would use call implementation specific adapters thoughts best way decouple methods", "d": "2/2016"}, {"body": "speciel field serialized confused elaborate", "d": "2/2016"}, {"body": "jimfb thanks question see clear confused elaborate output text file", "d": "2/2016"}, {"body": "yes relevant serializability anything", "d": "2/2016"}, {"body": "generally document differences react behavior web standards case far tell simply conforming web standards clear remains documented particular way deviating web standards unclear", "d": "2/2016"}, {"body": "yes know way react web standards input file simulated reacts virtual dom", "d": "2/2016"}, {"body": "mean input file simulated virtual dom mean possible render", "d": "2/2016"}, {"body": "virtualdom virtualdom types properties explained typefile even mention page", "d": "2/2016"}, {"body": "nt call prop particular nt different web nt call instance block quoted call ones exceptional previous bullet point applies others think consistent think reasonable mention deviate expectation going close", "d": "2/2016"}, {"body": "think might worth mentioning something eg ca nt actually programmatically set value file input pretty big deal means susceptible issues reconciliation read also read work even outside react still might worth mentioning", "d": "2/2016"}, {"body": "zpao thanks reply think might worth mentioning something eg ca nt actually programmatically set value file input pretty big deal means susceptible issues reconciliation meant could explain", "d": "2/2016"}, {"body": "wait", "d": "2/2016"}, {"body": "would also like see nicer way suppressing message using zombiejs execute tests react app unless suppressed using hack message appears middle mocha output spoiling party", "d": "2/2016"}, {"body": "caused current react library handle properly right avoid using supported yet extra information error easily reproduced plain html javascript long know want change href value existing svgaelement reproduce error react version record nt produce error called inside library however enough set value href means still use", "d": "2/2016"}, {"body": "however enough set value href means still use svg sorry super familiar svg elaborate wrong", "d": "2/2016"}, {"body": "nothing wrong react support nobody use tried explain error occurs react runs fails getter property also tried instead assigning seems run inside library nt throw error time still fails update value want support chance guess would hard current architecture distinguish", "d": "2/2016"}, {"body": "piglovesyou sure true current architecture distinguish already things like enable tagsattributes within tag would speculate handling would technically possible cc spicyj think bigger question many svg tagsattributes use getters like singular special case going see type thing cropping dozens situations svg", "d": "2/2016"}, {"body": "surprising setting attribute nt work writing html works calling", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "comments six months nt clear want change bug nt actionable might get changedfixed part bigger docs rework let close", "d": "2/2016"}, {"body": "actually like code snippet posted bc preprocessing initializing default props thanks mentioning", "d": "2/2016"}, {"body": "spargonaut provide two fiddles one demonstrates works without react second demonstrates work react", "d": "2/2016"}, {"body": "nt seen people running old issue nt repro going close reinvestigate get repro", "d": "2/2016"}, {"body": "killed", "d": "2/2016"}, {"body": "document reactdomunstablebatchedupdates", "d": "2/2016"}, {"body": "spicyj since start documenting features nt always left intentionally undocumented also unstablerendersubtree unstablehandleerror others thought decision document become stable document part release process different situation addon issue made sense time", "d": "2/2016"}, {"body": "sure", "d": "2/2016"}, {"body": "sorry entirely sure issue requesting internal api seems meet internal use cases going close", "d": "2/2016"}, {"body": "think fixed nt notes anymore nt see factory mentioned anywhere page", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "update taking cue could submit pr adding still wanted cc zpao", "d": "2/2016"}, {"body": "think pretty unlikely take next release soon hopefully get point next release attrs work without whitelist super inclined spend effort moment", "d": "2/2016"}, {"body": "fair enough reckon closed", "d": "2/2016"}, {"body": "nt come often probably worth cluttering documentation something one ever remember reading however probably could warn warn", "d": "2/2016"}, {"body": "ran issue well trying highlight parts string programatically ie replace tags ended creating module based spicyj solution anyone interested iansinnottreactstringreplace", "d": "2/2016"}, {"body": "controlled components reactive defaultvalue former never lets change latter necessary necessary change default value reason allow user enter value", "d": "2/2016"}, {"body": "updates", "d": "2/2016"}, {"body": "would happy take pr sets back old value places mutate", "d": "2/2016"}, {"body": "trying get interactive product tour hoping drive ui events like user would bloodyowl said problem looks jquery react issue probably closed use code instead", "d": "2/2016"}, {"body": "yagudaev sir saved us lot time thank", "d": "2/2016"}, {"body": "im issue jquery react jquery used react components onchange events never hear onchange event tried shimming val like var originalval fnval fnval function var result originalvalapply arguments first arguments undefined amp amp instanceof amp amp thislength var event uaisie event documentcreateevent htmlevents eventinitevent input true true else event new event input bubbles true react still hear anything works weve also tried polyfilling ie custom events", "d": "2/2016"}, {"body": "react listen onchange use non production react testutilssimulate works even way replicate production react seems like combination objectdefineproperty event propertychange pubsubbed way around rather use dom events definitely issue listening programmatic propertychange events", "d": "2/2016"}, {"body": "transformation potentially dangerous", "d": "2/2016"}, {"body": "happens try", "d": "2/2016"}, {"body": "deceived transformer hoist constant element nt time playing dispute opponent examples realised transform works properly sorry false alarm", "d": "2/2016"}, {"body": "stumbled across ca nt issue closed looks like svg nt support drag events mousedown mouseup etc", "d": "2/2016"}, {"body": "fine closing nt support nt support", "d": "2/2016"}, {"body": "due recent blog post going close issue guys", "d": "2/2016"}, {"body": "ping yibuyisheng site still showing react despite fact going keep pace might make sense point reactjscn", "d": "2/2016"}, {"body": "update experiment using jsonstringify indeed make web workers implementation faster react running ui thread numbers also able get events working created simple todo app pfraze understand comment reactworkers plugin sandbox please explain", "d": "2/2016"}, {"body": "axemclion workers run different thread vm page making better sandboxing iframes threadindependence scales better prevents dos attack capturing thread workers havent good ui work didnt dom access solved using react think could build good plugins framework react apps though need evaluate workersandboxing somewhat first csps help", "d": "2/2016"}, {"body": "latest thinking workers definitely want solve concurrency major issue let work get way particularly scrolling highpriority interaction requires immediate feedback one way solve cooperative scheduling ie making react everything around react yieldy another adding preemptive scheduling os threads workers adds additional guarantees hitting frame deadlines one initial step could take move everything worker proposed reimplementreplace dom however one major limitation text measurement browser layout currently available main thread even implement layout algorithm would nt access text measurement even implemented text measurement would nt access browser font files internationalization fallback unless browsers willing give us text measurement worker option layout main thread react native nt limitation get text measurements worker thread means soon work worker dependent layout going sending blocking work executed main thread wait round trip probably stall animationscrolling however luckily us compositor workers moving along spec would allow us keep executing main thread also put code compositor thread could build react compositor allow us easily build components thread clear react web worker buys us much potential parallelism cost lost scheduling ability module initialization overhead shared code executed twice serialization overhead added complexity compositors nt happening wanted render entire page webgl would wait text measurement workers moving model could potentially use effect intermediate step going less ideal would also require lot work port code move community model completely seems safer wait compositor workers suspect implementation go quick one browser popular websites utilizing spec might take might fatally underpowered first version see long takes meantime react native relay worker hand seems plausible", "d": "2/2016"}, {"body": "relay worker hand seems plausible yup actively exploring", "d": "2/2016"}, {"body": "hi sure understand full problem understand message passing worker main thread expensive sebmarkbage instead focusing using powerful workers nt focus making message passing worker main thread efficient like example supporting native support immutable values allowing pass worker immutable object reference without serialization", "d": "2/2016"}, {"body": "even implemented text measurement would nt access browser font files internationalization fallback sebmarkbage little question would completely silly think could able use embedded font would work pretty much language remember version arial developed purpose embed corresponding font metrics js", "d": "2/2016"}, {"body": "slober terrible expensive ways around also focusing orthogonal problem issue edit also note starting modules code worker nt free neither increases start time lot overlap fdecampredon unicode characters turn glyphs large number ligature combinations makes number explode cjk language fontglyph design character explodes set fixed size maybe could optimizecompress embedded font even glyph sizes would quite large proper sizing shaping need information even would still exact font combination particular browser ie gets rasterized screen would end win cases incorrect measurements", "d": "2/2016"}, {"body": "ok silly p thanks answer developed simple word wrap algorithm svg element past thanks canvas perhaps offscreencanvas could help gets adopted major browsers", "d": "2/2016"}, {"body": "developing react native react dom find react native way merging styles convenient would great could give higher priority thanks", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "possible seems weird way found validate work", "d": "2/2016"}, {"body": "graue thinking rewrite first suggest using array spreadobject spread syntax suggesting feature needs transpilation seems reasonable mentioned risk involved makes worth considering whether want encourage people tip risk experience wellwritten react code rarely needs update state nested one level deep disagree current doc implication deep nesting common natural think fwiw probably common something like redux mentions using helper obviously libraries beside point want ship document helper available independent package anyway item covered reactaddonsupdate", "d": "2/2016"}, {"body": "bitten well actions triggered nonreactevents calls handlers handled synchronously may trigger component become unmounted halfway handler causing subsequent calls emit warning unintuitive would expect always asynchronous documentation even indicates likely scenario abstraction leaky need know handler invoke call somewhere call stack example componentdidmount windowaddeventlistener componentwillunmount windowremoveeventlistener handlewindowkeyboardpress event thispropsonkeypressed triggers datastore update emits change event ends invoking setstate call parent somewhere checking really necessary must code fear component unmounted point exacerbated fact deprecated thus almost way block warnings aside tracking manually", "d": "2/2016"}, {"body": "mobile browsers already fixed also per probably going opposite direction pulling tap event plugin core", "d": "2/2016"}, {"body": "allowing multiple class names also important cssmodules demo api", "d": "2/2016"}, {"body": "fixed", "d": "2/2016"}, {"body": "pretty sure recommendation point", "d": "2/2016"}, {"body": "hi everyone issue still open guess nothing settled even though imo input textarea work dont deep knowledge dont get conversation implemented guys wrote btw good link nevertheless final call waiting confirmation target implementation know change code anytime soon cheers", "d": "2/2016"}, {"body": "iboxgithub rely behavior believe issue warning", "d": "2/2016"}, {"body": "mean feb pm andreas svensson notifications githubcom wrote iboxgithub rely behavior believe issue warning reply email directly view github", "d": "2/2016"}, {"body": "thanks feedback best practice", "d": "2/2016"}, {"body": "iboxgithub input either uncontrolled value always undefnull controlled value string empty string rather null entire lifetime", "d": "2/2016"}, {"body": "jimfb discussion reparenting without remounting descendants would never expected thing concerned unexpected behavioral changes could result app future versions react gets introduced want stay informed discussion", "d": "2/2016"}, {"body": "another use case contexts stumbled upon component beneath multiple transition groups example would like able focus input ancestor transition groups actually appearenter rather initially mount registering callbacks ancestor appearedentered via methods passed context would convenient way", "d": "2/2016"}, {"body": "honest nt remember discussed entirely possible inperson discussion many reparenting discussions online maybe find", "d": "2/2016"}, {"body": "ping", "d": "2/2016"}, {"body": "going close track part", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "hey folks hate resurrect old issue trick seems work cases add onclick element render method react class using end unable find element error runtime directly modifying assignment resolves issue scenario important impossible use shared react component large multitenant system different versions react might already included page left wondering missed something nt better way solve since seems way solve right fork react change", "d": "2/2016"}, {"body": "way solve right fork react change domproperty issues since far ideal far workable solution", "d": "2/2016"}, {"body": "facing issue nelix quite edge case would nice support", "d": "2/2016"}, {"body": "zpao api suites fine really happy rip dynamically generated css manual style manipulation chrome extension iframe armor", "d": "2/2016"}, {"body": "jimfb example would use flow define types props ca nt quite connect dots disappointing hear going away found useful dynamically creating typechecking falcorshapesproptypes", "d": "2/2016"}, {"body": "please nt remove proptypes", "d": "2/2016"}, {"body": "example would use flow define types props ca nt quite connect dots curious point well assume might pretty type aliases describe", "d": "2/2016"}, {"body": "since people coming proptypes removed anytime soon", "d": "2/2016"}, {"body": "fwiw one best uses proptypes personally eslint config via standard points props use nt defined helps spot fix countless typos cause real problem especially refactors suspecthope sublime equally useful integration however flow defines proptypes", "d": "2/2016"}, {"body": "flow runs command line tool server boilerplate comment file want run flow option hope proptypes continue developed time facebook considers flow type notation useful enough legitimately propose part js standard", "d": "2/2016"}, {"body": "proptypes ships react production apps log console warnings invalid proptypes pretty useful since flow local development react still log kinds warning proptypes removed", "d": "2/2016"}, {"body": "please read earlier comment proptypes removed anytime soon proptypes log production applications either development mode flow current form would log ci explicit execution static checks idea flow gaining support development transform would embed runtime typechecks discussed yet", "d": "2/2016"}, {"body": "let also clarify idea unify type system semantics flow equivalent concepts either direction case people prefer early adoption syntax extension flow provides unified similar systems eventually end standardization track could compile development time runtime warnings however would likely runtime alternative without syntax sugar available although might less convenient compare something like nt want use syntax extension nt wo nt requirement use language extensions use react however hypothetical ideas becomes real adopted proptypes remain maintained unlikely evolve direction incompatible flowunification new unified system evolve suitable upgrade plan", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "maintain really think nt want originally thought wanted react async rendering others thread convinced otherwise even relay basically hoist dependencies tree root container declarations relay containers etc synchronous rendering way go asynchronous rendering nightmare speak experience working company codebase backbone hacked individual updates request animation frames", "d": "2/2016"}, {"body": "agreed used think needed actually backwards view specify data load view function application state function request possibly user state session react allowing components specify data loaded goes one way data flow idea imo", "d": "2/2016"}, {"body": "actually backwards view specify data load entirely sure true sometimes component thing knows data load instance suppose expandable tree view allows user browse massive graph nodes impossible know advance data needs loaded component figure regardless discussion might become much relevant pursue idea running react code within web worker async required communicate across bridge", "d": "2/2016"}, {"body": "example large tree view really wanted able render path already open server side would add path url structure several complex components like would represent states get parameters way components get benefits ssr crawlable navigated using history users share links node within etc also way server determine data needs fetched order render response update bad mistaking graph tree still feel state user view graph represented url structure also nt realize actually work react working framework integrating data layer view isomorphically awesome think agree goes beyond domain view react take role full stack controller", "d": "2/2016"}, {"body": "nt read whole thread sorry discussed already one thing would really help would method would startinstantiate component fire lifecycle methods let developer decide ready render component html string example developer could use settimeout something reliable wait async methods complete hack using redux moment achieve javascript startinstantiate component fires componentwillmount methods fetch async data reactdomrendertostring rootele async methods increment counter decrement resolve const unsubscribe storesubscribe gt const state storegetstate result pending promises wait counter statewait unsubscribe data redux store render element synchronously const html reactdomrendertostring rootele ressend html problem approach second fires methods results unnecessary data fetching", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "basically became request classes released", "d": "2/2016"}, {"body": "documentation basic issue shallowrender components tearing tests get clues docs alternatively getting started tutorial sections tests nt really considered optional", "d": "2/2016"}, {"body": "resurfacing cc zpao spicyj wip diagram notes concise terminology amp toneofvoice developers learn speak language eg composition ecosystem etc etc taxonomy web dev general limited react separation dom vs custom components point view consuming developer lot differences even though components tips could incontext necessary categories articles currently unorganised next step matching jekyll pages precisely categories pretty confident fit rough outline guides section based diagram think anything covering basics belongs getting started section docs x basics prev quick start getting started tutorial thinking react dom components events synthetics styles inline styles forms controlled vs uncontrolled dangerouslyinnersethtml custom components definition vs createclass stateless functions static methods autobinding state take interactivity dynamic uis lifecycle rendering mounting unmounting getinitialstate ref key composition abstraction child components ownership validation proptypes flow performance memoized renders shallow compare immutability measurement api integration dom libraries web components x jsx jsx overview prev jsx indepth html differences prev jsx gotchas conditional statements prev ifelse jsx spread attributes community x community support conferences videos complementary tools x facebook flux relay immutable jest flow", "d": "2/2016"}, {"body": "unodgs seen approach wild nt rely experimental feature like context especially useful nt know children components advance spicyj think alternative", "d": "2/2016"}, {"body": "landed practically solved except specialcase", "d": "2/2016"}, {"body": "landed solves underlying issue due separate issue actually solved tracked", "d": "2/2016"}, {"body": "discussions internally consensus people assume hint reconciler permitted ignore hint related", "d": "2/2016"}, {"body": "pr fix decided abandon per mixins mostly legacy nt really adding things recommended reading", "d": "2/2016"}, {"body": "jpunt able convert react component static markup client came handy sometimes", "d": "2/2016"}, {"body": "jpunt benkeen available client side include", "d": "2/2016"}, {"body": "jimfb da man thanks helpful", "d": "2/2016"}, {"body": "better due", "d": "2/2016"}, {"body": "ustun specifically evidence hotspot", "d": "2/2016"}, {"body": "per mixins legacy feature really adding things point issue untouched year closing due inactivity", "d": "2/2016"}, {"body": "ran ability render full page react help deal seo title many things much flexibility wo nt even need something like helmet reactdocumenttitle simply seems logical handle whole application state within react prepending doctype easy things really hard impossible sigh", "d": "2/2016"}, {"body": "well found people say changing head virtual dom push browsers go crazy definitely worse whole app within react maybe nt good idea", "d": "2/2016"}, {"body": "baygeldin specifically define go crazy browsers changing nodes", "d": "2/2016"}, {"body": "jimfb guess said unexpected behavior could nt find good example understood main arguments browsers expect replacing whole nodes head behavior standardized common practice browserextensions inject external resources head react override handles head tag also according mdn documenthead readonly sorry nt concrete examples time investigate decided go standard way things", "d": "2/2016"}, {"body": "excellent example almost feel like part main documentation weird issue try nail controlled form attempted mask", "d": "2/2016"}, {"body": "seen lot react components aim introduce control flow behavior personally prefer keep pieces functional part language personal preference think component based approaches mentioned fantastic pieces work published really simple function used compose conditional render blocks pretty much might expect inline expression named function composed function jsx const ifeven number gt renderif number const ifodd number gt renderif number class mycomponent extends component render return ifeven thispropscount thispropscount even ifodd thispropscount thispropscount odd vanilla jsx const ifeven number gt element gt elseelement gt number return element return elseelement class mycomponent extends component render return ifeven thispropscount thispropscount even thispropscount odd main goal stay flexible composable feel solved issue seeking nt", "d": "2/2016"}, {"body": "ajwhite suffers problems mentioned one post prior ca nt solved without transform per need something like", "d": "2/2016"}, {"body": "jimfb thank links terrific points approach promotes idea block evaluated predicate fails yet certainly warning warning warning mentioned thought using callback avoid evaluation thread keep discussion moving ty feedback", "d": "2/2016"}, {"body": "would nt easily circumvented stateless components function listspans props propscondition return null little syntax solves issue hand", "d": "2/2016"}, {"body": "milesj lot syntax statement also means nodes longer place scroll different file least different part file see going get rendered condition true also stateless components ca nt return list bottom line nt solve", "d": "2/2016"}, {"body": "imo returning multiple tags complex conditionals like condition condition name name null hello name null probably better extract component syntax nt necessarily bad components updated support arrays", "d": "2/2016"}, {"body": "would love see fixed dealt problem use simply added event event works ie edge nt give exact result value changed event think case anyway degrades beautifully", "d": "2/2016"}, {"body": "tap standard event probably going rip core let people detect taps user land current implementation probably needs bit cleanup anyway detect things like double taps long holds anyway lines code available someone wants fix publish external librarymodule might useful people", "d": "2/2016"}, {"body": "maybe", "d": "2/2016"}, {"body": "revolunet works like charm handle simple tap double tap long tap needs calculated hand plugin", "d": "2/2016"}, {"body": "topic patterns stronglydiscouraged days took cue wrote code handle csrf tokens component passes data via child receives would etc solid direction", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "looking forward fix would like use svg icons dangerously setting bummer", "d": "2/2016"}, {"body": "ajfarkas works already", "d": "2/2016"}, {"body": "true tags nt appreciate attempt giving people heads producing major headache since change svg code change back gets updated", "d": "2/2016"}, {"body": "tags svg tags attributes work master work mean changing code", "d": "2/2016"}, {"body": "hey props making react awesome pun intended trying use inert html attribute disable div polyfilling works browsers react nt seem letting way get work currently thanks", "d": "2/2016"}, {"body": "tnrich yet supported attributes put element call manually example", "d": "2/2016"}, {"body": "awesome thanks gaeron thu feb pm dan abramov notifications githubcom wrote tnrich yet supported attributes put ref element call setattribute manually example return reply email directly view github", "d": "2/2016"}, {"body": "tnrich dropped standard drafts time ago pending standard", "d": "2/2016"}, {"body": "dantman may reason use polyfill kind misnomer case given listed caveats npm module using sorry stray topic everyone", "d": "2/2016"}]