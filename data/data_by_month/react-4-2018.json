[{"title": "consuming context hoc root component provider rendered multiple times identify correct context consume child component level", "body": "planning use react context api library exposes root component rcontextjs getrcontextjs hoc import rcontext rcontext export function getrcontext comp gt class render contextvalue gt rjs import rcontext rcontext export default class r render cjs problem single app multiple root components rendered since single context used consume value appjs create multiple contexts like requires passing identifier root component children corresponding identifier used consume correct context rcontextjs getrcontextjs import context rcontext export function getrcontext comp gt class render const rcontext context thispropsid contextvalue gt questions way pass certain props assume props wo nt effect life cycle case id example children immediate create idcontext hoc wrap components consume id consume rcontext based id please suggest better approaches possible thanks advance", "num": "12720", "d": "4/2018"}, {"title": "syntaxerror expected svgname prop string", "body": "assign string svgname ok assign variable svgname bad", "num": "12719", "d": "4/2018"}, {"title": "onclick android mobile working", "body": "hello using reactjs version mobile samsung galaxy mobile browser chrome firefox small app sign button works perfectly windows desktop using chrome browser however working mobile device button simply fire click", "num": "12718", "d": "4/2018"}, {"title": "onmousedown causes splash real ios browsers", "body": "want request feature report bug bug current behavior unexpected grey splash caused real ios device browsers safari chrome please checkout grey splash issue first trial later find vanilla html nt cause grey splash react jsx noticeable grey splash expected behavior wants splash versions react browser os affected issue work previous versions react react", "num": "12717", "d": "4/2018"}, {"title": "reconciliation behaves differently childrenasfunction consumer function", "body": "react developer tools highlight updates expected behavior two divs reconcile way childrenasfunction variant update dom setstate would ideal behavior since return value change consumer variant changes dom every setstate note difference occur empty first child provider case childrenasfunction consumer variants refresh setstate function returns single text node case none two versions refreshes setstate unless text changes", "num": "12715", "d": "4/2018"}, {"title": "update breaks web application", "body": "current behavior none indexjs rendered use reactscripts build web application get rproptypes undefined error visit localhost address presume proptypes deprecated onwards removed ca nt life figure calling weird part main js createreactapp builds tried updating dependencies dice update react application works fine using npm packagejson name nodewf version private true dependencies createreactapp halogen proptypes react reactbootstrap reactbootstraptoggle reactcontenteditable reactdom reactsplitpane reacttextareaautosize devdependencies reactscripts scripts start reactscripts start build reactscripts build test reactscripts test envjsdom eject reactscripts eject proxy also using cdn scripts jquery bootstrap bootstrap toggle plotly sure compatibility issue", "num": "12714", "d": "4/2018"}, {"title": "reconciliation bug occured client starts hydration", "body": "want request feature report bug bug current behavior jsx staticjs import react react function static return export default static jsx dynamicjs import react react function dynamic return export default dynamic jsx appjs import react react import static static import dynamic dynamic class app extends reactcomponent constructor props super props componentdidmount thismounted true render return thisstateloaded null export default app first server sends react app without asynchronous component loading second client starts hydration loading component asynchronously real production used code splitting webpack loaded example controlled state making app simple loaded app renders instead finally let see result component changed blue took dinner afaik react nt touch result client rendering different server html moved another page clientside routes find situation guess occurs client hydrates result serverside rendering current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example check easily clone run open expected behavior versions react browser os affected issue work previous versions react react browser chrome safari os macos windows linux react works well without bug check branch", "num": "12713", "d": "4/2018"}, {"title": "encoded character table td tags showing string incorrectly", "body": "encoded characters example show adding characters fine put tag example long outside table", "num": "12712", "d": "4/2018"}, {"title": "setstate callback fired wrong state context using reactdomunstabledeferredupdate", "body": "want request feature report bug bug current behavior callback functioning expected using directly wrapped time current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open console click button sometimes may see state callback smaller called definitely expect would bigger expected behavior said versions react browser os affected issue work previous versions react", "num": "12711", "d": "4/2018"}, {"title": "input dx improvement opportunity", "body": "want request feature report bug feature current behavior warning raised following snipped jsx import react react export default class textfields extends reactcomponent state name timeout componentdidmount emulate loading data ajax settimeout gt consolelog updating name timeout thissetstate name timeout render return expected behavior believe opportunity raise warning development would inform users ca nt update property problem raised attention versions react browser os affected issue work previous versions react react", "num": "12710", "d": "4/2018"}, {"title": "point wrong dom node", "body": "eg statea set false access thismyrefcurrent point div classname b", "num": "12709", "d": "4/2018"}, {"title": "initial css breaking react app", "body": "hey guys one problem working even simple app react link jsfield anywhere use output error", "num": "12706", "d": "4/2018"}, {"title": "coverage support jsxcontrolstatements", "body": "conditional rendering components jsxcontrolstatement produces incorrect coverage else branches using project want official facebook opinion whether updated babel ast future support please warn developers get incorrect branch coverage see reported issue facebook support approach similar jsxcontrolstatements future facebook support approach like facebook warn developers using library due incorrect coverages issue consistent jest nyc since use babel ast want request feature report bug feature current behavior incorrect coverage expected behavior correct coverage report custom conditional rendered components", "num": "12705", "d": "4/2018"}, {"title": "onclick event firing enabling button via ref", "body": "want request feature report bug possible bug needs investigation current behavior button initially rendered disabled event connected enable button via ref event get fired click current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example codesandbox component ref implementation hello component based state working used behalf question hashnode regarding behavior expected behavior onclick event fires enabling button versions react browser os affected issue work previous versions react react version sandbox know version questioner share issue also work refs created callback string", "num": "12704", "d": "4/2018"}, {"title": "type invalid likely forgot export component file defined", "body": "posted question created issue voyager project thought also document using components voyager uses react following error warning reactcreateelement type invalid expected string builtin components classfunction composite components got undefined likely forgot export component file defined check render method dataselectorbase uncaught error element type invalid expected string builtin components classfunction composite components got undefined likely forgot export component file defined check render method dataselectorbase know cases error implies problems nt think anything wrong loaddata dataselector exported voyager also believe imported right weird thing version voyager locally nt get error use released version error shows", "num": "12703", "d": "4/2018"}, {"title": "feature request get ref memory dom element mount", "body": "want request feature report bug feature current behavior currently nt great way react build ui components due needing refs check props dom element wait component mount repaint want make changes ui based information received ref current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior create dom nodes memory appending dom expect react create elements necessary memory appending mount point reactdomrender versions react browser os affected issue work previous versions react", "num": "12701", "d": "4/2018"}, {"title": "calling reactdomrender many many times slow", "body": "want request feature report bug bug current behavior calling many many times seems meaningfully worse performance rendering many elements within single react root current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example edited add devproduction builds react development react production react development examples obviously pretty contrived expected behavior perfect world would nt large performance discrepancy two approaches context working frontend plugin framework trying expose react ideally implementation detail part plugin interface interface like requires host plugin implemented react share instance react fast convenient interface like treats react implementation detail less convenient importantly incurs performance problem imagine use case nt high priority reactreactdom love understand bit better really causes performance difference whether likely ever change versions react browser os affected issue work previous versions react seems impact react amp similarly nt think browser dependent", "num": "12700", "d": "4/2018"}, {"title": "styles via classname reflected print", "body": "want request feature report bug sure might bug something right everything seems indicate work thinking potential bug possibly trying get assistance stack overflow getting anywhere current behavior trying print content modal external styles via passed print dialog preview however done line eg styles reflected current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example repo use case directions work migrating jsfiddle codesandbox better expected behavior still see styles applied using external css via going print versions react browser os affected issue work previous versions react react using chrome windows wsl sure worked previous versions started feature web app", "num": "12699", "d": "4/2018"}, {"title": "conditional rendering jsxcontrolstatements", "body": "want request feature report bug neither conditional rendering components like jsxcontrolstatement recently ran coverage report issues documented want hear official recommendation facebook reactjs team conditional rendering like according documentation approach recommended want confirm thanks", "num": "12698", "d": "4/2018"}, {"title": "ref callback called componentdidmount", "body": "want request feature report bug bug current behavior ref callback executed current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example react react expected behavior ref callback executed versions react browser os affected issue work previous versions react react chrome macos high sierra", "num": "12697", "d": "4/2018"}, {"title": "allow specify displayname createcontext providers consumers", "body": "want request feature report bug bug current behavior react tree name context must like name code current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example let look react tree chrome extention page context mycontext expected behavior expexted see mycontext versions react browser os affected issue work previous versions react", "num": "12695", "d": "4/2018"}, {"title": "size prop attached dom", "body": "want request feature report bug bug current behavior size prop number think true inputs selects necessarily true rest html tags web components current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example sorry codepen example uses framework called onsenui internally uses web components onsenui framework icon web component transforms every size prop value string attached dom know example dependencies react also simple div simple also affected issue expected behavior size prop added dom number html tags nt inputs selects versions react browser os affected issue work previous versions react affected versions gt works ok versions lt browsers", "num": "12694", "d": "4/2018"}, {"title": "reacttestrenderercreate work properly forwardref components", "body": "want request feature report bug bug current behavior try access component tree component created get error current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example minimal example simply component created js import react react export default reactforwardref gt hello try use access get unexpected object passed reacttestinstance constructor tag probably bug react js import react react import create reacttestrenderer import hello hello test forwardref component gt const tree create expect treeroot expected behavior able create components created forwardref test renderer versions react browser os affected issue work previous versions react using jest forwardref exist previously", "num": "12693", "d": "4/2018"}, {"title": "seems leak dom nodes", "body": "want request feature report bug report bug current behavior react components seem leak dom nodes unmounted retaining entire dom tree current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example js fiddle test open chrome performance monitor check uncheck show stuff check box number dom nodes climb clicking garbage collect seem reclaim click run jsfiddle release old nodes uncheck enable autofocus box repeat experiment click show stuff lot time dom nodes seem get reclaimed heap snapshot shows detached dom trees referenced react dom internals expected behavior dom nodes nt retained unmounted versions react browser os affected issue work previous versions react react google chrome windows nt know issue new application may always affected", "num": "12692", "d": "4/2018"}, {"title": "possible unlimited recursive rendering hoc", "body": "want request feature report bug would consider feature current behavior react put limits recursive rendering using higherorder components however calling reproduces pretty easy pair container hoc would nt try codesandbox jsfiddle code javascript import react react import reactdom reactdom accepts component prop renders passing props real life scenario usually something const container props gt const component component props return hocversion container const withcontainer wrappedcomponent gt props gt though looks bit artificially pretty common use something like thing looks innocent const bomb withcontainer withcontainer gt null class detonator extends reactcomponent state wentoff false gooff gt thissetstate wentoff true render gt thisstatewentoff oooppps text probably wont rendered reactdomrender documentgetelementbyid root expected behavior would expect limit kind recursion blazing fast like react supposed eating lots ram short time bit difficult annoying stop versions react browser os affected issue work previous versions react reproduces chrome done react", "num": "12691", "d": "4/2018"}, {"title": "cloning child context consumer produces confusing warning error", "body": "want request feature report bug bug least request precise warnings error messages current behavior cloning children add properties overlooked context consumer subtree cloned import react react import render reactdom const provider consumer reactcreatecontext const comp children gt clonekids children const clonekids children gt reactchildrenmap children child gt reactcloneelement child childprops childpropschildren amp amp clonekids childpropschildren render consolelog documentgetelementbyid root code produces warning error introduced warning context consumer rendered multiple children child nt function context consumer expects single child function pass function make sure trailing leading whitespace around even confusing typeerror render function expected behavior maybe reactcloneelement attempt clone functions whatever result function warning part child nt function separated warnings ca nt multiple children one child function time precise warning issued versions react browser os affected issue work previous versions react tested react stackblitzchrome react chrome firefox", "num": "12689", "d": "4/2018"}, {"title": "unexpected behavior use reactforwardref reactcreatecontext", "body": "want request feature report bug bug current behavior example child used children updating even wrapped component never updates still triggered callback updates expected behavior nt update root component updated whether used children versions react browser os affected issue work previous versions react used react", "num": "12688", "d": "4/2018"}, {"title": "show culprit", "body": "want request feature report bug feature current behavior probably familiar following message warning update existing state transition within another component constructor render methods pure function props state constructor sideeffects antipattern moved never came across message created simply mounting following component js class updateduringrender extends component constructor props super props thisstate text initial updatestate text thissetstate text render thisupdatestate updated expected behavior specific component triggers warning think could even treated optional error suddenly appears app sometimes tough find culprit stack trace least offending component would helpful warning message sure solved internally yeah would nice hint help remove antipatterns versions react browser os affected issue work previous versions react", "num": "12687", "d": "4/2018"}, {"title": "strange beahvior react new context api", "body": "think bug git example npm npm start go dependencies react chrome components context orderdetailscontext root component ordersview simple component ordersviewrow subscribed component orderdetailsview problem application one dynamic context orderdetailscontext components one root component ordersview children components ordersviewrow orderdetailsview one component orderdetailsview subscribed dynamic context refreshed context data changed problem context changed subscribed component refreshed old version context data actual orderdetailsview update context updated expected orderdetailsview update context updated first solution go ordersview move orderdetailsview top render function subscribed component updated context changed second strange solution go separeted component ordersviewrow remove subscribed component updated context changed video reproduce clone npm npm start open chrome open dev tools chrome click view button expected loading text visibled hidden text updated new number displayed console log actual loading text visibled text changed console log", "num": "12686", "d": "4/2018"}, {"title": "documentation request", "body": "please document use forwardref preferred way retrieve list array items example javascript const foo reactforwardref props ref gt propssuperherosmap hero index gt", "num": "12685", "d": "4/2018"}, {"title": "unmounting fragment node children removed dom one time instead", "body": "want request feature report bug bug maybe perhaps limitation fragments let know current behavior unmounting fragment children removed dom one time top bottom means unmounting step quickly calculating dom position change save data also imagine less performant look console outputs using fragment element found using fragment element ca nt found using div element found expected behaviour fragment using div element ca nt found switching parent children parent children expected behavior fragments children would removed dom time instead one children div would removed dom time essentially removing children look like part problem versions react browser os affected issue work previous versions react unsure worked previous versions let know help anything cheers", "num": "12683", "d": "4/2018"}, {"title": "build failing error find module reactsrcreactcurrentowner", "body": "want request feature report bug report bug current behavior cloned repo onto desktop run produces following output error find module reactsrcreactcurrentowner functionmoduleresolvefilename functionresolve objectkeysforeachsrcmodule arrayforeach useforks getplugins createbundle buildeverything definitely issue environment builds fine laptop running system current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example na expected behavior code build successfully versions react browser os affected issue work previous versions react version react os ubuntu works laptop also runs", "num": "12681", "d": "4/2018"}, {"title": "undefined variable performance reactdom opera mini browsers", "body": "want request feature report bug bug current behavior loading site breaks following error proxy mobile browser opera mini extreme turbo mode catch loaded page loads browsers js switched expected behaviour browser problem issue access error logs production via beacon nt able view console logs running browser directly nt able replicate web editors since sites completely nt work opera mini believe error referencing code sorry posted wrong place sure report since relating proxy browser nt run js client expected behavior loading site render would browser js switched versions react browser os affected issue work previous versions react seeing behaviour opera mini android ios extreme turbo mode", "num": "12679", "d": "4/2018"}, {"title": "passing props parent children looks screwed", "body": "want request feature report bug guess bug current behavior want wrap children pass props children inside import react react div passes props direct children const div props gt return reactchildrenmap propschildren child gt reactcloneelement child props const app gt export default app codesandbox expected behavior output actual output reason every child contains three extra children versions react browser os affected issue work previous versions react react macos", "num": "12678", "d": "4/2018"}, {"title": "could hydrate stop modify content component binding events", "body": "since web application run php server backend use reactdomserver lots restrictions conventions translate jsx template language javascript class ssrcom extends reactcomponent constructor props super props reactdomhydrate documentqueryselector mount html hello ssr count change state sounds crazy server render template expected however react hydrate modify component content could hydrate stop modify content component binding events ways like modify react render method quit check mechanism", "num": "12677", "d": "4/2018"}, {"title": "amp amp", "body": "amp amp report bug current behavior safari browser ca nt run app chrome browser amp firefox browser ok expected behavior running main modern browsers", "num": "12675", "d": "4/2018"}, {"title": "validatedomnesting incorrectly validates table children", "body": "want request feature report bug bug current behavior shows warning element element direct child current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example please find example copied mdn first html example open browser console run console see warning expected behavior according mdn could child examples pages expect warning appear versions react browser os affected issue work previous versions react issue found chrome ff may affect browsers prior versions", "num": "12674", "d": "4/2018"}, {"title": "duplicated key list strange behavior", "body": "list duplicated items document key must unique sure react concatenates string example expected key duplicated cheers", "num": "12673", "d": "4/2018"}, {"title": "improve warning message failure initialize using", "body": "want request feature report bug bug current behavior warning failure initialize state using clear could component produces warning mycomponent properly initialize state construction expected state object undefined warning resolved adding either class definition constructor using see detail warning message counterintuitive since warning specific use triggered state lifecycle methods state initialization nt required state methods like would make sense mention explicitly warning proposal new warning message mycomponent component state must initialized using getderivedstatefromprops expected state object undefined versions react browser os affected issue work previous versions react react gt", "num": "12670", "d": "4/2018"}, {"title": "detect clicks elements inside google map infowindow react", "body": "created div element inside google map infowindow using reactdomserverrendertostring trying register click div however seem register click elements inside infowindow tried divinnerhtml infowindowcontent f content wrapped backticks tag works seem use custom component tag carousel inside wrong divs clickable created reactdomserverrendertostring issue simplified code const map new googlemapsmap thisrefsmap zoom initialzoom center lat thispropsinitialpositionlat lng thispropsinitialpositionlng const marker new googlemapsmarker key fid label position lat flat lng flng map function infowindowcontent flat const content function infowindowclickhandler flat consolelog google map infowindow clicked f f", "num": "12668", "d": "4/2018"}, {"title": "get state parent child without passing state props", "body": "true get state methods parent component child using keyword class app extends component constructor props super props thisstate value render child component class child extends component constructor props super props render alert thispropsthatstatevalue return null", "num": "12667", "d": "4/2018"}, {"title": "react background image overlay opacity", "body": "find way set background image overlay opacity reactjs trying something like style url background jsx portfolio", "num": "12666", "d": "4/2018"}, {"title": "embed update rerender src property changes", "body": "want request feature report bug bug current behavior component renders child property retrieved endpoint depends props passed component property changes existing contents embed change fix component entirely replace something else instance loading state put new updated reproduced jsfiddle two trivia jsfiddles referred embed transitioning clicking button update embed despite property visibly updated devtools expected behavior changes content change versions react browser os affected issue work previous versions react reproduced unclear version jsfiddle using version macos beta", "num": "12665", "d": "4/2018"}, {"title": "question deal renderprops components callback hell", "body": "issue somewhat long eager goto deal renderprops components callback hell yes package awesome problems let show jsx import value reactpowerplug import adopt reactadopt aandb adopt mapper b b gt b want dynamic jsx import adopt reactadopt aandb adopt mapper b b gt b gt b fact bug least nt cache component returned react always treat like different component rebuild dom well bug example really dynamic want really dynamic assume fixed bug dom rebuild even fixed expand influence vdom structure vdom structure changed dom rebuild way deal renderprops components callback hell thought came jsx import react purecomponent component react class result extends component render return thispropschildren export class compose extends component constructor props super props thisskipforce true componentwillupdate thisskipforce true render const mapper children thisprops const mapperisarray objectprototypetostringcall mapper object array const arg mapperisarray return objectkeys mapper map key gt const value mapper key const withkey mapperisarray null key return typeof value function reactcreateelement reactcloneelement value withkey args gt arg key args maybe use args rather args thisskipforce thisforceupdate return null gt thisskipforce false return children arg works relies fact last child render last fact defined react spec relies deprecated better methods", "num": "12664", "d": "4/2018"}, {"title": "skip second argument reactcreateelement", "body": "want request feature report bug feature current behavior nt needed still pass second argument proposal allowed omit second argument allowing import react react import foo foo import bar bar const reactcreateelement const app gt div hello foo ok p foo bar key hi span heya demo code currently naively use", "num": "12663", "d": "4/2018"}, {"title": "bug keyed fragments traversed reactchildrenmap function", "body": "want request feature report bug bug current behavior keyed fragments traversed reactchildrenmap current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open console provided example see array traversed keyed fragment expected behavior per documentation keyed fragments traversed reactchildrenmap function array versions react browser os affected issue work previous versions react react tested latest chrome browser codesandbox example universal react project node", "num": "12662", "d": "4/2018"}, {"title": "returning fragment undefined children render causes invariant violation", "body": "want request feature report bug reporting bug current behavior react reports invariant violation method class component returns children current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example example codesandbox jsx import react react import render reactdom class app extends reactcomponent render return undefined render documentgetelementbyid root expected behavior would expect program render nothing contexts children react allowed renders fine children returned method class component versions react browser os affected issue work previous versions react tested version", "num": "12661", "d": "4/2018"}, {"title": "question integrate react library react", "body": "requirement integrate one app created using react existing app still react need help understanding points risk integration probable solution issue due incompatibility used rollup create cjs library react app thanks", "num": "12660", "d": "4/2018"}, {"title": "bug clicked button error", "body": "want request feature report bug bug current behavior button click current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example clicked button occur error remove components onclick event js closetutorial e gt estoppropagation epreventdefault expected behavior versions react browser os affected issue work previous versions react react react browser chrome os", "num": "12659", "d": "4/2018"}, {"title": "question best way get element dom reference", "body": "preface writing popup component whose task positioned content next call b relative target next call b arrow optional next call arrow popup component like core positioning used create dropdown list tooltip something else resolve task need get dom reference b dom reference dom reference arrow go use realisation example sandbox source take props b arrow popup calculated put b dom note positioning use popperjs library problem flexibility want transfer popup component render function like useful smooth transitions one next animating parent component store custom inner structure nt know right way get reference b arrow maybe get b popup arrow thanks thanks", "num": "12657", "d": "4/2018"}, {"title": "createportal fails silently used outside render method", "body": "updated package work react used replaced nothing happened errors displayed wasted several hours understand could used anywhere example case used would great warning used outside render let people know wrong maybe consider adding note docs thanks", "num": "12653", "d": "4/2018"}, {"title": "mute componentdidcatch allow developers log", "body": "want request feature report bug feature current behavior child throws error inside error boundary hits error still logged console regardless handling inside expected behavior would nt make sense give fine grated control errors get logged bubble way error boundary motivation using error logging service rollbar sentry etc normally nt really needwant error bubble console production testing error boundary component feels bit funky right test runners like jest mock jsdom virtual console suppress error showing test results severity error caught specific error boundary might warning thus would throw consolewarn along already thrown error trycatch outside react would also handle logging catch rethrowing specific exception wonder opinion", "num": "12652", "d": "4/2018"}, {"title": "context provider root element causes omit output", "body": "want request feature report bug bug current behavior missing generated string causing existing valid dom cleared current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior markup root element missing versions react browser os affected issue work previous versions react sure", "num": "12651", "d": "4/2018"}, {"title": "question marking html elements testing", "body": "hi part component renders like jsx return yesterday tomorrow today iv using prop find elements testing enzyme like nt like much option comes mind clickable div make custom class name search class name search text function name div position makes tests fragile would like avoid mark html elements easy searching", "num": "12650", "d": "4/2018"}, {"title": "", "body": "want request feature report bug neither question current behavior currently seems unknown dom attributes boolean values passed exception data attributes aria attributes based docs looking code nt clear whether intentional bug came across currently server rendering pages attributes react using make work expected deleting would work however since lot attributes nt actual value set unknown passed happy open pr either update docs fix actually bug wanted verify first repro versions react browser os affected issue work previous versions react react", "num": "12649", "d": "4/2018"}, {"title": "render props amp getderivedstatefromprops issue", "body": "hi guys want request feature report bug possibly bug current behavior issue hoc update props pass child components example hoc component query data server data fetched passes use updated new props contrary happens called first time example code class extends reactcomponent render return class b extends reactcomponent static getderivedstatefromprops nextprops prevstate consolelog nextprops return null data obj empty filled response versions react browser os affected issue work previous versions react react thank", "num": "12646", "d": "4/2018"}, {"title": "read property changedbits undefined", "body": "want request feature report bug bug current behavior using new context api react native app ends exception unfortunately unable provide viable reproduction environment tried codesandbox snack expo working fine happening react native app running android phone thing got screenshot debugger strangely enough code line would read would working correctly chance typo tsx export const rootcontext reactcreatecontext export const rootprovider rootcontextprovider export const app gt ok versions react browser os affected issue work previous versions react react reactnative windows", "num": "12645", "d": "4/2018"}, {"title": "onchange nt fire capturephase document listener underlying native event calls setstate", "body": "want request feature report bug bug current behavior checkbox fires onchange controlled component somehow related global event listeners setstate see sandbox example expected behavior checkbox fire onchange handler broken example react working example react version", "num": "12643", "d": "4/2018"}, {"title": "render errors overwrite previous html", "body": "want request feature report bug bug current behavior react render errors killed execution app would leave existing html page react existing html gets wiped white screen death expected behavior would much better user experience could configure existing html remained render failed app functionality would fail page would still users could use standard html links etc continue navigating cases may even notice app broke aware error boundaries proposed solution react however seem like great solution us two reasons need pepper lot across entire codebase get reasonable granularity restrict impact errors example whatever major code change app might hundreds components even get segment app may significant replaced error message unexpected error entire purpose page replaced error message far better us stop js execution leave user static html obviously bugs app fault fix always predictable example today tracked bug throwing exception safari private browsing mode tough issue anticipate difficult ensure app bugfree miss something outcome react catastrophic instead merely reduction user experience demo react code react", "num": "12642", "d": "4/2018"}, {"title": "react ssr image onload hydrate work chrome", "body": "want request feature report bug bug current behavior chrome seem fire image initial server side html fires safari firefox current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example example seen pull repo go console log image loaded occur chrome see log safari firefox changing file causes img onload trigger properly expected behavior expected behavior onload fire images initial server side html versions react browser os affected issue work previous versions react browsers chrome os x el capitan react versions react react", "num": "12641", "d": "4/2018"}, {"title": "traverse react tree", "body": "would like propose add method react today lot libraries relies walking react tree ssr used preload data styles whatever asking found bug loadable components fixed bug also react apollo probably libraries use strategy several questions good strategy tell good strategy could maintain expose react another package", "num": "12640", "d": "4/2018"}, {"title": "remote form submission via dispatchevent broken firefox", "body": "want request feature report bug bug current behavior following result called firefox click external submit via button one things love react smooths browser idiosyncrasies plagued web development many years rare find edge case like however pretty weird way submit form originally expected behavior seems like called maybe bug firefox react maybe better way compatible across browsers versions react browser os affected issue react firefox mac work previous versions react idea", "num": "12639", "d": "4/2018"}, {"title": "first pass context lost call return", "body": "really enjoying explorations building better compound components using experimental issue intended start discussion shortcomings current api ran experiments used leaf node yields data successful since solved run issues stability feature however compound component usage implement features layout often yields element render prop cases elements rendered parent context created first pass lost reproduction case found enduser components unaware use callreturn internally would expect see greetings instead default nt consider bug rather sideeffect using api however believe usecase valid one providing api supports would beneficial library authors share thoughts api discussion initially api called coroutine yield suggested subtree would yield later resume presumably api renamed suggestion would implement coroutineyield functionality continues rendering continuation children yield fiber course aware choices led current api input welcomed would function similarly current handler return children render instead returns aggregated value value passed second argument together yield element props index within coroutine element returned continuation reconciled yield fiber children preserving position tree thus also context accumulated coroutine yield note new api would strict superset current implementation imagine callreturn could written coroutine yield follows javascript const createcall children handler props gt createcoroutine createyield null props values index gt handler valuesprops valuesyields props reactchildrentoarray children props yields gt props yields props const createreturn value gt createyield value gt null dived reconciler implementation call return implementing api like seems feasible definitely willing give shot approach clear however aware decisions led current implementation exact impact performance increased tree traversals etc ccing sebmarkbage gaearon edit prototyped api codesandbox causes multiple renders using uses nasty traversals highly unstable illustrates idea outlined", "num": "12638", "d": "4/2018"}, {"title": "three functions", "body": "reactminjs version", "num": "12637", "d": "4/2018"}, {"title": "ca nt validate value prop context provider using proptypes", "body": "want request feature report bug sure bug feature request current behavior ca nt validate value prop context provider using proptypes see codesandbox example expected behavior expected proptypes violation warning console versions react browser os affected issue work previous versions react happy implement others also wish possible validate value context provider using proptypes would help someone pointed right direction though nt dug react internals much yet", "num": "12636", "d": "4/2018"}, {"title": "support performance measures production", "body": "want request feature report bug request feature like access api production build react collect timing measurements real users field suspect performance timing get expensive open suggestions make nicerpossible", "num": "12634", "d": "4/2018"}, {"title": "add react lifecycle diagram documentation", "body": "want request feature report bug feature sorta love see something similar included documentation page component lifecycles remember gaearon sharing found invaluable quick reference", "num": "12633", "d": "4/2018"}, {"title": "update component without rerender", "body": "reactjs doc says knowledge far way update ui create new element pass reactdomrender consider canvas component could update without rerendering example componentwillreceiveprops create new line canvas even shouldcomponentupdate retrun false canvas updated wrong", "num": "12632", "d": "4/2018"}, {"title": "gas", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12631", "d": "4/2018"}, {"title": "css transition dropin substitute", "body": "want request feature report bug report bug current behavior react app crashes current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example transition component replaced csstransition getting delay enter animation understand swap easily expected behavior used transition component versions react browser os affected issue work previous versions react chrome mac os x high sierra", "num": "12627", "d": "4/2018"}, {"title": "breaking change using getting lot ref string errors", "body": "want request feature report bug bug current behavior use new version getting lot error concerning set ref name component nt owner works fine sure code got stringent bug detecting things nt changed code work either way many third party libraries breaking change current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior work identical new thing maybe even larger rolling code back works normally versions react browser os affected issue work previous versions react", "num": "12626", "d": "4/2018"}, {"title": "nt call getderivedstatefromprops purecomponent props", "body": "want request feature report bug feature current behavior called purecomponent even props nt changed current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react hoping would nt called purecomponent props nt changed reason shouldntcould nt case", "num": "12619", "d": "4/2018"}, {"title": "support partial hydration static content", "body": "want request feature report bug feature current behavior hydrating serverrendered content difficult inefficient impossible example process rendering server significant work additional data may required data processing conversion custom templating localization content large product information news article resulting content highly dynamic changes state choice recreate within react paradigm recreate client however complicated servergenerated content often typically static delivering redundant copy static content client compare ignore hydration seems waste resources prohibitively expensive current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior instead additional complications recreating client hydration much easier accept content server asis tell hydrate leave alone may options nonhydrating ssr add new callback disable hydration component content javascript export default class nohydrate extends component return false avoid rerendering component hydrate shouldcomponenthydrate return false render server simply render content client never called server content accepted asis return thispropschildren access ssr content dom probably worst option though one definitely works currently use empty content actually works documented supposed considering way make work documenting may needs happen however could added behavior would look cleaner versions react browser os affected issue work previous versions react version sure working option worked supposed work future versions", "num": "12617", "d": "4/2018"}, {"title": "uncaught typeerror super expression must either null function undefined importing react reactdom", "body": "dependencies version helps simplest code hello world using react component import react react import reactdom reactdom class hello extends reactcomponent render return hello world reactdomrender documentgetelementbyid root using bundlejs html script bundle everything getting error thanks advance", "num": "12616", "d": "4/2018"}, {"title": "unexpected warning hydrating portal ssr", "body": "want request feature report bug bug current behavior given following simplified snippet jsx class hovermenu extends reactcomponent render typeof document undefined return null const root documentgetelementbyid root return reactdomcreateportal hello world root class para extends reactcomponent render return text valid exists following error shown hydrating ssr warning goes away update definition prefer double rendering caused nt quite understand error telling rendered serverside either case error particularly confusing dom even rendered inside dom wonder happening nested inside react expected behavior error thrown least error message clearer versions react browser os affected issue work previous versions react chrome react ssr next", "num": "12615", "d": "4/2018"}, {"title": "invalid value data prop expected behavior", "body": "per blog post react allows passing data attributes freely react macos chrome freely seems stop short functions replication steps behavior expected linksrecommendations silence disable welcome console errors stack traces printed three messages scroll whole page console every reload love find way around nt involve hacking app code react disable warning following closed thread console warn vs error led currently open thread warning output hooks currently trying negative lookaround regex filters chrome dev tools locking dev console process edit dev tools filter solved issue well enough leaving post case bug", "num": "12614", "d": "4/2018"}, {"title": "context null", "body": "want request feature report bug bug current behavior called context executed making impossible access statically defined class methods jsfiddle expected behavior would expect provided context class method defined example simple class static methods accessed", "num": "12612", "d": "4/2018"}, {"title": "react setstate callback called external npm packaged component", "body": "creating one npm package react setstate callback working npm package build used react tried react everything working fine help resolve issue appreciated", "num": "12611", "d": "4/2018"}, {"title": "", "body": "want request feature report bug neither question current behavior unable locate reacttestrenderer source tree created tree created contain generated html optional component property omitted confusing since react omit entirely generated html jsx element attributes whose value wanted confirm expected behavior assume understand case eg explicit test property expected behavior na versions react browser os affected issue work previous versions react react react test renderer browseros na worked previously na", "num": "12608", "d": "4/2018"}, {"title": "ismounted deprecated", "body": "get ismounted deprecated plain javascript react classes error dependencies wan na know problem reactnavigation", "num": "12605", "d": "4/2018"}, {"title": "nested context update longer", "body": "want request feature report bug bug current behavior nested context consumers seem update leaving higher updates stale expected behavior critical piece code composes multiple consumers one dynamic array context providers creates nested blob consumers receiver sitting end example first consumer fires get value returns subtree contains second consumer contains nt actually render looks like something contextconsumer prevents react alphas believe would render regardless wonder would possible forward changed values actual receiver ca nt call setstate versions react browser os affected issue work previous versions react react", "num": "12604", "d": "4/2018"}, {"title": "react migration issue", "body": "reactlib reactdomlib anymore getting error module found error resolve module reactdomlibreactinjection parts code used import domproperty reactdomlibreactinjection dompropertyinjectdompropertyconfig config please give alternative solution", "num": "12603", "d": "4/2018"}, {"title": "reactdom use coffeescript", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12602", "d": "4/2018"}, {"title": "put two root subroot items reactdomrender like case creating canvas", "body": "files rendered working fine canvas printed product page next files like fronted page product canvasas mentioned render pages time designing pages second canvas element printed way create canvas print files please suggest current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12597", "d": "4/2018"}, {"title": "question context provider state initialisation", "body": "consider component wrapping context provider js class valuewrapper extends reactcomponent constructor props super props thisstate value null setvalue thissetvalue setvalue value gt thissetstate value render gt consumer might want set default value first mounted way see using new api check existing value first render js class valueupdater extends reactcomponent state inputvalue handleinputchange e gt thissetstate inputvalue etargetvalue render gt value setvalue gt value setvalue thisstateinputvalue seems break golden rule updating state render method would immediately cause rerender ideally would able call context method component context render prop possible far tell docs suggest passing props another component tried initialisation component method would called every render surely would rerendered time better pattern trying use context inappropriately", "num": "12596", "d": "4/2018"}, {"title": "ca nt use asyncstorage fetch inside getderivedstatefromprops", "body": "trying migrate using using tab navigation adding property state screen file tab detect correct index load value storage fetch data api currently inside tab screen using new static function nt seem able update state within asyncstorage fetch imported service wrapper function fetch call api tried using fires first time tab loaded need storage api call every time user changes tab", "num": "12595", "d": "4/2018"}, {"title": "getting warning switching development production", "body": "scripts include html get thoughts thanks", "num": "12593", "d": "4/2018"}, {"title": "add unicitykey save react rendering subpart dom nt changed", "body": "gt new feature proposal today want save react rendering sub part parent choice create nested implement shouldcomponentupdate useful case apps little likely written multiple nested components since every dom part unique splitting app components would verbose main component page inline dom render function time depending app state big dom nodes could save rerendering idea able use kind unicitykey would tell react okay unicitykey changed need go deeper node unchanged example would inline version", "num": "12592", "d": "4/2018"}, {"title": "multiple renderers allow context", "body": "currently nt allow multiple renderers share context however relax constraint allowed long rendering nt interleaved pop provider also pop sigil need run fabric rn time", "num": "12589", "d": "4/2018"}, {"title": "property", "body": "puzzled using property access dom component property access object purpose property", "num": "12588", "d": "4/2018"}, {"title": "controlled nt update firefox also setting state another event", "body": "reporting bug current behavior selecting value react controlled select box firefox selection nt change occurs mousedown handler also generates state change seems occur mousedown handler sets state rerenders dropdown onchange event handler fires onchange triggered old select value react provided old state rerender codepen modified example docs steps reproduce run example firefox open dropdown select different value eg grapefruit observe new value selected expected behavior select dropdown updated value available react versions react browser os affected issue work previous versions react tested firefox development edition normal osx using react also encountered windows sure exact versions tested chrome everything works intended osx windows", "num": "12584", "d": "4/2018"}, {"title": "anchor keepdefault", "body": "way keep anchor default click handling along using onclick trying make controlled link open new tab", "num": "12583", "d": "4/2018"}, {"title": "check", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12582", "d": "4/2018"}, {"title": "question react components", "body": "click react component twice new requisition made observed opening chrome networking tab clicking twice element example happens react version", "num": "12581", "d": "4/2018"}, {"title": "question getderivedstatefromprops previous props", "body": "read article update async rendering little doubt ie doest receive prevprops one arguments situations useful compare prevprops nextprops article suggests ie may notice example propscurrentrow mirrored state imho wrong couple reasons first one breaks single source truth rule also inconvenience keeping propscurrentrow statelastrow sync second one think summarized ie key dry repeat figure absolute minimal representation state application needs compute everything else need ondemand suggestion basically seen since dawn react copying prop state around need looks bit wrong suggestion would add argument", "num": "12577", "d": "4/2018"}, {"title": "", "body": "", "num": "12576", "d": "4/2018"}, {"title": "feature request umd version reacttestrenderer", "body": "react reactdom cjs umd versions available possible create umd version reacttestrenderer well", "num": "12572", "d": "4/2018"}, {"title": "reactjs logo license", "body": "unable find license react logo anyone know license", "num": "12570", "d": "4/2018"}, {"title": "silence noisy missingkey warning nt apply", "body": "like request feature would enable us silence missingkey warning since nt apply serverside applications example library using react serverside templating using demo app ideally able set property silence quite noisy crowds dev logs listening lt get gt get lt get users warning child array iterator unique key prop check toplevel render call using see information userrow userslist div body html master warning child array iterator unique key prop check toplevel render call using see information li paginate userslist div body html master span li ul nav paginate userslist div body html master gt get users lt get users gt get users lt get users gt get users lt get userstesting warning child array iterator unique key prop check toplevel render call using see information usersshow div body html master gt get userstesting lt get users gt get users lt get userstestingedit gt get userstestingedit lt get warning child array iterator unique key prop check toplevel render call using see information p homepage div body html master button div div form newmessagepanel div div homepage div body html master warning child array iterator unique key prop check toplevel render call using see information messagepanel div div homepage div body html master gt get lt get gt get lt post gt delete lt get gt get", "num": "12567", "d": "4/2018"}, {"title": "add isstatelessfunctioncomponent reactis package", "body": "want request feature report bug want request feature current behavior api expected behavior writing hoc could forward ref wrapped component according react specification ref allowed given stateless function component need api tells whether component sfc course add forwarded ref component without check whether sfc leave runtime error typescript language prevent static analysis warnings wish util api solve problem contribute component type narrowing new apis suggestion reactisisstatelessfunctioncomponent reactisisclasscomponent versions react browser os affected issue work previous versions react react amp reactis", "num": "12566", "d": "4/2018"}, {"title": "warning getderivedstatefromprops valid state object null must returned returned undefined", "body": "want request feature report bug depends look sure looks like bug current behavior nt explicitly return anything warning output console warning getderivedstatefromprops valid state object null must returned returned undefined expected behavior treat really inconvenient add extra unneeded statement end unnecessary complication code adding noop line making everybody code less clean reason treat versions react browser os affected issue work previous versions react", "num": "12562", "d": "4/2018"}, {"title": "reactdomrender calls rerender context consumers unnecessarily", "body": "want request feature report bug bug current behavior subsequent calls tree causing consumers rerender even provided value static amp reference static primitive type whereas normal rerender caused ie nt cause situation occurs update blocker provider amp consumer thysultan provided excellent demo expected behavior calls behave rerenders caused tree correctly reconciled recreated scratch logical nested rerenders avoided versions react browser os affected issue work previous versions react react", "num": "12561", "d": "4/2018"}, {"title": "react onclick event firing samsung native browser", "body": "click firing samsung native browser", "num": "12560", "d": "4/2018"}, {"title": "unexpected warning use getderivedstatefromprops", "body": "want request feature report bug bug current behavior v use method controlled component value input field get warningerror says switching controlled uncontrolled vice versa remove error goes away current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example import react component react class usersettings extends component constructor props super props handlechange e thissetstate etargetname etargetvalue handleupdateuser e epreventdefault const updateuser uid thisprops updateuser uid thisstate static getderivedstatefromprops nextprops return firstname nextpropsuserfirstname lastname nextpropsuserlastname email nextpropsuseremail render const firstname lastname email thisstate return settings thispropsuserauthstatus first name last name email export default usersettings expected behavior nt expect get warning versions react browser os affected issue work previous versions react react os mac ossierra browser chrome", "num": "12558", "d": "4/2018"}, {"title": "webpack package react development mode popprovider error", "body": "want request feature report bug bug current behavior hi used webpack package react reactdom problem compiling reactdomdevelopmentjs problem browser opened reactdomdevelopmentjs file problem sentence reactfiberscheduler function discovered problem occurs development mode problem production mode current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example tried pack react reactdom webpack webpack devserver problem webpackconfigjs javascript const webpack require webpack path require path extracttextplugin require extracttextwebpackplugin htmlwebpackplugin require htmlwebpackplugin uglifyjsplugin require uglifyjswebpackplugin const publicdir dlldir pathresolve dirname dll appdir pathresolve dirname scripts rootdir pathresolve dirname builddir pathresolve dirname build styledir pathresolve dirname stylesheets manifestdir require pathresolve dirname const port const webpackdevconfig mode development devtool sourcemap entry index output publicpath publicdir filename name hash js path builddir optimization minimize true minimizer new uglifyjsplugin sourcemap true uglifyoptions compress unused false deadcode false warnings true output comments true resolve modules nodemodules appdir dlldir externals jquery jquery module rules test js x include appdir dlldir styledir use loader babelloader test css use extracttextpluginextract fallback styleloader use loader cssloader options importloaders loader postcssloader publicpath styledir test pngjpgjpegbmpgif use loader urlloader options limit loader imagewebpackloader plugins new webpacknoemitonerrorsplugin new webpackdllreferenceplugin manifest manifestdir context rootdir new extracttextplugin name hash css new htmlwebpackplugin publicpath publicdir filename indexhtml template chunks index inject body devserver host port port proxy historyapifallback true moduleexports webpackdevconfig expected behavior normal operation versions react browser os affected issue work previous versions react", "num": "12555", "d": "4/2018"}, {"title": "setstate always triggers componentwillreceiveprops", "body": "hi since react every triggers behavior breaking change project causes lot problems normal behavior bug also triggers new method", "num": "12554", "d": "4/2018"}, {"title": "meta bringing flow types line apis", "body": "hi realize react team nt work flow directly react typings live however currently large gaps flow support new apis thought might good raisetrack benefit people searching react tracker filed issues flow repo missing typings nt outstanding prs x prefixed lifecycles commit x commit x commits x pr pr pr pr pr feel free close issue nt think useful maybe react team knows someone flow team help give priority libdef updates especially prs", "num": "12553", "d": "4/2018"}, {"title": "react context api typeerror set property currentvalue undefined", "body": "want request feature report bug bug current behavior using new context api getting error versions react browser os affected issue work previous versions react mycontext provider consumer consumer context gt contextdata return thispropschildren return null render return context gt thisconsumer context sure bug react something correctly", "num": "12552", "d": "4/2018"}, {"title": "new context provider may block old context propagation children constant", "body": "want request feature report bug bug current behavior seems children newstyle context constant block updates oldstyle context providers propagating consumers sandbox demonstrates issue clicking button number correctly increment update propagated button colors button clicked causes update newstyle copy source code sandbox jsx import proptypes proptypes import react react import reactdom reactdom class root extends reactcomponent constructor props super props thisstate count thiscountup thiscountupbind getchildcontext return thiscontext count thisstatecount countup thiscountup render return thispropschildren countup thissetstate count gt count count rootchildcontexttypes count proptypesnumberisrequired countup proptypesfuncisrequired const ctx reactcreatecontext class extends reactcomponent constructor props onclick void super props thisstate color randomhexcolor newcolor thisnewcolorbind render return newcolor const color randomhexcolor thissetstate gt color function randomhexcolor const colorstr mathfloor mathrandom mathpow tostring return slice colorstrlength colorstr class extends reactcomponent render return ctx gt class extends reactcomponent render return count proptypesnumberisrequired countup proptypesfuncisrequired reactdomrender documentgetelementbyid root expected behavior oldstyle newstyle context updates coexist versions react browser os affected issue work previous versions react also broken seems happen constant happens children provided first call updated directly use instead problem happen also problem using production optimization hoists constant elements outside component specified children constant would even defeat fixworkaround example", "num": "12551", "d": "4/2018"}, {"title": "feature portals virtual dom", "body": "like idea portals proposal extend idea short special element react allow connect portal element without real id dom element something like jsx const app gt lt gt const somewidget gt reactdomcreateregion somewidget guid idea portal region anywhere virtual dom rendered asynchronously needed currently working project uses custommade library rxjs based frintjs make something like works libraries look connect widgets react application dynamically props needed", "num": "12550", "d": "4/2018"}, {"title": "upgrade babel", "body": "babel still beta presumably released soon get head start upgrading perhaps stable enough us upgrade even final release one benefit could use jsx fragment syntax tests yay reznord volunteered pick", "num": "12548", "d": "4/2018"}, {"title": "broken link react jsx tag descriptions", "body": "current behavior link address linked page regarding reactspecific tag leads page link following paragraph also reactspecific attribute dangerouslysetinnerhtml used directly inserting html strings component", "num": "12547", "d": "4/2018"}, {"title": "reactdom development bundle uses arrayfrom", "body": "want request feature report bug bug current behavior currently versions ship reactdomdevelopmentjs containing usage available certain reactsupported browsers like causes breakage particular code paths taken browser ran using current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example reproduction see hello world crash show nothing expected behavior would use document polyfill required versions react browser os affected issue work previous versions react internet explorer", "num": "12540", "d": "4/2018"}, {"title": "support hydration html minification", "body": "want request feature report bug report bug current behavior replaces dom ssr page served two sibling links page attributes wrongly set little repl replicate behaviour server responds html correct right hydration first changed whitespace artifacts added expected behavior first changed versions react browser os affected issue work previous versions react react chrome macos", "num": "12536", "d": "4/2018"}, {"title": "build reactjs working", "body": "react js project working run npm start command create build upload server working also set path homepage packagejson file buildzip build folder srczip src folder project unable find issue think happen router homepage name myapp version private true dependencies datatablesnet datatablesnetdt react reactbootstraptable reactdom reactrouterdom reactscripts reactable scripts start reactscripts start build reactscripts build test reactscripts test envjsdom eject reactscripts eject", "num": "12535", "d": "4/2018"}, {"title": "improve reactdom uppercase html warning", "body": "want request feature report bug improvement requestdiscussion current behavior rendering reactdom foobar using uppercase html always use lowercase html tags react expected behavior warning message improved make obvious fix issue different use cases example obvious message custom components add dashes first letter capitalized actually react component idea open suggestions warning versions react browser os affected issue work previous versions react master", "num": "12527", "d": "4/2018"}, {"title": "provide way detect infinite component rendering recursion development", "body": "want request feature report bug feature possibly bug current behavior trying new context api project awesome however haste start using managed stumble situation every time would try render certain component making use different contexts app would completely freeze thing would let get error state forcefully kill process via chrome task manager nothing would logged console app would completely freeze opened task manager saw cpu spiked every time would go component way could stop crash tab finally threw statements saw entered infinite loop providers managed get app stop crashing still unsure exactly happening sure using api incorrectly somehow confusing problem diagnose error checking would incredibly useful expected behavior would beneficial sort checks place similar happens many calls happening closely call example way instead freezing everything permanently app could least crash report sort information help realize gone wrong versions react browser os affected issue work previous versions react react chrome", "num": "12525", "d": "4/2018"}, {"title": "unmountmount console warning changed behaviour react", "body": "want request feature report bug bug current behavior migrating large codebase react following messages started showing console warning unmountcomponentatnode node attempting unmount rendered react toplevel container instead parent component update state rerender order remove component printwarning warning unmountcomponentatnode handleclick inline babel callcallback invokeguardedcallbackdev invokeguardedcallback invokeguardedcallbackandcatchfirsterror executedispatch executedispatchesinorder executedispatchesandrelease executedispatchesandreleasetoplevel foreachaccumulated runeventsinbatch runextractedeventsinbatch handletoplevel batchedupdates batchedupdates dispatchevent interactiveupdates interactiveupdates dispatchinteractiveevent warning render replacing reactrendered children new root component intended update children node instead existing children update state render new components instead calling reactdomrender fully understand tracked unmountingmounting components event click see order reproduce click header trigger warnings example running react warningsissues present seems like function unmounts component asynchronously event debugging executing method root still populated html internal react properties still present probably makes following call problematic current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example see order reproduce click header trigger warnings expected behavior warnings present console like react versions react browser os affected issue work previous versions react osbrowsers bug present react works expected react", "num": "12524", "d": "4/2018"}, {"title": "getderivedstatefromprops suppress state initialized warning", "body": "want request feature report bug either bug feature depending team sees current behavior presence suppress warning initialized even always called even first render jsx class foo extends reactcomponent static getderivedstatefromprops props return propsa uncommenting constructor silences warning redundant work constructor props super props thisstate propsa render slightly silly example return thisstatea expected behavior always called even initial render maybe considered initialized state means second argument allowed undefined would first call state initialized user change would breaking change depends user breaking pattern initializing state constructor although brings memories alternatively called initial render class implementer would call getderivedstatefromprops spread result initial state definition clearly possible anymore versions react browser os affected issue work previous versions react", "num": "12523", "d": "4/2018"}, {"title": "react constructor trigger twice strict mode", "body": "want request feature report bug bug current behavior constructor trigger twice strict mode current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior behavior like normal mode versions react browser os affected issue work previous versions react react chrome latest macos", "num": "12522", "d": "4/2018"}, {"title": "whitelist unknown tag warning", "body": "want request feature report bug feature current behavior warning expected behavior show warning versions react browser os affected issue work previous versions react react sure whitelisted used stuff maybe like workaround mind something related", "num": "12520", "d": "4/2018"}, {"title": "react property createref exist type typeof react", "body": "according new docs creating refs upgraded get errors reactcreateref property createref exist type typeof react", "num": "12519", "d": "4/2018"}, {"title": "event listener attached still called calling", "body": "want request feature report bug bug current behavior event listener attached still called calling target example codesandbox link js class app extends reactcomponent componentdidmount documentaddeventlistener click thishandleclickondocument windowaddeventlistener click thishandleclickonwindow componentwillunmount documentremoveeventlistener click thishandleclickondocument windowremoveeventlistener click thishandleclickonwindow handleclickondocument e gt consolelog handling event document handleclickonwindow e gt consolelog handling event window render return console log expected behavior wo nt called log console versions react browser os affected issue work previous versions react react browser chrome", "num": "12518", "d": "4/2018"}, {"title": "userlist component show browser ul children element thing components folder", "body": "want request feature report bug bug current behavior import sc soundcloud import react react import reactdom reactdom import provider reactredux import createstore applymiddleware redux import synchistorywithstore reactrouterredux import combineforms createforms reactreduxform import browserrouter router route browserhistory reactrouterdom import thunk reduxthunk import promise reduxpromise import createlogger reduxlogger import allreducers reducers import app componentsapp import clientid redirecturi constantsauth furthermore inside appjs following written produces browser console world causing browser npm start display expected behavior designed many components expecting blank page versions react browser os affected issue work previous versions react another comprehensive representation problem", "num": "12517", "d": "4/2018"}, {"title": "warning keeps appearing", "body": "want request feature report bug might bug current behavior replaced componentwillreceiveprops newly added getderivedstatefromprops warning keeps appearing console doubted higher order component first sight removed coupling component higher order wrapper also removed render effort remove side effects apparently componentwillreceiveprops component get rid warning thing could explicitly assign null warning gone missing something bug also wish warning could optionally turned development environment considering legacy react libraries still use injected eg hoc javascript class rootcontainer extends reactcomponent constructor super thisstate thiscomponentwillreceiveprops null way turn warning static getderivedstatefromprops nextprops prevstate return prevstate render return thispropshistory thispropschildren null export default rootcontainer export default withrouter connect makemapstatetoprops rootcontainer current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior warning least turn option even environment versions react browser os affected issue work previous versions react react reactdom reactredux reactrouterdom update apr reacthotloader cause warning", "num": "12516", "d": "4/2018"}, {"title": "provide better error circular context consumer", "body": "want request feature report bug requesting feature current behavior named consumer child component name parent component go infinite loop change name child component render without problems current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior showing error message warning console", "num": "12515", "d": "4/2018"}, {"title": "get width amp height", "body": "need get width amp height image tried way need get dimentions mount browser resizing", "num": "12514", "d": "4/2018"}, {"title": "setstate method clarification", "body": "render method called every number properties set using setstate ca nt get parameter pass setstate saying nt rerender component setstate method call callback function setstate setting state render called twice found calling twice optimized", "num": "12513", "d": "4/2018"}, {"title": "createref missing flow typings", "body": "want request feature report bug bug current behavior using flow complains missing react expected behavior flow complain versions react browser os affected issue work previous versions react react", "num": "12512", "d": "4/2018"}, {"title": "running npm start run react app browser shows page unresponsive", "body": "want request feature report bug yes current behavior start createreactapp running npm start browser gives aw snap something went wrong although get error running chrome slowly show anything expected behavior see main page versions react browser os affected issue work previous versions react using react reactdom react something want say yarnlock packagelockjson using bpm yarn interchangeably", "num": "12511", "d": "4/2018"}, {"title": "react umbrella", "body": "x fragment false positive warning fix fixed x big dev mode performance regression fixed x error handling bugs related replaying fixed", "num": "12509", "d": "4/2018"}, {"body": "measuring production version development known issue although clear leak per seems like takes browser collects listeners", "d": "4/2018"}, {"body": "gaearon measuring development version yes listeners take windows tests tomorrow well production build mac thanks details", "d": "4/2018"}, {"body": "problem single app multiple root components rjs rendered since single context used consume value nt true multiple instances context supported react tree use value provided closest parent putting example jsfiddle fact work text values displayed correctly", "d": "4/2018"}, {"body": "passed object root components testing led believe silly apologies bothering write fiddle test thanks time", "d": "4/2018"}, {"body": "sure error coming coming react maybe opinionated linter overzealous enforcing prop types close hope get reopened likely able help", "d": "4/2018"}, {"body": "clarify think specific react buildtime error react library runs runtime sorry tautology failed build looks like either linter custom loader", "d": "4/2018"}, {"body": "also wonder developers expect functionaschild always rerendered dom like functional components rerendered depdending content returns", "d": "4/2018"}, {"body": "hey use issue tracker bug reports feature requests support question please check community support resources", "d": "4/2018"}, {"body": "help", "d": "4/2018"}, {"body": "gaearon okay helps partly one question want say problem intended expected otherwise hold performance user experience issues case make client different server want make client server space client performance issue generic case server client case server client different methods implement", "d": "4/2018"}, {"body": "provide fiddle please", "d": "4/2018"}, {"body": "see generally bug case however defaultvalue updated effect since value used fallback situations like form reset", "d": "4/2018"}, {"body": "jquense alright mean dx improvement opportunity close issue", "d": "4/2018"}, {"body": "yeah think warn without legit false positives", "d": "4/2018"}, {"body": "create reproducing case please links fiddles issue template example giving see would two nodes react would reuse dom node code", "d": "4/2018"}, {"body": "nothing react specific easily reproduced css inspector chrome firefox sites including nt use react among things makes content tags visible seeing nt know bug browsers react", "d": "4/2018"}, {"body": "nmain prevent", "d": "4/2018"}, {"body": "nt use nt familiar syntax looked mdn straightforward writeup certainly want anywhere ever use must supply everything would normally ua styles better working one standard css resets find various websites", "d": "4/2018"}, {"body": "facebook support approach similar jsxcontrolstatements future likely nt recommend approach might add support doexpressions jsx future give something similar spirit though facebook support approach like facebook warn developers using library due incorrect coverages thousands react libraries strange things ca nt warn every single one whenever asked always recommended trying recreate control flow react components issue consistent jest nyc since use babel ast clear issue exactly something related react repository close", "d": "4/2018"}, {"body": "questioner react version", "d": "4/2018"}, {"body": "something may wrong way resolving modules bundler config error getting straightforward something tried create element undefined maybe npm version broken local install wrong well would add render betting see also undefined well", "d": "4/2018"}, {"body": "close error pretty clear assuming element errors set debugger without sourcemaps enabled see something help react", "d": "4/2018"}, {"body": "explain measurements calling sufficient updates processed react exits top call stack frame browser paint final state even update", "d": "4/2018"}, {"body": "nt looked yet first question whether difference significant production mode fiddles showing running development mode", "d": "4/2018"}, {"body": "seen difference similar production mode start really see higher element counts played around little trying understand different usage patters impact frequency updates require dom change example updates vs lots mounting amp unmounting components far nt really isolated anything particularly useful", "d": "4/2018"}, {"body": "calling reactdomrender many many times seems meaningfully worse performance rendering many elements within single react root sure understand react hood correctly let think call need destroyreplace contents target node meanwhile use single root virtual dom take care dom operations know dom mutations pretty expensive would nt surprised", "d": "4/2018"}, {"body": "call reactdomrender need destroyreplace contents target node actually true understanding actually case repro examples actually rendered either case way number dom mutations nt wildly different said understand overhead root many roots might make batching scheduling worse nt know enough guts react implementation fully explain", "d": "4/2018"}, {"body": "nt difference dom mutations", "d": "4/2018"}, {"body": "generally recommended adds unnecessary level indirection using javascript ternary statements directly ya free whatever works team", "d": "4/2018"}, {"body": "thanks response jason complex issue coverage tool able cover branches correctly please take look report link istanbuljs officially recommend jsxcontrolstatement react bug lot future developers might run issue fully migrate jsxcontrolstatements jquense thanks", "d": "4/2018"}, {"body": "edited answer explain", "d": "4/2018"}, {"body": "react ca nt guess name declaring code probably make possible specify manually react devtools", "d": "4/2018"}, {"body": "thanks smiley", "d": "4/2018"}, {"body": "size prop number think true inputs selects necessarily true rest html tags web components html tags attribute except inputs selects web components seeing issue", "d": "4/2018"}, {"body": "airamrguez attribute html attribute something react provides according html spec allowed elements", "d": "4/2018"}, {"body": "gaearon nt know wrote rest html tags bad example provided works ok add something nt seems like valid size nt work example value works yes yes something changed version version aweary suppose fine filter props passing appropriate values using html tags suppose web components size attribute anything wrong think", "d": "4/2018"}, {"body": "web component code path nt reject attributes bug", "d": "4/2018"}, {"body": "bug add something like please send pr", "d": "4/2018"}, {"body": "ok work tomorrow heading bed quick response", "d": "4/2018"}, {"body": "could nt wait", "d": "4/2018"}, {"body": "running similar problem testing components render nodes using feature forward refs hocs usecase working library exports components returned hoc using consumers import components use codebase unfortunately consumer writes test uses tries nothing found created codesandbox example illustrate problem librarytheme librarybutton consumerjs js import button librarybutton const app gt click consumertestjs js import button librarybutton import app consumer render button says click gt const root testrenderercreate find anything const button rootfindbytype button expect buttonpropschildren toequal click look returned entry example means consumers write tests find assert things components without using test works expected familiar package feeling treat components created similar way functionalclass components let know help fix", "d": "4/2018"}, {"body": "much different jsx function bomb return reactdomrender documentgetelementbyid root get render prop guess need careful", "d": "4/2018"}, {"body": "xizario thanks nice example though less realistic imo unless nt want behave like purpose", "d": "4/2018"}, {"body": "closing duplicate thanks", "d": "4/2018"}, {"body": "issue nt special logic context passing function case nt expect functions works regular react nodes perhaps could show warning encounters something nt react node either case deeply cloning react trees like sounds like trying something react nt designed need", "d": "4/2018"}, {"body": "thanks delaying evaluation child properties parent ready provide context evaluation example expression language javascript evaluated remotely control child number children child becomes internally something like accomplish parent visits children transforms prefixprop property containing expression prop property contains expression value cloning approach found alter component properties course context consumers cloned properties alter know use functionaschild render functions similar delay evaluation designing prototyping library users come html jsp often novices beyond html expression language probably appreciate notation besides forget space function confused quickly comprehend form either context consumers also use functionaschild problem early work still considering options somehow want arrive clean parentchild notation like first quote probably write babel plugin transforms clean notation functional one maybe missing something appreciate input would really like users leave jsp adopt react notation cryptical happen", "d": "4/2018"}, {"body": "another idea toying functional parent probably returning component kind hoc child contain contextparent calls course parent could use context consumer render component returns context prop dropped problem parent component access react context evaluate knowledge access react context unless returns component possible actually trying set property therefore believe accessing react context outside components would ideal something like remember right struggling tried invoke consumerrender manually using test framework nt get anything meaningful ps first notation may seem cryptical actually quite familiar current jsp form think sell users", "d": "4/2018"}, {"body": "think might bug", "d": "4/2018"}, {"body": "agree something like would nice", "d": "4/2018"}, {"body": "gaearon think using either directly avoids need call equivalent example would nt throw warnings find easier reason called single method sure nt antipattern though case component get unmounted function runs case would throw error believe", "d": "4/2018"}, {"body": "thanks chance could condense findings small isolated example brief description lot sift", "d": "4/2018"}, {"body": "gaearon description issue video updated example simple small app present", "d": "4/2018"}, {"body": "bug", "d": "4/2018"}, {"body": "fix", "d": "4/2018"}, {"body": "axules thanks great reproducing case extremely helpful", "d": "4/2018"}, {"body": "perhaps key question suppose elements returned embedded component code portable code slower created please document", "d": "4/2018"}, {"body": "could please file documentation repo", "d": "4/2018"}, {"body": "done", "d": "4/2018"}, {"body": "clarify time means imagine happening dom apis react side", "d": "4/2018"}, {"body": "hey dan yeah suppose way would set inner html title instead removing fragment node children dom node removal steps called unexpected order may work better examples assumption series events children parent fragment removed would componentwillunmount componentwillunmount child node removed child node removed reality componentwillunmount child node removed componentwillunmount child node removed let know think michael thu apr dan abramov notifications githubcom wrote clarify time means imagine happening dom apis react side receiving authored thread reply email directly view github mute thread", "d": "4/2018"}, {"body": "run version using", "d": "4/2018"}, {"body": "run run version", "d": "4/2018"}, {"body": "depend yarn please update", "d": "4/2018"}, {"body": "looks like issue opera mini specifically rightly noted place use lines specifically check object thus definitely undefined could theory null seeing either inclined think opera mini specific transformation issue nt think something could fix let know suggestions", "d": "4/2018"}, {"body": "thanks gaearon find bizarre order loading way would impact must transform code proxy client", "d": "4/2018"}, {"body": "yeah looks like bug", "d": "4/2018"}, {"body": "clones child gives include children end giving three children child probably want something like equivalent without restread syntax", "d": "4/2018"}, {"body": "ca nt guess want default literally clones element including keeping reference children typically people want tends used tweaking prop otherwise keeping content default default produce equivalent element", "d": "4/2018"}, {"body": "oh got pass parent child course contain property well bring parent children every child spasibo stopping clarifying gaearon", "d": "4/2018"}, {"body": "test seems way describe question work expected extra work keep consistency write template client parse get initial state set work", "d": "4/2018"}, {"body": "os windows chrome ok safari error like questions", "d": "4/2018"}, {"body": "polyfill babel amp polyfill", "d": "4/2018"}, {"body": "reactrouter bug", "d": "4/2018"}, {"body": "version test browser really old polyfill upgrade safari newest version", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "thejian sorry nt mac think bug modify source code amp recompile", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "asked one colleagues still ca nt run app", "d": "4/2018"}, {"body": "xgqfrmsgildata bug react need support old browsers use polyfill", "d": "4/2018"}, {"body": "used still work", "d": "4/2018"}, {"body": "react contain code probably coming another library fbjs dependency react particular module appear used", "d": "4/2018"}, {"body": "far know problem nt ca nt html plenty things html browsers insert dom node fact example mdn shows look code tbody html simple table header first name last name john doe jane doe look dom structure browser creates node automatically parsing html past used issue react used initial markup insertion setting react would set html browser would insert node middle confusing breaking react currently react nt use initial rendering specific problem gone would however still problem use server rendering hydrate html react needs move using future reason warning valid hopefully following present difficulties", "d": "4/2018"}, {"body": "expected duplicate keys check console see warning exact behavior keys unique components maintain identity across updates nonunique keys may cause children duplicated andor omitted behavior unsupported could change future version", "d": "4/2018"}, {"body": "subsequently read reactdomserverrendertostring activate handlers abandoned route however correct please let know make work thanks", "d": "4/2018"}, {"body": "rendertostring handle event handlers intended produce markup rehydrated react wires event handlers produce plain html inso also nt handle events since need javascript counterpart", "d": "4/2018"}, {"body": "would nt recommend component needs data pass explicitly", "d": "4/2018"}, {"body": "thanks", "d": "4/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "verified problem exists react dom issue", "d": "4/2018"}, {"body": "able change src already rendered embed element plaing js code change content embed object think solution fully recreate embed object new src", "d": "4/2018"}, {"body": "think solution fully recreate embed object new src workaround accomplishes without loading states would set embed source", "d": "4/2018"}, {"body": "closing dom works force react recreate element using keys", "d": "4/2018"}, {"body": "nt recommend use kind metaprogramming obscure render prop composition tucking away making even harder debug see issues like indeed order matters reconciliation longer term ideas reduce need nesting common cases ready share yet likely something within year announce rfc repository ready feel free watch cheers", "d": "4/2018"}, {"body": "like make proposal breaking api change please open rfc", "d": "4/2018"}, {"body": "far understand intentional", "d": "4/2018"}, {"body": "yup render nothing need intentionally return reason error suggests reduce possible bugs someone forgetting render explicit clearer signal want render nothing vs forgot return something", "d": "4/2018"}, {"body": "please note example gave minimal test case reproduces issue actual program exposed issue fragment created constant computed value ends cases consider following almost identical program jsx import react react import render reactdom class app extends reactcomponent render return null render documentgetelementbyid root program cause invariant violation yet return render nothing nt case also cause invariant violation following example also renders nothing without error jsx import react react import render reactdom render undefined documentgetelementbyid root treated differently returned method seems counter intuitive rate thanks responding bug quickly comment issue", "d": "4/2018"}, {"body": "hard say advance definitely might issues example events bump issues consider putting inner app iframe isolate fully", "d": "4/2018"}, {"body": "provide information creating reduced test case ca nt reproduce", "d": "4/2018"}, {"body": "take one", "d": "4/2018"}, {"body": "eduardobudant nothing take koansang nt provided enough information issue follow going close", "d": "4/2018"}, {"body": "issues board mostly used reporting bugs issues try taking look support board seek help sources hand tried using using work tooltips fit use cases", "d": "4/2018"}, {"body": "sorry saw labels thought right place question ok go forum question solve tooltip tasks clear react way think thanks", "d": "4/2018"}, {"body": "nt know right way get reference b arrow reason ca nt provide refs part render callback", "d": "4/2018"}, {"body": "reason knew dan would come open eyes yeah absolutely solves problem thanks", "d": "4/2018"}, {"body": "used outside render rare legitimate cases right wo nt anything unless eventually produced value part result different jsx works sense nt warning like jsx rare legitimate reasons nt think special casing portals makes sense", "d": "4/2018"}, {"body": "docs nt clear please raise issue send pr improve thank", "d": "4/2018"}, {"body": "believe duplicate", "d": "4/2018"}, {"body": "technically bug using hydrate markup deprecated wo nt work react instead use explicitly tell react hydrate existing html wo nt depend whether exists", "d": "4/2018"}, {"body": "working example", "d": "4/2018"}, {"body": "nt think neat way fixing something like put reach know nt done single root effectively ca nt emit markup know whether root ca nt know subsequent child produces root rendered deeply maybe heuristic could use think would equally confusing produce edge cases close suggested migration path use completely sidesteps problem nt rely attribute", "d": "4/2018"}, {"body": "mark special attribute eg", "d": "4/2018"}, {"body": "thanks quick response seems like special attribute", "d": "4/2018"}, {"body": "blog post details mentions unknown booleans intentionally passed nt know handle cases people want leave dom cases want remove attribute want unknown attribute appear value dom specify string example", "d": "4/2018"}, {"body": "use componentwillreceiveprops nextprops updated new props contrary happens getderivedstatefromprops called first time nt understand means called initial render updates provide complete example", "d": "4/2018"}, {"body": "sorry dan issue fix upcoming release manshrugging thank response", "d": "4/2018"}, {"body": "thanks report fredyc renamed familiar rn sync acdlite change need propagated somewhere fredyc possible still older version react dependencies know common issue reactdom sure common rn", "d": "4/2018"}, {"body": "sure renaming actual issue look closely seeking checked react installed whole tree version try updating reactnative tomorrow however version released react unlikely relevance", "d": "4/2018"}, {"body": "sorry misread part see screenshot tries read also wrong type issue though renamed", "d": "4/2018"}, {"body": "would nt expect work specifies peer dependency", "d": "4/2018"}, {"body": "funny thing actually working even though peer dependency apparently always reliable anyone stumbling error update", "d": "4/2018"}, {"body": "expected internal naming changed versions rn work earlier versions work later versions use peer dependency guidance", "d": "4/2018"}, {"body": "actually html elements structured wrong way based elements like demo even supported react sure good idea add flexibility react would maybe beneficial add migration notes least would enforce people write better html", "d": "4/2018"}, {"body": "interesting bug adding global listener nt fire listener nt wrapper steps makes working changing global listener global listener everything works fine listener used checkbox controlled component adding global listener works fine third paramter document addeventlistener basically set everything works fine commented callback global event listener works fine", "d": "4/2018"}, {"body": "stmoreau thank dont nested example totally valid might read section mdn link left also suspect fixes checkbox due nesting second checkbox example nested worked fine guess messing things yes thank workarounds sad part sometimes cant control like party ui lib assume wide issue global event listener capture phase used almost everywhere capture clicks outside elements popovers datepickers selects etc", "d": "4/2018"}, {"body": "seems like bug think fix", "d": "4/2018"}, {"body": "duplicate please check discussion thanks", "d": "4/2018"}, {"body": "would like look happens", "d": "4/2018"}, {"body": "sure dig deeper time", "d": "4/2018"}, {"body": "took look related something working right without diving internals react reactdom much problem seems reasonably straightforward since serverside rendered html passed web browser part static html file loads img tags rendered valid src attribute serverside immediately start loading content content finishes loading reactdom hydrates native onload event fires react connected listeners element example following modification cause onload message never display browser assuming image fetched within seconds reproducing example puts client side javascript script tag bottom body means browser seen image tag possibly started loading executing javascript reason expect work got flaky behavior trying chrome firefox windows makes sense web browser could image loaded rest page finished loading since image load would need beat javascript file load example works replaced tears content existed inside destination element fire new img created", "d": "4/2018"}, {"body": "right makes sense browser load event fire react missing since hydrate tear content rerender example img portion content also unchanged state updated later either makes sense onload would nt fire think differences browsers onload may mostly timing react onload fire hydrate due image already loaded keep standard expectations onload works normally looks like use another approach images using hydrate instead", "d": "4/2018"}, {"body": "closing onload behaving expected timing issues causing different behavior times", "d": "4/2018"}, {"body": "think suspensecapable server renderer proper solution need walk tree data fetching use case please describe detail bit hard understand prs libraries without knowing context exactly trying", "d": "4/2018"}, {"body": "ok let take apollo lot hoc application serverside know data needed starting rendering procede difficulty several levels needs data display needs data display actual solution walk react tree order get promises resolve using strategy render application prefetched data transfer state clientside", "d": "4/2018"}, {"body": "also suspensecapable server renderer", "d": "4/2018"}, {"body": "know data needed starting rendering procede server renderer could suspend rendering waiting data seen talk hard discuss familiar suspense suspense lets components wait data rendering demo client plans implement server need traverse tree rendering happens single pass", "d": "4/2018"}, {"body": "ok understand solved suspense compatible rendertonodestream mean try implement suspense loadable components work serverside box", "d": "4/2018"}, {"body": "would recommendation strategy relies serverside prefetching data rendering initial client view without rendering server", "d": "4/2018"}, {"body": "compatible rendertonodestream would need whole new server renderer different api would recommendation strategy relies serverside prefetching data rendering initial client view could still rendering gather data discard result send cache serialized form think nt want render could system eg like redux users something already today nt involve walking tree either", "d": "4/2018"}, {"body": "similarly react loadable use case referring supported box suspense talk includes demo code splitting libraries", "d": "4/2018"}, {"body": "complexity code splitting serverside clientside provide api support suspense serverside problem solved still walk react tree apollo think create package order share hard piece code projects hope deprecated soon", "d": "4/2018"}, {"body": "makes sense", "d": "4/2018"}, {"body": "thanks answers", "d": "4/2018"}, {"body": "please reduce reactdomonly example thirdparty libs extra code also verify nt problem without react", "d": "4/2018"}, {"body": "party libs fails firefox react works firefox man coding nonreact sucks", "d": "4/2018"}, {"body": "erikras confused clarify specific issue reporting first example handler called using async function sleeping seconds remove call alert shows expected sure spec behavior async functions native events example without party libs longer using async function appears working firefox issue see call nt actually preventing default reason separate issue example without react also using async function fork example using async function sleep see nt work either reporting async event handlers nt work nt work something else", "d": "4/2018"}, {"body": "asyncawait stuff ignore issue see call nt actually preventing default reason separate issue main issue reporting async event handlers nt work nt work yes nt work", "d": "4/2018"}, {"body": "whether sacred dom api demands crossbrowser respect guys seems work others nt tested ie gross fails provide requisite functionality firefox reason guys important nt care strongly throwing inconsistency might previously gone unnoticed", "d": "4/2018"}, {"body": "thanks clarifying react example provided nt looks represent scenario want test running works submit events fork uses dispatchevent see also nt prevent default event reason need set creating event dispatching manually want call working example react surprised chrome browsers allow noncancellable event case nt look react issue hope helps", "d": "4/2018"}, {"body": "thanks brandon clears turnaround spectacular wish way let boss know awesomely handled flarnie know fb org chart heard manager", "d": "4/2018"}, {"body": "sophiebits manages react team aweary actually work full time react", "d": "4/2018"}, {"body": "get back work seattle business aweary sophiebits dudes awesome knew already", "d": "4/2018"}, {"body": "noted anyway make sure aweary work gets noticed next reviews", "d": "4/2018"}, {"body": "grrr sophiebits literally writing tweet tweet anyway", "d": "4/2018"}, {"body": "one removed", "d": "4/2018"}, {"body": "pr", "d": "4/2018"}, {"body": "fixed nicolevy", "d": "4/2018"}, {"body": "technically already way mind mucking build system specifically look exposes internal builds maybe could add official profiling build", "d": "4/2018"}, {"body": "please file instead thanks", "d": "4/2018"}, {"body": "nt clear repo site thanks gaearon", "d": "4/2018"}, {"body": "nt understand exactly asking doc saying knowledge far page know next doc pages demonstrated use components rerender answer question", "d": "4/2018"}, {"body": "richtera please provide example reproduces issue tried reproducing nt see behavior verify react reactdom updated", "d": "4/2018"}, {"body": "work example every single reference caused exception whereas worked fine seems kind scheduling difference validating field invariant validator fails every component put together example next week locking code", "d": "4/2018"}, {"body": "richtera please share full error message stack trace getting", "d": "4/2018"}, {"body": "trying reproduce sample application far luck changing completely breaks app break small sample app yet failed render happens within mobx update error element ref specified string overlay owner set could happen one following reasons may adding ref functional component may adding ref component created inside component render method multiple copies react loaded see information invariant coerceref createchild reconcilechildrenarray reconcilechildfibers reconcilechildrenatexpirationtime reconcilechildren updatehostcomponent beginwork performunitofwork workloop renderroot performworkonroot performwork performsyncwork requestwork scheduleworkimpl schedulework schedulerootupdate updatecontaineratexpirationtime updatecontainer pushnodemodulesreactdomcjsreactdomdevelopmentjsreactrootrender anonymous unbatchedupdates legacyrendersubtreeintocontainer render anonymous promisethen async bootup srclearnindextsx webpackrequire fn webpackrequire checkdeferredmodules anonymous anonymous render caused mobx change even tried use mobx sample quite setting stores way cause problem since code works fine quite sure specifically setup another example fail way code looked far look fine seeing weird race conditions", "d": "4/2018"}, {"body": "considered possibility outlined message follow link includes diagnostic instructions help determine multiple copies react happen updating react use buggy version package manager build set incorrectly thirdparty library bundled published incorrectly specifically try running check one copy shows", "d": "4/2018"}, {"body": "multiple copies react lock version using packagejson using resolutions use yarn seems crashing section code", "d": "4/2018"}, {"body": "possible another project folder example parent project even accidentally installed home directory", "d": "4/2018"}, {"body": "checked parent folder reinstalled nodemodules change resolutions react reactdom make work make fail switch back forth figured basic sample project nt fail way", "d": "4/2018"}, {"body": "also fails right", "d": "4/2018"}, {"body": "yes anything pulls fail reason difficult debug using gitlabci custom build vm fetch mode also keep cached even resolutions says ie yarn seems look resolutions initial installs downgrade existing modules nodemodules change resolutions rerun yarn install", "d": "4/2018"}, {"body": "understanding change anything string ref ownership mechanism releases code runs fine facebook thousands string refs one else reported yet best guess something wrong environment dunno maybe yarn bug somehow update makes existing issue visible want debug search strings starting bundle normally show one match react define two matches minification dev prod one never hit breakpoint matches pulling duplicate react somehow hard say without seeing bundle reproducing example", "d": "4/2018"}, {"body": "ok check check failing owner null fiber another version seems way application boots conflicts whatever happening calling reactdomrender promise firebase validate current login token since nt see problem within little sample application realize looking needle haystack", "d": "4/2018"}, {"body": "let explain works reactdom starts rendering class component sets class component calls string ref reads owner property issue experiencing occurs reactdom finds different react one used component reactdom sets owner field react finds react used component field set thus sees null owner help explain debug assignments reads see plays", "d": "4/2018"}, {"body": "gaearon place watch find wrong version react put breakpoint makes sense unable detect second version webpack", "d": "4/2018"}, {"body": "ah debugged assignments retrievals reactcurrentownercurrent seems changing componentwillmount componentdidmount resolve problem seems bit sensitive least seeing could another part puzzle course thanks help gaearon", "d": "4/2018"}, {"body": "hmm would nt expect lifecycle hooks make difference unless using string refs way nt supported first place code looking like supported place string ref render method method called something like lifecycle hook may explain issues seeing never supported string refs", "d": "4/2018"}, {"body": "think false alarm although version stringent componentwillmount resulting completion could possibly cause update", "d": "4/2018"}, {"body": "think understand saying", "d": "4/2018"}, {"body": "basically running code works nt work changing componentwillmount calls initiate promises cause property state changes componentdidmount make work little sensitive invalid state changes previously docs talking issues become much important definitely something cause code", "d": "4/2018"}, {"body": "known changes lifecycle order two releases moreover react come cryptic bugs accidentally something wrong lifecycle still appreciate could isolate moving something lifecycles fixes sounds like react bug", "d": "4/2018"}, {"body": "sorry spam new react found", "d": "4/2018"}, {"body": "think probably go", "d": "4/2018"}, {"body": "please provide complete example something probably broken build set", "d": "4/2018"}, {"body": "complete script specify need", "d": "4/2018"}, {"body": "please upload complete project code fine build setup probably broken sure configure recommend using officially supported method like described pages issues like upload project take look wrong", "d": "4/2018"}, {"body": "ok let create project git add link comment", "d": "4/2018"}, {"body": "link project", "d": "4/2018"}, {"body": "anikethsaha code extending end component", "d": "4/2018"}, {"body": "changed still hope", "d": "4/2018"}, {"body": "code provided thing probably meant error says super expression extended undefined undefined typo", "d": "4/2018"}, {"body": "gaearon changed earlier still getting", "d": "4/2018"}, {"body": "changed help recompile code use webpack directly need recompile code changing encourage try tool specifically designed people new react posted link automatically recompile code work hard learn react use build tooling time think might help use webpack directly comfortable higher level tool like create react app", "d": "4/2018"}, {"body": "recompile webpack changing using react using browserjs cdn link react reactdom link script past days working fine may nt using facing problem styling etc shifted method look link mention", "d": "4/2018"}, {"body": "still problem suggested changes please push changes github look hard help without seeing exactly changed issue seeing", "d": "4/2018"}, {"body": "saw commit include compiled bundle since checked claim recompiled need see commit confirms", "d": "4/2018"}, {"body": "commit git recompiled pc thats mean comment change compiled bundlejs", "d": "4/2018"}, {"body": "still issue please post screenshot commitpush changes", "d": "4/2018"}, {"body": "changed bundlejs repo check error mentioned", "d": "4/2018"}, {"body": "still typo bundle recompiled", "d": "4/2018"}, {"body": "thanks guess error recompiled bundlejs times changing changing bundle may error config check", "d": "4/2018"}, {"body": "similar issue also solved rerendering client via setstate case try render modal inside portal component returns rendered server creates portal client however dom gets messed hydration eg use like inside main component test instead getting hydration test get test warning use react custom ssr method sure intended behavior", "d": "4/2018"}, {"body": "trying understand react passes string attributes others meaning attached passing function data attribute would get stringified even react allowed explain purpose code practice", "d": "4/2018"}, {"body": "hi dan brief backstory jumping inpractice examples exploring patterns react apps insufficient benefits justify maintainability costs vs patterns one pattern stateless functional components vs class components sfcs reduced surface area creates fewer opportunities rigid couplings dependency graphs generally easier read eventually started questioning sfcs sfcs adds interfaces app interface learned interface creates opportunities couple elements lt handlers lt function scopes lt data structures eventually concluded almost cases benefits percomponent interfaces outweigh costs string components fewer tradeoffs string like div adds abstractions learn coupling surface vectors unnecessary dependency graphs grow base components write string components wrapped composition function eg custom hocs make working efficient resulting components often look like gets props state data pipe access hoc wrapper around maps arguments children hocs added props hit string component usually nt problem mostly pass string id component get data directly state problem arises certain handler hocs take example recompose withstate instead toggling elements throws error naming prop renaming prop gets handler working said function gets stringified hits element props nt matter case react internal representation props holds function hocs access react throws warning function hits element working first publicfacing app using structure extensively let know like link working code app bunch invalid data prop errors handler hoc cases like withstate nt affect functionality awkward development hence posting issue", "d": "4/2018"}, {"body": "first thought see us changing useful warnings potentially could mean forgot call method pass function mistake accommodate use case seems like essentially reimplementing react components much roundabout way creates difficulties", "d": "4/2018"}, {"body": "interesting take nt think reimplementing components much providing shorthand creating string components explicit concerns separation creating string components primary responsibility component yes reimplements responsibility components separating concerns like handler coupling attribute mapping roundabout part makes wonder misunderstand saying though since seems direct regardless agree passing string components directly nt folks use react case worth supporting summarize learnings attributes ability passed freely means get stringified added dom omitted dom hoc author way define prop like actually omitted dom hoc users define property name like ignore allows hocs work together without modifying component adding third hoc filter prop couple relevant links", "d": "4/2018"}, {"body": "see comment pr cant access static methods class via anyway since defined constructor instance want access static methods gdsfp like", "d": "4/2018"}, {"body": "hey jquense thanks reply sure however aligned issue intention nt pass instance context gdsfp actual constructor one able access static methods static method see usual context within static class methods thus constructor indeed instance however gdsfp context explicitly set associated pr context constructor thus instance methodsproperties still unavailable", "d": "4/2018"}, {"body": "oops sorry timdegroote reviewed quickly still sure whether considered bug guess team explicitly chose context lead weird questions speculation open back", "d": "4/2018"}, {"body": "guess team explicitly chose null context lead weird questions speculation yeah least point view intention highlight instance discourage people writing code uses static lifecycle method way easy get confused already allowing compounds problem future readers understand might seem bit overprotective see practical upsides allowing see downsides point different thing confuse anyone know js deeply example expect people declare class properties try access crashes would give undefined change convention even good shorthand convenience want make shorter hoist constant module level variable function easier reference explicit also better encapsulated modules access", "d": "4/2018"}, {"body": "way ran following use case gdsfp wanted try reading documentation realised would need methods initially instance ran certain props started converting static methods agree nt best solution far test anyway ran issue could nt access static methods gdsfp method initially thought understanding static methods incorrect confirming nt case thought maybe something wrong babelwebpack setup spent time making sure proper plugins etc installed configured nt finally look gdsfp method called react understood issue adding conversation point users might expect context consistent language spec also confusing nt get actual cause problem might suspect something wrong setup get wrong idea static methods work end agree opinion thought process definitely see coming understand decision thank clarification", "d": "4/2018"}, {"body": "js context determined callsite say inconsistent spec agree confusing already familiar pattern read searching solution anecdotal experience people coming js languages tend first try call static method would work way think concern would prevail case think common rather sacrifice confusion elsewhere confusion explicit know work researched problem got answer filed issue somebody else find later post stackoverflow eventually become common knowledge important part knew problem far unpleasant case know problem quietly undefined fields identify problem easier identify null harder say exactly wrong code already successfully uses use reason occur many people may exist point something instance think overall even though approaches problems prefer problem fails fast one subtly hide misunderstanding even second one might conventional js coding styles", "d": "4/2018"}, {"body": "create working example instance reproduces problem", "d": "4/2018"}, {"body": "found cause problem version compatibility issues used component custom build npm package made worked well", "d": "4/2018"}, {"body": "need fix component bundle react react component dependency otherwise keep getting similar issues new release", "d": "4/2018"}, {"body": "thanks gaearon", "d": "4/2018"}, {"body": "hey use issue tracking react bug reports question specific library try asking repo use one many support avenues thanks", "d": "4/2018"}, {"body": "provide reproduction uses context elements directly illustrates bug clear problem react codesandbox", "d": "4/2018"}, {"body": "jquense tried replicate faithfully could see state updated rerenders first provider statevalue change consumer receives value children returns nt updated value never reaches receiving component", "d": "4/2018"}, {"body": "pretty hard read abstraction unroll hocs reduces", "d": "4/2018"}, {"body": "saying problem looks shady render method including context consumer render prop supposed pure using closure like lead weird bugs", "d": "4/2018"}, {"body": "thing without hoc works everything tree something prevents second consumer updating separate condition provokes bug affects libraries allow listening multiple providers using constructs like render method including context consumer render prop supposed pure using closure like lead weird bugs transport values wrapped component somehow needs receive values ones change perhaps better way causing issue", "d": "4/2018"}, {"body": "ps react works something must changed", "d": "4/2018"}, {"body": "nt look alpha please broken myriad ways nt useful", "d": "4/2018"}, {"body": "aspect works expected though problem current react contextconsumer nt update like reactcomponent would breaks dynamic context subscribers", "d": "4/2018"}, {"body": "love help need reduced example nt mutate anything closures nt hocs nt agree without hoc works everything tree hoc nothing abstraction generates component unrolling hoc manually code could produce code would change semantics react nt care use hocs", "d": "4/2018"}, {"body": "guess accumulator becoming stale works moment dynamically critical suddenly nt work first consumer triggers return accumulated result second consumer contains view becomes stale works reactbroadcast createreactcontext previous react alphas know else create dynamic listener listen multiple context providers maybe would help", "d": "4/2018"}, {"body": "nt think logic pushing something closure work obvious nt need spend time looking supported impure render like", "d": "4/2018"}, {"body": "understand wonder one would solve given list providers say view say would create contextconsumer construct dynamically view deepest element receiving values outcome pure even possible given consumer values obtained callback", "d": "4/2018"}, {"body": "know stack contexts init time render time", "d": "4/2018"}, {"body": "possible hoc known statically also dynamic", "d": "4/2018"}, {"body": "tried several utilities exist compose nested render props even nt end using check implemented disclaimer first realized solving problem seem recall used reduceright", "d": "4/2018"}, {"body": "believe would fail react probably way", "d": "4/2018"}, {"body": "believe none mutations process seem need know least mine mutation used initial implementation purely pure pun intended", "d": "4/2018"}, {"body": "interesting thanks lot see works", "d": "4/2018"}, {"body": "looks like version without mutation works", "d": "4/2018"}, {"body": "given example curious unrolled rather rolled note nt recommend anyone write code like applications really hard read might handy specialized libraries", "d": "4/2018"}, {"body": "incredible thanks much need study functional programming could nt done hundred years", "d": "4/2018"}, {"body": "easier loop use loop think necessary use reduce every case list context separate statement like become visible loop body like reduce vs loop choice form", "d": "4/2018"}, {"body": "hi late discussion think figured totally nerdsniped mutation render cause saying safe either real cause react elements reused recreated works added another lambda calls expected behavior update consumer element even though closed value may change edit reordered reducer make sure render created related render props minimal example edit last stale consumers updated alpha stable elements need new updated versions", "d": "4/2018"}, {"body": "redwormik thanks suspected accumulator getting updated mind stuck contextconsumer last example isolates nicely gaearon knownexpected behaviour", "d": "4/2018"}, {"body": "apis purposefully made private likely nt solution", "d": "4/2018"}, {"body": "way fix error complete migration react", "d": "4/2018"}, {"body": "using api migration path using files lib use anymore since nt part public api", "d": "4/2018"}, {"body": "import domproperty reactdomlibreactinjection const config iscustomattribute boolean dompropertyinjectdompropertyconfig config", "d": "4/2018"}, {"body": "adding custom attributes ca nt anymore react also nt care anymore attributes add nodes nt need special logic use add em element", "d": "4/2018"}, {"body": "nt", "d": "4/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "sorry wrong place way tried make examples generic possible also seen anything docs regarding sort pattern happy draft documentation anything needs added", "d": "4/2018"}, {"body": "edit answering dan questions probably land better architecture approach solves problem might right problem solve depending actual use case encountered problem components reasonable alternative found add third component", "d": "4/2018"}, {"body": "provide details specific scenario trying implement concretely hoist state component knows initial state better context provider happens render two components attempt set value one win", "d": "4/2018"}, {"body": "great questions thank responding component trying trying implement tabbed ui component image google images illustration tried implement api like content rendered component child related idea default tab would able communicate default parent context suppose alternative api sidesteps problem could like existing api enforces content tab design avoids potential issues corresponding corresponding perhaps attempting coerce components api caused problem change course possible without calling render method using old context api slightly irksome ca nt seem achieve new context api answer second question guess question specific scenario happen specify multiple props nt think would unreasonable say undefined behaviour vein html spec seem define behaviour case multiple radio buttons attribute attribute html option option option although browsers seem simply check last one nt think behaviour guaranteed personally nt see issue implementation creates race condition scenario always resolve sort usable state", "d": "4/2018"}, {"body": "need attributes could nt model like", "d": "4/2018"}, {"body": "couple issues know index know active assuming looping determine index loop determine index want wrap elements", "d": "4/2018"}, {"body": "leonaves might want check implemented thing reactbootstrap using new context branch specifically tabcontainer nav navlink tabpane components", "d": "4/2018"}, {"body": "ok read original api wonder get content active tab given time available render way think right also store children active tab context also tab know setup active given time", "d": "4/2018"}, {"body": "yep js class tablist extends reactcomponent constructor props super props thisstate content null setcontent thissetcontent setcontent content gt thissetstate content render gt const tab label defaulttab children gt content setcontent gt children amp amp content amp amp defaulttab setcontent children const tabcontent gt value gt valuecontent little unconventional given state serialisable seen recommended put functions original example state already serialisable check also bit whiffy theory solid simply object references risk false positive main part happy equivalent call initial example feels wrong calling something essentially recall render method right render method ca nt think way unless completely going wrong", "d": "4/2018"}, {"body": "jquense taken brief look implementation obviously lot moving parts may mistaken gather really possible separate tabs tab content rendered markup due section method component js validcomponentchildrenmap children thisrendertab validcomponentchildrenmap children child gt const childprops childprops delete childpropstitle delete childpropsdisabled delete childpropstabclassname though nt fully conceptualised things going gather possible substitute certain components custom components may make possible", "d": "4/2018"}, {"body": "leonaves tabs component shortcut tabcontainer tabpane nav used independently create whatever want like example", "d": "4/2018"}, {"body": "ah okay essentially got like second example comment components wrap create api similar original api however scenarios tabs must assigned explicit id container must told define default think core comes previous comment like existing api enforces content tab design avoids potential issues corresponding corresponding perhaps attempting coerce components api caused problem change course possible without calling setvalue render method using old context api slightly irksome ca nt seem achieve new context api change assigning tabs explicit ids needs done say slightly frustrating previously possible api changed longer possible without antipattern updating state render method", "d": "4/2018"}, {"body": "also sorry late reply holiday", "d": "4/2018"}, {"body": "meant cases synchronously calculate state props meant async requests please move data fetching code andor", "d": "4/2018"}, {"body": "probably incorrect attribute somewhere question browsers work really related react closing", "d": "4/2018"}, {"body": "actually happened renamed react files development production gaearon", "d": "4/2018"}, {"body": "please submit api change proposals rfc repository thanks", "d": "4/2018"}, {"body": "lirilnet", "d": "4/2018"}, {"body": "trysound benefit performance concern", "d": "4/2018"}, {"body": "lirilnet pass ref component component need update ref case possible createref object mutable field updated component", "d": "4/2018"}, {"body": "thanks reply", "d": "4/2018"}, {"body": "clear react set property component", "d": "4/2018"}, {"body": "thanks report repro benclive looks like bug try investigate soon like try find root cause send fix greatly appreciate", "d": "4/2018"}, {"body": "believe following issue occurs onmousedown event div remove events div code work fine browsers", "d": "4/2018"}, {"body": "faefelipe workaround rather solution benclive believe issue lies fact firefox triggers events onmousedown onmousedown onchange instead onmousedown onchange like chrome nuragic noticed well example following line handlemousedown rerender component firefox since additional event triggered seems like value getting updated comment line works expected browsers", "d": "4/2018"}, {"body": "little poke believe skiritsis right track two mousedown events getting fired first mousedown fires initially interacted browser shows list values second mousedown fires specific value chosen modal list throw consolelog handlemousedown function output value select list show correct value prior setstate call argue bug firefox giving nuanced view state changes page chrome wanted leverage additional information could change code however result wrong thing written state submit clicked faefelipe points attaching onmousedown parent form general mousedown events great way approach touch screen devices nt mice simulated mouse events really nt think anything within react needs change error report application specific behaviour based fairly nuanced browserdependent behaviour could pin one vendor force behave way complexity cost time", "d": "4/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "requisition see anything network tab", "d": "4/2018"}, {"body": "meant network requests like image", "d": "4/2018"}, {"body": "coming jsfiddle react react make network requests", "d": "4/2018"}, {"body": "sorry gaearon could see request made one extension browser", "d": "4/2018"}, {"body": "cvlmtg dry nt mean write less code", "d": "4/2018"}, {"body": "trysound talking writing code talking duplicating data", "d": "4/2018"}, {"body": "lot discussion already choice made want weigh changing please read rfcs add thanks", "d": "4/2018"}, {"body": "cvlmtg also data actually duplicated pass state references reuse later according logic problem", "d": "4/2018"}, {"body": "find ongoing discussion linked issues", "d": "4/2018"}, {"body": "thanks linking reactjsrfcs folks first one breaks single source truth rule wanted point nt actually break single source truth rule props key example could also state key intentionally named never doubt current source truth", "d": "4/2018"}, {"body": "thanks gon na reply topic something new add seems already pretty long", "d": "4/2018"}, {"body": "nt care", "d": "4/2018"}, {"body": "internals exposed follow semantic versioning public api use", "d": "4/2018"}, {"body": "curious would used react reactdom umd versions enables run browser without transformbundling step test renderer nt really useful without test runner capable consuming cjs build", "d": "4/2018"}, {"body": "thanks response working environment npm nt allowed among things use jasmine standalone specrunner browser js unit testing planning create wrappers around reactdomtestutils reacttestrenderer reacttestrenderershallow make testing slightly less painful", "d": "4/2018"}, {"body": "gotcha using npm install would willing create umd test renderer bundle would pretty simple git clone repo apply following patch diff diff git ascriptsrollupbundlesjs bscriptsrollupbundlesjs index ascriptsrollupbundlesjs bscriptsrollupbundlesjs const bundles react test renderer label test bundletypes fbdev nodedev nodeprod bundletypes umddev umdprod moduletype renderer entry reacttestrenderer global reacttestrenderer run build renderer give bundle exports global variable", "d": "4/2018"}, {"body": "guess nt hurt us add umd", "d": "4/2018"}, {"body": "sure toss pr consideration", "d": "4/2018"}, {"body": "ok next release test renderer umd build meanwhile go reacttestrendererproductionminjs reacttestrendererdevelopmentjs", "d": "4/2018"}, {"body": "believe also license react related", "d": "4/2018"}, {"body": "cc sophiebits", "d": "4/2018"}, {"body": "generally add configuration like creates problems people turning without understanding warning means third party component turning whole application etc much burden specify keys lists override filter warning sure hacky intentionally trying work around existing system try keep easy switch clientonly serveronly mixed modes flag like would encourage people write server first write code would eventually work client", "d": "4/2018"}, {"body": "fair enough thanks", "d": "4/2018"}, {"body": "brand checking generally bad practice going mess wrapping useful property tell one since allows wrapping first place instead use new forwardref api nice part consumer hoc use ca nt put ref functional component class component like normal", "d": "4/2018"}, {"body": "bug", "d": "4/2018"}, {"body": "sebmarkbage typescript language hoc receive reactcomponenttype union latter type nt accept ref prop reactforwardref nt contribute problemsolving present workaround using ducktype checking", "d": "4/2018"}, {"body": "hey intent far understand explicit ones intent mean forgot anything eg whereas returning explicit action dev opt making changes also consistent function version setstate works", "d": "4/2018"}, {"body": "yes general prefer explicit apis react intentional decision nt agree writing four characters makes code less clean", "d": "4/2018"}, {"body": "gaearon nt agree writing four characters makes code less clean four like fifteen", "d": "4/2018"}, {"body": "right see point still disagree want cases nt want update state response props explicit explicit", "d": "4/2018"}, {"body": "ok", "d": "4/2018"}, {"body": "also follows precedent set react warns undefined return value warn potential mistakes someone perhaps writes ifelse statement incorrectly forgets handle case", "d": "4/2018"}, {"body": "please build master check fixed recently made related bug fix might also fixed", "d": "4/2018"}, {"body": "hmm never mind mine different code path", "d": "4/2018"}, {"body": "please build master check fixed recently made related bug fix might also fixed good know though im facing issue track yet ive double checked everything imho rerendering shouldnt happen cant locate yet reproduce outside project gon na test latest fix later see helps although issue happens also legacy context", "d": "4/2018"}, {"body": "nt understand consider bug change return nt see rerender expected returns update follows normal flow passing different children every time rerenders every time nt context providerconsumer tree would work way think bit misleading say tree technically pass different elements even though tree looks way missing", "d": "4/2018"}, {"body": "change indirection return false shouldcomponentupdate nt see rerender expected returns true update follows normal flow figured might case raises question context provider bail propagating updates consumers changed", "d": "4/2018"}, {"body": "seeing rerender provider propagates context seeing rerender tree renders normally encounter something would prevent rendering middle gets leaves providerconsumer supposed make rendering restrictive regular divs", "d": "4/2018"}, {"body": "omg situation occurs update blocker provider amp consumer assumed head sandbox render flow nt surprise would expecting sorry reporting nonissue", "d": "4/2018"}, {"body": "problem thanks taking time anyway", "d": "4/2018"}, {"body": "nithishreddy please provide information device using specific app using called samsung native browser version app using also code provided nt valid assume trying include example simple click handler would helpful could share exact code trouble", "d": "4/2018"}, {"body": "yes although information sufficient reference bind call ay onclick event need bind class modifying example class clicked extends reactcomponent using fat arrow function mark gt consolelog clicked render return hopefully might solve problem still data needed", "d": "4/2018"}, {"body": "hi aweary samsung grand mobile samsung native browser click event fired devices working fine including samsung grand chrome browser also", "d": "4/2018"}, {"body": "nithishreddy u catch error windowonerror catch throw e", "d": "4/2018"}, {"body": "facing problem mobile samsung browser chrome firefox onclick fire", "d": "4/2018"}, {"body": "provide complete example could run please codesandbox jsfiddle issue template includes links services", "d": "4/2018"}, {"body": "nextprops contain values like firstname lastname email component act uncontrolled input switch controlled input uncontrolled input throw warning", "d": "4/2018"}, {"body": "demiand related accept string nt pass component", "d": "4/2018"}, {"body": "trysound assumed example sets values object state render value one solution", "d": "4/2018"}, {"body": "demiand yep", "d": "4/2018"}, {"body": "thanks trysound demiand", "d": "4/2018"}, {"body": "please provide full isolated example reproducing guess mix perhaps dll config try deleting caches rebuilding", "d": "4/2018"}, {"body": "tried way said nt work example command git clone b npm npm run dll npm start run local development environment port", "d": "4/2018"}, {"body": "looks like uglify bug remove uglify config works original code development version reactdom use js var renderersigil void use detect multiple renderers using context renderersigil skipped return pushprovider pushprovider popprovider popprovider clear using development version bundle comment nt exist production version however see comment actually inserted wrong place newline breaks return statement function return object becomes later try read something object throws encourage file issue uglify", "d": "4/2018"}, {"body": "ca nt reproduce please create reproducing example", "d": "4/2018"}, {"body": "nt exactly find problem understand concerned reactcssmodules remove decorator problem disappears sorry trouble", "d": "4/2018"}, {"body": "curious see howif flow deal currently possible safely type typescript definition methods allowed reference instance generic parameters", "d": "4/2018"}, {"body": "flow defined", "d": "4/2018"}, {"body": "could please provide full reproducing example", "d": "4/2018"}, {"body": "also please make sure", "d": "4/2018"}, {"body": "using provider consumer think problem seeing bundling together react using webpack library app consuming library using seeing problems describing possible guess would probably webpack question react question", "d": "4/2018"}, {"body": "general libraries nt include copies react happens probably bug hard say without seeing example", "d": "4/2018"}, {"body": "ok probably close sounds like need update app use context api", "d": "4/2018"}, {"body": "getting issue code testing working fine breaking code example import react purecomponent react const gmapcontext reactcreatecontext googlemap class base extends purecomponent constructor props super props thisstate map null render const map thisstate export default class gmap extends purecomponent constructor props super props thisstate loaded false componentdidmount thisscriptloaded scriptloaded thissetstate loaded true render const loaded thisstate jest test import react react import renderer reacttestrenderer import gmap gmap describe gmap gt uses default applies props object gt const snap renderer create tojson expect snap tomatchsnapshot gmap uses default applies props object using update well dunno seems working previously nt working triple checked versions even fresh install packages everything seemed match", "d": "4/2018"}, {"body": "going assume running mix different react versions try deleting triplechecking right version versions nt lockfile somehow overrides still please create publish reproducing project fiddle", "d": "4/2018"}, {"body": "weakness old context api seeing problem manifest combined new context api specific general distant children updates using old context api blocked immediate children decline rerender issue old context api docs usual way solve implement registrationobservation system send context context would contain callback consumers could use register parent wanted push new update would send signal registered consumers could force rerendering children popular libraries like implemented hocs see example simply returning different values always unreliable worked components already rerendering reason", "d": "4/2018"}, {"body": "actually encountered using reactrouter updating anymore updated one custom context providers sit app core new api", "d": "4/2018"}, {"body": "tag bug although sure create test case guess maybe condition like also needed bailouts sure acdlite", "d": "4/2018"}, {"body": "guessing assume using similar bailout logic also bails constant maybe actually right thing old context api gone", "d": "4/2018"}, {"body": "suggested fix comment probably wo nt priority us send pr tests take", "d": "4/2018"}, {"body": "repo used proposals", "d": "4/2018"}, {"body": "close favour", "d": "4/2018"}, {"body": "babeljest latest version still nt support babel tests might face issue update probably beta release support babeljest", "d": "4/2018"}, {"body": "try instructions use jest babel note using babel version need install babeljest following command", "d": "4/2018"}, {"body": "babel jest definitely supports babel using together cra", "d": "4/2018"}, {"body": "sure special version cases", "d": "4/2018"}, {"body": "nt manage fork old docs somebody else maintains unfortunately pretty broken react docs mentioned react github page", "d": "4/2018"}, {"body": "know maintains fork pretty date may show search results find page", "d": "4/2018"}, {"body": "first result google search similar one trying find information accepted component tags usable jsx reason trouble finding information official react website", "d": "4/2018"}, {"body": "actually original google search find page search history", "d": "4/2018"}, {"body": "feared first two results outdated chinese translations gaearon anything relevant page official react docs would dom elements answer question use valid html element svg element custom element check tutorial want good foundations basics questions please check community support resources", "d": "4/2018"}, {"body": "nt know wondered times months ago", "d": "4/2018"}, {"body": "thanks report sorry unexpected breakage gaearon want stop using ask users polyfill currently used convert places like case would easy enough refactor without", "d": "4/2018"}, {"body": "definitely using", "d": "4/2018"}, {"body": "sorry bout folks", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "nt using arrayfrom", "d": "4/2018"}, {"body": "ie support", "d": "4/2018"}, {"body": "used run mapsetraf polyfills imo adding dependencies builtins breaking change nt ask people polyfill whole environment three things", "d": "4/2018"}, {"body": "ok maybe future nt get habit inlining implementations builtins avoid bloats bundle size also less maintainable", "d": "4/2018"}, {"body": "agree one devonly maybe require full env", "d": "4/2018"}, {"body": "sounds good", "d": "4/2018"}, {"body": "gaearon mean new implementations accepting", "d": "4/2018"}, {"body": "saying react bump runtime requirement assume environment", "d": "4/2018"}, {"body": "uhm gotcha concerned many applications dod using react still runs nt compatible many functions", "d": "4/2018"}, {"body": "bump minimal requirement require polyfilling functions nt necessarily mean dropping ie support", "d": "4/2018"}, {"body": "thanks", "d": "4/2018"}, {"body": "probably something similar even serverclient mismatch wanted remember sebmarkbage talking whitespaces problem issue find anywhere", "d": "4/2018"}, {"body": "turn failing test case one suites", "d": "4/2018"}, {"body": "issue arises minification process specifically use htmlminifier extra white spaces comments removed html source able remove react specific comments eg weaker option", "d": "4/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "sure send pr", "d": "4/2018"}, {"body": "jumped one since quick pr", "d": "4/2018"}, {"body": "nicolevy fixed", "d": "4/2018"}, {"body": "something specific context guess similar problem rendered component recursively renders", "d": "4/2018"}, {"body": "gaearon issue post two days", "d": "4/2018"}, {"body": "yeah basically going recursive call end condition nt realize writing probably using hoc functions functions recursively calling without realizing set different functions like combine common contexts jsx const appcontexttypecontext reactcreatecontext none const appcontextidcontext reactcreatecontext function appcontextprovider contexttype contextid props return jsx const withappcontext wrappedcomponent gt function withappcontext props return contexttype gt contextid gt combining multiple ways multiple spots guess ended wrong combination functions led issue short yeah probably specific contexts could see many others easily running issue like", "d": "4/2018"}, {"body": "seem duplicate though helpful discussion far", "d": "4/2018"}, {"body": "struggling see different js function return function b return", "d": "4/2018"}, {"body": "honestly think really effictively roundabout form second example easy see like gets difficult diagnose used hocs top otherwise unrelated components happen call guess requesting really sort measure detect throw error break loop somehow recursive issues diagnosed easier much like handle many calls occurring close together", "d": "4/2018"}, {"body": "think issue technically unrelated context though seems easier run new context api built safeguard prevent much recursion would check easy add least debugging purposes", "d": "4/2018"}, {"body": "would desired solution keep track deep components nested rendering abort message deep", "d": "4/2018"}, {"body": "originally thinking warning component child renders another instance could confusing false positives guess setting max depth good compromise warns dev", "d": "4/2018"}, {"body": "ask like vs rendering conditionally returning elements want mounted unmounted render looks like misuse top level render react correctly warning", "d": "4/2018"}, {"body": "sure build view modules rendering framework agnostic api functions turn call react enables us build applications modules using many different frameworks backbone legacy modulesapps example applications want reload views certain events results views getting unmountedmounted click event understand natural way using react think great advantage react enforce one way things enabling us conform special needs", "d": "4/2018"}, {"body": "thanks explaining asking jsfiddle example demonstrates pattern nt think really supported hard see example necessitates approach since could rewrite without using render little code changes guessing tho looks like nt demonstrating rendering agnostic bits way components wrapped abstraction also act like normal react components context react tree pushing bit example really breaks react rendering model basically negates optimizations value using react components lot say nt seem like interop strategy ideal components probably isolated render trees rendered react normal react components said really want keep model right api rendering new trees context react hierarchy", "d": "4/2018"}, {"body": "thanks explaining asking jsfiddle example demonstrates pattern nt think really supported hard see example necessitates approach since could rewrite without using render little code changes guessing tho looks like nt demonstrating rendering agnostic bits correct wanted provide minimal example like could provide fleshed example way components wrapped abstraction also act like normal react components context react tree pushing bit example really breaks react rendering model basically negates optimizations value using react components lot say nt seem like interop strategy ideal components probably isolated render trees rendered react normal react components think understand happily sacrifice performance reduce complexity apps big modular largest threat system complexity framework entanglement said really want keep model createportal right api rendering new trees context react hierarchy okay thank try new api however afraid run issue since still need perform unmountmount inside click event", "d": "4/2018"}, {"body": "happily sacrifice performance reduce complexity performance getting little benefit using react way fact actively thwarting react declarative component model using grain seems like built n imperative component system top react really nt intent api provides works ok boundaries react framework much less sides react totally get interop problem hard seems like benefit tho complexity reduction bugs something worked bit differently cases rendering react components react components nt trying fight uphill battle maybe robust example would help ca nt really see way forward click event case intent always use imperative api components", "d": "4/2018"}, {"body": "still need perform unmountmount inside click event reactfriendly way pass different key want force remounting js state mykey handleclick gt thissetstate state gt mykey statemykey render return react unmount mount anything whenever key changes", "d": "4/2018"}, {"body": "gaearon thank input forcing remount changing key solves issue us", "d": "4/2018"}, {"body": "kovensky yep case idea second argument always available possible passing previous props always initialize state passed gdsfp could add necessary check without checking existence also gdsfp return state uninitialized case", "d": "4/2018"}, {"body": "unfortunate using types especially initialization logic end execute twice initial mount first time initial value state given logically fine supposed pure method least", "d": "4/2018"}, {"body": "kovensky quite initial state usually contain empty values filled gdsfp js class foo extends reactcomponent state prevmylist list static getderivedstatefromprops props state propsmylist stateprevmylist return prevmylist propsmylist list propsmylistmap gt dname return null render return thisstatelist", "d": "4/2018"}, {"body": "yep recommend", "d": "4/2018"}, {"body": "however code first call gdsfp state initialised like example yet", "d": "4/2018"}, {"body": "pke provide reproducing case please", "d": "4/2018"}, {"body": "ca nt provide case closed source observations code first slightly correct initial state handed gdsfp empty object ctor defined class gdsfp function called empty add ctor called gdsfp twice reactstrict wrapping correctly initialised", "d": "4/2018"}, {"body": "would really help could reduce minimal example file new issue thanks", "d": "4/2018"}, {"body": "set repo reproduce could nt need figure main project", "d": "4/2018"}, {"body": "found problem react told time console reactrouter styledcomponents nt use new api yet screws everything guess wait catch might good time get rid reactrouter replace something simpler sane repace calling problem goes away everything works", "d": "4/2018"}, {"body": "hmm think issue screw rather might copying onto wrapper components static causes weird behavior similar issue react redux fix packages update dependency equivalent code version aware special method nt copied encourage file issue projects describe problem", "d": "4/2018"}, {"body": "morlay expected behavior", "d": "4/2018"}, {"body": "got thanks", "d": "4/2018"}, {"body": "please see reply", "d": "4/2018"}, {"body": "cool missed issue thanks fast reply", "d": "4/2018"}, {"body": "typescript error react error nt maintain react ts definitions need reach maintainers ts definitions react wait release updated typings react", "d": "4/2018"}, {"body": "inside handler react synthetic event example stopping propagation react hierarchy performance reasons technically implemented event listener document calling nt affect browser event nt prevent reaching document need forbid reaching document could put ref use add dom event listener directly expect hope helps", "d": "4/2018"}, {"body": "thanks reply know inside react synthetic event still somehow weird react ca nt stop propagate event far see attaching event still commonly used like reactclickoutside way issue get resolved gets addressed", "d": "4/2018"}, {"body": "vincentbel react listener registered document well element event originated example explains happening", "d": "4/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "eldeni please share example reproducing issue able reproduce problem example suspect another hoccomponent app causing problem", "d": "4/2018"}, {"body": "use library monkeypatches maybe logging something see need see reproducing example turn warning intentionally tell something wrong need figure wrong otherwise code behave weird way", "d": "4/2018"}, {"body": "eldeni using reacthotloader", "d": "4/2018"}, {"body": "gaearon use never realized manipulates lifecycle methods runtime matter fact internally wraps lifecycle method cause warning removing experiment could get rid warning may problem side would selfclose issue days nobody thanks tyscorp also aweary consolelog thiscomponentwillreceiveprops prints \u0192 wrappedmethod proxiedupdatecall sideeffect", "d": "4/2018"}, {"body": "problem disabled reacthotloader nt help project uses reduxsaga connect gt linkactions saction export default class extends component static proptypes data proptypesarray static defaultprops data null state data thispropsdata static getderivedstatefromprops nextprops prevstate prevstatedata nextpropsdata return null", "d": "4/2018"}, {"body": "oleksandrbudik make sure use latest updates available branches likely using older version copies static methods including new lifecycle wrapping component causing warning newer version skips lifecycle", "d": "4/2018"}, {"body": "since nt appear issue react go ahead close someone provide example reproducing issue without thirdparty libraries monkeypatching lifecycle methods happy reopen", "d": "4/2018"}, {"body": "gaearon upgraded reactredux nt help obvious party lib causing issue need check", "d": "4/2018"}, {"body": "since already discussion going close favor", "d": "4/2018"}, {"body": "js class image extends reactcomponent mapimage reactcreateref onimageload gt consolelog thismapimagenaturalwidth thismapimagenaturalheight componentdidmount thismapimageaddeventlistener thisonimageload componentwillunmount thismapimageremoveeventlistener thisonimageload render return", "d": "4/2018"}, {"body": "kumarranjansingh use want something contradict set state set state show part code", "d": "4/2018"}, {"body": "nt want call render setting state handledropdownchange method", "d": "4/2018"}, {"body": "wrap code", "d": "4/2018"}, {"body": "reconsider structure code js handledropdownchange e gt const centerid etargetvalue thissetstate state gt const activefilter objectassign stateactivefilter centerid centerid return activefilter filteredlist thisfilterdata list statelist activefilter filterdata list activefilter gt let filtereddata list let centerid activefiltercenterid let depid activefilterdepid centerid filtereddata filtereddatafilter info gt thischeckcenter infocenters centerid depid filtereddata filtereddatafilter info gt infodeptid depid return filtereddata", "d": "4/2018"}, {"body": "unnecessary split setting state two operations like use functional form", "d": "4/2018"}, {"body": "react flow typings live flow repo rather react", "d": "4/2018"}, {"body": "builder using webpack gulp grunt share configuration data", "d": "4/2018"}, {"body": "could share minimal code example reproduces reproduce newly created app", "d": "4/2018"}, {"body": "tested old version react reactdom error read link", "d": "4/2018"}, {"body": "close lack information", "d": "4/2018"}, {"body": "close released", "d": "4/2018"}, {"body": "hello issue react work correctly several libraries reactautosuggest reactinputmask try use eventtargetvalue inside onchange handler get undefined nt check value type string methods break eventtarget window", "d": "4/2018"}, {"body": "reproduce jsbin opens", "d": "4/2018"}, {"body": "thanks helpful secondary confirmation take time dig might happening event system however probably wo nt able get later week anyone wants research well", "d": "4/2018"}, {"body": "stripe also seeing bug upgrading elements codebase react two small notes learned debugging jsbin check matched problem issue also occurs document mode slightly reduces set possible causes jsbin bug html panel nt load saved content test open jsbin another browser copypaste html content debugging bit found event handler called expect input element adding event handler node raw dom api browsernative event expected value", "d": "4/2018"}, {"body": "gaearon js true amp amp replayfailedunitofworkwithinvokeguardedcallback allocstashed copywip function allocstashed stashedworkinprogressproperties function copywip objectassign stashedworkinprogressproperties workinprogress", "d": "4/2018"}, {"body": "seems like still quite lot bet need preserve hidden class explicitly write assignments", "d": "4/2018"}, {"body": "hm maybe possible write generic function based type annotations", "d": "4/2018"}, {"body": "gaearon ad hoc confirmation hidden class issue", "d": "4/2018"}, {"body": "forgot actually copy still slow faster", "d": "4/2018"}, {"body": "tried locally handwritten version seems pretty fast", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "tested original example much better thanks", "d": "4/2018"}, {"body": "fixed", "d": "4/2018"}, {"body": "decide case case basis case mapset happy feature set afaik keep forgetting", "d": "4/2018"}, {"body": "fixed", "d": "4/2018"}, {"body": "acdlite main reason stateful", "d": "4/2018"}, {"body": "tried make reproducible case worked close issue managed create reproducible snippet fort case share would good hear new contexts providers safely used without hidden state attached current fiber container thanks great library", "d": "4/2018"}, {"body": "closing favor helpful thanks", "d": "4/2018"}, {"body": "fixed", "d": "4/2018"}, {"body": "still working good story serverside data fetching dubbed suspense going away still wo nt going anywhere also constructor equally bad", "d": "4/2018"}, {"body": "lifecycle method one use server fetch data say redux action xhr given componentwillmount going away componentdidmount nt execute server extra clear never helpful server data fetching since executes synchronously render two passes start fetch another time resolved optimal architecture depend keep using purpose constructor guess suspense api ready preferred solution let wait data client server without rendering twice", "d": "4/2018"}, {"body": "gaearon problem new lifecycle hoc addremove stylesheets components module using cssmodules useable mode js function withstyles styles return function basecomponent class componentwithstyles extends reactcomponent count number move code componentwillmount constructor iv got strange bug styles nt work correctly different styles page layout component different routes move code new lifecycle styles removed return route previous js function withstyles styles return function basecomponent class componentwithstyles extends reactcomponent count number", "d": "4/2018"}, {"body": "keep counter like intended migration strategy nowhere blog post probably recommended way move code side effects like example problems please share reproducing case", "d": "4/2018"}, {"body": "call instead happens call times long lifecycle like constructor possible", "d": "4/2018"}, {"body": "bvaughn stylesuse add styles head", "d": "4/2018"}, {"body": "course move code componentdidmount appears blinking effect hm sounds unexpected talking clientside rendered react adding style really different adding assuming sync rendering since called tick talking server rendering would make sense since nt invoked server guess would mean initially rendered payload would nt include styles get added hydration sorry overlooking something silly nt much experience server rendering", "d": "4/2018"}, {"body": "course move code componentdidmount appears blinking effect please share reproducing example", "d": "4/2018"}, {"body": "gaearon sorry moving code componentwillmount componentdidmount cause blinking effect debugging logging code brings delay problem remains server rendering", "d": "4/2018"}, {"body": "budarin clarify using constructor server rendering mentioned work", "d": "4/2018"}, {"body": "bvaughn understood temporary solution dirty hack removed future", "d": "4/2018"}, {"body": "exactly need server attach stylesheet dom provide complete example discuss", "d": "4/2018"}, {"body": "gaearon server side use calls dispatch behind scene puts styles store collect form critical css moving code constructor cause problems server side problem client side possibly inconsistent count calls use unuse moving code constructor nt know need situation pointed existing problem ask help resolve", "d": "4/2018"}, {"body": "different things client server side helps thanks think best solution would call unconditionally call constructor behind serveronly check longer term may provide separate serveronly hook replace constructor", "d": "4/2018"}, {"body": "gaearon thanks solved problem", "d": "4/2018"}, {"body": "gaearon may ask thread create another one new lifecycle move code componentwillreceiveprops need access instance call method computing next state form state based instance props example js componentwillreceiveprops nextprops nextcontext const computedmatch location path strict exact sensitive nextprops getderivedstatefrompropsis impossible due presence mandatory context property instance declaration moving code generates infinite loop js componentdidupdate prevprops prevstate snapshot const computedmatch location path strict exact sensitive thisprops", "d": "4/2018"}, {"body": "fix infinite loop comparing first argument calling particular props interested changed alternatively move context reading code component one pass context prop would able access static lifecycle", "d": "4/2018"}, {"body": "gaearon unfortunately prop interested check take needed effect suited way move context thanks idea", "d": "4/2018"}, {"body": "gaearon one thing transition new lifecycle moving due need access instance fields methods double render cycle changing props rendering force component render needed mentioned transition guide project lot places call instance methods access instance fields transition degrade performance app rendering", "d": "4/2018"}, {"body": "hard discuss without specific examples primary transition path need change state response new props use cause double rendering reason need access instance variables likely way restructure code need say sure without seeing finally side effects happen sometimes split existing code two methods example seems impossible without making performance slower please share take look", "d": "4/2018"}, {"body": "thanks explanation", "d": "4/2018"}, {"body": "understood temporary solution dirty hack removed future clarify incorrect release blog post states explicitly continue supported version", "d": "4/2018"}, {"body": "seems work fine react ends dom prints warnings nt think react issue encourage see skips attribute somewhere", "d": "4/2018"}, {"body": "ca nt call intentional check cloning like safe said probably throw better error", "d": "4/2018"}, {"body": "pr really needed", "d": "4/2018"}, {"body": "fixed nicolevy", "d": "4/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "4/2018"}, {"body": "seems like duplicate", "d": "4/2018"}, {"body": "similar attributes think likely add oneoff exceptions like", "d": "4/2018"}, {"body": "hey started work input appreciated", "d": "4/2018"}, {"body": "onchange passed undefined null considered acknowledgement silence warning case split render method component use preview component interactive use component preview pass undefined change handler warning shown tell forgot intended way nt quite agree see saying also legitimate case write get made typo notice mine field suddenly readonly really confusing think case typo common intentional use case explaining case could explicitly pass noop function nt anything silence warning", "d": "4/2018"}, {"body": "passed instead linter would catch question warning intended catch typos provide onchange imo specify onchange variable undefined typo acknowledgement alternative could allow keen creating nop every case importing dependency one", "d": "4/2018"}, {"body": "nt know see value null undefined sigil always", "d": "4/2018"}, {"body": "warning functions readonly warning warning intended let know need onchange handler w value passing undefined acknowledging imo property set significant enough vs specifying likewise treated specified warning emitted either case whereas currently cases looking value rather prop passed vs falsy checks imprecise", "d": "4/2018"}, {"body": "linter would catch good linter aware builtin eslint rules catch mistake like also try make assumptions user toolset try warn typos even linter capable catching keen creating nop every case importing dependency one seems like philosophical stance see practical argument dependency literally bytes also low effort type even shorter gives opportunity note reason comment passing falsy value checked attribute trigger warning truthy value look like bug", "d": "4/2018"}, {"body": "maybe would help specific code example render function looks like supervising purecomponent passes without component use render function readonly previews case get warning falsy encounter warning got complicated case default value truthy radio group gotten warning falsy value would alerted issue sooner could something like fix would easy wait nt supposed inline functions case causes rerender even though nothing really changed would need cache first ts const nop gt undefined export function render label placeholder value maxlength error handlechange nop textfieldprops amp partial know bit nitpicky would rather allow use nop blank method someone else team came across would done initially without knowing cause rendering issue", "d": "4/2018"}, {"body": "repro case", "d": "4/2018"}, {"body": "btw another potentially related bug happens remove feature flag override manifests warning maybe change test suite use feature flag people use real bundles nt leave confident", "d": "4/2018"}, {"body": "added failing tests", "d": "4/2018"}, {"body": "fixed", "d": "4/2018"}, {"body": "cheers pr saved us would confusing day", "d": "4/2018"}, {"body": "upgraded react seeing similar error referencing similar area react codebase without null check", "d": "4/2018"}, {"body": "please file new issue reproducing case thanks", "d": "4/2018"}, {"body": "issue hard debug figure error happens production build development build works fine also link says go object generic error decoder link nt offer useful info", "d": "4/2018"}, {"body": "fact link looks weird bug nt offer info something react broken see point way reproduce even production website would helpful", "d": "4/2018"}, {"body": "one possible reason could happen using broken version uglify breaks react bundle example issue try downgrading upgrading uglify going close nt get details far reproduce take another look", "d": "4/2018"}, {"body": "understanding maintain reference detached tree one update removed next update old node get cleared help", "d": "4/2018"}, {"body": "thanks gaearon dcodus verify seeing detached nodes expected gc verify whether actually memory leak profiling memory time performance tab", "d": "4/2018"}, {"body": "detached nodes expected gc quite accurate saying nodes unmounted previous update wo nt gc next update user interacts app eventually detached nodes get gc happens next update rather update caused unmount", "d": "4/2018"}, {"body": "right saying clearer gc eventually assuming update processed meaning nt memory leak since constant number detached nodes get gc application updates", "d": "4/2018"}, {"body": "although nt proof google reading site added month ago google seems ignore mixed case please reconsider", "d": "4/2018"}, {"body": "please file new issue specific information attributes google requires casing thanks", "d": "4/2018"}, {"body": "ran issue trying see achieve thing gather possible component makes use access api outside child render function come something may work make little easier though would really appreciate feedback good practice whatever reason helper component export interface ipropsrunonlifecycle runonmount gt void runonupdate prevprops object gt void runonunmount gt void children jsxelement reactnode export class runonlifecycle extends reactcomponent componentdidupdate prevprops prevstate snapshot thispropsrunonupdate null thispropsrunonupdate prevprops componentdidmount thispropsrunonmount null thispropsrunonmount componentwillunmount thispropsrunonunmount null thispropsrunonunmount render return thispropschildren null wondering going cause headaches line still feels like pretty standard react somewhat hack", "d": "4/2018"}, {"body": "subtle differences might make approach bad idea example class component used refs refs would yet set callback run would suggest using hoc approach instead real downside using hoc sort thing mitigated api", "d": "4/2018"}, {"body": "took approach like react docs people said working well us far", "d": "4/2018"}, {"body": "subtle differences might make approach bad idea example mapelement class component used refs refs would yet set runonmount callback run thanks feedback bvaughn moment using purely kind state proxy component adds removes things ui depending mounted within context tree kind like portals within react component tree actually rendering children dealing refs keep mind need anything interacts refs", "d": "4/2018"}, {"body": "fixed closurecompiler release", "d": "4/2018"}, {"body": "sounds like rather onblur bubbling want support via onfocusout since browsers nt bubble native events react could cause bugs breaking expectations supported yet though various reasons today learned react actually already bubbles blur events unlike browsers makes sad understand issue created", "d": "4/2018"}, {"body": "noticed similar behaviour event sure merits separate issue posting response first happy move comment new issue need reduced test case open console click around bit scenario check one boxes place virtual dom changes consequence event gets lost event bubbles understood aweary correctly currently intended behaviour point view react yes", "d": "4/2018"}, {"body": "sorry following quickly vacation try get soon", "d": "4/2018"}, {"body": "eunikitin happening get bottom", "d": "4/2018"}, {"body": "aguynamedben wrote", "d": "4/2018"}, {"body": "try like ok dont know please whoever explains flow import react react import type node react type props children node", "d": "4/2018"}, {"body": "finally caught long vacation sounds really interesting little surprised gcc nt inlining least functions tried minimal example looks like gcc never inlines methods passed via config object like react despite attempts indicate object never change familiar prepack sounds exciting get get around whatever stopping react", "d": "4/2018"}, {"body": "frehner still experiencing issue latest release", "d": "4/2018"}, {"body": "aweary yup appears still jsfiddle updated use still see behavior previous screenshots", "d": "4/2018"}, {"body": "also hit issue extracted reproduction case larger project put isolated createreactapp demo available trigger event listener creation mousing blue ui square mouse trigger rerender allocate new eventlisteners additionally mouseup mousedown events trigger render additional eventlistener allocations macos", "d": "4/2018"}, {"body": "kevzettler thanks repro sure see leak screenshot nt always seem go back baseline", "d": "4/2018"}, {"body": "gaearon yes baselines garbage collector kicks memory leak critical failure definition memory leak leak allocating additional event listeners expected appears indicated charts frehner themcmurder shared well", "d": "4/2018"}, {"body": "mentioned expected react allocate listener every component render development mode use fake events isolate component code throws browser displays uncaught error message even code call stack accidentally catches similarly makes break exceptions work even though react wrapping components trycatch overhead nt exist production versions", "d": "4/2018"}, {"body": "hey anyone know one contribute wiki", "d": "4/2018"}, {"body": "somebody working pr quiet want take aweary spirosikmd", "d": "4/2018"}, {"body": "hi diegoborda still waiting answer aweary ready merge", "d": "4/2018"}, {"body": "done", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "blog link", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "closing since api exists", "d": "4/2018"}, {"body": "gaearon bug months old still reproduces suggest create another one stackoverflow chances fix", "d": "4/2018"}, {"body": "stackoverflow post mention anything nested call obvious issue however edit answer better clarify closing particular issue expected react inside lifecycle children attached current tree rendered fix use portals instead nested calls another issue refs attaching time nested calls please file new bug reproducing case take look", "d": "4/2018"}, {"body": "essentially htmlreactparser accomplishes however purposes behind intentionally uglyrepetitive dangerouslysetinnerhtml html html procedure actually serve reminder dangeroushacky thing nothing hacky injecting html generated markdown example always wonky name false danger alarms hurt security well second gaearon proposition adding tag would even say long overdue nt mind original proposition extending either", "d": "4/2018"}, {"body": "thanks making react", "d": "4/2018"}, {"body": "thank guys making happen please keep amazing things going guys incredible awesome", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "thank much", "d": "4/2018"}, {"body": "bvaughn mentioned fix picked soon someone publishes new patch version", "d": "4/2018"}, {"body": "published", "d": "4/2018"}, {"body": "guess semver work probably close issue used packagejson pick latest", "d": "4/2018"}, {"body": "great thank", "d": "4/2018"}, {"body": "got issue update fix", "d": "4/2018"}, {"body": "hello erez checkmarx get lot requests customers detect issue part static code analysis tool please correct wrong understand thread solution issue related vulnerability expected near future headsup add detection one coming releases totally agree april clear warning documentation beneficial users", "d": "4/2018"}, {"body": "changing potentially breaking clear better somebody sends pr think take next minor release", "d": "4/2018"}, {"body": "moving towards graduated manner example update documentation make clear dangerous warn console unless whatever enabled future release disable unless set future release disable unless set warn unless csp disables inline styles major release disable set csp disables inline styles something along lines could take fast slow possible might steps necessary given many sites seen github pattern seems reasonable likely break things like tools check password complexity etc", "d": "4/2018"}, {"body": "generally nt use global runtime feature flags like break component ecosystem", "d": "4/2018"}, {"body": "send pr midday monday mechanically pretty simple", "d": "4/2018"}, {"body": "missed deadline give update working clientside complex part actually turns handle serverside rendering trying figure best place put password exception make sure nt impact hydration diffing", "d": "4/2018"}, {"body": "gaearon problem approach nt work input element visible mount ran issue using bootstrap modal want focus first child element attribute modal gets displayed created generic component wraps bootstrap modal export default class modal extends reactcomponent componentdidmount thisdialog shownbsmodal function find autofocus focus thisdialog hiddenbsmodal thispropsoncancelclick thisdialog modal show render const title confirmtext onconfirmclick children thisprops return removed header markup clarity children removed buttons markup clarity email address removed rest markup clarity see ended using dom attribute input field rather nt work problem getting warning invalid dom property mean warning annoying would nice could least disable warning somehow tried searching way disable nt find anything might also better way solve aware", "d": "4/2018"}, {"body": "nt mean delaying page becomes interactive ideally fold critical content become interactive sooner lazy loaded typically fold less important stuff download rehydrate whole point lazy loading make critical stuff interactive sooner", "d": "4/2018"}, {"body": "dalimian possible nt put perf markers app wont able comment try though", "d": "4/2018"}, {"body": "seems closed per", "d": "4/2018"}, {"body": "example mock logic jsx describe popover gt beforeall gt reactdomcreateportal jestfn element node gt return element aftereach gt reactdomcreateportalmockclear render correctly node function gt const component renderercreate button gt popover snaptests looks like jsx jest snapshot exports button popover thoughts", "d": "4/2018"}, {"body": "run issue well really hard figure clue strings sentry reports nonenglish causing problems across major websites using react extension modifying dom lot translators password managers etc totally break react website workaround found right recommended", "d": "4/2018"}, {"body": "workaround solved facebookcom chrome translate works react", "d": "4/2018"}, {"body": "ok works means ca nt use google translate time realize repair errors still without implements key properties everywhere still react complaint keys absents another things another things nt remember well render google translate lost keys", "d": "4/2018"}, {"body": "want help fix please create small reproducing case nt involve extensions manually reproduces might dom take look", "d": "4/2018"}, {"body": "gaearon fritzc original snippet nt involve extensions full page", "d": "4/2018"}, {"body": "involves using google translate asking create reproduction case google translate would dom api calls see exactly causing issue", "d": "4/2018"}, {"body": "nt think anyone answer except google chrome team even sure translate part open source chromium project", "d": "4/2018"}, {"body": "nt think need know internals google translate look dom single word set dom breakpoints tell manipulations necessary reproduce mutation observer help", "d": "4/2018"}, {"body": "ok simply looking dom obvious get changed significantly original \u7121\u9078\u629e translated choice interesting works well react", "d": "4/2018"}, {"body": "right encourage write minimal case codesandbox similar mutations try reproduce problem", "d": "4/2018"}, {"body": "mutation observers nt able replicate way would nt break react well pass experienced person", "d": "4/2018"}, {"body": "used chrome dom breakpoints see google translate hood created minimal reproduction closely emulates replaces text demo source crossbrowser compatibility breaks safari firefox chrome key lines bottom js get text node checked const myel documentqueryselector div gt div gt div childnodes create arbitrary font element replace const fontel documentcreateelement font myelparentelementinsertbefore fontel myel myelparentelementremovechild myel puts dom node state cause next update react throw error ran mutation code demo react changing select checked text instead comment errors thrown declare close get reproduction google translate behavior", "d": "4/2018"}, {"body": "thanks idea inserts tags instead modifying text node probably good reason obvious", "d": "4/2018"}, {"body": "idea venture guess say related incrementally translate large blocks text screen inconsistency browsers bare text nodes handled", "d": "4/2018"}, {"body": "issue react native forced reuse new state variable like const newstate new thissetstate value newstate gt consolelog newstate new nt would const newstate new thissetstate value newstate gt consolelog thisstate old", "d": "4/2018"}, {"body": "event type work applications whosesmile suggested found works better", "d": "4/2018"}, {"body": "problem happens often using situation described issue title change initial values either making uncontrolled empty string even situations nt strings works beginning input everything string counterintuitive like much able use initial values good able distinguish something really defined value like javascript const someobject null someobjecta existent property defined null someobjectb inexistent property returns undefined versus const someobject undefined someobjecta existent property defined undefined someobjectb inexistent property returns undefined", "d": "4/2018"}, {"body": "idhard looked discussion needed clarification regard exactly caught error boundary since documentation nt seem explicitly say errors event handlers nt caught think explanation makes sense feasible track component owns code blew option isolate component triggered error sure would helpful guess would feasible implement key takeaway discussion worthwhile trying move much code event handlers lifecycle methods components possible possible reduce risk triggering error wo nt caught another thing would nice explicitly write documentation errors event handlers dealt error boundaries nt mind adding documentation creating pr gaearon", "d": "4/2018"}, {"body": "since documentation nt seem explicitly say errors event handlers nt caught mzedeler documentation mention explicitly pointed early discussion", "d": "4/2018"}, {"body": "wonderful thanks gnapse", "d": "4/2018"}, {"body": "want events captured errorboundaries always force lifecycle handle class myinput extends component pendingevents new reacteventtolifecycle handleonchange event const onchange thisprops onchange event shouldcomponentupdate return thispendingeventshandleevents render const value onchange otherprops thisprops return note solution needs bit research edge cases eg text inputtextareas current value value write character cursor goes end text time setselectionrange solve case course might issues missed", "d": "4/2018"}, {"body": "use case think ca nt solved well slots createportal gif similar slightly different setup using createportal responsive site move form field app toolbar much higher tree case well really nt want events bubbling back page content definitely want form context go implementation btw slotesque thing using context", "d": "4/2018"}, {"body": "got error react reactdom reacttestrenderer version", "d": "4/2018"}, {"body": "please file new issue reproducing example locking one replies help anyone fix problem bug fix without reproducing example", "d": "4/2018"}, {"body": "update one possible case could get thanks tip", "d": "4/2018"}, {"body": "really hacky thing still solution", "d": "4/2018"}, {"body": "work test repo wanted provide quick update first changed repo name lives also added tests plan adding many come using circleci zapier integrated react prs run tests pr code print report pr temporary issues page stores links pr report circleci job check right tests running firefox chrome circleci box love get integrated browserstack sauce labs nt account feedback suggested direction would much appreciated hoping help provide good proofofconcept even real value automated browser testing works", "d": "4/2018"}, {"body": "component would redownload user data every single reconciliation component tree would stuck waiting component finish downloading every time kovensky necessarily development choice could instance cache request nt need redownload", "d": "4/2018"}, {"body": "exactly suspense please see second part talk", "d": "4/2018"}, {"body": "hello issue trying scrape page using splash forced click event know way bypass without modifying code mentioned", "d": "4/2018"}, {"body": "wuweiweiwu hey sorry catching issues would wonderful", "d": "4/2018"}, {"body": "awesome get started asap definitely reach questions", "d": "4/2018"}, {"body": "case use component using rendertostaticmarkup server render component", "d": "4/2018"}, {"body": "rendering react attributes markup wo nt resolved clientside anyway solved already inheriting implementing error catching implementation calling saferender wrapped implemented components derived", "d": "4/2018"}, {"body": "workaround trycatching render method help error throw render method error occurs deep react tree method react render one special attribute", "d": "4/2018"}, {"body": "true creation components also root cause problem streaming used well moment error happened part component sent already", "d": "4/2018"}, {"body": "aweary question need muted attribute passed video tag allow autoplaying mobile devices progress direction thank", "d": "4/2018"}, {"body": "folks progress issue generally visible takes form pr nt see linked pr updates issue assume progress unclear path forward nt really way saying sync attribute use property nt know adding said logic even good idea", "d": "4/2018"}, {"body": "unclear path forward nt really way saying sync attribute use property nt know adding said logic even good idea jquense think understand point inputs exactly thing probably live value needs specialcased way otherwise prop sets attribute means users need manually access property want control precisely like inputs also fine personally set attribute leaving everything else user perfectly fine imho input implemented", "d": "4/2018"}, {"body": "hesitant change act like want get away specialcased behavior since caused number problems course would likely much less problematic since boolean value nt really way saying sync attribute use property nt know adding said logic even good idea spec solution sets initial muted value reflecting attribute controlled using property nt support many attributes nt actually dom attributes think good argument mirroring api", "d": "4/2018"}, {"body": "want get away specialcased behavior since caused number problems yeah controlling behavior ends causing many headaches would nt want though agree right behavior generally nt support many attributes nt actually dom attributes defaultvalue think good argument mirroring api like idea tho always slippery slope would ssr behavior someone specifies suppose already handle value checked", "d": "4/2018"}, {"body": "like idea tho always slippery slope would ssr behavior someone specifies defaultmuted muted suppose already handle value checked yeah imagine would behavior like defaultvalue ssr rendering attribute provided value", "d": "4/2018"}, {"body": "ya concern valuedefaultvalue special cased codebase sort assuming pattern used inputs probably go see works tho worrying", "d": "4/2018"}, {"body": "assumption one use case handle situation attribute present video first rendered since dynamic behavior per spec think defining boolean attribute must set property easy would good enough hope least", "d": "4/2018"}, {"body": "could easy adding list", "d": "4/2018"}, {"body": "gaearon please look benchmark difference code mostly callable function increased performance", "d": "4/2018"}, {"body": "tiny benchmarks like representative real code performance example prepare reproducing case involves real even small react app also demonstrates stark difference would interesting", "d": "4/2018"}, {"body": "gaearon legitimate reason still keeping around could deprecated least warn using currently warnings imho inherent inconsistency two apis causes certain amount disorientation whole portals api since unstable method used yet used method", "d": "4/2018"}, {"body": "time deprecate want send pr", "d": "4/2018"}, {"body": "nice leave related solved moment real good option cases event behavior workable eg modals", "d": "4/2018"}, {"body": "sure start working", "d": "4/2018"}, {"body": "nt seem like moving forward think makes sense deprecate anyway maybe create pressure solve", "d": "4/2018"}, {"body": "sense gaearon needed move forward sense sebmarkbage proposed additional api solution staled happy throw usecases attempts workaround behavior together help getting push back reactbootstrap afaict ca nt effectively solve issue without ugly whitelist event preventdefault blocker", "d": "4/2018"}, {"body": "record assume currently talking completely killing api since topic name previous discussion suggest kick things actually deprecating via warnings yet keeping api intact later release", "d": "4/2018"}, {"body": "documentation updated use style example still uses take tools libraries updated use correct form would make sense teach users soon possible", "d": "4/2018"}, {"body": "opened add ability least serverrender nonstandard components nonstandard attributes like amp", "d": "4/2018"}, {"body": "running issue app created createreactapp pulling library uses react also using storybook tests eliminated react one copy indicated way figure react thinks second copy loaded", "d": "4/2018"}, {"body": "well full day trialanderror figured second copy coming storybook moment removed everything started working wish react told second copy coming", "d": "4/2018"}, {"body": "resolve issue tried restructure repo move storybook dev dependency hoping prevent second copy loaded unfortunately solve issue created reproducible example contains library one package app another package created createreactapp would really appreciate someone could explain going second copy loaded", "d": "4/2018"}, {"body": "came conclusion wasted hour time working demo demonstrate events work react wanted use property log phase mine mission critical scenario would nice fixed people nt spin wheels debugging future", "d": "4/2018"}, {"body": "use callback instead example js class foo extends reactcomponent componentdidmount thispropsonref render return export default foo js import foo foo class app extends reactcomponent render", "d": "4/2018"}, {"body": "one find documentation methods one available react versions added", "d": "4/2018"}, {"body": "answering turns dom element methods case elements builtin dom element methods used", "d": "4/2018"}, {"body": "feature needed encapsulated html code script separate pure react environment normally needed large enterprise setting nt always control remote content want use jquery easily ca nt believe people nt complain", "d": "4/2018"}, {"body": "nt already happening least running thissetstate componentdidcatch good", "d": "4/2018"}, {"body": "think commented wrong thread delete x upper right comment", "d": "4/2018"}, {"body": "gaearon acdlite seen repro irrelevant thread needs new issue get right one", "d": "4/2018"}, {"body": "also found browser behaves differently sequence emitting composition events oninput events different ime may also behave differently events example native apple keyboard ios emit composition event input event use google keyboard composition event never emitted important implement standard basic thing", "d": "4/2018"}, {"body": "bsonntag thanks making label input siblings worked", "d": "4/2018"}, {"body": "still issue ie edge works nt work nt work nt work order test effectively follow steps using edge go settings gt gt view advanced settings privacy services make sure offer save passwords enabled make sure nt passwords saved codesandboxio domain steps reproduce works go sandbox type username password hit submit see confirmation panel saving passwords refresh page type another username password hit submit see another confirmation panel saving passwords refresh page click first input see list previously used usernames steps reproduce nt work remove previously saved passwords codesandboxio domain go nonworking sandboxes type username password hit submit password confirmation panel refresh page click first input list previously used usernames", "d": "4/2018"}, {"body": "react starts starts listening events top level using single event listener specific reason root listener sit app root node rather document would imo make react selfcontained easier embeddable contexts already document listeners setup time react app initializes", "d": "4/2018"}, {"body": "another application would element serialization say json way without transpilers serialize closures functionprototypebind variables case object function could keep functions prototypes data requires object number prototypes usually finite would work many applications well still possible function get data element though complicated", "d": "4/2018"}, {"body": "welcome open rfc think plausible want support point", "d": "4/2018"}, {"body": "kind news expecting browsers consistent firing events deleted elements think something fix react happy hear suggestions close see issue actionable us want avoid problems removereplace hovered elements hover", "d": "4/2018"}, {"body": "reopening per conversation sophiebits pointed might able fix relying bubbling", "d": "4/2018"}, {"body": "gaearon think throwing warning appropriate since really amounts false alert setting default prop would mask real problem seems like downstream solution upstream problem original elementcomponent gets created garbage immediately get thrown waste resources creating first place never used", "d": "4/2018"}, {"body": "zpao could let know related driving bonkers broken renders note behavior happens windows originally thought electron bug starting think something react parser windows help greatly appreciated note workaround load image tag loads url cdu make gaearon angry", "d": "4/2018"}, {"body": "react nt parser literally passing string gave browser encourage create reproduction case without react ie dom api ask electron support forums", "d": "4/2018"}, {"body": "thanks gaearon continue path", "d": "4/2018"}, {"body": "one compare children enough check", "d": "4/2018"}, {"body": "mind sharing solution seem victim silly stuff", "d": "4/2018"}, {"body": "need react scope use jsx example", "d": "4/2018"}, {"body": "thanks hint works addition still wondering many working boilerplate examples work without import react even though use jsx syntax well something else impacting react needs imported context reactredux", "d": "4/2018"}, {"body": "maybe inject import automatically recommend lead surprises", "d": "4/2018"}, {"body": "well worked surprised thanks help gaeron", "d": "4/2018"}, {"body": "second part talk suspense relevant", "d": "4/2018"}, {"body": "gaearon think proper setup integration tests nonminified nt testing environment close production one possible one side note condition passed function seems true nonminified missing something", "d": "4/2018"}, {"body": "came see vuejs handling quite like approach list modifiers stop prevent capture self passive compose events way like maybe help inspiration issue", "d": "4/2018"}, {"body": "using defaultvalue attribute worked case onblur", "d": "4/2018"}, {"body": "elimisteve could block specific cssonly keylogger example strict imgsrc policy", "d": "4/2018"}, {"body": "redux store could function import generateuid uid const generatestore preloadedstate gt const getuid new generateuid return createstore appreducers preloadedstate compose applymiddleware middlewares middleware unique id store gt next gt action gt actiontype actiontypesgetuniqueid return getuid actionpayload else return next action clientjs const store generatestore serverjs function req res next const store generatestore uidactionjs somewhere component connect hello world every request outcome called using redux access action everywhere", "d": "4/2018"}, {"body": "mentioned future might way optin pure functional components issue follow see progress found issue closed guess point follow along btw option would implemented think would nice could applied global level rather set every function", "d": "4/2018"}, {"body": "simply wrapper around react wondering benefit using vs extending avoid packing extra pounds", "d": "4/2018"}, {"body": "zpao wrong new context api caused object also maybe react component", "d": "4/2018"}, {"body": "using defaultvalue attribute worked case onblur", "d": "4/2018"}, {"body": "agnihotriketan defaultvalue work fine intended uncontrolled inputs using controlled inputs workaround best imo", "d": "4/2018"}, {"body": "per stack overflow comments worked us add elements", "d": "4/2018"}, {"body": "need stateless components react prepared minimal external package reactinstantiablestateless handles", "d": "4/2018"}, {"body": "able reproduce vanilla javascript able throw quick fix wonder similar fix transferred react codebase thrilled attempt guidance possible hoping mentorship tag", "d": "4/2018"}, {"body": "hey well done like humanjs import react component react class human extends component class thirdperson extends component render return third person export default human personjs import react react import human human class person extends human render return person name thisstatename export default person please let know misunderstood concept thanks ps please ignore way naming", "d": "4/2018"}, {"body": "recommendation use inheritance react components many pitfalls disagree recommendation mostly", "d": "4/2018"}, {"body": "henlz issue created somewhere ran well", "d": "4/2018"}, {"body": "hey guys news issue", "d": "4/2018"}, {"body": "sophiebits thank suggestion use issue similar one marcysutton asked using lot vanilla js traversal methods returned null values used test lights green", "d": "4/2018"}, {"body": "related onfocusinonfocusout events contrary tvararu experience using nt call handler neither warning react uses onfocus onblur instead onfocusin onfocusout react events normalized bubble onfocusin onfocusout neededsupported react ended adding event listener manually via ref", "d": "4/2018"}, {"body": "gaearon get perf results latest version react", "d": "4/2018"}, {"body": "fiber react", "d": "4/2018"}, {"body": "alamothe looking shouldcomponentupdate return false particular cases fall back onto reactcomponent purecomponent know way refactor app better way easier mean time optimise known conditions spam updates", "d": "4/2018"}, {"body": "requiring value null must specifically provided absolutely allowed via proptypes use case running callbacks required selectors nt need specific use cases new developers constantly forgetting provide usual callbacks want force uses components make conscious decision include specific callbacks rather someone forgetting props yes hack specific checks via flow splits props validation two places rather unintuitive someone glancing proptypes definitions", "d": "4/2018"}, {"body": "hi landed looking way extend use css js emotion think elegant way defining default styling let say want extend style depending props either drop elegant emotion api define classic react component rendering emotion component mess props use workaround parent emotion component cents idea pass current props function props example idea would pass current component props last argument function prop define alternatively could send current props using spread operator like think would make elegant way transfering props without go whole definition component nt think way maybe smart people tell idea good bad", "d": "4/2018"}, {"body": "fyi effort may get new life due ca nt push along try encourage others thanks", "d": "4/2018"}, {"body": "already newest chrome still facing issue angular", "d": "4/2018"}, {"body": "chrome react", "d": "4/2018"}, {"body": "shame mahmadi said going march comment mahmadi chromiumorg mar fix nt chrome bad chrome rolled starting march tested native events demo website works chrome appreciate following try going phone checking", "d": "4/2018"}, {"body": "really strange working natively even though getting input even received react need investigation exactly sure react attaching handler document element like click handler example natively see input event happening somehow react nt receiving events", "d": "4/2018"}, {"body": "add onblur thishandlechange input", "d": "4/2018"}, {"body": "dahlke solve raised similar question stackoverflow", "d": "4/2018"}, {"body": "prefer using hocs needed order easily manipulate nested components javascript import react react let idx const uuid gt idx export default wrapped gt props gt const id rest props const uniqueid id id return", "d": "4/2018"}, {"body": "sgrove see posted years ago also built player react year issue worked adding lifecycle method componentwillreceiveprops solved issue immediately componentwillreceiveprops thisrefsaudiopause thisrefsaudioload thisrefsaudioplay thissetstate state gt showsoundwave soundwave", "d": "4/2018"}, {"body": "using random prop eg pitfalls performance drain noticeable large form", "d": "4/2018"}, {"body": "kkdatkiran worked thanks", "d": "4/2018"}, {"body": "solution storing seems work js import polyfill reactlifecyclescompat reactlifecyclescompat reactlifecyclescompat class input extends reactpurecomponent static getderivedstatefromprops value return value state onchange event gt const onchange thisprops const value eventtargetvalue thissetstate value gt onchange value render const value thisstate return", "d": "4/2018"}]