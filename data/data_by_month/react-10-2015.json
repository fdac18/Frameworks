[{"title": "inconsistency proptypes contexttypes", "body": "although contexttypes recently document react api still unstable find odd two similar annotations accept react prop validations nt work way proptypes omit proptype still receive property proptypes simply validate properties however contexttypes case receive context set validation contexttype would assume new features would given context automatically passed component similar props however forced explicitly state context component receive benefit certainly understand need validate contexts validation nt needed whats point explicitly request context unintuitive way", "num": "5349", "d": "10/2015"}, {"title": "prohibited component names", "body": "hi list reserved class names issue component named event included eventslist component tried filter list got error reserved names cheers", "num": "5347", "d": "10/2015"}, {"title": "reacterrorutilsinvokeguardedcallback appears work ms edge", "body": "looks like edge nt like fakenode nt attached body append body remove removing listener good obviously production build nt issue handler called directly click event", "num": "5345", "d": "10/2015"}, {"title": "ability call setstate constructor", "body": "design question raised another bug ideal behavior nt support constructor seems better people manually add constructor since current method encourages imperative pattern ca nt used elsewhere component cc sebmarkbage answer", "num": "5342", "d": "10/2015"}, {"title": "ok using flux", "body": "hi everybody started learning react recently often found lost limbo reading flux know concept application architecture develop website react idea use routing express use react rendering view good solution abandon flux reason use flux thanks huy", "num": "5340", "d": "10/2015"}, {"title": "performance issues", "body": "heya upgrading react using conjunction fixed data table seem taken real performance hit see fixed data table changed anything using reactdomrender function instead reactrender upgrading react going", "num": "5338", "d": "10/2015"}, {"title": "support invalid event", "body": "hi wondering invalid event currently supported tried using something like javascript handleinvalid event nt work manually attach event handler actual dom node order get working invalid event actually supported plans supporting", "num": "5337", "d": "10/2015"}, {"title": "checkboxes reacting onchange events dom checked prop provided default", "body": "js import react react export default reactcreateclass getinitialstate function return checkall false mainchange eve thissetstate checkall evetargetchecked subchecked eve consolelog evetargetchecked evetargetchecked consolelog inside else consolelog inside else render return click select deselect sub checkboxes select could alter checkboxes checked attribute provided", "num": "5336", "d": "10/2015"}, {"title": "warn people pass mutated props", "body": "constructor passing super props object differs object equality andor shallow compare original illegal warning reasonable someone assume could extend component modify props without considering ramifications bug wo nt show initial render test show component updates", "num": "5335", "d": "10/2015"}, {"title": "iframe onload event handler called chrome nonhtml documents", "body": "iframe onload event handler called firefox chrome using firefox chrome react load event fired chrome firefox onload event handler called firefox jsfiddle demonstrating issue open firefox observe dialog box appears saveopen file iframe disappears chrome iframe nt disappear tried run code debugger control never goes onload event handler chrome", "num": "5332", "d": "10/2015"}, {"title": "suggestion deprecating jsx", "body": "would like suggest deprecate jsx format pro easy match closing tag eyes fake pro designer friendly really designer still know everything javascript write web page even need know javascript tools build cons encourage ugly deeply embedded code create whole dimension ecosystem javascript every editor need syntax highlighter formatter linter every language compiles javascript might need support jsx definetelytyped better support tsx ts reactdomdiv nt check properties ts", "num": "5325", "d": "10/2015"}, {"title": "fire click event internet exproler windows", "body": "count ca nt count got issue ie windows windows ie move fine", "num": "5324", "d": "10/2015"}, {"title": "react longer works recent versions react", "body": "react wo nt load versions greater react work version time writing sure bug introduced dig root cause follow", "num": "5323", "d": "10/2015"}, {"title": "reactcsstransitiongroup warn children nt provided key attribute", "body": "docs state must provide key attribute children reactcsstransitiongroup even rendering single item react determine children entered left stayed keyattribute mandatory animations function would make sense warn key props missing direct children similarly dynamic children warn missing keys something like child reactcsstransitiongroup unique key prop check render method foo", "num": "5322", "d": "10/2015"}, {"title": "dangerouslysetinnerhtml escapes slashes", "body": "gets turned possible avoid", "num": "5319", "d": "10/2015"}, {"title": "weird components referred", "body": "use react materialui app part code render return name notes playerlistmap function player index return index playername playernotes bind onshowinfo index var player playerlist index consolelog thisrefs thisrefsplayerinfodialogshow thisrefstxtnamesetvalue playername thisrefstxtnotessetvalue playernotes want code generate rows table player list row tapped dialog shows data row two textfield refs txtname txtnotes ca nt referred last lines produce errors pic produced consolelog onshowinfo method added ref random names test", "num": "5318", "d": "10/2015"}, {"title": "select input box combobox gets inconsistent internal state firefox", "body": "using latest firefox given following select banana state updated selected removed apple added banana visual option select box remains apple", "num": "5315", "d": "10/2015"}, {"title": "simplify definition proptypes default values", "body": "given component defined property types also would define default values property propose alternative syntax react could also reasonable default fallback property value defined bool could could strings could empty string required properties shall specify default value", "num": "5314", "d": "10/2015"}, {"title": "reactcurrentowner set constructor call causes false warnings", "body": "set constructor call constructor side effects like flux store dispatch components may get called log warning called warning misleading happened protects calls really happens one component causing side effect constructor leading component getting called nt result warning sure worth fixing something reminded original issue warning message warning setstate update existing state transition within render render methods pure function props state per issue new", "num": "5313", "d": "10/2015"}, {"title": "bugs reactaddonupdate push unshift", "body": "handlers commandpush commandunshift return new values rather let fall loop end also arguments unshift end reverse order unshifted one time rather", "num": "5312", "d": "10/2015"}, {"title": "reactdomserver nt eval java nashorn javascript engine", "body": "release modular split use code instead original results error nashorn support module system possible execute suggested code testing obtained modified use version instead executed latest version java potentially related", "num": "5311", "d": "10/2015"}, {"title": "accept color property link tag", "body": "order use safari pinned size tab icon need something like react nt support property support way handle", "num": "5307", "d": "10/2015"}, {"title": "umbrella new devtools api", "body": "per conversation sebmarkbage would cool react emitted events allowed attached devtools listen relevant events occurring core emitted events could descriptive enough devtools could track whatever internal state wants instance devtool could track perf seeing long various operations taking marked start end operation devtool could emit useful warnings core warnings could rolled devtools modulepackage tracking state internally could avoid routing onlyusefulforwarnings data throughout core anyway following relevant user wants emit custom warnings potentially slow operations executed render users want clear warnings unit testing andor hotreloading users want trackmonitor calls get statistics results gather percomponent statistics like number setstate calls renders users want fail unit tests specific warnings fire like invalid checksum warning user wants render errors using pluggable logging framework", "num": "5306", "d": "10/2015"}, {"title": "issue documentation html entities", "body": "regarding first second creates warning warning child array iterator unique key prop probably good idea manual encouraging syntax yields warning messages another approach", "num": "5305", "d": "10/2015"}, {"title": "dangerouslysetinnerhtml inside textarea", "body": "way see example trying achieve emoji render inside text area way dangerouslysetinnerhtml value text area", "num": "5303", "d": "10/2015"}, {"title": "prevent function called within render", "body": "warning react call setstate within render method check would like add check methods project also trigger rerender expensive issue reactcurrentowner exposed react achieve current solution mind check stack trace lot expensive check would prefer something equivalent code outside react", "num": "5302", "d": "10/2015"}, {"title": "release", "body": "time let nt think anything left open milestone list enough block fixes come take em changelog could probably cleaned little bit maybe organized differently react dom fixed bug events would nt fire old browsers using react development mode fixed bug preventing use closure compiler advanced mode added support attributes elements added support attribute ensured legacy access dom nodes updated rerenders react test utils addon fixed works svg react transition group addon fix bug preventing used timeout value react bower added improve compatibility tooling x cherrypick commits x finalize changelog x ship update fiddles", "num": "5301", "d": "10/2015"}, {"title": "confusing handling within props", "body": "within listed supported htmldomproperty however including anywhere component means react treats custom component dump key value pairs without handling supported htmldom properties like etc came across trying server side rendering third party library expands nt expect react care external library overloading confusing listed valid html property release notes use also treats dom element custom", "num": "5298", "d": "10/2015"}, {"title": "reacttransitiongroup using jquery cause uncaught typeerror read property componentdidleave undefined", "body": "hi please take look adding items please click remove see consolelog cause js handledoneleaving function key var component thisrefs key check thanks", "num": "5296", "d": "10/2015"}, {"title": "text inputs manipulated multiple times unnecessarily dom", "body": "steps reproduce created js bin reproduce problem type console third pane left edit contents one text inputs rightmost pane type console show attribute edited text input updated three times dom unedited text input also updated tested code according reactaddonsperf modified input updated dom updated", "num": "5295", "d": "10/2015"}, {"title": "change owner causes issues shallow rendered tests", "body": "appears change generated causing number shallow rendered tests fail upgrading deepequals fails property simple example component exhibits issue javascript use strict fdescribe componenttest function passes fails function var components componentstester reactcreateclass assertionerror expected typeof type div key null ref null props classname foo children typeof type ul key null ref null props object owner object store owner null store deeply equal typeof type div key null ref null props classname foo children typeof type ul key null ref null props object owner null store owner null store", "num": "5292", "d": "10/2015"}, {"title": "component names displayed proxyclass react tab chrome dev tools", "body": "explicitly define component without specifying component name becomes react tab chrome dev tools running latest react dev tools", "num": "5288", "d": "10/2015"}, {"title": "event failure", "body": "button onclick event text box onchange event invalid later use jquery event bindings native binding compoentdidmount compoentdidupdate", "num": "5285", "d": "10/2015"}, {"title": "show friendly error using testutilssimulate shallow rendering", "body": "simple shallow render component button handler correctly assert properties ca nt get asserting whether button clicked using passed handler work testutils nt throw invariant violation whatever error spy never gets called manually call works expected behavior", "num": "5284", "d": "10/2015"}, {"title": "reactdom includes react", "body": "project uses react reactdom reactbootstrap reactbootstrap requires react peer dependency reactdom includes react child dependency must install react toplevel dependency order reactbootstrap work two copies react try use modal component reactbootstrap get error uncaught error invariant violation addcomponentasrefto reactowner refs might adding ref component created inside component method multiple copies react loaded fix deleting directory nodemodulesreactdomnodemodulesreact maybe reactdom changed react peer dependency instead child dependency", "num": "5282", "d": "10/2015"}, {"title": "make style attribute processing plugin custom attribute handling", "body": "experimenting different way applying styles approach easily applied angular using directive attribute react library choice radium similar example wrap function order apply logic styling suspect opportunity improve modularity react api set custom attribute handlers checkingrunning react processes node attributes current react style attribute processing could done plugin rather behavior hardcoded library make much easier libraries like radium glancing source looks easy implement behavior would glad work submit pr agreed good idea quick suggestion api", "num": "5280", "d": "10/2015"}, {"title": "equivalent reactdom", "body": "web developer using coffeescript used able div span reactdom mycomponent render gt div title span blah blah blah still available somewhere", "num": "5279", "d": "10/2015"}, {"title": "devtools make component search faster", "body": "try use search component name panel captures keystrokes suspect burning cycles filtering list nt available catch remaining keystrokes perhaps could solved web worker send searches receive keystrokes let filtering background return results ui thread thought nt know search implemented certainly missing keystrokes", "num": "5278", "d": "10/2015"}, {"title": "onclick adding handler", "body": "code like babel react dev tools seems onclick prop set correct function check function actually assigned event handler emptyfunction processenvnodeenvproduction set working since upgrading onclick stopped working use r select element react dev tools call handler works", "num": "5277", "d": "10/2015"}, {"title": "assertvalidprops breaks html name mangling", "body": "alternative would work instead html edit could remove checks production sure good idea also file", "num": "5275", "d": "10/2015"}, {"title": "component seen reactelement dom defined server side rendertostring", "body": "trying render simple hello world component server jsx babel compiled js file looks like jsx dom use strict var react require react var reactdom require reactdom var title reactcreateclass displayname title render function render return dom null hello world moduleexports reactcreatefactory title im getting invariant violation error must pass valid reactelement change createfactory createelement get dom defined", "num": "5273", "d": "10/2015"}, {"title": "immutablekeyediterable children", "body": "aware iterable support children timetable supporting keyediterable immutablejs specifically automatically providing keys children sample use case first item would end equivalent support nt roadmap somehow avoid use performance implications write helper function", "num": "5272", "d": "10/2015"}, {"title": "testutils friendly", "body": "testing docs see cjs still way pull testutils directly tried use instead like get error legacy import like get", "num": "5271", "d": "10/2015"}, {"title": "lost ime input call setstate", "body": "hi component like input english text works well input chinesejapanesekorea charaters ime breaks guess since call setstate textchanged seems call jquery directly works well question calling jquery change dom maybe good choice way refresh parts component many thanks", "num": "5270", "d": "10/2015"}, {"title": "failed parse json", "body": "failed parse packagejson data npm err packagejson must actual json javascript", "num": "5269", "d": "10/2015"}, {"title": "cursor jumps end controlled input", "body": "spicyj zpao cursor controlled element jumping end whenever format modify renders code js export default class giftpurchaseform extends component constructor props super props thisstate cardnumber cardnumberchanged event thisstatecardnumber eventtargetvalue thissetstate thisstate render return creditcardparse formatted simply turns number like card number like common usecase things like phonenumbers etc remove call pass cursor nt jump cursor still jumps even pass next value seems modification string renders means middle edits edits modification point string cause cursor jump end react chrome bug seems related line code comment bug fixed pass test even though changed", "num": "5265", "d": "10/2015"}, {"title": "calling unmountcomponentatnode recursively causes weird behavior", "body": "call unmountcomponentatnode recursively tries unmount component multiple times means componentwillunmount called weird often causes inconsistent state exception componentwillunmount fail cause stack overflow test case fails batch nested toplevel unmounts function var outer var inner reactcreateclass render function return componentwillunmount function breaks react reactdomunmountcomponentatnode container var outer reactcreateclass render function return", "num": "5262", "d": "10/2015"}, {"title": "naming reactdomserver misleading", "body": "tl dr think look actually provides two methods result static html later one gives plain html first one gives reactflavored html react quickly inject essentially get static html string understand says server name cases really want use serverside thus name based however think leads people think never use code clientside nt true nature perfectly fine use cases clientside example written lazy loader component renders nonreact static html component comes viewport rendering trick must done ca nt real dom elements inside element contents always seen string nothing ask element important lazy loading trick case allows loading images even javascript disabled addition search engines also get access images although google days support javascript idea deals lazy loading via virtual viewport also importantly using browser start fetching images resources contained within element javascript enabled use case summary server renders static html elements containing nonreactified static html client must render exact static html inside element initial render client start updating dom checking component viewport case javascript disabled still get images resources loaded wo nt lazy loaded think although might also question fact whether static rendering really abstracted dependency finally already received pull request initially attempted remove dependency purely name nt know anyone else gets noise guess quite likely happen naming things hard yet names powerful", "num": "5260", "d": "10/2015"}, {"title": "docs reactlink say note reactlink needed applications used cautiously", "body": "docs reactlink say note reactlink needed applications used cautiously assume onchange handler inputs preferred way update state reactlink et al make pattern bit less boiler plate guess wanted understand note docs start using cheers john", "num": "5259", "d": "10/2015"}, {"title": "react amp firebug playing nicely together", "body": "clear blame one lies yet couple reports react working firebug used seems affect", "num": "5258", "d": "10/2015"}, {"title": "addonsupdate push array based id", "body": "useful wonder best way use use case items indexed want use command way new may added others updated example look combine behavior advice type use case consider another command may needed", "num": "5256", "d": "10/2015"}, {"title": "selected attribute tags rendered correctly", "body": "cause selenium tests fail using getfirstselectedoption find selected item java api seems affect least forward example set selected attribute selected optiontag import react react import reactdom reactdom var app reactcreateclass getinitialstate function return value onchange function event thissetstate value eventtargetvalue render function return b reactdomrender documentgetelementbyid app", "num": "5255", "d": "10/2015"}, {"title": "perf actual react components", "body": "reactperf reactdefaultperf allow profiling react internals reactcompositecomponent really think would useful react start stop style perfing components possibly track methods automatically spit warnings long range uses would many times call shouldcomponentupdate response always returning true might insightful components many times call setstate could compare render cycles track forced renders possibly started work needed closed", "num": "5254", "d": "10/2015"}, {"title": "issue extended array componentprops", "body": "component ctor thispropsgroupby function undefinded behavior correct problem actually strange", "num": "5251", "d": "10/2015"}, {"title": "reuse component issue deal api json string different multiple files", "body": "issue reuse list component using json api load data string different multiple files example reactjs code import react react import reactdom reactdom export default class list extends reactcomponent constructor props super props thisstate data title paragraph componentdidmount getjson thispropssource function data var collection data thissetstate data collection bind render var results thisstatedata return resultsmap function result return resultposttitle resultpostexcerpt reactdomrender documentgetelementbyid list plz advise thx", "num": "5249", "d": "10/2015"}, {"title": "optimizing reconciliation unchanged dom nodes", "body": "hi sure bug feature make issue anyway seems react tries optimize reconciliation early stopping reconciliation react element reference changed however property check fails normal dom nodes practice means subtree diffed although element nt changed resulting poor performance huge subtrees tried change check little bit tried run following test application got massive performance improvement javascript import react react import render reactdom const range n gt arrayapply null length n map numbercall number const staticlist range map idx gt class app extends reactcomponent constructor props super props thisstate counter increment thissetstate counter thisstatecounter decrement thissetstate counter thisstatecounter render const counter thisstate return counter value counter staticlist render documentgetelementbyid app think optimization make sense unwanted effects unaware understood right react elements immutable strict equality check enough internalinstance yes know could solved using custom component class searching", "num": "5248", "d": "10/2015"}, {"title": "attributes support", "body": "trying use video element attributes nt work trying renders html", "num": "5246", "d": "10/2015"}, {"title": "createelement fails children node array react elements", "body": "seems silently fails using reactdom renders fine missing something", "num": "5245", "d": "10/2015"}, {"title": "change dependencies support version", "body": "set project run says required support nt installed installed nt want use reason changed file dependencies line compile comandroidsupport compile comandroidsupport works usually normal android projects nt reactnative project could find comandroidsupport error log seems bit difference says required awesomeproject app unspecified gt comfacebookreact could change dependencies support version comfacebookreact words change dependencies support version version read related issues work read page android setup dose work surely installed android support repository android support library google repository update another reason ask question day google releases support want use package still requires could make project run perfectly thank update reboot mac things changed still works put resource found matches given name android widgetmaterialbuttoncolored", "num": "5244", "d": "10/2015"}, {"title": "provide reactaddonsjs distributions", "body": "additional file distribution package multipage app could pages need without addons need addons well currently means add reactwithaddons pages avoid loading reactjs portion twice", "num": "5243", "d": "10/2015"}, {"title": "provide unminified production distribution", "body": "would nice unminified release distributions example useful web application frameworks minification runtime", "num": "5242", "d": "10/2015"}, {"title": "", "body": "example animation react fork react base fiddle jsx run another animation animation throw uncaught typeerror please try run alternately link example", "num": "5240", "d": "10/2015"}, {"title": "bugs documentcreateelement rendering", "body": "setting type textarea nt throw setting dir null div nt add attribute setting dir auto textarea throws", "num": "5238", "d": "10/2015"}, {"title": "dangerouslysetinnerhtml escaping raw svg server", "body": "hi created following component accepts raw svg string transforms react element component works however server svg escaped import react proptypes component react export default class svg extends component static proptypes svg proptypesstringisrequired render const svg thisprops return browser console get error react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server", "num": "5232", "d": "10/2015"}, {"title": "events doesnt work", "body": "anything make clickevent work met problem every onclick event fired click happened android webview device problem thx youre help", "num": "5229", "d": "10/2015"}, {"title": "rendertostring stateless function", "body": "possible currently getting warning amp error renderrender component may accidentally tried render element whose type function nt react component warning nt set props property react element instead specify correct value initially creating element typeerror ca nt add property context object extensible object object reactcompositecomponentmixinmountcomponent object object wrapper mountcomponent reactserverrenderingtransactionmixinperform objectrendertostring let test props gt test reactrendertostring test", "num": "5228", "d": "10/2015"}, {"title": "upgrade nothing renders", "body": "hi update version want use premade component requires spent hour trying debug nothing renders tried components worked nt render either googled found need require reactdom reactdomrender nt help either render methods components called possible", "num": "5227", "d": "10/2015"}, {"title": "reactcsstransitiongroup transition wrapped around select multiple", "body": "sure happening multiple select child within reactcsstransitiongroup transition skipped completely anyone else issue", "num": "5226", "d": "10/2015"}, {"title": "issue reactdom reactaddonstestutils", "body": "hey bit trouble component tests since upgrading react particular since moving away using conjunction tests simulate clicks failing example test works uses deprecated js import react reactaddons invoke supplied function clicked function const onclick sinonspy const actionlink utility function inlined clarity const div documentcreateelement div reactrender actionlink div const element divchildren reactaddonstestutilssimulateclick element assert onclickcalled works great supplied function gets called tests pass however soon use test fails interesting combination besides passing case mentioned works example fails idea could causing problem", "num": "5225", "d": "10/2015"}, {"title": "dangerouslysetinnerhtml generates different markup client server", "body": "following code warning environments run code webpack bundle", "num": "5223", "d": "10/2015"}, {"title": "call render thisprops", "body": "would nice regular elements could get render api pure components imho nicer would also make easy move pure regular component declarations encourages thinking props immutable", "num": "5222", "d": "10/2015"}, {"title": "npm validation package install", "body": "react app folder name sports inside sports folder node modules inside node modules folder football folder react folder go football folder npm install react installing react makes application fail prevent command npm install react successful anyway right script prevent process happen work npm install react sports folder already npm packages use make automatically validated npm commands", "num": "5221", "d": "10/2015"}, {"title": "proposal nt bail reconciliation pure functions", "body": "might terrible idea throwing wall react core reconciliation principle changed nt bother reconciling understanding two goals good heuristic unlikely two different components yield similar dom one stateful component instance ca nt morph another component type however makes pure function components pretty much pain hot reload class components currently ca nt swap react bail reconciliation destroy state dom result undermines hot reloading experience crucial way keep resorting workarounds like insanely complex proxies interesting thing note pure function components longer applies stateless instances right even react bail reconciling different stateless component would weird morphing instances would probably less efficient development live hand making hot reloading easy simple tools beneficial maintaining complex solutions hard people depend infra wait upgrades maybe suggesting something crazy sure certainly important consequences outside hot reloading performance changes example transition js const button children gt children const toggle children gt children currently resets internal state proposed change would merely changing two stateless components per proposal enough bail reconciliation think", "num": "5219", "d": "10/2015"}, {"title": "return null stateless fn component nt throw error using shallow renderer", "body": "basic react application return null false inside stateless function component throws error using shallow renderer error thrown everything works expected consistent behavior error received returning inside stateless fn component using reactdom render method found returned component instance may forgotten define render returned nullfalse stateless component tried render element whose type function nt react component allowing would really great error message mentioned guess purpose", "num": "5218", "d": "10/2015"}, {"title": "plans extracting proptypes checks react", "body": "could useful variable checks like function arguments", "num": "5215", "d": "10/2015"}, {"title": "mountwrapper calls input select textarea include listeners property", "body": "per mountwrapper calls input select textarea include listeners property wrapperstate avoid changing hidden class assignment made would also better free function trying get away oo core anyway", "num": "5212", "d": "10/2015"}, {"title": "update existing input compoent value reactjs", "body": "problem posted stackoverflow answer maybe issue react please see maybe show right way solve type problems", "num": "5208", "d": "10/2015"}, {"title": "unable unittest react component", "body": "trying write unit test component using jest tried got error issue react jest", "num": "5207", "d": "10/2015"}, {"title": "getelementbyid testutils renderintodocument", "body": "writing karma tests since nt actually render may find component id", "num": "5204", "d": "10/2015"}, {"title": "please add events onfocusin amp onfocusout", "body": "subj", "num": "5202", "d": "10/2015"}, {"title": "keymirror module found error", "body": "hi using tutorial works version version require reactlibkeymirror longer works updated code use require keymirror todo example also returning find module keymirror", "num": "5201", "d": "10/2015"}, {"title": "gitter channel", "body": "know guys irc channel guys gitter channel", "num": "5200", "d": "10/2015"}, {"title": "react performance bound functions", "body": "abstracting components sometimes find necessary bind function parameter passing child component example list counters want bind increment prop increment appropriate counter always returns new function even though inccount referentially equal every time bind get new function also wouldnt make sense entirely rewrite counter accept incatindex index seems crazy create kind helper component anyways thought put would amazing help performance way perhaps nonnative way accomplish following specifially react", "num": "5197", "d": "10/2015"}, {"title": "read property componentdidleave undefined", "body": "trying get info react docs nt see anything similar getting error console everytime item deleted collection read property componentdidleave undefined using anywhere idea", "num": "5196", "d": "10/2015"}, {"title": "npm install fails windows npm", "body": "built master webstorm npm failed error fbjsscriptsnodecheckdevenginesjs assertionerror current npm version supported development expected satisfy commenting semversatisfies block line allowed build proceed", "num": "5194", "d": "10/2015"}, {"title": "dominating reactperfprintdom printwasted", "body": "believe safari hack seeing get control even elements nt updated rerendered change necessary dom also causing weird interactions reactrafbatching forked working fine fast interactions cause errors attempting run example printdom output", "num": "5189", "d": "10/2015"}, {"title": "avoid error developing external component", "body": "developing external component let say link project process need package reflect changes folder dependencies however peerdependences suppose bring project linking package however using link whole directory including project builds includes packages times begins affect component using causes error also may help understand happening problem appears one error message usual package installation bring error supposed develop external component project time", "num": "5188", "d": "10/2015"}, {"title": "bower reactdom uncaught referenceerror reactdom defined", "body": "installing reactdom adding globally html get referenceerror reactdom isnt defined", "num": "5186", "d": "10/2015"}, {"title": "reactjest mocking issue keymirror", "body": "ran issue testing jest amp npm ultimately realized since npm installs everything siblings packages react depends still get automatically mocked therefore break example error like looking file referenced file using create eventconstants since mocked return undefined thus causing error might part bigger problem jest supporting sure issue live repo immediately react could depend fbjs use keymirror implementation", "num": "5183", "d": "10/2015"}, {"title": "confused performant way key usage list fixed count", "body": "hi searched lots still confused best way get maximum performance dom operations also cpu memory usage lot assumptions would like ask please list always fixed count items lets say illustrate example list stream new elements frequently get pushed old elements removed list sample render list like example bellow react remove dom first item append new one element list unique id insert elements react remove divs appends divs q example react create destroy new component everytime push remove item maybe consumes cpu removing first div appending new one may less expensive dom operations next example render list like react remove first div update text content divs id index element list always first element q example react reuse component instead destroying creating new one everytime push remove item maybe consumes less cpu first example updating context div may expensive dom operations previous example nt know best way handle honest even sure reacts really scare browser internals image list amount elements maybe option prefered huge list elements option prefered im saying nonsense c also guess depend content div content divs always option like noop option remove append new div every time right thanks advance sorry asking", "num": "5182", "d": "10/2015"}, {"title": "double import css file closed", "body": "traditional kind issue nt know could considered traditional issue normally would turn stack overflow less oddity nt occur stumbled upon setup server side rendering webpack express babel webpack dev middleware basically setup right dev specific generates webpack resources memory express server react router place facilitate routing history api frontend basically express backend render serverside components provide backend routing frontend react app hook backend rendered components hook necessary events clientbased routing routes defined backend using node support modules default included babel hook need hook want share jsx components define frontend prerender certain routes backend seo came across something weird components import css file webpack loader import styletag page routing defined simplicity sake app welcome faq following import statement app faq welcome get following error babel syntaxerror usersmobinnidocumentsworkicappsktfrontendappstylescomponentwelcomescss unexpected token welcome color purple parserppraise parserppunexpected parserppparseexpratom parserparseexpratom parserppparseexprsubscripts parserppparsemaybeunary parserppparseexprops parserppparsemaybeconditional parserppparsemaybeassign parserppparseexpression parserppparsestatement parserparsestatement parserppparsetoplevel parserparse objectparse objectexportsdefault everything works perfectly babel parse everything remove import statement one subroutes welcome faq bundle perfectly webpack never complained running babelloader babel compile jsx js introduced hook able import frontend components backend started going haywire hoping maybe someone could explain happens know github issues nt place ask questions reiterate nt know issue", "num": "5181", "d": "10/2015"}, {"title": "data attribute working html elements custom component", "body": "hello create component try generated html find datatestid parent datatestid child root element mycomponent ca nt find may data attribute custom component maped root element thank", "num": "5180", "d": "10/2015"}, {"title": "typeerror read property touppercase undefined case instead component defined", "body": "happens meteor however almost positive versions react sure could check", "num": "5177", "d": "10/2015"}, {"title": "defaultchecked nt render check attribute second load", "body": "hi got component wo nt check radio go view id second time started list component reactrouter index site click view button element radio checked return list go another element checked anymore inspect component react developer tool radio defaultcheckedtrue property javascript import react react import connect reactredux class licenseradios extends reactcomponent buildradios let licenses activevalue thisprops render return thisbuildradios export default licenseradios happen thank", "num": "5173", "d": "10/2015"}, {"title": "enqueuecallback invariant specifyidentify actual object failure message", "body": "oddly enough two examples equal thought would js windowaddeventlistener resize thisforceupdatebind throws error windowaddeventlistener resize gt thisforceupdate works fine error follows assuming function assuming optional callback would expect code typeof check defined check change check submit pr", "num": "5172", "d": "10/2015"}, {"title": "graphql react compatibility", "body": "related every time try use graphql react together face problem graphql returns nonexisted fields react works since people gon na use react graphql think nice way handle case mb nice way hacky deal right missing something", "num": "5171", "d": "10/2015"}, {"title": "support attributes reactdom", "body": "two properties required showing subtitles video element currently nt support react attributes subtitle kind required better add different type track two add supported list nt need use render tracks", "num": "5169", "d": "10/2015"}, {"title": "invariant violation objects valid react child meant render collection children use array instead wrap object using createfragment object", "body": "component render function everything renders fine however clicking element receive following error change inside map function everything works expected", "num": "5168", "d": "10/2015"}, {"title": "react addons minified version nt testutils", "body": "include reactwithaddons available globally include minified version", "num": "5163", "d": "10/2015"}, {"title": "reactcsstransitiongroup unexpected behavior values", "body": "javascript function createtransitiontimeoutpropvalidator transitiontype var timeoutpropname transition transitiontype timeout var enabledpropname transition transitiontype return function props transition enabled props enabledpropname timeout duration provided props timeoutpropname return new error timeoutpropname wasnt supplied reactcsstransitiongroup cause unreliable animations wont supported future version react see information returning error saying value supplied value supplied checks type number late catch already succeded something like would better javascript function createtransitiontimeoutpropvalidator transitiontype var timeoutpropname transition transitiontype timeout var enabledpropname transition transitiontype return function props transition enabled props enabledpropname timeout duration provided props timeoutpropname undefined return new error timeoutpropname wasnt supplied reactcsstransitiongroup cause unreliable animations wont supported future version react see information else typeof props timeoutpropname number return new error timeoutpropname must number milliseconds", "num": "5162", "d": "10/2015"}, {"title": "reactdom nt published bower", "body": "", "num": "5161", "d": "10/2015"}, {"title": "bower distribution include nondeprecated rendertostring", "body": "corner cases within clientside application requires functionality deprecated favor unfortunately bower distribution include way reference", "num": "5159", "d": "10/2015"}, {"title": "use reactdom react", "body": "hi try upgrade packages support react reactdom understanding right want support without warnings cant support anymore without asking people workaround like aliasing webpack config right missing something", "num": "5155", "d": "10/2015"}, {"title": "jsx listeners broken react android lte nodeenvdevelopment", "body": "still quite new react guess bug react framework introduced seems like listeners attached jsx broken native android browser android lte compiling code nodeenv development everything works fine nodeenv production compilation tracked related reacterrorutils development mode guards events source code simply remove part code compiling react app listeners starts working guess intentional instead bug reproduce problem android lte code works eg chrome browser using precompiled getting started lib hello react", "num": "5153", "d": "10/2015"}, {"title": "support invalid event within form elements", "body": "invalid event fired submittable element checked nt satisfy constraints ref", "num": "5152", "d": "10/2015"}, {"title": "reactmount cache gets repopulated unmounting nodes", "body": "problem master repro slightly elaborate case crashes without new poison error unmount remount tree keys", "num": "5151", "d": "10/2015"}, {"title": "reactdefaultpreftestjs randomly fails", "body": "hello everybody relatively new project think ran issue running grunt test recently cloned copy master branch getting failed test every without touching part code error found count noop update waste happens expect summary instances tobe error message expecting instances randomly returns", "num": "5149", "d": "10/2015"}, {"title": "reactchildrenmap nt traverse stated docs", "body": "according docs however use function example something like html username reactchildrenmap thispropschildren finds elements inside misunderstood docs bug", "num": "5148", "d": "10/2015"}, {"title": "best define proptype accepting component prop", "body": "given contrived example best definition const componenttype proptypesoneoftype proptypesshape render proptypesfuncisrequired reactcreateclass reactcomponent better way describe proptypesfunc stateless function others const selector reactcreateclass", "num": "5143", "d": "10/2015"}, {"title": "react migration error", "body": "got next error migrated version exports related next string doc change code", "num": "5139", "d": "10/2015"}, {"title": "optimization breaks older browsers discussion symbols reactelementfromobject api", "body": "see associated discussion around pr nt expect merged due loader issues recap optimization requires brittle knowledge internal react values namely breaks older browsers unless developer globally polyfills polyfilled automatically babel user code polyfilled react library causes fail worse bug occurs older browsers nt implement symbol meaning many devs wo nt catch right away work fine ff chrome latest safari hard issue fix without globally polyfilling symbol giving use babel could automatically part enabling optimisation loganfsmyth better idea api function would nothing ensures using equal one used nt necessary validation caught later thoughts", "num": "5138", "d": "10/2015"}, {"title": "select value outputs selected selected option", "body": "rendering select list selected item manner render html looks like reason part output question rather anything else use capybara test app upgrading react try get value select field returning breaking large amount tests traced difference html react outputting outputting", "num": "5136", "d": "10/2015"}, {"title": "component onclick alert error invariant violation setstate", "body": "getting following error message uncaught error invariant violation setstate update existing state transition within render render methods pure function props state fix", "num": "5135", "d": "10/2015"}, {"title": "get standalone build js file reactdomserver", "body": "serverside rendering reactjsnet seeing warning upgrading library react reactjsnet uses directly ie use nodejs ca nt simply npm module within library imagine noderails situation build js file containing reactdomserver webpackbrowserify bundle", "num": "5134", "d": "10/2015"}, {"title": "react nt work defaultvalue select element", "body": "see regression ie code working fine wrong watched source code reactjs think problem", "num": "5133", "d": "10/2015"}, {"title": "building grunt build ends error", "body": "hi problem trying build react using installation manual running ends immediately windows running creates modules build folder dont know friend mine issue reason trying build react adding custom svg elements attributes thanks", "num": "5132", "d": "10/2015"}, {"title": "react ref callback sometimes gives null", "body": "expected behavior logs last two logged apart componentwillupdate componentdidupdate js class app extends reactcomponent constructor super thisstate settimeout gt thissetstate render return behavior master", "num": "5131", "d": "10/2015"}, {"title": "findrendereddomcomponentwithtag ca nt search html element", "body": "hello trying test react component renders element component test findrendereddomcomponentwithtag locate tags exist unable find element probably means dom unexpectedly mutated repeatable demo", "num": "5128", "d": "10/2015"}, {"title": "reactdomrender vs reactrender callback", "body": "ran strange problem transitioning react use promisified api internally application various reasons need handle mounted instance element big deal get handle instance react finished nondeterministic render renderer service return new promise function resolve reject reactrender reactelement node function resolve someone using renderer service return renderer element somenode function mountedelement update able swap implementations without thought right well apparently getting error message correlating help wiki scraped app looking invalid usage refs nt also ca nt see case one react page unless shenanigans caused including browser removed checked case problem loading react browserify packagejson", "num": "5122", "d": "10/2015"}, {"title": "page messed facebookgithubioreacthtmljsxhtml", "body": "know post best since weeks layout looks broken google chrome linux screenshot", "num": "5121", "d": "10/2015"}, {"title": "causes css issues", "body": "realized react replaces empty elements pretty unexpected discovered saw interesting production bug consider html set visible would expect two fields still separated margin case generated markup look something like html unexpected know guide said plans nothing status given last releases wanted bring attention", "num": "5119", "d": "10/2015"}, {"title": "object even though using class property initializers", "body": "used class property initializers get around annoying within method however react looks like props object javascript export default class test extends component constructor props context super props context whateverhandler e gt used instance object looks like children object someprop true render return actually either bind within handler bind constructor level feel like actually wrong", "num": "5118", "d": "10/2015"}, {"title": "update readme", "body": "references remain readme thanks kudos fixing fast", "num": "5117", "d": "10/2015"}, {"title": "downloads page link", "body": "use script tags directly npm use reactjs reactdomjs tutorial shows blog post download links main downloads page", "num": "5115", "d": "10/2015"}, {"title": "injectidoperations undefined", "body": "upgraded today receiving error using browserify code looks like", "num": "5112", "d": "10/2015"}, {"title": "reactcsstransitiongroup invariant violation multiple copies react error", "body": "hello react reactdom reactcsstransitiongroup addon installed using npm compiling using babel webpack code mostly copied jsx import react react import reactdom reactdom import reactcsstransitiongroup reactaddonscsstransitiongroup var todolist reactcreateclass getinitialstate function return items hello world click handleadd function var newitems thisstateitemsconcat prompt enter text thissetstate items newitems handleremove function var newitems thisstateitems newitemssplice thissetstate items newitems render function var items thisstateitemsmap function item return bind return reactdomrender documentgetelementbyid app produces error output bundle appear multiple copies react using error nt present noticed nt require react maybe cause", "num": "5110", "d": "10/2015"}, {"title": "starter kit creating react components", "body": "could helpful sample project would centralize single place react best practices build component something simple like example custom input field stateless stateful also could excellent starting point providing migration steps actual code rather bullets document like happened release additionally could evolve something like integration nodejs tooling linting eslint transpiling babel package management bundling webpack jspm small testing infrastructure etc publishing yeoman generator disclaimer issue react rather proposal better supporting react development", "num": "5108", "d": "10/2015"}, {"title": "push tag github", "body": "currently absent consequentially releases page still shows latest", "num": "5104", "d": "10/2015"}, {"title": "update changelogmd", "body": "congratulations new version would possible update reflect changes cheers", "num": "5103", "d": "10/2015"}, {"title": "componentdidupdate infinite loop better error message", "body": "caused infinite loop calling thissetstate componentdidupdate warning received maximum call stack size exceeded stack showed react code never product code result super hard time consuming track thoughts detecting bad behavior somehow giving nicer error message", "num": "5097", "d": "10/2015"}, {"title": "legacy props dom node nt updated rerender", "body": "prod mode would fix though", "num": "5095", "d": "10/2015"}, {"title": "ontouchstart event null touches", "body": "event comes ontouchstart handler null field touches eventnativeeventtouches field bug design feature", "num": "5092", "d": "10/2015"}, {"title": "thisrefs giving empty logging refs empty componentdidmount", "body": "code componentdidmount render code jsx gettablecontent function var tablecontent dialogbox var e thisstatedata var status thisstatedata e requeststatus status else thisstatedata e requeststatus status closed dialogboxpush askdjgasjk tablecontentpush return tablecontent tablecontent dialogbox dialogbox render function var content thisgettablecontent var page thisgetpage consolelog consolelog thisstate return request status content dialogbox problem", "num": "5091", "d": "10/2015"}, {"title": "custom element ca nt render independently", "body": "also possible specify component sets children attribute components child nodes independently example related superset might another motivation reconsider wanted", "num": "5090", "d": "10/2015"}, {"title": "custom elements prop gets coerced string", "body": "hello react custom tags rendered fine example would render since process migrating saw renders like set jsx property instead render attribute custom tag afraid intended behavior intended behavior please close issue give documentation tried find something related last hours", "num": "5088", "d": "10/2015"}, {"title": "rendering single node multiple places safe", "body": "want place widget multiple places dom seen code wonder safe mess react internals works minimal example want make stacked tables implementation like table placed twice placed times responsive mode stacked table row displayed keyvalue table turning table tablestacked table set combo using media query show either table stacked table set", "num": "5087", "d": "10/2015"}, {"title": "dynamic styles working", "body": "reason dynamic part component get updated dom following component error span get proper styling input tag know getinputstyle return necessary boxshadow however dom input element style attribute appear event happens", "num": "5086", "d": "10/2015"}, {"title": "feature request provide isoptional proptypes", "body": "would useful member negate use case const thinglist things gt thingsmap thing gt thingname thinglistproptypes things proptypesarrayof proptypesshape name proptypesstringisrequired isrequired const whatever things title gt title whateverproptypes things thinglistproptypesthingsisoptional title proptypesnode property required conditionally renders passed reuses proptype makes optional would alleviate need make separate variable everything referenced", "num": "5080", "d": "10/2015"}, {"title": "link reactdom cdn", "body": "version reactdom tutorial used tutorial console outputs error follow link", "num": "5079", "d": "10/2015"}, {"title": "use semvar", "body": "versioning scheme actually quite childish doesnt comply industry standard majorminorpatch major break previous libraries use minor adds new functionalityfeatures patch something broken indicates still development anything change time yet people already using product production relying heavily send message end users care compatibility issues using semantic versioning nodejs finally moved real semantic versioning iojs merged clearly explains backward compatability issues different versioning", "num": "5077", "d": "10/2015"}, {"title": "broke", "body": "function nt quite working anymore upgrading import reacttestutils reactaddonstestutils const definition const spinner reacttestutilsrenderintodocument definition line fails reacttestutilsfindrendereddomcomponentwithclass spinner uispinner error stack looks something like", "num": "5076", "d": "10/2015"}, {"title": "thisrefs returning element specific components", "body": "sure cause pattern yet components causing return following object within components fine however edit see bottom post possible cause post whole object necessary snippet component componentdidmount function consolelog thisrefsnumber consolelog thisrefslabel render function typing noticed using custom component setting ref maybe problem could bug assigning ref custom component type note works correctly albeit warning", "num": "5074", "d": "10/2015"}, {"title": "dom nesting warning confusing whitespace text general", "body": "user puts textnode whitespace illegal location warning complains element wrap text including whitespace span confusing new users since present code introduction tag implementation detail react fix warning better align code user looking", "num": "5071", "d": "10/2015"}, {"title": "order guaranteed reactcreatefragment", "body": "according react docs seems assumption maps javascript guarantee order keys afaik true see stackoverflow question could lead crossbrowser issues createfragment", "num": "5070", "d": "10/2015"}, {"title": "error synthetic event dispatch", "body": "", "num": "5069", "d": "10/2015"}, {"title": "tbody children remove error", "body": "found obscure problem rerendering tbody smaller amount children minimal example reproduce select rows press apply get table rows select lesser amount rows press apply get fix remove spaces table render line sure real bug woul nice mentioned error message", "num": "5068", "d": "10/2015"}, {"title": "proptypes metadata", "body": "great proptypes property gave vision expectations would allow easily generating documentation without parsing code easier allows flexibility like reusing proptype shapes etc also helps test automation coverage reports also related note method proptypes would allow better error messages documentation coverage report output static analysis error messages eg flow expression result react core started writing library realized tools like flow require use react proptypes would nonbreaking change think adds moderate amount value", "num": "5067", "d": "10/2015"}, {"title": "dynamic elements div textarea", "body": "trying render dynamic element using props element type text component worked older versions react however nt example getting invariant violation supply pass children using reactdom reactrouter isomorphic better way handle please let know", "num": "5064", "d": "10/2015"}, {"title": "react fails render svg children edgeie", "body": "gist illustrates issue work expected rendering red circle browsers run script phantomjs assuming page hosted however throws error error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser usually due forgetting using tables nesting tags like using nonsvg elements parent try inspecting child nodes element react id fails insert circle", "num": "5061", "d": "10/2015"}, {"title": "refusing install", "body": "anyone today facing problem gettin react installed dependency node v npm v", "num": "5060", "d": "10/2015"}, {"title": "component nt unmount componentwillunmount returns false", "body": "implementing function returns value component nt unmount could nt find reference behaviour documentation bug design design documented", "num": "5059", "d": "10/2015"}, {"title": "traverse react components including dom components without testutilsfindallinrenderedtree", "body": "react longer give ability traverse already rendered components inside root component testutilsfindallinrenderedtree dom components excluded better practice going components inside root component", "num": "5058", "d": "10/2015"}, {"title": "incorrect reactdom package bower", "body": "tried following pick reactdom however said version available poking around github yielded repo called reactdom appears linked bower guessing nt right library dependency installation story going look like bower", "num": "5054", "d": "10/2015"}, {"title": "componentwasmountedcomponentwasupdated formerly componentdiddisplay", "body": "proposal new lifecycle fires eventloop returned reconciliation started effectively give nt block visual output could good place set timers subscriptions etc", "num": "5053", "d": "10/2015"}, {"title": "react webcomponents", "body": "see lot questions blog posts discussions around none actually official statement facebook could clarify whether going implement specs future also quite github issues around subject like enable rendering shadow roots allow rendering document fragment track upcoming dom technology upgrades proof concept shadow dom support support custom dom elements amp attributes templates add naive custom element support add support future custom elements etc nevertheless opensource projects allows aware like seems reconciliation inevitable thus part spec might need change order widely accepted among opensource community browser vendors wrapping components importing good including html pages importing less defining new markup interact way native html elements allowing extend existing native html elements giving lifecycle methods already possible even though xhtmllike syntax transpiles javascript ultimately becomes html hard cases even impossible polyfilled reason using current browser support adopting conventions even inline styles backed javascript objects remains viable alternative still different really pointless without data binding twoway data binding slow polyfill slow also twoway data binding code complexity fact dependencies components bigger complexity grows opposed unidirectional data flow oneway data flow immutable data structures potential scale highly performant especially think largescale applications complex interactions thousands entities even though opensource community looking end developer experience matters drives adoption doubt standards place therefore question strategy sebmarkbage thoughts", "num": "5052", "d": "10/2015"}, {"title": "linkedstatemixin default value link state", "body": "using default values set property since properties initialization time ca nt derive dynamically ie api call would possibility second parameter default value added way code could supported jsx assume mixin applied class foo extends reactcomponent componentdidmount settimeout gt thissetstate defaultval asyncdefault render return actual patch quite trivial however sure create new reactlink every change regardless linked value actually existing someone familiar react probably fill point diff param string key state key update note may want use keyof using google closure compiler advanced mode param defaultvalue default value use case thisstate key undefined return reactlink reactlink instance linking state linkstate function key linkstate function key defaultvalue return new reactlink thisstate key undefined thisstate key thisstate key defaultvalue reactstatesetterscreatestatekeysetter key sure future plans might interesting definitely wrap class like", "num": "5051", "d": "10/2015"}, {"title": "components able render arrays nodes", "body": "last two weeks encountered problem wanting return arrays nodes component rendering two times building tree rendering flat list node children level building table rows rendering two table rows one piece data cases hacky work arounds since component held ui state node children rows finding components returning single node limiting lead head scratching workarounds try unroll logic read issues related hope two concrete cases help reconsider loosening component principles one component one dom node since reality cases case", "num": "5050", "d": "10/2015"}, {"title": "default lifecycle methods reactcomponent", "body": "small api detail would make sense implement default empty lifecycle methods base reactcomponent class would allow homogenous implementations far super calls concerned example following throw due missing implementation parent class however overloading class missing super call might introduce bugs got think maybe safer always put supercall discovered possible heriting base class", "num": "5047", "d": "10/2015"}, {"title": "invariant violation setenabled toggle event listening worker thread", "body": "trying create unit test simple react view using testutils following react old know jsdom mocha nodejs view javascript var react require react var studentnameview reactcreateclass moduleexports studentnameview current attempt unit test javascript var sinon require sinon var expect require chai expect var jsdom require jsdom var react var testutils var view describe student name view function unfortunately unit test fails error error invariant violation setenabled toggle event listening worker thread likely bug framework please report immediately invariant objectmergesetenabled reactreconciletransactioneventsuppressioninitialize reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactcomponentmixinmountcomponentintonode object objectrendernewrootcomponent objectreactmountrendercomponent objectrendercomponent objectreacttestutilsrenderintodocument context test trying learn write unit tests react components something wrong indeed react bug mentioned first error related", "num": "5046", "d": "10/2015"}, {"title": "problems rendering material design lite components", "body": "trying implement simple login page using react google material design lite mdl framework come across strange thing mdl input floating label nt work rendered using react code var login reactcreateclass try use thing directly html works fine ps works fine mean animation colored line appears text box onfocus think something synthetic event system implemented react fiddled around javascript found bit stuff native keydown onfocus events among others similar thing happening elements like expanding text field nt checked sure react mdl break many components mdl framework synthetic event system way work around get working safe assume react mdl incompatible", "num": "5044", "d": "10/2015"}, {"title": "testutilssimulateclick nt bubble window document", "body": "possibly dupe test javascript import react react import testutils reactaddonstestutils class testelement extends reactcomponent render return describe foo gt bar gt var element testutilsrenderintodocument logs thing click handlers never called something wrong thanks advance", "num": "5043", "d": "10/2015"}, {"title": "onscroll never fires", "body": "trying ca nt seem get working onwheel fires normally onscroll firing dunno missing something bug thanks", "num": "5042", "d": "10/2015"}, {"title": "becomes undefined called onclick inside class extends reactcomponent", "body": "something similar code snippet javascript class mybutton extends component comment specifies tap method got called button onclick got error basically told undefined error gone declare class using reactcreateclass intentional thank advance", "num": "5040", "d": "10/2015"}, {"title": "misleading error messages presence unnecessary", "body": "porting nonjsx react code eg coffeescript jsx forgetting remove unnecessary calls following warnings errors issued seemingly unrelated root cause renderrender component may accidentally tried render element whose type function nt react component warning nt set props property react element instead specify correct value initially creating element typeerror ca nt add property context object extensible reactcompositecomponentmixinmountcomponent wrapper mountcomponent objectreactreconcilermountcomponent mountcomponentintonode reactreconciletransactionmixinperform batchedmountcomponentintonode reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectbatchedupdates objectreactmountrendernewrootcomponent repro source originally noted google many potential related issues show", "num": "5039", "d": "10/2015"}, {"title": "syntheticevents lose original property values ie clientx amp clienty", "body": "gist also tried using avail seen referenced multiple times properties null ie also worth noting client xy properties eventnativeevent also set majority clicks return events correct values small sample abnormally return", "num": "5036", "d": "10/2015"}, {"title": "bug ref nt show", "body": "setting element nt show class js constructor props super props statement fires get error", "num": "5033", "d": "10/2015"}, {"title": "errors could helpful", "body": "example error bottom see file file mainjsx renders root ui ui big obviously pointed root ui helpful great error pointed specific part render tree happening go wild goose chase", "num": "5031", "d": "10/2015"}, {"title": "css property lost rerendering image url inside adjacent property", "body": "css property shorthanded many various ways inlining multiple styles including property react seems optimize rerender example define style like initial render returns style form change state cause rerender style format changed seems break changing state url inside property also defining initial render return expected style however changing url results rendering style without example demo", "num": "5030", "d": "10/2015"}, {"title": "reacttransitiongroup inprogress transitions interruptible like css transitions", "body": "remove child calls callback nt call calls callback may intended behavior way css transitions behave least modern browsers know toggle opacity every second div never finishes going first second transition rather gets interrupted one second new transition back begins repo reproduce issue run look console see component leaving gets held components finish entering entered messages never appear components leave finish entering like spec csslike behavior internally keeps track whether component appearing entering leaving component removed entering appearing state set leaving called immediately component added back leaving state set entering called immediately calls callback action taken unless component appearing state calls callback action taken unless component entering state calls callback action taken unless component leaving state", "num": "5027", "d": "10/2015"}, {"title": "react virtual dom performance", "body": "found website comparing performance virtual dom implementations different libraries like uix citojs bobril deku others screenshot benchmarks libraries lower score better performance seems react highest score lowest performance infernojs lowest score highest performance benchmarks run way react use infernojs vdom implementation increase performance", "num": "5024", "d": "10/2015"}, {"body": "issue react particular website global react global build umd build existence makes switch amd mode instead exporting global calls use case injecting react thirdparty website", "d": "10/2015"}, {"body": "create ui chrome extension", "d": "10/2015"}, {"body": "dylanpiercey benefits component passed props explicitly passed owner clear data component ismight read context variables passed implicitly thus easy way seeing variables component potentially accessing contexttypes provides visibility developer props come directly ownerparent component whereas context come almost anywhere props easy get right direct ancestor whereas context indirect thus easier screw easy ancestor somewhere variable name collision provides incompatible implementations particular context variable allows us react core see context variables going utilized allows internal optimizations context super tricky optimize hints open paths optimizations future see context variables updated rerender components nt read variables components never want read context variables props component likely read props nt concern perhaps ways could solved like reactdatatracker proposal contexttypes made sense time maybe still", "d": "10/2015"}, {"body": "jimfb thanks response think performance optimizations one thing hard time swallowing contexts harder track realistically least libraries use context people name space context makes easy enough search name space also typically contexts come top level component somewhere tracked pretty easily seems like react forcing tooling case simply think optional proptypes thought important remember context using comes may document validate form contexttypes however truthfully nt help track source easily anyway seems add boilerplate common case", "d": "10/2015"}, {"body": "please provide jsfiddlerepro could nt reproduce may misunderstood something", "d": "10/2015"}, {"body": "hi quickly pasted code fiddle precise eventslist component containing text field filtering list renders collection event compent filtered issue comes event component error disapears use name component rails application", "d": "10/2015"}, {"body": "still reproduce error thing think component overriding native object nt happening", "d": "10/2015"}, {"body": "almost definitely overriding especially rails env basically every component becomes global least box may want look module system variables nt leak file", "d": "10/2015"}, {"body": "oh answer root question reserved component names", "d": "10/2015"}, {"body": "great thanks", "d": "10/2015"}, {"body": "assuming duplicate cc spicyj", "d": "10/2015"}, {"body": "correct apologies searched obviously well enough however issue actually appending fakenode body using native event type assume intent based comments help development get better devtools integration simulating real browser event", "d": "10/2015"}, {"body": "maybe left node attached body forever could work would nt ideal constantly inserting removing event also would nt ideal either probably worse think long get benefits fine could test build master make sure things working edge would awesome", "d": "10/2015"}, {"body": "working edge sufferance yes fix works fine", "d": "10/2015"}, {"body": "thanks testing timgardner", "d": "10/2015"}, {"body": "talked sebastian agreed probably pattern never want support cases calling constructor antipattern intended story future use property initializers land go away leave issue open another day two case people want continue discussion", "d": "10/2015"}, {"body": "exists escape hatch", "d": "10/2015"}, {"body": "agree nt supported constructor triggers different component besides one constructed believe valid use cases might happen firing action creator could provide workaround seems like reason currently prints warning check interprets existence reactcurrentowner mean render method currently executing nt strictly true test wrote illustrate mean", "d": "10/2015"}, {"body": "dan file concern error message legitimacy calling constructor wonder gaearon would consider antipattern code first discovered warningmessage wrong general seems like huge code smell creatingrendering component side effects components little skeptical use case would want fire action creator within constructor specific use case example mind", "d": "10/2015"}, {"body": "think ca nt think use case better solution nt move seem little weird external triggered inside constructor see conceptually two separate phases component lifecycle go ahead update print helpful warning message thanks", "d": "10/2015"}, {"body": "even componentwillmount antipattern another scenario callbacks parent componentwillmount may reach ref ref uninitialized causes kinds strange artifacts better move didmount sideeffects change state due component rendered even antipattern may break scheduling etc", "d": "10/2015"}, {"body": "think valid edge cases want react fire callback every time component receives props since get called initial render accomplish also need fire callback inside wo nt nt called server example project called relaysink allows create relay container fires callback whenever receives new fragment temporary team case way pass relay data redux store another example project called reactrxcomponent creates observable sequence updates implementation could improved essentially works realize edge cases seem perfectly valid see causes problems working working available nt relevant server anyway", "d": "10/2015"}, {"body": "though could wrong maybe sufficient cases", "d": "10/2015"}, {"body": "totally cool use flux general questions great", "d": "10/2015"}, {"body": "iamdustan thanks could nt said better yes totally ok use react without flux yes please use sites like stackoverflow usage questions since use github issues track bugs react core", "d": "10/2015"}, {"body": "thank much", "d": "10/2015"}, {"body": "without info nt think tell going nt heard complaints people using fb might want bit debugging work folks working fdt going close get something concrete go reopen", "d": "10/2015"}, {"body": "nt see list yes would good support browser events would like submit pr", "d": "10/2015"}, {"body": "added recently part release", "d": "10/2015"}, {"body": "property forces checkbox provided value controlled input need change update get behavior expecting need use uncontrolled input would recommend use controlled inputs", "d": "10/2015"}, {"body": "jimfb shallow comparison suffice deep equality check two objects needed", "d": "10/2015"}, {"body": "think shallow fine deep equality difficultexpensive cycles note check dev mode surround logic block", "d": "10/2015"}, {"body": "example still really complicated suspecting error somewhere code since onload works jsfiddle simplify create minimal test case post link new fiddle", "d": "10/2015"}, {"body": "better simulate thing change file see behavior using html document work correctly appears chrome nt firing load event initiating file download unclear behavior actually correct anything", "d": "10/2015"}, {"body": "thanks zpao jimfb created new jsfiddle using zpao mentioned open jsfiddle firefox see alert chrome little bit use case trying create component display src file iframe rendered browser eg pdf files file ca nt rendered browser user downloadopen file third party program iframe disappear", "d": "10/2015"}, {"body": "aware nt reddit grabs popcorn", "d": "10/2015"}, {"body": "nt like jsx nt use easy", "d": "10/2015"}, {"body": "observed substantial increases developer happinessproductivity jsx believe benefits outweigh downsides extending javascript jsx optional free use pure preference going close bug since deprecating jsx something likely foreseeable future feel free continue discussion", "d": "10/2015"}, {"body": "seeing issue use reactdom", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "cc zpao spicyj seems bad", "d": "10/2015"}, {"body": "fix incoming worth noting spicyj reminded issue dev mode", "d": "10/2015"}, {"body": "cause issues make change around defineproperty usage nt resulted issues let us know find", "d": "10/2015"}, {"body": "react loadsworks versions including latest starts breaking versions follow time dig bit deeper", "d": "10/2015"}, {"body": "think least part issue changed check ability use defineproperty explicitly supports simple use defineproperty throws trying set getter previously trycatch used getter treating right way simplified code removed getter almost certainly causing issue though perhaps another", "d": "10/2015"}, {"body": "sure confused javascript string escape character string contains single slash string contains two characters believe found bug react please provide simple testcase jsfiddle demonstrates issue investigate otherwise please note use github issues track bugs react core usage questions better addressed sites", "d": "10/2015"}, {"body": "right thank escape slashes contained inside mixpanel javascript api integration code order place within", "d": "10/2015"}, {"body": "nt think enough information us debug keep mind try use github issues track bugs react usage questions better answered stackoverflow believe bug react core please provide simplified testcasejsfiddle demonstrates issue dig", "d": "10/2015"}, {"body": "found solution change onshowinfo nt know", "d": "10/2015"}, {"body": "sounds like maybe nt binding functions properly something sounds like usage question better addressed sites believe bug react core let us know please provide simplified jsfiddle demonstrates issue", "d": "10/2015"}, {"body": "binding probably issue timing nt know dialog component looks like probably render root calls reactdomrender probably show resulting ref resolution timed quite right nt exist end event loop works might able take advantage callback render takes thread callback show eg", "d": "10/2015"}, {"body": "thanks zpao totally get", "d": "10/2015"}, {"body": "appear problem safari chrome os x exist firefox windows note using screenreader get results using two different screenreaders windows firefox", "d": "10/2015"}, {"body": "confirmed problem firefox os x well someone visually confirmed value appears correct apple accessibility api reflecting updated value", "d": "10/2015"}, {"body": "elaborate mean accessibility api seeing wrong value issue screen reader verbally reading wrong value cc spicyj maybe screen reader looking attribute instead property", "d": "10/2015"}, {"body": "fiddle sanity spicyj convenience", "d": "10/2015"}, {"body": "thanks looking fiddles nt work super well able fork modify provided part believe forgot mention reset button reset value without interacting component screen reader still reads previously selected option even though firebug shows first option selected posted twitter ideally firefox accessibility engineer take look provide diagnosis", "d": "10/2015"}, {"body": "fiddle calls setstate within render rules updated fiddle based latest description thinking bug react bug firefox still entirely clear best reproduce issue see value supplied accessibility api", "d": "10/2015"}, {"body": "thanks forgot put callback going see one firefox accessibility team take look provide insight", "d": "10/2015"}, {"body": "nt understand steps would need reproduce bug point view reset button nt appear anything matter select banana apple combo box shifttab reset button press spacebar value still selected combobox tab forward pressing arrow confirms combobox thinks value selected last still selected tab combobox selectapple shifttab reset press spacebar understand correctly reset banana tab forward combo box result apple still selected even keyboard interaction nothing accessibility apis would think would work expected keyboard focus banana time press reset nt even without nvda virtual mode play accessibility apis reflect selected nt actively change selection widget manipulated javascript either react code nt set keyboard focus select element case firefox combobox widget part accessibility apis react properly react trying", "d": "10/2015"}, {"body": "hi marco thanks taking look select banana press reset value return apple experience using nvda jaws ff windows voiceover using ff os x selected attribute moves apple reset button pressed screenreaders continue read banana", "d": "10/2015"}, {"body": "point screen reaers see selection still last focused one keyboard focus even without screen reader keyboard focus show last selected one example bananas revert apple", "d": "10/2015"}, {"body": "confirm internal state internal state firefox combobox appears inconsistent value set javascript inconsistent visually displayed appears bug firefox independent screen readers also confirm nt matter use attributes properties inconsistency firefox appears persistent also confirm combobox behavior differs user expectations given visually rendered realistically though looking like bug firefox nt see anything actionable end unless someone sees workaround", "d": "10/2015"}, {"body": "perhaps someone maybe zpao ping appropriate person mozilla", "d": "10/2015"}, {"body": "feel free file bug preferably testcase attached product core component widgets cc marcoz wo nt one fixing bug provide input necessary help colleagues", "d": "10/2015"}, {"body": "ok found workaround appears setting insufficient setting work fiddle pure speculation based zero knowledge firefox code leads believesuspect firefox trying fancy bail change value unchanged cached value incorrect thus erroneously bail filed bug mozilla though nt time follow closely anyway potential workaround goodfirstbug", "d": "10/2015"}, {"body": "jimfb thanks looking click reset press tab focus combobox use arrow keys select banana use shifttab go back reset button press spacebar press button activate hard reset point screenreader still reads banana press tab go back combobox press arrow observe combobox value went apple candy without passing banana move options", "d": "10/2015"}, {"body": "ezufelt think minor differences observe observe possibly ff latest possibly screen reader either way think description sufficient actionable might want put additional info bugzilla report", "d": "10/2015"}, {"body": "ultimately looks like boils firefox bug nt affect react sure much react somebody comes along wants pick let make sure anything start firefox like chrome others nt commit visual change enter pressed however chrome pops options new view ca nt dismiss without committing canceling ca nt get stuck inconsistent visual state goal probably fire change event every key stroke simulating event stream would look like interacting mouse nt select every intermediate value thanks everybody report tracking getting bug filed bugzilla", "d": "10/2015"}, {"body": "proptypes mostly legacy maintenance mode replaced tools like flow guess nt going change zpao decide issue closed", "d": "10/2015"}, {"body": "users want put flow top react", "d": "10/2015"}, {"body": "pke nt want use flow options use another static analysis type checking tool like typescript javascript programmers done long time go without typechecks check proptypes manually components constructor componentwillreceiveprops write proptype validators react ideally library andor share validators others may also find valuable continue using proptypes asis since nt getting rid immediate future though likely way tools like flow start become complete", "d": "10/2015"}, {"body": "thanks tips think already typescript variant try", "d": "10/2015"}, {"body": "good first bug diff include unit test verify nt regress future", "d": "10/2015"}, {"body": "correct behavior warn different message nt warn even call constructor", "d": "10/2015"}, {"body": "currently think setstate ignored ie noop invoked constructor assuming keep behavior would display different error message tracking correct behavior", "d": "10/2015"}, {"body": "looks like places react interprets mean render method currently executing quite true though gaearon points current owner also set component initialization would good way solve add separate module called reactcurrentrender something keeps track whether render method currently executed", "d": "10/2015"}, {"body": "acdlite many hope trying get rid core yeah module sounds like good approach nt think actually makes situation worse cc spicyj ideas", "d": "10/2015"}, {"body": "todo list document outlining uses reactcurrentowner alternatives want replace basically iscurrentlyrendering set used warnings", "d": "10/2015"}, {"body": "reactcurrentowner subsequently used string refs nothing else eventually deprecate string refs gone completely", "d": "10/2015"}, {"body": "also splice merge return nextvalue", "d": "10/2015"}, {"body": "yep sounds like another reason include rendertostring reactdom also causing problems testing jsfiddle clojurescript bower distribution etc", "d": "10/2015"}, {"body": "added part", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "instance devtool could track perf seeing long various operations taking marked start end operation remember somebody trying call flux store dispatches problem react batched calls actual work performed api provided accurate measurements way track actual work associated calls particular period", "d": "10/2015"}, {"body": "number approaches presented yet another everything jsx assuming first second demonstrate dynamic content js first second yes warning ideal actually little surprised warning cc spicyj goal demonstrate begin solve specific issue entities dynamic content little code possible ok warning simple code snippets gets point across without explain things", "d": "10/2015"}, {"body": "zpao sorry would nt warning", "d": "10/2015"}, {"body": "text text yes renders things thought warning keys looked arrays type something since nt actually need keys different types looks like warned meh", "d": "10/2015"}, {"body": "please use gh issues bug reports setting nt make sense whether react since current value kept property dom element inner content serves initial value demo also nt render html maybe want instead", "d": "10/2015"}, {"body": "sounds like really good use case new devtools api support", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "good catch got closed started making list", "d": "10/2015"}, {"body": "update fiddles whatnot soon mean time go forth", "d": "10/2015"}, {"body": "means something html element inheriting another element part custom elements web components spec see discussion think right move library either remove prop though could risky valid use dom use prefix know nt reusing prop valid use dom run risk using example making mean something special specific library nt awesome run risk fwiw", "d": "10/2015"}, {"body": "since rest overlaps issue going close", "d": "10/2015"}, {"body": "see nt aware web components spec read issue thanks", "d": "10/2015"}, {"body": "seeing thing interesting cc spicyj could something changed unwrapping special dom components", "d": "10/2015"}, {"body": "ah yes enqueueing force update component would nt run twice already updated call reactdominputupdatewrapper directly forceupdateifmounted happen twice sure simplest fix least nt make practical", "d": "10/2015"}, {"body": "updates unedited elements impact performance js bin steps perhaps nt many elements application issue ran interestingly example slower even though perf shows one dom update", "d": "10/2015"}, {"body": "sure something wrong example perfectly responsive", "d": "10/2015"}, {"body": "huh could browser specific issue believe using firefox seeing render times every keystroke", "d": "10/2015"}, {"body": "looks like introduced call seems cause spurious dom manipulations components call methods part code spicyj idea removed", "d": "10/2015"}, {"body": "seeing similar issues shallow rendering current messy sorry workaround javascript reacttestutilsjs var noopinternalcomponent function element var type elementtypename elementtype var children noopinternalchildren elementpropschildren var props assign elementprops children children thisrenderedoutput assign element type props thiscurrentelement element var noopinternalchildren function children arrayisarray children return childrenmap noopinternalchild else children object children return noopinternalchild children return children var noopinternalchild function child var props childprops amp amp childpropschildren assign childprops children noopinternalchildren childpropschildren childprops return assign child owner null props let know helps version currently breaks jest tests happy work submit pr", "d": "10/2015"}, {"body": "thank much tremendous help solved problem test case still failed large number complex tests iterating tests passing add updated version", "d": "10/2015"}, {"body": "updated workaround works tests varying complexity interested see passes tests well javascript var noopinternalcomponent function element var type elementtypename elementtype var props elementpropschildren propschildren noopinternalchildren elementpropschildren var props assign elementprops props thisrenderedoutput assign element type type props props thiscurrentelement element var noopinternalchildren function children arrayisarray children return childrenmap noopinternalchild else children object children return noopinternalchild children return children var noopinternalchild function child child null child undefined return typeof child string return child arrayisarray child return childmap noopinternalchild var props childprops amp amp childpropschildren assign childprops children noopinternalchildren childpropschildren childprops return assign child owner null props props", "d": "10/2015"}, {"body": "awesome nt mind trying happens use earlier", "d": "10/2015"}, {"body": "much cleaner thanks guess head much javascript var noopinternalcomponent function element var type elementtypename elementtype var props elementpropschildren propschildren noopinternalchildren elementpropschildren var props assign elementprops props thisrenderedoutput assign element type type props props thiscurrentelement element var noopinternalchildren function children arrayisarray children return childrenmap noopinternalchildren else children object children return noopinternalchild children return children var noopinternalchild function child var props childprops amp amp childpropschildren assign childprops children noopinternalchildren childpropschildren childprops return assign child owner null props props", "d": "10/2015"}, {"body": "explicitly define displayname component depend compiling toolchain default need specify using babel though may cases nt handled", "d": "10/2015"}, {"body": "colleague installed babelpluginreactdisplayname shows actual component name", "d": "10/2015"}, {"body": "provide test case expected happen actually happened otherwise ca nt determine bug react nothing go thanks", "d": "10/2015"}, {"body": "use react android developer simulation using genymotiongenymotion android simulator free version used download test following code normal use change event triggered created liguoxin created ligx moduleexports function var react require react var valuemixin require jryjwidgetsvaluemixin return reactcreateclass mixins valuemixin getdefaultprops function return type text placeholder unit data text getinitialstate function return value disabled thispropsdisabled render function var classname uinn ubimg umara thispropsiconclass var value thisgetvalue later changed code uses jquery event binding program operating normally created liguoxin created ligx moduleexports function var react require react var valuemixin require jryjwidgetsvaluemixin return reactcreateclass mixins valuemixin bindchange function var thisrefstextcontainer change function e mehandlechange e componentdidmount function thisbindchange componentdidupdate function thisbindchange getdefaultprops function return type text placeholder unit data text getinitialstate function return value disabled thispropsdisabled render function var classname uinn ubimg umara thispropsiconclass var value thisgetvalue valuemixin code created ligx moduleexports function return getvalue function return thisstatevalue handlechange function arg var oldvalue thisgetvalue var newvalue argtargetvalue var thisprocessvalue newvalue thisprocessvalue newvalue oldvalue setvalue function value thishandlechange target value value", "d": "10/2015"}, {"body": "looks like likely issue fix going ship happen next day", "d": "10/2015"}, {"body": "date interaction supposed shallow renderer days cc spicyj use shallow renderer nt working real rendered tree especially nt look like work remember props rendered output react element component instance test case seems written yes expected", "d": "10/2015"}, {"body": "expected probably give better error message changing issue title reflect", "d": "10/2015"}, {"body": "anything help nt contributed react yet investing heavily incompany knowledge point assert love help", "d": "10/2015"}, {"body": "also submit pr react website could clarify documentation", "d": "10/2015"}, {"body": "docs directory markdown files turn website page also edit github button top links straight reacttestutilsjs file could add invariant makes sure reactisvalidelement returns false passedin node", "d": "10/2015"}, {"body": "reactdom includes react child dependency far understand yeah peer dependency cc zpao dependencies child dependencies simply result unfortunately resolves version issues peer dependency preferable regular dependency wrong careful avoid multiple installations", "d": "10/2015"}, {"body": "nt know cause react installed reactdom nodemodulesreactdomnodemodulesreact also nodemodulesreact ca nt find way reproduce", "d": "10/2015"}, {"body": "happen quite stealthily updatingetc ran issue recently reopen really seems peer dependency", "d": "10/2015"}, {"body": "reason direct dependency first place intend npm peerdependencies cover exact problem avoid duplications modules built around module like react reactdom saying seems nt reason reactdom include react direct dependency", "d": "10/2015"}, {"body": "probably peerdep nt remember put regular dep addons react peerdep", "d": "10/2015"}, {"body": "ah nevermind thought could easily swap react reactdom without understanding moved changed webpack config everything cool", "d": "10/2015"}, {"body": "could report devtools project thanks", "d": "10/2015"}, {"body": "oops sorry zpao looks like already aware", "d": "10/2015"}, {"body": "give complete standalone test case nt working nt reports working exclusively dev tools showing right thing", "d": "10/2015"}, {"body": "luciofranco could provide testcasejsfiddle demonstrates issue", "d": "10/2015"}, {"body": "zpao jimfb seems fact error react thanks quick responses", "d": "10/2015"}, {"body": "correct approach indeed seems like bug want submit pr cc zpao spicyj", "d": "10/2015"}, {"body": "pretty sure works", "d": "10/2015"}, {"body": "sounds like need require whatever dom nothing officially support want work whatever provided also really nt export factories nt compatible others decide use createlement", "d": "10/2015"}, {"body": "closing since dom thing made us", "d": "10/2015"}, {"body": "thank response", "d": "10/2015"}, {"body": "curious could make sense immutablejs alternative function returns regular objectmap instead seems like could used performance optimization", "d": "10/2015"}, {"body": "well always go converts plain old array quite bit typing also requires assign props hand opposed automatically picking keys map also meant using native maps sort brought yields warning using maps children yet fully supported experimental feature might removed convert sequence iterable keyed reactelements instead", "d": "10/2015"}, {"body": "update found reading bit needed pull dependency packagejson like tests import works fine sorry confusion question future reference browser friendly pure driven example planned biggest gripe w react community nodecentric cjsfirst instead build frontend apps", "d": "10/2015"}, {"body": "btw try submit snippet jsfiddle seems nt support jsx yet key code sorry live demo check", "d": "10/2015"}, {"body": "probably use base live demo", "d": "10/2015"}, {"body": "seems works well ime real component simple guess somewhere wrong cause problem let check thanks time", "d": "10/2015"}, {"body": "found root cause thank much", "d": "10/2015"}, {"body": "see error", "d": "10/2015"}, {"body": "type input field browser makes operations like knows translate cursor position according operation reassign value externally like two ops way restore cursor position operations nt enough information translate cursor way want", "d": "10/2015"}, {"body": "yeah ca nt really anything better set dom node manually", "d": "10/2015"}, {"body": "thanks detailed writeup get coming naming think unlikely change short term flesh direction heading multiple renderers thirdparty rendering see end", "d": "10/2015"}, {"body": "guess good enough know guess active immediately first heard changes wouldbe better time point nt lazy loader well tested form", "d": "10/2015"}, {"body": "assumption good succinct way explain reason advise caution reactlink downside hiding twoway binding becomes really easy get stuck hardertodiagnose behavior likely move support reactlink core soon move user land", "d": "10/2015"}, {"body": "thanks quick answer basically advised hides actually going developer also thanks heads reactlink moving core", "d": "10/2015"}, {"body": "naive change use setattribute instead guess browser differences might create problems also performance differences", "d": "10/2015"}, {"body": "correct behavior change property attribute attribute indicates initially selected option attribute also correctly set initially selected option sounds like bug unless misunderstanding something", "d": "10/2015"}, {"body": "react shallow copy props nt maintain prototype ctor passing createelement better passing single prop eg seen pop twice ca nt find issue answered guess might going close think intend continue behavior cc spicyj might able back", "d": "10/2015"}, {"body": "yes zpao right inspect object pass pull provided", "d": "10/2015"}, {"body": "react shallow copy props would useful mean full copy props component kind view thisprops like viewmodel u right issue problem question", "d": "10/2015"}, {"body": "could write code generically request data higher level pass list component stays dumb future please post questions like stack overflow elsewhere github issues support forum used tracking bugs improvements react", "d": "10/2015"}, {"body": "sounds like bug", "d": "10/2015"}, {"body": "consider context optimization hard", "d": "10/2015"}, {"body": "yes yiminghe said optimizing context hard ca nt bail check dom component may children composite components check would lead erroneous behavior avoid reconciling dom nodes would need save previous context internal instance ie ca nt dom nodes going become stateless components might fancy magic could knew none deep children composites andor utilized glimmerlike diffing think scope issue anyway decision skip dom components intentional one bug leave issue open days see anyone ideassolutions sebmarkbage others wants jump", "d": "10/2015"}, {"body": "kind srclang added recently part future release likely nt see default though guess still need add", "d": "10/2015"}, {"body": "related", "d": "10/2015"}, {"body": "maybe key", "d": "10/2015"}, {"body": "tlightsky nt think nt even get warning tried key wrapper still nothing edit forget babel nt start reason indeed code works using wrapper key instead div become mandatory", "d": "10/2015"}, {"body": "ooookay obviously nothing going problem disappeared soon switched ff devtools instead firebug idea nothing framework sorry noise", "d": "10/2015"}, {"body": "may something causing opened track", "d": "10/2015"}, {"body": "react native different repo may want discuss issues", "d": "10/2015"}, {"body": "sorry meant post reactnative repo made mistake sorry sorry guy could delete issue please", "d": "10/2015"}, {"body": "react addons shipped independent packages install require needed", "d": "10/2015"}, {"body": "yes another option need packages webjars tried created addon packages procedure fails github repository specified npm packages", "d": "10/2015"}, {"body": "haha ew requirement likely infers development hell want know", "d": "10/2015"}, {"body": "running project achieve desired effect", "d": "10/2015"}, {"body": "talking node project use file amd module java webapp", "d": "10/2015"}, {"body": "think iamdustan nt mean node means using envifying something like looseenvify webpack envify development build going replace checks inside react uglifyjs eliminate dead branches react works used npm example", "d": "10/2015"}, {"body": "gaearon yea still means integrating node workflow think ask separating minification part proddev split honesty thought making clearer simply minified different pattern lot libs apart making clearer people inadvertently using dev build prod sure real wins minifiying already minified lib nt ideal harmless jochenberger could explain would helpful", "d": "10/2015"}, {"body": "zpao separating minification split exactly point use react java web application framework users framework enable disable minification toggle development production mode settings orthogonal though default settings dev gt minification prod gt minification user chooses disable minification production like able serve unminified production version", "d": "10/2015"}, {"body": "see every time trying animations", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "updated title avoid potential confusion", "d": "10/2015"}, {"body": "duplicate", "d": "10/2015"}, {"body": "lots potential culprits first eradicate really obvious things sometimes trip element grabbing clicks top intended target typo adding onclick handler jsx maybe posting code snippet component would help although sure github issue best place sort question", "d": "10/2015"}, {"body": "tested react v worked change version failed happened android webview phone model lenovo android version code version import react react class root extends reactcomponent constructor props super props thisalert thisalertbind alert alert render let style cursor pointer return reactrender documentgetelementbyid reactdom version import react react import reactdom reactdom class root extends reactcomponent constructor props super props thisalert thisalertbind alert alert render let style cursor pointer return reactdomrender documentgetelementbyid reactdom", "d": "10/2015"}, {"body": "mobile may related initialising touch events changed although wasnt aware anything special guess question anything else code required redundant possibly screwing something", "d": "10/2015"}, {"body": "code page test check cheap android mobiles use android origin webview", "d": "10/2015"}, {"body": "got access iphone things work guessing tried extract react code try vanilla jsdom phone although obviously work android version decent enough", "d": "10/2015"}, {"body": "yes changed v worked well moderner mobiles worked", "d": "10/2015"}, {"body": "good see wonderful world android still providing endless joy web developers could try asking question forums reactiflux discord channel seems pretty active get peeps move slack", "d": "10/2015"}, {"body": "good see wonderful world android still providing endless joy web developers haha thank much", "d": "10/2015"}, {"body": "bad solution", "d": "10/2015"}, {"body": "hmm odd work normal react way case weird thing capture phase device", "d": "10/2015"}, {"body": "work either", "d": "10/2015"}, {"body": "problem ie basically code boundled production mode reacterrorutils simulate real browser event better devtools logging go around problem boundling code processenvnodeenvproduction", "d": "10/2015"}, {"body": "uncinimichel really works js files smaller", "d": "10/2015"}, {"body": "dyb good however need raise bug", "d": "10/2015"}, {"body": "uncinimichel think bug react warded indeedly", "d": "10/2015"}, {"body": "switching prod mode nt great long term solution luckily fixed already ship fix see", "d": "10/2015"}, {"body": "zpao great thanks", "d": "10/2015"}, {"body": "sorry non issue createfactory going needed", "d": "10/2015"}, {"body": "sounds like really specific problem setup ca nt help without code fairly certain nt bug react inclined say start question stack overflow somewhere come back whenif think found bug react specific steps reproduce feel free link post maybe somebody paying attention help", "d": "10/2015"}, {"body": "mean seriously everything worked fine render methods called react issue var react require react var reactdom require reactdom var mycomponent reactcreateclass render function consolelog render node documentgetelementsbyid wrapper reactdomrender node even primitive example taken docs work nt tell issue code", "d": "10/2015"}, {"body": "packagejson look like version react amp reactdom install ton code looks like posted runs fine", "d": "10/2015"}, {"body": "react reactdom also ton code fine previous version got example working replaced page hello world try component render method executed returned content show components imported files example inline main file guess works render methods look like example complicated", "d": "10/2015"}, {"body": "downgrade everything works", "d": "10/2015"}, {"body": "something packaging probably going wonky might multiple reacts something make standalone example maybe repo gist could probably help track keep eye errors console otherwise much go sorry good luck", "d": "10/2015"}, {"body": "mean seriously everything worked fine render methods called react issue need come issue tracker harsh demanding attitude try help please realize quick assume something inherently broken whereas works fine thousands people already upgraded way help nt provide exact setup reproducing problem", "d": "10/2015"}, {"body": "nt tell issue code project nt end code may ton tools libraries use package manager transpiler javascript bundler etc standing code see code actually runs browser somewhere along chain might mistake impossible figure without project setup reproducing problem yes issue setup necessarily code", "d": "10/2015"}, {"body": "well use npm webpack babel special setup anything tried installing npm packages anew nt help use setup also thing changed react version everything works output render methods logic tells change react time try prepare project test", "d": "10/2015"}, {"body": "make sure nt end duplicate react example use npm package use peer dependency react install react end two reacts going work", "d": "10/2015"}, {"body": "ok played little deleted node modules reinstalled node everything another horror story sure one react node modules opened project chrome worked usually use firefox ff dint work errors nothing fixed warnings could see console suddenn even replaced party components seemed incompatible new react still nothing ff turned warnings firebug got mutating prototype object cause code run slowly instead create object correct initial prototype value using objectcreate something creating worker empty source compiled source babel since babel nt changed time change react trigger firebug open js failed load closed worked firefoxbabelreact bug since weverything cool react version thing changed one reason bug happen", "d": "10/2015"}, {"body": "bazo many users including facebookcom upgraded without problem unable reproduce problem think found bug react please provide simplest possible testcase demonstrates issue without valid repro little could", "d": "10/2015"}, {"body": "jimfb true entirely test case provided nt enough information full environment last part firebug playing nicely reported recently money something babel related nt chance look nt really care much firebug days super high priority bazo thanks hunting sure end filed start tracking issue bit much noise valuable place people land", "d": "10/2015"}, {"body": "think dug little context problem app bundle source code dependencies separate test code dependencies merge actually run test code saves bundle time making changes tests nt rebundle source code dependencies however problem seems stem declaring dev dependency means nt get compiled source bundle source dependencies sort issue test utils wo nt access correct react instance bundled together", "d": "10/2015"}, {"body": "sort issue test utils wo nt access correct react instance bundled together potentially essentially bundle splitting would need packager know reactreactdom already available docs around internet webpack browserify concern might running dev prod mode nodeenvproduction sure testing utils end working prod mode", "d": "10/2015"}, {"body": "think part configured correctly worked previously using bundler knows dependencies already bundled something split could cause problem", "d": "10/2015"}, {"body": "would nt expect since reactaddons require deeply react package reactdom definitely seen unexpected cases multiple reacts", "d": "10/2015"}, {"body": "oh hey github references default unexpected anyways tgolson sure helpful recreated test cases unable replicate permutations seem pass fine setup probs different mine somehow zpao mentioned might something bundling", "d": "10/2015"}, {"body": "zpao jadekler thanks help fellas think right seems like bundling issue bundle source dependencies things work bundle test dependencies things fail nt seem effect nt time get exact root issue close since seems like everything react side good update issue find solution might help others", "d": "10/2015"}, {"body": "might red herring due way browser represents markup improved way message works could test see get different message", "d": "10/2015"}, {"body": "believe change fully backwardscompatible", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "props state would better also still fully backward compatible", "d": "10/2015"}, {"body": "probably best place follow along ongoing discussion", "d": "10/2015"}, {"body": "sounds like usage questions use github issues tracking bugs react core going close issue take radar feel free continue discussion thread move another site", "d": "10/2015"}, {"body": "jimfb know solution stuck past one week", "d": "10/2015"}, {"body": "nothing specific react question general npm issue try hoist dependencies app level run npm install trying explicitly install things inside folders nodemodules going nightmare ask help stack overflow place", "d": "10/2015"}, {"body": "interesting thing note pure function components longer applies think inaccurate stateless components nt stateless components may stateful children mathematically", "d": "10/2015"}, {"body": "stateless components nt thisstate stateless components may stateful children mathematically thisstate yes reconciliation continue normally children incompatible bails proposing exactly behavior functions nt supported first class react called directly js const button children gt children const toggle children gt children button children toggle children transition wo nt destroy statefulthing state react nt aware types button toggle different propose behavior using function components normally", "d": "10/2015"}, {"body": "reason stateless component return null", "d": "10/2015"}, {"body": "seems issue way made test close issue open another issue discussion point", "d": "10/2015"}, {"body": "plans generally suggest static type checker like flow things like", "d": "10/2015"}, {"body": "thsnkyou much \u65bc notifications githubcom could useful variable checks like function arguments reply email directly view u b", "d": "10/2015"}, {"body": "see also", "d": "10/2015"}, {"body": "please read documentation forms filing issues nt get response stack overflow nt awesome please avoid future", "d": "10/2015"}, {"body": "probably want unmock react dependencies jest config see config example react tutorial", "d": "10/2015"}, {"body": "think moved fbjs could", "d": "10/2015"}, {"body": "samerbuna correct never official api internal runtime dependency removal never included change logs fwiw key mirror use tutorial completely extraneous simply assuming values constants enough", "d": "10/2015"}, {"body": "glitter looks like startup clone slack similar features better pricing model etc intuition nt want leave issue open days collect feedback reasoning many underutilized communication channels substantially less valuable concentratedactive communication channels one thing us setupmaintainetc maybe spicyj thoughts", "d": "10/2015"}, {"body": "nt official community large group react users talking sorts interesting stuff reactiflux", "d": "10/2015"}, {"body": "yep reactiflux nonirc discussion happens moved discord slack", "d": "10/2015"}, {"body": "really need open gitter let give discord chance", "d": "10/2015"}, {"body": "dallonf thanks", "d": "10/2015"}, {"body": "bind generates new function going triple equals equal sure get around good news performance perspective actually update dom node callback function changes fancy magic internally call correct event handler event processed running performance problems due bound functions", "d": "10/2015"}, {"body": "personally use special purerendermixin ish base class ignores functions comparing prevnext far perfect works well enough jimfb problem every component create receives bound function components rerender every time", "d": "10/2015"}, {"body": "syranide yeah agree bind generates new function going triple equals equal sure get around ideas", "d": "10/2015"}, {"body": "jimfb weakmap seems like best nearterm solution bit cumbersome use something trivial js getting shit together offering better utilities comparison", "d": "10/2015"}, {"body": "ccorcos used pattern like get around issue", "d": "10/2015"}, {"body": "yes passing index prop perf tight scenarios", "d": "10/2015"}, {"body": "strml yeah problem code reuse change counter component syranide thinking use pure render mixin doesnt care functions happens function keeps getting passed maybe component layers old bound function counter different index jimfb one hack would lru cache something hold references bound functions think best solution would something baked react react look special key shallow comparison arguments function reconcilliation would need code handle binding", "d": "10/2015"}, {"body": "ccorcos make sure always bind function arguments something needs dynamic bind local method holds logic instead", "d": "10/2015"}, {"body": "yes well every case run always boils single function reference eg simple solution would react checked method reconciliation would generalized could solve binding issue js shallowlisteq function b alength blength arrayzip var lt alength b return false return true return false reactaddonsbind function f ctx args f could already reactboundfunction want maintain argument function references let prevargs fargs bound function moreargs return fapply ctx prevargsconcat argsconcat moreargs keep previous f exists boundf ff f boundargs prevargsconcat args boundreactboundfunction true boundequals function g return greactboundfunction amp amp ff gf amp amp shallowlisteq fargs gargs return bound", "d": "10/2015"}, {"body": "oh yeah right totally missed context part keep array contexts shallow compare well iterate though binding arguments redo example later sent iphone oct andreas svensson notifications githubcom wrote ccorcos make sure always bind function arguments something needs dynamic bind local method holds logic instead reply email directly view github", "d": "10/2015"}, {"body": "ok guy", "d": "10/2015"}, {"body": "enough information issue actionable furthermore sounds like usage question usage questions asked stackoverflow use github issues track bugs react core going close issue believe bug react please create simple testcase jsfiddle demonstrates issue look", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "merged work", "d": "10/2015"}, {"body": "add context whether use actual anchor tags nt seem affect whether putlistener gets called", "d": "10/2015"}, {"body": "strml provide simplified jsfiddle demonstrates issue many putlisteners take look", "d": "10/2015"}, {"body": "yea looks like workaround removing tap delay cc spicyj", "d": "10/2015"}, {"body": "work jsfiddle get home tonight thanks taking look perf concern seeing crashes error logs sentry due failures trace back", "d": "10/2015"}, {"body": "got open console hit run", "d": "10/2015"}, {"body": "handler appears culprit", "d": "10/2015"}, {"body": "appears expected behavior pass different function instance counts change maybe ignore event listeners updates usually less costly often noops", "d": "10/2015"}, {"body": "yeah interacting dom slow could probably set callback proxy invoked reads actual handler internal instance updates due render would result call dom", "d": "10/2015"}, {"body": "considered bad form bind render function otherwise create handlers loop alternative time put data attribute read click", "d": "10/2015"}, {"body": "already nt actually interact dom", "d": "10/2015"}, {"body": "nt interact dom seems erroneous print", "d": "10/2015"}, {"body": "mean method lists every side effect returning new element perhaps technically incorrect", "d": "10/2015"}, {"body": "ok tldr conceptually dom changing due creates new function via hood react fancy magic avoids actually flushing changes dom makes expected behavior little ambiguous practice use case probably binds rather someone swapping event handler would possible slightly unusual interest making reactperf useful rather correct spicyj agreement probably makes sense suppress logging updates event handlers ifwhen previous value new value functions", "d": "10/2015"}, {"body": "stackoverflow best place usage questions since use github issues track bugs core interest keeping conversation one place let redirect discussion stackoverflow post made couple hours ago", "d": "10/2015"}, {"body": "reactdom another file package bower", "d": "10/2015"}, {"body": "oh interesting main bower script injector nt seeing", "d": "10/2015"}, {"body": "would great compatible since lot people use bower", "d": "10/2015"}, {"body": "looks like add reactdom main", "d": "10/2015"}, {"body": "sounds good oct paul shannessy notifications githubcom wrote looks like add reactdom main reactjsreactbower reply email directly view github", "d": "10/2015"}, {"body": "yea automocking stuff yayyyy tend issues automocking gains using first move pretty much always disable everything nt going react specific anybody disabled mocking dependency dependencies problems definitely part story testing react probably worth bringing jest repo people radar bug cpojer p immediately react could depend fbjs use keymirror implementation keymirror things got moved fbjs move bunch things back react repo really unlikely", "d": "10/2015"}, {"body": "kill keymirror nt need", "d": "10/2015"}, {"body": "separate discussion keymirror symptom root issue jest npm", "d": "10/2015"}, {"body": "getting really bad ran sort fault set unmock done popped deep issue required called looped unfortunately mock made function return undefined errored cpojer like zpao said symptoms seeming deep jest issue migrate issue jest repo one already", "d": "10/2015"}, {"body": "agree situation really annoying nt good solution yet would recommend react team provide list modules mocked come something good sorry trouble", "d": "10/2015"}, {"body": "yea make jest issue react specific workaround unmock react fbjs hopefully nt use dependencies fbjs basically anytime unmock something need walk deps unmock potential trouble", "d": "10/2015"}, {"body": "depends specifics application ultimately performance issue run perf tests figure option fastest app general first option faster additionally first option preferred keeps component state attached current component shift ids second example update every dom node also remapping existing components internal data new values suppose user inputs text item text box push new item end text would appear item e text box would want ever unsure almost certainly want first option usage question try keep github issues tracking bugs react core going close please ask usage questions stackoverflow future", "d": "10/2015"}, {"body": "thanks lot jim", "d": "10/2015"}, {"body": "seems like babel parses file whatever reason nt anything react", "d": "10/2015"}, {"body": "nt anything better ask things stackoverflow react maintainers busy people need make busier node nt know css files webpack configure something like deal node need look workarounds ignoring imports precompiling node code webpack either way unrelated react", "d": "10/2015"}, {"body": "gaearon thank answer thought since almost everyone uses babel react someone might seen", "d": "10/2015"}, {"body": "use target component follows", "d": "10/2015"}, {"body": "stepancar ca nt see mycomponent implementation suspect titobouzout correct answered issue either way sounds like usage question rather bug react core trying keep github issues track bugs react core going close issue usage questions better answered stackoverflow feel free continue discussion thread", "d": "10/2015"}, {"body": "titobouzout thank already use solution jimfb think behavior wrong passed data attribute custom component appears anywhere case component core like div p passed data attribute appears markup case component created passed data appears markup titobouzout solution implemented react thank", "d": "10/2015"}, {"body": "component may many children even sub react components imagine case", "d": "10/2015"}, {"body": "stepancar wonder mixing custom elements custom components custom elements like work described custom components like necessarily markup associated arbitrary things props", "d": "10/2015"}, {"body": "jimfb titobouzout thank understanding fault agree", "d": "10/2015"}, {"body": "lot anybody go helpful suggest working stack overflow narrow case think indicates bug react please provide test case try diagnose going close meantime quick suggestion turn break caught exceptions throw debugger react warnings go back stack createelement warning big red flag may using factory jsx require failed resolve", "d": "10/2015"}, {"body": "defaultchecked never updated used initial render could component never unmounted due usage reactrouter second render really update completely new instance future please use places like stack overflow specific use case issues come test case indicating bug react good luck", "d": "10/2015"}, {"body": "paul correct usage questions asked stackoverflow try keep github issues tracking bugs core dwboutin depending trying might find prop works better course specify change listener would make component controlled", "d": "10/2015"}, {"body": "well typecheck happens exact typecheck directly forceupdate forceupdate invariant happens fwiw due important distinction former makes new function bound pass along arguments latter also new function explicitly nt pass arguments former gets event passed along latter drops event nt callable thus invariant need typecheck guess could discuss whether keep invariant warning misuse api", "d": "10/2015"}, {"body": "follow equal thing would throw error see first bind example", "d": "10/2015"}, {"body": "correct yes understand nt toooo hard understand happening misuse api guess would consider adding argument type invariant help make clearer something like kind moot confused second might confuse others also", "d": "10/2015"}, {"body": "cc yungsters input relay side things presumably handled way", "d": "10/2015"}, {"body": "zpao problem define wrappers like relay order achieve looks like handled naturally map props higherorder component order deal seems hacky use higherorder component place", "d": "10/2015"}, {"body": "zpao relay one uses default prop values props accompanying graphql fragments completely managed relay applications want default value eg field happens need think arbitrary fields graphql makes record happens passed react component prop special field happens nested inside prop words going apply default prop values props apply arbitrary tree paths graphql object", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "thisonitemclickbind item item passed first argument event go second argument said worked maybe expecting arguments wrong order e item instead item e add logging statements onitemclick figure exactly error thrown", "d": "10/2015"}, {"body": "absolutely right sorry wasting time seems like need sleep", "d": "10/2015"}, {"body": "pretty sure intentionalconscious decision test utils nt supposed used production nt optimized performance exist make easy test code debug dev mode really need always create custom bundle react", "d": "10/2015"}, {"body": "yep long case well documented call", "d": "10/2015"}, {"body": "part react package", "d": "10/2015"}, {"body": "oh perfect nt realize thanks", "d": "10/2015"}, {"body": "zpao ran also browser version super useful debugging purposes nothing else tend think put reactdom really add enough bloat feel need take reactdom", "d": "10/2015"}, {"body": "mixed feelings also see also found useful entirely debugging nt great argument also hard create bundle reactdom corresponds putting directly wo nt happen maybe make bundle something awkward make obvious", "d": "10/2015"}, {"body": "causing trouble clojurescript well clojurescript nt play well npm webpackbrowserify adding reactdomserver reactdomreactdomserver", "d": "10/2015"}, {"body": "understanding right want support without warnings cant support anymore without asking people workaround like aliasing reactdom react webpack config think correct", "d": "10/2015"}, {"body": "think say something like use reactdom sometimes backed old version right think work library code users nt need anything fancy build configuration", "d": "10/2015"}, {"body": "jimfb thanks nt really understand solution reactdom get value react version gt", "d": "10/2015"}, {"body": "something like", "d": "10/2015"}, {"body": "sure work since condition ca nt resolved statically bundlers like webpack likely complain least warn installed even consumer using cleanest way mess release major version requiring", "d": "10/2015"}, {"body": "yes right thanks help gaearon jimfb", "d": "10/2015"}, {"body": "spicyj sebmarkbage", "d": "10/2015"}, {"body": "hm unfortunate guess try find feature test patch", "d": "10/2015"}, {"body": "taking look first bug docs testing event seems fired form element level rather form say log submit log submit match expected behaviour want handler individual reactdom form elements ie called element invalid want bubble parent ie called whenever least one element form invalid", "d": "10/2015"}, {"body": "match dom fire element form already support events nt bubble events added document level delegated ones nt bubble need added specific elements creation forms submit amp reset events thanks taking feel free get pr completely ready questions need help", "d": "10/2015"}, {"body": "thanks paul good know looking right place update time create pr need help cheers tom oct paul shannessy notifications githubcom wrote match dom fire element form already support events nt bubble events added document level delegated ones nt bubble need added specific elements creation forms submit amp reset events thanks taking feel free get pr completely ready questions need help reply email directly view github", "d": "10/2015"}, {"body": "hey put together pr would great get feedback couple specific questions handle automated testing lot test code look unfamiliar react codebase unsure ifhow tested splitting logic make sense think would better separate statement bit preceeding matching elements need setup keep minus first feedback appreciated seem work totally new react code sure way gone suitable cheers tom", "d": "10/2015"}, {"body": "tomduncalf awesome", "d": "10/2015"}, {"body": "nt seen done git pull latest ie presumably still failing today version node running operating system", "d": "10/2015"}, {"body": "running ubuntu node version pull done earlier today rereading error think directed towards somewhere else leave", "d": "10/2015"}, {"body": "interesting nt support building node actually little surprised able npm install react repository ran tests ten times linux machine node unable repro issue jalejos upgrade version node let know still able reproduce issue", "d": "10/2015"}, {"body": "hi sorry late reply updated node version ran npm install deleting nodemodules npm version still issue happening decided clone project separate folder run steps issue still present", "d": "10/2015"}, {"body": "spicyj ideas mystery anyone else able reproduce issue", "d": "10/2015"}, {"body": "idea", "d": "10/2015"}, {"body": "jalejos point sure fix first heard issue unable reproduce get chance investigate super curious hear discover", "d": "10/2015"}, {"body": "jimfb also seeing random failures ubuntu looks like cause lines reactdefaultperfanalysisgetinclusivesummary candidates faster nt make summary crank test start failing tests still pass least could something nt seem using mocked version edit tried different machine os x using mock nt getting reset tests nt look like causes problems idea mock nt get used laptop", "d": "10/2015"}, {"body": "case well explained docs nt traverse nested reactelements nested arrays previously object literals js var nested username nested meant nested children would traverse pull span anchor div wo nt traverse literal div children nt children form div", "d": "10/2015"}, {"body": "jimbolla believe closest one means anything renderable", "d": "10/2015"}, {"body": "jimbolla usage question rather bug react core use github issues tracking bugs react core usage questions better answered stackoverflow since bug react core going close issue feel free continue discussion thread", "d": "10/2015"}, {"body": "yaycmyk looking usage would look like whereas want something would look like want pass types instances", "d": "10/2015"}, {"body": "nt correct nt great type could one number things simple function stateless functional components also function making required extend reactcomponent react class also function since function passed closest type get since function valid ca nt accurately check return value static type checker come handy", "d": "10/2015"}, {"body": "zpao thanks would use call day valid values nt", "d": "10/2015"}, {"body": "also captures native element case eg", "d": "10/2015"}, {"body": "ok thank", "d": "10/2015"}, {"body": "documented changelog react nt accept objects children anymore use createfragment api convert object array", "d": "10/2015"}, {"body": "yaycmyk sounds right thanks answering usage question rather bug react core use github issues tracking bugs react core usage questions better answered stackoverflow since bug react core going close issue feel free continue discussion thread", "d": "10/2015"}, {"body": "warningdialog probably problem give keys status data operationid correlationid real callsite easier find", "d": "10/2015"}, {"body": "purpose inlining elements get rid function calls nt think adding call good idea since defeats point", "d": "10/2015"}, {"body": "thought first really expensive part function call props children copying associated array object allocations currently using external helpers function call anyway get think discussion using work fine would nice react able fully abstract nt need know magicnumsymbol uses", "d": "10/2015"}, {"body": "feel adding new blessed toplevel api work around bundling polyfill issue bit overkill blessed mean something like", "d": "10/2015"}, {"body": "perhaps might lead confusion future would nice nonbabel tooling future like cljs wants benefit using raw objects", "d": "10/2015"}, {"body": "gaearon argue nt seem like bundling issue long run core issue react accept random objects components better way expose api allows current functionality api relys global symbol registry clear least approach taken makes better exposing function constant directly instead would also mean could avoid relying random integer constant actually constant normal object could safely compared avoids relying possiblypolyfilled symbols alltogether", "d": "10/2015"}, {"body": "cc sebmarkbage", "d": "10/2015"}, {"body": "solution ensures multiple npm packages instances react coordinate identity seamlessly even across realms none proposals address concern also makes us compatible theoretical future value types proposals react coordinate multiple versions babel well one possible solution would babel depends module exposes somehow opts inlining polyfill gets fallback react", "d": "10/2015"}, {"body": "totally prosymbol clear mostly surprised see symbol registry actual using facing ui rather react internally pull symbol registry expose constant", "d": "10/2015"}, {"body": "left comment original pr magicnum use portable across realms nt require polyfill fixes babel problem fixes xss problem", "d": "10/2015"}, {"body": "react generates xmlcompatible markup", "d": "10/2015"}, {"body": "release note says", "d": "10/2015"}, {"body": "actually markup generated invalid without value attribute must", "d": "10/2015"}, {"body": "whether technically valid works browsers know iirc gets around issues crop using attribute name value", "d": "10/2015"}, {"body": "definitely specific error normally occurs setting state response side effect setting state eg within render says want immediate fix likely wrap call settimeout call eg alleviate problem rarely good idea", "d": "10/2015"}, {"body": "maybe writing something like wanted", "d": "10/2015"}, {"body": "event unlikely issue react still trouble try asking stack overflow", "d": "10/2015"}, {"body": "webpackbrowserify bundle think best", "d": "10/2015"}, {"body": "need add attribute elements", "d": "10/2015"}, {"body": "thanks working", "d": "10/2015"}, {"body": "regression unintentional", "d": "10/2015"}, {"body": "node version running try run", "d": "10/2015"}, {"body": "node tried couple times deleting nodemodules folder installing packages deleting npm cache", "d": "10/2015"}, {"body": "little update installed ubuntu virtual box couple tries able compile finally", "d": "10/2015"}, {"body": "problem seems grunt config switching solves problem bug seems introduced switched build steps gulp", "d": "10/2015"}, {"body": "thanks solves issue", "d": "10/2015"}, {"body": "thanks heads way able build let us know encounter issues nobody team currently building windows would nt surprised see couple things like pop", "d": "10/2015"}, {"body": "bit quirky intended behavior effectively providing new refcallback every time renders safely dispose old refcallback react calls new refcallback called instance store reuse refcallback goes away", "d": "10/2015"}, {"body": "docs say", "d": "10/2015"}, {"body": "blog post addons due dom node refs change mentioned testutilsfindallinrenderedtree related helpers longer able take dom component custom component", "d": "10/2015"}, {"body": "thanks two related follow ups jsbin first component ok second one jsbin javascript one works commented worky seem pretty similar makes custom component must subtle difference worth detailing please point doc deconstructs term custom component react terms react docs explains composite components quite succinctly iscompositecomponentwithtype returns true instance composite component created reactcreateclass would great types react components explained glossary", "d": "10/2015"}, {"body": "brigand think actually unrelated instance localnerve meant custom component synonymous composite component nt actually support rendering except server rendering browsers behave differently renderintodocument simply renders component div sorry", "d": "10/2015"}, {"body": "ok used able test server components react testutils thus issue forward guidance testing html components", "d": "10/2015"}, {"body": "shallow rendering work could try render string create new document html exact details depend running tests", "d": "10/2015"}, {"body": "thanks clarification thoughts unexpected breaking change workable", "d": "10/2015"}, {"body": "oh missed regression look see fixable point release", "d": "10/2015"}, {"body": "note renderintodocument appears work html components afaict browsing result inspector stuff go search hit issue manifests unable find element probably means dom unexpectedly mutated particular test scenario rendering jsdom set also preexisting htmlbody globaldocument much like demonstrated browser based jsbin", "d": "10/2015"}, {"body": "change actually broke lot tests way atm locate custom component within dom component previous versions possible testutilsfindallinrenderedtree test would eg locate div particular class within div specific custom component longer possible done guidance would appreciated", "d": "10/2015"}, {"body": "paste example tests look like", "d": "10/2015"}, {"body": "ok example one tests broken simplified test take tested component editscreen within look element class editscreendetails within look instance button component worked quite nicely us enabled old findallinrenderedtree understand test methods use findallinrenderedtree internally kinda thing", "d": "10/2015"}, {"body": "point one thing using testutils directly test helpers use internally particular wrote jquery style helper method use locate component instances dom nodes tests looks kinda like give us instances button component within something class editscreendetails within screen component instance calling testutilsfindallinrenderedtree repeatedly selectors hope imagine nt work since call findallinrenderedtree dom node could advise implement api would fix tests", "d": "10/2015"}, {"body": "hello problem spent last hours trying fix anyway worked upgrade npm latest version problem disappeared hope helps", "d": "10/2015"}, {"body": "nt look like duplicate react", "d": "10/2015"}, {"body": "gaearon unless mistaken lists packages dependencies means reactdom depends react pulls version", "d": "10/2015"}, {"body": "suppose blew away fresh install getting", "d": "10/2015"}, {"body": "looks like issue nothing consequence react page interested make sure thirdparty libraries updated react", "d": "10/2015"}, {"body": "linux specific broken browsers operating systems probably good first bug someone wants submit pull request", "d": "10/2015"}, {"body": "closed", "d": "10/2015"}, {"body": "yagudaev say nt valid really would nt recommend components determine whether render like much better parent component handle directly", "d": "10/2015"}, {"body": "syranide agreed upwards fields parent component hoping stay away yet maybe another elegant solution", "d": "10/2015"}, {"body": "yagudaev repetitionverbosity problem see would recommend following general solution perhaps something like following want go many variations different tradeoffs depending needs", "d": "10/2015"}, {"body": "syranide great idea thanks never considered interestingly involved example showed fields lists information displayed method example switch statement select right way display things workaround css scss field margintop amp firstoftype margintop", "d": "10/2015"}, {"body": "know problem fix eventually though probably come sooner", "d": "10/2015"}, {"body": "works fine run code babel repl fixing arrow function property initializer extending reactcomponent", "d": "10/2015"}, {"body": "really let say access available current version babel", "d": "10/2015"}, {"body": "original code transformed run", "d": "10/2015"}, {"body": "mrtnbroder happens nt bind js class foo f render return class bar render thispropsonf thispropsonfcall thisprops sure could happen code posted sure running old code", "d": "10/2015"}, {"body": "yeah sure happened dig let know maybe strange transpiling issue", "d": "10/2015"}, {"body": "ok point sounding like bug react going close issue curious hear actually went wrong turns react fault reopen issue", "d": "10/2015"}, {"body": "ah lingering forgetting something feeling thanks reminder pushed update update branch moment", "d": "10/2015"}, {"body": "good catch anybody wants grab let us know otherwise get soon", "d": "10/2015"}, {"body": "sorry issue upgraded browersify loaded watching guess caching going restarted works fine", "d": "10/2015"}, {"body": "run paste output", "d": "10/2015"}, {"body": "full output sorry mess experimenting various things lot dependencies need pruned think relevant bits actual file note commented lines uncommented get error described original post", "d": "10/2015"}, {"body": "nt react inside reactdom sure problem fixed also extra copy inside", "d": "10/2015"}, {"body": "thanks spicyj confirming suggestion worked cleaned slate removing think messing switching back forth", "d": "10/2015"}, {"body": "exactly problem think installed reactdom installed react perhaps stronger health warning would helpful wasted couple hours trying work getting reactowner refs error", "d": "10/2015"}, {"body": "think want provide things keep mind update docs issue nt super actionable going close thanks suggestion", "d": "10/2015"}, {"body": "zpao spicyj", "d": "10/2015"}, {"body": "done", "d": "10/2015"}, {"body": "think thing could warn call setstate componentdidupdate think know valid use cases done care would pretty annoying", "d": "10/2015"}, {"body": "aha following code triggers infinite loop componentdidupdate calling thissetstate even though state nt changing whatsoever another componentdidupdate triggered chatting zpao sounds like still need leave behavior way warning create specifically thissetstate called componentdidupdate state nt actually change thus triggering hard debug infinite loop", "d": "10/2015"}, {"body": "could warn nested updates even infinite loop probably slow avoided", "d": "10/2015"}, {"body": "closing since fixed master marked pr", "d": "10/2015"}, {"body": "sounds like valid issue nt think intended", "d": "10/2015"}, {"body": "try make pull request", "d": "10/2015"}, {"body": "yes pull request would much appreciated", "d": "10/2015"}, {"body": "tried repro could context see chrome android ios chrome ios safari chrome mobile emulation", "d": "10/2015"}, {"body": "maxlapshin browserdevice using also provide simple test case jsfiddle", "d": "10/2015"}, {"body": "ipad safari reproduce give better info", "d": "10/2015"}, {"body": "closing repro feel free comment reopen", "d": "10/2015"}, {"body": "nearly enough information hope helping still problem please post simple repro case jsbin jsfiddle shows problem including behavior expected see instead", "d": "10/2015"}, {"body": "think fundamental problem catchall properties components dom defines model nodes accept named attribute single set children set attributes apply frontends may widgets accept fixed set properties also sets children none uncommonly widgetspecific apis distinction children props may nearly trivial welldesigned complex user components implemented multiple sets children named props sure components like fb dom model makes sense jsx implemented right based dom would detrimental unnecessarily opinionated react may alternatives jsx extensions make sense frameworks think making sacrifices react sake jsxdom premature theoretically api catchall components really yes horrible something advocating html would design component takes arbitrary properties fixed set predefined special properties making intrusions react", "d": "10/2015"}, {"body": "syranide yeah dom though layout systems notion special value represents hierarchy descendants nodes xml association xml based layout systems already notion built jsx also already notion built happened pick prop name children conflate two though entirely obvious done solves anyway digress perhaps points better made", "d": "10/2015"}, {"body": "dup", "d": "10/2015"}, {"body": "use instead custom tags intended behavior behavior chosen needed support arbitrary attributes custom tags discussing probably going keep behavior unless someone comes better idea keep discussion thread however attribute set object object seems like wrong behavior use issue track regression", "d": "10/2015"}, {"body": "yes completely safe legal future reference usage questions better addressed stackoverflow try keep github issues tracking bugs react core", "d": "10/2015"}, {"body": "could reduce bit reproducible example runs jsfiddle fork ideally without radium simplest form logic", "d": "10/2015"}, {"body": "nt know placing like worked thanks looking seems like mistake somewhere", "d": "10/2015"}, {"body": "hack could also make wrapper thing proptypes mostly sort maintenance mode really planning add right", "d": "10/2015"}, {"body": "spicyj zpao", "d": "10/2015"}, {"body": "yeah seem lagging bit try", "d": "10/2015"}, {"body": "jsdelivr updated might want switch docs using future cdnjs says hours long time tutorial semibroken state", "d": "10/2015"}, {"body": "set buildsreactjsorg think terinjokes offered help", "d": "10/2015"}, {"body": "cdnjs adds something repo live site within minutes though course would great get lowered automated bot adding things repo much quicker hours buildsreactjsorg happy help fill free tag issue shoot email terin cloudflarecom", "d": "10/2015"}, {"body": "cdnjs readme emphasis cdnjs automatically updates libraries known hosted git repo eg lodash npm autoupdate relies release git autoupdate relies tags git repo autoupdate script runs every hour update result wo nt committed one maintainers audit updates many libs change naming directory structure different versions may need minify lib without preminified dist files reasonable delay hours think lib nt updated please wait least hours process audit commit adding react went pdt hours shipped jsdelivr went perhaps got bad break cdnjs update cycle good break jsdelivr connection ultimately best us probably", "d": "10/2015"}, {"body": "zpao follow cdnjs guys try piece together something went wrong", "d": "10/2015"}, {"body": "cdnjs maintainer take look", "d": "10/2015"}, {"body": "every stable release would expect people use includes breaking changes changes believe make product substantially better use react production facebook best remain stable still figuring optimal api point transition past continue follow semver duplicate", "d": "10/2015"}, {"body": "react actually using semver still major public api breakages fine minor patch versions though react nt actually make breaking changes patch react provides warnings deprecations documents upgrade process release notes also provided codemodding tools help transition major version zero initial development anything may change time public api considered stable version defines public api way version number incremented release dependent public api changes react every intention moving past major react communicated said part semver faq know release software used production probably already stable api users come depend worrying lot backwards compatibility probably already react given pretty clear good reasons decisions", "d": "10/2015"}, {"body": "stop encouraging people use finished product ready people already using production environment encouraging bad development practices stay date", "d": "10/2015"}, {"body": "explained things past nt fruitful discussion put much stock version number nt need use react", "d": "10/2015"}, {"body": "post minimal repro case please", "d": "10/2015"}, {"body": "minimal repro use element get error reported use element error tried dropping jest test react source code passed however running exact test local project fails confirmed react libs could kind build process causing issue line fails element", "d": "10/2015"}, {"body": "sounds like ericf mentioned", "d": "10/2015"}, {"body": "spicyj indeed looks like issue hope push fix soon blocking issue team upgrading thanks fast response", "d": "10/2015"}, {"body": "try meantime could copy definition since nt rely react internals", "d": "10/2015"}, {"body": "confused nt return dom node builtin dom components give dom node composite components unaffected", "d": "10/2015"}, {"body": "yes looking documentation noticed using instead thanks reply", "d": "10/2015"}, {"body": "spicyj help facing problem", "d": "10/2015"}, {"body": "tonyfrancis wherever using need update code use one following methods based type element calling method ref points standard component dom node etc need call retrieve element need call method ref points composite component custom component created need use new module like something like following code js function componentdidmount function var var function render return need change like js function componentdidmount function var var reactdomfinddomnode function render return hope clears nt updated code error", "d": "10/2015"}, {"body": "solved problem child reference formed begining needed time delay refs available", "d": "10/2015"}, {"body": "see need cover cases others missing see revised", "d": "10/2015"}, {"body": "spicyj think might bit advanced goodfirstbug specifically need handle three general cases user actually specified span case indicate span user specify span specify child text user specify span specify whitespace case call whitespace call text easy miss confused going whitespace includes tabs newlines spaces", "d": "10/2015"}, {"body": "jimfb hmmm looks like something wrong master branch comments example code snippet master prints warning says however branch see warning fix issue got confused thing apparently code validation part master different though branch master case nt wrap text component tag say example tag prints instead", "d": "10/2015"}, {"body": "jimfb mentioned three cases make sense rough idea fixing issue first need identify actually validation thought check via type incoming object suggest right way react community could able figure type redirect check say method check cases appropriately print warnings desired let know thought process correct", "d": "10/2015"}, {"body": "could take guess think would best spicyj could jump wrote validation code knows best", "d": "10/2015"}, {"body": "thanks bug fixed", "d": "10/2015"}, {"body": "spicyj looks like fixed part still issue remains right still warning includes text", "d": "10/2015"}, {"body": "spicyj ping", "d": "10/2015"}, {"body": "yes", "d": "10/2015"}, {"body": "react relies behavior known browsers behave way eventually phased support better present danger stay away numeric indices safe", "d": "10/2015"}, {"body": "ok see thanks closing", "d": "10/2015"}, {"body": "module far make", "d": "10/2015"}, {"body": "nt lot go code error occured make repro jsbin", "d": "10/2015"}, {"body": "yeah know really sketchy seems happen mouse event sort trying figure", "d": "10/2015"}, {"body": "could repro small case andor supply surrounding code would helpful react version etc first seen error coming code control nt ever case", "d": "10/2015"}, {"body": "event removed call invariant", "d": "10/2015"}, {"body": "iirc emit warning text nodes spaces allowed inside", "d": "10/2015"}, {"body": "syranide see close issue", "d": "10/2015"}, {"body": "cc spicyj", "d": "10/2015"}, {"body": "yeah closing warn though warning could better", "d": "10/2015"}, {"body": "tried use proptypes way generate dynamic forms allow demoing element react playground use case similar right possible introspect information proptypes certainly enough instance perform equality checks see types little painful mostly works problem soon get function call variants custom validator functions entire thing falls apart functions become fully opaque love idea meta object would minimum requirements although additionally love see", "d": "10/2015"}, {"body": "needs fully met tools without requiring anything additional proptypes api whilst require bit tooling likely barrier us react community since already using compilers like babel build tools like webpack browserify", "d": "10/2015"}, {"body": "related convo", "d": "10/2015"}, {"body": "downside reactdocgen nt provide runtime introspection react proptypes already incredibly close shame react declarative offering little terms runtime introspection two almost go hand hand", "d": "10/2015"}, {"body": "understand initial thought well turned could treat code data annotate runtime introspection automatically originally wrote purpose opted use support docgen instead able use automatically generate interactive styleguidedocumentation site proptype declarations one react component away autogenerated form different permutations component", "d": "10/2015"}, {"body": "ha bad tried string textarea work perfectly", "d": "10/2015"}, {"body": "update seen symptoms microsoft edge well makes much serious back bit research", "d": "10/2015"}, {"body": "confirmed problem affects edge ie tested phantomjs react earlier problem report error possible add svg element using vanilla dom methods browsers eg", "d": "10/2015"}, {"body": "theory going svg elements support property consistently browsers suitable workaround cases since really weird thing probably nt need nt going fixed anytime soon render svg element entirely react ie rather", "d": "10/2015"}, {"body": "directory package named already warning message seems imply happening", "d": "10/2015"}, {"body": "yes im directory named react", "d": "10/2015"}, {"body": "need call package something else npm looking field packagejson npm works gives warning", "d": "10/2015"}, {"body": "sorry bug code", "d": "10/2015"}, {"body": "never mind resolved getting domnode rendered component putting callback ref", "d": "10/2015"}, {"body": "never mind found shipped package however documentation misleading announcement page builds also available react reactdom packages bower", "d": "10/2015"}, {"body": "thanks fix", "d": "10/2015"}, {"body": "question need two lifecycle methods would want componentdidmount block visual output apply imperative dom manipulations repaint sufficiently important use case care", "d": "10/2015"}, {"body": "thought runs children parent time runs everything mounted displayed missing point one issue name assuming proposing placeholder name beginners might assume runs every effectively", "d": "10/2015"}, {"body": "gaearon maybe jimfb yes layout thrash reads executed repaint ie render measure rerender position otherwise end inconsistent view tree equivalent tearing display technologies flicker integrated layout would fix legacy", "d": "10/2015"}, {"body": "assumption well seems like people using things mentioned already logic changing misunderstood would proposal using inside", "d": "10/2015"}, {"body": "mridgway effectively yes although consistent execution order", "d": "10/2015"}, {"body": "cc leebyron api design", "d": "10/2015"}, {"body": "using use show flickering worried using used trickier could potentially catch nt mutate dom anyway refs second render pass warn", "d": "10/2015"}, {"body": "path followed would recommend componentdidinitialdisplay something similar avoid misinterpretation something occurs didmount didupdate still little confused change lifecycle common use case cover right solution become easy discover continuing use didmount produce visible effects probably keep things way", "d": "10/2015"}, {"body": "eg perf tuning tool could isolated maybe hook similar settimeout could called deferred nonblocking execution", "d": "10/2015"}, {"body": "componentdiddisplay would better name windowed list view thing already didenter didappear transition group", "d": "10/2015"}, {"body": "using componentdidmount used componentdiddisplay trickier could potentially catch componentdidmounts nt mutate dom anyway refs second render pass warn warning might little weird since dom mutation might behind sort ifcheck", "d": "10/2015"}, {"body": "perf optimization almost use cases using new hook something additional much boilerplate ideally work done initial view already done something like might batched properly difficult reason regard things call also ca nt schedule appropriately scheduled reconciler additionally queueing callbacks traversing invoking significant overhead self scale prefer requiring allow react collect second pass make initial mount really quick even check property first pass", "d": "10/2015"}, {"body": "think lot users assumed working begin said current uses method using newly proposed api behavior changed introduce new lifecycle method current implementation instead unfortunately already taken imo makes sense current behavior", "d": "10/2015"}, {"body": "problem one direction leads broken behavior one slower change api behavior apply codemod potentially break everyone", "d": "10/2015"}, {"body": "sounds like could make sense perhaps sounds like part displayedhidden ie like cssproperty might missing something sounds kind errorprone postpone things paint possible raceconditions careful say store updated rendering data subscribing also curious proposed intuitively things would normally take immeasurable time relation rendering also seems would want fire networkrequests early possible ie rather later rather delay painting network request curious usecases would measurable benefits settimeout would sufficient", "d": "10/2015"}, {"body": "intuitions often wrong oct andreas svensson notifications githubcom wrote componentdidpaint sounds like could make sense perhaps display sounds like part displayedhidden ie like cssproperty might missing something sounds kind errorprone postpone things paint possible raceconditions careful also curious proposed intuitively things would normally take immeasurable time relation rendering also seems would want fire networkrequests early possible ie componentwillmount rather later rather delay painting network request curious usecases would definite benefits settimeout would sufficient reply email directly view github", "d": "10/2015"}, {"body": "sebmarkbage liked idea available feature necessary react", "d": "10/2015"}, {"body": "sebmarkbage mentioned elsewhere purposes could api like say versatile intuitive perhaps would queue callbacks execute react finished processing ie events transactions etc edit course usecase instead want displaypaint", "d": "10/2015"}, {"body": "syranide would like avoid global apis make tied component better control scheduling deferring execution offscreen content etc would work lacks pitofsuccess factor something extra work something best practice always also requires least function call allocating bound callback point crazy optimize initial render since critical one also encourages imperative pattern managing async actions", "d": "10/2015"}, {"body": "thisdefer callback would work lacks pitofsuccess factor sure agree entirely unless read documentation know understand intended purpose common pattern js deferring something extra work something best practice always agree works mount updates nt worth supporting initial subscription stores basically nt equivalent unmount since nt want block either seems equally important page switches also requires least function call allocating bound callback point crazy optimize initial render since critical one seems petty context instancing components rendering components setting dom drawing dom every component going need use want makes sense go way seems like partial solution", "d": "10/2015"}, {"body": "could allow function returned gets deferred one place document rather case use situations use could make things confusing also returning makes obvious stuff completed", "d": "10/2015"}, {"body": "primary component strategy react never web components runs counter functional paradigm react providing mostly imperative api nt help solve problems building apps fact makes difficult little nothing solve integration problem libraries nt solid story around serverside rendering nt help crossplatform environments like react native overhead implementing full dom spec going sidestep anyway unlikely facebook ever use web components scale therefore unlikely priority us lot excitement web components interop layer mostly unwarranted imo however like support users made best effort try support interop edges would like support much possible without compromising api vision react turned spec incomplete regard things like event delegation still major changes pushed various sides mozilla polymerchrome final incarnation revert support already added eg support event handling shadow trees terms strategy go forward nt exist try improve interop react reactlike component layer instead talked members popular ui frameworks seem feel fact probably better chance implementing solid interop user land", "d": "10/2015"}, {"body": "recap two types approaches terms ui frameworks allows build components using dom framework leveraging dom component model declarative format eg using proprietary nonstandard component model nevermind extending dom since care code reusable encapsulated highly performant interoperable like native html elements eg basically ones relying first approach build frameworks top incomplete specs potentially dangerous ground also wondering ever real performance advantage terms browser optimizations first approach coming back interop subject question think wrapping components rather exposing different wrapper particular ui framework asking context supporting older technologies want benefit lastly share insights imperative api refers guess related html declarative format traditional declarative databinding expressions", "d": "10/2015"}, {"body": "cosminnicula key difference custom elements web components often expose imperative api example consider video tagelement relatively declarative attributes like also bunch imperative functions eg functions play nicely declarative application touched bit recent blog post try support interoperability possiblepractical web components support purely declarative api via html attributes already work reasonably well react regards wrapping react components custom elements vice versa yes wrapping current recommendation anyone requires interoperability since programming models different hard seamless api automatically generated recommendation write wrapper class hand rather using automatic wrapper library ultimately choice whatever works possible wrap custom element reactwrapper use react application vice versa", "d": "10/2015"}, {"body": "cosminnicula consider open source project adopted many big companies competitors facebook proprietary nonstandard adoption two technologies might hint one solves real world problems better", "d": "10/2015"}, {"body": "borisyankov simply react oneway data flow component model never converge towards standard reconciliation two possible interoperability level way react ideology could considered standard actually supported really think react solving two important problems ultimately drives adoption dom performance code complexity however might get substantial performance boost google", "d": "10/2015"}, {"body": "cosminnicula misconception webcomponents accelerated mobile pages slow path deferred last possible point intentionally opposite giving performance boost make everything else isolated best could interop layer start component however inside web component still slow dom react faster inside nt mean react render web components output potentially placeholders serverside rendering amp document", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "mark", "d": "10/2015"}, {"body": "majorye intent get notifications subscribe button top right issue", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "reactlink getting deprecated per assuming valuelink something find useful encourage publish npm module git repository provides functionality wrapper component people use since something plan supporting core going go ahead close issue", "d": "10/2015"}, {"body": "dupe", "d": "10/2015"}, {"body": "nt recommend inheritance building components", "d": "10/2015"}, {"body": "arcanis inheritance gets pretty awkward etc sometimes used decorators need share multiple methods react component classes though usually end finding way without", "d": "10/2015"}, {"body": "spicyj really documented edit oh sorry misread comment read plain classes fine inherited classes nt right well still sounds bit strange restrict language features yep see mean however solved using static properties already supported babel objectassign extend parent", "d": "10/2015"}, {"body": "inheritance nt imo nt work well building react components jordan explains many people become accustomed using oo inheritance tool primary means abstraction application worked java shop know talking personal opinion classical oo inheritance implemented many popular languages often best tool jobs let alone jobs situation approached even caution inheritance used within framework paradigm uses functional composition primary abstraction react certain patterns want prevent many strange things people come combining render inheritance nt make sense addressed via simple composition also risk making mutation convenient might make sense start classes simply better syntax react component creation intentionally limiting use cases limiting inheritance depth making react base class methods final used react components course nonreact use classes would nt restricted use case sure ca nt simple composition", "d": "10/2015"}, {"body": "read plain classes fine inherited classes nt right well still sounds bit strange restrict language features inherited classes fine per se react wo nt go way encourage use inheritance noted use convenient good reason custom logic use composition better fact facebook written ton react components nt use inheritance great testament", "d": "10/2015"}, {"body": "wanted make little followup tried using inheritance using composition instead well really like actually able achieve things even much cleaner way need override behaviour add func prop overridable components guess far concerned issue closed still think would nice still add default methods prefer inheritance something would fight thanks lesson", "d": "10/2015"}, {"body": "true believe composition inheritance think original question still valid tempted leave issue open would make sense implement default empty lifecycle methods base reactcomponent class main reason see allows static tooling better reason code rather forced rely implicit knowledge instance could mark method always whenever overriding method spell wrong function gets removed parent reactcomponent future version whatever get tooling support also allows code assist give lifecycle methods ask suggestions things override etc might even improve performance keeping implicit classes similar within core overall think would still good change even people using composition inheritance", "d": "10/2015"}, {"body": "stated fakerainbrigand stackoverflow variable set module code evaluation time therefore never updated since babel executes module transpilation even running mocha test suite variable remains false even setup quick workaround indeed mutate jsdom ready js import jsdom jsdom globaldocument jsdomjsdom globalwindow documentdefaultview require reactlibexecutionenvironment canusedom true better fix would rely function instead global static variable cc", "d": "10/2015"}, {"body": "investigation solved problem hooking mocha execution flow using command line option created file instantiating jsdom environment exposing nodejs one globally js setupjs var jsdom require jsdom globaldocument jsdomjsdom globalwindow documentdefaultview globalnavigator globalwindownavigator setup file executed mocha babel compilers evaluate react module code basically run mocha suite way related", "d": "10/2015"}, {"body": "thanks suggestion indeed fixed issue actually wanted something like anyway would nt setting dom every test", "d": "10/2015"}, {"body": "ok sounds like guys figured future reference try keep github issues tracking bugs react core usage questions better addressed stackoverflow", "d": "10/2015"}, {"body": "thanks jimfb nt usage question posted error react said likely bug framework please report immediately", "d": "10/2015"}, {"body": "thanks stenrap since changed message", "d": "10/2015"}, {"body": "tests worker threads misleading regard", "d": "10/2015"}, {"body": "elaborate get error checkbox originates", "d": "10/2015"}, {"body": "timbur currently need expose document window globally requiring react see comments", "d": "10/2015"}, {"body": "spicyj done think js setupjs import jsdom jsdom globaldocument jsdom globalwindow documentdefaultview globalnavigator globalwindownavigator script loaded via command line argument", "d": "10/2015"}, {"body": "actually hold think know", "d": "10/2015"}, {"body": "yep thanks nudge right direction spicyj dumb import setup imported another script imported another script imported react", "d": "10/2015"}, {"body": "turns mdl js library trying mutate components react outside mdl components classes upgraded within react fiddling mdl found real solution problem call within andor problem related react sorry guys noise may caused due post repository beginner sweatsmile", "d": "10/2015"}, {"body": "future reference place issues react questions asked stackoverflow irc react discuss", "d": "10/2015"}, {"body": "simulate simulates event within react event system use ordinary similar want create dispatch real browser event", "d": "10/2015"}, {"body": "trying catch scrolls whole page need attach scroll event handler hand see also", "d": "10/2015"}, {"body": "talking something like javascript export default class mypage extends reactcomponent componentdidmount windowaddeventlistener scroll e gt consolelog etarget tried nt work also tried javascript export default class mypage extends reactcomponent componentdidmount thisrefswrappergetdomnode addeventlistener scroll e gt consolelog etarget nt work either parent components use dunno makes difference", "d": "10/2015"}, {"body": "meant former nt work hard imagine could react problem", "d": "10/2015"}, {"body": "way check swallowing event", "d": "10/2015"}, {"body": "ddaza add end listener enable capture mode", "d": "10/2015"}, {"body": "auto bind behind scene classes bind", "d": "10/2015"}, {"body": "see thank much", "d": "10/2015"}, {"body": "yeah probably add warning", "d": "10/2015"}, {"body": "thanks spicyj think understand warn method missing double factory probably baffling one runs appreciate help sos", "d": "10/2015"}, {"body": "nativeevent browser passes us properties nt right anything react", "d": "10/2015"}, {"body": "looks like issue browsersync", "d": "10/2015"}, {"body": "think related owner biggpsbuttonelement component expecting ref appear component parent ref attached owner ben mentioned issue opened closing bug react read refs documentation please ask usage questions like stackoverflow github issues reserved tracking bugs react core", "d": "10/2015"}, {"body": "aha class extends class order fix changed extending class also", "d": "10/2015"}, {"body": "jimfb docs function property accept", "d": "10/2015"}, {"body": "think problem stems class trying js constructor props super props thismapcontainerelement thisbiggpsbuttonelement think valid use case using refs like work clear reactowner", "d": "10/2015"}, {"body": "currently refs organized based owner component whose render method stack time element created reasons like one unpredictable trying get rid uses owner string refs basically last one look deprecating completely sometime best workaround move elements render instead", "d": "10/2015"}, {"body": "known issue css shorthand expansion recommendation list explicit property rely shorthand usually bugs surface update initial render simply creates inline style part setting innerhtml updates work individual properties set update notice changed set property since shorthand clears property see discussion", "d": "10/2015"}, {"body": "benchmark tool library authors nt know internals different implementation zero value numbers especially overall time really nt like overall time library authors using easily track regressions benchmark testing fast children reconciliation algorithm simple nodes without attributes styles events also problems benchmark example dom operations dirty nodes way much faster chrome add raf iterations difference libraries way much smaller dom ops significantly slower also infernojs using caching creates html nodes faster possible simple loop sure forms caching good real use cases certainly win microbenchmarks experience react performance good enough almost use cases dynamic spa ps author benchmark", "d": "10/2015"}, {"body": "cosminnicula react virtual dom diffing things like guaranteeing node particular typekeypathpair appears first second render dom nodes reused thus preserving imperatively added children etc serious expense inferno nt incur using simple templating throw away nodes inconvenientexpensive calculate absolutely minimal diff one many key differences one might argue performance differences exceed value additional features react different argument hard know one way practice react pretty fast realworld applications think features support valuable use perf tests regression testing compare frameworks post touches topic detail", "d": "10/2015"}, {"body": "myth busted thanks", "d": "10/2015"}, {"body": "serious expense inferno nt incur using simple templating throw away nodes inconvenientexpensive calculate absolutely minimal diff one many key differences explain mean inferno nt throwing away keyed nodes reason inferno fast leverages concept virtual fragments chunks virtual elements value diffing rather vdom diffing also allows inferno recycle dom nodes nt precache nodes anything fancy associated virtual fragments inferno still development definitely nt throw away nodes cases know recycled dom cloning nodes new many frameworkslibraries use concept extensively improve performance angular example note author inferno", "d": "10/2015"}, {"body": "trueadm mean foo documentgetelementbyid app documentgetelementbyid widget innerhtml retained infernorender documentgetelementbyid app today inferno retain widget retaining widget important allows people mount nonreact stuff react render tree critical interoperability libraries even fixed difference done cool encourage pursue ideas better yet please contribute react core certainly dropin replacement", "d": "10/2015"}, {"body": "leverages concept virtual fragments chunks virtual elements value diffing rather vdom diffing trueadm nt know means help understand", "d": "10/2015"}, {"body": "spicyj hoisting jsx render function using triple equals equality elements rather walking vdom sort similar ember glimmer stuff", "d": "10/2015"}, {"body": "spicyj really hoisting jsx diffing jsx although similar glimmer inferno pseudo jsx case although changing open jsx form near future something like value gets parsed precompile tile fragment looks like fragment thing diffed simply checks templatevalue templatevalues one value represents expression original jsxlike input difference expressions update value depending enum type probably wondering fills templatetype templateelement well first render fragment gets constructed template function template function also generated advanceprecompile time basically vdom representation fragment may look fills templatetype expression templatevalue passed way easily determine update dom efficient manner possible fragment updated fragment different template function first fragment either recycled replaced fragments keys handled sorted like vdom implementation would work essentially call fragment would apply jsx root return operation root fragment key implementation translates something like something operations far optimal imperative dom api without making experience hard debug making developer apisugar syntax nice pleasure use thus jsx direction also alternative declarativefunctional way creating fragments templates interested seeing later code seeing ideas might feed back react would recommend checking branch", "d": "10/2015"}, {"body": "react value becomes essentially react compares objects nt thing", "d": "10/2015"}, {"body": "somewhat similar different approach given somewhat large vdom tree creating awful lot objects simply diff chuck away plus traverse nonoptimal object built inferno basically take advantage monomorphism improve performance simply creating single object might represents tens hundreds vdom objects big difference create objects via template compare expressions passed fragment gain performance benefits react hoisting elements also downsides approach happy take slack somewhere better discuss depth like intention make inferno compatible familiar people using react thus api lifecycle events took approach tailored towards performance dom something got keen internet mobile web technologies dig work react guys nt come react jsx doubt anywhere near much interest stuff kudos", "d": "10/2015"}, {"body": "got thank", "d": "10/2015"}, {"body": "cc sebmarkbage", "d": "10/2015"}, {"body": "could potentially bail return state object probably would mutate bad practice anyway returning nice lets accidental implicit returns continue makes union type returning also nice types declare nullable sure pattern encourage check manually though exists let avoid reconciling based previous state next state always bail reconciliation thing bailing calculating new state value expensive calculate btw imo rn event systems nt fire multiple events batch fire list events single callback like ios touches", "d": "10/2015"}, {"body": "nt much context easily determine whether bail nt know state changed whether state change could change much easier write code near call cohesive way rn event systems nt fire multiple events batch fire list events single callback stretching scenario arises handling two different types events nt grouped single callback like network response touch event rn may batch event loop", "d": "10/2015"}, {"body": "btw argument also triggers rerender", "d": "10/2015"}, {"body": "spicyj yeah noticed kind want way schedule callback run pendingstate queue processed time transactional callbacks invoked think fun idea might reasons ship kind sailed", "d": "10/2015"}, {"body": "discussed possibility tricky may encouraged sideeffects leads imperative way coding optimizations add fragile assumptions could affect funnel ensures nt assumptions could add context seems like need information something happened system might relying much imperative programming already ie leaky need rely imperative style probably better putting instance variable instead using would optimization possiblerelevant pure patterns", "d": "10/2015"}, {"body": "writing pulltorefresh component looks scroll event scroll position negative user pulling want rerender refresh indicator updating component state state update happens depend used transactional version scroll position positive however know nt need state updates code roughly looks like js onscroll scrollposition scrollposition gt return thissetstate state gt refreshing statetouching amp amp someotherstuff progress calculateprogressfromscrollposition scrollposition would luck needed look piece ex whether user touching scroll view addition see could return early sure would bail since fields mutable values think would need know state change possibly extra context info like scroll position philosophically also believe funnel may always best place optimizations heuristic relevant regardless component updated combination funnel makes lot sense thinking principle high cohesion intuition optimizations belong closer call reason avoid rerendering pulltorefresh component usually wraps listview iterates row items determine anything changed application efficient function identity equality checks old new row items since use immutable data structures general case people using component may expensive check may always return case react would proceed reconcile row components could avoided updating pulltorefresh component would optimization possiblerelevant pure patterns yeah think looking proposals think earlier idea bailing object returned really appealing especially true want handle event without always changing proposal guess would call", "d": "10/2015"}, {"body": "philosophically worried multiple ideal would something like way follow possible path could effected state seen way many patterns effectively lead js handleclick thissetstate gt dosomething gt thissetstate gt thissetstate ihopethisdoesntfireinthemiddleofsomething thissetstate yet covered abstractions hides state closures constantly relying implicit action traced state changes take shortcuts sure would bail shouldcomponentupdate since props state fields mutable values react nt work properly mutable values rely props mutation triggering deep state update consistency ie component mutated value needs call parent updates flushes additionally react bails try reuse reactelement mutated props means mutation work always get new props object parent rerendered therefore solution work change due positive scroll position keep setting state also rerender mutated props way state transitions described completely terms reducer optimizationsshortcuts completely isolated", "d": "10/2015"}, {"body": "mutable values code nt rely deep updates meant something like always get new props object parent rerendered pretty helpful know rely actual use case helps lot still want able use signal update pretty convenient", "d": "10/2015"}, {"body": "jimfb amp spicyj hello thought giving pull request issue understanding correct expect warning message needs printed input dom element gets value digging sourcecode input element mapped javascript file understanding correct need check value input yes need give warning correct sorry noob question thanks help", "d": "10/2015"}, {"body": "antoaravinth sounds roughly correct want thing since also controlled inputs", "d": "10/2015"}, {"body": "jimfb thanks response give pr probably day", "d": "10/2015"}, {"body": "antoaravinth may find diff helpful since almost exactly trying warning message say something like prop null consider using empty string clear component uncontrolled components also fyi code freeze change land ready merge stuff welcomed take stab likely need rebase ready merge stuff", "d": "10/2015"}, {"body": "jimfb thanks help give pr day rebase necessary release nt problem", "d": "10/2015"}, {"body": "jimfb actually made changes give run testcases looks like new change breaking least cases share error message one test case got failed posted", "d": "10/2015"}, {"body": "antoaravinth error basically saying test nt expecting warnings fire warnings printed either add checks warnings linked diff modify test nt warn eg update test pass instead either way least one test verifies warning fired correctly least one unit test passes undefined shows error fire", "d": "10/2015"}, {"body": "jimfb thanks help given pr let know anything else needed side", "d": "10/2015"}, {"body": "fixed thanks antoaravinth", "d": "10/2015"}, {"body": "think use reactchildrentoarray key resulting properties build map", "d": "10/2015"}, {"body": "spicyj ah okay thanks", "d": "10/2015"}, {"body": "would interested know going recommended way abstract common behaviour arrived point writing decorators feel somewhat apprehensive future little unknown said seem increasingly popular especially absence mixins personal vote would support mainly nt appear many viable alternatives perhaps something based multiplechained inheritance seems much less common also add reactredux connect list popular implementations number interesting discussions topic specifically", "d": "10/2015"}, {"body": "reference", "d": "10/2015"}, {"body": "please nt confuse decorators syntax higher order components pattern even decorators going end es nobody take functions higher order components", "d": "10/2015"}, {"body": "mixin system wasis flawed one way cases higher order components solve common use cases mixins would recommend reading sounds like solution utilizes higher order components without actually looked likely solution would recommend problem normally wellsolved mixins wellsolved hocs andor sideways data loading would love hear use case please open new issue describes use case", "d": "10/2015"}, {"body": "yes trigger event want manually dispatches event nt anything fancier", "d": "10/2015"}, {"body": "spicyj think nice react supports chain events browsers writing numericcomponent keydown prevents keys nice test user type keys prevented onchange wo nt call think", "d": "10/2015"}, {"body": "lovedota consider using native dispatchevent working actual browser react wo nt get business simulating browsers work different native events behave", "d": "10/2015"}, {"body": "sebmarkbage took shortcut key top level components manually pull data flux stores render methods pure thus ideal much convenient alternatives use flux wrapper route wrapper component straightforward flow props without convoluted clonewithprops calls willing review way things good behaviour consistent env quick workaround us would produce new component instance every time parent renders like third fiddle feels like could even optimize future would break although nt see would optimize without making pure render strategy default one seeing people deeply mutate props edit going use cloneelement everywhere thispropschildren inclusions", "d": "10/2015"}, {"body": "well ok case disadvantage libraries like elm", "d": "10/2015"}, {"body": "spicyj currently negative effect production code warning using syntax js import react component react class whatevsss extends component sure effected", "d": "10/2015"}, {"body": "fine prod mode skip check code break triggering warning", "d": "10/2015"}, {"body": "spicyj warning due issue resolved correct plan release soon", "d": "10/2015"}, {"body": "modern browsers supported feature bootstrap tell use following code snippet cdn mdn introduction", "d": "10/2015"}, {"body": "cc zpao contrary popular belief get fairly frequently related", "d": "10/2015"}, {"body": "related good way replacing whitelisting attributes custom attribute sense", "d": "10/2015"}, {"body": "yea related underlying goal issue really get whitelist much possible entirely would good nt know called explicitly mostly problem", "d": "10/2015"}, {"body": "terinjokes yeah comment directed conversation last team meeting figuring priorities remainder year basically whole ton attributes keep adding oneatatime wasam pushing us solve wipe past present future single swipe slightly nontrivial change several dependencies thus demoted prioirty list p", "d": "10/2015"}, {"body": "toddparker reading data right react much faster angular ember test competitive backbone times device react time pc cable pc nexus", "d": "10/2015"}, {"body": "spicyj yeah react performed quite well compared angular ember particular comparison seems promising updated chart", "d": "10/2015"}, {"body": "polymer", "d": "10/2015"}, {"body": "polymer nt todomvc example could use testing initial research time polymer heavy polyfills required know team lot work improving may quite bit better", "d": "10/2015"}, {"body": "toddparker landed updated polymer todomvc implementation master would like take stab benchmarking similarly interested figures", "d": "10/2015"}, {"body": "toddparker versions seem kind date released almost year ago release dates versions infographic current stables ampersand release date specified latest sep angular dec latest sep backbone feb latest sep ember dec latest sep react dec latest may like addyosmani said polymer missing comparison think due update existing listed libraries well", "d": "10/2015"}, {"body": "toddparker able test polymer todo implementation ease", "d": "10/2015"}, {"body": "issue still closed sebmarkbage would appreciate input get moment", "d": "10/2015"}, {"body": "jonkoops yep old article planning longterm keepers benchmarks since actually time consuming set run data mostly hoping spur libraries like react take performance seriously publish form benchmarks developers could compare performance characteristics framework sadly nt much movement front hoped picked todomvc gave us functionality implemented across multiple frameworks however examples set learning performance lot work concat compress files better replicate realistic production environment examples todomvc uncompressed compressed production version server would lot easier run automated testing tabulate results new version released think worth looking", "d": "10/2015"}, {"body": "right closing issue quickly dismissing nt look great kind nt care frameworks comparison react care impact going context building importantly building need numbers", "d": "10/2015"}, {"body": "right closing issue quickly dismissing nt look great kind nt care frameworks comparison react care impact going context building importantly building need numbers kevinsuttle opinion benchmarks almost universally skewed towards measuring specific synthetic micro tasks intentionally micro benchmarks trivial also meaningless context benchmarking realistic workloads frameworks incredibly hard also meaningful thresholds benchmarks consistently overlook vs largely irrelevant vs enormous difference often lumped result without consideration fair weighting either also consider developer time manual dom interaction always win hands never see someone apply largescale apps consider cost implementing maintaining uis made different frameworks well given little developer time find react components always outperform manual dom interaction probably look feel lot better also far maintainable less errorprone quantify benchmark take grain salt consider many angular projects time encounter problems performance resort various hacks get performance back acceptable levels react users may face problems would argue problems far intuitive solve react solutions largely come much robust developer time important lack developer time usually causes performance problems crop first place anyway want know whether react good choice would suggest quickly prototyping various aspects ui feeling factually accurate results going get personally always choose react model advantages developers code base far important encounter demanding usecases react nt performing well enough easily break react briefly without degrading quality code", "d": "10/2015"}, {"body": "right closing issue quickly dismissing nt look great kind nt care frameworks comparison react care impact going context building importantly building need numbers numbers comment explains particular set number tells story", "d": "10/2015"}, {"body": "ran issue happily converting components stateless shorthand version way awesome tests succeed anymore findsrcyrendereddomcomponent x methods work anymore suggestions test", "d": "10/2015"}, {"body": "actually made component wraps stateless component regular component without wrapper html added output use normal testing facilities", "d": "10/2015"}, {"body": "stake posterity like post get little testing framework work nicely stateless components pretty would love first class hooks instance tree traversal related build better test tooling without needing dig deeply react private apis", "d": "10/2015"}, {"body": "thanks posting jquense really helpful", "d": "10/2015"}, {"body": "also nt appear work checkbox inputs simulating change event checkbox modify checked status able modify currenttarget previously outlined update manually", "d": "10/2015"}, {"body": "jimfb sebmarkbage happy submit pr escaping attrs web components however seems like separate issue changes gone release candidate make difficult reason react treat different dom elements jsx onus wanting use web components attribute api way operates safely existing react behaviour including way treats custom elements changes also seem contradict said sebmarkbage primary component strategy react never web components seems odd breaking change introduced appease want use web components inside react components understand original sentiment feels like wrong solution rushed worry gone release harder argue come", "d": "10/2015"}, {"body": "breaking change get big thumbs custom elements useful today web components probably never frustrating lose semantic goodness custom elements practical reason helps developers today", "d": "10/2015"}, {"body": "custom elements support", "d": "10/2015"}, {"body": "problem actually determination developer intends using custom component assuming custom html tag become webcomponent decide non intuitive attribute behaviour lot cases custom html elements used provide meaning html based components fix would option setting behaviour reactdomcomponentjs testing custom component deciding means need custom attribute handling wrong hands developers framework assumptions could easily set component render called component intended promoting webcomponent way remove need breaking change time provide functionality want developer chosen basis", "d": "10/2015"}, {"body": "clear custom elements work react must use attribute instead custom element spec requires allow users specify arbitrary attributes including need preserve functionality custom elements conflict sebastian comment web components primary use case still best support dom technologies anyone wants use technologies goes custom elements added support consistently recommending use react composite components instead someone would like propose solution better one implemented subject constraints mentioned happy take look", "d": "10/2015"}, {"body": "clear custom elements work react jimfb may work sense rendered dom work react attributes even put inconsistency using sometimes times aside moment bigger issue none react events work etc effectively leaving react land using custom element think mikeybox hit nail head said hands developers framework", "d": "10/2015"}, {"body": "like propose wrapper component advocate solution reasons declarative magic idiomatic react nt break customelements need part react library would work would intercept child elements create new dom elements assign props unchanged dangerously set inner html could also create whiteblack list feature giving developer total control attributes handled beauty solution react already solved problem third party solution need part react library couple examples react component web component attributes live webcomponent land example actually want behave normal conversely could include prop would trigger attributeescape wrapper ignore props default escape ones want include important idea take away web components solution part react third party solution", "d": "10/2015"}, {"body": "nt personally used web componentscustom elements alongside react however reading jimfb web components primary use case makes even obvious react handling instead leave developers third party something like gargantuan suggests primary use case react developer know still put situation want use time prepared go hoops think would make sense react stay let developers decide want", "d": "10/2015"}, {"body": "jmfb custom element spec requires allow users specify arbitrary attributes think agree correct developer allowed pass parameters fine key allow enforce current state able choose problem custom html elements require behaviour used essentially developers want lose basic react element behaviour using custom element nature custom elements cover vast range intended uses simple conclusion yes right enable raw attribute mode definitely developer choice opt functionality either new component type class property setting", "d": "10/2015"}, {"body": "gargantuan allow custom elements play first class citizens effectively turned react templating system point attributeescape component destroys virtual dom eliminating react ability diffing convert virtual dom dangerouslysetinnerhtml eliminate ability parent components make decisions based children eliminate ability attach refs event handlers etc", "d": "10/2015"}, {"body": "think clearly explained one example proposal would work stress nt part react would put webcomponent inside attributeescape component said think wrong focus half baked proposal ignore wider problem others raised reacts responsibility deal web components developers choice custom elements handled addition proposal two saving graces nt break anything web component users still free implement solution finally would plead least deprecate custom elements issue warning releasing breaking change think would give wider community chance feed back change sure surprise", "d": "10/2015"}, {"body": "gargantuan per comment means elements within attributeescape play vdom rules break lots things huge problem render tree attributeescape arbitrary tree children placed inside", "d": "10/2015"}, {"body": "jimfb solution suggested gargantuan one option merits considerations probably deserves pr discussion thread point made several commenters changes related custom elements also pros cons also justified stringent standards requesting alternative solutions several us raised concerns related consistency backwards compatibility explicitness developer control specifically concerns attributes react events etc behave unexpected nondeclarative ways proposed changes think point made proposed changes require consideration given primary component strategy react never web components appreciate would apply following constraints proposed changes must break existing react behaviour regards events react attributes react events users must able explicitly specify want dom elements attributes controlled outside react explicit declarative appreciate vocal request ability support web components specifically allow attributes passed however would appeal better judgement consider change really right solution lets forget suggesting add feature fact hold adding breaking change without due diligence", "d": "10/2015"}, {"body": "think primary motivating factor allowing something simply make easier hit edge case need consume custom element wrap somehow escape hatches supposed need still might need practical reasons oct pm ben smith notifications githubcom wrote jimfb solution suggested gargantuan one option merits considerations point made several commenters changes related custom elements also pros cons also justified stringent standards requesting alternative solutions several us raised concerns related consistency backwards compatibility explicitness developer control specifically concerns attributes classname react events onclick ondrag etc behave unexpected nondeclarative ways proposed changes think point made proposed changes jimfb require consideration given primary component strategy react never web components would apply following constraints must break existing react behaviour regards events react attributes classname react events users must able explicitly specify want dom elements attributes controlled outside react explicit declarative appreciate vocal request ability support web components specifically allow attributes passed however would appeal better judgement consider change really right solution lets forget suggesting add feature fact hold form hastily adding change without due diligence reply email directly view github", "d": "10/2015"}, {"body": "think primary motivating factor allowing something simply make easier hit edge case need consume custom element wrap somehow sebmarkbage appreciate motivating factors counter points fully considered consistency backwards compatibility etc declarative code particular one things makes react great realise instance issues raised necessarily apparent change made pretty strong arguments seeking better solution raised discussion wether proposed alternative solutions right one rather wether solutions including one right one", "d": "10/2015"}, {"body": "hellosmithy better solution please propose please consider really spend enormous amount time discussing options amp alternatives spurofthemoment change ca nt hold back development indeterminate amount time point need bite bullet make changes order make react better ultimately code nt anything ca nt undone find something better future due diligence case solution think better let us know implemented best thing seen date always open new ideas", "d": "10/2015"}, {"body": "jimfb best solution referring breaks react attributes events custom elements saying considered deemed acceptable", "d": "10/2015"}, {"body": "using native attributes instead react flavors custom elements best solution seen better event support still planned blocked couple browser bugs prevent us supporting reliably event support tracked several issues notably", "d": "10/2015"}, {"body": "yes need way render nodes somehow nested react children work correctly possible map props properly thing safely map automatically attributes rest applied imperatively could either allow props least attributes automatically turns lot custom elements work attributes alone seems like decent trade", "d": "10/2015"}, {"body": "nt use custom elements affected", "d": "10/2015"}, {"body": "wont deprecate current behaviour", "d": "10/2015"}, {"body": "inprogress fork could contribute would like help one possible", "d": "10/2015"}, {"body": "zertosh anything progress point would ok nickdima pick", "d": "10/2015"}, {"body": "zpao wo nt able make progress week sure", "d": "10/2015"}, {"body": "started looking first trying grasp everything going build process figuring proceed personally big fan using npm scripts skipping grunt gulp altogether mostly avoiding plugins wrap around certain tools using tools directly see fitted react meanwhile opened pull request babel react could use compile step hope gets merged", "d": "10/2015"}, {"body": "awesome thanks nickdima build process started nice clean years ago gotten unwieldy confusing lot blame let know questions please make use gulp amp scripts fbjsscripts go npm scripts definitely useful let mostly reserve oneoffs aliasing otherwise use gulp technology aligning across open source projects reduce project specific code make easier project start improve feel free make requests happy help suspect babel wo nt take pr could mistaken could useful already solved problem nt think important grand scheme task", "d": "10/2015"}, {"body": "somewhat related", "d": "10/2015"}, {"body": "looks like closed since merged marked fixing issue cc zpao", "d": "10/2015"}, {"body": "correct thanks", "d": "10/2015"}, {"body": "hey im getting problems use new react optimisations also get things like even compile optimisations production", "d": "10/2015"}, {"body": "try add first place method make sure rendering one time probably made render times somehow", "d": "10/2015"}, {"body": "still happening fixes us", "d": "10/2015"}, {"body": "bkcore correct still happening joestrummer seems trick anticipating merge soon hope", "d": "10/2015"}, {"body": "already said comment would nt fix look", "d": "10/2015"}, {"body": "people thoughts dropping jquery favor windowfetch sort proposed actually meh game still include polyfill least focused concern promises probably new concept number people might paying close attention js think ok wanted mention think moving tutorial directory within actual react codebase definitely upsides downsides things nt change often cloning whole react repo could good nt really want put people pretty clean place start nice one tutorial board need figure fits nicely knockout idea", "d": "10/2015"}, {"body": "ha almost forgot conversation around vs agreed promises might new people might great opportunity figure explain promises short concise way winwin fair point keeping repos independent sweet glad like sound multiple tutorials build learning happy help brainstorm high level perspective could beginner tutorial components lifecycle methods composing components amp jsx intermediate tutorial using reactchildren utilities manipulating stateful dynamic children validating props w reactproptypes mixins classes inline styles advanced tutorial purerendermixin immutability performance stores reactaddonstestutils amp using test react components", "d": "10/2015"}, {"body": "helps lot thank", "d": "10/2015"}, {"body": "nt much problem except famous bug triggered famous nodes detroyed recreated using library fe threejs new one making work fine objects destroyed recreated fine", "d": "10/2015"}, {"body": "test windows problems chrome firefox firefox kind slow seconds problems edge also slow minutes ie extremely slow minutes update finishes done failures reported failed failed failed failed failed failed failed", "d": "10/2015"}, {"body": "note took test ikeyan wrote pulled react pretty much thing definitely dom thrashy sorry slow run times give us good idea looks like ok adding higher codepoints referenced outside realistically happen could deal later really need could probably drop lower number test speed things smonev thanks btw exactly looking hopefully nt deviate much", "d": "10/2015"}, {"body": "already know one ignore windows reports error line id stringfromcodepoint object nt support property method fromcodepoint msdn claims support edge however last note indicates", "d": "10/2015"}, {"body": "ran wine got done failures reported failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed failed", "d": "10/2015"}, {"body": "fyi non private use surrogates range noncharacters range also two additional noncharacters ranges unsafe unicode perspective", "d": "10/2015"}, {"body": "ps probably replaced however convinced something fixed react expensive exploitable behavior part sanitizing procedure prevent making", "d": "10/2015"}, {"body": "spicyj glenjamin issue solved currently migrating found components fail silent rendering js date object one example something thispropsentitysomedatefield following stack occurs initial rendering failed workaround something thispropsentitysomedatefieldtostring", "d": "10/2015"}, {"body": "converting string solution workaround trying render objects reactelements longer supported actually see error rendering", "d": "10/2015"}, {"body": "zpao thx answer tried reproduce problem simpler environment output looks exactly like problem related error components thx feedback", "d": "10/2015"}, {"body": "yes investigating jsx diffs using expect example currently bit tricky always go debugger", "d": "10/2015"}, {"body": "rather bake react seems like something custom testassertion reporter could fact convinced saw twitter ca nt recall project name", "d": "10/2015"}, {"body": "one jasmine currently trying understand could ported expect mocha instance", "d": "10/2015"}, {"body": "see also additionally make output failing tests bit easier read prettyprinting reactelements involved could use module wrote called inspectreactelement assertion fails like would see message implementation custom tocontainreactnodeintreelike jasminejest matcher used prints informative error message match found expected indent inspectreactelement actual isnot contain reactnode tree like indent inspectreactelement expectedchild const found findallmatching actual expectedchild return foundlength gt conclusion try write shallowrender tests way write tests using testutilsfindallinrenderedtree etc use utilities thing shallowrendered trees testutils rendered dom components", "d": "10/2015"}, {"body": "also", "d": "10/2015"}, {"body": "awesome thanks curating gaearon useful going implement expect", "d": "10/2015"}, {"body": "hmm unexpected seems really nice thanks lot", "d": "10/2015"}, {"body": "looks fantastic thanks much investigating", "d": "10/2015"}, {"body": "get mocha cool hope usable lot people since testing react shallow renderer comparing using toequaljsx joy write blog post soon", "d": "10/2015"}, {"body": "pain point thanks much", "d": "10/2015"}, {"body": "juliankrispel share heart please", "d": "10/2015"}, {"body": "bet vvo", "d": "10/2015"}, {"body": "coodoo getting uncaught error invariant violation registercomponent target container dom element package react reactdom version", "d": "10/2015"}, {"body": "shaikhussian completely unrelated error means passing container nt dom node likely undefined element looking nt exist page", "d": "10/2015"}, {"body": "last use pure dom add attribute jsx suck hah", "d": "10/2015"}, {"body": "\u8fd9\u4e2a\u9505\u5e94\u8be5 react \u662f\u8f6c\u6362\u4e86\u8fd9\u4e2a attr", "d": "10/2015"}, {"body": "say virtual dom suck", "d": "10/2015"}, {"body": "throwing example bumped today react component called subdivide really complex internal state basically lets split view recursively nested views many times like really cool watch video abstracted drop renders every nested part ui drag create destroy however another use case persisting state course parent component would responsible usual react answer case make controlled could accept pass opaque data structure works simple things inputs nt think works something complex subdivide reason think nt data structure opaque actions actually user may split panes unite panes resize panes might potentially make sense consuming application might want react things app might want ignore actions way proposing solve export reducer consuming app using redux similar reducerbased library use reduceruncontrolled component case manages state consuming app using redux let mount reducer somewhere reducer tree connect slice state would notice connected receives prop instead changing internal state actions make sense parent app choose serialize state rehydrate ignore actions even react components etc total freedom huge fan using react agree nice abstraction think hard hoist tree unless also export computation reducer case caller may choose use way like understand happening instead receiving opaque data structure also approach elm architecture takes component exports view computation update", "d": "10/2015"}, {"body": "serialize state rehydrate ignore actions even react components etc total freedom essence point ie seems like freedom things goal however nothing needs change react programming model opaque oct dan abramov notifications githubcom wrote throwing example bumped today react component called subdivide really complex internal state basically lets split view recursively nested views many times like really cool watch video abstracted drop renders every nested part ui drag create destroy however another use case persisting state course parent component would responsible usual react answer case make controlled could accept value onchange pass opaque data structure works simple things inputs nt think works something complex subdivide reason think nt data structure opaque actions actually user may split panes unite panes resize panes might potentially make sense consuming application might want react things app might want ignore actions way proposing solve export reducer consuming app using redux similar reducerbased library use reduceruncontrolled component case manages state consuming app using redux let mount reducer somewhere reducer tree connect slice state would notice connected receives dispatch prop instead changing internal state dispatch actions make sense parent app choose serialize state rehydrate ignore actions even react components etc total freedom huge fan using react agree nice abstraction think hard hoist tree unless also export computation reducer case caller may choose use way like understand happening instead receiving opaque data structure onchange also approach elm architecture takes component exports view computation update reply email directly view github", "d": "10/2015"}, {"body": "essence point ie seems like freedom things goal yes goal however nothing needs change react programming model opaque thinking last months still idea react makes things super easy eg potentially stateful children inside potentially stateful parents without coordination tradeoff things become hard eg hydrating state tree reparenting element without destroying state rewiring child state changes contribute state changes somewhere tree whether weakness react programming model fixed particular set tradeoffs essence nt understand yet", "d": "10/2015"}, {"body": "rewiring child state changes contribute state changes somewhere tree give examples useful", "d": "10/2015"}, {"body": "published react elmish example ongoing attempt understanding elm architecture niceties tradeoffs limits perhaps examples well may think show power state model parents full control interpreting child state updates makes implementing undoredo action log potentially time travel solution like showed react europe breeze see source code downside writing normal code way ceremony react basically state update flow explicit instead callbacks call static methods add stateful component child need explicitly specify handle actions course may also big performance downsides course implemented top react higher level different higher level abstraction find powerful easy use would maybe completely missing point stuff hurts brain much", "d": "10/2015"}, {"body": "want leave thoughts remembering state mounts web version uitabbarcontroller switch tabs expect component state scroll position left currently best way use redux saverestore scroll position component unmountsmounts ui component styleguide build react ui properly trivial build ui styleguide demonstrating every component every state currently nt breeze unless using redux due component internal state", "d": "10/2015"}, {"body": "ui component styleguide build react ui properly trivial build ui styleguide demonstrating every component every state currently nt breeze unless using redux due component internal state skidding might thoughts built", "d": "10/2015"}, {"body": "awesome project definitely going use", "d": "10/2015"}, {"body": "thank gaearon mention cosmos surface functionality addresses ccorcos component styleguide feel internal mechanics cosmos relevant thread namely small componenttree lib two methods generate snapshot props state component combined including state nested child components render component reproduce state snapshot recursively injecting nested state component tree generates also method nt documented pretty much function targeting existing component instance without touching props useful track state subtree app eg said touch comments thread love redux middleware create tools around app state sure api trillion holes prime conversation stuff like js reactrender el let tree reactgetstatetreeatnode el reactonstatetreechangeatnode el fn reactrenderwithstatetree tree el would enough build timetravel debugging tools yeah ryanflorence pretty much yes componenttree covers get set need onstatetreechange event far relied component callbacks update snapshots allowed control granularity persisting snapshot every state change might want maybe could wrap react lifecycle method like componentdidupdate using babel transformwebpack loaderetc attach callback gets called whenever component tree updates full snapshotting something really begs controlling entire state tree lives even child components nt know state actually internal jlongster nice part componenttree state internal components completely unaware whole part allows implement state tree persistenceplaybackundoredoetc using stock react components yes key issue dev mode debugging tool also production api sebmarkbage dev popular usecase say see local storage example used pattern persist snapshots subtree react app worked great cosmos deals state trees internally since core react people thread would great get feedback method harmless ones basically call outside component though never afraid might interfere lifecycle methods since state private normal circumstances thoughts", "d": "10/2015"}, {"body": "used hoisting pattern works pretty well definitely seems like something ought baked react somehow prefer use redux though", "d": "10/2015"}, {"body": "really interesting currently developing tool intends react devtools extension would love possible wip maybe help however nt good knowledge react source code start looking", "d": "10/2015"}, {"body": "interested advent stateless components easy way library get internal instance root component traverse tree force update important part multiple tools able hook api devtools library able register independently without interfering would like propose straw man api based devtools uses", "d": "10/2015"}, {"body": "yes please new devtools designed mind would like move integration part react core expose api key design react need maintain state component state api could force complete rerender get replay changes api require react keeping previous render memory oct pm dan abramov notifications githubcom wrote interested advent stateless components easy way library get internal instance root component traverse tree force update important part multiple tools able hook api devtools library able register independently without interfering would like propose straw man api based devtools uses reply email directly view github", "d": "10/2015"}, {"body": "sure much related issue trying use react rendering screens apple tv application uses dom nt global document window instead create documents screen push pop stack user navigates app details environment could nice support platform open separate issue edit opened separate issue", "d": "10/2015"}, {"body": "moved better articulate like add", "d": "10/2015"}, {"body": "syranide tried pure js works fine tested mac chrome", "d": "10/2015"}, {"body": "pswai testing different scenario fiddle shows problem react event system problem browser behavior hovered nodes replacedremoved", "d": "10/2015"}, {"body": "syranide ah right thanks pointing", "d": "10/2015"}, {"body": "seems bug reports chrome", "d": "10/2015"}, {"body": "skip go also filed issues", "d": "10/2015"}, {"body": "getting error using react looking code seems fail second line updaterenderedcomponent apparently set return instantiatereactcomponent", "d": "10/2015"}, {"body": "note shallow rendered components override return instead whatever normally returns still nt undefined attribute though", "d": "10/2015"}, {"body": "experiencing issue sebinsua suggestion gets past initial error amp", "d": "10/2015"}, {"body": "graue pretty sure breaks many things outside noticed moving lines directly line fixed", "d": "10/2015"}, {"body": "also affected issue think shallow rendering really cool feature testing unfortunately ca nt use components due bug", "d": "10/2015"}, {"body": "created pull request fix works someone else verify", "d": "10/2015"}, {"body": "workaround issue", "d": "10/2015"}, {"body": "hi everyone similar issue reactdomserver renders images closing client bundle comes along renderers without causing mismatch error upgraded react client server", "d": "10/2015"}, {"body": "nodu sounds like using reactdom client edit oh wait spot reported error message difference reported error message incorrect sure fixed yet", "d": "10/2015"}, {"body": "client side edit seems suggest known issue serverside renders client", "d": "10/2015"}, {"body": "nodu mean say client getting checksum warning provide simple jsfiddle demonstrates problem", "d": "10/2015"}, {"body": "yes jimfb getting difference see client server lack client", "d": "10/2015"}, {"body": "nodu error message indicates element different key clientserver specifically vs seeing attribute", "d": "10/2015"}, {"body": "syranide datareactid different img tag loss go forward", "d": "10/2015"}, {"body": "nodu still sure arrive conclusion issue checking normalized dom vs rendered dom loss go forward look place code provide keys look like ones try figure may different client server randomly generated part nonsorted db query execute server client bad idea serialized sent client json displayed without sorting json implementations maintain key ordering", "d": "10/2015"}, {"body": "syranide ah thank much previous developer using random uuid slugs generate keys", "d": "10/2015"}, {"body": "according release notes shallowcompare separate package reactaddonsshallowcompare cpojer expect codemod update use package instead thanks", "d": "10/2015"}, {"body": "oh missed yeah absolutely nt big deal except course adding requireimport right location still hard", "d": "10/2015"}, {"body": "quite swamped work jest moment something interested sending pr jardakotesovec", "d": "10/2015"}, {"body": "cpojer unfortunately also swamped pressing stuff", "d": "10/2015"}, {"body": "moved", "d": "10/2015"}, {"body": "ref custom component outer cc renders inner custom component inner cc try use ref outer cc react seems return ref wrapper around outer custom component public methods inaccessible happening custom component renders dom element ie inner cc outer cc inner cc created cloneelement refs numeric index based workaround never create ref name child definitely done react pin pointed exactly happens think framework encapsulation bug", "d": "10/2015"}, {"body": "serle simple jsfiddle demonstrates issue", "d": "10/2015"}, {"body": "ping zpao", "d": "10/2015"}, {"body": "jimfb trying think good api see glenjamin suggested way overload seems like decent idea think api like js reactonwarning warningmessage gt keep default behavior require fbjslibwarning warningmessage change behavior throw new error warningmessage", "d": "10/2015"}, {"body": "joeybaker worked hard avoid global configuration probably nt going add nt think ever going expose another unrelated update talking sebastian day discussing design ideas around good devtools api specifically want expose api could power tools like anyway related chunk discussion might possible move warningrelated logic core external module packaged react dev distribution uses devtools api figure emit warnings refactoring could easily fork module whatever wanted regards warnings since none warning logic would live core", "d": "10/2015"}, {"body": "sounds great would api look like", "d": "10/2015"}, {"body": "bumped days ago react warns put ref onto stateless component hoc user might want ref thinking introducing prop like hoc something like", "d": "10/2015"}, {"body": "use class hoc", "d": "10/2015"}, {"body": "sebmarkbage hoc class problem consumer wraps stateless component pseudocode js library function connect wrappedcomponent return class connected getwrappedinstance people really asked method return thisrefsinstance user code connect class stuff good connect function statelessstuff emits warning although technically ref nt even used", "d": "10/2015"}, {"body": "ah yes problem yungsters methods expecting forward ref use heuristic scanning nothing prototype nt need attach ref nt methods wrap", "d": "10/2015"}, {"body": "oh see nt read properly use instead seamlessly exposing methods like relay case seamless hoc anyway", "d": "10/2015"}, {"body": "nt know relay forwards instance methods take look thanks", "d": "10/2015"}, {"body": "relay nt forward instance methods open source internally mixin container codemod would safe nt want support pattern externally however hoping resolution issue inside react", "d": "10/2015"}, {"body": "solved problem making ref optin hoc", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "good morning tasks left react release external developers could pick help remaining work documentation release stuff", "d": "10/2015"}, {"body": "think point docs final release steps thanks offer though feel free jump anything else find", "d": "10/2015"}, {"body": "using since beta updating packages reactdomrender removing react peerdeps reactaddons biggest pain points experienced blixt opening prs react components tooling use see help community move forwards would superbly helpful", "d": "10/2015"}, {"body": "iamdustan replaced", "d": "10/2015"}, {"body": "mentioned super loudly", "d": "10/2015"}, {"body": "addon package technically think still bundled deprecation cycle", "d": "10/2015"}, {"body": "pretty sure done reopen", "d": "10/2015"}, {"body": "gilbox met issue could describe cause bug", "d": "10/2015"}, {"body": "something wrong code olegerm nt remember anymore", "d": "10/2015"}, {"body": "seeing quite bit little headway towards finding root cause local environment reproduce adding undefined variable function changes state component throws undefined attempts render parent node fail cool way track stuff like given giant component massive combinations child components states", "d": "10/2015"}, {"body": "usually happens interrupt react rendering cycle exception take care usually catch easily dev never happen prod perhaps related devonly cycle", "d": "10/2015"}, {"body": "johnydays makes sense way force unmount ca nt find part api current solution around render sometimes throws unmounting catch replacing element new one rendering new element like run components unmounted force children remove reference think way", "d": "10/2015"}, {"body": "yeah maybe", "d": "10/2015"}, {"body": "reference future readers bug simplest current workaround aware something like basically create global document object silence warning tests run", "d": "10/2015"}, {"body": "agree fischerl convenience actually causing issue using decorators modify props passed constructor decorator like operates original props passes constructor works fine point transformed props overwritten original props following line potentially solution could set props component instantiable javascript caninstantiate inst null inst false reactelementisvalidelement inst renderedelement inst inst new statelesscomponent component think course another way keep transformed props please let know", "d": "10/2015"}, {"body": "salier seems like ie fire event tested edge windows fires properly chrome firefox", "d": "10/2015"}, {"body": "set also silence warning seems preferable using may consequences", "d": "10/2015"}, {"body": "syranide sorry bring back dead know issue existing documentation checkboxtext input bug mentioned", "d": "10/2015"}, {"body": "sure bugs unless us use events simulate everything checkboxes appears working expected checkboxes behaving way eg logging callback tells right value even nt call", "d": "10/2015"}, {"body": "zpao yeah initial answer seems bit wrong textinputs affected noop change events know checkboxes knowledge also seems issue issue actually bug onchange always fire change initiated ca nt way discarding new value happens onchange", "d": "10/2015"}, {"body": "asked problem whenever changed application state every tag application would receive update attribute dom change even especially inputs change think probably bug application react still try produce small example problem open another issue", "d": "10/2015"}, {"body": "issue posted", "d": "10/2015"}, {"body": "officially changed coderecommendations babel", "d": "10/2015"}, {"body": "using still seeing issue using documentqueryselectorall need pass dom nodes part props get", "d": "10/2015"}, {"body": "progress made skevy considering picking look something else making progress", "d": "10/2015"}, {"body": "wrote test expecting fail based description jsx value undefined bind used function var unboundinputonchange function expect tobe undefined pleasantly passes fixed incidentally missed something", "d": "10/2015"}, {"body": "looks like accidentally fixed want send pull request test make sure nt regress nt need finddomnode call", "d": "10/2015"}, {"body": "still encountering react", "d": "10/2015"}, {"body": "bug inputs nt firing classes autobind options bind manually render add constructor use experimental property initializer syntax need enable manually babel js class foo extends reactcomponent handleclick event gt render", "d": "10/2015"}, {"body": "spicyj certainly", "d": "10/2015"}, {"body": "spicyj thanks missed discussion autobinding react release notes", "d": "10/2015"}, {"body": "nt think support running tests browser anymore right rendering bug longer applicable inbrowser test suite like sounds like want separate thing", "d": "10/2015"}, {"body": "jsx compilation handled babel think renders issue longer applicable", "d": "10/2015"}, {"body": "replaced babel", "d": "10/2015"}, {"body": "issue old nt active also appears usage question rather bug react core use github issues track bugs react core going close take radar feel free continue discussion thread", "d": "10/2015"}, {"body": "documented use fat arrow internally many docs ultimately syntax need decide makes sense given infrastructure codebase", "d": "10/2015"}, {"body": "jimfb thanks probably stick coffeescript principle everything expression", "d": "10/2015"}, {"body": "mitranim jimfb huge meteor fan several years tracker really cool fascinating created presentation demonstrating simple version tracker works even created observable streams library tracker fully transitioned using react instead blaze come realize tracker complicated sometimes simple publishsubsrcribeonchange methods easier also functional programming fans tracker comes sideeffects make sense time sometimes get would look react component point sideeffects stop subscription inner autorun well", "d": "10/2015"}, {"body": "ccorcos yes sideeffects would completely internal react fact react core could implement completely immutablefunctional way would perform mutations implementation detail since side effects would nt externally visible anyway", "d": "10/2015"}, {"body": "interesting use onchange callbacks found compatible whether using meteor tracker rxjs highlandjs etc always integrate trivially event callback react highorder component like redux keeps logic framework keeps react components pure functions", "d": "10/2015"}, {"body": "ccorcos main problem component instance gets destroyed subscriptions need cleaned component authors often forget cleanup thus creating memory leak want automatic makes easier write less boilerplate less errorprone cleanup automatic", "d": "10/2015"}, {"body": "jimfb exactly automatic unsubscription one really neat things tracker approach call reactive data source reestablishes subscription component stops calling data nothing clean", "d": "10/2015"}, {"body": "yeah really automatically unsubscribed call component unmount abstract away mixin though really different api create builtin method automatically unsubscribes unmount etc look huge meteor fan nt want talk sometimes find really hard explain stuff someone unfamiliar meanwhile using simple listeners event emitters much simple understand implement tend compatible whatever reactivity system want use", "d": "10/2015"}, {"body": "ccorcos might talking different mechanisms last checked tracker nt permanent subscriptions function establishes dependency reactive data source accessing rerun changes end subscription accesses data source reestablishes subscription one change", "d": "10/2015"}, {"body": "mitranim correct semantics automatic meteor unsubscription really automatic far simpler since literally zero api surface area common use case", "d": "10/2015"}, {"body": "ccorcos mitranim ready use tracker vuejs inspired library could try mobservable observers data accessed render disposes subscriptions unmount subscriptions kept alive applied successfully pretty large projects far mendix pretty unobtrusive data well decorates existing objects instead providing model objects", "d": "10/2015"}, {"body": "last checked tracker nt permanent subscriptions mitranim subscriptions permanent check coffee sub meteorsubscribe chatrooms subscription lasts substop interesting stuff tracker check coffee comp trackerautorun gt meteorsubscribe chatrooms subscription lasts compstop last example isnt terribly useful though something like coffee roomid new reactivevar comp trackerautorun gt meteorsubscribe messages roomidget change roomid autorun rerun roomidset subscription room stopped subscription room started subscription stopped call stop compstop function establishes dependency reactive data source accessing rerun changes end subscription subscription lasts autorun rerun reactive dependency changed computation lives stops call computationoninvalidate hook super contrived version accomplished exact thing hopefully help understand tracker works maybe also see messy get coffee comp trackerautorun gt meteorsubscribe chatrooms comp trackerautorun c gt sub null trackernonreactive gt dont let compstop stop subscription using trackernonreactive sub meteorsubscribe chatrooms coninvalidate gt stop subscription computation invalidated rerun substop invalidate stop computation compstop", "d": "10/2015"}, {"body": "ccorcos see source confusion vocabulary talking subscriptions nt mean meteor subscriptions determine data pushed server client nt relevant view layer updates subject discussion saying subscription drawing parallel traditional event listeners tracker ability rerun function dependency reactive data source case react components would component method fetches data calls mweststrate thanks example looks interesting", "d": "10/2015"}, {"body": "ah yes clever way subscription resubscribe time issues subready messagesfindfetch reactive trigger autorun rerun whenever change whats cool tracker start hide autoruns documentation certain function within reactive context could throw mixin js componentwillmount function thiscomp trackerautorun gt return thisgetreactivedata componentwillunmount function thiscompstop left magically reactive function works tracker pretty cool like", "d": "10/2015"}, {"body": "ccorcos turns somewhat wrong automatic unsubs using trackerstyle eventing still need stop listener otherwise keep reaching data sources calling unless check deprecated side note create elegant decorators make component methods reactive examples looks like javascript export class chat extends reactcomponent reactive updatestate thissetstate auth authread messages messagesread", "d": "10/2015"}, {"body": "mitranim pretty neat prefer highorder functions though", "d": "10/2015"}, {"body": "yourdeveloperfriend think depends works relative lifecycle hooks rendering delays due cascading timeouts nested components sorts lifecycle hooks called synchronously pass guaranteed called render nt studied react codebase assuming render nt called timeout likely best solution going something along lines registering prerendering hooks mark components props changed render logic calls componentdidreceiveprops calling render", "d": "10/2015"}, {"body": "jongbeau able use phantom js trigger react events nt work want test production minimized react used without tried inject react test utils page still nt trigger react events", "d": "10/2015"}, {"body": "thank jorge vytautas daukantas song xie notifications githubcom sent friday october facebookreact subject react triggering events real dom nodes nt trigger synthetic events jongbeau able use phantom js trigger react events reactaddonstestutilssimulate nt work want test production minimized react used without testutils tried inject react test utils page still nt trigger react events reply email directly view github", "d": "10/2015"}, {"body": "create danger html wrap component degrade performance though", "d": "10/2015"}, {"body": "replacestate class object stressful someone provide quick example demonstrates simply replace state vs edit decided refactor state bit nest stuff wated replace suggested jimfb", "d": "10/2015"}, {"body": "think something ugly class parent extends reactcomponent render return class child extends reactcomponent componentdidmount storelisten thisonchange componentwillunmount storeunlisten thisonchange onchange gt thispropsrender render return using would like replace state nt want listen changes parent component sure go clouddra sure solution works nt simply take latest", "d": "10/2015"}, {"body": "reactjscn site date point maintaining translation might make sense point reactjscn", "d": "10/2015"}, {"body": "jimfb thanks notification keep pace official documents", "d": "10/2015"}, {"body": "new work area", "d": "10/2015"}, {"body": "last message", "d": "10/2015"}, {"body": "ok may able work later technical blockers matter getting code written", "d": "10/2015"}, {"body": "yeah surprised numerous instances want validate prop something pass first argument", "d": "10/2015"}, {"body": "skiano nt think fundamental architectural reason nt super common pattern common pattern create element outside pass element pass function takes particular set parameters returns element allows ownerparent little control props passed nested elements since parentowner deciding class element created", "d": "10/2015"}, {"body": "get specific real reason type bit hard define actually cover cases see comments", "d": "10/2015"}, {"body": "oh forget pure function components really way distinguish functions components", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "would great", "d": "10/2015"}, {"body": "import react react import reactdom reactdom class header extends reactcomponent class main extends reactcomponent class footer extends reactcomponent class layout extends reactcomponent layoutheader header layoutmain main layoutfooter footer reactdomrender documentbody", "d": "10/2015"}, {"body": "topic streaming rendertostring rendertostaticmarkup wrote library last couple weeks calling reactdomstream new probably issues passes rendering tests reactdom currently passes preliminary performance microbenchmarks shown massively reduce ttfb large responses real world conditions ttlb goes well intend work library coming weeks hopefully including adding ability serverside render yield control back node event loop help operational difficulty ssr long pages starve small pages cpu feedback would welcome thanks eta renderer actually fork reactdom happy give back react project idea want", "d": "10/2015"}, {"body": "aickin excellent drawback using solution moment alpha happy help test also might help document kind changes made standard reactdom support streamable components regarding yielding control event loop mean streaming component node able handle requests", "d": "10/2015"}, {"body": "aickin super awesome also curious geekyme questions got serverrendered app average response times love try stable enough", "d": "10/2015"}, {"body": "geekyme think core drawback nt battle tested core reactdom code passes reactdom tests ok shape sure wrinkles find also site serves tiny pages say probably wo nt much good rendertostring probably nt big time sink changes commit mostly involves changing methods render path take stream rather return string kind documentation would like implement yielding clear nt yet yes would allow node switch requests especially good sites mix large slow pages small quick pages sites small pages get starved cpu big pages", "d": "10/2015"}, {"body": "spicydonuts thanks way could convince give try send feedback", "d": "10/2015"}, {"body": "aickin may need make sure watching right issues runs recommendations watching latency general exceptions", "d": "10/2015"}, {"body": "spicydonuts great questions top head say latency ttfb react component ttlb exceptions making sure nt get console errors connecting react client side time first paint browser", "d": "10/2015"}, {"body": "might worth moving discussion specific project project issues discussion forum like one spicyj linked avoid notifying bunch people project relevant issue ensuing discussion nt quite definitely keep us loop feel stable though", "d": "10/2015"}, {"body": "zpao apologies thanks gentle guidance thread anyone might want continue chat reactdomstream", "d": "10/2015"}, {"body": "also jsx transform replaced", "d": "10/2015"}, {"body": "spicyj afaik mixins legacy deprecated line modified nt addressed", "d": "10/2015"}, {"body": "planning change semantics instead preferring recommend official mixin solution appears", "d": "10/2015"}, {"body": "still discourage mixins use cases", "d": "10/2015"}, {"body": "ran today within redux project triggering actions unload things triggers state change rerender state bound hoc nt really opportunity unsubscribe first mentioned check nt help pattern little strange probably rework things nt triggered lifecycle event would nice least option get place nicely together", "d": "10/2015"}, {"body": "problem still exists react trying derive test case simplified updated version example", "d": "10/2015"}, {"body": "might realize filed first", "d": "10/2015"}, {"body": "spicyj react automatically preventdefault event handlers far tell dom nt update display input controlled component case rerender mute dom node stale state nt derp idiot code explicitly uses preventdefault removing fixes bug guess closed duplicate", "d": "10/2015"}, {"body": "unconfirmed nearly year closing please open new issue reproducible testcase believe bug still exists", "d": "10/2015"}, {"body": "ideas also accepts callback also returns value two solutions nt mutually exclusive callback gets component argument promise returns component work cases component value needed synchronously b similarly takes function caller supply callback gets called component instance right done though case one would wonder simply require consumer add prop element words becomes assuming callbacks get called synchronously", "d": "10/2015"}, {"body": "replaced", "d": "10/2015"}, {"body": "probably closed deprecates method", "d": "10/2015"}, {"body": "yeah planning change", "d": "10/2015"}, {"body": "wanted state stumbled upon issue first input field texts made textarea behaves differently would personally expect work way", "d": "10/2015"}, {"body": "davidreher imho bug code relying behavior even though inputs behave expect using intended sure unintended sideeffects result certain edgecases edit add using nulls instead empty strings intentionally switching controlled uncontrolled behavior fine fixed", "d": "10/2015"}, {"body": "syranide thx fix use empty strings instead null values", "d": "10/2015"}, {"body": "think horse died months ago still think things would easier reason controlleduncontrolled test simply key test props passed prop component would controlled regardless value actually given would result controlled blank input seems fit react fall pit success motto much better imho bug code curious though use case switching controlled uncontrolled states input never needed behavior practice", "d": "10/2015"}, {"body": "rymohr intention prop value always equivalent providing defaultprops etc works cases people end passing could make mean empty string discussed", "d": "10/2015"}, {"body": "spicyj good practice follow general controlled components feel like exception though sticking approach leaves bunch calls easy forget completely ignoring developer intention provide value input signaled passing prop think mentioned earlier thread red flag nobody complains surprised text input behavior nullundefined clears controlled component always textarea behavior surprises good examples passed intention create controlled component", "d": "10/2015"}, {"body": "spicyj really concerned end unintentionally switching controlleduncontrolled right perhaps something warn", "d": "10/2015"}, {"body": "going point supposed treated uncontrolled input types textarea follow behavior typetext clears turned typetextarea becomes uncontrolled last given value remains", "d": "10/2015"}, {"body": "tempted agree syranide say warn component switches controlled uncontrolled valid use cases exceedingly rare thinking almost always mistake warning cases also gives us upgrade path change behavior passing controlled textarea since sounding like best behavior reset empty string", "d": "10/2015"}, {"body": "syranide jimfb sounds like solid plan", "d": "10/2015"}, {"body": "valid use cases exceedingly rare thinking almost always mistake jimfb expanding would go far saying either mistake bad practice first controlleduncontrolled separate components really imho would impossible switch like second trivial implement uncontrolled behavior using controlled input really want nonstandard behavior best implementing component ontop controlled inputs implements whatever behavior want switching uncontrolledcontrolled point yes may valid usecases anyone serious code always avoid warning personally nt see negative sides warning", "d": "10/2015"}, {"body": "good solution sometimes number controlled lose value acceptable fix", "d": "10/2015"}, {"body": "add cents would strongly prefer fix implemented way break think would make sense continued work blocked updates coming parents", "d": "10/2015"}, {"body": "imo best way handle would allow potentially detect changes context used children rather ignoring entirely whenever context involved", "d": "10/2015"}, {"body": "use case would fetch translation messages inside component pass jed instance gettext methods messages received gettext methods would return empty strings let ui render optimistically received messages would expect everything rerender parts translatable strings updated dom need actually calls view components extract strings using xgettext case", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "spicyj label", "d": "10/2015"}, {"body": "willing nt require much discussion needs get done", "d": "10/2015"}, {"body": "glad help pain point team", "d": "10/2015"}, {"body": "upgraded app far nt able reproduce bug spicyj could anything know fixed prior release", "d": "10/2015"}, {"body": "nt fixed test case posted still problem", "d": "10/2015"}, {"body": "written companion tools testing shallow rendering gives ability diff jsx strings rendered instead react element objects", "d": "10/2015"}, {"body": "hi wondering state simulating events using shallow rendering using refs using shallow rendering help make happen still planned", "d": "10/2015"}, {"body": "syranide would good test case exercise logic", "d": "10/2015"}, {"body": "sure understand meant originally think fixes event really good first bug", "d": "10/2015"}, {"body": "spicyj scanning quickly seems like yes anyway basic issue iswas every time rerenders dom node looked would recache nodes could found", "d": "10/2015"}, {"body": "oh see think slightly separate probably get fixing soon though", "d": "10/2015"}, {"body": "spicyj fyi iirc currently big issue used places reach actual node inside parent node instead rather actual node directly probably react gets around dropping wrapping spans thus would assume", "d": "10/2015"}, {"body": "spicyj concur tad beyond beginner level sweatsmile", "d": "10/2015"}, {"body": "state", "d": "10/2015"}, {"body": "update", "d": "10/2015"}, {"body": "zpao ok thanks", "d": "10/2015"}, {"body": "also experience issue addition value contains nonascii characters happens first time value set input element placeholder contains nonascii characters code reproduces outside react page loads text failed shown beneath inputfield nonascii value nonascii placeholder documentaddeventlistener domcontentloaded function documentgetelementbyid input value failed issue react would nice react could add workaround since easily run bug using react sure workaround would though", "d": "10/2015"}, {"body": "came across thread audio amp video components supported see", "d": "10/2015"}, {"body": "yes added", "d": "10/2015"}, {"body": "get clarification whether safe access inside escape hatch regards described", "d": "10/2015"}, {"body": "available inside gets called even", "d": "10/2015"}, {"body": "recommended workaround supporting returning default props optional prop currently api returns nested structures values ideally would want defaults avoid write repetitive fragile code react docs think two workarounds require changes behaves plans handle use case workaround would course become permanent manually parse api response replacing values appropriate adding custom method call function fetch local js moduleexports reactcreateclass displayname foo getprops function getprops return bar thispropsbar baz render function render var props thisgetprops", "d": "10/2015"}, {"body": "still active issue", "d": "10/2015"}, {"body": "think fixed jsfiddle closing reopen someone reproduce fiddle", "d": "10/2015"}, {"body": "bump large need server side complicated render full web pages excluding doctype without ability render fragments section currently working around via mixins little logic final render would much simpler support rendering multiple components", "d": "10/2015"}, {"body": "impinball attempt write something similar reactdocumenttitle based reactsideeffect solve problems able meta tags headers title occasionally redirects", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "moving rule nt fix focusonmount issue deferring call using something like lodash made transitions work", "d": "10/2015"}, {"body": "abritinthebay yes looks like proposed linked stackoverflow question project", "d": "10/2015"}, {"body": "nt exist anymore transformer replaced babel", "d": "10/2015"}, {"body": "news", "d": "10/2015"}, {"body": "proptypes mostly sort maintenance mode really planning add right proptypes phased favor tools like flow", "d": "10/2015"}, {"body": "simple someone send pullrequest least part something maintain", "d": "10/2015"}, {"body": "looks like might fixed either way nt actively working proptypes feature anymore everything moving static analysis tools like flow proptypes way sure accept pr nt think something actively develop internally point", "d": "10/2015"}, {"body": "iframe onload event fired firefox chrome using firefox chrome react jsx consider upgrading react work", "d": "10/2015"}, {"body": "needed add information comment load event fired chrome firefox missing callback onload event ie handlefileload called firefox chrome put breakpoint chrome load event able see load event fired handler also called libraries bootstrap reason callback never fired thoughts please let know need share information setup", "d": "10/2015"}, {"body": "try upgrading react see still running issue please open new bug simple testcasejsfiddle demonstrates issue", "d": "10/2015"}, {"body": "jimfb running issue react also opened issue contains jsfiddle demonstrate issue", "d": "10/2015"}, {"body": "ok perfect thanks", "d": "10/2015"}, {"body": "facing similar issues fixing one one keep getting newer issues pass react server rendered output via htmlmin issues reasons vs semicolon end places checks render vs using single quotes attributes outputs vs vs weird issue vs", "d": "10/2015"}, {"body": "vectoreffect attribute please", "d": "10/2015"}, {"body": "think people requesting svg tagsattributes happen need poor model react silly use render working svg page said stuff missing tags attributes probably lots categories specific svg code working", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "spicyj hi ben speaking netbeans say impractical us add jsx support every editor netbeans every editor kind insulting must remember netbeans facebook years old leading indicator netbeans ranked table popular ide", "d": "10/2015"}, {"body": "ramyou sure nt ben intent suggest netbeans unimportant important ide provides substantial value community team maintains netbeans familiar netbeans codebase practical us learn code every ide modify ides support features like need rely ide development team add features users requesting correct route contact developers responsible preferred ide ask prioritize feature", "d": "10/2015"}, {"body": "ultimately us decide editor supports technology policy business choices facebook oracle", "d": "10/2015"}, {"body": "reactlink getting deprecated per also proptypes way favor flow something would find useful would recommend creating custom proptype validator publishing npm people use since something plan supporting core going go ahead close issue", "d": "10/2015"}, {"body": "hey hi help making point direction implement big change", "d": "10/2015"}, {"body": "note nt actually fixed warning place", "d": "10/2015"}, {"body": "yep autoclosed pr", "d": "10/2015"}, {"body": "problem", "d": "10/2015"}, {"body": "issue solved", "d": "10/2015"}, {"body": "avraammavridis spicyj wrote fixed asking durations still issue", "d": "10/2015"}, {"body": "also sorry resurrecting old thread running exact problem none suggestions worked javascript var sinon require sinon var expect require chai expect var jsdom require jsdom var react var testutils var view describe student name view function running following react old know jsdom mocha ideas wrong", "d": "10/2015"}, {"body": "stenrap please open new issue thanks", "d": "10/2015"}, {"body": "custom elements currently work broken release candidate discussion issue seems position react team remain broken see web components address issues modern web development however looks like lose semnatic goodness custom elements support spec failed even begins", "d": "10/2015"}, {"body": "clear custom elements work correctly intended release candidate custom element specification allows arbitrary attributes specified custom element design decision use attribute instead chosen custom elements spec requires us preserve full casesensitive namespace continue discussion topic issue linked another issue tracking upcoming dom technology going close issue favor", "d": "10/2015"}, {"body": "keep perf work nt need stay open separate issue", "d": "10/2015"}, {"body": "related discussion closed suggestions one making use fire change event autofill manually think close well", "d": "10/2015"}, {"body": "would nice autofillevent part react possible addon functionality going necessary virtually everyone using react form validation autofillevent script also adds dependency jquery may undesirable many cases", "d": "10/2015"}, {"body": "browser bug effects browsers little differently think angular punted trying work around fix nt mean react common thing understand wontfix super well versed various browser bug trackers would nice someone could find open issues think react team weight users would opening issue could tract tickets react developers interested", "d": "10/2015"}, {"body": "caught angular thread firefox issues password fields still open word safari bug chrome fixed", "d": "10/2015"}, {"body": "issues already tracked places", "d": "10/2015"}, {"body": "fwiw first attempt solving issue given party component nt want neither modify reach deeply use sure much adding webpack bundle", "d": "10/2015"}, {"body": "spicyj seeing similar issue cursor jumping end whenever format modify controlled input value renders code js export default class giftpurchaseform extends component constructor props super props thisstate cardnumber cardnumberchanged event thisstatecardnumber eventtargetvalue thissetstate thisstate render return creditcardparse formatted simply turns number like card number like remove call pass cursor nt jump cursor still jumps even pass next value seems modification string renders means middle edits edits modification point string cause cursor jump end", "d": "10/2015"}, {"body": "wonder react ca nt export production env react package ships", "d": "10/2015"}, {"body": "results different copy code issues long remotely supported currently addons packages work ca nt might something like future though", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "per probably dropping reactlink controlled components linkedstate mixin really nt used much even less people moving towards classes also replies thread indicates lack interest topic since linkedstate appears way guess wo nt invest lot effort enhancing mixin mostly legacy point find useful feel free create linkedstate mixin apps andor publish others use", "d": "10/2015"}, {"body": "addons shipped via npm", "d": "10/2015"}, {"body": "nt dropped addons build entirely yet though going keep open", "d": "10/2015"}, {"body": "ffxsam think would cool react sort builtin easy way components quite far apart child greatgreatgreatgrandparent communicate also trying meteor considering using context storing window widthmedia queries thread making uncertain whether go something like might safer undry", "d": "10/2015"}, {"body": "first glance really convinced use context create single entry point action creators setup components something like suggested post setup component see actions creators used app one react app per page ok could pass actions downward props many nested components painful sad feature removed", "d": "10/2015"}, {"body": "fyi totally changed direction stopped using context likely dropped mention hit infinite loop issue feel like maybe halfbaked solution building meteor using package working great", "d": "10/2015"}, {"body": "document control messaging late pretend react nt currently support context least way document caveats talk whatever future plans might im tired linking couple issues fielding questions based people reading around internet friday october sam notifications githubcom wrote fyi totally changed direction stopped using context likely dropped mention hit infinite loop issue feel like maybe halfbaked solution building meteor using meteorflux dispatcher package working great reply email directly view github", "d": "10/2015"}, {"body": "love work everyone react feel like bug higher priority fix seeing approaching year mark discovery", "d": "10/2015"}, {"body": "dancoates sorry lower priority us feel free send pull request though little hairy blog post give idea general strategy range elements listen input change events fire events either happens even happen", "d": "10/2015"}, {"body": "need sorry realise tricky one take look changeeventplugin see help perhaps caveats section docs would help folks wondering changes nt firing though guess thread easy enough find", "d": "10/2015"}, {"body": "please put tapeventplugin addons exists reactaddons package want use materialui without nodejs build want use scala js ca nt compile tapeventplugin standalone compile include react core", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "thanks adewes giving fits", "d": "10/2015"}, {"body": "anyone still seeing issues please make new issue simple repro case", "d": "10/2015"}, {"body": "decorator comment edit would nt actually logical approach using decorators would mounted functions class prototype executed automatically mounted way could implemented without giving much thought would decorator register method name predictable signature could searchable something like js globalevent click onglobalclick e compiled reactglobalevent uuid handler would sort mechanism internally searches similar keys potential implementation approach decorator js function globalevent eventtype return function decorate target key descriptor function reactglobalbind reactglobalevent eventtype descriptorvalue class component extends reactcomponent globalevent click onglobalclick e consolelog clicked full discretion basically abuse decorator pattern make nice implementation detail though nt appeal ca nt utilize decorator pattern", "d": "10/2015"}, {"body": "fwiw created abuse pattern example", "d": "10/2015"}, {"body": "blainekasten different take thing nt really like either though specifically componentdidmountetc issue maybe annotating functions method decorators still using class decorator would way go still cool core mostly get event shimming benefits normal react events give", "d": "10/2015"}, {"body": "componentdidmount issue could solved internal react implementation selling way go thought experiment", "d": "10/2015"}, {"body": "looks pretty impressive", "d": "10/2015"}, {"body": "currently issue ios workarounds work versions ios recent one anyone else experiencing", "d": "10/2015"}, {"body": "uzarubin nt heard tested seems work fine", "d": "10/2015"}, {"body": "currently using react still issue event click firing safari ie added luck please help make work", "d": "10/2015"}, {"body": "issue fixed seeing wrong behavior react still please open new issue minimal repro case", "d": "10/2015"}, {"body": "anyone else keeps bumping state change asynchronous like getdata function var self var params foo thisstatefoo bar thisstatebar getsomedataasynchronously params function data selfsetstate data data handlefoochange function value thissetstate foo value thisgetdata handlebarchange function value thissetstate bar value thisgetdata case reading state ends previous state correct solution use second callback argument run update finished changing state course waits rerender nt really wanted wanted change state fire async call turn react nt let us would love know better solution also nt make sense change handler functions deal ca nt use pending state still nt understand rationale situation sebmarkbage suggested something props nt see issue perhaps missing context complete example might help anything possibly another example confusing behaviour", "d": "10/2015"}, {"body": "systemparadox getdata function params var self getsomedataasynchronously params function data selfsetstate data data handlefoochange function value thissetstate foo value var params foo value bar thisstatebar thisgetdata params handlebarchange function value thissetstate bar value var params foo thisstatefoo bar value thisgetdata params want agree slightly ugly hackworkaround assuming understanding question correctly want", "d": "10/2015"}, {"body": "wanted change state fire async call turn reason effectively different separately", "d": "10/2015"}, {"body": "jimfb works duplicating parameter handling worse pass correct state object time spicyj arguably nt make lot practical difference harder reason separates async call handler caused hinder debugging reason complicate things separating extra turn think would really help discussion see full example time changing pending state would also lead unexpected behaviour", "d": "10/2015"}]