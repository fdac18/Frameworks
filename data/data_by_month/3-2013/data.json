[{"title": "validation working still setting invalid value model attribute", "body": "hi using backbonejs per documentation method supposed call validation automatically still sets invalid value attribute model validation nt succeed nt set invalid value model attribute right please check wrong following code javascript function var task new appmodelstask title sample task priority taskon invalid function model error consolelog error tasksave priority pass validation consolelog tasktojson model updated output priority negative object title sample task priority see output event fired method nt pass validation still object attribute value set supposed happen avoided", "num": "2446", "d": "3/2013"}, {"title": "missing comma documentation", "body": "indexhtml line comma following initialize method", "num": "2444", "d": "3/2013"}, {"title": "collection set maintaining input order", "body": "chaplin right beginning later removed backbone provided box realized backbone version maintain order updating new models inserted right position behavior purpose collection set generally useful collection reset throw away models creates scratch events easier build list views optimized performance using chaplin optimized collectionview fetch list json array server expect collection reflect input order server returns collection order know maintain order losing benefits collection set smart updating", "num": "2443", "d": "3/2013"}, {"title": "model save callback error", "body": "using backbone bit code something wrong code get model object first two parameters actual response second param nt happen backbone", "num": "2442", "d": "3/2013"}, {"title": "inheritance performance improvements", "body": "know backbone lot end day looking seems perform somehow worst common used inheritance projects please look respectively performance tests guess improve backbonejs inheritance core adopting one technologies tested make even better long run feedback also appreciated", "num": "2441", "d": "3/2013"}, {"title": "historygetfragment windowlocationsearch option", "body": "semantic cross browser reasons routes ignore search parameters routes like search amp become provide respectsearch option historystart method order respect query string paramaters within historygetfragment method useful applications use get paramaters state", "num": "2440", "d": "3/2013"}, {"title": "confusing documentation tojson", "body": "documentation tojson method confusing instead saying returns copy model attributes would say precisely returns object formed model attributes values maybe even precisely returns object whose keyvalue pairs pairs model attributes values copy attributes could mean many things including eg array attributes without values also example given confusing use backbone tojson method explicitly uses jsonstringify method instead nothing backbone know latter refers former one learn documentation via link provided however easiest route reader understand actual method tojson easier example would eg alert artisttojson firstname artisttojson lastname use anything else method focuses reader attention learning backbone without distracted thought hope could help improve documentation", "num": "2438", "d": "3/2013"}, {"title": "reset sync collection event", "body": "upgraded app bb using reset event like bb app examples todos mvc studied trigger function initial fetch collection nt work anymore changed sync event works il normal", "num": "2437", "d": "3/2013"}, {"title": "help figure inheritance", "body": "hello help please figure inheritance works lets suppose code backbonecontainer backbonecollectionextend modelsdefinition var reports backbonecontainerextend url apireportsget modelsdefinition one modelone two modeltwo three modelthree method executes receive array objects server later translated models based question empty second extend", "num": "2434", "d": "3/2013"}, {"title": "drop zepto docs", "body": "test suite nt running zepto perhaps drop reference alternative dom library docs note changelog whatever reason like keep docs ways proceed see fix breaking tests keep docs would need included minor release noted changelog currently failing tests fixed directly test suite relying pseudoselector zepto chokes open issue zepto ask imitate jquery faithfully doubt fuchs would bite nuclear option remove official support docs far projects examples section use linkedin mobile gilt groupe tzigla based relatively high profile first names list fact still called valid option docs think something needs done fwiw totally agree decision drop support nt want trip people nt actually work", "num": "2431", "d": "3/2013"}, {"title": "passing url parameter collection fetch method overrides fetched models url", "body": "want specify custom url collection fetch like resulting models fetched url attributes overridden comments customqueryquery even though custom url collection fetch call nt seem like expected behavior fixed overriding collection parse seems obvious great fix pretty sure introduced backbone new feature able pass url option model initialization", "num": "2430", "d": "3/2013"}, {"title": "push unshift broken model already exists collection", "body": "related model created could pass may fact model added collection duplicate believe issue happen well", "num": "2428", "d": "3/2013"}, {"title": "routernavigate nt update url hash chrome android", "body": "bacbone maybe something stupid works expected chrome firefox ie windows dolphin browser built browser android motorola xoom samsung galaxy chrome chrome beta android test case note seem remember history back button works note also simplified test case try understand problem actual app using twitter bootstrap open bootstrap dialog expand collapsible navbar url hash updated know would nt believe either quite certain case ps backbone awesome", "num": "2427", "d": "3/2013"}, {"title": "get response headers ajax request", "body": "", "num": "2425", "d": "3/2013"}, {"title": "possible bug setting attribute model", "body": "sure expected set changed attribute model set method change reflected changed object model soon set attribute though nt changed reinitializes changed attribute able work around passing object set method nt sure bug javascript var backbonemodelextend var new b mset consolelog mchanged object mset b consolelog mchanged object thank work edit tried passing object set function javascript var n new b nset b consolelog nchanged object try", "num": "2422", "d": "3/2013"}, {"title": "merging new collectionset creates entire new models checking existence", "body": "logic currently gets called existing model sought backbone constructs whole new object incoming set attributes calling merge attributes means methods called ghost object may one several event bindings model created expect used causing memory leaks makes debugging difficult many event listeners nt nt get called first followed", "num": "2421", "d": "3/2013"}, {"title": "cors domain issue since", "body": "hello since upgrade getting cors errors try fetch collection different domain server nodeexpress instance check place understood backbone supporting patch http method included accesscontrolallowmethods getting error miss something switch back backbone works properly thanks help", "num": "2419", "d": "3/2013"}, {"title": "upgrade backbone", "body": "upgraded backbone version found viewmake removed bug decided", "num": "2418", "d": "3/2013"}, {"title": "slice nt work correctly firefox", "body": "one products embed xulrunner ff version correctly handle way collection slice currently implemented end omitted always return empty array somehow somewhere undefined gets converted think fixed implementing slice follows", "num": "2417", "d": "3/2013"}, {"title": "upgrade issue passed collectionfetch shadows child models", "body": "recently upgraded backbone ran issue fact options specifically passed get applied model constructor collection dynamically generates fetch url using function function relies options passed fetch example get paging sorting information previously overrode fetch invoking original method set property models collection nt use want info url instead rely implementation urlroot get base url url passed collectionfetch gets passed model constructor options hash copied property default function model gets overridden function never gets called calls end talking wrong endpoint workaround quit passing url options hash fetch instead modified backbonesync pass options argument url function felt appropriate given options already passed model original new ideas better way handle would pull request welcome", "num": "2416", "d": "3/2013"}, {"title": "status code error callbacks", "body": "seems error callback api changed xhr nt seem get passed error callback longer way check status code errors", "num": "2414", "d": "3/2013"}, {"title": "backbonemodelvalidate via callback", "body": "certain cases want validate backbonemodel values something via ajax unfortunately backbone default model validation currently done synchronously possible convert callback system instead offer callback option asynchronous validation possible without overwrite model save", "num": "2409", "d": "3/2013"}, {"title": "collectionfetch docs need updated", "body": "documentation collectionfetch needs updated reflect new default setupdate behavior couple lines conflict fetch default set models collection server resetting collection arrive model data returns server collection efficiently reset unless pass set true", "num": "2407", "d": "3/2013"}, {"title": "classname function called", "body": "backbone classname function view called instead function string representation dumped class attribute element support classname get removed", "num": "2405", "d": "3/2013"}, {"title": "incorporate design goal backbonejs home page", "body": "first congrats everyone release exciting see reading jashkenas post announcing release backbonejs struck explanation given roadmap backbonejs beyond headline essential premise heart backbone always try discover minimal set datastructuring models collections user interface views urls primitives useful building web applications javascript going keep hunting specific type feature think found one please send ecosystem overarching decideseverythingforyou frameworks commonplace many libraries require site restructured suit look feel default behavior backbone continue tool gives freedom design full experience web application found clear explanation goals backbonejs project one nt mentioned anywhere documentation currently documentation explains backbonejs wants think adding paragraph one similar would help guide focus development backbonejs current new contributors hand may unnecessary superfluous currently argue contrary", "num": "2401", "d": "3/2013"}, {"title": "docs new method collectionset example typo", "body": "changed", "num": "2396", "d": "3/2013"}, {"title": "router seems call wrong function using browser backforward buttons", "body": "example code steps reproduce open example open console see defaultroute logged console click contentfactory link url change print contentfactory type id click back button presented defaultroute clicking browser forward button url change right one see another defaultroute logged console right function called workaround changing contentfactory urlroute contentfactorytype idid contentfactorytypeid everything works expected", "num": "2394", "d": "3/2013"}, {"title": "stoplistening didt work expect", "body": "var new backbonemodel var b new backbonemodel alistento b change function astoplistening time empty still hold reference callback function would lead memory leak find following commit seems still ca nt working correctly edge version", "num": "2392", "d": "3/2013"}, {"title": "collection url dominant collectioncreate", "body": "many cases want keep apis short possible removed unnecessary dependencies upper example tree would collection apple would created model keep api simple possible like give model urlroot apiapples collection url always urlroot model used set opinion url collection used calling mycollectioncreate hope example sufficient", "num": "2390", "d": "3/2013"}, {"title": "backbonehistory difficult write tests", "body": "two issues backbonehistory make difficult test backbonehistory object exist defined least one route makes wrapping start spy difficult cleanly test backbonehistorystart throws error call difficult situation want start history management model series models loaded tests models may trigger event causes historystart called couple potential solutions backbonehistory always present could use spy start prevent actual method firing could historystop method corresponds historystart would allow use aftereach every test may call historystart would put history management back state allows start called guys agree issues addressed agree solutions others make sense would happy make changes submit pull request", "num": "2387", "d": "3/2013"}, {"title": "request event ajax", "body": "request ajax method override ajax options", "num": "2385", "d": "3/2013"}, {"title": "add backboneevents getcallbackscount hascallbacks", "body": "use backboneevents extensively application sometimes would like destroy events object bindings left problem easy way check eventscallbacks variable private also changed lately notice would like avoid using priv variable least public method get bindcount check left please let know one ok guys make pullrequest thanks tomasz", "num": "2384", "d": "3/2013"}, {"title": "validate work", "body": "hello every body use validate function script nt worked js var person backbonemodelextend defaults name mustapha age occupation web dev validate function attrs attrsage lt return waw waw version gt thanks", "num": "2382", "d": "3/2013"}, {"title": "something note backbonehistorynavigate", "body": "utilizing history pushstates url requests items api via middleware items plus symbols know unfortunate space urlencoding anytime run query item would return zero results since asking space instead plus modify backbone slightly get working added totally bug strange edgecase may need aware thanks amazing framework goto last couple years", "num": "2379", "d": "3/2013"}, {"title": "nt trigger request event request cancelled", "body": "argument made triggering event request actually made ie cancelled returning example presumably backward compatibility would actually dictate adding another event fires return value truthy general event indicating actual execution request sound reasonable", "num": "2377", "d": "3/2013"}, {"title": "changedattributes unexpectedly return false", "body": "per documentation changedattributes modelchangedattributes attributes retrieve hash model attributes changed optionally external attributes hash passed returning attributes hash differ model used figure portions view updated calls need made sync changes server expecting call outcome flow control", "num": "2376", "d": "3/2013"}, {"title": "modelchanged modelchangedattributes work advertised", "body": "see lot backandforth recent changes model changes tracked published recently upgraded bitten several places code using set silent flag build change set calling change fire single event update views opinion nice feature gone would awesome came back though realize guys opinions nt want people use silent sets going argue however docs clearly state following attributes change model state change event triggered unless silent true passed option changed property internal hash containing attributes changed since last change event triggered please update changed directly since state internally maintained set copy changed acquired changedattributes per docs changed attributes reset change event triggered would expect following javascript var model new backbonemodel modelset foo bar silent true modelset bar baz silent true modelset baz bing silent true result call foo bar bar baz baz bing modelchangedattributes instead result rather simply update documentation match behavior difficult would make behavior match documentation", "num": "2374", "d": "3/2013"}, {"title": "nested attributes nt get cloned correctly modeltojson", "body": "json modeltojson consolelog jsonobservationreadat setting persists model cloned object jsonobservationreadat foobar json modeltojson consolelog jsonobservationreadat foobar", "num": "2373", "d": "3/2013"}, {"title": "trouble upgrading", "body": "hey guys two questions first one sort philosophical seems like disregarding semver conventions simple example would simply removed instead deprecating minor version change guys nt using semver could maybe elaborate versioning numbers mean maybe dislike semver question using socketio override method seems like signature changed dramatically quick fixes really help instance seems expect object expects either parameter inserting insight would much appreciated thanks", "num": "2372", "d": "3/2013"}, {"title": "backbone model save force object refresh server response", "body": "hi facing problem using save method model objects save happens correctly server method update restful api returns json version model object client object populated server json object return server need attributes values computed server example updating userid attribute server give username display username attribute model saving nt modify username want updated server response idea", "num": "2370", "d": "3/2013"}, {"title": "make bindroutes public method takes routes map attribute", "body": "sometimes developers want bind different routes mappings different reasons maybe user nt logged yet maybe user admin created mixin provides functionality support believe makes sense simply move functionality backbone supporting would simple renaming passing parameter instead using sending constructor", "num": "2369", "d": "3/2013"}, {"title": "save changes model attributes validate", "body": "hi hope someone could enlighten regarding model savevalidate workflow backbonejs thing according docs default validate called save validate returns error set save continue model attributes modified however realise call attributes hash seems attributes set executed happen according previous statements pass option works described seems contrary described change log version states model validation enforced default model save relatively new seen behaviour two apps one really simple maybe missing something nt understood docs properly bit help would much appreciated thanks", "num": "2367", "d": "3/2013"}, {"title": "change event collections", "body": "case think sort change event collections well presently collection photos shown page user navigate page collection cached user comes back previous page rendered cached collection addition fetch request fired check new image uploaded period really difficult figure changes additiondeletion occurred collection somehow work putting checks add remove listener complex depending upon data would multiple addremove function calls wo nt effective check collection change functions think simpler way achieve", "num": "2365", "d": "3/2013"}, {"title": "bad link indexhtml", "body": "indexhtml line backbone events support", "num": "2364", "d": "3/2013"}, {"title": "model object save callback nt model", "body": "sure bug something stranger going situation version line object jquery passes callback plain old javascript object looking call stack method obviously exist backbone reason nt converting response model searched google issues pages nt come precise issue though similar things got solved way nt think since mostly thirdparty libraries different success callback arity backbone make model variable actual backbone model object nt jquery version backtrace", "num": "2363", "d": "3/2013"}, {"title": "modelsave patch attributes", "body": "see example ca nt think use case sending empty bodied patch think passing attrs save patch true options automatically send changed attributes essentially feel behave thoughts instead", "num": "2359", "d": "3/2013"}, {"title": "add ability remove attributes models syncing", "body": "api omits keys values becomes problem sync model attribute removed server example problem javascript backbonesync function method model options optionssuccess model id bar foo var model new backbonemodel id foo bar consolelog modeltojson gt id foo bar modelfetch consolelog modeltojson gt id foo bar bar foo would like last line print perhaps could option would remove attributes missing server", "num": "2358", "d": "3/2013"}, {"title": "narrative regarding backbonehistory appear accurate", "body": "nt ever create one use reference created automatically make use routers routes thing created block nt appear anything use router custom router extension include backbonejs happens", "num": "2357", "d": "3/2013"}, {"title": "validation fails", "body": "validate function attrs attrsage lt return age must positive stupid work function return thisget name working run code console previews version backbone like backbonejs validation works retunr false", "num": "2355", "d": "3/2013"}, {"title": "nt trigger validate", "body": "man backbonemodelextend initialize function alert hey create thisbind change name function var name thisget name alert change name", "num": "2353", "d": "3/2013"}, {"title": "ca nt save sublime text keep getting error help", "body": "idea happening earlier today could save fine get following error error system find file specified cmd unode uc usersweberdesktopthe real sublime textdatapackagesjslintlinterjs u sloppy u indent u node u nomen u vars u plusplus u stupid u todo uc usersweberdesktophtml java projectsbrowser layouthtml dir c usersweberdesktophtml java projects path c program filescommon filesmicrosoft sharedwindows live c program files common filesmicrosoft sharedwindows live c program files amd c program files amd c c windows c c c program files ati technologiesatiacecorestatic c program files windows liveshared c program files panda securitywaagentcommon c program finished nt know happening beginner please help bit operating system thanks even reading", "num": "2352", "d": "3/2013"}, {"title": "delete request send passing data option ajaxsetup", "body": "passing field call like calling trigger request seems like fellow problem", "num": "2351", "d": "3/2013"}, {"title": "delegating events inherited views", "body": "baseview defines events delegation specifying events hash customview extending baseview also defines events also specifying event hash wrong baseview event hash overwritten events processed delegateevent documentation says use events function instead hash handle case solved something like parent render method mix parent events child guess could pretty common scenario wondering worth effort add something like delegateevents passing preserve true would add thisevents events process maybe define addevent method would appropriate hadle scenario", "num": "2349", "d": "3/2013"}, {"title": "update api", "body": "opening ticket discuss new api spilled decent amount internally original pull request implemented standalone function recent refactors reduced four line function offloading much work puts bit overhead complexity pretty hot code path resetting collection large number models wanted see thoughts could cleaned bit keep two separate whether would make sense split update something dropin plugin similar done", "num": "2348", "d": "3/2013"}, {"title": "create milestone", "body": "hello fellow contributors watchers would like propose milestone created github another way categorize track open issues pull requests milestones seldom used project think could helpful determining new features issues related eventual plans cut release whatever folks agree know areas library still room improve getting consistent releases extremely important comes tracking addressing bugs features amount time led headaches oversights documenting everything changed commitfilled months let create milestone next release figure finish line sotospeak", "num": "2346", "d": "3/2013"}, {"title": "save return rejected promise object invalid model", "body": "currently returns fails validation return rejected promise object instead available fyi zepto provide promise object default addition way notice whether fail callback called invalid error needed proposal makes sense send pull request", "num": "2345", "d": "3/2013"}, {"title": "collectioncreate saves model even collectionadd fails", "body": "many collections overridden add function collection contain duplicates duplicate defined properties model id implementation add function returns false indicate model added collection would still like able use collectioncreate create ignores return value add function saves model regardless reason change", "num": "2343", "d": "3/2013"}, {"title": "nt call remove model", "body": "may lead memory leak", "num": "2341", "d": "3/2013"}, {"title": "clean view collection", "body": "class book extends backbonemodel class bookview extends backboneview initialize options listento model change changecallback events click deletebook deletebook render class books extends backbonecollection model book class booksview extends backboneview initialize options listento collection add addcallback events click createbook createbook render collection new books collectionview new booksview collection collection collectionviewoff collectionviewremove two cleaning methods unbind createbook addcallback remove collection view unbind deletebook changecallback subview overide booksview remove method like clean view right thank code format lost sorry remove super subviewseach subview subviewoff subviewremove", "num": "2339", "d": "3/2013"}, {"title": "proposal improve collectionmodel documentation", "body": "different backbone ticket recently learned backbonemodel nt literally model class also factory function also noticed current collectionmodel documentation implies need specify property order collection create new models nt true nt specify plain backbonemodels get created therefore propose following alternative documentation override property specify model class collection contains pass raw attributes objects arrays add create reset attributes converted backbone model property set newly created models specified type property also set factory function used generate different classes models appropriate function passed parameters model constructor return model", "num": "2338", "d": "3/2013"}, {"title": "addandreturn method collection", "body": "currently add raw js literal object collection converts object model adds great unless want something model got added case ca nt use return value add returns aside chains call anyway instead setup add event handler collection wait get triggered whatever wanted added object totally different place code model got added added multiple objects course multiple events deal b use builtin collection get model back assumption added one model got added end collection solutions potentially problematic wondering add similar method works identically add instead returning would return variable inside function alternatively could break backward compatibility make work described really think would best solution understand might someone chaining", "num": "2337", "d": "3/2013"}, {"title": "set model property context fire event context", "body": "hi let say code javascript var model backbonemodelextend var context backbonemodelextend var new model attr var new context name var new context name mon change attr function consolelog thisget name mon change attr function consolelog thisget name set attr gt printed mset attr b trigger event gt printed mtrigger change attr would possible add feature one set property trigger event context thanks radek", "num": "2336", "d": "3/2013"}, {"title": "comment outdated text", "body": "defined however options directly attached would make sense either refer reader update list comment", "num": "2335", "d": "3/2013"}, {"title": "unmatched routes firing even matched route backbone first load", "body": "issue backbone firing catch routes page first load even match route supplied backbone configuration indexhtml initjs requireconfig paths jquery underscore underscore backbone router router shim underscore exports backbone deps underscore jquery exports backbone urlargs bust new date gettime require backbone router function backbone router var title title var systemrouter routerextend routes test test home notfound unmatched home function consolelog titlehtml home test function titlehtml test unmatched function consolelog page load console log following sure bug msiconfiguration thanks", "num": "2334", "d": "3/2013"}, {"title": "problem collection add merge true", "body": "understand existing issues creating models part update process order validate parse sure related line existingset attrs model modelattributes attrs options ever anything set attrs expecting parse reshaped attrs simply thrown away either attrs model case nothing needs two objects object reference setting modelattributes existing feel like missing something", "num": "2333", "d": "3/2013"}, {"title": "handling nested models collections", "body": "using pattern working nested models collections javascript var child backbonemodelextend var parent backbonemodelextend initialize function thischild new child seen pattern recommended several times quite close example documentation also seen mentioned several times issues eg caseywebdev pattern worked great far however let say need something like results problem parse called initialize intended seems strange attributes set model initialize called would expect constructor called first anything else happens would solve example things thought create child however sometimes need bind events data fetched rather nt want app need think whether data fetched never use would solve parsing need create model create helper function eg creates sets exist already ugly solution", "num": "2332", "d": "3/2013"}, {"title": "collectionomit similar", "body": "hello using backbone collectionsmodels manager aftes months using found somethig think common use implemented populate collection models rest request apply local returns models pass validation need exactly opposite need backbone return models except ones apply conditions see implement omit function underscore need somethng similar tobackbone collections thnaks sorry fot bad english", "num": "2331", "d": "3/2013"}, {"title": "backbone subviews default div wrapper delegated events", "body": "hi trying solution backbone subviews several days blocked point next example two backbone views parent view personview subview locationview templates mustache notation next see image note templates parent element backbone asignate div element default el property personview render method add locationview rendered html personviewel without loossing locationview events without adding deafult wrapping div element locationviewel tried many ways remove de subview el property always loose events subviews keep el problems want associate jquery events anybody solution thanks advance", "num": "2329", "d": "3/2013"}, {"title": "model change events", "body": "would actually great events change change attribute events contained information exactly changed something like change old hello world new world hello would also good change event would fire adddelete well", "num": "2328", "d": "3/2013"}, {"title": "decoupling backbonerouter backbonehistory", "body": "developer like use different backbonerouter instances custom backbonehistory objects think decoupling backbonerouter backbonehistory js var router backbonerouter function options thishistory optionshistory backbonehistory backbonerouternavigate backbonerouterroute navigate function fragment options thishistorynavigate fragment options make sense anybody", "num": "2327", "d": "3/2013"}, {"title": "original state model", "body": "backbone decided remove potion model set model maintenance previous state every change attribute sync remote database good performance common form use edit fields submit database may change foo halo previous foo current halo change mind use foobar previous halo current foobar need take care original state previous foo current foobar original foo lost solve kind user case", "num": "2326", "d": "3/2013"}, {"body": "thanks pointing nerdpad fix pushed", "d": "3/2013"}, {"body": "caseywebdev previous way worked intended supposed pass want validate otherwise validation happens persisting model", "d": "3/2013"}, {"body": "really seems confusing two conflicting defaults method", "d": "3/2013"}, {"body": "tgriesser understood reading docs model validate method validation fails model saved", "d": "3/2013"}, {"body": "maybe changed remembering discussing work pretty sure intended way comment line waiting attributes exist save acts think default blocking persisting invalid data block setting case", "d": "3/2013"}, {"body": "think developer perspective though confusing calling", "d": "3/2013"}, {"body": "documentation definitely wrong behavior correct agree pros old way documentation needs change since setting attributes nt validate default may want set attributes regardless persist passes pros new way code changes since required old behavior desired call calling seems little simpler conceptually save always validates anything", "d": "3/2013"}, {"body": "new way sounds good", "d": "3/2013"}, {"body": "validation works fine sending invalid values get error save valid data uncaught error url property function must specified urlerror extendurl wresult backbonesync extendsync extendsave anonymous function notice method called inside method even though defined", "d": "3/2013"}, {"body": "sounds good thanks caseywebdev philfreo nerdpad sounds like missing somewhere model collection", "d": "3/2013"}, {"body": "thanks jeffchuber fixed", "d": "3/2013"}, {"body": "found related issues exactly issue closed pr closed think option default behavior", "d": "3/2013"}, {"body": "issue closed pr closed also think option default behavior agree would make logical default behavior jeremy circumvented something like persuasive realworld use cases would nt cleaner sorting clientside even server simply providing sortorder property model would help make case give use cases feasible", "d": "3/2013"}, {"body": "caseywebdev think saying defining default comparator otherwise defined", "d": "3/2013"}, {"body": "ids arbitrary would nt recommend comparator use default", "d": "3/2013"}, {"body": "think update method actual result makes sense already naturally first however name set kind implies whatever pass arguments truth perhaps would made sense reset named set instead", "d": "3/2013"}, {"body": "persuasive realworld use cases would nt cleaner sorting clientside even server simply providing sortorder property model would help make case clientside sorting different topic opinion collections sorting logic need known client side collection could ordered id title date replicate sorting client rely server response order querying interfaces eg search forms realtime editing interfaces eg sortable todo lists perform sorting serverside client duplicate algorithm rely server response order course could add property arrays already defined order javascript redundant", "d": "3/2013"}, {"body": "molily case would nt use performing fetch", "d": "3/2013"}, {"body": "see original text would lose performance benefits smart updating provides one model addedremovedchanged need render items anew know items addedremovechanged get fresh models fresh cids incrementally updating ui impossible", "d": "3/2013"}, {"body": "seems like something similar way go imo", "d": "3/2013"}, {"body": "closing ticket move discussion back", "d": "3/2013"}, {"body": "hi things notice nt need pass since thing nt need return otherwise looks correct would mind posting fiddlebin illustrates issue glad take look", "d": "3/2013"}, {"body": "extending classes middle loop making totally meaningless test feel free write back better one", "d": "3/2013"}, {"body": "extending classes middle every test loop eg creating instance classes calling back root yes classes creation part test jsperf tests true even backbonejs way bottom speed problem calling methods alltogether", "d": "3/2013"}, {"body": "test nt show method dispatch class creationextension taking time much class definition object instantiation method dispatch mixed really disentangled case vast majority backbone apps calling fixed number times", "d": "3/2013"}, {"body": "increased number items created amp method called new different instances objects per tests main inherited constructors called times gets called among classes performance kicks calling methods baically mine problem backbone seems lot overhead slows thing saying actual happens let assume fair correct correct assuming time spent inheritance first place version tests inheritances new instances deep method calls since methods happening way tests think instances way slow updated test nt run version rather fresh test among different browsers seems like big issue backbonejs getting objects json constructing correspondent model classes would make app slow knees wrong", "d": "3/2013"}, {"body": "also test case using date versions backbone underscore", "d": "3/2013"}, {"body": "doh inherited tests guy created fiberjs would correct version urls please", "d": "3/2013"}, {"body": "find current release information", "d": "3/2013"}, {"body": "updated rawgithub version always latest ok got better issue still haunting us p", "d": "3/2013"}, {"body": "issue still haunting us real world evidence cause bottleneck application numbers opssecond real world use case fetching thousands models bottleneck going rendering things dom slowness creating instances", "d": "3/2013"}, {"body": "easy denying tackling problem p said models dom anyway showed point could step improve library creating defining idea improve constructor something going fishy due lots works also could bad design obviously say etc nt count insignificant end day count together rather arguing eachother correct guess pump creativity see root issue would make fixed right", "d": "3/2013"}, {"body": "easy denying tackling problem asking real world use case nt tantamount denial also could bad design please submit pull request proposed improvements compelling well thoughtout isolated test case constructor code used tested wild lots users performance never come issue furthermore test cases nt equivalent accurate performance test include support follow competing implementation passing custom constructor property extending static properties new constructor isolated constructor inheritance see amp deep inheritance super equivalent property things essential features without features whatever competing implementation testing comparing thing apples oranges point thanks time enthusiasm improve project tough issues evaluate testing nonequivalent scenarios simply nt prove anything conclusively course native inheritance example faster nt thing superficially similar", "d": "3/2013"}, {"body": "guys cut nt poke troll backbone models simple classes supposed got much going ticket closed hush", "d": "3/2013"}, {"body": "jashkenas negative wookiehangover point pertinent constructive one please submit pull request sorry knockoutjs fan glad libraries exist good specified points javascript var b afastclass function base baseclass custom constructor could optional fastclass add us var c thisconstructor function baseclasscall static method ctor csomestatic function surrogate way fastclass works design hence high speeds instance derrived prototype thisconstructorprototype beside calling function base baseclass set use aprototype prototype deep inheritance thissomederrived function basesomederrivedapply arguments wherever parent prototype chain defined somederrived method yes know retunring object method hence slowliness need iterate properites object inject new prototype extend extend almost similar like mine issue side guess models simple classes exactly related part", "d": "3/2013"}, {"body": "docyes thanks opening issue thing problematic querystrings ignored due handful weird real bugs querystring processing character encoding browsers decision ultimately ignore give consistent experience route handling main problem adding functionality back even optin door would reopened issues meant solve real solution say well nt use option think something acceptable known limitation backbone really need nothing stop overriding application patch back support", "d": "3/2013"}, {"body": "due handful weird real bugs querystring processing character encoding browsers nope slightest reason querystrings ignored backbone querystrings defined meaning serverside browser normally parse otherwise handle querystrings fine context real urls querystrings entirely invalid context urls backbone apps deal fragment urls sooner later even using pushstate users ie folks still fragments querystrings ca nt used compatible way better leave backbone app use nice urls instead must server side equation fine backbone ignore continue business", "d": "3/2013"}, {"body": "jashkenas bad incorrect explanation must kicking around back head responded probably reread issues liked instead trying remember exact context", "d": "3/2013"}, {"body": "hi dmitriz right documentation could probably clarified bit probably read something along lines returns shallow clone model attributes object typically would nt want use way provided better using think current example bit suited demonstrates call object get correct representation would nt case method nt defined", "d": "3/2013"}, {"body": "hi tim like shallow clone even precise see point would nt want write example practice reveals true nature tojson example docs reveal result applying another function jsonstringify maybe better example kills flies", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "change use new rather updating collection fetch could either listen event use events individually add remove items fetch pass option fetch call trigger full reset", "d": "3/2013"}, {"body": "think find bottleneck thismodel collection class way get instance params", "d": "3/2013"}, {"body": "good news waaaay fewer failing tests zepto", "d": "3/2013"}, {"body": "able make test suite pass minor changes test code closing favor pull request", "d": "3/2013"}, {"body": "use risk explain zepto attempt emulate core jquery api nt compatible", "d": "3/2013"}, {"body": "think fine obviously nt run tests lodash similarly referenced guess bit surprised little change required get tests run felt submit part discussion real concern point future zepto really ceases viable option removed docs want prevent giving people bad advice edit apparently lodash nt referenced docs anymore", "d": "3/2013"}, {"body": "currently thinking remove reference downloads dependencies section add alternate dependencies section faq something like backbone uses subset jquery api generally compatible jquerylike libraries like zepto plan using zepto please proceed caution zepto entirely faithful jquery api possible future releases may work zepto jquery replacement", "d": "3/2013"}, {"body": "seems like assert something like backbone targets tests jquery underscorejs dependencies extent jquery underscore alternatives zeptojs lodashjs supported depends libraries adherence jquery underscorejs apis testing alternative libraries provided convenience guarantee nt problem keeping zepto current test suite question really whether future maintenance necessary whether new tests written zepto mind whatever keep eye", "d": "3/2013"}, {"body": "knowtheory pass copy part point add zepto tests travis build establish responsible say still works baseline deciding whether documentation optional jquery replacement final assessment really nt want expend extra energy support fine", "d": "3/2013"}, {"body": "hi zimkies unfortunate side effect automatically attaching passed options model fixed master longer attaching see info", "d": "3/2013"}, {"body": "alright return right right returning model failed added", "d": "3/2013"}, {"body": "well returns successfully passes user validation return model working model returned passed success callback sent event guaranteed model collection already one id", "d": "3/2013"}, {"body": "eek", "d": "3/2013"}, {"body": "may issue quite sure came across trying think something two tickets", "d": "3/2013"}, {"body": "looked code definitely happening guessing one noticed less used standard", "d": "3/2013"}, {"body": "yep verified also happening probably common occurrence inconsistent worth taking account figuring duplicate model creation calls etc", "d": "3/2013"}, {"body": "think possibility attach function finish constructing model success way initialize prepared model really needs wait premodel like future fail right", "d": "3/2013"}, {"body": "briefly hinted curious constitutes equal comparing two models seems backbone assumes reference equality value equality need case currently way override behavior", "d": "3/2013"}, {"body": "think wyuenho raises really valid point maybe overridable cases like properly scoped natch", "d": "3/2013"}, {"body": "like correct concept equality backbone currently inconsistent good reason difference transient persisted models equality determined exists otherwise however relevant proxies compare reference little bit confused suppose really change place default behavior something like circumstances assumption break people able define get working circumstance without breaking every assumptions also mean every dedup merge sounds jashkenas put eek perhaps use identitymap", "d": "3/2013"}, {"body": "rereading realize may clear test page linked buttons change color box also update url hash red green blue using pushstate works every browser tested except chrome chrome beta android back button work though starting think actually browser bug backbone issue sure", "d": "3/2013"}, {"body": "working everywhere specific devicebrowser probably related devicebrowser rather backbone happens trigger hashchange actual hash rather triggering programmatically eg", "d": "3/2013"}, {"body": "put anchor tag page like suggested nt update url hash either tap screen update points browser bug think right", "d": "3/2013"}, {"body": "assume might want google around bit see others issues much without android check", "d": "3/2013"}, {"body": "ajax object set successerror handlers access also future please use irc mailing list specific questions", "d": "3/2013"}, {"body": "hi archaeron looks right though seem trip people good bit docs changed property internal hash containing attributes changed since last change event triggered since change event triggered call property cleared well however expecting different api please let know", "d": "3/2013"}, {"body": "braddunbar think issue nothing changed therefore still", "d": "3/2013"}, {"body": "say nt whats happening changed attribute suddenly empty edit braddunbar sorry nt see reply makes sense expecting would thing understand nt thank clarification edit read two messages wrong order confused", "d": "3/2013"}, {"body": "ah see change event cleared anyway thanks tgriesser sure much though perhaps docs changed", "d": "3/2013"}, {"body": "braddunbar think could help", "d": "3/2013"}, {"body": "would vote update docs", "d": "3/2013"}, {"body": "braddunbar tried samething silent true nt change event triggered whole thing work expected braddunbar tgriesser btw thank much help", "d": "3/2013"}, {"body": "archaeron silencing event nt affect clearing changed", "d": "3/2013"}, {"body": "braddunbar yes nt said since change event triggered call model set changed property cleared well however expecting different api please let know set silent true change event nt triggered nt therefore changed attribute emptied", "d": "3/2013"}, {"body": "docs say currently incorrect tgriesser points submit documentation change", "d": "3/2013"}, {"body": "braddunbar thank", "d": "3/2013"}, {"body": "addressed", "d": "3/2013"}, {"body": "example javascript var foomodel backbonemodelextend var foo new foomodel object lasts entire user session var barmodel backbonemodelextend defaults name bar model initialize function fooon something thisprintcid printcid function consolelog thiscid var barcollection backbonecollectionextend model barmodel var barcollection new barcollection barcollectionadd name bar model id barcollectionset name bar model updated id barcollectionset name bar model updated id barcollectionset name bar model updated id footrigger something outputs unexpected", "d": "3/2013"}, {"body": "thing happen happening every example replace see result better way design app would remove event binding constructor current design simply calling creates event leak convinced problem rather design issue see discussion", "d": "3/2013"}, {"body": "convinced set add problem rather design issue caseywebdev could said views collections time listener created cleaned think issue previously nt nearly common default also think common scenario model could listening events perform action nt necessarily external event object cases internal temporary model would still hang around potentially cause issues place backbone nt cleaning self figuring way create temporary model sure possible without strictly enforcing data structure cleaning events creating one would probably best cc jashkenas", "d": "3/2013"}, {"body": "worth sometimes also use model method set listeners events eg want update property b property changes perhaps antipattern strikes best place logic", "d": "3/2013"}, {"body": "tgriesser far issues sprung simple logical solutions curious see case really broken current system looks like believe love able check model existence without creating temp models ca nt see fix without significant changes rules methods used ie ca nt context lukeasrodgers model listens changes wo nt leak antipattern opinion blindly binding object outside model scope initialize", "d": "3/2013"}, {"body": "caseywebdev saying ca nt solve different way hell probably everything without even using events unintuitive external object calls long clean ca nt inaccessible temporary models may created internally nt immediately obvious also yes lukeasrodgers use wo nt problem bit strange use one type binding another model elsewhere library solution think would create model sans internally calling model determined kept around although even sure safely assumed correct called anyway saying could nt done better saying nt wrong way", "d": "3/2013"}, {"body": "solution think would create model sansinitialize internally nah besides nonstandard difficult implement still add handlers constructor", "d": "3/2013"}, {"body": "figured thought throw unbinding everything saying nt way really two options", "d": "3/2013"}, {"body": "problem hidden developer would expect initialize new models initialize models nt found currently logic one passed exactly problem fails logic called less problems", "d": "3/2013"}, {"body": "issue way knowing model really check existence fully parsed means creating new model", "d": "3/2013"}, {"body": "tgriesser case know id property based internal hash keep permodel used wrap like would nt simpler backbone models sort clunky", "d": "3/2013"}, {"body": "read issue main point structure model ca nt reliably determined eg server response looks like", "d": "3/2013"}, {"body": "thanks opening issue seeing browsers share relevant clientside code", "d": "3/2013"}, {"body": "wookiehangover thanks getting quickly seeing issue browser initialize method collection allowing cross domain previous version server running client", "d": "3/2013"}, {"body": "exact exception seeing browser console xmlhttprequest load origin allowed accesscontrolalloworigin", "d": "3/2013"}, {"body": "think found reason issue actually linked cors setup app noticed pass fetch method everything working properly really sorry nonrelevant issue", "d": "3/2013"}, {"body": "gone preferred method use jqueryzepto make elements", "d": "3/2013"}, {"body": "windheart decided upon see information reasoning", "d": "3/2013"}, {"body": "jinx", "d": "3/2013"}, {"body": "fixed thanks pointing", "d": "3/2013"}, {"body": "different related issue option tricky situation options object passed around everywhere causing unintended consequences rolled back overriding issue new sideeffect arising using option named collection configuration sure whether intentional documentation notes upgrading useful users passing might used userdefined method would turn called turn overrides method breaks code expecting function workaround alternative use passing options method instance intending preset models property alternatively property options override remove urlurlroot options situation worked around undesirable however passing option valid usecase causes undesired sideeffect question may differentiate fetch url usage model url use cases losing", "d": "3/2013"}, {"body": "thanks bringing nt think option seems like nasty side effect possibly dealbreaker automatic option well", "d": "3/2013"}, {"body": "ran issue upgrading app collections make heavy use urlroot dynamically update base url configuration object ie intended change always liked worked hope nt guidance best way achieve would great", "d": "3/2013"}, {"body": "ran surmise issue also models collection would longer automatically id appended saving model hrm", "d": "3/2013"}, {"body": "run similar problem override model longer called instead every model simply property set result collection", "d": "3/2013"}, {"body": "fixed thanks", "d": "3/2013"}, {"body": "get xhr options third argument error callback", "d": "3/2013"}, {"body": "sweet thanks", "d": "3/2013"}, {"body": "actually callback default error looks like grab second argument also add options available good grabbing headers necessary", "d": "3/2013"}, {"body": "nah pretty sure model resp options", "d": "3/2013"}, {"body": "changing worked originally way caseywebdev described broke", "d": "3/2013"}, {"body": "well call second parameter", "d": "3/2013"}, {"body": "sorry send pull changed name", "d": "3/2013"}, {"body": "simply return http error code server callback invoked", "d": "3/2013"}, {"body": "wo nt modelisvalid return true even error returned", "d": "3/2013"}, {"body": "answer would nt possible without rewriting ton internals allow async intended used simple client side validations create custom function performs ajax request accepts handler determine whether something like perform modelsave happen whatever else", "d": "3/2013"}, {"body": "already works fail model save validation server side client see changes", "d": "3/2013"}, {"body": "nt think question saving though also allowing async capability", "d": "3/2013"}, {"body": "correct let say create model html form want validate fields validated locally require ask server list valid results know client suppose caseywebdev jashkenas solutions would work case thought throw suggestion several scenarios could also useful biggest issue caseywebdev approach gets messy model events success event fire second later server returns error error event fire late would already displayed good message user", "d": "3/2013"}, {"body": "yeah jashkenas said case want save fails server validation check stuff wo nt fire success etc", "d": "3/2013"}, {"body": "thanks pointing actually way around used default passed use reset instead either way docs updated master", "d": "3/2013"}, {"body": "hi mikesnare following seems work correctly would mind posting code snippet illustrates problem", "d": "3/2013"}, {"body": "yep seeing issue either reopen example working", "d": "3/2013"}, {"body": "ugh yep bug code somewhere intermediate class views backboneview extend instead extending backboneview directly causing problem thanks response", "d": "3/2013"}, {"body": "yep merged", "d": "3/2013"}, {"body": "clicking url backbonehistoryfragment contentfactorytype idid using back forward buttons fragment stripped query string fragment contentfactorytype", "d": "3/2013"}, {"body": "backbone cantdoesntwo nt handle query strings see previous tickets discussion", "d": "3/2013"}, {"body": "hi ivanzhaowy see working correctly master well handful bugs previous versions fixed would recommend using master ca nt use master", "d": "3/2013"}, {"body": "whoops thought said working master certainly still reproduce would mind putting jsfiddlejsbin take look", "d": "3/2013"}, {"body": "seems fine", "d": "3/2013"}, {"body": "hi braddunbar used latest codes edge version still caught problem found problem edge version called merge models existed collection use called codes used judge model whether existing following line call constructor model listeners bind time lead listeners leak even worse see following test code", "d": "3/2013"}, {"body": "ping caseywebdev take look", "d": "3/2013"}, {"body": "nt bug never called model never collection never ed first place design program allow model instances created temporary variables previous implementations avoided initializing new models due complexities nt reliable solution revised version working expected", "d": "3/2013"}, {"body": "reopening since primary means handling models collections could source hard track issues really way need let people know design program allow model instances created temporary variables ivanzhaowy code looked otherwise fine nt know temporary models created", "d": "3/2013"}, {"body": "would nt contextfree even possibility factoryfunctions even get method two biggest problems currently solved temporary model nt even isolated thing without merging edit see ivanzhaowy example swapped result", "d": "3/2013"}, {"body": "yeah maybe calling model fails good measure looking forward weird event bugs answer design better way knowing wrong knowing internals work", "d": "3/2013"}, {"body": "yeah maybe calling stoplistening model fails validate good measure even would nt enough case valid duplicate model model reference lost call well pretty looking forward weird event bugs answer design better way knowing wrong knowing internals addset work nt know another option without significant rethinking nt seem ideal recent drop", "d": "3/2013"}, {"body": "issue factory function could check use parse prototype could use parse prototype could simple note docs", "d": "3/2013"}, {"body": "think would work still issue model parsed context point vote note docs becomes recurring stumbling block people pre might consider taking another look semantics would pretty big change", "d": "3/2013"}, {"body": "maybe manage dependency model good way implement dependency injection people may still something related objects constructor method model even dom events xd even called wo nt solve problem instance model created implicit must destroyed well maybe force people implement method used decouple dependencies solution seems doest accord backbonejs design philosophy", "d": "3/2013"}, {"body": "caseywebdev let know see reason pr added would nt work wait see jashkenas thinks one feel common enough case bind listeners initialize long cleaning removal nt stick around nt opportunity ever remove", "d": "3/2013"}, {"body": "property really needed model lives outside collection endpoint might want rethink url structured post create apple probably apples collection something similar passing along rather returning different resource one identified url working tree model apples collection property model either way want override url propert perrequest basis always pass along property sync functions", "d": "3/2013"}, {"body": "makes wrapping start spy difficult cleanly sure want unless trying test backbone backbonehistorystart throws error call yes starting error want get error something application erroneously trying start history", "d": "3/2013"}, {"body": "application couple modelscollections need loaded start history wanted test confirms models loaded call backbonehistorystart nt want test backbone meaning test nt care historystart gets called reason wanting spy function understand calling start application would represent error suggesting kind stop function test teardownsaftereachs could call allowing subsequent tests cause start called without error", "d": "3/2013"}, {"body": "jefflage undocumented exactly purpose", "d": "3/2013"}, {"body": "excellent thanks", "d": "3/2013"}, {"body": "also check router tests creative ways test", "d": "3/2013"}, {"body": "comment simply means developer override handle request however see fit", "d": "3/2013"}, {"body": "using done binding event objects destroyed automatically provide example trying achieve", "d": "3/2013"}, {"body": "sure mean destroy events object javascript garbagecollected language events left referring object go away", "d": "3/2013"}, {"body": "caseywebdev describe specifically usage using backboneevents bind messages specific channel websockets channel dispatcher created first bind also subscribe websocket channel whenver unbind callbacks want unsubscribe ws channel moment way easily check unsubscribe listeners active jashkenas garbage collector example actually feature problem still reference events object actually want remove reference idea still callbacks left", "d": "3/2013"}, {"body": "got either leave reference nt worry backbone events objects nt use hardly resources unless millions maintain listeners count form reference counting use private variable public api going support backbone apps use", "d": "3/2013"}, {"body": "unfortunately doesnt solve problem unmaintainable bind twice event name would need reprocude whole events logic app get count well still awful solution first private api changed actually makes backboneevents kinda magic box put stuff cant really sure whats unless reproduce whole thing probably isshould nature events dispatcher yes maybe use nt think always go whatever majority needs nt want heavy api change simple checker would help maintain backbone code better would still possible would happy write pullrequest thanks", "d": "3/2013"}, {"body": "var originalon backboneeventson backboneeventson function thiseventcount originalonapply arguments sure think something", "d": "3/2013"}, {"body": "unfortunately see discussion going nowhere clarify easy way monitor need pointed example counting usages bind counting actual bindings count external public stuff problem private magic unreachable eg ca nt easily count bindings left need reproduce whole logic mutiple layers using event callback context dimensions use events lots times application quite heavy logic need callback whenever binding keft clear way except private variable need admit events black box moment method asked would enable simple way small preview events current state even though would use nt matter bad believe tried lot solutions coming backbone project think distinguish issues done users provide lot info instead simple pleasedo requests hope request implemented would still like hear actual reason seems previous solutionsrecommendations either dirty bad thanks tomasz", "d": "3/2013"}, {"body": "hope request implemented would still like hear actual reason problem reason least backbone apps use method nt extend public api things vast majority backbone apps nt need", "d": "3/2013"}, {"body": "tomaszdurka add app simply update method internal api changes per bb release would isolated one line change", "d": "3/2013"}, {"body": "hi mustaphaelouafi thanks pointing however looks like correct way use check recent changes nt help please post code sample glad take look", "d": "3/2013"}, {"body": "hi braddunbar thanks help think ok", "d": "3/2013"}, {"body": "worries ca nt patch would incorrectly decoding plus symbols instead make sure encode plusses sending server everything work fine", "d": "3/2013"}, {"body": "al thanks opening issue think current behavior fine asis modifying canceling ajax falls outside scope backbone provide defaults since strays outside normal restful workflow backbone need extra complexity around ajax whatever reason cancelling requests etc couple options implement custom sync method either model collection needs use globally overriding backbonesync overwrite backboneajax proxies ajax entirely", "d": "3/2013"}, {"body": "hi morganick right either behavior docs updated sync plus side returns without complaint", "d": "3/2013"}, {"body": "addressed please chime implementation thanks", "d": "3/2013"}, {"body": "hi mikesnare thanks pointing correct docs inconsistent applied silent sets would recommend avoid silent sets use custom options instead also silent sets removed master makes documentation consistent", "d": "3/2013"}, {"body": "also see information removal silent set", "d": "3/2013"}, {"body": "yes definitely thanks tim", "d": "3/2013"}, {"body": "ugh whole concept silent true gone disappointing imagine index view collection imagine user something ui bulk operation models collection performance reasons seems perfectly reasonable desireable able iterate collection update model new attribute silent option even shortcircuiting described event gets triggered every single model every single listener potentially significant performance drawback well development problem every developer needs update every single event handler check silent flag code exactly described iteration fire custom event says attribute x models collection updated know listen anywhere need listen changes attribute appreciate work guys really like backbone code nt think like change silent true considered antipattern complicate code much could understand maybe dreading next upgrade thanks response btw", "d": "3/2013"}, {"body": "performance drawbacks shenanigans going change far costly triggering events bit moot point imagine listening collection change events alerting user got wrong please correct able change something like something like sorry causes headache think changes cause less long run", "d": "3/2013"}, {"body": "actually responding user desire upgrade elements page sending request server operation bulk success iterating models collection silently setting attribute reflect change upgrades done individual models view representing single instance must change listener attribute unfortunately view represents individual model renders differently enough based single attribute change one trigger model realistic option performance standpoint since observed view responds individual change performance issues parent index view iterate view custom bulk event tell update type nt seem make sense certainly saw time came bulkchange event time long performance nt degrade put silent check view listeners events fired fine bit annoying refactoring thanks responseinfo", "d": "3/2013"}, {"body": "ok let us know trouble change make painless possible", "d": "3/2013"}, {"body": "looks like need deep clone happening instead", "d": "3/2013"}, {"body": "yep shallow supposed work", "d": "3/2013"}, {"body": "see discussion use backbone never objects nested attributes able get around json jqueryextend true modelattributes still feels nasty", "d": "3/2013"}, {"body": "use backbone never objects nested attributes fine currently expected behavior serialization done deep suggested somewhere pile issues switch implementation something like added chaplin faster common cases allows modification resultant object safely without changing model", "d": "3/2013"}, {"body": "interesting sounds like shallow copy tripped people", "d": "3/2013"}, {"body": "expected behavior unexpected metalevel unlocked", "d": "3/2013"}, {"body": "tgriesser maybe sync problems resolved pr would still like know rationale behind versioning anyone cares comment thanks", "d": "3/2013"}, {"body": "hi techpines sorry problems upgrading think help bit signature change fixed likely compatible code let us know dig deeper semver jashkenas explains reasoning another discussion ca nt seem find right try post back find cc tgriesser remember issue", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "tbranyen hehe good reference though also longer discussion issues", "d": "3/2013"}, {"body": "hats jashkenas great open source work love backbone coffeescript underscore think whole notion pretty meaningless people happy deploy beta code production hell everything build clients written nodejs backbone two cents would incrementing middle number instead pretty easy helpful us abusers notion beta software although know backbone operates pretty much mute point since backbone changelog docs great along source code annotations sure poor sucker gon na burn extra time realizing library nt following semver cheers", "d": "3/2013"}, {"body": "hi benoitnadaud backbone behave way expecting take look may getting applied model validation failing attributes nt making please provide sample code unable find problem", "d": "3/2013"}, {"body": "need use wait true option save method", "d": "3/2013"}, {"body": "prevent passed set getting confirmation server regardless option backbone tries set model getting response", "d": "3/2013"}, {"body": "thanks problem fixed restful service returning array one json element update instead returning directly one json representation model object thanks lot reading bb code really useful", "d": "3/2013"}, {"body": "lovely glad got fixed thanks info mponizil", "d": "3/2013"}, {"body": "erichiggins thanks opening issue curious looked seems like accomplishing similar goal would willing make pull request discuss details implementation specifically", "d": "3/2013"}, {"body": "wookiehangover seen suppose similar wish decouple functionality backbonerouter put together pr per request", "d": "3/2013"}, {"body": "erichiggins thanks making pull request continue discussion", "d": "3/2013"}, {"body": "hey rsoares able reproduce bug seeing fiddle could provide sample code brings unexpected behavior", "d": "3/2013"}, {"body": "hey mponizil thanks reply hope nt mind updated fiddle provide sample behaviour described example see returns expected still modifies attribute question modified even validation fails according docs", "d": "3/2013"}, {"body": "yea default attribute set even though invalid saved passing options call works fine seems intuitive even set invalid values memory explicitly call desired behavior", "d": "3/2013"}, {"body": "forgive comment lots discussion", "d": "3/2013"}, {"body": "oh see thanks timmywil purpose enforcing validation prevent model persisted validation prevents attributes modified okay seems good opinion excerpt docs modified validate returns error set save continue model attributes modified misled maybe could confuse someone else", "d": "3/2013"}, {"body": "think doc backbone mentioned validate work", "d": "3/2013"}, {"body": "rsoares thanks bringing outdated documentation bug", "d": "3/2013"}, {"body": "problem jashkenas thanks fix", "d": "3/2013"}, {"body": "would collectionupdate work", "d": "3/2013"}, {"body": "collectionupdate would need models however use collectionfetch update true case nt trigger single event changes multiple add remove events basically code like render function send fetch request render page cached data change collection show user notification data onclick render", "d": "3/2013"}, {"body": "nitinhayaran take look looks like along suggestion use would work looking could trigger custom event success handler callback data returned also adding data collection infinite list something similar need pass rather previous", "d": "3/2013"}, {"body": "give suggest debounce method try however writing custom event would tricky direct way know collection actually changed", "d": "3/2013"}, {"body": "thanks tgriesser worked fine", "d": "3/2013"}, {"body": "looks fine", "d": "3/2013"}, {"body": "hi wulftone issue change internal successerror handlers since fixed feel free grab copy latest master fixed", "d": "3/2013"}, {"body": "see getting published website got flawed version might prudent using master seems fixed particular problem introduced slew new ones considering rolling back avoid hassle", "d": "3/2013"}, {"body": "wulftone elaborate new problems using master nt much else changed removal option see release hoping wrap issues get new version pushed changes place soon", "d": "3/2013"}, {"body": "yes nt magic current changed attributes model regardless whether useful response fine way go", "d": "3/2013"}, {"body": "ah ignore post sending null bad wrong sorry", "d": "3/2013"}, {"body": "inject backbonesync success function modelparse something like", "d": "3/2013"}, {"body": "using recommended zyzniewski model option interesting idea bit skeptical many people would find useful especially since addresses problems like concisely", "d": "3/2013"}, {"body": "yep using great idea models purposely allow fetching subset attributes without removing existing ones however make work want", "d": "3/2013"}, {"body": "morning dminkovsky quite right description remnant old version backbone corrected please take look see seems bit better", "d": "3/2013"}, {"body": "afternoon braddunbar thanks commit reply generally speaking guys interested pulls requests edits stick issues way background getting arms around backbone source big reconciling take code commentsdocs suggesting edits believe would improve readability eg nt ever create one never create one", "d": "3/2013"}, {"body": "docs could certainly benefit pored would happy review comment pull requests submit effect", "d": "3/2013"}, {"body": "hi jbriz thanks ticket need pass options set validation assumed see little discussion ticket", "d": "3/2013"}, {"body": "sorry", "d": "3/2013"}, {"body": "problem", "d": "3/2013"}, {"body": "validate called options zeke zhao \u8d75\u671b\u91ce mobile email wangyezhao wandoujiacom mailto wangyezhao wandoujiacom skype ivanzhaowy \u65b0\u6d6a\u5fae\u535a \u8d75\u671b\u91ce wandou labs frontend engineer \u8c4c\u8c46\u5b9e\u9a8c\u5ba4 \u524d\u7aef\u5de5\u7a0b\u5e08 saturday march noahzhang wrote man backbonemodelextend initialize function alert hey create thisbind change name function var name thisget name alert name thisbind invalid function model error alert error defaults name \u5f20\u4e09 age validate function attrs options attrsname return name\u4e0d\u80fd\u4e3a\u7a7a aboutme function return \u6211\u53eb thisget name \u4eca\u5e74 thisget age var man new man manset name reply email directly view github", "d": "3/2013"}, {"body": "hi noahzhang correct functionality ivanzhaowy pointed needed options trigger validation model default functionality changed thanks", "d": "3/2013"}, {"body": "thanks", "d": "3/2013"}, {"body": "backbone issue try freednode irc support request maybe someone help", "d": "3/2013"}, {"body": "ok thanks", "d": "3/2013"}, {"body": "hi thanks issue trying reproduce seems working tried take look jsfiddle see anything missing thanks", "d": "3/2013"}, {"body": "tgriesser mistake looks like happens ff using also tested chrome safari request indeed sent ff looks like request never sent however error callback called updated fiddle", "d": "3/2013"}, {"body": "thanks update distilled jquery issue version fiddle going close side note would want default data sent request", "d": "3/2013"}, {"body": "developing application api expects certain parameters collection gets since majority views use collection get calls calls ignore parameters wanted set defaults ended moving defaults widelyused view specific use case assume others need also option exists", "d": "3/2013"}, {"body": "customview class definition super pretty gets job done", "d": "3/2013"}, {"body": "hi opensas often use approach dgbeck suggests well using function choose extend parent view js var parent backboneviewextend events function return var child parentextend events function return extend parentprototypeeventscall dig issues find good deal discussion topic probably good tips", "d": "3/2013"}, {"body": "thanks lot tips give try sorry opened ticket guess asked stackoverflow instead", "d": "3/2013"}, {"body": "check think step right direction keeping stuff add vice versa expensive iterating models twice existence checking twice", "d": "3/2013"}, {"body": "step opposite direction imo creating one big function handle everything proposed understanding difficult handle update every possible cases something everyone necessarily wants needs use refactoring something everyone use different undocumented flags handled internally add even though really apply used update method proposed new implementation great job trying feel like making things unclear internally would better suited split plugin pauluithol pointed makes things difficult trying build things top backbone concerns working building server side orm using backbone models update nt useful necessary would look like plugin would super simple add could things like make default fetch handler add custom update event nt need debounce throwing definitely see really useful conerned complexity needed might outside scope backbone cc braddunbar", "d": "3/2013"}, {"body": "definitely disagree moving plugin function clearly high demand refactoring something everyone use sure follow refactor minuscule effect perf removes good chunk duplicated work one use said definitely would like see refactor attempts avoid double parsing existence checks loops etc", "d": "3/2013"}, {"body": "also moving plugin conceptually update collection therefore domain task sugar hood options params tweaked support existing functionality important backbone api currently allows removing models adding models feel better handled monolithic method", "d": "3/2013"}, {"body": "definitely disagree moving update plugin function clearly high demand caseywebdev curiosity data draw conclusion thing like backbone primitives simple source easy read understand need dive deeper neither simple easy understand fact currently biggest complex method exists backbone hand continues easier use practice agree tgriesser perhaps bit nicer call instead reverse really moving body one giant method another also one goals update models without creating temporary models meantime however feel odds idiomatic implementations", "d": "3/2013"}, {"body": "curiosity data draw conclusion support original pull request well collective response since majority positive fact currently biggest complex method exists backbone longer update simple algorithm find existing remove nonexisting merge part adds less loc gets complex abstracted generic updater method duplicate work", "d": "3/2013"}, {"body": "nt think positive reaction equates high demand high demand good metric inclusion save start navigate longer misspoke referring proposed implementation update simple algorithm find existing remove nonexisting merge things certainly trivial evidenced problems", "d": "3/2013"}, {"body": "fwiw think huge improvement would really hate see removed backbone added last couple versions already long complicated better actually fewer lines b keeps complicated logic place makes sense however regarding paul comment perhaps could improved internal helper methods used overriding done without copying tons code also fwiw find way workaround issue backbonerelational", "d": "3/2013"}, {"body": "regards length illustrates change time length complexity similar situation happened method queued support issues grew several methods several objects keeping track state eventually dropped favor simpler method inside made things much clearer internally method assumes want keep server side client side sync many situations nt case still issues nt accounted keeping server side order various parse issues main issue flags handled call made blurring line two methods making call like work although nt make sense would pass flag add let picture someone using custom option pass options pipe often advocated would go digging see actually passes internally causing model added necessarily saying needs taken definitely see value add looking take closer look see makes sense keep codebase smaller simpler easier understand", "d": "3/2013"}, {"body": "method assumes want keep server side client side sync many situations nt case absolutely vital situations response needs associated existing models memory preserve nested relationships event handlers eg simple method collection obliterates connections creates needless obstacle incredibly common scenario want update client side data redelegate everything already got relationships set side note would want keep server date collection nt point giving collection method nt need nt use clone collection right making call like thisadd models remove true work take look implementation add call work exactly described passedin override defaults get point complexity stands currently lot things nt back sorting removing model collection events take lot code happen somewhere given backbone current api netpositive way splitting different parts methods might worth exploring", "d": "3/2013"}, {"body": "much philosophically favor braddunbar tgriesser sentiments also compellingly useful might help think vein sets data value model appropriate events single function able set list models collection appropriate events triggering fact perhaps called instead said cleanups always better use patch starting point try tidy", "d": "3/2013"}, {"body": "alright ya going love significant breaking change renamed parallelism shares semantics described parallelism nice sensible pun go along changed default fetching use semantics optin requested several times hope dig yell nt", "d": "3/2013"}, {"body": "fair enough first thought change model collection differ partial model wo nt remove attributes previously specified whereas collection would would make sense set collection would default flag", "d": "3/2013"}, {"body": "debatable let go mostcommon usecase think commonly desirable behavior specified current defaults", "d": "3/2013"}, {"body": "wookiehangover think sounds like great idea favor consistent predictable releases vote release number unless want use sort release candidate", "d": "3/2013"}, {"body": "wookiehangover agree vote release number", "d": "3/2013"}, {"body": "like see milestone", "d": "3/2013"}, {"body": "wanted say cool violate semver rules way backbone sounds like minor patchlevel upgrade yet introduced backwardsincompatibility etc sort confused users considered release candidate named maybe shit really considered stable amp api freeze done could released another good example violation zepto released almost year ago yet appeared lot changes earlyrelease ftw well testing stuff coffeescript released one week day horrible bug confused users", "d": "3/2013"}, {"body": "paulmillr", "d": "3/2013"}, {"body": "paulmillr exactly type thrash would like address ticket enough people project ability tag issues assign things milestones hopefully cut releases way compatible semver conventions able cut lag releases determine criteria goes next release way open transparently managed github", "d": "3/2013"}, {"body": "technically whatever want api would great", "d": "3/2013"}, {"body": "yes technically semver anything pre whatever point project owner github whatever hell please cares versioning think taking backbone point extremely premature considering api ca nt even remain stable supposed minor version releases point mark must backwards compatible project really shown ability much point semver establish rules versions chosen progress users try follow rules practices prior increment though nothing prohibiting version", "d": "3/2013"}, {"body": "please note issue track discussion go next release meant invitation debate folk opinions semver lets keep topic next milestone thanks", "d": "3/2013"}, {"body": "issue create miltesone title says issue necessarily invites debate stability product track record versioning", "d": "3/2013"}, {"body": "bisrael already stated original text issue fine consensus lean towards instead really nt care either way going argue anyone past releases neither solutions oriented productive discussion point upcoming releases organized around outstanding issues pull requests github philfreo adding", "d": "3/2013"}, {"body": "paulmillr app apply semver rules would way eg node packages versioned users expect rules trust versioning means every patch level update demands careful retest whole app", "d": "3/2013"}, {"body": "sounds great organization around issues fantastic idea particularly triaged versus new issues importantly think would allow us punt difficult issues later release still getting bug fixes incremental changes hands users winwin see", "d": "3/2013"}, {"body": "based positive response going go ahead create milestone tag issues pull requests thanks feedback everyone", "d": "3/2013"}, {"body": "thanks opening issue promise behavior backbone always product using jquery specific code path support feature request opens door lot places nt keep historical stance closing one since promises nt explicitly accounted backbone", "d": "3/2013"}, {"body": "reason would make sense broader user base go ahead override desired functionality", "d": "3/2013"}, {"body": "hey dehrgg yeah idea perform collections models server response returned successfully might useful use check whether model would valid based conditions would block save way could continue use standard", "d": "3/2013"}, {"body": "caseywebdev nt see changes anything broader user base understandable incorporate edge case tgriesser wo nt work model valid context collection adding", "d": "3/2013"}, {"body": "dehrgg changes semantics waiting add server saves successfully adding immediately see save defeats purpose could pass custom flag options line validate function checked options item js collectioncreate model creating true elsewhere modelvalidate function attr options optionscreating amp amp thiscollectioncontains attrotherkey return invalid key check rest validations go", "d": "3/2013"}, {"body": "tgriesser passed statement would never evaluated anyway thanks help", "d": "3/2013"}, {"body": "model exist outside collection multiple collections instances nt want remove events model removed certain collection", "d": "3/2013"}, {"body": "thanks opening issue correct would need call subviews order event handlers removed bound things best way override method call super fwiw call super end method rather beginning need call nt events bound object calling vestigial example presented also please take look code formatting options link says github flavored markdown comment box went ahead reformatted unformatted block top comment", "d": "3/2013"}, {"body": "follow support requests like appropriate documentcloud room freenode irc smileycat", "d": "3/2013"}, {"body": "thanks wookiehangover yes super end removeyour answer eliminate worry cleaning view", "d": "3/2013"}, {"body": "hey machineghost always create model adding right", "d": "3/2013"}, {"body": "thanks braddunbar correct included option c downside approach besides verbose sometimes collections build different models class subclasses bcd collection often look attributes decide whether build b c however really overriding instead overriding yes know pseudoprivate method see one terrible person models available wouldt matter base collection still think weird collections create models real way get back nt really realistic use case matters guess ticket die", "d": "3/2013"}, {"body": "however really overriding add instead overriding preparemodel actually would recommend using factory function work cases", "d": "3/2013"}, {"body": "braddunbar thanks great solution", "d": "3/2013"}, {"body": "braddunbar really great suggestion file separate ticket documentation amendment collectionmodel users nt come find great trick", "d": "3/2013"}, {"body": "mornin radekmichna nt think feature backbone add certainly accomplish code passing custom options js var new backbonemodel attr var new backbonemodel name var new backbonemodel name mon change attr function model value options optionscontext amp amp optionscontext return consolelog thisget name mon change attr function model value options optionscontext amp amp optionscontext return consolelog thisget name hope helps", "d": "3/2013"}, {"body": "works well thank", "d": "3/2013"}, {"body": "fixed thanks dminkovsky", "d": "3/2013"}, {"body": "hi mochatony nt able reproduce exactly bug describing think probably related configuration would expect could leave using even think removing using may solve problem give shot let us know pans", "d": "3/2013"}, {"body": "hello braddunbar sorry apparently bug side nt notice extend custom router initialization sorry thank", "d": "3/2013"}, {"body": "either attrs model case nothing needs two objects object reference means passed rather naked object case need set model collection value passed model attributes", "d": "3/2013"}, {"body": "ca nt always set existing model collection models attributes point either passed model works like describe thanks clarification helped model result prepare model advantage model parse still set existing model attributes model existingset modelattributes options", "d": "3/2013"}, {"body": "still set existing model attributes model implemented previously turns leads bug functionality new model default values would override existing model intended however notice skip set case thanks", "d": "3/2013"}, {"body": "solved similar last proposal js var parent backbonemodelextend child function return thischild thischild new child parse function data options datachild thischild set datachild delete datachild return data ideal order operations model constructor ca nt really change another option exploring lately overriding extract certain values case child might look solution warned overhead created every call", "d": "3/2013"}, {"body": "caseywebdev could specified option set nt considered would useful seems like might good solution something like", "d": "3/2013"}, {"body": "tgriesser immediate thought lots double parsing going also nt want abused setter method since intention translate server data bb data", "d": "3/2013"}, {"body": "kjbekkelund form often use put setup logic constructor javascript var parent backbonemodelextend constructor function attributes options thischild new child thissessions new sessionscollection backbonemodelconstructorapply arguments ensures set since called first involve mucking around purposes works quite well", "d": "3/2013"}, {"body": "initialize model constructor simple easy", "d": "3/2013"}, {"body": "thanks nt thought using feels like okayish solution really think simpler backbone would great solution nt need least documentation says rare cases looking get fancy may want override constructor recommended way handle nested collections think documentation updated btw would awesome little documentation handling nested models collections especially handle stuff like cc braddunbar caseywebdev overriding possibility feel easy handle box backbone work several developers mainly work backend nt want add much magic differs backbone documentation", "d": "3/2013"}, {"body": "kjbekkelund since calling constructor nt need sufficient agree regarding documentation think backbone goes way avoid calling super embracing much better direction support change encourages people deal vanilla inheritance directly instead working around hiding", "d": "3/2013"}, {"body": "kjbekkelund also use pattern sometimes fwiw may also want check looking simplest least code way lot relations", "d": "3/2013"}, {"body": "braddunbar ah course bad knew nt think better still best possible solution mind hm downsides skipping using everywhere code nt want handling nested modelscollections special case want use pattern consistently possible one thing bothers look documentation understand difference big problem feels little ambiguous philfreo backbonerelation far much complexity really nt like pulling large plugins handle simple problems looking solution simplest least code want cleanest solution right appears okayish solutions possible vanilla backbone best thing would solution easily understandable looking code look documentation understand repospecific changes backbone methods", "d": "3/2013"}, {"body": "sides know think using everywhere nice often", "d": "3/2013"}, {"body": "small section docs added showing custom simple example demonstrating used alongside custom parse address question", "d": "3/2013"}, {"body": "idea mean say edit got", "d": "3/2013"}, {"body": "collectionreject would work", "d": "3/2013"}, {"body": "mansiemans need something like backbone collections implement extended funtion using somethin like reject fact already created think exclude omit function backbone collections may util many people thanks", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "think rmarinleal wants method nt involve iterator function kind opposite method", "d": "3/2013"}, {"body": "exactly mansiemans think interesting native function like obviusly use filter like smagch says think exists omit develope function think something common think select query example select employees company lt gt microsoft apply backbone collections nt know wich companies permit employees nt know wich companies database buy know ca nt work microsoft common extend object see utility var filteredmodels mycollectionomit company microsoft", "d": "3/2013"}, {"body": "backbone nt create new collection iterating methods simply proxies underscore please open pull request issue accepted underscore add backbone already underscore function need choose different name closing", "d": "3/2013"}, {"body": "rmarinleal could submit pull request underscore want basically wrapper function around filter nt checked see suggested underscore community", "d": "3/2013"}, {"body": "ok let move underscore requests see people find util backbone dont implement even extended method simplicity use considerably reduced may next backbone update thanks updated", "d": "3/2013"}, {"body": "change personview template personview", "d": "3/2013"}, {"body": "take point concern personview rerendered correct use backbonesubviews plugin onrerendering parent view reattach elements child views preserving child view events view state etc work", "d": "3/2013"}, {"body": "think philfreo right idea passing similar location view using get desired behavior", "d": "3/2013"}, {"body": "thank", "d": "3/2013"}, {"body": "seen changedattributes method", "d": "3/2013"}, {"body": "nope thanks", "d": "3/2013"}, {"body": "hi jaguardev thanks issue seem like could make sense depending looking use curious sort custom objects would using assume would outside browser", "d": "3/2013"}, {"body": "going create push request time hello tgriesser thank answer browser game independent scenes scene router history logic one history object uses pull state another one uses hash third changes url fires events etc", "d": "3/2013"}, {"body": "like use several history types parallel page seems would work existing browser conventions history", "d": "3/2013"}, {"body": "braddunbar absolutly general need custom backbonehistory objects work kind custom history browser history suggestion make backbonerouter work custom backbonehistory objects", "d": "3/2013"}, {"body": "routers currently work one custom history multiple histories expand reason multiple histories one page", "d": "3/2013"}, {"body": "really like idea decoupling opens lot possibilities use clientside implementation browser server create custom history uses express instead use case make sense", "d": "3/2013"}, {"body": "would feel less hack currently modifying history prototype loading backbone", "d": "3/2013"}, {"body": "tbranyen exactly along lines thinking jaguardev might want rethink using multiple histories instead use different models custom objects handle different scenes models nt exclusively used server data", "d": "3/2013"}, {"body": "potentially sounds like fine idea bit abstract discuss absence proposed changes real world use cases pull requests really want get started send proposed pull request formalizes ideal routerhistory public interface adds tests ensure would nt break api future", "d": "3/2013"}, {"body": "hi yahasana thanks question every change attribute need sync remote database changes nt related unless save triggered model change event case need pick different trigger saving model form submission button click event nt model event help answer question", "d": "3/2013"}, {"body": "yup know mean want post changed fields attributes modelsave get changed fields tell true", "d": "3/2013"}, {"body": "probably need implement functionality could save attributes directly model fetch calculate diff current attributes saving", "d": "3/2013"}, {"body": "tgriesser thanks kinda original state hope backbone gives kind feature useless case truly life", "d": "3/2013"}, {"body": "come times recently ask looking sync specific attributes", "d": "3/2013"}, {"body": "form dozens models model dozen fields post fields every times heavy burden server l building survey quiz builder base amazing backbone", "d": "3/2013"}, {"body": "real perfect world model maintenance states origin previous current server state temporary state use event triggers origin state model also useful event triggers sync remote server take care state model state ignore sync state remote server expensive fields sync every changes request amazon happy count request times sync changes one request save money", "d": "3/2013"}, {"body": "please open bug ticket ask question ask mailing list irc channel instead", "d": "3/2013"}, {"body": "thanks adamschwartz fixed", "d": "3/2013"}, {"body": "tgriesser problem found grepping code overriden coworker noticed typo ui hubspot turned backbone ace several repos wrong well p", "d": "3/2013"}, {"body": "think still master", "d": "3/2013"}, {"body": "philfreo tagged next release hope capturing changelogdocumentation oversights", "d": "3/2013"}, {"body": "nt usually write changelogs release tagged things still backed revised", "d": "3/2013"}, {"body": "talked changing keep edge change log due number changes nt documented things backed revised log updated well seemed like sensible solution worked well", "d": "3/2013"}, {"body": "sorry missed let move conversation", "d": "3/2013"}, {"body": "please open ticket asking debugging help ask mailing list irc room instead", "d": "3/2013"}, {"body": "ping braddunbar one related", "d": "3/2013"}, {"body": "perhaps though generally unicode problems urls firefox specific", "d": "3/2013"}, {"body": "hmm chrome screenshots", "d": "3/2013"}, {"body": "working router callbacks get urlencoded version unicode added test", "d": "3/2013"}, {"body": "ran test suite chrome fyi works fine headless", "d": "3/2013"}, {"body": "well fuck safari chrome despite webkits differently needs proper braddunbar urlencoding love", "d": "3/2013"}, {"body": "results tgriesser", "d": "3/2013"}, {"body": "chrome odd man firefox safari returning url segment encoded chrome decoding almost point series encoding issues ready hack around problem something along lines", "d": "3/2013"}, {"body": "yep go merging fix simply normalizes crossbrowser always decoding turning unmatched params instead sometimes empty string sometimes undefined anyone feels like better let start pr passes browsers good use cases wanting distinguish slashes etc", "d": "3/2013"}, {"body": "nt always decoding point except cases splats", "d": "3/2013"}, {"body": "ah ok see closed one cool", "d": "3/2013"}, {"body": "mderk thanks opening issue whole lot going examples determine looks like asking using attributes achieve nested relationships best bet either use properties model collection instances like docs recommend using parse change events combination thereof keep property references date alternatively could use something backbonerelational simplify things bit", "d": "3/2013"}, {"body": "yep using combination creating instance properties parent modelcollection properly reassembled would recommended course rather trying overcomplicate", "d": "3/2013"}, {"body": "let tag em close em", "d": "3/2013"}, {"body": "tgriesser wookiehangover thanks reply suppose failed clear going accomplish question update model attribute instance already initialized nt mergeupdate existing attributes rewrite right might missing something called model creation meant update attributes something like like would called could override fetch existing attribute update place return reassignment absence order lose already initialized instance need fetchupdate outside call pass instead raw data reassigned attribute another option would initial proposal", "d": "3/2013"}, {"body": "model attributes instances collections asking trouble see case inappropriate question bug tracker please ask mailing list irc channel instead", "d": "3/2013"}, {"body": "jashkenas thanks clarification question meant feature request nt see nesting could bad idea though using deep nested structures mirror nosql data backbone extensions successfully far", "d": "3/2013"}, {"body": "jedrichards think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling struggling debug problem caused exact behaviour definitely wasnt expecting backbone work way", "d": "3/2013"}, {"body": "think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling nah tgriesser right backbone working idiomatically need clone object unless going change case copy explicitly making easy others follow", "d": "3/2013"}, {"body": "backbone using purely idiomatically pass reference model object done backbone basic cloning changing primitive value result nt change model contrast objects added result reference stated could buy arguments support passing references handling cases primitives objects way good design handled differently least consistent whichever way go either cloning", "d": "3/2013"}, {"body": "jedrichards actually fair point braddunbar reason know needing shallow cloned attributes", "d": "3/2013"}, {"body": "throw cents chaplin developed method use views outperforms good margin well uses prototype delegation protect changes attributes working really well us", "d": "3/2013"}, {"body": "tgriesser people using right way reason shallow clone people overriding clone need clone leave untouched", "d": "3/2013"}, {"body": "struggling one aspect issue see several people well lots similar issues past days tell year ago functionality desire set unset one go part design modified behave way currently argument made pull request josejamart current implementation appears based deltaschanges operations example call back back value unchanged thus latest change nothing false think logic behind deltachange design probably seem realized well could grab original state instead storing take look may help ease pain attribute states nt make sense current implementation deltachange design ca nt combined operation would want make two calls one importantly would want two distinct states nt seem right anyone cares question open particular aspect writing open yet receive justification current design going submit pull request flag allow combined setunset functionality way continue work well", "d": "3/2013"}, {"body": "hi thanks posting thoughts agree bit schism think previous behavior inconsistent best probably incorrect stated behavior consistent setting existing property removes setting new property nt add vice versa personally would fine removing deleting adding attributes value like said would allow using one call simplify things overall many people use attributes somewhat differently though would agree implementation particular depend fact", "d": "3/2013"}, {"body": "braddunbar glad replied completely agree assessment likely think authors would change behave way remove use course would prevent users setting keys nt make sense nt think nt necessarily allowed either time think flag would work best nothing else stopgap would allow users camps use way need one line addition well technically existing code base submitting pull request shortly thanks shout", "d": "3/2013"}, {"body": "submitted pull request flag setunset feature hopefully spark conversation cheers", "d": "3/2013"}, {"body": "diff notice longer fires custom error callbacks trigger event comment updated master", "d": "3/2013"}, {"body": "hi devbar appear docs correct thanks mponizil", "d": "3/2013"}, {"body": "ah ok fault", "d": "3/2013"}, {"body": "arieljake invalid event triggered collection passed invalid model callbacks object passed options modelsave ultimately ajax callback would nt make much sense context two since model validation errors emit invalid event model collection already got everything need handle use case example model collectioncreate invalid model validate true", "d": "3/2013"}, {"body": "merged", "d": "3/2013"}, {"body": "merged", "d": "3/2013"}, {"body": "good idea attempts make work extension take look backbonememento backboneactasmementoable gives even richer set features describing guess suggesting core backbone feature", "d": "3/2013"}, {"body": "yes feel adding core backbonemodel make sense given existence", "d": "3/2013"}, {"body": "see interested giving try please let know think shown model makes sense revert wonder want call set attributes instead gives least two benefits keeps track attributes changed triggers change event collection thinking could cache original models similar fashion savedattributes eg syncdmodels revert could call thisreset thissyncdmodels", "d": "3/2013"}, {"body": "think implementations could left user sure may want use would want silently revert attributes previous state perhaps fire different event altogether collection nt know would want add methods user wants revert model collection access model directly use implemented", "d": "3/2013"}, {"body": "yes davidinjc proposing essentially feature left comment pull request regarding saved attributes object updated", "d": "3/2013"}, {"body": "noticed pull request davidinjc curious use case feature trolling anything would like understand use case using instead relying local copy data presented scenario would seem make feature unwise thank advance time", "d": "3/2013"}, {"body": "jackwanders response nt danger destroying valid data take precedence ajax call would seem like huge usability bug end user experience frustrations certain social media company mobile app drives crazy makes sense like involved server process takes possibly seconds longer basically provide features nt idiot stale data", "d": "3/2013"}, {"body": "nt follow first concern seem concerned contents could diverge model state persistence layer localstorage database etc concern exists even without existence extend example scenario following could easily occur fetch server x server updated something else x b make different changes none b b overwrite server without every knowing changed working environment model persisted state change user utilizing clientside responsibility developer prevent data clobbering existence nonexistence create affect scenario", "d": "3/2013"}, {"body": "jackwanders right one way prevent might implement kind optimistic locking scheme", "d": "3/2013"}, {"body": "jackwanders right totally halfbaked train thought somewhere along lines right user wants revert must unless handrolling something looking feature sort alternative point nt would best scenarios assume soon data server dirty davidinjc thinking think jackwanders pointed entirely user cases ensure nt clobber data thanks guys think page agree feature would valuable worth smile considered storing absolute delta original instead copy original largest delta ever grow size original plus added fields think scenarios would considerably smaller storing copy entire original state basically nothing would stored sync change occurs original value would stored absolute delta subsequent change occurs attribute would stored want original would make simply thoughts", "d": "3/2013"}, {"body": "agree jackwanders conflict resolution backbone concern could nt option pass nt want change events fired events would completely silent adding dirty state makes haschanged changedattributes much useful could call whenever want instead change event", "d": "3/2013"}, {"body": "think something belongs application backbonejs although give primitives make easy build applications able meaningfully use diff current value last synced value applications never difference two eg always use applications able meaningfully diff two clientside another user may changed shared object server meantime backbone nt shoehorning app particular one paths instead listen stash references previous versions attributes see fit", "d": "3/2013"}, {"body": "yep synced state app code", "d": "3/2013"}, {"body": "fair enough thanks input jashkenas", "d": "3/2013"}, {"body": "problem router syntax solved snippet javascript replace function href var link documentcreateelement linkhref href able get test working fix however event delegation ca nt seem get working believe incompatibility zepto jquery", "d": "3/2013"}, {"body": "also fix provide function el changing since zepto nt support selector", "d": "3/2013"}, {"body": "zepto please test backbone report project bugs find thanks", "d": "3/2013"}, {"body": "used validated tests tests morning would submit pull request currently one open also unable fix delegateevents undelegateevents tests", "d": "3/2013"}, {"body": "arhea heads work different branches make make multiple pull requests different branches master take look tests", "d": "3/2013"}, {"body": "ah yeah looked right posted next time", "d": "3/2013"}, {"body": "think actually going remove zepto tests including given never looked historically promises made said anyone wants send pull requests specific zepto compatibility aok try keep dependency small possible general", "d": "3/2013"}, {"body": "jorgenfb going close nt seem common problem least backbone users nt run months open issue try stack overflow freenode irc specific answer android question", "d": "3/2013"}, {"body": "nt want change vendor code always something like meantime", "d": "3/2013"}, {"body": "bingo yohsuzuki got", "d": "3/2013"}, {"body": "grrr means ca nt use partial put nt acceptable nt secondguessing jquery xhr factory ca nt assume emulatehttp supported backends take put back soon jquery changes", "d": "3/2013"}, {"body": "really useful backends support emulatehttp able use patch emulatehttp set would really sad see go use partial updates browser use fake patch http method need nt support patch method browsermsie parseint browserversion originalsync backbonesync backbonesync method model options gt method patch optionsemulatehttp true return originalsync method model options", "d": "3/2013"}, {"body": "nsb totally agree really really want include ca nt add new http method works configure server faketunnel faux http methods", "d": "3/2013"}, {"body": "way see optional use harm leaving prefer add notifaction patch supported would partial updates otherwise", "d": "3/2013"}, {"body": "backbone nt going include features going prevent app working particular common browsers period want feel free always available", "d": "3/2013"}, {"body": "k see already added comment jquery bug hopefully pick agree best solution", "d": "3/2013"}, {"body": "alright following instructions jquery team added suggested workaround minute please give master try app patch let know well works", "d": "3/2013"}, {"body": "upgraded backbone master removed sync override patch works perfect app nt run ca nt test one looking good thanks", "d": "3/2013"}, {"body": "looks good tested gives option support existing app overriding sync following work general", "d": "3/2013"}, {"body": "bit roundabout way addressing currently pull request open recent pull request includes grunt accepted land source maps grunt makes way time around", "d": "3/2013"}, {"body": "meh either others removed make line optin vote latter agreed totally worth backwardsincompatibility point let leave sleeping dog", "d": "3/2013"}, {"body": "define new method use instead override wrap transformations call many easy ways go", "d": "3/2013"}, {"body": "feel free send pr clarification options advised try merge documentation changes overlyexplicit would make wading docs onerous like jsduckstyle annotations clarification always welcome", "d": "3/2013"}, {"body": "hello mistake seajs typeerror options undefined backbonejs line please", "d": "3/2013"}, {"body": "want smart updatesort server side response already collection models philfreo said render dom wasteful behave smart", "d": "3/2013"}, {"body": "sorted", "d": "3/2013"}, {"body": "closing one since main issues addressed changes", "d": "3/2013"}, {"body": "serverside fix sounds correct also able specify charset html meta tags believe case us shoving seems fairly wrong anticipate us cutting release change getting slew bugs folks whose simpleminded servers nt understand contenttype bizarre closing", "d": "3/2013"}, {"body": "biegel thanks opening issue even though quite since opened suggest still perceive problem deficiency docs please submit patch pull request discuss details context thanks", "d": "3/2013"}, {"body": "lot people using lodash way change jquery nt hard dependency able change jashkenas", "d": "3/2013"}, {"body": "hmm events could function sometimes need trigger event handler initialize", "d": "3/2013"}, {"body": "convention never pass custom parameter backbone model view since argument instead", "d": "3/2013"}, {"body": "genexp", "d": "3/2013"}, {"body": "issue scenario var networkcollection new backbonecollectionextend var generatorcollection new backbonecollectionextend view extends abstractview say analysisviewjs trying access collections var new networkcollection var new generatorcollection go get undesirable results pls u explain add method adding model instances collections add callled pointers would helpful thanks advance sonali lekurwale", "d": "3/2013"}, {"body": "u mean say avoid usingreferring multiple collections single view pls correct wrong newbie backbonejs", "d": "3/2013"}, {"body": "sonio sure issue calls nt also js var networkcollection backbonecollectionextend var generatorcollection backbonecollectionextend var new networkcollection var new generatorcollection consolelog outputs consolelog outputs", "d": "3/2013"}, {"body": "oh bad actually used var networkcollection backbonecollectionextend yet facing issue pls help", "d": "3/2013"}, {"body": "sonio would mind posting example jsbinjsfiddle debug", "d": "3/2013"}, {"body": "agree event would useful want notify user object created successfully used braddunbar method", "d": "3/2013"}, {"body": "reference anyone else issue wrote tiny override plugin fires event backbonehistory instance listen execute whatever functions want handle undefined routes could get method work reliably browsers due behavior explained comment struck simple fix backboneroutenotfound", "d": "3/2013"}, {"body": "let move conversation open pr", "d": "3/2013"}, {"body": "good article bad practice", "d": "3/2013"}, {"body": "use case force reload pagehash would nt want backbonehistorygetfragment instead historyfragment nt reach history properties seems cleaner", "d": "3/2013"}, {"body": "created backbonehistoryrefresh method force reload projects override default navigate behavior reload regardless hash changed javascript extend backbonehistoryprototype refresh function thisloadurl thisfragment", "d": "3/2013"}, {"body": "new best practices", "d": "3/2013"}, {"body": "eranation nope pretty much using pattern like keep attributes hash nt keep sync requires pull object response parsing add back serializing see aside might want put logic rsim put method instead use instead semideprecated find much easier attributes shallow hash nested collections models etc possible seems work well even deeplynested schemas see docs", "d": "3/2013"}, {"body": "thanks great example much appreciated", "d": "3/2013"}, {"title": "notfounderror dom exception", "body": "using commit started receiving clicking link particular route anything route nt believe code causing problem mentioned commit error thrown also additional clicks route work fine initial click route attaching two screenshots chrome console showing exception", "num": "2377", "d": "3/2013"}, {"title": "render multiple models breaks dependencies controllers needs api", "body": "javascript app template parent appparents appparents contains multiple parent objects render parent parent parent template child children parent several children render child child appchildcontroller emberobjectcontrollerextend needs parent seems needs child controller reference right parent controller new parentcontroller created ember children know related parent model example expected looking code seems since parentcontroller singleton referenced app container therefore childcontroller needs ember creates new parentcontroller link model properly maybe misunderstanding supposed work", "num": "2376", "d": "3/2013"}, {"title": "wikipedia emberjs article clarify", "body": "bug issue important project communication issue wikipedia article emberjs pretty obscure focusing sproutcore timeline nothing said embers usages specificities etc wikipedia entry really confusing sproutcore sproutcore really emberjs embers js relationship emberjs handlebarsjs please may go ahead clarify bit introduction project last least also receive encouragement yug wikipedia", "num": "2374", "d": "3/2013"}, {"title": "bindattr contenteditable working", "body": "quick issue trying nt work works well replacing contenteditable class would emberjs cares attribute arbitrary way contenteditable attribute around since quite useful thanks", "num": "2369", "d": "3/2013"}, {"title": "deprecated", "body": "hi added emberjs project via emberrails gem notice showed console running chrome dev ember handlebars jquery best regards", "num": "2366", "d": "3/2013"}, {"title": "history based location working safari", "body": "approuterreopen location history works fine chrome firebox url updating safari updates fine using however another website using backbone pushstate working fine safari", "num": "2365", "d": "3/2013"}, {"title": "nt render outlet within render", "body": "ca nt render outlet view rendered render helper html outlet info render details javascript rendertemplate function thisrender iteminfo outlet info", "num": "2361", "d": "3/2013"}, {"title": "proposal resource routes auto determine models", "body": "interest pushing convention configuration following automatically set function would developer decide function overridden", "num": "2360", "d": "3/2013"}, {"title": "invalid record handling", "body": "sure guys saw posted one replied get thoughts matter please", "num": "2356", "d": "3/2013"}, {"title": "observing child views seems broken", "body": "exactly sure causing atm really seems like bug stackoverflow question posted couple weeks ago christopher swasey seems good insight op comments nutshell effectively observe changes child views observing method fires seems get oldstaleoutdated version", "num": "2355", "d": "3/2013"}, {"title": "jasmineclock emberrunlater incompatible", "body": "found jasmineclock mockup emberrunlater incompatible see example quite sure issue ember jasmine", "num": "2349", "d": "3/2013"}, {"title": "turn routing global template application", "body": "hello would nice use power emberjs routing global template like application trying use emberjs one component page manage whole site thought emberjs would nice potability use power ember wide problems specter thank sergey", "num": "2348", "d": "3/2013"}, {"title": "make api sections bookmarkable", "body": "would really useful sections api docs easy bookmarkshare like guides section", "num": "2346", "d": "3/2013"}, {"title": "logging option controllerviewtemplate creation", "body": "new ember apologies well trodden ground found picking things made much harder lack logging options framework understand ember magically creates viewscontrollers present able see happen logs makes debugging issues much harder needs way switch logging bindings routing think would hugely beneficial offer logging template view controller creation something along lines looking examplecontroller examplecontrollerfound looking exampleview exampleview found looking exampletemplate example template found looking anothercontroller anothercontroller found generated anothercontroller perhaps dig deeper ember find ways keep eyes someone trying understand framework definitely would made life much easier", "num": "2345", "d": "3/2013"}, {"title": "transitiontoroute keydown triggers keydown event transitioned routes view", "body": "hi following example element rootview handler bound transitions another route otherview certain key pressed capital k example otherview input field gets focus right otherviews element got inserted app coffeescript windowapp emapplicationcreate approutermap gt route filters appapplicationview emviewextend keydown event gt eventkeycode get controller send transitiontoroute filters appfiltersview emviewextend didinsertelement gt input focus templates html please click following div press k key information outlet filters view emtextfield problem keydown event triggers transition seems get triggered second views text field well pressing k k appears second views textfield working demo may need hit run button", "num": "2344", "d": "3/2013"}, {"title": "render model nt work inside", "body": "even though fixes case manually using multiple times still nt work fails", "num": "2340", "d": "3/2013"}, {"title": "callback coalescing tests brittle", "body": "failure test", "num": "2339", "d": "3/2013"}, {"title": "documentation computedproperty cachable outdated", "body": "code sample nt call cachable nt everything cachable default love needed", "num": "2329", "d": "3/2013"}, {"title": "needs work inside case", "body": "think really common situation developer uses inside wants possibility access childcontroller parentcontroller worked stopped worked commit using inside childcontroller instead needed instance getting newly created made small investigation looks like error happens childcontroller container parent code function key inheritingdict method var dict thisdict return false cause creation new instance used code reproduce issue template contollers", "num": "2327", "d": "3/2013"}, {"title": "route model method never called", "body": "jsfiddle example open project projectsprojectkeywordsindex appprojectroute model method called appprojectroute setupcontroller called normal", "num": "2323", "d": "3/2013"}, {"title": "embernamespacecreate overrides existing namespace", "body": "used custom namepace function previously one things liked fact could declare namespace everyfile forget current embernamespacecreate check name space already exists problem file embernamespacecreate emberobjectcreate file b nt need declare namespace lets say namespace created original object inside file overwritten might say would need declare two places consider example lets suppose namespace declaration file indexhtml shuffle order script tags dependency issues file b loaded first immidiately error cause non existant trying create member inside find file declared namespace move namespace declaration file b instead something check see namespace already exists would better declare namespace concerned files forget", "num": "2320", "d": "3/2013"}, {"title": "support precompiler", "body": "since emberjs ships customized handlebarsjs would nice precompiler since emberjs goal make development complex apps simple would fair expect complex single page apps declare templates single html file kind beats purpose advocating big framework", "num": "2319", "d": "3/2013"}, {"title": "nested index route gets overwritten parent implicit index route", "body": "given route definition would expect route higher precedence implicit route gets created currently inspect find last handler contain array", "num": "2318", "d": "3/2013"}, {"title": "action helper causing memory leak", "body": "issue may ca nt reopen investigating memory issues new ember app see post forum think action one possibly culprit test using ember implementation todomvc try creating todos check number delete todos recheck see number changed think problem resides way action helper linked registered actions view idea view clear render registered actions deleted todomvc app concrete view encapsulates individual todo consequently registered actions linked top level view refreshed todo deleted causing registered actions deleted keep associated destroyed view causing leak sure handle problem pr may desired behavior consequently may fixed documentation", "num": "2316", "d": "3/2013"}, {"title": "make linkview class public", "body": "small issue want make linkview class public packagesemberroutinglibhelperslinktojs make things like", "num": "2315", "d": "3/2013"}, {"title": "linkto hardcoded css class active", "body": "discovered hidden feature linkview used linkto handlebar helpers add css class active html element given route linked active questions route active find anything ember guides remove feature annoying ember decides use simple case frequently used css class name functionality neither documented obvious understand correctly linkview even public class could reopen fix hidden private construct specific reason solutions problem would suggest remove active feature linkview make sure people need could add extendingreopening linkview", "num": "2314", "d": "3/2013"}, {"title": "setting sibling view computed property causing rerender error", "body": "building form elements dynamically following view idea set element label proper view name passed view proper value call page renders get correct value however setting function computed property throws seems getting causes view attempt rerender render prior intended render", "num": "2311", "d": "3/2013"}, {"title": "api improvement consistent parameter naming", "body": "option option naming consistent ie", "num": "2309", "d": "3/2013"}, {"title": "deprecate eachproxy get", "body": "understand wycats tomdale used actually seem work properly see instance code deprecate", "num": "2305", "d": "3/2013"}, {"title": "needs bindings objectcontroller", "body": "jsfidle example create controller error set content controller project always empty controllersproject exist", "num": "2304", "d": "3/2013"}, {"title": "property chains raise error intermediate value undefined", "body": "computed alias like yes know long probably correct could gets job done alias defined controller controller manages error switching emails get lovely error call method split undefined comes method method chain returning undefined breaking things however basically impossible track property undefined tried trigger error able trigger error two code snippets funny thing happening around well property chain observers generate chains exist generated contentundefined case question using aliases correctly create property build guards", "num": "2301", "d": "3/2013"}, {"title": "bug two blocks similar nested helpers render content blocks", "body": "hi template handlebars appalwaystrue appalwaystrue hey hey appalwaystrue appalwaystrue yeah yeah output hey hey yeah yeah outputs hey hey hey hey created simple jsbin shows issue sebastian", "num": "2300", "d": "3/2013"}, {"title": "syntax error", "body": "instead using", "num": "2298", "d": "3/2013"}, {"title": "ember checking wrong version pattern handlebars", "body": "ember checking version name handlebars uses dash version name version check inside emberjs looking using", "num": "2297", "d": "3/2013"}, {"title": "partial template lookup use container lookup", "body": "currently partial helper looks embertemplates instead looking template via container consistency templates looked changed", "num": "2295", "d": "3/2013"}, {"title": "assertion failed ember handlebars requires handlebars greater", "body": "using ember version handlebars version use include two files get uncaught error assertion failed ember handlebars requires handlebars greater console", "num": "2288", "d": "3/2013"}, {"title": "observing property containerview dependent eachblah fails breaks certain aspects containerview", "body": "see fiddle clear problem arises computed property depends property observer binding either property another property line ultimately depends first property update simply directly observing without intermediary computed properties exact behaviour observer never fire length property gets reported regardless true value remove observes length property restored additional chaining computed properties place observer effect binding effect", "num": "2283", "d": "3/2013"}, {"title": "emberrunnext autowrap emberrun", "body": "write omit get runloop error test suite reason nt automatically wrap function", "num": "2281", "d": "3/2013"}, {"title": "access around subcontrollers guard null", "body": "seeing lot errors upgrading latest emberrails gem includes ember version version last commit well using version version last commit getting lot seems occur near line fact subcontrollers null application call inside fails etc seems like setting embera every turn somehow null fix used set embera initially line instead null everything proceeds work expected", "num": "2280", "d": "3/2013"}, {"title": "router redirect problem", "body": "hi stumbled upon strange router behavior think bug old router used initalstate property route class tell router default sub route porting app new router since initialstate available anymore wrote something similar example wrote routewithparentmemory class adds defaultroute property redirect route activated additionally update parent route defaultroute last used sub route two fiddles using redirect overriding setup second example want achieve opinion first using redirect first last outlet get rendered screen example redirecting directly route leaf causes outlets connect example opinion kind inconsistency behavior hope described understandable way", "num": "2277", "d": "3/2013"}, {"title": "application store property defined", "body": "ca nt understand happening error file appjs javascript windowapp app emberapplicationcreate appstore dsstoreextend revision appproducts dsmodelextend title dsattr string description dsattr string style dsattr string var products appproductsfind", "num": "2275", "d": "3/2013"}, {"title": "router triggering views nested resources", "body": "route like visiting example eventsindexview triggered change route visit url eventsindexview triggered", "num": "2272", "d": "3/2013"}, {"title": "containerview throws error add childview init method", "body": "new able add childviews init method throws error jsfiddle", "num": "2271", "d": "3/2013"}, {"title": "setting tagname metamorph helper create nonmetamorph specified tagname", "body": "see context", "num": "2270", "d": "3/2013"}, {"title": "control helper fails content parent objectcontroller changes", "body": "hi using experimental control helper view controller content changes parent objectcontroller ember throws error function fiddle showing problem action something wrong way use helper", "num": "2268", "d": "3/2013"}, {"title": "rerendering application view possible", "body": "hi reasonable explanation rerendering fiddle working background need adapt application certain runtime events fire views used app may render differently events fire therefore easiest way achieve rerender root view hierarchy subordinary views also rerender onviously works post consider bug least issue documented thanks", "num": "2267", "d": "3/2013"}, {"title": "ember rc ca nt support", "body": "hi project need support lumia windows mobile phone issue lumia get error parentnode null object know maybe ie ca nt support parentnode property idea ie otherwise edit ember source code thanks", "num": "2264", "d": "3/2013"}, {"title": "routes ability change page title", "body": "love able define titles html page routes entering route title would update value something like would great would perfect magical could enable sort bindings could say title like unread posts like gmail", "num": "2262", "d": "3/2013"}, {"title": "bindattr", "body": "viewscreens string array works desired error uncaught typeerror objectdefineproperty called nonobject works different output hope missing something suspect bug", "num": "2259", "d": "3/2013"}, {"title": "app becomes ready soon", "body": "compiled latest version emberjs contains bug fixes needed however app becomes readyinitializes immediately app declaration anything declaration never gets processed example jsfiddle using compiled version emberjs version last commit", "num": "2250", "d": "3/2013"}, {"title": "outlets use class id attributes template tag", "body": "since outlets basically way stating place instead outlet tag assumed could pass tag options could pass view imagine surprise found yes could pass property like view property see jsfiddle working correctly view outlet would look identical annoying someone likes keep markup separate code give view rendered outlet class either define view definition code flies face separation concerns b use wrapper div either around outlet around view template pollute markup hopefully issue fixed easier write cleaner templates result cleaner html", "num": "2248", "d": "3/2013"}, {"title": "proposal expose cp possibly semantics", "body": "tl dr important expose cp templates bind properties leaf routes let discuss possibility bubbling semantics bindable properties possibly via something like motivation old router nice pattern could bind property current route within template via widgets imagine stepbystep howto ui explanation facilitated variety clean statebased patterns less code less error prone alternative toggling attributes controller limited though fact leaf route could queried properties way apply bubbling semantics binding words could nt parent route set true bubble parent route value assuming child routes nt override value nowadays nt seem way bind property current route even nonbubbling leaf route add back probably cp bring back old approach also like investigate whether conceptually clean way could allow bubbling semantics presently rather binding directly property could specify something like would bind leafiest would allow specify properties shared child routes parent route higherlevel templates application would able say things like allowing various leaf parent routes able hide navigation makes sense without toggle within seems backbony messy error prone conceptually seems clean powerful implementationwise perhaps much seems like usher minor form chain invalidation logic full cp bindings deal might worth getting point like hear arguments concept general", "num": "2245", "d": "3/2013"}, {"title": "seems cause dreamweaver crash scanned", "body": "script tag inserted page using dreamweaver editor dreamweaver automatically read scan file appears cause dreamweaver crash scan totally bizarre far tell prevents use dreamweaver application developing ember web applications using rc files problem occur earlier releases dreamweaver mac os x", "num": "2244", "d": "3/2013"}, {"title": "proposal require leading underscore partial templatename", "body": "unlike rails refactoring path template used partial becomes template used render refactor require file rename furthermore legitimate cases using render inside partial lead confusing case templates named underscores templates named without underscores nested within currently use partial template registered without leading underscore works deprecated propose deprecation warning removed", "num": "2242", "d": "3/2013"}, {"title": "linkto helper notice changing emberdata id", "body": "linkto helper pass emberdata model newly created id links routenamenull far good persist model database model gets id link notice new id stays persist model template", "num": "2241", "d": "3/2013"}, {"title": "observing property breaks existing bindings property", "body": "code looks like works expected whenever properties property list function change embedcode properly updated however simply add function observe embedcode property embedcode property stops binding properties seemingly unpredictable fashion handlebars code binding property looks like works fine add observer embed code updates properties property list update ignores properties seems like adding observer nt effect properties cause binding fire unless something really stupid thanks", "num": "2239", "d": "3/2013"}, {"title": "action helper nt obey disabled", "body": "clicking following button nt anything", "num": "2238", "d": "3/2013"}, {"title": "bound block helper updating view", "body": "hi following code following template display playing thissortnbr controllercurrenttracksortnbr problem view rerender playing rendered view gets rerendered event playing suddenly appears", "num": "2237", "d": "3/2013"}, {"title": "consolidate logging flags", "body": "", "num": "2236", "d": "3/2013"}, {"title": "back button broken refresh using history location type", "body": "using history location type app works perfectly fine manually refresh browser click back button ember nothing enabled refresh see transitioned message click back button additional messages logged url changes expected browser stays page refreshed using default hash location type back button works perfectly fine even full refresh example click switch pages link couple times refresh try going back", "num": "2234", "d": "3/2013"}, {"title": "implement helper testacular", "body": "want able run functional tests something like js describe phonecat app function describe phone list view function beforeeach function browser navigateto appindexhtml need port ngscenario ps example ember application tests", "num": "2232", "d": "3/2013"}, {"title": "linkto nt bind", "body": "model change string id updated link feature binding nt work linkto big bug", "num": "2231", "d": "3/2013"}, {"title": "embercontroller nt exist", "body": "want try emberjs follow guide suggests controller object type extend embercontrollerextend version nt work simply try consolelog embercontroller undefined", "num": "2230", "d": "3/2013"}, {"title": "documentation dsattr something", "body": "think explanation dsmodel first ca nt find data type dsattr datatype use integer datetime described database second ca nt find type dsattr datatype first deal dsattr datetime thought string tried use string manipulate function first time date object obviously learned docs things entry user would use ember easily", "num": "2227", "d": "3/2013"}, {"title": "deferred view removal animation route change", "body": "route changes using anchor created linkto someroute current view outlet immediately destroyed seems way deferred view removal checked issue default animation set seems good think also way somethings like hook set removal animation view think animation crucial part user experience", "num": "2226", "d": "3/2013"}, {"title": "callback view lifecycle willdestroyelement", "body": "reason nt rely upon callback case wish jquery effect view element run element destroyed would easiest callback fire callback effect function current implementation destroys function completes suggested observe boolean use case run animation based upon changing state boolean nt think suitable solution see discussed reverted clear dismiss container view would allow one target specific views instead views current solution missing bigger picture work callback", "num": "2224", "d": "3/2013"}, {"title": "documentation mention jquery dependency", "body": "hi started looking ember read info emberjscom started hello world app believed got setup properly wouldnt work stackoverflow question realised needed reference jquery nowhere emberjscom website mention need reference jquery get work", "num": "2223", "d": "3/2013"}, {"title": "conditionalbinding feature", "body": "would interest conditionalbinding modifying emberbinding include pausing feature took stab conditionalbinding following jsfiddle use like var emberobjectcreate value var emberobjectcreate valuebinding conditionalbinding fromvalue pauseiftrue pausingproperty default onresumesetbothto latest pausingproperty false set true binding synchonized either direction upon resume binding synchronized latestwins also use explicitly set synching want pause one direction add", "num": "2220", "d": "3/2013"}, {"title": "require statement remains compiled emberjs", "body": "change occurred specifically require statement present emberjs file built interferes gruntbased build system using specifically neuter plugin based neuter plugin detects statement tries replace local file named nt exist causing javascript handlebars amp amp typeof require function handlebars breaks loaded browser supposed included compiled version emberjs way include statementmodule final output currently work around editing file remove require statement manually", "num": "2213", "d": "3/2013"}, {"title": "property caching", "body": "stumbled across issue tracking seems different issue ember post one nail better seems like property caching issue ember well could problem emberdata really sure point please feel free move emberdata repo needs tl dr ember seems cache length properties least object arrays bit aggressively jsfiddle bug action output console make sure open basically fetches array models adds object fact checks reported length object toggling line truefalse illustrate slightly different behavior makes think caching issue line set get asynchronous operation result first check length property returns ajax request nt returned yet second batch tests occurs initial load completes original dataset models notice tests still show length next blocks tests length tests add new object subsequently remove object finally remove one original objects change line get synchronous operation first set tests immediately show original dataset models subsequent addition removal models tofrom array yields mismatched results length array cases middle ish tests consistently retain first reported value first last tests appropriately reevaluated", "num": "2211", "d": "3/2013"}, {"title": "linkto inside view helper issue", "body": "refer code code given inside linkto helper inside view helper stored somewhere template payroll eventhough nothing given inside linkto helper inside second view template first linkto displayed view linkto payroll payroll linkto view view linkto payroll linkto view output payroll link payroll link", "num": "2210", "d": "3/2013"}, {"title": "lastest ember rc run version internet explorer", "body": "want know whether lastest version rc run internet explorer", "num": "2201", "d": "3/2013"}, {"title": "documentation incorrectly implies lastobject method", "body": "enumerable page snippet sample code running throws exception typeerror property lastobject object b c function code", "num": "2196", "d": "3/2013"}, {"title": "emberjs requirejs", "body": "hi read stackoverflow questions issues related use ember requirejs together still nt found good solution know introduced activate method way delay configexecutionrendering matched route tried require modules files inside active method problem meanwhile require loading files ember move noticed controlerview route creates part ember convention time files loaded ember configured rendered view created rerender view lose setupcontroller hook problably something workaround created subclass emberroute follow route using works keeps giving warning think ember allow elegant easier way considering number questions alike would well received problem described details", "num": "2194", "d": "3/2013"}, {"title": "proposal add", "body": "proposal add allowing specify properties nt overridden subclasses attempts throw error useful preventing antipatterns surprises general overriding meant truly private api embercoreview emberobjectextend emberevented reservedproperties states whatever else states states proposed writing following would yield requesting feedback idea general also specific pain points idea applied ember core", "num": "2192", "d": "3/2013"}, {"title": "documentation getpath seems missing", "body": "example using event bubbling section guide could nt find documentation getpath method api page", "num": "2191", "d": "3/2013"}, {"title": "stack overflow controllers circular dependency", "body": "ember raises rangeerror maximum call stack size exceeded using controller circular dependency need jsfiddle", "num": "2190", "d": "3/2013"}, {"title": "documentation incorrect emberhandlebarshelpersaction", "body": "displays documentation render helper instead action helper", "num": "2189", "d": "3/2013"}, {"title": "emberhandlebarscompile undefined", "body": "trying run todo example latest rc getting following error line build jsfiddle replicating bug believe based jumping chrome console line error", "num": "2188", "d": "3/2013"}, {"title": "short hand equivalent computed property observing lists", "body": "lot code like short hand succinct way expressing common type expression ie users userslength", "num": "2187", "d": "3/2013"}, {"title": "nested routes rendering templateoutlet breaks browser back button click", "body": "nested route hierarchy need application track user model selections trying use main application template route render single outlet template works traverse route hierarchy parent child however click browser back button go back route hierarchy parent route rendertemplate hook nt fire results child unhooked outlet nothing rendered back fiddle example click links traverse routes click browser back button application template rendered nothing hooked outlet way force rerender going wrong way", "num": "2186", "d": "3/2013"}, {"body": "thanks reporting building ember nt part", "d": "3/2013"}, {"body": "yes building", "d": "3/2013"}, {"body": "looks like two run loops inside ajax response could investigate", "d": "3/2013"}, {"body": "seeing anything like exactly investigate", "d": "3/2013"}, {"body": "code using emberdata", "d": "3/2013"}, {"body": "yes using emberdata", "d": "3/2013"}, {"body": "ember sproutcore little common current article likely confuse anyone new either especially since redirects well", "d": "3/2013"}, {"body": "let clarify move ahead wikipedia article version sproutcore amp version emberjs relationship fork relationship know know wikipedia", "d": "3/2013"}, {"body": "others community better articulate fit address issue answer question definitely fork relationship emberjs started sproutcore evolved way made since rename ember sproutcore emberjs maintained independently", "d": "3/2013"}, {"body": "recorded relevant history question", "d": "3/2013"}, {"body": "ok forked article sproutcore one side emberjs think emberjs enough notability stand wikipedia article key factors play comming weeksmonths article reviewed wikipedians nt know field may critical article least content coherent ask delete move things wish good luck article expand", "d": "3/2013"}, {"body": "luke amp community would good emberjs community create historytxt file within ember github project wikipedia got reliable source expand wikipedia article", "d": "3/2013"}, {"body": "create jsfiddle jsbin us isolating behavior seeing updated todomvc example use works relevant template code example doubleclicking todo makes true becomes editable", "d": "3/2013"}, {"body": "hey trek thank answer made quick jsfiddle sure works case example thanks", "d": "3/2013"}, {"body": "set isediting flag string true boolean least worked", "d": "3/2013"}, {"body": "suspect related namespace lookup code", "d": "3/2013"}, {"body": "hi bugsinamber could perhaps provide jsfiddle us verify thanks", "d": "3/2013"}, {"body": "hi expecting index url change thank", "d": "3/2013"}, {"body": "agree make sense especially since already", "d": "3/2013"}, {"body": "envision behaving way nested routes inside posts resource would model automatically set postsindexroute would automatic model setting case", "d": "3/2013"}, {"body": "jasonkriss would think", "d": "3/2013"}, {"body": "heads nt ember issue specific ember data", "d": "3/2013"}, {"body": "completely right put wrong place thanks moved", "d": "3/2013"}, {"body": "condensed version comments ticket virtual view wrapping view array contains children consider wrapping view parent creates view new content item newly created view notifies array changed array changed observer wrapping view fires even though array proxy actually yet unchanged", "d": "3/2013"}, {"body": "added comprehensive answer achieve result emberish way think issue closed", "d": "3/2013"}, {"body": "sebastianseilund might better solution kogi initial problem still underlying bug opinion observing view containing work expected intended nt seem dispute", "d": "3/2013"}, {"body": "design specifically changed work way pull request idea want guarantee wrapping code run separate run loop even timer expires time current run loop finishes might seem like surprise rare case timer expires current run loop finishes important preserve deterministic guarantee fires separate loop would fire immediately current run loop certain worth documenting lot words describe esoteric scenario would probably damage good people understanding run loop open persuasion", "d": "3/2013"}, {"body": "sergxiiith mean without routing global template", "d": "3/2013"}, {"body": "wagenet yep update original message sorry misspell", "d": "3/2013"}, {"body": "ca nt routing turned pretty sure saw test", "d": "3/2013"}, {"body": "wrong repo bad", "d": "3/2013"}, {"body": "working something along lines unfortunately nt yet chance get finished merged", "d": "3/2013"}, {"body": "got working changing", "d": "3/2013"}, {"body": "okay still interesting doesnt work one thing add must something runloop also works either transition call happens example would append k supposed like bug", "d": "3/2013"}, {"body": "ohcibi setting event handlers inputs like generally recommended instead observe value ember already sets certain event handlers imagine ordering expect", "d": "3/2013"}, {"body": "wagenet point input field used input make example easier real app first input li tab index thus focused letter k actually button remote control emits keycode kkey normal keyboard pressed writing phone update example shortly make point clear", "d": "3/2013"}, {"body": "wagenet updated issue problem without input field whichs value change one could capture least something missing documentation trigger transitions properly without user click links", "d": "3/2013"}, {"body": "believe fixed", "d": "3/2013"}, {"body": "merged fixed let know", "d": "3/2013"}, {"body": "machty ideas", "d": "3/2013"}, {"body": "test particular others occasionally fail", "d": "3/2013"}, {"body": "think rely runtime scheduler", "d": "3/2013"}, {"body": "could tests depend scheduler", "d": "3/2013"}, {"body": "everything indeed cacheable default make property cached theory property volatile guess could make cached though seems bit odd", "d": "3/2013"}, {"body": "common point confusion actually way suppose work see better explanation also heads type question probably better stackoverflow let core team focus energy", "d": "3/2013"}, {"body": "jasonkriss good reference thanks going leave open mark documentation issue since something many people confused", "d": "3/2013"}, {"body": "closed", "d": "3/2013"}, {"body": "html shuffle files around except first one course would save writing files", "d": "3/2013"}, {"body": "interesting workaround sounds better ember support multiple levels deep namespaces seeing problem namespacing", "d": "3/2013"}, {"body": "seems really odd trying declare namespace independently multiple files namespaces intended global nt think something specific interest supporting think technically supported nested namespaces though nt know recommended specific problems maybe file new issue", "d": "3/2013"}, {"body": "precompiler precompilation process actually nt terribly difficult set well need document better though sounds like want build tools though independent precompiler instead defining templates html file assign set build tools find files wrap like use ember", "d": "3/2013"}, {"body": "build tools like", "d": "3/2013"}, {"body": "think want set name straight forward write pr test accept right away", "d": "3/2013"}, {"body": "right works proposed fix however name comes gets prefixed parent currently testing exposing option route", "d": "3/2013"}, {"body": "closing favor pr", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "confirm fixes issue one closed thanks lot sebastianseilund", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "igoralekseev many times", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "covered", "d": "3/2013"}, {"body": "changing would break peepcode emberjs integration test mentioned ember camp", "d": "3/2013"}, {"body": "thanks comment etrom answer question seriously speaking emberjs general application framework may impose css classes used used application", "d": "3/2013"}, {"body": "haha get break publicly document api guess api guides seriousness think cost vs benefits weighed ember right effective answer effective effective one could argue right disregarding emberdata effective getting new users onboard quickly without frustration see point nt get wrong thinking pain new user watching peepcode screencast might encounter active table nt turn black screencast like first cool thing see happen automagically watching peepcode screencast could argue side though make good point although seems less important right new people loving experience getting running", "d": "3/2013"}, {"body": "got point peep screencast important see youtube views could assume people devs would try reproduce iam one never saw video problem happen using emberjs develop larger aka ambitious emberjs application expect ember careful markup styles understand hardcoded values surprisingly appear markup something like really nt want move discussion right effective area imho hardcode style names changed patching source professional professional see thing framework creating ambitious web applications", "d": "3/2013"}, {"body": "zubairov route marked active enter also believe linkto helper ca nt override make linkviewextend active css class abstract enough global comes really useful probably removeclass jquery nt want view specific selectoruse", "d": "3/2013"}, {"body": "ulisesrmzroche thanks comment nt see point sorry hacking attributes jquery sucks sorry", "d": "3/2013"}, {"body": "zubairov overriding helper nt work either", "d": "3/2013"}, {"body": "ulisesrmzroche right see link source code first comment linkview private class ca nt reopen", "d": "3/2013"}, {"body": "nt think linkto helper though instantiates whole view seems like could put view class configure stuff feel linkto active convention", "d": "3/2013"}, {"body": "customize active class linkbylink basis even class using", "d": "3/2013"}, {"body": "bradleypriest would good able override appwide active ok app prefer isactive fit naming convention rest css would handy regard", "d": "3/2013"}, {"body": "namespace like ember already emberview class make emberactive emberlinktoactive", "d": "3/2013"}, {"body": "seanabrahams doubt default change close would break peepcode integration test amongst things", "d": "3/2013"}, {"body": "surprised see peepcode motivation emberjs work realised one pay usd get access emberjs peepcode tutorial know open source monetization models usually indirect selling books consulting etc people creating maintaining open source product families wondering wherever peepcode indirect incentives causes much issues fixing obviously raw feature", "d": "3/2013"}, {"body": "zubairov past year many blog posts tutorials videos become quickly date changes ember frustrating trying learn framework ember core decided peepcode video line drawn sand unless absolutely necessary tutorials point remain correct extent integration test made around code video anyone reading writing articles blog posts etc ember confident wo nt rug pulled", "d": "3/2013"}, {"body": "rlivsey thanks quick reply important personally company use committed emberjs know decisions made ember core clear governance rules transparency decision making important every open source project", "d": "3/2013"}, {"body": "linkview public", "d": "3/2013"}, {"body": "awesome thanks making public still convinced respect emberjs right use css classes obvious names hope issue associated discussion raise awareness", "d": "3/2013"}, {"body": "created jsbin recreate problem check errors javascript console", "d": "3/2013"}, {"body": "bcardarella really scaring", "d": "3/2013"}, {"body": "never mind poor implementation found better way want suspect might still bug", "d": "3/2013"}, {"body": "bcardarella problem jsbin example occurs second view triggers computed property first one change time first view state rerender allowed changed order views example would work solution problem could put property controller would created view starts rendering instead particular case hard tell based example gave", "d": "3/2013"}, {"body": "pasting transcript joliss still sure understand exactly controllers supposed used general one hand supposed access models hand stuff like view people itemviewclass apppersonview means view going controller end viewcontentfirstname template rather firstname wonder autoinstantiating controllers somehow maybe late kind change ca nt help feel way controllers still bit strange kselden think auto instantiate think concept render routes consistent controller hierarchy backs view would create child controllers inside controller kind like angulars scope question time really hoping rope ghempton issue since app component based controller hierarchy workaround main pain point ember data", "d": "3/2013"}, {"body": "maxkazar correct way set content declaring basically property nt explicitly defined proxied content assume case nt want proxy explicitly define also instead using binding want", "d": "3/2013"}, {"body": "twinturbo seems bad assume master", "d": "3/2013"}, {"body": "c mar pm stefan penner notifications githubcom wrote twinturbo seems bad assume master reply email directly view github", "d": "3/2013"}, {"body": "friendly fiddle reminder", "d": "3/2013"}, {"body": "stefanpenner still working figuring fiddle demonstrate issue nt keep trying", "d": "3/2013"}, {"body": "twinturbo thanks dude track would awesome see lend hand weekend", "d": "3/2013"}, {"body": "handlebars bug fixed master release handlebars cc wycats", "d": "3/2013"}, {"body": "sweet thanks", "d": "3/2013"}, {"body": "think text editor helping deceiving code repo quite time think editor might converting chars reporting false error", "d": "3/2013"}, {"body": "think browser tried download file apologies", "d": "3/2013"}, {"body": "please use latest emberjs version available emberjs website", "d": "3/2013"}, {"body": "nt fixed either message says regex matching looking issue closed wrongly please reopen", "d": "3/2013"}, {"body": "indeed submitted take care", "d": "3/2013"}, {"body": "agreed", "d": "3/2013"}, {"body": "provide jsfiddle show reproduces error", "d": "3/2013"}, {"body": "link page loaded use inspect element option chrome see error message console", "d": "3/2013"}, {"body": "since ember handlebars dependency handlebars must loaded first try swap order wich loading eg jquery handlebars ember order problem", "d": "3/2013"}, {"body": "correct thank realized", "d": "3/2013"}, {"body": "ok turns problem property nt call arraycontentdidchange never gets expired even though content array terms getting set goes x without notifications see updated jsfiddle showing expected behaviour arraycontentdidchange call added", "d": "3/2013"}, {"body": "closing favor", "d": "3/2013"}, {"body": "joliss yuno fiddle", "d": "3/2013"}, {"body": "joliss pretty sure fixed master following code snippets master seem indicate runnext run run loop fixed confused unveiled narly bug", "d": "3/2013"}, {"body": "seems fine one master please reopen", "d": "3/2013"}, {"body": "possibly arraycontrollers calling thissuper init functions documenting case someone else problem", "d": "3/2013"}, {"body": "could describe real use case trying implement using constructs generally needed", "d": "3/2013"}, {"body": "sorry long response tests prepare reasonable examples first managed workaround problem example working code use case user clicks changes category get back selected lets assume simple router like use examples sorry coffee entering ok redirect lost template redirect every thing ok redirect route child route eg every thing ok problem redirecting nonleaf route route child route nt get warning error", "d": "3/2013"}, {"body": "using emberdatajs separate js file currently part core", "d": "3/2013"}, {"body": "yes using emberdatajs", "d": "3/2013"}, {"body": "searchinnerpeace submitting bug submitting alongside jsfiddle jsbin really helps us", "d": "3/2013"}, {"body": "code jsfiddle", "d": "3/2013"}, {"body": "fixed guess since code global scope think getting executed initialize method completes building objects moved code method find", "d": "3/2013"}, {"body": "thanks hashg still getting used assynchronous nature javascript", "d": "3/2013"}, {"body": "problem fixed issue go ahead close bug possible", "d": "3/2013"}, {"body": "sorry bumping seem getting error initially got simple crud app running couple minutes rpflorenceembertools trying rewrite hand learning exercise using brunch compilation etc seems working fine newpostroute fine first version app coffeescript app emapplicationcreate appstore dsstoreextend revision apppost dsmodelextend title dsattr string author dsattr string updatedat dsattr date body dsattr string appnewpostroute emrouteextend model gt consolelog appstore returns expected result error consolelog apppost returns expected result error apppostcreaterecord approutermap gt resource posts resource post path posts postid route editpost path posts postidedit route newpost path postsnew soon hits apppostcreaterecord get totally weird console logging model amp store within method says present ideas really impressed coming back ember morning hiatus amp getting lots done quickly stuck bug literally hours using latest versions ember amp emberdata", "d": "3/2013"}, {"body": "jongd specify adapter defining", "d": "3/2013"}, {"body": "sorry guys ended deleting ember amp emberdata rebuilding cleaning server cache amp worked tried wasted hours day lol", "d": "3/2013"}, {"body": "looks use like route leaf must declared route resource", "d": "3/2013"}, {"body": "thanks", "d": "3/2013"}, {"body": "followed error found view able get currentstate", "d": "3/2013"}, {"body": "need call function working fiddle", "d": "3/2013"}, {"body": "thankslooks silly mistakei actually called end method previous ember versions worked time", "d": "3/2013"}, {"body": "usually want call thissuper beginning methods really ambiguous", "d": "3/2013"}, {"body": "kselden actually bad replicated wrong jsfiddlethe actual problem unable push containerview child another containerview also call thissuper containerview child class updated fiddle", "d": "3/2013"}, {"body": "another fiddle adding containerview click main containerviewstill throws error normal view works fine", "d": "3/2013"}, {"body": "nested view nt calling super", "d": "3/2013"}, {"body": "yeabecause created objects allowed btw still error clicking view another view come able correct giving didinsertelement containerviewbut looks weird behavior", "d": "3/2013"}, {"body": "thumbsup also related", "d": "3/2013"}, {"body": "believe proper way leads different error", "d": "3/2013"}, {"body": "vanthome fiddle nt load correctly", "d": "3/2013"}, {"body": "seems like using conditionals handlebars instead rerendering whole thing", "d": "3/2013"}, {"body": "load tested three browsers works works means click button second time whole output disappears scenario perfectly sensible rerender everything generally speaking think valid requirement clientside rendering framework", "d": "3/2013"}, {"body": "hmm loading appears jsfiddle issue fiddle nt rendering sorry", "d": "3/2013"}, {"body": "vanthome application view actually rerendering fine happen lose reference outlet seen modified fiddle leave ticket open highly recommend go ask better way handle case really nt think right approach", "d": "3/2013"}, {"body": "wagenet thx thoughts however comprehend losing reference mental model matter build view hierarchy ember ends view hierarchy thus knowledge views subviews call rerender needs walk tree rerender everything initial render irritatingly first call method looks like first rerender maintain parent child relationship effectively preventing successive rerenders really rerender supposed work alternative way achieving maybe reevaluating route", "d": "3/2013"}, {"body": "isolate bug jsfiddle jsbin failing know specifically code happening", "d": "3/2013"}, {"body": "machty think run ember project get parentnode null object error", "d": "3/2013"}, {"body": "sample app works fine going close produce failing fiddle jsbin please file new ticket", "d": "3/2013"}, {"body": "current practice seems tying necessary messing", "d": "3/2013"}, {"body": "could try reproduce jsfiddle nt see behaviour emberjs master", "d": "3/2013"}, {"body": "jsfiddle nt use real ca nt reproduce version using could good sign look report new issue problem still reproducible", "d": "3/2013"}, {"body": "duplicate", "d": "3/2013"}, {"body": "also fix progress", "d": "3/2013"}, {"body": "ah nt see thanks", "d": "3/2013"}, {"body": "outlets nt really element rather range elements merely adding outlet nt add extra depth mess css want enclosing element need wrap outlet content may case want force outlet element practice unsure really want", "d": "3/2013"}, {"body": "case setting still allowed far know outlet insert single view ca nt outlet tag customized like normal tag insert template using tag default create class ember identifier whatever view chosen except gives way customize element apparently", "d": "3/2013"}, {"body": "tbh probably remove outlets least deprecate clear benefit since still create metamorphs might well specify styling child view goes outlet wrap another element", "d": "3/2013"}, {"body": "talked wycats suggested use non metamorph view outlet tag passed also use instead would error tagname used metamorph builtin helpers makes sense", "d": "3/2013"}, {"body": "closing favor", "d": "3/2013"}, {"body": "fwiw linkto code determining link would certainly stand benefit change name one example ember source active embercomputed function var router thisget router params resolvedpaths thisparameters currentwithindex thiscurrentwhen index isactive routerisactiveapply router thiscurrentwhen concat params routerisactiveapply router currentwithindex concat params", "d": "3/2013"}, {"body": "working app oldrouter ca nt done new router way without activatedeactivate essentially comes something like", "d": "3/2013"}, {"body": "put controller", "d": "3/2013"}, {"body": "property new router part suggesting add", "d": "3/2013"}, {"body": "even possibledesirable develop ember apps dreamweaver much goes writing handlebars templates splitting different files extensions dw almost certainly nt understand perhaps something could tweaked end prevent pretty sure rest world unanimously idea developing ember apps dw successes previous versions ember", "d": "3/2013"}, {"body": "certainly possible develop using dreamweaver ember done using previous versions ember right prerelease versions desirable corporate websites complex beasts active web applications often built subsections rest built static form particular pages designoriented program oriented constructed graphic designers content develop bbedit web browser designer wants adobe issue hand dreamweaver scans javascript rc ember flips could maybe likely adobe fault given behavior showed rc versions prerelease versions something somewhere fishy show stopper odd odd", "d": "3/2013"}, {"body": "gotcha makes little sense building subsection existing site could file bug dreamweaver crowd pinpoint happening offer relatively painfree workaround time might able oblige", "d": "3/2013"}, {"body": "rlbrown nt dreamweaver test could narrow problem occurred git bisect ember repo run put commit test run dreamweaver crashes run ok repeat process tells commit issue introduced hopefully something obvious", "d": "3/2013"}, {"body": "examining console logs believe dreamweaver issue ember issue appears dreamweaver attempts scan file references file linked web page memory outofbounds error occurs likely ember javascript complex dreamweaver handle accordingly closed something ember team tackle", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "unify template resolution anything else category guessing optionally dev adopt underscored naming scheme ditch deprecation keep format prioritized check", "d": "3/2013"}, {"body": "think dup", "d": "3/2013"}, {"body": "rlivsey looks like", "d": "3/2013"}, {"body": "mhh states course handle case actual attribute like id changes help cases time use id time id change exactly talking id", "d": "3/2013"}, {"body": "goltergaul bit different case situation would something like problem even generate link nt id fail without id", "d": "3/2013"}, {"body": "goltergaul actually see mean may want still render link object saved yet may linkable clickable unfortunately point rather hard fix emebr order generate path ember needs go route run method ca nt easily analyze params needed serialize time id maybe something else ca nt refresh href accordingly despite technical problems behind strongly believe solved ember end user proposal would always check id addition param handle cases leave us non id attributes example travisci uses url would solve allowing declarative approach either routes like making easier reload link template helper like without changing context would helpful", "d": "3/2013"}, {"body": "drogus workaround good idea thanks agree rest", "d": "3/2013"}, {"body": "sinfree going difficult figure going without jsbin fiddle", "d": "3/2013"}, {"body": "ok try throw together little sample post working example", "d": "3/2013"}, {"body": "example displays problem removing fruitsobserver function js allows checkboxes live update fruit string causes bindings update string expected", "d": "3/2013"}, {"body": "bit discussion", "d": "3/2013"}, {"body": "good eye rlivsey", "d": "3/2013"}, {"body": "probs turned tricky detect made pull request hopefully trick", "d": "3/2013"}, {"body": "intentionally avoided supporting helpers nature core believe cases better served computed properties right bat bit nervous think problem expecting arguments also bound case need set bindings arguments within helper", "d": "3/2013"}, {"body": "arguments need bound think got wrong problem update view argument passed value changes case nt", "d": "3/2013"}, {"body": "trying figure render block bound helper something similar comparing equality two objects one main difference passing two arguments relying options like trick getting block render bound helper", "d": "3/2013"}, {"body": "reason nt making url listener fully active first url change happened refresh hit back never takes place yet sure set way hesitant change looks like wycats wrote original code", "d": "3/2013"}, {"body": "correction original code ghempton", "d": "3/2013"}, {"body": "yeah seems case refreshing clicking switch pages link works properly click back get page refresh ie take step forward steps back interested hear rationale behind hope get resolved thanks", "d": "3/2013"}, {"body": "looks like trying work around initial popstate event fired chrome page load looking alternate workaround wo nt case side effects", "d": "3/2013"}, {"body": "fast works great thanks", "d": "3/2013"}, {"body": "seems like great idea unfortunately familiar testacular also nt think something core team likely address think sorts things best handled community makes sense consider pr otherwise live standalone addon package", "d": "3/2013"}, {"body": "possibly duplicate", "d": "3/2013"}, {"body": "bradleypriest yup seems like duplicate", "d": "3/2013"}, {"body": "perhaps stupid question consolelog ember defined", "d": "3/2013"}, {"body": "could wrong ember defined throw error looks like referenceerror ember defined", "d": "3/2013"}, {"body": "lcoq exactly right error really weird", "d": "3/2013"}, {"body": "maybe errors thrown ember completely loaded like ember require handlebars version greater something like", "d": "3/2013"}, {"body": "synthresin try", "d": "3/2013"}, {"body": "synthresin topic better suited emberdata repo devinus pointed guides", "d": "3/2013"}, {"body": "synthresin agree animation something needs better addressed tickets relating something want address", "d": "3/2013"}, {"body": "unsure correct place animations see animation layer destroying view finished rather views destruction triggering animation great success keeping animation logic view layer state chart", "d": "3/2013"}, {"body": "kselden lukemelia experienceadvicewarstories would lovely", "d": "3/2013"}, {"body": "bcardarella problem using willclearrender seems work know correct place", "d": "3/2013"}, {"body": "jchannon issue move", "d": "3/2013"}, {"body": "probably use computed property complex behaviors nt think something likely support bindings", "d": "3/2013"}, {"body": "historical note bindings used featurefull instance allowing transformation values pared performance code api simplicity computed properties took much behaviour well", "d": "3/2013"}, {"body": "took pass implementing computedproperty based ie conditionally pausable equivalent suspect semantics ca nt really covered computedproperty least without help observer maybe missing something ensure dependentkey side sync unpausing would require pausiblealiasgetset called since lazily evaluated may called resulting order gets changes behavior seems undesirable operations whetherwhen get affects semantics javascript function setpausedaliaswithfinalget doafinalget var emberobjectextend paused false dependentvalue initial value aliasedvalue pausiblealias dependentvalue paused create suggests need pausiblealias observe pauseiftruekey comptuedpropertysetupteardown invoked class instance ca nt setup observers object looked places hookin ca nt find anything obvious workaround additionally requiring haspausiblealiasesmixin initializes observers pausiblealias properties case requiring observers maintain sync two properties smells suspiciously like reinventing bindings figure combination mixintoinitializetheproperties derivative computedproperty overall seems relatively convoluted compared bindingbased approach many ways rewriting bindings", "d": "3/2013"}, {"body": "uploaded jsfiddle", "d": "3/2013"}, {"body": "snickell give examples use cases times tempted feature experience always found better way go", "d": "3/2013"}, {"body": "machty actively taking user input sometimes nt want feed back programmatic tweaks constraints useraction ended use case mytextfield ui focused value nt updated programmatic changes focusout breaks typing ie input focused temporarily make connection oneway use case dragging draggableview allow go outside xy bounds imposed controllermodel xy computed property ie drag active temporarily make connection oneway biggie validations use case validations ui input fail nt propagate invalid value forward continue receive changes backward ie invalid temporarily make connection onewaytheotherway characterizes cases want tightly bound except normal state binding would best edge cases want disconnect binding make oneway sometimes onewayfwd sometimes onewayback however rather bound normal case want rebind instantly condition changes little tricky achieve computedproperties perclass instance", "d": "3/2013"}, {"body": "check nt nail every one use cases goes long way handling slow bindings least far pausing bindings goes feel like pandora box feature build framework need pause binding given condition thing computed properties eg set dependent keys bound property condition return update value condition true return old value stored however want object condition false use frequently seems like kind thing could well encapsulated mixin rather change embermetal", "d": "3/2013"}, {"body": "machty initial jsfiddle uses essentially approach though digs little deeply layered binding nt require changes metal keep using since digs little deeply fiddle smells like something break future ember upgrade hand computedproperty solution much convoluted rather longwinded stuff goes detail nt think actually build computedproperty least without addobserver doable rather complicated suspect validation usecase particular common one might nice make really easy inside emberjs though perhaps right answer use ember data validations anyway problem implement possible ways something run lot suspect others sure see pausing binding pandora box say tranformation essentially providing convenience api disconnect connect declarative imo emberstyle nt require client caller keep passing disconnect obj every time requires understanding bindings api might desirable pausing binding", "d": "3/2013"}, {"body": "machty look", "d": "3/2013"}, {"body": "hmm sure suggest nodecompatible distro needs able handlebars swappable whatever version seems like safest generalized form neuter filter ought replace missing files something still valid javascript throw runtime actually accessed maybe change belongs", "d": "3/2013"}, {"body": "trek think", "d": "3/2013"}, {"body": "leaning towards agreement machty need support multiple execution environments handlebars neutering strategy kind squatting territory nt think want silently ignore missing required files neutering development possibly passed flag could make configurable option list required paths silently ignore either way issue go bother guy", "d": "3/2013"}, {"body": "helper seems happening", "d": "3/2013"}, {"body": "teddyzeenny indeed hopes helpful direct link jsfiddle also noted question using also note found several variables fix problem least sometimes text content opening tag opening tag see last vieweach fiddle may true reliably differing options parameters passed view eg currently working around problem defining arbitrary property view like etc dineshrb curious either things changes output case", "d": "3/2013"}, {"body": "odd one definitely something need fix", "d": "3/2013"}, {"body": "suspect may handlebars bug wycats chime", "d": "3/2013"}, {"body": "indeed handlebars bug fixed master handlebars", "d": "3/2013"}, {"body": "greedylion would like see work least lack bandwidth testing someone put together lower known issues add missing testcases sure would help effort", "d": "3/2013"}, {"body": "think wagenet something spiked integration", "d": "3/2013"}, {"body": "trek roadmap rate wont get anytime soon someone else wants champion buy beer", "d": "3/2013"}, {"body": "stefanpenner thks", "d": "3/2013"}, {"body": "hekevintran good catch", "d": "3/2013"}, {"body": "want require file inside route require code upfront everything solved", "d": "3/2013"}, {"body": "twinturbo large apps apps memory constrained devices may want lazy load code", "d": "3/2013"}, {"body": "twinturbo stefanpenner said", "d": "3/2013"}, {"body": "would personally opt loading code upfront ondemand evaling using something like drastically cuts http requests significant cost minispade end synchronous suffer issue cases would recommend think exist legitimate usecase asynchronously loading code supported go path code loading handled via promise similar deserialize works promises see discussion topic would great", "d": "3/2013"}, {"body": "stefanpenner changed setupcontexts said test promises works setupcontexts failure proceed collectobjects dotransition many others functions method router class way could subclass would good go see approach ember code kind mess mix oo functions well back main problem route activate called inside route enter take call enter call directly setupcontexts like javascript function setupcontexts router handlerinfos", "d": "3/2013"}, {"body": "refactored code replace functionality function promises call loader function item results application product loader function router loads appropriated module depending handler name ie product even application advantage put routes classes file controller view load async exemple image loader function complex cases could create jsonfunction maps routes filesmodules default would call done automatically since nt anything load working fine think", "d": "3/2013"}, {"body": "managed way easier first try wo nt affect using requirejs please take look see think", "d": "3/2013"}, {"body": "duplicate", "d": "3/2013"}, {"body": "issue wo nt solved fix proposed would like reopen allright wagenet", "d": "3/2013"}, {"body": "guilhermeaiolfi correct wagenet lazy async loading code routing going open one currently solve", "d": "3/2013"}, {"body": "imo properties part private apis prefixed example emberdata ran issues data property since renamed data", "d": "3/2013"}, {"body": "slightly concerned might complicate testing making difficultimpossible stubout reserved properties", "d": "3/2013"}, {"body": "good point desirable could disable reserved property check true based value wycats remember thoughts", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "related presently put template unquestioningly wipe controller separate category would appropriately belong something called themequestion whether rope certain words might come variety different flavors maybe jostle loose idea someone nt think making private via underscore would really make sense custom view management may well end calling destroy nt discouraged privatizing underscore", "d": "3/2013"}, {"body": "synthresin actually getpath deprecated always use even deep paths going close issues fix website thanks pointing", "d": "3/2013"}, {"body": "synthresin fixes getpath references reference seems already fixed someone else would appear website needs redeploy", "d": "3/2013"}, {"body": "think example using nested property get method doc", "d": "3/2013"}, {"body": "perhaps curiously issue two controllers directly require circular indirect dependencies work fine", "d": "3/2013"}, {"body": "unregistered believe could intheory solved inserting proxy inplace one controllers turn relationship nonissue indirect dependency endash mentioned", "d": "3/2013"}, {"body": "stefanpenner thanks little less elegant like trick hopefully direct circular dependencies supported future", "d": "3/2013"}, {"body": "ya likely common case smoothed", "d": "3/2013"}, {"body": "also take away bindings refer controller thisget controllers controller name error check jsfiddle looks like issue bindings controllers", "d": "3/2013"}, {"body": "think bindings nt lazy initialize one controller binding immediately hooked access initializes controller unfortunately first controller nt completely finished initializing yet try set another copy", "d": "3/2013"}, {"body": "wagenet suppose changing way binding works bind object initialized would invasive right", "d": "3/2013"}, {"body": "issue belongs ember website issues could post also put pr would definitely help us crazy fix", "d": "3/2013"}, {"body": "machty api generated emberjs think fine issue", "d": "3/2013"}, {"body": "good call", "d": "3/2013"}, {"body": "problem handlebars runtimeuse instead", "d": "3/2013"}, {"body": "examples nt even repo anymore appear getting trolled github cache going make sure go away", "d": "3/2013"}, {"body": "stefanpenner nt repo site first link google find date tutorials currently examples first hits google appear date", "d": "3/2013"}, {"body": "mjallday ya mega annoying see trick github flushing cache inserting dummy example page mjallday interested solid uptodate examples help teach best practices unfortunately available bandwidth premium someone else interested helping champion best help time allows", "d": "3/2013"}, {"body": "stefanpenner kind help need bandwidth promises interested hear", "d": "3/2013"}, {"body": "working todomvc getting started guide tutorials take ton planning want proceed logically step building previous minimal handwaving stefanpenner going update repo entirely empty except deprecation notice since easy miss", "d": "3/2013"}, {"body": "like remove repo contents", "d": "3/2013"}, {"body": "probably better question stackoverflow short answer dependent users redundant dependent userslist ember watches part property path dependent key automatically friday march paul wrote lot code like people blah property users userslength contacts contactslength short hand succinct way expressing common type expression ie users userslist reply email directly view github", "d": "3/2013"}, {"body": "also worth noting observing length wo nt work expected array mutates without length actually changing ideal situation believe somewhat mysterious enumerable property always get triggered contents enumerable changes", "d": "3/2013"}, {"body": "endash correct question stack overflow", "d": "3/2013"}, {"body": "experiencing issue", "d": "3/2013"}, {"body": "similar issue navigating via back button nt render child outlet first endpoint like render fine using back button child outlets render fine except navigate past move forward eventually render properly setup similar fiddle provide another helps", "d": "3/2013"}, {"body": "going wrong way render template route actually enter however case switching children parent route never reentered never left means overwrite parent template reason ever rerender like suggestions alternate setups ask question stackoverflow", "d": "3/2013"}, {"body": "wagenet following scenario enter route model hit editbutton page link default postview replaced one values input fields hence nt want see anything parent viewtemplate anymore hit save transition back empty cry nt current setup assume always render child parent masterdetailsstyle yes route never left nt mean template still screen makes lot ui hard implement", "d": "3/2013"}, {"body": "scenario let say resource called post case would postedit postedit overwrite post since parent route rerendered leave reenter post route nt case instead use postindex autogenerated part resource postindex level postedit switch back forth without overwriting parent template", "d": "3/2013"}, {"body": "oh see thanks lot knew index routes nt fully understand could used situations like helpful thanks", "d": "3/2013"}, {"body": "removing requirejs example nt affect error", "d": "3/2013"}, {"body": "good find kselden digging found interesting result jsfiddle view frame jsfiddle generates see wraps js code jquery call like cdata window load function windowapp emberapplicationcreate approutermap function thisresource users gt drop option jsfiddle choose wrap js code selected instead updated jsfiddle reflecting wrap option change application works expected familiar internals requirejs seems either isolated issue identified related issue specific requirejs wrapping application code also produces error", "d": "3/2013"}, {"body": "actually known bug jsfiddle code must loaded framework see frustrating got good time ago hopefully ember master cdn available less issue said huge gotcha", "d": "3/2013"}, {"body": "stefanpenner nt answer original issue please take another look original issue see use jsfiddle demonstrate bug created gists downloaded run locally gist demonstrating issue console display control cases work expected remove requirejs still use build gist download keep requirejs use instead build gist download", "d": "3/2013"}, {"body": "workaround related discussion commit caused difference master relying autorun called code ready logic", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "using observersafe methods pushobject replace modify array also combine subsequent get set operations ie thisget foobar thisset foobar fyi", "d": "3/2013"}, {"body": "could refiled docapi issue", "d": "3/2013"}, {"body": "yeah noticed well wonder bug seems like", "d": "3/2013"}, {"body": "akshayrawat works location type afaik possible make work location type probably need document better", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "think done see", "d": "3/2013"}, {"body": "workmanw pretty sure helper return achieve goal see", "d": "3/2013"}, {"body": "wagenet yeap right would sworn tried guess failed thanks", "d": "3/2013"}, {"body": "darthdeus pretty sure issue bindings looks like route always sets content controller even context case content set", "d": "3/2013"}, {"body": "updated outlet docs happy make changes anything inaccurate could explained better", "d": "3/2013"}, {"body": "appears happening uses returns object sorted indices rather object original unsorted index also affects methods mixin", "d": "3/2013"}, {"body": "stefanpenner tomdale use failing test", "d": "3/2013"}, {"body": "think duplicate issue related issue put observations issue issue", "d": "3/2013"}, {"body": "wagenet like talk reopening spent time looking ember source thinking guides say rendered link matches current route link given class active think behaviour implemented wrong frustrating clearly instance current route matches rendered link ember looking magical internal ember ids make comparison objects linkto helper failing mark active route match stands going write boilerplate get behaviour work stated guides app going page records different times magic ember ids differ even though route ids matches thoughts", "d": "3/2013"}, {"body": "reopening documentation issue since probably explain better ya wagenet real problem binding using instead", "d": "3/2013"}, {"body": "twinturbo could call documentation also nt already make clear explain bit detail", "d": "3/2013"}, {"body": "wonder events could functions route defined events object functions would support need special support work inheritance could use annotation like computed properties would set meta determine functions event handlers route object would built extended point available router would backwards compatible would require changes tildeiorouterjs becomes false use something like would pretty simple try put aside time morning whip proof concept pull request", "d": "3/2013"}, {"body": "like idea rlivsey", "d": "3/2013"}, {"body": "another possibility tinkering deal extend idea conceptually closer ember way jeff", "d": "3/2013"}, {"body": "along lines needing hash property concatenate instead clobber personally used customwritten dictionary class implements concat combine hashes inside extend operations instead replace ember use base value concat method instead creating array one exists subsequent hashes seamlessly merged onto original dictionary downside approach nonprimitive object api place simple object hash would ideally", "d": "3/2013"}, {"body": "sketchy working proof concept set otherwise nt get setup properly givedescriptorsuper sure nicercleaner ways getting setup instead pretending computed property dig deeper tomorrow feedback amp suggestions better approaches welcome", "d": "3/2013"}, {"body": "believe something code embersortablemixin javascript contentarraywillchange function array idx removedcount addedcount var issorted get issorted line think actually array parameter passed contentarraywillchange event actually unsorted array arraycontroller content", "d": "3/2013"}, {"body": "nice catch", "d": "3/2013"}, {"body": "thanks see make pull request todaytomorrow", "d": "3/2013"}, {"body": "tried making change fails unit test module failed embersortable content sortproperties test failed sortproperties observers removed content removal assertion failed removal listeners sortproperty change observer item removed removed inner foreach contentarraywillchange anyone ideas", "d": "3/2013"}, {"body": "oh test passes change looks like javascript test correct object removed content removal function var removedobject removeobjname emberrun function sortedarraycontrollerset sortascending false removedobject sortedarraycontrollerfindproperty name scumbag katz removeobjname removedobjectname sortedarraycontrollerremoveobject removedobject", "d": "3/2013"}, {"body": "related", "d": "3/2013"}, {"body": "awesome thanks helping everyone", "d": "3/2013"}, {"body": "retract earlier comment think needs sticking around", "d": "3/2013"}, {"body": "sure bug seems work nt seem documented", "d": "3/2013"}, {"body": "ran esseelle point breaks unquoted partial names works fine quotes work replacing trick maybe warning future unquoted could look property", "d": "3/2013"}, {"body": "bringing lukemelia suggested drop prefix partials unsure want practice would clear confusion", "d": "3/2013"}, {"body": "still needed influx new developers say ever", "d": "3/2013"}, {"body": "working something along lines", "d": "3/2013"}, {"body": "peter let know anything could help write tests document whatever", "d": "3/2013"}, {"body": "guess longer issue emberjswebsite", "d": "3/2013"}, {"body": "ahazem believe would also want api docs although unsure would go vote close trek", "d": "3/2013"}, {"body": "sure status seems somewhat similar", "d": "3/2013"}, {"body": "kayleg example would function information needs determine whether user logged without already deserialized would asking another controller eg whether logged", "d": "3/2013"}, {"body": "machty case using application ready function check correct cookie set try fetch currentuser else redirect back index fetching currentuser errors also redirect back index secure routes check appcurrentuser loaded", "d": "3/2013"}, {"body": "global appget user value initialized either using deferreadinessadvancereadiness application load via login route application loaded coffeescript appauthenticationrequiredmixin embermixincreate redirect gt unless appget user transitionto login appwidgetroute emberrouteextend appauthenticationrequiredmixin model params gt appwidgetfind paramswidgetid problem occurs somebody goes directly without logged case model gets called server returns unauthorized sit looking completely blank page layouts type point longdelayed redirect function finally gets called snap login route weird say least something strange going promises edit yes appwidgetfind returns unloaded object implements via dsloadpromise router blocks promise restadapterfind never specifies error handler leaves widget unloaded state wget name somehow convinces loaded causing router finish routing looks like really ember data issue two may better way provide functionality appauthenticationrequiredmixin best could figure documentation source", "d": "3/2013"}, {"body": "would really nice guys soon find implement enough hooks find document stable way implementing loginauthenticationauthorisation ember spent hours searching implement authentication ember rails everywhere find different hacks solve undocumented critical feature web apps really needs addressed ember hits imo nice see progress discussions ways achieve", "d": "3/2013"}, {"body": "everyone please take look tell would cover use case basically transition confirmed nt think reorder redirect happen code working gives opportunity within transition event handler redirectprevent attempted transition deserialize ever called examples gist live code runs changes question making sure settle correct pattern suggesting somewhat daring side please check see could adapt use cases", "d": "3/2013"}, {"body": "wow matchy code looks amazing really clean way define kind logic imo sweet", "d": "3/2013"}, {"body": "pattern looks good nice explicilty state conditions per transition basis instead multiple ifelse statements one method proposed machty nested routes would follow dot pattern like linkto helper routing guide rather slash pattern like urls templates right nt go code changes notice pesky collectobjects function gone performance aspect string based keys become issue transitions list grows thinking case one several named transitions make matters worse add nested routes realize transitions relatively low occurrence app startup may worth checking disclaimer working performance critical stuff recently previous paragraph might worthless case", "d": "3/2013"}, {"body": "logic method transition object preserved could scare people yes nested routes follow dot pattern like mostly done way keep logic knows naming scheme concerned performance nt tons tons defined plus transitions oneshot events afford slower something might occur loop plus think optimizations future need", "d": "3/2013"}, {"body": "build master still nt appear working setting content controller ember data object actual controller content null controller returned controller see two different values controller following get correct value however similar original issue something silly", "d": "3/2013"}, {"body": "tonywok converted using debugging actually using app latter aware private used actual app", "d": "3/2013"}, {"body": "wagenet using debugging view reference controller content set correctly however controller set able get work using curiosity", "d": "3/2013"}, {"body": "tonywok suspect issue something else like file new issue failing jsbin jsfiddle", "d": "3/2013"}, {"body": "wagenet thanks time", "d": "3/2013"}, {"body": "bitten bug causing pulled built make progress one thing controller like barindexcontroller reason thisget controllersbarnew undefined would expect barnew resolve controller defined route", "d": "3/2013"}, {"body": "running issue inkredabull example sure tell container register", "d": "3/2013"}, {"body": "length notified though length actually changes swapping element instance would notify length would notify edit days ago idea showed top list strange", "d": "3/2013"}, {"body": "using moment seems trick eg event router somewhere clear outlet view", "d": "3/2013"}, {"body": "already raised concerns please nt close issue framework strong conventions conventions easily overridable worked ember apps new router already relied fact override default behaviour", "d": "3/2013"}, {"body": "looked seems support outerhtml method fallback browsers nt support method found", "d": "3/2013"}, {"body": "right replacing string method packagesemberviewslibsystemrenderbufferjs got working firefox lt ugly someone deeper understanding renderbufferjs probably create much nicer fix", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "workaround seem work anymore think control support non singleton controllers render nt think know enough emberjs implement wycats insights plans control regarding issue", "d": "3/2013"}, {"body": "schmidp nt think much changed front comment whether still issue", "d": "3/2013"}, {"body": "machty yes still case", "d": "3/2013"}, {"body": "darthdeus thanks keeping uptodate fyi anyone come issue via error using ruby sprocketshandlebarstemplate gem make sure latest barber dependency today error updating barber fixed", "d": "3/2013"}, {"body": "looked seems support outerhtml method fallback browsers nt support method found", "d": "3/2013"}, {"body": "used binding eg works get inversed calculated property computed seems ignored adding", "d": "3/2013"}, {"body": "ran looking using controls build datepicker widget seems like would useful thing use control want able however nt work bindings nt get passed meantime probably go view inline controller code view seems like view nt know stuff anyway long story short accepting property bindings get sent controller seems like would useful making kind components may wrong idea control meant used", "d": "3/2013"}, {"body": "dug source understand problem nt realised properties sent view problem knowing want send view controller seems similar issue helper need know collection item similar approach could work might make sense go way default controller allow specifying view options although might counterintuitive different helpers", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "costent thanks", "d": "3/2013"}, {"body": "rlivsey think fixed still issues please file new ticket clean slate", "d": "3/2013"}, {"body": "issue needs input glad remove hacks cringeworthy best", "d": "3/2013"}, {"body": "phpaddiction sirzach seen method would nt cover use cases", "d": "3/2013"}, {"body": "end using redirect part works enterfilter naming threw nt fit exactly nt thought completely couple weeks pushing get ember app door production think wanting canenter canexit type scenerio nt want make transition find ca nt enter nt want logic redirect prevent entrance sending route transitioning thats way keep things robust", "d": "3/2013"}, {"body": "closing ideas outdated nt hold much merit others proposed two likely candidates handling sort thing opinion event transition handlers described actually implemented mechanism attempted transitions converted actions sent routes via original idea precursor issue shown work production apps ebryn took approach square router partial first option like dsl drawing transitions overrides easy dynamically inject intermediate routesstates purpose animation among things regardless seems best way go forward point amass suite different use cases compare two different approaches get closer point start fresh discussion feel free continue post closing since diverged concept", "d": "3/2013"}, {"body": "missing discussion implementation get pr merged aside good suite tests else holding issue", "d": "3/2013"}, {"body": "essentially everything nt even pull request top head extension coffeescript patch javascript person actually used far know discussion feedback anyone core team discussion feedback anyone except supports history location hash location support helper tests happy work code issues tests however moment going nowhere without buy ember core team milestone seem quite busy doubt going given serious consideration wrong merge proper pull request javascript hash location support tests happy work issues nt think priority team moment nt want waste loads time right find want query string support patch constantly goes date master maintain get around giving consideration needs", "d": "3/2013"}, {"body": "way glad using working", "d": "3/2013"}, {"body": "toranb new version broken cases", "d": "3/2013"}, {"body": "taking shot implementing core location based solutions much like one alexspeller proposed use one hashlocation functional particular scenarios hacks best one issue keeps coming determine contexts affected query string transitioning route handlers higherup maintain context good thing however query string changes could affect active handlers without specific information routes call obviously desirable behavior way see several approaches problem give every route handler method filters query parameters route uses save return value method handler transitioning compare new query string object current one changes actually implemented point felt like hack allow query string parameters leaf route handler allow set query string parameters every handler essentially allowing mildly strange urls like urlwise actually seems quite nice contains query string parameters handler affect would require support routerecognizer though far nt able find clean way add optional different note much complex old nt pretty much thing way assuming query string affects model app paginate sort server side query strings params sent api imagine scenarios influences something routecontroller context case might want call two cents hopefully ranting much still positive implementing sometime soon much like guys opinion things upload implementation shortly clarify talking", "d": "3/2013"}, {"body": "passing nt given much thought repercussions implementing syntax similar matrix parameters", "d": "3/2013"}, {"body": "hmm like like syntax feels less awkward wo nt easier implement though", "d": "3/2013"}, {"body": "hmm matrix parameters could work may even elegant way avoid calling deserialize route transitioning although current solution implemented emberquery possible affect model without calling deserialise every route callback called every route need intercept correct route however bit hack sure instances wo nt work thinking matrix params approach seems like best compromise especially allows global state maintained parent routes fact suspect matrix params would even require changes emberjs extension could nt parse current route callbacks already exist eg javascript parsematrixparams function string params var pairs stringsplit pairsforeach function pair var kv pairsplit params kv kv return params approutermap function thisresource posts path posts params postsroute emrouteextend model function context params parsematrixparams contextparams return mymodelfind page paramspage nt tried wo nt robust moment foosbarastringwithansignanda example reason wo nt work moment", "d": "3/2013"}, {"body": "main issue approach like parameters nt optional forces uri end slash although posts uri actually parameters specified also used something like back seem recall matching issues without parameters want something like issues well params left empty", "d": "3/2013"}, {"body": "wo nt work expect hook called solution host dynamic segment inner route responsible stash params somewhere bubbles hook simply call find stashed params stashed controller javascript approutermap function thisresource posts function thisroute index path params postsindexroute emberrouteextend serialize function parse stash params postsroute emberrouteextend model function return postfind stashedparams need latest master get pr fixes behavior also need handle case url accessed directly called delegate case", "d": "3/2013"}, {"body": "kamal could show stash params curious string values get put pulled dynamically", "d": "3/2013"}, {"body": "toranb gets stashed model full example set spent inordinate amount time trying figure put right callbacks order get called javascript approutermap function thisresource posts function thisroute index path params postsindexroute emberrouteextend model function params return thiscontainerlookup route posts model params serialize function return thiscontrollerfor posts get params pull stash setupcontroller function controller model model thiscontrollerfor posts setproperties model model params modelget params pull stash postsroute emberrouteextend model function params params params thiscontrollerfor posts get params var records postfind params recordsset params params stash model return records go url flow value performs find built default state controller calls find stuffs instead route flow performs find current controller state serializes controller state", "d": "3/2013"}, {"body": "mention get called already route hack route basically redirects back", "d": "3/2013"}, {"body": "kamal thanks quick reply might wait official deploy nice working example helps grok router exists today thanks full example", "d": "3/2013"}, {"body": "another idea deserialize stuff perhaps route could specify exactly params affect eg would require slightly complex implementation would result deserialize model hooks called parent routes query params changed would therefore efficient whilst sticking conventional querystring style every setupcontroller hook state tree called transition anyway issue eltehupkes think approach", "d": "3/2013"}, {"body": "yeah indevelopment app uses something like seem train thought still feels like hack nt agree requires configuration user want work currently trying incorporate matrix parameters routerecognizer believe would make things much flexible", "d": "3/2013"}, {"body": "suppose working would better slightly torn matrix parameters strange new query parameters comfortable reassuring happen never heard trying get head around honest way ember route works think make sense conceptually think need get used idea", "d": "3/2013"}, {"body": "alright built something like opinions code branch created quick jsfiddle mess around without code address bar quite useful case overview modified routerecognizer recognizegenerate query strings handlers handler query string path nonempty exception root index route posts nested handler empty path handler would nt support query string prevent things like specifying query objects transition methods done using special objects separated context objects internally avoids need additional every transitiontype method objects created using instance transition posts route specifying query object note supply query object every handler along way transitioning called every route handler new query object supplied specify query object route left current state supplying boolean false clear queries assumed affect context way context object passed called object determine query route query object already supplied handler somewhat conflict situation case supplied query takes preference using supply static dynamic query parameters apply route linking nt thought good syntax yet supply parent handlers links currenly maintain parent states query string known issues change parent handler query scenarios needed probably scarce though using without query options generated url reflects query time url generated holds parent handlers query string link href would bind query string objects handlerchain nt yet found proper solution else make pretty serious changes onecharacter state recognition would simply support optional query string path exactly sure implications whether make anybody angry p probably worth mentioning entire test suite still passes change actually two tests fail unrelated tests also fail master hoping feedback", "d": "3/2013"}, {"body": "issue fixed ember original fiddle one forked uses ember still seem issue chrome", "d": "3/2013"}, {"body": "goes investigate", "d": "3/2013"}, {"body": "knowuh actually reproduce details", "d": "3/2013"}, {"body": "stefanpenner sorry mistake must malfunctioning chrome extension reran using incognito window could longer reproduce either sorry trouble", "d": "3/2013"}, {"body": "knowuh problem better safe sorry", "d": "3/2013"}, {"body": "updated jsfiddle works anyone watching issue", "d": "3/2013"}, {"body": "two issues may related", "d": "3/2013"}, {"body": "wagenet wycats tomdale plan fixing would like refactor places currently use make code simpler would love contribute fix sure plan behave", "d": "3/2013"}, {"body": "drogus nt know plan best bugging wycats tomdale", "d": "3/2013"}, {"body": "pivotalmedici seems like definitely issue sure without able reproduce possible give core team member access app maybe via pairing session", "d": "3/2013"}, {"body": "also spent days tracking symptom mouse drag events nt delivered properly new view jquery draggable amp selectable stop working nt workaround yet hopefully additional details help someone else", "d": "3/2013"}, {"body": "seems likely making perroute loading routes vs single global loadingroute exists today mind think handle route whatever call single global state multiple ones depending", "d": "3/2013"}, {"body": "multiple failure states makes sense failure might mean different things based route much like loading", "d": "3/2013"}, {"body": "pagination essential functionality", "d": "3/2013"}, {"body": "either guide handroll w ember seeing common", "d": "3/2013"}, {"body": "anyone looking date friendly pagination example got working back button support router included", "d": "3/2013"}, {"body": "toranb clientside example take account meta say level functionality live standalone mixin nice work routes btw sort route definitely something useful sure bookmarking particular page though least affords history functionality need support obtaining meta information paginating things like limit etc", "d": "3/2013"}, {"body": "loadx agreed solution nt scale well nt true server side pagination solution depend emberdata mvc part ember", "d": "3/2013"}, {"body": "absolutely pointed emberdata ticket cheers", "d": "3/2013"}, {"body": "getting pretty sure latest ember data strange bug", "d": "3/2013"}, {"body": "even worst returning value promise wo nt give error simply render view", "d": "3/2013"}, {"body": "solution new router read ghempton gist lukemelia gist question refer old router", "d": "3/2013"}, {"body": "indeed", "d": "3/2013"}, {"body": "perhaps tangential official browser support denoted anywhere quick google search ember browser support yields handful stack overflow questions clearly something people considering investigating ember wagenet know mention browser stack top hit answer documentation could specific browsers nt passing unit tests given time ember approaches official support list would probably useful aforementioned documentation pointing polyfillstools like jquery hashchange expanding support could place", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "public service announcement provide development resources lacking already agreed love feature much nontrivial support certainly something block", "d": "3/2013"}, {"body": "agreed wagenet nontrivial code paths touch mission critical parts ember", "d": "3/2013"}]