[{"title": "need warning onclick case", "body": "render component prop get warning console tells need use instead", "num": "4257", "d": "6/2015"}, {"title": "extend proptypes deprecate getdefaultprops", "body": "prop types easy describe via proptypes find unfortunate obvious proptype default especially null accepted value short summary get react type warnings act intended flow syntax first optional flow somestring string react proptypes somestring reactproptypesstring getdefaultprops function return nonoptional flow somestring string react proptypes somestring reactproptypesstringisrequired getdefaultprops function return optional default value flow somestring string default react proptypes somestring reactproptypesstring getdefaultprops function return somestring default nonoptional default flow somestring string default react proptypes somestring reactproptypesstringisrequired getdefaultprops function return somestring default give type warnings would expect based flow type especially nonoptional default case really hard read react perhaps alternate syntax proptypes incorporates default values considered also solves readability issue would think resolved runtime fact considered set static values discovered issue code nonrequired prop default acceptable value issue get warning overwrite react thinks acceptable putting something default value looks really funky", "num": "4256", "d": "6/2015"}, {"title": "best way properly render tags javascript date object", "body": "rendering renders format used element see mdn info willing build custom component want make sure one already exist existing way aware", "num": "4255", "d": "6/2015"}, {"title": "ca nt reactrender tbodyelement multiple times", "body": "currently trying replace parts huge angularjs application react goal speed rendering times especially comes displaying large dataviews trying ran strange problem trying call reactrender multiple times element react throws following two warnings warning render target node markup rendered react unrelated nodes well commonly caused whitespace inserted around serverrendered markup warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client created simple fiddle demonstrating issue code works render element example missing something ps thanks awesome work reactjs still love", "num": "4254", "d": "6/2015"}, {"title": "mouseenter fires disabled inputs whereas mouseleave", "body": "asymmetry enterleave event plugin since created relativetarget event fires even though target disabled since inverse ie requires disabled element fire mouseout nt fire disabled element pretty sure correct behavior neither event fire target disabled since mirrors idea nonechrome browsers behavior mouse events fire disabled elements additional caveat realized react probably also firing events case mouse leaves disabled element non disabled element", "num": "4251", "d": "6/2015"}, {"title": "mechanism listen events", "body": "already mechanism help document like method api could call listen synthetic events something like like able stoppropagation preventdefault events well", "num": "4250", "d": "6/2015"}, {"title": "bind event render function", "body": "hi friends consolelog event shows undefined access event thanks", "num": "4247", "d": "6/2015"}, {"title": "add runtime deprecation warning clonewithprops", "body": "", "num": "4245", "d": "6/2015"}, {"title": "get dom handle", "body": "trying use reactfinddomnode item error thrown small demo shows problem parent component mounted related additionally behavior didmount didupdate handlers currently undefined regards fire relation children therefore refs example componentdidupdate guaranteed fire children fully mounted sebmarkbage source", "num": "4244", "d": "6/2015"}, {"title": "force element sub tree cleaning", "body": "hi big search result set rendered make new search request server return new unique results think case need calculate optimal dom difference simply right remove dom sub tree resultset render new understand correctly attribute key solve problem thanks answer", "num": "4243", "d": "6/2015"}, {"title": "expose specpolicy user defined methods", "body": "using sets flux event listeners using unfortunately one add mixin add mixin component already using really want would set storewatchmixin method", "num": "4236", "d": "6/2015"}, {"title": "ios extra nodes still emitted react rendering result mapping immutable collection", "body": "understand considered fixed still similar issues iphone following react immutable using webpack babel stage transpiler sure might effect works properly chrome desktop however safari iphone prints number without bullet list items user agent string safari iphone thanks andy", "num": "4235", "d": "6/2015"}, {"title": "two different outputs terminal web inspector incorrect view rendered", "body": "trouble generating views two views would like generate var initials loggedin var notloggedin var initials var isloggedin false var layout reactcreateclass componentwillmount function try window amp amp windowuser initials windowusernamefirst touppercase windowusernamelast touppercase isloggedin true catch e ignore render function isloggedin consolelog windowuser consolelog initials return else consolelog logged return run code different outputs terminal web inspector terminal web inspector object username userid address name object email bradfordli gmailcom bl first second output displayed sure occurring sure handle achieve desired logic view displayed broswer", "num": "4234", "d": "6/2015"}, {"title": "cryptic error message finddomnode unmounted component", "body": "per finddomnode throws unmounted components error message cryptic expert react users honestly thought duplicate react something nt even bother check whether component mounted nt", "num": "4233", "d": "6/2015"}, {"title": "uncaught error invariant violation findcomponentroot unable find element", "body": "modal component click button trigger gives component button happen remove onclick event trigger element ca nt figure problem", "num": "4227", "d": "6/2015"}, {"title": "wrap attribute supported", "body": "wrap missing meanwhile wrap attributes standards", "num": "4226", "d": "6/2015"}, {"title": "html elements respond mobile", "body": "hello learning react meet problem integrate zepto ratchet react develop mobile use gulp build entire app gulpreact precompile jsx works concat vendor scripts zeptojs ratchetjs reactjs one vendorcss precompile jsx one file appjs gulpreact write component named login loginjsx loginhtml elements rendered remove ratchetjs works help thanks amp regards", "num": "4224", "d": "6/2015"}, {"title": "automatic bailout nt take context account", "body": "see following thread quick fix", "num": "4219", "d": "6/2015"}, {"title": "children parentbased context changes nt update", "body": "js var top reactcreateclass childcontexttypes reactproptypesany getchildcontext return thisstatenow getinitialstate return datenow componentdidmount setinterval gt thissetstate datenow render return thisstatenow reactcloneelement thispropschildren var middle reactcreateclass render return reactchildrenonly thispropschildren var child reactcreateclass contexttypes reactproptypesany shouldcomponentupdate return true render return thiscontextnow remove bailout reconciler works reactrender documentgetelementbyid example still doesnt reactrender documentgetelementbyid example", "num": "4218", "d": "6/2015"}, {"title": "sugestion make warnings dev mode output consoletrace", "body": "seeing something like warning use keyed object wrapped reactaddonscreatefragment object passed child really useful much nt know offending code trace call would really help narrow application problematic code would also obliviate need pointless trycatch needs edited even work catches error throws", "num": "4216", "d": "6/2015"}, {"title": "warning getinitialstate defined plain javascript class even using reactcreatclass", "body": "trying migrate code base one recurring warnings though seems bit weird actual component requirejs module see javascript define function require use strict var react require react var component reactcreateclass displayname component return component something wrong inadvertently", "num": "4214", "d": "6/2015"}, {"title": "forward refs support getpublicinstance", "body": "like feature allows us forward refs define public instance component way make higher order components completely transparent", "num": "4213", "d": "6/2015"}, {"title": "documentation nt inline html taint dangerouslysetinnerhtml", "body": "tutorial uses though explicitly recommend", "num": "4212", "d": "6/2015"}, {"title": "guidance storage performance reasons", "body": "sandboxed contrived example usecase rough usecase chat app character typed stored backbone model backbone collection filtering purposes etc new character typed add new model collection use set property collection map property output text specific question best way get best way react terms storing typed text state object better way avoid rerendering whole block text typing new single character", "num": "4211", "d": "6/2015"}, {"title": "calling onblur mutating state cause onclick fire", "body": "encountered trying different parts form validation happen onblur onclick seems update state onblur state element injected dom via jsx positionally button onclick onclick fire believe related issue see variation example provided enter text click button twice see click true confident order matters dom see consistently reproducable jsfiddle andeladomonori first noticed weird behavior", "num": "4210", "d": "6/2015"}, {"title": "transitiongroup persists components assigned leave", "body": "sample list items one active maybe misusing transitiongroup keeps item replaced jsx var reacttransitiongroup reactaddonstransitiongroup var active reactcreateclass render function return active var inactive reactcreateclass handleclick function e epreventdefault thispropsactivateitem thispropsid render function return var list reactcreateclass getinitialstate function return activeid activateitem function id thissetstate activeid id render function reactrender documentbody", "num": "4205", "d": "6/2015"}, {"title": "cloneelement working expected", "body": "code lays components like xaml stack panel looks layout properties calculates style based available width height sets styles properties contained child elements inside map applies children via cloneelement var paddedcontainment thiscalculatepaddedcontainment thispropslayout thispropsstylewidth thispropsstyleheight return reactchildrenmap thispropschildren function child var expandedlayout thisexpandlayout childpropslayout var size thisgetlayoutcontainment expandedlayout paddedcontainment paddedcontainment thissubtractdockcontainment paddedcontainment size var style thisgetlayoutstyle thispropsstyle expandedlayout paddedcontainment return reactcloneelement child style style passed component defined children elements defined jsx spits note component cloned keeping ref inserted underneath single object ref style applied using clonewithprops get correct final structure ie copy original lose ref ui longer works ca nt get resultant component methods first thought might ref displayname causing issue changing either effect still insert", "num": "4203", "d": "6/2015"}, {"title": "componentrender silently swallowing errors console output", "body": "piece code render function erroring simple trycatch able capture display error without react silently proceeds returning render function error makes difficult find basically error happens render fails silently displays empty component coming jsfiddle reprod simpler case debug", "num": "4199", "d": "6/2015"}, {"title": "getinitialstate static function", "body": "understand old api design ideal disagree assigning instance property constructor better function conceptually type signature ie pure function converting props state old defined instance also access however make function static therefore making pure js allows practice stateful component would look like code javascript class counter extends reactcomponent static proptypes initialcount reactproptypesnumber static defaultprops initialcount static initialstate props return count propsinitalcount tick thissetstate count thisstatecount render return another advantage construction nt override component constructor function defined declaratively straightforward easy understand way unlike example react blog post feels like much magic gives implicit function access full instance instead props illustration proposed blog post", "num": "4197", "d": "6/2015"}, {"title": "form events ff missing targetlabels", "body": "mini search mdn specs checkbox eventtargetlabels nt seem standard defined anywhere thing chrome idea worth polyfilling firefox", "num": "4195", "d": "6/2015"}, {"title": "warn class componentdidunmount method", "body": "would nice would throw warning console lifecycle method", "num": "4194", "d": "6/2015"}, {"title": "factorytype deprecated access class directly passing createfactory", "body": "getting warning unable work find documentation explanations error mean likely causes thanks", "num": "4193", "d": "6/2015"}, {"title": "change cursor position input fields", "body": "bug happens latest ff regardless platform code type something change type middle cursor position changes goes back beginning nt", "num": "4191", "d": "6/2015"}, {"title": "make react run without", "body": "ok react requiring shims include whether react needed however nt believe react require work among reasons including shams potential break libraries page hence nt sound like good practice one library demand two shams react says requires code npm one used entire codebase function invocations nt sound like good reason requiring library potential side effects best practice react would probably provide small module providing either native function internal sham would also positive internal shams would nt waste bytes trying sham functionality react nt need could emit invariant warnings misused development instead failing potentially silently way would", "num": "4189", "d": "6/2015"}, {"title": "event handler bound correctly babeljs", "body": "hi found inspect inside event handler using syntax w babeljs using jsx embeeded parser get undefined fiddle reproduce problem sure post issue also babeljs guys thanks", "num": "4187", "d": "6/2015"}, {"title": "breakword example", "body": "example convert textarea value realtime lack wordbreak breakword output", "num": "4180", "d": "6/2015"}, {"title": "using reactaddonscsstransitiongroup adds extra", "body": "may user error maybe using babel matters renders app hello world however try mess csstransitiongroup renders extra spans hello world something wrong please point right direction maybe note docs missed thanks guys keep great work", "num": "4179", "d": "6/2015"}, {"title": "sub components nt always render", "body": "campaigns component campaignform wo nt render inside sidebar outside sidebar tag render cjsx example put directly inside sidebar render function renders fine breaks whole idea loosely coupling sidebar abstract fails render campaignform render campaignform fine", "num": "4178", "d": "6/2015"}, {"title": "website issue", "body": "text nt fit many characters typed input output example", "num": "4177", "d": "6/2015"}, {"title": "jsx compiler broken pass anonymous function one args", "body": "javascript reactrender text documentbody compile jstransform wrong", "num": "4175", "d": "6/2015"}, {"title": "typeerror checker function validate", "body": "somehow weird warning printed console property produces print warning console looks like bug using react", "num": "4173", "d": "6/2015"}, {"title": "support iframe security attribute ie", "body": "attribute allows restrictions placed iframes regardless domain useful dealing ie versions less nt attribute info", "num": "4169", "d": "6/2015"}, {"title": "style prop error lacks context", "body": "error probably please check render method message give context", "num": "4168", "d": "6/2015"}, {"title": "use inline event handlers trapbubbledeventslocal ios safari click hack", "body": "currently lot work end mount find nodes attach listeners fact severely impacting initial rendering performance click handlers instead use inline event handlers innerhtml string ios safari hack trivial handler nt even anything inline event handler would need either redispatch event call event handler system probably global listeners since could potentially multiple reacts probably chain handler already one registered although multiple reacts document already pretty broken regard nt global since inline event handlers gets element added scope around equivalent add prototype makes bit hidden unobtrusive still need render string serverside rendering avoid needing change html wire handlers afterthefact client since events fire react loaded need check existence handler used critical string short innerhtml string concat performance network performance yet needs unlikely collide anything else unicode character could use", "num": "4166", "d": "6/2015"}, {"title": "ismounted returning undefined", "body": "ismounted returning undefined instead falsetrue js checks whether composite component mounted return boolean true mounted false otherwise protected final ismounted function production processenvnodeenv var owner reactcurrentownercurrent owner null production processenvnodeenv warning ownerwarnedaboutrefsinrender accessing ismounted inside render function render pure function props state never access something requires stale data previous render refs move logic componentdidmount componentdidupdate instead ownergetname component null ownerwarnedaboutrefsinrender true var internalinstance reactinstancemapget undefined case return internalinstance amp amp internalinstance reactlifecyclecurrentlymountinginstance please check long story", "num": "4163", "d": "6/2015"}, {"title": "dangerouslysetinnerhtml putting object object dom", "body": "component making method javascript contenteditablejs makemarkup const markup thispropshtmlmap reactrendertostring join consolelog markup return markup logs however actually put dom reason", "num": "4161", "d": "6/2015"}, {"title": "accept iterables children", "body": "would allow things returns iterable", "num": "4160", "d": "6/2015"}, {"title": "capturing charcode ctrl modifierspecial key key seems unclear", "body": "contenteditable element trying capture key combos ie ctrl c using nt seem possible special keys nt reported also fails get one event ctrl key one next key could check true however nt help obtaining charcode key combo jsbin demo trying achieve type ctrl c editable advice proceed would appreciated", "num": "4159", "d": "6/2015"}, {"title": "support stateful test renderer", "body": "plan move unnecessary state production renderer therefore public api introspect current state tree ie props inspection etc react devtools maintain shadow tree introspection reflection purposes however also means use run deeply rendered unit tests longer able use various reflective apis inspect state current react tree legacy utils etc recommended unit testing solution shallow testing however would possible create new renderer keeps track whole react tree including props therefore reenables stateful unit testing might helpful upgrade path eg something like would forked version primary renderer see cc spicyj dataminr", "num": "4153", "d": "6/2015"}, {"title": "form created reactcreateclass nt work onsubmit", "body": "working project using jsx make form reactcreateclass onsubmit attribute nt seem working like jsx need set onsubmit differently using jsx", "num": "4149", "d": "6/2015"}, {"title": "make sure examples work babelbrowser", "body": "currently examples depend jsxtransformer behavior eg get rid jsxtransformer examples need updated appropriately", "num": "4147", "d": "6/2015"}, {"title": "data attributes value regular attribute value", "body": "issue react one looking native html attribute value cases passing value valid experimentation dataattributes ca nt applied without value try get attempting use tablesaw jquery plugin dataattributes require without values function properly would great dataattributes could applied without values thanks", "num": "4146", "d": "6/2015"}, {"title": "using template strings throws error safari invalid character", "body": "using template strings jsx files seems supported safari nt like backtick character safari following code throws error see jsbin one solution use inbrowser transformation good practice anyway anybody know workaround tried specifying jsx script tags nt help", "num": "4143", "d": "6/2015"}, {"title": "iife mention ifelse jsx", "body": "page offers ternary expressions solution conditional logic inside jsx perhaps iifes also get mention realizing could iifes inside jsx helped flesh mental model jsx actually works suspect would aide others way well furthermore advent arrow functions nt verbose either code example utilizing iife might overkill least passing mention would nice", "num": "4141", "d": "6/2015"}, {"title": "support xul", "body": "filing issue seriously looking using react firefox devtools starting work migrating components xul weird constraints format dom edge cases hope somehow make work longterm want migrate away xul option works nicely create custom xul elements first thing ran boolean attributes xul always specify property value invalid must fixed hidden attribute changing option foresee customize object interesting solution would private api override config somehow well along enough yet suggest real solution want document things hit", "num": "4138", "d": "6/2015"}, {"title": "implications shouldcomponentupdate render callbacks", "body": "related thread discuss understand shouldcould behave rendercallback pattern example using reactstate example clicked everything updates expected however clicked nt receive new props risks stale data wo nt reflect changes state technically correct since render callback nt pure methods think work around rendercallbackcomponent alternate name please implements always return current preferred way component kinda equivalent stateful function wrapper children children would rendered anyway reactstate works also reactsprings etc render callbacks must always pure dependent arguments passed callback also fairly performant con utility pattern diminishes little rendercallbackcomponent accepts props render callback dependent sorta like method except props nt passed callback used rcc tell update based example could look like con fiddly also looks like ember model dependency syntax might bad marking explicit dependencies thoughts advice cc chenglou", "num": "4136", "d": "6/2015"}, {"title": "release", "body": "still little ways away starting list lose track less big picture like longer tail work misc x remove reacttools jsxtransformer mentions docs x update reacttutorial repo use babelbrowser polish readme react reactdom x update fbme scripts exclude jsxtransformer x update node development better moving forward stable branch maintenance x update cdnjs jsdelivr autoupdaters account documentation changes x updates refs stateless function components x update desired api usage eg final steps x create branch x shrinkwrap x actually publish places x update jsfiddles x base x thinking react x update changelogmd x make sure master branch documentation changes made x update reacttutorial repo final changes", "num": "4135", "d": "6/2015"}, {"title": "unexpected jsx whitespace handling leading trailing tags", "body": "related closed issue sure whether considered bug working intended least throw vote behavior unexpected given following example jsx var test reactcreateclass render function return demonstration unexpected whitespace handling reactjs reactrender documentbody demonstration jsbin would suggest expected rendered output component would whereas actual output whitespace unexpected whitespace reactjs would consider unexpected two primary reasons inconsistent html handling whitespace removing tags leaving newlines indentations unchanged causes whitespace preserved simply bug suppose need belabor point rationale leadingtrailing tags behaving different leadingtrailing plain text thanks", "num": "4134", "d": "6/2015"}, {"title": "oops", "body": "", "num": "4133", "d": "6/2015"}, {"title": "stop building jsxtransformer", "body": "separate cherrypicking purposes", "num": "4130", "d": "6/2015"}, {"title": "replace jsxtransformer babelbrowser website", "body": "", "num": "4129", "d": "6/2015"}, {"title": "shallow rendering testing components render callbacks", "body": "based comment thread starting thread discuss test components render callbacks consider following app js class double render return thispropschildren thispropsvalue class app extends reactcomponent render return doubled reactrender el output expected wanted test could write something like js var stateful testutilsrenderintodocument var div testutilsfindrendereddomcomponentwithtag stateful div divgetdomnode textcontentshouldeql however ca nt test beyond callback boundary unclear approach frankly shallowrenderer recognize components like marked flag thisrenderscallback true workaround use shallowrenderer cc", "num": "4127", "d": "6/2015"}, {"title": "add event behaves similar native event", "body": "react repurposed behave like way get actual event behaviour without binding nondelegated native event lifecycle events event behaviour sometimes important like behaviour make sense react uses live updating state associated anything derived use cases like triggering ajax post user finished input require standard behaviour text inputs fired user finished input use cases reasonable support within react going changed behave nonstandard way add another custom nonstandard event name lets react elements bind behaviour closer behaves react event delegation handling event name ideas onchangecommit ted oncommit ted change onvaluecommit ted oncommitvalue oncommit idea using commit name comes html spec change event fires value committed section common event behaviours", "num": "4126", "d": "6/2015"}, {"title": "omit anchors headers feed", "body": "rss feed anchors links headings looks kinda ugly feed readers nt really serve purpose feed readers modify links relative feed url links actually becoming nt anything useful remove feed", "num": "4124", "d": "6/2015"}, {"title": "invariant violation reactmount two valid unequal nodes", "body": "trying display dropdown menu composed similar one bootstrap element used generate dropdown menu store browser correctly parsingoutputting html everytime click item got error datareactid bug probably related ca nt find solution sweat iusing react also tested latest master html dom view view tree react plugin chrome screenshot result blue element nothing", "num": "4120", "d": "6/2015"}, {"title": "optional newline support", "body": "sure best place put issue good optional newline support built jsx compiler example js render function return hi whitespace important tag see giving developers power create better elements", "num": "4118", "d": "6/2015"}, {"title": "unclear whether legal read state props externally", "body": "react api documentation give mixed messages whether state safe read externally code call componentstate figure component state useful several situations particularly valuable writing unit tests javascript convention would believe public variable nt supposed read would expect called state documentation nt appear component api examples used jest examples either componentprops similar situation although admit one much less useful since nt come frequently unit tests imagine ways make clearer depending react team intentions intend public add public component api use official examples nt intend public ideally could trickery closures inside reactrender input reactcreateclass touch variables object returned reactrender nt expose barring help names started underscore engineers would know private", "num": "4116", "d": "6/2015"}, {"title": "request option issue warning prop passed unlisted proptypes", "body": "proptypes incredibly useful feature react especially option nearly every component create started proptypes option refactors occur features added progress tdd occurs found sometime add prop component forget add proptypes like see happen option make proptypes issue warning prop passed component listed proptypes object sort opposite isrequired option isrequired issues warning specified prop passed component strictproptypes option issue warning pass component prop listed proptypes example javascript var foo reactcreateclass strictproptypes true proptypes bar reactproptypesstringisrequired baz reactproptypesstring render function return reactrender foo qux quux would issue two warnings one passing required prop another passing prop thats listed proptypes strictproptypes true", "num": "4113", "d": "6/2015"}, {"title": "npm install react fails w invalid name", "body": "trying use browserify getting error got reacttools installed globally already problem package something different end npmdebuglog", "num": "4111", "d": "6/2015"}, {"title": "question using esnext modules need import var named react jsx even explicitly referenced", "body": "happened use destructuring syntax import grabbing ref like resultant code transpiled via babel contains reference variable named ends undefined seems jsx transpiler responsible setting variables internally referenced wanted ask question best tony", "num": "4110", "d": "6/2015"}, {"title": "doc use envify react", "body": "commit removed note envify documentation related pr far understand devdependency envify react used produce distributable files reactjs reactminjs seems used using react browserify webpack suppose envify run seems rather use envify case right yes would probably good idea document", "num": "4107", "d": "6/2015"}, {"title": "new function getvaluelink accompany valuelink", "body": "building components often want support valuelink valueonchange means need function like easily end duplicated components would idea include linkedstate mixin", "num": "4106", "d": "6/2015"}, {"title": "changing defaultvalue nt rerender input causes hidden state db", "body": "posted stackoverflow dearth answers makes think might bug given following simple code js const createfactory createclass dom label input button react const tester createfactory createclass render return label input defaultvalue thispropsname button onclick thischangename change changename thissetprops name wilma reactrender tester name fred documentqueryselector body clicking button nt rerender input still says fred even though wilma demo", "num": "4101", "d": "6/2015"}, {"title": "html accesskey cause control focus", "body": "usually providing accelerator keys html accesskey attribute added label tried react code control get focused expected result pressing altn focus control working plain html see jsfiddle var hellomessage reactcreateclass render function return first name reactrender mountnode", "num": "4099", "d": "6/2015"}, {"title": "error running react nodeenvproduction", "body": "getting running production tried versions reproduce looking code reactelement seems store initialized production mode", "num": "4094", "d": "6/2015"}, {"title": "reactlibclonewithprops throws warning", "body": "reactlibclonewithprops js copyright facebook inc rights reserved source code licensed bsdstyle license found license file root directory source tree additional grant patent rights found patents file directory typechecks staticonly providesmodule clonewithprops use strict var reactelement require reactelement var reactproptransferer require reactproptransferer var keyof require keyof var warning require warning var childrenprop keyof children null sometimes want change props child passed usually add css class param reactelement child child element like clone param object props props like modify classname style merged automatically return reactelement clone child props merged function clonewithprops child props production processenvnodeenv production processenvnodeenv warning childref calling clonewithprops child ref dangerous creating new child added ref parent null var newprops reactproptransferermergeprops props childprops use provided newpropshasownproperty childrenprop amp amp childpropshasownproperty childrenprop newpropschildren childpropschildren current api nt retain owner context nt use reactelementcloneandreplaceprops return reactelementcreateelement childtype newprops moduleexports clonewithprops note well", "num": "4093", "d": "6/2015"}, {"title": "externally injected content classbased components", "body": "use case creating element one place window manager passing reference application bootstrapper application responsible injecting elements since esque methods removed classes accomplish js uipaneelement instance uipane created rendered reference passed back windowmanagercreatewindow function uipaneelement myappmount uipaneelement myappmount somewhere else system function uipaneelement uipaneelementsetprops children thiscontent", "num": "4087", "d": "6/2015"}, {"title": "setting select value null undefined change placeholderlike option", "body": "maybe ugly pattern web pretty typical first option select sort placeholder like item implemented react would expect set prop select would change placeholderlike option seems pass empty string value pull sure something react maskhandle seems like oddity browser suggesting one two things value props choose empty value option warn passing noneffective jsbin example", "num": "4085", "d": "6/2015"}, {"title": "testsutilssimulatechange select nt work", "body": "hey guys trying simulate change value nt change component test value updated anything missing thanks ton", "num": "4083", "d": "6/2015"}, {"title": "reactcloneelement uses deprecated elementtype", "body": "following call complains deprecation warning seems come using react nt happen anymore change line confirm issue nt miss something glad submit pr want", "num": "4082", "d": "6/2015"}, {"title": "still use ownerbased context context forwarding", "body": "mean still warning probably possible future use tooltip positionning library accept raw html strings want able render react content inside tooltips lib positionned generally works fine parentchild relationship tooltipable content tooltip often causes troubles zindex generally want tooltips overflow code looks like var withtooltip reactcreateclass componentdidmount function setuptooltippositioninglibrary reactrender thispropstooltipcontent thisgettooltipnode render function return thispropschildren works fine problem like able use normal application context inside tooltip content somehow forward context tooltip content possible like dynamic maintain list childcontexttypes etc log frundefined", "num": "4081", "d": "6/2015"}, {"title": "errro", "body": "error created issue wrong repo sorry", "num": "4080", "d": "6/2015"}, {"title": "key events chrome android", "body": "must missing something pretty trivial ca nt get key handler events working android chrome jsfiddle reproduces behavior seeing everywhere android chrome get desired results typing input android events differentwrong devices events nt fired first character typed number events correct moving handlers input element behaves stock browser emulator seems work fine ios etc well like said imagine must simple mistake sure nt see", "num": "4079", "d": "6/2015"}, {"title": "runtime environment able purge modulescoped global caches", "body": "many hours contortions able get react components test headless nodejs mocha environment using domino js fake dom implementation component tests run seconds first time unfortunately using command leaks large number elements memory test run digging heap dumps found elements hiding nodecache variable reactmount file definitely calling every outer component render receiving boolean response added method local build simply resets cache cut memory loss number global caches hiding handful modules include reactmount proposal reset global utility method like seems like change would approved happy put together pull request update server side rendering environments might better exist real api testutils", "num": "4078", "d": "6/2015"}, {"title": "reactjs component rendering textarea state variable", "body": "faced issue recently solved using jquery please run app reproduce missed something appologies either way please share wisdom thread", "num": "4076", "d": "6/2015"}, {"title": "performance mounting reactcomponents", "body": "hi trying implement listview components run browser found react rendertostring reactrendertostring performance well need view react source code found function mountcomponent cost performance better way code function rendertostring element return transactionperform function var componentinstance instantiatereactcomponent element null low performance var markup componentinstancemountcomponent id transaction emptyobject low performance", "num": "4075", "d": "6/2015"}, {"title": "react rerenders svg html namespace", "body": "consider following code js var thing reactrender thing thisg var thing reactrender thing thisg first line rendered second one skip first rendering works", "num": "4072", "d": "6/2015"}, {"title": "stop building reactsource gem", "body": "sure much value really reactrails already stopped using builds files cc rmosolgo", "num": "4069", "d": "6/2015"}, {"title": "react leafletjs external library dom", "body": "hello trying use react library maps sure implement best know github project case need use raw javascript library order use unsupported features supports html marker following code wrote definitely react way removes unmounts everything recreates mounts everything works many hours trial error around markers cars map different criteria hide also retrieve slightly updated data server problem use method react devtools showed components added rerender components time growing despite underlying real dom divs deleted windowmapcarslayergroupclearlayers method nt removal dom divs external library also automatically unmount related mounted components way way unmount car components alltogether without looping example something like reactunmountcomponents car loop fullproof retrieve new data old items still remain mounted appear new list looped unmounting ideas approach nonreact dom div per marker needs exist need find way react component rendered use react lifecycles without unmount recreate every rerender thank componentwillupdate", "num": "4068", "d": "6/2015"}, {"title": "passthrough children nt rerender parent changes", "body": "given following components following implementations homejs routerjs js componentdidmount var self render return reactcreateelement div classname router thispropschildren routejs running situation since creating parent passing owner children rerender parent state changes best way around seems like pretty common use case", "num": "4067", "d": "6/2015"}, {"title": "using mixin object twice fails", "body": "lets take following use case utilmixin function utilfunc used mixina mixinb class uses mixina mixinb fail react thinks define utilfunc twice non working jsfiddle opinion react allow case function redefinition new definition old definition thoughts", "num": "4066", "d": "6/2015"}, {"title": "react syntax class methods bind instance context", "body": "example", "num": "4065", "d": "6/2015"}, {"title": "wrong html file name", "body": "ghpages branch gettingstartedjajphtml tutorialjajphtml files think file name must", "num": "4062", "d": "6/2015"}, {"title": "event null onpaste event", "body": "js handlepaste function event eventclipboarddataitems getasstring function string true eventpreventdefault event null raises uncaught typeerror read property preventdefault null", "num": "4057", "d": "6/2015"}, {"title": "shallow renderer expose rendered component instance", "body": "returns rendered component instance seems return rendered component expose way maybe method testing stateful components via shallow rendering assertions made state component instance", "num": "4056", "d": "6/2015"}, {"title": "automatically populate propschildren declared", "body": "currently writing code traverse form inputs collect form data put almost one problem left children nt always populated something like recursive function coffee collect form children coffee collectallchildren target children reactchildrenforeach targetpropschildren child gt childrenpush child children inside one form component nested react elements using react bootstrap like one called problem tries collect children firstlastnameinput children wish would return properties two inputs anyway would make things lot easier prevents dirty react hacks", "num": "4055", "d": "6/2015"}, {"title": "context propschildren", "body": "hi troubles understand context passed using nt know bug expected using react make work using function using simple declarative way example application using contextemitter children function children using declarative way javascript export default class myapp render return thiscontextvalue javascript export class contextconsumer extends reactcomponent static contexttypes value reactproptypesnumberrequired render return context value thiscontextvalue thispropschildren context properly passed javascript export class contextemitter extends reactcomponent static childcontexttypes value reactproptypesnumberrequired getchildcontext return value render return contextemitter thispropschildren thispropschildren context passed javascript export class extends reactcomponent static childcontexttypes value reactproptypesnumberrequired getchildcontext return value render return thispropschildren see result meaning using function way works otherwise expected difference thanks edit several warnings console nonworking case btw warning failed context types invariant violation contextemitter child context type invalid must function usually reactproptypes check render method warning ownerbased parentbased contexts differ values vs key value mounting contextconsumer see", "num": "4053", "d": "6/2015"}, {"title": "rendertostaticmarkup side effects", "body": "see seems wrong completely unexpected", "num": "4050", "d": "6/2015"}, {"title": "bug reactfinddomnode always null higherordercomponent", "body": "const higherordercomponent component gt reactcreateclass componentdidmount consolelog reactfinddomnode gt null render return", "num": "4044", "d": "6/2015"}, {"title": "componentwillrecieveprops warning", "body": "please implement warning component tries implement method instead method almost every react person know bitten always take minutes debugging find feel like dummy rest day", "num": "4039", "d": "6/2015"}, {"title": "spec information elements", "body": "seems add spec data element firefox rendering class components innerhtml component rendered note running selenium webdriver mochify nt able exclude nt issue started creating components regular classes", "num": "4038", "d": "6/2015"}, {"title": "nt add things queues unnecessarily", "body": "currently use transaction queue much build giant array mount one simple example add things queue unnecessarily", "num": "4036", "d": "6/2015"}, {"title": "typeerror read property currentelement null", "body": "maintainers problem please see explanation test case jsfiddle error function internalinstance null mountcomponent final internal unmountcomponent function internalinstance reactrefdetachrefs internalinstance internalinstancecurrentelement internalinstanceunmountcomponent managed fix bug simply checking internal state null requires modifying react mentions bug listed", "num": "4026", "d": "6/2015"}, {"title": "problems mocha jsdom react testing", "body": "entirely sure problem mocha react really need help figuring tests failing looks like leaks across siloed documents test setup using mocha individual test spins document jsdom loading react proceed run test individual component separate documents tests run fine run single file time run tests get errors like jsdom react created repository minimal setup detailed description anyone help figure problem avoid maybe even fix", "num": "4025", "d": "6/2015"}, {"title": "please deprecate mixins", "body": "mixins make things unclear example javascript reactcreateclass mixins b c anevent function thisfoo hard people find mixin come may search mixins documentation know hard trigger even use devtool trace source code", "num": "4023", "d": "6/2015"}, {"title": "referenceerror location defined", "body": "building master getting following error looks like uninitialized variable", "num": "4020", "d": "6/2015"}, {"title": "need test setstate shallow render", "body": "related rendering component like rendering via shallow render calling handler produces following ideally module realise running server skip behaviour check", "num": "4019", "d": "6/2015"}, {"title": "componentdidupdate componentwillupdate pass incorrect state", "body": "functions able react stateprops change happening objects var component reactcreateclass getinitialstate function return componentdidmount function setinterval function thisupdatestate bind componentwillupdate function nextprops nextstate consolelog consolelog consolelog result object object object object object object see numbers states different objects states identical cant rely componentdidupdate objects prevstate already modified", "num": "4018", "d": "6/2015"}, {"title": "react throwing unexpected errors", "body": "gave test current code runs throwing unexepected errors one components simple wrapper class around select dom node code js import react react class select extends reactcomponent render var options thispropschildren name selectproptypes name reactproptypesstring options reactproptypesarray labelclassname reactproptypesstring selectdefaultprops labelclassname export default select using component within others get following errors console sure code needs migration bug willing dig ya think might bug", "num": "4017", "d": "6/2015"}, {"title": "rerendering dangerouslysetinnerhtml child fails invariant violation", "body": "run dangerouslysetinnerhtml loads initial render rerender fails invariant violation problem shows component dangerouslysetinnerhtml unmounted remounted var react require react var demo reactcreateclass reactrender documentbody jsfiddle", "num": "4016", "d": "6/2015"}, {"title": "xss issue rendering link website", "body": "", "num": "4015", "d": "6/2015"}, {"title": "redundant codes reactcompositecomponentmixinmountcomponent", "body": "tracing codes found inside reactcompositecomponentmixinmountcomponent code reads however reactclasscreateclass props context set already seems reason duplicated codes remove one two code snippets keep one reason concerns would suggest move setup props context refs back class constructor make duty constructing duty mounting clear", "num": "4014", "d": "6/2015"}, {"title": "injection implementation", "body": "researching separate server implementation found able inject different component types allows bypass much reconciliation logic needed server via types injectable exception also noticed lot component injection spread different two files neither seem like good place add compositecomponent injection injection containers also contain default implementation many methods could bloat package sizes defaults overridden would likely server would propose contains method provides injection type component defaults implementations would provided would likely also derivative would also allow removal circular dependency wrapper", "num": "4012", "d": "6/2015"}, {"title": "nt preserve context deprecated", "body": "intentional right way cloning elements passed correctly thanks", "num": "4008", "d": "6/2015"}, {"title": "custom proptype validators receive props argument", "body": "instead object contains single key matches proptype key jsx var component reactcreateclass proptypes function props propname componentname props ever contain key regardless props passed component", "num": "4005", "d": "6/2015"}, {"title": "best practice css styles", "body": "constructing react component concerns dynamic part dynamic part put css styles html elements render method component extract dynamic part component want know scenario efficient would putting css styles html elements react component resolves cross browser compatibility problem", "num": "4002", "d": "6/2015"}, {"title": "method change default event plugins", "body": "hi noticed method module marked private unit test able override event plugin configure first injecting seems neither replace default event plugins add new kind event plugin without modify code react designed like good support modifyingextending event plugins injecting default ones thanks", "num": "4001", "d": "6/2015"}, {"title": "generating randomunique attributes serverside nt break clientside mounting", "body": "consider example relatively generic component javascript var fieldcounter var field reactcreateclass getinitialstate function return inputid field fieldcounter render function var props thisprops inputid thisstateinputid order tag semantically related tag obviously need match attribute tag attribute outside requirement however need attribute solution like one convenient handles internally need consuming component pass actual value problem running however causes attributes generated clientside mismatch sent server clientside restarts every load whereas serverside reference obviously keeps growing mismatch results error thrown question overlooking obvious solution would like component able simply internalize generation implementation detail ca nt seem come good mechanism matching id generation clientside thanks advance", "num": "4000", "d": "6/2015"}, {"title": "html jsx compiler convert tabindex tabindex", "body": "used converter convert div inside conversion gave notice word capitalized consolelog gives following reasonable warning may assume bug converter thanks", "num": "3996", "d": "6/2015"}, {"title": "wrong row offset yscroll position dynamically changed row height", "body": "using rowheightgetter function dynamically change row height state change unfortunately rerender rows wo nt position correctly expanded row gets negative offset value yscroll nt recalculate calling updaterowheight method getrowposition fixeddatatablescrollhelper line thisupdaterowheight rowindex fixes offset recalculation forcing yscroll recalculation commenting lines line fixeddatatablereactjs fixes yscroll problem sure elegant solutions added information purpose whats proper solution problem", "num": "3994", "d": "6/2015"}, {"body": "yes think great idea", "d": "6/2015"}, {"body": "dupe", "d": "6/2015"}, {"body": "excellent let follow", "d": "6/2015"}, {"body": "think date must represented string project use yyyymmddthh mm ss mmm format solves many issues timezones widget think must use existing one need customization compose issue would like interesting article composability components", "d": "6/2015"}, {"body": "react could date objects considering dom property representation datetime attribute implicit string conversion expected however rare date millisecond valuable information specificity varies lot wrapper would useful eg string formatting could reusable function could used implement directly datetime attribute", "d": "6/2015"}, {"body": "rendering jsfiddle invalid nesting according browsers proceed normalize break react understanding dom ps trivial fix ca nt return list component probably need render entire table react", "d": "6/2015"}, {"body": "damn totally right provide rendering element without rendering whole react renderfunction ca nt return mutliple elements render remove already existing got ideas", "d": "6/2015"}, {"body": "right ca nt possibility render tbody transplant tbody table really nt recommend unless absolutely another possibility could render entire table react use leap back html", "d": "6/2015"}, {"body": "ok thanks lot hate dirty hacks end rendering whole table react lead work think worth", "d": "6/2015"}, {"body": "ps add could render separately insert manually would nt hack would probably good idea either would housekeeping would nt hack", "d": "6/2015"}, {"body": "ok looks like rickhub info needs thanks syranide welcome rickhub react community since nt bug react going close issue feel free continue discussion thread stackoverflow", "d": "6/2015"}, {"body": "initial attempt fix ca nt figure properly use way missing listen child events ie mouseoutover also return event nt bubble listens mouseoutover element callback attached js var eventconstants require eventconstants var eventpropagators require eventpropagators var syntheticmouseevent require syntheticmouseevent var containsnode require containsnode var reactmount require reactmount var keyof require keyof var topleveltypes eventconstantstopleveltypes var getfirstreactdom reactmountgetfirstreactdom var eventtypes mouseenter mouseleave registrationname keyof onmouseleave null dependencies topleveltypestopmouseout topleveltypestopmouseover var extractedevents null null var enterleaveeventplugin eventtypes eventtypes almost every interaction care toplevel event occurs use extract duplicate events however moving mouse browser outside fire event case use toplevel event param string topleveltype record param domeventtarget topleveltarget listening component root node param string topleveltargetid id param object nativeevent native browser event return accumulation synthetic events see eventpluginhubextractevents extractevents function topleveltype topleveltarget topleveltargetid nativeevent moduleexports enterleaveeventplugin", "d": "6/2015"}, {"body": "would want thing", "d": "6/2015"}, {"body": "reason listen events dom also event handling done one place seems like reasonable request given essentially created event system top dom intended match spec events could thing event system native dom sounds like think ridiculous request feel way", "d": "6/2015"}, {"body": "attach single listener dom events outside react", "d": "6/2015"}, {"body": "admittedly much pain use strict const usecapture true function geteventnames object let names let name object nameindexof namespush namesubstr return names export default function adddomevents emit let windowevents geteventnames window let documentevents geteventnames document let eventname", "d": "6/2015"}, {"body": "nwwells done necessity since react needs create perfect emulation dom would need clientside app businessasusual bind particular handler need given time", "d": "6/2015"}, {"body": "nt want event handling dependent rendering library businessasusual sucks whatever happened rethinking best practices", "d": "6/2015"}, {"body": "nt want event handling dependent rendering library nt think reason react create perfect emulation dom rather make addingremoving event listeners easierpossible least people experience", "d": "6/2015"}, {"body": "make addingremoving event listeners easierpossible nwwells well yeah necessary recreate dom react implementation interacted similar way think putting global event catcher top level new best practice criticizing needs curious would helpful know trying catching keystrokes shortcut purposes etc", "d": "6/2015"}, {"body": "one things trying essentially creating event stream events go system dom events serverside message events event handling coordinated one use case handling key events shortcuts closing modals etc another calling preventdefault link clicked looks like internal navigation event could also log events hit system recreate given state based stored event stream", "d": "6/2015"}, {"body": "nwwells sounds like building framework rather app goal react support use case app developers ensure sufficient escape hatches remaining nt see huge need app developers listen events since app developers generally want associate specific behaviors specific events therefore know events care since want build framework manage events sounds like escape hatch use dom api give access underlying event system let respond way want least two cents defer spicyj sees issue differently", "d": "6/2015"}, {"body": "interesting segregate framework building app development actually building app inference nt accurate however aspect app currently working could considered framework building interested handling one particular use case rather whole class use cases architecturally sane method figure case totally fine giving mechanism listen events amenable also satisfied totally disabling react event system significant interference said event system trying accomplish working sure would nice either know exactly happening listening events disable event system deal problems react expecting events fired", "d": "6/2015"}, {"body": "frameworks try bow highlevel abstractions various reasons react instance wants bypass dom entirely render pixels directly bowing browser apis bowing common desire frameworks trying support frameworks single high level api hopeless objective better us allow framework developers escape lower level api regards able disable react event system react event system interfering code stops ignoring ie using react events", "d": "6/2015"}, {"body": "one ran specify input want template value react nt allow type event handling sees value controlled ie value passed sets value input based expects update value handler tried updating value separate domlevel event handler could nt see value text field already set react worked around issue specifying every input technically using rather since breaks architecture", "d": "6/2015"}, {"body": "hmm interesting cc spicyj syranide would ideal fix look like disabling react handling event would lead data text box becoming sync value provided effectively turning component uncontrolled component wrong behavior react perspective obviously could use uncontrolled inputs support controlled components order preserve idiomatic react controlled components seems like framework specify onchange event handler using react event system correct behavior since solution would introduce race conditions data consistency issues nt really see way around ideas", "d": "6/2015"}, {"body": "would want thing agree imho power react comes isolation components readability offers personally fan able listen events unrelated ancestors onsubmit onchange etc see technical reason want less code looks sensible people previous experience html nt think many would suggest feature frontend nt get wrong nt necessarily mind shortcuts significantly experienced hard know good bad shortcuts look like actual solutions especially familiar jquery rather messy problems tend devolve pushes outside pit success worked around issue specifying onchange every input technically using valuelink rather since breaks architecture opinion absolutely right approach onchange every input free move onchange context provide custom components go special usecase inmind seems largely equivalent want nothing wrong ok complexity find tradeoffs acceptable think react fine simple could easily shed html quirks react already provides tools needed build frontendindependent abstractions introduces unnecessary complexity everyone core", "d": "6/2015"}, {"body": "jimfb nt mind react handling events rather way tap event system see events actually want controlled input want set value based props nt want set value onchange handler given component syranide rejecting use cases outlined hand also looking shortcut rather generalized mechanism using context mechanism refer would essentially bar using anyone else components unless customized one use custom version elements unless could somehow way components would forced implementation input component example", "d": "6/2015"}, {"body": "rejecting use cases outlined hand another way something nt mean acceptable tradeoff talking extending core ways seem objectionable context already largely solve problem expect react formalize api somewhat unique html dom frontends even concept bubbling listen controls individually using context mechanism refer would essentially bar using anyone else components unless customized one use custom version elements unless could somehow way components would forced implementation input component example provide wrapper factory components always introduce inconsistencies implement entirely different input methods canvas etc would able support intended wrapping allows interop component compatible api clear nt necessarily mind event system exposing functionality knowingly accepting consequences free circumvent react stuff hook dom directly react dom event system internal implementation detail confused react api generic independent underlying frontends", "d": "6/2015"}, {"body": "expect react formalize api somewhat unique html dom frontends even concept bubbling listen controls individually well fwiw would frontend html dom part got excited react unidirectional flow data fact really asking bubbling rather single place listen events generated react every frontend generates events provide wrapper factory point example mean free circumvent react stuff hook dom directly consider passing values input element part react event stuff would happily bypass react event system entirely unable without working around ways react components tied event system", "d": "6/2015"}, {"body": "well fwiw would frontend html dom part got excited react unidirectional flow data fact really asking bubbling rather single place listen events generated react every frontend generates events frontends implementing percontrol callbacks central event system subscribe simply incompatible api mean many basic game frontends provide global mousekeyboard api bubbling inherent concept controls focus context wrappers could handle fine point example mean something along lines code example could probably turned helperfactory consider passing values input element part react event stuff sure mean would happily bypass react event system entirely unable without working around ways react components tied event system want sounds like going intentions react go way benefits see versus using react designedintended wondering intentions kind sounds like building ui framework ontop react ui framework rather using react intended", "d": "6/2015"}, {"body": "would happily bypass react event system entirely unable without working around ways react components tied event system way think right dom components tied event system valuechecked handling use defaultvaluedefaultchecked react wo nt anything special", "d": "6/2015"}, {"body": "ok thanks", "d": "6/2015"}, {"body": "unless missunderstanding something javascript question react one also general usage questions better located stackoverflow use github issues track bugs react tried something like going close issue since bug react feel free continue discussion stackoverflow", "d": "6/2015"}, {"body": "behavior correct want find one children dom nodes add ref first using reactcloneelement use ref element little want render nt identity nt correspond dom node directly", "d": "6/2015"}, {"body": "next commend thread linked contradicts guarantee children componentdidmountdidupdate called parent gets", "d": "6/2015"}, {"body": "spicyj thank info correction working demo reactcloneelement reactaddonsclonewithprops deprecated renderitem childpropskey reactchildrenforeach thispropschildren child gt consolelog reactfinddomnode thisrefs", "d": "6/2015"}, {"body": "yes put new key container react render subtree scratch", "d": "6/2015"}, {"body": "ca nt repro ios repro page", "d": "6/2015"}, {"body": "huh ca nt either know babel polyfill supposed enable full iterator operation ios safari thinking might bogus ticket moment created wonder might different jsbin config", "d": "6/2015"}, {"body": "wonder subtle thing webpack supposed load polyfill", "d": "6/2015"}, {"body": "sure case nt need polyfill though plain js", "d": "6/2015"}, {"body": "requiring babelpolyfill think requiring immutable react might necessary", "d": "6/2015"}, {"body": "page claims automatically loads polyfill yeah requiring everything though still sure assume anything load order individual modules surprised works plain js thought react implicitly using iterable created case react modified something different thanks help", "d": "6/2015"}, {"body": "babelregister used node applications docs mean nt need also require polyfill case babelregister correct thing require browser environment though", "d": "6/2015"}, {"body": "immutable react fall back property symboliterator nt exist environment", "d": "6/2015"}, {"body": "huh confusing enough requiring fixed code issues ios safari anyway put entry section webpack config worked well thanks tip wish could peer deeply happening raw page ios safari nt mac ca nt remote debug moment case simple workaround right", "d": "6/2015"}, {"body": "closing since nt sound like react issue", "d": "6/2015"}, {"body": "terminal mean node environment window object available therefore passing block silently since window amp amp windowuser undefined false amp amp whatever gt false", "d": "6/2015"}, {"body": "curiosity register callback event works understand nt work react way", "d": "6/2015"}, {"body": "know function essentially seems happening code modifying dom react jealously wants full control manipulating dom proper rails way things would using state displaying modal depending state js var modal reactcreateclass getinitialstate function return ismodaled false componentdidmount function even ideal really button typesubmit click function e epreventdefault thissetstate ismodaled true bind render function thisstateismodaled return modaldom", "d": "6/2015"}, {"body": "blainekasten correct remodal likely modifying dom problem react uses change tracking optimize writes dom change things react feet things break recommendation avoid touching anything rendered react nt need anyway whole point react render function declarative thus easier reason start mutating things back imperative world use react ciaoben registering callback suggested may hiddendelayed error still would probably received error later app development cycle ie next time react needed reconcile changes component therefore app dom manipulation callback equally broken since bug react going close issue feel free continue discussion future reference questions properly use react probably better located stackoverflow since use github issues track bugs react", "d": "6/2015"}, {"body": "thank guys right difficulties forget old habits try blainekasten solution jimfb nt uderstand call function since would modify anyway dom", "d": "6/2015"}, {"body": "ciaoben point using react modifying dom correct solution use instead define ui declaratively dom manipulations needed trying popup modal would recommend watching ryan florence talk playing portals demo located", "d": "6/2015"}, {"body": "yep looks legit look forward day resolved nt deal wackamole anymore p", "d": "6/2015"}, {"body": "see", "d": "6/2015"}, {"body": "dupe", "d": "6/2015"}, {"body": "hmm consoletrace nonstandard use consoleerror warnings expand message see trace chrome firefox least using environment nt let expand error traces", "d": "6/2015"}, {"body": "point error traces error nt happen gets caught catch basically run edited version react one removing trycatch around error find sure logic functionally speaking pointless trycatch removed start tho using consoleerror would nicer throwing uncaught error", "d": "6/2015"}, {"body": "code question notice never throw yeah problem least would use useful without error least helpful", "d": "6/2015"}, {"body": "chrome allows break caught errors trycatch optionally toggle breakpoint jimfb used consolewarn nt stack associated anymore abritinthebay master upcoming release switched using consoleerror stack associated", "d": "6/2015"}, {"body": "ah excellent patched moving forward awesome wait eta btw chrome allows break caught errors btw sites really horrible debug oh god horrible easier edit code", "d": "6/2015"}, {"body": "follow checkboxes", "d": "6/2015"}, {"body": "code looks fine post simple jsbin reproduces problem", "d": "6/2015"}, {"body": "spicyj shame actually something early days react messing killed nt throw warning anymore thanks see ya", "d": "6/2015"}, {"body": "sebmarkbage told cpojer probably would nt hard implement agree semantics finddomnode etc work ref get implement getpublicinstance might really easy", "d": "6/2015"}, {"body": "rant yea thinking feature smells really wrong since whole point moving refs props make outsideconcept framework controlled seems like want control make props way ability fully control timing however nt always want resolve also nt want accidentally transfer ref using property spread although refs finally become less common probably become manually invoked functions torn nonrant sure api going sufficient use cases nt provide capability refire js class container state toggle false tick gt thissetstate toggle thisstatetoggle componentdidmount setinterval thistick render return thisstatetoggle thispropschildren class wrapper getpublicinstance return thisrefsmycomponent render return example nothing binds unmountremount scenario wrapper ca nt recall getpublicinstance get fresh component keep stale version something like might better however know ref transferred maybe function fires component didmount subtle breaks case nt fire later maybe add something like extra api would sideeffectful ideal suggestions", "d": "6/2015"}, {"body": "personally fan refs becoming manually invoked functions probably influences thinkingsolution make component manually invoke ref wrappers forward ref call avoid autoinvoking react wrapper becomes completely transparent since base component must expose manually invoked ref instead relying one provided automatically react assuming control base component works right maybe totally missunderstanding request p", "d": "6/2015"}, {"body": "request provide seamless api natural use react hoc unobservable", "d": "6/2015"}, {"body": "care unobservable could flag class says high level component nt resolve ref manually invoke andor pass someone else would make high level components completely transparent also enable clean migration path making refs manually invoked decide someday migration path every component takes ref must flag set new code looks like", "d": "6/2015"}, {"body": "already use static flags things like context types etc might want use flag indicate component state pure seems natural could potentially work stateless functions however brings interesting point stateless functions automatically transfer ref since nt instances", "d": "6/2015"}, {"body": "vote would refs illegal stateless functions since component reference allows us punt decision future date also gives us reasonable opportunity warn someone tries attach ref stateless function since likelihood implementor stateless function forgotten properly forwardhandle ref lead user confusion unless reject time ref attached thereby sidestepping issue making refs illegal stateless functions wo nt result lost functionality since user always regain potentially lost functionality wrapping stateless function hoc thereby regaining functionality including ability attach ref use finddomnode", "d": "6/2015"}, {"body": "vote would refs illegal stateless functions since component reference seems like rather arbitrary restriction finddomnode useful stateless function component fine introducing way restrict use finddomnode seems unrelated", "d": "6/2015"}, {"body": "use case stateless functions basically provide syntax sugar another component andor b lock api excluding configuration props would nice convenience forward ref b would detrimental locking api nt know cases like tend error side easiest change restrictive form ie making refs work possibly warn", "d": "6/2015"}, {"body": "sounds like got game plan", "d": "6/2015"}, {"body": "recommended cases tutorial explicitly shows marked used way sanitizes input react sanitation nt needed case actually correct choice tutorial tries explain nt use way preserve formatting generated marked", "d": "6/2015"}, {"body": "code recommended mainly explicitly bypasses security features xss protection provided react tutorial also explicitly calls security ramifications escape hatch sorts point nt never use feature inherently bad would remove point careful decision use conscious one mentioning feature tutorial nt bad thing especially since people upgrading legacy codebases ie people new react likely need feature order interoperate existing codebase going go ahead close issue think conscious decision bug feel free continue discussion community decides hiding feature good idea reopen issue burry feature deeper documentation", "d": "6/2015"}, {"body": "thought note use typetaint signature nt embedded element check return type sorts example tutorial seems suggest bad habit", "d": "6/2015"}, {"body": "ah saying safe taint moved jsx tag yeah could get behind", "d": "6/2015"}, {"body": "really nt commenting appropriateness using cases far meant suggest change ps jimfb yes exactly", "d": "6/2015"}, {"body": "fixing might well correctly homepage", "d": "6/2015"}, {"body": "approach seems reasonable defer spicyj others authoritative answer general perf starts becoming issue recommend switching immutable datastructures using avoid unnecessary rerenders nt enough trying superoptimize particular component able track changes data cache reactelements perform imperative mutations keep reactelements synchronized data obviously defeats main advantages using react recommended solution except cases need squeeze every last ounce performance component future type question probably better suited place like stackoverflow use github issues tracking bugs react since bug react going close issue tracking purposes feel free continue discussion", "d": "6/2015"}, {"body": "browser behavior seems entirely correct button receives mouse event since element moves immediately mouse happens outside click registered thing move cursor back button first release get click expected", "d": "6/2015"}, {"body": "confirmed looks like issue getting click result button moving put error output button wo nt affect positioning button everything behaves expected issue related mutating state issue related moving things dom also things syranide pointed going close react issue", "d": "6/2015"}, {"body": "pretty sure bug fixed master works fine pull latest", "d": "6/2015"}, {"body": "code", "d": "6/2015"}, {"body": "basically leave props pull inbound layout nt want pass style calculate merged", "d": "6/2015"}, {"body": "cloneelement params beyond props arg specifies children much like createelement unlike objectassignextend sounds like probably want instead", "d": "6/2015"}, {"body": "er make something like since probably nt experimental transform", "d": "6/2015"}, {"body": "ok reactcloneelement child extend style style extend style style child doubt", "d": "6/2015"}, {"body": "former", "d": "6/2015"}, {"body": "maybe something like prefer", "d": "6/2015"}, {"body": "yes tried former get result nests object contains chidren inside", "d": "6/2015"}, {"body": "two calls adds level nesting clone gt clone gt original children third level deep rather first level deep", "d": "6/2015"}, {"body": "seems understanding properly sorry make small example reactjsbincom shows problem", "d": "6/2015"}, {"body": "ok sorted well stopped symptoms also extracting thispropschildren declared spread property otherwise one properties passes thispropschildren sure would also cloned component removed behaves expected without extra level cloning children already", "d": "6/2015"}, {"body": "contained props parent component except looked something like ended making copy set children happened case element giving working intended nt want transfer specific prop take like clonewithprops would nt transfer children special case surprising many cases one reasons deprecating cloneelement treats props identically", "d": "6/2015"}, {"body": "good know thanks", "d": "6/2015"}, {"body": "see happy reopen simple case shows react something wrong", "d": "6/2015"}, {"body": "also important getting initial state instance sideloading architectures like flux leads right back constructor signature nt see much difference whether vs base component call always implement static method though", "d": "6/2015"}, {"body": "going quote allen wirfsbrock oo concept fp people nt use nt try fix oo already broken nt try fix functional current design natural someone familiar building objectoriented class using js class system something like typescript also type inference benefits since type immediately inferred however react core fp library definitely add functional alternative api nt use instances see draft example sure makes sense combine two worlds one imo clearer use one style rather trying combine", "d": "6/2015"}, {"body": "standard going polyfill", "d": "6/2015"}, {"body": "method documentation", "d": "6/2015"}, {"body": "human beings tend make mistakes especially something absent documentation think kindly warning big deal spirit react library today results google keyword componentdidunmount multiply people silently spend minutes life find stupid mistake get crowd tell", "d": "6/2015"}, {"body": "stupid messing stack caused one components checking recommended alternative component needs know type children compatible replacement", "d": "6/2015"}, {"body": "instead checking check iselementoftype pass let know nt make sense", "d": "6/2015"}, {"body": "appears internally causes warning adds getter currently bit hack nt think makes difference", "d": "6/2015"}, {"body": "thead reactdomthead", "d": "6/2015"}, {"body": "ah right factory also found using old version rather benefit anyone else reading usually resolves actual class object one returned special case elements string sorted thanks spicyj", "d": "6/2015"}, {"body": "glad figured", "d": "6/2015"}, {"body": "post simple jsbin similar repro", "d": "6/2015"}, {"body": "go type password field see cursor position behaves weird gets switched", "d": "6/2015"}, {"body": "looks like firefox reinitializes input completely change type makes intuitive sense want maintain cursor position probably best manage selectionstartselectionend maybe one day better api manage react right sorry side note component nt actually controlled like might believe starting value empty string handling change maybe meant nt affect issue though", "d": "6/2015"}, {"body": "firefox issue spicyj sorry intuitive switching type alter cursor position good use case scenario look ignore jsbin quick dirty hack demonstrate need make perfect", "d": "6/2015"}, {"body": "yes feel changing type move cursor opening firefox issue sounds reasonable fairly sure find problem exists without react personally convinced preserving cursor position even make sense sure text password look mostly similar types inputs cursor preserve date picker might multiple cursors part date", "d": "6/2015"}, {"body": "yeah types text password maintain cursor position others resetting makes sense", "d": "6/2015"}, {"body": "trying implementing discovering interesting quirks possibilities firstly objectfreeze throws given nonobject returns means one dev machine browser implementing could run fine quirky code accidentally calls primitive fail spectacularly production browser implements makes react freeze stub good place even behaviour calling nonobject react code likely mistake opted throw typeerror secondly every place code uses development would good unexpected make react internal freeze run dev last question want display warning development freeze implemented", "d": "6/2015"}, {"body": "love nt interop neatly libraries ended weird situations luckily could include certain libraries others sorted way would really like use", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "please post example original code likely something wrong", "d": "6/2015"}, {"body": "tl dr expected behavior bug react babel looks like something like classes react autobind methods anymore see", "d": "6/2015"}, {"body": "ok actually fixed using nt know doc thanks", "d": "6/2015"}, {"body": "believe documented behavior", "d": "6/2015"}, {"body": "thank much missed byline garetht", "d": "6/2015"}, {"body": "sidebar look like understand children", "d": "6/2015"}, {"body": "ok missing something", "d": "6/2015"}, {"body": "special prop created children read", "d": "6/2015"}, {"body": "example fullblown online markdown converter nt need make work every use case", "d": "6/2015"}, {"body": "got smile", "d": "6/2015"}, {"body": "tl dr compiles jstransform wrong huxpro work around removing parentheses around function please note reacttools deprecated per babel already works correctly case maybe fix anyway", "d": "6/2015"}, {"body": "spicyj thank u much think official website update", "d": "6/2015"}, {"body": "fwiw fixed newer versions jstransform changes resulted us shipping updated reacttools projects deprecated switch using babel latest jstransform jsx", "d": "6/2015"}, {"body": "paste exactly code make jsfiddlejsbin number red flags code sample takes array missing commas", "d": "6/2015"}, {"body": "valid coffeescript syntax", "d": "6/2015"}, {"body": "valid coffeescript syntax nt correct way invoke zpao noted takes array argument desugars want need write something like instead", "d": "6/2015"}, {"body": "oh right bad forgot array syntax hmmm chance could add type check throw error nt array", "d": "6/2015"}, {"body": "guess curious ended situation nt obvious cases imagine would written code seconds earlier would pretty obvious", "d": "6/2015"}, {"body": "yes case thought would good context like warnings also might obvious ported bunch templates actually would reasonable case since porting bunch stuff wrote using ractive react real reason ended running rather much earlier simply avoid using style attribute templates much possible one simple", "d": "6/2015"}, {"body": "dupe fixed master already", "d": "6/2015"}, {"body": "seems working try reduce test case", "d": "6/2015"}, {"body": "hey seems working fine oops must something else play", "d": "6/2015"}, {"body": "already works", "d": "6/2015"}, {"body": "yes works", "d": "6/2015"}, {"body": "nt think reliably get charcode nonkeypress events keyboard shortcuts probably use keycode salier might able say going close unfortunately nt think react help", "d": "6/2015"}, {"body": "advisable route take use native dom events ie keypress within react component seems strange react remove functionality charcode key combinations", "d": "6/2015"}, {"body": "always componentdidmount remove componentwillunmount fairly sure charcode wo nt work across browsers though sure test", "d": "6/2015"}, {"body": "thanks shall seems bit limbo charcode deprecated keyboardeventkey nt got great browser support", "d": "6/2015"}, {"body": "key roughly equivalent keycode nt depend keyboard layout like charcode key would work keycode", "d": "6/2015"}, {"body": "sure thing moment forgetting react exists would go capturing getting ascii decimal code two keys together using right saying unreliable also saying modern reliable way get ascii value", "d": "6/2015"}, {"body": "sorry gone offtopic react issues seems strange ca nt reliably js", "d": "6/2015"}, {"body": "listen keydown also work react", "d": "6/2015"}, {"body": "shameless plug might help able something like bit since used library plan working soon clean code", "d": "6/2015"}, {"body": "use lowercase strings calling createelement use type set special event handlers forms including submit", "d": "6/2015"}, {"body": "valueless attributes shortcut boolean attributes favorite part jsx transform exists able specify empty string ensure value react gets empty string end dom correctly without value", "d": "6/2015"}, {"body": "oh good point zpao somehow forgot", "d": "6/2015"}, {"body": "thanks worked like charm", "d": "6/2015"}, {"body": "need enable transforms adding params nt know trigger jsbin would suggest using babel anyway", "d": "6/2015"}, {"body": "thanks quick reaction impression features like template strings dealt react transformer understand correctly case", "d": "6/2015"}, {"body": "josdejong enabled default also", "d": "6/2015"}, {"body": "thanks syranide noticed babel support transform jsx files works right box using build step reason nt work running inbrowser transform babel html tags react classes nt compiled javascript", "d": "6/2015"}, {"body": "sure would interested writing something", "d": "6/2015"}, {"body": "problem without code example", "d": "6/2015"}, {"body": "code example might useful would hopefully help prevent followup questions people surely problem using", "d": "6/2015"}, {"body": "related", "d": "6/2015"}, {"body": "generate currently works xhtml work value need right react probably wo nt usable without forking property stuff sorry hopefully much else want support svg better soon maybe improved xul support come", "d": "6/2015"}, {"body": "honestly nt know xul well empty string might work tried creating following element generated markup empty attribute ie think empty string would fine worried maintain patch top react make xul compatible want migrate xul soon anyway though probably take", "d": "6/2015"}, {"body": "hm thought work", "d": "6/2015"}, {"body": "oh using latest downloadable version site version try version", "d": "6/2015"}, {"body": "oh guess release yet builds master feeling adventurous wait month", "d": "6/2015"}, {"body": "question trust builds zpao kid", "d": "6/2015"}, {"body": "definitely sneaking exploits get access machines firefox code", "d": "6/2015"}, {"body": "far add following attributes supported xul flex command otherwise attributes stripped output rendering component like sure others try make complete list point sure work web components compatibility would help nt really care web components going bet still happy small patch top react edit zpao sources hacked", "d": "6/2015"}, {"body": "add thank thank superb lifecycle methods resounding success wrapping current components react ones even complicated things like big list items really related example", "d": "6/2015"}, {"body": "neat technique", "d": "6/2015"}, {"body": "another take third option difference third parameter explicitly passes data say depends would able normal shallowly compares props shallowly compares props default would still get different good people nt know thing casually use inside callback still work somebody performance issues would advised turn lambda class method point longer forced learn third parameter", "d": "6/2015"}, {"body": "nice like better also gives way transition dumb component possibly performant one implementing logic", "d": "6/2015"}, {"body": "nt think really react issue discuss thread good place keep talking", "d": "6/2015"}, {"body": "bad talked threepointone suggested create issue initial goal turn something actionable might require reactlevel support assuming pattern makes sense think guess solve problem fine without pattern gaearon suggests also work scu normal children passed wrapper", "d": "6/2015"}, {"body": "sounds right thanks responses folks", "d": "6/2015"}, {"body": "future readers goal document potential patternsproblems children function pattern thoughts please share reactdiscuss thread", "d": "6/2015"}, {"body": "reacttools removed jsxtransformer deprecated something", "d": "6/2015"}, {"body": "activatedgeek yes favor babel", "d": "6/2015"}, {"body": "ohh using build system need change loader", "d": "6/2015"}, {"body": "activatedgeek yeah painless", "d": "6/2015"}, {"body": "great thanks", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "activatedgeek see blog post last week", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "intentional know inconsistent html honestly pretty odd reason removing spans works whole child read single string spaces detail blog post made change gt year ago short version believe lesser whitespace handling evils", "d": "6/2015"}, {"body": "zpao given tossup protecting developers whitespace unintentionally added added nonetheless vs departing obvious html analog actively trimming whitespace intentionally added stop since guess ship sailed either way thanks prompt reply mad lt team", "d": "6/2015"}, {"body": "anyone working would like give try", "d": "6/2015"}, {"body": "way handling avoid render callbacks entirely use way must pass component boundary allows developer test parent child separately knowing arbitrary code executed", "d": "6/2015"}, {"body": "nt work one shallow render rendered output rendered get point would could try verify something along lines let know nt make sense", "d": "6/2015"}, {"body": "hi spicyj thanks response would work would still require manually case hoping help writing somewhatshallow renderer could recognize rendered child rendercallback render started naive implementation swapped children element didt work investigate thank time", "d": "6/2015"}, {"body": "suggested past binding onblur semantics want work", "d": "6/2015"}, {"body": "onblur fires every blur even nothing changed developers fake event behaviour native standard event exact behaviour", "d": "6/2015"}, {"body": "super easily right since baked markdown processing", "d": "6/2015"}, {"body": "one option render clientside using utility like anchorjs anchors would nt appear rss since feed content would leave js behind looks like ids would generated uses similar regex code convert titles lowercase hyphendelimited words let know interested approach put together pull request", "d": "6/2015"}, {"body": "bryanbraun seems reasonable though let inline logic instead pulling thirdparty library let make sure regex equivalent order preserve existing links lines js", "d": "6/2015"}, {"body": "see approach uses regex patterns links backwards compatible", "d": "6/2015"}, {"body": "use returns valid string test add plugin remove plugin find plugins", "d": "6/2015"}, {"body": "looks like error happening using inside works jsx nt work defined js var dropdownitem reactcreateclass onclick function e epreventdefault estoppropagation thispropsonclick thispropsonclick", "d": "6/2015"}, {"body": "looking html view datareactid question used tags usually result browser reorganizing nodes specifically nested always get moved dom likely culprit case chances nested anchors across components definitely one anything rendered inside anchor guess one children happen happen react idea dom real dom get sync hit problem though problem might actually manifesting slightly differently could dom structure playing different tricks definitely nested anchors", "d": "6/2015"}, {"body": "thanks zpao beers stupid mistake side filtering done ensure submenus added instead nt work since child type instead convinced react rendered children calling render method parent", "d": "6/2015"}, {"body": "react warn invalid nesting like next release", "d": "6/2015"}, {"body": "spicyj saw comment another issue tested using latest master nt get warning invalid nesting", "d": "6/2015"}, {"body": "js render function return hi whitespace important tag", "d": "6/2015"}, {"body": "quite right use template string contain newlines hi whitespace important tag unlikely anything beyond", "d": "6/2015"}, {"body": "spicyj stand corrected worthy note also work inside assume wraps fine cases newlines show generated source effect page display normal html behavior", "d": "6/2015"}, {"body": "whitespace also matters", "d": "6/2015"}, {"body": "spicyj thanks help still wish handling whitespace user land nt bad whitespace also matters whitespace pre tried may done wrong suggesting js please add option keep spaces", "d": "6/2015"}, {"body": "matthewmueller need backticks mathieumg saying whitespace collapsed browser html tags notable exception pointed changing css tags also preserve space", "d": "6/2015"}, {"body": "public outside component figure solution though also related", "d": "6/2015"}, {"body": "dupe", "d": "6/2015"}, {"body": "packagejson learn react name nt use anywhere", "d": "6/2015"}, {"body": "using add dependencies though think work cl fri jun pm paul shannessy notifications githubcom wrote packagejson learn react name nt use anywhere reply email directly view github", "d": "6/2015"}, {"body": "way repro packagejson contains expecting valid npm package name ca nt contain spaces could field error stack pasted pointing something directories react perhaps something expecting read best suggest deleting directories starting certain problem react going close happy keep helping", "d": "6/2015"}, {"body": "seems jsx transpiler responsible setting variables internally referenced wanted ask question jsx nt know react made available environment even would good idea various reasons also probably best brought babel repository would expect similar answer good plan make elements work independently react", "d": "6/2015"}, {"body": "syranide kk understanding current thinking developer responsibility make react available resultant transpiled jsx variable named nt catch docs know explicitly stated somewhere", "d": "6/2015"}, {"body": "idea explicitly stated docs lazyweb looking catch jsx sugar requires scope bit indirection personally opinion whether documented better", "d": "6/2015"}, {"body": "seems someone agree", "d": "6/2015"}, {"body": "according tests seems need use envify react seems already configured seems simply using nodeenvproduction browserify actually envify react correctly exemple gulp config command produce automatically file contains etc means use deadcode elimination tool like uglify gcc think clearly documented", "d": "6/2015"}, {"body": "yup browser field get used browserify automatically envify work afaik equivalent webpack fwiw envify uglify exactly build minified builds suggestions prs wink clarifying documentation would appreciated", "d": "6/2015"}, {"body": "glad know thanks", "d": "6/2015"}, {"body": "afaik equivalent webpack zpao lt work fine", "d": "6/2015"}, {"body": "need webpack", "d": "6/2015"}, {"body": "answer got stack overflow correct specifies value input initially created want remain updated need use handle events correctly nt update changes otherwise two sources user input component props trying control value would nt clear happen conflict instead force think write actual behavior want", "d": "6/2015"}, {"body": "hold case going argue bug end scenario current html stateless specific situation ran grid double clicking row popped open dialog form edit row items noticed input values stuck first value opened even though everything else changed correct behaviour whole point state stored dom changing nt cause input rerender pass exact model twice get different html output", "d": "6/2015"}, {"body": "also docs need updated imply correct thing use nt want lock", "d": "6/2015"}, {"body": "whole point state stored dom defaultvalue state stored dom nt recommend recommend using controlled components instead docs say wanted update value response user input could use event let know still confusing", "d": "6/2015"}, {"body": "try seen warning console", "d": "6/2015"}, {"body": "also want fix warning console using", "d": "6/2015"}, {"body": "worked fixed htmlfor show error though chrome dev tool console thanks also introducing reactjsbin", "d": "6/2015"}, {"body": "unfortunately setting runtime nt going work initialization work based environment require react would guess could set env requiring react would work otherwise going support dynamically changing environment", "d": "6/2015"}, {"body": "using looks like might passing component class element", "d": "6/2015"}, {"body": "closing since nt actionable us asis without code sample zpao suggestion sounds likely", "d": "6/2015"}, {"body": "really want control children uipane imperatively way add method instance called outside updates state could wrapper component something like setprops particular confusing multiple places app disagreeing think current props jimfb also reactcomponentrenderer wrapper class might helpful like", "d": "6/2015"}, {"body": "spicyj thank much lightning reply", "d": "6/2015"}, {"body": "spicyj tried suggestion class method nt seem available reactelement js class uipane extends uiview constructor args super args later nt exist though", "d": "6/2015"}, {"body": "work component instance element ca nt anything element except render", "d": "6/2015"}, {"body": "also", "d": "6/2015"}, {"body": "yup ended thank", "d": "6/2015"}, {"body": "intended nullundefined nt empty string want select value pass interpret mean uncontrolled component similar", "d": "6/2015"}, {"body": "seems reasonable think props specified seeing many people affected referenced issue much time wasted trying figure happening would nice warned situations", "d": "6/2015"}, {"body": "blainekasten interesting idea unfortunately fairly common uncontrolled component also listen onchange nt know work", "d": "6/2015"}, {"body": "spicyj hmm guess think situations might happen interested think idea could get really crazy jsx parser lookahead things flag react information help debug ie lookahead parser could react could able throw additional warnings inputs based things like values would happen dev mode also", "d": "6/2015"}, {"body": "could move discussion idea reactfuture ya think worth discussing", "d": "6/2015"}, {"body": "nt want add domspecific logic jsx transform likely split separate components would also solve problem honestly probably nt tripping enough people worth making change us", "d": "6/2015"}, {"body": "change simulated callback get called make assertions nt believe intended change values dom", "d": "6/2015"}, {"body": "gotcha thank", "d": "6/2015"}, {"body": "takes passing component class creates element type would trigger warnings example", "d": "6/2015"}, {"body": "ok means clear docs made less sense since already pass props second argument thank quick reply", "d": "6/2015"}, {"body": "mathieumg sure probably want", "d": "6/2015"}, {"body": "spicyj need access instance methods imagine simply wrapping suggest would accomplish maybe current approach nt either nt gotten around test yet also thank deleting spam comment never seen github", "d": "6/2015"}, {"body": "basically equivalent ca nt access instance methods component without mounting use instance methods via", "d": "6/2015"}, {"body": "adding extra property saying following would nt possible js componentdidmount function thisrefsmyrefsomemethodthatbelongstomycomponent render function return would still work without requiring", "d": "6/2015"}, {"body": "would still work without cloneelement call cloneelement takes existing element creates copy useful modifying elements passed component creates new element jsx immediately creates copy", "d": "6/2015"}, {"body": "tried nt seem work suspected clarify example method defined defined recap imagine nt possible component wrap another inherit methods unless done explicitly topdown props thank", "d": "6/2015"}, {"body": "could try sure works case", "d": "6/2015"}, {"body": "imagine would work would nt transparent wrapper first hoped ie would nt possible replace js componentdidmount function thisrefsmyrefsomemethodthatbelongstomycomponent render function return js componentdidmount function thisrefsmyrefsomemethodthatbelongstomycomponent render function return words using dropin replacement thanks tips", "d": "6/2015"}, {"body": "related", "d": "6/2015"}, {"body": "yeah let track cc jimfb though", "d": "6/2015"}, {"body": "think solved using reactwithaddonsrendersubtreeintocontainer currently handles context forwarding event bubbling sounds like would work slorber use case", "d": "6/2015"}, {"body": "thanks jimfb seems looking looking event bubbling parent simply able setup click listeners handle child directly jimfb available seems achieve going wait right produces lot warnings really bothering disable warning use static markup wait produce lot warnings also really work seems assertion context forwarded commented", "d": "6/2015"}, {"body": "seems get rid warnings production mode dev still bothering quantity tried monkeypatch warning easy patching reactcompositecomponent requiring useless since warning method already used reactcompositecomponentwrapper instantiatereactcomponent would nice able disable selectively production warnings", "d": "6/2015"}, {"body": "slorber tried maybe something similar like works filters unwanted warnings note changed calls avoid endless recursion", "d": "6/2015"}, {"body": "thanks cody finally hacked", "d": "6/2015"}, {"body": "slorber never merged pr closed figured sync internally switch parent context happened", "d": "6/2015"}, {"body": "thanks jimfb mean released", "d": "6/2015"}, {"body": "yes parentbasedcontext rendersubtreeintocontainer made available publicly start playing react npm", "d": "6/2015"}, {"body": "thanks short release cycles keep using disabled warning try switch soon stable rc fixing addonsclassset body mouting errors", "d": "6/2015"}, {"body": "react fwiw", "d": "6/2015"}, {"body": "seems like limitationbug chrome seems pretty crazy keyboard events deviate behavior pretty much every platform guess react cross bear", "d": "6/2015"}, {"body": "request represents superset issue teardown testutils method", "d": "6/2015"}, {"body": "specific issue nt seem right purging cached nodes big part point unmounting perhaps bug", "d": "6/2015"}, {"body": "even concrete issue unmount purging would still much appreciate single point entry reliably destroysresets global caches react modules introduce hold would certainly benefit test environments immediately would also allow serverside rendering supported confidence ideally framework would nt create hidden global state either provide hooks clear initialization parameters clients provide shot dark potential purge issue would take look cache management implementation relies timers nt perform reliably test environment due fakesmocks", "d": "6/2015"}, {"body": "please try reproduce jsfiddle similar makes easier reproduce seems like got help switching nt explain problem applied fix follow stackoverflow", "d": "6/2015"}, {"body": "thanks added jsfiddle", "d": "6/2015"}, {"body": "defaultvalue nt update initial render makes component uncontrolled user interactions feeding back state changes user makes visible controlled components use explicitly handle user data change example adding make text area update", "d": "6/2015"}, {"body": "yes workaround implemented value onchange hoped elegant way answear question many thanks", "d": "6/2015"}, {"body": "workaround suggested way build forms use cases", "d": "6/2015"}, {"body": "agree nt understand quite well specified", "d": "6/2015"}, {"body": "sorry wasting time know guys great job", "d": "6/2015"}, {"body": "virtually component code runs call surprising found took runtime continually trying make performance improvements react continue", "d": "6/2015"}, {"body": "apparently dangerouslyrendermarkup nt work svg", "d": "6/2015"}, {"body": "maybe say createnodesfrommarkup work expected see gets markup gets wrap creates nodes via like reason", "d": "6/2015"}, {"body": "cc spicyj would nt work context scenario maybe separate renderers need top level least flag", "d": "6/2015"}, {"body": "sebmarkbage mean context scenario separate renderers top level", "d": "6/2015"}, {"body": "sorry directed spicyj based conversation yesterday", "d": "6/2015"}, {"body": "sebmarkbage thought referring pr pinging spicyj comments pr particular put tests", "d": "6/2015"}, {"body": "sebmarkbage works reactmount supplies context neojski using xhtml impression html tag explicit namespace work fine", "d": "6/2015"}, {"body": "spicyj correct using xhtml svg foreign namespaces ignored html test example works pure html suppose might right", "d": "6/2015"}, {"body": "spicyj ambiguous elements like nt context picked", "d": "6/2015"}, {"body": "sebmarkbage assumed look namespace container sorry precise", "d": "6/2015"}, {"body": "currently running find many might looks like script may take day hit end point every gem registry", "d": "6/2015"}, {"body": "made toy", "d": "6/2015"}, {"body": "really specific question better suited stack overflow discussion forums try keep issue tracker focused bugs features react", "d": "6/2015"}, {"body": "zpao right posted stackoverflow may well delete post thanks sorry trouble", "d": "6/2015"}, {"body": "running situation since creating parent passing owner children rerender parent state changes perhaps missing something nt component rerenders children renders rerender unless prevented however created externally wo nt receive new props nt rerender personal note think routing way poor practice nt see benefit specifying routes jsx elements instead using regular js structures see downsides", "d": "6/2015"}, {"body": "perhaps missing something nt component rerenders children renders rerender unless prevented shouldcomponentupdate however created externally homejs wo nt receive new props nt rerender example right nt rerendered rerendered triggers intuitively would think would cause components rerender since children nt seem case personal note think routing way poor practice nt see benefit specifying routes jsx elements instead using regular js structures see downsides thanks feedback elaborate little bit sure mean regular js structures downsides might", "d": "6/2015"}, {"body": "example right homejs nt rerendered rerendered pushstate popstate triggers intuitively would think would cause components rerender since children nt seem case yeah surprises rerenders elements render rerender using right working jsfiddle could look thanks feedback elaborate little bit sure mean regular js structures downsides might rephrase defining routes children react element using jsx necessarily bad idea js addroute function return hi index addroute usermartin function return hi martin render return routeobjectroute technically lookups constant log time preprocessedcached instead nt involve react overhead rerendering cause route elements recreated additionally routes longer centralized single file may may good idea nt neat bulletproof argument hand always strive use simplest data structures easiestmost flexible solve problem using ui elements define routes fit like using map define predefined structure bad idea", "d": "6/2015"}, {"body": "yeah surprises router rerenders elements render rerender using purerendermixin right working jsfiddle could look using purerendermixin simplest example think illustrate point example notice gets updated always strive use simplest data structures easiestmost flexible solve problem using ui elements define routes fit yah agree sentiment mostly looking alternatives reactrouter beast", "d": "6/2015"}, {"body": "using purerendermixin simplest example think illustrate point interesting cc sebmarkbage spicyj seems react skips rerendering elements pass optimization gone bad intentional", "d": "6/2015"}, {"body": "intentional optimization long time extremely rarely ever show issue evident fact syranide nt even know example one kind optimization manually automatically also useful container components updates state parents nt rerender eg scrolling surface support mutation state convenience make certain assumptions code style optimization relies heavily hard requirement must pure hard fp requirement react idempotent ie render thing regardless called neither examples uses idempotent render functions since reading globally mutated state immutable thinking ways trying enforce ideal solution put time state convenience call something know reading global state whenever changes ie thing calling needs call cause sideeffects even use mutable state objects nt mutate within render reactelements props immutable already enforced warnings however ok state within mutable eg one heuristic assume wo nt combine mutable state reusable elements eg js var mutableobject value var reusableelement class app extends reactcomponent componentdidmount mutableobjectvalue thisforceupdate render return reusableelement last part heuristic assumption theoretical case nt violate rules still breaks case never showed yet afaik awkward unnatural way structure app react however op nt related simply breaking rule number idempotent", "d": "6/2015"}, {"body": "one possible solution use subscriptions route components listens global broadcasting new route change calls subscribe unsubscribe various future options pending like could make easier", "d": "6/2015"}, {"body": "sebmarkbage thanks extremely detailed response suspected though sure best way around solution proposed observables lead multiple rerendering nested elements figure solution saw stuff seems like would solve issue tend think particular optimization default though way default seems line thinking react gives finegrained tools optimization ready generally failing understand nt problematic anytime want encapsulate complexity global windowrelated event browser history resize events geolocation etc component guess gets obscure like support nesting pretty new react guess really trying understand properly inject global events react framework encapsulated clean way example way reactrouter works seems pretty hacky maybe state dealing global events react likely familiar concept enough", "d": "6/2015"}, {"body": "matthewmueller generally failing understand nt problematic anytime want encapsulate complexity global windowrelated event browser history resize events geolocation etc component recommended approach listen whatever info need store reading state render method time update state component rerendered", "d": "6/2015"}, {"body": "spicyj recommended approach listen whatever info need store state reading state render method time update state component rerendered yah makes sense fit nested elements type one tough deal edge cases rerendering idempotent functions multiple times big deal concretely parent triggers rerender also trigger child child would also get notified event rerender", "d": "6/2015"}, {"body": "yeah could cause multiple renders cases react could intelligent scheduling updates batching together though also get unnecessary renders case new element parent new data sideloaded may relatively uncommon", "d": "6/2015"}, {"body": "awesome yah looking forward appreciate help guys keep great work", "d": "6/2015"}, {"body": "actually think made mistake ever allowing mixins able specify mixins beside point since could happen without never allowed method redefinition blanket statement exception lifecycle methods stack userspace methods intent nt clear nt allow nt know change minds cc spicyj sebmarkbage", "d": "6/2015"}, {"body": "point release longer rely abstraction use whatever class system want probably wo nt add new features instead defer standard class system thirdparty class systems mixin abstractions", "d": "6/2015"}, {"body": "react classes autobinding documented reason javascript classes autobinding neither react tries reinvent stuff already javascript nice syntax classes react invent classes classes use standard javascript", "d": "6/2015"}, {"body": "yeah sort confusing explicitly use bind arrow functions gt problem turns arrow functions invalid syntax classes", "d": "6/2015"}, {"body": "means either", "d": "6/2015"}, {"body": "still kind ugly huh ok man thanks think better binding contexts constructor", "d": "6/2015"}, {"body": "could also use bind prefix operator vladmiller works please close issue", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "called documentation classes number issue closing feel free follow along one places", "d": "6/2015"}, {"body": "thanks pushed change stable branch updated site ghpages branch soon builds", "d": "6/2015"}, {"body": "zpao thanks", "d": "6/2015"}, {"body": "events pooled recycled save memorygc overhead", "d": "6/2015"}, {"body": "preventdefault async callback would imagine want persist outside event handler call get pulled pooled class list", "d": "6/2015"}, {"body": "want prevent event based clipboard data hell get synchronously workarounds prevent event based clipboard data without producing memory leaks", "d": "6/2015"}, {"body": "ca nt get clipboard data synchronously nt know could try persisting mentioned see calling preventdefault later anything", "d": "6/2015"}, {"body": "prevent default action immediately wait async operation meantime event continue bubble tree processed option would always prevent default action manually create trigger new event prevented nt know possible clipboard data though note react issue simply events work dom browser", "d": "6/2015"}, {"body": "fkling makes sense thanks preventdefault setstate", "d": "6/2015"}, {"body": "hacky workaround access internals reactshallowrenderer seems like something part public api", "d": "6/2015"}, {"body": "yea agree probably useful convenience similar refs since ref could expose public api tested probably bad practice call handlers inspect state directly though better test public api invoking callbacks render output", "d": "6/2015"}, {"body": "guess question similar one", "d": "6/2015"}, {"body": "rendered child instances child elements provided component associated element guarantee end rendered ps may obvious consider treated exactly like difference dedicated jsx syntax children currently writing code traverse form inputs react provide way afaik never nontesting purposes goes current best practices react explicit purpose readability keeping components isolated", "d": "6/2015"}, {"body": "think get message thanks syranide", "d": "6/2015"}, {"body": "context currently owner based meaning context passed components taht owner common owner different parent based context coming source warnings owner component creates component using component nt children nt create thats get context switch parent based next version partly exactly confusion", "d": "6/2015"}, {"body": "indeed tested react works nonfunction notation makes sense thanks", "d": "6/2015"}, {"body": "thanks filing going close though leave discussion issue", "d": "6/2015"}, {"body": "giving ref passing work", "d": "6/2015"}, {"body": "giving ref passing finddomnode work", "d": "6/2015"}, {"body": "need demo", "d": "6/2015"}, {"body": "gilbox seems work", "d": "6/2015"}, {"body": "bug happens wrapped component returns null first time called", "d": "6/2015"}, {"body": "gilbox yeah sounds like correct behavior", "d": "6/2015"}, {"body": "correct nt think explaining well correct behavior ca nt reproduce simple version bug returning instead null wrapped component simple enough", "d": "6/2015"}, {"body": "gilbox try make minimal repro case react bug like fix", "d": "6/2015"}, {"body": "gilbox fail see problem fiddle outputs null long returning null associated dom node starts returning div associated dom node output console", "d": "6/2015"}, {"body": "fail see problem fiddle closed issue code application similar link posted reason nt able replicate bug simple case", "d": "6/2015"}, {"body": "gilbox mean returns null component even though rendered element replace null actually works returns correct node noscript ie something like supposedely fixed", "d": "6/2015"}, {"body": "mean returns null component even though rendered element replace null actually works returns correct node bingo ca nt prove yet", "d": "6/2015"}, {"body": "update bug react dancer", "d": "6/2015"}, {"body": "sure another common typo would cool said e except c also times english silly inconsistent", "d": "6/2015"}, {"body": "like take stab zpao would adding noop fn returns warning wrapped block make sense common place handling errors invalid methods prop names tests required", "d": "6/2015"}, {"body": "think probably belongs alongside warning componentshouldupdate already dev", "d": "6/2015"}, {"body": "looks like job linter react library", "d": "6/2015"}, {"body": "raybooysen ideally nt think many linters check undefined variables across imports react userbase nt using one whether support usecase valid question though", "d": "6/2015"}, {"body": "closed via yes ideally part lint think could cool rule feel free suggest yannickcr andor write wink", "d": "6/2015"}, {"body": "zpao comfortable typos detection see response react start officially warn typos think try mimic behavior like nounknonwproperty warn developer code execution", "d": "6/2015"}, {"body": "yannickcr call try keep pretty minimal core added years componentshouldupdate added lot earlier incorrectlycased dom props ago another mistyped event handlers adjust less later sure currently machines fix problems kick like linting nt add totally call appreciative rules somebody wants add rules eslint makes super easy write", "d": "6/2015"}, {"body": "talking xmlns field nt think react adding could confirm using logging output react renders", "d": "6/2015"}, {"body": "swaagie sounds like couple different dependencies going see issue browsers version firefox using would great could provide jsfiddle demonstrates issue", "d": "6/2015"}, {"body": "closing due inactivity assuming swaagie solved issue swaagie fiddle demonstrates issue feel free reopen issue happily investigate", "d": "6/2015"}, {"body": "nt know anything else easy", "d": "6/2015"}, {"body": "invariant violations leaves react unstable state moment expected afaik partly catching rethrowing errors crapshoot many browsers may also significant performance impact hot codepaths", "d": "6/2015"}, {"body": "invariant violations leaves react unstable state moment expected afaik partly catching rethrowing errors crapshoot many browsers rethrowing errors test case easier demonstrate way application developing error happens even rethrowing errors example function using something like simply switches pages shows error page error happened test case way manually clear state besides removing reinserting dom element tried throws error", "d": "6/2015"}, {"body": "perhaps higher level component appwrapper contains state pass pageerrorpage props setprops app toplevel component", "d": "6/2015"}, {"body": "korakon nt matter rethrow errors intended point react internally catch rethrow errors avoid internal state breaking completely least nt undesirable sideeffects many browsers currently afaik clean way invariation violation happened particularily vulnerable piece code wrap trycatch calls react", "d": "6/2015"}, {"body": "johnydays thank using syranide yeah get point know thank", "d": "6/2015"}, {"body": "clear require cache start working would nt surprised node memoization causes issues namely case bit use generate html right namespace creates node since run process requires cached looks like feature rejected mocha may make happen run process", "d": "6/2015"}, {"body": "tried clearing require cache specific tests cause problems ends propagating problem later test chain previously nt fail suddenly whole thing complicated requirejs indirection making really hard debug nonminimal case would hurt react performance great deal cache nodes original document", "d": "6/2015"}, {"body": "chance could configure react disable memoization testing", "d": "6/2015"}, {"body": "yes creating new node time would expensive potentially could check cached node ownerdocument matches windowdocument even check come cost though sure worth support use case nt currently intend support react nt really configurable like would undertaking plan making maybe one day", "d": "6/2015"}, {"body": "idea error example nt happen without call also line text removed real life tests place breaks even absurd image tag different component remove tests run nothing special image really like understand underlying logic", "d": "6/2015"}, {"body": "happens rerenders initial render innerhtml setstate triggers create new nodes insert string html add node extract dom node put right place nodes need wrapped insert correctly things probably work fine point move nodes dummy wrapper put right place cross document elements think wrong document error nt know happening image case specifically could related update creating nodes problem updating existing nodes ok", "d": "6/2015"}, {"body": "thanks explanation look like removing react module require cache test indeed alleviate error test also run bit slower surprising repeated disk reads guess", "d": "6/2015"}, {"body": "pretty much depreciated supported favor classes going forward react longer opinion components classes constructed use whatever class mechanism prefer personally agree mixins may offer benefit certain purposes largely seem poor solution problems developers usually apply", "d": "6/2015"}, {"body": "react docs say following unfortunately launched without mixin support therefore support mixins use react classes instead working making easier support use cases without resorting mixins wonder progress almost code find github uses mixins using classes difficulties using code tackle thx", "d": "6/2015"}, {"body": "syranide close issue fast understand mean users try use mixins tell react drop mixins future", "d": "6/2015"}, {"body": "ysmood react nt dropping mixins going forward react opinion effectively made separate module could warn mixins bad idea effectively everyone would see warning really prefer mixins right wrong would find annoying subscribing react heading know mixins something avoid think warning seems like great idea surface see anything disaster practice cc zpao close issue fast deprecate mixins nt seem actionable", "d": "6/2015"}, {"body": "well least warn developers official documentation mixins antipattern realworld composition", "d": "6/2015"}, {"body": "ysmood ready deprecate mixins nt good replacements use cases probably move towards deprecating mixins reactcreateclass least months away", "d": "6/2015"}, {"body": "reactstamp may provide nice alternative mixins check love get feedback", "d": "6/2015"}, {"body": "looks like spicyj broke", "d": "6/2015"}, {"body": "cc graue", "d": "6/2015"}, {"body": "yes deep updates state like tricky nature js pass object reference remain way case exactly happening generally state great things like may want consider alternatives like deep cloning immutable data structures intention state clones expensive operation lots nuance need", "d": "6/2015"}, {"body": "thanks answer words confused thinking react handle cases", "d": "6/2015"}, {"body": "words meant mutate thisstate react make copy", "d": "6/2015"}, {"body": "provide bit information using babel transform version react exactly couple alphas published maybe building masterspecific revision", "d": "6/2015"}, {"body": "yeah transpiler babel react version github master latest seems essentially ran pull github master believe", "d": "6/2015"}, {"body": "wo nt give react currently give reacttools nothing jumping though would good could create complete repro jsbin reactjsbincom change jsx option babel point build", "d": "6/2015"}, {"body": "workaround case put keys divs inside ternary", "d": "6/2015"}, {"body": "champion thanks", "d": "6/2015"}, {"body": "responsibility sanitizing user data falls helpers usually advisable reject nonabsolute nonhttp urls really applies properties interpreted way beware styles colors sizes etc", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "comment included explains reasoning convenience simpler class abstractions set fact component classes created already use classes extend base class props context set hand nt extend base class", "d": "6/2015"}, {"body": "sure intentional either way nt going change behavior point release would break things people would fix sounds like workaround use clonewithprops instead apparently preserve context starting react context parent based anyway context longer attached element therefore impacted cloneelement clonewithprops", "d": "6/2015"}, {"body": "see use work sounds good thank", "d": "6/2015"}, {"body": "works find surprising validator function gets called twice wonder", "d": "6/2015"}, {"body": "pwmckenna information seems working master find surprising validator function gets called twice wonder still validate createelement time render time since modify props creating element", "d": "6/2015"}, {"body": "really great question discussion forum trying keep questions use stack overflow keep github bugs issue tracking", "d": "6/2015"}, {"body": "injecting global event plugins sustainable approach free reach absolutely must beware longterm consequences brief discussions topic various issues throughout little movement far future please use community forum questions", "d": "6/2015"}, {"body": "considered either concatenation props passed additionally client side could store active ids map weakset throw error warning already exists another alternative setting something like brianmcdcontextify keep sides synchronized per request", "d": "6/2015"}, {"body": "good question nt know answer", "d": "6/2015"}, {"body": "iamdustan considered either concatenation props passed yeah case property particular enticing nt guaranteed unique goes combination provided properties additionally client side could store active ids map weakset throw error warning already exists actually fairly easy guarantee clientside ids kept unique code posted ok unless misunderstanding suggestion another alternative setting something like brianmcdcontextify keep sides synchronized per request would probably take bit longer grok exactly would tie solution rate would like think lighterweight read dependency free solution main approaches considered far use combination provided properties like suggested fails uniqueness test though provide sort seed value gets shared serverside clientside cumbersome though requires passed component layers obviously fails sort encapsulation test force id provided property actually right annoying feels unnecessary still presumes consuming component make uniqueness guarantee throughout entire page context use hack clientside mounting allows refer serverrendered markup never actually figured even smells like rather fragile solution anyway yeah leads issue great solution curious hear ideas react might support use case future release obviously specific example giving imagine could solved general approach enables components dynamically generate serverside propertystate values perform successful mounting client", "d": "6/2015"}, {"body": "mostly brainstorming curious hear rest team thinks nothing say constitutes official recommendation personally would go option number really looking uuid nt want use random markup would nt match ultimately serversideclock problem ie suppose component rendered current time displaying microsecond accuracy two machines going clock skew making impossible generate matching markup incidentally since reads clock literally problem p framing problem serversideclock problem think pretty clear want way controlling current time perhaps want clock red amp green christmas eggs amp bunnies easter need way test functionality per year write unit tests verify functionality would need control time difference component need unique identifier implementation detail visible user dependency sideways data kinda sucks eeh sure near future able get around cumbersome passingdownprops problem using actually could use today officially undocumented unsupported subject change distant future able use sideways data loading perhaps combination context subscribe external data like clock help little sebmarkbage thoughts", "d": "6/2015"}, {"body": "provide sort seed value gets shared serverside clientside cumbersome though requires passed component layers obviously fails sort encapsulation test might stretch approach leveraging", "d": "6/2015"}, {"body": "jimfb technically think really comes need facility centralizing perroot data optionally automatically transmitting server client ie conceptually perroot object everyone access everything else related issue like time random numbers etc implemented interms functionality really rather unopinionated flexible would nt even strictly exposed react right reusable component ecosystem thrive think one could imagine react providing perroot uids uids seeds etc api possibly opinionated possibly sufficient imagine many benefits preferred facility centralizing transmitting necessary data", "d": "6/2015"}, {"body": "syranide think pointgoal right suppose context needs initialized user ca nt first user responsible initializing style code need root enables sharing idea shared data among subtrees intended goal afik", "d": "6/2015"}, {"body": "jimfb would nt say concerned propagation data concerned source data think real issue put differently issue seems trivially solvable theory write store provides static uid per react root write store provides counter per react root combine uid counter got deterministic guid initialize server stores default data render serverside transfer markup initial store data uid counter always client initialize client stores transferred store data render clientside remember uninitialize stores unmounting per react root context probably solves today cumbersome especially isolate per component especially nt kind framework help component reinvent wheels also send data saying exact solution draw line react provide think illustrates issue already doable really realistic", "d": "6/2015"}, {"body": "syranide right nt propagation data thing able handle mean without dictating server side architecture least transport protocol nt able help source data data needs come server management domain framework like relay seems like reliably solve could maybe solve potentially help sideways data loading think far outside domain react maybe domain related projects like relay sure react canshould help anything beyond propagation data wrong andor missinterpreting point curious steps think responsible handling", "d": "6/2015"}, {"body": "jimfb right nt propagation data able handle question think wrong andor missinterpreting point curious steps think responsible handling seems like somewhat page seems options react concern problem react expose perroot uid react provide writeonce initial data store anyone claim key store whatever consumer react serialize initialize clientside data react automatically serialize data store serverside initialize clientside data store looking seems obvious option overreaching seems could considered basic necessity like ways option would detrimental legitimate usecases imagineable option enough satisfy majority usecases clear replace react library x want rocket science would democratic seems would hurtful ecosystem reusable components one wants deal library x amp amp z various components chose different library even though largely basic purpose option abundantly clear hopefully suggesting idea somewhat pseudocode solution issue context discussion nt actually wrapper kind react api js function getperrootuid context contextdatastorerootuid undefined contextdatastorerootuid mathrandom return contextdatastorerootuid var rootuidcounters function incrementperrootcounter context var rootuid getperrootuid context rootuidcounters rootuid undefined rootuidcounters rootuid return rootuidcounters rootuid class initialdatastorewrapper constructor props state context thiscontextdatastore thispropsdata class appwithguid constructor props state context thisstate guid incrementperrootcounter context server var datastoreobject var markup reactrendertostring transfer markup datastoreobject client client var datastoreobject datastoreobject server var datastorewrapper reactrender hope gets point across least total crap code correct saying solution nt trying illustrate utility something like also advocating extend percomponent data usually associated model data relay flux etc suggesting basic utility allowing components execute deterministically purpose guid generation random numbers etc shout made sense", "d": "6/2015"}, {"body": "syranide makes sense actually talks internally requiring io go react things like gettime therefore transitively getrandomnumber would count io think idea proposed mostly academic purposes thought exercise proposal implementation might add fuel discussion suppose provide uuid generator provide time api provide create huge list possible apis provide know covered everyone else use cases preference provide basic building blocks people build whatever wantneed question common theme underlying api would make easier implement things user land contextsidewaysdata fall short needed brainstorming somehow magically allowed context variable default value component could require dependency context variable could provided context allow alternativeoverwrittenmocked implementations variable nt context stack defaulted shared implementation similarly default context variable reads current system time unless overwritten manually solve serversideclock problem similarly custom datastore component could requiredesire default implementation available overwritten solve unit testing andor ssr would sufficient could somehow make work would solve problem", "d": "6/2015"}, {"body": "actually talks internally requiring io go react things like gettime therefore transitively getrandomnumber would count io think idea proposed mostly academic purposes thought exercise proposal implementation might add fuel discussion interesting discussions curious exactly mean requiring io go react kinds io referring sense data exist outside components like flux stores data serialized guaranteed represent entire state replies purely gut feeling intuition brainstorming suppose provide uuid generator provide time api provide create huge list possible apis provide know covered everyone else use cases preference provide basic building blocks people build whatever wantneed question common theme underlying api would make easier implement things user land contextsidewaysdata fall short needed way see give perroot time seed uuid way store perroot local data component able accomplish useful deterministic process without requiring additional data sent client server uuid necessary producing markup guids seems like necessity html deficiencies otherwise useful think might uses think key point features benefit one definitionsource probably detrimental even values transferred server client react provide components make demands libraries consumer component neither seems beneficial redundant leads duplication data code inconsistencies etc time seed uuid fairly limited usefulness reusable components needed could provided asneeded basis consumer want handsoff uuid intrinsically useful reusable reactdom components think primary issue perroot local data simply nt exist currently even seed unable use anything stateful nowhere appropriate store data without putting explicit requirements consumer making specific perroot data storage available context slippery slope maintenance perspective somehow magically allowed context variable default value yeah seems technically indeed solution lack root local data primary problem time seed uuid secondary problem may decide provide someall core think would mistake least make available separate preferred modules possibly even interfaces reusable components specify dependencies less immediate concern ps think must function ondemand", "d": "6/2015"}, {"body": "like said mostly academic exercises halfserious idea said couple variants idea nt allow component data enterexit jsvm without passing react maybe manage layer component flux store point manage io react gains lot power super interesting things instance replay io since beginning time restore rewind react tree point time idea would useful leads interesting conclusions uuids many use cases instance suppose result click event want create new data object new transaction sent server want identifier lookup prevent accidental replays retries allow supplied used render maybe use cases vanish regards making deterministic potentially hard part component render order guaranteed react api may notsodistantfuture start rendering parallel via workers yeah clockseeduuid need functionsdatastoressomethingmorecomplexthanaconstant especially since need able handle things like outoforder renders making naive implementations things like seeduuid nondeterministic intuition solution somehow involves default value context variable honestly nt given enough thought yet nt know thing would work", "d": "6/2015"}, {"body": "jimfb idea would useful leads interesting conclusions think seems like interesting exercise determining better ways developers structure apps perhaps much future direction react api particular mentioned gist imho strength react close featurewise manually wiring uis without associated burdens even without opinionated know academic saying uuids many use cases thought feel like overreach uuids would purpose separating react roots benefit reusable components seems uuids purpose outside scope react provides benefit communication something reusable components concerned communicate callbacks regards making deterministic potentially hard part component render order guaranteed react api may notsodistantfuture start rendering parallel via workers far understood realistically parallelized discussion relates life cycle events sideeffects allowed would unaffected yeah clockseeduuid need functionsdatastoressomethingmorecomplexthanaconstant especially since need able handle things like outoforder renders making naive implementations things like seeduuid nondeterministic clock would dynamic value seed uuid would static values per root although seed provided consumer probably mutated per use also dynamic avoid separate implementations random number generator algorithm producing sequences separately intuition solution somehow involves default value context variable honestly nt given enough thought yet nt know thing would work yeah default value inject context variable seems like solution exactly implemented make sense interesting problem sure nt want every component specifyingproviding default", "d": "6/2015"}, {"body": "soooo tried read issue conversation going head p answered forgive currently reasonable workaround problem react component libraries leverage see bunch options app builders much libraries want generate ids components control entire render tree many thanks", "d": "6/2015"}, {"body": "experimented solution making available common interface js var reactrootstore require reactrootstore var testproperty reactrootstorecreateproperty var helloworld reactcreateclass contexttypes reactrootstorecontexttypes render function var initialvalue testpropertyget testpropertyset return hello initialvalue testpropertyget root element must wrapped context variable exposed reactrender reactrootstorewrapelement function return documentgetelementbyid container works possible code repo minor errorbug committed get jsfiddle slightly older code works shows concept provide store behaves deterministically going server client perroot global", "d": "6/2015"}, {"body": "still maintain part", "d": "6/2015"}, {"body": "part reactmagic fixed need deploy web version", "d": "6/2015"}, {"body": "pushed update fixed", "d": "6/2015"}, {"body": "would probably adding property data table would manually allow agree never change row height caching performance optimizations allows default recalculate position rerender", "d": "6/2015"}, {"body": "think want file fixeddatatable repo", "d": "6/2015"}, {"body": "discussion", "d": "6/2015"}, {"body": "change made everybody please submit pull request could modify version react could specify value string react wo nt add currently public method inject properties sure ever expose one", "d": "6/2015"}, {"body": "opened pr address", "d": "6/2015"}, {"body": "merged hurray close tada", "d": "6/2015"}, {"body": "would favor creating generic query method takes query stringing using css selectors custom syntax finding non generic query stringing items ie refs ideal syntax", "d": "6/2015"}, {"body": "still days later", "d": "6/2015"}, {"body": "zpao action want take", "d": "6/2015"}, {"body": "fixed", "d": "6/2015"}, {"body": "still broken going leads shows page", "d": "6/2015"}, {"body": "maybe browser cached redirect working", "d": "6/2015"}, {"body": "nt realize sent back makes sense would cache", "d": "6/2015"}, {"body": "pr merged probably close", "d": "6/2015"}, {"body": "thanks taking", "d": "6/2015"}, {"body": "may u need call render extract data dependencies", "d": "6/2015"}, {"body": "cute integration observable data react components boils wrapping data observable function including mixin referencing observable data render computed observable render method changes changing observable data refrences forceupdate automatically happens might little much magic taste wrapping data nt appealing cute simple react component becomes anyways great discussion torn sideways data loading event emitters pure parameter based top style problem magical observation invariably seems like always end deeply understanding designing around magic works possibly defeats purpose magic", "d": "6/2015"}, {"body": "another workaround override initially loaded allows us set custom accepted html properties js load htmldompropertyconfig loading react ever set custom properties var htmldompropertyconfig require reactlibhtmldompropertyconfig htmldompropertyconfigpropertiesnwdisable null htmldompropertyconfigpropertiesnwfaketop null htmldompropertyconfigpropertiesnwuseragent null load react binds configs load time var react require react", "d": "6/2015"}, {"body": "going unsupported workarounds also call anytime react required", "d": "6/2015"}, {"body": "prefer term version dependant workaround something like p thanks tip cleans sanity load order", "d": "6/2015"}, {"body": "pretty sure fixed earlier closing reopen fixed", "d": "6/2015"}, {"body": "hi yall happy pr something fix still unresolved consensus correct heuristic though", "d": "6/2015"}, {"body": "isnt react answer materializecss ensures form submitted correct value sent select element instance form container id subjectupdate select name type capture change event jquery follows subjectupdate select nametype change function consolelog select changed val", "d": "6/2015"}, {"body": "issue passing callbacks around trying setstate using externally fetched value within componentwillmount encountering issue", "d": "6/2015"}, {"body": "reason using instead also provide jsfiddle demonstrates issue", "d": "6/2015"}, {"body": "noticed similar issues workers fix", "d": "6/2015"}, {"body": "jimfb thought failing different place turns trying thing original poster sorry noise initialstate constructor simpler programming model way cascading dropdowns code makes piecemeal calls setstate deal initial preselections also react valuelink requestchange events using initial state requires combine piece code pass candidate state around", "d": "6/2015"}, {"body": "sebmarkbage specific", "d": "6/2015"}, {"body": "spicyj found", "d": "6/2015"}, {"body": "stack getactiveelement reactinputselectiongetselectioninformation mixininitializeall mixinperform batchedmountcomponentintonode happen server though", "d": "6/2015"}, {"body": "someone pointed thread like chime usecase rewrite reactresolver avoid several context issues heavily dependent server desired root element rendered normally via kick lifecycle containers wrap lazyloaded components amp fetch data via promises data returned called within container promises resolve wrapped component renders kicking steps tree completes aggregates lazyloaded data final called time data already available amp full tree renders synchronously alternative would constantly rerender full tree root promises appear seems poor architecturally different algorithms server amp client rather universal ca nt say isomorphic without mjackson knowing one since neutered server eric ft", "d": "6/2015"}, {"body": "btw possible call asynchronously callback passed reactrender seems called always synchronously", "d": "6/2015"}, {"body": "bad thing still use settimeout need btw sure maybe simple usecases sync nt know nt see documented would nice know", "d": "6/2015"}, {"body": "slorber wonder reason receive callback question directly comes mind would behavior rendering triggered rendering callback called possible reproduce think nt occur callback called synchronously except using", "d": "6/2015"}, {"body": "actually seems right complex app callback seems called synchronously clear guess react guarantee synchronicity future may change behavior later like decide use something like future maybe", "d": "6/2015"}, {"body": "updates happen asynchronously calling reactrender new react element container might start batching initial renders", "d": "6/2015"}, {"body": "nice know mean new react element spicyj", "d": "6/2015"}, {"body": "result reactcreateelement jsx expression", "d": "6/2015"}, {"body": "spicyj nt asking definition reactelement rather mean new element container mean render callback called asynchronously", "d": "6/2015"}, {"body": "second third renders believe async", "d": "6/2015"}, {"body": "thanks", "d": "6/2015"}, {"body": "hi wonder closed lost like hour mostly fault still basically send undefined createelement happen never consider possibility sent undefined react drop dead hit anvil eventually find debugger lets get right offending createelement call still isnt exactly enough really considering possibility undefined sent anyway point really common calls really proliferate rendering something sophisticated really checked warning thrown please", "d": "6/2015"}, {"body": "unphased issue closed linked one", "d": "6/2015"}, {"body": "pretty sure fixed master also improved error message mount time", "d": "6/2015"}, {"body": "awesome thanks", "d": "6/2015"}, {"body": "using jsdom mocha unit testing ran problem", "d": "6/2015"}, {"body": "comes fairly often training sessions often someone uses instead bloodyowl looks like got good handle make pr", "d": "6/2015"}, {"body": "mjackson remaining question warn event name right letters wrong case anywhere fulllowercase event names", "d": "6/2015"}, {"body": "please add support immutablejs alike problem indeed use loop personally run issue computed styles fields expressed via getters", "d": "6/2015"}, {"body": "going count part likely support either neither", "d": "6/2015"}, {"body": "ah see thanks response since syranide pointed prop technically separate issue issue may still contender even eventually rejected good hope wo nt case see happens first though yes", "d": "6/2015"}, {"body": "true technical reason need consistent hard imagine us one", "d": "6/2015"}, {"body": "thanks bodjkin saved lot time simply forgotten add react component agree error pretty confusing even message got", "d": "6/2015"}, {"body": "issue cosmith typeerror really nt helpful real error tangentially related types", "d": "6/2015"}, {"body": "cosmith johntyree see warning console logged exception thrown one reactcreateelement type null undefined string dom elements reactclass composite components", "d": "6/2015"}, {"body": "spicyj good question probably nt recall would warning exception", "d": "6/2015"}, {"body": "case specifically want able inline calls reactcreateelement without changing runtime behavior createelement never throws", "d": "6/2015"}, {"body": "made throw granted even nt like idea much sure better solution emitting warning everything explodes end day dev going google error completely opaque find thread something similar move lives", "d": "6/2015"}, {"body": "sure help someone future another way get error referencing component nt added module exports throw error mentioned fix js const react require react class mycomponent extends reactcomponent moduleexports mycomponent", "d": "6/2015"}, {"body": "hopefully make touppercase error little less cryptic posted", "d": "6/2015"}, {"body": "nice", "d": "6/2015"}, {"body": "trying getting error later found element inline css entry root removing entry fixed", "d": "6/2015"}, {"body": "struggling error pointers main app testcomponentjsx javascript var react require react var testcomponent reactcreateclass render function return asdfasdf moduleexport testcomponent using latest version rect reactify browserify compile", "d": "6/2015"}, {"body": "runrevben file check exports line typo guess", "d": "6/2015"}, {"body": "thank saved much frustration", "d": "6/2015"}, {"body": "wow lost hours life issue glad fixed sooner released better", "d": "6/2015"}, {"body": "jun pm sam newman notifications githubcom wrote wow lost hours life issue glad fixed sooner released better reply email directly view github", "d": "6/2015"}, {"body": "next time maybe nt use unstable undocumented features nt want run trouble", "d": "6/2015"}, {"body": "franleplant question", "d": "6/2015"}, {"body": "experimenting code handle uncancellable promises issue thoughly tested solution wrap callback like componentdidmount thisifmounted initifmounted componentwillunmount thisifmountedunmount onsearch return ajax thisifmounted response gt thissetstate response notice callback wrapped code looks like function initifmounted basically keeps bag pending callbacks nullified dereference pending promises finally finish callback given see null callbacks bag nothing disclaimer whipped nt thoroughly tested yet feel free use break tell nt work", "d": "6/2015"}, {"body": "jordansexton exact issue inspect texthtml content initial http request html actually correct somehow dom rendering browser seems parse render time client side react code try reuse markup complains difference spicyj markup client reactrendertostring server browser reinterprets something different due fix issue unable sent disabled disabled instead using syntax since always converted bare attribute parsed browser described", "d": "6/2015"}, {"body": "goldensunliu actually fixed issue method suggested spicyj trick compare markup normally rendered client markup rendered server call client server compare results diff viewer see saying instances etc red herrings something else markup completely unrelated case mismatch image attributes using client side rendering images server rendering regular source changed using since nt require detection unavailable server bug gone", "d": "6/2015"}, {"body": "spicyj comes often bit surprising addition process diagnose issue pretty painful change code client use get diff replace hash generated server compare two usefully think idea warning message displays actual mismatch know would expensive warning thrown development anyway", "d": "6/2015"}, {"body": "thanks jordansexton makes quite lot sense take look actual mismatch process seems archaic gets job done", "d": "6/2015"}, {"body": "smells like bindings", "d": "6/2015"}, {"body": "sure relates current proposalimplementation found enabling composition higherorder manipulation actually key feature data dependency tracking especially use reactive data source flux flux wire anything else provides updates take following example reactnexus wonder data binding component api seems higherordercomponentsreturning decorators provide nice way expressing data binding without polluting component methods namespace however sebmarkbage noted risk pollution props namespace instead using props transformer decorator reacttransformprops clean uprename props passing inner component acknowledge might become problematic future higherordercomponents become commonplace risks name clashing increases could solved using symbols property keys checking support keyed props jsx support computed inline props keys although one always use computed properties object spread sorry gets little offtopic seems still find right sweet abstractionapi expressing data deps component level", "d": "6/2015"}, {"body": "much fun children function pattern values change time believe elierotenberg first came current usage model springs via rebound reactsprings example props collision usage owner state also nest multiple springs react manages hard bits observables ha could also accept props graphql queries rough attempt sketch flux", "d": "6/2015"}, {"body": "used pattern called render callbacks asana ultimately moving away pros potential collision props easy implement author user cons extremely difficult implement since render callback may close state imagine component tree counter state accessed render callback props updates counter update stale version counter result forced always update store testing components isolation became difficult inevitably developers put complex logic render callbacks component render wanted test logic natural way render whole tree test store component made impossible use shallow renderer moving model takes store receives new data store clones reactelement overriding specific prop many ways pattern taking component constructor props went approach easiest model typescript", "d": "6/2015"}, {"body": "terrific points ca nt think way around either without breaking sideways requirement", "d": "6/2015"}, {"body": "threepointone sounds exactly like one implementation proposals power", "d": "6/2015"}, {"body": "example serious drawback making store always update thinking children would rendered without chain anyway thanks time", "d": "6/2015"}, {"body": "threepointone exactly boundaries unclear impact exactly perf worries members team worries combined difficulty testing compelled switch using", "d": "6/2015"}, {"body": "testing angle definitely problem shallowrenderer recognized render callbacks would help ps render callback thumbsup", "d": "6/2015"}, {"body": "sebmarkbage current discussion esobservable would guarenteed async method provided shortcut subscribe synchronously though validity syncasync apis currently debated chimed ticket use case mentioned favor synchronous subscription nt know might anything add think ideas clean pattern handling external state though playing around bit leaning favor hoc approach also gaearon simplified hoc bit using static using rather looks really nice proposed decorators class decorator could even go far adding getter make come close original proposed api minus local state affecting observable subscriptions agree good thing much less noise around subscribe unsubscribe", "d": "6/2015"}, {"body": "lack synchronous subscription could huge problem", "d": "6/2015"}, {"body": "struggling issue thanks theludd least know even remotely solve added dynamic key form prettiest solution either u get around issue lost focus", "d": "6/2015"}, {"body": "ran head long problem must say agree zpao surprising rendertostaticmarkup side effects seems like bug", "d": "6/2015"}, {"body": "ran anyone else coming stoppropagation event work either ended building wrapper component handle basically acting mini router userflow", "d": "6/2015"}, {"body": "work mock function always supply object without nested objects merge correctly", "d": "6/2015"}, {"body": "language keys let say multilingual application calls kinds elements lot could move calls render method language chosen generally constant unless user wants change language case would like one time invalidation constants would something like conceivable", "d": "6/2015"}, {"body": "element already considered constant jsx element hoisted", "d": "6/2015"}, {"body": "deprecating jsxtransformer closing", "d": "6/2015"}, {"body": "zomg exciting", "d": "6/2015"}, {"body": "presence absence function closure orthogonal statefulness function references constants closure still pure function function might closure attached still sideeffectful taking parameter reference mutable data structure mutating deku approach actually react nt really separated rest programming community science matter using well known concepts nodes ui tree pure functions name correctly instead risking confusing programmers introducing creative names pretty common programming concepts", "d": "6/2015"}, {"body": "closure captured state function closure orthogonal statefulness clarified captured state nt need condescending terminology lesson thanks internal react issue tracker used communication tracking issues blog post broadcasting new creative concepts expected reader aware understands distinction", "d": "6/2015"}, {"body": "clarify matters development open curtesy lots teams kind progression private even way much virtue facetoface meetings would like us transparent make happen nt want situation tailor communication clear timely fashion blog posts definitely nt want anyone hesitate post feel need clear chain arguments make understandable broader audience without context fear terminology police space accessible core team possible even means contextual terminology missing information part wider conversations even exploratory concepts may may end already commonly known concepts pushing back feel free ask clarifying questions though", "d": "6/2015"}, {"body": "side note", "d": "6/2015"}, {"body": "jimfb pass props dev remove old props mutation warnings since handling deprecation internally", "d": "6/2015"}, {"body": "yes update umbrella issue", "d": "6/2015"}, {"body": "deprecate getdomnode replaced reactfinddomnode already deprecated nt group", "d": "6/2015"}, {"body": "chicoxyzzy nt runtime warning", "d": "6/2015"}, {"body": "spicyj maybe release point release add deprecations comes around kill code seems work time left release", "d": "6/2015"}, {"body": "nmn generally nt add new functionalitydeprecations point releases minor bug fixes also working hard get door increasing scope release wo nt make happen faster", "d": "6/2015"}, {"body": "another request react extremely difficult test headless environments issue", "d": "6/2015"}, {"body": "reference see reactwithaddonsrendersubtreeintocontainer", "d": "6/2015"}, {"body": "progress made towards", "d": "6/2015"}, {"body": "bluejamesbond none explicitly web workers though done lot refactoring recently goal making possible multiple reconcilers make things serializable helps goal", "d": "6/2015"}, {"body": "currently needing feature thanks workaround", "d": "6/2015"}, {"body": "think support createelement bypassed easily environments like om defaultprops proptypes wo nt work think everything else", "d": "6/2015"}, {"body": "useful use immutable map data structures eg immutablejs maps regular dom elements style props closed considered similar enough issue either would done probably last september also related issue specifically matter regular dom elements style props sebmarkbage remarked apropos immutable persistent data structures desired feature ability combine multiple constants lightweight way without actually copying already pointed even efficient module level scope exception dynamic values stylesbase width thispropswidth might need persistent object goal get engines need start designing mind polyfill immutable record object immutablejs something like general data structure later replaced native record object compile support nt think introduce new proprietary data type difficult upgrade general solution persistent records imminent need wo nt imminent need aspects style model proven introduce something difficult undo immutableobject abstraction palatable upgradable move forward instead prove imminent value ca nt wait data types", "d": "6/2015"}, {"body": "show benefits streaming responses third party apis heavy database requests cause used dustjs work around great react could", "d": "6/2015"}, {"body": "also streaming coming browser could become benefit client", "d": "6/2015"}, {"body": "jakearchibald help understand streams could help client us would way set innerhtml stream thinking something else", "d": "6/2015"}, {"body": "spicyj streams land browser streamsupporting apis follow pretty certain given browser already currently exposed able get streaming document fragment maybe domenic discussion links video write innerhtml twice partial result full result horribly hacky improve render time", "d": "6/2015"}, {"body": "pretty tentative current thoughts along lines", "d": "6/2015"}, {"body": "thanks references", "d": "6/2015"}, {"body": "bunch experimentation related fix able trace issue specifically fact event default event handlers added part nt removed unmounting looks like mounted attaches listeners etc leads us finally function returned getting used think exposed callable called component removed dom clear sure best handle given fairly new react source sort massive conventions use places look", "d": "6/2015"}, {"body": "pletcher right nt removed added per document top level nt really problem", "d": "6/2015"}, {"body": "right right seems like handler getting attched firing event causes node get recached unmounted least stack points climb browser native handling removing component triggering handler", "d": "6/2015"}, {"body": "yes fix probably change react event handling fire events removed nodes another root still mounted ca nt remove toplevel handler anyway cc", "d": "6/2015"}, {"body": "spicyj think intentionally fire events removed nodes pretty sure unit test ensuring fire event nodes even removed part event handler event bubbles", "d": "6/2015"}, {"body": "yeah spec says suppose sufficiently vague imply nonfatal still undefined behavior", "d": "6/2015"}, {"body": "yeah goes back", "d": "6/2015"}, {"body": "want chime cents experience using react coffeescript jsx top coffee file import elements plan using render methods end looking like render div myfirstprop test mysecondprop foobar suprisingly similar jsonml less clutter least opinion mind readability issue think unnecessary add another notation since coffeescript enforces indentation clearly demonstrates parentchild relationships elements never use jsx components jsonml necessary terms alternative jsx jsonml necessity would probably possible wrap data coming via native js function jmltonative node return null node null var elementname node elementprops node var element reactdom elementname var elementchild nodelength jmltonative node null return element elementchild elementchild render function jsonml div classname container fancybutton disabled true span return jmltonative jsonml nt know sort performance hit actual", "d": "6/2015"}, {"body": "spicyj curious problem know solution silent exceptions reactjs hard time silent breaking react time debugging understand useful app production throw exceptions talking situation app component break silently json endpoint change example way turn silent breaking reactapp would save lot time many people believe reactjs devs similar problem", "d": "6/2015"}, {"body": "repeat react eat exceptions part code throwing exception bubbling top level something react catching promises default common cause nt terminate every promise chain call libraries could also catch exceptions", "d": "6/2015"}, {"body": "spicyj thanks patience know good blog postmore reference cases someone handled kind unwanted behavior", "d": "6/2015"}, {"body": "post promises issue", "d": "6/2015"}, {"body": "spicyj thank much", "d": "6/2015"}, {"body": "closed", "d": "6/2015"}, {"body": "got wondering thing taoeffect conversation think documentation issue says emphasis mine since jsx javascript identifiers discouraged xml attribute names opinion suggests valid jsx valid javascript therefore use class changed something like since jsx expressions evaluated dom nodes attributes follow naming conventions ie instead point nt", "d": "6/2015"}, {"body": "something would really handy opinion lot render methods similar following one nt really like using prefer explicit way passing properties wish something similar object initializer shorthand bad different meaning jsx smile maybe alternative good enough though", "d": "6/2015"}, {"body": "proposal able afraid destructuring best solution", "d": "6/2015"}, {"body": "common use blacklist passing props wrapper components could use inverse whitelist probably best solve outside react like blacklist classnames similar useful modules", "d": "6/2015"}, {"body": "spicyj would love tackle jumping little lost huge codebase found seems place defines built dom nodes unsure proper place warn would also unsure proper place put test would reactdomtest reactelementtest reactelementvalidatortest reactjsxelementtest etc", "d": "6/2015"}, {"body": "probably place check dangerous tag names would reasonable place rename function add warning reactdomcomponenttest probably reasonable place test find somewhere else probably fine", "d": "6/2015"}, {"body": "would love see use csstransitiongroup animating transition screens app every screen custom enter leave animation would like set enter animation new screen leave animation disappearing screen", "d": "6/2015"}, {"body": "little control animation classes would nice addition react addition making animation libraries accessible proposal makes easier reuse existing animation css nt follow enterleaveactive naming convention", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "using componentdidupdate aside promises logical way handling post setstate hook promises reflect current stateofopinion javascript community common react code much readable optional callback argument bump", "d": "6/2015"}, {"body": "would use pattern fact probably antipattern fire event updates case may triggers multiple rendering passes multiple layout passes significantly worse performance implications", "d": "6/2015"}, {"body": "two code examples functionally different anytime parent need child updated dom place pending states resolved would candidate promise come contrived example lets say selection state changes rendered component width parent needs calculate new position account new child width yes dom issues accounted componentdidupdate others point point issue transition setstate interface something inline js community standards", "d": "6/2015"}, {"body": "problem existing js community practices often make code difficult reason nice thing lifecycle methods make easy reason nt side effects happening unexpected places due callback everything handled lifecycle methods would personally advocate removing callback altogether", "d": "6/2015"}, {"body": "get exception hope fixed soon", "d": "6/2015"}, {"body": "spicyj anything stopping people implementing suggested fix", "d": "6/2015"}, {"body": "encountering similar issue", "d": "6/2015"}, {"body": "anything stopping people implementing suggested fix guess pr would welcome", "d": "6/2015"}, {"body": "gaearon yeah", "d": "6/2015"}, {"body": "feeling proper way fix would prop like reactdominput first render client true component grab new value run onchange handler incorporate react know reusing markup came server possible however willmountdidmount feel bit hacky bits information react exposes first render server generated markup quite lowlevel implementation detail reason may worthwhile introduce new lifecycle event like accepts old dom node argument anything like values injected browser optionally slurped nodes like reactdominput incorporated react flow", "d": "6/2015"}, {"body": "like offer cents subject using parent based context form components bit lack good update mechanism parent children depending context led creating parallel flux like mechanism form functioning store instance passes method via context components register mount form trigger change propagates fluxy works ok destroys composability model react components general strategy wrapping component hoc nt work places new wrapping component outside update channel instead middle props great benefit prop system flow top intercepted anything stuck case using flux like update system wrapping component would also need listen form run issue wrapping component original wrapee component listening form instead hoc taking passing data original component context clearly needs protected somewhat components business particular context need simple jump data stream component wants specific case form components children isolated context passes component receive however consumer wants wrap hoc set defaults adjust behavior straightforward way", "d": "6/2015"}, {"body": "say context api really ought allow intermediate authorized components act reducers said context way components reducemap props pass children difference whereas props public steam context private opt stream", "d": "6/2015"}, {"body": "played bit idea subscription based context reactsidecontext hood context broadcasters expose subscribe key cb getvalue key interface children subscription context key bubbles context tree reaches either broadcaster particular key top tree broadcasters emit changes context keys via broadcast key newvalue otherkeys broadcasts keys observes keys class decorators tie api react components using propagate context tree component tree enqueue update response context change bit boilerplate setup api equivalent current proposal avoid name clashes context trees unique need reference context order broadcast observe keys within", "d": "6/2015"}, {"body": "oveddan thanks works perfectly", "d": "6/2015"}, {"body": "preferred way testing react using shallow rendering nt suffer need mock components even nt anything", "d": "6/2015"}, {"body": "useful according docs still experimental feature docs going changed soon", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "makes debugging react apps much difficult", "d": "6/2015"}, {"body": "scary one child component error take entire component tree would awesome put trycatch statements key components tree", "d": "6/2015"}, {"body": "working isomorphic app many components lean messy thirdparty apis relatively high risk developer write new component makes bad assumptions data receives since render server side destroys request user get part page decided take aggressive approach problem wrapping reactcreateelement app replacing lifecycle methods error handling thinking thing extending component class even though leaves app invalid state thought preferable rendering nothing user link code working reason really", "d": "6/2015"}, {"body": "skiano working reason stop eventual solution little flexible efficient similar spirit", "d": "6/2015"}, {"body": "key accessible via getter many instances one would need know unique child array children something happened simple example would list items get passed controller view children prop say handler takes param sets something parent internal state passes prop child parent render method like key nt accessible need pass another arbitrary prop like value child redundant", "d": "6/2015"}, {"body": "epferrari could always bind imagine", "d": "6/2015"}, {"body": "mathieumg yeah man react complain bind component method component suppose one could use utility function curry either way contrived awful add extra prop counterintuitive suppose nt want reset component since pass reference suppose someone could overwrite accident nt know course solved anyway seems lots things react built keep novices shooting foot good bad depending cest la vie", "d": "6/2015"}, {"body": "react nt complain provide second argument eg work without warnings since useless", "d": "6/2015"}, {"body": "never tried argument scoffed warning moved thanks tip", "d": "6/2015"}, {"body": "tripped expected return unmounted components", "d": "6/2015"}, {"body": "guess throwing makes sense error message cryptic uncaught error invariant violation component keys getdomnode handlechange props context state refs reactinternalinstance contains render method mounted dom honestly thought duplicate react something nt even bother check whether component mounted nt", "d": "6/2015"}, {"body": "gaearon tracking error mesage verbiage", "d": "6/2015"}, {"body": "regards original issuetopic sounds like issue might related reactbootstrap calling update unmounted reactdominput component right next steps issue confirmrepro bug latest react reactbootstrap issue still present file bug reactbootstrap updating unmounted component mfunkie wilkerlucio chetstone help one since guys ones see bug end updating unmounted component noop meaning componentdidupdate probably nt called least nt throw reactdominput see error boundaries help", "d": "6/2015"}, {"body": "appears still issue encountered trying different parts form validation happen onblur onclick seems change dom state effected onblur button containing onclick onclick fire see variation example provided enter text click button twice see click true create new issue reference one", "d": "6/2015"}, {"body": "deprecating jsxtransformer closing", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "jarsbe thank much problems default props used undefined", "d": "6/2015"}, {"body": "fwiw relatively easy hack fragment component react treated array children react autogenerate keys since happens initial validation components wo nt throw usual keys supplied error said hack solves gaearon talking deal ugly array syntaxsetting arbitrary keys jsx issue returning multiple nodes root component render method problem idea component needs return one elementnode seems perfectly reasonable jsx structure end dom foo bar baz nt think principleofleastsurprise violation components already kinds surprising things dom using lifecycle hooks look common wormhole pattern generally accepted component necessarily result single element created fine compromises made work dom nt optimizations either even liking array syntax many users mentioned wrapper elements break styling layout serious ways tables obvious flexbox also major issue already css reapplies flex rules wrapper elements exist react pretty ugly usecases presented pretty sure could replace getbunchofcomponents visual output would without introducing practical technical issues related components fragments root requires developers compromise making isolated reusable components heaven help decide want reuse bunch components elsewhere underlying implementation issue react nt think accepted", "d": "6/2015"}, {"body": "thomasboyt edit mistake conflated arguments tablediscussion largely agree saying think still problems components opaque intended useful transparent wrapper becomes opaque parent imagine see children perhaps simply better solution allaround still including necessary supporting functionality problem idea component needs return one elementnode seems perfectly reasonable jsx structure components dumb wrappers purpose imho seems returning multiple elements blocks useful expectations example get companion future renders element returns nodes must produce array nodes instead think important issue readability imho biggest selling point react everything explicit html looking makes sense cell coming perhaps actually wrong rendering cells knows perhaps actually dynamic depends prop external state many variations problem get harier consider nonhtmldom frontends may explicit expectations another thing consider elements opaque replace able interact individual cells even deduce many even though may accepts guarantee actually interact requires developers compromise making isolated reusable components heaven help decide want reuse bunch components elsewhere underlying implementation issue react nt think accepted requires developers compromise making isolated exactly problem ask component return multiple elements longer isolated substituted component leaking parent hammer nails underlying implementation issue separate issue whether actually done decision nt see one rare usecase convincing argument without considering tradeoffs comes alternative solutions imho nt see problem explicit allows us keep useful expectations performance problem rescue transparent arrayobjectlike type one update independently parent react devs authority nt see convincing argument considering various sideeffects even sure agree presented solution good pattern even supported edit clarify perhaps components may able return multiple elements future obviously beneficial usecases especially context passing children like one show thomasboyt readability maintained", "d": "6/2015"}, {"body": "think need bit coffee respond philosophical side conversation thanks good points syranide implementation side started poking around last night see viable change scope leading spike threw little demo observations implementation side things surprisingly tricky retrofit system expects component node support nodes initially thought try tracking fragments dom operations side generated mutation instructions could stay treat fragments like node could nt think good way add state node countswhich nodes fragments dom state tracking though something like comment fencing prinzhorn noted could work wary anything would require dom lookup considering relative cost idea discarded added field children component could track number root nodes fragment actually contains problem easy enough initial render counting children fragment updating fragment node count subsequent mutations seems trickier still done branch see many dom operations rely accessing parent node element looked internal node id appendmoveremove elements see since updatecomponent cycle responsible passing id along could changed lookup closest parent dom node sounds expensive alternatively may possible internal registry fragment keys real node keys still convinced requiring fragments maintain count root nodes best way though least get demo hacked together quite rapidly quite late night anyone else suggestion implementation feel free chime gt", "d": "6/2015"}, {"body": "thomasboyt iirc main implementation obstacle comes react referencing child nodes work one node suddenly become number nodes may happen without invoking parent may also happen several components deep wrapping mistaken pretty trivial react support multiple root elements long number never changes nt think would especially hard make work react truly proper solution problematic probably involve dropping", "d": "6/2015"}, {"body": "syranide right solution working actually introduces new nodeindex supposed real offset node reminds need go back remove since think unused branch note problematic number root elements changes component needs updated whenever previous sibling component node count changes still need find solution", "d": "6/2015"}, {"body": "also run flexbox issues syranide could please elaborate bit getbunchofcomponents proposed solution new react hard fully get idea define function apply", "d": "6/2015"}, {"body": "landabaso", "d": "6/2015"}, {"body": "thanks help ssorallen works great importance component keys reactjs", "d": "6/2015"}, {"body": "spicyj seems completely backwards way change behavior", "d": "6/2015"}, {"body": "tyrsius could create default react button component always", "d": "6/2015"}, {"body": "way actually override talking making latter nt really changing backwards behavior", "d": "6/2015"}, {"body": "recommending approach react focused matching browser behavior modifying regardless backwards", "d": "6/2015"}, {"body": "seeing enterleave well support transition use case handles one transition timing event", "d": "6/2015"}, {"body": "favour idea believe would side effect fixing one issues ie warnings conditionally use different content client server eg static link home server js navigation client based test probably wo nt use much also like idea able control serialization deserialization components client", "d": "6/2015"}, {"body": "able context fairly easily", "d": "6/2015"}, {"body": "deprecating reacttools amp jsxtransformer closing", "d": "6/2015"}, {"body": "using atm mridgway approach sounds reasonable", "d": "6/2015"}, {"body": "slightly different take issue handle asynchronous loading code chunks produced bundler webpack discussed ticket issue async rendering support initial render appears null relevant chunks nt yet loaded first render pass resulting root dom checksum fail everything falls place quickly afterwards result flicker ui working locally worse field especially chunks downloaded reasonable size say gt ability split big apps multiple chunks important us solved data fetching issue used reactrouter nested routes traversed prior rendering server fetch data dependencies last piece puzzle blocking us moving fully react solution frontend", "d": "6/2015"}, {"body": "anatomic react responsibility job chunk appropriately defer rendering necessary chunks loaded put differently one components dependency external library obviously problem satisify trying use react could nt even tried applies across board feel free implement alternative strategies may suit better say inherently opinionated something react even needs offer best left community", "d": "6/2015"}, {"body": "better keep async stuff outside scope react components example js import react react import layout componentslayout import notfoundpage componentsnotfoundpage import errorpage componentserrorpage const routes gt new promise resolve gt require componentshomepage homepage gt webpack script loader resolve gt new promise resolve gt require componentsaboutpage aboutpage gt webpack script loader resolve const container documentgetelementbyid app async function render try const path windowlocationhashsubstr const route routes path const component route await route reactrender component container catch err reactrender container windowaddeventlistener hashchange gt render render see webpack code splitting reactjs routing scratch reactrouting coming soon", "d": "6/2015"}, {"body": "syranide keep working away nt think binary put using reactrouter may introduce issues mix router component rather sitting outside react environment approach surely still get different dom first render still cause flickerdisappearance content", "d": "6/2015"}, {"body": "approach surely still get different dom first render still cause flickerdisappearance content nt want flicker simply matter waiting chunks depend loaded rendering webpack provides outofthebox ps yes reactrouter whatever else using surely complicates solution still react problem solve", "d": "6/2015"}, {"body": "nt want flicker simply matter waiting chunks depend loaded rendering webpack provides outofthebox requireresolve look understanding synchronous lookup module id nt involve trip server using manage chunk loading looking code think circumnavigate problem making reactrouter think rendering server following standard clientside approach javascript const history new browserhistory typeof historysetup function historysetup routerrun routes historylocation err initialstate transition gt reactrender documentgetelementbyid taapp", "d": "6/2015"}, {"body": "look understanding requireresolve synchronous lookup module id nt involve trip server using requireensure manage chunk loading sorry yes meant callback executed dependencies satisfied matter putting rendersetstate inside", "d": "6/2015"}, {"body": "ok kind thanks replies feels like something needs addressed reactrouter carry discussion sorry wrong place conversation right way go guess ultimate issue linked route currently visited directly tied router reactrouter component based ties render tree without hack left fighting way view tree everything loaded async duplicating routing logic allow relevant chunks loaded top level", "d": "6/2015"}, {"body": "right requireensure way go guess ultimate issue linked route currently visited directly tied router reactrouter component based ties render tree without hack left fighting way view tree everything loaded async duplicating routing logic allow relevant chunks loaded top level intimately familiar reactrouter still imagine simply case gt really nt practical introduce another level indirection map routes async loader write helper call instead defer updating router everything ready pseudocode kind generic seems like overall approach maybe reactrouter provide maybe maybe ideally provided external helper sure", "d": "6/2015"}, {"body": "deprecating reacttools jstransform closing", "d": "6/2015"}, {"body": "tags supported react svg marker refx refy orient", "d": "6/2015"}, {"body": "markers", "d": "6/2015"}, {"body": "svg things", "d": "6/2015"}, {"body": "support animatetransform properties currently ends", "d": "6/2015"}, {"body": "image", "d": "6/2015"}, {"body": "svg supported", "d": "6/2015"}, {"body": "element point via jquery feel like something ie maybe use instead jquery click find another way trigger appropriate event dom element nt looked deeply strongly suspect poke around able want native apis", "d": "6/2015"}, {"body": "spicyj give starting point dive like try first pr react", "d": "6/2015"}, {"body": "gyzerok fix unfortunately nearly impossible write tests react nightmare spent hours trying get working even help people react irc channel success", "d": "6/2015"}, {"body": "also getting bit specifically hrefs anchor tags minimal test case unexpected behavior happy make changes maintainers agree current behavior unexpected enough warrant change", "d": "6/2015"}, {"body": "problem help reproduce wait seconds see div destroyed transitionend event fired", "d": "6/2015"}, {"body": "ran problem new thoughts could nt detect child gets reintroduced reordered called solution child reintroduced could call case reorder assume wo nt fired remove component immediately course would smart enough ignore still get called later", "d": "6/2015"}, {"body": "nt seem working dropin replacement rather anyone luck case", "d": "6/2015"}, {"body": "rely trigger css animations dynamic grid layout set translation programatically worked best far ms longer animation fires component still mounted perform children jerk around instead animating though child order change canceling animation", "d": "6/2015"}, {"body": "timeouttransitiongroup like csstransitiongroup uses transitiongroup css animations triggering hand reason use timeouttransitiongroup", "d": "6/2015"}, {"body": "want comment say pretty tricky going flex box without spans text flow wrapped span longer preserve default flexbox css reset uses even spans break text lines use variable sure get around pretty big weirdness using react", "d": "6/2015"}, {"body": "render full react pages using reactrouter server easy workaround adding doctype returned markup server initially thought might cause invariant client nt seem cause problems sure could prepend doctype string clientside entryrehydrate file", "d": "6/2015"}, {"body": "found hack way insert comments html", "d": "6/2015"}, {"body": "tried inject shim script nt work guess since support closures javascript pageopen url function status status success", "d": "6/2015"}, {"body": "syranide since mentioned webpack use webpack server side code", "d": "6/2015"}, {"body": "another possibility generate typescript interfaces jsx files tool", "d": "6/2015"}, {"body": "think solution allow typescript used reflux", "d": "6/2015"}, {"body": "quantuminformation probably better question reflux folks", "d": "6/2015"}, {"body": "typescript may start supporting jsx per nt plans develop jsx support separately going close issue feel free continue discussing helpful", "d": "6/2015"}, {"body": "anyone annoyed uses babel wrote plugin implement part syntax mentioned", "d": "6/2015"}, {"body": "need way bind events bodydocument react way react batch setstate event handler useful", "d": "6/2015"}, {"body": "use reactaddonsbatchedupdates get functionality", "d": "6/2015"}, {"body": "news range input still broken ie works great edge though", "d": "6/2015"}, {"body": "applied nt work even edge", "d": "6/2015"}, {"body": "hello running issue unclear actually means component works fine throws error bundling simple example idea wrong", "d": "6/2015"}, {"body": "cameronjroe ownerownee relationship specific react components react uses dom created reactcreateclass react terminology help get clear idea hope helps", "d": "6/2015"}, {"body": "mean ca nt use refs dom nodes within component", "d": "6/2015"}, {"body": "nt mean input heavily uses move span nt owner element component render component render method use component ref", "d": "6/2015"}, {"body": "issue code js var dropdownlist require reactwidgetslibdropdownlist var dropdown reactcreateclass render function return dropdown moduleexports dropdown seems build part component fails suggestionsideas missing something", "d": "6/2015"}, {"body": "desmondhume makes sense nt refs example code error originating somewhere else case invoking anywhere result cause error thrown", "d": "6/2015"}, {"body": "syranide right problem seems related issue copy amp paste module instead installing via npm works right nt know going actually", "d": "6/2015"}, {"body": "desmondhume npm probably installed two separate react module requires", "d": "6/2015"}, {"body": "bitshadow following use refs dom nodes using ref different example span render method owner starrating", "d": "6/2015"}, {"body": "well wrappers written specific elements requires user interactions additional functionality test still nt see dom elements handling refs owner figure", "d": "6/2015"}, {"body": "yeah nt see wrappers ideas handling refs", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "stuff works master found issue using custom component react translate classname class ex becomes instead file makes translation", "d": "6/2015"}, {"body": "issue open years chance able use attributes wish jsx general case", "d": "6/2015"}, {"body": "ljharb custom elements ie tags dashes yes landed master tags use case attribute dash might able support jhicken custom elements uses attributes html nodes uses properties different names nt intend change consequence custom elements relying heavily attributes proper way interact dom properties", "d": "6/2015"}, {"body": "dashes see nopin attribute pinterest requires exempt image showing pin dialog nonstandard shame dashes nt something control use jsx without creating custom element", "d": "6/2015"}, {"body": "ljharb could use attribute force react ignore whitelist attribute ignoring also new master think thats really hacky way use attribute would work remember put class element attribute use like sebmarkbage thats bad nt know enough separation react deals attributes vs properties covers really present real solution problem however see api issue think custom components become popular going become really annoying goofy mix class classname attributes jsx say working project makes heavy use custom components may naive question would possible element name attribute exist convert elements html attributes react properties", "d": "6/2015"}, {"body": "jhicken nt know might mean custom component might name legit attribute convert would weird magic work breaks api unlike properties attributes strings apis safely converted additionally notice event listeners wo nt work styles opinion designers web components spec attributes mistake used directly serialized form nt used directly anything serialized html properties take however really custom elements consumed public apis right mostly attributes properties made available typically imperative methods nt translate well react declarative api forced use attributes since thing possible custom elements consistency solution would revert normal html elements apply attributes instead properties intuitive strictly inferior since nt allow us properly model things like vs etc attribute strings come richer data structures richer behavior differences serialized form allows opinion opinion react ember angular teams custom elements web components flawed model composition wo nt treated firstclass either framework many compromises make work flawlessly nt want compromise primary html api support custom elements edge case unfortunately end subpar api recommended solution wrap web components react component provide richer api use refs interact events properties methods part always translate names see fit ljharb would like support nonwhitelist solution quite sure tackle safely right workaround always get element call ofc annoying many times best practice build small reusable components compose need use hack btw address issues react europe talk july", "d": "6/2015"}, {"body": "sebmarkbage ljharb would like support nonwhitelist solution quite sure tackle safely right workaround always get ref element call setattribute nopin ofc annoying many times best practice build small reusable components compose need use hack probably wo nt work case pintrest probably executing client side js instead simply statically analyzing tags attribute", "d": "6/2015"}, {"body": "oh serverside rendering yea sucks maybe pinterest nicer community members use namespace like intended", "d": "6/2015"}, {"body": "oh assumed browser extension adds pin buttons everything", "d": "6/2015"}, {"body": "oh serverside rendering yea sucks maybe pinterest nicer community members use data namespace like intended yeah use case though data attributes also sound wrong would easier something like would viable", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "nice spicyj problem solved figured checked alternatives sick bed also lazy", "d": "6/2015"}, {"body": "sebmarkbage spicyj maybe solving specific instance still painful issue us basically forced horrible hacks workaround lack general attribute support wrote also explained workardounds employ would much like issue resloved maybe least react made configurable users could extend whitelist", "d": "6/2015"}, {"body": "gozala yes understand issue still open", "d": "6/2015"}, {"body": "kyleamathews", "d": "6/2015"}]