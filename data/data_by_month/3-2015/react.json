[{"title": "reacttools jsx ignores x src build dirs", "body": "existing project complex directory structure js files moving one time react components existing build system takes js files structure produces final built files directories take one js file time convert jsx file jsx file changes compiler builds resulting js file rebuilds file js file added tree reproduce assume directory structure within run build sourcejsx file make change sourcejsx file notice builds twice second time js file gets added tree", "num": "3551", "d": "3/2015"}, {"title": "using w x causes multiple rebuilds", "body": "using recompile source output generated appears matching strict enough assume directory structure within run build another terminal open make modifications switch back previous terminal see gets updated rebuild source", "num": "3550", "d": "3/2015"}, {"title": "add warnings incorrect casing event handler properties", "body": "hi react currently warns incorrect casing properties like however nt warn problem event handlers like used html way writing attributes often wrote something like sadly attached event handlers called nt get warning react took quite time find mistake see example focus element try press key", "num": "3548", "d": "3/2015"}, {"title": "close meta tag", "body": "hi also want use react template engine also server side case want valid xml output component code js render return returns closing meta bug", "num": "3546", "d": "3/2015"}, {"title": "generic iterable data reactdomcomponent css styles", "body": "currently react supports regular javascript objects style props using enumerated keys would wonderful could also support generic data css styles eg iterable interface would enable immutablejs clojurescript data structures directly used styles currently necessitates converting generic data regular javascript style objects every styled element every render pretty wasteful general extremely useful able express styles generic data especially persistent immutable data structures order let end user manipulate data application ui eg enduser ui themes serialize data dynamically merge manipulate data needed runtime react native already supports last sort thing merging stylesheets uncertain whether regular react see even better serializability manipulability generic style data could used potential problems suggestion might might slow react reconciliation rendering react native already standard syntax used merging style objects together unless revised eg adding method people use instead may possible also support generic style data react native might create great api mismatch react react native nonetheless think generic style data quite important already using copiously especially ui themes somewhat related", "num": "3542", "d": "3/2015"}, {"title": "nt really think could install ruby npm", "body": "install process bash sites reactnative init jakeproject walk creating new react native project usersjspurlocsitesjakeproject ws install usersjspurlocsitesjakeprojectnodemodulesreactnativenodemodulesws nodegyp rebuild builderrorlog exit cxx target releaseobjtargetbufferutilsrcbufferutilo solinkmodule target releasebufferutilnode solinkmodule target releasebufferutilnode finished cxx target releaseobjtargetvalidationsrcvalidationo solinkmodule target releasevalidationnode solinkmodule target releasevalidationnode finished reactnative nodemodulesreactnative absolutepath stacktraceparser reacttimermixin underscore q debug ms yargs optimist wordwrap minimist workerfarm xtend errno sourcemap amdefine sane watch fbwatchman minimatch walker uglifyjs uglifytobrowserify async yargs sourcemap rebound connect methods fresh cookiesignature pause qs bytes cookie send formidable jstransform esprimafb joi topo isemail hoek moment moduledeps inherits shallowcopy minimist subarg parents readablestream resolve concatstream browserresolve jsonstream detective ws tinycolor options commander nan reacttools commoner nt really think could install ruby npm sites cd jakeproject jakeproject ls nodemodules packagejson jakeproject mean nt really think could install ruby npm", "num": "3541", "d": "3/2015"}, {"title": "allow marking array static", "body": "expected issue already could nt find apologies dupe occasionally useful put elements array within render conditionally building different bits view react issue warning whenever array used nt keys even author knows array literal therefore nt require keys example react warn lack keys even though needed one option would extend accept array use indexes keys", "num": "3538", "d": "3/2015"}, {"title": "wrong function", "body": "page var avatar reactcreateclass render function return var profilepic reactcreateclass render function return var profilelink reactcreateclass render function return reactrender documentgetelementbyid example last function reactrender wrong reactrendercomponent", "num": "3536", "d": "3/2015"}, {"title": "contexts seem break multiple react instances per package", "body": "realise contexts basically undocumented unsupported shaky territory api wise usecase multiple node packages react installed package provides component two using react instance nodemodules folder finding using contexts get message undefinedbar try pass contexts elements consolidate components one package everything works expected keep separate packages export factory takes react instance function everything works expected browserify probably conveniently gets around dedupe identical versions running server unfortunately code sample everything package working fine need run npm install project root directory run code sample separate package instance react need npm install project root directory nodemodulessubcomponent three questions expected behaviour contexts depend react instance seen people running problems multiple react instances issues something avoiding something avoiding expected remain way shortmediumlong term forever alternatively using contexts incorrectly thanks time wonderful library", "num": "3532", "d": "3/2015"}, {"title": "add ability find dom component prop value reacttestutils", "body": "order make selectors durable within selenium tests generally add attributes element needs selected developers free change classes ids needed know touch move refactoring attributes would nice allow unit tests use attribute select elements integrationselenium tests use issue currently way reacttestutils test helper object contains bunch things help testing react code two methods follows javascript scryrendereddomcomponentswithprop function scryrendereddomcomponentswithprop root propname propvalue return reacttestutilsfindallinrenderedtree root function inst var instancepropvalue instprops propname findrendereddomcomponentwithprop function findrendereddomcomponentwithprop root propname propvalue var thisscryrendereddomcomponentswithprop root propname propvalue seems like useful feature wondering enough interest type functionality create pr add directly reacttestutils", "num": "3528", "d": "3/2015"}, {"title": "invariant violation trying release instance pool different type", "body": "currently working rendering simple react application server application renders content fine using method load testing seeing error occasional occur tracked error message pooledclassjs file struggling understand pool error would thrown anybody good description pools work could read even better hints could causing", "num": "3526", "d": "3/2015"}, {"title": "properly sugared way update state child", "body": "nonhacky way update children state parent sfme best way ask support let know nt know", "num": "3524", "d": "3/2015"}, {"title": "integration knockout", "body": "want use react v use knockout integration thanks", "num": "3522", "d": "3/2015"}, {"title": "way enforce components", "body": "example throw warning pass prop component defined using", "num": "3514", "d": "3/2015"}, {"title": "module build failed help", "body": "please help learning reactjs use webpack watch jsx files output line files navbarjsx jsx var navbar reactcreateclass render function return brand home contact moduleexports navbar appjsx jsx var navbar require navbarjsx var app reactcreateclass render function return bootstrap starter template use document way quickly start new project get text mostly barebones html document moduleexports app missing", "num": "3512", "d": "3/2015"}, {"title": "proptypes hook add optional", "body": "would neat declarations could take helptext would go long ways help others understand prop used component low priority food thought", "num": "3510", "d": "3/2015"}, {"title": "please return us autobinding classes", "body": "hello guys react really amazing think small inconvenience classes lost pretty functionality autobinding event callbacks owner struggle functionality every solution react recommends awful really need bind owner almost every event callback magic written react blog please return feature next release thank", "num": "3509", "d": "3/2015"}, {"title": "add comment frontpage markdown example xss", "body": "since copypasting code makes easy people xss lets add comment", "num": "3501", "d": "3/2015"}, {"title": "testutils calling render document test state change", "body": "component testing trying figure test component reacting properly change state state changes based event video element canplay event simulate support triggering event far tell next best thing thought anyway would call method triggered event method jest anyway nt available call tried calling setstate test like var react require reactaddons var showsdetailheader require routesshowscomponentsshowsdetailheaderjsx var mockdata require mockepisodedetaildata mockdatadatashowassetswebherovideourl class times required component rerendered rendering document", "num": "3500", "d": "3/2015"}, {"title": "reacttransitiongroup setstate handledoneleaving problematic", "body": "hi implementing custom animation svg found problem code handledoneleaving function reacttransitiongroup javascript handledoneleaving function key var component thisrefs key many children remove last one actually removed reason setstate updating immediately children list assignment thisstatechildren newchildren still referencing full list next call fact last remove effective jsfiddle example initlal view green circles clicking change button new circles must added previous must removed one removed", "num": "3497", "d": "3/2015"}, {"title": "escaping", "body": "according react uses replace etc behavior sane awesome problem also happens inside", "num": "3496", "d": "3/2015"}, {"title": "error find module envify browserify", "body": "sure react issue browserify issue packagejson js name frontend version description main indexjs scripts test echo error test specified amp amp exit browserify transform browserifyshim browser browserifyshim author license isc dependencies jquery lodash url qs react gulpfile js var browserify require browserify gulp require gulp source require vinylsourcestream uglify require gulpuglify sourcemaps require gulpsourcemaps reactify require reactify watchify require watchify neat require nodeneat lr require gulplivereload wait require gulpwait sass require gulpsass bundler var bundler browserify entries dirname frontendjsindexjs transform reactify debug true cache packagecache fullpaths true watcher watchify bundler gulptask sass function gulpsrc dirname frontendsassappscss pipe sourcemapsinit pipe sass includepaths neatincludepaths style compressed pipe sourcemapswrite pipe gulpdest dirname public pipe lr gulptask realoadviews function gulpsrc pipe wait pipe lr gulptask js function watcher bundle pipe source bundlejs pipe gulpdest dirname publicjs pipe lr gulptask watch function lrlisten", "num": "3495", "d": "3/2015"}, {"title": "support asynchronous wrappers transaction", "body": "hello reading reactjs trying extend one thing noticed although wrappers transaction guarantee executed pre post performing method seems waiting mechanism asynchronous wrapper functions apis asynchronous may fail keep order correctly especially previous wrapper still waiting asynchronous result second one would start transactionjs looks like plain function call waiting code anywhere current reactjs much transaction instances problem may serious however nature transaction extendable standalone component bind dom amp existing use cases think general enough deal possible cases design principle new dom apis possible sorry fired duplicated issue searched issues found similar cases duplicated please close", "num": "3493", "d": "3/2015"}, {"title": "reacttransitiongroup fails given factory component prop", "body": "passing factory causes typeerror undefined object evaluating typeprototypemountcomponent reference reacttransitiongroup docs state note prior using dom components component prop needed reference reactdom since component simply passed reactcreateelement must string composite components must pass factory test case test code javascript var compositeclass reactcreateclass render function return null var compositefactory reactcreatefactory compositeclass var reacttransitiongroup reactcreatefactory reactaddonstransitiongroup var bugclass reactcreateclass render function return reacttransitiongroup component compositefactory var bugfactory reactcreatefactory bugclass reactrender bugfactory documentbody update looks like docs might wrong passing class rather factory seems work", "num": "3492", "d": "3/2015"}, {"title": "remove classsetcx entirely", "body": "deprecated remove ship would like honors chenglou", "num": "3489", "d": "3/2015"}, {"title": "catching nulls undefineds createclass", "body": "right something like going pretty much uncaught causes terrible breakage similarly following work undef mixin actually used mixins issue suspect something createclass trivially test accepting component definition check extant check every element resolves object rather string etc bad element situation might also doable inside createclass checking elements used inside element fact exist letting createclass call succeed suspect less sure mixin check", "num": "3486", "d": "3/2015"}, {"title": "changing placeholder causes onchange ie", "body": "check tested likely related", "num": "3484", "d": "3/2015"}, {"title": "rendered reactelement reactelement anymore", "body": "according tests reactelement gets rendered recognised reactelement anymore come test rendered element actually reactelement without getting hacky", "num": "3479", "d": "3/2015"}, {"title": "confusing error message passing non string non component class reactcreateelement", "body": "following code produces deep react", "num": "3478", "d": "3/2015"}, {"title": "reactserverrenderingrendertostring fails jdk", "body": "trying use react serverside java project unfortunately tied jdk project ca nt use nashorn since jdk javascriptengine thought good enough give shot everything fine tried render component one children whenever component one children react renders randomly simple test case java import javaiofilereader import javaxscriptscriptengine import javaxscriptscriptenginemanager public class test private scriptengine se given example reactrendertostring generates following markup spent time yesterday today trying figure narrowed things reach reason children called order appreciate help help ideas could causing", "num": "3476", "d": "3/2015"}, {"title": "read property firstchild undefined", "body": "hi experimenting hit problem react reactrouter first navigation using router get following error ialready read thread referenced react issues checked external dependencies one version react added project added main project additional dependency downloading react also checked use require react seems fine well would appreciate help issue", "num": "3474", "d": "3/2015"}, {"title": "much xss vulnerability protection react responsible", "body": "security hack mentions react ultimately serverside bug bug react issue figuring something mitigate issues json parsing bug serverside issue isvalidelement react designed work plain objects input fact even getting rid way verify allow json object imo problem verification string values sanitized inserted dom except css styles known wontfix issue earlier versions used checks nt work well multiple reacts makes difficult optimize inline objects much faster couples jsx permanently react would like avoid dangerouslysetinnerhtml one possible solution disable feature require used imperatively makes worse performance insertion time however nt believe bad thing insert arbitrary html tags certainly easiest way gain access xss though also insert arbitrary web components could expose data render form elements potentially pass data else ultimately issue seems like valid use case userdata compromised becomes dangerous react responsible protecting arbitrary json children", "num": "3473", "d": "3/2015"}, {"title": "display array", "body": "simple problem ca nt find solution displaying array elements hava component render something like type return nt work wrapping good breaking table structure lots warnings array elements nt want wrap display", "num": "3470", "d": "3/2015"}, {"title": "immutable data differences production development builds possible bug", "body": "noticing strange behavior development build vs production build please see bin included two links react library productiondevelopment production build works expected renders immutableset however development build breaks returns error also another strange thing development build set works long size try removing elements array size render fine development production", "num": "3469", "d": "3/2015"}, {"title": "jsx render wo nt allow webkitdirectory directory used", "body": "tried use webkitdirectory directory input dom found impossible add two label input dom anyway solve problem", "num": "3468", "d": "3/2015"}, {"title": "uncaught typeerror read property mountcomponent undefined", "body": "upgrading getting turns great way telling use jsx hand server side outside jsx seems required use otherwise get pretty confusing", "num": "3466", "d": "3/2015"}, {"title": "incorrect blame checksum mismatch due browsers unescaping html", "body": "react uses escape amongst things browsers seem unescape back potentially causing incorrect blame case checksum mismatches demo console reproducible latest stable releases chrome firefox safari os x sure would good way fix reescaping comparing calling would likely escape unrelated characters well unescaping comparing would produce exact diff unless keep track unescapes performed comparing revert producing diff string sounds like going trouble might needed", "num": "3465", "d": "3/2015"}, {"title": "detail communication documentation best practices grandparent lt gt grandchild", "body": "communication two components nt parentchild relationship set global event system far really enjoyed react conducive modularize components however modularize components gets harder communicate global event system nt scale essentially couples components nt coupled simple example faceted navigation sidebar containing two subviews filters search bar list things sibebarview filters search input filter button list view essence event stream search input update list advice seems like say create singleton eventemitter search input searchinputjs eeemit search update inputvalue sidebarjs eeon search update searchhandler see specific event sidebarview know also let say global search input time seems like increasingly specific event names feeling flux supposed alleviate problem somehow way give detail andor point people right direction seems like common use case", "num": "3461", "d": "3/2015"}, {"title": "could", "body": "following jsx fragment guarantee never otherwise throws error although construction correct instead check", "num": "3460", "d": "3/2015"}, {"title": "add support rdfa attributes", "body": "add support rdfa attributes resource property etc see full list", "num": "3459", "d": "3/2015"}, {"title": "event handler checkbox throws error nodewebkit", "body": "trouble domexceptionerror clicking input element type checkbox react used nodewebkit environment testing nodewebkit react nothing tricky browser context use require seems affect input elements type checkbox file code runs fine browser thoughts might failing nodewebkit test project includes node webkit version test project without node webkit binaries console output clicking checkbox download react devtools better development experience change event syntheticevent dispatchconfig object dispatchmarker nativeevent mouseevent type click target dispatchids null dispatchlisteners null bubbles null cancelable null currenttarget null defaultprevented null dispatchconfig null dispatchmarker null eventphase null isdefaultprevented function ispropagationstopped function istrusted null nativeevent null target null timestamp null type null proto syntheticevent error domexception message attempt made use object longer usable name invalidstateerror code stack error attempt made use object file c indexsizeerr code message attempt made use object longer usable name invalidstateerror stack error attempt html mainjs js require nwgui windowget showdevtools handlechange function evt try consolelog change event evt catch e consolelog error e reactrender reactcreateelement input type checkbox onchange handlechange documentgetelementbyid app", "num": "3458", "d": "3/2015"}, {"title": "html string thisstate occasionally escaped", "body": "using using react togather small rich text editor named pen code coffee getinitialstate gt text propstext loadpen gt pen new pen editor refstextgetdomnode textarea list bold stay false pensetcontent propstext refstextgetdomnode focus penon change content gt onchange contenttrim return pen onchange content gt consolelog content yes found html every time setstate text content timedelay gt consolelog statetext lt somtimes statetext escaled like string changed another statetext content currently fix rewrting property nt know debug react find really happening react anything like escaping html state property internally", "num": "3457", "d": "3/2015"}, {"title": "htmltojsx defined html jsx converter page", "body": "edits made last week page maybe broken accidentally", "num": "3455", "d": "3/2015"}, {"title": "testutilsrenderintodocument difference render returns nullfalse", "body": "testutilsrenderintodocument different behavior react component render method returns false null var mycomponent testutilsrenderintodocument var noscript testutilsfindrendereddomcomponentwithtag mycomponent noscript expect noscript tobetruthy fails react error find exactly one match tag noscript works something wrong repo test case switch version packagejson", "num": "3453", "d": "3/2015"}, {"title": "trying check whether button click event calls function jsx", "body": "js unit test case loginjsx jestdontmock srcjspagesloginjsx describe login function invoke btnloginclick click event function var react require reactaddons var logincontrol require srcjspagesloginjsx loginjsx js jsx reactdom use strict var react require react var fluxiblemixin require fluxible mixin var loginstore require storesloginstorejs var loginactions require actionsloginactionsjs var login reactcreateclass mixins fluxiblemixin statics storelisteners loginstore moduleexports login", "num": "3452", "d": "3/2015"}, {"title": "wrong context warning warning ownerbased parentbased contexts differ", "body": "imo warning following code wrong code define root component context value root component show two different children dependent state variable root switched one child another warning shown example jsfiddle run tested react js var root reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo context value getinitialstate function return foo false render function thisstatefoo return else settimeout function thissetstate foo true bind return return loading var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo reactrender documentbody", "num": "3451", "d": "3/2015"}, {"title": "questions coffeescript static property demo beta release post", "body": "somehow fulltime coffeescript programmer found beta release post coffee div reactcreatefactory div class counter extends reactcomponent proptypes initialcount reactproptypesnumber defaultprops initialcount constructor props gt super props state count propsinitialcount tick gt setstate count statecount render gt div onclick tick clicks statecount exciting got questions using static properties becoming static properties property defined constructor even clear demo found updated docs would like talk properties influenced syntax recommend fat arrow", "num": "3450", "d": "3/2015"}, {"title": "making render pure", "body": "saw mixing implemented render something like user implement function seems like nice hack wondering nt default way react thoughts", "num": "3449", "d": "3/2015"}, {"title": "make shouldcomponentupdate accept boolean value", "body": "jquery disable event like similarly want define immutable component write possible make shouldcomponentupdate accept boolean value", "num": "3448", "d": "3/2015"}, {"title": "checkbox behavior inexplicable preventdefault used", "body": "var react require react backbone require backbone flux require flux dispatcher new fluxdispatcher var storelisteningmixin componentdidmount function thispropsstore amp amp thisonstorechanged thispropsstoreon change emit thisonstorechanged componentwillunmount function thispropsstore amp amp thisonstorechanged thispropsstoreoff change emit thisonstorechanged var dispatchingmixin componentwillmount function thisdispatch function payload dispatcherdispatch payload function register store storedispatcher dispatcher storedispatchid dispatcherregister storeondispatchbind store function unregister store delete storedispatcher dispatcherunregister storedispatchid var store backbonemodelextend checked false false ondispatch function payload payloadactiontype ha consolelog dispatch received checkbox payloadind thischecked payloadind thischecked payloadind thistrigger change emit var store new store var checkboxa reactcreateclass mixins dispatchingmixin onchange function e consolelog dispatching epreventdefault makes checkbox behave weirdly removed things normal thisdispatch actiontype ha ind thispropsind render function var checked thispropsstorechecked thispropsind consolelog checkbox rendering checked checked return thispropsind var checkboxalist reactcreateclass mixins storelisteningmixin onstorechanged function thisforceupdate render function return register store reactrender documentgetelementbyid renderarea notice clicking checkbox make react render according checked state clicking checkbox causes checkbox rerender correctly theory preventdefault happened component dispatching nt affect rendering case component nt rendered incorrectly", "num": "3446", "d": "3/2015"}, {"title": "debug facebook canvas apps", "body": "possible debug canvas iframe apps", "num": "3444", "d": "3/2015"}, {"title": "allow quoteattrname always quote names", "body": "currently trying use react jsx transformer google closure run advanced optimisations problem attributes renamed closure compiler failing run time example transformed compiled preposed solution allow quoteattrname always quote names config param would mean closure compiler would leave config object alone anybody thoughts note compiled option correct compiler renamed react component", "num": "3437", "d": "3/2015"}, {"title": "call perf method setstate callback", "body": "many case suppose perf used like however printed callback called computed sample think behavior little confusing ideas ideas accepts callback callback called computed treated diff reactdefaultperfjs js start function reactdefaultperfinjected reactperfinjectioninjectmeasure reactdefaultperfmeasure stop function reactperfenablemeasure false reactdefaultperfallmeasurements reactdefaultperfallmeasurementslength totaltime performancenow reactdefaultperfstarttime add documentation computed need call perf method next event loop case callback thank", "num": "3436", "d": "3/2015"}, {"title": "document limitations props passed reactcreateelement", "body": "please document props object passed createelement get passed target component surprising method defined prototype object passed createelement available thisprops target component read source saw", "num": "3435", "d": "3/2015"}, {"title": "update cloning reactelement documentation include info reactcloneelement", "body": "documentation cloning reactelement uses reactclonewithprops recommends following method preserving suggest including reactcloneelement instead recommending add object", "num": "3432", "d": "3/2015"}, {"title": "changing propsstyle null object fails react", "body": "hello breaking change upgrading component uses inline styles one state uses inline styles need set style null react worked fine fails update inline styles example component isolates issue jsx reactcreateclass getinitialstate function return isred false togglered function thissetstate isred thisstateisred componentdidmount function setinterval thistogglered render function", "num": "3424", "d": "3/2015"}, {"title": "bug find scry methods testutils react", "body": "tried update react caused several unit tests project fail use react render html server side includes basic html structure like elements unit tests dealing elements failing react worked fine minimal example js use strict var react require react reactaddons require reactaddons testutils reactaddonsaddonstestutils jsdom require jsdom globaldocument jsdomjsdom globalwindow documentdefaultview globalnavigator windownavigator var foo reactcreateclass displayname foo var foo testutilsrenderintodocument reactcreateelement foo null var titleelement testutilsfindrendereddomcomponentwithtag foo title consolelog titleelementgetdomnode textcontent running react correctly logs text content title running react throws typeerror", "num": "3421", "d": "3/2015"}, {"title": "tspan created wrong namespace", "body": "demo howering right point create exactly left one namespace second tspan second group ends xhtml svg console output mouse enter exit real output enter means second tspan namespace uri", "num": "3420", "d": "3/2015"}, {"title": "replacestate throws away functions", "body": "still learning react possible misunderstanding something trying use react immutablejs hit stumbling block upgrading react wiki page immutablejs repository explains use immutable react state provides following example transpiled js use strict var react require react var immutable require immutable var component reactcreateclass getinitialstate function return immutablemap handleclick function thisreplacestate thisstateupdate count function v return v render function return reactrender documentbody works great receive following error clicking div putting breakpoint error inspecting thisstate debugger reveals methods thisstate disappeared expected behavior", "num": "3418", "d": "3/2015"}, {"title": "docs recommendations ismounted alternative", "body": "docs give use case mention available classes nt explicitly call deprecated would useful clarified recommended alternative uses existing code dealing case component gets unmounted timeout setup animation etc component mounted expires", "num": "3417", "d": "3/2015"}, {"title": "render multiple components without wrapping element", "body": "nt found duplicate issue post valid use case like share building framework storytelling based react every single element positioned fixed written custom layout engine need full control everything entry level structure looks something like renders actual items story text images videos etc renders ui elements common every story example controling volume audiovideo items render structure given would result html since everything positioned fixed work ui layer covers everything making unusable eg ca nt click videos currently forced following method html works ugly lose separation nt want component know every ui component sth like virtual component renders children without wrapper element would solve problem could return component know rare usecase rather talented reaching edge cases every framework touch funny writing things sometimes magically makes brain useful stuff found another workaround using ui layer ui components hack nothing", "num": "3415", "d": "3/2015"}, {"title": "pubdate attribute", "body": "hi im trying render time element pubdate boolean attribute react keeps ignoring wrong maybe bug react", "num": "3411", "d": "3/2015"}, {"title": "incorrect update style attribute style prop transitions object null object", "body": "attribute dom node incorrectly updated corresponding props key transitions object null object series updates brief investigation appears happening thispreviousstylecopy cleared attribute removed props third render example react compares value first render value third render looking unsure whether style copy described still needed js var jsdom require jsdom var react require react var app reactcreatefactory reactcreateclass render function var style thispropsuseredtext color red null return reactdomdiv style style test jsdomenv html done function errors window globalwindow window globaldocument windowdocument", "num": "3409", "d": "3/2015"}, {"title": "double rendermisreport instance count", "body": "using seeing incorrect counts number instances elements render prints expect sure problem reporting problem actual rendering result measuring render notice wasted time almost total time listed", "num": "3407", "d": "3/2015"}, {"title": "performance regression dev", "body": "trying debug performance locally seeing really poor performance using fairly small dataset wrote quick benchmark looks like around speed prod slower dev benchmark relevant screenshot", "num": "3406", "d": "3/2015"}, {"title": "parentbased context fails component updates child", "body": "seems component implementing updated render different toplevel child react nt call updated component parentbased context new child effectively get context grandparent instead one nt seem break anything assume react still prioritizes ownerbased context works fine leads contexts differ warning fiddle click show foo see warning console wrapping render output static element warning appear familiar source code worth warning goes away replace line", "num": "3404", "d": "3/2015"}, {"title": "jsx illegal import declaration", "body": "hi try new react got error illegal import declaration right react tried set options harmony true false nt matter code javascript import foo pathtofilejs var view reactcreateclass definition solution thanks", "num": "3401", "d": "3/2015"}, {"title": "components classes", "body": "everybody really wants support classes react components objectcreate", "num": "3400", "d": "3/2015"}, {"title": "incorrect unable reuse markup warning message", "body": "react improved warning message fails reuse server rendered markup shows exact incorrect part shows wrong part text nodes containing htmlescaped chars single quotes double quotes etc somewhere incorrect part example react shows message part ok problematic markup actually renders differently client server located place dom remove text rendered markup react shows correct warning message points real problematic place", "num": "3399", "d": "3/2015"}, {"title": "implement sideways data loading", "body": "firstclass api sideways data loading stateless although potentially memoized data global storenetworkresource potentially using propsstate input js type recordofobservables key string observable class foo observe recordofobservables return mycontent xhr thispropsurl render var mycontent string thisdatamycontent return mycontent observe executes componentwillmountcomponentwillupdate render keyvalue record subscribe observable value allow onnext synchronously invoked subscribe set otherwise leave undefined initial render maybe set null render proceeds usual every time onnext gets invoked schedule new thisdata key effectively triggers forcedupdate component change observe reexecuted componentwillupdate render componentdidupdate props state changed ie update recieveprops setstate observe reexecuted reconciliation point loop new record subscribe new observables unsubscribe previous observables ordering important since allows provider data reference counting cache ie cache data long nobody listens unsubscribed immediately reference count would go zero subscribe data component unmounted automatically unsubscribe active subscriptions new subscription nt immediately call onnext keep using previous value example changes subscribing new url mycontent keep showing content previous url next url fully loaded semantics tag seen confusing lead inconsistencies fairly sane default easier make show spinner would opposite default best practice might immediately send null value nt data cached another alternative observable provide url id content result js class foo observe return user loaduser thispropsuserid render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid use rxjs contract observable since common use allows synchronous execution jhusain proposal common use switch contract instead add lifecycle hooks respond events necessary note concept allows sideways data behave like behaviors like props means nt overload notion state things allows optimizations throwing away data resubscribe later restorable", "num": "3398", "d": "3/2015"}, {"title": "checkandwarnformutatedprops fails", "body": "error make addons reactfundationapp fail cause related property originalprops exist use dom element div p nt know origianl cause solved changing", "num": "3396", "d": "3/2015"}, {"title": "backwardscompatible form attributes", "body": "would good able set htmlstandard action target form element basic testing research nt currently possible users js disabled would allow truly isomorphic approach using libraries like fluxible basically app would use isserver flag render form necessary html attributes server app bootstrapped client isclient flag could render form xhr actions attached html attributes removed realize firstworld users likely js enabled however thirdworld users would benefit able js turned cut bandwidth used since likely every mb counts", "num": "3393", "d": "3/2015"}, {"title": "use parentcontext ownercontext undefined", "body": "hi library author trying migrate call reactwithcontext outside react around toplevel layout component seems special case parent owner guess parent toplevel component deprecated trying replace toplevel wrapper component var childcontextprovider reactcreatefactory reactcreateclass displayname childcontextprovider childcontexttypes function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode renderwithcontext component node reactcontext work make work use function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode reactwithcontext reactcontext function renderwithcontext component node reactcontext bind weird following barely providing owner work function renderwithcontext component domnode context reactwithcontext context function var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode renderwithcontext component node reactcontext summary seems little problem parent owner parent provided owner provided context accessible still uses owner app complains lot warning owner undefined vs parent defined parent provided owner provided context accessible app works fine app complains lot warning owner defined vs parent undefined provided app works deprecation warning case ca nt get rid warnings forced keep using deprecated feature best case providing owner context parent context leads keeping code like function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode reactwithcontext reactcontext function renderwithcontext component node reactcontext bind think maybe owner context never used whole app maybe react could use parent context instead owner context", "num": "3392", "d": "3/2015"}, {"title": "tutorial example tries post json file", "body": "go tutorial great btw got right end realised method tries post form data file understand realworld would sent sort restful service newcomers might wonder working realise could go editing tutorial figured might better coming people wrote", "num": "3391", "d": "3/2015"}, {"title": "componentwillreceiveprops called passing data context", "body": "getting strange issue called rendering nt second argument previous props okay contain one prop passed first argument new props fact react context using tried migrate newer api wrapper problem persisted nt change prop nt pass react context instead props", "num": "3390", "d": "3/2015"}, {"title": "pertstart leads uncaught typeerror read property counts undefined", "body": "wanted see pages performing looked perf tool added perf tool componentwillupdate componentdidupdate main component assume right place put see documentation anywhere use perf within reactjs code gives error uncaught typeerror read property counts undefined code looks like put console log code never gets componentdidupdate method error happening bug use perf incorrectly", "num": "3389", "d": "3/2015"}, {"title": "read property mountcomponent undefined upgrading", "body": "upgrading react get rendering relevant code undefined argument someone suggest cause error", "num": "3388", "d": "3/2015"}, {"title": "testutilsfindrendered seems using deprecated getdomnode", "body": "updated latest things jest tests constantly warning note using jest due node versioning issues sure version referencing old react using provided one nodemodules", "num": "3387", "d": "3/2015"}, {"title": "replace parts string component", "body": "code obviously working would result string mixed objects bad know add react components inside string want highlight parts string react component tough case crack guess", "num": "3386", "d": "3/2015"}, {"title": "jsxorphanedbracketstransformer honor spread operator", "body": "run following example transformer throws exception js var mymessage require reactmymessage var hellomessage reactcreateclass render function var mypropobj thispropsmypropobj moduleexports hellomessage exception jsxorphanedbracketstransformer foojsx throw e error parse error line unexpected token usersakshaypfoojsx throwerror throwunexpected parsexjsidentifier parsexjsattribute parsexjsopeningelement parsexjselement", "num": "3382", "d": "3/2015"}, {"title": "reactaddonscreatefragment javascript key order guaranteed", "body": "createfragment docs says order object keys used determine order rendered children javascript order keys object guarunteed implementations happen maintain order nt mean relied upon note potential future api jsx would definitely way avoid problem way would change api accept cumbersome strictly correct array objects", "num": "3380", "d": "3/2015"}, {"title": "jsx illegal export declaration", "body": "export syntax used work fine jsx harmony flag turned seems throw error sample code jsx export default var hellomessage reactcreateclass render function return hello thispropsname reactrender mountnode", "num": "3379", "d": "3/2015"}, {"title": "jsxtransformer incorrectly processes comment lines trailing space", "body": "run following code jsxtransformer outputs following obviously completely broken remove extra space end comment line everything okay", "num": "3378", "d": "3/2015"}, {"title": "setting removing focus empty input field placeholder triggers change ie", "body": "see example code setting removing focus empty field text event triggered ie tested older versions trigger browsers current workaround test last passed input returned act different would nice react would send changeevent first place", "num": "3377", "d": "3/2015"}, {"title": "update getting started fiddles", "body": "js fiddles gettingstarted using old syntax must js class hello extends reactcomponent render return hello thispropsname reactrender documentgetelementbyid container nonjsx version well", "num": "3375", "d": "3/2015"}, {"title": "unexpected reserved word without", "body": "works fine fails former one later one using jsx missing something", "num": "3374", "d": "3/2015"}, {"title": "react render script tags", "body": "prolem render script tag example click link page new render page b inluce demojs file demojs consolelog hello world open google devtools nt see happen erros", "num": "3373", "d": "3/2015"}, {"title": "shallowequal buggy", "body": "per syranide comments shallowequal still couple issues instance per spicyj probably shortcircuit either input type object values equal", "num": "3369", "d": "3/2015"}, {"title": "children void elements throw instead warn", "body": "released react earlier one cares absolutely nt anyway mostly reminder feel free take", "num": "3367", "d": "3/2015"}, {"title": "unable render component name string", "body": "seem unable render components using name strings wanted able dynamically generate component name strings existing corresponding components rendered fiddle instead referencing existing component rendering react rendering custom element tag lower case basic code failing main component rendered var parent reactcreateclass dynamic subcomponent render var child reactcreateclass reactrender documentbody", "num": "3365", "d": "3/2015"}, {"title": "onsubmit nt work dangerouslysetinnerhtml onclick", "body": "following jsfiddle demonstrates issue clicking submit first form alerts however second form alerts submit bubbled form embedded via code posterity var formtest reactcreateclass onsubmit function e alert submit epreventdefault onclick function e alert click render function return reactrender documentbody", "num": "3359", "d": "3/2015"}, {"title": "document way update defaultvalue", "body": "seems lot misunderstanding react community works often expected element changed reflected ui case since set component first rendered people complain usually suggested use instead often seen unpractical form many input fields since fields need listener editable actually true put listener wrapping element generates lot warnings feel none solutions practical easy solution set attribute wrapping element form contains elements fields changed along key change reflected ui think good solution common ui case list entities want able edit click one form shows entity value populated click another element want form updated entity data perhaps could documented order avoid future confusion even better solution", "num": "3357", "d": "3/2015"}, {"title": "ship", "body": "x make sure examples work zpao x docs x x zpao x sebmarkbage x class use x notes component instance methods nt work classes zpao x note elementtype documentation mentioned change blog skipping x update refs documentation callback style actually recommending yet jsfb x update setstate docs function style jsfb x spicyj x deprecation x shallow testing fbme updates zpao x x x x x x x ship blog npm bower etc zpao update reacttutorial zpao x ship jsx upgrade tool zpao x update reactsource gem zpao x update reactrails gem zpao x ship react art zpao x update readme etc master x update fiddles", "num": "3352", "d": "3/2015"}, {"title": "nested arrays without key nt warn anymore", "body": "used warn right maybe", "num": "3348", "d": "3/2015"}, {"title": "jsx spread attributes nt work", "body": "attempted use jsx spread attributes avail javascript render const classnames attrs thisprops nt work gives following error", "num": "3346", "d": "3/2015"}, {"title": "invoking rendertostaticmarkup render causes refs break", "body": "demonstrated open error console see js var bug reactcreateclass render function var html reactrendertostaticmarkup reactdomimg return reactdomdiv ref ref html bug reactcreatefactory bug reactrender bug documentbody", "num": "3344", "d": "3/2015"}, {"title": "state object property change triggered", "body": "hi might stupid question could nt find good solution array objects state list component every object mapped item component item mouse trigger something parent list updating rest state objects new property expect rest item components updated happening force update react issue something wrong maybe thanks", "num": "3342", "d": "3/2015"}, {"title": "context updated component mounted reactrender", "body": "tough explain created fiddle demonstrate layerportalwhatever calling pattern renders children component new tree body via would expect context also passed taken special care make sure child passed created correct owner works fine context passed never updated point inspect child element passed correct never updated instance sure perhaps wrong expectation illustration updated simpler example", "num": "3340", "d": "3/2015"}, {"title": "documentation issue component specs displayname references nonexistent source information", "body": "last sentence displayname string used debugging messages jsx sets value automatically see jsx depth link seemingly nonexistent anchor jsx depth page would good link somewhere actually documenting autosetting displayname sure even still exists nt", "num": "3338", "d": "3/2015"}, {"title": "optimize procedure render component body", "body": "create modal create element manually remove element longer used updated mar add timeout looks better moment coffee code mostly done react require reactaddons util require utilutil time require utiltime transition reactcreatefactory require moduletransition reactdom moduleexports needs implement renderlayer componentwillunmount return unless target unrenderlayer documentbodyremovechild target componentdidupdate renderlayer renderlayer target renderchildren return propsshow target return show found target target documentcreateelement div documentbodyappendchild target tree transition transitionname fade entertimeout leavetimeout reactrender tree target renderchildren tree transition transitionname fade entertimeout leavetimeout propsshow renderlayer reactrender tree target unrenderlayer reactunmountcomponentatnode target bad part operations optimized really slow plenty components ready show modals react components hierarchy makes difficult people create menus modals appended hand add feature react case slow", "num": "3335", "d": "3/2015"}, {"title": "testutilsisdomcomponent uses deprecated getdomnode", "body": "testutilsisdomcomponent uses deprecated elementgetdomnode resulting console warnings running tests case running unit tests results warnings drowning output tests", "num": "3329", "d": "3/2015"}, {"title": "node proptype validation hits error null values", "body": "js var foo reactcreateclass proptypes child reactproptypesnode render function return parent thispropschild var demo reactcreateclass render function return reactrender documentbody warning failed proptype fragment null check render method warning failed proptype read property reactfragment null check render method chrome cc kassens", "num": "3328", "d": "3/2015"}, {"title": "input using linkedstatemixin autofocus sets cursor beginning input", "body": "hi using initial value coming problem use cursor shows front field rather end existing text component looks like javascript var controlledinput reactcreateclass mixins reactaddonslinkedstatemixin render function return getinitialstate function return message thispropsmessage componentwillreceiveprops function nextprops nextpropsmessage thispropsmessage thissetstate message nextpropsmessage", "num": "3325", "d": "3/2015"}, {"title": "encapsulate styles", "body": "hi converting big project written polymer react biggest problem face lack encapsulated styling would like encapsulate sass files encapsulated styles among components entire react web site documentation almost mentioning styles furthermore chrome devtools react plugin component properties except style like devtools regular dom really like react going approach problem", "num": "3324", "d": "3/2015"}, {"title": "react developer tools add perf buttons", "body": "ca nt find repo react developer tools assume put open source repo somewhere probably put together pull request would really nice addon buttons would call available", "num": "3322", "d": "3/2015"}, {"title": "component longer runs installed node module", "body": "reusable component decided put github weird thing although exact file works flawlessly part original project javascript import chart chart render return working pull node package javascript import chart reactchartisttooltip render return error given render sure understand intended behavior", "num": "3320", "d": "3/2015"}, {"title": "error render dom", "body": "hi react team build sample app hibird reactjs cordova use thrid party libary set static data error app run browser android devices set data via ajax call error one item see browser instead nt touch devices think render data via ajax error", "num": "3318", "d": "3/2015"}, {"title": "calling setstate without getinitialstate throws using purerendermixin", "body": "without causes line throw fix make shallowequal bail either argument falsey object want safe", "num": "3316", "d": "3/2015"}, {"title": "detect compatibility mode", "body": "claim support users testing code locally might get thrown compatibility mode default cause webapp blow confused supported browser background check thread users get compatibility mode adding tag since current failure cryptic easy detect compatibility mode probably add warning give hint user even though using actually compatibility mode effectively add meta tag use one various workarounds", "num": "3315", "d": "3/2015"}, {"title": "proposal thissubscribe auto disposing componentwillunmount", "body": "find common enough part core react either mixin method component lot cases subscribe unsubscribe pattern call discussion original started discussion cc jesseskinner", "num": "3314", "d": "3/2015"}, {"title": "typeerror parent component updated uncaught exception child component componentwillmount", "body": "expected result rendered text actual result jsfiddle code js var parent reactcreateclass getinitialstate function return error false componentwillmount function var self windowonerror used brevity windowonerror function selfismounted selfsetstate error true render function thisstateerror return error else return var child reactcreateclass componentwillmount function throw new error test error render function return child reactrender documentbody", "num": "3313", "d": "3/2015"}, {"title": "question optimizing reconciliation lists onetwo children change", "body": "list many children gt change occurs scenario setstate list rerenders list children optimized children keyed properly also shouldcomponentupdate implemented quick change list occurs update children know exactly ones even may hundredsthousands children yet still takes noticeable amount time since react reconciliation loops children checks updated special approach take may unaware", "num": "3309", "d": "3/2015"}, {"title": "optional callback setstate called", "body": "jsfiddle call since passed callback never called see console logs prints componentwillmount called", "num": "3308", "d": "3/2015"}, {"title": "add first class support immutablejs records maybe maps setstate", "body": "seems like common use case would like deprecate quite sure would work records mixins since fixed type cc leebyron", "num": "3303", "d": "3/2015"}, {"title": "mozmacosxfontsmoothing rendered incorrectly", "body": "firefox equivalent react serialization style prop incorrect see fiddle firefox initial state supposed enable font smoothing via innerhtml breaks subsequent updates use dom api work", "num": "3302", "d": "3/2015"}, {"title": "invariant violation danger expected markup render x nodes rendered", "body": "environment windows react browserify examples running chrome example page shows test get error invariant violation danger expected markup render nodes rendered var react require react var commentbox reactcreateclass getinitialstate function return tasks componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody example flowing code work var react require react var commentbox reactcreateclass getinitialstate function return tasks name val name val name val componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody exmaple following code raise error invariant violation danger expected markup render nodes rendered var react require react var commentbox reactcreateclass getinitialstate function return tasks name val name val name val componentdidmount function setstate work thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody", "num": "3301", "d": "3/2015"}, {"title": "rendertostring generating different id checksums call defect", "body": "trying figure isomorphic rendering nt matching thus began trying simply code realized even successive rendering single div ends different checksums id anyone help understand javascript var react require react var elem reactcreateelement div null consolelog reactrendertostring elem consolelog reactrendertostring elem var assert require assert assert reactrendertostring elem reactrendertostring elem fails expected checksums probably event id nt know determines appear defect", "num": "3300", "d": "3/2015"}, {"title": "react fails unmount component within event handler", "body": "hi trying unmount whole app got error uncaught typeerror read property firstchild undefined think big deal according see debugger seems trying get dispatched guess target unmounted note use case looks like using synchronous implementation get error adding settimeout unmount code got error could reproduce jsfiddle guess probably nt really know batching work react", "num": "3298", "d": "3/2015"}, {"title": "get old props state inside shouldcomponentupdate", "body": "using along syntax get old props state inside shouldcomponentupdate javascript shouldcomponentupdate newprops newstate consolelog jsonstringify thisprops jsonstringify newprops consolelog jsonstringify thisstate jsonstringify newstate render consolelog render console log render async actions fetch user name via standard action dispatcher store flux structure name kay lee name kay lee render ideas", "num": "3297", "d": "3/2015"}, {"title": "autofocusautofocus nt render rendertostring", "body": "rendertostaticmarkup", "num": "3296", "d": "3/2015"}, {"title": "memory leak", "body": "sorry bug code hey performance comparisons polymerjs basically requesting json file colors shuffling colors setting new colors array state concating replacing previous array working fast nice looking chorme task manager looks like memory leak looks like task manager code html polymer vs react showdown ul liststyletype none function shuffle array var currentindex arraylength temporaryvalue randomindex remain elements shuffle currentindex pick remaining element randomindex mathfloor mathrandom currentindex currentindex swap current element temporaryvalue array currentindex array currentindex array randomindex array randomindex temporaryvalue return array var squaretest reactcreateclass loadcommentfromserver function thisstatecounter ajax url thispropsurl datatype json success function data var shuffled shuffle data thissetstate data shuffled bind error function xhr status err consoleerror thispropsurl status errtostring bind componentdidmount function setinterval thisloadcommentfromserver thispropspollinterval getinitialstate function return data counter render function var squares thisstatedatamap function square return li style backgroundcolor squarecolor gt squarecolor return lt div gt lt div gt cycles thisstatecounter lt div gt lt div gt count thisstatedatalength lt div gt lt ul gt squares lt ul gt lt div gt reactrender lt squaretest url colorsjson pollinterval gt documentgetelementbyid squareplaceholder", "num": "3292", "d": "3/2015"}, {"title": "jsx complier tool nt line numbers code field", "body": "tool transforming jsx js supplied code contains syntax errors error displays line number since code field nt line numbers hard identify actual line", "num": "3291", "d": "3/2015"}, {"body": "running linters source code generated code generated code generally checked repository linted etc reason probably pretty low priority said like submit pull request would likely considered", "d": "3/2015"}, {"body": "jsfb tended recommend linting running jsx fb preserves line numbers etc", "d": "3/2015"}, {"body": "eeeh would mean someone lint rules state must space function name open pren linter would fail number potential lint rules happen conflict whatever transpiler produces ca nt win people linting rules mutually exclusive thus possible transpiler output pass linters better lint human actually readingediting", "d": "3/2015"}, {"body": "true linter needs understand jsx particularly eslint nt year ago", "d": "3/2015"}, {"body": "yep agree", "d": "3/2015"}, {"body": "ah seems like mostly files combo options", "d": "3/2015"}, {"body": "filed dependency fix", "d": "3/2015"}, {"body": "zpao also seeing logs well lead believe might matching", "d": "3/2015"}, {"body": "good idea thanks", "d": "3/2015"}, {"body": "would useful sounds like kind thing lot people would caught apply topleveltypes quick look seems like raw browser signals used variety different places across code base mean would need add support triggering places generic entry point could familiar react internal architecture comes eventside things let know making sense", "d": "3/2015"}, {"body": "think need dom components least attach listeners also later extra work build list incorrectly cased strings", "d": "3/2015"}, {"body": "mdn writes tag omission void element start tag must present end tag must present seems bug", "d": "3/2015"}, {"body": "xmlcompatible markup next release", "d": "3/2015"}, {"body": "cody yes html xml xhtml syranide good news thanks", "d": "3/2015"}, {"body": "tried react closing tag output syranide violation end tag must present nt", "d": "3/2015"}, {"body": "cody closing tag yes believe valid", "d": "3/2015"}, {"body": "great react makes everyone happy", "d": "3/2015"}, {"body": "cody syranide beers", "d": "3/2015"}, {"body": "react css js presentation christopher chedeau see function see repo inspiration using works awesome sun mar cigitia notifications githubcom wrote currently react supports regular javascript objects dom components style objects divstyle color white reactcreateelement div style divstyle would wonderful could also support generic data css styles eg iterator interface would enable immutablejs clojurescript data structures directly used styles divstyle immutablemap color white reactcreateelement div style divstyle currently necessitates converting generic data regular javascript style objects every styled element every render pretty wasteful general extremely useful able express styles generic data let end user manipulate data application ui eg enduser ui themes serialize data dynamically merge manipulate data needed runtime react native already supports last sort thing merging stylesheets yet supported regular react even better serializability manipulability generic style data could used potential problems suggestion might might slow react reconciliation rendering react native already style syntax merging style objects together unless revised eg adding stylesheetmerge method people use instead suggestion might create api mismatch react react native nonetheless think generic style data quite important im already using copiously especially ui themes somewhat related reply email directly view github", "d": "3/2015"}, {"body": "garrrio project use regular javascript objects pojos express css styles prop already supports anyway issue able directly use kinds data eg persistent immutable data structures like immutablejs clojurescript support generic interface eg iterable css styling since version react already much thing element children persistent data structures like immutablejs clojurescript mori allow people similar things also much without completely copying objects every time possible use iterable data structures directly dom elements styles far tell cssstyleattribute rendering styleprop reconciliation simply iterate style pojos keys using loops already might pretty similar performance characteristics worries whether would induce great mismatch react native method merging arrays since arrays also iterables nonetheless super useful able directly use iterables props", "d": "3/2015"}, {"body": "whyisjake posting wrong project react native way", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "probably nt issue react react native whyisjake might installed package ruby npm unpublished npm team bordering malicious find thread hopefully running fix", "d": "3/2015"}, {"body": "run times", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "fits well idea frags example think want make possible sure want another call like idea definitely line interested", "d": "3/2015"}, {"body": "zpao currently overloading", "d": "3/2015"}, {"body": "renamed reactrender several releases ago please consider keeping date new versions", "d": "3/2015"}, {"body": "spicyj yes make confused two render different", "d": "3/2015"}, {"body": "first definition describes rendering class look like second takes first input argument want render described jsx markup second argument output go case end construct content method called second triggers actual rendering happen hope helps", "d": "3/2015"}, {"body": "jviereck thanks know", "d": "3/2015"}, {"body": "running multiple instances react currently supported possible work around tweaks still isolated use instances interchangeably", "d": "3/2015"}, {"body": "yeah unfortunately nt support right like nt know good job issue tracking", "d": "3/2015"}, {"body": "especially issue packages also depend react seems like go away react switches parent context instead owner case fix issue specifically", "d": "3/2015"}, {"body": "chance get full stack trace error use pooling reuse objects instead creating new ones every time", "d": "3/2015"}, {"body": "ok thanks post morning uk", "d": "3/2015"}, {"body": "update trying render basic reactjs application server via nashorn java turns trying debug problems within engine really damn difficult hard get decent error messages back load testing found requests dropped due referenced error thrown suspected possibly something gc happening pretty consistently luck people suggested may concurrency issues sadly nt time properly dig things spike using reactjs nashorn together looks like abandon project thanks looking issue", "d": "3/2015"}, {"body": "sorry hear sounds like nashorn may buggy nt heard anyone problem engines", "d": "3/2015"}, {"body": "best way ask support mailing list stack overflow irc better answer question though use props child handle props update setstate though case may actually want using props state", "d": "3/2015"}, {"body": "thanks answer sorry ask", "d": "3/2015"}, {"body": "worries mar pm oscar men\u00e9ndez notifications githubcom wrote thanks answer sorry ask reply email directly view github", "d": "3/2015"}, {"body": "knockout primarily data binding library manages changing dom state update model react leverages state amp props generate views datamodel think knockout add", "d": "3/2015"}, {"body": "pfazzino said react used generate views datamodelbut ever consider datamodel changed update views therefore want use knockout automatically update views", "d": "3/2015"}, {"body": "think missing one key points react one secrets name react rerenders dom every time state changes nt need anything update views mutate state dom reflects changes knockout nothing offer", "d": "3/2015"}, {"body": "pfazzino thank much try best wish", "d": "3/2015"}, {"body": "requested point wo nt able really long pattern passing along extra props thing eg renders regular specific class otherwise lets users specify props would get passed dom node anyway follow along issue updates", "d": "3/2015"}, {"body": "app render method attempting return two elements allowed return one javascript var navbar require navbarjsx var app reactcreateclass render function return bootstrap starter template use document way quickly start new project get text mostly barebones html document moduleexports app", "d": "3/2015"}, {"body": "also reactjs freenode great communities get help like", "d": "3/2015"}, {"body": "thanks must need wapper got", "d": "3/2015"}, {"body": "iamdustan invite", "d": "3/2015"}, {"body": "ah main sign page currently use get invite", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "would jsdoc work", "d": "3/2015"}, {"body": "would use advantages simply using comments", "d": "3/2015"}, {"body": "know would use fkling wink", "d": "3/2015"}, {"body": "iamdustan see use cases personally prefer leverage existing concepts eg comments instead introducing new api learned remembered writing comment probably less friction developer calling api may also make bit difficult write custom validators unless help text really property function necessarily want consider angles ideally reach canonical way document react components see", "d": "3/2015"}, {"body": "goal still commit version reactdocgen looking integrating reactdocgen deprecating project relatively near future would hopeexpect component name property name property type andor default value provide enough affordance almost situations describe usage", "d": "3/2015"}, {"body": "thanks feedbackdiscussion guys fairly new reactjs would use model definitions django python web framework useful team members read quickly grok field used text used throughout project forms admin documentation etc single source truth documentation purposes field anyway nice pattern could useful components coffee moduleexports reactcreateclass displayname autocompleter component proptypes maxresults reactproptypesinteger helptext max number results autocompleter render someambiguousproperty reactproptypesfunc helptext descriptive text agree inline comments totally work case team using current convention thought nice pattern could useful", "d": "3/2015"}, {"body": "something like might work javascript function autobind instance objectkeys instanceconstructorprototype foreach f gt instance f instanceconstructorprototype f bind instance class something extends reactcomponent constructor super autobind", "d": "3/2015"}, {"body": "also lodashs bindall method could", "d": "3/2015"}, {"body": "likely include class property initializers able specify method arrow function autobind", "d": "3/2015"}, {"body": "unlikely add magic specifically react though new syntax enough", "d": "3/2015"}, {"body": "fyi forced using classes still exists autobinding continue exist foreseeable future classes intentionally nt support things language nt support", "d": "3/2015"}, {"body": "guys none solution works every class method nt enumerable objectkeys returns empty array", "d": "3/2015"}, {"body": "deser right look spec class methods enumerable binding constructor painful zpao recommendation use probably best option meantime class property initializers supported", "d": "3/2015"}, {"body": "pr let know mind", "d": "3/2015"}, {"body": "zpao intuition makes sense fix example call sanitization library change example completely demonstrate something else safer looks really bad security warning homepage react site makes seem like framework encourages unsafe operations rather safebydefault way things", "d": "3/2015"}, {"body": "switch demo use different library like markdownjs escapes everything nt support html", "d": "3/2015"}, {"body": "markdownjs looks good first attempt js function renderjsonml node typeof node string return reactcreateelement span null node var tag props children node typeof props string arrayisarray props children props concat children props null special case tag em amp amp children input return var childelements arrayisarray children childrenmap renderjsonml renderjsonml children return reactcreateelement tag props childelements class markdown shouldcomponentupdate nextprops return nextpropsvalue thispropsvalue render var value thispropsvalue var md markdownmarkdown var jsonml div mdtohtmltree mdparse value slice return renderjsonml jsonml const examplemarkdown example markdown uses markdownjs awesomely render markdown make changes like wrapping something see changes also special case input renders input input changing paragraphs wo nt mess trim class app extends reactcomponent constructor props thisstate markdown examplemarkdown handlechange e var markdown etargetvalue thissetstate markdown render return appstyles textarea width reactrender documentbody code licensed bsd someone wants turn coherent example signed cla", "d": "3/2015"}, {"body": "good suggestion zpao thoughts happy change example use markdownjs like people suggested brigand nice usage example", "d": "3/2015"}, {"body": "unless mistaken must use elements updating element uses children break iirc documentedwarned", "d": "3/2015"}, {"body": "syranide noted works using sure correct approach style tag contain css one would expect valid", "d": "3/2015"}, {"body": "maybe using good idea learn experimenting take look following code uses try transpile javascript using babeljs parser errors element everything works fine var mydiv test everything two brackets interpreted plain js following style definition variable contnat var mystyle classname mydiv following parse valid javascript var mystyleagain classname padding look output babelonlinerepl main issue jsx everything interpreted javascript case css content brackets different semantics sure jsx parser babeljs could adjusted cope cases fact hacking result looked confusing eventually ended defining react element find code hope helpful", "d": "3/2015"}, {"body": "jviereck interesting personally handwriting css inside styletag using browserify transform post babelify require styling cssstring getting babel errors beside point guess issue whether jsx support style tag supported think makes sense support css inside guys think two cents experimenting colocating everything related function component includes internal layout styling sometimes even small images images encode styling apply style tag lots tooling built around styling css sass less stylus etc lots great plugins features etc seems bit waste leaving behind styling pojo", "d": "3/2015"}, {"body": "think react right thing specifying browserify transform packagejson could minimize something anybody could reproduce maybe new repo try help sure much really", "d": "3/2015"}, {"body": "yeah docs wrong care send pr fix", "d": "3/2015"}, {"body": "oops mistake", "d": "3/2015"}, {"body": "first request dupe embarrassingly still open umnerged pr second suggestion nt really possible without advanced static analysis something could warn nt already", "d": "3/2015"}, {"body": "open pr haha awesome hopefully land soon static analysis minimal improved functionality sure true plain react js library see wo nt see entry thing table elements could certainly report trying render element never registered like still error console rather jsxbundlingwhatever still go long way narrowing things wrong", "d": "3/2015"}, {"body": "referencing existing component actually ca nt tell statically link refers createelement warn called course think already", "d": "3/2015"}, {"body": "class element", "d": "3/2015"}, {"body": "realise although find bit confusing class used create reactelements considered element clean way check object class creates reactelements factory mistaken", "d": "3/2015"}, {"body": "dmatteo equivalent vs factories helpers nonjsx users react consumes classes asis sure way definitively check whether given function valid component class cc spicyj", "d": "3/2015"}, {"body": "syranide understand difficulty problem related nonjsx users take use case javascript var newcomponent reactcreateclass displayname newcomponent result know already false confusing hand real component object tested testing also submit pr like idea", "d": "3/2015"}, {"body": "realised guys moved one level actually outputs", "d": "3/2015"}, {"body": "clear terminology elements lightweight objects reused element returned component class pretty much class render function returns element may constructors called directly react instantiation simplest example class also created factory actually function wraps creation element specified type called directly writing jsx never think factories honestly factories really unexciting get confusing basically rendered components state associated return value also methods properties objects anything underscore private really nt accessing break noticed never element nt sure idea proposing clarify", "d": "3/2015"}, {"body": "zpao thanks clarification still nt get render components recognised element could much useful testing components writing extension assertion library called unexpected take account tested element fact react element anyway put rough version like test needs polish serves proof concept see commit please let know think idea", "d": "3/2015"}, {"body": "rendered components simply nt elements different took rendered component used like element eg pass reactrender would get thing", "d": "3/2015"}, {"body": "see given obvious reasons ca nt test private properties way identify rendered reactelement react component", "d": "3/2015"}, {"body": "turn around need know may another way achieve working toward nt think checks component instances cc sebmarkbage", "d": "3/2015"}, {"body": "rendered element instance component class always check method believe guarantee one valid necessarily instantiated react", "d": "3/2015"}, {"body": "zpao use case trying create plugin unexpected assertion library called unexpectedreact order achieve extra ease testing react components one interesting features define type element passed input react accordingly error example ca nt tell difference class reactcomponent awesomeness go waste simply check props property another cool usage multiple functionalities equality operator eg first comparison pretty straight forward second one custom defined plugin without need extra complexity user syranide checking function suboptimal solution would love avoid", "d": "3/2015"}, {"body": "yea better plus side looks like error actually log near future browsers firefox nightly chrome beta able catch strings ok functions ok think objects certain characteristics ok render function", "d": "3/2015"}, {"body": "objects functions return objects render function thought warning already though", "d": "3/2015"}, {"body": "look", "d": "3/2015"}, {"body": "sorry references let know pr looks", "d": "3/2015"}, {"body": "react relies engines using object key insertion order iteration practically engines guessing nt could try using rhino perhaps closing unlikely change anything react support use case", "d": "3/2015"}, {"body": "tried run rhino got result know could run test check object key insertion available far know loading provides everything react world need run since would polyfill following react needs", "d": "3/2015"}, {"body": "hi albert yahoo security team working mridgway studying issue wan na share thoughts disabling dangeriouslysetinnerhtml good move would sufficient react allow inject script style tag style attributes would allow script execution also general worried ui redressing attack attackers create arbitrary overlay page could steal input submitted", "d": "3/2015"}, {"body": "nt think script tags execute use innerhtml create style tag style attributes allow execute context scripts modern browsers think older versions ie regardless ui redressing attack still equally valid concern", "d": "3/2015"}, {"body": "also doubt script tag saw supported facebookgithubioreactdocstagsandattributeshtml figured script tag used server side react would executable indeed style attacks works minor still contributes quite amount traffic", "d": "3/2015"}, {"body": "inclined see isreactelement used validation mechanism issue ca nt easily distinguish json object would execution context data context true server side validation could help works every time get json schema validate nature json suggested plain free form otherwise falling back xml validation would discourage developers use nutshell really need way distinguish json object executable context ie isreactelement thanks", "d": "3/2015"}, {"body": "none think react stay light lean unix philosophy fan", "d": "3/2015"}, {"body": "note json rendering virtual dom tree perfectly valid use case eg prerender high level component smaller level virtual dom tree server render result client also one ideas web worker rendering would construct virtual dom postmessaged rendered side therefore also consider options chose protect json data much mitigate scenario", "d": "3/2015"}, {"body": "possible solution use different syntax inserting strings children coerces username string coerces url string returns string number warns error explicitly wrap span use feels ugly would solve problem would nt", "d": "3/2015"}, {"body": "coercion nt catch mistakes miss would need make requirement eg wrapping strings placeholder distinct elements", "d": "3/2015"}, {"body": "suggested making error pass string noncoercing syntax plain", "d": "3/2015"}, {"body": "see would difficult enforce since come nested arrays nonjsx sources", "d": "3/2015"}, {"body": "really useful interfacing existing markdown libraries know one generates react elements nt point trying make removing feature bug nt even react fault seems pretty scorched earth", "d": "3/2015"}, {"body": "sebmarkbage schemaless storages becoming somewhat popular going become prevalent level repeat inserting foreign html markup result lack escaping react made goal make thing past instead vulnerability moved react components wrongly typed values lead insertion foreign hierarchies argue even could somehow guarantee insertion foreign hierarchies would nt dangerous would always bad malicious data always wreak havoc system react one part danger see react targeted apart easily exploited due debuggable clientside malicious data rendered users system hard guarantee malcious data wo nt able act freely assumed identity users think way forward drop implicit wrapping primitive values printable values elements like everything else react perspective implicitly wrapped like today printable value look something like still serializable exploitable jsx could simple syntax sugar say inline text would automatically wrapped may seem rather draconian sense think sensible way forward html introduced lot conviences turned really inconvenient user interfaces another one think practical implication bad seems sensible user interface backend would expose labels buttons etc would largely exclusive richtext components actually makes sense", "d": "3/2015"}, {"body": "think way forward drop implicit wrapping primitive values think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time instance always primitive render known safe potentially unsafe version look different causes readerauthor look closely eg something similarly wacky possibly much departure current way things viable note json rendering virtual dom tree perfectly valid use case nutshell really need way distinguish json object executable context ie isreactelement thanks react designed work plain objects input fact even getting rid isreactelement way verify conflicting goals think react would make clear choice options think decide data renderable increase documentation warning decide data primitive default introduce new jsx syntax render data intended nonprimitive find way mark data safe point support json cases well might need sort take plain object mark safe render eg proved bug prompted discussion boolean property enough mark data executable understand safe option would object reference perhaps something like checked using rendertime reintroduces multiplereact problem discussed could alleviated slightly sharing arbitrary flag object via global nt really help iframes web workers multiple windows bit brain dump seems simplest unsafe safest large change seems fiddly error prone hopefully someone else better idea", "d": "3/2015"}, {"body": "discussed several people leaning towards mark trusted solution nt reference identity unique enough token string number token shared environments similar way csrf default may share realm global could also completely disabled chose mar pm glen mailer notifications githubcom wrote think way forward drop implicit wrapping primitive values think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time instance username always primitive render known safe potentially unsafe version look different causes readerauthor look closely eg username something similarly wacky possibly much departure current way things viable note json rendering virtual dom tree perfectly valid use case nutshell really need way distinguish json object executable context ie isreactelement thanks react designed work plain objects input fact even getting rid isreactelement way verify conflicting goals think react would make clear choice options think decide data renderable increase documentation warning decide data primitive default introduce new jsx syntax render data intended nonprimitive find way mark data safe point support json cases well createelement might need sort hydrateelement take plain object mark safe render eg reacthydrateelement somejsonobj proved bug prompted discussion boolean property enough mark data executable understand safe option would object reference perhaps something like type div react react checked using react react rendertime reintroduces multiplereact problem discussed could alleviated slightly sharing arbitrary flag object via global window global reactmarker nt really help iframes web workers multiple windows bit brain dump seems simplest unsafe safest large change seems fiddly error prone hopefully someone else better idea reply email directly view github", "d": "3/2015"}, {"body": "glenjamin think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time explicitly put primitive values value element becomes inherently safe primitive values render outside nonprimitive values stringified inside personally makes lot sense already implicitly wrap primitive values internally also nonmarkupstyleinheriting backend would work thing rendering inline text ios user interface libraries really makes sense rendering richtext content also implemented say cc would want single type children", "d": "3/2015"}, {"body": "explicitly put primitive values value element becomes inherently safe primitive values render outside nonprimitive values stringified inside see mean long primitive nonprimitive syntaxes separate safe subtly different html escaping strings strings work correctly escaping forgotten", "d": "3/2015"}, {"body": "glenjamin subtly different html escaping strings strings work correctly escaping forgotten yeah would equivalent already today html markup implicitly creates text nodes like react currently also source xss html react react hierarchies objectbased rather string react vulnerable malicous objects instead sebmarkbage seems weird add another feature work around nt inherent issue introduced implicit wrapping primitive values borrow html still nt make sense purpose user interfaces quite sure performance implications minimal obviously significantly affect code one way another doubt important consideration react challenged many wrongdoings inconvenient conveniences html far think another one", "d": "3/2015"}, {"body": "nt reference identity unique enough token string number token shared environments similar way csrf default may share realm global sounds like work idea default would randomly generated client toplevel api readwrite", "d": "3/2015"}, {"body": "like idea trust reactcreateelement mechanism declare trust current environment jsx throw string trusted element stringordie span trusted reactcreateelement hey explicitly reactcreateelement pojo trust stringorelement simplest way element common property prototype exposed globally andor allowed set externally multiple react instances integration libraries alternatively could nonenumerable property rce could set tojson excludes property cause confusion end sending server get error incorrect token rather missing one adding extra syntax would unfortunate simple helper function exposed react would good explicit optout future react security feature like angular scetrustashtml case serialized element cool nt think asking little explicitness harm anyone users person maintaining code oh hey rendering something get server need careful code also please throw nt warn string", "d": "3/2015"}, {"body": "might missing something react need complicate inserting stuff like conditional jsx elements forcing users wrap issue react usecases server written properly far understood original report issue server accepting json object schema wat savingsending asis wat usecases pick needed fields course validate typerange expectations golden rule code security never trust data client asis perform server validation server accepts random data objects sends clients much bigger problems think whether using react cc alexeyraspopov zerkms", "d": "3/2015"}, {"body": "rreverser also sebmarkbage links demo code reproduce issue", "d": "3/2015"}, {"body": "attempt reproduce dangerous issue see html code added body script nt work clientside rendering protected ignore difficult string concatenation jsfiddle uses clientside version jsxtransformer", "d": "3/2015"}, {"body": "might missing something react need complicate inserting stuff like conditional jsx elements forcing users wrap issue react usecases server written properly rreverser applies html well look turned react obviously less susceptible relies objects one missinginsufficient check somewhere susceptible backend say json schema attacker potentially act behalf users visiting site reason see react make effort prevent like html markup", "d": "3/2015"}, {"body": "alexeyraspopov", "d": "3/2015"}, {"body": "brigand okay tell backend developer allows server receive json without fixed schema upd type xss works every js frameworklib allows render html", "d": "3/2015"}, {"body": "alexeyraspopov consider mustache provides two flavours template iterpolation default safe template authors optin unsafe behaviour understanding variable used unsafe portion checked stringently react also feature unsafe version even awkward missed however react translating createelement calls literals safe version safe creates false sense security good security like onion many layers yes developers nt allow arbitrary data reason top entries owasp top related untrusted data passing system happens practice reasonable steps popular libraries take makes hard makes mistakes high net gain", "d": "3/2015"}, {"body": "output single element got solutions return cells parent making composite component function returning reactfragment javascript function rendercells parent params return reactcreatefragment ref callback api makes possible add refs parent composite component one one c gt paramsfoo two two c gt bar parent component render return td rendercells thisprops", "d": "3/2015"}, {"body": "thanks fast response afraid done like wanted try implement solution thanks", "d": "3/2015"}, {"body": "also want point browsers automatically add necessary cause react stumble enough code see issue well", "d": "3/2015"}, {"body": "yes noticed case problem fact thanks suggestion", "d": "3/2015"}, {"body": "going close point feel free subscribe discuss definitely known limitation react currently works", "d": "3/2015"}, {"body": "bump days silence cc leebyron error comes immutablejs cc sebmarkbage bit unclear immutable data structures react supports", "d": "3/2015"}, {"body": "problem think immutable using return value map create new set legit however order objects values needs shim weak maps order actually needs set property object case reactelement react freeze element creating thus making nonextensible best bet probably turn set array map works array size implementation detail trie library sure much really react end moment want freeze elements dev prevent user error establish best practices perhaps add fancy interop immutable knows dealing react element", "d": "3/2015"}, {"body": "thanks explanation zpao trying avoid convert immutable objects however use case switched using immutablelist fine originally exploring usage list set orderedset map etc might interact react components recommended pass immutable objects react components", "d": "3/2015"}, {"body": "recommended way turn sequence iterable first using toseq mapping mar michael narciso notifications githubcom wrote thanks explanation zpao trying avoid convert immutable objects however use case switched using immutablelist fine originally exploring usage list set orderedset map etc might interact react components recommended pass immutable objects react components reply email directly view github", "d": "3/2015"}, {"body": "dupe", "d": "3/2015"}, {"body": "someone else mentioned surprising", "d": "3/2015"}, {"body": "experiencing issues recently", "d": "3/2015"}, {"body": "far understand idea basically equivalent htmltype meant use accidentally pass unsafe data model make sense", "d": "3/2015"}, {"body": "syranide nt mean people wo nt write even pretty reasonable careful naming varsprops", "d": "3/2015"}, {"body": "simplest workaround coerce empty string react internally", "d": "3/2015"}, {"body": "idea try adding code", "d": "3/2015"}, {"body": "react whatever editor using specifically even saying html yet put text escaped text coming", "d": "3/2015"}, {"body": "thanks want make sure react nt rewrite state silently hope nt misspell english words call component two supposed print string maybe sometimes second one different like tags gone", "d": "3/2015"}, {"body": "react nt anything special state properties put html get html make minimal repro case shows nt case happy take react nt anything state properties fairly confident case", "d": "3/2015"}, {"body": "guess use page loads script http gets blocked made pull request fix could nt test fingers crossed right", "d": "3/2015"}, {"body": "though going remove page let live entirely reactmagic repo", "d": "3/2015"}, {"body": "zapo scripts live reactmagic repo think keep page react site still really useful", "d": "3/2015"}, {"body": "look line logincontrol viewed class object mocking method class object instance", "d": "3/2015"}, {"body": "seems correct code context taken owner previous versions work context taken parent example parent thus receive context modified example nt work work js var contextparent reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo context value render return reactchildrenonly thispropschildren var root reactcreateclass render function return var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo reactrender documentbody", "d": "3/2015"}, {"body": "cc jsfb following plans context confirm", "d": "3/2015"}, {"body": "gaearon thanks explanation stupid question root parent child example component child component b passed children property b", "d": "3/2015"}, {"body": "managed get rid warning following code javascript var wrapper reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo hello context render function return reactcreateelement thispropscontent var root reactcreateclass getinitialstate function return foo false render function thisstatefoo return else settimeout function thissetstate foo true bind return div var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo thiscontextfoo foo reactrender documentbody sure nt produce warning maybe direct children context changing component must static anyway works", "d": "3/2015"}, {"body": "component child component b passed children property b afaik yes sure nt produce warning maybe direct children context changing component must static sure either perhaps jsfb sebmarkbage enlighten us anyway nt really need get rid warning use old ownerbased context throughout change code use parentbased context make minimal dependency warning tells code break nothing nt jump hoops get rid", "d": "3/2015"}, {"body": "grav reading propsstate arguments unable access updated propsstate ever returns false propstate actually changed problem inline closures render reading outdated propsstate", "d": "3/2015"}, {"body": "syranide give example means render differ using", "d": "3/2015"}, {"body": "always output props last rendered necessarily uptodate props whereas put always output uptodate props", "d": "3/2015"}, {"body": "syranide thanks nt think case nt want rerender still want uptodate props seems like could used explicit docs something still update even return false", "d": "3/2015"}, {"body": "bunch discussion thing default react somewhat functional somewhat oo world enabling moving forward something like function right signature component going close overloap feel free read thoughts", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "sorry poor english mean immutable component write instead ie lifecycle method shouldcomponentupdate either accept function boolean value", "d": "3/2015"}, {"body": "youmoo right far see react components classes bunch values magic values shapeshifting properties avoided costs method function cc sebmarkbage", "d": "3/2015"}, {"body": "yeah since write get effect rather keep api consistency instead making pattern characters shorter even write arrow functions looking save", "d": "3/2015"}, {"body": "think might want build different system parent promises properties pure children able shallow comparison default", "d": "3/2015"}, {"body": "sebmarkbage", "d": "3/2015"}, {"body": "hood react listens click events instead change normalize browser differences accepted solution nt use preventdefault use stoppropagation instead make use timeout reading", "d": "3/2015"}, {"body": "jquense maybe detail exactly going effect still observed use onclick directly maybe give flow happening", "d": "3/2015"}, {"body": "tigergrid read issue linked zpao covers quite nicely essentially running limitation react implements event checkboxes", "d": "3/2015"}, {"body": "unfortunate way nt good reason using preventdefault nt", "d": "3/2015"}, {"body": "probably open framed content new window debug normally right", "d": "3/2015"}, {"body": "reactrouter compiled also closure compiler minifying prop names would correct thing since understanding supposed create externs file lists property names uses key remains unchanged let know nt sound right", "d": "3/2015"}, {"body": "example gave reactroute would apply react library externs react reactrouter even created elementconfig type handler path keys however externs work case jsx transform annotate datatype object creates extern verifies argument sent function imply object passed elementconfig ie jsx transform would need output externs wrote js typedef object elementconfig property reactreactcomponent handler needed reactrouter property string path needed reactrouter var elementconfig param reactreactcomponentstring type param elementconfig config param children return reactreactcomponent reactcreateelement function type config children thinking rather default behaviour perhaps option passed jsx nt adversely affect application sizes users", "d": "3/2015"}, {"body": "would nt still get minified end would nt become something like would quoted transform everybody accessing props would write seems pretty fragile", "d": "3/2015"}, {"body": "yes option would still get minified end accessing props would need written rather however developers work closure compiler understand write two styles accessor nt think really big problem compile react reactrouter part project rather externs without change code work renamed files works however react closure compiler friendly without tweaks even produces warnings advanced mode verbose warnings prevents seeing errors warnings including within build also removes ability leverage existing cdn two projects worth nothing due renaming process react developer tools break said non defaulted option jsx transform allows developers wanting use react react libraries closure compiler build react projects easier working debugging tools", "d": "3/2015"}, {"body": "surprising", "d": "3/2015"}, {"body": "something documentation missed", "d": "3/2015"}, {"body": "good idea thanks want send pull request", "d": "3/2015"}, {"body": "sure mar pm ben alpert notifications githubcom wrote good idea thanks want send pull request reply email directly view github", "d": "3/2015"}, {"body": "looks like dup fixed", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "think bug intentional breaking change thanks reporting", "d": "3/2015"}, {"body": "wishcow plain object allowed put classes", "d": "3/2015"}, {"body": "wiki page linked incorrect would make working immutablejs probably immutable implementions pita since would packunpack object every time storeretrieve", "d": "3/2015"}, {"body": "wishcow seems cc leebyron sebmarkbage", "d": "3/2015"}, {"body": "wishcow encountered thing storing immutablejs object state directly clobbers simply putting attribute works fine eg", "d": "3/2015"}, {"body": "experiencing upgrading well nt seem problem react seems almost make sense state could immutable object since equality comparison cheap could nest state object state thisstatestate yuck seems like would create lot boilerplate code nt need", "d": "3/2015"}, {"body": "think", "d": "3/2015"}, {"body": "yeah bit bad used immutablemap state plain object worked absolutely great broke forces add bunch useless vanilla objects single child prop hold immutable map", "d": "3/2015"}, {"body": "think recommended way make sure properly cleaning resources canceling timers etc componentwillunmount nt need worry later whether component still mounted sebmarkbage probably say", "d": "3/2015"}, {"body": "common case difficult promises terrible design make cancelable probably add custom workaround promises everything else recommend clean timers", "d": "3/2015"}, {"body": "believe duplicate", "d": "3/2015"}, {"body": "believe duplicate absolutely knew one could nt find found weeks ago closing explicitly link link issue well point usecase", "d": "3/2015"}, {"body": "looks like nt part html standard neither specify", "d": "3/2015"}, {"body": "old version nt", "d": "3/2015"}, {"body": "seems dropped spec saw mentioned somewhere replaced", "d": "3/2015"}, {"body": "syranide thank answer", "d": "3/2015"}, {"body": "seem issue normal", "d": "3/2015"}, {"body": "yes knew perf regression dev cost business add warnings things like freeze props setting getters remove deprecated patterns see speedups since less code warnings leave open sure much really point even want", "d": "3/2015"}, {"body": "profiling nt big obvious easy wins probably going leave like hopefully next release", "d": "3/2015"}, {"body": "consistent regression across various vms prod", "d": "3/2015"}, {"body": "cc jsfb sounds like definitely want address cut", "d": "3/2015"}, {"body": "taurose submitted pr following suggestion testcase included close issue", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "possibly related", "d": "3/2015"}, {"body": "hi set gulp task react harmony false true everything working right thanks thanks", "d": "3/2015"}, {"body": "sorry meant comment day figure right option sorry confusion lack docs", "d": "3/2015"}, {"body": "hi happy solution thanks quick reaction", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "free use whichever like question", "d": "3/2015"}, {"body": "nt want use whatever like like react like javascript firstclass function language functional programming capabilities prototypal inheritance first react manifesto composition inheritance see something bring different route sorry would like explain better point first things first would like discuss decisions according post react blog see marketing plain javascript classes targeting javaist people example code autobinding broken getinitialstate dropped hey components life cycle imo defining method represent initial state component idiomatic putting state property everywhere constructor also getinitialstate help understand fast component state instead searching constructor defining proptypes defaultprops outside class cmon promise declarative syntax property initializers mixins broken languages coffescript targeting rubyist people really strong new shiny specification want still use coffeescript finally best example code seen", "d": "3/2015"}, {"body": "mirkodrummer still new changes free tweak however like change effectively making react unopinionated construct classes taken anything away simply stepped back enforcing", "d": "3/2015"}, {"body": "syranide reactcreateclass still yes still", "d": "3/2015"}, {"body": "mirkodrummer always might actively maintained react team forseeable future idea way deprecated free usewrite better replacement", "d": "3/2015"}, {"body": "anyway think nt get point javascript classes something sounds continuing errors past imo unique reason use class get developers", "d": "3/2015"}, {"body": "anyway think nt get point javascript classes something sounds continuing errors past mirkodrummer makes sense react stepped back unnecessarily opinionated bad incredible improvement current state every js framework existance invented consistently flawed concept classes never compatible classes", "d": "3/2015"}, {"body": "ok let say could see point opinionated things bla bla bla anyway cover real problem javascript beautiful prototypal language nt know js want class construct many us actually wants class constructs make react components could nt see valuable pro syranide want class system ok want know everybody", "d": "3/2015"}, {"body": "mirkodrummer want use choice syntax sugar anyway nt see point setting prototype manually mork using traditional prototypes reactswf simplicity widespread native syntax far far away using class syntax professional work", "d": "3/2015"}, {"body": "mentioned swf name proud old ugly web nt want waste time anymore syranide waiting guys opinion anyway thanks", "d": "3/2015"}, {"body": "mirkodrummer always make fork react move project fork side prefer also keep calm man nt angry people", "d": "3/2015"}, {"body": "vanesyan give reason classes javascript react please", "d": "3/2015"}, {"body": "guys seen proposal looks like future", "d": "3/2015"}, {"body": "mirkodrummer afraid argument wrong place article posted figured business designing class system want use whatever idiomatic javascript way creating classes nt reasonable library especially relatively young one want make sure evolving language classes may js right yet looks like things headed direction personally mixed feelings classes ca nt begrudge react moving language want voice complaint classes javascript sure productive places", "d": "3/2015"}, {"body": "first native also code elegancy consistency sometimes useful extends properties component another component reasons use people like anyway syranide said exists long time reasons nervous", "d": "3/2015"}, {"body": "place argue discuss reasons keyword classes exist real classes still use prototypical inheritance js always ironic okay proprietary classlike syntax mirkodrummer unsure intentional way replied syranide appears turned discussion language construct personal issue disagree move", "d": "3/2015"}, {"body": "reasonable react evolves along imo class best one anyway discuss class keyword hear people really want class system react components turns class system time embrace wrong approach composition factory function intended inheritance", "d": "3/2015"}, {"body": "vanesyan said sometimes useful extends properties component another component yeah point inheritance composition", "d": "3/2015"}, {"body": "yes want react support features including classes", "d": "3/2015"}, {"body": "react components preferlove also prefer composition inheritance hope react team dont deprecate", "d": "3/2015"}, {"body": "hope react team dont deprecate bjrmatos ca nt might stop supporting point tied core reason community ca nt take long happens likely nothing utility", "d": "3/2015"}, {"body": "mirkodrummer meant extending one part component another inside one component yeah components isolated", "d": "3/2015"}, {"body": "syranide concern react core couple class system core flexible support awesome imho approach components creation would better system", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "bjrmatos classes instantiated method compatible regardless built react knows cares even react wanted discriminate could nt nothing worry", "d": "3/2015"}, {"body": "syranide bitching moaning pointless lol like use use something else simple", "d": "3/2015"}, {"body": "trying encourage inheritance prefer composition general continue try make feasible encouraging composition one reason promoting building higherlevel components instead using mixins possible may also interested sebastian comment", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "comparing nt guaranteed identical initial markup never cc arnihermann", "d": "3/2015"}, {"body": "aware might cause issues like point vjeux decided since debug message going try see worked might accurate perform parent element find string sure think neither guarantee give back html initial markup happy work prevent kind issues like call suggestions fix permanently browser using occured", "d": "3/2015"}, {"body": "arnihermann latest chrome", "d": "3/2015"}, {"body": "arnihermann innerhtml vs outerhtml makes difference issue neither gives guarantee return markup put reasonable solution see render new markup well read outerhtml compare", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "probably safest value assign observable provides first value via example relay assign different meanings data exist yet fetched ideal default data value would alternative provide new method eg suspect unnecessaryoverkill", "d": "3/2015"}, {"body": "pretty interesting however point view static typing happy keyvalue system type pretty much impossible express return single observable setmerge value resolved javascript class foo observe return loaduser thispropsuserid map user gt user render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid case multiple fetch something like javascript class foo observe return combinelatest loaduser thispropsuserid loadsomethingelse thispropssomethingelseid user somethingelse gt user somethingelse render perhaps bit verbose allows nice static type", "d": "3/2015"}, {"body": "also instead executing propsstate change access props state observable javascript class foo observe propsstream return propsstream flatmap userid gt loaduser userid map user gt user render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid", "d": "3/2015"}, {"body": "reason nt want require use combinators understanding rxjs able subscribe multiple observables combining two observables way quite confusing fact least data sources probably implement subscription api even include combinators observables prototype requirement free use combinators need however subscribe simple flux store nt need think flow probably able handle static type using constraints check guys make sure think enough type data property observe type implied change going observables way describe application state implemented top like done explicitly application state since method idempotent framework free unsubscribe resubscribe needed", "d": "3/2015"}, {"body": "cc ericvicenti", "d": "3/2015"}, {"body": "least case typescript would way constraint return type based type least something like implemented", "d": "3/2015"}, {"body": "love use next version react dnd obviously requires waiting react wonder polyfill time higherorder component sets instance might crazy though", "d": "3/2015"}, {"body": "would possible observe promises one could use promises tree resolve data whole component tree first render would useful serverside react", "d": "3/2015"}, {"body": "benefits making firstclass api could essentially accomplished using higherorder component", "d": "3/2015"}, {"body": "benefits making firstclass api could essentially accomplished using higherorder component wrapping hocs get subscriptions bit unwieldy harder understand beginners understanding also nontrivial fixes one welcome new observable overlords", "d": "3/2015"}, {"body": "wonder help bring closer react vanilla api", "d": "3/2015"}, {"body": "would nt take one hoc example medium post iterate subscribe", "d": "3/2015"}, {"body": "aaronshaf depends use case sure sometimes different kinds state sources several stores ca nt say behalf react team let hear sebmarkbage says", "d": "3/2015"}, {"body": "would love sort polyfill play nt get idea completely yet mechanism involved dealing future updates spend time understanding think doable simple mixin", "d": "3/2015"}, {"body": "vjeux told chime nt mean promote work think hook similar hook react nexus declare data deps component level via lifecycle hook depend props api looks like binding appliedupdated latter case next bindings diffed previous bindings removed bindings unsubscribed added bindings subscribed underlying fetchingupdated mechanism described implementation nexus flux basically api either subscribe local data traditional local stores remote data fetch using get receive patches via websocketspolyfill could actually subscribe data another window using postwindow webworkerserviceworker still nt found truly useful use case long story short synchronously describe data deps component level using flux abstraction hooks make sure dependencies automatically subscribed injected updates unsubscribed also comes nice feature exact lifecycle functions leveraged perform data prefetching serverside rendering time basically starting root recusrively react nexus prefetches bindings renders component continues descendants components rendered", "d": "3/2015"}, {"body": "aaronshaf gaearon benefit making first class nt eat away props namespace eg higherorder component nt need claim name like props object ca nt use anything else chaining multiple higher order components keeps eating names find way keep names unique composing something might already composed name conflict besides think bestpractice higherorder components avoid changing contract wrapped component ie conceptually props otherwise confusing use debug consumer supplies completely different set props received nt use store last value concept similar sense purely memoization free throw point need reclaim memory example infinite scroll might automatically clean invisible subtrees", "d": "3/2015"}, {"body": "rickwong yes would fairly trivial support promises since subset observables probably unopinionated however would still probably recommend using find inferior observables following reasons ca nt canceled automatically framework best ignore late resolution meantime promise holds potentially expensive resources easy get thrashy situation subscribecancelsubscribecancel long running timersnetwork requests use promises wo nt cancel root therefore wait resources complete timeout detrimental performance large desktop pages like facebookcom latency critical apps memory constrained environments like reactnative b locking getting single value data changes time ca nt invalidate views end inconsistent state reactive single serverside render might fine however client ideally designing way stream new data ui automatically update avoid stale data therefore find observable superior api build since nt lock fix issues need", "d": "3/2015"}, {"body": "elierotenberg thanks chiming seem similar indeed kind benefits see limitations proposal ie something missing react nexus could nt build top would nice nt lock important use cases", "d": "3/2015"}, {"body": "serverrending standpoint important able postpone final rendertostring observablepromise resolved data could fetched asynchronously otherwise still position asynchronous data fetching outside react without knowing components page yet believe reactnexus allow asynchronous loading happen within component continuing render tree", "d": "3/2015"}, {"body": "yes reactnexus explicitly separates binding declaration synchronous sideeffect free lifecycle method similar render actually used name renderdependencies thought confusing binding subscriptionupdate synchronous diffs previous nexus bindings determine new bindings must subscribed ones must unsubscribed binding prefetching asynchronous resolves initial whathever means value ready returns hook mimicks construction react tree using recursively constructsprefetchesrenders components whole component tree ready finally calls knowing data ready modulo errors resolved value promise injected server response client regular lifecycle works usual", "d": "3/2015"}, {"body": "anybody wants play around kind api made really dumb polyfill higher order component js import react component react export default function polyfillobserve composedcomponent observe const enhancer class extends component constructor props context super props context enhancerproptypes composedcomponentproptypes enhancercontexttypes composedcomponentcontexttypes return enhancer usage js ca nt put component good enough playing function observe props context return yourstuff observeyourstuff props class yourcomponent extends component render note thispropsdata thisdata return thispropsdatayourstuff export default polyfillobserve yourcomponent observe", "d": "3/2015"}, {"body": "observable concrete agreed upon thing aside library implementations contract simple enough implement without needing use bacon rxjs nice first class api sideloading data would seems weird react add api based unspecedveryinitialspecing primitive given react steady movement towards plain js would something like ties us specific user land implementation aside streams horse race honestly wondering already work done web streams course node", "d": "3/2015"}, {"body": "another two consider", "d": "3/2015"}, {"body": "jquense active work proposal adding observable ecmascript ideally would become plain js currently outofdate would take dependency rxjs api trivial implement without using rxjs rxjs closest active ecmascript proposal mostjs seems doable baconjs api seems difficult consume without taking dependency bacon use types separating values stream apis highlevel far removed use case", "d": "3/2015"}, {"body": "kind await render option mean client necessary wait observables rendering server want wait resolve component render full partial explorations found important lifecycle hook missing serverside react", "d": "3/2015"}, {"body": "following discussion tried sum react nexus following post ismorphic apps done right react nexus heres diagram core prefetching routine", "d": "3/2015"}, {"body": "would take dependency rxjs api trivial implement without using rxjs rxjs closest active ecmascript proposal big concern thinking say promises implementing extremely fraught unless know think otherwise end implicit requirement specific lib ecosystem tangentially one nice things promise world test suite even across libraries least assurance common functionality helpful promise interop standardized", "d": "3/2015"}, {"body": "big concern thinking say promises implementing extremely fraught unless know think otherwise end implicit requirement specific lib ecosystem completely agreed thankfully observables really simple contract nt even builtin methods like way even simpler promises", "d": "3/2015"}, {"body": "might become complicated slower committee insists calling schedules microtask like promises", "d": "3/2015"}, {"body": "would bother lot pattern based fact onnext synchronous rxjs", "d": "3/2015"}, {"body": "think common flux store pattern might keep map observables perkey basis reused clean everyone unsubscribed way things like always get back observable", "d": "3/2015"}, {"body": "way things like mystoreget thispropssomeid always get back observable would using gone know make sense cases already pass unique identifier", "d": "3/2015"}, {"body": "way things like mystoreget thispropssomeid always get back observable pattern use react nexus store observe returns memoized immutable observer cleanedup including relevant backendspecific cleanup mechanism sending actual unsubscribe message whatever subscribers gone least one tick", "d": "3/2015"}, {"body": "sebmarkbage gaearon would observe work server would able properly wait observers resolve rendering string similar reactnexus built react", "d": "3/2015"}, {"body": "imo would great components waited first observed value ready rendering server", "d": "3/2015"}, {"body": "gaearon imo would great components waited first observed value ready rendering server yes asynchronous rendering meantime andreypopp alternative requires hack react would great react could support asynchronous rendering outofthebox", "d": "3/2015"}, {"body": "async rendering something would like support part issue l probably wo nt make unfortunately many different designs consider refactor needed feel free create issue describing architectural changes internals needed make happen", "d": "3/2015"}, {"body": "thought gaearon reactstreamingstate given potential applications side loading might better name example would clearly associate method nt mean derail bikeshedding wanted throw", "d": "3/2015"}, {"body": "ca nt wait observables react make react reactive understand", "d": "3/2015"}, {"body": "repro case", "d": "3/2015"}, {"body": "gut says multiple versions react mixing", "d": "3/2015"}, {"body": "seems running bugs currently possible", "d": "3/2015"}, {"body": "unfortunately right simply way actually use parent context yet probably best using deprecated features context trickier migration want taken cut warnings mostly unactionable really nt think mix two conditionally use parent owner fraught peril dependency change could break everything issue using track switch jsfb sebmarkbage anything add", "d": "3/2015"}, {"body": "two tricks use childcontextprovider simplest one accept function instead passing child directly instead would use legacy method since tool gives new owner context nested elements would loop using reactchildren recursively make context provider owner children way work parentowner based context complexity comes fact passing outside root usually created root complexity changing things", "d": "3/2015"}, {"body": "thanks works fine passing function create child could remove withcontext call", "d": "3/2015"}, {"body": "getting misreads reactmount error using method alongside reactrouter route transitions factory component top level whenever transition route incrementing root reactdataid example start go certain route get error increments going explore little wanted note first", "d": "3/2015"}, {"body": "ok avoiding top level factory pattern works fine", "d": "3/2015"}, {"body": "beginning tutorial actually makes reference need server order complete portion tutorial updates server side data could probably mentioned closer implementation posting code think reason server side code simply overwriting flat json file keep focus tutorial react side things link code flat file updated response post request", "d": "3/2015"}, {"body": "ah ok thought bring attention repo sounds like", "d": "3/2015"}, {"body": "chances tweak tutorial little bit obviously interacting withe api file see interested helping", "d": "3/2015"}, {"body": "insight anyone provide", "d": "3/2015"}, {"body": "taking look think need call start outside render many measurements based around update batches batch already started time call internal state perf gets messed something original goal perf would used measure whole app could drill something like", "d": "3/2015"}, {"body": "nt understand closed nt least throw helpful error throwing type error seems unlike react especially something seems seems perfectly valid given documentation startstop measurement react operations inbetween recorded analyses operations took insignificant amount time ignored makes sound like called time", "d": "3/2015"}, {"body": "string would never look something else must going make repro case", "d": "3/2015"}, {"body": "error message appears try use reactclass helloworld defined helloworldjs var helloworld reactcreatefactory require helloworld helloworld var container reactcreateclass render function return works remove factory like without factory serverside rendering code nt works", "d": "3/2015"}, {"body": "deminoth nt use jsx plain class", "d": "3/2015"}, {"body": "ok fixed clientside code like serverside code like works well thank syranide", "d": "3/2015"}, {"body": "let check see better warning", "d": "3/2015"}, {"body": "spicyj deminoth problem one issue though making sure", "d": "3/2015"}, {"body": "syranide spicyj think tvaroh error issue reproduced mistake jsx put ca nt sure confirm", "d": "3/2015"}, {"body": "thank guys check", "d": "3/2015"}, {"body": "yes case closing", "d": "3/2015"}, {"body": "tvaroh really still making sense string would pass function check though", "d": "3/2015"}, {"body": "syranide removed called twice row", "d": "3/2015"}, {"body": "see calling getdomnode using property heuristic warnings classes done via getters accessing property even without calling results warning", "d": "3/2015"}, {"body": "planning anything seems little crazy every single one tests throws warning lookup example tests currently plus many could nt fit screen", "d": "3/2015"}, {"body": "something like work javascript const escapere new regexp g const safere string gt return stringreplace escapere class hightlight extends component static proptypes match proptypesstring string proptypesstring render return gt", "d": "3/2015"}, {"body": "yes thinking abusing like idea method labelled dangerously good reasons way teach react parse jsx within string react parse ie return render method", "d": "3/2015"}, {"body": "binarykitchen construct react elements dynamically need ca nt string replacement", "d": "3/2015"}, {"body": "syranide yes already know point would nt nice jsxreact feature parse string turn tags inside child react components", "d": "3/2015"}, {"body": "use function regex replace captured parts like let know unclear", "d": "3/2015"}, {"body": "parsing jsx runtime errorprone slow easily security implications would nt inherently safer dangerouslysetinnerhtml", "d": "3/2015"}, {"body": "bit issue type case mlb mars ben alpert notifications githubcom wrote use split function regex replace captured parts like var parts cow cows say moo mooooo split bmoob gi var lt partslength parts return parts let know unclear reply email directly view github", "d": "3/2015"}, {"body": "akshayp sorry apply hand hurry", "d": "3/2015"}, {"body": "syranide thanks super quick turnaround", "d": "3/2015"}, {"body": "jsxorphanedbracketstransformer published update good go thanks filing", "d": "3/2015"}, {"body": "specifically noted docs note also relying javascript engine preserving object enumeration order guaranteed spec implemented major browsers vms objects nonnumeric keys planning keep asis react internals currently rely property allows faster performance options keep suggestion mind future", "d": "3/2015"}, {"body": "good know thanks", "d": "3/2015"}, {"body": "cc jeffmo know", "d": "3/2015"}, {"body": "babel gives helpful information transforming code looks like ca nt actually worked bug syntaxerror codejs unexpected token export default var hellomessage reactcreateclass actually testing reacttools also gives parse error mentions var illegal", "d": "3/2015"}, {"body": "nt original code nt work without either jsx var hellomessage export default hellomessage reactcreateclass render function return hello thispropsname reactrender mountnode try", "d": "3/2015"}, {"body": "ah previously esprima would parse importexports spec since updated incorrect use importexport parse error option added esprima exposed either either actually work see discussion jeffmo also talked outside github decided make default options would passed meaning modules would nt get parsed say jeffmo work option screwed tangential", "d": "3/2015"}, {"body": "particular issue answer probably give flag although beware old version esprima spec compliant enforce modules use strict default new parser one two things flag toggles zpao think two candidate options make sense default either nonmodule regular speccompliant module two speccompliant modes parser mode parser called nonstrictmodule meant temporary mode people transitioning existing commonjs modules modules nt chance verify old cjs modules strictcompatible yet would bad thing turn default would easy build notimplicitstrict modules expectation would work speccompliant browser forget case things would break speccompliant vm subtle ways nt remember decided option default suppose makes sense choose whichever one aligns people speculate people nt using modules yet otoh would nt opposed encouraging change momentum also plan react flow switch modules near future anyway maybe time rip bandaid matter though always case people choose script vs module via flag toggle", "d": "3/2015"}, {"body": "elaborate flag specifically would one fix parse error using client via", "d": "3/2015"}, {"body": "never mind previous comment using babel instead", "d": "3/2015"}, {"body": "yea right jsxtransformer limited set options could perhaps parse everything sure much worth also production code thing supporting modules nt huge priority going close shipped fix command line parsing", "d": "3/2015"}, {"body": "version seeing ca nt repro using test well command line", "d": "3/2015"}, {"body": "please close non issue", "d": "3/2015"}, {"body": "spicyj sounds like browser quark normalize right anything value would need check", "d": "3/2015"}, {"body": "jsfb also ran similar check nativeevent target placeholder text versus incoming value however valid user issue search text placeholder case filter definitely valid searchfilter term client", "d": "3/2015"}, {"body": "yeah seems odd probably challenging side first bug would good figure happening prevent still making possible type placeholder text directly captray says", "d": "3/2015"}, {"body": "really related imagine could solved similar fix", "d": "3/2015"}, {"body": "also goes", "d": "3/2015"}, {"body": "browsers js engines actually support class syntax yet likely need transform reacttools babel tools", "d": "3/2015"}, {"body": "zpao aware part strange thing works even though keyword one", "d": "3/2015"}, {"body": "works fine js class hello extends reactcomponent render return hello thispropsname reactrender documentgetelementbyid container complains", "d": "3/2015"}, {"body": "looks like extra curly brace second example", "d": "3/2015"}, {"body": "camspiers well ignore checkout fiddles mentioned issue", "d": "3/2015"}, {"body": "jsxtransformer supports features like classes without transformation happening get syntax error", "d": "3/2015"}, {"body": "polyfills related docs", "d": "3/2015"}, {"body": "nt much polyfill transform code code execution", "d": "3/2015"}, {"body": "oh hmm finally work matter browser supports nonjsx", "d": "3/2015"}, {"body": "let warn release", "d": "3/2015"}, {"body": "already warning right ready error per conversation syranide cited", "d": "3/2015"}, {"body": "merged", "d": "3/2015"}, {"body": "simple fix use instead want pass actual reference js variable", "d": "3/2015"}, {"body": "spicyj nt think asking think wants able create react element dynamically acquired name string looking instead", "d": "3/2015"}, {"body": "equivalent", "d": "3/2015"}, {"body": "spicyj edit correct", "d": "3/2015"}, {"body": "spicyj jsfb suggestions arrive outcome neither supporting ability dynamically generate name strings reference existing components wanted store id value component prop use name string render component looking something almost like eval running updated fiddle easy testing", "d": "3/2015"}, {"body": "probably know best practice use look globals string name tends make code hard reason use patterns react key use capitalized variable name else react treat builtin dom element", "d": "3/2015"}, {"body": "aware evils eval window lookups assumedhoped react would support something like secure scoped reference method part jsx transpiling one could easily implement immutable scoped object valid component names compare strings ensure nothing malicious going passed lookup method would greatly simplify dynamic component calls requiring massive switch else statements front render return statements spicyj jsfb thanks", "d": "3/2015"}, {"body": "maybe something like var allmycomponents var child reactcreateclass allmycomponents child child var component allmycomponents name nt large overhead reasonable using globals react tries simple get way instead adding lot magic build whatever want top js without react", "d": "3/2015"}, {"body": "think dom structure incorrect try remove another div wrapping events work", "d": "3/2015"}, {"body": "many workarounds one specify using dangerouslysetinnerhtml one however example shows unexpected issue event propagation inside dangerouslysetinnerhtml deliberately minimal test case reproduce issue could imagine html question much complex perhaps multiple forms external source perhaps cms hence system would know rewrite done", "d": "3/2015"}, {"body": "benjie also noticed onsubmit nt work", "d": "3/2015"}, {"body": "oh seems design triggered", "d": "3/2015"}, {"body": "people complain usually suggested use value instead defaultvalue often seen unpractical form many input fields since fields need onchange listener editable share onchangelistener nt see issue yeah people nt like reason even better solution two approaches updating uncontrolled inputs neither universally right assign ref call used underlying value changed input updated reflect assign key mostly preferable shared parent used input changed source ie referring another unrelated value like input different tab assigning key completely destroy previous input along focus etc second kind applies controlled components well rarely something really matters may obvious think interms traditional dom interaction either update value existing input eg switching tabs destroy dom render thus newly rendered inputs show current value", "d": "3/2015"}, {"body": "share onchangelistener nt see issue yeah people nt like reason mean setting input element certainly nt prefer duplication code really unnecessary second case believe people want implement run issue nt seen solution presented anywhere along risks focus loss", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "want arbitrary number input fields letting events bubble listener form specify listener per input field", "d": "3/2015"}, {"body": "theludd able exactly mentioned form changes use figure input changed within input form form event listeners", "d": "3/2015"}, {"body": "joshbedo yes know generates warnings makes go many others commented github always strive reduce number warnings actually true put onchange listener wrapping element generates lot warnings", "d": "3/2015"}, {"body": "yes also want bind onchange form form input field react give many warnings", "d": "3/2015"}, {"body": "want make sure performance test suite still works look day think broken", "d": "3/2015"}, {"body": "nah going block fix independently", "d": "3/2015"}, {"body": "update refs documentation callback style actually recommending yet nt matter support talked changelog ca nt discussions inline text field nt get updates idea asked ask comments", "d": "3/2015"}, {"body": "sorry", "d": "3/2015"}, {"body": "camspiers ah assuming mean testing suite problem believe shape correct wrong though", "d": "3/2015"}, {"body": "apparently fbme urls ca nt changed well without bypassing checks sure safe bypass skip part end day bad", "d": "3/2015"}, {"body": "reactrails reactsource gem couple good additions could make release", "d": "3/2015"}, {"body": "ok calling done followup tutorial", "d": "3/2015"}, {"body": "become nested children discarding inner array", "d": "3/2015"}, {"body": "weird looks like never right", "d": "3/2015"}, {"body": "yeah issue related recently created tabs component tabspanel inner children key nt specified sets key children means nt distinct copied state previously selected tab noticed upgraded worked perfectly behavior newer versions automatically add key based child index explicitly set", "d": "3/2015"}, {"body": "looks like btw", "d": "3/2015"}, {"body": "quite sure spread nt problem exactly error message says happens component reveals issue throws update initial broken render", "d": "3/2015"}, {"body": "else component syranide said nt seem like spread causing problem also fyi function string check", "d": "3/2015"}, {"body": "wow thinking sorry posting joke", "d": "3/2015"}, {"body": "cc sebmarkbage", "d": "3/2015"}, {"body": "nt anything specifically happen faked dom components reprod input also nothing using return value running makes happen guessing screwing something currentowner somewhere along line", "d": "3/2015"}, {"body": "comment wrong mea culpa much time coffeescript", "d": "3/2015"}, {"body": "render function returning valid value need return reactelement value add render method new example error goes away", "d": "3/2015"}, {"body": "new test case seems wrong jsfb says nt repro bug original one solid", "d": "3/2015"}, {"body": "yea invariant seeing different let get hung much specific example part important thing returning something ref conjunction rendering specific things string breaks add return div ref example error still", "d": "3/2015"}, {"body": "agree zpao simplified example slightly avoid confusion interaction rendertostaticmarkup return value var bug reactcreateclass render function reactrendertostaticmarkup reactdomimg return reactdomimg ref null bug reactcreatefactory bug reactrender bug documentbody rendertostaticmarkup clearly mutating something internals", "d": "3/2015"}, {"body": "sideeffects mutating owner stack components instantiated also lifecycle hooks constructors getinitialstate componentwillmount may cause sideeffects method pure may cause sideeffects throw invariant bunch methods render would much nicer error message workaround one lifecycles allowed sideeffects store result used inside", "d": "3/2015"}, {"body": "fix disable use case", "d": "3/2015"}, {"body": "gut says lazy think actually look see make behave better fine friendly error message better generating string markup considered side effect instantiating anything calling function side effects nt really buy excuse", "d": "3/2015"}, {"body": "another possible solution would disable componentwillmount serverrendering nt allow sideeffects constructorsgetinitialstate therefore making rendertostaticmarkup pure", "d": "3/2015"}, {"body": "contract component allowed trigger sideeffects mutations lifecycle methods need ensure api boundaries sideeffectful component happens sideeffect nt mean wo nt later regardless think probably go opposite route make asynchronous components resolve dependencies fully completing case definitely sideeffect still would nt make sense put render likely wo nt make render async", "d": "3/2015"}, {"body": "instinct zpao correct generating string markup nt automatically assumed sideeffectful components pure function props ideal design calling nt problem using janky components sideload data well use peril rendering another component different calling another library caller responsibility ensure invocation sideeffect free warn know invocation side effects nt block someone rendering string know components wellbehaved", "d": "3/2015"}, {"body": "thanks workaround sebmarkbage shifted rendertostaticmarkup componentwillmount componentwillreceiveprops works slightly less desirable render duplication bad", "d": "3/2015"}, {"body": "react rerender component component setstate method called manually mutating data way react know data changed thus way rerender calling setstate forceupdate appropriate ways notifying component data change future reference questions like better asked stackoverflow closing issue since bug react feel free continue conversation take issue stackoverflow", "d": "3/2015"}, {"body": "thank apologies adding issue", "d": "3/2015"}, {"body": "jquense looks like bug example cleaned bit example passing superfluous makes difficult fully understand going sebmarkbage issue readily demonstrated using deprecated function see demo render bar instead foo sebmarkbage new parentbased context enabled expect behave inherit current context use context effective position dom eg someone renders leaf node react component mounting", "d": "3/2015"}, {"body": "new parentbased context enabled expect reactrender behave inherit current context use context effective position dom eg someone renders leaf node react component mounting super interested well sense nt make sense pass parent context would break layer pattern passed unless course manually pass context theoretically owner subset parent right", "d": "3/2015"}, {"body": "yeah intuition inherit context dom user wants explicitly pass new context create wrapper component provides context variables potentially received props pass wrapper component thus maintaining parentbased propagation variables jquense owner necessarily subset parent parent owner theory independent though owner usually parent warn cases context variables used owner provided value match parent provided value rare", "d": "3/2015"}, {"body": "want way pass context see nested render trees", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "johnpostlethwait nt know either autosetting works using declaration jsx var app reactcreateclass displayname autoset app", "d": "3/2015"}, {"body": "thanks koulmomo presumed based experience wanted get ticket filed betterfixed documentation noticed", "d": "3/2015"}, {"body": "change add element body modal going shown also called seems really weird slow edit perhaps misremembering work anyway seems like issue mixin react", "d": "3/2015"}, {"body": "syranide used render modals nested components two flaw elements inside another fixed element buggy especially safari modals nested stylesheets mostly inherited occasionally brings confusions started move modals body reactcsstransition addon fails came solution found add container element body first fades modal ugly coffeescript way coffee react require reactaddons keyboard require utilkeyboard mixinlayered require mixinlayered reactdom reactproptypes cx reactaddonsclassset moduleexports reactcreatefactory reactcreateclass displayname bodymodal mixins mixinlayered proptypes components accepts children name tstring title tstring oncloseclick tfuncisrequired showcornerclose tbool show tboolisrequired componentdidmount gt windowaddeventlistener keydown onwindowkeydown componentwillunmount gt windowremoveeventlistener keydown onwindowkeydown onwindowkeydown event gt eventkeycode keyboardesc oncloseclick oncloseclick gt propsoncloseclick onbackdropclick event gt unless propsshowcornerclose eventtarget eventcurrenttarget oncloseclick renderlayer gt classname bodymodal isfor propsname div classname classname onclick onbackdropclick propsshowcornerclose classname icon iconremove onclick oncloseclick div classname box propstitle div classname title span classname name propstitle span classname icon iconremove oncloseclick propschildren render gt div maybe ask question like create react modal append transitions", "d": "3/2015"}, {"body": "tkohlman tests running", "d": "3/2015"}, {"body": "tests standard unit tests custom react components example toggle component dispatches event type toggleclick clicked", "d": "3/2015"}, {"body": "also seeing issue testing karma mocha", "d": "3/2015"}, {"body": "sebmarkbage looks like added todo get fixed happy help sure right heuristic", "d": "3/2015"}, {"body": "unfortunate nt quite know right heuristic changing anyway since refs dom component regular dom nodes think power", "d": "3/2015"}, {"body": "maybe", "d": "3/2015"}, {"body": "thinking reuse string types art react native would nt want react native node hit", "d": "3/2015"}, {"body": "maybe", "d": "3/2015"}, {"body": "property deprecated anyway great heuristic", "d": "3/2015"}, {"body": "lets move fast ref real dom node stuff instead spending time figuring", "d": "3/2015"}, {"body": "default behavior autofocus attribute tricks like setting value input focus nt use autofocus manually", "d": "3/2015"}, {"body": "ah true thanks charca", "d": "3/2015"}, {"body": "assume seen document inline styles styles behave browser styles yet solution clean shadow dom style encapsulation web existed many years without shadow dom certainly possible design websites using browser native style rules one thing could define style reset class resets styles default override defaults specific selectors alternatively could create base inlinestyle object default styles import object everywhere want apply specific style copy object override styles want set using want get really fancy could components style merging styleresetobject create automatically webdevs use components without seeing stylereset code two cents cc spicyj ps since usage question rather bug react going go ahead close issue feel free continue conversation thread closing issue mostly takes radar dev purposes ideal place questions like would stackoverflow", "d": "3/2015"}, {"body": "tend recommend using bemesque class names globally unique usually scoped component name css try avoid using descendant selectors favor single class names tends promote style isolation separation components makes easier compose components without styles falling apart", "d": "3/2015"}, {"body": "suit another great option great nose tooling rework conformance validators provide automated safeguard styles bleeding", "d": "3/2015"}, {"body": "looks like interesting solution", "d": "3/2015"}, {"body": "super obvious repo devtools file", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "seems cc spicyj sebmarkbage", "d": "3/2015"}, {"body": "one thing noticed using minified file property could causing issue", "d": "3/2015"}, {"body": "weird part copypaste content either everything gon na working soon switched import file minified one doowb noticed node package gives error", "d": "3/2015"}, {"body": "disabled uglification reactchartisttooltipminjs transpiled babel still gives error cause invariant violation instead object", "d": "3/2015"}, {"body": "fixed specifying react peer dependency rather normal dependency two copies react appeared compiled app behaved differently causing error", "d": "3/2015"}, {"body": "paste code maybe helpful", "d": "3/2015"}, {"body": "var movieitemsuggest reactcreateclass render function return var moviesuggest reactcreateclass getinitialstate function return movieviewlist componentdidmount function var self ajax type get datatype jsonp url success function result var movies resultrmoviesbycates movies selfsetstate movieviewlist movies reactrender documentqueryselector hdvsuggest swipercontainer function var swiper new swiper hdvsuggest swipercontainer slidesperview paginationclickable false first image resize browser image", "d": "3/2015"}, {"body": "idea swiper seems like probably mutating dom happens things go wrong react best guess asynchronous case actually need tell swiper added photos lifecycle hooks nt much actionable us nt bug react suggest talking developers asking question another place maybe stack overflow mailing list", "d": "3/2015"}, {"body": "idea use swiper create touch carousel data static work well data via ajax request errors show image every list image resize browser show full options swiper settings", "d": "3/2015"}, {"body": "react dom real dom try add unique attribute loop code", "d": "3/2015"}, {"body": "purerendermixin", "d": "3/2015"}, {"body": "yes meant link jsbin putting together pr", "d": "3/2015"}, {"body": "potentially worth noting getinitialstate likely become required stateful components near future see already case component calling ideally specifying", "d": "3/2015"}, {"body": "jsfb definitely think makes sense make required stateful components", "d": "3/2015"}, {"body": "style like already considered see reactfuture function couple considerations would increase api surface thus learning curve react need sure pattern common enough justify additional weight also need decide pattern legitimaterecommended design pattern questions around since effectively sideloading data data probably passed props parent anyway tracked reactfuture still needs baking going close", "d": "3/2015"}, {"body": "good catch explosion within component cause react core die cc sebmarkbage", "d": "3/2015"}, {"body": "effectively duplicate throwing render phase leaves react broken state unable recover need major refactoring introduce better regressions tests support close leave", "d": "3/2015"}, {"body": "run problem well found time spent constructing element descriptors vdom diffing solution cache descriptors manage cache ugly works believe react much better inline elements", "d": "3/2015"}, {"body": "radubrehar using shouldcomponentupdate correctly nt constructing substantial number descriptors vdom diffing right cc sebmarkbage cc jordwalke sounds like situation similar reactnative situation wanted tunnel updates right", "d": "3/2015"}, {"body": "jsfb still creating elements go existing ones run need know update replaceremove need create elements know nt updating one things working hard towards elimination need calling createelement optimized away couple ideas optimizations discussed jeffchan said work though get bit unwieldy anther option start windowing may actually need elements rendered nt actually visible also fair amount work start tracking scrolling sizes definitely doable fixed data table", "d": "3/2015"}, {"body": "went windowing rendering visible rows extra top bottom managed infinite number rows list instant performance read optimization ideas discussed linked issues sound cool many cases able make props value types develop highly dynamic components styles configurable eg rowstyle oddrowstyle evenrowstyle oddeven rows etc far read value equality applied case object maps used maybe tagging elements help happens list inside parent constant value type far understand element children skipped updating would indeed smart useful scenarios whole app rerenders concerned situation component setstate order housekeeping allows developing highly configurabledynamic components skipping update used appspecific often valuetype compatible componentscontainers tried caching element descriptors helps though windowing better solution scenario since app rerenders rerender limited set children caching element descriptors invalidated props change problem solved one day us situation optimizations possible ugly could method specify keyed children update similar shouldcomponentupdate jsx shouldcomponentupdate function shouldkeyedchildrenupdate function return update children keys present object values set true idea came quickly polished maybe worth investigating drawbacks already came mind idea could used state transition component receive props useless optimization immutable data structures since shouldcomponent update enough maybe value", "d": "3/2015"}, {"body": "duplicate think", "d": "3/2015"}, {"body": "yes bug also present reactwithaddons", "d": "3/2015"}, {"body": "closing favor", "d": "3/2015"}, {"body": "reasons remove reasonable difficulty adding new keys clobbering mixin setstates without choice transition immutable data would recordmap property eg desire allow something extensible object nt see would possible guard two pitfalls cases latter pitfall mixins seems troublesome would issue classes maybe solution allow nonobject component state classes", "d": "3/2015"}, {"body": "allowing give custom implementation handles actual work example one would write js class mycomponent extends component getinitialstate return immutablemap name world would used react actual updates gets called way need support specific libraries anything like everyone wants use immutable state easily another benefit define method per component base mix match well use libraries without user knowing mixin case also long mixin uses calls custom method activated name suggestion placeholder start discussion guys think", "d": "3/2015"}, {"body": "ca nt comment implementation want app nt work happy nt put state data dummy key", "d": "3/2015"}, {"body": "agree form support immutable state data structures important well", "d": "3/2015"}, {"body": "ai nt pretty", "d": "3/2015"}, {"body": "wo nt work since updates use dom api updates wo nt work needs allcaps osx", "d": "3/2015"}, {"body": "needed another reason dislike", "d": "3/2015"}, {"body": "good work petehunt forced us file bug get fixed upstream firefox going change actually spec nt follow", "d": "3/2015"}, {"body": "makingwaves", "d": "3/2015"}, {"body": "thinking point abandon pr say meh bug firefox one using css style anyway add complicated logic potentially css property detection code", "d": "3/2015"}, {"body": "petehunt reading thread camelizing change var hyphenpattern g var hyphenpattern daz gi least camelizing correct", "d": "3/2015"}, {"body": "closed per anyone really cares wants submit pr bet would considered", "d": "3/2015"}, {"body": "richfisher unable reproduce roadhouse environment see attached screenshot first example environment nt exact match nt use browserify still windows pretty damn close anyway without repro nt much end pasted source code play see get results post prebuilt failure case online somewhere fire test environment see determine root cause end would good try example code determine reactbrowser compatibility issue issue browserify indexhtml jsindexjs var commentbox reactcreateclass displayname commentbox getinitialstate function return tasks componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return reactcreateelement p null reactcreateelement b null taskname reactrender reactcreateelement commentbox null documentbody", "d": "3/2015"}, {"body": "thank rapid reply follow code create repo still raise error invariant violation danger expected markup render nodes rendered ie version", "d": "3/2015"}, {"body": "richfisher checked repository roadhouse machine still unable reproduce based screenshot looks like system language nonenglish conceivable language preferences causing browserhtmldom render differently try testing language preferences set english see get error point loss reproduce running repository exact browser version web world sucks pluginsmodulesextensions installed try testing english language environmental factors might different machine zpao ideas", "d": "3/2015"}, {"body": "richfisher created pull request please merge pull request test take screenshot alert message might provide least little insight issue", "d": "3/2015"}, {"body": "alright repro set browser mode compat view mode also sets document mode standards happens bets effectively using point nt support compat view nt default apparently run compat view default testing locally crazy thread stack overflow talks ways around open tools confirm mode running think see mode incorrect hold closing guess", "d": "3/2015"}, {"body": "zpao right using compatibility view default add meta tag indexhtml right thanks jsfb zpao", "d": "3/2015"}, {"body": "problem", "d": "3/2015"}, {"body": "believe may understand issue apparently rendering server uses random id checksum different since uses id calculations however apparently browser mounting code determine somehow tree matches mount event listeners make props match see expected warning console log warning react attempted reuse markup container checksum invalid guess ca nt manually look things know whether work see warning nt working anyone wants elaborate would great otherwise probably close issue", "d": "3/2015"}, {"body": "version react using look little janky guess using outofdate version rendering string react generates full markup string including uniquely identify render root calculates checksum string appends checksum root element client compare two checksums match arguably bug maybe low priority one nt technically need match order markup compatible rendering twice thus two different render roots issue comes fact render roots unique since checksum calculated across markup string effectively means call rendertostring unique checksum long render roots matching checksums match going close notabug since expectedknown behavior point may make sense checksum calculated without considering root could performance considerations current checksum implementation super fastsimple change roadmap cc sebmarkbage situational awareness", "d": "3/2015"}, {"body": "jsfb using react thanks clarifications though", "d": "3/2015"}, {"body": "interesting ok apparently generated way incrementing zero used increment integer good know rest answer still applies", "d": "3/2015"}, {"body": "increment zero rendering client generate random number server idea behind client single react know everything though proven source problems multiple reacts server nt know everything generated could imagine parallel processes generating page ca nt start increment get clashing keys quickly use random numbers still small chance collision probably fine", "d": "3/2015"}, {"body": "zpao algorithms differ always use random", "d": "3/2015"}, {"body": "predictable behavior perhaps adding faster mathrandom much certain wo nt collisions general autoinc known unique int fast cheap guaranteed unique algo guarantees expensive takes space guids nice also chars sticking dom node sucks another bad option would always use datenow microsecond precision pretty much guaranteed collide nt remember much honestly cc petehunt syranide", "d": "3/2015"}, {"body": "zpao yeah two reasons think always using random overhead collisions however unlikely ultimately want get rid dom nodes though needs core refactoring happen neatly", "d": "3/2015"}, {"body": "going say like see us choose single algorithm like syranide idea even better", "d": "3/2015"}, {"body": "jimfb syranide agreed", "d": "3/2015"}, {"body": "jsfb posterity much possible today bugsmissing things core prevents real also easy reconstruct reactid prerendered markup", "d": "3/2015"}, {"body": "find informations usecase basically user language change want add new language react context force rerender whole thing flux code guess understand see works settimeout get error unmounting synchronously really happens unmount remove calls still get error", "d": "3/2015"}, {"body": "unmounting react event currently supported afaik", "d": "3/2015"}, {"body": "unmounting result event sounds like perfectly reasonable thing want think try support slorber create simple jsfiddle demonstrates issue", "d": "3/2015"}, {"body": "jimfb yes successfully reproduced case first attempt working try add another event listener parent", "d": "3/2015"}, {"body": "awesome thanks issue related mutating nodes synchronously within event loop may want make unmount take effect end event loop think demonstrates general problem handle toplevel functions within event loop", "d": "3/2015"}, {"body": "plus one reasonable behaviour unmount component result react event", "d": "3/2015"}, {"body": "rendering component", "d": "3/2015"}, {"body": "gsklee provide jsfiddle demonstrates issue", "d": "3/2015"}, {"body": "found cause trap kind using flux structure store javascript var user name export default new class store extends eventemitter get value return user component javascript export default class app extends reactcomponent constructor props super props onstorechange consolelog jsonstringify thisstate jsonstringify userstorevalue name kay lee name kay lee passes reference change reflected instantly way coming fixed issue something like maybe update flux site docs warn people issue official examples using problematic pattern", "d": "3/2015"}, {"body": "yes references make tricky updating flux docs good idea bring repo going close though", "d": "3/2015"}, {"body": "yea know one see info", "d": "3/2015"}, {"body": "able access statics", "d": "3/2015"}, {"body": "sounds much related lack warnings issue", "d": "3/2015"}, {"body": "note responsible key proptypes warnings ariabuckles way thinking problem definitely possible inline objects code would enable production mode compiler feature however ok case way providing valid warnings nt think simply opting warnings completely viable strategy might think wo nt mess proptypes keys manually inlining even nt might accepting children props outside need validated might think warnings coddling developers allow opt however undermines stability shared components larger community ultimately cause people blame react one idea use static type system like flow use static type system files statically verified therefore nt need validate dynamically even development mode sure accommodate transfer verification flag perhaps using special transform adds explain bit use case even sketchy might help us come ideas solve special case without losing warnings common case", "d": "3/2015"}, {"body": "hi thanks response sebmarkbage making render either react html figuring best let html users messed statement couple approaches take require inlining elements inlining elements promising completely removes dependency actually referenced simplemarkdown like mention also means avoid function call overhead production given many dom nodes markdown often outputs could win trying avoid warnings like react warnings ka currently turned mostly trying avoid dependency react could solve dependency injecting works provides slightly worse api clients specific case nt need refs nt inject children unfortunately currently avoiding warnings implementation would prefer dev although trickier b specific case bunch react elements hardcoded nt refs external children concerned warnings key warnings would nice time keys using pretty much worst possible keys keyless elements would nt actually perform worse right got function adding prop cheat validation ideally could make function validation dev mode skips production probably said anything ordinarily ben said", "d": "3/2015"}, {"body": "definitely goal decouple reactelements react idea transpiler implementation nt need react scope generate elements implementation would need production mode guess another possibility could start using weakmap element gets passed", "d": "3/2015"}, {"body": "also find frustrating longer find issue", "d": "3/2015"}, {"body": "also finding passing around props lot similar insin using default params awhile decided antipattern due subtle bugs cause forget pass newprops", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "think reason available always correspond rendered values way implement nt trigger another render without breaking constraint times using actually want either higher order component la relay something like observe hook proposed react", "d": "3/2015"}, {"body": "reference internal module fb basically fallback behavior handling old browsers special cases pretty unremarkable nt actually translate super well except maybe something meh working improving testing ways nt think anything really want right", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "interested using react inside chrome extensions add stuff pages may may using react chrome extensions share dom nt share javascript context page guess falls multiple react instances operating dom component tree", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "charypar said issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "3/2015"}, {"body": "think underlying reason happens nt relationship native events events react fires instance react responds onchange handler event actually listening cases input event click event cases happens bunch input components hood react smoothing browser inconsistencies give common event interface across browser test react components fine phantom js making use test utils react includes especially simulate triggers react event expect course may different situation works may different use case", "d": "3/2015"}, {"body": "issue jquery nt trigger real dom event tries find callbacks internal event map see", "d": "3/2015"}, {"body": "good solution using phantomjs trigger things like submitting form clicking button etc issue react listeners never get triggered", "d": "3/2015"}, {"body": "jongbeau", "d": "3/2015"}, {"body": "jquense yea played test utils interested end end testing phantomjs nt play well react", "d": "3/2015"}, {"body": "guess quite sure write tests using test utils phantomjs problems", "d": "3/2015"}, {"body": "used test utils jest able integrate directly phantomjs trigger events could share example", "d": "3/2015"}, {"body": "worth also ran problem nt know long would taken figure causing issue nt shown search results case using api control one fields uses raw html think would worthwhile link wiki page documenting causes obviously including one errors warning found helpful figuring went wrong need fix", "d": "3/2015"}, {"body": "use immutablejs record store state way use cursors convenience methods like update batching using immutablejs map store data nt maintain much state inside components mostly maintain global state objects inside data stores component state always replace entire state changes using never allow mixins change state currently using cursors hopefully support kind immutable state going forward", "d": "3/2015"}, {"body": "would nt mind removing replacestate would great possible override state merging would allow use immutable objects state without keep property regular object would also allow detect mixin tries use regular object state merge immutable object", "d": "3/2015"}, {"body": "warning changing state signature feels like overreach want suffer tiny performance hits convenience initialize false boolean values feel like able chastised compiler p suffer noise console", "d": "3/2015"}, {"body": "jquense advantages requiring complete readability obvious advantage always see one place state variables used another minor advantage forces component developers explicitly think component state consider state really necessary since ideally components stateless nudges developers direction much importantly forcing means identify stateful components allows performance optimizations across entire react app minor cost optimization surrounding staticallykeyed objects potentially frameworklevel optimization saving little convenience one person could mean lot performance loss lot people", "d": "3/2015"}, {"body": "reading existence enough optimization board problem issue sealing state object frequently employ sort pattern js getinitialstate return render return thisstateopen think react requiring explicitly initialize borders stylistic prescription since nt invalid javascript agree cases improved readability explicit declaration state also think often yet another multiline object literal middle constructor component definition reduces readability readability argument ultimately fruitless one given notoriously subjective readibility cs much rather team react make decisions possible course baring excellent compiler optimization ca nt done otherwise", "d": "3/2015"}, {"body": "agree jquense react prescribing style guides subjective readabilitydocumentation rules one nice features new class support react nt really care create classes long correspond interface time would introduce something prescriptive mere existence convenience means blocks features everyone nt use think flow already continue require define full state signature construction type static typing makes sense want stable type signatures also unlocks optimizations vms think enough us probably nt need add runtime warning nt think reactspecific optimizations would require state consistent however could see becoming case future still strongly recommend using consistent state regardless think safe remove jquense arguing pattern also requires reset state", "d": "3/2015"}, {"body": "regardless think safe remove replacestate jquense arguing pattern also requires reset state thisreplacestate sebmarkbage nope concern state sealing easy enough workarounds places used replacestate wo nt shed tear removal", "d": "3/2015"}, {"body": "thumbsup", "d": "3/2015"}, {"body": "sebmarkbage quick question migrating classes already using immutable maps whether use breaks immutable object alternative want keep using immutable states views thanks js class view extends reactcomponent constructor props thisupdate thisupdatebind thisstate immutablemap js class view extends reactcomponent constructor props super props thisupdate thisupdatebind thisstate new viewstate foo bar", "d": "3/2015"}, {"body": "question guess relevant one stores holding immutable state really need care components deal data states immutable ok leave react best trust actions triggering renders stores changing data always come fresh nonmutated source", "d": "3/2015"}, {"body": "done complete stable implementation see attached commit also works perfectly real reason", "d": "3/2015"}, {"body": "initial prototyping babelbabel pretty rough quite edgecases think nt handle good start becomes javascript use strict var ref reactcreateelement div classname foo function render return ref becomes javascript use strict var foo require foo function createcomponent text var ref reactcreateelement foo null text return function render return ref", "d": "3/2015"}, {"body": "nice", "d": "3/2015"}, {"body": "optimization affects runtime behavior though right", "d": "3/2015"}, {"body": "nt distinction value equality physical equality javascript trying change unlikely rely different referential equality two otherwise equivalent react elements never seen case unless mutable nested object case optimization apply", "d": "3/2015"}, {"body": "optimization ideally applied development mode safe", "d": "3/2015"}, {"body": "realized code js var currenttime reactcreateclass render function return new date var clock reactcreateclass componentdidmount function thisinterval setinterval gt thisforceupdate componentwillunmount function clearinterval thisinterval render function return right reactrender documentbody currently shows autoupdating time would optimization wonder come way catch development ie look dom mutations happen warn something", "d": "3/2015"}, {"body": "spicyj think definition constant values expression contains zero references nonlocal bindings zero sideeffectful expressions member expressions function calls etc assumption fine always evaluates constant nt eagerly execute currenttime render function descriptor", "d": "3/2015"}, {"body": "spicyj right reconciliation bails default element reused however relying global state without forceupdate supported use case solution add forceupdate timer deeper component mar pm jeff morrison notifications githubcom wrote spicyj think definition constant values expression contains zero references nonlocal bindings zero sideeffectful expressions member expressions function calls etc assumption fine right always evaluates constant nt eagerly execute currenttime render function descriptor reply email directly view github", "d": "3/2015"}, {"body": "guess difference nt forceupdate ie nt comply lose rerender whereas optimization could actually breaking ui rendering", "d": "3/2015"}, {"body": "well still ui rendering yea added risk make following two assumptions value type including class idempotent always called pure function nt runtime static type system support validating things yet rely convention enforce constraints violate sol however optimization place risk getting screwed easy shoot foot places violate principals make harder bring value types pure functions runtime flow make easier ensure compliant need punish compliant code wait idea pseudorandom double rendering validate renders idempotent", "d": "3/2015"}, {"body": "like propose moving initialization static elements either componentwillmount constructor caching module level taking static elements huge react app would add significant initialization time overhead also initialize components might rendered imagine downloading full js app rendering one view time propose optimization reactcreateclass classes extend js class mycomponent extends reactcomponent render function return var ref class mycomponent extends reactcomponent constructor props context super props context render function return ref similarly call would inject create", "d": "3/2015"}, {"body": "cpojer probably make", "d": "3/2015"}, {"body": "oh yes course edited example could also course single check static components one module like ifstatement", "d": "3/2015"}, {"body": "simpler transform would might little slower proposal much easier transform", "d": "3/2015"}, {"body": "cpojer much specific optimization ties specifically assumptions react classes nt think ready yet see advanced optimizations use cases optimization really generic one employed functional engines value type also generalizable value types proposal really hold react specific ones also argue nt need react class nt intend call render yet whole module class deferred much generic optimization used lot things separate issue", "d": "3/2015"}, {"body": "reason however include transform nt think would make transform much harder build proposing allowing general optimization react components separate optimization makes work better react components", "d": "3/2015"}, {"body": "cpojer ties subtle differences react semantics ca nt prove sound example would nt work subclass nt call super constructor would nt work etc spicyj suggestion would safer comes performance penalty besides allocate binding slot variable regardless think better investing generic optimizations lazy initialization entire module body need statics pull apart main classes example could transformed something equivalent", "d": "3/2015"}, {"body": "done complete stable implementation see attached commit still need add lot tests absolutely confident reliability", "d": "3/2015"}, {"body": "sebmarkbage would nt work eg think universal guarantee underlying dom node lives long owning component unless polyfilled dom components exposed nt seem plan edit even forcing guarantee hold frontend implementations unless way force refresh refs", "d": "3/2015"}, {"body": "refs gets attachedreattached time eg js respond firing ref callbacks updating difference stash ref away state closure somewhere even seems like problem whose changes quickly dying seems like uncommon edge case", "d": "3/2015"}, {"body": "sebmarkbage even seems like problem ref input whose type changes quickly dying seems like uncommon edge case sure holds every frontend agree input kind special could one imagine something similar frontends able refresh refs would solve ever came", "d": "3/2015"}, {"body": "thanks zpao eta looking mobile app soon would love give react native try feel like could waiting years come", "d": "3/2015"}, {"body": "would absolutely love eta thanks smile", "d": "3/2015"}, {"body": "super rough timeline order weeks months nt hold us though even first version fully open sourced points friction take another month get ironed", "d": "3/2015"}, {"body": "thank work really got excited", "d": "3/2015"}, {"body": "jordwalke guys giving early access repo eager look repo even nt productionready yet", "d": "3/2015"}, {"body": "updates regarding experiencing problem", "d": "3/2015"}, {"body": "hit problem nt think react issue looks like svg standard nt support", "d": "3/2015"}, {"body": "sebmarkbage nt jsx transformer component defined using classes", "d": "3/2015"}, {"body": "actually might able fix though would nt proper fix right thing would make class transform look inside templates strings maybe change order run transforms jeffmo known issue running template transform class one see constraints internally", "d": "3/2015"}, {"body": "zpao thank explanation really needs visible", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "ca nt seems like could change createelement function accept constructor collection like immutable map could smart building right type props object cc brigand suggestions dmhood making immutable give us equality test dmhood wo nt props least object already adding map interface allow us easily use libraries immutablejsclojurescriptetc bring along features need dmhood point nt understand want props considered class sorts fixed structure dynamic map keys like would nt expect options object map nt see benefit expect get using library construct props cases values dynamic keys library adds overhead readable way requires compile time transforms nonchanging props brigand yes certainly works truly static props works equally well objects immutable maps", "d": "3/2015"}, {"body": "think brigand nailed props opaque react user data fact react uses keyref unfortunate mixes internal requirements user rendering input see convenience case still resolved", "d": "3/2015"}, {"body": "syranide really would using record data structure ensure keys never change figured map interface would genericused others although props made opaque rather moot", "d": "3/2015"}, {"body": "dmhood works forced believe", "d": "3/2015"}, {"body": "important conversation far see though actually couple issues useful use map data structures eg immutablejs maps directly custom components props useful use map data structures eg immutablejs maps regular dom elements props either true things like live props map contain live somewhere else would accessed useful use map data structures eg immutablejs maps regular dom elements props mentioned original post personally think answers questions yes though question matters much thing props nt always simply options constant keys commonly contain nested model data addition model data often might variable keys particular css styles especially useful consider manipulable often use large nested clojurescript data structures express elements css styles later dynamically merging together adding removing keys runtime possible persistent immutable data structures possible deeply frozen regular objects without full copying far know stopgap possible fully convert data structures regular javascript objects every render order readable right course wasteful case nt sort data would benefit regular objects backing classes constant keys question ie would etc remain props object map nt know want nt affect question question might biggest obstacle implementing questions might reason vs would performance problem reactinternal code relies reading elements keys refs children would determine access information also needs add opaque children object might practical use eg without much penalty nt really yet understand vs huge performance problem since sort thing otherwise already user react already problem custom components using custom model data ie user already using anything like immutablejs react prides anyway prescriptive user models bigger much fundamental problem would might slow complicate reconciliation especially map support added dom elements hopefully would nt case nt yet know enough details reconciliation implementation really know know though allowing user choose javascript objects whatever map data structures want dom element style dom element props custom component would bring least benefits way many people use react happen care first case considering creating issue focusing", "d": "3/2015"}, {"body": "cigitia unofficial answer ca nt see benefit using library constructing props object example makes sense please share perspective making complicated adding overhead breaking compatibility components benefit ps already separate", "d": "3/2015"}, {"body": "syranide unofficial answer right thanks answer question using generic data styles extremely useful able express styles data let end user manipulate application ui serialize eg enduser ui themes dynamically merge manipulate react native already supports last sort thing merging stylesheets yet supported regular react even better serializability manipulability generic style data could used considered separate issue ps key ref already separate props ah whoops thinking keys refs passed arguments etc sorry", "d": "3/2015"}, {"body": "cigitia inside technically unrelated discussion universal restriction object interpretation properties responsibility component case technical reason say performance imagine supported generic iterators future", "d": "3/2015"}, {"body": "syranide right thanks make separate issue", "d": "3/2015"}, {"body": "cigitia yes yes yes point would prefer options used reactjs internally live argument mixed opaque user data syranide seems one thread seeing benefits using anything else pojsos props objects offense many see reasons explained nt see benefit expect get using library construct props cases values dynamic keys library adds overhead assume users constructing data reactjs ie view little besides view layer handled reactjs false assumption cases reactjs view data structures already existing app convert pojsos adds extra overhead really nt see someone argue user data nt opaque library", "d": "3/2015"}, {"body": "skrat syranide seems one thread seeing benefits using anything else pojsos props objects offense many see reasons explained could issue people wanting feature anyway perspective purely logicaltechnical someone show actual example makes sense fine ca nt think one far talk get might natural om besides point imho clear distinction objects maps good objects perfect fit fixed set known keys values type small size fast create fast access also immutable need immutablejs", "d": "3/2015"}, {"body": "honest really idea want able download programs put use different websites real computer savvy trying really hard understand stuff", "d": "3/2015"}, {"body": "worth also related issue particular sebmarkbage appears float idea promoting immutablejs receive builtin support directly used states might considered analogous discussion idea props", "d": "3/2015"}, {"body": "majority cases event handler wanted bound instance class defined createclass autobinding makes lot sense createclass used classes nt available slowly moved away favour classes ca nt see autobinding reactcomponent magic render method provides first place removes lot boilerplate manually bind handlers create big win think many people end adding autobinding back done snippet either extending component hoc problematic end rewritten much nt think react would taking liberties class adding useful common behaviour reactcomponent people quite easily override need whatever reason change context method instance class defined ca nt see harm reactcomponent autbinding little performance loss implementations add back anyway render construction unnecessary boilerplate", "d": "3/2015"}, {"body": "removes lot boilerplate manually bind handlers create big win times use arrows nt see lot boilerplate miss", "d": "3/2015"}, {"body": "miss arrows nt implemented yet try latest babel experiment playground runtime still undefined within class arrow function raises question arrow function actually implemented way work feel quite long time arrow function behaves desired way class boilerplate likely transition people attempting implemented class edit spoke sebmk class property initializers getting proper implementation next major release weeks max fat arrows within class property initializers reference target static reference actual class reference instance also decorators coming experimental flag solves concerns greatly still work progress spec feel decisions remove autobinding component classes could implemented later proposal set", "d": "3/2015"}, {"body": "arrows nt implemented yet try latest babel experiment playground runtime still undefined within class arrow function raises question arrow function actually implemented way work using several months talking proposed arrows properties syntax mean using arrows binding handlers js class app extends reactcomponent render return handleclick consolelog works covers use cases surely causes extra yeah hot paths nt really see worth adding autobinding magic react component classes face exact problem regular classes want listen something event handlers makes sense use utility library autobinding like autobinding use react components classes really nt reactspecific problem", "d": "3/2015"}, {"body": "precisely boilerplate talking normal classes nt event handling built would feature added class library etc autobinding could easily happen common use case reactcomponents less boilerplate would think greatly encourage adoption see edit class instance autobinding work fat arrows soon hopefully seems like fat arrows nice different behaviour class definitions object literals concerns answered wait weeks", "d": "3/2015"}, {"body": "precisely value react making prescriptions code want autobinding totally write base class util handle us nt want nt need undo built behavior honest want autobinding use create class already solution want moved away depreciated reason use like behavior", "d": "3/2015"}, {"body": "explored ways nt require binding would require massive changes framework yet found one works idiomatic binding callback way would move away callbacks completely fully declarative model kind signalchannelevent however imho api design still unsolved problem therefore data structure use events callbacks need combine particular instance since multiple instances component page point use binding bind important task react provide idiomatic component boundary different components interop issue purely implement component nt matter component long somehow however want still work larger community therefore nt think put anything opinionated like framework recommend using property initializers arrow function one way jeffmo presenting committee next week things moving along babel adjust support", "d": "3/2015"}, {"body": "never mind realized accomplished quite easily setting unique value wherever wish remount entire tree", "d": "3/2015"}, {"body": "nice trick know tgriesser thanks", "d": "3/2015"}, {"body": "synchronous takes gt trivial view hierarchies seems superproblematic people hitting obvious workaround besides caching missing", "d": "3/2015"}, {"body": "synchronous rendertostring takes gt trivial view hierarchies seems superproblematic busticated nt hard facts moment makes sense performance definitely slow probably running devversion av react far slower probably something else funky well guessing counting dom components either generally really large components also caching always answer different react", "d": "3/2015"}, {"body": "syranide thanks noted actually seeing similar numbers could well result something silly config etc afaik required disable dev mode serverside least ruled sidenote docs would nice component size amp count need collect hard data views certainly complex something like", "d": "3/2015"}, {"body": "performance definitely slow probably running devversion av react far slower actually probably something else funky well yes benchmark way multiple reasons production server render times even biggest pages around small sample size manual test setup one node see post results proper data monitoring production suspecting main reason tests skewed lack jit warmup guessing counting dom components either generally really large components yes pretty large components posted initial numbers also string replaces ran massive strings contributing big chunk time spent side note experimentation streaming caused trouble worth ended reverting manual document splitting turned connectgzip nt like machines environment", "d": "3/2015"}, {"body": "jussikalliokoski ah thanks update", "d": "3/2015"}, {"body": "case helpful anyone also ran problem also bug code relating promises least q exceptions swallowed call code triggered looked like solution add done tells q done promise wo nt adding error handlers save raise exception", "d": "3/2015"}, {"body": "sebmarkbage would worth try add functionality presumably larger task moving proptype validation happens gon na tackle think huge improvement warning nt want waste time something bigger better coming pike", "d": "3/2015"}, {"body": "sebmarkbage second thought disregard moving validation dom element properties mounting definitely right move take deeper look seems like would pretty clean move", "d": "3/2015"}, {"body": "could someone tell still preventing taken away trying get head around", "d": "3/2015"}, {"body": "skevy think still props nt really immutable yet possible mutate creating element want validation happen element creation long support modifying element need actually validate mount time cc spicyj", "d": "3/2015"}, {"body": "familiar validation setup", "d": "3/2015"}, {"body": "could someone tell still preventing taken away go away deprecated mutating props elements still old behavior stop supporting mutating props thus old behavior removed", "d": "3/2015"}, {"body": "thanks guys appreciate insight honest forgot could even mutate props never used seems like good thing nt deprecated", "d": "3/2015"}, {"body": "case show custom error suppose although technically possible pass function mixin long function component lifecycle functions defined properties probably common scenario maybe change simple reactclass attempting use function mixin would trick", "d": "3/2015"}, {"body": "zpao update status code documentation updated", "d": "3/2015"}, {"body": "look shouldcomponentupdate evaluate together done", "d": "3/2015"}, {"body": "jackwanders would mind sharing deferred contents componentdidupdate use requestanimationframe thanks", "d": "3/2015"}, {"body": "wondering thanks gaearon trick works expected", "d": "3/2015"}, {"body": "nt think solved easy reproduce react child return rather frustrating developer may change animated component return data ready realize breaks case component inside transition group", "d": "3/2015"}, {"body": "yup ran well pass component reactcsstransitiongroup renders null get exception using react", "d": "3/2015"}, {"body": "spicyj please reopen", "d": "3/2015"}, {"body": "sebmarkbage states class methods longer enumerable default break lot tests jest relies property one projects aware workaround", "d": "3/2015"}, {"body": "flag turn back old behavior workaround get fixed jest", "d": "3/2015"}, {"body": "preprocessor", "d": "3/2015"}, {"body": "zpao thanks tip driving crazy sebmarkbage issue track jest project", "d": "3/2015"}, {"body": "know issue closed like discuss little bit asked understand reasons make deep merge reckon could possible behaviors passing deepmerge option component component props behavior options making exception proptype matching attributes like props question case could expect prop behave expectingly right think", "d": "3/2015"}, {"body": "slorber calling makes bad user experience since causes loss local state think time declare context official feature using context option people router reactintl uses", "d": "3/2015"}, {"body": "cody et al clear context still subject change still experimenting still recommend avoiding decided final api usage risk useful probably ready", "d": "3/2015"}, {"body": "cody problem loose local state nt local state whole app manages immutable state purely outside react check video done framework", "d": "3/2015"}, {"body": "think need bypass shouldcomponentupdate new context anywhere parent tree potentially shouldupdatechildcontext something determines entire subtree needs reconcile yes makes nice symmetric", "d": "3/2015"}, {"body": "reacttransitionevents nt public module particularly concerned api nt sound like bug per se close let know misunderstanding also willing consider pull request feel inclined", "d": "3/2015"}, {"body": "moment react project touch events still trigger touch devices without initializetouchevents", "d": "3/2015"}, {"body": "also curious would used loading react app ios simulator things seem ok without explicitly setting initializetouchevents true fair nt tried actual device", "d": "3/2015"}, {"body": "removed", "d": "3/2015"}, {"body": "btw docs sources fixed", "d": "3/2015"}, {"body": "really nice unit test probably start using error boundaries issue fixed", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "raised ugly head since error message uncaught error invariant violation component keys getdomnode handlechange props context state refs reactinternalinstance contains method mounted dom spicyj zpao syranide", "d": "3/2015"}, {"body": "repro case sure calling getdomnode time node still dom", "d": "3/2015"}, {"body": "well yes guess works fine baked app ca nt repro without uploading test app happy helps call happening inside", "d": "3/2015"}, {"body": "getting upgrading problem seems exist input nested components within react bootstrap modal close modal ca nt get much trace though", "d": "3/2015"}, {"body": "mfunkie yes case sounds exactly except using bootstrap", "d": "3/2015"}, {"body": "modal using react bootstrap overlay mixin creates new react tree render modal child component opening closing trigger error anymore could related react elements different tree called reason input node still checked updates", "d": "3/2015"}, {"body": "turns issue two components listening flux store container component would run overlay inner body modal adding following function inner modal body able avoid error best guess change listener still queued run inner state rendered modal already considered closed", "d": "3/2015"}, {"body": "charypar said issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "3/2015"}, {"body": "main workaround many modular react components using specify react parent module must provide react prevent multiple copies problematic track become deprecated introduce dependency hell", "d": "3/2015"}, {"body": "seen lot well lots requests switch react packages currently resisting reasons aearly mentioned common frustration seen npm subtly installs two versions react browserify correctly includes build happen unexpectedly w package updates breakage ensues warning react hey one page seems like elegant way warn developers early direct explanation gone wrong fix sideeffect npm dependency rules node behaviour end two reacts want one looks like things get better see npmnpm meantime agree gaearon adding lesser evil hack good argument made nt react problem solve since common problem react solve think would great", "d": "3/2015"}, {"body": "jedwatson solution found alias calls like example shown grunt nt impossible fix make argument since common issue needs highlighted clearly react docs", "d": "3/2015"}, {"body": "going ship let call one done", "d": "3/2015"}, {"body": "issue although easily fixed syranide diy patch still exists fbpackaged reactminjs sorry nag end fault anyway", "d": "3/2015"}, {"body": "markplindsay nt verified fixed upstream uglifyjs time ago solved zpao possible running build process older uglifyjs", "d": "3/2015"}, {"body": "syranide thanks followup looking wgot changing adding line column still fixes issue", "d": "3/2015"}, {"body": "zpao ah apparently locked uglifyjs dependency whereas fix perhaps one sure tag means reason update dependency right", "d": "3/2015"}, {"body": "post saved also trying manually fire events switched event type success wanted say thanks", "d": "3/2015"}, {"body": "hi simple use case set style react component including shorthand property modifier property ex set new style without modifier new style object wont apply properly case inline style remains codepen example", "d": "3/2015"}, {"body": "azazdeaz invalid may set overlapping styles", "d": "3/2015"}, {"body": "discussed anymore", "d": "3/2015"}, {"body": "believe back february tried patching fork reactjs make components treat null undefined change fairly simple several tests saying specifically want null override defaults personally think one tiny part reactjs crazy certain fb internal use case end found easier rewrite internal ajaxjson library automatically replace fetching data", "d": "3/2015"}, {"body": "nt know fine accepts bothers behaviour want require prop perhaps ugly something like although better name would work fine alternative simply", "d": "3/2015"}, {"body": "another usecase described detail workaround understand hard implement rare know nothing react internals yet throw idea could mark virtual parent elementsfragments dom comments eg would render means c treated children sth including nested reactid conflict b e seen frameworks misuse comments kind semantical jobs", "d": "3/2015"}, {"body": "prinzhorn think might confusing dom output react jsx", "d": "3/2015"}, {"body": "jamesknelson added getting uncaught typeerror ca nt add property pendingstatequeue object extensible edit actually loaded running app time error using requireing everything also using reactrouter", "d": "3/2015"}, {"body": "natew using patch since posted nt believe gotten issue using", "d": "3/2015"}, {"body": "yea using loading anything seems load alright error later nt dig deep see ideas front super high priority revisit soon", "d": "3/2015"}, {"body": "jamesknelson enabled would worth updating trying patch", "d": "3/2015"}, {"body": "chance might get documentation contexts work seen vague mention feature react blog seen use projects reactrouter perhaps also reapp code projects throws warnings needs migrating love contribute feel unable help make situation better still dark contexts supposed work", "d": "3/2015"}, {"body": "zenlambda maybe help", "d": "3/2015"}, {"body": "heads anyone using contextpatch running errors bug bit drove mad last couple hours child class attempting use undefined component happens case trying import textarea rather textarea certain error due mounting routes parent class funny enough children routes tried textarea bug spent forever changing parents got skull", "d": "3/2015"}, {"body": "trouble transition skipped components use componentwillmount andor componentdidmount moving transition fixed although seems counterintuitive weird", "d": "3/2015"}, {"body": "last problem probably special case unable detect caused happen newer versions react csstransitiongroup breaks often transitiongroup seems work fine times though get error csstransitiongroup saying callback failed fire least sort detection going think csstransitiongroup rely timeout callback fails fire", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "uptodate unofficial files react let know issues file issue definitelytyped cc vsiao", "d": "3/2015"}, {"body": "one way got around issue stop mouse event fired component listening blur event eg js handleblur function eventrelatedtarget thishandlehide handlemousedown function event eventpreventdefault render function seems work fine browsers though nice get ieff", "d": "3/2015"}, {"body": "emecell wo nt stop clicks generated elements inside div", "d": "3/2015"}, {"body": "thanks neonstalwart prove useful use case form consisting two fields click tab nt want anything special happen moment fields become unfocused want replace form another element aka set state stuff", "d": "3/2015"}, {"body": "issue", "d": "3/2015"}, {"body": "spicyj since support classes anything add issue", "d": "3/2015"}, {"body": "components implemented classes able mock class methods using jest framework standard mocking mechanisms nothing reactspecific necessary case let know reopen", "d": "3/2015"}, {"body": "work pretty hard create accessible ui found react breath fresh air focus management nt seen discussion around using callback focus management complex one taken straight app working", "d": "3/2015"}, {"body": "laurilehmijoki nt use render rendering use lifecycle hook coffee render gt componentdidmount gt code statecaptchaisloading false refscaptchaanswerfieldgetdomnode focus code probably wherever want focus captcha first time state changes every time data view changes causes render", "d": "3/2015"}, {"body": "never address op scenarios manageable lifecycle hooks provided react guarantee node documentvisible visibility hard detect due components firing render callback lifecycle hooks guarantee render complete like guarantee x finished pending renders x renders focus lost last notes use right hooks render guaranteed focus lost rendering node completely changed react applies vd diff nt blow away focus render happens render returns ui longer contains node focus fires child nodes parents case html ca nt focus want show focus button component focusing componentdidupdate affect still hidden trying focus become visible guess becomes visible via change receiving new props case use callback changed state check state props focus though would discourage using anything setstate callback nt want focusing button every time state changes component original transaction made want focus first place", "d": "3/2015"}, {"body": "found super helpful removes node dependency nashorn", "d": "3/2015"}, {"body": "interim solution get desired behaviour", "d": "3/2015"}, {"body": "need manually clean events persisted", "d": "3/2015"}, {"body": "get garbage collected like object", "d": "3/2015"}, {"body": "jmarr thx timeouttransitiongroup fix issues", "d": "3/2015"}, {"body": "causing issue changing browser tab", "d": "3/2015"}, {"body": "caedes works", "d": "3/2015"}, {"body": "still issue happy discuss could go order try tackle easy digest docs key getting people running amp avoiding thinking complex actually", "d": "3/2015"}, {"body": "ansavvides ask doc really confusing cluttered", "d": "3/2015"}, {"body": "remember planned revamp worked though sure happened", "d": "3/2015"}, {"body": "ah see revamp works great yeah think hierarchy structure needs bit love content good knowing get right place tricky usually means resolving google searches", "d": "3/2015"}, {"body": "problem serverclient checksum compared two results program shows content difference number xxxxxxxxxxxxxxxxx server pavel klimashkin pavel klimashkin \u043c\u043e\u0439 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0445\u043e\u0434 client pavel klimashkin pavel klimashkin \u043c\u043e\u0439 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0445\u043e\u0434", "d": "3/2015"}, {"body": "react contributor somebody subscribed issue klimashkin probably open new issue bug report one old already closed", "d": "3/2015"}, {"body": "klimashkin xxxpart key provided seems inconsistency side indicates key", "d": "3/2015"}, {"body": "thanks syranide absolutely right", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "full svg support addons", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "zpao spicyj supported way adding individual svg elements react without monkeypatching reactdom svgdompropertyconfig", "d": "3/2015"}, {"body": "sorry", "d": "3/2015"}, {"body": "image foreignobject", "d": "3/2015"}, {"body": "mjackson idea simple workaround use conditional find lot different properties could generalize pattern", "d": "3/2015"}, {"body": "feature would nice want enforce props definitiondocumentation project wonder possible explicitly whitelist generic components accept props based example zpao gave", "d": "3/2015"}, {"body": "additionally guys want native numeric keyboard mobile could wrap input something like js class input extends reactcomponent render var type navigatoruseragentmatch mobi amp amp thispropstype number number text react could dig patchhack", "d": "3/2015"}, {"body": "problem", "d": "3/2015"}, {"body": "whats situation want props value input change value onchange function ca nt change props value ca nt use state", "d": "3/2015"}, {"body": "syranide sebmarkbage different probably exception know least cssrules obvious one guess although extremely rarely used seems legit uses apparently attribute may part exception well see things note element attribute set element attribute set value problem html behaves differently chrome firefox suppose expected valid values dir ltr rtl auto assume behavior value value undefined perhaps browser ignores chrome nt seem case component place", "d": "3/2015"}, {"body": "ezequiel ah good know", "d": "3/2015"}, {"body": "react shallow rendering allows render one level deep test output attempting dispatch events tests currently results error due dom available js import react reactaddons class button extends reactcomponent constructor props super props thisstate pressed false let shallowrenderer reactaddonstestutilscreaterenderer let component shallowrendererrender let button shallowrenderergetrenderoutput fails due missing window global reactaddonstestutilssimulatemousedown button", "d": "3/2015"}, {"body": "reactaddonstestutilssimulate already implemented react native would presumably issues", "d": "3/2015"}, {"body": "looking issue zpao using coverify output lcovinfo code climate give lines code executed get limited information get many times line executed number branches hit number functions hit etc", "d": "3/2015"}, {"body": "hit one rendering component inside anchor tag sidebarcomponent reactcreateclass render function return ends nested inside anchor tag throw invariant violation seems like way detect", "d": "3/2015"}, {"body": "cmwelsh help next release", "d": "3/2015"}, {"body": "warning ugly duplicate option top list right going duplicate option server side warning goes stderr systems interpret real problem", "d": "3/2015"}, {"body": "still alive sebmarkbage pass state reference callback tell use instead right tweenstate breaks lot code though", "d": "3/2015"}, {"body": "want pass method think must pass case look little weird example someone uses property", "d": "3/2015"}, {"body": "sebmarkbage think come feasible solution traitsjs javascript import traits import react reactaddons export const using traits export const autobind constructor objectgetownpropertynames thisconstructorprototype filter x gt xstartswith map x gt x x bind export const purerender objectassign reactaddonspurerendermixin somecomponentjs javascript import react react import using autobind purerender traits export default class somecomponent extends reactcomponent using autobind purerender syntax bit longer proposed concise imho actually went numerous api ideas finally settling one package available based brigand excellent since offering composition conflict resolution mechanism calling traits instead mixins", "d": "3/2015"}, {"body": "syntax hacks impressive like looking source think second example needs ca nt shared multiple classes js import react react import traits import autobind purerender traits const using traits export default class somecomponent extends reactcomponent using autobind purerender also like use constructor componentwillmount traits feels much pure", "d": "3/2015"}, {"body": "brigand shared also specify different resolution rulesets different classes like need find time come document add browser support played inside jsbin etc suggestion api lib work welcome", "d": "3/2015"}, {"body": "followed", "d": "3/2015"}, {"body": "would seem unless react going move event hook based system lifecycle methods methods need handled specifically ca nt mix prototype means whatever solution going react specific like something like following clear extending reactcomponent purerendermixin mixed javascript user code class mycomponent extends reactcomponent purerendermixin reactcomponentjs function reactcomponent props context instanceof reactcomponent argumentslength return createmixedcomponent arguments return reactcomponent thisprops props thiscontext context", "d": "3/2015"}, {"body": "mlrawlings looks great", "d": "3/2015"}, {"body": "mlrawlings", "d": "3/2015"}, {"body": "implementation mlrawlings syntax look much cleaner switch classes probably write like small transform move early errors nt worth giving imo luckily nt need compromise", "d": "3/2015"}, {"body": "opinion higher order components new observe hook solve almost use cases mixins", "d": "3/2015"}, {"body": "gaearon looks promising little bit reactspecific mlrawlings example ideal require manually wrapping classes function wonder possible way abstract part generic lib", "d": "3/2015"}, {"body": "proposal annotations use something like abstract mixins", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "chicoxyzzy nt really add value able declare mixins class code annotations nt anything need something else act classes either directly class via instances via etc js used instanceof check annotations may used class reactmixin constructor mixin thismixin mixin reactmixin purerendermixin class foo extends reactcomponent applymixins foo function applymixins class classannotate classannotateforeach maybemixin gt apply mixin behavior mixin annotation maybemixin instanceof reactmixin reactmixin classprototype maybemixinmixin gaearon pointed expect alternatives mixins coming months maybe get annotation support babel", "d": "3/2015"}, {"body": "think babel already annotation support behind flag", "d": "3/2015"}, {"body": "brigand think idea add decorators annotations class decorators code possible decorator works like also think decorator syntax useful higher order components instead write", "d": "3/2015"}, {"body": "bump still super useful could really done today", "d": "3/2015"}, {"body": "maybe deprecation premature", "d": "3/2015"}, {"body": "context going parentbased request obsolete closing", "d": "3/2015"}, {"body": "understand reasoning behind keeping events props interface similar bit times stupid typos refactorings react usually good failing early loudly dev gotchas seems like odd oversight imo fine sentinels space intentionally left blank javascript idiotic way handling right never nice addition", "d": "3/2015"}, {"body": "found problem minimal failing example react however appears fixed ideas commit fixed nt tests exercise might creep back", "d": "3/2015"}, {"body": "perhaps related created simple test case based stephenjudkins jsbin currently passes unfortunately unable run tests anything besides master ca nt really validate javascript update parent component state componentwillmount function see var reactcreateclass getinitialstate function return callback function value thissetstate x value render function return hello thisstatex", "d": "3/2015"}, {"body": "afaik longer exists react issue irrelevant", "d": "3/2015"}, {"body": "stumbled issue using event bubbling handle lots controlled input change events one parent form element understand helpful warning triggered huge number times big forms used following hack probably extremely bad idea suppress make sure put file named something like nt forget bad idea ideas could potentially supported officially something worth avoid mess detecting controlled inputs handled correctly maybe way declare component understand warning nt need", "d": "3/2015"}, {"body": "config share", "d": "3/2015"}, {"body": "scboffspring gulp browserify", "d": "3/2015"}, {"body": "yes please", "d": "3/2015"}, {"body": "discussion far mostly talks writing jsx syntax ts files get benefits typescript static analysis would nice way get benefits typescript way write translator jsx ts could simple change existing jsx js translator also syntax extensions specify state props fields types interface translated ts typescript compiler verify usage props state fields", "d": "3/2015"}, {"body": "discussion far mostly talks writing jsx syntax ts files get benefits typescript static analysis would nice way get benefits typescript way write translator jsx ts could simple change existing jsx js translator also syntax extensions specify state props fields types interface translated ts typescript compiler verify usage props state fields tried way lot complex fork jsx support firstly anyway need parser understand typescript jsx anyway secondly integration build step typescript makes pretty hard take advantage language service finally typechecking compiled jsx handled pretty well typescript reasons think jsxtypescript lot safer easy manage build step jsx ts", "d": "3/2015"}, {"body": "petilon exactly suggests demoed concept along showing simplistic type checking state props using webpack super easy integrate using tsjsxloader said everything fdecampredon says true get around parser understanding typescript jsx regular expressions instead parser set problems also require explicitly marking jsx certainly understand many people fan approach definitely lacks sort language service integration intellisense etc lastly typechecking props using definitely good show talk show parts work skip parts nt", "d": "3/2015"}, {"body": "adding bit personal experience discussion tried alternative route separate jsx templates code using reacttemplates attempted make work typescript sad conclusion work well combination typescriptintellijwebstorm even latest support also one needs import another file compiled template sometimes end circular dependencies impossible solve rigid import top feature typescript typical exemple recursive display menu object otha inline solutions like tsjsxloader intellijws work great use backticks templates strings syntax coloring autocompletion available html inside template string", "d": "3/2015"}, {"body": "problem intellij nt use languageservice make hard adapt different ts version", "d": "3/2015"}, {"body": "fdecampredon sure follow mean variablescontext discovery addition syntax autocompletion using syntax ij get syntax coloring autocompletion jsx nothing inferred works nearly cases sure never good direct full support jsx typescript compiler ijws syntax analyzer", "d": "3/2015"}, {"body": "typescript comes bundled languageservice utilities editor development last time checked intellij use visual studioatomtypescript etc directly use different typescript fork like jsxtypescript box long respect language service interface work intellij", "d": "3/2015"}, {"body": "could nt jsx simply escaping possibility case typeassertions either way think jsx transformer escaping", "d": "3/2015"}, {"body": "progress seems good fit cases issue multiple places makes hard use", "d": "3/2015"}, {"body": "sorry progress hard make happen automatically current architecture", "d": "3/2015"}, {"body": "please nt use class class inheritance anywhere specifically context react completely missing point reactive programming super codesmell anywhere particularly abhorrent reactive programming sometimes elegant implementation function method class framework function john carmack", "d": "3/2015"}, {"body": "agree ericelliott declare components classes feels weird using reactcreateclass feels sugar internals abstracted function maybe missing something good benefits use classes react least hope dont deprecate createclass future", "d": "3/2015"}, {"body": "agree oo concepts dynamic dispatch make code difficult reason using js classes could still used group related functions together operate expected form data without needing allocate separate instances functions per instance using js comes dynamic dispatch downsides accomplishing javascript without way using would difficult even react form react still using prototypes managed ensure people nt abuse believe possible classes", "d": "3/2015"}, {"body": "export factory instead class like react today help users avoid jungle full pitfalls gorillas", "d": "3/2015"}, {"body": "ericelliott note classic react factories created oop classes like classes support kind inheritance mixins fact also supports multiinheritance opens even pitfalls fact mixins unfortunately seen primary way abstractions classes react adding anything could nt already fact constraining encouraging object composition instead mixins unfortunate marketing effect move seen encouraging oop really stance progress space ca nt take things away developers taught alternatives scale includes class system provides optional escape hatch need rather completely stopping primary feature class system provides instance handle several features provides certain level familiarity convenience use middle man refer group arguments footgun makes easier onboard new people instance id use refer place tree allows apis like thirdparty apis unify around provides single multiple inheritance features someone needs create abstraction ca nt figure using composition unfortunately common problem developer ca nt figure way nt want get stuck therefore oop escape hatch time trying teach encourage composition components higher order functionscomponents instead oop still implement top class systems practice common enough start deprecating old class systems however make progress teaching encouragement force phase two start introducing pure models see alternatives working replace instances abstraction model well declarative ways updating state", "d": "3/2015"}, {"body": "stateless function example linked exactly want write components ideally purerendermixing behavior built looking forward future", "d": "3/2015"}, {"body": "sebmarkbage little hazy need point examples instance handle use provide inheritance options see prototypal inheritance stamps currently project underway make stamps produced stampit immutable well pitfalls experience single inheritance many pitfalls style mixins", "d": "3/2015"}, {"body": "stateless functions", "d": "3/2015"}, {"body": "npm install g jsxc worked", "d": "3/2015"}, {"body": "sort solution think prefer attributes whitelist huge number possible svg attributes many currently unsupported makes quite pain anything beyond basic svg rendering react shame think svg react wheelhouse definitely run mask issue mentioned time though markerwidth markerheight causing problems", "d": "3/2015"}, {"body": "hey everybody check meteor implementation tracker queue state changes flush requestanimationframe unless explicitly call trackerflush proces pending changes never end invalid state ie appearing dissapearing nowhere either changes pending resolved using trackerflush end event cycle summarize read add method process queue want force state changes immediatly example need inbetween results updated state calculations", "d": "3/2015"}, {"body": "markmarijnissen example works react specific example work correctly advised react currently give broken results state changes time problem reading nt give result expect whilst pending updates therefore example broken setstate read enqueuestatechange whilst accurate current behaviour useful want changed pending state", "d": "3/2015"}, {"body": "markmarijnissen systemparadox take function react solves problem pending state", "d": "3/2015"}, {"body": "syranide nt solve azoerb example problem must say disappointed change setstate react nt solve problem solidifies current behaviour", "d": "3/2015"}, {"body": "azoerb checkalarm example rewritten one important performance improvements react introduced way avoid readwrite thrash batching using declarative update model nt depend order execution solidifies part behavior made react fast enough begin mental model state part return value introduce mutable data structures allow mutate things go nonlocal mutable state difficult reason scale would recommend use functional approach scheduling work also part makes react performant make even performant", "d": "3/2015"}, {"body": "oh see thank example aware react batches rendering course pending state nt understand component api forces us work time spicyj said beginning update thisstate immediately leave ui update batching mechanism later anything would affected belongs anyway", "d": "3/2015"}, {"body": "would possible synchronous flushing mechanism like markmarijnissen proposed take check alarm example safe move elapsedtime props like however safe case synchronously updated eg safe even state uptodate would introduce synchronous able read props synchronously two subtree one unnecessary rerender entire tree updates subtree unnecessary rerenders", "d": "3/2015"}]