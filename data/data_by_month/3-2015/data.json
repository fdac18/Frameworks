[{"title": "reacttools jsx ignores x src build dirs", "body": "existing project complex directory structure js files moving one time react components existing build system takes js files structure produces final built files directories take one js file time convert jsx file jsx file changes compiler builds resulting js file rebuilds file js file added tree reproduce assume directory structure within run build sourcejsx file make change sourcejsx file notice builds twice second time js file gets added tree", "num": "3551", "d": "3/2015"}, {"title": "using w x causes multiple rebuilds", "body": "using recompile source output generated appears matching strict enough assume directory structure within run build another terminal open make modifications switch back previous terminal see gets updated rebuild source", "num": "3550", "d": "3/2015"}, {"title": "add warnings incorrect casing event handler properties", "body": "hi react currently warns incorrect casing properties like however nt warn problem event handlers like used html way writing attributes often wrote something like sadly attached event handlers called nt get warning react took quite time find mistake see example focus element try press key", "num": "3548", "d": "3/2015"}, {"title": "close meta tag", "body": "hi also want use react template engine also server side case want valid xml output component code js render return returns closing meta bug", "num": "3546", "d": "3/2015"}, {"title": "generic iterable data reactdomcomponent css styles", "body": "currently react supports regular javascript objects style props using enumerated keys would wonderful could also support generic data css styles eg iterable interface would enable immutablejs clojurescript data structures directly used styles currently necessitates converting generic data regular javascript style objects every styled element every render pretty wasteful general extremely useful able express styles generic data especially persistent immutable data structures order let end user manipulate data application ui eg enduser ui themes serialize data dynamically merge manipulate data needed runtime react native already supports last sort thing merging stylesheets uncertain whether regular react see even better serializability manipulability generic style data could used potential problems suggestion might might slow react reconciliation rendering react native already standard syntax used merging style objects together unless revised eg adding method people use instead may possible also support generic style data react native might create great api mismatch react react native nonetheless think generic style data quite important already using copiously especially ui themes somewhat related", "num": "3542", "d": "3/2015"}, {"title": "nt really think could install ruby npm", "body": "install process bash sites reactnative init jakeproject walk creating new react native project usersjspurlocsitesjakeproject ws install usersjspurlocsitesjakeprojectnodemodulesreactnativenodemodulesws nodegyp rebuild builderrorlog exit cxx target releaseobjtargetbufferutilsrcbufferutilo solinkmodule target releasebufferutilnode solinkmodule target releasebufferutilnode finished cxx target releaseobjtargetvalidationsrcvalidationo solinkmodule target releasevalidationnode solinkmodule target releasevalidationnode finished reactnative nodemodulesreactnative absolutepath stacktraceparser reacttimermixin underscore q debug ms yargs optimist wordwrap minimist workerfarm xtend errno sourcemap amdefine sane watch fbwatchman minimatch walker uglifyjs uglifytobrowserify async yargs sourcemap rebound connect methods fresh cookiesignature pause qs bytes cookie send formidable jstransform esprimafb joi topo isemail hoek moment moduledeps inherits shallowcopy minimist subarg parents readablestream resolve concatstream browserresolve jsonstream detective ws tinycolor options commander nan reacttools commoner nt really think could install ruby npm sites cd jakeproject jakeproject ls nodemodules packagejson jakeproject mean nt really think could install ruby npm", "num": "3541", "d": "3/2015"}, {"title": "allow marking array static", "body": "expected issue already could nt find apologies dupe occasionally useful put elements array within render conditionally building different bits view react issue warning whenever array used nt keys even author knows array literal therefore nt require keys example react warn lack keys even though needed one option would extend accept array use indexes keys", "num": "3538", "d": "3/2015"}, {"title": "wrong function", "body": "page var avatar reactcreateclass render function return var profilepic reactcreateclass render function return var profilelink reactcreateclass render function return reactrender documentgetelementbyid example last function reactrender wrong reactrendercomponent", "num": "3536", "d": "3/2015"}, {"title": "contexts seem break multiple react instances per package", "body": "realise contexts basically undocumented unsupported shaky territory api wise usecase multiple node packages react installed package provides component two using react instance nodemodules folder finding using contexts get message undefinedbar try pass contexts elements consolidate components one package everything works expected keep separate packages export factory takes react instance function everything works expected browserify probably conveniently gets around dedupe identical versions running server unfortunately code sample everything package working fine need run npm install project root directory run code sample separate package instance react need npm install project root directory nodemodulessubcomponent three questions expected behaviour contexts depend react instance seen people running problems multiple react instances issues something avoiding something avoiding expected remain way shortmediumlong term forever alternatively using contexts incorrectly thanks time wonderful library", "num": "3532", "d": "3/2015"}, {"title": "add ability find dom component prop value reacttestutils", "body": "order make selectors durable within selenium tests generally add attributes element needs selected developers free change classes ids needed know touch move refactoring attributes would nice allow unit tests use attribute select elements integrationselenium tests use issue currently way reacttestutils test helper object contains bunch things help testing react code two methods follows javascript scryrendereddomcomponentswithprop function scryrendereddomcomponentswithprop root propname propvalue return reacttestutilsfindallinrenderedtree root function inst var instancepropvalue instprops propname findrendereddomcomponentwithprop function findrendereddomcomponentwithprop root propname propvalue var thisscryrendereddomcomponentswithprop root propname propvalue seems like useful feature wondering enough interest type functionality create pr add directly reacttestutils", "num": "3528", "d": "3/2015"}, {"title": "invariant violation trying release instance pool different type", "body": "currently working rendering simple react application server application renders content fine using method load testing seeing error occasional occur tracked error message pooledclassjs file struggling understand pool error would thrown anybody good description pools work could read even better hints could causing", "num": "3526", "d": "3/2015"}, {"title": "properly sugared way update state child", "body": "nonhacky way update children state parent sfme best way ask support let know nt know", "num": "3524", "d": "3/2015"}, {"title": "integration knockout", "body": "want use react v use knockout integration thanks", "num": "3522", "d": "3/2015"}, {"title": "way enforce components", "body": "example throw warning pass prop component defined using", "num": "3514", "d": "3/2015"}, {"title": "module build failed help", "body": "please help learning reactjs use webpack watch jsx files output line files navbarjsx jsx var navbar reactcreateclass render function return brand home contact moduleexports navbar appjsx jsx var navbar require navbarjsx var app reactcreateclass render function return bootstrap starter template use document way quickly start new project get text mostly barebones html document moduleexports app missing", "num": "3512", "d": "3/2015"}, {"title": "proptypes hook add optional", "body": "would neat declarations could take helptext would go long ways help others understand prop used component low priority food thought", "num": "3510", "d": "3/2015"}, {"title": "please return us autobinding classes", "body": "hello guys react really amazing think small inconvenience classes lost pretty functionality autobinding event callbacks owner struggle functionality every solution react recommends awful really need bind owner almost every event callback magic written react blog please return feature next release thank", "num": "3509", "d": "3/2015"}, {"title": "add comment frontpage markdown example xss", "body": "since copypasting code makes easy people xss lets add comment", "num": "3501", "d": "3/2015"}, {"title": "testutils calling render document test state change", "body": "component testing trying figure test component reacting properly change state state changes based event video element canplay event simulate support triggering event far tell next best thing thought anyway would call method triggered event method jest anyway nt available call tried calling setstate test like var react require reactaddons var showsdetailheader require routesshowscomponentsshowsdetailheaderjsx var mockdata require mockepisodedetaildata mockdatadatashowassetswebherovideourl class times required component rerendered rendering document", "num": "3500", "d": "3/2015"}, {"title": "reacttransitiongroup setstate handledoneleaving problematic", "body": "hi implementing custom animation svg found problem code handledoneleaving function reacttransitiongroup javascript handledoneleaving function key var component thisrefs key many children remove last one actually removed reason setstate updating immediately children list assignment thisstatechildren newchildren still referencing full list next call fact last remove effective jsfiddle example initlal view green circles clicking change button new circles must added previous must removed one removed", "num": "3497", "d": "3/2015"}, {"title": "escaping", "body": "according react uses replace etc behavior sane awesome problem also happens inside", "num": "3496", "d": "3/2015"}, {"title": "error find module envify browserify", "body": "sure react issue browserify issue packagejson js name frontend version description main indexjs scripts test echo error test specified amp amp exit browserify transform browserifyshim browser browserifyshim author license isc dependencies jquery lodash url qs react gulpfile js var browserify require browserify gulp require gulp source require vinylsourcestream uglify require gulpuglify sourcemaps require gulpsourcemaps reactify require reactify watchify require watchify neat require nodeneat lr require gulplivereload wait require gulpwait sass require gulpsass bundler var bundler browserify entries dirname frontendjsindexjs transform reactify debug true cache packagecache fullpaths true watcher watchify bundler gulptask sass function gulpsrc dirname frontendsassappscss pipe sourcemapsinit pipe sass includepaths neatincludepaths style compressed pipe sourcemapswrite pipe gulpdest dirname public pipe lr gulptask realoadviews function gulpsrc pipe wait pipe lr gulptask js function watcher bundle pipe source bundlejs pipe gulpdest dirname publicjs pipe lr gulptask watch function lrlisten", "num": "3495", "d": "3/2015"}, {"title": "support asynchronous wrappers transaction", "body": "hello reading reactjs trying extend one thing noticed although wrappers transaction guarantee executed pre post performing method seems waiting mechanism asynchronous wrapper functions apis asynchronous may fail keep order correctly especially previous wrapper still waiting asynchronous result second one would start transactionjs looks like plain function call waiting code anywhere current reactjs much transaction instances problem may serious however nature transaction extendable standalone component bind dom amp existing use cases think general enough deal possible cases design principle new dom apis possible sorry fired duplicated issue searched issues found similar cases duplicated please close", "num": "3493", "d": "3/2015"}, {"title": "reacttransitiongroup fails given factory component prop", "body": "passing factory causes typeerror undefined object evaluating typeprototypemountcomponent reference reacttransitiongroup docs state note prior using dom components component prop needed reference reactdom since component simply passed reactcreateelement must string composite components must pass factory test case test code javascript var compositeclass reactcreateclass render function return null var compositefactory reactcreatefactory compositeclass var reacttransitiongroup reactcreatefactory reactaddonstransitiongroup var bugclass reactcreateclass render function return reacttransitiongroup component compositefactory var bugfactory reactcreatefactory bugclass reactrender bugfactory documentbody update looks like docs might wrong passing class rather factory seems work", "num": "3492", "d": "3/2015"}, {"title": "remove classsetcx entirely", "body": "deprecated remove ship would like honors chenglou", "num": "3489", "d": "3/2015"}, {"title": "catching nulls undefineds createclass", "body": "right something like going pretty much uncaught causes terrible breakage similarly following work undef mixin actually used mixins issue suspect something createclass trivially test accepting component definition check extant check every element resolves object rather string etc bad element situation might also doable inside createclass checking elements used inside element fact exist letting createclass call succeed suspect less sure mixin check", "num": "3486", "d": "3/2015"}, {"title": "changing placeholder causes onchange ie", "body": "check tested likely related", "num": "3484", "d": "3/2015"}, {"title": "rendered reactelement reactelement anymore", "body": "according tests reactelement gets rendered recognised reactelement anymore come test rendered element actually reactelement without getting hacky", "num": "3479", "d": "3/2015"}, {"title": "confusing error message passing non string non component class reactcreateelement", "body": "following code produces deep react", "num": "3478", "d": "3/2015"}, {"title": "reactserverrenderingrendertostring fails jdk", "body": "trying use react serverside java project unfortunately tied jdk project ca nt use nashorn since jdk javascriptengine thought good enough give shot everything fine tried render component one children whenever component one children react renders randomly simple test case java import javaiofilereader import javaxscriptscriptengine import javaxscriptscriptenginemanager public class test private scriptengine se given example reactrendertostring generates following markup spent time yesterday today trying figure narrowed things reach reason children called order appreciate help help ideas could causing", "num": "3476", "d": "3/2015"}, {"title": "read property firstchild undefined", "body": "hi experimenting hit problem react reactrouter first navigation using router get following error ialready read thread referenced react issues checked external dependencies one version react added project added main project additional dependency downloading react also checked use require react seems fine well would appreciate help issue", "num": "3474", "d": "3/2015"}, {"title": "much xss vulnerability protection react responsible", "body": "security hack mentions react ultimately serverside bug bug react issue figuring something mitigate issues json parsing bug serverside issue isvalidelement react designed work plain objects input fact even getting rid way verify allow json object imo problem verification string values sanitized inserted dom except css styles known wontfix issue earlier versions used checks nt work well multiple reacts makes difficult optimize inline objects much faster couples jsx permanently react would like avoid dangerouslysetinnerhtml one possible solution disable feature require used imperatively makes worse performance insertion time however nt believe bad thing insert arbitrary html tags certainly easiest way gain access xss though also insert arbitrary web components could expose data render form elements potentially pass data else ultimately issue seems like valid use case userdata compromised becomes dangerous react responsible protecting arbitrary json children", "num": "3473", "d": "3/2015"}, {"title": "display array", "body": "simple problem ca nt find solution displaying array elements hava component render something like type return nt work wrapping good breaking table structure lots warnings array elements nt want wrap display", "num": "3470", "d": "3/2015"}, {"title": "immutable data differences production development builds possible bug", "body": "noticing strange behavior development build vs production build please see bin included two links react library productiondevelopment production build works expected renders immutableset however development build breaks returns error also another strange thing development build set works long size try removing elements array size render fine development production", "num": "3469", "d": "3/2015"}, {"title": "jsx render wo nt allow webkitdirectory directory used", "body": "tried use webkitdirectory directory input dom found impossible add two label input dom anyway solve problem", "num": "3468", "d": "3/2015"}, {"title": "uncaught typeerror read property mountcomponent undefined", "body": "upgrading getting turns great way telling use jsx hand server side outside jsx seems required use otherwise get pretty confusing", "num": "3466", "d": "3/2015"}, {"title": "incorrect blame checksum mismatch due browsers unescaping html", "body": "react uses escape amongst things browsers seem unescape back potentially causing incorrect blame case checksum mismatches demo console reproducible latest stable releases chrome firefox safari os x sure would good way fix reescaping comparing calling would likely escape unrelated characters well unescaping comparing would produce exact diff unless keep track unescapes performed comparing revert producing diff string sounds like going trouble might needed", "num": "3465", "d": "3/2015"}, {"title": "detail communication documentation best practices grandparent lt gt grandchild", "body": "communication two components nt parentchild relationship set global event system far really enjoyed react conducive modularize components however modularize components gets harder communicate global event system nt scale essentially couples components nt coupled simple example faceted navigation sidebar containing two subviews filters search bar list things sibebarview filters search input filter button list view essence event stream search input update list advice seems like say create singleton eventemitter search input searchinputjs eeemit search update inputvalue sidebarjs eeon search update searchhandler see specific event sidebarview know also let say global search input time seems like increasingly specific event names feeling flux supposed alleviate problem somehow way give detail andor point people right direction seems like common use case", "num": "3461", "d": "3/2015"}, {"title": "could", "body": "following jsx fragment guarantee never otherwise throws error although construction correct instead check", "num": "3460", "d": "3/2015"}, {"title": "add support rdfa attributes", "body": "add support rdfa attributes resource property etc see full list", "num": "3459", "d": "3/2015"}, {"title": "event handler checkbox throws error nodewebkit", "body": "trouble domexceptionerror clicking input element type checkbox react used nodewebkit environment testing nodewebkit react nothing tricky browser context use require seems affect input elements type checkbox file code runs fine browser thoughts might failing nodewebkit test project includes node webkit version test project without node webkit binaries console output clicking checkbox download react devtools better development experience change event syntheticevent dispatchconfig object dispatchmarker nativeevent mouseevent type click target dispatchids null dispatchlisteners null bubbles null cancelable null currenttarget null defaultprevented null dispatchconfig null dispatchmarker null eventphase null isdefaultprevented function ispropagationstopped function istrusted null nativeevent null target null timestamp null type null proto syntheticevent error domexception message attempt made use object longer usable name invalidstateerror code stack error attempt made use object file c indexsizeerr code message attempt made use object longer usable name invalidstateerror stack error attempt html mainjs js require nwgui windowget showdevtools handlechange function evt try consolelog change event evt catch e consolelog error e reactrender reactcreateelement input type checkbox onchange handlechange documentgetelementbyid app", "num": "3458", "d": "3/2015"}, {"title": "html string thisstate occasionally escaped", "body": "using using react togather small rich text editor named pen code coffee getinitialstate gt text propstext loadpen gt pen new pen editor refstextgetdomnode textarea list bold stay false pensetcontent propstext refstextgetdomnode focus penon change content gt onchange contenttrim return pen onchange content gt consolelog content yes found html every time setstate text content timedelay gt consolelog statetext lt somtimes statetext escaled like string changed another statetext content currently fix rewrting property nt know debug react find really happening react anything like escaping html state property internally", "num": "3457", "d": "3/2015"}, {"title": "htmltojsx defined html jsx converter page", "body": "edits made last week page maybe broken accidentally", "num": "3455", "d": "3/2015"}, {"title": "testutilsrenderintodocument difference render returns nullfalse", "body": "testutilsrenderintodocument different behavior react component render method returns false null var mycomponent testutilsrenderintodocument var noscript testutilsfindrendereddomcomponentwithtag mycomponent noscript expect noscript tobetruthy fails react error find exactly one match tag noscript works something wrong repo test case switch version packagejson", "num": "3453", "d": "3/2015"}, {"title": "trying check whether button click event calls function jsx", "body": "js unit test case loginjsx jestdontmock srcjspagesloginjsx describe login function invoke btnloginclick click event function var react require reactaddons var logincontrol require srcjspagesloginjsx loginjsx js jsx reactdom use strict var react require react var fluxiblemixin require fluxible mixin var loginstore require storesloginstorejs var loginactions require actionsloginactionsjs var login reactcreateclass mixins fluxiblemixin statics storelisteners loginstore moduleexports login", "num": "3452", "d": "3/2015"}, {"title": "wrong context warning warning ownerbased parentbased contexts differ", "body": "imo warning following code wrong code define root component context value root component show two different children dependent state variable root switched one child another warning shown example jsfiddle run tested react js var root reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo context value getinitialstate function return foo false render function thisstatefoo return else settimeout function thissetstate foo true bind return return loading var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo reactrender documentbody", "num": "3451", "d": "3/2015"}, {"title": "questions coffeescript static property demo beta release post", "body": "somehow fulltime coffeescript programmer found beta release post coffee div reactcreatefactory div class counter extends reactcomponent proptypes initialcount reactproptypesnumber defaultprops initialcount constructor props gt super props state count propsinitialcount tick gt setstate count statecount render gt div onclick tick clicks statecount exciting got questions using static properties becoming static properties property defined constructor even clear demo found updated docs would like talk properties influenced syntax recommend fat arrow", "num": "3450", "d": "3/2015"}, {"title": "making render pure", "body": "saw mixing implemented render something like user implement function seems like nice hack wondering nt default way react thoughts", "num": "3449", "d": "3/2015"}, {"title": "make shouldcomponentupdate accept boolean value", "body": "jquery disable event like similarly want define immutable component write possible make shouldcomponentupdate accept boolean value", "num": "3448", "d": "3/2015"}, {"title": "checkbox behavior inexplicable preventdefault used", "body": "var react require react backbone require backbone flux require flux dispatcher new fluxdispatcher var storelisteningmixin componentdidmount function thispropsstore amp amp thisonstorechanged thispropsstoreon change emit thisonstorechanged componentwillunmount function thispropsstore amp amp thisonstorechanged thispropsstoreoff change emit thisonstorechanged var dispatchingmixin componentwillmount function thisdispatch function payload dispatcherdispatch payload function register store storedispatcher dispatcher storedispatchid dispatcherregister storeondispatchbind store function unregister store delete storedispatcher dispatcherunregister storedispatchid var store backbonemodelextend checked false false ondispatch function payload payloadactiontype ha consolelog dispatch received checkbox payloadind thischecked payloadind thischecked payloadind thistrigger change emit var store new store var checkboxa reactcreateclass mixins dispatchingmixin onchange function e consolelog dispatching epreventdefault makes checkbox behave weirdly removed things normal thisdispatch actiontype ha ind thispropsind render function var checked thispropsstorechecked thispropsind consolelog checkbox rendering checked checked return thispropsind var checkboxalist reactcreateclass mixins storelisteningmixin onstorechanged function thisforceupdate render function return register store reactrender documentgetelementbyid renderarea notice clicking checkbox make react render according checked state clicking checkbox causes checkbox rerender correctly theory preventdefault happened component dispatching nt affect rendering case component nt rendered incorrectly", "num": "3446", "d": "3/2015"}, {"title": "debug facebook canvas apps", "body": "possible debug canvas iframe apps", "num": "3444", "d": "3/2015"}, {"title": "allow quoteattrname always quote names", "body": "currently trying use react jsx transformer google closure run advanced optimisations problem attributes renamed closure compiler failing run time example transformed compiled preposed solution allow quoteattrname always quote names config param would mean closure compiler would leave config object alone anybody thoughts note compiled option correct compiler renamed react component", "num": "3437", "d": "3/2015"}, {"title": "call perf method setstate callback", "body": "many case suppose perf used like however printed callback called computed sample think behavior little confusing ideas ideas accepts callback callback called computed treated diff reactdefaultperfjs js start function reactdefaultperfinjected reactperfinjectioninjectmeasure reactdefaultperfmeasure stop function reactperfenablemeasure false reactdefaultperfallmeasurements reactdefaultperfallmeasurementslength totaltime performancenow reactdefaultperfstarttime add documentation computed need call perf method next event loop case callback thank", "num": "3436", "d": "3/2015"}, {"title": "document limitations props passed reactcreateelement", "body": "please document props object passed createelement get passed target component surprising method defined prototype object passed createelement available thisprops target component read source saw", "num": "3435", "d": "3/2015"}, {"title": "update cloning reactelement documentation include info reactcloneelement", "body": "documentation cloning reactelement uses reactclonewithprops recommends following method preserving suggest including reactcloneelement instead recommending add object", "num": "3432", "d": "3/2015"}, {"title": "changing propsstyle null object fails react", "body": "hello breaking change upgrading component uses inline styles one state uses inline styles need set style null react worked fine fails update inline styles example component isolates issue jsx reactcreateclass getinitialstate function return isred false togglered function thissetstate isred thisstateisred componentdidmount function setinterval thistogglered render function", "num": "3424", "d": "3/2015"}, {"title": "bug find scry methods testutils react", "body": "tried update react caused several unit tests project fail use react render html server side includes basic html structure like elements unit tests dealing elements failing react worked fine minimal example js use strict var react require react reactaddons require reactaddons testutils reactaddonsaddonstestutils jsdom require jsdom globaldocument jsdomjsdom globalwindow documentdefaultview globalnavigator windownavigator var foo reactcreateclass displayname foo var foo testutilsrenderintodocument reactcreateelement foo null var titleelement testutilsfindrendereddomcomponentwithtag foo title consolelog titleelementgetdomnode textcontent running react correctly logs text content title running react throws typeerror", "num": "3421", "d": "3/2015"}, {"title": "tspan created wrong namespace", "body": "demo howering right point create exactly left one namespace second tspan second group ends xhtml svg console output mouse enter exit real output enter means second tspan namespace uri", "num": "3420", "d": "3/2015"}, {"title": "replacestate throws away functions", "body": "still learning react possible misunderstanding something trying use react immutablejs hit stumbling block upgrading react wiki page immutablejs repository explains use immutable react state provides following example transpiled js use strict var react require react var immutable require immutable var component reactcreateclass getinitialstate function return immutablemap handleclick function thisreplacestate thisstateupdate count function v return v render function return reactrender documentbody works great receive following error clicking div putting breakpoint error inspecting thisstate debugger reveals methods thisstate disappeared expected behavior", "num": "3418", "d": "3/2015"}, {"title": "docs recommendations ismounted alternative", "body": "docs give use case mention available classes nt explicitly call deprecated would useful clarified recommended alternative uses existing code dealing case component gets unmounted timeout setup animation etc component mounted expires", "num": "3417", "d": "3/2015"}, {"title": "render multiple components without wrapping element", "body": "nt found duplicate issue post valid use case like share building framework storytelling based react every single element positioned fixed written custom layout engine need full control everything entry level structure looks something like renders actual items story text images videos etc renders ui elements common every story example controling volume audiovideo items render structure given would result html since everything positioned fixed work ui layer covers everything making unusable eg ca nt click videos currently forced following method html works ugly lose separation nt want component know every ui component sth like virtual component renders children without wrapper element would solve problem could return component know rare usecase rather talented reaching edge cases every framework touch funny writing things sometimes magically makes brain useful stuff found another workaround using ui layer ui components hack nothing", "num": "3415", "d": "3/2015"}, {"title": "pubdate attribute", "body": "hi im trying render time element pubdate boolean attribute react keeps ignoring wrong maybe bug react", "num": "3411", "d": "3/2015"}, {"title": "incorrect update style attribute style prop transitions object null object", "body": "attribute dom node incorrectly updated corresponding props key transitions object null object series updates brief investigation appears happening thispreviousstylecopy cleared attribute removed props third render example react compares value first render value third render looking unsure whether style copy described still needed js var jsdom require jsdom var react require react var app reactcreatefactory reactcreateclass render function var style thispropsuseredtext color red null return reactdomdiv style style test jsdomenv html done function errors window globalwindow window globaldocument windowdocument", "num": "3409", "d": "3/2015"}, {"title": "double rendermisreport instance count", "body": "using seeing incorrect counts number instances elements render prints expect sure problem reporting problem actual rendering result measuring render notice wasted time almost total time listed", "num": "3407", "d": "3/2015"}, {"title": "performance regression dev", "body": "trying debug performance locally seeing really poor performance using fairly small dataset wrote quick benchmark looks like around speed prod slower dev benchmark relevant screenshot", "num": "3406", "d": "3/2015"}, {"title": "parentbased context fails component updates child", "body": "seems component implementing updated render different toplevel child react nt call updated component parentbased context new child effectively get context grandparent instead one nt seem break anything assume react still prioritizes ownerbased context works fine leads contexts differ warning fiddle click show foo see warning console wrapping render output static element warning appear familiar source code worth warning goes away replace line", "num": "3404", "d": "3/2015"}, {"title": "jsx illegal import declaration", "body": "hi try new react got error illegal import declaration right react tried set options harmony true false nt matter code javascript import foo pathtofilejs var view reactcreateclass definition solution thanks", "num": "3401", "d": "3/2015"}, {"title": "components classes", "body": "everybody really wants support classes react components objectcreate", "num": "3400", "d": "3/2015"}, {"title": "incorrect unable reuse markup warning message", "body": "react improved warning message fails reuse server rendered markup shows exact incorrect part shows wrong part text nodes containing htmlescaped chars single quotes double quotes etc somewhere incorrect part example react shows message part ok problematic markup actually renders differently client server located place dom remove text rendered markup react shows correct warning message points real problematic place", "num": "3399", "d": "3/2015"}, {"title": "implement sideways data loading", "body": "firstclass api sideways data loading stateless although potentially memoized data global storenetworkresource potentially using propsstate input js type recordofobservables key string observable class foo observe recordofobservables return mycontent xhr thispropsurl render var mycontent string thisdatamycontent return mycontent observe executes componentwillmountcomponentwillupdate render keyvalue record subscribe observable value allow onnext synchronously invoked subscribe set otherwise leave undefined initial render maybe set null render proceeds usual every time onnext gets invoked schedule new thisdata key effectively triggers forcedupdate component change observe reexecuted componentwillupdate render componentdidupdate props state changed ie update recieveprops setstate observe reexecuted reconciliation point loop new record subscribe new observables unsubscribe previous observables ordering important since allows provider data reference counting cache ie cache data long nobody listens unsubscribed immediately reference count would go zero subscribe data component unmounted automatically unsubscribe active subscriptions new subscription nt immediately call onnext keep using previous value example changes subscribing new url mycontent keep showing content previous url next url fully loaded semantics tag seen confusing lead inconsistencies fairly sane default easier make show spinner would opposite default best practice might immediately send null value nt data cached another alternative observable provide url id content result js class foo observe return user loaduser thispropsuserid render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid use rxjs contract observable since common use allows synchronous execution jhusain proposal common use switch contract instead add lifecycle hooks respond events necessary note concept allows sideways data behave like behaviors like props means nt overload notion state things allows optimizations throwing away data resubscribe later restorable", "num": "3398", "d": "3/2015"}, {"title": "checkandwarnformutatedprops fails", "body": "error make addons reactfundationapp fail cause related property originalprops exist use dom element div p nt know origianl cause solved changing", "num": "3396", "d": "3/2015"}, {"title": "backwardscompatible form attributes", "body": "would good able set htmlstandard action target form element basic testing research nt currently possible users js disabled would allow truly isomorphic approach using libraries like fluxible basically app would use isserver flag render form necessary html attributes server app bootstrapped client isclient flag could render form xhr actions attached html attributes removed realize firstworld users likely js enabled however thirdworld users would benefit able js turned cut bandwidth used since likely every mb counts", "num": "3393", "d": "3/2015"}, {"title": "use parentcontext ownercontext undefined", "body": "hi library author trying migrate call reactwithcontext outside react around toplevel layout component seems special case parent owner guess parent toplevel component deprecated trying replace toplevel wrapper component var childcontextprovider reactcreatefactory reactcreateclass displayname childcontextprovider childcontexttypes function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode renderwithcontext component node reactcontext work make work use function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode reactwithcontext reactcontext function renderwithcontext component node reactcontext bind weird following barely providing owner work function renderwithcontext component domnode context reactwithcontext context function var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode renderwithcontext component node reactcontext summary seems little problem parent owner parent provided owner provided context accessible still uses owner app complains lot warning owner undefined vs parent defined parent provided owner provided context accessible app works fine app complains lot warning owner defined vs parent undefined provided app works deprecation warning case ca nt get rid warnings forced keep using deprecated feature best case providing owner context parent context leads keeping code like function renderwithcontext component domnode context var componentwithcontext childcontextprovider children component context context reactrender componentwithcontext domnode reactwithcontext reactcontext function renderwithcontext component node reactcontext bind think maybe owner context never used whole app maybe react could use parent context instead owner context", "num": "3392", "d": "3/2015"}, {"title": "tutorial example tries post json file", "body": "go tutorial great btw got right end realised method tries post form data file understand realworld would sent sort restful service newcomers might wonder working realise could go editing tutorial figured might better coming people wrote", "num": "3391", "d": "3/2015"}, {"title": "componentwillreceiveprops called passing data context", "body": "getting strange issue called rendering nt second argument previous props okay contain one prop passed first argument new props fact react context using tried migrate newer api wrapper problem persisted nt change prop nt pass react context instead props", "num": "3390", "d": "3/2015"}, {"title": "pertstart leads uncaught typeerror read property counts undefined", "body": "wanted see pages performing looked perf tool added perf tool componentwillupdate componentdidupdate main component assume right place put see documentation anywhere use perf within reactjs code gives error uncaught typeerror read property counts undefined code looks like put console log code never gets componentdidupdate method error happening bug use perf incorrectly", "num": "3389", "d": "3/2015"}, {"title": "read property mountcomponent undefined upgrading", "body": "upgrading react get rendering relevant code undefined argument someone suggest cause error", "num": "3388", "d": "3/2015"}, {"title": "testutilsfindrendered seems using deprecated getdomnode", "body": "updated latest things jest tests constantly warning note using jest due node versioning issues sure version referencing old react using provided one nodemodules", "num": "3387", "d": "3/2015"}, {"title": "replace parts string component", "body": "code obviously working would result string mixed objects bad know add react components inside string want highlight parts string react component tough case crack guess", "num": "3386", "d": "3/2015"}, {"title": "jsxorphanedbracketstransformer honor spread operator", "body": "run following example transformer throws exception js var mymessage require reactmymessage var hellomessage reactcreateclass render function var mypropobj thispropsmypropobj moduleexports hellomessage exception jsxorphanedbracketstransformer foojsx throw e error parse error line unexpected token usersakshaypfoojsx throwerror throwunexpected parsexjsidentifier parsexjsattribute parsexjsopeningelement parsexjselement", "num": "3382", "d": "3/2015"}, {"title": "reactaddonscreatefragment javascript key order guaranteed", "body": "createfragment docs says order object keys used determine order rendered children javascript order keys object guarunteed implementations happen maintain order nt mean relied upon note potential future api jsx would definitely way avoid problem way would change api accept cumbersome strictly correct array objects", "num": "3380", "d": "3/2015"}, {"title": "jsx illegal export declaration", "body": "export syntax used work fine jsx harmony flag turned seems throw error sample code jsx export default var hellomessage reactcreateclass render function return hello thispropsname reactrender mountnode", "num": "3379", "d": "3/2015"}, {"title": "jsxtransformer incorrectly processes comment lines trailing space", "body": "run following code jsxtransformer outputs following obviously completely broken remove extra space end comment line everything okay", "num": "3378", "d": "3/2015"}, {"title": "setting removing focus empty input field placeholder triggers change ie", "body": "see example code setting removing focus empty field text event triggered ie tested older versions trigger browsers current workaround test last passed input returned act different would nice react would send changeevent first place", "num": "3377", "d": "3/2015"}, {"title": "update getting started fiddles", "body": "js fiddles gettingstarted using old syntax must js class hello extends reactcomponent render return hello thispropsname reactrender documentgetelementbyid container nonjsx version well", "num": "3375", "d": "3/2015"}, {"title": "unexpected reserved word without", "body": "works fine fails former one later one using jsx missing something", "num": "3374", "d": "3/2015"}, {"title": "react render script tags", "body": "prolem render script tag example click link page new render page b inluce demojs file demojs consolelog hello world open google devtools nt see happen erros", "num": "3373", "d": "3/2015"}, {"title": "shallowequal buggy", "body": "per syranide comments shallowequal still couple issues instance per spicyj probably shortcircuit either input type object values equal", "num": "3369", "d": "3/2015"}, {"title": "children void elements throw instead warn", "body": "released react earlier one cares absolutely nt anyway mostly reminder feel free take", "num": "3367", "d": "3/2015"}, {"title": "unable render component name string", "body": "seem unable render components using name strings wanted able dynamically generate component name strings existing corresponding components rendered fiddle instead referencing existing component rendering react rendering custom element tag lower case basic code failing main component rendered var parent reactcreateclass dynamic subcomponent render var child reactcreateclass reactrender documentbody", "num": "3365", "d": "3/2015"}, {"title": "onsubmit nt work dangerouslysetinnerhtml onclick", "body": "following jsfiddle demonstrates issue clicking submit first form alerts however second form alerts submit bubbled form embedded via code posterity var formtest reactcreateclass onsubmit function e alert submit epreventdefault onclick function e alert click render function return reactrender documentbody", "num": "3359", "d": "3/2015"}, {"title": "document way update defaultvalue", "body": "seems lot misunderstanding react community works often expected element changed reflected ui case since set component first rendered people complain usually suggested use instead often seen unpractical form many input fields since fields need listener editable actually true put listener wrapping element generates lot warnings feel none solutions practical easy solution set attribute wrapping element form contains elements fields changed along key change reflected ui think good solution common ui case list entities want able edit click one form shows entity value populated click another element want form updated entity data perhaps could documented order avoid future confusion even better solution", "num": "3357", "d": "3/2015"}, {"title": "ship", "body": "x make sure examples work zpao x docs x x zpao x sebmarkbage x class use x notes component instance methods nt work classes zpao x note elementtype documentation mentioned change blog skipping x update refs documentation callback style actually recommending yet jsfb x update setstate docs function style jsfb x spicyj x deprecation x shallow testing fbme updates zpao x x x x x x x ship blog npm bower etc zpao update reacttutorial zpao x ship jsx upgrade tool zpao x update reactsource gem zpao x update reactrails gem zpao x ship react art zpao x update readme etc master x update fiddles", "num": "3352", "d": "3/2015"}, {"title": "nested arrays without key nt warn anymore", "body": "used warn right maybe", "num": "3348", "d": "3/2015"}, {"title": "jsx spread attributes nt work", "body": "attempted use jsx spread attributes avail javascript render const classnames attrs thisprops nt work gives following error", "num": "3346", "d": "3/2015"}, {"title": "invoking rendertostaticmarkup render causes refs break", "body": "demonstrated open error console see js var bug reactcreateclass render function var html reactrendertostaticmarkup reactdomimg return reactdomdiv ref ref html bug reactcreatefactory bug reactrender bug documentbody", "num": "3344", "d": "3/2015"}, {"title": "state object property change triggered", "body": "hi might stupid question could nt find good solution array objects state list component every object mapped item component item mouse trigger something parent list updating rest state objects new property expect rest item components updated happening force update react issue something wrong maybe thanks", "num": "3342", "d": "3/2015"}, {"title": "context updated component mounted reactrender", "body": "tough explain created fiddle demonstrate layerportalwhatever calling pattern renders children component new tree body via would expect context also passed taken special care make sure child passed created correct owner works fine context passed never updated point inspect child element passed correct never updated instance sure perhaps wrong expectation illustration updated simpler example", "num": "3340", "d": "3/2015"}, {"title": "documentation issue component specs displayname references nonexistent source information", "body": "last sentence displayname string used debugging messages jsx sets value automatically see jsx depth link seemingly nonexistent anchor jsx depth page would good link somewhere actually documenting autosetting displayname sure even still exists nt", "num": "3338", "d": "3/2015"}, {"title": "optimize procedure render component body", "body": "create modal create element manually remove element longer used updated mar add timeout looks better moment coffee code mostly done react require reactaddons util require utilutil time require utiltime transition reactcreatefactory require moduletransition reactdom moduleexports needs implement renderlayer componentwillunmount return unless target unrenderlayer documentbodyremovechild target componentdidupdate renderlayer renderlayer target renderchildren return propsshow target return show found target target documentcreateelement div documentbodyappendchild target tree transition transitionname fade entertimeout leavetimeout reactrender tree target renderchildren tree transition transitionname fade entertimeout leavetimeout propsshow renderlayer reactrender tree target unrenderlayer reactunmountcomponentatnode target bad part operations optimized really slow plenty components ready show modals react components hierarchy makes difficult people create menus modals appended hand add feature react case slow", "num": "3335", "d": "3/2015"}, {"title": "testutilsisdomcomponent uses deprecated getdomnode", "body": "testutilsisdomcomponent uses deprecated elementgetdomnode resulting console warnings running tests case running unit tests results warnings drowning output tests", "num": "3329", "d": "3/2015"}, {"title": "node proptype validation hits error null values", "body": "js var foo reactcreateclass proptypes child reactproptypesnode render function return parent thispropschild var demo reactcreateclass render function return reactrender documentbody warning failed proptype fragment null check render method warning failed proptype read property reactfragment null check render method chrome cc kassens", "num": "3328", "d": "3/2015"}, {"title": "input using linkedstatemixin autofocus sets cursor beginning input", "body": "hi using initial value coming problem use cursor shows front field rather end existing text component looks like javascript var controlledinput reactcreateclass mixins reactaddonslinkedstatemixin render function return getinitialstate function return message thispropsmessage componentwillreceiveprops function nextprops nextpropsmessage thispropsmessage thissetstate message nextpropsmessage", "num": "3325", "d": "3/2015"}, {"title": "encapsulate styles", "body": "hi converting big project written polymer react biggest problem face lack encapsulated styling would like encapsulate sass files encapsulated styles among components entire react web site documentation almost mentioning styles furthermore chrome devtools react plugin component properties except style like devtools regular dom really like react going approach problem", "num": "3324", "d": "3/2015"}, {"title": "react developer tools add perf buttons", "body": "ca nt find repo react developer tools assume put open source repo somewhere probably put together pull request would really nice addon buttons would call available", "num": "3322", "d": "3/2015"}, {"title": "component longer runs installed node module", "body": "reusable component decided put github weird thing although exact file works flawlessly part original project javascript import chart chart render return working pull node package javascript import chart reactchartisttooltip render return error given render sure understand intended behavior", "num": "3320", "d": "3/2015"}, {"title": "error render dom", "body": "hi react team build sample app hibird reactjs cordova use thrid party libary set static data error app run browser android devices set data via ajax call error one item see browser instead nt touch devices think render data via ajax error", "num": "3318", "d": "3/2015"}, {"title": "calling setstate without getinitialstate throws using purerendermixin", "body": "without causes line throw fix make shallowequal bail either argument falsey object want safe", "num": "3316", "d": "3/2015"}, {"title": "detect compatibility mode", "body": "claim support users testing code locally might get thrown compatibility mode default cause webapp blow confused supported browser background check thread users get compatibility mode adding tag since current failure cryptic easy detect compatibility mode probably add warning give hint user even though using actually compatibility mode effectively add meta tag use one various workarounds", "num": "3315", "d": "3/2015"}, {"title": "proposal thissubscribe auto disposing componentwillunmount", "body": "find common enough part core react either mixin method component lot cases subscribe unsubscribe pattern call discussion original started discussion cc jesseskinner", "num": "3314", "d": "3/2015"}, {"title": "typeerror parent component updated uncaught exception child component componentwillmount", "body": "expected result rendered text actual result jsfiddle code js var parent reactcreateclass getinitialstate function return error false componentwillmount function var self windowonerror used brevity windowonerror function selfismounted selfsetstate error true render function thisstateerror return error else return var child reactcreateclass componentwillmount function throw new error test error render function return child reactrender documentbody", "num": "3313", "d": "3/2015"}, {"title": "question optimizing reconciliation lists onetwo children change", "body": "list many children gt change occurs scenario setstate list rerenders list children optimized children keyed properly also shouldcomponentupdate implemented quick change list occurs update children know exactly ones even may hundredsthousands children yet still takes noticeable amount time since react reconciliation loops children checks updated special approach take may unaware", "num": "3309", "d": "3/2015"}, {"title": "optional callback setstate called", "body": "jsfiddle call since passed callback never called see console logs prints componentwillmount called", "num": "3308", "d": "3/2015"}, {"title": "add first class support immutablejs records maybe maps setstate", "body": "seems like common use case would like deprecate quite sure would work records mixins since fixed type cc leebyron", "num": "3303", "d": "3/2015"}, {"title": "mozmacosxfontsmoothing rendered incorrectly", "body": "firefox equivalent react serialization style prop incorrect see fiddle firefox initial state supposed enable font smoothing via innerhtml breaks subsequent updates use dom api work", "num": "3302", "d": "3/2015"}, {"title": "invariant violation danger expected markup render x nodes rendered", "body": "environment windows react browserify examples running chrome example page shows test get error invariant violation danger expected markup render nodes rendered var react require react var commentbox reactcreateclass getinitialstate function return tasks componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody example flowing code work var react require react var commentbox reactcreateclass getinitialstate function return tasks name val name val name val componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody exmaple following code raise error invariant violation danger expected markup render nodes rendered var react require react var commentbox reactcreateclass getinitialstate function return tasks name val name val name val componentdidmount function setstate work thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return taskname reactrender documentbody", "num": "3301", "d": "3/2015"}, {"title": "rendertostring generating different id checksums call defect", "body": "trying figure isomorphic rendering nt matching thus began trying simply code realized even successive rendering single div ends different checksums id anyone help understand javascript var react require react var elem reactcreateelement div null consolelog reactrendertostring elem consolelog reactrendertostring elem var assert require assert assert reactrendertostring elem reactrendertostring elem fails expected checksums probably event id nt know determines appear defect", "num": "3300", "d": "3/2015"}, {"title": "react fails unmount component within event handler", "body": "hi trying unmount whole app got error uncaught typeerror read property firstchild undefined think big deal according see debugger seems trying get dispatched guess target unmounted note use case looks like using synchronous implementation get error adding settimeout unmount code got error could reproduce jsfiddle guess probably nt really know batching work react", "num": "3298", "d": "3/2015"}, {"title": "get old props state inside shouldcomponentupdate", "body": "using along syntax get old props state inside shouldcomponentupdate javascript shouldcomponentupdate newprops newstate consolelog jsonstringify thisprops jsonstringify newprops consolelog jsonstringify thisstate jsonstringify newstate render consolelog render console log render async actions fetch user name via standard action dispatcher store flux structure name kay lee name kay lee render ideas", "num": "3297", "d": "3/2015"}, {"title": "autofocusautofocus nt render rendertostring", "body": "rendertostaticmarkup", "num": "3296", "d": "3/2015"}, {"title": "memory leak", "body": "sorry bug code hey performance comparisons polymerjs basically requesting json file colors shuffling colors setting new colors array state concating replacing previous array working fast nice looking chorme task manager looks like memory leak looks like task manager code html polymer vs react showdown ul liststyletype none function shuffle array var currentindex arraylength temporaryvalue randomindex remain elements shuffle currentindex pick remaining element randomindex mathfloor mathrandom currentindex currentindex swap current element temporaryvalue array currentindex array currentindex array randomindex array randomindex temporaryvalue return array var squaretest reactcreateclass loadcommentfromserver function thisstatecounter ajax url thispropsurl datatype json success function data var shuffled shuffle data thissetstate data shuffled bind error function xhr status err consoleerror thispropsurl status errtostring bind componentdidmount function setinterval thisloadcommentfromserver thispropspollinterval getinitialstate function return data counter render function var squares thisstatedatamap function square return li style backgroundcolor squarecolor gt squarecolor return lt div gt lt div gt cycles thisstatecounter lt div gt lt div gt count thisstatedatalength lt div gt lt ul gt squares lt ul gt lt div gt reactrender lt squaretest url colorsjson pollinterval gt documentgetelementbyid squareplaceholder", "num": "3292", "d": "3/2015"}, {"title": "jsx complier tool nt line numbers code field", "body": "tool transforming jsx js supplied code contains syntax errors error displays line number since code field nt line numbers hard identify actual line", "num": "3291", "d": "3/2015"}, {"body": "running linters source code generated code generated code generally checked repository linted etc reason probably pretty low priority said like submit pull request would likely considered", "d": "3/2015"}, {"body": "jsfb tended recommend linting running jsx fb preserves line numbers etc", "d": "3/2015"}, {"body": "eeeh would mean someone lint rules state must space function name open pren linter would fail number potential lint rules happen conflict whatever transpiler produces ca nt win people linting rules mutually exclusive thus possible transpiler output pass linters better lint human actually readingediting", "d": "3/2015"}, {"body": "true linter needs understand jsx particularly eslint nt year ago", "d": "3/2015"}, {"body": "yep agree", "d": "3/2015"}, {"body": "ah seems like mostly files combo options", "d": "3/2015"}, {"body": "filed dependency fix", "d": "3/2015"}, {"body": "zpao also seeing logs well lead believe might matching", "d": "3/2015"}, {"body": "good idea thanks", "d": "3/2015"}, {"body": "would useful sounds like kind thing lot people would caught apply topleveltypes quick look seems like raw browser signals used variety different places across code base mean would need add support triggering places generic entry point could familiar react internal architecture comes eventside things let know making sense", "d": "3/2015"}, {"body": "think need dom components least attach listeners also later extra work build list incorrectly cased strings", "d": "3/2015"}, {"body": "mdn writes tag omission void element start tag must present end tag must present seems bug", "d": "3/2015"}, {"body": "xmlcompatible markup next release", "d": "3/2015"}, {"body": "cody yes html xml xhtml syranide good news thanks", "d": "3/2015"}, {"body": "tried react closing tag output syranide violation end tag must present nt", "d": "3/2015"}, {"body": "cody closing tag yes believe valid", "d": "3/2015"}, {"body": "great react makes everyone happy", "d": "3/2015"}, {"body": "cody syranide beers", "d": "3/2015"}, {"body": "react css js presentation christopher chedeau see function see repo inspiration using works awesome sun mar cigitia notifications githubcom wrote currently react supports regular javascript objects dom components style objects divstyle color white reactcreateelement div style divstyle would wonderful could also support generic data css styles eg iterator interface would enable immutablejs clojurescript data structures directly used styles divstyle immutablemap color white reactcreateelement div style divstyle currently necessitates converting generic data regular javascript style objects every styled element every render pretty wasteful general extremely useful able express styles generic data let end user manipulate data application ui eg enduser ui themes serialize data dynamically merge manipulate data needed runtime react native already supports last sort thing merging stylesheets yet supported regular react even better serializability manipulability generic style data could used potential problems suggestion might might slow react reconciliation rendering react native already style syntax merging style objects together unless revised eg adding stylesheetmerge method people use instead suggestion might create api mismatch react react native nonetheless think generic style data quite important im already using copiously especially ui themes somewhat related reply email directly view github", "d": "3/2015"}, {"body": "garrrio project use regular javascript objects pojos express css styles prop already supports anyway issue able directly use kinds data eg persistent immutable data structures like immutablejs clojurescript support generic interface eg iterable css styling since version react already much thing element children persistent data structures like immutablejs clojurescript mori allow people similar things also much without completely copying objects every time possible use iterable data structures directly dom elements styles far tell cssstyleattribute rendering styleprop reconciliation simply iterate style pojos keys using loops already might pretty similar performance characteristics worries whether would induce great mismatch react native method merging arrays since arrays also iterables nonetheless super useful able directly use iterables props", "d": "3/2015"}, {"body": "whyisjake posting wrong project react native way", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "probably nt issue react react native whyisjake might installed package ruby npm unpublished npm team bordering malicious find thread hopefully running fix", "d": "3/2015"}, {"body": "run times", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "fits well idea frags example think want make possible sure want another call like idea definitely line interested", "d": "3/2015"}, {"body": "zpao currently overloading", "d": "3/2015"}, {"body": "renamed reactrender several releases ago please consider keeping date new versions", "d": "3/2015"}, {"body": "spicyj yes make confused two render different", "d": "3/2015"}, {"body": "first definition describes rendering class look like second takes first input argument want render described jsx markup second argument output go case end construct content method called second triggers actual rendering happen hope helps", "d": "3/2015"}, {"body": "jviereck thanks know", "d": "3/2015"}, {"body": "running multiple instances react currently supported possible work around tweaks still isolated use instances interchangeably", "d": "3/2015"}, {"body": "yeah unfortunately nt support right like nt know good job issue tracking", "d": "3/2015"}, {"body": "especially issue packages also depend react seems like go away react switches parent context instead owner case fix issue specifically", "d": "3/2015"}, {"body": "chance get full stack trace error use pooling reuse objects instead creating new ones every time", "d": "3/2015"}, {"body": "ok thanks post morning uk", "d": "3/2015"}, {"body": "update trying render basic reactjs application server via nashorn java turns trying debug problems within engine really damn difficult hard get decent error messages back load testing found requests dropped due referenced error thrown suspected possibly something gc happening pretty consistently luck people suggested may concurrency issues sadly nt time properly dig things spike using reactjs nashorn together looks like abandon project thanks looking issue", "d": "3/2015"}, {"body": "sorry hear sounds like nashorn may buggy nt heard anyone problem engines", "d": "3/2015"}, {"body": "best way ask support mailing list stack overflow irc better answer question though use props child handle props update setstate though case may actually want using props state", "d": "3/2015"}, {"body": "thanks answer sorry ask", "d": "3/2015"}, {"body": "worries mar pm oscar men\u00e9ndez notifications githubcom wrote thanks answer sorry ask reply email directly view github", "d": "3/2015"}, {"body": "knockout primarily data binding library manages changing dom state update model react leverages state amp props generate views datamodel think knockout add", "d": "3/2015"}, {"body": "pfazzino said react used generate views datamodelbut ever consider datamodel changed update views therefore want use knockout automatically update views", "d": "3/2015"}, {"body": "think missing one key points react one secrets name react rerenders dom every time state changes nt need anything update views mutate state dom reflects changes knockout nothing offer", "d": "3/2015"}, {"body": "pfazzino thank much try best wish", "d": "3/2015"}, {"body": "requested point wo nt able really long pattern passing along extra props thing eg renders regular specific class otherwise lets users specify props would get passed dom node anyway follow along issue updates", "d": "3/2015"}, {"body": "app render method attempting return two elements allowed return one javascript var navbar require navbarjsx var app reactcreateclass render function return bootstrap starter template use document way quickly start new project get text mostly barebones html document moduleexports app", "d": "3/2015"}, {"body": "also reactjs freenode great communities get help like", "d": "3/2015"}, {"body": "thanks must need wapper got", "d": "3/2015"}, {"body": "iamdustan invite", "d": "3/2015"}, {"body": "ah main sign page currently use get invite", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "would jsdoc work", "d": "3/2015"}, {"body": "would use advantages simply using comments", "d": "3/2015"}, {"body": "know would use fkling wink", "d": "3/2015"}, {"body": "iamdustan see use cases personally prefer leverage existing concepts eg comments instead introducing new api learned remembered writing comment probably less friction developer calling api may also make bit difficult write custom validators unless help text really property function necessarily want consider angles ideally reach canonical way document react components see", "d": "3/2015"}, {"body": "goal still commit version reactdocgen looking integrating reactdocgen deprecating project relatively near future would hopeexpect component name property name property type andor default value provide enough affordance almost situations describe usage", "d": "3/2015"}, {"body": "thanks feedbackdiscussion guys fairly new reactjs would use model definitions django python web framework useful team members read quickly grok field used text used throughout project forms admin documentation etc single source truth documentation purposes field anyway nice pattern could useful components coffee moduleexports reactcreateclass displayname autocompleter component proptypes maxresults reactproptypesinteger helptext max number results autocompleter render someambiguousproperty reactproptypesfunc helptext descriptive text agree inline comments totally work case team using current convention thought nice pattern could useful", "d": "3/2015"}, {"body": "something like might work javascript function autobind instance objectkeys instanceconstructorprototype foreach f gt instance f instanceconstructorprototype f bind instance class something extends reactcomponent constructor super autobind", "d": "3/2015"}, {"body": "also lodashs bindall method could", "d": "3/2015"}, {"body": "likely include class property initializers able specify method arrow function autobind", "d": "3/2015"}, {"body": "unlikely add magic specifically react though new syntax enough", "d": "3/2015"}, {"body": "fyi forced using classes still exists autobinding continue exist foreseeable future classes intentionally nt support things language nt support", "d": "3/2015"}, {"body": "guys none solution works every class method nt enumerable objectkeys returns empty array", "d": "3/2015"}, {"body": "deser right look spec class methods enumerable binding constructor painful zpao recommendation use probably best option meantime class property initializers supported", "d": "3/2015"}, {"body": "pr let know mind", "d": "3/2015"}, {"body": "zpao intuition makes sense fix example call sanitization library change example completely demonstrate something else safer looks really bad security warning homepage react site makes seem like framework encourages unsafe operations rather safebydefault way things", "d": "3/2015"}, {"body": "switch demo use different library like markdownjs escapes everything nt support html", "d": "3/2015"}, {"body": "markdownjs looks good first attempt js function renderjsonml node typeof node string return reactcreateelement span null node var tag props children node typeof props string arrayisarray props children props concat children props null special case tag em amp amp children input return var childelements arrayisarray children childrenmap renderjsonml renderjsonml children return reactcreateelement tag props childelements class markdown shouldcomponentupdate nextprops return nextpropsvalue thispropsvalue render var value thispropsvalue var md markdownmarkdown var jsonml div mdtohtmltree mdparse value slice return renderjsonml jsonml const examplemarkdown example markdown uses markdownjs awesomely render markdown make changes like wrapping something see changes also special case input renders input input changing paragraphs wo nt mess trim class app extends reactcomponent constructor props thisstate markdown examplemarkdown handlechange e var markdown etargetvalue thissetstate markdown render return appstyles textarea width reactrender documentbody code licensed bsd someone wants turn coherent example signed cla", "d": "3/2015"}, {"body": "good suggestion zpao thoughts happy change example use markdownjs like people suggested brigand nice usage example", "d": "3/2015"}, {"body": "unless mistaken must use elements updating element uses children break iirc documentedwarned", "d": "3/2015"}, {"body": "syranide noted works using sure correct approach style tag contain css one would expect valid", "d": "3/2015"}, {"body": "maybe using good idea learn experimenting take look following code uses try transpile javascript using babeljs parser errors element everything works fine var mydiv test everything two brackets interpreted plain js following style definition variable contnat var mystyle classname mydiv following parse valid javascript var mystyleagain classname padding look output babelonlinerepl main issue jsx everything interpreted javascript case css content brackets different semantics sure jsx parser babeljs could adjusted cope cases fact hacking result looked confusing eventually ended defining react element find code hope helpful", "d": "3/2015"}, {"body": "jviereck interesting personally handwriting css inside styletag using browserify transform post babelify require styling cssstring getting babel errors beside point guess issue whether jsx support style tag supported think makes sense support css inside guys think two cents experimenting colocating everything related function component includes internal layout styling sometimes even small images images encode styling apply style tag lots tooling built around styling css sass less stylus etc lots great plugins features etc seems bit waste leaving behind styling pojo", "d": "3/2015"}, {"body": "think react right thing specifying browserify transform packagejson could minimize something anybody could reproduce maybe new repo try help sure much really", "d": "3/2015"}, {"body": "yeah docs wrong care send pr fix", "d": "3/2015"}, {"body": "oops mistake", "d": "3/2015"}, {"body": "first request dupe embarrassingly still open umnerged pr second suggestion nt really possible without advanced static analysis something could warn nt already", "d": "3/2015"}, {"body": "open pr haha awesome hopefully land soon static analysis minimal improved functionality sure true plain react js library see wo nt see entry thing table elements could certainly report trying render element never registered like still error console rather jsxbundlingwhatever still go long way narrowing things wrong", "d": "3/2015"}, {"body": "referencing existing component actually ca nt tell statically link refers createelement warn called course think already", "d": "3/2015"}, {"body": "class element", "d": "3/2015"}, {"body": "realise although find bit confusing class used create reactelements considered element clean way check object class creates reactelements factory mistaken", "d": "3/2015"}, {"body": "dmatteo equivalent vs factories helpers nonjsx users react consumes classes asis sure way definitively check whether given function valid component class cc spicyj", "d": "3/2015"}, {"body": "syranide understand difficulty problem related nonjsx users take use case javascript var newcomponent reactcreateclass displayname newcomponent result know already false confusing hand real component object tested testing also submit pr like idea", "d": "3/2015"}, {"body": "realised guys moved one level actually outputs", "d": "3/2015"}, {"body": "clear terminology elements lightweight objects reused element returned component class pretty much class render function returns element may constructors called directly react instantiation simplest example class also created factory actually function wraps creation element specified type called directly writing jsx never think factories honestly factories really unexciting get confusing basically rendered components state associated return value also methods properties objects anything underscore private really nt accessing break noticed never element nt sure idea proposing clarify", "d": "3/2015"}, {"body": "zpao thanks clarification still nt get render components recognised element could much useful testing components writing extension assertion library called unexpected take account tested element fact react element anyway put rough version like test needs polish serves proof concept see commit please let know think idea", "d": "3/2015"}, {"body": "rendered components simply nt elements different took rendered component used like element eg pass reactrender would get thing", "d": "3/2015"}, {"body": "see given obvious reasons ca nt test private properties way identify rendered reactelement react component", "d": "3/2015"}, {"body": "turn around need know may another way achieve working toward nt think checks component instances cc sebmarkbage", "d": "3/2015"}, {"body": "rendered element instance component class always check method believe guarantee one valid necessarily instantiated react", "d": "3/2015"}, {"body": "zpao use case trying create plugin unexpected assertion library called unexpectedreact order achieve extra ease testing react components one interesting features define type element passed input react accordingly error example ca nt tell difference class reactcomponent awesomeness go waste simply check props property another cool usage multiple functionalities equality operator eg first comparison pretty straight forward second one custom defined plugin without need extra complexity user syranide checking function suboptimal solution would love avoid", "d": "3/2015"}, {"body": "yea better plus side looks like error actually log near future browsers firefox nightly chrome beta able catch strings ok functions ok think objects certain characteristics ok render function", "d": "3/2015"}, {"body": "objects functions return objects render function thought warning already though", "d": "3/2015"}, {"body": "look", "d": "3/2015"}, {"body": "sorry references let know pr looks", "d": "3/2015"}, {"body": "react relies engines using object key insertion order iteration practically engines guessing nt could try using rhino perhaps closing unlikely change anything react support use case", "d": "3/2015"}, {"body": "tried run rhino got result know could run test check object key insertion available far know loading provides everything react world need run since would polyfill following react needs", "d": "3/2015"}, {"body": "hi albert yahoo security team working mridgway studying issue wan na share thoughts disabling dangeriouslysetinnerhtml good move would sufficient react allow inject script style tag style attributes would allow script execution also general worried ui redressing attack attackers create arbitrary overlay page could steal input submitted", "d": "3/2015"}, {"body": "nt think script tags execute use innerhtml create style tag style attributes allow execute context scripts modern browsers think older versions ie regardless ui redressing attack still equally valid concern", "d": "3/2015"}, {"body": "also doubt script tag saw supported facebookgithubioreactdocstagsandattributeshtml figured script tag used server side react would executable indeed style attacks works minor still contributes quite amount traffic", "d": "3/2015"}, {"body": "inclined see isreactelement used validation mechanism issue ca nt easily distinguish json object would execution context data context true server side validation could help works every time get json schema validate nature json suggested plain free form otherwise falling back xml validation would discourage developers use nutshell really need way distinguish json object executable context ie isreactelement thanks", "d": "3/2015"}, {"body": "none think react stay light lean unix philosophy fan", "d": "3/2015"}, {"body": "note json rendering virtual dom tree perfectly valid use case eg prerender high level component smaller level virtual dom tree server render result client also one ideas web worker rendering would construct virtual dom postmessaged rendered side therefore also consider options chose protect json data much mitigate scenario", "d": "3/2015"}, {"body": "possible solution use different syntax inserting strings children coerces username string coerces url string returns string number warns error explicitly wrap span use feels ugly would solve problem would nt", "d": "3/2015"}, {"body": "coercion nt catch mistakes miss would need make requirement eg wrapping strings placeholder distinct elements", "d": "3/2015"}, {"body": "suggested making error pass string noncoercing syntax plain", "d": "3/2015"}, {"body": "see would difficult enforce since come nested arrays nonjsx sources", "d": "3/2015"}, {"body": "really useful interfacing existing markdown libraries know one generates react elements nt point trying make removing feature bug nt even react fault seems pretty scorched earth", "d": "3/2015"}, {"body": "sebmarkbage schemaless storages becoming somewhat popular going become prevalent level repeat inserting foreign html markup result lack escaping react made goal make thing past instead vulnerability moved react components wrongly typed values lead insertion foreign hierarchies argue even could somehow guarantee insertion foreign hierarchies would nt dangerous would always bad malicious data always wreak havoc system react one part danger see react targeted apart easily exploited due debuggable clientside malicious data rendered users system hard guarantee malcious data wo nt able act freely assumed identity users think way forward drop implicit wrapping primitive values printable values elements like everything else react perspective implicitly wrapped like today printable value look something like still serializable exploitable jsx could simple syntax sugar say inline text would automatically wrapped may seem rather draconian sense think sensible way forward html introduced lot conviences turned really inconvenient user interfaces another one think practical implication bad seems sensible user interface backend would expose labels buttons etc would largely exclusive richtext components actually makes sense", "d": "3/2015"}, {"body": "think way forward drop implicit wrapping primitive values think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time instance always primitive render known safe potentially unsafe version look different causes readerauthor look closely eg something similarly wacky possibly much departure current way things viable note json rendering virtual dom tree perfectly valid use case nutshell really need way distinguish json object executable context ie isreactelement thanks react designed work plain objects input fact even getting rid isreactelement way verify conflicting goals think react would make clear choice options think decide data renderable increase documentation warning decide data primitive default introduce new jsx syntax render data intended nonprimitive find way mark data safe point support json cases well might need sort take plain object mark safe render eg proved bug prompted discussion boolean property enough mark data executable understand safe option would object reference perhaps something like checked using rendertime reintroduces multiplereact problem discussed could alleviated slightly sharing arbitrary flag object via global nt really help iframes web workers multiple windows bit brain dump seems simplest unsafe safest large change seems fiddly error prone hopefully someone else better idea", "d": "3/2015"}, {"body": "discussed several people leaning towards mark trusted solution nt reference identity unique enough token string number token shared environments similar way csrf default may share realm global could also completely disabled chose mar pm glen mailer notifications githubcom wrote think way forward drop implicit wrapping primitive values think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time instance username always primitive render known safe potentially unsafe version look different causes readerauthor look closely eg username something similarly wacky possibly much departure current way things viable note json rendering virtual dom tree perfectly valid use case nutshell really need way distinguish json object executable context ie isreactelement thanks react designed work plain objects input fact even getting rid isreactelement way verify conflicting goals think react would make clear choice options think decide data renderable increase documentation warning decide data primitive default introduce new jsx syntax render data intended nonprimitive find way mark data safe point support json cases well createelement might need sort hydrateelement take plain object mark safe render eg reacthydrateelement somejsonobj proved bug prompted discussion boolean property enough mark data executable understand safe option would object reference perhaps something like type div react react checked using react react rendertime reintroduces multiplereact problem discussed could alleviated slightly sharing arbitrary flag object via global window global reactmarker nt really help iframes web workers multiple windows bit brain dump seems simplest unsafe safest large change seems fiddly error prone hopefully someone else better idea reply email directly view github", "d": "3/2015"}, {"body": "glenjamin think provide safety would actually reverse easier render primitive value render component approach frontend frameworks converged time explicitly put primitive values value element becomes inherently safe primitive values render outside nonprimitive values stringified inside personally makes lot sense already implicitly wrap primitive values internally also nonmarkupstyleinheriting backend would work thing rendering inline text ios user interface libraries really makes sense rendering richtext content also implemented say cc would want single type children", "d": "3/2015"}, {"body": "explicitly put primitive values value element becomes inherently safe primitive values render outside nonprimitive values stringified inside see mean long primitive nonprimitive syntaxes separate safe subtly different html escaping strings strings work correctly escaping forgotten", "d": "3/2015"}, {"body": "glenjamin subtly different html escaping strings strings work correctly escaping forgotten yeah would equivalent already today html markup implicitly creates text nodes like react currently also source xss html react react hierarchies objectbased rather string react vulnerable malicous objects instead sebmarkbage seems weird add another feature work around nt inherent issue introduced implicit wrapping primitive values borrow html still nt make sense purpose user interfaces quite sure performance implications minimal obviously significantly affect code one way another doubt important consideration react challenged many wrongdoings inconvenient conveniences html far think another one", "d": "3/2015"}, {"body": "nt reference identity unique enough token string number token shared environments similar way csrf default may share realm global sounds like work idea default would randomly generated client toplevel api readwrite", "d": "3/2015"}, {"body": "like idea trust reactcreateelement mechanism declare trust current environment jsx throw string trusted element stringordie span trusted reactcreateelement hey explicitly reactcreateelement pojo trust stringorelement simplest way element common property prototype exposed globally andor allowed set externally multiple react instances integration libraries alternatively could nonenumerable property rce could set tojson excludes property cause confusion end sending server get error incorrect token rather missing one adding extra syntax would unfortunate simple helper function exposed react would good explicit optout future react security feature like angular scetrustashtml case serialized element cool nt think asking little explicitness harm anyone users person maintaining code oh hey rendering something get server need careful code also please throw nt warn string", "d": "3/2015"}, {"body": "might missing something react need complicate inserting stuff like conditional jsx elements forcing users wrap issue react usecases server written properly far understood original report issue server accepting json object schema wat savingsending asis wat usecases pick needed fields course validate typerange expectations golden rule code security never trust data client asis perform server validation server accepts random data objects sends clients much bigger problems think whether using react cc alexeyraspopov zerkms", "d": "3/2015"}, {"body": "rreverser also sebmarkbage links demo code reproduce issue", "d": "3/2015"}, {"body": "attempt reproduce dangerous issue see html code added body script nt work clientside rendering protected ignore difficult string concatenation jsfiddle uses clientside version jsxtransformer", "d": "3/2015"}, {"body": "might missing something react need complicate inserting stuff like conditional jsx elements forcing users wrap issue react usecases server written properly rreverser applies html well look turned react obviously less susceptible relies objects one missinginsufficient check somewhere susceptible backend say json schema attacker potentially act behalf users visiting site reason see react make effort prevent like html markup", "d": "3/2015"}, {"body": "alexeyraspopov", "d": "3/2015"}, {"body": "brigand okay tell backend developer allows server receive json without fixed schema upd type xss works every js frameworklib allows render html", "d": "3/2015"}, {"body": "alexeyraspopov consider mustache provides two flavours template iterpolation default safe template authors optin unsafe behaviour understanding variable used unsafe portion checked stringently react also feature unsafe version even awkward missed however react translating createelement calls literals safe version safe creates false sense security good security like onion many layers yes developers nt allow arbitrary data reason top entries owasp top related untrusted data passing system happens practice reasonable steps popular libraries take makes hard makes mistakes high net gain", "d": "3/2015"}, {"body": "output single element got solutions return cells parent making composite component function returning reactfragment javascript function rendercells parent params return reactcreatefragment ref callback api makes possible add refs parent composite component one one c gt paramsfoo two two c gt bar parent component render return td rendercells thisprops", "d": "3/2015"}, {"body": "thanks fast response afraid done like wanted try implement solution thanks", "d": "3/2015"}, {"body": "also want point browsers automatically add necessary cause react stumble enough code see issue well", "d": "3/2015"}, {"body": "yes noticed case problem fact thanks suggestion", "d": "3/2015"}, {"body": "going close point feel free subscribe discuss definitely known limitation react currently works", "d": "3/2015"}, {"body": "bump days silence cc leebyron error comes immutablejs cc sebmarkbage bit unclear immutable data structures react supports", "d": "3/2015"}, {"body": "problem think immutable using return value map create new set legit however order objects values needs shim weak maps order actually needs set property object case reactelement react freeze element creating thus making nonextensible best bet probably turn set array map works array size implementation detail trie library sure much really react end moment want freeze elements dev prevent user error establish best practices perhaps add fancy interop immutable knows dealing react element", "d": "3/2015"}, {"body": "thanks explanation zpao trying avoid convert immutable objects however use case switched using immutablelist fine originally exploring usage list set orderedset map etc might interact react components recommended pass immutable objects react components", "d": "3/2015"}, {"body": "recommended way turn sequence iterable first using toseq mapping mar michael narciso notifications githubcom wrote thanks explanation zpao trying avoid convert immutable objects however use case switched using immutablelist fine originally exploring usage list set orderedset map etc might interact react components recommended pass immutable objects react components reply email directly view github", "d": "3/2015"}, {"body": "dupe", "d": "3/2015"}, {"body": "someone else mentioned surprising", "d": "3/2015"}, {"body": "experiencing issues recently", "d": "3/2015"}, {"body": "far understand idea basically equivalent htmltype meant use accidentally pass unsafe data model make sense", "d": "3/2015"}, {"body": "syranide nt mean people wo nt write even pretty reasonable careful naming varsprops", "d": "3/2015"}, {"body": "simplest workaround coerce empty string react internally", "d": "3/2015"}, {"body": "idea try adding code", "d": "3/2015"}, {"body": "react whatever editor using specifically even saying html yet put text escaped text coming", "d": "3/2015"}, {"body": "thanks want make sure react nt rewrite state silently hope nt misspell english words call component two supposed print string maybe sometimes second one different like tags gone", "d": "3/2015"}, {"body": "react nt anything special state properties put html get html make minimal repro case shows nt case happy take react nt anything state properties fairly confident case", "d": "3/2015"}, {"body": "guess use page loads script http gets blocked made pull request fix could nt test fingers crossed right", "d": "3/2015"}, {"body": "though going remove page let live entirely reactmagic repo", "d": "3/2015"}, {"body": "zapo scripts live reactmagic repo think keep page react site still really useful", "d": "3/2015"}, {"body": "look line logincontrol viewed class object mocking method class object instance", "d": "3/2015"}, {"body": "seems correct code context taken owner previous versions work context taken parent example parent thus receive context modified example nt work work js var contextparent reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo context value render return reactchildrenonly thispropschildren var root reactcreateclass render function return var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo reactrender documentbody", "d": "3/2015"}, {"body": "cc jsfb following plans context confirm", "d": "3/2015"}, {"body": "gaearon thanks explanation stupid question root parent child example component child component b passed children property b", "d": "3/2015"}, {"body": "managed get rid warning following code javascript var wrapper reactcreateclass childcontexttypes foo reactproptypesstring getchildcontext function return foo hello context render function return reactcreateelement thispropscontent var root reactcreateclass getinitialstate function return foo false render function thisstatefoo return else settimeout function thissetstate foo true bind return div var child reactcreateclass contexttypes foo reactproptypesstring render function return thiscontextfoo thiscontextfoo foo reactrender documentbody sure nt produce warning maybe direct children context changing component must static anyway works", "d": "3/2015"}, {"body": "component child component b passed children property b afaik yes sure nt produce warning maybe direct children context changing component must static sure either perhaps jsfb sebmarkbage enlighten us anyway nt really need get rid warning use old ownerbased context throughout change code use parentbased context make minimal dependency warning tells code break nothing nt jump hoops get rid", "d": "3/2015"}, {"body": "grav reading propsstate arguments unable access updated propsstate ever returns false propstate actually changed problem inline closures render reading outdated propsstate", "d": "3/2015"}, {"body": "syranide give example means render differ using", "d": "3/2015"}, {"body": "always output props last rendered necessarily uptodate props whereas put always output uptodate props", "d": "3/2015"}, {"body": "syranide thanks nt think case nt want rerender still want uptodate props seems like could used explicit docs something still update even return false", "d": "3/2015"}, {"body": "bunch discussion thing default react somewhat functional somewhat oo world enabling moving forward something like function right signature component going close overloap feel free read thoughts", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "sorry poor english mean immutable component write instead ie lifecycle method shouldcomponentupdate either accept function boolean value", "d": "3/2015"}, {"body": "youmoo right far see react components classes bunch values magic values shapeshifting properties avoided costs method function cc sebmarkbage", "d": "3/2015"}, {"body": "yeah since write get effect rather keep api consistency instead making pattern characters shorter even write arrow functions looking save", "d": "3/2015"}, {"body": "think might want build different system parent promises properties pure children able shallow comparison default", "d": "3/2015"}, {"body": "sebmarkbage", "d": "3/2015"}, {"body": "hood react listens click events instead change normalize browser differences accepted solution nt use preventdefault use stoppropagation instead make use timeout reading", "d": "3/2015"}, {"body": "jquense maybe detail exactly going effect still observed use onclick directly maybe give flow happening", "d": "3/2015"}, {"body": "tigergrid read issue linked zpao covers quite nicely essentially running limitation react implements event checkboxes", "d": "3/2015"}, {"body": "unfortunate way nt good reason using preventdefault nt", "d": "3/2015"}, {"body": "probably open framed content new window debug normally right", "d": "3/2015"}, {"body": "reactrouter compiled also closure compiler minifying prop names would correct thing since understanding supposed create externs file lists property names uses key remains unchanged let know nt sound right", "d": "3/2015"}, {"body": "example gave reactroute would apply react library externs react reactrouter even created elementconfig type handler path keys however externs work case jsx transform annotate datatype object creates extern verifies argument sent function imply object passed elementconfig ie jsx transform would need output externs wrote js typedef object elementconfig property reactreactcomponent handler needed reactrouter property string path needed reactrouter var elementconfig param reactreactcomponentstring type param elementconfig config param children return reactreactcomponent reactcreateelement function type config children thinking rather default behaviour perhaps option passed jsx nt adversely affect application sizes users", "d": "3/2015"}, {"body": "would nt still get minified end would nt become something like would quoted transform everybody accessing props would write seems pretty fragile", "d": "3/2015"}, {"body": "yes option would still get minified end accessing props would need written rather however developers work closure compiler understand write two styles accessor nt think really big problem compile react reactrouter part project rather externs without change code work renamed files works however react closure compiler friendly without tweaks even produces warnings advanced mode verbose warnings prevents seeing errors warnings including within build also removes ability leverage existing cdn two projects worth nothing due renaming process react developer tools break said non defaulted option jsx transform allows developers wanting use react react libraries closure compiler build react projects easier working debugging tools", "d": "3/2015"}, {"body": "surprising", "d": "3/2015"}, {"body": "something documentation missed", "d": "3/2015"}, {"body": "good idea thanks want send pull request", "d": "3/2015"}, {"body": "sure mar pm ben alpert notifications githubcom wrote good idea thanks want send pull request reply email directly view github", "d": "3/2015"}, {"body": "looks like dup fixed", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "think bug intentional breaking change thanks reporting", "d": "3/2015"}, {"body": "wishcow plain object allowed put classes", "d": "3/2015"}, {"body": "wiki page linked incorrect would make working immutablejs probably immutable implementions pita since would packunpack object every time storeretrieve", "d": "3/2015"}, {"body": "wishcow seems cc leebyron sebmarkbage", "d": "3/2015"}, {"body": "wishcow encountered thing storing immutablejs object state directly clobbers simply putting attribute works fine eg", "d": "3/2015"}, {"body": "experiencing upgrading well nt seem problem react seems almost make sense state could immutable object since equality comparison cheap could nest state object state thisstatestate yuck seems like would create lot boilerplate code nt need", "d": "3/2015"}, {"body": "think", "d": "3/2015"}, {"body": "yeah bit bad used immutablemap state plain object worked absolutely great broke forces add bunch useless vanilla objects single child prop hold immutable map", "d": "3/2015"}, {"body": "think recommended way make sure properly cleaning resources canceling timers etc componentwillunmount nt need worry later whether component still mounted sebmarkbage probably say", "d": "3/2015"}, {"body": "common case difficult promises terrible design make cancelable probably add custom workaround promises everything else recommend clean timers", "d": "3/2015"}, {"body": "believe duplicate", "d": "3/2015"}, {"body": "believe duplicate absolutely knew one could nt find found weeks ago closing explicitly link link issue well point usecase", "d": "3/2015"}, {"body": "looks like nt part html standard neither specify", "d": "3/2015"}, {"body": "old version nt", "d": "3/2015"}, {"body": "seems dropped spec saw mentioned somewhere replaced", "d": "3/2015"}, {"body": "syranide thank answer", "d": "3/2015"}, {"body": "seem issue normal", "d": "3/2015"}, {"body": "yes knew perf regression dev cost business add warnings things like freeze props setting getters remove deprecated patterns see speedups since less code warnings leave open sure much really point even want", "d": "3/2015"}, {"body": "profiling nt big obvious easy wins probably going leave like hopefully next release", "d": "3/2015"}, {"body": "consistent regression across various vms prod", "d": "3/2015"}, {"body": "cc jsfb sounds like definitely want address cut", "d": "3/2015"}, {"body": "taurose submitted pr following suggestion testcase included close issue", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "possibly related", "d": "3/2015"}, {"body": "hi set gulp task react harmony false true everything working right thanks thanks", "d": "3/2015"}, {"body": "sorry meant comment day figure right option sorry confusion lack docs", "d": "3/2015"}, {"body": "hi happy solution thanks quick reaction", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "free use whichever like question", "d": "3/2015"}, {"body": "nt want use whatever like like react like javascript firstclass function language functional programming capabilities prototypal inheritance first react manifesto composition inheritance see something bring different route sorry would like explain better point first things first would like discuss decisions according post react blog see marketing plain javascript classes targeting javaist people example code autobinding broken getinitialstate dropped hey components life cycle imo defining method represent initial state component idiomatic putting state property everywhere constructor also getinitialstate help understand fast component state instead searching constructor defining proptypes defaultprops outside class cmon promise declarative syntax property initializers mixins broken languages coffescript targeting rubyist people really strong new shiny specification want still use coffeescript finally best example code seen", "d": "3/2015"}, {"body": "mirkodrummer still new changes free tweak however like change effectively making react unopinionated construct classes taken anything away simply stepped back enforcing", "d": "3/2015"}, {"body": "syranide reactcreateclass still yes still", "d": "3/2015"}, {"body": "mirkodrummer always might actively maintained react team forseeable future idea way deprecated free usewrite better replacement", "d": "3/2015"}, {"body": "anyway think nt get point javascript classes something sounds continuing errors past imo unique reason use class get developers", "d": "3/2015"}, {"body": "anyway think nt get point javascript classes something sounds continuing errors past mirkodrummer makes sense react stepped back unnecessarily opinionated bad incredible improvement current state every js framework existance invented consistently flawed concept classes never compatible classes", "d": "3/2015"}, {"body": "ok let say could see point opinionated things bla bla bla anyway cover real problem javascript beautiful prototypal language nt know js want class construct many us actually wants class constructs make react components could nt see valuable pro syranide want class system ok want know everybody", "d": "3/2015"}, {"body": "mirkodrummer want use choice syntax sugar anyway nt see point setting prototype manually mork using traditional prototypes reactswf simplicity widespread native syntax far far away using class syntax professional work", "d": "3/2015"}, {"body": "mentioned swf name proud old ugly web nt want waste time anymore syranide waiting guys opinion anyway thanks", "d": "3/2015"}, {"body": "mirkodrummer always make fork react move project fork side prefer also keep calm man nt angry people", "d": "3/2015"}, {"body": "vanesyan give reason classes javascript react please", "d": "3/2015"}, {"body": "guys seen proposal looks like future", "d": "3/2015"}, {"body": "mirkodrummer afraid argument wrong place article posted figured business designing class system want use whatever idiomatic javascript way creating classes nt reasonable library especially relatively young one want make sure evolving language classes may js right yet looks like things headed direction personally mixed feelings classes ca nt begrudge react moving language want voice complaint classes javascript sure productive places", "d": "3/2015"}, {"body": "first native also code elegancy consistency sometimes useful extends properties component another component reasons use people like anyway syranide said exists long time reasons nervous", "d": "3/2015"}, {"body": "place argue discuss reasons keyword classes exist real classes still use prototypical inheritance js always ironic okay proprietary classlike syntax mirkodrummer unsure intentional way replied syranide appears turned discussion language construct personal issue disagree move", "d": "3/2015"}, {"body": "reasonable react evolves along imo class best one anyway discuss class keyword hear people really want class system react components turns class system time embrace wrong approach composition factory function intended inheritance", "d": "3/2015"}, {"body": "vanesyan said sometimes useful extends properties component another component yeah point inheritance composition", "d": "3/2015"}, {"body": "yes want react support features including classes", "d": "3/2015"}, {"body": "react components preferlove also prefer composition inheritance hope react team dont deprecate", "d": "3/2015"}, {"body": "hope react team dont deprecate bjrmatos ca nt might stop supporting point tied core reason community ca nt take long happens likely nothing utility", "d": "3/2015"}, {"body": "mirkodrummer meant extending one part component another inside one component yeah components isolated", "d": "3/2015"}, {"body": "syranide concern react core couple class system core flexible support awesome imho approach components creation would better system", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "bjrmatos classes instantiated method compatible regardless built react knows cares even react wanted discriminate could nt nothing worry", "d": "3/2015"}, {"body": "syranide bitching moaning pointless lol like use use something else simple", "d": "3/2015"}, {"body": "trying encourage inheritance prefer composition general continue try make feasible encouraging composition one reason promoting building higherlevel components instead using mixins possible may also interested sebastian comment", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "comparing nt guaranteed identical initial markup never cc arnihermann", "d": "3/2015"}, {"body": "aware might cause issues like point vjeux decided since debug message going try see worked might accurate perform parent element find string sure think neither guarantee give back html initial markup happy work prevent kind issues like call suggestions fix permanently browser using occured", "d": "3/2015"}, {"body": "arnihermann latest chrome", "d": "3/2015"}, {"body": "arnihermann innerhtml vs outerhtml makes difference issue neither gives guarantee return markup put reasonable solution see render new markup well read outerhtml compare", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "probably safest value assign observable provides first value via example relay assign different meanings data exist yet fetched ideal default data value would alternative provide new method eg suspect unnecessaryoverkill", "d": "3/2015"}, {"body": "pretty interesting however point view static typing happy keyvalue system type pretty much impossible express return single observable setmerge value resolved javascript class foo observe return loaduser thispropsuserid map user gt user render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid case multiple fetch something like javascript class foo observe return combinelatest loaduser thispropsuserid loadsomethingelse thispropssomethingelseid user somethingelse gt user somethingelse render perhaps bit verbose allows nice static type", "d": "3/2015"}, {"body": "also instead executing propsstate change access props state observable javascript class foo observe propsstream return propsstream flatmap userid gt loaduser userid map user gt user render thisdatauserid thispropsuserid ensure never show inconsistent userid username combinations return return hello thisdatausername thispropsuserid", "d": "3/2015"}, {"body": "reason nt want require use combinators understanding rxjs able subscribe multiple observables combining two observables way quite confusing fact least data sources probably implement subscription api even include combinators observables prototype requirement free use combinators need however subscribe simple flux store nt need think flow probably able handle static type using constraints check guys make sure think enough type data property observe type implied change going observables way describe application state implemented top like done explicitly application state since method idempotent framework free unsubscribe resubscribe needed", "d": "3/2015"}, {"body": "cc ericvicenti", "d": "3/2015"}, {"body": "least case typescript would way constraint return type based type least something like implemented", "d": "3/2015"}, {"body": "love use next version react dnd obviously requires waiting react wonder polyfill time higherorder component sets instance might crazy though", "d": "3/2015"}, {"body": "would possible observe promises one could use promises tree resolve data whole component tree first render would useful serverside react", "d": "3/2015"}, {"body": "benefits making firstclass api could essentially accomplished using higherorder component", "d": "3/2015"}, {"body": "benefits making firstclass api could essentially accomplished using higherorder component wrapping hocs get subscriptions bit unwieldy harder understand beginners understanding also nontrivial fixes one welcome new observable overlords", "d": "3/2015"}, {"body": "wonder help bring closer react vanilla api", "d": "3/2015"}, {"body": "would nt take one hoc example medium post iterate subscribe", "d": "3/2015"}, {"body": "aaronshaf depends use case sure sometimes different kinds state sources several stores ca nt say behalf react team let hear sebmarkbage says", "d": "3/2015"}, {"body": "would love sort polyfill play nt get idea completely yet mechanism involved dealing future updates spend time understanding think doable simple mixin", "d": "3/2015"}, {"body": "vjeux told chime nt mean promote work think hook similar hook react nexus declare data deps component level via lifecycle hook depend props api looks like binding appliedupdated latter case next bindings diffed previous bindings removed bindings unsubscribed added bindings subscribed underlying fetchingupdated mechanism described implementation nexus flux basically api either subscribe local data traditional local stores remote data fetch using get receive patches via websocketspolyfill could actually subscribe data another window using postwindow webworkerserviceworker still nt found truly useful use case long story short synchronously describe data deps component level using flux abstraction hooks make sure dependencies automatically subscribed injected updates unsubscribed also comes nice feature exact lifecycle functions leveraged perform data prefetching serverside rendering time basically starting root recusrively react nexus prefetches bindings renders component continues descendants components rendered", "d": "3/2015"}, {"body": "aaronshaf gaearon benefit making first class nt eat away props namespace eg higherorder component nt need claim name like props object ca nt use anything else chaining multiple higher order components keeps eating names find way keep names unique composing something might already composed name conflict besides think bestpractice higherorder components avoid changing contract wrapped component ie conceptually props otherwise confusing use debug consumer supplies completely different set props received nt use store last value concept similar sense purely memoization free throw point need reclaim memory example infinite scroll might automatically clean invisible subtrees", "d": "3/2015"}, {"body": "rickwong yes would fairly trivial support promises since subset observables probably unopinionated however would still probably recommend using find inferior observables following reasons ca nt canceled automatically framework best ignore late resolution meantime promise holds potentially expensive resources easy get thrashy situation subscribecancelsubscribecancel long running timersnetwork requests use promises wo nt cancel root therefore wait resources complete timeout detrimental performance large desktop pages like facebookcom latency critical apps memory constrained environments like reactnative b locking getting single value data changes time ca nt invalidate views end inconsistent state reactive single serverside render might fine however client ideally designing way stream new data ui automatically update avoid stale data therefore find observable superior api build since nt lock fix issues need", "d": "3/2015"}, {"body": "elierotenberg thanks chiming seem similar indeed kind benefits see limitations proposal ie something missing react nexus could nt build top would nice nt lock important use cases", "d": "3/2015"}, {"body": "serverrending standpoint important able postpone final rendertostring observablepromise resolved data could fetched asynchronously otherwise still position asynchronous data fetching outside react without knowing components page yet believe reactnexus allow asynchronous loading happen within component continuing render tree", "d": "3/2015"}, {"body": "yes reactnexus explicitly separates binding declaration synchronous sideeffect free lifecycle method similar render actually used name renderdependencies thought confusing binding subscriptionupdate synchronous diffs previous nexus bindings determine new bindings must subscribed ones must unsubscribed binding prefetching asynchronous resolves initial whathever means value ready returns hook mimicks construction react tree using recursively constructsprefetchesrenders components whole component tree ready finally calls knowing data ready modulo errors resolved value promise injected server response client regular lifecycle works usual", "d": "3/2015"}, {"body": "anybody wants play around kind api made really dumb polyfill higher order component js import react component react export default function polyfillobserve composedcomponent observe const enhancer class extends component constructor props context super props context enhancerproptypes composedcomponentproptypes enhancercontexttypes composedcomponentcontexttypes return enhancer usage js ca nt put component good enough playing function observe props context return yourstuff observeyourstuff props class yourcomponent extends component render note thispropsdata thisdata return thispropsdatayourstuff export default polyfillobserve yourcomponent observe", "d": "3/2015"}, {"body": "observable concrete agreed upon thing aside library implementations contract simple enough implement without needing use bacon rxjs nice first class api sideloading data would seems weird react add api based unspecedveryinitialspecing primitive given react steady movement towards plain js would something like ties us specific user land implementation aside streams horse race honestly wondering already work done web streams course node", "d": "3/2015"}, {"body": "another two consider", "d": "3/2015"}, {"body": "jquense active work proposal adding observable ecmascript ideally would become plain js currently outofdate would take dependency rxjs api trivial implement without using rxjs rxjs closest active ecmascript proposal mostjs seems doable baconjs api seems difficult consume without taking dependency bacon use types separating values stream apis highlevel far removed use case", "d": "3/2015"}, {"body": "kind await render option mean client necessary wait observables rendering server want wait resolve component render full partial explorations found important lifecycle hook missing serverside react", "d": "3/2015"}, {"body": "following discussion tried sum react nexus following post ismorphic apps done right react nexus heres diagram core prefetching routine", "d": "3/2015"}, {"body": "would take dependency rxjs api trivial implement without using rxjs rxjs closest active ecmascript proposal big concern thinking say promises implementing extremely fraught unless know think otherwise end implicit requirement specific lib ecosystem tangentially one nice things promise world test suite even across libraries least assurance common functionality helpful promise interop standardized", "d": "3/2015"}, {"body": "big concern thinking say promises implementing extremely fraught unless know think otherwise end implicit requirement specific lib ecosystem completely agreed thankfully observables really simple contract nt even builtin methods like way even simpler promises", "d": "3/2015"}, {"body": "might become complicated slower committee insists calling schedules microtask like promises", "d": "3/2015"}, {"body": "would bother lot pattern based fact onnext synchronous rxjs", "d": "3/2015"}, {"body": "think common flux store pattern might keep map observables perkey basis reused clean everyone unsubscribed way things like always get back observable", "d": "3/2015"}, {"body": "way things like mystoreget thispropssomeid always get back observable would using gone know make sense cases already pass unique identifier", "d": "3/2015"}, {"body": "way things like mystoreget thispropssomeid always get back observable pattern use react nexus store observe returns memoized immutable observer cleanedup including relevant backendspecific cleanup mechanism sending actual unsubscribe message whatever subscribers gone least one tick", "d": "3/2015"}, {"body": "sebmarkbage gaearon would observe work server would able properly wait observers resolve rendering string similar reactnexus built react", "d": "3/2015"}, {"body": "imo would great components waited first observed value ready rendering server", "d": "3/2015"}, {"body": "gaearon imo would great components waited first observed value ready rendering server yes asynchronous rendering meantime andreypopp alternative requires hack react would great react could support asynchronous rendering outofthebox", "d": "3/2015"}, {"body": "async rendering something would like support part issue l probably wo nt make unfortunately many different designs consider refactor needed feel free create issue describing architectural changes internals needed make happen", "d": "3/2015"}, {"body": "thought gaearon reactstreamingstate given potential applications side loading might better name example would clearly associate method nt mean derail bikeshedding wanted throw", "d": "3/2015"}, {"body": "ca nt wait observables react make react reactive understand", "d": "3/2015"}, {"body": "repro case", "d": "3/2015"}, {"body": "gut says multiple versions react mixing", "d": "3/2015"}, {"body": "seems running bugs currently possible", "d": "3/2015"}, {"body": "unfortunately right simply way actually use parent context yet probably best using deprecated features context trickier migration want taken cut warnings mostly unactionable really nt think mix two conditionally use parent owner fraught peril dependency change could break everything issue using track switch jsfb sebmarkbage anything add", "d": "3/2015"}, {"body": "two tricks use childcontextprovider simplest one accept function instead passing child directly instead would use legacy method since tool gives new owner context nested elements would loop using reactchildren recursively make context provider owner children way work parentowner based context complexity comes fact passing outside root usually created root complexity changing things", "d": "3/2015"}, {"body": "thanks works fine passing function create child could remove withcontext call", "d": "3/2015"}, {"body": "getting misreads reactmount error using method alongside reactrouter route transitions factory component top level whenever transition route incrementing root reactdataid example start go certain route get error increments going explore little wanted note first", "d": "3/2015"}, {"body": "ok avoiding top level factory pattern works fine", "d": "3/2015"}, {"body": "beginning tutorial actually makes reference need server order complete portion tutorial updates server side data could probably mentioned closer implementation posting code think reason server side code simply overwriting flat json file keep focus tutorial react side things link code flat file updated response post request", "d": "3/2015"}, {"body": "ah ok thought bring attention repo sounds like", "d": "3/2015"}, {"body": "chances tweak tutorial little bit obviously interacting withe api file see interested helping", "d": "3/2015"}, {"body": "insight anyone provide", "d": "3/2015"}, {"body": "taking look think need call start outside render many measurements based around update batches batch already started time call internal state perf gets messed something original goal perf would used measure whole app could drill something like", "d": "3/2015"}, {"body": "nt understand closed nt least throw helpful error throwing type error seems unlike react especially something seems seems perfectly valid given documentation startstop measurement react operations inbetween recorded analyses operations took insignificant amount time ignored makes sound like called time", "d": "3/2015"}, {"body": "string would never look something else must going make repro case", "d": "3/2015"}, {"body": "error message appears try use reactclass helloworld defined helloworldjs var helloworld reactcreatefactory require helloworld helloworld var container reactcreateclass render function return works remove factory like without factory serverside rendering code nt works", "d": "3/2015"}, {"body": "deminoth nt use jsx plain class", "d": "3/2015"}, {"body": "ok fixed clientside code like serverside code like works well thank syranide", "d": "3/2015"}, {"body": "let check see better warning", "d": "3/2015"}, {"body": "spicyj deminoth problem one issue though making sure", "d": "3/2015"}, {"body": "syranide spicyj think tvaroh error issue reproduced mistake jsx put ca nt sure confirm", "d": "3/2015"}, {"body": "thank guys check", "d": "3/2015"}, {"body": "yes case closing", "d": "3/2015"}, {"body": "tvaroh really still making sense string would pass function check though", "d": "3/2015"}, {"body": "syranide removed called twice row", "d": "3/2015"}, {"body": "see calling getdomnode using property heuristic warnings classes done via getters accessing property even without calling results warning", "d": "3/2015"}, {"body": "planning anything seems little crazy every single one tests throws warning lookup example tests currently plus many could nt fit screen", "d": "3/2015"}, {"body": "something like work javascript const escapere new regexp g const safere string gt return stringreplace escapere class hightlight extends component static proptypes match proptypesstring string proptypesstring render return gt", "d": "3/2015"}, {"body": "yes thinking abusing like idea method labelled dangerously good reasons way teach react parse jsx within string react parse ie return render method", "d": "3/2015"}, {"body": "binarykitchen construct react elements dynamically need ca nt string replacement", "d": "3/2015"}, {"body": "syranide yes already know point would nt nice jsxreact feature parse string turn tags inside child react components", "d": "3/2015"}, {"body": "use function regex replace captured parts like let know unclear", "d": "3/2015"}, {"body": "parsing jsx runtime errorprone slow easily security implications would nt inherently safer dangerouslysetinnerhtml", "d": "3/2015"}, {"body": "bit issue type case mlb mars ben alpert notifications githubcom wrote use split function regex replace captured parts like var parts cow cows say moo mooooo split bmoob gi var lt partslength parts return parts let know unclear reply email directly view github", "d": "3/2015"}, {"body": "akshayp sorry apply hand hurry", "d": "3/2015"}, {"body": "syranide thanks super quick turnaround", "d": "3/2015"}, {"body": "jsxorphanedbracketstransformer published update good go thanks filing", "d": "3/2015"}, {"body": "specifically noted docs note also relying javascript engine preserving object enumeration order guaranteed spec implemented major browsers vms objects nonnumeric keys planning keep asis react internals currently rely property allows faster performance options keep suggestion mind future", "d": "3/2015"}, {"body": "good know thanks", "d": "3/2015"}, {"body": "cc jeffmo know", "d": "3/2015"}, {"body": "babel gives helpful information transforming code looks like ca nt actually worked bug syntaxerror codejs unexpected token export default var hellomessage reactcreateclass actually testing reacttools also gives parse error mentions var illegal", "d": "3/2015"}, {"body": "nt original code nt work without either jsx var hellomessage export default hellomessage reactcreateclass render function return hello thispropsname reactrender mountnode try", "d": "3/2015"}, {"body": "ah previously esprima would parse importexports spec since updated incorrect use importexport parse error option added esprima exposed either either actually work see discussion jeffmo also talked outside github decided make default options would passed meaning modules would nt get parsed say jeffmo work option screwed tangential", "d": "3/2015"}, {"body": "particular issue answer probably give flag although beware old version esprima spec compliant enforce modules use strict default new parser one two things flag toggles zpao think two candidate options make sense default either nonmodule regular speccompliant module two speccompliant modes parser mode parser called nonstrictmodule meant temporary mode people transitioning existing commonjs modules modules nt chance verify old cjs modules strictcompatible yet would bad thing turn default would easy build notimplicitstrict modules expectation would work speccompliant browser forget case things would break speccompliant vm subtle ways nt remember decided option default suppose makes sense choose whichever one aligns people speculate people nt using modules yet otoh would nt opposed encouraging change momentum also plan react flow switch modules near future anyway maybe time rip bandaid matter though always case people choose script vs module via flag toggle", "d": "3/2015"}, {"body": "elaborate flag specifically would one fix parse error using client via", "d": "3/2015"}, {"body": "never mind previous comment using babel instead", "d": "3/2015"}, {"body": "yea right jsxtransformer limited set options could perhaps parse everything sure much worth also production code thing supporting modules nt huge priority going close shipped fix command line parsing", "d": "3/2015"}, {"body": "version seeing ca nt repro using test well command line", "d": "3/2015"}, {"body": "please close non issue", "d": "3/2015"}, {"body": "spicyj sounds like browser quark normalize right anything value would need check", "d": "3/2015"}, {"body": "jsfb also ran similar check nativeevent target placeholder text versus incoming value however valid user issue search text placeholder case filter definitely valid searchfilter term client", "d": "3/2015"}, {"body": "yeah seems odd probably challenging side first bug would good figure happening prevent still making possible type placeholder text directly captray says", "d": "3/2015"}, {"body": "really related imagine could solved similar fix", "d": "3/2015"}, {"body": "also goes", "d": "3/2015"}, {"body": "browsers js engines actually support class syntax yet likely need transform reacttools babel tools", "d": "3/2015"}, {"body": "zpao aware part strange thing works even though keyword one", "d": "3/2015"}, {"body": "works fine js class hello extends reactcomponent render return hello thispropsname reactrender documentgetelementbyid container complains", "d": "3/2015"}, {"body": "looks like extra curly brace second example", "d": "3/2015"}, {"body": "camspiers well ignore checkout fiddles mentioned issue", "d": "3/2015"}, {"body": "jsxtransformer supports features like classes without transformation happening get syntax error", "d": "3/2015"}, {"body": "polyfills related docs", "d": "3/2015"}, {"body": "nt much polyfill transform code code execution", "d": "3/2015"}, {"body": "oh hmm finally work matter browser supports nonjsx", "d": "3/2015"}, {"body": "let warn release", "d": "3/2015"}, {"body": "already warning right ready error per conversation syranide cited", "d": "3/2015"}, {"body": "merged", "d": "3/2015"}, {"body": "simple fix use instead want pass actual reference js variable", "d": "3/2015"}, {"body": "spicyj nt think asking think wants able create react element dynamically acquired name string looking instead", "d": "3/2015"}, {"body": "equivalent", "d": "3/2015"}, {"body": "spicyj edit correct", "d": "3/2015"}, {"body": "spicyj jsfb suggestions arrive outcome neither supporting ability dynamically generate name strings reference existing components wanted store id value component prop use name string render component looking something almost like eval running updated fiddle easy testing", "d": "3/2015"}, {"body": "probably know best practice use look globals string name tends make code hard reason use patterns react key use capitalized variable name else react treat builtin dom element", "d": "3/2015"}, {"body": "aware evils eval window lookups assumedhoped react would support something like secure scoped reference method part jsx transpiling one could easily implement immutable scoped object valid component names compare strings ensure nothing malicious going passed lookup method would greatly simplify dynamic component calls requiring massive switch else statements front render return statements spicyj jsfb thanks", "d": "3/2015"}, {"body": "maybe something like var allmycomponents var child reactcreateclass allmycomponents child child var component allmycomponents name nt large overhead reasonable using globals react tries simple get way instead adding lot magic build whatever want top js without react", "d": "3/2015"}, {"body": "think dom structure incorrect try remove another div wrapping events work", "d": "3/2015"}, {"body": "many workarounds one specify using dangerouslysetinnerhtml one however example shows unexpected issue event propagation inside dangerouslysetinnerhtml deliberately minimal test case reproduce issue could imagine html question much complex perhaps multiple forms external source perhaps cms hence system would know rewrite done", "d": "3/2015"}, {"body": "benjie also noticed onsubmit nt work", "d": "3/2015"}, {"body": "oh seems design triggered", "d": "3/2015"}, {"body": "people complain usually suggested use value instead defaultvalue often seen unpractical form many input fields since fields need onchange listener editable share onchangelistener nt see issue yeah people nt like reason even better solution two approaches updating uncontrolled inputs neither universally right assign ref call used underlying value changed input updated reflect assign key mostly preferable shared parent used input changed source ie referring another unrelated value like input different tab assigning key completely destroy previous input along focus etc second kind applies controlled components well rarely something really matters may obvious think interms traditional dom interaction either update value existing input eg switching tabs destroy dom render thus newly rendered inputs show current value", "d": "3/2015"}, {"body": "share onchangelistener nt see issue yeah people nt like reason mean setting input element certainly nt prefer duplication code really unnecessary second case believe people want implement run issue nt seen solution presented anywhere along risks focus loss", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "want arbitrary number input fields letting events bubble listener form specify listener per input field", "d": "3/2015"}, {"body": "theludd able exactly mentioned form changes use figure input changed within input form form event listeners", "d": "3/2015"}, {"body": "joshbedo yes know generates warnings makes go many others commented github always strive reduce number warnings actually true put onchange listener wrapping element generates lot warnings", "d": "3/2015"}, {"body": "yes also want bind onchange form form input field react give many warnings", "d": "3/2015"}, {"body": "want make sure performance test suite still works look day think broken", "d": "3/2015"}, {"body": "nah going block fix independently", "d": "3/2015"}, {"body": "update refs documentation callback style actually recommending yet nt matter support talked changelog ca nt discussions inline text field nt get updates idea asked ask comments", "d": "3/2015"}, {"body": "sorry", "d": "3/2015"}, {"body": "camspiers ah assuming mean testing suite problem believe shape correct wrong though", "d": "3/2015"}, {"body": "apparently fbme urls ca nt changed well without bypassing checks sure safe bypass skip part end day bad", "d": "3/2015"}, {"body": "reactrails reactsource gem couple good additions could make release", "d": "3/2015"}, {"body": "ok calling done followup tutorial", "d": "3/2015"}, {"body": "become nested children discarding inner array", "d": "3/2015"}, {"body": "weird looks like never right", "d": "3/2015"}, {"body": "yeah issue related recently created tabs component tabspanel inner children key nt specified sets key children means nt distinct copied state previously selected tab noticed upgraded worked perfectly behavior newer versions automatically add key based child index explicitly set", "d": "3/2015"}, {"body": "looks like btw", "d": "3/2015"}, {"body": "quite sure spread nt problem exactly error message says happens component reveals issue throws update initial broken render", "d": "3/2015"}, {"body": "else component syranide said nt seem like spread causing problem also fyi function string check", "d": "3/2015"}, {"body": "wow thinking sorry posting joke", "d": "3/2015"}, {"body": "cc sebmarkbage", "d": "3/2015"}, {"body": "nt anything specifically happen faked dom components reprod input also nothing using return value running makes happen guessing screwing something currentowner somewhere along line", "d": "3/2015"}, {"body": "comment wrong mea culpa much time coffeescript", "d": "3/2015"}, {"body": "render function returning valid value need return reactelement value add render method new example error goes away", "d": "3/2015"}, {"body": "new test case seems wrong jsfb says nt repro bug original one solid", "d": "3/2015"}, {"body": "yea invariant seeing different let get hung much specific example part important thing returning something ref conjunction rendering specific things string breaks add return div ref example error still", "d": "3/2015"}, {"body": "agree zpao simplified example slightly avoid confusion interaction rendertostaticmarkup return value var bug reactcreateclass render function reactrendertostaticmarkup reactdomimg return reactdomimg ref null bug reactcreatefactory bug reactrender bug documentbody rendertostaticmarkup clearly mutating something internals", "d": "3/2015"}, {"body": "sideeffects mutating owner stack components instantiated also lifecycle hooks constructors getinitialstate componentwillmount may cause sideeffects method pure may cause sideeffects throw invariant bunch methods render would much nicer error message workaround one lifecycles allowed sideeffects store result used inside", "d": "3/2015"}, {"body": "fix disable use case", "d": "3/2015"}, {"body": "gut says lazy think actually look see make behave better fine friendly error message better generating string markup considered side effect instantiating anything calling function side effects nt really buy excuse", "d": "3/2015"}, {"body": "another possible solution would disable componentwillmount serverrendering nt allow sideeffects constructorsgetinitialstate therefore making rendertostaticmarkup pure", "d": "3/2015"}, {"body": "contract component allowed trigger sideeffects mutations lifecycle methods need ensure api boundaries sideeffectful component happens sideeffect nt mean wo nt later regardless think probably go opposite route make asynchronous components resolve dependencies fully completing case definitely sideeffect still would nt make sense put render likely wo nt make render async", "d": "3/2015"}, {"body": "instinct zpao correct generating string markup nt automatically assumed sideeffectful components pure function props ideal design calling nt problem using janky components sideload data well use peril rendering another component different calling another library caller responsibility ensure invocation sideeffect free warn know invocation side effects nt block someone rendering string know components wellbehaved", "d": "3/2015"}, {"body": "thanks workaround sebmarkbage shifted rendertostaticmarkup componentwillmount componentwillreceiveprops works slightly less desirable render duplication bad", "d": "3/2015"}, {"body": "react rerender component component setstate method called manually mutating data way react know data changed thus way rerender calling setstate forceupdate appropriate ways notifying component data change future reference questions like better asked stackoverflow closing issue since bug react feel free continue conversation take issue stackoverflow", "d": "3/2015"}, {"body": "thank apologies adding issue", "d": "3/2015"}, {"body": "jquense looks like bug example cleaned bit example passing superfluous makes difficult fully understand going sebmarkbage issue readily demonstrated using deprecated function see demo render bar instead foo sebmarkbage new parentbased context enabled expect behave inherit current context use context effective position dom eg someone renders leaf node react component mounting", "d": "3/2015"}, {"body": "new parentbased context enabled expect reactrender behave inherit current context use context effective position dom eg someone renders leaf node react component mounting super interested well sense nt make sense pass parent context would break layer pattern passed unless course manually pass context theoretically owner subset parent right", "d": "3/2015"}, {"body": "yeah intuition inherit context dom user wants explicitly pass new context create wrapper component provides context variables potentially received props pass wrapper component thus maintaining parentbased propagation variables jquense owner necessarily subset parent parent owner theory independent though owner usually parent warn cases context variables used owner provided value match parent provided value rare", "d": "3/2015"}, {"body": "want way pass context see nested render trees", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "johnpostlethwait nt know either autosetting works using declaration jsx var app reactcreateclass displayname autoset app", "d": "3/2015"}, {"body": "thanks koulmomo presumed based experience wanted get ticket filed betterfixed documentation noticed", "d": "3/2015"}, {"body": "change add element body modal going shown also called seems really weird slow edit perhaps misremembering work anyway seems like issue mixin react", "d": "3/2015"}, {"body": "syranide used render modals nested components two flaw elements inside another fixed element buggy especially safari modals nested stylesheets mostly inherited occasionally brings confusions started move modals body reactcsstransition addon fails came solution found add container element body first fades modal ugly coffeescript way coffee react require reactaddons keyboard require utilkeyboard mixinlayered require mixinlayered reactdom reactproptypes cx reactaddonsclassset moduleexports reactcreatefactory reactcreateclass displayname bodymodal mixins mixinlayered proptypes components accepts children name tstring title tstring oncloseclick tfuncisrequired showcornerclose tbool show tboolisrequired componentdidmount gt windowaddeventlistener keydown onwindowkeydown componentwillunmount gt windowremoveeventlistener keydown onwindowkeydown onwindowkeydown event gt eventkeycode keyboardesc oncloseclick oncloseclick gt propsoncloseclick onbackdropclick event gt unless propsshowcornerclose eventtarget eventcurrenttarget oncloseclick renderlayer gt classname bodymodal isfor propsname div classname classname onclick onbackdropclick propsshowcornerclose classname icon iconremove onclick oncloseclick div classname box propstitle div classname title span classname name propstitle span classname icon iconremove oncloseclick propschildren render gt div maybe ask question like create react modal append transitions", "d": "3/2015"}, {"body": "tkohlman tests running", "d": "3/2015"}, {"body": "tests standard unit tests custom react components example toggle component dispatches event type toggleclick clicked", "d": "3/2015"}, {"body": "also seeing issue testing karma mocha", "d": "3/2015"}, {"body": "sebmarkbage looks like added todo get fixed happy help sure right heuristic", "d": "3/2015"}, {"body": "unfortunate nt quite know right heuristic changing anyway since refs dom component regular dom nodes think power", "d": "3/2015"}, {"body": "maybe", "d": "3/2015"}, {"body": "thinking reuse string types art react native would nt want react native node hit", "d": "3/2015"}, {"body": "maybe", "d": "3/2015"}, {"body": "property deprecated anyway great heuristic", "d": "3/2015"}, {"body": "lets move fast ref real dom node stuff instead spending time figuring", "d": "3/2015"}, {"body": "default behavior autofocus attribute tricks like setting value input focus nt use autofocus manually", "d": "3/2015"}, {"body": "ah true thanks charca", "d": "3/2015"}, {"body": "assume seen document inline styles styles behave browser styles yet solution clean shadow dom style encapsulation web existed many years without shadow dom certainly possible design websites using browser native style rules one thing could define style reset class resets styles default override defaults specific selectors alternatively could create base inlinestyle object default styles import object everywhere want apply specific style copy object override styles want set using want get really fancy could components style merging styleresetobject create automatically webdevs use components without seeing stylereset code two cents cc spicyj ps since usage question rather bug react going go ahead close issue feel free continue conversation thread closing issue mostly takes radar dev purposes ideal place questions like would stackoverflow", "d": "3/2015"}, {"body": "tend recommend using bemesque class names globally unique usually scoped component name css try avoid using descendant selectors favor single class names tends promote style isolation separation components makes easier compose components without styles falling apart", "d": "3/2015"}, {"body": "suit another great option great nose tooling rework conformance validators provide automated safeguard styles bleeding", "d": "3/2015"}, {"body": "looks like interesting solution", "d": "3/2015"}, {"body": "super obvious repo devtools file", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "seems cc spicyj sebmarkbage", "d": "3/2015"}, {"body": "one thing noticed using minified file property could causing issue", "d": "3/2015"}, {"body": "weird part copypaste content either everything gon na working soon switched import file minified one doowb noticed node package gives error", "d": "3/2015"}, {"body": "disabled uglification reactchartisttooltipminjs transpiled babel still gives error cause invariant violation instead object", "d": "3/2015"}, {"body": "fixed specifying react peer dependency rather normal dependency two copies react appeared compiled app behaved differently causing error", "d": "3/2015"}, {"body": "paste code maybe helpful", "d": "3/2015"}, {"body": "var movieitemsuggest reactcreateclass render function return var moviesuggest reactcreateclass getinitialstate function return movieviewlist componentdidmount function var self ajax type get datatype jsonp url success function result var movies resultrmoviesbycates movies selfsetstate movieviewlist movies reactrender documentqueryselector hdvsuggest swipercontainer function var swiper new swiper hdvsuggest swipercontainer slidesperview paginationclickable false first image resize browser image", "d": "3/2015"}, {"body": "idea swiper seems like probably mutating dom happens things go wrong react best guess asynchronous case actually need tell swiper added photos lifecycle hooks nt much actionable us nt bug react suggest talking developers asking question another place maybe stack overflow mailing list", "d": "3/2015"}, {"body": "idea use swiper create touch carousel data static work well data via ajax request errors show image every list image resize browser show full options swiper settings", "d": "3/2015"}, {"body": "react dom real dom try add unique attribute loop code", "d": "3/2015"}, {"body": "purerendermixin", "d": "3/2015"}, {"body": "yes meant link jsbin putting together pr", "d": "3/2015"}, {"body": "potentially worth noting getinitialstate likely become required stateful components near future see already case component calling ideally specifying", "d": "3/2015"}, {"body": "jsfb definitely think makes sense make required stateful components", "d": "3/2015"}, {"body": "style like already considered see reactfuture function couple considerations would increase api surface thus learning curve react need sure pattern common enough justify additional weight also need decide pattern legitimaterecommended design pattern questions around since effectively sideloading data data probably passed props parent anyway tracked reactfuture still needs baking going close", "d": "3/2015"}, {"body": "good catch explosion within component cause react core die cc sebmarkbage", "d": "3/2015"}, {"body": "effectively duplicate throwing render phase leaves react broken state unable recover need major refactoring introduce better regressions tests support close leave", "d": "3/2015"}, {"body": "run problem well found time spent constructing element descriptors vdom diffing solution cache descriptors manage cache ugly works believe react much better inline elements", "d": "3/2015"}, {"body": "radubrehar using shouldcomponentupdate correctly nt constructing substantial number descriptors vdom diffing right cc sebmarkbage cc jordwalke sounds like situation similar reactnative situation wanted tunnel updates right", "d": "3/2015"}, {"body": "jsfb still creating elements go existing ones run need know update replaceremove need create elements know nt updating one things working hard towards elimination need calling createelement optimized away couple ideas optimizations discussed jeffchan said work though get bit unwieldy anther option start windowing may actually need elements rendered nt actually visible also fair amount work start tracking scrolling sizes definitely doable fixed data table", "d": "3/2015"}, {"body": "went windowing rendering visible rows extra top bottom managed infinite number rows list instant performance read optimization ideas discussed linked issues sound cool many cases able make props value types develop highly dynamic components styles configurable eg rowstyle oddrowstyle evenrowstyle oddeven rows etc far read value equality applied case object maps used maybe tagging elements help happens list inside parent constant value type far understand element children skipped updating would indeed smart useful scenarios whole app rerenders concerned situation component setstate order housekeeping allows developing highly configurabledynamic components skipping update used appspecific often valuetype compatible componentscontainers tried caching element descriptors helps though windowing better solution scenario since app rerenders rerender limited set children caching element descriptors invalidated props change problem solved one day us situation optimizations possible ugly could method specify keyed children update similar shouldcomponentupdate jsx shouldcomponentupdate function shouldkeyedchildrenupdate function return update children keys present object values set true idea came quickly polished maybe worth investigating drawbacks already came mind idea could used state transition component receive props useless optimization immutable data structures since shouldcomponent update enough maybe value", "d": "3/2015"}, {"body": "duplicate think", "d": "3/2015"}, {"body": "yes bug also present reactwithaddons", "d": "3/2015"}, {"body": "closing favor", "d": "3/2015"}, {"body": "reasons remove reasonable difficulty adding new keys clobbering mixin setstates without choice transition immutable data would recordmap property eg desire allow something extensible object nt see would possible guard two pitfalls cases latter pitfall mixins seems troublesome would issue classes maybe solution allow nonobject component state classes", "d": "3/2015"}, {"body": "allowing give custom implementation handles actual work example one would write js class mycomponent extends component getinitialstate return immutablemap name world would used react actual updates gets called way need support specific libraries anything like everyone wants use immutable state easily another benefit define method per component base mix match well use libraries without user knowing mixin case also long mixin uses calls custom method activated name suggestion placeholder start discussion guys think", "d": "3/2015"}, {"body": "ca nt comment implementation want app nt work happy nt put state data dummy key", "d": "3/2015"}, {"body": "agree form support immutable state data structures important well", "d": "3/2015"}, {"body": "ai nt pretty", "d": "3/2015"}, {"body": "wo nt work since updates use dom api updates wo nt work needs allcaps osx", "d": "3/2015"}, {"body": "needed another reason dislike", "d": "3/2015"}, {"body": "good work petehunt forced us file bug get fixed upstream firefox going change actually spec nt follow", "d": "3/2015"}, {"body": "makingwaves", "d": "3/2015"}, {"body": "thinking point abandon pr say meh bug firefox one using css style anyway add complicated logic potentially css property detection code", "d": "3/2015"}, {"body": "petehunt reading thread camelizing change var hyphenpattern g var hyphenpattern daz gi least camelizing correct", "d": "3/2015"}, {"body": "closed per anyone really cares wants submit pr bet would considered", "d": "3/2015"}, {"body": "richfisher unable reproduce roadhouse environment see attached screenshot first example environment nt exact match nt use browserify still windows pretty damn close anyway without repro nt much end pasted source code play see get results post prebuilt failure case online somewhere fire test environment see determine root cause end would good try example code determine reactbrowser compatibility issue issue browserify indexhtml jsindexjs var commentbox reactcreateclass displayname commentbox getinitialstate function return tasks componentdidmount function thissetstate tasks name val name val name val render function var tasknodes thisstatetasksmap function task return reactcreateelement p null reactcreateelement b null taskname reactrender reactcreateelement commentbox null documentbody", "d": "3/2015"}, {"body": "thank rapid reply follow code create repo still raise error invariant violation danger expected markup render nodes rendered ie version", "d": "3/2015"}, {"body": "richfisher checked repository roadhouse machine still unable reproduce based screenshot looks like system language nonenglish conceivable language preferences causing browserhtmldom render differently try testing language preferences set english see get error point loss reproduce running repository exact browser version web world sucks pluginsmodulesextensions installed try testing english language environmental factors might different machine zpao ideas", "d": "3/2015"}, {"body": "richfisher created pull request please merge pull request test take screenshot alert message might provide least little insight issue", "d": "3/2015"}, {"body": "alright repro set browser mode compat view mode also sets document mode standards happens bets effectively using point nt support compat view nt default apparently run compat view default testing locally crazy thread stack overflow talks ways around open tools confirm mode running think see mode incorrect hold closing guess", "d": "3/2015"}, {"body": "zpao right using compatibility view default add meta tag indexhtml right thanks jsfb zpao", "d": "3/2015"}, {"body": "problem", "d": "3/2015"}, {"body": "believe may understand issue apparently rendering server uses random id checksum different since uses id calculations however apparently browser mounting code determine somehow tree matches mount event listeners make props match see expected warning console log warning react attempted reuse markup container checksum invalid guess ca nt manually look things know whether work see warning nt working anyone wants elaborate would great otherwise probably close issue", "d": "3/2015"}, {"body": "version react using look little janky guess using outofdate version rendering string react generates full markup string including uniquely identify render root calculates checksum string appends checksum root element client compare two checksums match arguably bug maybe low priority one nt technically need match order markup compatible rendering twice thus two different render roots issue comes fact render roots unique since checksum calculated across markup string effectively means call rendertostring unique checksum long render roots matching checksums match going close notabug since expectedknown behavior point may make sense checksum calculated without considering root could performance considerations current checksum implementation super fastsimple change roadmap cc sebmarkbage situational awareness", "d": "3/2015"}, {"body": "jsfb using react thanks clarifications though", "d": "3/2015"}, {"body": "interesting ok apparently generated way incrementing zero used increment integer good know rest answer still applies", "d": "3/2015"}, {"body": "increment zero rendering client generate random number server idea behind client single react know everything though proven source problems multiple reacts server nt know everything generated could imagine parallel processes generating page ca nt start increment get clashing keys quickly use random numbers still small chance collision probably fine", "d": "3/2015"}, {"body": "zpao algorithms differ always use random", "d": "3/2015"}, {"body": "predictable behavior perhaps adding faster mathrandom much certain wo nt collisions general autoinc known unique int fast cheap guaranteed unique algo guarantees expensive takes space guids nice also chars sticking dom node sucks another bad option would always use datenow microsecond precision pretty much guaranteed collide nt remember much honestly cc petehunt syranide", "d": "3/2015"}, {"body": "zpao yeah two reasons think always using random overhead collisions however unlikely ultimately want get rid dom nodes though needs core refactoring happen neatly", "d": "3/2015"}, {"body": "going say like see us choose single algorithm like syranide idea even better", "d": "3/2015"}, {"body": "jimfb syranide agreed", "d": "3/2015"}, {"body": "jsfb posterity much possible today bugsmissing things core prevents real also easy reconstruct reactid prerendered markup", "d": "3/2015"}, {"body": "find informations usecase basically user language change want add new language react context force rerender whole thing flux code guess understand see works settimeout get error unmounting synchronously really happens unmount remove calls still get error", "d": "3/2015"}, {"body": "unmounting react event currently supported afaik", "d": "3/2015"}, {"body": "unmounting result event sounds like perfectly reasonable thing want think try support slorber create simple jsfiddle demonstrates issue", "d": "3/2015"}, {"body": "jimfb yes successfully reproduced case first attempt working try add another event listener parent", "d": "3/2015"}, {"body": "awesome thanks issue related mutating nodes synchronously within event loop may want make unmount take effect end event loop think demonstrates general problem handle toplevel functions within event loop", "d": "3/2015"}, {"body": "plus one reasonable behaviour unmount component result react event", "d": "3/2015"}, {"body": "rendering component", "d": "3/2015"}, {"body": "gsklee provide jsfiddle demonstrates issue", "d": "3/2015"}, {"body": "found cause trap kind using flux structure store javascript var user name export default new class store extends eventemitter get value return user component javascript export default class app extends reactcomponent constructor props super props onstorechange consolelog jsonstringify thisstate jsonstringify userstorevalue name kay lee name kay lee passes reference change reflected instantly way coming fixed issue something like maybe update flux site docs warn people issue official examples using problematic pattern", "d": "3/2015"}, {"body": "yes references make tricky updating flux docs good idea bring repo going close though", "d": "3/2015"}, {"body": "yea know one see info", "d": "3/2015"}, {"body": "able access statics", "d": "3/2015"}, {"body": "sounds much related lack warnings issue", "d": "3/2015"}, {"body": "note responsible key proptypes warnings ariabuckles way thinking problem definitely possible inline objects code would enable production mode compiler feature however ok case way providing valid warnings nt think simply opting warnings completely viable strategy might think wo nt mess proptypes keys manually inlining even nt might accepting children props outside need validated might think warnings coddling developers allow opt however undermines stability shared components larger community ultimately cause people blame react one idea use static type system like flow use static type system files statically verified therefore nt need validate dynamically even development mode sure accommodate transfer verification flag perhaps using special transform adds explain bit use case even sketchy might help us come ideas solve special case without losing warnings common case", "d": "3/2015"}, {"body": "hi thanks response sebmarkbage making render either react html figuring best let html users messed statement couple approaches take require inlining elements inlining elements promising completely removes dependency actually referenced simplemarkdown like mention also means avoid function call overhead production given many dom nodes markdown often outputs could win trying avoid warnings like react warnings ka currently turned mostly trying avoid dependency react could solve dependency injecting works provides slightly worse api clients specific case nt need refs nt inject children unfortunately currently avoiding warnings implementation would prefer dev although trickier b specific case bunch react elements hardcoded nt refs external children concerned warnings key warnings would nice time keys using pretty much worst possible keys keyless elements would nt actually perform worse right got function adding prop cheat validation ideally could make function validation dev mode skips production probably said anything ordinarily ben said", "d": "3/2015"}, {"body": "definitely goal decouple reactelements react idea transpiler implementation nt need react scope generate elements implementation would need production mode guess another possibility could start using weakmap element gets passed", "d": "3/2015"}, {"body": "also find frustrating longer find issue", "d": "3/2015"}, {"body": "also finding passing around props lot similar insin using default params awhile decided antipattern due subtle bugs cause forget pass newprops", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "think reason available always correspond rendered values way implement nt trigger another render without breaking constraint times using actually want either higher order component la relay something like observe hook proposed react", "d": "3/2015"}, {"body": "reference internal module fb basically fallback behavior handling old browsers special cases pretty unremarkable nt actually translate super well except maybe something meh working improving testing ways nt think anything really want right", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "interested using react inside chrome extensions add stuff pages may may using react chrome extensions share dom nt share javascript context page guess falls multiple react instances operating dom component tree", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "charypar said issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "3/2015"}, {"body": "think underlying reason happens nt relationship native events events react fires instance react responds onchange handler event actually listening cases input event click event cases happens bunch input components hood react smoothing browser inconsistencies give common event interface across browser test react components fine phantom js making use test utils react includes especially simulate triggers react event expect course may different situation works may different use case", "d": "3/2015"}, {"body": "issue jquery nt trigger real dom event tries find callbacks internal event map see", "d": "3/2015"}, {"body": "good solution using phantomjs trigger things like submitting form clicking button etc issue react listeners never get triggered", "d": "3/2015"}, {"body": "jongbeau", "d": "3/2015"}, {"body": "jquense yea played test utils interested end end testing phantomjs nt play well react", "d": "3/2015"}, {"body": "guess quite sure write tests using test utils phantomjs problems", "d": "3/2015"}, {"body": "used test utils jest able integrate directly phantomjs trigger events could share example", "d": "3/2015"}, {"body": "worth also ran problem nt know long would taken figure causing issue nt shown search results case using api control one fields uses raw html think would worthwhile link wiki page documenting causes obviously including one errors warning found helpful figuring went wrong need fix", "d": "3/2015"}, {"body": "use immutablejs record store state way use cursors convenience methods like update batching using immutablejs map store data nt maintain much state inside components mostly maintain global state objects inside data stores component state always replace entire state changes using never allow mixins change state currently using cursors hopefully support kind immutable state going forward", "d": "3/2015"}, {"body": "would nt mind removing replacestate would great possible override state merging would allow use immutable objects state without keep property regular object would also allow detect mixin tries use regular object state merge immutable object", "d": "3/2015"}, {"body": "warning changing state signature feels like overreach want suffer tiny performance hits convenience initialize false boolean values feel like able chastised compiler p suffer noise console", "d": "3/2015"}, {"body": "jquense advantages requiring complete readability obvious advantage always see one place state variables used another minor advantage forces component developers explicitly think component state consider state really necessary since ideally components stateless nudges developers direction much importantly forcing means identify stateful components allows performance optimizations across entire react app minor cost optimization surrounding staticallykeyed objects potentially frameworklevel optimization saving little convenience one person could mean lot performance loss lot people", "d": "3/2015"}, {"body": "reading existence enough optimization board problem issue sealing state object frequently employ sort pattern js getinitialstate return render return thisstateopen think react requiring explicitly initialize borders stylistic prescription since nt invalid javascript agree cases improved readability explicit declaration state also think often yet another multiline object literal middle constructor component definition reduces readability readability argument ultimately fruitless one given notoriously subjective readibility cs much rather team react make decisions possible course baring excellent compiler optimization ca nt done otherwise", "d": "3/2015"}, {"body": "agree jquense react prescribing style guides subjective readabilitydocumentation rules one nice features new class support react nt really care create classes long correspond interface time would introduce something prescriptive mere existence convenience means blocks features everyone nt use think flow already continue require define full state signature construction type static typing makes sense want stable type signatures also unlocks optimizations vms think enough us probably nt need add runtime warning nt think reactspecific optimizations would require state consistent however could see becoming case future still strongly recommend using consistent state regardless think safe remove jquense arguing pattern also requires reset state", "d": "3/2015"}, {"body": "regardless think safe remove replacestate jquense arguing pattern also requires reset state thisreplacestate sebmarkbage nope concern state sealing easy enough workarounds places used replacestate wo nt shed tear removal", "d": "3/2015"}, {"body": "thumbsup", "d": "3/2015"}, {"body": "sebmarkbage quick question migrating classes already using immutable maps whether use breaks immutable object alternative want keep using immutable states views thanks js class view extends reactcomponent constructor props thisupdate thisupdatebind thisstate immutablemap js class view extends reactcomponent constructor props super props thisupdate thisupdatebind thisstate new viewstate foo bar", "d": "3/2015"}, {"body": "question guess relevant one stores holding immutable state really need care components deal data states immutable ok leave react best trust actions triggering renders stores changing data always come fresh nonmutated source", "d": "3/2015"}, {"body": "done complete stable implementation see attached commit also works perfectly real reason", "d": "3/2015"}, {"body": "initial prototyping babelbabel pretty rough quite edgecases think nt handle good start becomes javascript use strict var ref reactcreateelement div classname foo function render return ref becomes javascript use strict var foo require foo function createcomponent text var ref reactcreateelement foo null text return function render return ref", "d": "3/2015"}, {"body": "nice", "d": "3/2015"}, {"body": "optimization affects runtime behavior though right", "d": "3/2015"}, {"body": "nt distinction value equality physical equality javascript trying change unlikely rely different referential equality two otherwise equivalent react elements never seen case unless mutable nested object case optimization apply", "d": "3/2015"}, {"body": "optimization ideally applied development mode safe", "d": "3/2015"}, {"body": "realized code js var currenttime reactcreateclass render function return new date var clock reactcreateclass componentdidmount function thisinterval setinterval gt thisforceupdate componentwillunmount function clearinterval thisinterval render function return right reactrender documentbody currently shows autoupdating time would optimization wonder come way catch development ie look dom mutations happen warn something", "d": "3/2015"}, {"body": "spicyj think definition constant values expression contains zero references nonlocal bindings zero sideeffectful expressions member expressions function calls etc assumption fine always evaluates constant nt eagerly execute currenttime render function descriptor", "d": "3/2015"}, {"body": "spicyj right reconciliation bails default element reused however relying global state without forceupdate supported use case solution add forceupdate timer deeper component mar pm jeff morrison notifications githubcom wrote spicyj think definition constant values expression contains zero references nonlocal bindings zero sideeffectful expressions member expressions function calls etc assumption fine right always evaluates constant nt eagerly execute currenttime render function descriptor reply email directly view github", "d": "3/2015"}, {"body": "guess difference nt forceupdate ie nt comply lose rerender whereas optimization could actually breaking ui rendering", "d": "3/2015"}, {"body": "well still ui rendering yea added risk make following two assumptions value type including class idempotent always called pure function nt runtime static type system support validating things yet rely convention enforce constraints violate sol however optimization place risk getting screwed easy shoot foot places violate principals make harder bring value types pure functions runtime flow make easier ensure compliant need punish compliant code wait idea pseudorandom double rendering validate renders idempotent", "d": "3/2015"}, {"body": "like propose moving initialization static elements either componentwillmount constructor caching module level taking static elements huge react app would add significant initialization time overhead also initialize components might rendered imagine downloading full js app rendering one view time propose optimization reactcreateclass classes extend js class mycomponent extends reactcomponent render function return var ref class mycomponent extends reactcomponent constructor props context super props context render function return ref similarly call would inject create", "d": "3/2015"}, {"body": "cpojer probably make", "d": "3/2015"}, {"body": "oh yes course edited example could also course single check static components one module like ifstatement", "d": "3/2015"}, {"body": "simpler transform would might little slower proposal much easier transform", "d": "3/2015"}, {"body": "cpojer much specific optimization ties specifically assumptions react classes nt think ready yet see advanced optimizations use cases optimization really generic one employed functional engines value type also generalizable value types proposal really hold react specific ones also argue nt need react class nt intend call render yet whole module class deferred much generic optimization used lot things separate issue", "d": "3/2015"}, {"body": "reason however include transform nt think would make transform much harder build proposing allowing general optimization react components separate optimization makes work better react components", "d": "3/2015"}, {"body": "cpojer ties subtle differences react semantics ca nt prove sound example would nt work subclass nt call super constructor would nt work etc spicyj suggestion would safer comes performance penalty besides allocate binding slot variable regardless think better investing generic optimizations lazy initialization entire module body need statics pull apart main classes example could transformed something equivalent", "d": "3/2015"}, {"body": "done complete stable implementation see attached commit still need add lot tests absolutely confident reliability", "d": "3/2015"}, {"body": "sebmarkbage would nt work eg think universal guarantee underlying dom node lives long owning component unless polyfilled dom components exposed nt seem plan edit even forcing guarantee hold frontend implementations unless way force refresh refs", "d": "3/2015"}, {"body": "refs gets attachedreattached time eg js respond firing ref callbacks updating difference stash ref away state closure somewhere even seems like problem whose changes quickly dying seems like uncommon edge case", "d": "3/2015"}, {"body": "sebmarkbage even seems like problem ref input whose type changes quickly dying seems like uncommon edge case sure holds every frontend agree input kind special could one imagine something similar frontends able refresh refs would solve ever came", "d": "3/2015"}, {"body": "thanks zpao eta looking mobile app soon would love give react native try feel like could waiting years come", "d": "3/2015"}, {"body": "would absolutely love eta thanks smile", "d": "3/2015"}, {"body": "super rough timeline order weeks months nt hold us though even first version fully open sourced points friction take another month get ironed", "d": "3/2015"}, {"body": "thank work really got excited", "d": "3/2015"}, {"body": "jordwalke guys giving early access repo eager look repo even nt productionready yet", "d": "3/2015"}, {"body": "updates regarding experiencing problem", "d": "3/2015"}, {"body": "hit problem nt think react issue looks like svg standard nt support", "d": "3/2015"}, {"body": "sebmarkbage nt jsx transformer component defined using classes", "d": "3/2015"}, {"body": "actually might able fix though would nt proper fix right thing would make class transform look inside templates strings maybe change order run transforms jeffmo known issue running template transform class one see constraints internally", "d": "3/2015"}, {"body": "zpao thank explanation really needs visible", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "ca nt seems like could change createelement function accept constructor collection like immutable map could smart building right type props object cc brigand suggestions dmhood making immutable give us equality test dmhood wo nt props least object already adding map interface allow us easily use libraries immutablejsclojurescriptetc bring along features need dmhood point nt understand want props considered class sorts fixed structure dynamic map keys like would nt expect options object map nt see benefit expect get using library construct props cases values dynamic keys library adds overhead readable way requires compile time transforms nonchanging props brigand yes certainly works truly static props works equally well objects immutable maps", "d": "3/2015"}, {"body": "think brigand nailed props opaque react user data fact react uses keyref unfortunate mixes internal requirements user rendering input see convenience case still resolved", "d": "3/2015"}, {"body": "syranide really would using record data structure ensure keys never change figured map interface would genericused others although props made opaque rather moot", "d": "3/2015"}, {"body": "dmhood works forced believe", "d": "3/2015"}, {"body": "important conversation far see though actually couple issues useful use map data structures eg immutablejs maps directly custom components props useful use map data structures eg immutablejs maps regular dom elements props either true things like live props map contain live somewhere else would accessed useful use map data structures eg immutablejs maps regular dom elements props mentioned original post personally think answers questions yes though question matters much thing props nt always simply options constant keys commonly contain nested model data addition model data often might variable keys particular css styles especially useful consider manipulable often use large nested clojurescript data structures express elements css styles later dynamically merging together adding removing keys runtime possible persistent immutable data structures possible deeply frozen regular objects without full copying far know stopgap possible fully convert data structures regular javascript objects every render order readable right course wasteful case nt sort data would benefit regular objects backing classes constant keys question ie would etc remain props object map nt know want nt affect question question might biggest obstacle implementing questions might reason vs would performance problem reactinternal code relies reading elements keys refs children would determine access information also needs add opaque children object might practical use eg without much penalty nt really yet understand vs huge performance problem since sort thing otherwise already user react already problem custom components using custom model data ie user already using anything like immutablejs react prides anyway prescriptive user models bigger much fundamental problem would might slow complicate reconciliation especially map support added dom elements hopefully would nt case nt yet know enough details reconciliation implementation really know know though allowing user choose javascript objects whatever map data structures want dom element style dom element props custom component would bring least benefits way many people use react happen care first case considering creating issue focusing", "d": "3/2015"}, {"body": "cigitia unofficial answer ca nt see benefit using library constructing props object example makes sense please share perspective making complicated adding overhead breaking compatibility components benefit ps already separate", "d": "3/2015"}, {"body": "syranide unofficial answer right thanks answer question using generic data styles extremely useful able express styles data let end user manipulate application ui serialize eg enduser ui themes dynamically merge manipulate react native already supports last sort thing merging stylesheets yet supported regular react even better serializability manipulability generic style data could used considered separate issue ps key ref already separate props ah whoops thinking keys refs passed arguments etc sorry", "d": "3/2015"}, {"body": "cigitia inside technically unrelated discussion universal restriction object interpretation properties responsibility component case technical reason say performance imagine supported generic iterators future", "d": "3/2015"}, {"body": "syranide right thanks make separate issue", "d": "3/2015"}, {"body": "cigitia yes yes yes point would prefer options used reactjs internally live argument mixed opaque user data syranide seems one thread seeing benefits using anything else pojsos props objects offense many see reasons explained nt see benefit expect get using library construct props cases values dynamic keys library adds overhead assume users constructing data reactjs ie view little besides view layer handled reactjs false assumption cases reactjs view data structures already existing app convert pojsos adds extra overhead really nt see someone argue user data nt opaque library", "d": "3/2015"}, {"body": "skrat syranide seems one thread seeing benefits using anything else pojsos props objects offense many see reasons explained could issue people wanting feature anyway perspective purely logicaltechnical someone show actual example makes sense fine ca nt think one far talk get might natural om besides point imho clear distinction objects maps good objects perfect fit fixed set known keys values type small size fast create fast access also immutable need immutablejs", "d": "3/2015"}, {"body": "honest really idea want able download programs put use different websites real computer savvy trying really hard understand stuff", "d": "3/2015"}, {"body": "worth also related issue particular sebmarkbage appears float idea promoting immutablejs receive builtin support directly used states might considered analogous discussion idea props", "d": "3/2015"}, {"body": "majority cases event handler wanted bound instance class defined createclass autobinding makes lot sense createclass used classes nt available slowly moved away favour classes ca nt see autobinding reactcomponent magic render method provides first place removes lot boilerplate manually bind handlers create big win think many people end adding autobinding back done snippet either extending component hoc problematic end rewritten much nt think react would taking liberties class adding useful common behaviour reactcomponent people quite easily override need whatever reason change context method instance class defined ca nt see harm reactcomponent autbinding little performance loss implementations add back anyway render construction unnecessary boilerplate", "d": "3/2015"}, {"body": "removes lot boilerplate manually bind handlers create big win times use arrows nt see lot boilerplate miss", "d": "3/2015"}, {"body": "miss arrows nt implemented yet try latest babel experiment playground runtime still undefined within class arrow function raises question arrow function actually implemented way work feel quite long time arrow function behaves desired way class boilerplate likely transition people attempting implemented class edit spoke sebmk class property initializers getting proper implementation next major release weeks max fat arrows within class property initializers reference target static reference actual class reference instance also decorators coming experimental flag solves concerns greatly still work progress spec feel decisions remove autobinding component classes could implemented later proposal set", "d": "3/2015"}, {"body": "arrows nt implemented yet try latest babel experiment playground runtime still undefined within class arrow function raises question arrow function actually implemented way work using several months talking proposed arrows properties syntax mean using arrows binding handlers js class app extends reactcomponent render return handleclick consolelog works covers use cases surely causes extra yeah hot paths nt really see worth adding autobinding magic react component classes face exact problem regular classes want listen something event handlers makes sense use utility library autobinding like autobinding use react components classes really nt reactspecific problem", "d": "3/2015"}, {"body": "precisely boilerplate talking normal classes nt event handling built would feature added class library etc autobinding could easily happen common use case reactcomponents less boilerplate would think greatly encourage adoption see edit class instance autobinding work fat arrows soon hopefully seems like fat arrows nice different behaviour class definitions object literals concerns answered wait weeks", "d": "3/2015"}, {"body": "precisely value react making prescriptions code want autobinding totally write base class util handle us nt want nt need undo built behavior honest want autobinding use create class already solution want moved away depreciated reason use like behavior", "d": "3/2015"}, {"body": "explored ways nt require binding would require massive changes framework yet found one works idiomatic binding callback way would move away callbacks completely fully declarative model kind signalchannelevent however imho api design still unsolved problem therefore data structure use events callbacks need combine particular instance since multiple instances component page point use binding bind important task react provide idiomatic component boundary different components interop issue purely implement component nt matter component long somehow however want still work larger community therefore nt think put anything opinionated like framework recommend using property initializers arrow function one way jeffmo presenting committee next week things moving along babel adjust support", "d": "3/2015"}, {"body": "never mind realized accomplished quite easily setting unique value wherever wish remount entire tree", "d": "3/2015"}, {"body": "nice trick know tgriesser thanks", "d": "3/2015"}, {"body": "synchronous takes gt trivial view hierarchies seems superproblematic people hitting obvious workaround besides caching missing", "d": "3/2015"}, {"body": "synchronous rendertostring takes gt trivial view hierarchies seems superproblematic busticated nt hard facts moment makes sense performance definitely slow probably running devversion av react far slower probably something else funky well guessing counting dom components either generally really large components also caching always answer different react", "d": "3/2015"}, {"body": "syranide thanks noted actually seeing similar numbers could well result something silly config etc afaik required disable dev mode serverside least ruled sidenote docs would nice component size amp count need collect hard data views certainly complex something like", "d": "3/2015"}, {"body": "performance definitely slow probably running devversion av react far slower actually probably something else funky well yes benchmark way multiple reasons production server render times even biggest pages around small sample size manual test setup one node see post results proper data monitoring production suspecting main reason tests skewed lack jit warmup guessing counting dom components either generally really large components yes pretty large components posted initial numbers also string replaces ran massive strings contributing big chunk time spent side note experimentation streaming caused trouble worth ended reverting manual document splitting turned connectgzip nt like machines environment", "d": "3/2015"}, {"body": "jussikalliokoski ah thanks update", "d": "3/2015"}, {"body": "case helpful anyone also ran problem also bug code relating promises least q exceptions swallowed call code triggered looked like solution add done tells q done promise wo nt adding error handlers save raise exception", "d": "3/2015"}, {"body": "sebmarkbage would worth try add functionality presumably larger task moving proptype validation happens gon na tackle think huge improvement warning nt want waste time something bigger better coming pike", "d": "3/2015"}, {"body": "sebmarkbage second thought disregard moving validation dom element properties mounting definitely right move take deeper look seems like would pretty clean move", "d": "3/2015"}, {"body": "could someone tell still preventing taken away trying get head around", "d": "3/2015"}, {"body": "skevy think still props nt really immutable yet possible mutate creating element want validation happen element creation long support modifying element need actually validate mount time cc spicyj", "d": "3/2015"}, {"body": "familiar validation setup", "d": "3/2015"}, {"body": "could someone tell still preventing taken away go away deprecated mutating props elements still old behavior stop supporting mutating props thus old behavior removed", "d": "3/2015"}, {"body": "thanks guys appreciate insight honest forgot could even mutate props never used seems like good thing nt deprecated", "d": "3/2015"}, {"body": "case show custom error suppose although technically possible pass function mixin long function component lifecycle functions defined properties probably common scenario maybe change simple reactclass attempting use function mixin would trick", "d": "3/2015"}, {"body": "zpao update status code documentation updated", "d": "3/2015"}, {"body": "look shouldcomponentupdate evaluate together done", "d": "3/2015"}, {"body": "jackwanders would mind sharing deferred contents componentdidupdate use requestanimationframe thanks", "d": "3/2015"}, {"body": "wondering thanks gaearon trick works expected", "d": "3/2015"}, {"body": "nt think solved easy reproduce react child return rather frustrating developer may change animated component return data ready realize breaks case component inside transition group", "d": "3/2015"}, {"body": "yup ran well pass component reactcsstransitiongroup renders null get exception using react", "d": "3/2015"}, {"body": "spicyj please reopen", "d": "3/2015"}, {"body": "sebmarkbage states class methods longer enumerable default break lot tests jest relies property one projects aware workaround", "d": "3/2015"}, {"body": "flag turn back old behavior workaround get fixed jest", "d": "3/2015"}, {"body": "preprocessor", "d": "3/2015"}, {"body": "zpao thanks tip driving crazy sebmarkbage issue track jest project", "d": "3/2015"}, {"body": "know issue closed like discuss little bit asked understand reasons make deep merge reckon could possible behaviors passing deepmerge option component component props behavior options making exception proptype matching attributes like props question case could expect prop behave expectingly right think", "d": "3/2015"}, {"body": "slorber calling makes bad user experience since causes loss local state think time declare context official feature using context option people router reactintl uses", "d": "3/2015"}, {"body": "cody et al clear context still subject change still experimenting still recommend avoiding decided final api usage risk useful probably ready", "d": "3/2015"}, {"body": "cody problem loose local state nt local state whole app manages immutable state purely outside react check video done framework", "d": "3/2015"}, {"body": "think need bypass shouldcomponentupdate new context anywhere parent tree potentially shouldupdatechildcontext something determines entire subtree needs reconcile yes makes nice symmetric", "d": "3/2015"}, {"body": "reacttransitionevents nt public module particularly concerned api nt sound like bug per se close let know misunderstanding also willing consider pull request feel inclined", "d": "3/2015"}, {"body": "moment react project touch events still trigger touch devices without initializetouchevents", "d": "3/2015"}, {"body": "also curious would used loading react app ios simulator things seem ok without explicitly setting initializetouchevents true fair nt tried actual device", "d": "3/2015"}, {"body": "removed", "d": "3/2015"}, {"body": "btw docs sources fixed", "d": "3/2015"}, {"body": "really nice unit test probably start using error boundaries issue fixed", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "raised ugly head since error message uncaught error invariant violation component keys getdomnode handlechange props context state refs reactinternalinstance contains method mounted dom spicyj zpao syranide", "d": "3/2015"}, {"body": "repro case sure calling getdomnode time node still dom", "d": "3/2015"}, {"body": "well yes guess works fine baked app ca nt repro without uploading test app happy helps call happening inside", "d": "3/2015"}, {"body": "getting upgrading problem seems exist input nested components within react bootstrap modal close modal ca nt get much trace though", "d": "3/2015"}, {"body": "mfunkie yes case sounds exactly except using bootstrap", "d": "3/2015"}, {"body": "modal using react bootstrap overlay mixin creates new react tree render modal child component opening closing trigger error anymore could related react elements different tree called reason input node still checked updates", "d": "3/2015"}, {"body": "turns issue two components listening flux store container component would run overlay inner body modal adding following function inner modal body able avoid error best guess change listener still queued run inner state rendered modal already considered closed", "d": "3/2015"}, {"body": "charypar said issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "3/2015"}, {"body": "main workaround many modular react components using specify react parent module must provide react prevent multiple copies problematic track become deprecated introduce dependency hell", "d": "3/2015"}, {"body": "seen lot well lots requests switch react packages currently resisting reasons aearly mentioned common frustration seen npm subtly installs two versions react browserify correctly includes build happen unexpectedly w package updates breakage ensues warning react hey one page seems like elegant way warn developers early direct explanation gone wrong fix sideeffect npm dependency rules node behaviour end two reacts want one looks like things get better see npmnpm meantime agree gaearon adding lesser evil hack good argument made nt react problem solve since common problem react solve think would great", "d": "3/2015"}, {"body": "jedwatson solution found alias calls like example shown grunt nt impossible fix make argument since common issue needs highlighted clearly react docs", "d": "3/2015"}, {"body": "going ship let call one done", "d": "3/2015"}, {"body": "issue although easily fixed syranide diy patch still exists fbpackaged reactminjs sorry nag end fault anyway", "d": "3/2015"}, {"body": "markplindsay nt verified fixed upstream uglifyjs time ago solved zpao possible running build process older uglifyjs", "d": "3/2015"}, {"body": "syranide thanks followup looking wgot changing adding line column still fixes issue", "d": "3/2015"}, {"body": "zpao ah apparently locked uglifyjs dependency whereas fix perhaps one sure tag means reason update dependency right", "d": "3/2015"}, {"body": "post saved also trying manually fire events switched event type success wanted say thanks", "d": "3/2015"}, {"body": "hi simple use case set style react component including shorthand property modifier property ex set new style without modifier new style object wont apply properly case inline style remains codepen example", "d": "3/2015"}, {"body": "azazdeaz invalid may set overlapping styles", "d": "3/2015"}, {"body": "discussed anymore", "d": "3/2015"}, {"body": "believe back february tried patching fork reactjs make components treat null undefined change fairly simple several tests saying specifically want null override defaults personally think one tiny part reactjs crazy certain fb internal use case end found easier rewrite internal ajaxjson library automatically replace fetching data", "d": "3/2015"}, {"body": "nt know fine accepts bothers behaviour want require prop perhaps ugly something like although better name would work fine alternative simply", "d": "3/2015"}, {"body": "another usecase described detail workaround understand hard implement rare know nothing react internals yet throw idea could mark virtual parent elementsfragments dom comments eg would render means c treated children sth including nested reactid conflict b e seen frameworks misuse comments kind semantical jobs", "d": "3/2015"}, {"body": "prinzhorn think might confusing dom output react jsx", "d": "3/2015"}, {"body": "jamesknelson added getting uncaught typeerror ca nt add property pendingstatequeue object extensible edit actually loaded running app time error using requireing everything also using reactrouter", "d": "3/2015"}, {"body": "natew using patch since posted nt believe gotten issue using", "d": "3/2015"}, {"body": "yea using loading anything seems load alright error later nt dig deep see ideas front super high priority revisit soon", "d": "3/2015"}, {"body": "jamesknelson enabled would worth updating trying patch", "d": "3/2015"}, {"body": "chance might get documentation contexts work seen vague mention feature react blog seen use projects reactrouter perhaps also reapp code projects throws warnings needs migrating love contribute feel unable help make situation better still dark contexts supposed work", "d": "3/2015"}, {"body": "zenlambda maybe help", "d": "3/2015"}, {"body": "heads anyone using contextpatch running errors bug bit drove mad last couple hours child class attempting use undefined component happens case trying import textarea rather textarea certain error due mounting routes parent class funny enough children routes tried textarea bug spent forever changing parents got skull", "d": "3/2015"}, {"body": "trouble transition skipped components use componentwillmount andor componentdidmount moving transition fixed although seems counterintuitive weird", "d": "3/2015"}, {"body": "last problem probably special case unable detect caused happen newer versions react csstransitiongroup breaks often transitiongroup seems work fine times though get error csstransitiongroup saying callback failed fire least sort detection going think csstransitiongroup rely timeout callback fails fire", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "uptodate unofficial files react let know issues file issue definitelytyped cc vsiao", "d": "3/2015"}, {"body": "one way got around issue stop mouse event fired component listening blur event eg js handleblur function eventrelatedtarget thishandlehide handlemousedown function event eventpreventdefault render function seems work fine browsers though nice get ieff", "d": "3/2015"}, {"body": "emecell wo nt stop clicks generated elements inside div", "d": "3/2015"}, {"body": "thanks neonstalwart prove useful use case form consisting two fields click tab nt want anything special happen moment fields become unfocused want replace form another element aka set state stuff", "d": "3/2015"}, {"body": "issue", "d": "3/2015"}, {"body": "spicyj since support classes anything add issue", "d": "3/2015"}, {"body": "components implemented classes able mock class methods using jest framework standard mocking mechanisms nothing reactspecific necessary case let know reopen", "d": "3/2015"}, {"body": "work pretty hard create accessible ui found react breath fresh air focus management nt seen discussion around using callback focus management complex one taken straight app working", "d": "3/2015"}, {"body": "laurilehmijoki nt use render rendering use lifecycle hook coffee render gt componentdidmount gt code statecaptchaisloading false refscaptchaanswerfieldgetdomnode focus code probably wherever want focus captcha first time state changes every time data view changes causes render", "d": "3/2015"}, {"body": "never address op scenarios manageable lifecycle hooks provided react guarantee node documentvisible visibility hard detect due components firing render callback lifecycle hooks guarantee render complete like guarantee x finished pending renders x renders focus lost last notes use right hooks render guaranteed focus lost rendering node completely changed react applies vd diff nt blow away focus render happens render returns ui longer contains node focus fires child nodes parents case html ca nt focus want show focus button component focusing componentdidupdate affect still hidden trying focus become visible guess becomes visible via change receiving new props case use callback changed state check state props focus though would discourage using anything setstate callback nt want focusing button every time state changes component original transaction made want focus first place", "d": "3/2015"}, {"body": "found super helpful removes node dependency nashorn", "d": "3/2015"}, {"body": "interim solution get desired behaviour", "d": "3/2015"}, {"body": "need manually clean events persisted", "d": "3/2015"}, {"body": "get garbage collected like object", "d": "3/2015"}, {"body": "jmarr thx timeouttransitiongroup fix issues", "d": "3/2015"}, {"body": "causing issue changing browser tab", "d": "3/2015"}, {"body": "caedes works", "d": "3/2015"}, {"body": "still issue happy discuss could go order try tackle easy digest docs key getting people running amp avoiding thinking complex actually", "d": "3/2015"}, {"body": "ansavvides ask doc really confusing cluttered", "d": "3/2015"}, {"body": "remember planned revamp worked though sure happened", "d": "3/2015"}, {"body": "ah see revamp works great yeah think hierarchy structure needs bit love content good knowing get right place tricky usually means resolving google searches", "d": "3/2015"}, {"body": "problem serverclient checksum compared two results program shows content difference number xxxxxxxxxxxxxxxxx server pavel klimashkin pavel klimashkin \u043c\u043e\u0439 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0445\u043e\u0434 client pavel klimashkin pavel klimashkin \u043c\u043e\u0439 \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0445\u043e\u0434", "d": "3/2015"}, {"body": "react contributor somebody subscribed issue klimashkin probably open new issue bug report one old already closed", "d": "3/2015"}, {"body": "klimashkin xxxpart key provided seems inconsistency side indicates key", "d": "3/2015"}, {"body": "thanks syranide absolutely right", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "full svg support addons", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "zpao spicyj supported way adding individual svg elements react without monkeypatching reactdom svgdompropertyconfig", "d": "3/2015"}, {"body": "sorry", "d": "3/2015"}, {"body": "image foreignobject", "d": "3/2015"}, {"body": "mjackson idea simple workaround use conditional find lot different properties could generalize pattern", "d": "3/2015"}, {"body": "feature would nice want enforce props definitiondocumentation project wonder possible explicitly whitelist generic components accept props based example zpao gave", "d": "3/2015"}, {"body": "additionally guys want native numeric keyboard mobile could wrap input something like js class input extends reactcomponent render var type navigatoruseragentmatch mobi amp amp thispropstype number number text react could dig patchhack", "d": "3/2015"}, {"body": "problem", "d": "3/2015"}, {"body": "whats situation want props value input change value onchange function ca nt change props value ca nt use state", "d": "3/2015"}, {"body": "syranide sebmarkbage different probably exception know least cssrules obvious one guess although extremely rarely used seems legit uses apparently attribute may part exception well see things note element attribute set element attribute set value problem html behaves differently chrome firefox suppose expected valid values dir ltr rtl auto assume behavior value value undefined perhaps browser ignores chrome nt seem case component place", "d": "3/2015"}, {"body": "ezequiel ah good know", "d": "3/2015"}, {"body": "react shallow rendering allows render one level deep test output attempting dispatch events tests currently results error due dom available js import react reactaddons class button extends reactcomponent constructor props super props thisstate pressed false let shallowrenderer reactaddonstestutilscreaterenderer let component shallowrendererrender let button shallowrenderergetrenderoutput fails due missing window global reactaddonstestutilssimulatemousedown button", "d": "3/2015"}, {"body": "reactaddonstestutilssimulate already implemented react native would presumably issues", "d": "3/2015"}, {"body": "looking issue zpao using coverify output lcovinfo code climate give lines code executed get limited information get many times line executed number branches hit number functions hit etc", "d": "3/2015"}, {"body": "hit one rendering component inside anchor tag sidebarcomponent reactcreateclass render function return ends nested inside anchor tag throw invariant violation seems like way detect", "d": "3/2015"}, {"body": "cmwelsh help next release", "d": "3/2015"}, {"body": "warning ugly duplicate option top list right going duplicate option server side warning goes stderr systems interpret real problem", "d": "3/2015"}, {"body": "still alive sebmarkbage pass state reference callback tell use instead right tweenstate breaks lot code though", "d": "3/2015"}, {"body": "want pass method think must pass case look little weird example someone uses property", "d": "3/2015"}, {"body": "sebmarkbage think come feasible solution traitsjs javascript import traits import react reactaddons export const using traits export const autobind constructor objectgetownpropertynames thisconstructorprototype filter x gt xstartswith map x gt x x bind export const purerender objectassign reactaddonspurerendermixin somecomponentjs javascript import react react import using autobind purerender traits export default class somecomponent extends reactcomponent using autobind purerender syntax bit longer proposed concise imho actually went numerous api ideas finally settling one package available based brigand excellent since offering composition conflict resolution mechanism calling traits instead mixins", "d": "3/2015"}, {"body": "syntax hacks impressive like looking source think second example needs ca nt shared multiple classes js import react react import traits import autobind purerender traits const using traits export default class somecomponent extends reactcomponent using autobind purerender also like use constructor componentwillmount traits feels much pure", "d": "3/2015"}, {"body": "brigand shared also specify different resolution rulesets different classes like need find time come document add browser support played inside jsbin etc suggestion api lib work welcome", "d": "3/2015"}, {"body": "followed", "d": "3/2015"}, {"body": "would seem unless react going move event hook based system lifecycle methods methods need handled specifically ca nt mix prototype means whatever solution going react specific like something like following clear extending reactcomponent purerendermixin mixed javascript user code class mycomponent extends reactcomponent purerendermixin reactcomponentjs function reactcomponent props context instanceof reactcomponent argumentslength return createmixedcomponent arguments return reactcomponent thisprops props thiscontext context", "d": "3/2015"}, {"body": "mlrawlings looks great", "d": "3/2015"}, {"body": "mlrawlings", "d": "3/2015"}, {"body": "implementation mlrawlings syntax look much cleaner switch classes probably write like small transform move early errors nt worth giving imo luckily nt need compromise", "d": "3/2015"}, {"body": "opinion higher order components new observe hook solve almost use cases mixins", "d": "3/2015"}, {"body": "gaearon looks promising little bit reactspecific mlrawlings example ideal require manually wrapping classes function wonder possible way abstract part generic lib", "d": "3/2015"}, {"body": "proposal annotations use something like abstract mixins", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "chicoxyzzy nt really add value able declare mixins class code annotations nt anything need something else act classes either directly class via instances via etc js used instanceof check annotations may used class reactmixin constructor mixin thismixin mixin reactmixin purerendermixin class foo extends reactcomponent applymixins foo function applymixins class classannotate classannotateforeach maybemixin gt apply mixin behavior mixin annotation maybemixin instanceof reactmixin reactmixin classprototype maybemixinmixin gaearon pointed expect alternatives mixins coming months maybe get annotation support babel", "d": "3/2015"}, {"body": "think babel already annotation support behind flag", "d": "3/2015"}, {"body": "brigand think idea add decorators annotations class decorators code possible decorator works like also think decorator syntax useful higher order components instead write", "d": "3/2015"}, {"body": "bump still super useful could really done today", "d": "3/2015"}, {"body": "maybe deprecation premature", "d": "3/2015"}, {"body": "context going parentbased request obsolete closing", "d": "3/2015"}, {"body": "understand reasoning behind keeping events props interface similar bit times stupid typos refactorings react usually good failing early loudly dev gotchas seems like odd oversight imo fine sentinels space intentionally left blank javascript idiotic way handling right never nice addition", "d": "3/2015"}, {"body": "found problem minimal failing example react however appears fixed ideas commit fixed nt tests exercise might creep back", "d": "3/2015"}, {"body": "perhaps related created simple test case based stephenjudkins jsbin currently passes unfortunately unable run tests anything besides master ca nt really validate javascript update parent component state componentwillmount function see var reactcreateclass getinitialstate function return callback function value thissetstate x value render function return hello thisstatex", "d": "3/2015"}, {"body": "afaik longer exists react issue irrelevant", "d": "3/2015"}, {"body": "stumbled issue using event bubbling handle lots controlled input change events one parent form element understand helpful warning triggered huge number times big forms used following hack probably extremely bad idea suppress make sure put file named something like nt forget bad idea ideas could potentially supported officially something worth avoid mess detecting controlled inputs handled correctly maybe way declare component understand warning nt need", "d": "3/2015"}, {"body": "config share", "d": "3/2015"}, {"body": "scboffspring gulp browserify", "d": "3/2015"}, {"body": "yes please", "d": "3/2015"}, {"body": "discussion far mostly talks writing jsx syntax ts files get benefits typescript static analysis would nice way get benefits typescript way write translator jsx ts could simple change existing jsx js translator also syntax extensions specify state props fields types interface translated ts typescript compiler verify usage props state fields", "d": "3/2015"}, {"body": "discussion far mostly talks writing jsx syntax ts files get benefits typescript static analysis would nice way get benefits typescript way write translator jsx ts could simple change existing jsx js translator also syntax extensions specify state props fields types interface translated ts typescript compiler verify usage props state fields tried way lot complex fork jsx support firstly anyway need parser understand typescript jsx anyway secondly integration build step typescript makes pretty hard take advantage language service finally typechecking compiled jsx handled pretty well typescript reasons think jsxtypescript lot safer easy manage build step jsx ts", "d": "3/2015"}, {"body": "petilon exactly suggests demoed concept along showing simplistic type checking state props using webpack super easy integrate using tsjsxloader said everything fdecampredon says true get around parser understanding typescript jsx regular expressions instead parser set problems also require explicitly marking jsx certainly understand many people fan approach definitely lacks sort language service integration intellisense etc lastly typechecking props using definitely good show talk show parts work skip parts nt", "d": "3/2015"}, {"body": "adding bit personal experience discussion tried alternative route separate jsx templates code using reacttemplates attempted make work typescript sad conclusion work well combination typescriptintellijwebstorm even latest support also one needs import another file compiled template sometimes end circular dependencies impossible solve rigid import top feature typescript typical exemple recursive display menu object otha inline solutions like tsjsxloader intellijws work great use backticks templates strings syntax coloring autocompletion available html inside template string", "d": "3/2015"}, {"body": "problem intellij nt use languageservice make hard adapt different ts version", "d": "3/2015"}, {"body": "fdecampredon sure follow mean variablescontext discovery addition syntax autocompletion using syntax ij get syntax coloring autocompletion jsx nothing inferred works nearly cases sure never good direct full support jsx typescript compiler ijws syntax analyzer", "d": "3/2015"}, {"body": "typescript comes bundled languageservice utilities editor development last time checked intellij use visual studioatomtypescript etc directly use different typescript fork like jsxtypescript box long respect language service interface work intellij", "d": "3/2015"}, {"body": "could nt jsx simply escaping possibility case typeassertions either way think jsx transformer escaping", "d": "3/2015"}, {"body": "progress seems good fit cases issue multiple places makes hard use", "d": "3/2015"}, {"body": "sorry progress hard make happen automatically current architecture", "d": "3/2015"}, {"body": "please nt use class class inheritance anywhere specifically context react completely missing point reactive programming super codesmell anywhere particularly abhorrent reactive programming sometimes elegant implementation function method class framework function john carmack", "d": "3/2015"}, {"body": "agree ericelliott declare components classes feels weird using reactcreateclass feels sugar internals abstracted function maybe missing something good benefits use classes react least hope dont deprecate createclass future", "d": "3/2015"}, {"body": "agree oo concepts dynamic dispatch make code difficult reason using js classes could still used group related functions together operate expected form data without needing allocate separate instances functions per instance using js comes dynamic dispatch downsides accomplishing javascript without way using would difficult even react form react still using prototypes managed ensure people nt abuse believe possible classes", "d": "3/2015"}, {"body": "export factory instead class like react today help users avoid jungle full pitfalls gorillas", "d": "3/2015"}, {"body": "ericelliott note classic react factories created oop classes like classes support kind inheritance mixins fact also supports multiinheritance opens even pitfalls fact mixins unfortunately seen primary way abstractions classes react adding anything could nt already fact constraining encouraging object composition instead mixins unfortunate marketing effect move seen encouraging oop really stance progress space ca nt take things away developers taught alternatives scale includes class system provides optional escape hatch need rather completely stopping primary feature class system provides instance handle several features provides certain level familiarity convenience use middle man refer group arguments footgun makes easier onboard new people instance id use refer place tree allows apis like thirdparty apis unify around provides single multiple inheritance features someone needs create abstraction ca nt figure using composition unfortunately common problem developer ca nt figure way nt want get stuck therefore oop escape hatch time trying teach encourage composition components higher order functionscomponents instead oop still implement top class systems practice common enough start deprecating old class systems however make progress teaching encouragement force phase two start introducing pure models see alternatives working replace instances abstraction model well declarative ways updating state", "d": "3/2015"}, {"body": "stateless function example linked exactly want write components ideally purerendermixing behavior built looking forward future", "d": "3/2015"}, {"body": "sebmarkbage little hazy need point examples instance handle use provide inheritance options see prototypal inheritance stamps currently project underway make stamps produced stampit immutable well pitfalls experience single inheritance many pitfalls style mixins", "d": "3/2015"}, {"body": "stateless functions", "d": "3/2015"}, {"body": "npm install g jsxc worked", "d": "3/2015"}, {"body": "sort solution think prefer attributes whitelist huge number possible svg attributes many currently unsupported makes quite pain anything beyond basic svg rendering react shame think svg react wheelhouse definitely run mask issue mentioned time though markerwidth markerheight causing problems", "d": "3/2015"}, {"body": "hey everybody check meteor implementation tracker queue state changes flush requestanimationframe unless explicitly call trackerflush proces pending changes never end invalid state ie appearing dissapearing nowhere either changes pending resolved using trackerflush end event cycle summarize read add method process queue want force state changes immediatly example need inbetween results updated state calculations", "d": "3/2015"}, {"body": "markmarijnissen example works react specific example work correctly advised react currently give broken results state changes time problem reading nt give result expect whilst pending updates therefore example broken setstate read enqueuestatechange whilst accurate current behaviour useful want changed pending state", "d": "3/2015"}, {"body": "markmarijnissen systemparadox take function react solves problem pending state", "d": "3/2015"}, {"body": "syranide nt solve azoerb example problem must say disappointed change setstate react nt solve problem solidifies current behaviour", "d": "3/2015"}, {"body": "azoerb checkalarm example rewritten one important performance improvements react introduced way avoid readwrite thrash batching using declarative update model nt depend order execution solidifies part behavior made react fast enough begin mental model state part return value introduce mutable data structures allow mutate things go nonlocal mutable state difficult reason scale would recommend use functional approach scheduling work also part makes react performant make even performant", "d": "3/2015"}, {"body": "oh see thank example aware react batches rendering course pending state nt understand component api forces us work time spicyj said beginning update thisstate immediately leave ui update batching mechanism later anything would affected belongs anyway", "d": "3/2015"}, {"body": "would possible synchronous flushing mechanism like markmarijnissen proposed take check alarm example safe move elapsedtime props like however safe case synchronously updated eg safe even state uptodate would introduce synchronous able read props synchronously two subtree one unnecessary rerender entire tree updates subtree unnecessary rerenders", "d": "3/2015"}, {"title": "refactor darttransform rename setupreflection gt reflectorinit", "body": "per discussion code lazy loading design doc change", "num": "1180", "d": "3/2015"}, {"title": "jsonld", "body": "would great always used jsonld format understand search bots external services", "num": "1176", "d": "3/2015"}, {"title": "using di super constructors", "body": "possible component superclass use di like child component ideally could something like js class base constructor parent parent parentcomponent component selector child class child extends base constructor injector componentinjector injectorrun super", "num": "1174", "d": "3/2015"}, {"title": "instrument change detection", "body": "would great able get information cd run total number records number checked records number changed records number change components information could used tests described cc vsavkin yjbanov matanlurey mhevery", "num": "1172", "d": "3/2015"}, {"title": "working styles templates generated api docs", "body": "", "num": "1171", "d": "3/2015"}, {"title": "identify public classes angular code doc generation", "body": "", "num": "1170", "d": "3/2015"}, {"title": "shadow dom emulation correctly retarget events", "body": "shadow dom spec details event retargeting basically means event propagation hits shadow root boundary keeps propagating event target changed host element also important note event types never propagated outside shadow root angular shadow dom emulation currently nt makes confusing try add listeners events like use syntax see", "num": "1168", "d": "3/2015"}, {"title": "set nonstandard attributes dom element", "body": "know inject property setter constructor use update property able get property propagate dom nonstandard properties role aria properties may missing something please point correct direction", "num": "1167", "d": "3/2015"}, {"title": "swap widget gallery router angular router", "body": "first test run new router matanlurey please spec possible blockers", "num": "1164", "d": "3/2015"}, {"title": "dealing disabled binding confusing", "body": "say component needs know disabled state event work fine something like however instead code work empty string would update value always use method tl dr change detection set disabled empty string falsy still implies disabled state", "num": "1162", "d": "3/2015"}, {"title": "benchpress auto wait end rendering every iteration", "body": "benchpress metric however need make sure browser really finished rendering continue next iteration otherwise browser might squash multiple changes one metric would report wrong value note waiting next turn ie probably good enough implementation idea also read browser perf log poll new frame need also creating frames per second metric work wait via browser", "num": "1161", "d": "3/2015"}, {"title": "support bindings camelcased svg attributes", "body": "certain svg attributes camelcased however would recognized browsers since standard svg attribute important camelcasing information lost convention angular supporting bindings svg attributes", "num": "1159", "d": "3/2015"}, {"title": "annotations fails abstract error using traceur forgoing zone system", "body": "trying create angular project using traceur everything seems load ok add component blows unexpected token warning nonerror used loading jade greeterapp script src googlegithubiotraceurcompilerbintraceurjs script src googlegithubiotraceurcompilersrcbootstrapjs script src script systempaths greeter componentsgreetergreeterjs systempaths angular systempaths rttsassert rttsassertjs runtime assertions systemimport greeter component import mathwiz componentsmathwizmathwiz import component template bootstrap foreach import bind component selector greeterapp class greeter constructor message thiswiz new mathwiz greet var element documentqueryselector message elementinnerhtml thiswizwelcometext bootstrap greeter", "num": "1156", "d": "3/2015"}, {"title": "reload initial variable empty", "body": "noticed must loaded page load call reload element seems ignore request example example initial variable element load empty array might reason failure tried reload element process data general process id load data iframephp insert data invisible div tag jquery map data html format json format save json data variable called use push data code var app angularmodule rabbit ngmaterial ngmessages ngmdicons apiurl iframephp tableobject ajax url iframephp crossdomain true datatype html success function data var json datasubstring dataindexof json jsonsubstring jsonindexof json jsonsubstring jsonlastindexof function widthchange jsonindexof amp json jsonreplace amp amp widthchange else consolelog json json html json var headers name kind type age size thumb link tableobject json tr map function var row find td function var rowname headers row rowname text trim find tdlegacy img function var rowname headers row rowname attr src find tdlegacy function var rowname headers row rowname attr href return row get consoletable tableobject json html var scope angularelement content scope scope apply scopeshowcards widthchange error function consolelog error appcontroller cardctrl function scope log mddialog var showcards function scopecardspush tableobject scopecards tableobject element html", "num": "1154", "d": "3/2015"}, {"title": "proposal support style binding", "body": "sometimes absolute positioning must used accomplish building ui components color theming necessary would hugely convenient cases support binding via bind style attribute similar fashion implemented classes ie", "num": "1153", "d": "3/2015"}, {"title": "remove pipes bindings", "body": "looks like consensus pipes bindings harm good see proposed design", "num": "1152", "d": "3/2015"}, {"title": "docs explain properties vs attributes bind", "body": "angular supports property bindings use property binding bind attributes also literal attributes however property actually passes value setter also retains attribute html docs clear nuances syntax", "num": "1147", "d": "3/2015"}, {"title": "strawman componentlevel testbed", "body": "common application developers test components templates internally call tests component tests opposed unit integrationtests tests unit tests exercise component class integration tests far application concerned term reserved testing crosscomponent interactions full application tests tests involve backend requirements instantiate component test along template child components replace child components mocks pass bound values component trigger change detection fake event loop la fakeasync verify component implement change detection correctly eg via observables immutables access underlying dom trigger user events click buttons usually done assistance page objects framework strawman dart annotation tells angular testspecific dependency overrides componenttest component mycomponent dependencyoverrides const childcomponent mockchildcomponent realgooglemap mockgooglemap main describe mycomponent testbed testbed", "num": "1146", "d": "3/2015"}, {"title": "proposal rename facades shorter", "body": "proposal rename etc etc naming idea comes guava thoughts note affects codebase exposed framework consumers", "num": "1145", "d": "3/2015"}, {"title": "test bed user story angular", "body": "handful tests angular code base nothing really good job giving nonangularcore developers way test components see angular dart examples", "num": "1144", "d": "3/2015"}, {"title": "setting default value attribute property painful", "body": "say component focusable like radiobutton since real input got set manually default normal document flow however user set tabindex nt want overwrite let take look amount code takes js component selector mdradio lifecycle onchange bind tabindex tabindex template class mdradio tabindex number tabindexsetter function constructor attribute tabindex statictabindex propertysetter tabindex tabindexsetter thistabindexsetter tabindexsetter statictabindex tabindexsetter onchange thistabindex tabindexsetter check set tabindex two places nt called instances without bindings bindings nt resolved yet constructor requires two class properties binding two injections one method also clear one could encapsulate behavior compose multiple components", "num": "1143", "d": "3/2015"}, {"title": "support binding attribute map similar classfoo", "body": "web components style react based existence attribute example make following possible work similar class syntax", "num": "1140", "d": "3/2015"}, {"title": "directives field template annotation optional checkedmode enforcement", "body": "assume component represented parent component forget pass would helpful development mode could receive warnings whenif unregistered selectors used template dart could done something like assume something similar available tstranspilation layer", "num": "1138", "d": "3/2015"}, {"title": "reenable naive infinite scrolling benchmark", "body": "causing timeout issues since element never appears", "num": "1137", "d": "3/2015"}, {"title": "gulp builddart errors", "body": "local machine master branch fresh generates errors ie could format source could parsed line column multiple groups positional parameters single parameter list reason works ci cc mprobst alexeagle", "num": "1134", "d": "3/2015"}, {"title": "add destroyaware onchangeaware", "body": "add destroyaware onchangeaware interfaces interfaces get compiletime checking lifecycle methods missing", "num": "1132", "d": "3/2015"}, {"title": "form api allow simple binding single control", "body": "simplest case component author may want bind single input create control group something equivalent desired dart class mycomponent final control inputcontrol mycomponent thisinputcontrol control initialvalue hello world inputcontrolonchangedlisten newvalue print hello newvalue api suggestion freebie vastly ease migration", "num": "1131", "d": "3/2015"}, {"title": "cachingcodegen story css needed", "body": "spoke briefly jelbourn looks like angular way use css component html import stylecss templates use annotation advantage precompile step static analysis convert urls inline html reducing number http requests files needed statically generated application angular called official stance angular using something also scanned inlined applications use static analysis kegluneq mhevery yjbanov", "num": "1124", "d": "3/2015"}, {"title": "events work content positioned absolute", "body": "given following code import component template bootstrap ngelement component selector eventelement events click onclick event template inline class eventelement constructor el ngelement eldomelementaddeventlistener click function e consolelog native click false onclick e consolelog events click component selector eventapp template inline directives eventelement class myapp bootstrap myapp following html file event binding loading", "num": "1121", "d": "3/2015"}, {"title": "ngif directive throws protoview instantiation", "body": "html import materialbuttonscsscss component boolean using dart clear", "num": "1120", "d": "3/2015"}, {"title": "ca nt access values kvchangerecord", "body": "working binding classlist shaping directive follows works fine js looks like accessing private variable seems public otherwise ca nt really access values individual change records vicb seems like written part request make sense sth wrong", "num": "1118", "d": "3/2015"}, {"title": "zones", "body": "questions remarks come working async tests zones dart current setup vmturnzonedart inner zone overrides function execution wrapped executes wrapped function potential issue wrapped function enqueues microtask future obervable objects sequence fn enqueues microtasks triggers change detection drain microtask queue change detection triggered turns current code fine actual sequence fn enqueues microtasks drain microtask queue triggers change detection overridden test code sequence wrong refs zonejs current setup called hook called hook issue hooks called every single function executed zone microtask macrotask queue check details microtasks pending change detection triggered fix come way detect vm turns currently possible zonejs vm turn consist one macrotask many microtasks resources interesting links last page update issue progress cc mhevery vsavkin btford yjbanov feel free comment chat hangout", "num": "1116", "d": "3/2015"}, {"title": "async binding onto async dependency throw error regardless dependency resolution", "body": "following pattern applicationjs js bind appviewtoken toasyncfactory change detector bound sync dependency root view root view async works root view instantiated change detector instantiated demonstrated test added js expect behavior throw instantiating sync binding async dependency function var injector new injector bind userlist toasyncfactory fetchusers usercontroller demonstrated tests di config behavior different according order classes instantiated easy understand simple example like one believe could source interim hard debug bugs dependency graph gets complex could error gets triggered depending timing async function vsavkin throwing error case would make behavior reproducible avoid potential errors cc juliemr", "num": "1111", "d": "3/2015"}, {"title": "angular changes bindings camelcase", "body": "set class button true false depending upon value know dashcase camelcase conversion actually feature built attribute parser exceptions cases like last thing would expect angular camel classnames", "num": "1109", "d": "3/2015"}, {"title": "investigate issues travis ci", "body": "coming lot recently type error happens selenium standalone server shuts middle run tests todo x update protractor get selenium standalone v see helps x start capturing selenium standalone server logs", "num": "1102", "d": "3/2015"}, {"title": "bug dashed class name propertysetter causes error", "body": "soon set nondashedcase works fine", "num": "1099", "d": "3/2015"}, {"title": "need way directives react global events", "body": "needs way directives react things like event window event document body", "num": "1098", "d": "3/2015"}, {"title": "factorize common util code dash lt camel", "body": "duplicated amp move short support fns general cc pkozlowskiopensource mlaval", "num": "1097", "d": "3/2015"}, {"title": "syntax staticatconstructiontime bindings", "body": "assume directive called hello would used something like issue add gettersetter something never change want wait set use setter following possible dart class hellodirective final string name hellodirective bind name thisname creation time attribute would read passed nt available could either default null flexible throw stricter would make directives lighter weight less code could possibly even understood change detector future iterations", "num": "1095", "d": "3/2015"}, {"title": "component inheritance", "body": "hi going way component inheritance polymer currently support custom native components could nice feature imo cheers", "num": "1093", "d": "3/2015"}, {"title": "review render shadow dom code amp tests", "body": "tbosch added unittests shadow dom strategy plus minor fixes one tests code adds attribute parent gone assuming removed intentionally let figure want test tests passing", "num": "1090", "d": "3/2015"}, {"title": "service querying positionalsize information", "body": "service given directiveref return position information component api see", "num": "1089", "d": "3/2015"}, {"title": "components imperative views", "body": "component responsible rendering shadow dom rather loading template mental model component responsible rendering content reproject light dom add tag component inject dom manipulation webworkers addressed seperatly single thread model participates full di like inject special abstraction described later abstraction angular runs emulated native shadow dom mode important abstract api shadow dom angular emulation mode know nodes redistribute javascript dom contain component tags class componentdom dom manipulation show right place root node component componentref redistribute createcontent selector string content types declared viewdirectives used createcomponent type type node node componentdom class content destroy order insertions must match order creation content tag must inserted logical location created insertbefore node node append parentnode node webworkers model see", "num": "1088", "d": "3/2015"}, {"title": "introduce concept directiveref", "body": "represents internal reference directive application get hold interact subclassed match directive concepts api class directiveref injector injector used setting public property processes pipes setproperty name string value getevents array class componentref extends directiveref dispose componentdirective refs return includes api allows setting properties events disposing reference bootstrap given component may wish bootstrap application bind properties well bindings dynamiccomponent dynamiccomponent selector dynamiccomp class dynamiccomp hellocmp hellocmp constructor loader privatecomponentloader location privatecomponentlocation loaderload hellocmp location hellocmpref componentref gt thishellocmp hellocmpinstance component selector hellocmp template inline greeting class hellocmp greeting string constructor thisgreeting hello overlays code generation code generation create concrete class directive would also would contain public facing api processing would include pipe processing event listening injection injectable directive special object used services form reference note reference contains location visual reference well logical location tree reference service chose either aspect ref", "num": "1087", "d": "3/2015"}, {"title": "publish atscript transpiled files js suffix", "body": "currently npmpublished files got extension complicates build process strong technical reasons naming stick js btw correct use part build packaging discussion cc rkirov", "num": "1085", "d": "3/2015"}, {"title": "proposal assertion api", "body": "idea write assertions components applied dev mode stripped production mode similar type assertions general example say component either given name attribute component author could write assertion gives component user meaningful error development mode add extra weight final output prior art closure compiler implements concept closure library googasserts module notes similar approach could also applied logging", "num": "1084", "d": "3/2015"}, {"title": "problem socketio", "body": "building little test app using node socketio originally angularjs socket calls worked fine getting uncaught rangeerror maximum call stack size exceeded run zoneboundfn fnnamesmapforeachzone anonymous function arguments anonymous function anonymous function run zoneboundfn fnnamesmapforeachzone anonymous function arguments anonymous function anonymous function run zoneboundfn code imports let socket io component selector myapp template url myapphtml directives class myappcomponent commenting socket definition eliminates error call stack error happens whether problem zones socketio something wrong", "num": "1083", "d": "3/2015"}, {"title": "resource interceptor actually interceptor function returns becomes result resource promise", "body": "see behaviour interceptor added completely different interceptor declared resource methods think need update documentation reflect changing behaviour might break apps people adapted behaviour found bug behaviour app different stopped needing resource interceptor removing app stopped working properly leaving nothing shown section interceptors kept app working properly", "num": "1082", "d": "3/2015"}, {"title": "contribute angular docs development", "body": "really need use angular much todo app works improve idea syntax", "num": "1080", "d": "3/2015"}, {"title": "wrong path source map rttsassertjs", "body": "pulled npm", "num": "1079", "d": "3/2015"}, {"title": "support creating new factories different dependencies", "body": "angular source factory provider follows enforcereturnvalue shadows factoryfn exposed prevents something like like factory passed something like get factoryfn factoryfn provider acceptable change happy submit pull request thanks", "num": "1078", "d": "3/2015"}, {"title": "privatecomponent amp shadow dom", "body": "vsavkin sure dynamic components supposed work imo honor tags nt supposed work get work might follow issue scoped shadow dom mode class component tag must set according loaded component uid css shim work seems like done right following code js import bootstrap dynamiccomponent component decorator template ngelement import injectable import privatecomponentloader import privatecomponentlocation component selector helloapp template inline directives dyn stat class hellocmp dynamiccomponent selector dyn class dyn constructor loader privatecomponentloader location privatecomponentlocation loaderload stat location component selector stat template inline static component class stat export function main bootstrap hellocmp expect output", "num": "1077", "d": "3/2015"}, {"title": "api docs missed text nt show output", "body": "see doc content constructor exists doc comment generated possibly todo next petebacondarwin something dgeni tolerant issue doc comment", "num": "1072", "d": "3/2015"}, {"title": "api docs path shown instead var name", "body": "see doc variables ondestroy onchange show path instead name top page petebacondarwin easy dgeni fix perhaps", "num": "1071", "d": "3/2015"}, {"title": "zonejs included dependency import", "body": "throws error included angular example", "num": "1070", "d": "3/2015"}, {"title": "building grunttraceur", "body": "attempting build angular grunttraceur project errors arise seem like legitimate errors easily fixed submit pull request like errors super call allowed derived constructor errors allowed super errors super call allowed derived constructor errors super call allowed derived constructor errors super call allowed derived constructor super call allowed derived constructor super call allowed derived constructor errors super call allowed derived constructor", "num": "1069", "d": "3/2015"}, {"title": "forms support asynchronous validation", "body": "saw demos new forms api angular wondered asynchronous validation supported common usecase asynchronous validation would user registration form user name validated server need new state indicate forma particular field currently validating enables us show kind loading spinner form field pending validation asynchronous validation implemented angular would great angular forms great example functionality angular pending state particular fields shown topic already discussed angular forms design doc suggestions regarding implementation maybe discuss feature laid", "num": "1068", "d": "3/2015"}, {"title": "authentication authorization module", "body": "angular going provide official authentication authorization module box think would pretty relevant feature see thread quora example thoughts cheers", "num": "1067", "d": "3/2015"}, {"title": "bug privatecomponentloader privatecomponentlocation must listed services work", "body": "works js dynamiccomponent selector dynamiccomponent services privatecomponentloader privatecomponentlocation class mydynamic constructor loader privatecomponentloader location privatecomponentlocation fails js dynamiccomponent selector dynamiccomponent services privatecomponentloader privatecomponentlocation class mydynamic constructor loader privatecomponentloader location privatecomponentlocation", "num": "1063", "d": "3/2015"}, {"title": "bug privatecomponentloader add decorators dynamiccomponent", "body": "add decorator component privatecomponentloader errors tells nt template nt adding decorators dynamically add temlpate decorator privatecomponentloader lets add js dynamiccomponent selector dynamiccomponent services privatecomponentloader privatecomponentlocation class mydynamic constructor loader privatecomponentloader location privatecomponentlocation loaderload testreddecorator location decorator selector red template inline test export class testreddecorator constructor element ngelement elementdomelementstylebackground red", "num": "1062", "d": "3/2015"}, {"title": "shadow dom emulation two components template second get content projection", "body": "two components selectors respectively use template demo render buttons anchors looks something like whichever component second page receive content projection instead placeholder tags still see issue locally visit see anchors content projected buttons remove buttons leave anchors work fine readd another button anchors button problem", "num": "1058", "d": "3/2015"}, {"title": "class bindings nt camelcase normalize css class names", "body": "binding html class name added element currently", "num": "1057", "d": "3/2015"}, {"title": "browser adapter domon cancelable", "body": "", "num": "1056", "d": "3/2015"}, {"title": "component lifecycle needs documentation interfaces", "body": "right see use within angular code base seem like angular dart case made clear additionally would useful provide interfacesabstract classes destroyaware attachaware get compiletime checking lifecycle methods missing", "num": "1055", "d": "3/2015"}, {"title": "form api lacks type annotations", "body": "almost every method return types dynamic important constructors eg controlgroup type annotations would nice add whatever possible make consuming easier lower bugs refactorfinish api", "num": "1054", "d": "3/2015"}, {"title": "serverside rendering isomorphic javascript", "body": "angular going provide serverside rendering isomorphic javascript features impression pretty relevant theme folks ember getting mostly right thoughts cheers edit meteor also providing", "num": "1053", "d": "3/2015"}, {"title": "calling settimeout throws maximum call stack exception", "body": "load angular application open chrome developer tools switch console enter note exception reproduced maximum stack exception simply easy way reproduce problem occurs real applicationscomponents need use timeouts inside event handlers needs fixed", "num": "1050", "d": "3/2015"}, {"title": "controller ngmessages required directive ngmessagesinclude ca nt found", "body": "work directive ngmessagesinclude", "num": "1048", "d": "3/2015"}, {"title": "form controls model field annotations suggestion", "body": "one concept available frameworks ability apply annotations directly fieldsproperties way model used multiple viewsapps ready go without much work situations requirements stay view view app app optional approach one liked situations since makes things easier maintain imo allows individual fieldproperty describe individual requirements nt seen typescript annotations applied yet may even possible thought throw pseudocode class address field required twoway street string field required twoway city string field required twoway state string field required zipcodevalidator twoway zip string field required oneway residential boolean twoway oneway options totally made could used control binding occurs field line could eliminated potentially people nt like type information model heard many times frameworks nice thing approach whatever way like using formbuildergroup technique shown annotating model assuming typescript annotations allow nt seen restrictions yet formbuildergroup might look like model annotated thisaddress new address formbuilder injected constructor fb thisform thisaddress model defines annotations fbgroup also defined individual form control fields local field definitions would win used instead model annotations would allow flexibility use either approach even override default model annotations needed people nt want model annotations would simply use standard fbgroup technique", "num": "1047", "d": "3/2015"}, {"title": "change detection referenced input fields", "body": "really nt know bug missingforgotten feature choice however think html toggled work changedetection nt kick change needs possibly empty eventlistener like html toggled thoughts", "num": "1046", "d": "3/2015"}, {"title": "rendering using emulated shadow dom order magnitude slower native", "body": "written simple angular application simply displays list custom components screen using using native shadow dom application render messages screen second however switching emulated mode default rendering mode takes upwards seconds render list possible something component causing slowdown difference rendering pretty stark project found get running clone repo directions readme well want switch modes line bottom uncommented switch javascript var shadowdombindings bind shadowdomstrategy toclass nativeshadowdomstrategy bootstrap myappcomponent shadowdombindings lt uncomment line use shadow dom", "num": "1044", "d": "3/2015"}, {"title": "reduce forms boilerplate code", "body": "finished reading victor savkin blog post angular forms general idea spot code required make work looks much could nt help implement last demo angular lot shorter nt code setting form controller hard thing creating custom directive zip code validation angular version requires code bind model fields controls one line code wires twoway data binding first thing occurred saw people keep forgetting line already see stackoverflow questions reduce boilerplate somehow use attributes type information create form mean javascript class address tells form builder street field required required street string required message city required city string required state string custom validation custom validator zipcodevalidator zip string checkbox residential boolean component selector formexample template bind form address field form builder uses address type information get validation rules inline street required class formexample annotate form builder knows type address address constructor thisaddress new address nt need anything else", "num": "1043", "d": "3/2015"}, {"title": "form collection type new api", "body": "hello end reading post new form api think awesome great expectations new form api seems powerful much like know possible better api collections within form could mark entire form invalid validators greaterthanx lessthanx equalstox return false validation trying say model object contains array objects like collection least item form gets marked invalid condition fulfilled impossible least afaik really useful included new api need guidance popular php framework symfony form component already contains control named collection specifically designed use case works really fine maybe could something like forms keep hard work thanks amazin tool", "num": "1042", "d": "3/2015"}, {"title": "need way manage focus", "body": "goals different templates may different ways invoking bahavior example tag mobile may method desktop template may method invoking commands marshal events across uiwebworker boundries assume tha subexpressions start must avaluated ui thread everything else evaluated webworker thread copmonent selector mycomponent template platform mobile url mycomponentmobilehtml template platform desktop url mycomponentdesktophtml template platform native renderer foorenderer class mycomponent items array strength string constructor view view items name name b viewdo focus username viewdo focus username viewdo play viewdo select items viewdo select itemname itemname action syntax proposal syntax considered", "num": "1041", "d": "3/2015"}, {"title": "swap default behavior event propagation", "body": "right anything propagated events argument swapping say component template simple great pass component along user put app user writes alas party click handler wo nt fire template user knows nothing far user concerned total leaf get work user would write alternatively could change button js component selector mdbutton href template url buttonhtml export class mdbutton clickemitter function constructor eventemitter click clickemitter function thisclickemitter clickemitter click event event thisclickemitter event adding click handler event emitter propagate event happens default dom boilerplate get", "num": "1040", "d": "3/2015"}, {"title": "framework form submit events", "body": "directive angular automatically form submit events since people nt wanted behavior decade angular probably thing update event handling seems broken template tried method component interacting either button causes full form submit event handler never executed errors thrown rkirov ideas", "num": "1039", "d": "3/2015"}, {"title": "component testing isolation", "body": "components basic building blocks angular applications important solid testing story user component important able mock stub testing template since template annotation static need new mechanism dynamically rewiring template directives list support suggest following api mocks nt need template skip component template class mockb inject templatemodifier tm gt tmfor mockdirectives mockb mockc var rootel testbedcompiler tools generating setting expectations provided", "num": "1036", "d": "3/2015"}, {"title": "transform values templates", "body": "per yjbanov recommendation avoids unnecessary deployed application", "num": "1035", "d": "3/2015"}, {"title": "data driven forms", "body": "goals able generate form dynamical based specified structure allow marshaling data fromto form model support layout strategies support selecting right component type things consider impedance mismatch model vs form control implementation note need develop component look generate dynamic component type load private component based type import forms required materialdesign model class address street string city string state string zip string residential boolean component selector formexample template form layout automatic structure inline directives forms class formexample constructor fb formbuilder thisaddress new address function zipcodevalidator control controlvaluematch ddddd dddd return invalidzipcode true", "num": "1034", "d": "3/2015"}, {"title": "create haserror api forms", "body": "", "num": "1033", "d": "3/2015"}, {"title": "compiler support selectors multiple attributes", "body": "currently compiler match", "num": "1025", "d": "3/2015"}, {"title": "support ngoptions", "body": "currently way use select generate list options manually follows san fran new york city might good idea support something like implementation notes one way implement define new component used follows", "num": "1022", "d": "3/2015"}, {"title": "actual multiple statements", "body": "multiple statements ok statements composed one statement ie doa dob matter fact angular allow multiple statements mean ie doa dob", "num": "1016", "d": "3/2015"}, {"title": "developermd contains misinformation", "body": "x dart dependencies required order build angular however currently require dart dependencies run tests see x instructions state either dev stable version downloaded archive currently true since stable dart version supported really encourage people install nt suffer problems caused global dependencies juliemr please confirm protractor really ca nt run local mode via global launcher like gulpcli karma work ca nt fix installing npm packages sudo dangerous strongly discouraged people use ways installing node npm nt require", "num": "1013", "d": "3/2015"}, {"title": "skip dart tests issue warning dart environment setup", "body": "currently skip dart related tasks building angular dart environment setup tests justification someone familiar dart wants contribute small fix asking setup dart environment reasonable", "num": "1012", "d": "3/2015"}, {"title": "contributingmd contains lot misinformation", "body": "looks like file compied angular repo superficial changes concrete problems section points people gitter angualar mailing list nt actively monitor section mostly obsolete section references steps signcla launch", "num": "1011", "d": "3/2015"}, {"title": "ability set attrsproperties root element component", "body": "component currently set class side menu showhide manually manipulate dom element like able setup binding component element instead mhevery suggested injecting constructor errors used actual function tries set exist", "num": "1009", "d": "3/2015"}, {"title": "add support setting attributes component host element", "body": "currently set properties component host element way set attributes specifically aria purposes would useful things like etc", "num": "1008", "d": "3/2015"}, {"title": "preventing duplicate ids emulating shadow dom", "body": "problem say component template html ariaowns autocompletemenu gt alpha example use id necessary attribute current shadow dom emulation work multiple instances component page time ids would duplicated use cases include possible solutions different ways could handle put burden user people would done angular adopting matter documentation automatically recognize id attributes shim id isolation user writes angular recognize standard attributes use id reference list id references automatically convert documentunique ids add syntax identify ids unique conversion specific syntax aside something like benefit hardcode list idreference attributes still incurs performance cost previous solution", "num": "1007", "d": "3/2015"}, {"title": "fails safari", "body": "error line code error looks like mapwrapper createfromstringmap illegal strict mode operation safari first line loop weird might traceur problem", "num": "1006", "d": "3/2015"}, {"title": "remove library directives", "body": "per discussion done ts", "num": "1005", "d": "3/2015"}, {"title": "feature request provide getter component template", "body": "ionic need able change template component runtime based combination factors current device screen size userset configuration attributes user puts element could angular angular ca nt mhevery mentioned proposed syntax different templates could set based upon conditions still limiting still ca nt button instance potentially use different template need something dynamic simplest way fix problem would allow getter template", "num": "1002", "d": "3/2015"}, {"title": "binding regexp liberal", "body": "get processed way first one ignored", "num": "1001", "d": "3/2015"}, {"title": "typeerror exception using foreach inside switch", "body": "exception happens value directive changes way hide nested template component html suggestion loading suggestions suggestion cf full file steps reproduce reproduce issue git clone b switchissue npm install amp amp gulp play type something field typing second char exception raised exception prevents list suggestions disappearing reappearing stack trace exception angular version tested version", "num": "997", "d": "3/2015"}, {"title": "add directive lifecycle hook called children directive checked", "body": "hook implement called change detection checks implementation notes one way implement walk list directives reversed order every directive supports hook invoke", "num": "995", "d": "3/2015"}, {"title": "elementinjector throw find required prebuild objects", "body": "following throw viewport directive following inject null", "num": "994", "d": "3/2015"}, {"title": "missing git tags", "body": "without tags supposed see state repo version", "num": "993", "d": "3/2015"}, {"title": "template local variable value updated user types", "body": "illustrate problem setup angular quickstart example dart named changed template html hello nmvalue nothing launch app see hello al expected type new input text browser greeting update click nothing link invokes noop event handler greeting updates match input text value nt greeting update type extension add noop event handler element update input text gets propagated type way go note example deliberately trying avoid using model field intermediary transport input value thinking might consequence new angular digest phase vs digest cycle wanted double check nt bug eg uses timer delay change model field change detected ca nt nm considered template local model field hence updates picked automatically btw note tested current head angular ie", "num": "992", "d": "3/2015"}, {"title": "support gt gt gt shadow dom polyfill css", "body": "new name css deep combinator see mostly note self back feel free tackle would nice update webcomponentsjs time", "num": "990", "d": "3/2015"}, {"title": "ref binding attribute components", "body": "hi examples see element components like ngconf misko show get hold component api using ref binding happens attribute components like coexisting element one get reference following api exposes methods like tooltip component methods like would accesible binding think two possibilities either merging components api could cause lot trouble maybe adding different syntax could", "num": "985", "d": "3/2015"}, {"title": "event bindings allow assignments", "body": "code throws work since assignments supported event binding data binding", "num": "981", "d": "3/2015"}, {"title": "add support overriding shadowdomstrategy per component", "body": "use case angular material directive called lets user embed svg content via url component exists give people easy way insert svg content document easy way load svg document url loading content document directly instead using something like backgroundimage gives user power style svg svg content shadow root however point component lost fix mdicon component able specify always use emulated mode even time browsers support shadow roots", "num": "979", "d": "3/2015"}, {"title": "add support directives insert arbitrary content dom", "body": "use case angular material directive called lets user embed svg content via url need able build directive angular directly embeds content way using binding innerhtml possible susceptible xss would require ugly string manipulation domlike content", "num": "978", "d": "3/2015"}, {"title": "rename directiveservices directiveinjectables", "body": "please leave comment vote foragainst change suggest better name proposing change make language specific actually align better existing di vocabulary pkozlowskiopensource assigning make change input", "num": "973", "d": "3/2015"}, {"title": "typeerror gulptraceur angularbuild windows", "body": "hello tried build current sources following given steps unfortunately error destroyabletransformtransform gulptraceur run visualstudio toolchain therefore always use npm install encountered problems downloadingbuilding npm needed prerequisites place gulp protractor webdrivermanager etc using dart sdk js posting tried find similar issues luck complete error output", "num": "972", "d": "3/2015"}, {"title": "ngmouseleave triggers mouse rightclick", "body": "latest version chrome behavior happens previous versions right click elements perform different actions without triggering ngmouseleave affected scenarios header menus contains hyperlinks element dependent ngif updated ngmouseleave one good example issue replicated chrome version higher right click button increment counter thanks keep", "num": "971", "d": "3/2015"}, {"title": "eventemitter requires type", "body": "sure bug component called picklist nt type eventemitter get error javascript works constructor eventemitter changed changer function breaks shows error constructor eventemitter changed changer", "num": "965", "d": "3/2015"}, {"title": "subcomponent changes binded value", "body": "hi written simple webcompontant directive binds passed value und provides mehtod changes import component decorator template component selector bindsample bind value value template url bindsamplehtml directives export class bindsample template looks like click directive used way click like dostuff called updates bound value unfortunatelly binding somevalue updated wondering bug b implemented c due new concept onewaydatabinding", "num": "962", "d": "3/2015"}, {"title": "update polymer tree benchmark released version polymer", "body": "right using preview version following effects yet use shadowdom use builtin conditional like uses temporary bower repository polymer released limitations removed", "num": "960", "d": "3/2015"}, {"title": "bootstrapping noncomponent give better error message", "body": "import decorator bootstrap ngelement decorator selector input class extendedinput el constructor el ngelement thisel el consolelog alert hi bootstrap extendedinput results erro ands probably say", "num": "951", "d": "3/2015"}, {"title": "issue dart transformer", "body": "master open gives following error cc tbosch add", "num": "950", "d": "3/2015"}, {"title": "dgeni harsh", "body": "background broken build adding documentation think dgeni harsh think encourage adding documentation may dgeni help error could make error message clearer making explicit wrong amp could warning rather error documentation expected format ie contributingmd edit way issue probably fixed nicer way", "num": "949", "d": "3/2015"}, {"title": "js tests testunitjsci use dartium cli travis rather chrome", "body": "putting together developer notes following came gulp target makes use chrome canary understandably use dartium far good surprise gulp target launches dartium command line travis eg excerpt travis angular build around line developer run tests command line want ensure using browser ci travis inconsistency use browsers really want way want inconsistency fixed ie use dartium across board dart js tests b use chrome canary chrome js tests make fix one needed need someone angular core team indicate option preferable", "num": "945", "d": "3/2015"}, {"title": "angularbower projects nt specify dependencies packagejson", "body": "installing packages using jspm via npm example dependency specified bowerjson file specified packagejson causes issues loading modules jspm systemjs would much ask also specify dependencies", "num": "944", "d": "3/2015"}, {"title": "need way parent component know children ready", "body": "use case parent container component responsible performing layout number children parent unable know layout children bindings resolved however would nt work fired child components static attributes specific example material design gridlist responsible layout contained parent layout tile nt know sibling order perform layout needs know tile either static set via binding right good way know notified ready sizepositioned injections implemented would solve problem constructor still early properties set", "num": "934", "d": "3/2015"}, {"title": "overlay service", "body": "goal allow developers build overlays popups dialog boxes toasters etc without access native dom basic idea service allows developer load overplayed components service manages size position event handling api class overlay component instance component object closes overlay close class overlaymanager open type type component type load overlay position position overlay placed width string height string glasspane boolean events map", "num": "932", "d": "3/2015"}, {"title": "transpiler use traceur implementation parseobjecttype", "body": "right implementing needed upstream traceur supports although different implementation remove hack rewrite places use object types format traceur uses list types instead object hash", "num": "929", "d": "3/2015"}, {"title": "share angular google groups create new ones", "body": "currently following google groups angulardart forumangulardart angularjs forumangular angulardev js forumangulardev mhevery et al contributions angular picking suggest direct user developer questions see three options reuse groups posts create single angular group though seems go contrary igor guidelines acg create two angular groups one js one dart option seems reasonable flip side angularjs already generates quite traffic issues question discussion groups came editing contributingmd nt big issue new groups created might well done sooner later either way tweak contributingmd based answer acg angular communication guidelines section communicating js dart igor writes javascript developers usually nt care dart dart developers usually nt care javascript support javascript dart better tailor communication two groups practice means separate docs js dart", "num": "928", "d": "3/2015"}, {"title": "add support component children injection", "body": "nicetohave container components responsible configuring interacting contained components currently child component inject registerderegister manually", "num": "927", "d": "3/2015"}, {"title": "provide promise list foreach", "body": "would possible provide list promises transclude use tell rendering complete tend use automated testing without information revert using something like ngclass last actual ngrepeat div collection promises would help know individual objects rendered", "num": "923", "d": "3/2015"}, {"title": "proposal promises templates", "body": "line going support async operators stuff wondering support async templates way resolve promise template example would like propose makes possible handle array promises right template like stretching far", "num": "917", "d": "3/2015"}, {"title": "support overriding selectors directives import", "body": "possible override selector component import decorator selector someselector class directive component template directives new directivebinding key directive selector otherselector problems would make hard know selectors statically requires execution code know selector", "num": "915", "d": "3/2015"}, {"title": "throw error template declared viewport directive match", "body": "code throw error compilation subtemplate syntaxes ref directive viewport directive matched general error subtemplate without viewport", "num": "914", "d": "3/2015"}, {"title": "add facade windowmatchmedia", "body": "windowmatchmedia used determine current window matches given media query material design components use order responsive rendering", "num": "913", "d": "3/2015"}, {"title": "extend foreach syntax support data structures", "body": "might pedantic request nt microsyntax use instead since forin loop iterates array keys rather values issue expanded include array iteration one comments thread describes one possibility making syntax flexible", "num": "909", "d": "3/2015"}, {"title": "error benchpress output", "body": "see output", "num": "908", "d": "3/2015"}, {"title": "confused angular microsoft typescript traceur rttsassert", "body": "im confused see news libs typescript announced angular use typescript cant find anything typescript angular team really want use typescript means removekick traceur angular team want use typescript gt see like lib sync repro things right announcements well roadmap used removed", "num": "907", "d": "3/2015"}, {"title": "reflectortypeinfo object map", "body": "always made factory parameters annotations reason making object would speed instantiation type info lookup", "num": "906", "d": "3/2015"}, {"title": "dynamic loading components", "body": "problem order support lazy loading components select components based runtime value need way selecting component runtime rather template compile time mental model place component loaded contain headless component ie component headless component inject api allow headless component bootstrap child component location private component bring serve shadow dom view private component regular component annotation way special used locations normally headless component created synchronously private component created asynchronously headless component act proxy private component headless component instance injected light dom private component injected shadow dom example component selector car bind template url class car component selector vehicle bind class vehicle constructor pc privatecomponent thispc pc loadcar somelibraryload var childinjector pcload somelibrarycar open questions merge api", "num": "904", "d": "3/2015"}, {"title": "selectors decorators shadow dom", "body": "code work way would expect work specifically want write component uses decorator applied content included template instantiating document use element illustrate one decorator two components code one works expected one import component template decorator ngelement bootstrap annotation section component selector myshadowapp template inline directives shadowselector component controller class myshadowappcomponent constructor component selector mylightapp template inline directives shadowselector component controller class mylightappcomponent constructor decorator selector target class shadowselector ngelement always injectable wraps element directive found compiler constructor el ngelement eldomelementinnerhtml yo bootstrap mylightappcomponent bootstrap myshadowappcomponent html content second one gets decorator applied wrong apply decorators content included shadow dom way", "num": "903", "d": "3/2015"}, {"title": "declarative property initialization", "body": "angular paradigm shift became componentoriented taken fresh look would natural treat html markup serialized hierarchy objects type components particular case objects objects could properties complex types right setting component properties limited done using json inserts html attributes sometimes difficult especially type lot json code consider adding declarative way property initialization instead markup could write declarative counterpart like layout layout layout complex property panel component instance tablelayout class set property describe markup instance class want instantiate possible json unless trick like first example easily set complex propertiesarray properties like defining columns grid component example columns column definitions would hard describe json columns column element instance appropriate class grid component array property stores columns important angular act like serialization format take look xaml specification example decide property value go property value added array user could specify array property constructor method understand epic story think enhancement fits architecture could implemented least next version framework", "num": "902", "d": "3/2015"}, {"title": "", "body": "pr add new annotation used way js class needspropertysetter propsetter constructor propertysetter title propsetter function thispropsetter propsetter setprop value set value current element thispropsetter value internally need setter set property kegluneq could please update dart transformers generate setters thanks", "num": "901", "d": "3/2015"}, {"title": "element injector amp parent ancestor optional annotations", "body": "working identified potential issue let say directive injects parent directive binddirectiveproperty setup bindings annotation bind property however something want binding already set also probably issue verified verify directive exists setting prop value add nullcheck yet clear could places changes cc mhevery rkirov vsavkin", "num": "896", "d": "3/2015"}, {"title": "annotations looks dangerously big", "body": "line db binding bothers constructor move di constructors annotations usually nt hardcode path db controller look analogue", "num": "895", "d": "3/2015"}, {"title": "component transcluded content nt compiled", "body": "nt know duplicate figured post anyway case component never compiled js tabsjs import component template import tab tab component selector iontabs template inline directives tab export class tabs js tabjs import component template component selector iontab template inline export class tab constructor alert compiled alert never fires played awhile convinced bug end content", "num": "894", "d": "3/2015"}, {"title": "directive transclude element working", "body": "wondering discovered problem transclude element directive definition whether confused specifically appears way replace transcluded element dom angular", "num": "891", "d": "3/2015"}, {"title": "website missing view source improve doc", "body": "would nice buttons back could nt find angulario located github since githubcomangularangulario seems empty", "num": "890", "d": "3/2015"}, {"title": "flexible templating dom", "body": "built several components directives angular used transclusion flexible powerful way pulling transcluded html dom using templating feature possible angular seemed slightly working way angular wanted work chose way allowed us define templates right html tree without build code include html files first example generic container slightly similar ngswitch container takes one templates displays template based selector binding example consuming component content display somepropertypath selector value content display somepropertypath different value compile link processing component build transcluded content parse templates bind actual dom component run time also built another container control resembles ng repeat uses internally footers content item allows user specify templates example consuming control seems fairly unique use case wanted bring angular team attention case nt seen thoughts kind flexible templating reusable components could accomplished angular", "num": "889", "d": "3/2015"}, {"title": "failure", "body": "v node tmp throw er unhandled error event error super call allowed derived constructor nt know getting rid super call legit", "num": "887", "d": "3/2015"}, {"title": "fix darttransform merge setter registrations name", "body": "currently generate one setter registration per value example annotation attached two classes would generate instead need generate single setter registration using common parent class would tough without resolving transformer would like avoid first approximation omit parameter type interpreted need global knowledge setters would registered modify transformer primary inputs files generated app entry points parse files gathering information setters generated also parse files imported primary inputs multiple setters single property remove type information registered setter output file method registers setters generate code import call app setup", "num": "886", "d": "3/2015"}, {"title": "angulario header wrong color firefox ubuntu", "body": "colors angulario home page broken firefox l ubuntu repo pr fix", "num": "879", "d": "3/2015"}, {"title": "input number step", "body": "test validation pass", "num": "877", "d": "3/2015"}, {"title": "unable set property classlist element", "body": "needs implemented decorator selector class bind classchanges class keyvaluediff class classdecorator element ngelement constructor element ngelement thiselement element classchanges changes keyvaluechanges changesforeachchangeditem decorator selector classlist bind classchanges classlist iterablediff class classdecorator element ngelement constructor element ngelement thiselement element classchanges changes arraychanges changesforeachchangeditem original text tried html html first example checking property classlist js element second example checking property classlist would expect set property classlist dart release", "num": "876", "d": "3/2015"}, {"title": "story accessing dom components", "body": "need solid story accessing manipulating dom right appears rough complete single getattribute method particular use case want query elements component shadow dom manipulate attributes element", "num": "873", "d": "3/2015"}, {"title": "support absolute paths component urls", "body": "currently component templates accept absolute paths ie first support absolute paths component templates yes resolve think yes resolve like anchor tag would resolve path note agree filerelative paths better component reuse question user writes absolute path reword error thrown explicit support", "num": "872", "d": "3/2015"}, {"title": "fix names dart libraries remove dart name", "body": "", "num": "871", "d": "3/2015"}, {"title": "selectors allowed prefix", "body": "possible import directive way prefix selector html could write open questions compilex css selectors know part needs prefixed idea css selector would mean would get prefix exactly would work directive imports", "num": "868", "d": "3/2015"}, {"title": "selectors support multiple targets", "body": "currently support specify multiple selector targets need add", "num": "867", "d": "3/2015"}, {"title": "dash case camel case conversion html attributes", "body": "html attributes lowercased per html spec means convert dash case camel case gt see", "num": "866", "d": "3/2015"}, {"title": "viewpool configurable", "body": "view viewpool one riskiest features take plunge enable viewpool application need extensive testing therefore would like disable viewpool right hardcodes item cache number configurable b enable percomponent basis ie intend testing component promoting cachable component", "num": "856", "d": "3/2015"}, {"title": "limit binding prop", "body": "recently found seems limit bindings property strange nt case foreach known side effect missing something html component selector todoapp template inline template class todoapp constructor thisstate sametypeofbinding correctly binding", "num": "852", "d": "3/2015"}, {"title": "importnode wrapper needs special case htmltemplateelement webkit", "body": "webkit bug appears fixed however workaround needed order support devices ios safari nt look like using much cloning maybe quick hack good enough", "num": "851", "d": "3/2015"}, {"title": "gulp gives horrible errors", "body": "build failed reported errors like error help debug issue improved", "num": "850", "d": "3/2015"}, {"title": "better documentation", "body": "angular project write documentation spec implement throughout codebase would propose minimum exported classes documentation comment describing class public methods exported classes also documentation comment", "num": "849", "d": "3/2015"}, {"title": "include external html template examples", "body": "trying create example aria menu able see include html template using url attribute see support copying template css files dist directories gulp script may missing something case please point missing anything add wanted see whether preferences added gulp script see support cjs files copied renamed js create similar capabilities chtml files", "num": "848", "d": "3/2015"}, {"title": "use super subclasses use", "body": "blocks traceur enforcing rules correctly", "num": "844", "d": "3/2015"}, {"title": "create cssadapter like domadapter", "body": "methods current domadapter deal style probably extract use something like css parser js ccslib dart", "num": "843", "d": "3/2015"}, {"body": "would useful view creationhydration", "d": "3/2015"}, {"body": "jelbourn", "d": "3/2015"}, {"body": "greentea using native shadow dom mode would nt affect easy workaround", "d": "3/2015"}, {"body": "use property setters set attributes classes styles syntax square brackets templates see spec", "d": "3/2015"}, {"body": "yep properties attributes set attribute html prop setter maybe rename sth else", "d": "3/2015"}, {"body": "using following pattern experiments dart", "d": "3/2015"}, {"body": "also investigate auto waiting asynchronous script execution", "d": "3/2015"}, {"body": "micro metrics", "d": "3/2015"}, {"body": "think animations well rendering might multiple paints measured least provide easy way tell benchpress script execution animation done maybe via special call", "d": "3/2015"}, {"body": "looks like example using atscript either", "d": "3/2015"}, {"body": "dynamically loading atscriptnonstandard js need set configuration js systemconfig traceuroptions annotations true types true membervariables true systemimport whatever", "d": "3/2015"}, {"body": "thanks tried getting", "d": "3/2015"}, {"body": "jrgleason thoughts component needs template component annotation probably complaining looking paste sure trying accomplish exactly got element indexhtml template replace check basic demo future might try asking gitter room help review figure opening issue", "d": "3/2015"}, {"body": "take look actually put template inline nt add code got error either way added since main branch issues assumed something track figured worst case scenario someone closes demo code currently using uses instead traceur take look plunker see might missed", "d": "3/2015"}, {"body": "ah ha miss something original post update actual code looked like apparently happens accidently include semi end misleading message mixed adding zonejs makes work thanks help convey information masses still curious plunker created single js file gulp option", "d": "3/2015"}, {"body": "resolved using q promise factory", "d": "3/2015"}, {"body": "wesleycho yes happen waiting review", "d": "3/2015"}, {"body": "could please make document public", "d": "3/2015"}, {"body": "ca nt access doc yjbanov vsavkin would mind summarising like sentences harm done pipes bindings alternative mechanism directives like new opened pr", "d": "3/2015"}, {"body": "moving private component pipe binding way get pipe blocking", "d": "3/2015"}, {"body": "vsavkin could share proposal pls pkozlowskiopensource short already pipes plain jsdart want postprocess incoming value setter want customize postprocessing inject something outside use setter pipes require lot plumbing core concepts developers learn us document whole concept seems exist support binding pipes", "d": "3/2015"}, {"body": "create new doc", "d": "3/2015"}, {"body": "specifically want documentation lifecycle attributes set component controller", "d": "3/2015"}, {"body": "covered guide davideast kwalrath working", "d": "3/2015"}, {"body": "cc matanlurey jbdeboer tbosch mhevery juliemr", "d": "3/2015"}, {"body": "apparently may partially covered like keep open possible strawman would ease migration", "d": "3/2015"}, {"body": "cc vsavkin", "d": "3/2015"}, {"body": "related", "d": "3/2015"}, {"body": "vicb resolve along", "d": "3/2015"}, {"body": "yes shorter names would sweet", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "duplicate google doc early stage attached issue feel free comment", "d": "3/2015"}, {"body": "possible js constructor attribute tabindex statictabindex propertysetter tabindex tabindexsetter thistabindex statictabindex thistabindexsetter tabindexsetter onchange thistabindex tabindexsetter", "d": "3/2015"}, {"body": "essentially want prepare default value property use undefined null js template class mdradio defaultvalue fires check construction onchange tabindex number tabindexsetter function constructor attribute tabindex statictabindex propertysetter tabindex tabindexsetter thistabindex statictabindex thistabindexsetter tabindexsetter", "d": "3/2015"}, {"body": "use would also great tailhook intercepter also prepared setter function value set default value would auto override", "d": "3/2015"}, {"body": "matanlurey nt implementing looking syntax", "d": "3/2015"}, {"body": "said would cool web components got properties well", "d": "3/2015"}, {"body": "let verify nt aware already completed", "d": "3/2015"}, {"body": "pkozlowskiopensource attributes used match css selectors css support matching properties btw also support binding maps attributes", "d": "3/2015"}, {"body": "yjbanov sure got comment got currently specialcasing compiler allows bind attributes top standard binding properties using special syntax see sure css selectors coming play yjbanov could please elaborate", "d": "3/2015"}, {"body": "pkozlowskiopensource example using attribute drive css style html materialbutton materialbutton raised ok cancel supporting properties sufficient express", "d": "3/2015"}, {"body": "would tell angular component web component biggest question think able tell runtime element none following standard html element eg angular directive web component could log warning harder statically unless app developer also provides whitelist web components use app", "d": "3/2015"}, {"body": "ok automagic standard elements optional mode used web components whitelisted", "d": "3/2015"}, {"body": "seems like ed solve errors", "d": "3/2015"}, {"body": "alexeagle points answer required might need get latest version check", "d": "3/2015"}, {"body": "yes similar problem fri mar victor berchet notifications githubcom wrote alexeagle points answer required might need npm update get latest version check npm ls grep reply email directly view github", "d": "3/2015"}, {"body": "way solve fri mar tobias bosch tbosch googlecom wrote yes similar problem fri mar victor berchet notifications githubcom wrote alexeagle points answer required might need npm update get latest version check npm ls grep reply email directly view github", "d": "3/2015"}, {"body": "closed via", "d": "3/2015"}, {"body": "yes want inline templates styles production deployment", "d": "3/2015"}, {"body": "story templates processed compiler run browser well outside transformer production deployment compiler runs part pub transformer inlines everything well turns expressions templates plain dart code links directives etc little template interpretation done runtime", "d": "3/2015"}, {"body": "thanks make note continue using feel free close tracked elsewhere", "d": "3/2015"}, {"body": "additional complexity current applications components optimize unless tag supports sort custom property lose ability strawman jbdeboer", "d": "3/2015"}, {"body": "preliminary decision add css template definition matan write actual implementation defer", "d": "3/2015"}, {"body": "work change", "d": "3/2015"}, {"body": "ok looked semantics supposed indicator support event bubbling confuses position absolute change behavior regards event bubbling still looks like bug one way", "d": "3/2015"}, {"body": "sure click actually element click handler child", "d": "3/2015"}, {"body": "instances clicking element instances native handler always gets called angular events attribute component callback get called position absolute styling applied child makes sense yes actual element getting click inside child correct behavior bug gets called position absolute applied either way bug", "d": "3/2015"}, {"body": "wait minute bad looks like mixing two changes fact look like working properly apologies", "d": "3/2015"}, {"body": "encountered one liner might fix needs proper integration test", "d": "3/2015"}, {"body": "rkirov bandwidth close one", "d": "3/2015"}, {"body": "reassigned tbosch looks like shadow dom emulation problem messed", "d": "3/2015"}, {"body": "yep leading removed want able access values dart", "d": "3/2015"}, {"body": "ok thnx send pr", "d": "3/2015"}, {"body": "duplicate pr already mhevery jelbourn vicb could one guys please review gets second person bumping issue last couple days", "d": "3/2015"}, {"body": "output selenium logs captured relevant section failure another", "d": "3/2015"}, {"body": "always happens benchmark seem occur run ngtree benchmarks reproduce locally linux machine tried running one expensive benchmark got different error browser crashed tried adding debug seleniumstandalone options output big travis stopped build", "d": "3/2015"}, {"body": "ok switching dartium chromium seems resolve issue running get little data edit nevermind got lucky switching chromium resolve issue", "d": "3/2015"}, {"body": "see potential workaround forcing performance tests use fresh instance browser whenever run", "d": "3/2015"}, {"body": "workaround commit merged hopefully solved moment like leave issue open since still nt know actually causes problem tobias suspect kind memory issue fetching lots massive performance logs", "d": "3/2015"}, {"body": "ajoslin latest master nt fixing", "d": "3/2015"}, {"body": "actually class binding works fails run setter", "d": "3/2015"}, {"body": "yes latest master verify", "d": "3/2015"}, {"body": "call setter function", "d": "3/2015"}, {"body": "boolean", "d": "3/2015"}, {"body": "temp fix", "d": "3/2015"}, {"body": "pkozlowskiopensource add use case test demonstrate works expected", "d": "3/2015"}, {"body": "apparently mlaval checked latest master things seem work going add test prove", "d": "3/2015"}, {"body": "sorry guys bad call found bug update script nt actually updating master ill close confirm later today get work thanks", "d": "3/2015"}, {"body": "could handled event manager binding events something along lines want make sure clean events component destroyed pkozlowskiopensource would like take crack", "d": "3/2015"}, {"body": "oh surprised got duplicated talk mlaval send pr tomorrow think keep compilerprivate example create sth like stringutilsjs compiler dir suggestions", "d": "3/2015"}, {"body": "keep compilerprivate first thought make available outside compiler together general purpose util functions come future strong opinion", "d": "3/2015"}, {"body": "would prefer keep part compiler due bad memories ng opened helpers public api helpers expanding allpurpose monsters wayyy much ng internals would prefer play safe side time open things gradually needed nt feel strong others think makes sense open general api cool long exposed public outside world", "d": "3/2015"}, {"body": "oups intention keep functions file fix following ouput discussion would favor private solution pkozlowskiopensource", "d": "3/2015"}, {"body": "sounds lot like issues got pr already would proposed solution work", "d": "3/2015"}, {"body": "nice catch thanks", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "supports inheritance inheritance hierarchies angular favor composition inheritance base class extend", "d": "3/2015"}, {"body": "yes purpose looks good added new test captures content disabled tests", "d": "3/2015"}, {"body": "make sense allow user specify properties querying might check performance cost pulling everything measurements would also give scroll info scrolltop scrollwidth scrollheight also probably need give clientheight offsetheight width lastly limited user power arbitrarily select part component template measure figuring wide specific input web platform would done selector could abstract kind locator specifier", "d": "3/2015"}, {"body": "pkozlowskiopensource one", "d": "3/2015"}, {"body": "use ready", "d": "3/2015"}, {"body": "give example api moving child elements would look like", "d": "3/2015"}, {"body": "say child elements moved simulate reprojection mean support projection tags components able receive injection element app services databinding within component work normally leaf", "d": "3/2015"}, {"body": "sounds like tbosch calling render directive think directives access platformspecific apis participate data binding di view hierarchy anything else lives application layer according new rendering architecture directives would live render layer api available type directive sufficient implement binding data native properties binding data web components alone would already enable svg canvas webgl implement animations implement overlays", "d": "3/2015"}, {"body": "type directive participate di lose ability make directive uses something like consumes builtin defined services yjbanov suggesting directive uses canvas would nt able define custom property bindings", "d": "3/2015"}, {"body": "use case might inform material directive called directive lets user load svg icon either directly url alias alias concerned icons configured provider referenced name angular two analog provider would creating service root level app component directive would need consume service look svg content name append content dom specific icon set directive could also determined binding", "d": "3/2015"}, {"body": "jelbourn render directives participate di still databind example would normal component participates di user still however internally would use render directive pass data eg way binds svg data custom data render directive", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "latest thinking output limited value converge output obviously pure source", "d": "3/2015"}, {"body": "rkirov true provided migration ts done referring current atscript situation depending timeframe ts migration tackling item might might make sense time extension name figured worth make people live easier today", "d": "3/2015"}, {"body": "naming convention makes sense since typescript stay angular rkirov", "d": "3/2015"}, {"body": "similar", "d": "3/2015"}, {"body": "close dupe", "d": "3/2015"}, {"body": "could happen executed", "d": "3/2015"}, {"body": "line executes upon module import", "d": "3/2015"}, {"body": "stack trace issue", "d": "3/2015"}, {"body": "wrong repo guess looking", "d": "3/2015"}, {"body": "yup sorry thanks pointing right direction", "d": "3/2015"}, {"body": "best way send pullrequests see", "d": "3/2015"}, {"body": "expect", "d": "3/2015"}, {"body": "well absolute path better would admit real issue", "d": "3/2015"}, {"body": "actually issue close", "d": "3/2015"}, {"body": "repo could please reopen", "d": "3/2015"}, {"body": "yes issue emulated mode reason done refactoring compilerview basically splitting half refactoring shadow dom emulation pushed render view decided wait done", "d": "3/2015"}, {"body": "thanks clarification live issue opened code merged", "d": "3/2015"}, {"body": "yes let leave open", "d": "3/2015"}, {"body": "hmm dgeni taking first preceding come problematic changed last instead use fix", "d": "3/2015"}, {"body": "easy", "d": "3/2015"}, {"body": "must way zonejs must first thing intercept calls requires better errordocumentation", "d": "3/2015"}, {"body": "right rkirov also need take account preparing onefilethathasthemall build", "d": "3/2015"}, {"body": "better error message must however sure module import right solution import guarantee zone runs angular fact might need run every js page includes systemjs pkozlowskiopensource systemjs commonjs bundle zonejs however consumable selfexecuting bundle prepended zonejs", "d": "3/2015"}, {"body": "see please also note intend switch typescript traceur shortly", "d": "3/2015"}, {"body": "try pending issues resolved", "d": "3/2015"}, {"body": "would cool validator could return promise", "d": "3/2015"}, {"body": "removed blocker", "d": "3/2015"}, {"body": "sure yet closing issue", "d": "3/2015"}, {"body": "hi mhevery instead closing possible label feature request far understand generally feature requests get closed two ways feature implemented team community behind project discussing feature decide implemented think would make sense thanks", "d": "3/2015"}, {"body": "retrieved prebuilt object element injectors need add service think added app injector open pr", "d": "3/2015"}, {"body": "think since tbosch yjbanov movedmoving shadow dom emulation render module one take look", "d": "3/2015"}, {"body": "oh fix asap", "d": "3/2015"}, {"body": "jelbourn", "d": "3/2015"}, {"body": "tell expect use case", "d": "3/2015"}, {"body": "updated docs w use interfaces switch typescript use abstract classes one superclass lot places code need introduce interfaces", "d": "3/2015"}, {"body": "added separate issue add missing interfaces", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "pensierinmusica thoughts", "d": "3/2015"}, {"body": "short answer yes", "d": "3/2015"}, {"body": "decided yet closing since issue question", "d": "3/2015"}, {"body": "mhevery shall keep open feature request instead", "d": "3/2015"}, {"body": "starting initiative support server sider rendering see design doc still work progress", "d": "3/2015"}, {"body": "issue", "d": "3/2015"}, {"body": "load zonejs angular occur still", "d": "3/2015"}, {"body": "wesleycho tried figure load zonejs using quickstart repo seems like pulls bunch dependencies along test zone code", "d": "3/2015"}, {"body": "sure fiddle correct seems like using zonejs triggering error", "d": "3/2015"}, {"body": "looks like correct", "d": "3/2015"}, {"body": "wrong repo one angular guess looking said nt think anyone able help based info provided enough context put together minimal reproduce scenario using plunker similar opening new issue", "d": "3/2015"}, {"body": "think good idea many scenarios spike top core forms module thinking separate module following reason core forms module compiled js dart want reduce boilerplate minimum may take advantage language features available ts dart", "d": "3/2015"}, {"body": "fyi might related though response yet issue either", "d": "3/2015"}, {"body": "filipbech really related see comment code work declare change event binding needs initialize empty string js toggled", "d": "3/2015"}, {"body": "agreed dublicate ill close issue", "d": "3/2015"}, {"body": "tests show otherwise sure running dev mode kinds assertions make code slow", "d": "3/2015"}, {"body": "sure know dev mode", "d": "3/2015"}, {"body": "looks like prod investigate", "d": "3/2015"}, {"body": "saw adding form suggestion similar suggested total agreement posted", "d": "3/2015"}, {"body": "needs design spec please", "d": "3/2015"}, {"body": "almost event shadowdom component body wo nt work without", "d": "3/2015"}, {"body": "every developer expects events bubble able delegate however bring question get ahold directive associated element event targeted perhaps intended comment", "d": "3/2015"}, {"body": "clarifying question proposing default functionality change bubble cases case nested elements template put another way change would top level template element still default bubble would stop component boundary", "d": "3/2015"}, {"body": "always bubble shadow dom spec event target changed whenever event crosses component boundary", "d": "3/2015"}, {"body": "great thanks clarifying", "d": "3/2015"}, {"body": "assigning jelbourn test native mode", "d": "3/2015"}, {"body": "mhevery tested native mode found button usecase actually works expected without marker filed track done still feel swapping default would expected behavior people used web development", "d": "3/2015"}, {"body": "decision return value event handler control whether happens pkozlowskiopensource", "d": "3/2015"}, {"body": "thanks rado let suggest tweak idea component uses directives want mock would need import test write repetitiously mockdirectives list since number things want mock probably small compared number want leave use map instead let also mention related problem whose solution may bit challenging better start thinking early look production directives list uses controller classes di keys angulardart selector strings di keys guessing uses controller classes di keys solve following problem forcing importing directive names local meaning thus avoiding global variable soup directives cause angulardart cause problems probably ca nt components different libraries mutually use would cause circular dependency even dart allowed build system might forces unit test depend entire transitive closure component dependencies even though may using perhaps nt care corner case seems significant think problem analogous happens guice try declare module bindings site consuming classes say fancy annotations instead using separate module problem consuming class nt declaring assumptions reconfigurable dependencies configured use di keys declare depends keys bound production config binding module unit test depend upon declare di keys bound solved simultaneously simply making local uses short selector strings map longer aliases mapping applies locally eg template use controller declare shorthand say aliasing param minor variant could use mean import libraryimportpath component selector since library import paths strings anyway lose ability locally alias unless came weird notation like guys like importing actual classes see feature instead restriction still solve together making di key object production controller class object production version dependedupon component library eg b akeydart library akey const akey const key adart library import akey component tempate injectedwith akey honestly much simpler even allows aliasing libraries use short selector alias different values use together anyway", "d": "3/2015"}, {"body": "rkirov mocking children components big design decision could link doc discuss rational evaluate alternatives", "d": "3/2015"}, {"body": "vicb mentions capability doc", "d": "3/2015"}, {"body": "early proto needs work wanted test would look like keep working coming days", "d": "3/2015"}, {"body": "trinarytree vicb proposed api solves issue concerning keeping old dependencies concerns go beyond testing component test would also importing real dependencies whether used annotation would require major rethinking di support stringbased approach suggesting maybe discuss separately testing btw dart support cyclical imports concern circumstances", "d": "3/2015"}, {"body": "sounds right", "d": "3/2015"}, {"body": "prior arts considered provide real world use cases believe real world use case provide ability test form business logic independent controller essence testing formschema isolated controller ideally new forms able fully test forms way control generated schema independent controller another use case prior arts demonstrate ability set element attributes probably want set element properties instead required minlenth maxlength pattern placeholder form schema", "d": "3/2015"}, {"body": "really nice reduce amount code required annotating model something would optional suggested saw someone else well reduce amount boilerplate code", "d": "3/2015"}, {"body": "danwahlin like similar attributes aspnet mvc model use attributes annotations typescript provide field metadata generating form still see valid use cases field metadata form schema would come seperate datasource property annotations example use case single model use multiple message form schemas depending state user user details form backed userdetails model containing name address phone etc initially new user use form schema named userdetailsnew allows user enter details user longer new state use schema userdetailsexisting schema first last name fields disabled user change name would allow us use model controller view would use separate form schema dynamically also use case able change schema fly following last use case generated form schemas country pattern phone number userschemaus declares pattern phone userschemagb declared pattern phone user us address phone number set user changes country gb controller replace form schema userschemagb player get validation error phone field", "d": "3/2015"}, {"body": "one common use case datadriven forms generating forms based json schema backend api developers love give frontend developers json schema tell model look like submitting makes lot sense use schema build form please take look jsoneditor great job generating forms json schema main challenges generating forms json schema json schema validation rules like forms generated json schema validation logic json schema supports arrays forms support mechanism adding new items array removing items sorting items array required items array complex schemas json schema property means model unlimited number keyvalue pairs json schema recursive base case means object base cases json schema supports learn makes json schema powerful time hard generate forms validators would love see angular forms module supports json schema box aligned project goals please consider making easy developers build forms json schema", "d": "3/2015"}, {"body": "agree json schema already large ecosystem serverside apis would great starting point nothing else create reusable component schemas via ref definitions keywords", "d": "3/2015"}, {"body": "mlaval saying seems work test let add one see", "d": "3/2015"}, {"body": "tests passing successfully vsavkin please clarify issue", "d": "3/2015"}, {"body": "mlaval maybe open pr tests got future", "d": "3/2015"}, {"body": "done", "d": "3/2015"}, {"body": "dropped angulardart went reason ca nt", "d": "3/2015"}, {"body": "really actually use ngoptions even angular always found confusing created issue talk", "d": "3/2015"}, {"body": "removed blocker", "d": "3/2015"}, {"body": "depending context described use event handlers binding expressions example perfectly fine would error makes perfect sense since binding expressions need return value one used binding would nt clear returned value taken account first fast hand nt care event handlers return values side effects hope clarifies believe docs could improved prs welcomed", "d": "3/2015"}, {"body": "see thank", "d": "3/2015"}, {"body": "also simplify dart installation instruction tell people install dart via brew mac point mac users path recommended option brew installed one get dart going environmental variable setup necessary", "d": "3/2015"}, {"body": "blocked js tests testunitjsci use dartium cli travis rather chrome someone angular team confirm use dartium js tests mistake please respond fix addressing issue mostly done source problem currently makes use dartium hence invokes dart environment variable setup exit error dart env", "d": "3/2015"}, {"body": "first cut workinprogress feedback welcome got question problem section points people gitter angualar mailing list nt actively monitor right issue raised decision made gladly update docs new groups created decided similar topic someone might want give though stackoverflow tags want standardize angular fyi far coding rules section mostly obsolete first two bullets say write tests exercise code changes document public apis seems generally applicable third bullet js style guide wrap probably ok typescript style guide comes find obsolete glad update maybe referring obsolete folks seem following nonetheless maybe habit section cut edited needed signing cla section references steps signcla launch angularjscontributingmd angulardartcontributingmd setup seemed acceptable note second step submitting pull request asks please sign contributor license agreement cla forward link signing cla section looks like file compied angular repo superficial changes carefully edited best knowledge decisional powers eg core team decide want new google group", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "pkozlowskiopensource think go code path since already straight forward", "d": "3/2015"}, {"body": "pkozlowskiopensource think go code path since already straight forward", "d": "3/2015"}, {"body": "yeah indeed issue traceur fixed fixed temporarily perhaps dirtiest hack ever done ever", "d": "3/2015"}, {"body": "issue also happens different directives html suggestion loading suggestions list template directly inside another one seems trigger exception child view detached equivalent directly inside another tag", "d": "3/2015"}, {"body": "see", "d": "3/2015"}, {"body": "change release process tag git repo cut release", "d": "3/2015"}, {"body": "started using tags referring", "d": "3/2015"}, {"body": "chalin understand correctly nm variable local input field need handler propagates changes ngmodel us binding manually played data binding help community need another example", "d": "3/2015"}, {"body": "sekibomazic far know local template aware achieve equivalent result using model field since templatelocal variables new angular mainly wondering expected behavior angular case mention", "d": "3/2015"}, {"body": "chalin seem right local template hmm also wondering needed propagate changes within template", "d": "3/2015"}, {"body": "chalin sekibomazic think problem change detection fired async actions happened bindings declared user example binding click declare empty input event binding working fine js hello nmvalue nothing nt know whether feature bug feature think must documented well", "d": "3/2015"}, {"body": "nt know whether feature bug feature think must documented well", "d": "3/2015"}, {"body": "works intended must listener trigger change detection document", "d": "3/2015"}, {"body": "thanks confirming mhevery", "d": "3/2015"}, {"body": "ref", "d": "3/2015"}, {"body": "used kind support core discussion mhevery tbosch vsavkin decided drop functionality support html worked support decided drop support rationale would need insert tag emulated components closest enclosing shadow root vs emulated mode exclusive would need able insert arbitrary dom ref support might also able insert tag would go shadow dom native amp head emulated think could alternative", "d": "3/2015"}, {"body": "vicb nt quite follow issue svg content added needs affected style rules live lightdom outside component example html class changes icon red appending elements inside icon shadow dom would nt really help", "d": "3/2015"}, {"body": "shadow dom decoupled light dom also styles want use styles light dom either use shadow pseudo selector deep combiner light dom css", "d": "3/2015"}, {"body": "jelbourn trying understand really needed hostcontext selector might able help use case flexible emulated strategy though", "d": "3/2015"}, {"body": "vicb benefit using shadow dom encapsulation styles events queries etc case using shadow dom would makes things harder user without adding benefits many cases shadow dom good tool solve problem nt appropriate use case", "d": "3/2015"}, {"body": "reason made strategy global perf emulated mode exclusive insert styles compile time modes mixed check styles inserted closest shadow root insert otherwise time emulated component rendered", "d": "3/2015"}, {"body": "usecase issue would probably addressed decoratorlike directive shadow dom instead component append arbitrary content resolution", "d": "3/2015"}, {"body": "closing issue thought things like would work would bad", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "directivethings directivestuff jk different types injectables guess main reason would good idea something outside consider injectables would able injected point probably makes sense would vote", "d": "3/2015"}, {"body": "plenty objects allow inject need explicitly listed annotation eventemitters propertysetters parent directives broad liking", "d": "3/2015"}, {"body": "prefer services injectables mostly reasons rado gave also services terminology part angular describes well services really liked change componentservices services though", "d": "3/2015"}, {"body": "knee jerk reaction vote feels little much like pushing framework terminology onto developer instead way around sufficiently ambiguous see leading really big source confusion lot people", "d": "3/2015"}, {"body": "think like lot clear looking code nt think would read documentation know injectables property agree might broad unless plans limit someone inject component think works", "d": "3/2015"}, {"body": "line domain dependency inversion principle dependency injection injecting dependencies class service directive etc think term going widely recognized otherwise see conversation teaching people angular dev injectables dependencies get injected like services stuff", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "like dependencies well", "d": "3/2015"}, {"body": "dependencies injectables dependencies accepted", "d": "3/2015"}, {"body": "might crazy idea removing creating new annotation nt already one way clean api injecting class", "d": "3/2015"}, {"body": "xesued maybe", "d": "3/2015"}, {"body": "oooooh like well want please smiley", "d": "3/2015"}, {"body": "xesued sekibomazic semantic existing annotation means inject something previously declared injector one parents injectables means configure child injector new items injected directive children sekibomazic proposing already exists looking construct different semantic", "d": "3/2015"}, {"body": "unaware existing current configures existing di container injector items injected di container created makes lot sense property still think option like suggested would nice maybe named might discussion somewhere else case naming", "d": "3/2015"}, {"body": "yes directive kind child injector see yes configure injector express injected directive", "d": "3/2015"}, {"body": "hmm bit different imagined working means necessarily set dependencies directive way configuring things could injected component children accurate case take back vote dependencies sure would make explicit though tue mar pm pawel kozlowski notifications githubcom wrote yes directive kind child injector see yes services configure injector express injected directive reply email directly view github", "d": "3/2015"}, {"body": "nt hear reason rename nt like remainder configures injector gets injected constructor component", "d": "3/2015"}, {"body": "ok reading comments extract following proposals think proposal coming misunderstanding currently think finally one discarded proposal issue criticism hear one rkirov raises points broad things injectable nt explicitly listed ones coming element injector keep nt seen particular arguments keeping given term overloaded use imo summary looks like best proposal although issues throwing ideas boy long proposals objections shell go", "d": "3/2015"}, {"body": "let rename pkozlowskiopensource make", "d": "3/2015"}, {"body": "ok", "d": "3/2015"}, {"body": "changed indexjs gulptraceur use errobject proper function join attached know ugly hack wanted know built indexjs get build files course many warnings errsobject empty smile shell error gulptraceur errsobject empty error gulptraceur errsobject empty error gulptraceur errsobject empty error gulptraceur errsobject empty error gulptraceur errsobject empty error gulptraceur errsobject empty error gulptraceur errsobject empty finished finished buildtranspilejsprod finished buildjsprod finished finished buildtranspilejsdev finished buildjsdev starting buildjs finished buildjs \u03bcs starting build finished build \u03bcs", "d": "3/2015"}, {"body": "repo please use", "d": "3/2015"}, {"body": "error happening type set", "d": "3/2015"}, {"body": "yeh see latest master well looking", "d": "3/2015"}, {"body": "believe due c list want component propagate state changes outside world custom event ex onvaluechange", "d": "3/2015"}, {"body": "thx information already mechanism angular fire custom event like valuechanged polymer seem call something like thisfire valuechanged found something like", "d": "3/2015"}, {"body": "oh digged around code issues list found one accompish using eventemitter import component decorator template import eventemitter component template export class bindsample constructor eventemitter changed changed function thischanged changed", "d": "3/2015"}, {"body": "due use benchpress test code package analyzer problems parsing prior solution bump version however package angular package di place constraints package analyzer need change first put together prs meantime errors safely ignored", "d": "3/2015"}, {"body": "waiting prs pull changes pub errors go away angulardart x angulardi", "d": "3/2015"}, {"body": "vicb sorry chat dgeni softskills working less harsh turns problem bug jsdoc type parser jsdoc dgeni package uses extract type information tags case got confused line saw word functionwithparamtokens nt realise real people sometimes give types names start word function hence error message look fixing also finding way express errors clearly easier debug future", "d": "3/2015"}, {"body": "great thanks quick reply could find information expected doc format thanks", "d": "3/2015"}, {"body": "turns actually bug catharsis jsdoc parser dgenipackagesjsdoc using upgrading latest version seems solve fix push new version dgenipackages using new catharsis better errors", "d": "3/2015"}, {"body": "since unable run without errors clean checkout fsevents install userschalingitangularnodemodulesdgenipackagesnodemodulesnunjucksnodemoduleschokidarnodemodulesfsevents nodegyp rebuild childprocess customfds option deprecated use stdio instead cxx target releaseobjtargetfsefseventso file included error member named new string return nanerror exception error errmsg tried clean get errors", "d": "3/2015"}, {"body": "actually reverted nt help idea might problem", "d": "3/2015"}, {"body": "errors appear run npm install nt prevent installation completing successfully", "d": "3/2015"}, {"body": "thanks confirming get errors could nt tell sure completed successfully suggest ignore errors", "d": "3/2015"}, {"body": "problem version nunjucks dgenipackages using appears date version fsevents think might benefit upgrading nunjucks dgenipackages version", "d": "3/2015"}, {"body": "pushed new version dgenipackages uses newer version nunjucks clean install angular longer errors", "d": "3/2015"}, {"body": "great thanks pete looking forward trying also pushing update", "d": "3/2015"}, {"body": "automatically update since angular dependent upon compatible version", "d": "3/2015"}, {"body": "confirm fresh ran smoothly thanks", "d": "3/2015"}, {"body": "magic march patrice chalin notifications githubcom wrote confirm fresh npm install ran smoothly thanks reply email directly view github", "d": "3/2015"}, {"body": "petebacondarwin thanks", "d": "3/2015"}, {"body": "going close found discrepancy jspm dependencies installed github pay attention bowerjson dependencies installed npm would nice could solved adding dependencies packagejson nt think required angular project sorry trouble", "d": "3/2015"}, {"body": "mhevery vsavkin another use case something like js component selector mdbutton href bind disabled disabled lifecycle onchange template url buttonhtml export class mdanchor tabindexsetter function whether component disabled disabled boolean constructor propertysetter tabindex tabindexsetter function thistabindexsetter tabindexsetter consolelog thisdisabled invoked change detected onchange disabled anchor tab flow thistabindexsetter thisdisabled want set host element based whether anchor disabled stands static template way ever figuring component disabled resolving would give way would boilerplate would check static value constructor bound value", "d": "3/2015"}, {"body": "would like claim example example notification would good access implementation enough information becomes difficult determine whether would suffice however mentioned example one plan refactor become available ideas might", "d": "3/2015"}, {"body": "already works inprogress presently", "d": "3/2015"}, {"body": "naomiblack implementation children notify child components ready", "d": "3/2015"}, {"body": "dylanb separate issue see", "d": "3/2015"}, {"body": "jelbourn know thought issue parent getting notified children ready part standard implementation fine close issue thats asking otherwise question whether issue closed", "d": "3/2015"}, {"body": "oh commit nt get associated issue new lifecycle event added called fired data binding children completed", "d": "3/2015"}, {"body": "jelbourn excellent see new code", "d": "3/2015"}, {"body": "previously filed biggest unknown position time want position relative element special handling around preventing overlay offscreen api also nt best ideally component inside overlay would responsible closing makes sense encapsulate logic would also need support animation potentially draganddrop", "d": "3/2015"}, {"body": "jelbourn cases want external service close dialog eg pressing esc text box close autocomplete popup component definitely access api though many usecases need considered popups top popups multiple persistent popups relative absolute positioning", "d": "3/2015"}, {"body": "jbdeboer definitely examples include multiple panelcreating components say like etc enforcing one panel open time api like able inject something like component use close return value invoking site component instantiated outside dialog context would null", "d": "3/2015"}, {"body": "also accessibility considerations including trapping focusscreen reader interaction modal dialog exact aria attributes required depend component eg toast different alertdialog terms purpose interaction", "d": "3/2015"}, {"body": "thinking wonder belongs angular proper instead might useful simple component injection system sort like different ui kits implement overlay style systems worry overlay service might generic enough ionic example would code around much like ngrouter vs uirouter", "d": "3/2015"}, {"body": "implementation traceur implementation", "d": "3/2015"}, {"body": "note already possible traceur version using need upgrade traceur solve", "d": "3/2015"}, {"body": "ahhh ran trying get bundling working maybe note correct syntax nt know still applies moving ts might back fix anyway bundle meantime", "d": "3/2015"}, {"body": "join gitterangular get questions answered realtime like slack github repos", "d": "3/2015"}, {"body": "thanks gitter imho replacement discussion list misko opinion cc mhevery", "d": "3/2015"}, {"body": "github discussion list", "d": "3/2015"}, {"body": "naomiblack sounds like another google group think", "d": "3/2015"}, {"body": "dup rkirov", "d": "3/2015"}, {"body": "yes closing dup pending pr waiting rendering rewrite land", "d": "3/2015"}, {"body": "repo probably looking", "d": "3/2015"}, {"body": "actually thinking ahead handle transclusion differant way nt look differant code reason say said ngrepeat see title", "d": "3/2015"}, {"body": "sorry transclude ngrepeat ngclass make think referring btw become", "d": "3/2015"}, {"body": "similar use new pipeline api update bindings example ca nt define components like easier look html user username component selector useritem bind value value async control bindings template directives class useritem value object constructor component selector userlist template directives useritem class userlist value object constructor thisarrayofasyncpromises promisewrapper name patrickjs delay", "d": "3/2015"}, {"body": "thanks take look yes bit feat able remember terms version", "d": "3/2015"}, {"body": "jrgleason make version async like keep mind api nt finalized yet may change", "d": "3/2015"}, {"body": "sure give branch info might least help get grasp things working stuff would nt push forward till august trying get jump start compare need", "d": "3/2015"}, {"body": "jrgleason nt really recommend production helps play around nt want hold state filter taking advantage interval state promise example repo start playing around", "d": "3/2015"}, {"body": "check talk falcorjs basically pipe resolve promise write logic html username falcor case observables observables something like html usermodelgetvalue name async", "d": "3/2015"}, {"body": "keep mind nt moment lives branch vsavkin finalized", "d": "3/2015"}, {"body": "seen talk talk observables coming looking intostarted using observables happy announcement would full support however observable promise promises grasped mainstream developer feel support template stuff comes wrapped promise needs displayed without processing thing might belong template sidenode also explains beginners handle promise", "d": "3/2015"}, {"body": "sanderelias path declared bad idea might due impl details promises handled reducing flexibility service cases wanted get promise instance expression arguments impossible handle promise rejection errors magical argument largely depending personal taste suppose", "d": "3/2015"}, {"body": "pkozlowskiopensource know promises handled background visible declared template magic anymore takes care magical part rejections thought let write full form bit like mhevery foreach directive hmm hard type ngshow may seem strange converts negates js value boolean entirely sure correct pseudo code essential promise directive decorators one decorates fulfilled handles reject feed trough process might end like looks like coherent utterly amagical interface miss something obvious know tend miss elephants rooms", "d": "3/2015"}, {"body": "something declarative something like define overwrites prototype create container container needs know types annotations annotate container overwrite directive even sure possible even something people want since even code pretty simple reason works perhaps way define suite directives least best practice import component template directiveprefixer import button materialdirectivessuite prefix helper suite angular import ngmaterial prefix materialdirectivessuite component template directives prefix ng ngmaterial built helper directiveprefixer export class cmp", "d": "3/2015"}, {"body": "examples nt work practice types objects need created satisfy dart js prefix idea work selectors example exactly prefixed going replacing selector outright", "d": "3/2015"}, {"body": "oh right still thinking selectors element worries probably learn bit dart figure something works totally fine", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "mhevery version tested think checks already see tests different condition different error looking", "d": "3/2015"}, {"body": "must old version closing", "d": "3/2015"}, {"body": "tell use case planning information", "d": "3/2015"}, {"body": "used programmatically check media queries order use different layout different behavior based window size material library also ability set callback result query changes layout component change used gridlist component presently", "d": "3/2015"}, {"body": "hmm uses", "d": "3/2015"}, {"body": "pkozlowskiopensource designed forof loops nt exist javascript maybe would make sense adopt", "d": "3/2015"}, {"body": "tylereich sure comments note self take historical reasons account ease migration", "d": "3/2015"}, {"body": "personally love closer language people actually writing", "d": "3/2015"}, {"body": "could go either way point us prior art showing foreachof common", "d": "3/2015"}, {"body": "also thinking way would also mean switching implies providing functor iterable objects aka use map filter etc js introduced include arrays objects limited since provide functors example angular pipes filters item class cmp constructor thisitems new websocket wss urlcomrealtime understanding pipeline correctly problem interface angular pipes need know type object always creating adapter pipe adapter rather assuming functor rather assuming interface always may actually case nt much fan pipe observables integration", "d": "3/2015"}, {"body": "sounds like choices nothing switch switch selector supports anyone want vote", "d": "3/2015"}, {"body": "like idea using unfortunately html uses attribute elements might great thing use prefer supporting though", "d": "3/2015"}, {"body": "providing keeping foreach alpha since js community trying convert everyone use sadly perf problems atm js would inline original principles angular using future jshtml today may may need work rework patterns codebase minimal amount work leaving everything way adding experiments decision reached attribute may taken already accounts using template prevent conflicts", "d": "3/2015"}, {"body": "aware workarounds expressed pretty loud clear workarounds bad ideas wider api surface good reason higher learning curve new users cases test maintain real benefit etc lets turn though said piece", "d": "3/2015"}, {"body": "haha nt trying bikeshed see point best names case point username could nt say qualified suggest one replace keeping difference", "d": "3/2015"}, {"body": "far know pullbased mechanism given javascript support async sync execution blocking using aggregate event stream like websocket make sense", "d": "3/2015"}, {"body": "would nice", "d": "3/2015"}, {"body": "argument trying provide concepts trying pushed future javascript framework today jhusain better suited articulate reason behind example using may also wrong assessment sure missing keyword would inline pipe solution also begs question directive vs pipe html await item class cmp constructor thisitems new websocket wss urlcomrealtime", "d": "3/2015"}, {"body": "would love see something like share caitp concern attribute already defined html standard maybe prefix removes also believe place alongside possibly follows reserved keyword javascript meaning flex angular purposes prototype method set map array angular might able internally allow make transition easier", "d": "3/2015"}, {"body": "sounds like people voting existing property issue", "d": "3/2015"}, {"body": "mhevery merit expanding syntax replace ca nt recall internal variable anymore gone way assign index variable well", "d": "3/2015"}, {"body": "nicely aligning new syntax clearly stating demands iterator nt need take special care objects however brings new question destructuring usecase objectentries mymodel substitute something controller produces iterator objectmodel", "d": "3/2015"}, {"body": "order keep helper make sense keep want use old style everything may come maybe even way users define helpers create might asking much deconstructing good point since introduced lot sugar template syntax nt really support sidenote returns array deconstructing type example link object iterator unless use look like", "d": "3/2015"}, {"body": "replacement move existing features settle basics", "d": "3/2015"}, {"body": "proposal fallow microsyntax expansion rules see", "d": "3/2015"}, {"body": "mhevery reread microsyntax see prevent destructuring usecase supporting would make microsyntax line quite nicely", "d": "3/2015"}, {"body": "yeah nt work haha suggesting could probably add deconstructing probably much template microsyntax might good idea consider wrong place", "d": "3/2015"}, {"body": "double checking microsyntax order exporting internal variables would use mean something like nt far fetched deconstructing limited microsyntax detect deconstructing limited element conflicting bind unless ask bind check proceeding assuming probably nt want check elements would mean order support feature deconstructing would happen export", "d": "3/2015"}, {"body": "sure understand goal think iterating maps bad idea nt want support instead pipe convent map iterable nt want special variables instead", "d": "3/2015"}, {"body": "goal trying bring imperative features declarative template world probably defeating purpose writing declaratively template js converts object iterable time invoke get preserve key providing key value object providing pipe assuming create pipe using something like internally html class cmp constructor thisobjectlists mykey myvalue converts via entries thisobjectlists mykey myvalue symboliterator key val key val declarative even deconstructing point deconstructing imperative actually nt fit templates means nt need support template syntax", "d": "3/2015"}, {"body": "item iterable syntax alignment good idea", "d": "3/2015"}, {"body": "writing think confusing loop asynchronous generators implement iterable interface least become asynchronous generator decide", "d": "3/2015"}, {"body": "trying push js towards unified method dealing async iterable websocket ideal solution since example code figured might well get wrong", "d": "3/2015"}, {"body": "problem nt opposed behaves differently", "d": "3/2015"}, {"body": "oh right totally overlooked subtle detail wrong sure support viewport unless allowed", "d": "3/2015"}, {"body": "since voting big", "d": "3/2015"}, {"body": "also", "d": "3/2015"}, {"body": "angular learning question prefix solving problem specific naming collision mentioned saw ngconf reading still nt found reasoning prefixing came googling foreach nt bringing explanations clarified update label", "d": "3/2015"}, {"body": "krimple nope avoid naming collisions sugar top full form see", "d": "3/2015"}, {"body": "announced typescript released switch yes drop traceur still use rttsassert", "d": "3/2015"}, {"body": "mhevery traceur dropped tool handling typescript dart transpiling driving continued development functionality asking would like contribute thanks", "d": "3/2015"}, {"body": "mhevery rttsassert part angular system loader use angular team remove systemjs", "d": "3/2015"}, {"body": "alimd deleted comment violates", "d": "3/2015"}, {"body": "vsavkin mhevery make sense", "d": "3/2015"}, {"body": "makes sense", "d": "3/2015"}, {"body": "yjbanov vicb rkirov comment please iterate", "d": "3/2015"}, {"body": "conceptually like idea much need spec things component injector contain extra field instance stored accessible injection shadowdom note injectors dynamic bindings would need temporary injector build instance stored back injector dom reference private component shadow dom example syntaxwise would prefer introduce new directive type viewport decorator one inject dynamiccomponent component one inject privatecomponent current proposal easy new user forget add template decoration prefer use throw nice descriptive error versus assuming wanted dynamiccomponent likely case", "d": "3/2015"}, {"body": "hello created insertcomponent directive easily insert dynamic components template time changes component referenced compiled corresponding view instantiated inserted hydrated given properties assigned interested look code component see used currently limited way properties set could worked want play git clone b insertcomponent npm install amp amp gulp play ability dynamically choose component display powerful feature could used many use cases router example autocomplete component could passed property component use display suggestion template autocomplete would use insertcomponent directive suggestion think directive insertcomponent integrated think", "d": "3/2015"}, {"body": "implemented", "d": "3/2015"}, {"body": "dylanb component template shadow dom div light dom templates directives apply shadow dom code work way would expect work way work shadow dom might easier reason think complete app directives must declared app template makes sense", "d": "3/2015"}, {"body": "make sure understand want set dom element within component could instead want syntactic sugar transform create code additional consideration property one known dart html go pain faster use available convenience methods correct", "d": "3/2015"}, {"body": "kegluneq correct goal could executed element proxy run ui thread mhevery considering setter look like dart", "d": "3/2015"}, {"body": "think nt think need property name matching", "d": "3/2015"}, {"body": "mhevery correct code generated instead wrote framework automagically transform passed dart js", "d": "3/2015"}, {"body": "actually pb bind properties deps directive closing", "d": "3/2015"}, {"body": "understand correctly avoid via moving di app level import bootstrap import bind import angularfire firebasearray firebaseangularfire import app componentsappapp export function main return bootstrap tabs bind firebase tovalue new firebase components need use constructor token understanding correctly think avoid", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "repo github easier env since api changes lot", "d": "3/2015"}, {"body": "closing david east proved wrong", "d": "3/2015"}, {"body": "put github soon", "d": "3/2015"}, {"body": "yeah got working backticks", "d": "3/2015"}, {"body": "appears use elementreplacewith apologies closing issue perhaps nt best place post", "d": "3/2015"}, {"body": "hey patrick working getting code repo soon", "d": "3/2015"}, {"body": "looks like specification shadow dom actually handles nicely guys stick spec work beautifully loving everything see angular far keep great work", "d": "3/2015"}, {"body": "lot incorrect uses super tree especially transpiler basically never valid use base class totally safe remove base classes", "d": "3/2015"}, {"body": "thanks maybe original atscript files directly transpiled instead nt really want handedit autogenerated files get", "d": "3/2015"}, {"body": "source files wrong", "d": "3/2015"}, {"body": "last time counted less instances error project week ago knows anyone added news ones anyways cleaned next week hopefully", "d": "3/2015"}, {"body": "ah right see atscript ok someone cleaning nt make pr", "d": "3/2015"}, {"body": "one open blocked fixes traceur need ship first", "d": "3/2015"}, {"body": "great thank follow", "d": "3/2015"}, {"body": "spending time thinking method work longer safe use file file need generate setters single file nt spent much time thinking since passed untyped perhaps would easiest generate gathers setters files registers appropriate setter", "d": "3/2015"}, {"body": "looks somebody fix", "d": "3/2015"}, {"body": "jbdeboer ca nt really write browser see lowercasing html case sensitive possible soon fixed said binding property directly would mean overriding css classes set example attribute going class binding described short usecase covered soon fixed", "d": "3/2015"}, {"body": "ok possible bind classname nt think binding classlist work mutable structure problem binding though override class names set using attribute something aware careful mhevery shell come back idea morelike behaviour people could write could evaluate object sure supporting strings arrays want", "d": "3/2015"}, {"body": "pkozlowskiopensource yes bale work make happen", "d": "3/2015"}, {"body": "update also support per mhevery", "d": "3/2015"}, {"body": "one next list", "d": "3/2015"}, {"body": "provide concrete use case current thinking provide special directive would run ui thread would full access dom components need dom access seen", "d": "3/2015"}, {"body": "seeing filed issue seen looking provided list usecases offline two tackle setting attributes component element actual element shadow root integrating component able invoke external renderer fill shadow root", "d": "3/2015"}, {"body": "also way us configure templateresolver urlresolver systemjs mapspathsbaseurl want way explicitly configure independently module system", "d": "3/2015"}, {"body": "background support relative paths makes component reusable need aware urls also easier handle serverside compilation compiler works file paths rather urls think yes resolve like anchor tag would resolve path currentdomain absolute path probably best thing nobody would expect absolute url resolve currenturl absolute path otoh application served would prefix urls need thinking discussion selecting solution", "d": "3/2015"}, {"body": "planned upcoming milestone places use angular change urls support angular right", "d": "3/2015"}, {"body": "matanlurey links code docs related", "d": "3/2015"}, {"body": "best example give template cache generatortransformer works", "d": "3/2015"}, {"body": "added directive named naively transpile dart barfs keyword added library names would better keep list forbidden library names append", "d": "3/2015"}, {"body": "rkirov sounds great could ponder changing name library", "d": "3/2015"}, {"body": "pkozlowskiopensource prioritize close milestone thanks advance", "d": "3/2015"}, {"body": "mhevery sure submit pr tomorrow", "d": "3/2015"}, {"body": "mhevery rkirov moment changing compiler wondering want see dashcased cammelcased property names compiler pipeline words either normalise property name either step pretty early next steps need aware mapping ex selector matching would small simple change want additional mappings future ex stripping prefixes like might want normalized property names inside compiler thoughts dealing compiler pipeline original property names vs normalized names", "d": "3/2015"}, {"body": "well sounds nice able safely assume always working camelcase check dashcase camelcase anywhere normalizing asap nt really make sense convert dashcase camelcase back dashcase later certain use cases think best approach leave property names dashcase long still needed selectorsmatchingetc normalize camelcase tue mar pawel kozlowski notifications githubcom wrote mhevery rkirov moment changing compiler wondering want see dashcased cammelcased property names compiler pipeline words either normalise property name either propertybindingparser step pretty early next steps need aware mapping ex directiveparser selector matching elementbinderbuilder would small simple change want additional mappings future ex stripping data prefixes like might want normalized property names inside compiler thoughts dealing compiler pipeline original property names vs normalized names reply email directly view github", "d": "3/2015"}, {"body": "think convert camel case soon read sounds like assume everything camelcase apply transform reading annotation", "d": "3/2015"}, {"body": "mhevery spending time kneedeep compiler code need discuss design rules lowercased becomes problematic want camelcase property attribute names early access camelcased version thing give cssselector let take example steps would gt readonlyreadonly sudden directives directive bindings might start matching attribute intention match see ways moving forward make casesensitive convert back forth camel dash case ugly stick initial proposal personally think reasonable question needs caseinsensitive", "d": "3/2015"}, {"body": "agree configurable work better explain concerns trust angular solely controls dom app ca nt break dom safe reuse", "d": "3/2015"}, {"body": "course even workaround always trying use native shadow dom unimplemented another sidebug either work around lack shadow else use polymerplatform similar polyfill older browsers demos", "d": "3/2015"}, {"body": "supporting shadow dom problematic point correctly implemented anywhere makes impossible support browsers want best case scenario would deferring future version", "d": "3/2015"}, {"body": "hi tried play problem think failing creating symlinks check os later example githubangulartoolsbuildlinknodemodulesjs trycatch statement users get info starting buildlinknodemodulesjscjs creating link distjscjsnodemodulesbenchmarks benchmarks create symlink linkdir distjscjsnodemodulesbenchmarks sourcedir benchmarks gulpdebug output error eperm operation permitted githubangulardistjscjsnodemodulesbenchmarks", "d": "3/2015"}, {"body": "build problems also error different win gulpfilejs pacific standard time c progsjavascriptangularjssrcangular gulp buildjsdev dart sdk available dart tasks skipped assertionerror path must string modulerequire require requirefn c progsjavascriptangularjssrcangularnodemodulesgulplo objectdefinepropertyget c progsjavascriptangularjssrcangularnode object c progsjavascriptangularjssrcangulargulpfilejs modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire line src nodemoduleszonejslongstacktracezonejs mimetype textjavascript copy true looks like string error fri thought might due files nt become nodemodules expected happen amp waited alas difference anyone ideas", "d": "3/2015"}, {"body": "buberdds similar problem windows solved running command prompt administrator launching requires elevated privileges windows platform would agree would nice trap error notify windows users run administrator privileges jbdeboer errors similar ones seeing windows suspect one gulp tasks failed error might able research error buberdds one task fails looks like rest gulp tasks pipeline begin fail pattern posted well instead system halting since looks like unixlike system could try", "d": "3/2015"}, {"body": "think error dart formatter using dart dev able solve", "d": "3/2015"}, {"body": "buberdds yes sorry use linux mac dev environment nt know whether windows broken jbdeboer get error points something like wrong snapshot clean global pub cache ie background using format dart code need install globally however update dart pub cache might outdated get weird error", "d": "3/2015"}, {"body": "tbosch fixed underlying issue environment point issue error gulp gives unhelpful good error message would tell build failed also failed might fix issue", "d": "3/2015"}, {"body": "totally agree would add clear documentation arguments public method takes obviously atscript handling types think documentation well mon mar james deboer notifications githubcom wrote angular project write documentation spec implement throughout codebase would propose minimum exported classes documentation comment describing class public methods exported classes also documentation comment reply email directly view github", "d": "3/2015"}, {"body": "ladyborg understanding types comments eg something like dartdoc", "d": "3/2015"}, {"body": "working progress seen currently ongoing moving later milestone", "d": "3/2015"}, {"body": "bulk work needed scope though mar mi\u0161ko hevery notifications githubcom wrote working progress seen currently ongoing moving later milestone reply email directly view github", "d": "3/2015"}, {"body": "actually guess someone went afaict", "d": "3/2015"}, {"body": "wrong guess nt completely dealt", "d": "3/2015"}, {"body": "caitp current version traceur enforces super calls must present derived class amp first statement strict guess issue closed", "d": "3/2015"}, {"body": "ca nt plenty broken code tree see", "d": "3/2015"}, {"body": "landing fix blocked shipping still working additional fixes needed upgrade", "d": "3/2015"}, {"body": "right check currently active true false transpiler enforce class extends class", "d": "3/2015"}, {"body": "recent changes dom facade longer relevant original issue using annotations dart still exists migration typescript nt think makes much sense keep issue open rkirov recall properly conversation ngconf planning open separate issue dart transpiler moved separate repo anyway nt see point keeping issue open current form closing", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "optional asi seems feasible using semicolons statements make sense problem return could solved using expression dangerous returns want example via traceur javascript function swag return asi asi function swag return asi", "d": "3/2015"}, {"body": "pascalprecht debugged code could nt reproduce bug looked template found closing element ist wrong missing took time realize hey learned directive", "d": "3/2015"}, {"body": "sekibomazic sorry nt time look stuff yet looks like nailed thank much", "d": "3/2015"}, {"body": "seems like foreach works expected", "d": "3/2015"}, {"body": "vicb right thought issue already closed hey would mind taking look latest snapshot code compiles get error runtime due annotations dunno", "d": "3/2015"}, {"body": "please promote possible", "d": "3/2015"}, {"body": "reasons making default behavior similar angular", "d": "3/2015"}, {"body": "expressive hints reader may lazy loaded may example would say probably async loaded user must", "d": "3/2015"}, {"body": "feels kind weird surprising language extensions within binding expression syntax might also need thinking nt see useful angular defaults gracefully handling null dereferencing expression developer nt care whether something loaded lazy times people care something needs shown place pending data still handled", "d": "3/2015"}, {"body": "yjbanov vsavkin please comment convinced either way", "d": "3/2015"}, {"body": "yeh might used angular ways things much find forgiving evaluation ng expressions quite handy sure like idea forced mark optional parts expressions things obvious laborious well", "d": "3/2015"}, {"body": "think explicitness welcome also actually feel forgiving nature angular bindings useful guess question elvis operator added binding still forgiving accessing prop cause guessing handling might add overhead", "d": "3/2015"}, {"body": "favor safe navigation operator aka elvis operator exists c swift groovy others likely added dart nt think going confusion around also allow us retain js dart semantics expressions without operator finally result smaller efficient change detector code expressions become change detector edit updated post correct references prior art", "d": "3/2015"}, {"body": "yjbanov different nullcoalesce operator though nullcoalesce operator c swift works like already accomplished javascript operator question nullsafe dereference operator would work like righthand expression would evaulate null null instead throwing error searching groovy language found supports operator case scenario explicitly using nullsafe dereference would advantageous making dereferences nullsafe default", "d": "3/2015"}, {"body": "bad meant safe navigation operator aka elvis edit original post point still stands", "d": "3/2015"}, {"body": "advantages operator syntactic extension semantic deviation main language js dart especially dart getting operator future also consistent language results efficient change detector code code size speed serves early warning system developers know handling missing data immediately tells reader template code missing data possible realize disadvantages though different angularjsdart existing developers need adjust requires one extra character per property access believe advantages outweigh disadvantages think include", "d": "3/2015"}, {"body": "see additional disadvantages operator standard javascript would confusing javascript developers would confused saw template already introducing lot new syntax constructs adding increases mental cost getting started deviates template systems handle nulls polymer handlebars also would predict majority developers would want nullsafe behavior default vs throwing error perhaps could kind applicationlevel configuration", "d": "3/2015"}, {"body": "tend side jelbourn angular excellent job making right thing time using felt natural enjoyable start feel like introducing makes framework right thing times makes internal implementation easier better expense developer ergonomics totally agree nullsafe behaviour default creates small sharp edge people might got hurt time time things failing silently though", "d": "3/2015"}, {"body": "jelbourn three points along lines different people used adjust see big problem pretty easy imo get used typing tiny portion template code anyway also saying developers would want nullsafe behavior default thing developers would want nullsafe two ways dereference things neither default discourage writing nullsafe expressions explicit syntax help readers code help tools pkozlowskiopensource hurting developer ergonomics think improves explicit expressive dev mode angular could point exact location expression caused typeerrornosuchmethoderror easy either change deal missing data", "d": "3/2015"}, {"body": "hurting developer ergonomics need think parts optional need type characters proper places coming angular world see unnecessary burden compared listed benefits maybe spent much time writing code objective", "d": "3/2015"}, {"body": "basically either hypothetical performance improvements simplifed code making upgrade path easier would change detector code fastsmall every field expression optional would better easier upgrade path variation evidence early warnings developers get actually useful use mostly oops forgot add extra character field expression somewhere project nt sure even project dependency would make early errors useful lack errors referencing properties undefined values expressions something people actually complain perf improvements hypothetical actual code actually simpler somewhere along way distinguish optional fields vs nonoptional probably means extra ast nodes code visited optional field nodes needs extra logic handle optionalness anyways opportunity making code smaller simpler", "d": "3/2015"}, {"body": "pkozlowskiopensource nt think use everywhere like used everywhere angular already admitted extra character disadvantage however explicitness early warnings advantages terms developer ergonomics web app developers spend lot time trying figure typing code seems like good trade caitp two aspects upgrade mental migration angular concepts new angular concepts discussed detail second aspect actual code migration pretty straightforward replace every sure possible write script automatically given vast differences angular angular probably going drop sea changes make", "d": "3/2015"}, {"body": "yjbanov course thinking part important time consuming typing proposing use everywhere like used would make expressions look really ugly less readable personal opinion would still add selectively comes thinking part maybe applevel global setting way go anyway guess got opinion arguments clear sure could add anything apparently people disagree majority developers want speak", "d": "3/2015"}, {"body": "unfortunately nt think global setting work want able consume thirdparty components without breaking would also kill explicitness proposed syntax something decide", "d": "3/2015"}, {"body": "oh ca nt switch totally right", "d": "3/2015"}, {"body": "way option template annotation optin would allow template authors decide want error catchingoptimized change detection would make migration easier ability upgrade templates piecebypiece thirdparty would fine since componenttemplate tells angular wants cd code nt get complicated since already option null checks option one could complain annoying optin template argue probably annoying stop think every binding also complicate things templates initially something resolving right away binding decide lazy load server code iteration", "d": "3/2015"}, {"body": "almost impact speed reason read field expensive part load register actual cost checking null data register essentially nothing single cpu instruction modern cpus branch prediction cheap would say speed argument foror anything certainly template level switch component chose semantics think template switch make explicit make people happy", "d": "3/2015"}, {"body": "think template switch worse operator aim readability means avoid nonlocally defined semantics reading someone else code nt check options know expressions nullsafe especially code reviews review tools collapse full file contents think options fully defined nullsafe ie status quo still worried code size nullsafe expression generate something like maybe better way js take advantage truthiness make expression shorter would still longer", "d": "3/2015"}, {"body": "agree pkozlowskiopensource forgiving nature angular expressions worked well kept note adding would imply also added", "d": "3/2015"}, {"body": "would fallow proposal", "d": "3/2015"}, {"body": "team bitten refactorings default behavior renamed property get warning rendering template would love see default change way opt back people really need behavior", "d": "3/2015"}, {"body": "ewinslow great point tools able produce static warnings nullsafe strict property access accessing typed objects however pojos maps would still issue", "d": "3/2015"}, {"body": "seems typechecking template linters none exists know yet would easier time behavior think would like ide gulpgrunt linters could plug typescript compiler service validate ie property property would impossible nullawareoperator would easier implement tool without explicit nullawareoperator", "d": "3/2015"}, {"body": "martinmcwhorter ide support general toolability one goals angular also making sure angular compiler works outside web browser means ides would able reuse code angular uses interpret expressions", "d": "3/2015"}, {"body": "yjbanov sounds good bit topic moment right hole using statically typed datamessage contracts templates typescript breaking changes easily detected ci unfortunately falls types expressed templates ability tooling compile expressions validate ts compiler service would fill large gap", "d": "3/2015"}, {"body": "longer relevant recent changes compiler", "d": "3/2015"}, {"body": "additionally dev mode property checks also fail inactive web components check nt see easy solution one suggestion", "d": "3/2015"}, {"body": "rkirov ok looked one bit slightly worried assumption however directive element bound property bind directive understand correctly saying case like template like would bind titledecor property div title property right words directives would eager consuming property bindings sure feel right sounds bit arbitrary especially consider web components top behaviour system would depend presence absence directives witch could confusing surprising times rkirov could discuss one got moment", "d": "3/2015"}, {"body": "problem skipping check altogether dart gets upset setting nonexisting property ex fail runtime caught class divelement instance setter someprop might good thing though depending one perception", "d": "3/2015"}, {"body": "see concern angular components taking binding however consider alternative always binding dom element angular component time developer uses bindings propagate data directives extra work sync dom unnecessary work without cost especially environments like webworkers dom operations brokered across channel dart error inevitable objects sealed dart user would expecting expando properties dom elements begin works magically change small test dart polymer demo indeed polymer runs htmlelement instance gets replaced proper custom element instance use proper setters see another reason bind one object either dom element angular component imho binding one object right thing needs carefully documented explained users", "d": "3/2015"}, {"body": "thinking would like suggest possible solution list elementnames attributes overrides algorithm check check exeception list throw error", "d": "3/2015"}, {"body": "mhevery given component property binding compiler run nt waked web component exception list responsible maintaining exception list", "d": "3/2015"}, {"body": "also using rather waking general problem seems like need delay checking property import exception list something may else fails throwing crazy ideas perhaps disable check", "d": "3/2015"}, {"body": "pkozlowskiopensource disable check figure proper way handle", "d": "3/2015"}, {"body": "fixed via mlaval add something like commit message issue would get closed automatically commit lands", "d": "3/2015"}, {"body": "nodejs dom adapter part could continue adapter used experiments based reason pushing please", "d": "3/2015"}, {"body": "familiar neither downloads hosted github hosted custom server seems", "d": "3/2015"}, {"body": "closed via", "d": "3/2015"}, {"body": "seems resolved", "d": "3/2015"}, {"body": "also fixes bug transpiled invalid occurrences syntax nowhere else another fix change code read", "d": "3/2015"}, {"body": "would also good cache pub dependencies travis build sometimes flakes download pub package", "d": "3/2015"}, {"body": "hi ngteam tried solve issue came following solution since sure good enough nt made pr yet would nice someone could look give feedback ok send pr thanks", "d": "3/2015"}, {"body": "sekibomazic would much simpler discuss pr hesitate send nt afraid wrong learn probably problematic would work dart target would work actually need special case following code might help", "d": "3/2015"}, {"body": "quick look code looks like implementation would require changes compiler internals mhevery something like annotation retrieved want able binding also supported", "d": "3/2015"}, {"body": "vicb thanks feedback tried another test worked still thoroughly tested course could also give hint look dart code please bear dart newbe", "d": "3/2015"}, {"body": "code transpiled either js dart however make sure code work run tests version amp check see execute dart js specific code according target language ie langdart", "d": "3/2015"}, {"body": "vicb actually u wondering motivation behind issue mean directives got selector match occurrences templates", "d": "3/2015"}, {"body": "vicb really seems bigger change compiler needed dart test failed well least learned angular compiler", "d": "3/2015"}, {"body": "sekibomazic updated issue reasoning", "d": "3/2015"}, {"body": "mhevery thanks", "d": "3/2015"}, {"body": "syntax needs slightly different support dart static analysis eg", "d": "3/2015"}, {"body": "pkozlowskiopensource time take one", "d": "3/2015"}, {"body": "pkozlowskiopensource please add list", "d": "3/2015"}, {"body": "moved text closing issue duplicate", "d": "3/2015"}, {"body": "solved", "d": "3/2015"}, {"body": "jelbourn resolved believe", "d": "3/2015"}, {"body": "closed", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "ref", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "closing since duplicate", "d": "3/2015"}, {"body": "thanks doable good enough still need map", "d": "3/2015"}, {"body": "mlaval think good enough move forward might another issue future much boilerplate involved", "d": "3/2015"}, {"body": "true lot boilerplate future happens etc could add sugar option directive configuration sure make annotation complex mhevery thoughts", "d": "3/2015"}, {"body": "agree absolutely need way cut boilerplate sheer number things component needs inject example material gridlist tile would something like", "d": "3/2015"}, {"body": "ca nt inject", "d": "3/2015"}, {"body": "filed could closing", "d": "3/2015"}, {"body": "discussion vsavkin intent access static attributes template fact already doable injecting going replaced soon raises questions mhevery need static yes appropriate name annotation", "d": "3/2015"}, {"body": "mlaval think async resolved compile time hence faster also makes clear change binding proposed syntax know always string attribute found computed compilation phase part", "d": "3/2015"}, {"body": "closed via amp", "d": "3/2015"}, {"body": "closing favor", "d": "3/2015"}, {"body": "considered release blocker dart developers rely autogenerated docs", "d": "3/2015"}, {"body": "high priority us something couple weeks", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "mhevery could probably land switch ts way introspect type anonymous fn parameters however started work could please give feedback following discuss next sync js describe describe gt beforeeach would executed beforeeachbindings imagine could inject classes cb gotcha nested beforeeachbindings create injector beforeeachbindings executed beforeeach c aclass async asynccompleter gt injectabe imo easier define bindings function rather bind available describe function return list bindings use syntax nontest code beforeeachbindings gt aclass bind router toclass mockrouter possible inject callback asynccompleter allow completing async tests like done jasmine class aclass router router async asynccompleter gt routerroute gt asyncdone describe gt executed beforeeach even parent describe want able inject beforeeach callbacks beforeeachbindings gt bclass", "d": "3/2015"}, {"body": "think close one support role aria attributes master reminds done refactoring would remove special casing going tackle part", "d": "3/2015"}, {"body": "davideast comment planning separate repo part angular would argue part angular run end end tests verify app works keep sync changes true send pr think", "d": "3/2015"}, {"body": "resolved", "d": "3/2015"}, {"body": "misguided issue", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "moving back repo decided job linter transpiler", "d": "3/2015"}, {"body": "moved", "d": "3/2015"}, {"body": "deferring might need", "d": "3/2015"}, {"body": "value since proper import statements separate debate prefix attribute html given component directive registry think would unlikely would collision think better solution would allow specifying prefix directive import", "d": "3/2015"}, {"body": "eta implemented", "d": "3/2015"}, {"body": "closing since covers missing use case rest already", "d": "3/2015"}, {"body": "chatting tbosch agreed proposal outlined angular code anything returned return type lack type assumed matter style course specifying explicitly typescript ok let continue conversation repo closing one", "d": "3/2015"}, {"body": "fixed analyzer running part ci build fails builds unused imports among things", "d": "3/2015"}, {"body": "decided keep test drivers js create custom implementations google internal", "d": "3/2015"}, {"body": "done see", "d": "3/2015"}, {"body": "done become obsolete splitting views", "d": "3/2015"}, {"body": "tbosch sorry nt understood di published install di npm install package name", "d": "3/2015"}, {"body": "djindjic afaik ca nt install di individually point get part module", "d": "3/2015"}, {"body": "forcing gc maybe get somehow", "d": "3/2015"}, {"body": "findings far captured also see sample code", "d": "3/2015"}, {"body": "reading thread favorite suggestions period notation attributes js objectlike expressions complex directives like ngrepeat namespacing prefixing attributes enclosure string interpolation based thinking template property binding repeating event binding etc multiline lovers compatible", "d": "3/2015"}, {"body": "know sensitive topic lot gotten lot good feedback discussion incorporated thinking think thread served purpose retired please watch presentation topic tries answer many questions", "d": "3/2015"}, {"body": "copied duplicate issue idea write assertions components applied dev mode stripped production mode similar type assertions general example say component either given name attribute component author could write assertion gives component user meaningful error development mode add extra weight final output prior art closure compiler implements concept closure library googasserts module notes similar approach could also applied logging", "d": "3/2015"}, {"body": "vicb would equivalent dart code super args probably wo nt work type checked", "d": "3/2015"}, {"body": "js class parent constructor foo foo class child extends parent case dart generate think always access parent class ctor signature ts case traceur", "d": "3/2015"}, {"body": "issue moved", "d": "3/2015"}, {"title": "placeholder becomes value inside", "body": "hello edit fails without vrepeat", "num": "760", "d": "3/2015"}, {"title": "erjs", "body": "", "num": "759", "d": "3/2015"}, {"title": "single item list", "body": "hi sure right place ask could nt find forums chat rooms list items vuejs data visualize items vrepeat far good would like able click item pass contents separate view edit item values somehow send back main view replace original item data new data far successfully passes item vue format edititem function finally editor html html idea actually make editor get item data return originally thought vwith exactly research found wrong search might could find example explanation sure easy solution escapes somehow right place type questions please let know thanks", "num": "758", "d": "3/2015"}, {"title": "price instantiating new vue every route spa", "body": "hi embark quest building admin panel wanted use vue came someone please tell right way concerned price recreating entire vue per route could nt figure elegant way would avoid using components weird requires separate places also bit call vue instance case", "num": "754", "d": "3/2015"}, {"title": "iterating object array", "body": "nt work made mistake html html key value js", "num": "752", "d": "3/2015"}, {"title": "", "body": "var data var vue new vue dataname abc", "num": "751", "d": "3/2015"}, {"title": "filter \u53c2\u6570\u5206\u9694\u7b26", "body": "\u76ee\u524d filter", "num": "750", "d": "3/2015"}, {"title": "js transitions going reverse order", "body": "using js transitions setting new array bound data property transitions seem added reverse order intended transitions block example transitioned data property set new array", "num": "749", "d": "3/2015"}, {"title": "variable class removes classes added vclass", "body": "following component irrelevant component component mixin computed attributes step attribute changes first classes get handled properly attached node computed class gets handled kicks method function defaulthandler value value value thiselsetattribute thisarg value else thiselremoveattribute thisarg instead new classlist step gotcha aware classvars vclass nt work together wrong implementation classlist", "num": "748", "d": "3/2015"}, {"title": "perspective", "body": "impressive number commits months ago wonder current silence means roadmap plans future", "num": "747", "d": "3/2015"}, {"title": "vrepeat picture path processing", "body": "error", "num": "746", "d": "3/2015"}, {"title": "every vue inserted inside new div", "body": "code var vue require vue var title vueextend template title var title new title data title awesome title title appendto sitecontent expected awesome title got awesome title happens every vue avoid created contain template missing something thanks", "num": "744", "d": "3/2015"}, {"title": "trigger update vhtml javascript", "body": "trigger update vhtml vmodel text area updated script case textarea vmodel populated ajax callback successfully vhtml nt update type textarea reading issue hoped triggering change event textarea would refresh vhtml success html javascript new vue el editor filters marked marked", "num": "743", "d": "3/2015"}, {"title": "set correctly working two dimensional array", "body": "hi think problem set function trying modify array item inside array exemple result part equals length array work around find save final array variable directly modify", "num": "742", "d": "3/2015"}, {"title": "watch handler seems called watch array item", "body": "code bellow click test button handler k called handler k ignored actually k also changed new value nt know bug vuejs watching strategy angularjs deal code calls handlers k k", "num": "741", "d": "3/2015"}, {"title": "von event triggers", "body": "js new vue el notice data notices ready function \u5728\u8fd9\u91cc\u975edispathevent non dispathevent trigger use vue thisnoticedata event triggleall trigger click methods noticedata function type e", "num": "740", "d": "3/2015"}, {"title": "filtered dynamic select options", "body": "trying filter dynamic select options unfortunately seem work receive warning possible use filters options", "num": "739", "d": "3/2015"}, {"title": "get similar jquery instead etarget von bound object", "body": "", "num": "738", "d": "3/2015"}, {"title": "content selector need select top child elements", "body": "place component inside another component eg html content selector outer component selects two divs nested component possible select divbody outer component", "num": "737", "d": "3/2015"}, {"title": "vif von directives component", "body": "hello created example show issue seems von directive binding nt work properly vif", "num": "736", "d": "3/2015"}, {"title": "filter partials", "body": "would love able filter partials string right", "num": "735", "d": "3/2015"}, {"title": "using reserved keywords vrepeat", "body": "used following template html packagename packagedescription used reserved keyword vue stated console several times puzzled worked finally using instead works fine html singlepackagename singlepackagedescription behavior course design would possible improve error messages maybe warning reserved keyword used", "num": "734", "d": "3/2015"}, {"title": "transitionenter running initial page load", "body": "firstly thank great framework love easy use documentation excellent run issue would like bootstrap modal open upon session loginlogout shownhidden vuetransitionenterleave functions upon initial page load user session undefined modal shown currently case however trigger modal manually console click loginlogout transitions work expected believe transitionenter function running initial render demonstrate issue created jsbin run console", "num": "733", "d": "3/2015"}, {"title": "autoprefixer css prefixer vueify", "body": "want run autoprefixer building vue projects build includes browserify vueify transform give example include css postprocessors setup thanks", "num": "732", "d": "3/2015"}, {"title": "display list vrepeat orderby reversekey update dom", "body": "use display list vrepeat orderby reversekey update dom write html follows entid entname execute javascript follows remove entry list success update dom following html update dom entid entname bug sorry bad english", "num": "730", "d": "3/2015"}, {"body": "fullfs happening chrome", "d": "3/2015"}, {"body": "youngsteveo yep check subject please occurs probably", "d": "3/2015"}, {"body": "fullfs whoops missed sorry", "d": "3/2015"}, {"body": "quick search shows fixed related issue traced found issue may come textarea child template placeholder set textarea already contained text actually placeholder vue nt handle situation wish helps little issue", "d": "3/2015"}, {"body": "vwith used change editor html like html maybe stackoverflowcom good place ask type questions", "d": "3/2015"}, {"body": "ok thanks take question stack", "d": "3/2015"}, {"body": "right way terms routing vue since really scope framework depends app needs cases recreating vue instance fine since unless page consists thousands child instances render fast enough ux perspective want cache already instantiated vue instance remove dom instead destroying later route activated simply reappend also benefits persisted state needed", "d": "3/2015"}, {"body": "got thanks carry thank framework", "d": "3/2015"}, {"body": "beware use combined jquery end memory leaks", "d": "3/2015"}, {"body": "boussou mean", "d": "3/2015"}, {"body": "nested tags invalid browsers parse fact contain blocklevel element blocklevel element close tag circumstance inner tag closes outer one sibling elements improve html code solve problem example change inner demo", "d": "3/2015"}, {"body": "thank simple problem", "d": "3/2015"}, {"body": "another expanded question following html code two tables tablea table nt reflect vue model tableb table reflects vue model focus focus html html messages json key key code completely different perhaps", "d": "3/2015"}, {"body": "first table wo nt affect parent data second table using rebuild nested repeat dom input box always loses focus type maybe try way complete goal html key jsfiddle however giving every item property input stops losing focus using really makes confused think need time step source code vue", "d": "3/2015"}, {"body": "code wanted wo nt affect parent data want affect use key like understood", "d": "3/2015"}, {"body": "need define data create view instance even null dynamic properties use see docs", "d": "3/2015"}, {"body": "var data list var vue new vue datalistpush gt \u76d1\u542c\u5230\u53d1\u751f\u53d8\u5316", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "\u6dfb\u52a0\u65b0\u6570\u636e\u53ef\u4ee5\u7528", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "try though appears causes string quotes passed argument giving filter something like", "d": "3/2015"}, {"body": "calebboyd", "d": "3/2015"}, {"body": "string passed literally said must escape probably parser problem get around fixed fiddle", "d": "3/2015"}, {"body": "calebboyd", "d": "3/2015"}, {"body": "make fiddle", "d": "3/2015"}, {"body": "yes use fiddle", "d": "3/2015"}, {"body": "also noticed ready events called reverse order vrepeat list created events called n followed ready events n maybe behaviours related", "d": "3/2015"}, {"body": "hmm diff move algorithm ends inserting instances reverse order easy change might want time animations based reliable", "d": "3/2015"}, {"body": "yeah work wed mar pm evan notifications githubcom wrote hmm vrepeat diff move algorithm ends inserting instances reverse order might easy change might want time animations based index reliable reply email directly view github", "d": "3/2015"}, {"body": "busy work recently also feature set stabilized nt want pack vue core planned changes mainly default true add improvements", "d": "3/2015"}, {"body": "ah good know wondering moving meteor would impact release cycles", "d": "3/2015"}, {"body": "thanks response sounds promising", "d": "3/2015"}, {"body": "think need specify el option case el sitecontent described remove", "d": "3/2015"}, {"body": "assume using older version vue code would work nt provide option vm instance unmounted state call instead js var vue require vue var title vueextend template title var title new title data title awesome title title mount sitecontent use divsitecontent root node references", "d": "3/2015"}, {"body": "getting lunch realized taking wrong approach changed code update datainput updated vmodel vhtml first assigned vue object variable order target html javascript var vm new vue el editor filters marked marked pseudocode function myajaxcallback myajaxdata vm datainput myajaxdata myfield", "d": "3/2015"}, {"body": "nt return array returns length array push", "d": "3/2015"}, {"body": "vue detect changes made directly setting array indices eg wo nt detected instead need use trigger watcher", "d": "3/2015"}, {"body": "timeout", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "\u662f\u53ef\u884c\u7684\u554a", "d": "3/2015"}, {"body": "\u6ca1\u6709events \u53c2\u6570 vonclick noticedata xxx event", "d": "3/2015"}, {"body": "\u4e0d\u9700\u8981\u76f4\u63a5\u64cd\u4f5c dom dom vue \u8c8c\u4f3c\u4e0d\u592a\u5efa\u8bae\u76f4\u63a5\u64cd\u4f5c dom", "d": "3/2015"}, {"body": "functionality added", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "exactly problem component designed use top child tag container bad surprise started nesting writing following select child element whatever deep css selector working root ca nt write think good way set restriction maybe people need select children", "d": "3/2015"}, {"body": "found workaround issue html selector", "d": "3/2015"}, {"body": "case need approach nt use data bindings", "d": "3/2015"}, {"body": "issue well workaround using start property set set annoying sure work use case", "d": "3/2015"}, {"body": "question nt really anything vue case use build tool like gulp create two separate tasks one runs js files browserify vueify transform one runs css css prefixer", "d": "3/2015"}, {"body": "thanks problem nt explicit css files vueify transform extracts styles vue file inserts insertcss module document head", "d": "3/2015"}, {"body": "ah sorry misunderstood question suspect gulp plugin prefixes html work vue components like one example nt work could always separate css components prefix gulp require css template property component options using browserify", "d": "3/2015"}, {"body": "currently preprocessors supported vueify hardcoded think make extensible", "d": "3/2015"}, {"body": "moving discussion", "d": "3/2015"}, {"body": "thanks quick great comments gulphtmlautoprefixer", "d": "3/2015"}, {"body": "silvershell tried jsfiddle issue occured could tell us issue code", "d": "3/2015"}, {"body": "agree keeping vuejs simple plugins require extra boilerplate code increase page startup time due loading extra js files also nt follow release schedule create added maintenance headache issue keeping plugins date become problem every project ever used significant number plugins", "d": "3/2015"}, {"body": "attribute", "d": "3/2015"}, {"body": "like sound well ran situation found expecting vue use inline template option nt provided even expect used template option provided", "d": "3/2015"}, {"body": "looking thing", "d": "3/2015"}, {"body": "vue great inlinetemplate could primary frontend framework using pimcore allows drag amp drop snippets serverside html editables place page could great use vue component generated html", "d": "3/2015"}, {"body": "ugly hack works case course work direct child components", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "fiddle duplicate", "d": "3/2015"}, {"body": "hello first thx beauty using vue project one little question object want set dynamic key like trigger view update know arrays use set explicitly call setters objects ca nt find anything docs clues thx", "d": "3/2015"}, {"body": "larafale objects", "d": "3/2015"}, {"body": "weird works predefine keys vue data object like go like nothing triggers concerning always return undefined set method without object keys defined datastats used set arrays worked good object problem using", "d": "3/2015"}, {"body": "guide talks little bit basically vue detect new property added unless using nt return anything expected trigger view changes", "d": "3/2015"}, {"body": "yep get function returns undefined set function undefined call get uncaught typeerror undefined function define stats array set undefined need stats object thx evan", "d": "3/2015"}, {"body": "ah sorry bad initial call set like normal properties", "d": "3/2015"}, {"body": "ok evan thanks rock solid much impressed work clean well designed deep frameworks like angular etc years vue masterclass react compete larger scale apps keep", "d": "3/2015"}, {"title": "set nt recognizing existing models using polymorphic model", "body": "", "num": "3550", "d": "3/2015"}, {"title": "backbonemodelsave passing url property backbonesync", "body": "base model class models extend like coffeescript class basemodel extends backbonemodel user model stuff model removed post nt matter basically seems complains url property function defined going", "num": "3547", "d": "3/2015"}, {"title": "array value slice appears broken chrome", "body": "full example demonstrates failure chrome firefox safari nt test ie suspect chrome bug report well case anyone else tortured recently using slice method array stored attribute results array values added model think removed javascript var mymodel backbonemodelextend var mymodel new mymodel foo var mymodelget foo slice bar mymodelset foo var mymodelget foo slice baz mymodelset foo var mymodelget foo slice mymodelset foo consolelog fails objectkeys mymodeltojson prints fails foo bar bar baz using arrayprototypeslice directly works javascript var mymodel backbonemodelextend var mymodel new mymodel foo var arrayprototypeslicecall mymodelget foo bar mymodelset foo var arrayprototypeslicecall mymodelget foo baz mymodelset foo var arrayprototypeslicecall mymodelget foo mymodelset foo consolelog works objectkeys mymodeltojson prints works foo full example html broken array values function var mymodel backbonemodelextend var mymodel new mymodel foo lt p gt var mymodelget foo slice bar mymodelset foo var mymodelget foo slice baz mymodelset foo var mymodelget foo slice mymodelset foo consolelog fails objectkeys mymodeltojson prints fails foo bar bar baz function var mymodel backbonemodelextend var mymodel new mymodel foo var arrayprototypeslicecall mymodelget foo bar mymodelset foo var arrayprototypeslicecall mymodelget foo baz mymodelset foo var arrayprototypeslicecall mymodelget foo mymodelset foo consolelog works objectkeys mymodeltojson prints works foo", "num": "3546", "d": "3/2015"}, {"title": "backbone localstorage link broken todo app", "body": "link referenced backbone todo app broken", "num": "3545", "d": "3/2015"}, {"title": "", "body": "excuse trouble using test open new ticket admin departmen receive notification new ticket email account also user user get notification ticket number problem show osticket website could help problem please", "num": "3544", "d": "3/2015"}, {"title": "next release", "body": "next release", "num": "3541", "d": "3/2015"}, {"title": "telling whether event bound", "body": "great accessor backboneevents could tell event bound publicly expose bit functionality rely api internal inspired real life question stackoverflow", "num": "3540", "d": "3/2015"}, {"title": "modeltojson null values formatted strings", "body": "null valid json property calling modeltojson null properties formatted empty string", "num": "3538", "d": "3/2015"}, {"title": "scrolling effect", "body": "want achieve scrolling effect found many single page apps presenting plugin example possible backbone alone without plugin achieve effect logic example going ti example pages putting quotation marks indicate actually one html page page associated backbone view second pageview made visible user upon clicking link scrolling hope understand mean", "num": "3536", "d": "3/2015"}, {"title": "special characters routing string ff", "body": "use square brackets routing string work ff ubuntu work routerroute encodeuri special characters ff", "num": "3535", "d": "3/2015"}, {"title": "modeldestroy breaks collectioneach", "body": "js test destroy models loop function var collection new backbonecollection id id id id collectioneach function model notstrictequal model undefined model undefined modeldestroy url function test breaks fires causes collection call splices array causes break technically could considered bug lodashunderscore jdalton released versions cause might want fix backbone deferring seems like bad idea maybe slice models new array calling could also make destroying defer let know guys think", "num": "3534", "d": "3/2015"}, {"title": "adding duplicate model overridden id incorrectly added backbonecollection", "body": "core issue longer call new model construct id override attributes checking model already collection thus explicit id attribute model duplicate added override initialize ignored consider following test javascript var mockmodel backbonemodelextend initialize function options make custom id thisid optionsfirstname optionslastname looking source code adding duplicate model following line javascript model thispreparemodel models options continue latest release following javascript turn bare objects model references prevent invalid models added l modelslength lt l attrs models attrs instanceof model id model attrs else id attrs targetmodelprototypeidattribute id", "num": "3533", "d": "3/2015"}, {"title": "event change nt work define el object jquery", "body": "set el selector like el page change event view works set object jquery work like el page page html load creating view", "num": "3532", "d": "3/2015"}, {"title": "add event triggered prior response", "body": "problem collectioncreate passed wait true success callback get response server thing annoys fact add event triggered response server case code depending server response want add event triggered", "num": "3531", "d": "3/2015"}, {"title": "url function context undefined", "body": "dont know backbone core depth noticed function call tests says result dont save context get undefined want access simple demo like javascript var context options var mockoptions test true var model backbonemodelextend defaults book year var collection backbonecollectionextend model model url function context options thisoptions return var books new collection mockoptions booksfetch wait true success function alert isequal options mockoptions code dont know nt save context uses call someting like wrong missed someting ps dont askreport stackoverflow seems like working normally thanks", "num": "3527", "d": "3/2015"}, {"title": "nested selfmodel possible", "body": "able following without receiving uncaught rangeerror maximum call stack size exceeded dataschema backbonemodelextend idattribute instanceid urlroot api constructor function attrs options backbonemodelcall attrs options thisparent new dataschema completely understand receiving error curious would correct way accomplish nested model parent within model", "num": "3526", "d": "3/2015"}, {"title": "modelparse context wrong called collectionreset", "body": "maybe expected behavior model parse function called pointing collection instead model intended", "num": "3525", "d": "3/2015"}, {"body": "oh damn haha nt return value url oh well error message say url property function undefined though returns undefined anyway tired", "d": "3/2015"}, {"body": "ran test case chrome works perfectly probably overridden somewhere code", "d": "3/2015"}, {"body": "reported success realized backbone debugger enabled chrome seems causing report instead thanks help", "d": "3/2015"}, {"body": "think correct link someone confirm update", "d": "3/2015"}, {"body": "ah indeed weird difference two vs good catch let look", "d": "3/2015"}, {"body": "pipe see", "d": "3/2015"}, {"body": "seem nt know events getting bound pretty big code smell really binding events initialize absolutely need bind render really recommended use rest solutions thread good", "d": "3/2015"}, {"body": "nature adding event makes knowing event added useful ca nt say making much sense reason functionality nt exposed needing feature using objects using add events something exposing track wrapping wrap keep track added elsewhere backbone already keeps track", "d": "3/2015"}, {"body": "try stackoverflow mailing list irc channel gitter room questions github issues maintaing framework", "d": "3/2015"}, {"body": "ok thanks clarifyingone question gitter room backbone", "d": "3/2015"}, {"body": "yep", "d": "3/2015"}, {"body": "hi yuriyapostol thanks reporting would mind posting working sample look", "d": "3/2015"}, {"body": "routes c c b working ff bug fixed", "d": "3/2015"}, {"body": "user achieve instead going fix grooveshark code consider either warning bug fixing since definitely obvious going break", "d": "3/2015"}, {"body": "best solution create bulk update remove request server dont need make n request delete n want synced writed", "d": "3/2015"}, {"body": "mikeblum hi think fogget power function simply extend incoming data add fields want someting provide use features waybind computeds readmore", "d": "3/2015"}, {"body": "edge master introduced collection modelid handle situation", "d": "3/2015"}, {"body": "like idattribute mean specified attribute id case must js object add collection like javascript var mockmodel backbonemodelextend", "d": "3/2015"}, {"body": "default yes however meant overridden support cases like", "d": "3/2015"}, {"body": "seem little weird duplicates id setting logic without actually affecting property model see caseywebdev thoughts", "d": "3/2015"}, {"body": "guess confusing part attribute affects model set collection", "d": "3/2015"}, {"body": "collection piece know uniquely identify models holds uses method make distinctions model level know models may grouped related note think unnecessary confusing property removed altogether likely happen", "d": "3/2015"}, {"body": "seems purpose twofold identify model server persisting also used determine persistence method identify model uniquely within collection takes care nt deal think really depends use case great pollymorphic collections introduces extra complexity apps wager large percentage nt need", "d": "3/2015"}, {"body": "try stackoverflow questions", "d": "3/2015"}, {"body": "ambicoder please provide demotests without dont know situation code wrap function promise detect server get response see another solution use controll model added rendered details read thanks", "d": "3/2015"}, {"body": "first code thismodelisnew thiscollectioncreate testmodel wait true success function model response response said first add event triggered success callback fires one thins understand code itsnewmodel true suppose conditional testing model true found solution following modelsave collectionadd either wayany comment welcomed things mention deferred marionette look time stick solution", "d": "3/2015"}, {"body": "read documentation sorry dont see uses dont closed", "d": "3/2015"}, {"body": "js dataschema backbonemodelextend idattribute instanceid urlroot api constructor function attrs options backbonemodelcall attrs options optionsparent thisparent optionsparent new dataschema parent new dataschema also future please use stack overflow general javascript questions related development library", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "mistake", "d": "3/2015"}, {"body": "nevermind ff debugger messing context looking stack", "d": "3/2015"}, {"body": "ahhhh problem overriding returning original response disappointed fixing everything works expected sorry guys", "d": "3/2015"}, {"body": "oh", "d": "3/2015"}, {"body": "meh could way point", "d": "3/2015"}, {"body": "facing problem docs mentioned collectioncreate accept also unsaved model object something", "d": "3/2015"}, {"body": "looks like fixed ambicoder colllin guys test master see fixes problem related", "d": "3/2015"}, {"body": "one thing discussed anyone starts implementing location model properties see three options models attributes stay observer proxies calls model results would unsymmetrical api properties set gotten b model properties set directly model object changing location attributes potentially introduce chaos anyone might relying c adding observer directly would allow symmetrical api seems rather counter intuitive call thoughts jashkenas elegant way move properties directly model whilst affecting internal currently exists", "d": "3/2015"}, {"body": "probably elegant migrate work towards ideal api compromised one try putting attributes directly model object see feels", "d": "3/2015"}, {"body": "try putting attributes directly model object see feels every serverside framework ever used places attributes directly model attribute specific getters setters breaking change good one", "d": "3/2015"}, {"body": "like thanks feedback attributes originally used understand need using getterssetters bb knows trigger events data directly model know internal properties say vs returned called", "d": "3/2015"}, {"body": "unless misunderstanding proposal strikes javascript nt provide facilities languages would help avoid propertymethod naming conflicts would likely arise putting attributes directly model object", "d": "3/2015"}, {"body": "javascript nt provide facilities languages would help avoid propertymethod naming conflicts ruby rails successfully done attributes originally used think easy bookkeeping think passed etc", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named instance variable named javascript object ca nt method named property named without conflict afaik totally date latest js improvementsproposals", "d": "3/2015"}, {"body": "lukeasrodgers would seem say la php jridgewell quesiton mostly rhetorical obvious question deal moving forward many interesting ideas worth exploring although viable time due browser support example whilst providing much far performance improvements using proxy method would allow minimal changes current backbone leaving stuff intact time proxy support limited ff partly imlemented chrome behind flag although development seems rather stagnantlow priority think greater goal though minimal amount boilerplate around native objects utilize native features instead implementing backbone point discussion figure direction project wants move end might room minimize lot bb codecomplexity along objects helper properties etc objectobserve nativly returns much data bb works hard keep track like argument make event triggering simpler returns add update delete think would elminate need due async nature might also become redundant making helper properties almost totally redundant black sheep list edit lukeasrodgers would resolve issue attribute conflicts case bb whittled model simple object w helpers prototype collections simple array objects helpers greater picture due async triggering events lead waaaaay faster event triggering view rerendering also greater complexity entire client side becoming one huge async app lets throw promises mix", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named foo instance variable named foo sorry mean methods always getters setters property ie rails really setter called ignore specialized getters setters perform simple case trigger specialized properties setters question deal moving forward way see working keeping list still around say knows rendering pass pass model gives access", "d": "3/2015"}, {"body": "see point jridgewell always potential conflicts thats js works bomb take extreme steps protect user forcing getters setters stopping internal property overwritten recede native approach leave problem conflicts user discretion", "d": "3/2015"}, {"body": "take extreme steps protect user forcing getters setters stopping internal property overwritten nt lead us back think problem beginning seem obvious really excited thinking possibilities", "d": "3/2015"}, {"body": "think problem beginning agree go back basics set attributes directly object", "d": "3/2015"}, {"body": "yup", "d": "3/2015"}, {"body": "great give thought", "d": "3/2015"}, {"body": "facing issue using subroutes subroutersi tried everything discussed jashkenas ideal solution tried solution", "d": "3/2015"}, {"body": "banged head quite seems counterintuitive method named tojson would output shallow serialization model complex attributes pointers model also figured modifying data serialized tojson object affecting data model went documentation understand deep copy option modeltojson seems pass options used perhaps could configurable documentation updated happy submit pr either update docs add deep option depending direction prefer", "d": "3/2015"}, {"body": "may also occur html given ie reasons believe operate lower version prevent include ieedge html header forces run mode resource", "d": "3/2015"}, {"title": "object nt support property method setattribute ie", "body": "seeing error site using internet explorer error trying recreate jsbin morning nt able removed code app except template causes error blank page template code get error go next route go back previous route causes error show ie changing href div something else still causes message link site would like replicate said tried replicate jsbin nt able running production nt see error believe showed release update looking little might related setattribute method text node vs actual link action", "num": "10786", "d": "3/2015"}, {"title": "result root changed ember", "body": "short visit andthen function ember consolelog currenturl gt ember consolelog currenturl gt developing ember cli application betas today updated first beta try everything continued work except acceptance test assertions previously application returned returns empty string routes still returns string beginning run development believe code used get intest behaviour seems incorrect seemed infeasible make jsbin demonstrate since happening tests create small demonstration ember cli application verify still happening canary version trivial change tests look empty string instead intended behaviour let know update tests keep working betas", "num": "10784", "d": "3/2015"}, {"title": "ember warning triggered bound style value safestring", "body": "ember warns xss vulnerabilities using bound style propertyattribute inside handlebars template even property returned safestring warning triggered styles applied means expectation instances style attributes handlebars template employ additional helper documentation implies returning safestring computed property sufficient", "num": "10783", "d": "3/2015"}, {"title": "could someone release embersource gem", "body": "seems emberjs released great released rubygemsorg", "num": "10782", "d": "3/2015"}, {"title": "ember routerget url throws error", "body": "main code seems tries call geturl location property string ember ember works", "num": "10781", "d": "3/2015"}, {"title": "getting error attempted render found", "body": "running issue since upgrading regarding code changed using thisrender route using embermodals addon makes call thisrender route template name options specifying render template issue appendorphan gets called using thisrender seems like appendorphan expects call made impersonateanoutlet would set wasused value looks like impersonateanoutlet gets called using render helper", "num": "10780", "d": "3/2015"}, {"title": "emcomputedfilterby macro updating", "body": "stumbled upon confusing behavior working chains computed macros include isolated problem jsbin run jsbin first logged value expected swap compound property different object output still comment replace custom implementation provided jsbin value logged correct sure bug point view sure seems like one reading docs unable explain behavior able work around way needlessly reimplement filterby sorry sort pebkac note using properties observer function guessing using template already updated would issue maybe use case macros nt correct", "num": "10779", "d": "3/2015"}, {"title": "missing classnames classnamebindings docs", "body": "docs mention use properties listed bottom among properties remmember seeing pair intentional see support properties provided mixin refactored recently maybe docs nt list anymore", "num": "10777", "d": "3/2015"}, {"title": "query param flashing problem", "body": "hi issue using query params scenario think must fairly common nt seen lot discussion deal behavior route set reloading model query param change button route template toggles query param click button model reload also button flickers ideally button nt flicker filter problem understand route model controller lifecycle tied model template reload template well possible solutions keeping parent route controller dedicated managing query params filters child route model problem splitting query params route whose model filtering meaning convenient option longer sufficient reload model data change another strategy needed also seems violate agreement separation route concerns completely sure communication method would ideal allowing managing model controller pretty sure trolling proposing pretty sure moving towards componentonly application structure routes possess models done success problematic caveats well edit ember provide portion template reloaded model change responsible managing query parameters probably overkill necessary common enough problem maybe considered fundamental change could beneficial", "num": "10776", "d": "3/2015"}, {"title": "gemspec referencing deletedmoved folder", "body": "embersource gemspec references distjs directory nt exist anymore perhaps obsolete needs removed see scripts lib might related leave owner", "num": "10775", "d": "3/2015"}, {"title": "binding event attributes nt work expected", "body": "without getting securitybest practice debate curious current behavior template bindings event attributes correct seems counterintuitive hbs hardcoded works fine via binding nt work due emberhtmlbars propertyfirst rule normalized key exists dom object property set instead using would seem another exception norm similar svg etc example showing various behaviors", "num": "10774", "d": "3/2015"}, {"title": "allow passing null queryparams subexpression", "body": "would really great could pass query params subexpression today pass like end route subexpression expecting variable access current context common use case something like clearing search imagine implemented search query parameter want implement x clear search order use linkto clear query parameter put variable called context linkto clear query param address bar example jsbin showing issue described", "num": "10772", "d": "3/2015"}, {"title": "chrome ember bug", "body": "asked something emberjs forum suggested post repost posterity found weird bugcondition almost impossible goggle dropped looks like good place ask following great tutorial embercli nt set exactly like tutorial chose go separate ember front end rails backend tutorial getting good create page display data hbs tutorial uses emblem verified problem exists leads lead controller leadfirstname nothing displayed checked data ember inspector checked dom elements data showing page even leads part ok figured tutorial came questionable css nuked css styling went away stuff still missing viewing chromebook jumped mac still data screen thought give firefox try using chrome data appears safari ok problem chrome browsers desperation changed id leads id leeds fixed problem tried static html page course worked got something emberjs chrome possibly code tutorial could readily accept something really stupid used happening chrome maybe need start deleting chrome extensions common chromebook mac maybe could explain author put demo app nt see anything except orange header chrome safari see list firefox opera chrome safari use webkit rendering", "num": "10771", "d": "3/2015"}, {"title": "embersource gem actual", "body": "embersource following diff emberdebugjs hosted emberjscom causes issue seems embersource one applied could someone rebuild publish embersource might something diff emberdebugjs exportsdefineproperty defineproperty function obj keyname desc defineproperty function obj keyname desc var isnode exportsdefineproperty defineproperty function definepropertypolyfill obj keyname desc defineproperty function definepropertypolyfill obj keyname desc descget obj keyname descvalue var candefinenonenumerableproperties exportsdefineproperty defineproperty exportshaspropertyaccessors haspropertyaccessors exportscandefinenonenumerableproperties candefinenonenumerableproperties var tryfinally needsfinallyfix exportstryfinally tryfinally function tryable finalizer binding tryfinally function tryable finalizer binding var result finalresult finalerror return finalresult undefined result finalresult else exportstryfinally tryfinally function tryable finalizer binding tryfinally function tryable finalizer binding var result finalresult var trycatchfinally needsfinallyfix exportstrycatchfinally trycatchfinally function tryable catchable finalizer binding trycatchfinally function tryable catchable finalizer binding var result finalresult finalerror return finalresult undefined result finalresult else exportstrycatchfinally trycatchfinally function tryable catchable finalizer binding trycatchfinally function tryable catchable finalizer binding var result finalresult exportsguidkey guidkey exportsmetadesc metadesc exportsemptymeta emptymeta exportstrycatchfinally trycatchfinally exportstryfinally tryfinally enifed embermetalwatchkey exports embermetalcore embermetalutils embermetalplatformdefineproperty embermetalproperties function exports ember utils defineproperty properties exportsnativearray nativearray nativearraywithoutapply nativearray ignore nativearray nativearraywithoutapply nativearray ignore creates array like object nativearrayactivate function nativearrayapply arrayprototype exportsa function arr return arr function arr return arr ember default extendprototypes true ember default extendprototypesarray exports default nativearray exportsa exportsnativearray nativearray enifed emberruntimesystemobject exports emberruntimesystemcoreobject emberruntimemixinsobservable function exports coreobject observable", "num": "10770", "d": "3/2015"}, {"title": "regression binding elementid components", "body": "using components generate unique ids components markup boiled jsbin works nt work follow foo links", "num": "10769", "d": "3/2015"}, {"title": "unable call route action controller", "body": "nt possible call declared connected", "num": "10767", "d": "3/2015"}, {"title": "trouble template precompilation upgrading", "body": "hi guys getting following error trying upgrade using emberrails trying hunt revision inserted templates submit pr must admit overall flow using emberrails still bit maze someone point right direction happy digging", "num": "10766", "d": "3/2015"}, {"title": "radio button component longer working upgrading", "body": "radio button component stopped working upgrading internet explorer sure versions works fine chrome firefox working jsbin working jsbin console error unknown name file vendorjs line column vendorjs line prototypesetattribute function element name value elementsetattribute name string value", "num": "10763", "d": "3/2015"}, {"title": "render navigation wo nt render navigationhbs navigation view present", "body": "ember wo nt render view present rename view something else template rendered however need render template view situations app regression wanted effect viewsnavigation present uses file nt care template nav tagname specified view navigation name template rendered emberjs works expected view combined template ember specify make work expected", "num": "10760", "d": "3/2015"}, {"title": "compare custom ember objects sortablemixin", "body": "nt default compare method include case regular js objects compare getting result valueof actual issue described another user", "num": "10759", "d": "3/2015"}, {"title": "styleguide arguments vs rest parameters", "body": "seemed little bit contradictory would nt make sense always use rest parameters instead writing loop manually", "num": "10757", "d": "3/2015"}, {"title": "applicationloading named substate requires route entry", "body": "tried use named substate feature surprised discover good enough template named app must also explicitly define route named jsbin demonstrating designed", "num": "10756", "d": "3/2015"}, {"title": "required attribute added added", "body": "ember ember", "num": "10754", "d": "3/2015"}, {"title": "npm start error developing ember master linked locally", "body": "steps sh master jim jimhp dev git clone git githubcom emberjsemberjs master jim jimhp dev cd emberjs master jim jimhp emberjs npm link embercli master jim jimhp emberjs ember v version node npm master jim jimhp emberjs npm install npm warn packagejson ember repository field ember postinstall homejimdevemberjs bower install bower cached bower validate bower cached bower validate bower cached bower validate bower cached bower validate bower cached bower validate bower cached git githubcomjonkempqunitphantomjsrunnergit bower validate git githubcomjonkempqunitphantomjsrunnergit bower cached git githubcomjqueryqunitgit bower validate git githubcomjqueryqunitgit bower cached git githubcomjqueryjquerygit bower validate git githubcomjqueryjquerygit bower install backburner bower install routerjs bower install dagmap bower install emberdev bower install qunitphantomrunner bower install qunit bower install jquery bower install rsvp backburner bowercomponentsbackburner routerjs bowercomponentsrouterjs dagmap bowercomponentsdagmap emberdev bowercomponentsemberdev qunitphantomrunner bowercomponentsqunitphantomrunner qunit bowercomponentsqunit jquery bowercomponentsjquery rsvp bowercomponentsrsvp npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesbower requires rimraf load npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesrimraf npm warn unmet dependency version npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesquicktemp requires rimraf load npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesrimraf npm warn unmet dependency version npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulestemp requires rimraf load npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesrimraf npm warn unmet dependency version npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesemberclincp requires mocha load npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesmocha npm warn unmet dependency version npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesbowernodemodulesbowerregistryclient requires rimraf load npm warn unmet dependency homejimdevemberjsnodemodulesemberclinodemodulesrimraf npm warn unmet dependency version qunitextras nodemodulesqunitextras emberpublisher nodemodulesemberpublisher qunitjs nodemodulesqunitjs routerecognizer nodemodulesrouterecognizer chalk nodemoduleschalk ansistyles escapestringregexp supportscolor stripansi ansiregex hasansi ansiregex simpledom nodemodulessimpledom emberclidependencychecker nodemodulesemberclidependencychecker semver glob nodemodulesglob inherits wrappy inflight wrappy minimatch braceexpansion express nodemodulesexpress mergedescriptors utilsmerge cookiesignature methods cookie fresh escapehtml rangeparser contenttype finalhandler vary parseurl servestatic contentdisposition pathtoregexp depd qs onfinished eefirst debug ms etag crc send destroy ms mime proxyaddr forwarded ipaddrjs accepts negotiator mimetypes typeis mediatyper mimetypes github nodemodulesgithub rsvp nodemodulesrsvp htmlbars nodemoduleshtmlbars awssdk nodemodulesawssdk xmlbuilder sax bower nodemodulesbower isroot junk stringifyobject chmodr abbrev osenv archy opn rimraf bowerlogger lrucache bowerendpointparser gracefulfs lockfile nopt retry tmp q requestprogress throttleit chalk ansistyles escapestringregexp supportscolor hasansi stripansi shellquote arrayfilter arraymap arrayreduce jsonify bowerjson intersect deepextend gracefulfs semver fstream inherits pthrottler q mkdirp minimist promptly read bowerconfig osenv gracefulfs optimist fstreamignore inherits minimatch tarfs pump tarstream decompresszip nopt mkpath touch readablestream binary request caseless jsonstringifysafe foreveragent stringstream oauthsign tunnelagent qs nodeuuid mimetypes formdata bl toughcookie hawk glob inherits minimatch bowerregistryclient gracefulfs requestreplay lrucache async mkdirp request cardinal redeyed mout updatenotifier semverdiff stringlength latestversion configstore handlebars optimist uglifyjs inquirer figures mutestream lodash clicolor rx insight objectassign chalk async lodashdebounce osname toughcookie configstore inquirer embercliyuidoc nodemodulesembercliyuidoc gitrepoversion gitrepoinfo rsvp broccolimergetrees promisemapseries symlinkorcopy broccoliwriter broccolicachingwriter coreobject promisemapseries symlinkorcopy debug rimraf broccolikitchensinkhelpers quicktemp lodashnode yuidocjs gracefulfs marked minimatch rimraf yui emberjsbuild nodemodulesemberjsbuild coreobject jsstringescape broccolistringreplace broccoliusestrictremover gitrepoversion gitrepoinfo broccolifunnel coreobject walksync symlinkorcopy mkdirp minimatch rimraf broccolikitchensinkhelpers mkdirp glob broccolistew walksync debug minimatch fsextra optimist broccolifilecreator broccoliwriter broccolifilter broccoliwriter promisemapseries walksync mkdirp quicktemp broccolimergetrees promisemapseries symlinkorcopy broccoliwriter broccolifilter esperanto minimist chalk magicstring sander acorn broccoliuglifysourcemap sourcemapurl walksync symlinkorcopy mkdirp broccoliwriter uglifyjs broccolisourcemapconcat combinedstream mkdirp broccoliwriter broccolicachingwriter fastsourcemapconcat broccolidefeatureify defeatureify lodashnode broccolijshint chalk mkdirp findupsync jshint broccoli broccolislowtrees copydereference promisemapseries mime commander connect tinylr findupsync handlebars broccoliderequire derequire broccolijscs path embercliversionchecker minimatch broccolistaticcompiler jscs babelcore slash tofastproperties shebangregex trimright pathisabsolute fsreaddirrecursive leven private globals esutils estraverse convertsourcemap jstokens linenumbers commander chalk debug isinteger asttypes detectindent repeating outputfilesync acornbabel sourcemap sourcemapsupport corejs regexpu regeneratorbabel lodash embercliyuidoc gitrepoversion rsvp broccolicachingwriter yuidocjs error sh master jim jimhp emberjs npm start ember start homejimdevemberjs ember serve version convert symbol value string typeerror convert symbol value string regexptest native symbolhasownproperty settostringtag object modulecompile objectmoduleextensionsjs moduleload npm err linux npm err argv start npm err node npm err npm npm err code elifecycle npm err ember start npm err exit status npm err npm err failed ember start script ember serve npm err likely problem ember package npm err npm npm err tell author fails system npm err ember serve npm err get info via npm err npm owner ls ember npm err likely additional logging output npm err please include following file support request npm err homejimdevemberjsnpmdebuglog npm debug log ember serveember serve error exit status error failed ember start script ember serve error likely problem ember package error npm error tell author fails system error ember serve error get info via error npm owner ls ember error likely additional logging output verbose exit true", "num": "10749", "d": "3/2015"}, {"title": "unable find partial testing", "body": "defining dependencies component test ember cli following worked requiring partial template template named however fail error instead change needs definition slightly everything works expected ember normally behavior exists testing sure issue ember embercli showed upgraded ember", "num": "10748", "d": "3/2015"}, {"title": "initializer broken emberapplicationinstanceinitializers feature flag honored", "body": "seems feature flag correctly handling changes came conclusion discovering addon broken due initializer working correctly uses deprecated format inspect container find actually registry container initializer nt work supposed app crashes perhaps change wrapped feature flag tried fork emberjs make change see would work maybe even submit pr ca nt life figure use local fork ember app usually makes easy lost bower seems good guide find one somewhere missing using embercli ember ember data edit breaks well works fine", "num": "10744", "d": "3/2015"}, {"title": "method causing build fail", "body": "trying get local build running seems failing seen note use node yet running get error bash engelbert emberjs trentmwillis npm test ember pretest userstrentmwillisworkspaceemberjs ember build future versions ember cli support please update node iojs version could find watchman falling back nodewatcher file system events visit info build failed file containercontainerjs object method gettokenposbyrangestart typeerror object method gettokenposbyrangestart arrayforeach native objectjsfileiteratenodesbytype objectmoduleexportscheck null arrayforeach native stringcheckercheckjsfile stringcheckercheckstring jscsfilterprocessstring filterprocessfile npm err test failed see details npm err ok code", "num": "10743", "d": "3/2015"}, {"title": "debugcontainerkey hash contextual data", "body": "something like would enable ed get rid typekey look cc stefanpenner fivetanley", "num": "10742", "d": "3/2015"}, {"title": "api documentation alphabetical items alternate columns making scanningusing difficult", "body": "api docs two columns alphabetical order alternates column column line would much nicer minimum go back one column better break columns midpoint list show first half list first column second half list second column", "num": "10741", "d": "3/2015"}, {"title": "component helper race condition associated model", "body": "helper seems race condition causing problems surface tests writing usage like tests run failure occurs run instance change usage use static string rather model property like tests teardown fine leads believe caused model destroyed component resulting component type potentially related pr", "num": "10739", "d": "3/2015"}, {"title": "doc missing updated todomvcstyle guide", "body": "docs pretty good leadin small sample application covers good starting matter like ember opinion model view controller mean clientside world databinding model view directions read edit binding actions delete completed nonpersistent state concept controller proxy model manipulate infer data view routing data persistence layers fixtures inital template work vs moving real storage although expanding continue rest endpoint would even better particular impressive starts spec static mockup fits real world keeps whole thing firm context end goal docs nt seem pages something covering ground eg updated version app since simple example already cover lot angles raised issue per locks suggestion irc", "num": "10738", "d": "3/2015"}, {"title": "query params broken objectcontroller", "body": "query params seem work correctly ember using exact code functions using ember using replaced binding query param property controller input template editing text field nt update url setting url manually update text field examples broken working working know deprecated understand deprecationember strategy correctly everything still work correctly even still use", "num": "10733", "d": "3/2015"}, {"title": "ember promise undefined", "body": "getting following error trying load app code trying call following works properly chrome firefox etc", "num": "10732", "d": "3/2015"}, {"title": "support broken transpilation", "body": "compatibility broken recent pull requests adding features example destructuring input output javascript use strict var slicedtoarray function arr arrayisarray arr return arr else symboliterator object arr var arr var iterator arrsymboliterator step step iteratornext done arrpush stepvalue amp amp arrlength break return arr else throw new typeerror invalid attempt destructure noniterable instance function foo blah var blah slicedtoarray blah var blah var b blah example spread input output javascript use strict var toconsumablearray function arr arrayisarray arr var array arrlength lt arrlength arr return else return arrayfrom arr function doit foo blahapply undefined toconsumablearray foo examples show usage destructuring spread babel currently assumes present true", "num": "10730", "d": "3/2015"}, {"title": "issue binding immutable computed property", "body": "following jsbin beta would expect something like work component final id dom actually injected version computed property bind elementid directly string literal work", "num": "10728", "d": "3/2015"}, {"title": "coreview legacy creation needs hasdom check", "body": "nonbrowser environments fastboot fails attempting create view without container", "num": "10724", "d": "3/2015"}, {"title": "empty string parameter sendaction", "body": "thissendaction ontest thissendaction ontest null thissendaction ontest abc thissendaction pass empty string parameter", "num": "10723", "d": "3/2015"}, {"title": "keys values embermap", "body": "embermap keys embermap values private blessed way get values", "num": "10722", "d": "3/2015"}, {"title": "typeerror node undefined chainnodeprototypeunchain", "body": "transitioning views submitting form action helper targeted view click back button using linkto helper console indicates transitioned transition complete node undefined error view fails load happens chainnodeprototypeunchain apparently unbinds destroys event attachments minimize memory leaks inspected chainnode objects nt really see wrong wrapped process inside typeof node undefined app would stop throwing typeerror navigate back", "num": "10717", "d": "3/2015"}, {"title": "regression controller longer context handlebars helpers", "body": "found one regression ember regarding handlebars helpers previous versions definitely sure could huge deal rewriting handlebars helpers htmlbars version anyway nevertheless regression provide failing test jsbin later today", "num": "10714", "d": "3/2015"}, {"title": "guide issue use kind eventname style keypress keypress", "body": "input guide says event names must dasherized assigned action guide says general twoword event names like keypress become keypress confused", "num": "10713", "d": "3/2015"}, {"title": "second call render within template fails", "body": "please see code works current release ember current beta error given specific usecase rendering tabs contents requires two calls render thanks", "num": "10710", "d": "3/2015"}, {"title": "documentation issue", "body": "docs say rule thumb use resources nouns routes adjectives favorites verbs edit wanted point favorites noun adjective", "num": "10708", "d": "3/2015"}, {"title": "emberviewrender removes certain tags buffer", "body": "reason able use tags import ember ember export default emberviewextend looking dom chrome see creates divs rows cells however works import ember ember export default emberviewextend bug feature case feature common way work around view logic heavy ca nt handlebars alone", "num": "10707", "d": "3/2015"}, {"title": "test helper clicks work jquery", "body": "fighting click helpers tests seem work perhaps async perhaps work actions something really sure seems bug though would assume jquery click next button test helper click next button click button works would use jquery click everywhere instead helper jquery work phantomjs either using click helper wrong wo nt work case could include jquery clicks phantomjs somehow think inject jquery", "num": "10705", "d": "3/2015"}, {"title": "return promise always giving route instance fulfilled handler", "body": "ember ember data jquery ember simple auth use redirect route currently instead passing route instance fulfilled handler provides javascript object properties like queryparams", "num": "10704", "d": "3/2015"}, {"title": "block param description beta release blog confusing", "body": "syntax confusing opinion makes sense nt make clear refers exactly customer birthday component named properties order matter", "num": "10702", "d": "3/2015"}, {"title": "importing pod component requires additional path", "body": "component defined ember cli app created using component blueprint trying reuse extend component another component importing using following work instead path required following looking seems components template exported podspecific path suggest former intuitive nt see distinguishing pod nonpod components would beneficial", "num": "10698", "d": "3/2015"}, {"title": "replacing item bound array renders briefly without", "body": "got playlist artwork images click one old current track taking place therefore replace item array ember rerenders items brief moment replaced element disappears leads ugly effect everything repositioned made jsfiddle using jquery could nt reproduce behaviour see effect go click one three playlistimages simplified controller import ember ember export default emberarraycontrollerextend playlist null currenttrack null actions replaceitem function playlistreplace index selfget currenttrack template", "num": "10694", "d": "3/2015"}, {"title": "uncaught typeerror object function", "body": "js outercontextualelement function thisoutercontextualelement emberdeprecate render buffer expects outer contextualelement exist ensures dom requires context correctly generated tr svg tags defaulting documentbody removed future thisoutercontextualelement documentbody return thisoutercontextualelement error hard debug happens transitions try gather details soon", "num": "10693", "d": "3/2015"}, {"title": "wrong context custom handlebars helper", "body": "ember version relative links note code works fine ember work updating ember version got error canhelper nt call computed properties function debug found try search property controller override context using boundif helper helpers code next use embercli use standart emberhandlebarsregisterhelper appjs var get emberget isglobalpath emberisglobalpath normalizepath emberhandlebarsnormalizepath isbinding emberisbinding export default function permissionname property options var attrs context key path permission logic find amp create permission supplied attributes permission thisget container lookup permissions main get permissionname attrs permission instance emberobject computed property nt call ensure boundif uses permission context viewcontroller otherwise looks wrong place optionscontexts null thisunknownproperty function propname stop propname find stacktrace debugger bind together kickoff observers return emberhandlebarshelpersboundifcall permission options give information stacktrace debugger statement unknownproperty", "num": "10692", "d": "3/2015"}, {"title": "beta breaks embervalidations", "body": "wycats said issues reported ember validations using private api yet bump ember beta causing failures", "num": "10689", "d": "3/2015"}, {"title": "feature request dasherized attributes camelcased components", "body": "polymer bottom section makes sense since html uses dasherized attributes moving closer web components spec think convert camel cased attributes internal manipulation within component would accessed eg", "num": "10686", "d": "3/2015"}, {"title": "custom component creates empty dummy html tag including actual content", "body": "something like mycomponent embercomponentextend layoutname mylayout tagname p classnames whatiswrongwiththistechnology layout payload rendered html ember stuff payload tried remove tagname nt really need something else tragically broke decided dive sake sanity back displaced tagnamed component ideas get sheep back yard actually want manipulate child tags component ca nt thisget element returns empty dummy tag nasty ways hey century nt", "num": "10685", "d": "3/2015"}, {"title": "", "body": "jcttrll noticed using beta version ember test attempting fillin element exist page test hangs run tests previous versions helper would alert let know element exist fail test issue test alert element exist fail test thanks work awesome project", "num": "10676", "d": "3/2015"}, {"title": "image always fetched even guarded", "body": "upgrading application run bit ugly problem template rendering offending code follows found menu bar application values change depending membership student selected offending scenario start visiting membership false ergo snippet rendered next switch membership coach render snippet back membership without coach point following error javascript console verify snippet causing problem commenting image point error nt occur attempted issue play nt jsbin replicate yet attempt soon available screenhero anyone interested trying tackle", "num": "10675", "d": "3/2015"}, {"title": "typeerror convert symbol value string", "body": "tried build master got related closed", "num": "10674", "d": "3/2015"}, {"title": "position newly inserted element incorrect serialization time snapshot", "body": "problem present emberdata lets say post object contains array comments way order comments serializing list ids modelspostjs import ds emberdata export default dsmodelextend title dsattr string comments dshasmany comment async true serializerspostjs import ds emberdata export default dsrestserializerextend dsembeddedrecordsmixin attrs products serialize ids deserialize ids lets say controller want change position comment var comments thisget comments var thecomment commentsobjectat commentsremoveat commentsinsertat thecomment far good comment position position array thisget model save problem serialization time snapshot comment inserted position ends end array instead correct position problem present emberdata hack tried get correct behavior clear array comments insert back desired order instead removeat insertat operation however causes flickers screen rerendering", "num": "10666", "d": "3/2015"}, {"title": "model update put request result", "body": "emberdata updating model result put request anymore downgraded emberdata bug present version", "num": "10665", "d": "3/2015"}, {"title": "nested linktos cause broken active states beta canary", "body": "using nested linkto ala common omgusingbootstrap pattern causes broken states beta canary see regression broken seems compared states states still reflect state example seen variety manifestations including set stuck", "num": "10662", "d": "3/2015"}, {"title": "propagate controller component", "body": "demo js app emberapplicationcreate appindexcontroller embercontrollerextend myproperty zomg lol report function emdebug controller property change observes myproperty actions trigger function thisnotifypropertychange myproperty appfoobarcomponent embercomponentextend myproperty null report function emdebug component property change observes myproperty trigger controller action expect observers fire reality controller observer fires component", "num": "10661", "d": "3/2015"}, {"title": "update documentation deprecations around contextswitching blocks", "body": "ran probably still learning sample application template route model defined route trying transition contextswitching syntax following instructions thought update template find nothing rendered console errors given gist tried well solution grapho clued admit might due lack really grokking template route controller interact still think would helpful line x referencing controller named return value route model hook realize sounds like dumb thing pros really learning js along ember maybe additional alternative code block uses syntax", "num": "10659", "d": "3/2015"}, {"title": "root template ignored router", "body": "beta root templateview ignored route hierarchy images code let know clarify possibly change nt bisected though cc edward thoughts may cause happy provide details jump screenhero similar router routermap function thisresource exports function thisroute history export route rendertemplate function thisrender exportsroot export index route rendertemplate function thisrender exportsindex routes versions", "num": "10658", "d": "3/2015"}, {"title": "running destroy test teardown causes injected show isdestroying true", "body": "simple app invokes destroy using run loop tests like would expect example route class injected like inject func setup simple initializer like nt invoke destroy tests good try run gt test destroy seem kill injected class reference point sure true bug w way destroy works done something completely wrong initializer shown either way reproduce threw together simple embercli app branch console log injected class time test runs first time get normal class expect destroy runs get something else entirely test run", "num": "10656", "d": "3/2015"}, {"title": "item controller arraycontroller nt work", "body": "hello community issue item controller nt render attributes controller model template jsbin see see code project", "num": "10655", "d": "3/2015"}, {"title": "mismatched value computed property attributebound", "body": "use computed property property attributebound changed browser situation property become desynchronized browser value instance property component example let say value text box user blanks computed property set call occurs check blank return desired value ember decides cached value matches correctly returns property never goes back updates text box dom actually match text input still shows blank", "num": "10654", "d": "3/2015"}, {"title": "optionshelpername undefined makeboundhelper invokes viewhelper", "body": "noncli grunt ember app embertextfield view bound arrivaldate property viewhelper created emberhandlebarsmakeboundhelper function options helper checks navigatoruseragent changes hashtype input date using mobile device browser binds devices native datepicker ember htmlbars compiler change return emberhandlebarshelpersviewcall dateinputview options return emberhandlebarshelpersviewhelperfunctioncall dateinputview options viewcall method moved compile get options undefined happens ember viewhelper method references optionshelpername options optionshash hash missing properties like boundoptions onevent valuebinding helpername view contexts hashcontexts hashtypes types data obj different able set optionshelpername helper obviously set earlier resolver wires view seems like viewhelper input helper needs wrapped something else fill missing properties", "num": "10653", "d": "3/2015"}, {"title": "problem nested outlets amp named outlets", "body": "see navigate admin rolesandusers userroles edit userrolesedittemplate rendered dialog outlet userroles bug unintended usage outlets", "num": "10652", "d": "3/2015"}, {"title": "audio still playing audio tag removed dom second time", "body": "audio tag route transitioning route second time audio still playing bug appears ember tested version works well ember jsbin reproduce problem ember working reproduce need transitionto multiple times ember working", "num": "10651", "d": "3/2015"}, {"title": "helper update array mixin", "body": "seems helper update changes objects implementing array mutablearray mixin see", "num": "10650", "d": "3/2015"}, {"title": "injected service observed template renderered", "body": "pretty new ember likely missing something project working notification service basically wraps around list also notification area component notification service injected problem routescomponents add stuff notification service binding notification area nt get updated basically made js bin illustrating issue clicking add green nt anything visually although updates list inside service provide actual code samples necessary", "num": "10649", "d": "3/2015"}, {"title": "upgrading latest version ember beta broke backwards compatibility", "body": "upgrading ember ember app stopped working error liquid fire library see kind issue fix master version liquid fire understanding beta updates ember nt break backwards compatibility amp bugfixes sorry misunderstand wanted raise issue case useful others", "num": "10646", "d": "3/2015"}, {"title": "emberroutingnamedsubstates nt take account embercli resolver structures", "body": "would like use loading state instead believe valid template names", "num": "10645", "d": "3/2015"}, {"title": "emberroutingnamedsubstates nt work", "body": "trying get working looks like resolver created changed resolver embercli sets core resolver masked behind function", "num": "10644", "d": "3/2015"}, {"title": "async redirect causes entry added history", "body": "see repro example clicking link takes cat route performs async hooks route redirects route route click back app goes route redirects route instead sending user back route works correctly without async hook", "num": "10643", "d": "3/2015"}, {"title": "white spaces ember components nt preserved", "body": "white spaces ember components nt preserved tested chrome firefox safari behaviour ember ember beta ember canary think components behave way native elements specially new syntax", "num": "10642", "d": "3/2015"}, {"title": "emberlatestjs gone breaking every jsfiddle everywhere including docs", "body": "meaning every single jsbin jsfiddle referencing ember anywhere interwebs broken includes large swathes ember documentation rwjblue pinging think know builds anyone", "num": "10641", "d": "3/2015"}, {"title": "deprecate deferred mixin", "body": "cc chadhietala got time believe class drepacted mixin", "num": "10635", "d": "3/2015"}, {"title": "ember testing helper cleanup end test", "body": "trying build clean test helper pretender want able write test adapter makes correct api call function assert assertexpectajaxget path apisave query id name steve optional response headers go responsebody goes adaptersave assertverifyajaxcalls test helpers embertestregisterhelper expectajaxget function app expectation response add expectation list app setup pretender register expectation call comes add list app embertestregisterhelper verifyajax function app expectation response check actual calls expected calls lists app assert question test helper guarantee run end test clean clean verify called called leak memory worse mocked ajax future tests may fail", "num": "10629", "d": "3/2015"}, {"title": "able build windows bit copied debuglog", "body": "info worked ends ok verbose cli f nodejsnodeexe verbose cli f nodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli build info using npm info using node verbose node symlink f nodejsnodeexe verbose runscript prebuild build postbuild info prebuild ember info build ember verbose unsafeperm lifecycle true info ember failed exec build script verbose stack error ember build verbose stack exit status verbose stack eventemitter f verbose stack eventemitteremit verbose stack childprocess f verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid ember verbose cwd c usersuserdesktopembersrcemberjs error windowsnt error argv f nodejsnodeexe f nodejsnodemodulesnpmbinnpmclijs run build error node error npm error code elifecycle error ember build error exit status error failed ember build script ember build environment production error likely problem ember package error npm error tell author fails system error ember build environment production error get info via error npm owner ls ember error likely additional logging output verbose exit true", "num": "10628", "d": "3/2015"}, {"title": "ability augment properties object array", "body": "need augment models supplemental property data oldold school way managing cache objects applied content always get tricky requires good bookkeeping cache managing array changes works well debugging proxy issues fun old school way heard method going away also flexible enough support use case suggested way handle scenario", "num": "10626", "d": "3/2015"}, {"title": "test regression", "body": "component yields security check passes thus hiding content user allowed see tests passed fail error call without template compiler loaded please load prior calling code tried changing handlebars htmlbars get error right way test yield happened correctly simplereasiermore correct way found regression test shows content may activity function assert assertexpect creates component instance var component thissubject securityservice createmocksecurityservice true template emberhandlebarscompile appends component page var component thisappend assertequal componentfind div ifmaytestdiv length", "num": "10625", "d": "3/2015"}, {"title": "add wrapperclass component", "body": "seems like certain cases want wrap certain components div css purposes example like extend wrap css styling purposes specifically add arrow design currently template outside component would much nicer encapsulate component thoughts", "num": "10624", "d": "3/2015"}, {"title": "name route object", "body": "using ember cli ember want name route object nt work error message something seen realize object could reserved word want check jsbin", "num": "10623", "d": "3/2015"}, {"title": "rendering error ie edge ember", "body": "ember cli app using ember loading site ie edge mode getting following error fragment parent must boundary nodes order detect insertion full stack trace line col r line col ecreatemorph line col ecreatemorphat line col render line col render line col uprototypecreateelement line col r line col anonymous function line col iprototypeinvoke line col iprototypeflush line col rprototypeflush line col sprototypeend line col anonymous function line col line col sprototypedefer line col anonymous function line col p line col c line col h line col anonymous function line col anonymous function line col c line col hfirewith line col send line col ajax line col edefaultget line col anonymous function line col anonymous function line col c line col hfirewith line col line col line col send line col ajax line col edefaultget line col model line col line col deserialize line col f line col rprototyperunsharedmodelhook line col getmodel line col anonymous function line col line col sprototypedefer line col anonymous function line col hprototypethen line col nprototyperesolve line col n line col c line col uprototypetransitionbyintent line col uprototyperefresh line col refresh line col send line col ajax line col edefaultget line col actionsauthenticate line col send line col anonymous function line col sprototyperun line col l line col mregisteredactions r handler line col anonymous function line col", "num": "10622", "d": "3/2015"}, {"title": "beforemodel transitions order mixin used calls super without returning promise", "body": "noticed one production projects today little difficult track essentially noticed ajax calls firing order seems happen mixing multiple things override last mixin simply call must check see promise resolve jsbin replicate javascript appdelaymixin embermixincreate beforemodel function thissuper emberloggerlog start beforemodel return new emberrsvppromise function resolve reject settimeout function emberloggerlog resolve beforemodel resolve apppromisemixin embermixincreate beforemodel function emberloggerlog promise thissuper var promise new emberrsvppromise function resolve reject resolve appindexroute emberrouteextend appdelaymixin apppromisemixin model function emberloggerlog start model return red yellow blue swap works properly however nt expecting jsbin javascript appsuperpromisemixin embermixincreate beforemodel function emberloggerlog array var superpromise thissuper var promise new emberrsvppromise function resolve reject resolve brings another thought though think turning events nt make sure super called right way way currently could party library case change order operations regular application code", "num": "10621", "d": "3/2015"}, {"title": "input helper expand bound handlebars subexpressions", "body": "given helper concatenates strings following template ought render provided resolves helper invoked static strings input renders expected reproduction", "num": "10620", "d": "3/2015"}, {"title": "container deprecate camelcasedunderscored lookups", "body": "prefer dasherized talked ember data meeting making things loosy goosey place makes things confusing end wasting time trying debug things used wrong format model controller etc", "num": "10619", "d": "3/2015"}, {"title": "approuterrouter null", "body": "title says update nothing change log bug different way get router instance", "num": "10618", "d": "3/2015"}, {"title": "disconnectoutlet nt disconnet nested templates", "body": "doenst know version behavior changed ember click open layer gt open next layer gt close gt nothing happens error script error line click open layer gt close gt layer closed currently works close second layer bug change behavior", "num": "10617", "d": "3/2015"}, {"title": "use symbols route path", "body": "possible use combine another separator instead like", "num": "10614", "d": "3/2015"}, {"title": "outlet specified found", "body": "upgrading ran following issue router rendering templates hook property used default parent template following used work throws exception error goes away add property render calls property seems render function nt default property property specified", "num": "10611", "d": "3/2015"}, {"title": "assertion defining injected controller property noncontroller allowed fails objectcontrollers", "body": "seem unable use", "num": "10610", "d": "3/2015"}, {"title": "deep computedalias null property breaks query params", "body": "route whose controller something like prevent route loading successfully error error processing route index property set failed object path bar could found destroyed error property set failed object path bar could found destroyed example controller code jsbin", "num": "10608", "d": "3/2015"}, {"title": "reserved ember", "body": "upgraded app ember ember app kit ember embercli saw following behaviour breaks application prior ember working code testhbs value expected ember ember change param name something everything working like intended behaviour see jsbin", "num": "10607", "d": "3/2015"}, {"title": "regression disconnectoutlet ca nt reach across routes", "body": "disconnecting outlet used work even sub route element nt get removed dom modal nt get removed ember modal gets removed ember seems started change", "num": "10606", "d": "3/2015"}, {"title": "emberinjectcontroller nt work objectarray controllers", "body": "understand controllers going anyway soon think weird nt work objectarray controllers jsbin think either work expected update assertion message explicitly mention injection work basic controllers would happy work pr either", "num": "10605", "d": "3/2015"}, {"title": "amp fail input type search", "body": "issue using input helper setting type search results error metamorph code expected fallback normal input element possible failing test need add", "num": "10603", "d": "3/2015"}, {"title": "regression render helper targetable render", "body": "possible regression jsbin works release running issue function explicitly pass optional parameter", "num": "10602", "d": "3/2015"}, {"title": "morph null attrnode moving one containerview another containerview", "body": "got minimal jsbin reproduction issue run click load container dynamically create two new containerviews inside main container dummy child view get render show click move container move first generated containerview second containerview child ember tries render new dom crashes attrnodemorph null error console read setcontent null occurs previous value attribute written back attrnode value morph null", "num": "10601", "d": "3/2015"}, {"title": "library app already registered ember", "body": "issue library app already registered ember running tests running tests using embercli first test works second gives issue looks like teardown aftereach work import em ember import test emberqunit import startapp helpersstartapp var app module integration tests setup function app startapp visit teardown function emrun app appdestroy test post comment function assert", "num": "10600", "d": "3/2015"}, {"title": "ember beta input placeholder undefined", "body": "binding input placeholder property undefined value render placeholder string undefined work occurring betas tested", "num": "10595", "d": "3/2015"}, {"title": "ember cli addon upgrade fragment pushed buffer contains content", "body": "upgrading addon error shown problem related branch reproduced addon provides component used like call stack looks like coreview viewhelper helper appendchild createchildview childviewmorph bufferpushchildview emberhtmlbarstemplate render var domcreatemorphat contextualelement inline env context bsdatetimepicker date get env context return fragment", "num": "10594", "d": "3/2015"}, {"title": "create use embercontainer unit tests ember", "body": "unit tests show deprecation something like proceed going forward tests like", "num": "10593", "d": "3/2015"}, {"title": "move loglibraryversions initializer", "body": "would helpful show app version library version logger displayed app boots development done application init loblibraryversions function embercliappversion uses initializer register app version make available ember inspector info tab executed via initializer would possible use initializer property register app version called original request prompted lukemelia suggestion add initializer put together pr", "num": "10591", "d": "3/2015"}, {"title": "ember fails prototype extensions turn", "body": "see jsbin pretty selfexplanatory", "num": "10590", "d": "3/2015"}, {"title": "errorstack behaves differently", "body": "jsbin jsbin first shows errorstack second errorstack undefined probably difference handlebars htmlbars", "num": "10589", "d": "3/2015"}, {"title": "avoid deprecation using rsvphash route ember", "body": "simple route returns model codes like template use codes like boot app told use modelcodes instead codes deprecated use rsvphash ton like looking guidance avoid deprecation warning ember thank advance", "num": "10587", "d": "3/2015"}, {"title": "contentindex updated item removed arraycontroller ember", "body": "jsbin remove middle item array controller clicking rm button notice last item keeps original contentindex instead getting updated like ember expected behavior index get updated items addedremoved", "num": "10586", "d": "3/2015"}, {"title": "documentation example tests broken", "body": "example test helper jsbin broken nt pass tests", "num": "10581", "d": "3/2015"}, {"title": "testing assert two sequential promisesrunlaters skip waiting tests", "body": "hi asked stackoverflow first bounty expiring thus posting component button changes state state determines html classes text icon initially button state clicked goes state launches action action resolves promise button changes state launches cooldown timer timer triggers button returns state code js appfoobarcomponent embercomponentextend tagname button status ready revertstatusperiodms click function thisset status pending run function imitating timeconsuming ajax request return new emberrsvppromise function resolve emberrunlater function resolve updatestatus function statustext thisset status statustext code works fine unable test attempt js test clicking button set label function assert expect visit assertequal find button text trim ready initially ready andthen function click button assertequal find button text trim pending pending right click one fires late andthen function assertequal find button text trim finished become finished promise fulfills andthen function assertequal find button text trim ready eventually return ready state two problems unable test finished state seems waits promises finish want test intermediate state run assertion two sequential promisess times long tests take forever complete generally nt mind refactoring code better testability even agree include commands code detected tests refuse adjust times app based environment e g ms devprod ms test instead would prefer stub timer solution tried sinon failed mock timer never returns neither solutions helped jsbin sinon included", "num": "10580", "d": "3/2015"}, {"title": "async testing helper selectors resolve async actions resolve", "body": "previously reported emberqunit repository informed actually belongs recap issue async testing helpers wait routerbased run loop async actions resolve freely resolve actiontriggered async actions think behavior strange incorrect think async test helpers wait entire run queue empty resolving example wrote original post button reveals another button let say something like tests say get error found however wrap second helper works edit seemingly often works longer consider solution implies selectors resolved immediately actions resolved asynchronously seems wrong would expect selectors resolve part async action selector nt revealed yet long async helper would reveal reading right deliberate behavior would argue wrong", "num": "10578", "d": "3/2015"}, {"title": "query params nt work also used", "body": "currently working ember noticed query param option nt work option new history entry added assume due fact route hook refreshed expected bug jsbin showing issue commented works", "num": "10577", "d": "3/2015"}, {"title": "confusion childviews nested components", "body": "may bug also may misunderstanding array works views case using incorrectly like add documentation possible turned major time suck display issue jsbin works click item start editing parent component property called watches works great loop parent component template b snippet appears loop one line change failing version second version snippet loop isanyediting update actually blank upon check log two demos verify supposed content component uses loop seems unlikely found documentation gotcha", "num": "10573", "d": "3/2015"}, {"title": "sync routerjs", "body": "fixed devergo stuff likely also date", "num": "10571", "d": "3/2015"}, {"title": "input keypress action sending event object", "body": "send event object action named however sending current value keypress jsbin extend embertextfield works expected componentsgoodinputjs import ember ember export default embertextfieldextend keypress function e e event work yeah", "num": "10569", "d": "3/2015"}, {"title": "use proxymixin guide suggests", "body": "bug", "num": "10567", "d": "3/2015"}, {"title": "add browser support list", "body": "reviewing project page ember site nt know browsers latest stable version supports please list browsers one places says ember supports xp soon wo nt true according", "num": "10566", "d": "3/2015"}, {"title": "empty breaks rendering", "body": "accidentally block without condition prevented entire page rendered intentional may useful least log error", "num": "10565", "d": "3/2015"}, {"title": "possible share query params sibling routes", "body": "use case need shared time controls sibling routes structured like figured best way property controller query params child controllers reference query param like javascript reports controller time b controllers queryparams controllersreportstime time use query params model hook fetch specific ranges data works well page refresh always get default value controller regardless url transitioning routes works well issues realize problem probably something name query parameter direct look controller established design pattern sharing query params sibling routes unsupported use case ps one big wins get child controllers query params opposed controller sibling routes automatically call model hook time controls update nt set observers", "num": "10563", "d": "3/2015"}, {"title": "query parameters break manually rendered route", "body": "using specifying controller query parameters defined object array attempt manually entering query parameters address bar route fails never get route controller sure intended behavior documented quick jsbin show issue", "num": "10562", "d": "3/2015"}, {"title": "customevents handlers receive first argument", "body": "using customevents event argument passed handler others suppressed using integrate typeaheadjs component hard get rid jquery spaguetti code", "num": "10561", "d": "3/2015"}, {"title": "need new base jsfiddle", "body": "handlebars gone default little harder set repro step emberjs could someone sophisticated put placeholder jsfiddle config rest us copy file repro examples thanks", "num": "10560", "d": "3/2015"}, {"title": "action handler nt work svg safari", "body": "nt feel like isolated cause entirely hoping folks sort issue reproducible safari mobile safari guessing nt touch event problem adding action svg element cause fired clicked even desktop safari tried adding action tag tag none worked sure related tried replace action straight anchor discovered safari interprets svg spec pretty literally regarding href attribute rather xlink href attribute safari tag inside svg element nothing anchor clicked navigation occur firefox chrome need make happy except safari action still never fires instead browser navigates href notes cursor pointer workaround nt change behavior someone came jsfiddle different svg related problem fiddle works expected safari mobile safari", "num": "10559", "d": "3/2015"}, {"title": "valuebinding object causes http request undefined", "body": "got controller like import ember ember export default emberarraycontrollerextend currenttrack templatefile like reason causes ember send httprequest nt happen currenttrack string nt happen using currenttrack string prevent still us currenttrack object normally attributes left sake simplicity", "num": "10558", "d": "3/2015"}, {"title": "linkview active class always applied retried transitions", "body": "spotted odd issue login workflow new app started working last week user completed login process navigation link route came back active class applied reproduced issue jsbin see behavior click secret link log link appears route active class transition subsequently resumed click back index revisit secret route class applied correctly interestingly model hook retried transition returns promise resolved immediately issue occur reproduced canary see put together failing test", "num": "10557", "d": "3/2015"}, {"title": "observes working using pushobject observes working using set", "body": "", "num": "10555", "d": "3/2015"}, {"body": "change seems odd likely result boot process changes seem like intentional change demos", "d": "3/2015"}, {"body": "using quoted value results pass helper method makes final value following works without deprecation html demo", "d": "3/2015"}, {"body": "initialized application boots determine whether use historylocation hashlocation example", "d": "3/2015"}, {"body": "totally poweruser territory extremely careful using strongly instead recommend using injections although may require restructuringthinking problem result resilient code", "d": "3/2015"}, {"body": "believe duplicate issue regarding check us", "d": "3/2015"}, {"body": "seen issues related nt find anything exactly issues seemed related going", "d": "3/2015"}, {"body": "believe recreated issue couple jsbins ember ember", "d": "3/2015"}, {"body": "think intentional likely core functionality things moved mixins cycle add proper yuidoc decorators indicate mixins included simple adding comments docs", "d": "3/2015"}, {"body": "yuidoc decorators special syntaxconstruct used yuidoc mean needed placeholders document properties like", "d": "3/2015"}, {"body": "givanse something like", "d": "3/2015"}, {"body": "please share minimal reproduction case via", "d": "3/2015"}, {"body": "simple example failed replicate problem suggesting problem different initially thought try reproduce soon", "d": "3/2015"}, {"body": "dist committed repo included built gem", "d": "3/2015"}, {"body": "think need mixonic review chime", "d": "3/2015"}, {"body": "low hanging fruit wanted document ab using htmlbars", "d": "3/2015"}, {"body": "jayphelps actually surprised works assumption would act propfirst also create executable listener plan implement pattern would something like point action general expect devs use actions write javascript code htmlbars templates definitely inclined add support since would xss vulnerability", "d": "3/2015"}, {"body": "mixonic agreed potential xss vulnerability primarily discussing consistency expected behavior rather best practice perhaps specific case stuffing string assert unsupported unless used least htmlbarslevel basically comply expected behavior make strict assumptions ember", "d": "3/2015"}, {"body": "double curlies much work let raise case ok supporting triple curlies", "d": "3/2015"}, {"body": "mixonic nt lose cycles since obviously good idea ember devs almost every case noting posterity", "d": "3/2015"}, {"body": "use case app", "d": "3/2015"}, {"body": "needs requested upstream", "d": "3/2015"}, {"body": "subexpression defined ember codebase sure issue handlebars repo", "d": "3/2015"}, {"body": "yes handlebars parser needs support literals", "d": "3/2015"}, {"body": "mean time probably awkwardly define subexpressions", "d": "3/2015"}, {"body": "thank idea workaround much better jsbin action", "d": "3/2015"}, {"body": "pretty positive use adblocker try disabling load page worked chrome private mode ad blocking disabled idea blocked see css rule", "d": "3/2015"}, {"body": "yep hmm good sign newbie trying struggle learn ember tutorial adblocked main gt leads look like something would adblocked though", "d": "3/2015"}, {"body": "suggested structure tutorial perhaps could reach vic let know", "d": "3/2015"}, {"body": "oh boy nt think smiley thanks mixonic clarification", "d": "3/2015"}, {"body": "ugh sorry thank tracking get republished soon back computer", "d": "3/2015"}, {"body": "let know changed code works would better used first place still think regression nt happened", "d": "3/2015"}, {"body": "hey actions triggered currently active routes regardless controller triggered think issue calling action hook case seems route considered current yet start catching actions define action parent route application route action caught delay sending action next run loop action caught index route see sure bug intentional", "d": "3/2015"}, {"body": "ah see thanks teddy thought must possible observer triggered therefore assumed also already set hmm", "d": "3/2015"}, {"body": "regardless bugintentional controllers going away unlikely behavior change remaining releases june", "d": "3/2015"}, {"body": "possible gem packed incorrectly sha one tagged thinking perhaps built embersource gem tagged repo try confirm bit unless look embersource gem compare versions emberdebugjs embertemplatecompilerjs", "d": "3/2015"}, {"body": "hmm everything dist looks like right version string assets downloaded appends sha release version string generated", "d": "3/2015"}, {"body": "fyi able work around modifying vendored assets hand looks error build process", "d": "3/2015"}, {"body": "maybe downloading template compiler either way seems like issue emberrails would mind opening issue", "d": "3/2015"}, {"body": "checked seems embertemplatecompiler fact included whatever generating builds live appending sha end version string build files get generated", "d": "3/2015"}, {"body": "think extra colon attribute bindings attributebindings name type value checked checked disabled required works fine", "d": "3/2015"}, {"body": "kuzirashi sounds like regression simple reproduction emberjsjsbincom would helpful thanks", "d": "3/2015"}, {"body": "mixonic ok actually present stable mean earlier fault ember working fine ember bad gratis ember templatename specified view working fine also inside template rendered remove inside template seems like inside broken nt matter view template specified playlisthbs probably using components somewhat old code work edit started refactor musicplayer component playlisthbs works fine", "d": "3/2015"}, {"body": "think hit thing moving stable leveraging render helper switch component soon enough chrome canary better error", "d": "3/2015"}, {"body": "demos recreate hemp issue nested working ember nested working ember", "d": "3/2015"}, {"body": "problems", "d": "3/2015"}, {"body": "problem work around explicitly setting templatename view", "d": "3/2015"}, {"body": "also running issue like manufaktor finding explicitly specify etc appropriate longer issues", "d": "3/2015"}, {"body": "also bitten bug upgrade ember ember", "d": "3/2015"}, {"body": "confirmed broken unless templatename explicitly defined view works", "d": "3/2015"}, {"body": "issue", "d": "3/2015"}, {"body": "looks related addressed", "d": "3/2015"}, {"body": "thanks rwjblue expected behavior always define view change past behavior would automatically grab template based name view", "d": "3/2015"}, {"body": "davidpett yes questioning change made seems regression though solve issue try dig tonighttomorrow morning try fix issue break use case", "d": "3/2015"}, {"body": "rwjblue also seeing errors even defined view defined function", "d": "3/2015"}, {"body": "thanks rwjblue", "d": "3/2015"}, {"body": "rwjblue example error described previous comment", "d": "3/2015"}, {"body": "app totally broken already started using new component helper awesome btw chance patch release", "d": "3/2015"}, {"body": "far tell breaks trying find top level outlet nt stop finds adding undefined check seems fix function impersonateanoutlet currentview view name might hack method comment megahax make outlets inside render helper work kill behavior probably cant worse", "d": "3/2015"}, {"body": "adriaaaaan bug fix appear next point release fix lands master train train train please use previous release using", "d": "3/2015"}, {"body": "problem", "d": "3/2015"}, {"body": "objects mixin embercomparable class override compare method custom serialization object returns object unfamiliar semantics comparing objects doubt useful address something specific", "d": "3/2015"}, {"body": "nevermind seen plenty cases makes sense manually write order avoid loop necessary", "d": "3/2015"}, {"body": "seems odd since ember usually autogenerates things also odd using instead", "d": "3/2015"}, {"body": "looking comes line exploring found issue another required define path well regardless based jsbin comment rwjblue appears used work without defined route change nt appear designed", "d": "3/2015"}, {"body": "maybe looks like following would fix issue obviously good thing interesting nt insert within application template outlet ca nt tell intentional", "d": "3/2015"}, {"body": "think intro description wrong attribute added added jsbin jsbin", "d": "3/2015"}, {"body": "basically happening boolean attribute falsey value set something empty string false work properly", "d": "3/2015"}, {"body": "thank helped solve problem fixed description", "d": "3/2015"}, {"body": "going keep open give mixonic chance review may regression fix unsure", "d": "3/2015"}, {"body": "ok", "d": "3/2015"}, {"body": "discussion decided edgecase boolean properties likely low usage htmlbars templates look like html reality different beast specifically attributes simply set instead use prop first logic described bound properties blog post aim bound properties literal quoted values behave consistently blank string via behaves inconsistent see developers run may patch behavior deprecation first report closing revisit becomes wider problem thanks listepo", "d": "3/2015"}, {"body": "unsure shooting link embercli locally work ember error caused using newer node duplicate getting fixed tracked", "d": "3/2015"}, {"body": "looking work latest version cli amp latest version ember linked locally inside project git pull update use latest version project anyway thanks time", "d": "3/2015"}, {"body": "problem gist generally point folks using latest builds ember embercli project maybe help", "d": "3/2015"}, {"body": "smile trying follow aware node requirement thank amp keep good work", "d": "3/2015"}, {"body": "sorry disregard upgrading emberqunit fixed issue", "d": "3/2015"}, {"body": "wait maybe recent changes specifically nt see deprecation warnings app breaks", "d": "3/2015"}, {"body": "ianvs might help", "d": "3/2015"}, {"body": "addon actually overriding custom function generally good idea fact working due large refactor completely private container lookup system addon need accommodate changes believe ember bug reproduce without overriding private internal methods use jsbin baseline absolutely get fixed", "d": "3/2015"}, {"body": "rwjblue ok thanks expert figured report case indeed bug appreciate taking look", "d": "3/2015"}, {"body": "removed", "d": "3/2015"}, {"body": "used", "d": "3/2015"}, {"body": "someone flesh rfc", "d": "3/2015"}, {"body": "ember inspector uses breaking change update support new format beforewhen commit change inspector would also benefit since currently parsing value", "d": "3/2015"}, {"body": "also favor need done behind feature flag help us ensure tooling ready go think needs rfc since still considered private api underscored already", "d": "3/2015"}, {"body": "private used ed", "d": "3/2015"}, {"body": "know property internal handy leverage two items app work tracking user actions analytic events route controller component injected service turns really good category google analytics events also reopen emberactionhandler add record analytic event logging client side errorswarns something like logstashsumologic via api call logging mixin provides container leveraged also decorated logdebugwarnerror methods assume general value container key cases extra data hash might useful", "d": "3/2015"}, {"body": "pretty annoying also css column count property might good solution event believe close issue open one repo", "d": "3/2015"}, {"body": "created issue website project", "d": "3/2015"}, {"body": "possible provide repro demo maybe embercli app issue", "d": "3/2015"}, {"body": "trentmwillis issues well think core issue helper nt handle gracefully", "d": "3/2015"}, {"body": "related unsure move pr forward", "d": "3/2015"}, {"body": "got reproduction working seems initial assumption wrong actual usage like issue appears nested model properties reproduced repo fixture data", "d": "3/2015"}, {"body": "update applying solution given nt fix anything track failing boundcomponentview since nt quite understand streams read hoping accomplish sure offer fix note changing line fixes problem nt think correct solution", "d": "3/2015"}, {"body": "digging ca nt seem reproduce without using ember data models thinking probably open instead", "d": "3/2015"}, {"body": "believe appropriate repo issue", "d": "3/2015"}, {"body": "ah bother nt realize split want refile aware way migrate issues github", "d": "3/2015"}, {"body": "ah bother nt realize split want refile aware way migrate issues github refile unfortunately best option", "d": "3/2015"}, {"body": "done closing misfiled", "d": "3/2015"}, {"body": "process route index promise undefined would indicate nt somewhere", "d": "3/2015"}, {"body": "stefanpenner thank issue actually ie nt reload files appropriately", "d": "3/2015"}, {"body": "need revert usage destructuring spread fix build", "d": "3/2015"}, {"body": "danmcclain mentioned might time could take look", "d": "3/2015"}, {"body": "rwjblue dig", "d": "3/2015"}, {"body": "tracked ticket fixing babel similar issue using spread project", "d": "3/2015"}, {"body": "et nt know consider bug initially reported though issue somewhat morphed goal", "d": "3/2015"}, {"body": "pretty easy polyfill", "d": "3/2015"}, {"body": "wycats yes could polyfill considered imho framework mutating platform classesobjects", "d": "3/2015"}, {"body": "next major babel use instead rwjblue nothing related reported babelbabel", "d": "3/2015"}, {"body": "arr amp amp arrconstructor array believe nt cross realm safe although likely happens rarely", "d": "3/2015"}, {"body": "stefanpenner good point", "d": "3/2015"}, {"body": "ok next babel major enable loose mode transformers assume values arrays ignore iterables helpers wont used direct references instead ie becomes enough cover usecase", "d": "3/2015"}, {"body": "sebmck also informed available babel experimental minutes ago", "d": "3/2015"}, {"body": "sebmck thank understanding chatting stef opened issue point essentially issue reported sorry confusion", "d": "3/2015"}, {"body": "think nt worry polyfilling stuff like browser vendors think add api without breaking web certainly safe ember standard compliant enforcing principle extensions native objects extent benefits", "d": "3/2015"}, {"body": "also context issue occurs well updated example compatible simply ignore cp use autogenerated id", "d": "3/2015"}, {"body": "seems like may duplicate fixed confirmdeny", "d": "3/2015"}, {"body": "nt think one fixes also tested betacanary first jsbin rwjblue weird behavior also explicitly pass id vs set elementid component really trying achieve id set using cp though", "d": "3/2015"}, {"body": "seeing ever supported could wrong assume calling return plain string many many places believe nt bugregression simply something support favor documenting explicitly api docs around following jsbin shows way get dynamic value", "d": "3/2015"}, {"body": "closing think last comment addresses things show worked would make regression happy reopen", "d": "3/2015"}, {"body": "latest version problem already solved", "d": "3/2015"}, {"body": "johnathansantos quite sure think saying good close feel free reopen missed something", "d": "3/2015"}, {"body": "foreach add iterator support ember planned quite ready yet", "d": "3/2015"}, {"body": "ok thanks iterator support sounds good", "d": "3/2015"}, {"body": "opsb ya hopefully get soon", "d": "3/2015"}, {"body": "going close iterator support come eventually question bug report", "d": "3/2015"}, {"body": "getting familiar part code base interested trying reproduce issue obviously getting jsbin simple project reproduces issue would best anything else could share help", "d": "3/2015"}, {"body": "chainnodeprototypeunchain seems get called time every transition method gets node chain key tries unchain destroy chain key reference sorts properties native ember well properties projects implementation code project noncli app using grunt apistub upgraded ember amp htmlbars used book hotel reservations issue occurs filling guest info transitioning confirmation screen going back refresh go back works ok took closer look problem key undefined node always hotelreservations seems hotelreservations normally property needing processed way nt see console transitioning around somehow winds scope going back confirmation causes problems actually json object provided apistub routesjs used test reservation views nt know winds unchain process chains object case type contentchainnode modelchainnode matters difficult see pattern processing nodes chain key chains parent chainnodes seems little like linkednode every node reference nodes seems like way gets node chain key might recursively go child nodes finds case hotelreservations nt", "d": "3/2015"}, {"body": "hoping code could share otherwise pretty hard reproduce however saw mention hotelreservations property begin property capital letter key treated global object special behavior might able work around issue renaming property hotelreservations case definitely experiencing bug", "d": "3/2015"}, {"body": "context inside helpers changed various versions controller view helper context consistent number versions considered public api intentional change preparation htmlbars glimmer work", "d": "3/2015"}, {"body": "work around listed worked versions correct way go sorry caused troubles", "d": "3/2015"}, {"body": "rwjblue thanks explanation going close", "d": "3/2015"}, {"body": "sorry caused troubles worries nt huge deal good know nt considered public api", "d": "3/2015"}, {"body": "trying update app ember noted workaround suggested drogus nt seem work handlebars helper coffeescript comes", "d": "3/2015"}, {"body": "perlun always last argument case providing helper would need accept correct signature callback", "d": "3/2015"}, {"body": "ah see seems changed bit since coming try advice see get working right assuming way helper able access viewcontroller used done design used possible one clearly argue whether good", "d": "3/2015"}, {"body": "seems changed bit since nope way build helpers changed since context signature structure right assuming way helper able access viewcontroller used view used need controller", "d": "3/2015"}, {"body": "rwjblue thanks works fine smile could elaborate bit undefined statement forum discussion pr similar describes background bit detail example helper used component would one access component", "d": "3/2015"}, {"body": "jokery using attribute elementin actions use dasherized code use camelcased", "d": "3/2015"}, {"body": "appears issue beta correct", "d": "3/2015"}, {"body": "may related work", "d": "3/2015"}, {"body": "error message kinda silly case issue specified template name twice removing duplicate template fixes issue demo working version", "d": "3/2015"}, {"body": "far tell related changes fallout htmlbars appear unintended semantic change fix possible presumably render helper nt set template view class line normal outletdriven renders happen view class use let manage template otherwise use default view class set template", "d": "3/2015"}, {"body": "whole section needs reworked remove usage completely reopen issue", "d": "3/2015"}, {"body": "rwjblue created new issue", "d": "3/2015"}, {"body": "awesome thank", "d": "3/2015"}, {"body": "robertolicious ember views tags default first snippet pushing adding tag via permitted browsers html instead make view another permitted parent tag", "d": "3/2015"}, {"body": "thank exactly looking never found use case", "d": "3/2015"}, {"body": "click helper works many users additionally jquery certainly works least embercli absolutely included phantomjs test runs please see documentation question may better suited discuss stack overflow outline problem detail bug report reading things wrong would need know version ember working error bad behavior example complete test misbehaves also suggest looking blog post async test helpers feel free reopen issue missed something", "d": "3/2015"}, {"body": "mixonic jquery work phantomjs tells click function jquery included let use jquery click posted stack overflow one ember community responds unless configured something wrong appear bug check code run tests", "d": "3/2015"}, {"body": "mixonic post stack overflow update full test using ember helpers posted throws errors clicks appear nothing clicks work jquery either jquery click needs defined phantomjs ember click helper needs actually click things", "d": "3/2015"}, {"body": "mixonic issue use dispatchevent might nice include ember test helpers", "d": "3/2015"}, {"body": "sorry accidentally posted original question wrong place moved answer question never leaving route transition happening parent button create supposed transition child outlet clicked active route", "d": "3/2015"}, {"body": "mgenev syntax shipped debated rather extensively design feel free dig around discussion better understand motivations really good reads question might better stackoverflow irc though block params yielded nested scope layout layout component called improve docs repo place discussion thanks", "d": "3/2015"}, {"body": "thanks place report confusing incomplete docs ember", "d": "3/2015"}, {"body": "mgenev changes api docs prs repo changes guides website prs", "d": "3/2015"}, {"body": "mixonic actually justification rfc linked confusing syntax actually called confusing exact reasons citing never countered much clear example offered good extra attriubtes preceding blog example names fullname name differing order mattering else would match mentioned makes really confusing also fact confusing unreadable syntax shipped mean ca nt fixed bugs ship get fixed time", "d": "3/2015"}, {"body": "mgenev extensive good bikeshedding topic following decision made core team members implemented feature small number days shipping stable release syntax think appropriate point observe wild complaining particular juncture likely unproductive", "d": "3/2015"}, {"body": "moved embercli request trabus closing", "d": "3/2015"}, {"body": "actually seems fixed updating latest git version", "d": "3/2015"}, {"body": "sorry post issue wrong place ready move", "d": "3/2015"}, {"body": "context inside helpers changed various versions controller view guess context change causing error updating helper add controller fix issue", "d": "3/2015"}, {"body": "thanks information fact set context manually call needcontext params force setup need context understand message chenges nt vary behavior code inside helper function nt use call unknownproperty called whatever permission object permission property", "d": "3/2015"}, {"body": "internal bind method passed right context ember work simplestream instance var view dataview possible talk ca nt guess logic manipulation give proposal bound object current scope early possible thanks", "d": "3/2015"}, {"body": "current solution problem define unknownproperty contains logic find permission return value early work php ant magic method get hope find better way solve", "d": "3/2015"}, {"body": "lets wait see actually ember bug", "d": "3/2015"}, {"body": "landed back subsequently reverted issues helpers needed support dasherized camel cased properties different values example used action actual function called blur", "d": "3/2015"}, {"body": "definitely favor fixing flag issue conversation rest team", "d": "3/2015"}, {"body": "uhm nt deprecated components", "d": "3/2015"}, {"body": "kajafon version use seems working ember lolmaus components use layoutname wo deprecations ember know waswill deprecated", "d": "3/2015"}, {"body": "specifying component tag contain phrasing content take look jsbin plain html showing browser correcting invalid markup create extra elements", "d": "3/2015"}, {"body": "rwjblue thanks really surprising would never expected", "d": "3/2015"}, {"body": "oh html crazy", "d": "3/2015"}, {"body": "orkon heard somewhere issue queue tried google failed official deprecation page mention found understand correctly case opposite deprecated favor components please correct wrong", "d": "3/2015"}, {"body": "experience issue well seems fixed canary already", "d": "3/2015"}, {"body": "confirmed looking beta fails canary nt stall", "d": "3/2015"}, {"body": "fixes hanging test fixed master pulling commit beta marking closed", "d": "3/2015"}, {"body": "rwjblue thank", "d": "3/2015"}, {"body": "problem talked rwjblue irc said fixed latest builds continue see", "d": "3/2015"}, {"body": "jsbin replicating issue certainly save time trying replicate problem", "d": "3/2015"}, {"body": "unfortunately ugly hack wrap img tags blocks", "d": "3/2015"}, {"body": "one question already issue open nuke issue", "d": "3/2015"}, {"body": "nope issue", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "rwjblue plans release", "d": "3/2015"}, {"body": "awesome sure test", "d": "3/2015"}, {"body": "quaertym unlikely day", "d": "3/2015"}, {"body": "rwjblue failing test indicating nt solve working fix", "d": "3/2015"}, {"body": "dgeb sounds good keep eye", "d": "3/2015"}, {"body": "ca nt use node gt building repo issue embarjsbuild tracked", "d": "3/2015"}, {"body": "making progress upgrading deps upgrade ember fixing tooling issues go", "d": "3/2015"}, {"body": "sounds like ember data issue open instead sorry trouble", "d": "3/2015"}, {"body": "done", "d": "3/2015"}, {"body": "may want open issue", "d": "3/2015"}, {"body": "btecu correct open issue ember data repo instead", "d": "3/2015"}, {"body": "ok sorry", "d": "3/2015"}, {"body": "worries", "d": "3/2015"}, {"body": "jsbin might helpful makes distinction outer nested links underline inner nested links underlined see always click outer nested links correct behavior observed edit linked bin", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "closing dupe", "d": "3/2015"}, {"body": "alternative solution", "d": "3/2015"}, {"body": "probably duplicate one closed irrelevant proposed solution", "d": "3/2015"}, {"body": "lolmaus workaround would great worked", "d": "3/2015"}, {"body": "really feels like work perhaps intentional seems weird probably called explicitly docs nt work", "d": "3/2015"}, {"body": "orkon thank suggestion like author question noted workaround smells boilerplate code believe addressed", "d": "3/2015"}, {"body": "grapho discovered works normally computed properties normal properties affected", "d": "3/2015"}, {"body": "appears nothing component consumes cp observers attempt merely observe state world force materialize working example", "d": "3/2015"}, {"body": "stefanpenner consumed component template", "d": "3/2015"}, {"body": "alexspeller hmm example consumes explicitly via get works suspect something funky template stream consumes mmun thoughts", "d": "3/2015"}, {"body": "stefanpenner even weirder original example property explicitly consumed via work case", "d": "3/2015"}, {"body": "comment removed due confusing issue", "d": "3/2015"}, {"body": "stefanpenner difference use computed property using noncomputed property causes example fail", "d": "3/2015"}, {"body": "exactly issue scare quotes misuse object system resolved new data model tl dr call property object existing value observers fired code also similar ways observers skip fired involving chain nodes etc sequence events hope helps debug future helper call executes foobar component created stream binding component begins initializing stream bindings connected stream binding calls note nt trigger observers objects never fire observers init phase set observers side sync value back forth component controller component finished initializing stream binding value context controller component finished instantiating called observers controller fire observer controller fires stream binding observer fires binding schedules sync queue omit details since relevant stream binding calls value nt changed observers component notified per tl dr", "d": "3/2015"}, {"body": "thanks much mmun detailed explanation really bug seems weird notifies changes property circumstances others works controller component bound unless computed property still would call bug whilst understanding implementation helps make sense seems inconsistent behaviour", "d": "3/2015"}, {"body": "mmun alexspeller understand right method works completely correct problem value myproperty actually change check propagate component right way deal update value using seems way case call really needed btw seems works computed properties computes properties return new object time work object returned computed property", "d": "3/2015"}, {"body": "really weird computed property cached return object previous example", "d": "3/2015"}, {"body": "alexspeller jsbin types comp properties yeah thought bug", "d": "3/2015"}, {"body": "oh explains causes computed property actually recalculate notifying observers changed actually updating property much implied docs", "d": "3/2015"}, {"body": "alexspeller controller working correctly firing observer controller well observer triggers binding synchronize bindings composed two parts path path case path points property controller path property component binding created observer added paths called controller triggers observer schedules synchronization binding run loop sync queue synchronization means call side value side precisely issue lies call becomes op value set previously case value always pojo", "d": "3/2015"}, {"body": "nt recompute anything specifically clears cache called key cp recursively calls cps depend key notifies observers listening key nt automatically get recomputed usually one notified observers end recompute value ideally recomputed asynchronously absorb churn", "d": "3/2015"}, {"body": "great makes sense look like bug make behave straightforward implementation something like objequals obj everything would needed guess personally hit issue months using emberjs think used workaround mentioned anyway maybe case needs emphasized ember guide", "d": "3/2015"}, {"body": "mmun adapted wording improve docs", "d": "3/2015"}, {"body": "made pull request add example uses model", "d": "3/2015"}, {"body": "also going put believe related", "d": "3/2015"}, {"body": "fix", "d": "3/2015"}, {"body": "solved thanks edward boat", "d": "3/2015"}, {"body": "also using emberjs beta plus embercli stable", "d": "3/2015"}, {"body": "trolling honestly took debugging passes realize fun puzzle thanks container closed overwriting results interesting unexpected interleavings instead keep separate use local remember poweruserprivate reference container even better nt put anything global make local module", "d": "3/2015"}, {"body": "wow detailed reply thank stef", "d": "3/2015"}, {"body": "problem explanation make sense", "d": "3/2015"}, {"body": "part nt yet understand shown assumption skip past mentioned final solution still source diving yet grok factory stuff", "d": "3/2015"}, {"body": "also curious emberinjectfactories overwriting overwriting keys emberinject api service controller unable find emberinjectfactories exposed source thanks quick answer original question", "d": "3/2015"}, {"body": "issues see technique mutating nonowned global bad ember could change way works future mutating good idea semantics monkeypatch rest factory validation class lookup time ensures missing collaborator errors call injected property example lookup find anything result computed property returns nothing found", "d": "3/2015"}, {"body": "implemented likely work fairly well imported userland addon code used inferred come ember open codebase months away remember coming new developer joins team realize nt ember feature try track api docsguides coming suggest something like following javascript apputilsinjectrepositiory import ember ember export default function name return embercomputed function propertyname var objectname name propertyname javascript import ember ember import injectrepository utilsinjectrepository var peopleroute emberrouteextend repository injectrepository person model function var repository thisget repository return repositoryfind", "d": "3/2015"}, {"body": "apputilsinjectrepositiory also lookup inject lacks construction time validation", "d": "3/2015"}, {"body": "rwjblue thanks insight see emberinjectxxxx factory validation would really like functionality curious emberinject api ever opened able add keysobjects injected one reasons liked monkey patch special import injection ember files would trying injection understand saying new developers confused first class emberinject api instead injection steer away emberinject rwjblue stefanpenner thank time", "d": "3/2015"}, {"body": "also curious emberinjectfactories overwriting overwriting keys emberinject api yet wink exactly point modify ember could completely breaking something could break app future revision global state mutation good", "d": "3/2015"}, {"body": "curious emberinject api ever opened able add keysobjects injected would like expose issued pull request shipped sure part api ready userland extension factory types one reasons liked monkey patch special import injection ember files would trying injection importing code wrote something avoid rather exactly thing embrace understand saying new developers confused first class emberinject api instead injection steer away emberinject saying using bad thing contrary think good feature saying though creating new different concept adding seem like ember feature confusing potentially cause problems future", "d": "3/2015"}, {"body": "rwjblue really excited emberinject api evolves especially exposed userland want clarify statement understand saying new developers confused first class emberinject api instead injection steer away emberinject reading response miscommunication part steer clear emberinject api stuff use function stefanpenner provided injection want fully embrace explore new emberinject api today future versions thank breaking part response answers", "d": "3/2015"}, {"body": "ahh gotcha see mean sorry miscommunication", "d": "3/2015"}, {"body": "found solution last live ok", "d": "3/2015"}, {"body": "hey think find setting extend rather solve problem keep template look something like proxy properties model like hope helps", "d": "3/2015"}, {"body": "sure fully follow throw together jsbin demonstrates use starting point need base jsbin", "d": "3/2015"}, {"body": "replicate issue remove value test textbox change zero first time remove zero replace zero instead go blank put new value keep repeating scenario agree issue test could submit replicates", "d": "3/2015"}, {"body": "calling another helper within helper really supported suggest changing setup tiny component would much future proof relies less internal privateish api demo", "d": "3/2015"}, {"body": "comment nt help please provide details preferably jsbin demonstrating issue happy reopen", "d": "3/2015"}, {"body": "party partner got us ember longer partner developed way amp apparently supported know everyone demoing things jsbin idea already rewritten dateinput component well happened blog says viewhelpers going away best things components seems figured much sat mar pm robert jackson notifications githubcom wrote comment nt help please provide details preferably jsbin demonstrating issue happy reopen reply email directly view github best regards bob van", "d": "3/2015"}, {"body": "changed version bit added outlets besides named outlets seem work better behaves strange navigating navigate away back eg thisandthat back see", "d": "3/2015"}, {"body": "added failing test see emberjsemberjs", "d": "3/2015"}, {"body": "issue may related", "d": "3/2015"}, {"body": "also believe related hijacking seems broken", "d": "3/2015"}, {"body": "duplicate", "d": "3/2015"}, {"body": "may browser bug", "d": "3/2015"}, {"body": "chrome firefox behavior", "d": "3/2015"}, {"body": "seeing issue reference many browser bug reports handle route work crude implementation", "d": "3/2015"}, {"body": "another workaround using component thoughts", "d": "3/2015"}, {"body": "duplicate though solution suggested work jsbin issue legit miguelmadero suggestions", "d": "3/2015"}, {"body": "issue apparently broader must something nt understand binding arrays different jsbin without service behaviour", "d": "3/2015"}, {"body": "ember observe call must use observable methods like docs working jsbins", "d": "3/2015"}, {"body": "bad thank", "d": "3/2015"}, {"body": "context helpers previously specified api changed number times throughout series initial htmlbars effort decided change helper context controller view around ember preparation implementing glimmer top htmlbars became clear could guarantee would always view instance change context chrism short context public api even though helpers relied upon change annoying sorry caused trouble necessary continued progress forward", "d": "3/2015"}, {"body": "rwjblue thanks always clear explanation issue reasons behind rolled back using ember fine amp means really able offer feedback beta testing version really excited glimmer fastboot many thanks hard work ember really incredible achievement", "d": "3/2015"}, {"body": "chrism issue got working pointing commit master", "d": "3/2015"}, {"body": "nevermind seems like ok organizational pain tons routes", "d": "3/2015"}, {"body": "changed mind using pods would like able following structure", "d": "3/2015"}, {"body": "timevans yes absolutely inclined believe resolver glitch investigate", "d": "3/2015"}, {"body": "stefanpenner thanks think nt handled think implementation named substates nt robust enough handle use case separate directories makes sense simplicity standpoint necessarily developer friendliness standpoint", "d": "3/2015"}, {"body": "correct path currently suppose could special case prevents anyone actual route seems fairly bad", "d": "3/2015"}, {"body": "actually disagree bad substates clientsloading means going add customization app explode number routes factor given level app around top level routes migrating ember builtin structures like make impossible figure rendered due difficulty finding file", "d": "3/2015"}, {"body": "ember removing termsnames use definitely good two ways make work prevent ambiguous would reserve route names absolutely backwards compatible many apps looked use global route named unrelated substate behavior perhaps could use instead think made framework level default series", "d": "3/2015"}, {"body": "rwjblue agree concerns making default series want make sure pain points naming scheme heard", "d": "3/2015"}, {"body": "perhaps could use instead make sense use since kinda follows existing naming schemes", "d": "3/2015"}, {"body": "work properly modules based resolvers due ambiguities resolver results check presence property resolver instance must make work globals scenario could set instantiating application something like definitely advised due conflicting paths globals resolver", "d": "3/2015"}, {"body": "illustrate problems encourage play removing configuration make named substates work specifically removing makes feature work", "d": "3/2015"}, {"body": "try take look demo app tonight", "d": "3/2015"}, {"body": "see problem template line breaks", "d": "3/2015"}, {"body": "canary build use located nt updated long time like midaugust last year removed theory could make sort redirect could used jsbin guides removed soonish update use embercli formatting guides", "d": "3/2015"}, {"body": "wrong timeline early november", "d": "3/2015"}, {"body": "hmm redirecting would good although misleading call latest would possible serve version ember prepended still worked nt used accidentally something regardless guides seems lot content removing breaks unfortunately", "d": "3/2015"}, {"body": "would possible serve version ember emberlatestjs prepended alert old version ember please update link still worked nt used accidentally something yes possible would problem eventually feel strongly add list things sure right path forward also canary jsbin older month ago already broken due missing ca nt really much fix highly likely jsbinsjsfiddle already broken making point right place alert ca nt fix", "d": "3/2015"}, {"body": "hmm guides rewrite guess old jsfiddles bins relatively minor especially broken nt massive complaints", "d": "3/2015"}, {"body": "questions better asked stackoverflow discourse likely stackoverflow much better venue issue tracker course exploring bug appears please feel free report back", "d": "3/2015"}, {"body": "actually trying run ember node window defined error rsvp read one forum resolved masters production help", "d": "3/2015"}, {"body": "nt seem like issue emberjs sounds like issues embercli please report issue please include os version npm version node version embercli version anything else might valuable", "d": "3/2015"}, {"body": "ah maybe trying build repo nt believe support windows builds yet project", "d": "3/2015"}, {"body": "suggested way handle scenario component purely view concern service asked given specific model returns bucket additional meta information especially information ephemeral", "d": "3/2015"}, {"body": "likely better ask stackoverflow nt forget link ideally provide one examples good suggestions made", "d": "3/2015"}, {"body": "reserved routeresource names object array basic application much better error message added beta released soonish error message says jsbin would prefer reserved words going close already much better messaging wise", "d": "3/2015"}, {"body": "see ok great thank rwjblue", "d": "3/2015"}, {"body": "reproduced going load ie windows using remote ie go click sign top right enter userpass bob error happen", "d": "3/2015"}, {"body": "site built using part makes narrowing tricky edit broc file like rebuild works great makes think eval something basically something variablefunction name munging breaks ie", "d": "3/2015"}, {"body": "get stack trace emberdebugjs", "d": "3/2015"}, {"body": "ideally isolate bug jsbin rule app code", "d": "3/2015"}, {"body": "oops realized nt happening minifyjs disabled seems bad", "d": "3/2015"}, {"body": "thanks quick response making jsbin would tough since using ember cli like noticed happens minified got everything checked private git let try stripping away bits see isolate issue identical version except minified", "d": "3/2015"}, {"body": "got minimal version site still stripping away much hopefully isolate error", "d": "3/2015"}, {"body": "code extremely stripped click button sign outin happens ie logging executes following code javascript var self token thisget token basic auth token thisset loading true ajaxhelperget apiaccountsauthenticate fmt token done function data textstatus response cookiehelperset email bob bobcom false cookiehelperset rememberme false true selfsend reloadaccount selftransitiontoroute index fail function response selfset loading false switch responsestatus case selfhandlefailure email password incorrect break default selfhandlefailure unknown error occurred processing request please try break reload account action picked application route triggers model function called example applicationhbs indexhbs using model could race condition sure full source basically bare bones ember cli project available", "d": "3/2015"}, {"body": "example familiar done emberrun blocks code need get fired run loop meant", "d": "3/2015"}, {"body": "necessary see using icajax", "d": "3/2015"}, {"body": "actually using simple wrapper wrote around ajax could issue", "d": "3/2015"}, {"body": "bsclifton sure related original issue code using runloop properly relies jquery promises runloop safe suggest guides runloop get make sure code correct ruled possible cause", "d": "3/2015"}, {"body": "awesome thanks heads smile lot learn javascript still cleaned ajax methods like replaced done always handlers tested seems make issue happen consistently latest version", "d": "3/2015"}, {"body": "full source available", "d": "3/2015"}, {"body": "project source fairly barebones updated code use icajax since embercliicajax included anyways default blueprints change going go ember source track", "d": "3/2015"}, {"body": "hard time finding exact source looks like morph used embermetalviews compiled emberjs debug prod source following lines happens enifed morphmorph exports function exports use strict var splice arrayprototypesplice error occurs inside ensurestartend function start always populated text dom element end always null", "d": "3/2015"}, {"body": "bsclifton thanks research really likely wrestling bug dom implementation like find time take look get release", "d": "3/2015"}, {"body": "could definitely keep mind error avoided setting minifyjs false brocfile definitely weird causes dom issue", "d": "3/2015"}, {"body": "expect apps want hooks run deterministic order making events would dodge problem needing care parent class replace another change parent class something subclass decide logic run parent pattern feels correct imo addon stomping parent addon bug going close since read like issue please let know questions feedback stuff little tricky", "d": "3/2015"}, {"body": "mixonic nt need run particular order however need model events run specific order beforemodel model aftermodel without able rely ca nt guarantee something put actually runs model make sense take look attached jsbin description see hitting model finished waiting promise", "d": "3/2015"}, {"body": "returns promise result disregard promise returned way guarantee things wait appropriately framework level mixins merged factory created way know functions async enforce run series automatically tldr override method async call must also chain return value avoid breaking promise finishes called updated jsbin", "d": "3/2015"}, {"body": "also clarify nothing last mixin rule applies time call async hook mixin", "d": "3/2015"}, {"body": "rwjblue yup makes sense got around problem would great beforemodel aftermodel simply events semantics around dealt within framework potential issue hidden behind addons abstraction example used simpleauth sure fairly widely used within community nt attempt deal async see documentation caught surprise eventhough makes perfect sense would behave way", "d": "3/2015"}, {"body": "submitted fix embersimpleauth async routing docs nt discuss calling think sort detail likely belongs api docs guides trek question maybe open issue see flesh guide details inheritance", "d": "3/2015"}, {"body": "thanks rwjblue appreciate jumping fixing simpleauth issue provide good example others looking forward team think getting away overrides move events already things like use within actions even use syntax see nt override init love abstract away issues something like even would give authors enough callback use letting ember handle around", "d": "3/2015"}, {"body": "talking removing details routable components rfc making events actions nt seem solve problem ordering hooks really matter cases suppose would ok also event nt seem like clear benefit", "d": "3/2015"}, {"body": "model hooks great performing route centric logic also means every mixin added route today uses hooks properly implement hooks calling super handling parents returned promises hooks events become agnostic mixins perform logic within event return promise ember coalesce returned values appropriately handle resolving returned promising continuing onto model pattern overriding init good practice think thing ember remove overriding methods encourage developers use events actions ensure later ember ecosystem grows conflicts removed hooks isolated mixins objects developers longer need call super handle results appropriately embers framework", "d": "3/2015"}, {"body": "aaronbhansen mentioned opposed nt see clear benefit think folks would amount issues regarding ordering since hooks often used authentication incorrect ordering could security concern today calling reiterate happy review pullrequest adds functionality discuss merits approach cons associated pretty sure never convince anything imaginary code", "d": "3/2015"}, {"body": "simplified removing loop mmun appears bound helper executed id passed second argument funky", "d": "3/2015"}, {"body": "details later issue class input helper", "d": "3/2015"}, {"body": "example see bound helper concats properly", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "yall best kissingcat", "d": "3/2015"}, {"body": "resolver resolvernormalize", "d": "3/2015"}, {"body": "cc tomdale likely related recent router app boot related refactorings", "d": "3/2015"}, {"body": "using injection get router may best bet", "d": "3/2015"}, {"body": "made work injection things broken given update try stable come", "d": "3/2015"}, {"body": "im assigning tom believe recent routerboot process refactoring may culprit", "d": "3/2015"}, {"body": "unsure accessing instance public api", "d": "3/2015"}, {"body": "unsure accessing routerjs instance app router public api nt believe people rely behavior sure alternative exists fix", "d": "3/2015"}, {"body": "imo worth always felt hackish better way get things guaranteed forever singletons", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "closing duplication", "d": "3/2015"}, {"body": "question probably better suited stack overflow unless reporting bug", "d": "3/2015"}, {"body": "ok thanks", "d": "3/2015"}, {"body": "afaik possible least way would like achieve would use one fragment like say thread use fragment deserialization hook router split fragment slug id would serialization hook model reverse process", "d": "3/2015"}, {"body": "jsbins illustrating issue works onwards nt work related", "d": "3/2015"}, {"body": "able solve issue adding name template outlet located", "d": "3/2015"}, {"body": "address", "d": "3/2015"}, {"body": "basically qp ca nt cp fundamental issue current qp system planned improved", "d": "3/2015"}, {"body": "understood thanks close keep things getting polluted around", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "also experiencing", "d": "3/2015"}, {"body": "experience controller triggering disconnect via triggeraction hits application controller fails temporary fix create function calls twice arguments", "d": "3/2015"}, {"body": "experience controller triggering disconnect via triggeraction hits application controller fails temporary fix create bugfixdisconnectoutlet function calls disconnectoutlet twice arguments actually turns needing call every time outlet rendered test click open layer click close modal closes fine test click open layer click open layer click close modal close click close modal closes close needs clicked n number times n number times outlet rendered", "d": "3/2015"}, {"body": "temporary fix", "d": "3/2015"}, {"body": "pr addresses mutewinter comment stacking multiple calls render original issue reported soliah regression still open", "d": "3/2015"}, {"body": "extended pr also close original issue", "d": "3/2015"}, {"body": "address", "d": "3/2015"}, {"body": "failing jsbin", "d": "3/2015"}, {"body": "related", "d": "3/2015"}, {"body": "sounds like dupe", "d": "3/2015"}, {"body": "mixonic one provides failing test", "d": "3/2015"}, {"body": "currently set way get work change render still nt hold parity latest release error", "d": "3/2015"}, {"body": "thanks putting together jsbin indeed regression rwjblue probably go milestone leave see fix kinda gross thorn side happy axe", "d": "3/2015"}, {"body": "sketch tack old behavior onto new infrastructure outlet view need notice occurrences helper ancestors probably looking finds one grab outlet state instead going next outlet router use inject appropriate outlet state inserted view", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "running issue since upgrading regarding code changed area using embermodals addon makes call thisrender route template name options specifying render template issue appendorphan gets called impersonateanoutlet get called sets wasused value think may impersonateanoutlet gets called renderhelper calling thisrender route issue addon setting things correctly regression details provide", "d": "3/2015"}, {"body": "drobannx please file new issue sounds like different problem", "d": "3/2015"}, {"body": "mixonic seems attrnode issue", "d": "3/2015"}, {"body": "get warning call easy reproduce happens", "d": "3/2015"}, {"body": "issue addon bug ember fix remove embercliappversion embercli app", "d": "3/2015"}, {"body": "seems related attrnode work flagging regression marking", "d": "3/2015"}, {"body": "seem ember cli related deep appears sync app something funky would suggest searching posting stack overflow help related issues need keep tracker focused ember cli bugd", "d": "3/2015"}, {"body": "one way might use embertesthelpers", "d": "3/2015"}, {"body": "cowboyd see warning mentioned falling back backwards compat nt sure way forward meaning beyond getting next deprecation warning", "d": "3/2015"}, {"body": "upgraded bit one well", "d": "3/2015"}, {"body": "cowboyd import syntax new", "d": "3/2015"}, {"body": "toranb hint likely nt bug rather question feel free cross link turns impossible considered bug", "d": "3/2015"}, {"body": "agreed thanks help guys", "d": "3/2015"}, {"body": "agreed thanks help guys", "d": "3/2015"}, {"body": "quick update anyone might find issue future able update simple container based projects like", "d": "3/2015"}, {"body": "taras think ecliappversions could guard runs per page", "d": "3/2015"}, {"body": "stefanpenner problem runs multiple times rather injected early enough included executed", "d": "3/2015"}, {"body": "ah", "d": "3/2015"}, {"body": "cc tomdale", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "random thoughtsfindings model hook returns array use arraycontroller basically arrayproxy controllermixin mixed model hook returns array arraycontroller automatically maintains alias property since arraycontroller arrayproxy expects implements model implement prototype extensions enabled fixed returning model hook jsbin tested following versions see version stopped working jsbins error error error logged async error logging broken error error works", "d": "3/2015"}, {"body": "fix", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "suspect fixed although someone confirm merge back ember", "d": "3/2015"}, {"body": "funny one basically setting object controller first enabling proxying behavior set controller falls back actually setting unless defined root controller solutions change controller extend instead add controller", "d": "3/2015"}, {"body": "thanks quick detailed reply rwjblue", "d": "3/2015"}, {"body": "explanation one major reasons removing case deprecation would idea model mutated add clearly intent", "d": "3/2015"}, {"body": "totally get never use objectcontroller default behavior actually forced proxy occur mentioned able get around add controller file declare embercontroller something adds value scenario see deprecation objectcontroller winwin", "d": "3/2015"}, {"body": "newer ember versions sure break old semantics tho", "d": "3/2015"}, {"body": "tried syntax mentioned index always undefined using", "d": "3/2015"}, {"body": "nt know enabled current beta work sure judging looking pr", "d": "3/2015"}, {"body": "interesting using stable beta release opt issue w nt valid index property inside loops update unless feature mentioned something turn thanks help", "d": "3/2015"}, {"body": "looks like quick bump embercli worked get index", "d": "3/2015"}, {"body": "like ember true see block params version approved", "d": "3/2015"}, {"body": "mmun thanks quick reply error correction stick w", "d": "3/2015"}, {"body": "weird releaseemberjs build jsbin contain embertemplatecompiler module produces add manually template compiler error gone", "d": "3/2015"}, {"body": "please post jsbin demo", "d": "3/2015"}, {"body": "think need ca nt quite get jsbin tests working tried copying docs gist failing demonstrate mean going take break first attempt call without template compiler loaded second attempt nothing handling action", "d": "3/2015"}, {"body": "think issue echoing sentiments stackoverflow post", "d": "3/2015"}, {"body": "solution post provides workaround well working jsbin workaround like see problem behavior action version workaround workaround removed", "d": "3/2015"}, {"body": "confident moment problem described issue believe bug best next step would create failing test embertesting suite", "d": "3/2015"}, {"body": "thanks guidance lukemelia way great talk emberconf visual paradigm like would want anything else try get failing test ember testing guide", "d": "3/2015"}, {"body": "also lukemelia explain technique ca nt find documentation controller returns response", "d": "3/2015"}, {"body": "especially wonder controllers return value request buggy solution", "d": "3/2015"}, {"body": "glad like talk flyswatter example workaround property set within standard part controller", "d": "3/2015"}, {"body": "yeah bad noticing make async helper work need know name promise controller way work someone test async actions controller", "d": "3/2015"}, {"body": "guide writing tests ember somewhere suspect write failing test file somewhere sure models controllers referenced loaded nt know controller add async method order test", "d": "3/2015"}, {"body": "lukemelia right revised jsbin testing meant corrected jsbin simplifies original example demonstrate meant yet test nt broken probably going drive insane", "d": "3/2015"}, {"body": "maybe really missing promises automatically added ember run loop", "d": "3/2015"}, {"body": "think need convention return promise action handler framework realizes async started test framework informed correctly rfc stackoverflow territory missing functionality really bug", "d": "3/2015"}, {"body": "maybe really missing promises automatically added ember run loop runloop nothing todo async test helpers waiting", "d": "3/2015"}, {"body": "runloop nothing todo async test helpers waiting nt async helpers know run loop completed nt tapping think need convention return promise action handler framework realizes async started test framework informed correctly totally agree basically ember goes asyncpromises road returning promises right thing default also feeling deeper deeper territory nt even figured ember test suite works submitting decisive rfc feels way core really informed", "d": "3/2015"}, {"body": "nt async helpers know run loop completed nt tapping runloop sync waiters checked router arbitrary promises held tests back tests would cause test pause forever", "d": "3/2015"}, {"body": "issue would like refreshmodel true replace true route queryparams see code using replace fine using refreshmodel true triggers refresh method return thisrouterrouterrefresh unclear expect nt propagate value replace causes issue", "d": "3/2015"}, {"body": "interesting part loop behavior broken may indicate computed property depending cached never recalculated requesting clarifications ember mainainers rotatinglight", "d": "3/2015"}, {"body": "nt meant observing overhead correctly maintaining observations complex scenarios quite high exists narrow path work general would strongly suggest taking different approach krisselden r", "d": "3/2015"}, {"body": "stefanpenner communication component block content always puzzling recommended way", "d": "3/2015"}, {"body": "latest ember children forward alternatively children report parents think actions bindings rather binding listening child modifications", "d": "3/2015"}, {"body": "stefanpenner ended setting editing property model list view representing works great way better approach felt odd setting property model nt database field", "d": "3/2015"}, {"body": "also childviews nt meant observing exactly thinking documentation think add submit pr", "d": "3/2015"}, {"body": "ran today though keypress work like keydown keyup created pull request", "d": "3/2015"}, {"body": "guess removed public api see example emberproxymixin undefined therefore working", "d": "3/2015"}, {"body": "btecu provide jsbin demonstrating also tell us version ember using well whether using handlebars htmlbars respective version thanks", "d": "3/2015"}, {"body": "shows nice assertion made canary believe assertion also", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "ca nt reproduce right may case errors swallowed somehow", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "jdmarshall", "d": "3/2015"}, {"body": "usually kept date bumped fiddle emberjsjsbincom usually updated shortly release going close", "d": "3/2015"}, {"body": "may wrong talking compatible jsfiddle nt peppered handlebars script tags edit yeah nt answer concerns", "d": "3/2015"}, {"body": "winnowed bit actions nt fire svg element xlink href means fine bit clicking dot works firefox chrome safari", "d": "3/2015"}, {"body": "workaround put clear rectangle front every sprite sure well scale", "d": "3/2015"}, {"body": "mean", "d": "3/2015"}, {"body": "yeah nt issue though initialize objectvalues least empty string", "d": "3/2015"}, {"body": "probably related", "d": "3/2015"}, {"body": "encountered problem recently likely related using embersimpleauth something similar caused based bug report retry transition router state nt updated link helpers comparing route wrong route info router state set called transition retried", "d": "3/2015"}, {"body": "thanks engwan issue manifested app using simpleauth well reduced testcase jsbin first post based investigation agree likely cause issue least related", "d": "3/2015"}, {"body": "watch instead", "d": "3/2015"}, {"body": "closed without explanation problem", "d": "3/2015"}, {"body": "clubajax believe use proper embertemplatecompiler matches ember version using", "d": "3/2015"}, {"body": "yes using wrong version embertemplatecompiler", "d": "3/2015"}, {"body": "azsam version use ember", "d": "3/2015"}, {"body": "benjaminhorn must use ships specific ember build", "d": "3/2015"}, {"body": "rwjblue thanks robert bad restart server works fine", "d": "3/2015"}, {"body": "emberconf project understand hopefully fix turns pervasive originally thought returning regular computed property cause data binding object lost", "d": "3/2015"}, {"body": "bumping participating feed", "d": "3/2015"}, {"body": "wagenet reproducible jsbin makdi prepared simplified reproduction embercli project reduced one route one template", "d": "3/2015"}, {"body": "talking core team sounds like nt something ca nt improve every case given removing globals support ember going close", "d": "3/2015"}, {"body": "thanks made clearer", "d": "3/2015"}, {"body": "martinthogersen ember looks generating controller used tweak default controllers project like assuming embercli adding controllers defined locations", "d": "3/2015"}, {"body": "rwjblue thanks may help look later order achive goal want either generate controller defined b modify queryparams controller initialized isnt possible right", "d": "3/2015"}, {"body": "issue using list view binding url href attribute inline template ill try build fiddle reproduces overview would controller template workaround worked aswell", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "came today actually recommend way guide testing components would use integration test helpers interact rendered component test behavior", "d": "3/2015"}, {"body": "confirm issue use multiple pollers makes use execute function periodically randomly stops executed restarted stopper poller executed changing solved problem moment", "d": "3/2015"}, {"body": "issue using type search failing jsbin", "d": "3/2015"}, {"body": "brief tour component syntax nt see way instantiating nested component directory preference would use traverse directories", "d": "3/2015"}, {"body": "relevant discussion", "d": "3/2015"}, {"body": "noticed well", "d": "3/2015"}, {"body": "topaxi believe dupe please reopen incorrect", "d": "3/2015"}, {"body": "proper way standalone way firing array change events removing dirty checking still relies point lots caches checked chain nodes streams views etc often local caches checked way notifypropertychange invalidate schedule recheck force dirty add obj standalone way fire arr force dirty cause dependent streams update cc mmun ebryn wycats", "d": "3/2015"}, {"body": "seeing error upgrading addon nt see helpers overrides mentioned repo shows error issue related function", "d": "3/2015"}, {"body": "gone", "d": "3/2015"}, {"body": "lots bugs chainsbindingsmeta destruction whole area needs revisited thoroughly cleaned likely something tackle postglimmer", "d": "3/2015"}, {"body": "bantic explored additional explanation going wrong", "d": "3/2015"}, {"body": "made addon component", "d": "3/2015"}, {"body": "subexp idea would work great could used like class name bindings syntax", "d": "3/2015"}, {"body": "fixed", "d": "3/2015"}, {"body": "thank reproduction mmun able track issue help solution fix land", "d": "3/2015"}, {"body": "thank rwjblue mmun best", "d": "3/2015"}, {"body": "believe getting well using latest embercli scenario follows master type route members filter one member click member go detail route click back get error import ember ember export default emberarraycontrollerextend primarymembers embercomputedfilterby model primaryflag true filtered function var model thisget primarymembers var searchterm thisget searchterm property primarymembers eachlastname searchterm pplsorting lastname asc gender desc sorted embercomputedsort filtered pplsorting limited function return thisget sorted slice property sorted eachlastname", "d": "3/2015"}, {"body": "error went away following instead filtered function var model thisget primarymembers var searchterm thisget searchterm property primarymembers searchterm", "d": "3/2015"}, {"body": "looks like angular typescript teams working together wycats get proper annotations specification see hope transpiled babel easily get real class support", "d": "3/2015"}, {"body": "annotations proposal proposal declarative properties going brought paris meeting march anticipate support babel pretty quickly assuming goes well smile", "d": "3/2015"}, {"body": "wycats also need jshint support annotations apply pressure", "d": "3/2015"}, {"body": "stefanpenner advanced proposal try get done", "d": "3/2015"}, {"body": "stefanpenner advanced proposal try get done get tooling pieces tee roll much quicker wycats need figure interop still", "d": "3/2015"}, {"body": "stefanpenner yeah proposal coming paris well make sure keep ember use case mind", "d": "3/2015"}, {"body": "stefanpenner yeah super proposal coming paris well make sure keep ember use case mind thanks keep loop gladly prototype something proposal", "d": "3/2015"}, {"body": "sure discussion overlaps react team looks mixins could expressed classes looks like could done solved annotation class point another use case outside ember", "d": "3/2015"}, {"body": "donaldpipowitch awesome good resource read shortly believe thing right expression desugars may clear", "d": "3/2015"}, {"body": "cc", "d": "3/2015"}, {"body": "thehydroimpulse future reference use notifications button issue get notifications without sending everyone message raisedhands", "d": "3/2015"}, {"body": "trek unfortunately watching project technically already subscribed issues nt get email notifications commenting unfortunately way around", "d": "3/2015"}, {"body": "thehydroimpulse go enable email notifications watched repos", "d": "3/2015"}, {"body": "rwjblue experiencing issue ember beta found issue looking functioning replace code fixed problem fix seemed registry stayed even", "d": "3/2015"}, {"body": "confirm running issue nt take care registry nt tested others", "d": "3/2015"}, {"body": "also hit", "d": "3/2015"}, {"body": "try look today", "d": "3/2015"}, {"body": "uses subexpressions used one register bound helper blocks", "d": "3/2015"}, {"body": "uses subexpressions used one register bound helper blocks would also like know", "d": "3/2015"}, {"body": "bound helpers blocks nt fit well old rendering model possible first class citizen glimmer lands", "d": "3/2015"}, {"body": "great boat", "d": "3/2015"}, {"body": "take look new helper get sense magic calls good uses support keybased diffing see", "d": "3/2015"}, {"body": "somewhat offtopic closely related use case idea would transpose handlebarsregisterhelper ewform options gt data optionsdata fn optionsfn view dataview context viewget context formview emberviewextend implementation removed emberhandlebarsviewhelperhelper formview options private even choose wrong approach try use still nt work like used basically empty exist forth use case basically register helper custom view even handlers like wireup helper template quite simple basic stuff block pointers ideas whatsoever resolve would extremely appreciated thanks", "d": "3/2015"}, {"body": "perlun default types block helpers use component caused make helper like instead component clear implementation", "d": "3/2015"}, {"body": "rwjblue nt write code first place discussed colleague technical design specific part details full code looks like btw handlebarsregisterhelper ewform options data optionsdata fn optionsfn view dataview context viewget context formview emberviewextend layout emberhandlebarscompile viewinline yield else yield emberhandlebarsviewhelperhelper formview options collection mix controllers reopening chief reason done helper rather component needs access context ie controller view used set validator questions rephrase ember approach mucking context helper work ember given moving towards direction routable components huge thanks advance", "d": "3/2015"}, {"body": "hey perlun try answer best use plain component handlebarshelper needed instead mucking context use dependency injection inject validator component components depending need aside code define class compile template every time helper called depending often may needlessly slow app ps sent email gmail still use ds", "d": "3/2015"}, {"body": "alexander thanks comment yes still use gmail nt replied email yet thanks smile problem multiple instances page validator scoped belongs contains list validators ie forms current context ie view controller child components set get touch closest parent register within validator used implement app sure dependency injection nt really solving problem specifically want connection one validator eg button within form disabled specific form invalid crucical words scope anything logically dom children key yeah know dynamic template compilation nt smartest thing world smile nt think sheer number instances big nt think performance impact bad case", "d": "3/2015"}, {"body": "ah okay perhaps could use wrappercomponent blockparams holding validator edit wrapper component yields validator turn passed child components argument bound property way form component hold shared validator instance", "d": "3/2015"}, {"body": "ah okay perhaps could use wrappercomponent blockparams holding validator please elaborate work core issue also used application framework use bunch application really nt want change public api ember minor entirely backwards compatible upgrade hint hint wink", "d": "3/2015"}, {"body": "anyone interested generic workaround issue came probably inefficient definitely upgradesafe monkey patch targets problematic xtian identified wraps property change notification although undoubtedly fragile observer solution solved problem one place whole app ymmv", "d": "3/2015"}, {"body": "proposed implementation flaw work properly used component used multiple times page middlepropertyname itemtree export default embercomponentextend displayvalue embercomputedindirect count itemtree countitemcount itemtree countitemcount think single shared instance indirect case sourcepropertyobserver lastsourceproperty variables also shared instances itemtree able solve using var computedindirect function middlepropertyname return function key value var sourceproperty thisget middlepropertyname", "d": "3/2015"}, {"body": "marsik right uses closed variable use variable instance update implementation add test soon probably tomorrow sometime thanks pointing", "d": "3/2015"}, {"body": "add another perspective solved problem various values solved really templates via follow helper would treat value given path path much reason dynamic form builderdata complex ago nt know approach would work latest emberbars even method prefer wanted validate path path use case", "d": "3/2015"}, {"body": "updated addon something similar marsik instead storing properties object used hashes module seemed better adding random properties object js import ember ember var sourcepropertyobservers var lastsourceproperties export default function indirect middlepropertyname return function key value var guid emberguidfor var sourceproperty thisget middlepropertyname property middlepropertyname", "d": "3/2015"}, {"body": "nice", "d": "3/2015"}, {"body": "also like see bake addon please nt take blanket never land core let kick around minor leagues see iteration needed locking api usage rwjblue writing something like yesterday theory reactive rendering work make technique overkill many cases light gordonkristan addon going close let know missed anything", "d": "3/2015"}, {"body": "afraid last version leak references memory primarily javascript developer correct wrong believe since nobody ever deletes keys sourcepropertyobservers lastsourceproperties cause references observer ember object closure reference kept memory forever", "d": "3/2015"}, {"body": "marsik true nt big deal people could cause issues creating lot objects way try think way around worse comes worst add properties object like", "d": "3/2015"}, {"body": "ksnyde track problem using bootstrap ca nt benefit plugin facing issue curious identify culprit may insight include running ember cli attempting get emberclirails work setup", "d": "3/2015"}, {"body": "jesuskwice matter removing aging emberclibootstrapsass plugin see loading bootstrapforember dependency problems typically compiler automatically matchup without issue guess offsheet template compiling maybe complicated good luck getting sorted", "d": "3/2015"}, {"body": "ksnyde nt really stringent limitations use case mainly trying get embercli play nice rails tried number different approaches avail still tinkering around bit drop hopes though thanks", "d": "3/2015"}, {"body": "also encountered perf issue currently looking possible workarounds see details jsbin demonstrating issue", "d": "3/2015"}, {"body": "jesenko although ready yet big effort aims address also yes nt workaround looking may time later week dig examples noone weekend feel free pester", "d": "3/2015"}, {"body": "stefanpenner great hoping glimmer would also improve initial render times waiting glimmer also one workarounds considering version used dbmonster app however performance issue still forked dbmonster repo added problematic component row initial rendering time rows went", "d": "3/2015"}, {"body": "tomdale wycats tests cases two", "d": "3/2015"}, {"body": "stefanpenner safest workaround would probably use raw handlebars templates pojo objects context rendering cells would make easier however guess implemented look able come something worth sharing extract addon", "d": "3/2015"}, {"body": "jesenko sounds good", "d": "3/2015"}, {"body": "pending glimmer may slightly change stream api", "d": "3/2015"}, {"body": "glimmer think wo nt need expose streams", "d": "3/2015"}, {"body": "stefanpenner thanks update new apis much simpler mmun sure statement currently creating streams helper figure way expose streams create lmk", "d": "3/2015"}, {"body": "timevans seems like could use tagless component plugs service", "d": "3/2015"}, {"body": "mmun would tagless component work statment ie", "d": "3/2015"}, {"body": "reference new ifelse helper looks like catching stuff though unsure could observe call time something additional required", "d": "3/2015"}, {"body": "timevans nt public api planned yet handle case glimmer helpers essentially pure functions wo nt manage streams similar bound helpers today concept keywords much powerful used internally implement many preglimmer helpers pretty much em keeping private collect enough use cases iron api suffice purposes please excuse typos typing phone", "d": "3/2015"}, {"body": "deprecation guide added", "d": "3/2015"}, {"body": "igort care take another look", "d": "3/2015"}, {"body": "issue longer exists latest stable beta canary hence closing", "d": "3/2015"}, {"body": "ran searching workaround", "d": "3/2015"}, {"body": "jackca nt tested final could work think ember version use test option try use phantomjs loads improvement maybe works", "d": "3/2015"}, {"body": "szines thanks tips clarify project original issue trying get onto nontrivial upgrade project size tried phantom appeared huge regression stability saw time using chromium test runner", "d": "3/2015"}, {"body": "jackca right nontrivial migrated first could try maybe better wait migrate still using old handlebar template compiler less hassle especially uses htmlbar bigger change", "d": "3/2015"}, {"body": "tomdale server side rendering great feature game changer estimate ready", "d": "3/2015"}, {"body": "yankovsky tomhuda said emberconf thing released june year keep tuned", "d": "3/2015"}, {"body": "closing believe attrnode gone glimmer world", "d": "3/2015"}, {"body": "emberrails fix", "d": "3/2015"}, {"body": "run", "d": "3/2015"}, {"body": "deploying heroku ended changing force expire assets get new templates going", "d": "3/2015"}, {"body": "bfcoder thanks yes tmp files issue make changes file error fixes figured next time update ember clearing tmp directory first", "d": "3/2015"}, {"body": "ditto givanse unclear instead", "d": "3/2015"}, {"body": "rauhryan go something like", "d": "3/2015"}, {"body": "noticed well", "d": "3/2015"}, {"body": "pretty sure got fixed outlet refactor please reopen still reproduced", "d": "3/2015"}, {"body": "verify works", "d": "3/2015"}, {"body": "ember released issue still present new timeline", "d": "3/2015"}, {"body": "wagenet might one people skimming code trying get understand goal might help", "d": "3/2015"}, {"body": "think come back tried achieve similar thing ictabs mentioned options registered order first time around subsequent registrations wrong order demo", "d": "3/2015"}, {"body": "hi rwjblue issue embercli version view code template code showing error console", "d": "3/2015"}, {"body": "think still problem related white spaces white spaces ember components nt preserved tested chrome firefox safari behaviour ember ember beta ember canary", "d": "3/2015"}, {"body": "came say seeing issue latest ember canary ipad though works ok iphone update actually affects iphone lt users using ipad ios mobile safari white screen death typeerror attempted assign readonly property ember infoversions", "d": "3/2015"}, {"body": "cjroebuck provide example app likely narrow extremely quickly", "d": "3/2015"}, {"body": "actually site right although beta version emberdata sent iphone mar stefan penner notifications githubcom wrote cjroebuck provide example app likely narrow extremely quickly reply email directly view github", "d": "3/2015"}, {"body": "take look afternoon really wish apple would fix bug", "d": "3/2015"}, {"body": "stefanpenner realising bug affects iphone lt users rolled back ember emberdata latest beta releases redeployed emberemberdata canary version still displaying bug loaded many thanks taking time look issue", "d": "3/2015"}, {"body": "cjroebuck sure actually users bug devices nt include iphone various ipads basically devices fine", "d": "3/2015"}, {"body": "confirmed crashing", "d": "3/2015"}, {"body": "looks like blowing around", "d": "3/2015"}, {"body": "appears issue different manifestation previous reduction nt replicate need run lunch continue investigation later someone help reduce problem would great", "d": "3/2015"}, {"body": "stefanpenner users complained app work iphone ipad running ios white screen unfortunately means debug issue looks similar one use ember though", "d": "3/2015"}, {"body": "orkon hmm seems likely bug rough silly apple", "d": "3/2015"}, {"body": "many false starts problem hilariously obvious use strict remover nt removing use stricts cc rwjblue thank mega massive yahoo app nearly runs canary p", "d": "3/2015"}, {"body": "ugh fix damned build", "d": "3/2015"}, {"body": "stefanpenner review output following builds canary copy bower copy modules containing definitely removed ever intend remove every module specific ones identified hit jit problem build system seems operating intended", "d": "3/2015"}, {"body": "builds app app contain use strict nt expect maybe interim build borked file annotation drop demonstrated app", "d": "3/2015"}, {"body": "stefanpenner yes correct something funky going", "d": "3/2015"}, {"body": "cjroebuck thanks bringing attention rwjblue see find someone ownchampion rigorous cross platform testing experience insure would caught know getting many apps work canary help catch issues make sure device included runs", "d": "3/2015"}, {"body": "see find someone ownchampion rigorous cross platform testing experience love general case apple needs fix stupid jit issue outstanding quite movement side rage", "d": "3/2015"}, {"body": "submitted fix latest round issues", "d": "3/2015"}, {"body": "fixed master", "d": "3/2015"}, {"body": "tested via travis anyone ci mobile devices", "d": "3/2015"}, {"body": "tested via travis anyone ci mobile devices needs tested device simulator wanted saucelabs style testing time lack champion move forward", "d": "3/2015"}, {"body": "running issue ember updates", "d": "3/2015"}, {"body": "facing issue bugs gets logged error works fine otherwise pagination pages change everything works fine edit using ember", "d": "3/2015"}, {"body": "seeing", "d": "3/2015"}, {"body": "facing issue gorandev logged compromise app flow workaround", "d": "3/2015"}, {"body": "hmm behavior trying implement able moment user type normally search box refreshes model route currently swallow transitionaborted errors typing ui nt respond well replace text box finished transition would prefer discard requests pile rather wait resolve javascript export default emberrouteextend queryparams q replace true refreshmodel true sort replace true refreshmodel true filter replace true refreshmodel true model function params return thisstorefind user params", "d": "3/2015"}, {"body": "trying use api get string templateview using ember got following error jsbin however string still rendered anything new consider", "d": "3/2015"}, {"body": "sorry wake back best practice seeing issue launching foundation modal action", "d": "3/2015"}, {"body": "running issue well benkiefer", "d": "3/2015"}, {"body": "remember correctly noticed difference click click right solved", "d": "3/2015"}, {"body": "click works occasionally ended solving answer question code looks like click modallaunchbtn andthen function waitfor function assertok find mymodal hidden runandwaitfor looks like basically means pause test take nap ideal least test drive modals", "d": "3/2015"}, {"body": "thanks benkiefer", "d": "3/2015"}, {"body": "behaviour also shown try observe array see comment method everything works expected", "d": "3/2015"}, {"body": "believe observable may stompable would probably cause land fix would like land glimmer branch pr radically changes much code got branch refactoring classnamebindings add test", "d": "3/2015"}, {"body": "believe classnames observable ah ok nt think nonobservable means error message stumbled upon today work seemed related least thought add input smile really curious glimmer ca nt wait seecode live action", "d": "3/2015"}, {"body": "see glimmer changed must fix", "d": "3/2015"}, {"body": "reviewed glimmer branch yet fixed checkbox still inherits despite registered container name", "d": "3/2015"}, {"body": "cc tomdale wycats", "d": "3/2015"}, {"body": "would like able sort array computed property item controller", "d": "3/2015"}, {"body": "array controller itemcontrollers deprecated go away nt believe fixing", "d": "3/2015"}, {"body": "moving asyncawait sync helpers really fix tooling side wip", "d": "3/2015"}, {"body": "running issue component say one place application create using handlebars another place create component programmatically inside foo component click call component created via handlebars everything works component created programmatically actions never occur correct way pass action programmatically creating component something else", "d": "3/2015"}, {"body": "think get around setting targetobject property sending component reference receiving component sure kosher solution worked past mar mikeazo notifications githubcom wrote running issue component say foo one place application create using handlebars foo someactiondosomething works fine another place create component programmatically foocreate someaction dosomething inside foo component click call thissendaction someaction component created via handlebars everything works component created programmatically actions never occur reply email directly view github", "d": "3/2015"}, {"body": "correct fix print targetobject handlebars created component targetobject set print programmatically created one null set manually everything worked", "d": "3/2015"}, {"body": "formtop actions actionchange formbottom actionchange actionchange fire actionchange event formbottom formtop way context shifting works nt problem anymore yielded block actions bubble lexically", "d": "3/2015"}, {"body": "foocreate someaction dosomething passing create also legit reopen example provided pain", "d": "3/2015"}, {"body": "stefanpenner saying newer versions ember nt set targetobject right", "d": "3/2015"}, {"body": "appear real issue sure closed", "d": "3/2015"}, {"body": "looks like issue revolves around basic used represent root controller view amp route classes ember controller amp view going away basic component resolved container revisit issue ember", "d": "3/2015"}, {"body": "taras yes attempt make sure reserved route name point specific plans remove requirement", "d": "3/2015"}, {"body": "howdy think run conundrum nested components let say play button component inside post component button component template looks like containing component simply calls passes audio context queue button clicked even propagates button component however following code within button component propagates containing post component impression pr calling child component would eventually bubble route however results error stating parent component lacks action handler action goalthinking reusable queue button component simply received audio object matter called directly template nested infinite components application route would eventually receive action act upon mentioned design assume referring behavior nested components bubble past parent component see changing ember allowing behavior approach described rethought", "d": "3/2015"}, {"body": "ran issue today simple menu component gets populated dynamically route controller need use generic template like problem found even breaking action component stopped app bubble transition actions application route wanted create generic solution instead explicitly setting action corresponding actions component created generic action component catches original action sends parentview template component parentview simply caught resent controller turn made follow normal behaviour bubble tree", "d": "3/2015"}, {"body": "unnfortunately issue little complex component nested two levels within components button nested within article nested within list articles level component trying avoid catching child components action parent component manually bubbling believe looking way force bubble component action way chain router instead caught parent component note directly using view components", "d": "3/2015"}, {"body": "really need land land improve actions yielded block params help address pain avoiding need bubbling entirely", "d": "3/2015"}, {"body": "interesting mixonic readlearn avoid need bubbling linearza forgot mention directly using controllers components property", "d": "3/2015"}, {"body": "joshlevinson improved actions rfc one place look gave talk new patterns components january video slides links jsbins ideas blocks us making official api landing glimmer refactor", "d": "3/2015"}, {"body": "joshlevinson understand also multiple nested components example menu component menu items also components case menu component parentview menu item component simply catch menu pass parentview menu case application view sends controller onwards route normal actions bubble agreed manual minimal solution unless hierarchy going change bad either stays within ember convention earlier used hackier solution also consider think bubbling better", "d": "3/2015"}, {"body": "linearza actually think may settle hackier solution time see temporary solution awaiting permanent fix whereas manual bubbling could appear less appreciate explanation think idea unless hierarchy going change bad actually goes ember convention components knowledge application hierarchycontext unless good reason example components action handled differently dependent context would want catch action parent component actbubble however say general rule component work matter entire reason chose build parts app building components reason unclear components nt bubble actions way application perhaps mixonic allusion work even better", "d": "3/2015"}, {"body": "hello guys condition statement changes get error reproduce problem click toggle button toggles boolean property", "d": "3/2015"}, {"body": "mupkoo fixed outlet refactor released soon", "d": "3/2015"}, {"body": "thank update rwjblue", "d": "3/2015"}, {"body": "possible issue rise", "d": "3/2015"}, {"body": "regression since canary fixed pwfisher post still seeing throws click rerender twice observe console logs", "d": "3/2015"}, {"body": "hey guys progress issue good workaround rerender full appview also needed change app locale", "d": "3/2015"}, {"body": "something like", "d": "3/2015"}, {"body": "adds extra elements sure issue could", "d": "3/2015"}, {"body": "also confirm skeleton bootstrap responsive grids work embercli current beta release ember nt time post js fiddle problem described every responsive grid attempted use", "d": "3/2015"}, {"body": "provide example", "d": "3/2015"}, {"body": "problem specify number args pass instead making helper capable accepting number arguments", "d": "3/2015"}, {"body": "aamirafridi expect land improved helper api better support going stuck handlebars function signature", "d": "3/2015"}, {"body": "continuing question ajax response like name john title mr salary name shawn title mr salary make json inside array ember object", "d": "3/2015"}, {"body": "need ember objects plan use observers suggest regardless question seems better suited stack overflow discuss site closed ticket thanks", "d": "3/2015"}, {"title": "document master readme excluding sizzle supported build", "body": "original issue title custom build branch produces file gives sizzle undefined js error hi need smallest build debug issue next command used cooking build error record affected", "num": "2184", "d": "3/2015"}, {"title": "test factory use cases introjs", "body": "lot logic introjs test two browser use case common nodejsdom cover scenarios freely changing code actually breaks tests", "num": "2181", "d": "3/2015"}, {"title": "error indication getscript nt execute script sent mime textplain", "body": "gist makes call trying run jsbin console dutifully shows script loaded network tab shows indeed request gistgithubcom returned script problem script wo nt ever execute know github returns sets failure execute nt entirely surprising think fact called misleading undefined nt indicator undefined even script executes jsbin raises separate issue exactly supposed contain body script result apparently script called second jsbin returns console still shows", "num": "2178", "d": "3/2015"}, {"title": "settimeout defined referenceerror commonjslike environment firefox sdk", "body": "unusual usecase jquery sdk addon obvious window object reason manipulate dom injected content scripts fact hidden window means jquery usable things like deferreds etc main indexjs first three lines firefox magic get hold hidden window important javascript var cc ci require chrome var hiddendomwindow cc mozillaorgappshellappshellservice getservice cinsiappshellservice hiddendomwindow var j require jquery hiddendomwindow var deferred jdeferred done function value consolelog done value deferredresolve hello world throws settimeout defined referenceerror ing jquery following stack trace line jqueryjs environment nt however fix instances usage jquery", "num": "2177", "d": "3/2015"}, {"title": "introjs code truncated", "body": "introjs code file appears truncated line opening bracket line", "num": "2176", "d": "3/2015"}, {"title": "consider evaling responses crossdomain queries", "body": "currently clientside code crossdomain url default json look url response guess protocol use certain conditions eg url contains response javascript jquery autoguess jsonp used automatically eval response query behavior dangerous introduce xss vulnerabilities also potentially unexpected caller nt explicitly set might surprising unexpected eval response server present imagine might cause subtle xss vulnerabilities deployed code uses jquery think would worth considering whether possible change automatic behavior good principle might nt eval response crossdomain server unless developer requested could reasonably anticipate would happen course backwards compatibility existing jquery code going challenge nt know whether good way thread needle backwards compatibility existing code creating traps unwary code looks entirely reasonable actually xss vulnerability perhaps possible jquery bit smarter instance developer calls nt explicitly set could jquery use instead feasible disable autojsonp step back bit least crossdomain queries lacking data usage jquery apis nt know might possible smells like area changes jquery behavior might help developers avoid getting bit subtle xss bugs see eg usual resources security risks eval untrusted code", "num": "2175", "d": "3/2015"}, {"title": "docs get specify condition secure", "body": "documentation get mention conditions causes xss vulnerability describe developers need avoid introducing xss using get particular unsafe comes untrusted source eg attacker another user apparently two problems first attacker controls attacker arrange hold something like arrange respond request malicious javascript jquery jsonp autodetection eval javascript found response request making call xss vulnerability second attacker controls attacker arrange url arrange respond request malicious javascript served set something javascriptlike footgun clear documentation introduce kind vulnerability part url controlled attacker documentation mention fact might autoguess jsonp eval response server let alone conditions happens also mention might eval response server set make look like javascript documentation nt describe developers safe documenting clearly would help developers avoid inadvertent xss vulnerabilities code apparently url might partially completely attacker control safe way fetch json url use particular necessary set set option fact apparent documentation described documentation clearly also appears way set combination settings method url might attacker control necessary use see details", "num": "2174", "d": "3/2015"}, {"title": "docs getjson specify conditions secure", "body": "documentation getjson mention conditions causes xss vulnerability describe developers need avoid introducing xss using getjson particular unsafe comes untrusted source eg attacker another user attacker controls attacker arrange hold something like arrange respond request malicious javascript jquery jsonp autodetection eval javascript found response request making call xss vulnerability footgun clear documentation introduce kind vulnerability part url controlled attacker documenting clearly would help developers avoid inadvertent xss vulnerabilities code apparently url might partially completely attacker control safe way fetch json url use fact apparent documentation described documentation clearly see details", "num": "2173", "d": "3/2015"}, {"title": "obj trigger nt work plain javascript objects length property", "body": "docs state works plain javascript objects pubsub manner together however nt work whenever object property repro steps works nt work guess logic intended detect arrays gone haywire", "num": "2172", "d": "3/2015"}, {"title": "fneach fails argument function class", "body": "following code print myclass instead document tested", "num": "2171", "d": "3/2015"}, {"title": "npm install error windows", "body": "info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli install verbose cli g verbose cli contextify info using npm info using node silly cache add args contextify null verbose cache add spec contextify silly cache add parsed spec raw contextify silly cache add scope null silly cache add name contextify silly cache add rawspec silly cache add spec silly cache add type range verbose addnamed contextify silly addnamed semvervalid null silly addnamed semvervalidrange silly addnamerange name contextify range hasdata false silly maptoregistry name contextify silly maptoregistry using default registry silly maptoregistry registry silly maptoregistry uri verbose addnamerange registry flight fetching verbose request uri verbose request auth needed info attempt registry request try verbose request id verbose etag http request get http silly get cb silly get date thu mar gmt silly get server apache silly get via varnish silly get lastmodified thu mar gmt silly get cachecontrol silly get etag silly get age silly get xservedby silly get xcache hit silly get xcachehits silly get xtimer silly get vary accept silly get contentlength silly get keepalive silly get connection keepalive verbose etag cache verbose get saving contextify f usersjackzhangappdataroamingnpmcacheregistrynpmjsorgcontextifycachejson silly addnamerange number name contextify range hasdata true silly addnamerange versions contextify silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange verbose addnamed contextify silly addnamed semvervalid silly addnamed semvervalidrange silly cache afteradd contextify verbose afteradd f flight writing verbose afteradd f written silly install resolved name contextify silly install resolved version silly install resolved description turn object persistent execution context silly install resolved author name brian mcdaniel email gmailcom silly install resolved contributors silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved keywords context vm silly install resolved repository silly install resolved type git silly install resolved url silly install resolved main libcontextify silly install resolved scripts test nodeunit test install nodegyp rebuild silly install resolved engines node silly install resolved licenses object silly install resolved dependencies bindings nan silly install resolved devdependencies nodeunit silly install resolved gypfile true silly install resolved githead silly install resolved bugs url silly install resolved homepage silly install resolved id contextify silly install resolved shasum silly install resolved contextify silly install resolved npmversion silly install resolved nodeversion silly install resolved npmuser name brianmcd email gmailcom silly install resolved maintainers object silly install resolved dist silly install resolved shasum silly install resolved tarball silly install resolved directories silly install resolved resolved silly install resolved readme error readme data found info install contextify f usersjackzhangappdataroamingnpm info installone contextify verbose installone contextify f usersjackzhangappdataroamingnpm flight installing verbose lock using f f usersjackzhangappdataroamingnpmnodemodulescontextify silly install write writing contextify f usersjackzhangappdataroamingnpmnodemodulescontextify silly cache addnamed cb contextify verbose unbuild nodemodulescontextify verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextify verbose tar unpack f verbose tar unpacking f usersjackzhangappdataroamingnpmnodemodulescontextify verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextify silly gunztarperm modes silly gunztarperm extractentry packagejson silly gunztarperm modified mode packagejson silly gunztarperm extractentry npmignore silly gunztarperm modified mode npmignore silly gunztarperm extractentry readmemd silly gunztarperm modified mode readmemd silly gunztarperm extractentry changelog silly gunztarperm modified mode changelog silly gunztarperm extractentry bindinggyp silly gunztarperm modified mode bindinggyp silly gunztarperm extractentry libcontextifyjs silly gunztarperm modified mode libcontextifyjs silly gunztarperm extractentry testcontextifyjs silly gunztarperm modified mode testcontextifyjs silly gunztarperm extractentry licensetxt silly gunztarperm modified mode licensetxt silly gunztarperm extractentry srccontextifycc silly gunztarperm modified mode srccontextifycc silly gunztarperm extractentry wscript silly gunztarperm modified mode wscript info preinstall contextify silly prepareforinstallmany adding bindings contextify dependencies silly prepareforinstallmany adding nan contextify dependencies silly cache add args nan null verbose cache add spec nan silly cache add parsed spec raw nan silly cache add scope null silly cache add name nan silly cache add rawspec silly cache add spec lt silly cache add type range verbose addnamed nan gt lt silly addnamed semvervalid null silly addnamed semvervalidrange gt lt silly addnamerange name nan range lt hasdata false silly maptoregistry name nan silly maptoregistry using default registry silly maptoregistry registry silly maptoregistry uri verbose addnamerange registry flight fetching verbose request uri verbose request auth needed info attempt registry request try verbose etag http request get silly cache add args bindings null verbose cache add spec bindings silly cache add parsed spec raw bindings silly cache add scope null silly cache add name bindings silly cache add rawspec silly cache add spec silly cache add type range verbose addnamed bindings silly addnamed semvervalid null silly addnamed semvervalidrange silly addnamerange name bindings range hasdata false silly maptoregistry name bindings silly maptoregistry using default registry silly maptoregistry registry silly maptoregistry uri verbose addnamerange registry flight fetching verbose request uri verbose request auth needed info attempt registry request try verbose etag http request get http silly get cb silly get date thu mar gmt silly get server apache silly get via varnish silly get lastmodified thu mar gmt silly get cachecontrol silly get etag silly get age silly get xservedby silly get xcache hit silly get xcachehits silly get xtimer silly get vary accept silly get contentlength silly get keepalive silly get connection keepalive verbose etag cache verbose get saving bindings f usersjackzhangappdataroamingnpmcacheregistrynpmjsorgbindingscachejson silly addnamerange number name bindings range hasdata true silly addnamerange versions bindings silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange verbose addnamed bindings silly addnamed semvervalid silly addnamed semvervalidrange silly cache afteradd bindings verbose afteradd f flight writing verbose afteradd f written http silly get cb silly get date thu mar gmt silly get server apache silly get via varnish silly get lastmodified thu mar gmt silly get cachecontrol silly get etag silly get age silly get xservedby silly get xcache hit silly get xcachehits silly get xtimer silly get vary accept silly get contentlength silly get keepalive silly get connection keepalive verbose etag cache verbose get saving nan f usersjackzhangappdataroamingnpmcacheregistrynpmjsorgnancachejson silly addnamerange number name nan range lt hasdata true silly addnamerange versions nan silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange silly addnamerange verbose addnamed nan silly addnamed semvervalid silly addnamed semvervalidrange silly cache afteradd nan verbose afteradd f flight writing verbose afteradd f written silly install resolved name bindings silly install resolved description helper module loading native module node file silly install resolved keywords native addon bindings gyp waf c c silly install resolved version silly install resolved author silly install resolved name nathan rajlich silly install resolved email nathan tootallnatenet silly install resolved url silly install resolved repository silly install resolved type git silly install resolved url git githubcomtootallnatenodebindingsgit silly install resolved main bindingsjs silly install resolved bugs url silly install resolved homepage silly install resolved license mit silly install resolved githead silly install resolved id bindings silly install resolved scripts silly install resolved shasum silly install resolved bindings silly install resolved npmversion silly install resolved npmuser name tootallnate email nathan tootallnatenet silly install resolved maintainers object object silly install resolved dist silly install resolved shasum silly install resolved tarball silly install resolved directories silly install resolved resolved silly install resolved readme error readme data found silly install resolved name nan silly install resolved version silly install resolved description native abstractions nodejs c header node compatibility silly install resolved main includedirsjs silly install resolved repository type git url git githubcomrvaggnangit silly install resolved scripts silly install resolved test tap gc testjstestjs silly install resolved rebuildtests nodegyp rebuild directory test silly install resolved contributors silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved object silly install resolved devdependencies silly install resolved bindings silly install resolved nodegyp silly install resolved tap silly install resolved xtend silly install resolved license mit silly install resolved githead silly install resolved bugs url silly install resolved homepage silly install resolved id nan silly install resolved shasum silly install resolved nan gt lt silly install resolved npmversion silly install resolved nodeversion silly install resolved npmuser name rvagg email rod vaggorg silly install resolved maintainers object object silly install resolved dist silly install resolved shasum silly install resolved tarball silly install resolved directories silly install resolved resolved silly install resolved readme error readme data found info install bindings f usersjackzhangappdataroamingnpmnodemodulescontextify info install nan f usersjackzhangappdataroamingnpmnodemodulescontextify info installone bindings verbose installone bindings f usersjackzhangappdataroamingnpmnodemodulescontextify flight installing info installone nan verbose installone nan f usersjackzhangappdataroamingnpmnodemodulescontextify flight installing verbose lock using f f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose lock using f f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings silly install write writing nan f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan silly cache addnamed cb nan verbose unbuild nodemodulescontextifynodemodulesnan silly install write writing bindings f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings silly cache addnamed cb bindings verbose unbuild nodemodulescontextifynodemodulesbindings verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings verbose tar unpack f verbose tar unpacking f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose tar unpack f verbose tar unpacking f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings silly gunztarperm modes silly gunztarperm modes silly gunztarperm extractentry packagejson silly gunztarperm modified mode packagejson silly gunztarperm extractentry packagejson silly gunztarperm modified mode packagejson silly gunztarperm extractentry readmemd silly gunztarperm modified mode readmemd silly gunztarperm extractentry includedirsjs silly gunztarperm modified mode includedirsjs silly gunztarperm extractentry readmemd silly gunztarperm modified mode readmemd silly gunztarperm extractentry bindingsjs silly gunztarperm modified mode bindingsjs silly gunztarperm extractentry licensemd silly gunztarperm modified mode licensemd silly gunztarperm extractentry dntrc silly gunztarperm modified mode dntrc silly gunztarperm extractentry appveyoryml silly gunztarperm modified mode appveyoryml silly gunztarperm extractentry nanh silly gunztarperm modified mode nanh info preinstall bindings silly gunztarperm extractentry silly gunztarperm modified mode silly install resolved verbose build f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings info build f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings verbose linkstuff true verbose linkstuff f usersjackzhangappdataroamingnpmnodemodules verbose linkstuff false verbose linkstuff f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodules info linkstuff bindings verbose linkbins bindings verbose linkmans bindings verbose rebuildbundles bindings info install bindings info postinstall bindings verbose unlock done using f f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesbindings silly gunztarperm extractentry silly gunztarperm modified mode silly gunztarperm extractentry nannewh silly gunztarperm modified mode nannewh silly gunztarperm extractentry changelogmd silly gunztarperm modified mode changelogmd info preinstall nan silly install resolved verbose build f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan info build f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose linkstuff true verbose linkstuff f usersjackzhangappdataroamingnpmnodemodules verbose linkstuff false verbose linkstuff f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodules info linkstuff nan verbose linkbins nan verbose linkmans nan verbose rebuildbundles nan info install nan info postinstall nan verbose unlock done using f f usersjackzhangappdataroamingnpmnodemodulescontextifynodemodulesnan verbose build f usersjackzhangappdataroamingnpmnodemodulescontextify info build f usersjackzhangappdataroamingnpmnodemodulescontextify verbose linkstuff true verbose linkstuff f usersjackzhangappdataroamingnpmnodemodules verbose linkstuff true verbose linkstuff f usersjackzhangappdataroamingnpmnodemodules info linkstuff contextify verbose linkbins contextify verbose linkmans contextify verbose rebuildbundles contextify verbose rebuildbundles bindings nan info install contextify verbose unsafeperm lifecycle true info contextify failed exec install script verbose unlock done using f f usersjackzhangappdataroamingnpmnodemodulescontextify verbose stack error contextify install verbose stack exit status verbose stack eventemitter program verbose stack eventemitteremit verbose stack childprocess program verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid contextify verbose cwd f githubjquery error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs install g contextify error node error npm error code elifecycle error contextify install error exit status error failed contextify install script nodegyp rebuild error likely problem contextify package error npm error tell author fails system error nodegyp rebuild error get info via error npm owner ls contextify error likely additional logging output verbose exit true verbose unbuild nodemodulescontextify info preuninstall contextify info uninstall contextify verbose unbuild rmstuff contextify f usersjackzhangappdataroamingnpmnodemodules info postuninstall contextify verbose gentlyrm vacuuming f usersjackzhangappdataroamingnpmnodemodulescontextify silly gentlyrm purging f usersjackzhangappdataroamingnpmnodemodulescontextify silly gentlyrm quitting entries f usersjackzhangappdataroamingnpmnodemodules", "num": "2170", "d": "3/2015"}, {"title": "jquery angular requests assets multiple times cors enabled webserver", "body": "ok bit crazy moving parts try give happening simply nginx running cors enabled separately django web app running port serving api use cors headers access api port things get weird page loads scripts rerequested jquery breaks bunch things couple pics console reference tracked line makes sense page would want check see cors enabled trying run resources understanding adding preflight crossdomain request nt exact opposite want want add preflight cors related request headers cross domain request nt perhaps would better make sense please let know questions perhaps take local server illustrate happening", "num": "2169", "d": "3/2015"}, {"title": "find mouse buttons pressed", "body": "need way check mouse button pressed tried record mousedown mouseup events release two mouse buttons screen one mouseup event fired also cheat around using mouseleave events", "num": "2168", "d": "3/2015"}, {"title": "html invoked shorthand tag skip next closing tag generate appropriate closing tag", "body": "expected behavior invoking html shorthand closing tag function generate closing tag leave intact code outside shorthand closed tag actual outcome element whose html code replaced via html function shorthand form function replace code next closing tag even duh closing tag belongs different node dom steps reproduce see outcome calling html replace html code full short hand tags jsfiddle", "num": "2167", "d": "3/2015"}, {"title": "nt publish distcdn", "body": "directory nt published npmbower meant generate files send various cdns later refs", "num": "2164", "d": "3/2015"}, {"title": "", "body": "", "num": "2163", "d": "3/2015"}, {"title": "noop master", "body": "master modifies sinon fake timers heavily perhaps task nt run one recent sinon updates", "num": "2160", "d": "3/2015"}, {"title": "toggle checkboxes set checked state internal checkbox", "body": "hi example great internal checkbox radiobutton state remains expected behavior click button inner checkbox gets accordingly looking toggle function bootstrap see implemented nt work bootstrap example page website", "num": "2157", "d": "3/2015"}, {"title": "download error", "body": "probably correct place report today following error console get net errtoomanyredirects since many sites includes jquery directly url think looked asap many thanks work jakub", "num": "2156", "d": "3/2015"}, {"title": "merge function add code firstlength", "body": "length first increase automatically merge function add code firstlength", "num": "2155", "d": "3/2015"}, {"title": "update jsdom amp drop obsolete workarounds", "body": "currently test jsdom latest version supporting nodejs test example jsdom document created via body", "num": "2153", "d": "3/2015"}, {"title": "run promisesa test suite real browsers", "body": "currently running promisesa tests node mean mostly untested nt know really works browsers get test suite run real browsers problem since suite uses getters heavily even getting run browsers would huge win musthave beta imo ready final set milestone refs refs", "num": "2152", "d": "3/2015"}, {"title": "outerhtml", "body": "please implement function already compelling", "num": "2151", "d": "3/2015"}, {"title": "jquery still support ie", "body": "hi noticed something strange open source code latest build jquery search lot hits see line quote support ie lt even compat branch longer support anyway correct stated docs jquery branch supporting older ie", "num": "2150", "d": "3/2015"}, {"title": "siblings set length gt includes original members", "body": "see jsfiddle consider series elements jquery object contains documentation says original element included among siblings important remember wish find elements particular level dom tree assumption case however jquery test sibling contained original set get personally consider bug implementation intended behavior least docs need reflect", "num": "2149", "d": "3/2015"}, {"title": "fail test modifying offset values callback", "body": "see", "num": "2147", "d": "3/2015"}, {"title": "replacewith nt work latest firefox", "body": "facing issue replacewith method nt work properly firefox latest removes src attribute img tag nt happen chrome inspected element found src eliminated used safe mode firefox tested two machines please check jsfiddle latest firefox browsers compare", "num": "2146", "d": "3/2015"}, {"title": "fails intermittently ios due safari bug", "body": "timing bug causes mobile safari incorrectly report length objects nt one best knowledge happens possibly systems bug triggered objects numeric properties example case query mobile safari sometimes return highest property causes functions like treat objects foo arrays instead objects tries iterate fails since foo problem fixed function instead checking also need check latter check immune ios bug realize fix one browser browser large user base see background repro steps following stack overflow discussion", "num": "2145", "d": "3/2015"}, {"title": "firefox animation issue", "body": "trying zoom absolutely positioned div center page using top right bottom left percentages discovering issue site created fiddle tested ie windows chrome windows fedora ubuntu firefox windows fedora ubuntu safari mobile iphone chrome mobile android firefox platforms exhibits issue first half animate div moves left without growing grows full size new starting point since happens firefox thought might firefox bug nt start happening jquery decided start", "num": "2144", "d": "3/2015"}, {"title": "preventdefault timeout blocking error", "body": "version preventdefault inside timeout error member found break following functionality consoleerror fired stated jquery unable prevent default called within timeout proceeded normal", "num": "2143", "d": "3/2015"}, {"title": "object function index value value doesnt inherit string prototype", "body": "error undefined function attempting use string methods directly upon value work around", "num": "2142", "d": "3/2015"}, {"title": "jsdom error using node npm", "body": "project using jquery inside express app running nodejs working fine switched new computer rebuilt environment getting following jsdom error let know suggestions could look set nodename throw new coredomexception syntaxerror unexpected token exportsruninthiscontext modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs", "num": "2140", "d": "3/2015"}, {"title": "unite compat master branches", "body": "discussed meeting small size difference two branches headache support develop functionality lot sense users since real divergences supported environments probably best suited post since ticket indented break backcompat might makes consider change next minor release although would shame ditch work put master like data module", "num": "2139", "d": "3/2015"}, {"title": "make sense split jquery smaller modules", "body": "since npm great job browserify webpack becoming popular commonjs style highly recognised lot frontend developers jquery also embraces npm makes npm future package manager javascript frontend backend however jquery quite heavy bloated methods would probably never used website quite npm way say want iterate objects would use even load different versions methods one app without ing whole lodash src files therefore asking make sense split module smaller ones developers cherry pick methods going use fact jquery src already modulised would nt hard publish small piece npm need build tool convert packages like cheerio similar things jquery could potentially share small modules way angularjs could use ones need instead building jqlite like lodash jquery also develop build tool build different versions different purposes", "num": "2138", "d": "3/2015"}, {"title": "parse got error chrome error message uncaught syntaxerror unexpected end input", "body": "firefox got error syntaxerror jsonparse unexpected end data line column json data know string charactor jquery know idea type parse error msg descriptive clear thanks jquery version chrome firefox go beyond oneself make perfection perfect", "num": "2137", "d": "3/2015"}, {"title": "trailing ampersand causes uncaught error syntax error", "body": "issue jquery encounters syntax error first load fails complete initialisation jquery version reproduce create html page including jquery using standard scrip tag request url trailing ampersand eg wwwexamplecom amp check developer console following error message uncaught error syntax error unrecognized expression amp tab chrome test chrome safari firefox understandably trailing ampersands useful slightest web application build manage query parameters neatly however jquery probably nt completely fall", "num": "2136", "d": "3/2015"}, {"title": "post get ignore type callback provided", "body": "according documentation arguments post get aliases ajax function optional however provide callback type ignored example post myservercomtestphp data json done function json code defines get post functions arguments get shifted second argument function case third argument string", "num": "2135", "d": "3/2015"}, {"title": "standardize invalid input behavior", "body": "many jquery collection operations meaningful elements somewhat less commonly dom nodes collections logically contain anything operations always assume valid input potentially throwing exceptions encounter invalid given ease manually cleaning like singlemember read eg wholecollection read eg wholecollection write eg special consideration warranted singlemember reads responding empty collections current behavior usually returns seems reasonable standardize including changing methods return like cases collides real output collisions seem etc related", "num": "2134", "d": "3/2015"}, {"title": "synchronize use document globals", "body": "changes particular definition use variables never made compat branch introducing feel needless divergence source merge conflicts mzgol agree", "num": "2133", "d": "3/2015"}, {"title": "html function return correct xhtml legacy created html strings", "body": "according understanding spec disabled option set disabled disabled old html also produced browsers direct innerhtml also anything may retrieved stored database old email acquire strings like capitalised value disabled attribute var htmlstring perfectly legitimate old html put direct jquery get old school solution input tag closed disabled attribute incorrect value rather disabled htmlstring html proper xhtml need end input element value disabled disabled attribute html cleaner sort ydrdynamicloadload cleanser xhtml htmlstring text order cleanser small xml database html tags whether supposed contentless loads rules clean bad html", "num": "2131", "d": "3/2015"}, {"title": "find returns two dom object dom element safari", "body": "using jquery problem jquery returns two dom elements safari select find option selected return two dom objects single element safari browser options", "num": "2130", "d": "3/2015"}, {"title": "data new dataasexpando implementation causing olddisplay test failure", "body": "cc markelog", "num": "2127", "d": "3/2015"}, {"title": "trigger event called native dom event called twice", "body": "native dom event prefix called twice trigger function called", "num": "2123", "d": "3/2015"}, {"title": "data string returning uncommon types like string", "body": "data attribute set uncommon data type recognized string instead correct type instance returns like string instead number float high priority occur float types float zero right side float without integer float without decimal cases relevant first converted number suggestion use parsefloat detect number like low priority occur others numbers type exponential values hexadecimal values binary values octal values suggestion use parseint hexadecimal pattern others nt know low priority undefined value type undefined value undefined last case seems ok putting avail suggestion attribute value undefined returns test case", "num": "2122", "d": "3/2015"}, {"title": "jquery encounters nonprintable characters", "body": "var str str data xx give object var str str data xx give string normal result bug jquery", "num": "2120", "d": "3/2015"}, {"title": "return null attr attributes nt exist", "body": "currently returns probably days native dom return cases also removes attributes would convenient allow universal roundtripping let consider changing return value accommodate note setter treatment explicitly outofscope ticket roundtripping although certainly related topics", "num": "2118", "d": "3/2015"}, {"title": "add new closest relative selector", "body": "find quite often traversing dom like always thought would nice one string like main reason one string make easier navigate elements reusable components parameters passed via attributes example quite options like long somewhat confusing first use investigated source little seems easy add relative combinator requires source modification sizzle inaccessible outside idea chances get merged think could send pr", "num": "2117", "d": "3/2015"}, {"title": "jquery ajax basic authentication sending auth headers", "body": "method basic authentication jquery ajax module set header using optsusername optspassword simply put authentication header request even though prebaked url auth browser convention would nice support feature well answer talks problem username password options confirmed findings tested jquery chrome firefox noticed line built jquery unminified source options commented realize nt spot defines implemented noticing request api server allowed cross origin requests using npm cors package enabling preflight playing configuration options effect responses although expected auth headers nt sent jquery ajax", "num": "2116", "d": "3/2015"}, {"title": "remove ownerdocument check offset getter", "body": "fallout since supported browsers reason call method right away letting exception throw input fact dom element object without getboundingclientrect test go well", "num": "2115", "d": "3/2015"}, {"title": "allow offset setter throw input disconnected", "body": "fallout remove top left added let continue proxying along associated tests asserting behavior", "num": "2114", "d": "3/2015"}, {"body": "excluding sizzle supported jquery said readme compat branch perhaps everyone reads main readme add note well", "d": "3/2015"}, {"body": "let morph docs issue", "d": "3/2015"}, {"body": "thanks quick help", "d": "3/2015"}, {"body": "trying fix easier add new test", "d": "3/2015"}, {"body": "problem changing want use pieces jquery another environment nt ie nodejs wo nt work nt think way see cover scenarios would create hook users provide etc implementations default list assumed globals found amp taken factory amp amdcommonjs problem affects timers", "d": "3/2015"}, {"body": "understood naive solution fall back local timer functions global nt exist course breaks concept assumed globals guess firefox sdk pretty much unique commonjs globals available fact perhaps firefox issue", "d": "3/2015"}, {"body": "understood naive solution fall back local windowsettimeout timer functions global settimeout nt exist could work already expose globals variables see see also commit made code stop assuming browser environment could even check first fallback would make things work little better jsdom exposes patched able cancel timeouts would add bytes though could fixed firefox sdk side better jquerycore think", "d": "3/2015"}, {"body": "js environment without settimeout global weird place though find might want explode already detectstore window somewhere could reuse find", "d": "3/2015"}, {"body": "gnarf firefox sdk runtime global object sandbox kind excludes et al evil weird crazy mzgol saving bytes always good thinking firefox sdk global feature bug say unusual use case happy hack local jqueryjs imagine sandboxed runtimes future interesting implemented checking first get nice jsdom behaviour idea risky change would", "d": "3/2015"}, {"body": "implement would look something like adding parameter introjs factory defining similar definitions window methods right opposed exploring", "d": "3/2015"}, {"body": "using alreadyavailable facepalm", "d": "3/2015"}, {"body": "implement would look something like adding global parameter introjs factory defining var settimeout windowsettimeout globalsettimeout similar definitions window methods right may hard sometimes get global universally need special code path node knows else unless required people supply nonbrowser scenarios seems hostile using alreadyavailable wo nt work node module module instead could create additional wrapper closure define define module", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "gnarf js environment without settimeout global weird place although part ecmascript happen though find might want explode already detectstore window somewhere could reuse find settimeout defined global like ie nt contain property explicitly passed factory consumer relevant detection code timmywil would name file build system change change semantics detection idea avoids problem perhaps checking available would need added well repetitive feeling could extracted helper", "d": "3/2015"}, {"body": "mzgol yes thinking var module return var settimeout change semantics detection catching problem nt var want variable named top built file every place needing settimeout referring var nt issue", "d": "3/2015"}, {"body": "timmywil suggestion get built file fallback global empty bytes someone passes factory nt property declaration shadowed global effectively get even though global might exist", "d": "3/2015"}, {"body": "course shadowing would shorter change name var", "d": "3/2015"}, {"body": "may hard sometimes get global universally need special code path node knows else unless required people supply nonbrowser scenarios seems hostile given strict mode work everywhere turns get free using alreadyavailable wo nt work node module instead global true outermost context introjs calls iife true iife context defines context defines returns could either add etc parameters define etc inclined towards former wo nt even break strict mode practically indistinguishable proposal anyway", "d": "3/2015"}, {"body": "could either add etc parameters define etc let see understand correctly propose roughly modulo comments amp size reduction following introjs js function global factory pass window defined yet typeof window undefined window function window settimeout cleartimeout setinterval clearinterval noglobal even make whole body strict leave first iife still going work", "d": "3/2015"}, {"body": "fine jumping lot hoops wonder much", "d": "3/2015"}, {"body": "course shadowing would shorter change name var yes going harder contribute firsttime contributors assume available nt necessarily need know magic used make available", "d": "3/2015"}, {"body": "let see understand correctly propose roughly modulo comments amp size reduction following introjs even make whole body strict leave first iife still going work pretty much actually whole thing compatible strict mode embedding avoid assumptions first iife eg instead", "d": "3/2015"}, {"body": "really want jquery domcentric meaning needs dom work correctly would jquery dom ie correct object usable things like deferreds etc want use module use build jquery without module want use helpers methods like use etc yeah build version jquery core module", "d": "3/2015"}, {"body": "really want jquery domcentric meaning needs dom work correctly would require jquery dom ie correct window object environment global require passing factory still take timer functions global mainly exist node custom compilation less node would work required lie problem changing would fix issue would make harder node people inconsistency reason considering fixing issue good idea eg environment needs say sorry need getting passed via look different place", "d": "3/2015"}, {"body": "markelog also see wrote using node used jsdom jsdom patches etc cancel timers us using global may cause leaks someone uses considered edge case rare enough care considering need global node anyway issue another edge case may", "d": "3/2015"}, {"body": "matched outrojs", "d": "3/2015"}, {"body": "intentional meant used start builded file build system handles also thanks reporting", "d": "3/2015"}, {"body": "ha dmethvin second quicker", "d": "3/2015"}, {"body": "given time machine agree would nt work way however nt think without breaking lot innocent code docs explain default datatype intelligent guess someone retrieving get evaluated perhaps docs could improved calling script text makes sense wo nt execute script calling jsonp script impossible tag used retrieve script browser executes directly calling padding function json argument ing anything directly case", "d": "3/2015"}, {"body": "yea sure change without breaking ton code perhaps docs issue section untrusted urls bypass autojsonp js type inference way answer first stack overflow question longer accurate options objects passed shortcut methods like also longer necessary set option false need pass options object anyway required set proper datatype", "d": "3/2015"}, {"body": "better put since docs also nt specific jquery inject script tag document using plain dom methods script untrusted site made big mistake still nt think problem adding short warning docs since many web devs nt aware issues", "d": "3/2015"}, {"body": "see docs tickets could combined", "d": "3/2015"}, {"body": "guess nt far mark problem though lies many signatures accepts array logic identifies object numeric length element highest corresponding index arraylike length always looks like array empty force elements collection explicitly wrapping array see succeed", "d": "3/2015"}, {"body": "think documented example", "d": "3/2015"}, {"body": "function passed ready overload used value return jquery object containing single item object js function document ready function ready document ready ready return var doc function consolelog ready ready doc document", "d": "3/2015"}, {"body": "thought default behavior following script returns instance example following script returns false also think function fneach fully documented sometimes use iterate collection items necessarily jquery object sorry english", "d": "3/2015"}, {"body": "think best posed stackoverflow question want clarification", "d": "3/2015"}, {"body": "part log end interesting also please provide node amp npm versions check via", "d": "3/2015"}, {"body": "clear version jquery used code looks like makes requests description trying make crossdomain request django app hosting page port ngnix server port origin defined feeling like stackoverflow question rather bug report would better sort reopen specific problem identified", "d": "3/2015"}, {"body": "nt matter version jquery using version version behave understand defines origin trying cross domain requests multiple requests referring happen page loaded first browser downloads scripts first pic jquery sends xhr request second pic requesting resources via kind ajax call plugin jquery taking upon rerequest scripts idea happening", "d": "3/2015"}, {"body": "yep totally unrelated jquery doh level", "d": "3/2015"}, {"body": "believe stackoverflow right place kind question ask exactly trying accomplish nt see problem jsfiddle", "d": "3/2015"}, {"body": "ok let rephrase problem jquery correctly fire mouseup events multiple buttons released screen expected workflow press two mouse buttons move mouse screen release two mouse buttons get two mouseup events current workflow press two mouse buttons move mouse screen release two mouse buttons get one mouseup event", "d": "3/2015"}, {"body": "oh see mean thanks tested also happens mouse buttons pressed released mouseup event think way browsers handle events tested without jquery", "d": "3/2015"}, {"body": "browser bug", "d": "3/2015"}, {"body": "nt know happened chrome firefox opera mouseup event happens weird", "d": "3/2015"}, {"body": "ah well javascript still ca nt get basic things mouse api right use flash instead thanks help anyway", "d": "3/2015"}, {"body": "html invalid html autoclosing tags disallowed actually interpreted without closing tag example autoclosed next closing see without running jquery code actually contains replacing btw nested tags disallowed opening close previous paragraph", "d": "3/2015"}, {"body": "invalid html nt exception raised rather replacing content", "d": "3/2015"}, {"body": "practical use browser parser via give detailed error messages need reimplement html parser javascript embed jquery using internet explorer see html warnings console things like technically error spec defines pretty deep detail parse badly formed html", "d": "3/2015"}, {"body": "fair enough", "d": "3/2015"}, {"body": "practical impossible nt see source html dom browser parses case following html html html show wo nt show notice wo nt show paragraph gone serialized dom deserializes following html html html show wo nt show notice wo nt show paragraph gone see paragraph third line actually closed thing jquery sees replacing", "d": "3/2015"}, {"body": "believe published accident regardless already taken care new release script", "d": "3/2015"}, {"body": "believe published accident real issue using instead publishing person happens sidefiles directory get published handled release script possibly easiest way achieve always publish fresh copy btw likely need need make sure nt happen amp branches either wo nt use new release script", "d": "3/2015"}, {"body": "using separate repo publish longer necessary made get copied repo make sure nt distribution publishing npm manually rather updates old release stuff reopen reminder", "d": "3/2015"}, {"body": "make sure distcdn nt distribution publishing npm manually rather updates old release stuff reopen reminder add amp amp branches amp changes release script necessary amp wo nt rememeber submit pr sounds ok", "d": "3/2015"}, {"body": "submit pr sounds ok sure", "d": "3/2015"}, {"body": "pr", "d": "3/2015"}, {"body": "fixed amp", "d": "3/2015"}, {"body": "see", "d": "3/2015"}, {"body": "scottgonzalez thanks maybe script would nt bad heard scripts discouraged although nt know", "d": "3/2015"}, {"body": "would potentially put dirty state immediately though right nt sound great", "d": "3/2015"}, {"body": "touch good gets dirty state nt forget commit everything files match noop", "d": "3/2015"}, {"body": "assuming person making change manually changing using changes made script wo nt run", "d": "3/2015"}, {"body": "postinstall would help us remember nt want users onetime contributors deal", "d": "3/2015"}, {"body": "changes made npm install savedev somepackage postinstall script wo nt run right good idea", "d": "3/2015"}, {"body": "nt see problem linked page properties update every click possible confusing property attribute rate though appear jquery issue believe otherwise please link reduced test case eg jsfiddle reevaluate", "d": "3/2015"}, {"body": "right problem debugger sorry hassle", "d": "3/2015"}, {"body": "works closing issue", "d": "3/2015"}, {"body": "pointed code line necessary length parameter automatically updated new length removed unnecessary code commit", "d": "3/2015"}, {"body": "internally use merge jquery objects arraylike need corrected see documented perhaps api ticket needed cc arthurvr", "d": "3/2015"}, {"body": "yup note documentation ca nt hurt open issue api site home", "d": "3/2015"}, {"body": "nt want", "d": "3/2015"}, {"body": "writeonly looking read property better said less verbose version", "d": "3/2015"}, {"body": "idea rejected years ago lot change years quote pertinent comments seems people expect tend agree jitter potential abuse simply enormous many people nt understand concept dom element think html inject element place else add outerhtml going see ton stuff like john resig classic example nt simple theoretically yes however jquery public api new methods released specific endorsement idea along comes support support means tests tests mean bugs bugs mean edge cases edge cases mean hours debug never simple seems also criticism reasons implementing amount well idiot something idiotic going get idiotic results unfair summary reasons given plus one easy implement plugin hazy interactions tables exactly people trying use similar welltested api methods almost exact thing method handle data events associated element replaced mike sherov right mikesherov easy ignore consistency details definitely plenty tickets arriving tracker tell us outerhtml broken case simple implementation suits needs problem using dave methvin", "d": "3/2015"}, {"body": "way implementation changed years since currently supported browsers even compat support property nt know whether means plugin even shorter", "d": "3/2015"}, {"body": "discussed meeting leaning towards adding plenty short nt want add support issues firstclass outerhtml mix", "d": "3/2015"}, {"body": "thanks update", "d": "3/2015"}, {"body": "comments come sizzle selector engine used jquery sizzle opposed jquery one version line supports browsers jquery note plan reduce browsers supported jquery compat current jquery ie see happen time jquery next version still mean even jquery version nt support still see code nt make sense browsers getting rid would require sizzle two versions though always pain maintain gains would nt large enough enough workarounds sizzle warrant separete version thanks looking code filing bug thought", "d": "3/2015"}, {"body": "mzgol comments come sizzle line valhooks nt update selected form reset line line ajax module support examples jquery core", "d": "3/2015"}, {"body": "line valhooks nt update selected form reset line line ajax module support se comments needed support nt delete info older browsers code still needed anyway", "d": "3/2015"}, {"body": "comments cover browser master supports though", "d": "3/2015"}, {"body": "union siblings elements collection one element per level dom tree get expect jquery methods work way", "d": "3/2015"}, {"body": "yes fair enough still would harm mentioned docs surprising case worth short notice", "d": "3/2015"}, {"body": "works fine", "d": "3/2015"}, {"body": "thanks mate screenshot safe browsing without addon look source src attribute missing", "d": "3/2015"}, {"body": "working well getting errors console example mixed content", "d": "3/2015"}, {"body": "error warning see nothing network code since open normally via chrome console looks like", "d": "3/2015"}, {"body": "nt know say working fine whatever problem nt seem jquery", "d": "3/2015"}, {"body": "oliverhuynh please try fresh profile possible extension messing code would beyond scope fix", "d": "3/2015"}, {"body": "btw oliverhuynh say plugins clear firebug installed often cause problems", "d": "3/2015"}, {"body": "btw oliverhuynh say plugins clear firebug installed well plugins extensions maybe nt plugins installed", "d": "3/2015"}, {"body": "btw oliverhuynh say plugins clear firebug installed think default firefox dom inspector wrong", "d": "3/2015"}, {"body": "think default firefox dom inspector wrong look title window minimizemaximizeclose buttons also firebugspecific see browser bar oliverhuynh lot extensions installed need see results disabled", "d": "3/2015"}, {"body": "oh nt seen second screenshot", "d": "3/2015"}, {"body": "hi guys last screenshot run normal mode quick test pluginsextensions issue able reproduce computer place test safe mode firefox first screenshot", "d": "3/2015"}, {"body": "nothing related pluginsextensions strange things methods work well look directly implementatian code replacewith investigate issue", "d": "3/2015"}, {"body": "since nobody else reproduce problem need diagnose system", "d": "3/2015"}, {"body": "thanks report really weird due timing issue seems impossible write test report apple andor like issue able link agree work around", "d": "3/2015"}, {"body": "mzgol agree writing test case would impossible nt report issue apple think would carry weight coming jquery team point right direction happy file", "d": "3/2015"}, {"body": "description provided seems detailed enough could report bug mention affects jquery amp link issue", "d": "3/2015"}, {"body": "link webkit bug", "d": "3/2015"}, {"body": "wow guess must rare enough nt occur often plain object numeric indices etc patch says tries work around could something similar seems like situation december release worth another minorpoint release", "d": "3/2015"}, {"body": "like get response webkit bug first know dealing benjaminpoulain could look", "d": "3/2015"}, {"body": "yep looks like bug one two optimizers problem likely occurs code executed thousand times first try make test case reproduce", "d": "3/2015"}, {"body": "worth another minorpoint release might could ask people affected comment seems like bug manifests mainly large apps hard debug apple going fix amp backport fix line could punt wo nt know release judging past events imo proceed assuming wo nt backport", "d": "3/2015"}, {"body": "suggest go next point release regardless apple lot market share come bug nasty diagnose took weeks unearth core problem jquery great position spare people anguish", "d": "3/2015"}, {"body": "lot market share come yes meant apple backported fix ios amp safari nt release patch people would noticed bug would fixed fix get ios still need patch since supporting ios still want hear affected people tend agree something need patch release", "d": "3/2015"}, {"body": "btw according nt think bug reproable ios simulator sauce uses wo nt able write meaningful test since run test simulators well unless someone going run suite manually ios time time number people able drastically decrease release ios", "d": "3/2015"}, {"body": "hell time reproducing even tell bug exists webkit trunk attempt instrumenting jit makes bug disappear due changes timing anyone found reliable way reproduce bug using test case fragile", "d": "3/2015"}, {"body": "anyone found reliable way reproduce bug test case triggers bug iphone ios reliably nt see bug ios simulator posterity js var getlength function array return arraylength jit getlength arrays var lt getlength alert getlength test gt alerts", "d": "3/2015"}, {"body": "note jit perfunction per incorrectly treated object following code js var getlength function array return arraylength var function array return arraylength var test jit getlength arrays var lt getlength alert getlength alert", "d": "3/2015"}, {"body": "per meeting today hotfix patch release", "d": "3/2015"}, {"body": "perf issue", "d": "3/2015"}, {"body": "seems like good idea", "d": "3/2015"}, {"body": "timmywil let create milestone new patch releases amp changed one new one always change back discover issue possible patches", "d": "3/2015"}, {"body": "mzgol sounds good thanks", "d": "3/2015"}, {"body": "issue looking forward jquery could cover", "d": "3/2015"}, {"body": "swamped tasks moment chance take second look far tell bug still exists good release addressing", "d": "3/2015"}, {"body": "michael look fixed bug", "d": "3/2015"}, {"body": "awesome bug guess nt idea merged latest safari whether backported means new release still", "d": "3/2015"}, {"body": "worth investigating", "d": "3/2015"}, {"body": "get desired behavior animating width height rather right bottom", "d": "3/2015"}, {"body": "error expected object exists duration event time runs gone console message described sounds like would coming underscore something might changed", "d": "3/2015"}, {"body": "started project upgraded underscore nt changed aware limitations preventdefault timeout behavior broken since updated test native timeout error", "d": "3/2015"}, {"body": "right confirms object accessible function returned test case shows working giving error console simpler test case shows ca nt event", "d": "3/2015"}, {"body": "issue code exactly jquery version changed see create test case fire cases", "d": "3/2015"}, {"body": "well see happens whether jquery whatever code actual app may something mask prevent problem assume since console message appeared jquery way treats event object copy properties want event time clearly nt even make sense attempt inside since default action presumably already occurred earlier point time", "d": "3/2015"}, {"body": "right close ticket", "d": "3/2015"}, {"body": "could post concrete example preferrably jsbin hard guess mind sharing code", "d": "3/2015"}, {"body": "nt account jsbin reproduce edit way line expecting return javascript string please tell go away still somewhat beginner never looked hood jquery", "d": "3/2015"}, {"body": "jquery passes exact type declared object case passes number replace method number type goes booleans example info jquery convert declared keys string values according spec keys always strings", "d": "3/2015"}, {"body": "yes please ask questions stack overflow bug", "d": "3/2015"}, {"body": "apologies guys guess thanks help", "d": "3/2015"}, {"body": "point repo latest jsdom nt work latest node latest iojs probably issue unrelated jquery tried old computer see breaks well", "d": "3/2015"}, {"body": "unfortunately repo closed source could definitely node version issue currently looking rolling back latest node release also nt old computer currently get home hours check node version try running project npm update report back whatever find thanks tip", "d": "3/2015"}, {"body": "yep jsdom supports iojs need jsdom lt work node currently testing get updated small chance able drop jsdomonly workarounds fixed", "d": "3/2015"}, {"body": "getting jsdom installing jquery npm believe running jsdom version unless missing something version listed packagejson nodemodulesjquerynodemodulesjsdompackagejson", "d": "3/2015"}, {"body": "constellates unless directly jquery repository wo nt get get even though package dependency project means installing old version npm package older one nt published us thirdparty took ownership ca nt help need upgrade", "d": "3/2015"}, {"body": "thanks help rolling back node version work around issue correct currently jquery try updating", "d": "3/2015"}, {"body": "would nt necessarily ditch work makes build process little complicated impossible", "d": "3/2015"}, {"body": "fine merging branches like still release nt support otherwise many jquery downgrade since supporting larger library would slow adoption new version modules differ lot converge may introduce convention naming files build process proper version chosen versions eg amp otherwise introduce comment directives would cut parts files different code needed different browsers hopefully would nt lot cases separatefiles approach seems cleaner", "d": "3/2015"}, {"body": "really sad nt saved much space master always seems platform still holding us back whether android phantomjs main trouble spots would seem event ajax data maybe naming mzgol suggests along new build process would solve maybe would better continue separate branches drop support potentially keeping supported feel needed differences accessing internal data makes cherry picking much difficult even keep new data implementation restore consistent way modules get data across", "d": "3/2015"}, {"body": "otherwise introduce comment directives would cut parts files different code needed different browsers real ifelse syntaxaware build step let treeshaking remove unreachable code two files better two branches enough taste", "d": "3/2015"}, {"body": "maybe would better continue separate branches drop support potentially keeping supported feel needed worth noting beginning january current version internet explorer available supported operating system receive technical support security updates means months officially unsupported ms except embedded scenarios xp still supported nt matter means large companies need migrate enterprise mode support keep apps working amp still security fixes might good idea wait year amp drop instead opting complicated build process spend time merging branches drop shortly afterwards time spent cherrypicking chance lower time needed set tear apart later", "d": "3/2015"}, {"body": "time spent cherrypicking chance lower time needed set tear apart later right relative effort certainly guiding principle well", "d": "3/2015"}, {"body": "good point mzgol maybe wait drop support time deprecate jquery compat altogether", "d": "3/2015"}, {"body": "per last week meeting decision wait drop support ie thus deprecating compat project effectively result return one branch", "d": "3/2015"}, {"body": "first answer question yes modules made smaller already sure others find similar opportunities go dispute assertions however jquery quite heavy bloated methods would probably never used website quite npm way frontend web development nowhere near bloated npm proof look directory node development like layers onion reason nt look bloated top level seeing outer layer pungent onion every module include npm usually include many modules worse projects usually include different versions modules toponionskin project layer dutifully dependencies dependencies lower layers control code may still saddled whatever bugs thought escaping say want iterate objects would use jqueryeach lodasheach since jquery depends usable free course include utilities functionality prefer lead bloat even load different versions lodash methods one app without requireing whole lodash src files yes obviously behavior upon many node programs depend mentioned adds bloat reduce bloat allow sane debugging developer choose single version use jquery src already modulised would nt hard publish small piece npm need build tool convert nt see producing publishing modules problem challenge sharing single object support continuation passing style chaining overcome bigger issue consumption modules first frontend code nt file think thousands jquery plugins nt know dependencies second ca nt node include multiple versions everything every layer onion code moving internet resting instead tools need way flatten duplicate dependencies include one version yet ca nt happen automatically cases developer need resolve conflicts jqueryspecific issues matter node developers preach npm ideal tool clientside web developers right working npm lot others improve moment could summarize mo modules mo problems javascript development community long way solving issue solution far invent multiple incompatible workflows different package managers module loaders etc defrag mess agree smaller simpler set processes otherwise web developers rightly stay workflow simple comprehensible like including files manually via tags", "d": "3/2015"}, {"body": "note like eventually switch amd modules amp compile amd potentially commonjs whole modularization would require changes really soon also publishing lots tiny modules would complicate release process significantly much rather work switching modules implemented implementing transpiling someone needs modules etc", "d": "3/2015"}, {"body": "bloat primary concern modules way go using custom build process smaller footprint using modules directly also jquery utility library utility methods like used internally convenient users expose grand scheme nt actually many methods make sense standalone methods instance seems intuitive publish separately ajax many dependencies deferred callbacks core quickly becomes simpler include whole jquery would publish separately perhaps ajax methods together one module getting grouping ending compiled file size jquery anyway given leaving module wrappers love using modules js publishing jquery methods modules individually would lot effort surprisingly little reward", "d": "3/2015"}, {"body": "sounds interesting jquery willl converted modular future saw repo yesterday guys think future jquery", "d": "3/2015"}, {"body": "used syntax jquery transpiled suspect would add unneeded bulk resulting source also probably would nt get lot benefit features like arg destructuring default arguments given parameterhockeyhappy way api defined decade ago might fun see looks like though maybe could find subset pleasant write would nt add bulk pretty easy play babel repl see comes always free use code call jquery matter build likely transpile source next years anyway actually want use syntax modules look something like instead", "d": "3/2015"}, {"body": "thank issue roadmap foreseeable future probably take look modules may", "d": "3/2015"}, {"body": "thank guys back mind love using modules js publishing jquery methods modules individually would lot effort surprisingly little reward surprised nt know", "d": "3/2015"}, {"body": "thank opening issue error thrown browser jquery", "d": "3/2015"}, {"body": "chrome firefox json parse used native api browser", "d": "3/2015"}, {"body": "provide demonstration seems working", "d": "3/2015"}, {"body": "issue reproduced html document jquery loaded trailing slash part documentlocationhref property reproduce via ajax additional testing unable reproduce issue home computer closing", "d": "3/2015"}, {"body": "big fan parameter hockey leaving callback pretty rare case always use placeholder jquery signature accepts options arg like specify outlier cases heart delight everyone agrees seems make sense clarify docs", "d": "3/2015"}, {"body": "agreed docs issue", "d": "3/2015"}, {"body": "think already docs issue nt", "d": "3/2015"}, {"body": "yup thanks arthurvr", "d": "3/2015"}, {"body": "theory queasy feeling probably cases existing code depending undocumented failsilent quirky behavior", "d": "3/2015"}, {"body": "mostly nt backport required nonbrowser environments nt support compat line nothing porting makes cherrypicking easier note though different jshint config assumes browser environment one declares amp timer functions", "d": "3/2015"}, {"body": "fell foul weird formatting rules guess htmlstring originally", "d": "3/2015"}, {"body": "still didnt save try using serverhtmlencode htmlstring htmlstring html cleanser string ie", "d": "3/2015"}, {"body": "server html encoded strings get unencoded put back original try remember", "d": "3/2015"}, {"body": "preserving native browser behavior expecting", "d": "3/2015"}, {"body": "hi thanks quick reply defines correct rendering html years ago valueless attributes attribute name value ie disabled deprecated html recognising old form converting new standards code page supposed write disabled disabled old code therefore indicates element set disabled html effectives opposite setting also states tags content eg input img meta etc contentless elements ie stand alone tags expects properly formatted html readable xml parser comes html see html returns native innerhtml looking jquery hide browser differences looking jquery protect native browser variations return standard syntax need standard compliant transferred server resent users predictable results machine need html rendered exactly way given ser user key depressions regardless browser also sent html email nonstandard rendering email generally gets bounced isp another real problem much code generating html strictly well behaved html issue server strictly xml compliant problem created locally eg textarea contenteditable app uses allows user trigger execcommand native htmlclient javascript edit document execcommand allow paste external applications eg ms word basically anything turn stuff problem deal junk clean supplier dross bloats copy paste client side app uses xml services totally screwed microsoft recently internet explorer recent ie changes could job browser pain deal microsoft changes time regards dr martin w baker york development research limited mailto martinwbaker yorkdevrescouk martinwbaker yorkdevrescouk tel mob skype martinwbaker skype martinwbaker call status registered england registered office north house high street tonbridge kent email attachments confidential intended addressee named recipient use disclose reproduce copy distribute contents communication received error please contact sender delete email system richard gibson mailto notifications githubcom sent march jqueryjquery cc martin subject jquery html function return correct xhtml legacy created html strings preserving native browser behavior expecting reply email directly view github", "d": "3/2015"}, {"body": "code page supposed write disabled disabled quote spec spec seems contradict", "d": "3/2015"}, {"body": "sounds like want deal xhtml guaranteed valid xml names indicate neither native property jquery method make guarantees recommend using code specific quick search part turned seems exactly want rate scope existing jquery methods", "d": "3/2015"}, {"body": "richard wow feed back quick helpful sorry land across research thanks much really appreciate help new query two weeks old even time impressed guys achieved architectural elegance solution kind regards martin dr martin w baker york development research limited mailto martinwbaker yorkdevrescouk martinwbaker yorkdevrescouk tel mob skype martinwbaker skype martinwbaker call status registered england registered office north house high street tonbridge kent email attachments confidential intended addressee named recipient use disclose reproduce copy distribute contents communication received error please contact sender delete email system richard gibson mailto notifications githubcom sent march jqueryjquery cc martin subject jquery html function return correct xhtml legacy created html strings sounds like want deal xhtml whichunlike guaranteed valid xml names indicate neither native innerhtml property jquery html method make guarantees recommend using code specific problema quick search part turned seems exactly want rate scope existing jquery methods reply email directly view github", "d": "3/2015"}, {"body": "say exactly correct code get junk document eg end user paste contenteditable textarea element javascript execcommand another application native machine user running junk comes needs cleaning want get rubbish inhertited outside application dr martin w baker york development research limited mailto martinwbaker yorkdevrescouk martinwbaker yorkdevrescouk tel mob skype martinwbaker skype martinwbaker call status registered england registered office north house high street tonbridge kent email attachments confidential intended addressee named recipient use disclose reproduce copy distribute contents communication received error please contact sender delete email system dave methvin mailto notifications githubcom sent march jqueryjquery cc martin subject jquery html function return correct xhtml legacy created html strings code page supposed write disabled disabled quote spec spec seems contradict reply email directly view github", "d": "3/2015"}, {"body": "please link live demonstration jsfiddlejs binetc showing behavior deviates expectations", "d": "3/2015"}, {"body": "thanks reply gibson link live demonstration please open link safari browser run sample program select cycle option jquery returns dom elements two times", "d": "3/2015"}, {"body": "caused use numeric values attribute duplicate fixed jquery", "d": "3/2015"}, {"body": "thanks lot taking time see ticket give response", "d": "3/2015"}, {"body": "see trac background problem suggested fix trades one bug another far tell good set unit test additions would confirm", "d": "3/2015"}, {"body": "float case", "d": "3/2015"}, {"body": "seems like better fix almost everything except negative values octal", "d": "3/2015"}, {"body": "behavior intentional value converted number nt change value representation example equivalent numbers numeric value converting would alter representation left strings string value converted number see explanation introduced jquery infer intent opaque sequence characters feel free numericcast values know operation makes sense", "d": "3/2015"}, {"body": "make sense work number separator instance really represents integer float really unfeasible new behavior following logic also affect hexadecimal developer expect hexadecimal literally numerical conversion", "d": "3/2015"}, {"body": "also affect hexadecimal way disambiguate developer safer assume values serialized strings indeed treated strings let developer explicit html fwiw html spec properties pretty clearly states value always coerced string dataset idl attribute provides convenient accessors data attributes element getting dataset idl attribute must return domstringmap object relevant part domstringmap set value new existing named property name value value algorithm setting names certain values must run passing name name result converting value domstring value illustrate would jquery know value string legacy octal literal jquery always returns string developer whatever want", "d": "3/2015"}, {"body": "thank opening issue agree according docs work rare edge case may worth fix use case brought discovering behavior created test case", "d": "3/2015"}, {"body": "second nt valid json formfeed f nt allowed want escape double backslashes", "d": "3/2015"}, {"body": "duh thinking already escaped dave right nt think things", "d": "3/2015"}, {"body": "encounters problem processes file paths windows wonder normal behaviour understanded thank much", "d": "3/2015"}, {"body": "dmethvin leaning towards beta know use case would make catastrophic", "d": "3/2015"}, {"body": "seems like returning good idea although knows break wild way find change continue return empty jquery collections tho", "d": "3/2015"}, {"body": "continue return undefined empty jquery collections tho thanks reminded create", "d": "3/2015"}, {"body": "seems like returning null good idea although knows break wild course answer turns jquery ui working updates right", "d": "3/2015"}, {"body": "team decided revert due breakages ui mobile", "d": "3/2015"}, {"body": "thank opening issue adding additional selector extensions core", "d": "3/2015"}, {"body": "tried introducing option jqueryajax function named authbyheader set true would cause jqueryajax set authorization header basic username password working fine tested functionality well local machine would great mods could look", "d": "3/2015"}, {"body": "anshuxlr link feature code message please", "d": "3/2015"}, {"body": "madlittlemods link commit", "d": "3/2015"}, {"body": "according guard browsers longer support sounds good", "d": "3/2015"}, {"body": "nt seem jquery core action items dmethvin could open api issue suggested clarification quite sure mind", "d": "3/2015"}, {"body": "issue longer necessary several runs since keeping eyes swarm failures times keep reminder meeting minutes wo nt release got green thanks", "d": "3/2015"}, {"body": "giant since promises nt based prototype much easier supported internally rather something like wrap constructor decorate returned promise", "d": "3/2015"}, {"body": "originally going write angry rant dismissed facts form lt object stars stars stack overflow question upvotes years ago google results jquery serialize quickly shows serialize object turning form data json common practice opposite nt uncommon though generally reserved parsing current search query populating search form form lt querystring jquery function however function luckilly plugins debatable serialize would even jquery core ca nt shift something back querystring lt json object turning serialized string object back done numerous libraries qs brought walmart labs simply put querystring node core jquery implements object querystring luckilly plugins querystring object jquery care jquery mix useful wrappers avoid browser differences well make life easier animate function animations one things really made jquery popular data function store objects reference jquery still using deferred system instead bluebird done makes sense many cases forms nt part dom would right however forms important peice dom arguably important brush supporting finge usecase seems quite shortsighted", "d": "3/2015"}, {"body": "dmethvin maybe jquery size bit large however functions aretoo important us frequently used jquery official side would better offer", "d": "3/2015"}, {"body": "would argue jqueries size getting large perhaps effectscss need moved seperate repository cross browser compatability css also huge issue creating effective animation suite task would nt involve alot code however huge change likely complete wrong direction want", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "ajax need jquery internals wrapper believe wrapper course benefit code always benefit features nowadays jquery attempting lean mean internally likely tool developers however relates lot assorted inputs forms part dom believe served plugin however seen comment though still ranks high search results stackoverflow deserialize jquery people would generally prefer recreating possibly sloppy andor imperfect implementation use plugin many reasons however comes official vs unofficial unless giant library force reckoned usually simple scripts seen untrustworthyannoying end small files get basic functionality another example ends number jquery deserialize jquery want support developers recreating possibly worse wheel think point jquery crossbrowsertools would use everywhere change existing api nt believe fail see something like deserialized serializeobject nt make cut worth guys make excellent product rather praise criticize however nt enjoy line answers", "d": "3/2015"}, {"body": "basically problem calling toggle twice nt leave state permanently turned inlineblock element even animation worked around explicitly resetting element back inline animation done though", "d": "3/2015"}, {"body": "seems nt achieve intended result reopening", "d": "3/2015"}, {"body": "following code triggers dialog see", "d": "3/2015"}, {"body": "fixes landed amp really fixed time", "d": "3/2015"}, {"body": "landed includes support test workaround seems make clear docs android browser suffers issue", "d": "3/2015"}, {"body": "think replicates problem u guys look", "d": "3/2015"}, {"body": "lot code modify demonstrate problem could nt find situation jquery nt already setting target", "d": "3/2015"}, {"body": "hi found details issue small example replicates problem example found issue missing eventcurrenttarget firing events jquery handling event within gwt code nt know libraries gwt expects eventcurrenttarget set jquery sends different event object depending type handler jquery handler eventcureenttarget present native handler eventcurrenttarget example jsfiddle demonstrates problem without gwt types handlers tested event data dumped browser console uncomment different handlers click run observe browser console changing combo box values correctly replicates problem jquery code check different behavior different handler types trigger function search comment fire handlers event path familiar jquery nt know design bug", "d": "3/2015"}, {"body": "note properties left days dom level events spec nt even mention suspect nt set event object nt originally defined case backcompat concerns example native functions chrome firefox property whether fired inside native javascript triggered via interaction control safari property cases property fired native javascript populated triggered via interaction control native cases nt set reason jquery set value event object passed browsers generally nt", "d": "3/2015"}, {"body": "agree findings jsfiddle however copied example results different properly populated tested chrome firefox ie triggering code interaction control populates seems little bit strange tested firing native events chrome console gwt application internally gwt uses properties setting handlers works expected seems jquery populate case native handlers nt know properties deprecated beleive covered well", "d": "3/2015"}, {"body": "waiting sizzle update right btw need get issue changelog timmywil seems mentioned anywhere fixed commit messages add commit importing latests sizzle", "d": "3/2015"}, {"body": "yea update sizzle commit include pertinent sizzle issues", "d": "3/2015"}, {"body": "woohoo expect release", "d": "3/2015"}, {"body": "already git builds compat formerly formerly betas following resolution blockers soon since biggest", "d": "3/2015"}, {"body": "awesome thanks ton", "d": "3/2015"}, {"body": "please ping gon na update sizzle", "d": "3/2015"}, {"body": "tomchentw could check works submitted pr patch", "d": "3/2015"}]