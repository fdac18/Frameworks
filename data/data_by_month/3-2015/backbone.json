[{"title": "backbonemodelsave passing url property backbonesync", "body": "base model class models extend like coffeescript class basemodel extends backbonemodel user model stuff model removed post nt matter basically seems complains url property function defined going", "num": "3547", "d": "3/2015"}, {"title": "array value slice appears broken chrome", "body": "full example demonstrates failure chrome firefox safari nt test ie suspect chrome bug report well case anyone else tortured recently using slice method array stored attribute results array values added model think removed javascript var mymodel backbonemodelextend var mymodel new mymodel foo var mymodelget foo slice bar mymodelset foo var mymodelget foo slice baz mymodelset foo var mymodelget foo slice mymodelset foo consolelog fails objectkeys mymodeltojson prints fails foo bar bar baz using arrayprototypeslice directly works javascript var mymodel backbonemodelextend var mymodel new mymodel foo var arrayprototypeslicecall mymodelget foo bar mymodelset foo var arrayprototypeslicecall mymodelget foo baz mymodelset foo var arrayprototypeslicecall mymodelget foo mymodelset foo consolelog works objectkeys mymodeltojson prints works foo full example html broken array values function var mymodel backbonemodelextend var mymodel new mymodel foo lt p gt var mymodelget foo slice bar mymodelset foo var mymodelget foo slice baz mymodelset foo var mymodelget foo slice mymodelset foo consolelog fails objectkeys mymodeltojson prints fails foo bar bar baz function var mymodel backbonemodelextend var mymodel new mymodel foo var arrayprototypeslicecall mymodelget foo bar mymodelset foo var arrayprototypeslicecall mymodelget foo baz mymodelset foo var arrayprototypeslicecall mymodelget foo mymodelset foo consolelog works objectkeys mymodeltojson prints works foo", "num": "3546", "d": "3/2015"}, {"title": "backbone localstorage link broken todo app", "body": "link referenced backbone todo app broken", "num": "3545", "d": "3/2015"}, {"title": "", "body": "excuse trouble using test open new ticket admin departmen receive notification new ticket email account also user user get notification ticket number problem show osticket website could help problem please", "num": "3544", "d": "3/2015"}, {"title": "next release", "body": "next release", "num": "3541", "d": "3/2015"}, {"title": "telling whether event bound", "body": "great accessor backboneevents could tell event bound publicly expose bit functionality rely api internal inspired real life question stackoverflow", "num": "3540", "d": "3/2015"}, {"title": "modeltojson null values formatted strings", "body": "null valid json property calling modeltojson null properties formatted empty string", "num": "3538", "d": "3/2015"}, {"title": "scrolling effect", "body": "want achieve scrolling effect found many single page apps presenting plugin example possible backbone alone without plugin achieve effect logic example going ti example pages putting quotation marks indicate actually one html page page associated backbone view second pageview made visible user upon clicking link scrolling hope understand mean", "num": "3536", "d": "3/2015"}, {"title": "special characters routing string ff", "body": "use square brackets routing string work ff ubuntu work routerroute encodeuri special characters ff", "num": "3535", "d": "3/2015"}, {"title": "modeldestroy breaks collectioneach", "body": "js test destroy models loop function var collection new backbonecollection id id id id collectioneach function model notstrictequal model undefined model undefined modeldestroy url function test breaks fires causes collection call splices array causes break technically could considered bug lodashunderscore jdalton released versions cause might want fix backbone deferring seems like bad idea maybe slice models new array calling could also make destroying defer let know guys think", "num": "3534", "d": "3/2015"}, {"title": "adding duplicate model overridden id incorrectly added backbonecollection", "body": "core issue longer call new model construct id override attributes checking model already collection thus explicit id attribute model duplicate added override initialize ignored consider following test javascript var mockmodel backbonemodelextend initialize function options make custom id thisid optionsfirstname optionslastname looking source code adding duplicate model following line javascript model thispreparemodel models options continue latest release following javascript turn bare objects model references prevent invalid models added l modelslength lt l attrs models attrs instanceof model id model attrs else id attrs targetmodelprototypeidattribute id", "num": "3533", "d": "3/2015"}, {"title": "event change nt work define el object jquery", "body": "set el selector like el page change event view works set object jquery work like el page page html load creating view", "num": "3532", "d": "3/2015"}, {"title": "add event triggered prior response", "body": "problem collectioncreate passed wait true success callback get response server thing annoys fact add event triggered response server case code depending server response want add event triggered", "num": "3531", "d": "3/2015"}, {"title": "url function context undefined", "body": "dont know backbone core depth noticed function call tests says result dont save context get undefined want access simple demo like javascript var context options var mockoptions test true var model backbonemodelextend defaults book year var collection backbonecollectionextend model model url function context options thisoptions return var books new collection mockoptions booksfetch wait true success function alert isequal options mockoptions code dont know nt save context uses call someting like wrong missed someting ps dont askreport stackoverflow seems like working normally thanks", "num": "3527", "d": "3/2015"}, {"title": "nested selfmodel possible", "body": "able following without receiving uncaught rangeerror maximum call stack size exceeded dataschema backbonemodelextend idattribute instanceid urlroot api constructor function attrs options backbonemodelcall attrs options thisparent new dataschema completely understand receiving error curious would correct way accomplish nested model parent within model", "num": "3526", "d": "3/2015"}, {"title": "modelparse context wrong called collectionreset", "body": "maybe expected behavior model parse function called pointing collection instead model intended", "num": "3525", "d": "3/2015"}, {"body": "oh damn haha nt return value url oh well error message say url property function undefined though returns undefined anyway tired", "d": "3/2015"}, {"body": "ran test case chrome works perfectly probably overridden somewhere code", "d": "3/2015"}, {"body": "reported success realized backbone debugger enabled chrome seems causing report instead thanks help", "d": "3/2015"}, {"body": "think correct link someone confirm update", "d": "3/2015"}, {"body": "ah indeed weird difference two vs good catch let look", "d": "3/2015"}, {"body": "pipe see", "d": "3/2015"}, {"body": "seem nt know events getting bound pretty big code smell really binding events initialize absolutely need bind render really recommended use rest solutions thread good", "d": "3/2015"}, {"body": "nature adding event makes knowing event added useful ca nt say making much sense reason functionality nt exposed needing feature using objects using add events something exposing track wrapping wrap keep track added elsewhere backbone already keeps track", "d": "3/2015"}, {"body": "try stackoverflow mailing list irc channel gitter room questions github issues maintaing framework", "d": "3/2015"}, {"body": "ok thanks clarifyingone question gitter room backbone", "d": "3/2015"}, {"body": "yep", "d": "3/2015"}, {"body": "hi yuriyapostol thanks reporting would mind posting working sample look", "d": "3/2015"}, {"body": "routes c c b working ff bug fixed", "d": "3/2015"}, {"body": "user achieve instead going fix grooveshark code consider either warning bug fixing since definitely obvious going break", "d": "3/2015"}, {"body": "best solution create bulk update remove request server dont need make n request delete n want synced writed", "d": "3/2015"}, {"body": "mikeblum hi think fogget power function simply extend incoming data add fields want someting provide use features waybind computeds readmore", "d": "3/2015"}, {"body": "edge master introduced collection modelid handle situation", "d": "3/2015"}, {"body": "like idattribute mean specified attribute id case must js object add collection like javascript var mockmodel backbonemodelextend", "d": "3/2015"}, {"body": "default yes however meant overridden support cases like", "d": "3/2015"}, {"body": "seem little weird duplicates id setting logic without actually affecting property model see caseywebdev thoughts", "d": "3/2015"}, {"body": "guess confusing part attribute affects model set collection", "d": "3/2015"}, {"body": "collection piece know uniquely identify models holds uses method make distinctions model level know models may grouped related note think unnecessary confusing property removed altogether likely happen", "d": "3/2015"}, {"body": "seems purpose twofold identify model server persisting also used determine persistence method identify model uniquely within collection takes care nt deal think really depends use case great pollymorphic collections introduces extra complexity apps wager large percentage nt need", "d": "3/2015"}, {"body": "try stackoverflow questions", "d": "3/2015"}, {"body": "ambicoder please provide demotests without dont know situation code wrap function promise detect server get response see another solution use controll model added rendered details read thanks", "d": "3/2015"}, {"body": "first code thismodelisnew thiscollectioncreate testmodel wait true success function model response response said first add event triggered success callback fires one thins understand code itsnewmodel true suppose conditional testing model true found solution following modelsave collectionadd either wayany comment welcomed things mention deferred marionette look time stick solution", "d": "3/2015"}, {"body": "read documentation sorry dont see uses dont closed", "d": "3/2015"}, {"body": "js dataschema backbonemodelextend idattribute instanceid urlroot api constructor function attrs options backbonemodelcall attrs options optionsparent thisparent optionsparent new dataschema parent new dataschema also future please use stack overflow general javascript questions related development library", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "mistake", "d": "3/2015"}, {"body": "nevermind ff debugger messing context looking stack", "d": "3/2015"}, {"body": "ahhhh problem overriding returning original response disappointed fixing everything works expected sorry guys", "d": "3/2015"}, {"body": "oh", "d": "3/2015"}, {"body": "meh could way point", "d": "3/2015"}, {"body": "facing problem docs mentioned collectioncreate accept also unsaved model object something", "d": "3/2015"}, {"body": "looks like fixed ambicoder colllin guys test master see fixes problem related", "d": "3/2015"}, {"body": "one thing discussed anyone starts implementing location model properties see three options models attributes stay observer proxies calls model results would unsymmetrical api properties set gotten b model properties set directly model object changing location attributes potentially introduce chaos anyone might relying c adding observer directly would allow symmetrical api seems rather counter intuitive call thoughts jashkenas elegant way move properties directly model whilst affecting internal currently exists", "d": "3/2015"}, {"body": "probably elegant migrate work towards ideal api compromised one try putting attributes directly model object see feels", "d": "3/2015"}, {"body": "try putting attributes directly model object see feels every serverside framework ever used places attributes directly model attribute specific getters setters breaking change good one", "d": "3/2015"}, {"body": "like thanks feedback attributes originally used understand need using getterssetters bb knows trigger events data directly model know internal properties say vs returned called", "d": "3/2015"}, {"body": "unless misunderstanding proposal strikes javascript nt provide facilities languages would help avoid propertymethod naming conflicts would likely arise putting attributes directly model object", "d": "3/2015"}, {"body": "javascript nt provide facilities languages would help avoid propertymethod naming conflicts ruby rails successfully done attributes originally used think easy bookkeeping think passed etc", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named instance variable named javascript object ca nt method named property named without conflict afaik totally date latest js improvementsproposals", "d": "3/2015"}, {"body": "lukeasrodgers would seem say la php jridgewell quesiton mostly rhetorical obvious question deal moving forward many interesting ideas worth exploring although viable time due browser support example whilst providing much far performance improvements using proxy method would allow minimal changes current backbone leaving stuff intact time proxy support limited ff partly imlemented chrome behind flag although development seems rather stagnantlow priority think greater goal though minimal amount boilerplate around native objects utilize native features instead implementing backbone point discussion figure direction project wants move end might room minimize lot bb codecomplexity along objects helper properties etc objectobserve nativly returns much data bb works hard keep track like argument make event triggering simpler returns add update delete think would elminate need due async nature might also become redundant making helper properties almost totally redundant black sheep list edit lukeasrodgers would resolve issue attribute conflicts case bb whittled model simple object w helpers prototype collections simple array objects helpers greater picture due async triggering events lead waaaaay faster event triggering view rerendering also greater complexity entire client side becoming one huge async app lets throw promises mix", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named foo instance variable named foo sorry mean methods always getters setters property ie rails really setter called ignore specialized getters setters perform simple case trigger specialized properties setters question deal moving forward way see working keeping list still around say knows rendering pass pass model gives access", "d": "3/2015"}, {"body": "see point jridgewell always potential conflicts thats js works bomb take extreme steps protect user forcing getters setters stopping internal property overwritten recede native approach leave problem conflicts user discretion", "d": "3/2015"}, {"body": "take extreme steps protect user forcing getters setters stopping internal property overwritten nt lead us back think problem beginning seem obvious really excited thinking possibilities", "d": "3/2015"}, {"body": "think problem beginning agree go back basics set attributes directly object", "d": "3/2015"}, {"body": "yup", "d": "3/2015"}, {"body": "great give thought", "d": "3/2015"}, {"body": "facing issue using subroutes subroutersi tried everything discussed jashkenas ideal solution tried solution", "d": "3/2015"}, {"body": "banged head quite seems counterintuitive method named tojson would output shallow serialization model complex attributes pointers model also figured modifying data serialized tojson object affecting data model went documentation understand deep copy option modeltojson seems pass options used perhaps could configurable documentation updated happy submit pr either update docs add deep option depending direction prefer", "d": "3/2015"}, {"body": "may also occur html given ie reasons believe operate lower version prevent include ieedge html header forces run mode resource", "d": "3/2015"}]