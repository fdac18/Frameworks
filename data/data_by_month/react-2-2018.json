[{"title": "expose event focusable element", "body": "curious earlier event works things form elements elements disabling couple conditions code seems first brush least works splendidly element focusable via attribute obtain things like would problem relaxing conditions allowing include elements attribute case existing implementations userland rely event disabled removed element", "num": "12309", "d": "2/2018"}, {"title": "reset state", "body": "like function would reset state react start rendering scratch currently code causes duplication virtual dom react tab devtools shows node twice documentbodyinnerhtml reactdomrender documentqueryselector app page change documentbodyinnerhtml reactdomrender documentqueryselector app possible unmount container element lost prevent duplication vdom documentbodyinnerhtml reactdomrender documentqueryselector app reactdomunmountcomponentatnode documentqueryselector app lt unmount remove page change documentbodyinnerhtml reactdomrender documentqueryselector app however sometimes difficult bind event change router code legacy app react used rendering page page destroyed router decides change page another react nt get container element since ca nt call change change rendering lost container element would useful function reset react state rendering new page documentbodyinnerhtml reactdomrender documentqueryselector app page change documentbodyinnerhtml reactdomreset lt nt care previous state want render component scratch would rendering reactdomrender documentqueryselector app name nt called within point rendering duplicate virtual dom since container element changed", "num": "12308", "d": "2/2018"}, {"title": "get dom htmlelement instance reference order use scrollintoview api", "body": "implementationusage question like use native elementscrollintoview api react app scroll components code use need reference html element want scroll using react ref prop returns reference react component htmlelement dom instance ca nt use desired api way get access html dom element order use native scrollintoview api versions use react chrome browser latest", "num": "12307", "d": "2/2018"}, {"title": "best practice new react context api", "body": "new context api really great lot thanks efforts enabled us efficient easier way write react app still consider much boilerplateverbosity use leaf component everytime may write like published npm package think easiest way use new context api could use decorator like jsx import withtheme use anywhere import withtheme withtheme withtheme export default class leafcomponent extends reactpurecomponent suggesting adding official implement would think please give try tell think really appreciate attention", "num": "12306", "d": "2/2018"}, {"title": "inspect element hover", "body": "using mouseenter mouseover hover using html css know debug hover inspect elememt debug mouseover mouseenter inspect element dev tools react normal", "num": "12305", "d": "2/2018"}, {"title": "nt synchronize property value attribute especially value attribute", "body": "read repo", "num": "12302", "d": "2/2018"}, {"title": "state change td element", "body": "displaying tabular rows setting data td element state change displays currently updated td element dataall ones go missing screen thing placed within text box td element things work fine following sample code working code failing code", "num": "12301", "d": "2/2018"}, {"title": "safe read currentownercurrent assume statenode", "body": "might mean assumption like leads runtime failure dev fix code sites", "num": "12299", "d": "2/2018"}, {"title": "errors thrown componentunmount nt reported proper timings", "body": "want request feature report bug bug least qa respect current behavior creating testcase handle error thrown reported asynchronously since react errors reported last test cases bunch virtually lacks reproducibility rely current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example please clone repository execute expected behavior report errors every test case provide proper way handle especially testing already exists versions react browser os affected issue work previous versions react react", "num": "12297", "d": "2/2018"}, {"title": "ci danger failing auth errors", "body": "see", "num": "12292", "d": "2/2018"}, {"title": "syntax error reactis package", "body": "trying use reactis syntax error stopping imported", "num": "12287", "d": "2/2018"}, {"title": "strange behavior conditional rendering", "body": "want request feature report bug bug gives error warning message clear error wrap code div works fine gone wrong thanks", "num": "12286", "d": "2/2018"}, {"title": "scriptsjestmatcherstowarndev expected actual arguments mixed", "body": "want request feature report bug bug current behavior calls jestdiff b calls diffstrings b default annotated green red expected behavior pass expected values actual received values", "num": "12285", "d": "2/2018"}, {"title": "scriptsjestmatcherstowarndev unexpected warning recorded null null caused jestdiff returning null", "body": "want request feature report bug bug current behavior example actual warning multiline output message received matcher confusing rendering react components document new explicit hydration api render w markup full document expected behavior expected least show original expected messages without fancy upstream bug", "num": "12284", "d": "2/2018"}, {"title": "holl", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12283", "d": "2/2018"}, {"title": "bensin", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12282", "d": "2/2018"}, {"title": "mgm", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12281", "d": "2/2018"}, {"title": "typeerror read property valuetracker undefined", "body": "want request feature report bug bug current behavior worked branch error happened current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example error shows time radio clicked expected behavior opened pr versions react browser os affected issue work previous versions react branch notice error fixed", "num": "12280", "d": "2/2018"}, {"title": "development production find", "body": "want request feature report bug primary question secondary maybe tiny feature request question official way find whether imported react package development production module reactdevelopmentjs vs reactproductionminjs obviously something like think agree really evil solution answer question would possible add something like respectively something similiar react object useful sure first thought use usual webpack processenvnodeenv stuff assume react addon library library two different packages depending environment eg fancyreactaddondevelopmentjs vs fancyreactaddonproductionminjs also assume whatever reasons make sense maybe even allowed use react development module combination production module addon library vice versa would great directly import error thrown module combination invalid independent webpack processenvnodeenv maybe user addon library use tools javascript assume fancyreactaddonproductionminjs reactenvironment production throw new error use react production packages details course also use cases feature would also handy even necessary hope use case already convincing versions react browser os affected issue work previous versions react", "num": "12277", "d": "2/2018"}, {"title": "eventcurrenttargetvalue returns undefined react", "body": "upgraded react using give undefined basically stateless child component fire callback clicked pass extra params dom api value field parent component callback follows param accessible anymore looked event returned versions react looks like whereas react react intentional change go passing params callback nt really want use arrow functions since affects performance", "num": "12276", "d": "2/2018"}, {"title": "state updated doesnt update dom", "body": "hi want feature bug thistogglehidden gt thisstateistoogle misc thisstateistoogle amp amp members plugins add member condition update image chevron nothing happen use code everythings fine someone help please version react cheers", "num": "12275", "d": "2/2018"}, {"title": "warning invalid prop arialabeledby tag element", "body": "want request feature report bug bug current behavior react throws warning use arialabeledby warning invalid aria prop tag details see expected behavior waiaria shows ways implementations wacg link aria technique im developing website use android talkback runs fine arialabeledby attrs like ariadescribedby versions react browser os affected issue work previous versions react react version browser version chrome versi\u00f3n build oficial bits os ubuntu mobile extra info talkback android version talkback version", "num": "12274", "d": "2/2018"}, {"title": "input replacement bugchanging controlled input", "body": "want request feature report bug appears bug current behavior codesandbox quick development solutions listed codesandbox readme demo warning open debugging console wait secs settimeout line change state observe warning console warning component changing controlled input type text uncontrolled happening react updating necessary input elements react adds additional properties placeholder title readonly changes existing property value input replaced rather replacing entire input results controlled status changing dom input element persists value expected behavior old input element replaced new input uses placeholder text use case described origin section codesandbox readme actual desired behavior unknown versions react browser os affected issue work previous versions react react version chrome version official build throw warning may production version dom input value persisted codepen react version think", "num": "12273", "d": "2/2018"}, {"title": "react new error handling results data loss forms react typing", "body": "discussed similar problems error happens ex textarea widget unmount entire app previously user could copy paste text form even page behaving strangely print whatever error anywhere part system even third party dependency browser feature results immediate data loss user ex counter shows number words type bug users would sometimes lose text typed totally understand motivations feature models native apps crashing nt really work well least us web tangle third party dependencies exist today see works well facebook since control every dependency fix bugs across needed instead set third party dependencies one bug end stuck app randomly breaks shows blank users guess could put error boundary around every widget entire page hard enforce still results data loss scoped understanding ca nt render per discussion mentioned bug since throw destroys statefulness various browser widgets ex video plugins feature made opt", "num": "12271", "d": "2/2018"}, {"title": "react passes empty spaces children react components", "body": "want request feature report bug report bug current behavior passing empty string inside react element treated child current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example syntax make notice empty space react fills thispropschildren variable myreactcomponent expected behavior thispropschildren property myreactcomponent contain one children versions react browser os affected issue work previous versions react version chrome mac os high sierra", "num": "12270", "d": "2/2018"}, {"title": "component return null font awesome sibling throws domexception", "body": "want request feature report bug bug current behavior following react code throw exception firefox chrome throw current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example jsfiddle showing example code simply sets class either show hello wordl null wraps component hoc simulate changing data remove works wrap tag works change classname element well work expected behavior expect work like versions react browser os affected issue work previous versions react react version chrome version mac os x firefox version mac os x", "num": "12269", "d": "2/2018"}, {"title": "checkboxes handling going wrong", "body": "weird issue button called assign click modal userslist checkboxes opens modal confirm cancel button buttons functionality click confirm checked unchecked data matter selection made save click cancel data revert back confirmed saved data built component loading initially copying state copystate changes saved original state confirmed cancelled original state changes copied copystate happening state getting updated matter change make copystate copystate original state data somebody help render method assign handler cancel method confirm method", "num": "12268", "d": "2/2018"}, {"title": "componentwillunmount cancel requests", "body": "write perform necessary cleanup method invalidating timers canceling network requests people say ways cancel request mean canceling network requests would please share knowledge", "num": "12266", "d": "2/2018"}, {"title": "componentdidcatch unhandled", "body": "want request feature report bug sure tbh current behavior global handler unhandled errors windowaddeventlistener error evt gt use componentdidcatch function gets called correctly render throws exception global error event also triggered componentdidcatch call expected behavior since componentdidcatch handles error prefer global event nt triggered usual trycatch block least way figure evt object event handler exception caught react hope made sense", "num": "12262", "d": "2/2018"}, {"title": "setstate callbacks getting executed expected order", "body": "want request feature report bug bug versions react browser os affected issue work previous versions react v sure worked previous versions current behavior following piece code called multiple times quickly without executing callbacks completing expected callbacks executed correct order corresponding scope contrary expected behavior callback later value called first one older value next eventually calling older value upon debugging following piece code enqueuecallback function publicinstance callback callername reactupdatequeuevalidatecallback callback callername var internalinstance getinternalinstancereadyforupdate publicinstance setstateinternalinstancependingcallbackssetstate executed expected behavior expected callbacks registered executed order known bug mistake made", "num": "12261", "d": "2/2018"}, {"title": "create first visit popup react application using reactpopup module", "body": "make first visit popup react application possible implement using reactpopup module used module seem work check let know wrong homepage component import react component react import homepagecss import carousel nukacarousel import headercomponent componentsheaderheaderjs import decorators decoratorsjs import popup reactpopup export default class homepage extends component redirectpage gt windowlocation dashboard componentwillmount popupalert component render var mixins carouselcontrollermixin return homepage content", "num": "12260", "d": "2/2018"}, {"title": "display pop first time user visit react application", "body": "make first visit popup react application possible implement using reactpopup module used module seem work check let know wrong homepage component import react component react import homepagecss import carousel nukacarousel import headercomponent componentsheaderheaderjs import decorators decoratorsjs import popup reactpopup export default class homepage extends component redirectpage gt windowlocation dashboard componentwillmount popupalert component render var mixins carouselcontrollermixin return component carousel", "num": "12259", "d": "2/2018"}, {"title": "feature request checksum error reporting production", "body": "process enabling ssr unsplashcom would like track checksum errors occur however knowledge checksum errors reported production way tracking need might accidentally introduce change results checksum error want know quickly possible case avoid checksum errors must ensure first client render matches server render easy slip working better infrastructure make impossible eg state accessible enhanced renders ie first client render meantime need know break something", "num": "12258", "d": "2/2018"}, {"title": "warning message socketon", "body": "got problem socket spamming warning line idea improve thanks componentdidmount thissocketon emitloadcandidates data gt data undefined thissetstate isreading false servicesinsertcandidate data", "num": "12257", "d": "2/2018"}, {"title": "strange behavior conditional rendering bypassing props functional component", "body": "bug got today parent component includes nested child component prop passed prop named way variable get value idk important prop used later conditional render jsx block first cycle component gets prop correct way null passed jsx block nt render next cycle prop gets value insted null also works finally prop got null agian like beginning condition nt work proper block still appears code trivia jsx nt work proper const parent someprop gt const child someprop gt someprop null works great const parent somebigprops gt var someprop somebigpropssomeprop real code shots", "num": "12255", "d": "2/2018"}, {"title": "obfuscating bundlejs unauthenticated users", "body": "using react reactrouterdom redux reactredux simple scenario website reactjs php backend restful service backend want bundlejs code exposed unauthenticated users looked everywhere solution seem find one possible react js frameworks understand user unauthenticated data would injected bundle would rather unauthenticated users see anything admin panel solution", "num": "12252", "d": "2/2018"}, {"title": "react still require nontoplevel submit handler", "body": "want request feature report bug bug maybe current behavior using nondelegated handler submit event expected behavior least know submit event bubbled versions react browser os affected issue work previous versions react", "num": "12251", "d": "2/2018"}, {"title": "concern", "body": "read concerned new api wo nt flexible enough cover common use cases instance scrolling tabs component whenever prop changes use browser apis scroll tab view would best way accomplish without currently code something like js class tabs extends reactcomponent render return thispropstabsmap tab gt componentwillreceiveprops nextprops nextpropsselectedtabid thispropsselectedtabid documentqueryselector scrollintoview", "num": "12249", "d": "2/2018"}, {"title": "daniel baker email messages", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12248", "d": "2/2018"}, {"title": "support changing portal container without remounting children", "body": "related working project lot globally unique component instances words essentially database ids also dnd functionality reordering everything fine moving instance one parent another causes complete rerender instance instead moving nodes around thinking using portals instance prop element id render inside reparent simple case passing different element id using redux state however changing portal container node also causes complete rerender everything passed see codepen would possible skip rerendering effectively move portal contents instead", "num": "12247", "d": "2/2018"}, {"title": "context update nt fully propagate cases", "body": "think may bug context latest alpha updates scheduled commit phase nt seem propagate enter mon erase click dark mode expected children update actual children nt update seems happen indirection", "num": "12246", "d": "2/2018"}, {"title": "context providers maybe consumers show unknown performance tab", "body": "noticed alpha think need support else could skip altogether", "num": "12245", "d": "2/2018"}, {"title": "children consumer without new line gives typeerror render function", "body": "want request feature report bug bug current behavior get confusing error using new line children consumer un new context api error fix expected behavior component getting redered versions react browser os affected issue work previous versions react chromium archilinux react nt support new context api", "num": "12241", "d": "2/2018"}, {"title": "error trying createcontext", "body": "want request feature report bug bug current behavior error invariant violation element type invalid expected string builtin components classfunction composite components got object check render method current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example basically returning seems cause weird error wrong js import react createcontext react import render reactdom import hello hello const themecontext createcontext background yellow color white const styles fontfamily sansserif textalign center const app gt return start editing see magic happen render documentgetelementbyid root expected behavior render correctly even though havent implemented consumer also didnt help versions react browser os affected issue work previous versions react", "num": "12239", "d": "2/2018"}, {"title": "new react component definition autobind", "body": "nt know exactly planned auto bind methods would nice yeah know property initializers still user think suppose state stored object closure logs component object ideally nevermind feel free close issue without explanation curious reasoning behind new design", "num": "12238", "d": "2/2018"}, {"title": "new context require explicit interface", "body": "read post new context understood creating problems rather solving one please correct wrong previous context opinion achieved called means nt need explicitly api use instead define api provide using expect implicitly provided runtime design helps decouple api providers api consumers react component tree believe original idea context also applied golang would understand talking used new context consider example javascript xjs const x reactcreatecontext x export default x consumerjs import x complexprojectx problem class something extends reactcomponent render return x context every consumers x worked industry years got pain enough understand bad complex heavy dependency graph code good explaining things english please help explain problem got", "num": "12236", "d": "2/2018"}, {"title": "extracting context stack", "body": "useful feature context creating custom stack things see component embedded side think primary use case logging explicitly currently pretty expensive maintain case need see example could provide api lazily extracts whole path contexts tree would basically synchronously rerender shortest path recreate context time call create stack lazily cc acdlite", "num": "12235", "d": "2/2018"}, {"title": "context transform", "body": "new context api really bulky create middle man consumes one context value transforms provides another one create many components store intermediate state avoid rerendering provider input unchanged could convenience api use case js function transform inputvalue return inputvalue extradata cc acdlite", "num": "12234", "d": "2/2018"}, {"title": "ordering componentwillmountunmount react", "body": "problem seems ordering longer guaranteed react due support async previously always called old components removed called new components example form component inputs register parent form deregister allows form keep track global state inputs following scenario cause form throw error ordering longer guaranteed scenario possible form try register input name previous input unmounted allowed question understand reasoning behind change wondering suggested solution code previously relied firing obvious solution comes mind moving step however means deal unnecessary rerender upon mounting input still correct approach", "num": "12233", "d": "2/2018"}, {"title": "way hint hydration reuse dom nodes", "body": "want request feature report bug feature request since current opinion rather weird behaviour wai current behavior render additional dom client hydrating works partially new dom nodes get confused ones rendered server even though obvious addition server rendered elements get reused css classes would argue behavior would acceptable component state matched serverside state example use state change componentwillmount drive diff current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example clone run expected behavior current behavior truly intended would like way explicitly hint react hydrate specific nodes suggestion nodes property reuse value matches similar react knows handle changes arrays limited knowledge hydration works maybe shows afaik would virtually performance impact still allow client pure additions dom versions react browser os affected issue work previous versions react using react well yes worked react", "num": "12232", "d": "2/2018"}, {"title": "using reactportal newly opened window", "body": "want request feature report bug bug current behavior interactivity highly used react component reacttable newly opened window injected via react portal code based article click open button table opens new window interactivity expected behavior component work docked mode versions react browser os affected issue work previous versions react chrome", "num": "12231", "d": "2/2018"}, {"title": "issue error boundaries custom error types", "body": "think may found bug react defined custom error type react application throwing error boundary defined top application component tree whose purpose catch uncaught errors display error page error boundary catching custom error nt able distinguish error type put simply custom error types created following syntax error boundary perspective simply errors type illustration even though explicitly throwing error boundary method thinks error argument type crazy bug react issue reproduced code documented butin nutshell implemented application component wraps contents error boundary custom error thrown subcomponent custom typing gets lost somewhere along way error boundary perspective error thrown type custom type defined application also stackoverflow expected behavior custom error types would preserved crossed error boundaries tested reactreactdom chrome macos", "num": "12228", "d": "2/2018"}, {"title": "provide way perform synchronous render another root commit phase", "body": "want request feature report bug bug current behavior reentrancy checks prevent synchronous nested react component used work react seems related issue nested reactdom renders current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example jsfiddle documents problem simulation external dependency manifests expected behavior running think similar problem one nested except difference nt think use portals address usecase component manages dom tree nodes outside react contenteditable node uses bestinclass prosemirror library manage children component looks something like javascript class prosemirror extends component componentdidmount prosemirror manages dom nodes thisel part render cycle configuration prosemirror ends calling render isolated child node wants able immediately afterwards able leverage piece dom longer available synchronously looks like reentrancy change came react portals nt work us site called nt directly part root react tree clearer observe fiddle hierarchy something like way skip reentrancy checks cases isolated react render happening grandchild component react tree nt immediate parent versions react browser os affected issue work previous versions react querying dom immediately reactdomrender worked versions prior react excited async possibilities main react tree curious workarounds ignore reentrancy checks isolated renders", "num": "12227", "d": "2/2018"}, {"title": "ok put random things divroot", "body": "put initial text divroot element eg p tag text div canvas saw many people put entire rendered markup divroot hack seo happen divroot childnode erased put random things right thank patience", "num": "12226", "d": "2/2018"}, {"title": "new chrome iframe spec requires allow attribute use devices", "body": "want request feature report bug sure maybe feature side current behavior opening iframe third party site need access user camera new specs chrome states since version need add attribute order access things like camera microphone however react recognise attribute removes therefore nt access user camera error displayed console allow expected behavior tag known versions react browser os affected issue work previous versions react react version real possibilities change yet chrome version official build os macos sierra sorry already reported could nt find another issue mentioning", "num": "12225", "d": "2/2018"}, {"title": "uncaught typeerror function", "body": "want request feature report bug bug current behavior got following behavior import searchareajs indexjs searchareajs import react component react import searchareaclasses searchareacss class searcharea extends component state showfederalstate false export default searcharea import searcharea searchareasearcharea render return got following error console remove searchareajs defined state work like charm versions react browser os affected issue work previous versions react react v google chrome mac os", "num": "12223", "d": "2/2018"}, {"title": "important note", "body": "", "num": "12222", "d": "2/2018"}, {"title": "select input field working works change text input", "body": "building simple react text generator mostly finished except one problem ca nt seem solve select input nt work read documentation nt see problem code tried changing select input text input worked number input works fine pretty much exact code component import react component react class select extends component constructor props super props thisstate value propsvalue export default select appjs import react component react import appcss import output componentsoutput import select componentscontrolsselect import text componentscontrolstext class app extends component constructor props super props thisstate paras format html text componentwillmount thisgetsampletext getsampletext fetch res gt restext text gt thissetstate text text gt consolelog thisstate catch err gt consolelog err showformat x thissetstate format x thisgetsampletext changeparas number thissetstate paras number thisgetsampletext render return react text generator format paragraphs export default app help greatly appreciated also sorry messed formatting", "num": "12221", "d": "2/2018"}, {"title": "contextconsumer unexpectedly updates time one child components call setstate", "body": "want request feature report bug report bug current behavior time child component calls parent rerenders current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior presumably expected behavior one setting state child component affect parent components particularly state change versions react browser os affected issue work previous versions react versions browser chrome osx works expected previous context api used", "num": "12218", "d": "2/2018"}, {"title": "warning reactcreateelement type invalid expected string", "body": "taking tutorial learn react js everything fine days could run example simple carrying recommended basic configuration plus addons add recognize javascript version several days longer reviewing project working correctly executing command see error show anything browser multiple errors appear console one uninstalled reinstalled reac reactdom problem still persists try new project cloning friend works normally copied structure mine warning reactcreateelement type invalid expected string builtin components classfunction composite components got undefined likely forgot export component file defined might mixed default named imports error occurred one react components consider adding error boundary tree customize error handling behavior packgejson webpackconfigjs const path require path const config entry srcindexjsx output path pathresolve js filename bundlejs moduleexports config appjsx import react component react import render reactdom class app extends component render return mi aplicacion react js probando la exportacion export default app indexjsx import react component react import render reactdom import app componentsappjsx render documentgetelementbyid appstart indexhtml", "num": "12214", "d": "2/2018"}, {"title": "autofocus issue firefox going react", "body": "got strange issue might bug firefox quantum sure tried upgrading react noticed pages give flash unstyled content isomorphic app even js turned see thing happens pages use autofocus attribute firefox version mac maybe react developer give scenario try see see anything strange server side rendered template regular stylesheet document head react reactdom version create page load latest firefox issue present chrome safari present remove autofocus attributes cc gaearon maybe something autofocus attribute changes recently", "num": "12211", "d": "2/2018"}, {"title": "warn stringifying attribute takes long", "body": "react nt attribute whitelist would valid objects get stringified added attributes smooth migration path lot existing code already depends behavior however one pitfall sometimes made realize includes object whose stringifying unusually expensive example deeply nested immutable map would nt produce error would slow rendering good reason could protect putting counters around places stringify attributes stringification takes say milliseconds something bad going probably warn", "num": "12209", "d": "2/2018"}, {"title": "reacthydrate match", "body": "want request feature report bug bug current behavior match current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example component use show error expected behavior show versions react browser os affected issue work previous versions react react os mac os x browser chrome official build", "num": "12208", "d": "2/2018"}, {"title": "precompile renderers prepack", "body": "filing future work anyone wants take feel free easiest task wo nt able answer lot questions largely fun though want remove much indirection hot paths however react reconciler abstracted away underlying platform renderer host config example reactdom says insert dom node reconciler uses function problem get function passing config object around extra code around extra indirection runtime note approach significantly reduce code size hope could make runtime bit efficient ideally want compiled reconciler code directly include calls dom apis already use closure compiler helps inlining smart enough see functions host config fully inlined object never escapes bundle prepack smart enough actually executes initialization code hypothetical new approach run prepack first get rid intermediate representations run closure compiler top less indirection means closure compiler smarter inline made proof concept shows dom methods successfully end right reconciler hot paths like want proof concept hacky done outside build workflow wo nt sending pr roughly try first need add prepack build workflow roughly shows done even though give broken bundle need make sure include maybe options still broken main reason breaks immediately umd wrapper emitted rollup prepack nt understand soup checks means nt think easy way model without changing prepack found easier change function return tell rollup output simple factory pattern assigns global enough start hacking course work browser prepack still confused things found easiest take rollup bundle save disk manually tweak rerun prepack cli afterwards could quickly get idea exactly breaking common cases access prepack nt know probably possible get around modeling react abstract global ie something like prepended input bundle nt get far replaced bundle need proper fix access initialization cases like shimmed something like cases like probably wo nt work nt know model abstract cases nt clear made initialize lazily prepack executes initial path code like js var supportsomefeature documentdocumentmode lt function shoulddosomething supportsomefeature could written like js var didinit false var supportsomefeature function ensureready didinit return didinit true go wild supportsomefeature documentdocumentmode lt function shoulddosomething ensureready supportsomefeature super happy works like places ends necessary maybe model abstracts nt know prepack well nondeterministic calls like sure shimmed string literals maybe teach prepack also abstract string somehow say fix immediate issues get excited first bundle huge prepack preevaluates metaprogramming code like turn giant precomputed object literals final values one way solve remove code like tricky although time move direction another way delay initialization prepack preexecutes initial path change code lazily initialize objects eg functions use called first time already work find places css prefixes mentioned css prefixes dom property configs cases prepack explodes solving get back roughly bundle size normal react super hacky version made event plugins lazy injected first call way prepack nt attempt preevaluate paths contains explosive objects maybe better way eg making lazy somehow avoiding need objects altogether get rid host config needed make sure parts like mutation object nt referenced inner closures otherwise prepack wo nt know safe omit added early used destructured functions point bundle already hundred bytes smaller original one host config indirection gone final problem bumped gcc running memory reason prepacked input puts pressure able work around manually bumping process memory limit peaks around compiles sum fun evening hack probably viable longer term strategy need think solve object initialization issues whether want make things lazy course also need figure integrate build properly eg readd umdnode headers later model prepack think fun task work motivated contributors tag one please nt expect result would get merged mostly exploratory work would awesome see working pr though", "num": "12206", "d": "2/2018"}, {"title": "prefix private api fields context object", "body": "safe read obvious even nt document others people think safe prefix unsafe ones underscores even longer prefixes like", "num": "12203", "d": "2/2018"}, {"title": "rowspan colspan render inconsistent case", "body": "js renders dom js renders sure preferred consistent right js class hello extends reactcomponent render return consolelog reactdomserverrendertostring html", "num": "12202", "d": "2/2018"}, {"title": "regression react automatically marks first item mutliple select checked", "body": "want request feature report bug bug regression current behavior react creating first child automatically getting marked selected react seem way specify gets selected default expected behavior react unless marked option selected options selected default versions react browser os affected issue work previous versions react versions effected include worked bug reproducible chrome firefox hacky workaround found get around first option getting selected inject first child multiselect", "num": "12200", "d": "2/2018"}, {"title": "warn componentnameproptypes", "body": "want request feature report bug feature current behavior sometimes boss stressing add prop types way notice uppercase p proptypes react warn typo expected behavior love get warning sake whenever mistype would actually love implement pull request could nt find anywhere else warning static properties like would like put code", "num": "12197", "d": "2/2018"}, {"title": "bug gulputil deprecated react", "body": "hi everyone problem react run command npm install log npm install npm warn deprecated gulputil gulputil deprecated replace following guidelines resolve conflict project see variant migrate new react version dangerous pain variant fix react source code change gulputil use packages instruction possible help ps sorry english", "num": "12196", "d": "2/2018"}, {"title": "requesting localization tl tagalog filipino", "body": "would like ask translate documentation tagalog filipino", "num": "12195", "d": "2/2018"}, {"title": "stub document object link click", "body": "hi trying mimic function called link click react getactiveclass e navdata const elements documentbodygetelementsbyclassname camnavpanelrewardsmenu getelementsbytagname li describe camnavpanellistitem isredirect false plus highlight li gt let wrapper let please help getting getelementsbytagname undefined", "num": "12194", "d": "2/2018"}, {"title": "feature implement method get sync state since async", "body": "want request feature report bug feature request current behavior expected behavior", "num": "12193", "d": "2/2018"}, {"title": "add oldprops additional argument getderivedstatefromprops", "body": "want request feature report bug feature current behavior receives nextprops previousstate arguments current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example deprecated used allow code like new function choice static method constantly copy state order access later illustrated example posted twitter gaearon expected behavior ideally difficult implement would also take current previousold props argument something like would eliminate need constantly assign props state purely comparison purposes quick look source nt make clear easy would though versions react browser os affected issue work previous versions react", "num": "12188", "d": "2/2018"}, {"title": "update shouldcomponentupdate docs advice closures", "body": "want request feature report bug possible bug depending understanding new context feature current behavior presence component blocking updates context consumers first click toggle top data expected behavior consumers shouldcomponentupdate component continue updating first toggle top data click versions react browser os affected issue work previous versions react react", "num": "12185", "d": "2/2018"}, {"title": "access refs recommend callback pattern instead", "body": "mean currently using thisrefstextinput access refs recommend callback pattern instead callback pattern mean mean use refs", "num": "12184", "d": "2/2018"}, {"title": "ref callbacks called componentdidupdate", "body": "want request feature report bug bug current behavior refs documentation states ref callbacks invoked componentdidmount componentdidupdate lifecycle hooks however seems ref callback called update occurs closest things similar bit confused seems nobody ever experienced something like might misunderstanding something current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example copy code link import react react import render reactdom const styles margin auto padding width border solid black textalign center cursor pointer class test extends reactcomponent test e consolelog ref callback constructor super thisstate number update thissetstate number mathrandom componentdidupdate consolelog updated render return class app extends reactcomponent render return render documentgetelementbyid root expected behavior ref callback logged updated logged versions react browser os affected issue work previous versions react tried several versions react chrome running macos", "num": "12183", "d": "2/2018"}, {"title": "unexpected contextconsumer contextprovider behavior", "body": "want request feature report bug bug current behavior use two contexts created childtree use set new context expect child consumer got new result next sibling childtree got unexpected new context current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example createcontext issue expected behavior contextprovider affect children node versions react browser os affected issue work previous versions react react", "num": "12182", "d": "2/2018"}, {"title": "request filipino translation", "body": "hi would like contribute project thru translation would like translate necessary files filipino hoping response thanks", "num": "12180", "d": "2/2018"}, {"title": "removing ref callback works differently hostcomponents vs classcomponents", "body": "want request feature report bug bug current behavior remove ref mounted hostcomponent update calls original ref null remove ref mounted classcomponent update call original ref null note nt call passed fooinner ref null note call passed div ref null modify ref either hostcomponent classcomponent change original ref called null new ref called instance take sandboxes change second expected behavior honestly sure consistent reason different hostcomponents decide schedule ref effect completework long classcomponents decision made beginwork long means workinprogressref null behavior different hence issue probably pick one make consistent versions react browser os affected issue work previous versions react unsure sure issue latestfiber nt dug deep enough see happened lt", "num": "12177", "d": "2/2018"}, {"title": "way directly use function like react", "body": "case nb somewhat related tasked integrating wysiwyg uses ofc reactagnostic want use object iframe use style props website consistency properties theme object per react convention camelcased eg paddingtop however css needs put iframe needs cssstandardcased question way directly use function like react guessing handled source csspropertyoperationsjs afaik direct export", "num": "12176", "d": "2/2018"}, {"title": "flow find reactdom hydrate function", "body": "want request feature report bug bug current behavior flow ca nt find reactdom function current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example try following code project using flow js flow import hydrate reactdom flow error module named export called calling method default export also fails import reactdom reactdom reactdomhydrate flow error property found reactdom expected behavior cause flow errors versions react browser os affected issue work previous versions react reactdom node flow nt think ever worked", "num": "12175", "d": "2/2018"}, {"title": "form causes react crash", "body": "file new bug adding input form element component react crashes caused mozilla firefox browsers version react higher", "num": "12174", "d": "2/2018"}, {"title": "onchange behaviour radio buttons", "body": "want request feature report bug bug current behavior assigning onchange listener radio button group form event fires per radio button current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example created basic example problem working jsfiddle since guess using date version react also found workaround problem using components internal state detailed expected behavior onchange event fire every time selected radio button changes versions react browser os affected issue work previous versions react affected version far tell happens across browsers check previous future versions problem appears fixed sadly still process preparing update", "num": "12172", "d": "2/2018"}, {"title": "remove use proxy events development", "body": "think maybe revert people already think kind api also annoying view debugger none properties show instead could seal event object something like", "num": "12171", "d": "2/2018"}, {"title": "prop pass data event handlers", "body": "feature request suggestion add known prop gets passed handlers second parameter would eliminate need closures inline binding inline arrow functions proxyeventtargetdataset etc currently need pass event handler several ways create class method returns closure use inline bind arrow function intuitive alternative use pass object prop gets converted string immutable map becomes pass id use handler find data", "num": "12169", "d": "2/2018"}, {"title": "ca nt use prevstate function callback parameters setstate", "body": "", "num": "12165", "d": "2/2018"}, {"title": "unstablerendersubtreeintocontainer execution order", "body": "current behavior execution order changed know old api replaced starting switch codebase still depends libraries use old api matter knowing change wrote link order functions executed see calling children gets mounted called behavior change intentional", "num": "12160", "d": "2/2018"}, {"title": "add stringref warning strict mode subtrees", "body": "", "num": "12158", "d": "2/2018"}, {"title": "getting started docs terrible", "body": "came back react year using getting started docs pretty much helpful slightest docs links websites without instructions get react project running remember year ago back react docs step step walkthrough set get project running scratch links websites without react specific instructions happened docs become useless needs step step guide added back docs guide get nothing running browser instead links websites nt anything react remember back react could run guide hello world app running within minutes problems trying figure new docs hour still luck getting running instructions used actually instructions basically saying install run command terminal docs say well use link site nothing react even sort instruction react website link without context around docs please reverted old versions actually create proper getting started page get nothing running", "num": "12157", "d": "2/2018"}, {"title": "typescript definition sfc returning fragmentstring", "body": "want request feature report bug likely bug current behavior open sandbox wait compiler catch see error expecting returned expected behavior based blog post possible component like correct looking type definition method return type correct however sfc declaration looks like assume oversight type well case true able create pr correct missing something please versions react browser os affected issue work previous versions react", "num": "12155", "d": "2/2018"}, {"title": "reacttestrenderer asynchronous rendering guarantees", "body": "want request feature report bug think question understand react newer fiber architecture introduces asynchronous rendering pipeline allows better prioritisation work also aware version react still expected render synchronously looking forward though using especially reacttestinstance helper apis guarantees safe developer lean creating testrenderer instance safe immediately introspect instance look child node given type differ components userspace asynchrony instance class component child node want make test assertion safe safe way flush pending reconciler changes check pending work currently experiencing intermittent failures test assertions look like error output looks like fail pathtomycomponenttestjsx mycomponent test assertion child node instance instances found node type childnode expectone reacttestinstancefindbytype versions react browser os affected issue work previous versions react seeing failure running running", "num": "12153", "d": "2/2018"}, {"title": "umbrella releases", "body": "x new context api x add context api test renderer add context api shallow renderer even makes sense x mark private fields private x context consumerprovider bailout props change x looks like wording warning might need updated reflect actually wo nt work recommendation x prefixed versions x x fires deprecation warnings x x enables asyncbydefault updates x also enables strict mode changes related async mode update scheduling x interactive updates async expires within second subsequent interactive event fired earlier one flushed earlier one synchronously flushed processing incoming one used event result discrete user interaction words interactive events events debounced without affecting terminal state click event interactive scroll event x controlled updates syncish effectively using synchronous mode updates flushed react yields back browser used controlled components state dom must always sync react internal state x deferred updates default updates outside react lifecycle event handler promise handlers etc x useful prerendering via quite ready make api stable also enables asyncmode children root x useful things like draft need wrap event handlers confirm et al work nested inside lifecycle prioritychanging function x expose persistent mode via use separate entry point pr x fix fragment support test renderer x revert deprecation injecting custom event plugins necolas ready commit providing another migration path rnw deprecate even outside strict mode keep working warning add prefix want keep using deprecate legacy context api possible migration strategy implement legacy api top new api extract separate package like revert deprecation injecting event plugins far future major version remove deprecated apis legacy context api assuming deprecate minor strict mode everywhere presumably added warnings strict mode point chose include may include beyond new component api holding closer feature complete phrase means implemented async rendering bytecode compilation static version method would take lots effort migrate mostly class instance methods used event handlers migration effort may worth eventually introduce new component api replaces classes stable version really made stable ago clearly useful synchronous mode however asynchronous mode effectively noop would weird ask everyone migrate new api remove upcoming release stable version probably ready used production limited capacity holding tested internally tentative plan make stable automatically opt error boundary children strict mode technically strict mode resilient many apps would effectively opt components strict mode since recommendation always error boundary top tree", "num": "12152", "d": "2/2018"}, {"title": "contextconsumer contextprovider reacttestrenderer", "body": "want request feature report bug bug current behavior unsupported component type test renderer probably bug react called know component types current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior identify new context types versions react browser os affected issue work previous versions react", "num": "12150", "d": "2/2018"}, {"title": "ci broken", "body": "looks like commit broke ci sure release script passed test variants devprod bundle devprod first unable reproduce broken behavior fresh install able sure yet causing perhaps something yarn workspace prerelease versions", "num": "12147", "d": "2/2018"}, {"title": "processci check looks like typo", "body": "check looks like typo may wrong nt found ci checked", "num": "12145", "d": "2/2018"}, {"title": "change lifecycle deprecation warnings lowpri", "body": "warnings driven use rather avoid thrashing automated tests", "num": "12144", "d": "2/2018"}, {"title": "using react app without rendering html piece", "body": "come angularjs need using react app without rendering html piece like contain html tags want use react app model logic errormessage name errorsfirst name email errorsfirst email message errorsfirst message fyi achieve scenario question achieve scenario", "num": "12143", "d": "2/2018"}, {"title": "upload files ftp server location using reactjs", "body": "hi please let know anyone knows upload files ftp server using reactjs", "num": "12142", "d": "2/2018"}, {"title": "dev memory leak render event listeners", "body": "want request feature report bug bug current behavior using dev appears around event listeners added every time component rerendered occasionally get garbage collected listening events happen lot scroll fast typing etc slow kill tab using current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open dev tools performance check memory checkbox start performance capture type quickly text box bit stop performance capture note increase event listeners picture included reference expected behavior memory leaks versions react browser os affected issue work previous versions react chrome macos let know anything help clarify hopefully got right wordinginfo thanks", "num": "12141", "d": "2/2018"}, {"title": "safari errors using fragment upon hydrating", "body": "want request feature report bug bug current behavior safari mac os x ios throws error able make reduced test case reporting hope someone else also issue able figure root cause currently best figured production universal rendering scenario using reactfragment together elements use context like component connected redux safari errors client side hydration example one case code like errored safari replaced fragment div case modal component also connected redux returned node using another scenario cms content using custom renderer json transformed react rendering components complex context based logic using fragments anywhere causes error safari similarly issue fixed replacing fragment div span depending case currently things able track together use fragments context possible bug requires condition large complex project apple user complicates things also inconvenient bug happens production react bundle results unhelpful error messages current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example current best attempt isolating issue replicate expected behavior safari throw hydrate using mixture fragment context versions react browser os affected issue work previous versions react react production issue development version safari safari works fine", "num": "12140", "d": "2/2018"}, {"title": "question call method react component instance", "body": "bit new react advice pointers current implementation always open advice question extended react component class create new component export default class comp extends reactcomponent render component using following code like element could different places page currently transition moving te components react yet multiple components page call method specific component instance way get instance selecting dom element approach totally different way", "num": "12139", "d": "2/2018"}, {"title": "working context", "body": "typescript import react react import reactdomserver reactdomserver const proptypes require proptypes export class parentcomp extends reactcomponent lt gt export class childcomp extends reactcomponent lt gt let html reactdomserverrendertostaticmarkup consolelog html context workin result call parent context parant foo foo", "num": "12138", "d": "2/2018"}, {"title": "modify parent component state child component props", "body": "want request feature report bug bug current behavior possible modify state parent component child props prop array object seems byproduct fact javascript passes arraysobjects functions reference instead value current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example shown mean codepen expected behavior able modify parent state child component props since props normally assumed immutable easy prevent behavior deep clone arrayobject passed prop value array example see mean versions react browser os affected issue work previous versions react tried react", "num": "12137", "d": "2/2018"}, {"title": "childrenonly inconsistent childrencount", "body": "want request feature report bug bug current behavior const children reactchildrencount children gt const child reactchildrenonly children gt error reactchildrenonly expected receive single react element child repro codesandbox expected behavior excepted return one element array throw versions react browser os affected issue work previous versions react react certain behavior prior react prefiber fiber supports encourages use fragments ie arrays elements issue much likely encountered react onward furthermore code reads like something wrong many children may child expected one child um okay", "num": "12136", "d": "2/2018"}, {"title": "synthetic event system", "body": "hi new react dont know synthetic event anyone help explore topic", "num": "12133", "d": "2/2018"}, {"title": "characters string objects rendered separate elements", "body": "want request feature report bug bug current behavior characters string objects created new keyword rendered separate elements english visible user farsi letters become disconnected looks like h current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example five separate text elements rendered chrome inspector looks like expected behavior value represented string object rendered like native string value would versions react browser os affected issue work previous versions react react tested chrome ubuntu likely unrelated version os", "num": "12132", "d": "2/2018"}, {"title": "meta charset rendered camel case", "body": "use reactdom rendertostring meta property charset rendered camel case like insted using react reactdom version", "num": "12131", "d": "2/2018"}, {"title": "update state batch react outside render cycle", "body": "app many state changes coming external sources calling setstate outside render cycle hurts performance lot setstate starts new render cycle would like something like achieve react", "num": "12130", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources using react ref prop returns reference react component htmlelement dom instance ca nt use desired api return reference component element defined need reference element component renders pass function another prop define element", "d": "2/2018"}, {"body": "sunhuawei hoc api discussed lot times original rfc dismissed props collision", "d": "2/2018"}, {"body": "trysound omg even noticed thanks reminder still think useful someone want hear voice", "d": "2/2018"}, {"body": "please nt use issue tracker platform sharing personal projects try use solely bug reports feature requests general usage question please check community support resources thanks", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "gaearon bug look would need help", "d": "2/2018"}, {"body": "sorry test case seems broken reducing although still says way handle errors add found behavior may depend actual states dom elements affected test structure residents file complicated dive", "d": "2/2018"}, {"body": "fixed", "d": "2/2018"}, {"body": "want use release placeholder iirc", "d": "2/2018"}, {"body": "ah guess someone sebastian published accidentally guess wanted reserve package name either way soon releasing lockstep etc", "d": "2/2018"}, {"body": "ah nt realise nt officially published", "d": "2/2018"}, {"body": "understandable version npm seems like mistake part", "d": "2/2018"}, {"body": "bug nothing react simply invalid javascript code curly brackets js denote block since block expression use ternary operator directly without assignment something similar second case inside jsx starts jsx context lack better word inside jsx brackets different meaning translate comes js code", "d": "2/2018"}, {"body": "thanks marvinhagemeister reliazed done silly mistake must seen code carefully opening issue", "d": "2/2018"}, {"body": "worries happens us", "d": "2/2018"}, {"body": "good", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "running branch nt think branch stable state sounds like running mismatched versions react reactdom", "d": "2/2018"}, {"body": "aweary hi reasons project ready stable version bug like noticed branch fixed bug ran project build branch use link project react reactdom problem still", "d": "2/2018"}, {"body": "mcjazzyfunky use react devtools tell build running assume react addon library library two different packages depending environment eg fancyreactaddondevelopmentjs vs fancyreactaddonproductionminjs also assume whatever reasons make sense maybe even allowed use react development module combination production module addon library vice versa addon development production build must check similar determine features included build unless two entirely separate code paths seems unreasonable addon meant used react applications would recommend use heuristics react uses checking checking environment way consumers import rely build system nt recommend different behavior production development builds outside things like warnings safety checks check using production build documentation information approach", "d": "2/2018"}, {"body": "aweary thank much answer think unfortunately question may comprehensive enough please let try ask different way following twoliner first line code evil change first line evil longer aware concrete browser example neither node processenv react devtools nt recommend different behavior production development builds outside things like warnings safety checks replace throw new error comment consolewarn satisfy yourfacebook recommendation nt forget aspect justifies differences dev vs prod performance necessary provide example matters think currently necessary", "d": "2/2018"}, {"body": "change first line evil longer short nt way nt trying test environment runtime like nt forget aspect justifies differences dev vs prod performance necessary provide example matters think currently necessary nt recommend trying run semantically different code dev prod need exclude include code based environment recommend use something like ask consumers library set environment build process already required use react", "d": "2/2018"}, {"body": "aweary thanks answer recommend use something like nodeenv scenarios nodeenv like jsfiddle demos example germany web shop system kind special tag html templates takes bunch", "d": "2/2018"}, {"body": "scenarios nodeenv like jsfiddle demos example germany web shop system kind special tag html templates takes bunch", "d": "2/2018"}, {"body": "yidingalan according spec nt property expect work react previous behavior could bug arrow functions render affect performance cases like", "d": "2/2018"}, {"body": "trysound right probably nt worked react reason whitelisted attribute also configured set property means set like instead set attribute meant react creating new property element probably nt happened react sets attribute using reading still works input elements dom keep property sync attribute since anchor elements nt property default setting attribute nt set property recommend either using arrow function unless benchmarked problem rare using data attribute like hope helps", "d": "2/2018"}, {"body": "please provide working example bug using jsfiddle template example given complete thanks", "d": "2/2018"}, {"body": "seems experiencing issue happens chrome works well firefox suspect bug chrome show right state new render", "d": "2/2018"}, {"body": "btw issue typo radjivc", "d": "2/2018"}, {"body": "nihgwu typo alright problem zendesk iframe maybe problem close issue thanks guys", "d": "2/2018"}, {"body": "well sorry close post misspelled labeled labelled", "d": "2/2018"}, {"body": "expected supposed switch controlled uncontrolled components", "d": "2/2018"}, {"body": "expected behavior react adds additional properties placeholder title readonly changes existing property value input replaced rather replacing entire input even though returns different input element identical one passed due way react diffs changes considered update existing input element new element happens render input value warning occurs use represent empty value controlled component use check section docs controlled input null value hope helps", "d": "2/2018"}, {"body": "see expected behavior thank much clarification much appreciated apologize inconvenienced", "d": "2/2018"}, {"body": "esprehn please post forking discussion makes harder follow reason issue reopen since discussion", "d": "2/2018"}, {"body": "expected behavior whitespace meaningful jsx space actually rendered according jsx docs jsx removes whitespace beginning ending line also removes blank lines new lines adjacent tags removed new lines occur middle string literals condensed single space", "d": "2/2018"}, {"body": "think see problem font awesome changed default behavior replace tag svg guessing recommended use instead", "d": "2/2018"}, {"body": "wzup abort xhr unsubscribe events set conditional flag prevent depends api use react gives place", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "think duplicate", "d": "2/2018"}, {"body": "right suggestion worked well thank", "d": "2/2018"}, {"body": "please provide details issue template deleted without information like version react using example reproducing problem difficult figure happening", "d": "2/2018"}, {"body": "aweary updated details", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "checksum validation react nothing enable related issue discussion", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "aweary thanks", "d": "2/2018"}, {"body": "solve acemarke assume socket still alive component unmounted turn socket callback listener componentwillunmount", "d": "2/2018"}, {"body": "try changing code also try reproduce issue jsfiddle try debugging code also help", "d": "2/2018"}, {"body": "try debugging code also help put breakpoint ternary nt run code branch child component looks like nt even touch lifecycle event nt use child component work properly", "d": "2/2018"}, {"body": "try changing code actually helps basically done jsx const parent someprop gt const child someprop gt someprop null const parent someprop gt const child someprop gt var children initially contain multiple elements make array better situation coverage questuon first one code nt working nt even hit brakepoint inside child component", "d": "2/2018"}, {"body": "maybe something wrong putting ternary condition inside", "d": "2/2018"}, {"body": "please provide full example run reproduce problem", "d": "2/2018"}, {"body": "possible really related react bug tracker questions use stackoverflowcom please", "d": "2/2018"}, {"body": "thank replying actually researched topic lot seem find answer even lead would go would able give advice point right direction go figure aside issue directly linking bundlejs page also issue openly available server thing think bundlejs residing directory publicly available loading contents bundle page using ssr would really appreciate help already asked stackoverflow done lot searching find pointers get done", "d": "2/2018"}, {"body": "possible react js frameworks whether serve bundle user related javascript frameworks purely severside limitation depends use server side said use php need check user authenticated php serving bundle authenticated nt serve hope helps need pointers would search something like nt serve static file unauthenticated user php", "d": "2/2018"}, {"body": "thank", "d": "2/2018"}, {"body": "nice", "d": "2/2018"}, {"body": "ailrun sure asking please clarify", "d": "2/2018"}, {"body": "aweary states event delegated since consistently bubble browser makes problem least know problem occurs react nt support could give name browser makes problem really thank response", "d": "2/2018"}, {"body": "current example likely want called dom actually updated condition may attempt scroll item view prematurely alternatively could consider ref rather dom apis example jsx class tabs extends reactcomponent render return thispropstabsmap tab gt scrollref ref ref refscrollintoview", "d": "2/2018"}, {"body": "thanks iamdustan actually nt used lifecycle method see much better solution deprecating probably help steer lot folks like better direction use cases like one", "d": "2/2018"}, {"body": "gaearon solved bug particular task changing key props emojiresultrow item title index bad decision bug maybe provider reconciliation new code emojiresults", "d": "2/2018"}, {"body": "gaearon alexanderkositsyn know bug todo list", "d": "2/2018"}, {"body": "hello gaearon issue beginner friendly", "d": "2/2018"}, {"body": "maybe skipping would two lines need soon promise wait days", "d": "2/2018"}, {"body": "gaearon would love contribute understand need skip", "d": "2/2018"}, {"body": "fibers contextprovider contextconsumer tags", "d": "2/2018"}, {"body": "fixed", "d": "2/2018"}, {"body": "show nicer error message nt agree render ambiguous technically text node message make sense", "d": "2/2018"}, {"body": "gaearon like jump", "d": "2/2018"}, {"body": "elbaumpj", "d": "2/2018"}, {"body": "would someone mind pointing right direction might find relevant logic issue figured would reactcontextjs trouble figuring actual error message generated also wonder new message say something like consumer component children must return react element jsx honest exactly sure consumer demands new line children", "d": "2/2018"}, {"body": "elbaumpj find call site using stack trace error thrown codesandbox example posted ryepesg context consumer render callback called add call calling checks actually function honest exactly sure consumer demands new line children nt actually require newline requires render single child function case space function created text node function returns foo insert space space meaningful trying call array children function causes throw newline fixes newline nt create new text node help also wonder new message say something like consumer component children must return react element jsx gaearon probably better copy gist something like context consumer rendered multiple children child nt function context consumer expects single child function pass function make sure trailing leading whitespace around", "d": "2/2018"}, {"body": "aweary super helpful thank", "d": "2/2018"}, {"body": "took crack hope issue", "d": "2/2018"}, {"body": "raunofreiberg nt really appreciate clearly claimed issue nt got chance make pr yet states docs decide fix issue please sure check comment thread case somebody already working fix nobody working moment please leave comment stating intend work people accidentally duplicate effort somebody claims issue follow two weeks fine take still leave comment", "d": "2/2018"}, {"body": "oops sorry merged without looking took issue assumed submitter saw thread would nt try submit pr outside process guess fixed raunofreiberg please nt take claimed issues future", "d": "2/2018"}, {"body": "got apologies elbaumpj", "d": "2/2018"}, {"body": "swyx need set reactdom dependency well fix issue", "d": "2/2018"}, {"body": "doh thanks gareth", "d": "2/2018"}, {"body": "search issue tracker find bunch threads topic please refer rather creating new issue another question please check community support resources", "d": "2/2018"}, {"body": "discussed lot times take look rfc original thread", "d": "2/2018"}, {"body": "import child components context different", "d": "2/2018"}, {"body": "trysound yeah read topics nt see problem listed section gaearon importing child components tree dependency graph flat know right way importing way spaghetti dependency graph difference", "d": "2/2018"}, {"body": "nt understand mean spaghetti dependency graph components imports react make graph spaghetti shows components using library similarly components rely specific context need import show depend better large projects nt risk context collisions naming nt colocate context exports components anywhere tree even npm package", "d": "2/2018"}, {"body": "spaghetti dependency graph mean imagine contexts consumers component tree import contexts graph look like form name case star graph easier manage delete replace nt nt mean organize graphs mean let focus original problem way provide piece data components tree without messing achieve new one understand new context solve many problems previous one new context implemented merged seems ready release suggest please consider trade gt", "d": "2/2018"}, {"body": "problems would solve problems would issue gt ca nt see importing context would cause problems sort abstract makes dep graph ugly nt think good reason also nt think true even", "d": "2/2018"}, {"body": "okay seems problem talking think issue closed btw agree gaearon nt colocate context exports components anywhere tree even npm package components colocate imports contexts move components problem wo nt move lot npm packages solve problem yes good longtermsupport code indevelopment code updating take lot time another problem wo nt talk", "d": "2/2018"}, {"body": "problems would solve problems would issue gt judging issue one commented voted issue react repo confident answer yes npm packages solve problem yes good longtermsupport code indevelopment code updating take lot time another problem wo nt talk think describing react api problem dependency management problem existing solutions like yarn workspaces let treat local code folders npm packages imports like instead", "d": "2/2018"}, {"body": "think another use case besides logging trying think one", "d": "2/2018"}, {"body": "think like component stack errorstack etc mostly logging form either event handler commit phase lifecycle could contrive use case would use stack render nt real one mind", "d": "2/2018"}, {"body": "nervous since read apis like finddomnode ismounted problematic past", "d": "2/2018"}, {"body": "like love god let call middleware please", "d": "2/2018"}, {"body": "contextmap", "d": "2/2018"}, {"body": "yeah like contextmap contexttransform", "d": "2/2018"}, {"body": "like contexttransform map overloaded tag google maps map hash object", "d": "2/2018"}, {"body": "alternatively could add prop contextconsumer", "d": "2/2018"}, {"body": "thirdparty vote name pretty apparent connotation node stream transforms", "d": "2/2018"}, {"body": "sebmarkbage think doable userland looking context api seems low level curious really expect plain use would warrant addons everything bit verbose transforms creation reading sharing kept relatively simple focussed one thing well would fine userland build patterns around", "d": "2/2018"}, {"body": "explain registering would cause rerender think right needs didmount", "d": "2/2018"}, {"body": "thanks quick response basically input registered adds form state default props ie propagated back input via move means none props set initial render since component nt registered yet input registered change global form state triggers rerender refactoring use would nt difficult want confirm recommended approach", "d": "2/2018"}, {"body": "yes recommended approach input registered change global form state context triggers rerender sounds unfortunate think might make sense initialize create fields lazily first change", "d": "2/2018"}, {"body": "gaearon jumping thread think might make sense initialize create fields lazily first change possibly relying props like register input initially rendered first time also default flags like istouchedispristine get default values expected input first render assume fix would return null render initially register didmount render would work fine initial props curious order changed also would imagine component replaced another first unmount one mount used react thanks", "d": "2/2018"}, {"body": "order changed intentionally mentioned release notes breaking change reason want react able start work new trees asynchronously old trees still visible start working tree first render old tree unmounted particular case maybe way keep state interdependent hoisted initialised lazily state determined component could initially component gathered form needed submission great answer create minimal example demonstrating need please create new issue specifically pattern formfield communication maybe come api could make cases natural hard discuss without code could run", "d": "2/2018"}, {"body": "gaearon thanks answering bottom line solution set sandbox code differences react react raw sample actual code involves hocswrappers works kinda like html form meets redux knows inputs values holds everything context side effect order change register new input happens unregister old input ideal flow old input unregisters actually removes new input solution took move willmount registration didmount render null context nt filled yet input state", "d": "2/2018"}, {"body": "let keep open discussion interesting may better ways personally nt much time look though", "d": "2/2018"}, {"body": "hey bllfrnch copied example jsfiddle unable reproduce issue guess codepen compiling classes way support context around kind issue hope helps", "d": "2/2018"}, {"body": "bug intentional change behavior inconvenient cases prevents whole bunch bugs caused reentrancy past also pretty fundamental enabling new algorithm nt see changing piece dom longer available synchronously need still see fiddle note callback called finishes called exit toplevel user wo nt see intermediate state", "d": "2/2018"}, {"body": "need case external library prosemirror manages state children expects code manages state childrens children using synchronously fiddle code sets prosemirror expects able query dom immediately exits callback executes library nt able find piece dom needs finding piece dom situation important prosemirror needs able interpret subsequent native browser contenteditable events according internal mapping dom nodes state contenteditable document asynchronously rendering context would introduce kinds timing issues state mapping managed also pretty fundamental enabling new algorithm nt see changing would nt expect change wondering ways guarantee dom paints synchronously isolated render contexts like reading thru source code methods control react batches renderingreconciling hooks would allow control reactdom rendering executes specific situations", "d": "2/2018"}, {"body": "explain detail solution portals nt work presumably way pass value opaque process value already rendered div ready inserted", "d": "2/2018"}, {"body": "realizing included original fiddle problem portal would responsible rendering component whose required props nt ready external library chance render props data structures createddestroyed external library updated original fiddle illustrate", "d": "2/2018"}, {"body": "struggling see solution could tell specific use case eg data component getting prosemirror prosemirror expects synchronously see rendered right runs hook", "d": "2/2018"}, {"body": "library react components define structure various elements rendered contenteditable element prosemirror whose children managed prosemirror eg something like following use component allow components define dom hierarchy editable children rendered document whose abstract data structure looks something like header would rendered prosemirror using headercomponent whereas headline summary paragraph might rendered using plain dom node creation desired end dom state looks something like html ny metro breaking news headline summary news upon time filling blanks little headercomponent rendered inside prosemirror hook prop would derived data structure prosemirror maintains node document something like trick getting prosemirror able find childrencontainer selector header node created insert elements location node", "d": "2/2018"}, {"body": "root dom begaining react managed react put dom instead put react element app", "d": "2/2018"}, {"body": "way like possible", "d": "2/2018"}, {"body": "created pen seems fine random thing", "d": "2/2018"}, {"body": "saw many people put entire rendered markup divroot hack seo search engine crawlers problem parsing clientrendered applications definitely send rendered markup using reactdomserver put random things right feel free put whatever want inside root container react simply clear child nodes rendering server rendering would instead use would avoid cost throwing away markup starting scratch", "d": "2/2018"}, {"body": "aweary thank much", "d": "2/2018"}, {"body": "hey romaingoncalves behavior changed react release see blog post dom attributes react details know said ca nt updating yet unlikely making releases changes attribute whitelist definitely recommend updating soon lots great stuff coming potentially use workaround", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "remove", "d": "2/2018"}, {"body": "sorry office troll action", "d": "2/2018"}, {"body": "hi would helpful include live example reproduces issue use codesandbox nt really know mean tried shorter version code posted everything seems work select another option new text fetched selected format nt work exactly", "d": "2/2018"}, {"body": "need set prop seen", "d": "2/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "woo hoo thanks incredibly detailed bug report know happening easy fix get working release", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "error message says might mixed default named exports default export import need use default import note lack curly braces use curly braces importing importing named import called case needs corresponding named export called note presence curly braces places learn", "d": "2/2018"}, {"body": "shiyiya dont work gaearon close question issue dont solved yet", "d": "2/2018"}, {"body": "pterpmnta answered question problem seeing mixing default export named import use one nt help post details exactly nt ca nt guess", "d": "2/2018"}, {"body": "gaearon still problem dont know still happened", "d": "2/2018"}, {"body": "maybe nt recompile something hard say sure without full reproducible project download try", "d": "2/2018"}, {"body": "gaearon wait minute upload project give second", "d": "2/2018"}, {"body": "clarify specific fix suggesting replace rebuild still see problem please post full code screenshots", "d": "2/2018"}, {"body": "gaearon ame change still issue", "d": "2/2018"}, {"body": "gaearon cheack repo react scaffold", "d": "2/2018"}, {"body": "asked earlier please provide exact instructions reproduce issue screenshots hard people help information error seeing error changed", "d": "2/2018"}, {"body": "gaearon error write", "d": "2/2018"}, {"body": "reason even change code still get old compiled bundle nt know unrelated react code looks correct something build process caching output file", "d": "2/2018"}, {"body": "gaearon solved user answer stackoverflow answer", "d": "2/2018"}, {"body": "difference react emits attribute server", "d": "2/2018"}, {"body": "ok pasted input outside react app altogether containing serverside template like seeing issue firefox bug nothing react seems close", "d": "2/2018"}, {"body": "probably bug", "d": "2/2018"}, {"body": "gaearon like claim", "d": "2/2018"}, {"body": "sounds good", "d": "2/2018"}, {"body": "could point right direction migration path starts attributes looking prs mentioned try figure start looking little overwhelming", "d": "2/2018"}, {"body": "swieckowski think want look dompropertyoperations two lines known attribute unknown attribute values get stringified respectively sure gaearon intends warn attributes nt recognize good place start keep mind warning timing logic happen dev bundle handled wrapping code checks see examples file linked hope helps", "d": "2/2018"}, {"body": "getting referenceerror performance defined something files client datenow works fine hand", "d": "2/2018"}, {"body": "also sure reliably test something involves performance issue across different machines something write test", "d": "2/2018"}, {"body": "getting referenceerror performance defined something files client datenow works fine hand make sure using lowercase p supported major browsers want sure accurately measuring timing nt good choice given low resolution compared also sure reliably test something involves performance issue across different machines something write test write test use value practically always order magnitude expensive threshold example set threshold milliseconds test something takes stringify could try overriding expensive work essentially always take long js const attributevalue tostring expensive work like computing hash", "d": "2/2018"}, {"body": "aweary made sure use proper capitalization got reference error tests matter tried function made used dev used dev stringifies value warns took long const stringifywithperformancewarning value gt const stringifystart performancenow let attributevalue value tostring const stringifyend performancenow warning stringifyend stringifystart lt stringifying attribute causing perfomance issues return attributevalue got reminded project euler thinking expensive functions decided insert find nth prime algorithm suitable number get prime machine", "d": "2/2018"}, {"body": "short version guessing alright test nonprimitive data types longer learning experience version technically attribute values could type including primitives started researching function calls like work js kind complex understanding primitives briefly coerced objects call really nt instance method override change actual insert primitve prototype override rubs wrong way pollute actual datatype prototype especially time wasting function going go forward assumption big deal testing primitives sorry pedantic", "d": "2/2018"}, {"body": "made sure use proper capitalization got reference error tests matter tried huh assumed jsdom support already added within last month version depend nt could potentially polyfill test setup would let us also implement version always returned times increments greater threshold could avoid actually wait think better idea raises question want fall back nt available scheduler since warning people develop browser supports might matter gaearon thoughts", "d": "2/2018"}, {"body": "cc banga case find interesting", "d": "2/2018"}, {"body": "know probably take seriously internally good reason every time see like back separated reactdom core library ca nt help chuckle little bit inside", "d": "2/2018"}, {"body": "might also worth ensuring right compatibility mode enabled option passed prepack enable comes bunch predefined abstracts dom things like need added though", "d": "2/2018"}, {"body": "trueadm strangely tried made difference maybe little", "d": "2/2018"}, {"body": "gaearon huge amount key ones like etc supported", "d": "2/2018"}, {"body": "implementation detail may change releases practice difference html caseinsensitive", "d": "2/2018"}, {"body": "cc aweary", "d": "2/2018"}, {"body": "change made specifically single select since specced behavior supposed seems like behavior specified confusing complication one dom fun folks ref", "d": "2/2018"}, {"body": "jsfiddle showing nonreact behavior multiple false selects first option multiple false size nt select first option multiple true nt select first option multiple true size nt select first option chrome safari ff random bonus like year old bug webkit affect looks like logic select first option displayed like listbox", "d": "2/2018"}, {"body": "last time touched select logic nt actually affect behavior seeing nt called reason see regression order operations attributes set children appended changed react attributes set element children appended means set option elements appended react children appended attributes set parent elements appended set calls called exposes nuanced behavior around option elements work append child element updates append child multiselect happens react append options select element assumes single select see spec defined behavior jquense mentioned example reproducing issue without react see set appending options works expected", "d": "2/2018"}, {"body": "solution likely either ensure attributes set children appended would make react consistent would potentially resolve unknown issues arise due think also require changes reconciler maybe may affect renderers different requirements special set attributes set children appended go back attributes children set manually fix first option probably best one nt cause problems third option probably easiest hacky solution", "d": "2/2018"}, {"body": "aweary mind take first issue", "d": "2/2018"}, {"body": "garethsmall go let us know questions straightforward code base p", "d": "2/2018"}, {"body": "jquense thank got many looking tests afterwards sure ask", "d": "2/2018"}, {"body": "continuing discussion think makes sense ensure attributes set children appended try comb spec append behavior forks based parent attributes gut tells nt unique unique attributes depend children appended attribute set maybe manually fixing best idea problem reordering reconciler methods might make sense renderers like react native maybe acdlite bvaughn insights maybe could put call somewhere else lifecycle sure", "d": "2/2018"}, {"body": "looks like two things setinitialproperties setting initial properties handling events fair say two processes separated also confirm issue areas going tests fiddle see cause issues order", "d": "2/2018"}, {"body": "another thing note set properties append children run issues example defaultvalue property set properties gt append children defaultvalue wo nt set think suggested manually fixing may best option", "d": "2/2018"}, {"body": "already finally found reactelementvalidator file well least learned something", "d": "2/2018"}, {"body": "runtime dependency need use react run react folder mistake need install react development dependencies use hard say without context message irrelevant react recommend keeping date warning completely safe ignore", "d": "2/2018"}, {"body": "please see", "d": "2/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "xialvjun rfc may use discuss", "d": "2/2018"}, {"body": "trysound proposal totally rfc proposal nt mutate state get", "d": "2/2018"}, {"body": "show realworld use case feel necessary", "d": "2/2018"}, {"body": "exactly callback able use", "d": "2/2018"}, {"body": "well indeed use callback ensure executed rendered fact forgotten want api remember upon time confused component rendered state merged event occurred fast like totally rely sometimes attach state like well sorry maybe api necessary", "d": "2/2018"}, {"body": "hi idea discussed rfc well followup issue filed repo short version current api enable shown example js class examplecomponent extends reactcomponent initialize state constructor property initializer state static getderivedstatefromprops nextprops prevstate nextpropscurrentrow prevstatelastrow return lastrow nextpropscurrentrow isscrollingdown nextpropscurrentrow gt prevstatelastrow felt nullable parameter would potentially confusing using intuitive", "d": "2/2018"}, {"body": "right mentioned original post know current api requires mixing props state linked similar example one provided know end world mix props state bad code smell particularly mixing props state sole use function curious know think parameter would confusing particularly since use would entirely optional thanks linking rfc issue nt thought look discussion repo summarize currently large number react components currently utilize componentwillreceiveprops almost compare several props migrate using push every one props state opinion ideal also means go sanity check state components make sure nt accidentally end prop vs state key collisions make sure nt mixup reading key state accidentally instead props last point probably one best reasons could put forward think cleaner arguably less confusing pass prevprops extra argument", "d": "2/2018"}, {"body": "curious know think parameter would confusing particularly since use would entirely optional reasons previous mentioned rfc discussion thread linked reply read thread", "d": "2/2018"}, {"body": "lol yes despite length scan nt see specific reference think parameter would confusing", "d": "2/2018"}, {"body": "sorry obtuse would passing lead confusion something related discussion thread surrounding", "d": "2/2018"}, {"body": "sorry nt trying sound sarcastic serious question literally discussed already rfc issue linked nt seem productive repeat discussion deeplinked previous conversation although looks like github autocollapsing parent thread page load since many comments sucks try loading page searching amannn reviewed days ago click show outdated see expanded comments", "d": "2/2018"}, {"body": "ahhh yeah obvious indeed buried show outdated thanks patience got orientated know confusion referring initial call prevprops yet exist vote would still rather force pollution state read original thread see concern already raised nonetheless committed api maybe look creating kind utility hoc least removes duplicated boilerplate required moving props state ideally even stores one state key mitigate risk collisions something like", "d": "2/2018"}, {"body": "yeah worries looks like github bug reached appreciate understanding", "d": "2/2018"}, {"body": "thysultan case react nt react changing props case new context api relating shouldcomponentupdate component renders consumer like", "d": "2/2018"}, {"body": "trysound assumption bug based test case updates propagate component leaf", "d": "2/2018"}, {"body": "thysultan bug indirection component rerendered prop changed consider prop", "d": "2/2018"}, {"body": "trysound sure understand updated click toggle top data first time stops updating future events test details new context api able propagate updates number nested components could otherwise prevented update alternateolder context api", "d": "2/2018"}, {"body": "think test linked specifically confirms behavior works correctly component rendered since returns false rerendered value changes case test shows changes nt propagating component inner consumer think expected inside toplevel consumer however changes nestedprovider propagate", "d": "2/2018"}, {"body": "behavior works first click subsequent clicks registered every click alternate true false", "d": "2/2018"}, {"body": "nt know test hard read several levels indirection stuff tried simplify little better understand see behavior would expect", "d": "2/2018"}, {"body": "expected result based understand test specifications would identical", "d": "2/2018"}, {"body": "please take look codesandbox linked let know unexpected codesandbox bit odd following structure sure level nesting indicative valid usecase", "d": "2/2018"}, {"body": "codesandbox linked nt reveal behaviorbug yes lot think intentional particular example original kentcdodds added component get better sense context api spec support new context api restrictions amount indirection context update propagate", "d": "2/2018"}, {"body": "convinced reasonable bug even mean context wrap example looks like mistake like using consumer provider exactly opposite way intended rewrote attempt simplify", "d": "2/2018"}, {"body": "point example kent referring", "d": "2/2018"}, {"body": "assume referring blog post demonstrate odd wrappingnesting behavior codesandbox think kind version kent shows indirection mention also seems work", "d": "2/2018"}, {"body": "codesandbox fork kent codesandbox fork added component test react would handle within level nesting", "d": "2/2018"}, {"body": "acknowledge strange nesting structure explain important believe cause behavior reporting unexpected nt understand necessary instance remove double layer middle pen behaves like want", "d": "2/2018"}, {"body": "bvaughn consumer wrapping provider pattern ran migrating code new api way components mapalter context passes seem though like problem least pattern mixed around nested providers still think cases might happen naturally eg nested themedcomponents consumer context", "d": "2/2018"}, {"body": "clear context supports nesting provider multiple times tests okay provider ancestor consumer code snippet provided looked bit unnecessarilyarbitrarily complex trying better understand way sure yet specific bit causing problem maybe try pair unit test morning", "d": "2/2018"}, {"body": "case whether bug react whether code strange two different discussions", "d": "2/2018"}, {"body": "sure trying help also able simply example effectively", "d": "2/2018"}, {"body": "yeah mean sure level nesting indicative valid usecase nt mean nt fix", "d": "2/2018"}, {"body": "case whether bug react whether code strange two different discussions nt mean imply otherwise although rereading comment quoted see gave impression", "d": "2/2018"}, {"body": "thought wanted make sure original author also knows", "d": "2/2018"}, {"body": "good call going pick see catch local test intent anyway wanted eat breakfast first", "d": "2/2018"}, {"body": "reduced case convinced bug think might artifact reading closure old render sure", "d": "2/2018"}, {"body": "reduced case remove component comment scu method bug nt manifest thinking along lines saying though wrt stale data", "d": "2/2018"}, {"body": "apparently gave wrong link smaller example codesandbox nt save", "d": "2/2018"}, {"body": "adding logging click handler sandbox shows calling stale data onclickhandler toplevel true onclickhandler toplevel true", "d": "2/2018"}, {"body": "example components combined", "d": "2/2018"}, {"body": "think problem inner prevents rerendering new data time clicked reapplies stale data", "d": "2/2018"}, {"body": "consumer rerendered time though added logging shows", "d": "2/2018"}, {"body": "makes sense sounds expected behavior tree fix would move indirection consumer way react could know leaf component button uses value", "d": "2/2018"}, {"body": "yup yup agreed", "d": "2/2018"}, {"body": "guess worth documenting gotcha", "d": "2/2018"}, {"body": "original example still confuses though indirection appears inside consumer", "d": "2/2018"}, {"body": "ahh get inside nested consumer trying read value toplevel consumer though exactly toggle nested keeps working uses context values indirection", "d": "2/2018"}, {"body": "yup", "d": "2/2018"}, {"body": "hate render props well hate find present pitfalls compared hocs people readily ignore anyway fine new context api ranting bit", "d": "2/2018"}, {"body": "cc acdlite writing new context api docs", "d": "2/2018"}, {"body": "things going one closures confusing really easy accidentally depend values outer scope without realizing gaearon right render props rely closures exacerbate confusion view core problem examples always returns false solution worth pointing could bug hoc normal component returning return false indirection signaling react children never rerenders children click event handler never gets updated new closure values stale next time click unit tests context happen always return false places bad chosen realistic scenario never unless children completely static believe actionable items react add additional documentation advice never treat two closures two props equal unless referentially identical since impossible know values close documentation new context api advertising ability bypass bailouts nt mislead people thinking reach javascript closures swap values", "d": "2/2018"}, {"body": "understanding new api looked like bug since manifested limitation old context api expected rerender regardless also update inline function", "d": "2/2018"}, {"body": "expected dataconsumer rerender regardless shouldcomponentupdate false also update inline onclick function rerender reason would update function though says never update new children ignores updated maybe simpler way explain imagine code like hope see way would update either old new context would nt even update context usage make sense new context nt force every single component update case components happen pass context value later render new context fixes issue context consumers would nt get updated everything flow like normal react subject normal react rules another way explain example would work changed shallowly compare props eg inheriting would notice element changed old context would nt work new one", "d": "2/2018"}, {"body": "thysultan easy way confirm consumer rerenders put log statement inside render prop", "d": "2/2018"}, {"body": "dataconsumer rerender reason would update onclick function though indirection says never update new children assuming rerenders also reconciles difference say calls render prop function reconciles part tree using new return value hope see way value would update either old new context outside sure example would apply case", "d": "2/2018"}, {"body": "applies case obvious root issue referencing toplevel value nested closure bottom nt update children context consumer rerendered refused update value closure stale uses previous value exact problem closed variable top render method blocking indirection middle even component deeper indirection rerendered would still stale toplevel value stale closure", "d": "2/2018"}, {"body": "anyone reading later avoid problem always make sure either nt write hand return example swallowed new closure", "d": "2/2018"}, {"body": "thanks makes sense", "d": "2/2018"}, {"body": "anyone wants play around concept made sandbox might useful", "d": "2/2018"}, {"body": "lets", "d": "2/2018"}, {"body": "instead ref someref use ref ref gt thissomeref ref", "d": "2/2018"}, {"body": "hrachmkr issue saved value saved correct behavior get", "d": "2/2018"}, {"body": "wzup explicitly set expect anything string refs behavior nt rely use callbacks also new ref api soon", "d": "2/2018"}, {"body": "callback pattern mean one described everywhere else page value saved value correct behavior yes set point callback refs completely control magically appear reactcontrolled field hope helps", "d": "2/2018"}, {"body": "ioiurson called every time didupdate already got element nt need assigned docs mean different lifetime component ref child example add remove component ref prop react dom didmount willunmount ref callback called didupdate", "d": "2/2018"}, {"body": "maybe change docs say refs guaranteed uptodate componentdidmount componentdidupdate fires feel free send pr", "d": "2/2018"}, {"body": "create minimal test case fails similar ones", "d": "2/2018"}, {"body": "example second outside provider nt think supported usecase begin positive although agree getting value seems unexpected believe valid case default value passed consumer", "d": "2/2018"}, {"body": "got test submit lunch", "d": "2/2018"}, {"body": "added pr failing test look soon captures failure", "d": "2/2018"}, {"body": "bvaughn took look tell problem related ends wrong provider updated match updated wrong provider", "d": "2/2018"}, {"body": "think current stack approach assumes stable order providers pushed popped stack consumed providers nested consumers rendered without providers gets sync", "d": "2/2018"}, {"body": "yeah thinking step away meetings right writing test thanks brandon", "d": "2/2018"}, {"body": "awesome happy hear right track maybe would good problem fuzz testing cover crazy combinations", "d": "2/2018"}, {"body": "yeah andrew keen improving fuzz tester better cover cases like", "d": "2/2018"}, {"body": "ahh sorry aweary missed looking posted might work nt tested", "d": "2/2018"}, {"body": "sophiebits worries enough time try diagnose anyways", "d": "2/2018"}, {"body": "hey iamstrings looks like someone else opened similar issue website repo right place please see comment issue thanks", "d": "2/2018"}, {"body": "nt anyway access sicne internal api plenty libraries npm tho grab handle nt particularlly big size personally use", "d": "2/2018"}, {"body": "jquense thx pointer", "d": "2/2018"}, {"body": "flow contains builtin react typings fixed", "d": "2/2018"}, {"body": "caused mozilla firefox browsers version firefox released almost years ago specific reason running old version caniuse usage statistics puts approximately total usage means significant group people still using version please try update newer version try possible bug incompatibility old version given age likely spend time trying resolve", "d": "2/2018"}, {"body": "maritime company manages fleet hundreds vessels means upgrading option furthermore lot legacy applications run board thus need compatible time primary reason chose react development framework", "d": "2/2018"}, {"body": "thanks context interesting usecase react aim broad browser support providing support legacy browsers nt primary goal library example dropped support two years ago needs include library longterm support legacy platforms react may best fit provide specific details error getting happy try figure workaround likely backport potential fixes older versions may want consider forking library maintaining version", "d": "2/2018"}, {"body": "finding bug related reactdom", "d": "2/2018"}, {"body": "hey saenglert known issue tracked resolved nt patch releases since may release uncertain moment definitely recommend upgrading lots great stuff make worth", "d": "2/2018"}, {"body": "seal event object non strict environment adding extra properties nt warn anything ignoring makes debugging hard strict mode get error something like uncaught typeerror add property foo object extensible trade", "d": "2/2018"}, {"body": "think safe assume react users run strict mode", "d": "2/2018"}, {"body": "still run initial concern sealing would prevent extension granted probably great pattern bet handful folks show say integral abstraction built feature p", "d": "2/2018"}, {"body": "rewrite check verify existing fields used take pool want get rid proxy annoying", "d": "2/2018"}, {"body": "work verify change makes sense", "d": "2/2018"}, {"body": "using es proxy properties nt show sounds like debugger bug", "d": "2/2018"}, {"body": "nt think trying enumerate potentially sideeffectful would nt safe debugger", "d": "2/2018"}, {"body": "trap may specific debugger", "d": "2/2018"}, {"body": "point way pass data handler avoid need work arounds added hoc case case situation way inconsistent sometimes added values defined sometimes id never use production think api", "d": "2/2018"}, {"body": "justduy please explain asking", "d": "2/2018"}, {"body": "use arguments", "d": "2/2018"}, {"body": "indeed intentional know frustrating depend specific api allowed us solve many nasty issues old api used suffer recommendation switch portals", "d": "2/2018"}, {"body": "primarily want adopt createreactapp nt need grunt work said also doc", "d": "2/2018"}, {"body": "sorry new docs nt helpful wrote quite bit probably fault page three commands enough set app specifically lacking", "d": "2/2018"}, {"body": "tried method babel files included nothing packagejson config files look nodemodules installed ton stuff nt packagejson nt know createreactapp thing set project expected something nodemodules needs inside packagejson also saw babel packages nodemodules babel config files theres nothing even packagejson get first place mainly nt want use createreactapp nt know nodemodules coming packagejson ca nt change anything config files ca nt change babel settings way documented nt give instructions says use babel link website click nothing even mentioning react version use set install webpack says use link website questions babel needs depth instructions set nt say use absolutely context around another note use createreactapp thing instructions page actually run back react pages got nothing running webapp browser able change get complicated nt know though nt like using automated scripts set bunch stuff least first couple times something like step step guide tells exactly need works way get much better understanding going project working getting anything goes wrong need change anything much better idea start", "d": "2/2018"}, {"body": "seems like getting started react less problem getting started jsnode ecosystem npm appreciate complex intuitive also hard know draw line library like react react docs include instructions using tool pl stack well definately helpful folks situation however actively confusing helpful folks already familar tool chains want learn react", "d": "2/2018"}, {"body": "trying fight talking hte various conflicting cross cutting challenges face documentation something like react", "d": "2/2018"}, {"body": "way npm works installs direct dependencies transitive dependencies project depends package depends babel webpack etc modules coming run created project see logical dependency tree tell organized also run move transitive dependencies like babel directly project help see everything works downside get painless updates example new versions webpack babel come work often taking weeks make sure everything works together intended configs updated regressions functionality etc behind scenes bump version single package however eject maintain babelwebpack setup fine wanted explain difference two approaches instructions page actually run pointed page lists commands need run four need extra steps work feel like giving another try something else could make clearer", "d": "2/2018"}, {"body": "would really helpful could post screenshot terminal point got stuck right creating project maybe something broken talk past see things screen thank", "d": "2/2018"}, {"body": "back react pages got nothing running webapp browser able change get complicated exactly pretty much section provides would change something", "d": "2/2018"}, {"body": "fairly familiar jsnode npm working reactnative year compare getting started docs react reactnative right react native exactly kind instructions talking go page select literally one page gets nothing starting react used page exactly like worked perfectly see createreactnativeapp library instructions use tell exactly install run links bottom get code setup done app already running time get bottom page lets choose want set easy ways prefer use eject nt want eject every dependency everything dependency get babel webpack saying people nt want script work would nice proper step step instructions get way nothing running browser like reactnative provides react used provide page nt offer much cause one quickstart installation section page quickstart skips installation together click instructions helpful need tell minimum install install versions need give link sites want go depth works", "d": "2/2018"}, {"body": "referring section offers download html file helpful would get running second productionready setup gives quick start babel extra tooling understand asking full guide one actually woefully incomplete example crucial difference development production versions explained also often getting outdated people complaining many steps get project running pivoted installation guides different direction sorry preferred old one find plenty guides setting webpack babel web sorry quite helpful maybe underlying tools easier configure without steps example webpack promises improvement add guide adding react existing app guide links page give really wellwritten guides babel webpack recommend check much better introductions tools could written", "d": "2/2018"}, {"body": "ok get want help people nt want deal bunch steps set nt whole createreactapp thing nt way explained depth people still want use step step version hard would add babel webpack sections quick line explanation install like babel says link babel page person go get full understanding way never leave webpage set project pointed couple things nt obvious page help asking add react existing project page fixed get little detail someone going getting started nt jump multiple websites get project running asking explanation babel webpack whatever else people may use works lines telling install old versions docs great could follow along never leave site get react project running asking give us enough nt leave site use product", "d": "2/2018"}, {"body": "understand valuable feedback happy review pr docs nobody else probably look webpack makes many steps straightforward another thing consider people want configure everything manually often wildly different setups eg different backends different development setups etc soon write specific stepbystep webpackfocused guide people start asking rails net want use parcel instead webpack rollup react promote webpack et cetera try satisfy requests making guide generic outsourcing specific documentation different tools docs cover scenarios back", "d": "2/2018"}, {"body": "could follow along never leave site get react project running single command understand looking something different see frustration coming hope address future think entirely fair say get project running without leaving website fact see many people able get projects running old instructions course people always alienated matter choice make", "d": "2/2018"}, {"body": "noticed returning fragment works fine could current workaround looking closely fragment return type declared correct however string string", "d": "2/2018"}, {"body": "fredyc ask repo responsible typescript definitions", "d": "2/2018"}, {"body": "see thought kind approval react typings coming nevermind", "d": "2/2018"}, {"body": "functional component return string number react element array null", "d": "2/2018"}, {"body": "returning boolean least false probably also works useless", "d": "2/2018"}, {"body": "gaearon useful conditional rendering nt like ternaries jsx js false amp amp", "d": "2/2018"}, {"body": "yes referring return value function nt think useful root level always", "d": "2/2018"}, {"body": "gaearon thanks confirmation pr case someone wants chime", "d": "2/2018"}, {"body": "also note currently differences sfc return class component return full feature parity", "d": "2/2018"}, {"body": "test renderer expected always behave synchronously similar reactdom compatibility mode react going forward also expect stay true need reproducing case something wrong", "d": "2/2018"}, {"body": "thanks quick response confident intended behaviour close reproduce reliably", "d": "2/2018"}, {"body": "make sense shallow rendering new context api see couple issues rendered inside simulated options way old context unless mistaken function passed wo nt actually called shallow render means ca nt test output", "d": "2/2018"}, {"body": "yeah clear makes sense either", "d": "2/2018"}, {"body": "loop componentwillmount bad", "d": "2/2018"}, {"body": "please wait blog post explain everything", "d": "2/2018"}, {"body": "late ask", "d": "2/2018"}, {"body": "yeah please follow rfcs discuss early also intentionally added api rarely needed nt type often obvious ca nt", "d": "2/2018"}, {"body": "guys breaking changes looks like waste thousands manhours big projects real benefit changes hope know", "d": "2/2018"}, {"body": "breaking changes react another minor release react always respected semver never introduced breaking changes public apis minor versions referring major releases like upcoming months away always breaking changes literally reason major releases thousand react components facebook make breaking changes without good migration path works scale", "d": "2/2018"}, {"body": "gaearon waiting blog post explain everything reassure us", "d": "2/2018"}, {"body": "kvolkovichsc must sacrifices progress", "d": "2/2018"}, {"body": "kvolkovichsc blog post comes together release see checklist things release right thread nt see sense adding pressure creating fud thread", "d": "2/2018"}, {"body": "locking focus getting release together blog post", "d": "2/2018"}, {"body": "include enzyme folks shallow context discussion since almost certainly affect public api sure worked around without support renderer tho", "d": "2/2018"}, {"body": "makes sense want reach", "d": "2/2018"}, {"body": "enzyme currently provides api setting legacy context shallow rendering reasonable add way mock well might expect shallow renderer act components nt exist tree would render depth would render context providers since real reason assert directly", "d": "2/2018"}, {"body": "believe dependency mismatch packages like specify dependency version prerelease match users mean npm version warning seems causes bigger problems yarn workspaces update release script adjust dependency version range handle case hopefully also fix ci", "d": "2/2018"}, {"body": "problem actually seems called dependency version include prerelease version", "d": "2/2018"}, {"body": "seems right want send fix", "d": "2/2018"}, {"body": "done", "d": "2/2018"}, {"body": "react templating library reviving templates like supported", "d": "2/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "2/2018"}, {"body": "pmidalwan", "d": "2/2018"}, {"body": "thanks grave tried getting error thanks error appjsx module found error ca nt resolve fs c userspmidalwandesktopreact app appjsx mainjs multi webpack devserverclient webpackhotdevserve r mainjs", "d": "2/2018"}, {"body": "hey frehner thanks report nt able reproduce memory leak using jsfiddle provided running chrome incognito mode see listener count remain mostly constant make sure run test incognito mode could chrome plugin causing problem share specific details setup specific chrome macos versions thanks", "d": "2/2018"}, {"body": "aweary tried incognito made sure extensions disabled incognito get thing typing fast box recording chrome macos mac", "d": "2/2018"}, {"body": "typing fast could probably seconds could try updating chrome reproducing", "d": "2/2018"}, {"body": "updated issue coworker try machine reproduced well", "d": "2/2018"}, {"body": "nt believe generating events fast renders fake events created every time call user code dev nt know reuse instance somehow", "d": "2/2018"}, {"body": "ah yeah renders appear actually causes focusing event listeners added update title reflect aweary noticed screenshot actually listeners added notice giant cliff left side appears get garbage collected something", "d": "2/2018"}, {"body": "clear going get gc yes would nice reduce dev pressure gc", "d": "2/2018"}, {"body": "able reproduce chrome screenshot chrome seeing multiple event listeners created frehner understand correctly happening dev mode issue wo nt affect production", "d": "2/2018"}, {"body": "frehner nt think showing case significant climb listenersmemory see numbers top stay mostly constant others reproduce", "d": "2/2018"}, {"body": "aweary triggering rerenders", "d": "2/2018"}, {"body": "zoomed way timeline picture timeline zoomed automatically last part scroll area zoom inout possibly zoomed one area", "d": "2/2018"}, {"body": "frehner yupp zoomed way jumps memory usage steep climb seeing gaearon smashing keys inside text input triggering renders reproduce profile ran incognito listeners stay memory moves seconds exception whatever reason go away", "d": "2/2018"}, {"body": "best guess multiple reacts bundle one older version support fragments multiple versions react even multiple copies one react version supported lead weird issues like", "d": "2/2018"}, {"body": "also inconvenient bug happens production react bundle results unhelpful error messages production errors include link gives exact message would seen development", "d": "2/2018"}, {"body": "probably throw one simple frustration dealing several random seeming issues around fragments two work days nt react main bundle current code loads react deps async booting main bundle include react least multiple copies react however notice whatever reason safari loads react like every browser means sort caching issue safari samsung internet troublesome browser odd checksum cache busters change files change although actual filename react remain anyway lead progress writing issue worthwhile thanks help", "d": "2/2018"}, {"body": "glad helped something side could improve please let us know", "d": "2/2018"}, {"body": "use refs js let inst function setinst inst reactdomrender node technically also use return value get instance comes pitfalls legacy api assumes rendering always synchronous moving model already case get value synchronously start rendering toplevel component lifecycle method another component need cautious using return value suggest refs instead keep mind guaranteed resolve synchronously another thing consider generally methods react components considered private fine call methods rare cases eg interop nonreact code really depends trying example want update react component better rerender using new props methods useful things accomplished imperatively focus", "d": "2/2018"}, {"body": "things parent defining context work child context consumer rendered within parent parent context provider rendered child example", "d": "2/2018"}, {"body": "ok thx working", "d": "2/2018"}, {"body": "bug props immutable means values props immutable btw universal deep clone easy deep clone easy", "d": "2/2018"}, {"body": "deep clone slow defies performance optimizations components longer compare values reference see optimizing performance docs details important ultimately nothing react guarantee mutate props accident recursively freeze objects working like stronger guarantees comes performance penalty recommmend production also use library like help making immutable updates", "d": "2/2018"}, {"body": "one item would", "d": "2/2018"}, {"body": "meowtec right modify codesandbox example work expected inconsistency see confusing case works cases design check docs reactchildrenonly information", "d": "2/2018"}, {"body": "thanks chiming well aware work around limitation questioning limitation exists stated docs reactchildren reactchildren provides utilities dealing thispropschildren opaque data structure supposed treat opaque element hierarchy take several representations example following element hierarchies react jsx const element foo const element foo first would return latter would despite producing virtual dom concern relevant given new support react arrays fragments wherever element expected find especially confusing purported conceptually behave differently far concerned jsx const element foo const element foo answer look type manually unwrap value longer opaque might well ditch utilities especially since sure going lie think justification noaction dogmatic concern backwards compatibility", "d": "2/2018"}, {"body": "jamesreggio sounds reasonable either takes array return array case either way solves confusion think", "d": "2/2018"}, {"body": "hi try keep react issuer tracker focused bug reports feature requests learning react suggest reading documentation specifically section synthetic events need info check support section different avenues thanks", "d": "2/2018"}, {"body": "use unnecessary react special support string objects created considered string primitives js checking rare case hot rendering code paths would wasteful also reliably detect objects coming another iframe anyway reason shows string object instance happens iterable react iterates think need anything extra prevent think", "d": "2/2018"}, {"body": "string objects useful string natives convey important information text contain written right left agree checking specifically string objects would wasteful unreliable like object mechanism inform react render object perhaps checks presence specific function feature could value variety cases nt one already would accept pr", "d": "2/2018"}, {"body": "pretty big change think need rfc first", "d": "2/2018"}, {"body": "string objects useful far rendering goes advantages listed nt really relevant whether objects properties inherited nt matter react since expected behavior case would treat string literals representing textual data instances listed reasons would recommend coercing actual strings rendering jsx const text new string hello text", "d": "2/2018"}, {"body": "hey voodoochild currently expected behavior see context decision hope helps thanks", "d": "2/2018"}, {"body": "looking", "d": "2/2018"}, {"body": "write onerror video element event fire eventtargeterror null different native dom", "d": "2/2018"}, {"body": "hi txiaocao would nt something like following work object seems available try", "d": "2/2018"}, {"body": "spirosikmd thank reply moment video loaded sometimes null way different original onerror", "d": "2/2018"}, {"body": "hi txiaocao thank info maybe create reproducible example eg codesandbox example throws error video loaded would help lot", "d": "2/2018"}, {"body": "problem reappearing may problem code", "d": "2/2018"}, {"body": "thanks", "d": "2/2018"}, {"body": "great thanks solved", "d": "2/2018"}, {"body": "think would really useful gaearon explanation makes perfect sense need change state wrongly assumed pronebird", "d": "2/2018"}, {"body": "closing since response really react issue still trouble editing wiki might want reach github support hassanzadeh", "d": "2/2018"}, {"body": "going close wo nt specifically working happy take pr", "d": "2/2018"}, {"body": "thank much", "d": "2/2018"}, {"body": "hiii nasir anyone needs help nasir jan pm nathan hunzaker notifications githubcom wrote circling back thanks providing possible fix want make sure checking type sufficient instead compare value selectionstart example var input documentcreateelement input inputselectionstart inputtype emailinputselectionstart nullinputselectionend null would awesome make dom test fixture something like take receiving subscribed thread reply email directly view github mute thread", "d": "2/2018"}, {"body": "hi currently working issue mention nt end duplicate work", "d": "2/2018"}, {"body": "awesome spirosikmd thanks picking", "d": "2/2018"}, {"body": "really miss feature trying create proper abstractions order listen events inside wrap everything additional nodes avoid creation nodes invent function children interface pass event listeners arguments manually assign topmost nodes inside easily testable clean interface imagine much easier life become events support double implementation proposal call handler soon descendant node emitted event far got already implemented way internally synthetic events bubbling phase happens later engine one bubbles react components", "d": "2/2018"}, {"body": "hm unfortunately feature mentioned guys focused async rendering stuff", "d": "2/2018"}, {"body": "pyitphyoaung discussion without decision expect behavior implemented maybe wo nt", "d": "2/2018"}, {"body": "yeah realize since feature mentioned official docs thought least plans btw missed handle", "d": "2/2018"}, {"body": "going take look finishing pr", "d": "2/2018"}, {"body": "check pr", "d": "2/2018"}, {"body": "fyi test new alpha via", "d": "2/2018"}, {"body": "bvaughn package awesome", "d": "2/2018"}, {"body": "glad hear", "d": "2/2018"}, {"body": "yes know api would need changed question could changed way stays backwardscompatible existing code obviously ca nt say unwanted effects possible solutions would understand existing context object ca nt used transport reactcurrentowner problem optionally storing global", "d": "2/2018"}, {"body": "problem storing global two different react apps single page might even written team eg two thirdparty widgets start stealing refs use global", "d": "2/2018"}, {"body": "one reason optional", "d": "2/2018"}, {"body": "optional work case decides option thirdparty plugins might know option exists app might access react instances inside thirdparty plugins finally plugins may written way works global like asked issue even app could opt using would break kinds mismatches exactly react configuration options trying rely shared mutable state new apis thorny problems good solutions", "d": "2/2018"}, {"body": "would main application obviously implementation nt hard application creates storage space global react space react uses uses module variable nt see something thirdparty plugins time concerned reacts use module global ca nt prevent", "d": "2/2018"}, {"body": "always one main application page website may use react also use widgets thirdparty websites control example theoretically twitter facebook widgets embed react today collide write read shared globals proposal collisions would possible worst would completely control application author feel like rehashing argument convincing fine think leave discussion", "d": "2/2018"}, {"body": "benefit moving maybe less attractive use another dependency case obvious preferable use makes sense", "d": "2/2018"}, {"body": "strayiker use rfc comments", "d": "2/2018"}, {"body": "thank improved life lives everyone team", "d": "2/2018"}, {"body": "thank lot team create react people involved project mexico mexico", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "thank lt lt lt", "d": "2/2018"}, {"body": "gaearon looks like fixed master tried building got reproduce issue currently released version guess issue pr closed", "d": "2/2018"}, {"body": "gaearon timneutkens looking last night hiatus saw essentially fixed updated pr match error put test case desired", "d": "2/2018"}, {"body": "reasons stop syncing", "d": "2/2018"}, {"body": "oof send minor release removes syncing password inputs", "d": "2/2018"}, {"body": "something brought concern good argument favor removing attribute syncing added list oof send minor release removes syncing password inputs potentially dangerous behavior believe still expected behavior regardless sure worth releasing breaking change minor release anything good incentive upgrade next major release removes attribute syncing assuming agree", "d": "2/2018"}, {"body": "relevant poc exploit relies syncing making rounds", "d": "2/2018"}, {"body": "wonder much overfocus one particular vector others similar ones selectors contenteditable content html content general visible page really good sense much worse password fields however use cases also much limited hurt bad password fields minor going things later", "d": "2/2018"}, {"body": "however use cases also much limited hurt bad password fields minor going things later get behind think defaultvalue assignment pathways pass pretty simple add case passwords", "d": "2/2018"}, {"body": "think things like part parcel web platform like think syncing value breaking expectations folks attack vector", "d": "2/2018"}, {"body": "put demonstration site easily see action highlevel github searches seems many thousands repositories sync value password fields let alone fields", "d": "2/2018"}, {"body": "interim might worthwhile mention documentation dangerous sync input fields contain sensitive information sites nt use content security policy prevent injection untrusted stylesheets", "d": "2/2018"}, {"body": "hmm nt simple including send bug tracker", "d": "2/2018"}, {"body": "anything would help tracking source error would greatly appreciated example element index component stack using something find difficult root cause issue like happens nt know enough internals reconciler able answer full backtrace actually get mounted component instance sure looks easy enough saying also able provide reproducible example assuming components pure think part", "d": "2/2018"}, {"body": "read sure would considered intentional would think would either error c ers done forever avoid multiple iteration converting array", "d": "2/2018"}, {"body": "proposals additional information written imho commonly best idea pass iterators aka generators outside world higly stateful enumerated one single time least programming languages gt c php may different find odd ienumerator reset iterator rewind methods anyway means never know outside world iterator instead advisable pass stateless unmodifiable iteratoraggregate outside world iterate sequence often desired without unwanted side effects issue different example generator object passed outside world like said really advisable passes generator function passing functions often least pure functions cause problems mostly stateless gt causes indeed odd unexpected issues nevertheless examples lead problem programming languages strict distinction iterators aka generator aka ienumerator etc iterator aggregates aka iterable ienumerable etc iterator aggregate want iterate elements invoke getiterator method aka symboliterator aka iterator aka getenumerator etc get brand new iterator object dedicated foreach loops iterator object generated internally course unfortunately things different ecmascript imho odd design decisions es generators also symboliterator property makes iterator iterator aggregate time symboliterator method generator generate new generators time invoked would normally expected iterator aggregates react checks symboliterator function property given considers object normal iterator aggregate thinks problem iterate whole sequence twice development module linked example react treats generator function test normal render function invokes gets generator object single children checks symboliterator method finds methods iterates twice dev causes described trouble little demo generator stuff run chrome click run first", "d": "2/2018"}, {"body": "say considered quite strange c pass around seen escape method body internals parserlike code also c generator functions operate differently js react fix without much juggling essentially preiterate something like", "d": "2/2018"}, {"body": "simonbuchan thanks answer question whether generator functions allowed first argument code snippet much allows generator objects random arguments function basically allowing iteratorsgenerators input arguments functions sooner later end trouble see example following demo uses react production modules really easily understandable see three stripes instead four red items stripe missing course allowing generator objects arguments completely different subject allowing generator function first argument first one may good idea say anything latter suggested code change would lead unexpected side effects", "d": "2/2018"}, {"body": "yes going description sorry dug around bit could nt find heck stateless component actually called would iterator check spreading issue actually due multiple iteration", "d": "2/2018"}, {"body": "agree passing generator object outside world bad idea pass stateless generator function react nextable object problem react treats generator function normal function invokes uses resulting stateful iterator generator function treated properly development behavior production behavior generator function equals react create stateless iterable object generator function pass around react node looks like ps leave developers recommend using bare generator functions component make things clear suggest following pattern instead", "d": "2/2018"}, {"body": "addressed nt want check generators want fix specific gone care result iterable iterator use irrelevant since react nt invoking separately validation even regular iterators means visible behavioral difference development production means actual results used ones validated even worse performance collect results array first opinion react general either remove support ie deprecate iterables careful multiply iterate even regular iterables especially differently production", "d": "2/2018"}, {"body": "ping highskillzz still issue take ok gaearon wink", "d": "2/2018"}, {"body": "sure", "d": "2/2018"}, {"body": "gaearon think issue completed yep", "d": "2/2018"}, {"body": "nt need create two watchers need complex vue use want fire single side effect either two values change", "d": "2/2018"}, {"body": "like propose new react api please thank", "d": "2/2018"}, {"body": "hi everyone new contributor react would happy handle issue already submitted cla", "d": "2/2018"}, {"body": "opened pull request", "d": "2/2018"}, {"body": "hey veekas still working like try finishing", "d": "2/2018"}, {"body": "almost done afaik look pr", "d": "2/2018"}, {"body": "hi investigating issue found malstoun pointed reason incompatibility case problem workaround tricking apis accept new container hacky anyone investigating checked used internals temporary fixhelper export reacttestrenderer used write test hope help investigation issue", "d": "2/2018"}, {"body": "speaking workarounds added hack jest snapshot tests hopefully get removed soon", "d": "2/2018"}, {"body": "caused various chrome extensions replace text page example one users reported click call extension also causing crash gaearon provide guidance react could patched resilient sort bug", "d": "2/2018"}, {"body": "customers problem react happen computers chrome last version working ok users others produces use keys react elements google translate plugins anothers plugins solutions tell people turn plugins", "d": "2/2018"}, {"body": "trying add point view thread work app based mobx months exploring clojurescript years made react alternative called respo tried redux early days although short time betting reasonml core idea combining react functional programming fp got piece data render view whatever skills obeys laws fp got sideeffects use pure functions react pure functional embracing local states inside components react power interacting various libraries related dom browser apis also friendly mobx meanwhile makes react impure however tried clojurescript react pure could disaster since really hard interact many existing libraries sideeffects respo solution two goals seem conflicted local state expected nt like program component ui states global reducers since could hard maintaining end figured need syntax sugar helps maintain components states global store meanwhile write state updates inside component clojure macros learnt local states developer experience feature underneath want global states enables engines perform optimisations deep levels mobx people prefer oop developer experience engines", "d": "2/2018"}, {"body": "class js import component reactcomponent class mybutton extends component constructor thisstate render return button transform use supercreateelement transform jsx use static componentcreateelement stateless components js import jsx reactjsx const mybutton gt jsx maybe possible use tagged template literal node hopefully accept pr", "d": "2/2018"}, {"body": "agree richharris", "d": "2/2018"}, {"body": "pasting incorrectly pasted solution similar fix render result react fix without much juggling essentially preiterate something like", "d": "2/2018"}, {"body": "create react app displaying internet explorer fix", "d": "2/2018"}, {"body": "tried approach nt work still coming string etc problem please forget mismatch src working scenarios found issues used string literals", "d": "2/2018"}, {"body": "still active would interested using functionality", "d": "2/2018"}, {"body": "need usually bind handler function handles problem errorboundaries handlers inside component constructor args super args thishandler bindfunction thishandler instead thishandler thishandlerbind author solution found also throw setstate mentioned comment", "d": "2/2018"}, {"body": "reasons decided event handlers passed multiple levels throw nt know component error originated dom node triggered event component owns handler latter case even clear know component expect error originate component rendered dom node event handler attached saying nt possible even could reliably figure component originated error would work error surfaces synchronously end event dispatch however many errors occur asynchronously like promise handler timeout way catching react expect covered returning rejected promise event handler treated event handlers threw error user make sure asynchronous errors result promise returned event handler rejected related note also expect returning rejected promise lifecycle methods would result behaviour throwing error similar previous point gave event errors semantics render errors raises question whether types events like network events userdefined subscriptions would require us exposing api like invokecallback wrap arbitrary function error handling mean network events userdefined subscriptions", "d": "2/2018"}, {"body": "still working blacktrident may give go", "d": "2/2018"}, {"body": "fix extremely difficulttodiagnose bug outer application focus management code result using workaround posted specifically calling stoppropagation synthetic focus event prevent bubbling portal causes stoppropagation also called native focus event react captured handler document meant make another captured handler fixed moving handler document specifically avoided past step react toes new bubbling behavior portals really feels like minority case opinion truth could please get traction issue maybe gaearon four months old causing real pain think could fairly described bug given breaking api change react completelysafe workaround", "d": "2/2018"}, {"body": "craigkovatch still curious would solve inline example let say popup pushing size box inlining something important since pushing something layout given size ca nt hover could potentially measure popover insert blank placeholder size try align top people popover need expand content place like right next button would solve suspect pattern works work cases recommend one pattern", "d": "2/2018"}, {"body": "think general pattern works scenarios js class foo extends reactcomponent state highlight false showflyout false mouseenter thissetstate highlight true mouseleave thissetstate highlight false showflyout thissetstate showflyout true hideflyout thissetstate showflyout false render return lt gt thisstateshowflyout null flyout portal works nt get mouse events hovering portal importantly also works portal needs inline flyout stoppropagation needed pattern nt work use case", "d": "2/2018"}, {"body": "sebmarkbage using portals completely different fashion rendering container mounted final child positioned sometimes zindex react documentation suggests closer design intention ie rendering totally different place dom nt seem use cases similar enough discussion belong thread want brainstormtroubleshoot together happy discuss another forum", "d": "2/2018"}, {"body": "use case sometimes one sometimes relevant choose render final child body long hoist portal sibling hovered component rather child scenario works", "d": "2/2018"}, {"body": "think plausible scenario inconvenient want way teleport things deeply nested components scenario probably fine context context intermediate point think two separate issues maybe need slots api js class foo extends reactcomponent state showflyout false showflyout thissetstate showflyout true hideflyout thissetstate showflyout false render return lt gt hello thisstateshowflyout null class bar extends reactcomponent state highlight false mouseenter thissetstate highlight true mouseleave thissetstate highlight false render return lt gt portal would get context bar deepcomponent context event bubbling still share tree path", "d": "2/2018"}, {"body": "sebmarkbage modal case usually require context point rendered slightly unique case think component logical child thing rendered structural one lack better word eg usually want things like form context relay formik redux form whatever dom events pass one also ends rendering modals fairly deep trees next triggers stay componenty reusable belong structurally think case generally different flyoutdropdown case createportal serves tbc think bubbling behavior portals good modals also think could handled context sort modalprovider reasonably well kinda annoying especially libraries", "d": "2/2018"}, {"body": "long hoist portal sibling hovered component rather child scenario works sure follow still problem eg keydown events bubbling unexpected dom tree", "d": "2/2018"}, {"body": "jquense note example slot still within bar component would get context form something like even portal rendered document body like two indirections portalings deep sibling bar document body context portal still context form event bubbling chain neither context hovered thing", "d": "2/2018"}, {"body": "yes sorry missed reading right tho still bubbling though definitely better though think modal dialog case one probably nt want bubbling like thinking terms screen reader want everything outside modal invert nt know think case bubbling gotcha one would expect click inside dialog bubble anywhere", "d": "2/2018"}, {"body": "maybe problem nt portals nt good way share context across trees part context thing really fine modals maybe correct way thinking anyway", "d": "2/2018"}, {"body": "thinking bubbling still goes modal div body document window conceptually beyond frame containing window theoretical something like art gl rendered content extent react native might existing backing tree get semantics needs way say bubbles apps modals modals eg fb chat window might modal modal might part chat window even modal context tree belongs never completely standalone say ca nt two different semantics event bubbling context explicit portal one without etc guarantee follow path really powerful though since means event bubbling fully implemented user space events browser example happens various redux contexts today imagine user space event bubbling could even implement react events part context seams reasonable think use way every way right think fork two contexts probably end another user space context api follows dom structure parallel normal context truly different kind pushing bit see slots thing might sufficient since need explicit context bubbling happens anyway b avoid forking world two entire context systems", "d": "2/2018"}, {"body": "specifically calling stoppropagation synthetic focus event prevent bubbling portal causes stoppropagation also called native focus event react captured handler document meant make another captured handler fixed moving handler document specifically avoided past step react toes craigkovatch used event document workaround captured events nt stopped provide detailed example done resolve issue also think code issue stopping event nt stopped investigate question deeper try found reliable solution", "d": "2/2018"}, {"body": "suggesting issue workaround think separate bug react ie nt cancel propagation native focus events capture phase calling stoppropagation synthetic focus events bubbling phase code question uses native capture event listener ie", "d": "2/2018"}, {"body": "craigkovatch sounds interesting given fact used captured handler however thoughts happens guys two different scenarios using portal rendering prevent css issues like overflow hidden etc simple widgets like dropdown buttons onelevel menus create new ux layer powerful cases like modals nested menus popoverswithformswithdropdowns cases layers combined think current api satisfies first scenario suggestion use new reactrender second unusable poor create separate app providers every layer additional info provide help resolve issue disadvantages suggested param api", "d": "2/2018"}, {"body": "added comment rfc pr think worth discussing covers proposed well simpler model reliably inferring custom element properties turns back hybrid approach offers zeroconfig way integrating use cases", "d": "2/2018"}, {"body": "rolling ssr unsplashcom also need fortunately still using react able add tracking checksum mismatches patching reactdom specifically diff containernodetype docnodetype processenvnodeenv production invariant false trying render component document using server rendering checksum invalid usually means rendered different component type props client one server render methods impure react handle case due crossbrowser quirks rendering document root look environment dependent code components ensure props client server side n difference prodinvariant difference void else windowonreactproductionchecksummismatcherror undefined windowonreactproductionchecksummismatcherror difference difference redonkulus curious achieved using attribute afaics attribute always regardless mismatch sure manage going forward upgrade react think quite important experience easy introduce errors accidentally think nt handle production rely showing point development lot needs systemic handling building frameworks around ensures common patterns nt cause sebmarkbage completely agree meantime absence infrastructure need way track errors inevitably come make errors impossible write clientonly state eg dom local storage needs impossible access server render firstclient render way thinking union type unenhanced server render first client render enhanced every client render first components would receive union type access would possible inside", "d": "2/2018"}, {"body": "also interesting reactnative customers sure apply situation", "d": "2/2018"}, {"body": "working tackle others done", "d": "2/2018"}, {"body": "writing set components part common objects like render visually demonstrate happens error handled present see behaviour awreese demo exceptions caught fallback getting rendered rethrown exception covers app lead initial impression nt catching exceptions console states hours hunting amp second guessing finally ended noting functions called problem nt affect nondev environments eg test prod etc case exceptions meaningless caught seeing fullscreen overlay leads confusion manner avoiding would helpful way marking exceptions handled option rethrowing exceptions already handled boundary way turning traceback overlay etc quickanddirty workaround hide overlay", "d": "2/2018"}, {"body": "also problem first thought something wrong always see last resort error view triggered global onerror handler least docs mention another thing really believe global error handles rare lacking real data well react catches errors renders global error handler needs used catch errors last resort manner personally already catch expected errors eg network errors sagas", "d": "2/2018"}, {"body": "herodrigues able get valid errors chrome extension dev chrome extension well seeing crossorigin errors", "d": "2/2018"}, {"body": "try checking packagejson remove flag finally worked", "d": "2/2018"}, {"body": "brendonsled mean npm loglevel flag yes nt fix merely silencing problem would nt recommend might silence useful errors way", "d": "2/2018"}, {"body": "ianvs something wrong project developed clean extension using react everything ok see comment", "d": "2/2018"}, {"body": "dominikserafin mean webpack cli", "d": "2/2018"}, {"body": "following solution works tag", "d": "2/2018"}, {"body": "ok actually fix images displayed react component using img src tag", "d": "2/2018"}, {"body": "react native including metro fresco yoga also relicensed mit", "d": "2/2018"}, {"body": "unrelated question yall cope github issue references commits conjunction commit reference spam caused rebases", "d": "2/2018"}, {"body": "new updates pr please look", "d": "2/2018"}, {"body": "aweary according nt support custom dom elements ampcarousel custom attributes slide tried call react serverside rendering success confirm", "d": "2/2018"}, {"body": "hey kschmidtdev correct server renderer still restricts attributes using isattributenamesafe nt remember thought changed react neither successor change behavior reopen sure solution would unfortunate amp uses nonstandard attribute names server rendering amp components common use case could potentially fork version allows attributes leadingtrailing brackets custom elements gaearon think", "d": "2/2018"}, {"body": "would really appreciate solution serverside amp rendering well using react never dehydrate client", "d": "2/2018"}, {"body": "lucasconstantino would love hear opinions fb article addition go testing kinds methods perhaps deciding test", "d": "2/2018"}, {"body": "creativetim component methods usually implementation detail nt tested propscallbacks interface use time use methods part public api api used case also test methods though bind arrow even inlined functions nt care", "d": "2/2018"}, {"body": "agree using refs outside component reach bad practice", "d": "2/2018"}, {"body": "mean using refs testing", "d": "2/2018"}, {"body": "mean unless explicit part component api suggest trying get access component internal implementation sure would needed testing enzyme used get node want without refs", "d": "2/2018"}, {"body": "yeah meant cases ca nt describe events state example reactvirtualized props shot foot gon na change initial values instance methods", "d": "2/2018"}, {"body": "different projectmodule react present inside main express application saying different packagejson present call react client react client make change configuration ie packagejson configure use proxy render express apis server since express react running different servers", "d": "2/2018"}, {"body": "like open based something finding bit confusing would preferred open new issue well figured post comment first reduce new issue clutter using controlled components near everything application recommended way go subscribe idea react control state possible however recently went ryanflorence advanced react wonderful collection breakdown powerful still uncommon features patterns available last lecture controlled components around lecture video ryan something interesting writes code looks like context component necessarily relevant although would help understand watching lecture video lecture free create account mentally replace snippet native input element note statement incorrect form field elements special cases compared composite components talking controlled vs uncontrolled components please correct intention something nt seen heard lot noise using change handler uncontrolled component ryan says emphasis mine nt actually need control active index nothing else app changing active index buttons anything changes even need get state change handler nt mean control time control component programmer need change index value whatever controlled property nt need control want know ryan florence advanced react lecture controlled components watched video handful times implemented controllable components realized rather confused pattern like might seen react community large react docs make mention pattern uncontrolled components read official docs uncontrolled components ever used conjunction refs however want know value okay pattern use change handler something like input element trying read value affect something else app", "d": "2/2018"}, {"body": "aweary trying fix issue looks like update happening fiber changes however could nt see anywhere parsing number like said like etc state input ca nt add checks line set help may wrong idea shouting thoughts", "d": "2/2018"}, {"body": "interest fix based suggestions nilshartmann happy contribute required changes new tests required edit understand correctly xastor suggestion closely related appears general approach fix reading lengthy discussion last implementation attempt guess redesigning event propagation system support multiple roots sprawlinghard implement change", "d": "2/2018"}, {"body": "encouter bug using textfield focus gets disabled next render native blur event fires react attached event handler nt using chrome minimal example shows bug renders textinput button focus textfield submit pressing enter native blur event logged react blur event fire class app extends purecomponent state disabled false", "d": "2/2018"}, {"body": "snegostup roastlechon problem gptadsense ads wait show first add react loaded around seconds destroys viewability first ad need load ad react loaded really simple using ssr react wipes hydration phase surprised nt solution workaround yet insight really welcomed", "d": "2/2018"}, {"body": "luisherranz able diagnose figure hydration mismatch occurred wiped dom hydration gpt able load beforehand server side rendered markup hydration nothing wiped fixed issue mismatch", "d": "2/2018"}, {"body": "roastlechon thanks answer error render one react tag inside rendered library react loaded mismatch really happening server client code sever code additional tags created client code react finally loads", "d": "2/2018"}, {"body": "nobody else picked issue love give try", "d": "2/2018"}, {"body": "look feel like would mean relatively big change could probably bit feedback gaearon pushing", "d": "2/2018"}, {"body": "yeah good point looks like would require changing order different effects applied elements createdupdated changing would obviously lot sideeffects leave find something else work", "d": "2/2018"}, {"body": "exactly unless misunderstood something find another way interested hear sun feb portfoliorails notifications githubcom wrote yeah good point looks like would require changing order different effects applied elements createdupdated changing would obviously lot sideeffects receiving commented reply email directly view github mute thread", "d": "2/2018"}, {"body": "sebmarkbage purpose would highly discourage sideeffects unforeseen consequences even though technically could constructor could give details edge case", "d": "2/2018"}, {"body": "nesmalltown take look link", "d": "2/2018"}, {"body": "occurs specific conditions hover rule element clickable styles rule nt matter rule even empty adjacent sibling rule specific term matches least one element dom nt need match entire rule rule even empty clickable element followed element could also wrapped first element inside element hover rule element clickable styles rule nt matter rule even empty adjacent sibling rule specific term matches least one element dom nt need match entire rule rule even empty clickable element followed element could also wrapped first element inside element case tapping clickable element whether click javascript onclick handler simple lt href gt register instead applies hover style second tap navigate run javascript happens mobile safari changing pretty much anything make bug disappear", "d": "2/2018"}, {"body": "problem bundler webpack gcc error mainjs closure compiler compiler waiting input via stdin warning bad type annotation missing opening see information param function callback callback function warning bad type annotation missing opening see information param function callback callback function warning suspicious code result void operator used react invariant false reactdom loaded react make sure load react package loading reactdom void warning suspicious code result void operator used propertieshasownproperty propname invariant false injectdompropertyconfig trying inject dom property already injected may accidentally injecting dom property config twice may injecting two configs conflicting property names propname void warning suspicious code result void operator used propertyinfohasbooleanvalue propertyinfohasnumericvalue propertyinfohasoverloadedbooleanvalue lt invariant false domproperty value one boolean overloaded boolean numeric value combination propname void warning suspicious code result void operator used typeof injectederrorutilsinvokeguardedcallback function invariant false injected invokeguardedcallback must function void warning suspicious code result void operator used pluginindex gt invariant false eventpluginregistry inject event plugins exist plugin ordering pluginname void warning suspicious code result void operator used pluginmoduleextractevents invariant false eventpluginregistry event plugins must implement method pluginname void warning suspicious code result void operator used publisheventforplugin publishedevents eventname pluginmodule eventname invariant false eventpluginregistry failed publish event plugin eventname pluginname void warning suspicious code result void operator used eventnamedispatchconfigshasownproperty eventname invariant false eventpluginhub one plugin attempted publish event name eventname void warning suspicious code result void operator used registrationnamemodules registrationname invariant false eventpluginhub one plugin attempted publish registration name registrationname void warning suspicious code result void operator used eventpluginorder invariant false eventpluginregistry inject event plugin ordering likely trying load one copy react void warning suspicious code result void operator used namestoplugins pluginname invariant false eventpluginregistry inject two different event plugins using name pluginname void warning bad type annotation missing opening see information param function listener applicationlevel callback warning suspicious code result void operator used next null invariant false accumulateinto accumulated items must null undefined void warning bad type annotation missing opening see information param function cb callback invoked element collection warning bad type annotation missing opening see information return function stored callback warning suspicious code result void operator used listener typeof listener function invariant false expected listener function instead got value type registrationname typeof listener void warning suspicious code result void operator used eventqueue invariant false processeventqueue additional events enqueued processing event queue support yet implemented void warning bad type annotation missing opening see information param function class warning suspicious code result void operator used event instanceof eventconstructor invariant false trying release event instance pool different type void warning suspicious code result void operator used fiberhostcomponent amp amp typeof fiberhostcomponentrestorecontrolledstate function invariant false fiber needs injected handle fiber target controlled events error likely caused bug react please file issue void warning suspicious code result void operator used isfibermountedimpl fiber mounted invariant false unable find node unmounted component void warning suspicious code result void operator used state unmounted invariant false unable find node unmounted component void warning suspicious code result void operator used didfindchild invariant false child found either parent set indicates bug react related return pointer please file issue void warning suspicious code result void operator used aalternate b invariant false return fibers always others alternates error likely caused bug react please file issue void warning suspicious code result void operator used atag hostroot invariant false unable find node unmounted component void warning suspicious code result getprop operator used anchornodenodetype warning suspicious code result getprop operator used focusnode warning suspicious code result void operator used contextstackcursorcursor null invariant false unexpected context found stack error likely caused bug react please file issue void warning suspicious code result void operator used contextkey childcontexttypes invariant false sgetchildcontext key defined childcontexttypes getcomponentname fiber unknown contextkey void warning suspicious code result void operator used instance invariant false expected instance point error likely caused bug react please file issue void warning suspicious code result void operator used isfibermounted fiber amp amp fibertag classcomponent invariant false expected subtree parent mounted class component error likely caused bug react please file issue void warning suspicious code result void operator used parent invariant false found unexpected detached subtree parent error likely caused bug react please file issue void warning suspicious code result void operator used typeof callback function invariant false invalid argument passed callback expected function instead received callback void warning suspicious code result void operator used props invariant false must pending props initial mount error likely caused bug react please file issue void warning suspicious code result void operator used newprops null invariant false always pending memoized props error likely caused bug react please file issue void warning suspicious code result void operator used typeof childstore object invariant false react component warnformissingkey store error likely caused bug react please file issue void warning suspicious code result void operator used ownerfibertag classcomponent invariant false stateless function components refs void warning suspicious code result void operator used inst invariant false missing owner string ref error likely caused bug react please file issue mixedref void warning suspicious code result void operator used typeof mixedref string invariant false expected ref function string void warning suspicious code result void operator used elementowner invariant false element ref specified string owner set may multiple copies react loaded details mixedref void warning suspicious code result void operator used typeof iteratorfn function invariant false object iterable error likely caused bug react please file issue void warning suspicious code result void operator used newchildren null invariant false iterable object provided iterator void warning suspicious code result void operator used current null workinprogresschild currentchild invariant false resuming work yet implemented void warning suspicious code result void operator used nextprops null invariant false always pending current props error likely caused bug react please file issue void warning suspicious code result void operator used current null invariant false indeterminate component never mounted error likely caused bug react please file issue void", "d": "2/2018"}, {"body": "found solution using two dirty things one calling trigger reflow css tricks one using", "d": "2/2018"}, {"body": "similar problem use case stock quote needed animate cell flash background red green depending direction change quote price solution css animation resulting one change dom component state reflect updated price apply right classname background animation code react component example nt anything react specific hopefully helps people similar need temporarily change look something screen allow animate back original state", "d": "2/2018"}, {"body": "jasonmerecki problem code want show animation example case two consecutive raises wo nt work", "d": "2/2018"}, {"body": "aha thanks saitonakamura actually need fix needs happy solution least working basically duplicate css flip like since different classes browser apply new class new animation", "d": "2/2018"}, {"body": "ran optimizely rewriting headline element specific page bad time imagine could potentially run similar services rewriting content page load", "d": "2/2018"}, {"body": "hey may know difference calling reacfperfstart reactperfstop console app thank", "d": "2/2018"}, {"body": "news issue far see makes almost impossible write performant code requestanimationframe throttling mouse move events seems quite relevant", "d": "2/2018"}, {"body": "hi add active event listener like call stop default scrolling chrome move element order know element move add jsx element like set state property read react would support active event listeners would boil one line thanks philipp ps try call passive event listener get error chrome intervention unable preventdefault inside passive event listener due target treated passive see passive events become default chrome intervention google breaking web somehow also making scrolling faster", "d": "2/2018"}, {"body": "realizing well nt think recommendation use explicit enough cover behaviour think description fatfisz put forward wordier explicit", "d": "2/2018"}, {"body": "supply bound callback method instead javascript inefficiently recreate callback method call every render", "d": "2/2018"}, {"body": "getting behavior shape require keys present anymore remember keys needing present back also", "d": "2/2018"}, {"body": "yes scanning serverside rendered html adding style unsafeinline nonce stuff try publish npm module code post", "d": "2/2018"}, {"body": "using npm node webpack issue happens us fixed creating alias webpack dev config", "d": "2/2018"}, {"body": "fixed replacing string ref function ref one deeply nested components replaced", "d": "2/2018"}, {"body": "info also solved class mybutton extends component", "d": "2/2018"}, {"body": "interest saving time solution use camel case renders", "d": "2/2018"}, {"body": "sorry resurrect old thread came across issue google trying understand make render callback component performant got interested gaearon suggestion go implementing published leaving link anyone else might come across issue like also much welcome feedbackcriticism purerendercallbackcomponent thanks", "d": "2/2018"}, {"body": "exactly problem transitions transition container two animated views animate previous next children remounting causes slow visual artifacts components network requests load huge sets data", "d": "2/2018"}, {"body": "pronebird wrote based blog post reparentablejsx sure help solving problem explain gist reparentable component true react component inside manually creates dom node reactdomrender children given children must thus single react component use reactfragment needed additionally reparentable requires ref attach manually created dom node awsm reparentable tries implement react createelement like call api controlling manually created dom node want create reparentable element could use reparentable alias like use use tried little hard make work smoothly looking sure actually work note used extensively caveats react node ref points keeps changing entirely possible react take offense extra dom child detach nt seen happen nt keep changing ref node way naturally use jsx syntax interact reparentable component want need implement babel plugin transform eg calls want vary time takes old node removed need implement fex promise prop resolved newchildren finished networking could maybe use promisefinally remove old dom mount node promise resolved presume mit licence code guess something hope one cares enough come hounding", "d": "2/2018"}, {"body": "actually event target following follows correct pattern descern difference click event return event button js srccomponentsbuttonbuttonjs import react react const handleclick event gt eventdetail return event occured type click event occured const button props gt export default button", "d": "2/2018"}, {"body": "facing issue react seemingly find solution rendered server without server render used work fine sharing two snippets import express express import serverrenderer middlewarerenderer const port const path require path const app express const router expressrouter import loadable reactloadable routeruse serverrenderer appuse static expressstatic pathjoin dirname assets routeruse expressstatic pathresolve dirname build maxage routeruse serverrenderer appuse router loadablepreloadall gt applisten port error gt error return consolelog something bad happened error rendererjs import react react import reactdomserver reactdomserver import provider reactredux import connectedrouter reactrouterredux import store srcstore import creatememoryhistory history import staticrouter reactrouter import app srccontainersapp import serverstylesheet styledcomponents import main app component import app srcindex const path require path const fs require fs const history creatememoryhistory initialentries next last initialindex export default req res next gt const filepath pathresolve dirname build indexhtml fsreadfile filepath err htmldata gt err consoleerror err err return resstatus end const sheet new serverstylesheet const body reactdomserverrendertostring sheetcollectstyles const styletags sheetgetstyletags sheetgetstyleelement var htmldata htmldatareplace var htmldata htmldatareplace return ressend htmldata works fine use document inside instead srcindexjs import react react import reactdom reactdom import indexcss import store history store import app containersapp const target documentqueryselector root reactdomhydrate target using file wo nt work server throws error", "d": "2/2018"}, {"body": "writing old issue fixed whatever problem react unrelated please file new issue minimal reproducing example problem thanks", "d": "2/2018"}, {"body": "sophiebits given client longer run rendertostring relies suggested way forward", "d": "2/2018"}, {"body": "class shouldnotupdate extends reactpurecomponent puzzled super nt work inside react component", "d": "2/2018"}, {"body": "vincnetas intercepting lifecycle methods example want measure time occurred componentwillmount componentdidmount child component achieve hoc", "d": "2/2018"}, {"body": "want achieve something like jsx const mydivclassnames b could possibly use classnames utility follows jsx import classnames classnames const mydivclassnames classnames b maybe jsx import classnames classnames const isctrue false const mydivclassnames classnames true b true c istrue", "d": "2/2018"}, {"body": "always const children reactchildrenmap thispropschildren child gt child childrenfilter somecondition childrensome anothercondition attach directly", "d": "2/2018"}, {"body": "seems like changing would solve practical problems experiencing would introduce new ones would actually solve problems would remove two levels indirection creating ast jsx jsonml supported natively would need two steps would allow people prefer js xml write templates directly js also eliminates hidden dependency nt see using jsx eliminated allows create crossframework templates specific react vdom library also template simple ie using complex props like serialized sending wire saved together json data like translations example allows add markup translations stored json one biggest benefits would jsonml standartized tool works jsonml could pick work", "d": "2/2018"}, {"body": "native browser fetch api promise based cancellable polyfills every http library make use abortcontrollers rxjs also cancellable", "d": "2/2018"}, {"body": "wrote blog article demonstrating use abortcontroller simple react use case appreciate feedback got something wrong", "d": "2/2018"}, {"body": "smithaitufe recycle rows view scrolling massive list lessen dom size result faster ui speeds", "d": "2/2018"}, {"body": "bumped problem react native web currently relies certain flex styles due inconsistencies browsers expand shorthand applying fine transforming styles css via breaks using inline styles due limitation react dom make pr add style warning values include look ways potentially support", "d": "2/2018"}, {"body": "using apollo makes data loading super simple reactrouter componentbased api makes simple composable routing orthogonal application state redux order singlepass streaming rendering waits data fetches possible return promise client server return promise simply return promise render data loaded rest plain react", "d": "2/2018"}, {"body": "approach creates nice symmetry functional components function person name return name class people extends reactcomponent render people peoplemap person example share similar interfaces makes easier mix stateful stateless components means less work decide convert one type component", "d": "2/2018"}, {"body": "solutions using unfortunately work ios safari ios chrome still empty autofill idea people handling autofill forms using controlled components consider login scenario autofill email nothing changes even dispatchevent hack chrome report email empty start writing value password field email gets lost react state thinks empty unless way get chrome report value ca nt think solution using uncontrolled components input validation getting form values submit like old days track star issue", "d": "2/2018"}]