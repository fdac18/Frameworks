[{"title": "releases page updated", "body": "releases page github properly updated version result marked latest", "num": "2790", "d": "12/2014"}, {"title": "component mixins componentwillunmount called reverse order componentdidmount", "body": "allow dom manipulation outside react reach dom manipulations done undone reverse order currently possible components mixins see footnote due order events fired current order componentcomponentdidmount componentcomponentwillunmount correct order componentcomponentdidmount componentcomponentwillunmount jsfiddle full lifecycle example footnote mixins component mixins manipulating dom", "num": "2789", "d": "12/2014"}, {"title": "ismounted enough know setstate", "body": "sake simplify workflow three stages component mounting may call setstate ismounted false component mounted may call setstate ismounted true component unmounted must call setstate ismounted false particular case worried trigger promise similar delayed action componentwillmount could called two circumstances synchronously call stack asynchronously later stack know mixing async sync signature bad idea sake argument asynchronous case promise could resolve time future order prevent calling setstate nt allowed add check promise resolves component still mounting state outside componentwillmount stack possible happen chance js run componentwillmount component mounted cycle happen error shown synchronous case enter block still mounting state means false state wo nt set depending answers async questions see two outcomes async return component mounted minor inconvenience solved coding know async async return mounted way know safe call incomplete user manually track state component unmounted thoughts invented issue none exists", "num": "2787", "d": "12/2014"}, {"title": "spread operator component working", "body": "using component build custom react component uses spread operator receiving following error navitem hope someone may able shed light sense component yet support spread operator running exec componentbuild exec task props thisprops parseerror unexpected token code triggers error running exec componentbuild exec task props thisprops parseerror unexpected token", "num": "2786", "d": "12/2014"}, {"title": "componentwillmount getdomnode nt document yet", "body": "currently hook would allow us set attributes node injected document unfortunate attributes wild take effect element injected document workaround forced replacing react injected nodes clones would great react could expose node inserted added another hook node provided", "num": "2784", "d": "12/2014"}, {"title": "reason jsx deviate html", "body": "understanding legitimate reason jsx prohibit javascript keywords reasons reason require camelcase attributes appears oversight part original authors far fixing goes concern expressed appears backwards compatibility far tell nt seem reason someone could nt submit pr fully backwards compatible today jsx allows coders designers use html naturally something could major boon project well within minutes opening issue two people antoinegrant akiran seems like something many people want included also whether allowed fixed indicates health project something obviously broken people asked jump unnatural hoops absolutely reason enough reason fix something react anyone continue recommend project group members project admins ask give issue honest thought least minutes hitting close button still decide close issue please let community know reasoning understand thank greg slepak", "num": "2782", "d": "12/2014"}, {"title": "reason prohibit use js keywords jsx", "body": "understanding based docs prohibited html attribute jsx see reason one example given guide using instead shows transformation results js easily fixed quoting unless missing something obvious please normal html back", "num": "2781", "d": "12/2014"}, {"title": "mixins add mixins", "body": "use reflux handy ways autotrack stores via mixin eg writing mixin handles saving multiple forms touch posts convenient mixin could add reflux mixins similar", "num": "2780", "d": "12/2014"}, {"title": "add javascript button jsx file", "body": "wrong post", "num": "2779", "d": "12/2014"}, {"title": "injecting html conversion results dangerously ie converted markdown", "body": "setup log entries written stored markdown plain text come time render browser run markdown html converter gets rendered browser react despite fact code never works html except last step edits occur plain text saving occurs plain text plain text propsstate etc way get data loaded using cumbersome attribute even though html humangenerated way nt dynamic traditional sense snapshot html representation text way html react generates simply snapshot representation component something available nt lie done scenario like way tell react additional safe processors available reactregistercontenttransformer markdown markdowntohtml var markdown reactcreateclass render function return markdown thispropstext whatever syntax would work makes explicit working humangenerated dynamic html content rigidly transformed syntacticallycorrectunlessthetransformerhasbugs output edit explain motivation questionrequest mechanism great definitely need usergenerated html strings however also way extend mechanism exists inside function transforming data nt html snapshotserialized html like react components additional api telling jsx transformer additional transformers available used exclusively render using special curly bracket syntax would close ideal people would still need use regular html string data people data nt html merely transiently transformable html form need say html dangerous dangerous transformer makes putting part jsx transformer bugs notwithstanding resulting html always well formed legal", "num": "2778", "d": "12/2014"}, {"title": "jsx attribute shorthand objects", "body": "ecvevalent feature sorry bad english", "num": "2777", "d": "12/2014"}, {"title": "provide nextstate argument componentwillreceiveprops", "body": "need call particular state attribute nt change would possible pass lifecycle function", "num": "2776", "d": "12/2014"}, {"title": "drop support", "body": "dropping support ie days statistics show take wolrdwide statistics", "num": "2775", "d": "12/2014"}, {"title": "returning null tag always rerendered", "body": "tl dr component returns rerenders noscript tag unmounted new one created shouldupdatereactcomponent gets returns false came internal components breaking recent update nt gone see widely broken might recent updates empty component triggering reliably reports similar weird problems could nt track use similar happening trigger triggering update mount phase works correctly triggering rerender broken one nt called yet actually call first still call also whole question trying unmount anything seems like nt cc sebmarkbage spicyj drop examplesbasicjsxharmony debug pausing caught exceptions added breakpoints reactemptycomponent make super obvious js use strict var child reactcreateclass componentdidmount thispropsonmount amp amp thispropsonmount render thispropsvisible return null var parent reactcreateclass update thisforceupdate render return reactrender documentgetelementbyid container", "num": "2770", "d": "12/2014"}, {"title": "checkboxes get sync state", "body": "filing issue per sebmarkbage see bin example syranide suggested adding calling adding around inside approach works seems unnecessary since bubble handling event", "num": "2766", "d": "12/2014"}, {"title": "defaultvalue empty", "body": "hello everybody okay quite strange problem seto value defaultvalue nothing appears however set value using value appears props coming data correctly idea react conde", "num": "2764", "d": "12/2014"}, {"title": "componentdidmount executes wrong order", "body": "order child child child parent technically though child mounted dom parent yet mounted expect see parent child child child understand docs correctly componentdidmount meant clientside state therefore use setup state child components would need access state ca nt cause nt initialized yet using state quotes since react component state rather something external websocket connection could course use lifecycle callbacks trigger init would execute server ever choose use feature", "num": "2763", "d": "12/2014"}, {"title": "support indeterminate state checkbox input", "body": "seems like indeterminate true set checkbox indeterminate state could supported thanks", "num": "2762", "d": "12/2014"}, {"title": "feature request strip datareactid return array string", "body": "right every element adds lot unnecessary space server generated pages know still needed initialize browser solution minimize output strip add array tag end tag see example except example server script js var html reactrendertostring reactcreateelement element data reacts filtered html htmlreplace datareactid g function full value reactspush value return filtered htmlreplace appreact appreact jsonstringify reacts ressend filtered except example client script js var elements documentgetelementsbytagname fast nt trigger reflow arrayprototypeslicecall elements foreach function element index elementsetattribute datareactid appreact index reactrender reactcreateelement element data document except example jsx think solution could done lot bettersafer somehow included core html tags saved characters saved characters even higher labels often gets wrapped", "num": "2761", "d": "12/2014"}, {"title": "custom element tags xml render", "body": "possible create custom element render method interpreted class render exactly xml format", "num": "2758", "d": "12/2014"}, {"title": "scryrenderedcomponentswithtype func finding child components", "body": "trying test existence component within parent pretty sure function scryrenderedcomponentswithtype created nt working take look component test line fails following test error easier read screen shot react function question reference scryrenderedcomponentswithtype thanks", "num": "2757", "d": "12/2014"}, {"title": "warn rendering html tag spelled uppercase letters", "body": "try running following code javascript var hello reactcreateclass render function return reactcreateelement br null reactrender documentbody get two tags inserted dom instead one made quick jsfiddle show running chrome relevant", "num": "2756", "d": "12/2014"}, {"title": "implement fast click remove delay mobile web browser", "body": "nice react feature improve responsiveness similar fastclick ft labs", "num": "2753", "d": "12/2014"}, {"title": "improve errorutils usage", "body": "right guard autobound method intention actually guard calls event handlers", "num": "2750", "d": "12/2014"}, {"title": "tests make consistent use spys mocks", "body": "sometimes within test file probably pattern annoying ugly better think probably make use feels bit easier work", "num": "2749", "d": "12/2014"}, {"title": "thissetstate callback function spews console log", "body": "added callback thissetstate console warnings like following example line thissetstate data callback example warning bind binding component method component react automatically highperformance way safely remove call see componentname", "num": "2747", "d": "12/2014"}, {"title": "support custom dom elements amp attributes", "body": "reason react restricts subset dom elements attributes unfortunately makes really hard use new html non standard features unless support added noticed could create custom elements via documented amp sure supported long term even supported still solve problem attributes ones listed docs seem ignored think would good idea allow defining custom virtual dom elements custom list attributes users could implement even support new element nt core yet finally support namespaces would super useful using react even environments amp hard either successfully used vtree vdom", "num": "2746", "d": "12/2014"}, {"title": "unmount react component name node", "body": "components done component mounted away say unmount fly top find node attached unmount via node like docs state right seems like unmount node could unmount component name would make life lot easier cases route change ant unmount specific components via name maybe missing something", "num": "2743", "d": "12/2014"}, {"title": "svg present initial render added", "body": "jsfiddle render text link another label says toggle click toggle changes state removes puts place click toggle resets state fails show chrome browser tested see dev tools nt display page copy code jsfiddle var svg reactcreateclass getinitialstate function return showlink true renderlink function thisstateshowlink return link return text toggle function thissetstate showlink thisstateshowlink render function return thisrenderlink toggle reactrender documentbody", "num": "2742", "d": "12/2014"}, {"title": "update release grunt task modern times", "body": "nt delete license patents bower repo better messages postprocess", "num": "2741", "d": "12/2014"}, {"title": "tutorial improvement nt use python http server use node", "body": "since tutorial describes things either browser node nt make sense advocate using instead makes sense tell people run use much simple command fire localhost instance port whatever directory run", "num": "2739", "d": "12/2014"}, {"title": "jsx expects templating eg flagged missing", "body": "different rules xml things like xmldesirable even obsolete syntax correct syntax respectively leads situations react forces people write obsolete template html rather parsing true modern html author strongly feels like bug template getting evaluated xml instead html parser whatever reason please upgrade jsx parser proper one real html used templates without library throwing terminal error", "num": "2738", "d": "12/2014"}, {"title": "replace invariant inline throw error production build", "body": "perhaps larger issues preventing considering production errors encountered user rarely access stack traces get single toplevel error location error thrown react today know error thrown would nice replaced instead could report vaguely meaningful error locations could least hint error react would also avoid invariant invocation overhead cc zpao sebmarkbage spicyj", "num": "2736", "d": "12/2014"}, {"title": "reactmountnodecache leaks objects unmount", "body": "scenario pretty easy reproduce suppose popup implementation function render popup view react element overlay div element function unmount view destroy overlay popup button element onclick set call destroy popup function user clicks button reactunmountcomponentatnode called react cleans everything reactmountnodecache empty react starts process blur event remember user clicked button close popup focused resurrects button element reactmountnodecache button dom element ends stuck nodecache forever worst part lot dom nodes sometimes hundreds subject gc anymore", "num": "2731", "d": "12/2014"}, {"title": "use input element nodewebkit", "body": "trying use react nodewebkit project problem element module exports component containing typeerror read property firstchild undefined error thrown using code cjsx reactdom react require react moduleexports reactcreateclass render test require jscomponentstest app reactcreateclass render reactrender documentbody piece code works fine replace elements write file", "num": "2730", "d": "12/2014"}, {"title": "csstransitiongroup transition add remove fast", "body": "reproduce add item opacity item transitioning ex opacity remove item next tick fast item opacity item disappears completely transition supposed add item opacity item transitioning ex opacity remove item item fading smoothly opacity", "num": "2729", "d": "12/2014"}, {"title": "order components arbitrary", "body": "ran issue recently attempting get particular child components noticed something interesting seems order thispropschildren populated based execution time component actual order positioned let give example html hello world current method using try grab element using expectation since array first element array would tag however since components inside added array regardless order declared understand react provides ways manipulating children via however real method differentiating certain children without cumbersome turns javascript var heading reactchildrenmap thispropschildren function child heading amp amp childdisplayname heading child maybe providing sort interface searchretrieve specific children using may beneficial something like similar requires callback entirely portable bit cumbersome pull put mixin utility object reuse without copypaste lines every component would like retrieve specific children apologize already resources within react maybe methodology follow instead searching able find anything", "num": "2728", "d": "12/2014"}, {"title": "distinguish component owner ownee", "body": "title self explanatory asking due removal thank", "num": "2725", "d": "12/2014"}, {"title": "trigger twice component show hide fast reactcsstransitiongroup leave enteractive class component", "body": "", "num": "2723", "d": "12/2014"}, {"title": "inconsistent order events ie", "body": "usually user enters deletes character input field event triggered event however internet explorer deleting character input triggered entering character see correct order events also ie could observe behavior test ie lt understand react aims abstracting event handling inconsistencies across different browsers seems like issue needs fixing jsfiddle demonstrating issue found realworld implementation suffering bug found try using backspace ie see easy workaround make implementation work atm", "num": "2722", "d": "12/2014"}, {"title": "inline style value nt add px", "body": "hello docs say number purpose", "num": "2721", "d": "12/2014"}, {"title": "usage owner", "body": "hi would like know owner property deprecated mean moved private scope future still accessible right thank", "num": "2719", "d": "12/2014"}, {"title": "still used", "body": "using outside jsx markup still using instead jsx still uses objectassign var bar uses reactspread var component becomes javascript still uses objectassign var objectassign bar uses reactspread var component reactcreateelement div reactspread props tested online", "num": "2714", "d": "12/2014"}, {"title": "collision two react copies running dom reactmount two valid unequal nodes", "body": "working chrome extension injects data current page chrome extensions concept content script access page dom page javascript variables means include react page dom may already react running page wo nt conflicts code however two copies react running ran datareactid obvious reasons solution modify extension version react change dompropertyidattributename avoid conflicts better way modifying react source", "num": "2713", "d": "12/2014"}, {"title": "strange behaviour underscores classes", "body": "using jsx compiler flag class like following gets transformed notice becomes far aware nt traceur also gives expected output might special treatment intended make properties less susceptible use outside collisions class hierarchies regardless would nice able turn wanted verified online compiler", "num": "2712", "d": "12/2014"}, {"title": "load initial data via ajax react", "body": "seen ajax data receive huge nt want maintain state load props render page", "num": "2711", "d": "12/2014"}, {"title": "custom classes reactcsstransitiongroup instead hard coding postfix enter", "body": "would like control classes transition automatically add could done break current api still accept pull requests file changed related", "num": "2709", "d": "12/2014"}, {"title": "context passing children thispropschildren", "body": "example b contexttypes value reactproptypesinteger render function return thiscontextvalue childcontexttypes value reactproptypesinteger getchildcontext return value render function return thispropschildren case app render function return case component b rendered inside app render method case nt see context value b rendered directly case access context value desired behaviour yes could explain simply omission", "num": "2706", "d": "12/2014"}, {"title": "onkeyup onkeydown propagating correctly certain keys chrome", "body": "noticed working chrome character keys nt seem trigger event handler keys eg enter space tab others nt seem happen firefox see though work expected jsbin code editor output frame", "num": "2703", "d": "12/2014"}, {"title": "work web component", "body": "want use jsx gotchas says react wo nt render attribute fill fixed workaround", "num": "2701", "d": "12/2014"}, {"title": "doc typo", "body": "jsx depth small typo render react component local variable starts uppercase letter probably want render react component use local variable starts uppercase letter", "num": "2698", "d": "12/2014"}, {"title": "allow symbols mixins", "body": "symbols useful making mixins guaranteed clash namespaces mixins however currently symbols mixins ignored uses loop find properties mixin ignores symbols propose getownpropertysymbols used well pick symbols defined mixin object", "num": "2696", "d": "12/2014"}, {"title": "accessing component prototype another component warns plain functions", "body": "really sure expected behaviour simply moving component warns plain functions calling components directly simplified test case javascript var emptycomponent reactcreateclass render return var testcase reactcreateclass emptycomponent emptycomponent getdefaultprops return usecomponentonobject false render var component reactrendertostring warns using plain functions rendering component directly reactrendertostring", "num": "2692", "d": "12/2014"}, {"title": "jsxtransform bug array destructuring", "body": "code lo gt hi lo hi hi lo generates code react lo gt hi var hi lo lo hi note absence braces following test generated code produces incorrect behaviour two statements one worked", "num": "2691", "d": "12/2014"}, {"title": "unmount mean garbage collect like persist state renderings seems possible", "body": "sometimes switch tabs within application whatnot using reactbootstrap components mount unmount wish might updated nt want lose overlooking feature lets", "num": "2688", "d": "12/2014"}, {"title": "adding better error message missing mixin", "body": "add informative message case try mixin either nil null basically submit patch maintainers think good idea", "num": "2687", "d": "12/2014"}, {"title": "error reporting production", "body": "using sentry log errors serverside rendering clientside unfortunately error message react throws production mode pretty useless wind lot unactionable reporting react two levels logged console errors ones thrown enableddisabled using env varcompile option would really great two different options could reap benefits disabling warnings eg runtime type checking without losing meaningful error messages example checksum violations thanks", "num": "2686", "d": "12/2014"}, {"title": "setstate componentwillupdate return proper error", "body": "returned error nothing else maybe adding link note would help", "num": "2682", "d": "12/2014"}, {"title": "strokeopacity missing ignore list automatic unit concatenation", "body": "strokeopacity value gets px suffix although unitless css property", "num": "2681", "d": "12/2014"}, {"title": "flexible class names csstransitiongroup", "body": "classes added animated element fixed based transitionname ex classes added provide flexibility naming classes ex fadein enter animation fadeout leave animation propose following api adds classes adds classes adds classes", "num": "2680", "d": "12/2014"}, {"title": "make lint block fail tests", "body": "blocked things current jshint incompatible template strings pr mostly fix bet things even think want switch using eslint however set problems still working support mostly blocked libraries point seems pr start using eslint rules disabled incompatibilities end really important enabling blocker x use eslint x enable appropriate rules add custom rules namely must use string literals argument", "num": "2678", "d": "12/2014"}, {"title": "normalize eventdatatransfer drag drop events", "body": "currently implementing draganddrop react application different kinds data dragged dropped means want check certain types eventdatatransfer object see drop enabled basically looks like works fine chrome less firefox turns firefox type datatransfertypes domstringlist method according latest drafts specification whatwg returning array like webkit correct obviously fix easy side check one available use one thought might useful fix react instead since least related event system could probably take stab wanted gauge interest perhaps datatransfer object deemed scope synthetic event handler", "num": "2676", "d": "12/2014"}, {"title": "rendertostring call life cycle methods", "body": "came across whilst investigating another unrelated issue page requesting route twice call rendertostring server react try call calling mountcomponent turn triggers life cycle method componentwillmount seems odd essentially nt mounted utilizing method far see generate markup thus broken life cycle symmetrical life cycle lead odd issues lingering objects eg component listens events outside life cycle componentwillmount get proper componentwillunmount call get chance clean references main question rendertostring method invoke life cycle methods never complete cycle understand could move bindings componentdidmount still seems wrong asymmetric life cycle perhaps could block call componentwillmount including nt run called server side thoughts anyway really enjoying react", "num": "2674", "d": "12/2014"}, {"title": "make controlled components uncontrolled", "body": "hi issue question guess found turboreact project instead binding json template sends html directly use react diff update body tag love idea going back root web use javascript progressive enhancement made think created todo app based todomvc guides named reactizetodo use reactizejs made ssorallen things struggle controlled components react makes fiddle alot creating react classes instead diff html page replacing html question controlled components made uncontrolled make acts pure html forms diffing libraries br morgan", "num": "2673", "d": "12/2014"}, {"title": "classname render correctly", "body": "display items render pagebypage pagination going pages onward images display distorted margins even class expected outcomes lifecycle require using bootstrap var displayitems thisstatelistmap function item return var listitemwrapper reactcreateclass render function return thispropsdatatitle", "num": "2670", "d": "12/2014"}, {"title": "changing shouldcomponentupdate specpolicy", "body": "wanted propose changing spec might termed rationale sometimes may know efficient skip reason component mixin may able define whether able skip updating based knowledge propsstatecontext might hold true combined components app thought changed return values must return false update skip return true behavior default update", "num": "2669", "d": "12/2014"}, {"title": "expose reactcompositecomponentinterface", "body": "realize start patching internals project pretty much risk case looking add plugin would act similar could validations builtin state change time application using fully immutable data store uses ton able isolate individual units root data prevent unnecessary rerenders know exactly path changed able get working pretty quickly unable internal could see exposing fully might bad idea wanted see discussion allowing consumers hook behavior define mergeable types outside core", "num": "2668", "d": "12/2014"}, {"title": "accept immutable iterables render", "body": "would nice immutable iterable types accepted place arrays one could say rather later ugly easy forget", "num": "2667", "d": "12/2014"}, {"title": "strange componentwillreceiveprops behaviour", "body": "screenshot thing propsselected undefined type console hand chrome console suggest eg type sel arrowright shows proper value condition fails thing blowing mind suggest something wrong getterssetters let know know teh root teh problem", "num": "2666", "d": "12/2014"}, {"title": "rendervalidatedcomponent method hides exceptions", "body": "hi stumbled across code block causes exceptions hidden good reason catch exceptions block tidy finally without rethrowing exception generally considered fairly bad practice without good reason certainly made debugging applications difficult us valid reason would least good idea debug mode would rethrow exception problem happy supply pull request direction correct approach thanks", "num": "2665", "d": "12/2014"}, {"title": "wire autobinding", "body": "keep getting error using react edge uncaught typeerror read property reactautobindmap undefined", "num": "2661", "d": "12/2014"}, {"title": "reacttestutilsmockcomponent pass props", "body": "using mocked components test props nt get passed mocked component get passed particular reason nt get passed well think would make asserting certain props get passed submodule easier looking mockcomponent function module mocktagname mocktagname mocktagname modulemocktagname div little digging found info given module props get passed properly asserted accessing mocked component using named ref thus assert however unless missing something access props submodule iterated always undefined", "num": "2660", "d": "12/2014"}, {"title": "componentdidupdate fires browser paint operation", "body": "sure nt design discovered today lifecycle methods executed react element renders ie executed point noted appear executed browser paint operation srcbrowserreactreconciletransactionjs introduced unexpected behavior scenario similar example given react class would expect following order operations component rerenders browser fires fires browser repaints dom fires however case actual behavior steps occur reverse order chrome record timeline events see following example looks like changes changes back paint ever occurs rendering efforts futile without manually deferring logic using test theory order would different fired paint operation made following changes react source load element browser using modified code timeline chrome follows order operations would expect provided lifecycle methods defined example class said ca nt say certain something corrected wanted submit issue hopefully get feedback react contributor sure domain knowledge explain existing flow exists indeed designed thanks", "num": "2659", "d": "12/2014"}, {"title": "react legacycustom elementsattributes", "body": "noticed legacy attributes like align cellpadding cellspacing nt rendered react least server side annoying since trying convert email templating system use react order able display frontend app fact unable complete task react led another question supposed make react webcomponents work together custom elementattributes names filtered react rendering engine", "num": "2657", "d": "12/2014"}, {"title": "split internal react properties user supplied props", "body": "internal react properties mean current api design forces users mix two single object unfortunate case user wants props name solves problem nicely takes separate arguments understand current api designed around single props object rest treated children believe making explicit distinction user supplied props used internal purposes lead less confusion", "num": "2656", "d": "12/2014"}, {"title": "reactdomtextcomponent needs getinstance", "body": "recent separation internal external instances reactdomtextcomponents got left certain tools namely reacttestutils expect everything rendered tree conforms certain api attempting sync last couple weeks react fb causing tests depend fail result cc spicyj sebmarkbage", "num": "2654", "d": "12/2014"}, {"title": "guide section lead error", "body": "click lead error", "num": "2648", "d": "12/2014"}, {"title": "react component guide", "body": "quick thought maybe guide best practices order guide developers creating better reusable components components include styles others nt include tests others nt built using browserify others use webpack others strictly clientside based think sort standard example think open source components style agnostic able used server well client would love thoughts nt mind contributing starting guide imagine world could pull carousel component navigation component footer component etc wire full blown web application", "num": "2644", "d": "12/2014"}, {"title": "input float number problem", "body": "case input dot case also strange last use string type var price solve problem", "num": "2643", "d": "12/2014"}, {"title": "make setstate return promise", "body": "setstate currently accepts optional second argument callback returns undefined results callback hell stateful component return promise would make much managable somewhat convention js world api symmetric method accepts callback returns promise returns promise accept callback case editable table user presses enter moved next row call setstate user last row like create new row call setstate focus new row call setstate currently way achieve nested callback hell", "num": "2642", "d": "12/2014"}, {"title": "emailing notes nt work", "body": "", "num": "2640", "d": "12/2014"}, {"title": "error tutorial source code", "body": "page error setinterval function bind function instance code fails run incorrect code componentdidmount function thisloadcommentsfromserver setinterval thisloadcommentsfromserver thispropspollinterval correct code componentdidmount function thisloadcommentsfromserver setinterval thisloadcommentsfromserverbind thispropspollinterval", "num": "2637", "d": "12/2014"}, {"title": "race condition thisstate vs thisprops component", "body": "still confusing app render method start render undefined value take qwest retrieve completed json data time setstate return json rerender paginationdemo component moving paginationdemo render method seem thisstate produced undefined value thisprops contain value guess bug var paginationdemo reactcreateclass getinitialstate function return total current visiblepages componentdidmount function thissetstate total thispropsdatasetlastpage current thispropsdatasetfirstpage visiblepages handlepagechanged function newpage thissetstate current newpage render function consolelog thisstatetotal consolelog thispropsdatasetlastpage loggers shown undefined undefined undefined undefined undefined var app reactcreateclass getinitialstate function return activenavigationurl navigationitems productitems loadjson function qwestget api async get url function jsondata thissetstate navigationitems jsondata productitems jsondatadata bind complete function jsondata consolelog complete thisstatenavigationitems return object bind componentdidmount function thisloadjson render function return", "num": "2634", "d": "12/2014"}, {"title": "features supported jsx transform", "body": "would nice document point new react users explains syntax features used jsx files best overview found far directory jstransform tests also contains flow stuff well", "num": "2632", "d": "12/2014"}, {"title": "virtual dom fomatting json", "body": "created make backend template engine mizchijsonicreact current problem result pure json although big reason heard react plan able make diff web worker case feature also needed serialize send plan formatting json string format", "num": "2631", "d": "12/2014"}, {"body": "curious hear use case nt usually find depending order mixin lifecycle hooks kind dom manipulation perform mixins", "d": "12/2014"}, {"body": "add confusion true allowed", "d": "12/2014"}, {"body": "original issue comment", "d": "12/2014"}, {"body": "nt know component enabled harmony jsx transform options", "d": "12/2014"}, {"body": "dan referring nodes implementation component used within browser nt turned harmony shortly report back thanks tip sent iphone dec dan abramov notifications githubcom wrote nt know component enabled harmony jsx transform options reply email directly view github", "d": "12/2014"}, {"body": "since using innerhtml building string go currently possible switched using createelement would think like keep implementation detail could conditionally switch eg might better use createelement modern firefox innerhtml think better solution make sure attribute support versatile", "d": "12/2014"}, {"body": "think missing point note maintainer user like jsx html trying make look almost like html worse imo semantics always different eg special merging behavior property btw object string like html whitespace handling quite different much practical looks exactly like html people expect behave like html nt nt attribute names lowercase would inconsistency declare component props dom props nt look weird way html lets use casing lowercase would like jsx behave like well props keys plain js objects js object keys casesensitive would work custom components also whether allowed fixed indicates health project something obviously broken people asked jump unnatural hoops absolutely reason call jumping unnatural hoops jsx html domain specific language describing dom trees happens lot common html practical upside making similar html lot downsides html less expressive", "d": "12/2014"}, {"body": "ok fair point regarding deviation required distinguish components html tags using capital first letter indicate component reason deviate beyond", "d": "12/2014"}, {"body": "attributes said lowercase attributes would weird js code model objects would probably camel case anyway get inconsistency like use camelcase custom component attributes get inconcistency casing custom dom component attributes reduce inconsistency react enforces certain rules make jsx like js less like html makes sense ca nt html semantics example ca nt selfclosing tags browser behavior tags like closing tag omitted would mean reimplementing whole html parser calling time diffing dom would inefficient hand try think jsx obeys rules js much html decisions taken react team begin make sense", "d": "12/2014"}, {"body": "maintainer really strong opinion one way another issue practically really simple use jsx ever chunks html needs converting run html jsx converter like", "d": "12/2014"}, {"body": "make changes jsx transformer keeping semantics js class jsx transformed classname js hyphenated attributes jsx transformed camel case attributes js angularjs similar thing angular templates use hyphenated attributes camelcased attributes available access angular directives", "d": "12/2014"}, {"body": "hyphenated attributes jsx transformed camel case attributes js would point lose greppability props grep versions time still get inconsistency html style style suggesting lose spread attributes longer leak hyphenatedattribute convention js objects well trading real consistency false feeling familiarity", "d": "12/2014"}, {"body": "apache flex actionscript background problem jsx since somewhat similar mon dec pm dan abramov notifications githubcom wrote hyphenated attributes jsx transformed camel case attributes js would point lose greppability props grep versions time still get inconsistency twowords html style twowords style suggesting lose spread attributes longer trading real consistency false feeling familiarity reply email directly view github", "d": "12/2014"}, {"body": "assure oversight talked ad nauseum giving given years design decision bug class jsx transformed classname js actually initially takes away real uses cases want prop remember composite components vital part react dom components example transforming terrible idea super surprising entirely outside programmer control inside component access specified goes hyphenated camelcase idea specifying values one way reading another keeping jsx transform simple possible real goal going support something couple people opinionated happy unpopular people ultimately think right hand confident wo nt listen people saying made mistakes case spent lot time thinking going change", "d": "12/2014"}, {"body": "gaearon wrote use camelcase custom component attributes get inconcistency casing custom dom component attributes understanding correctly good thing reason helps make clear distinction react components dom nodes zpao wrote giving given years nt say nt would lie apparently nt given even one minute worth thought demonstrated complete total misunderstanding example gave though nt even read takes away real uses cases want class prop remember composite components vital part react dom components example transforming reactcreateelement teacher classname physics terrible idea yeah good thing nobody suggesting sorry clear react run folks short attention spans poor design decision making faculties hoping like aspects project like much simplicity angularjs everything simple compared angularjs", "d": "12/2014"}, {"body": "calling somebody liar really nt get far fwiw talked exactly topic many times last years truth yeah good thing nobody suggesting suggested demonstrated complete total misunderstanding example gave though nt even read example seen far examples go really nt give much go said want use instead explained nt reason provided applies broadly across properties going continue hostile insulting team helpful people work going ask remove involvement project", "d": "12/2014"}, {"body": "suggested comment mistake nt see nt suggesting example seen example saying instead would simple use however saw new comment posted hours ago thanks clears things actually better reasons ones saw going continue hostile insulting team helpful people work going ask remove involvement project brought hostility upon responded polite patient attempts discourse maybe next time try actually engage conversation folks understand pov instead closing issues without serious honest engagement", "d": "12/2014"}, {"body": "helps make clear distinction react components dom nodes would want distinction find often making tiny wrappers around dom components proxy props custom logic convention would choose prop custom wraps suggest try actually use react real project couple months make dozens components help adjust perspective vs initial impressions maybe see value consistency current design sad assume people disagree ignorant stubborn liars", "d": "12/2014"}, {"body": "convention would choose tabindex prop custom flexibletextarea wraps textarea one works sad assume people disagree ignorant stubborn liars sad assume case", "d": "12/2014"}, {"body": "would help clarified advocating hyphenated attributes htmlstyle attributes", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "times mistakenly use class jsx wonder css styles working", "d": "12/2014"}, {"body": "prohibited use right nt support dom components already deviating pure html xml camelcase attributes enforcements overall using js api attributes fits already years deep commitment backing sorry", "d": "12/2014"}, {"body": "zpao wrote prohibited use right nt support dom components sounds like selfcontradiction use nt support already deviating pure html xml camelcase attributes enforcements overall using js api attributes fits takes less one minute fix search replace", "d": "12/2014"}, {"body": "sounds like selfcontradiction use nt support use prop called class custom components feel like react dom components use classname dom property named takes less one minute fix would practical benefit breaking name attributes dom api properties convention", "d": "12/2014"}, {"body": "make easier understand parse html parser hard lots edge cases xmlish much easier parse stricter rules part trying make clear still becomes pure js minimal processing search replace nt work browser afaik part dom api", "d": "12/2014"}, {"body": "make easier understand parse html parser hard lots edge cases since familiar internals react take word assume thirdparty parser used solve problem nt work browser afaik part dom api ah nt understand using dom classname attribute internals thing would know would nt misunderstanding akiran suggestion makes sense response likewise also makes sense downturn result gap perspective new user vs knees deep implementation made worse seeming lack desireeffort close gap reasons making jsx similar html challenging obvious explanations docs nt clear comment said nt work browser afaik clicked feedback sorry harsh words thread result misunderstanding", "d": "12/2014"}, {"body": "ah nt understand using dom classname attribute internals thing would know would nt react uses dom property names instead html attribute names many instances match semantics closely example take html string like nt make sense jsx want react able diff individual styles course could also say jsx needs css parser well aside providing benefit would also complicated developer life generating strings harder settings properties objects need objectish jsx would allow something like value already kind api called dom dom object string indeed keys camel cased hyphenated need fix dom well findandreplace think dom api allows settingreading styles via hyphenated api sure consistently supported across browsers true node hyphenated properties see jsx cases much closer dom api html generated js server template language needs jsfriendly would awkward use within js reason dom api nt match html either dom specification also uses tabindex instead html tabindex properties jsx use dom property name convention coming", "d": "12/2014"}, {"body": "thanks detailed explainer gaearon feel like would valuable include something explicit like docs maybe whatever reason nt click first time one main challenges seems ability diff changes say want react able diff individual styles hand least far html attributes go still seems doable thinking actually nt understand entirely response zpao gave akiran actually initially takes away real uses cases want class prop remember composite components vital part react dom components example transforming reactcreateelement teacher classname physics terrible idea probably speaking seems misunderstanding suggestion would transformed components used indicate somewhere along line dealing html dom nodes react components react components nt need far understand case would simply accessed using jsx create html components still would nt use pass internally react would map dom property note longer advocating done since get feeling may asking lot point curious", "d": "12/2014"}, {"body": "see latter point agree doable although would breaking use dom property names convention mentioned zpao allencompassing eg corresponding jsx rule thumb team using quite react tries stress js templating language appealing guts dom api reference point makes sense imo see also context around decision", "d": "12/2014"}, {"body": "wow still lol iirc thing killed restructuring pulling key nt work conflicts upcoming keyword end discussion right", "d": "12/2014"}, {"body": "like", "d": "12/2014"}, {"body": "good example petehunt helpful", "d": "12/2014"}, {"body": "looks like works", "d": "12/2014"}, {"body": "hrrmmmm ok must reflux problem mixin definitely nt work used within mixin investigate sorry false alarm", "d": "12/2014"}, {"body": "would work mixin defines nonlifecycle method mixins use mixin component uses way nonlifecycle method gets defined twice causes error actually problem obvious solution please let know", "d": "12/2014"}, {"body": "fix problem", "d": "12/2014"}, {"body": "totally unrelated reactjsx please use resources questions stack overflow example", "d": "12/2014"}, {"body": "syntax troubles use side note nt like idea react handling things like react tries dissuade using plain html", "d": "12/2014"}, {"body": "looks like thing nt registered react anywhere means get duplicated million components good solution api lie still right still saying jsx nt guarantee never work html transformation html data programmatically done none danger comes usercontent ontheflyfromstring html dissuading using plain html jsx already nt html fact still thinking one major pitfalls people keep trying selectmanipulate kindof xml reactspecific behaviour tag even look like html tags pretty much nothing real html ends generating html snapshot way end browser needs actually load dom", "d": "12/2014"}, {"body": "yes said sentence nt clear duplication use module javascript var markdown require utilsmarkdown render return context javascript var context md require utilsmarkdown reactwithcontext context function reactrender mountnode reactcreateclass contexttypes md reactproptypesfunc render return andor mixin javascript var markdownmixin markdownhtml string return dangerouslysetinnerhtml html markdown string reactcreateclass mixins markdownmixin render return", "d": "12/2014"}, {"body": "ah yeah mixin probably thing looking thanks", "d": "12/2014"}, {"body": "still dangerous unless markdown parser somehow immune xss nt count imo react right thing forcing explicitly admit parts secure however", "d": "12/2014"}, {"body": "course equally true jsx invented csp security custom transformer would necessarily rest authors transformers massively used markdown transformer like packages could reasonably expected basics place csp adding bits miss sitebysite basis", "d": "12/2014"}, {"body": "could parse traverse nodes call createelement strip anthing feel dangerous", "d": "12/2014"}, {"body": "think using incorrectly recommendation tells write parser output definitely wo nt trust passes comprehensive suite tests requires spend lots time developing new piece software instead tying already existing software designed purpose react mixins work still feel little hacky reactregistertransformer would much awesome required thought filed issue", "d": "12/2014"}, {"body": "argue one would consider meaningless statements sure marginally terse syntax worth possible ambiguity also jstransform already allow object initializer shorthand outside jsx attributes", "d": "12/2014"}, {"body": "touchesir mistakes like described could done spread objects included core", "d": "12/2014"}, {"body": "attempting use results notable error compilation step specific example demonstrating said mistakes spread attributes", "d": "12/2014"}, {"body": "touchesir like", "d": "12/2014"}, {"body": "vanesyan possible option compiles nt really get spread works props toplevel nt using plain object job ref", "d": "12/2014"}, {"body": "bloodyowl good example would agree rreverser reasoning linked issue explicit destructuring less ambiguous captures process effectively suppose rather subjective matter", "d": "12/2014"}, {"body": "feel like said good reason ca nt find link regardless discussion extending semantics jsx belongs issue bloodyowl linked sebmarkbage perhaps remember talked weigh", "d": "12/2014"}, {"body": "props state ca nt change simultaneously parent changes state leading prop change component nt chance update state fact method best bet fired props state changed", "d": "12/2014"}, {"body": "ok thanks", "d": "12/2014"}, {"body": "also clickycom", "d": "12/2014"}, {"body": "would love long facebook supports", "d": "12/2014"}, {"body": "unmounting comparing old new actually whereas returns false", "d": "12/2014"}, {"body": "throwing three componentdidmount calls get queued order rendered child null child child null batching nt happen initial render something meaning make forceupdate happens synchronously causes unmountremount child components old enqueued child null didmount callback runs throws component nt mounted", "d": "12/2014"}, {"body": "two issues fix", "d": "12/2014"}, {"body": "first one new regression right", "d": "12/2014"}, {"body": "sure think added test recently ensure text components nt get remounted update add one empty components", "d": "12/2014"}, {"body": "initial render nt asynchronous change think need change api pass instance callback instead synchronously returning able queue new updates initial render though guaranteed happen queue processed", "d": "12/2014"}, {"body": "right already new mounts child components within larger update", "d": "12/2014"}, {"body": "clarify necessary anyway mentioned tweet unless mistaken correctable corrected react works onclick well nt hard love take look still way behind rest prs right ps thanks opening issue", "d": "12/2014"}, {"body": "code nt run bit tricky actually see problem gut expecting work across multiple renders used initial render rerendering different props state update actual dom node take look docs controlled components", "d": "12/2014"}, {"body": "sorry explain works structure modal component receives props value state component appnotas click link collapse run function appnotas makes change state rightly props modal bringing object model props modal appears anywhere render however form fields input example using defaultvalue appear data use value appears set value defaultvalue appears one thing appear defaultvalue value props", "d": "12/2014"}, {"body": "sounds like props empty first render since look initial render empty first render never populate form really think want make use controlled inputs meant paste link last time", "d": "12/2014"}, {"body": "yes initially props dados empty form appear click open modal props updated receives due value big problem props display anywhere appears normal even set input value ok appears value nt show value", "d": "12/2014"}, {"body": "right big problem props important understand fact props change reason problem yes first code wrote update value props updated makes input controlled see docs second line code update looked first render first render see empty set value render props updated even look misunderstanding happening bug react going close", "d": "12/2014"}, {"body": "omg sorry paul solution using ref input componentdidupdate value input thank much", "d": "12/2014"}, {"body": "executes direction expect parent first oh well wanted run server pardon", "d": "12/2014"}, {"body": "lifecycle method invoked client immediately initial rendering occurs matter order method nt called rendering", "d": "12/2014"}, {"body": "might want use componentwillmount", "d": "12/2014"}, {"body": "lifecycle method invoked client immediately initial rendering occurs docs say exactly want would need websocket connection server always starts disconnected render wait connect whether starts rendering issue nevertheless bug opinion workarounds exist though big priority", "d": "12/2014"}, {"body": "oh sorry guess read issue quickly hmm component really nt rendered point life cycle would biggest issue react ever imagine", "d": "12/2014"}, {"body": "nevertheless bug opinion nt think bug time fires expect component dom ready react would nt touch next executed parentfirst thing find node child nodes mounted moment makes useless majority use cases eg counting attaching thirdparty nonreact plugins etc", "d": "12/2014"}, {"body": "talking order reread docs never say whether dom element actually document point exist guess undefined makes order callbacks pretty much undefined well technically defined dom element created added document order wrong since child dom parent tree child exist ca nt document seems defined way since otherwise could reliably calculate dimensions anything else actually requires dom element document rather existing still bug opinion", "d": "12/2014"}, {"body": "javascript var documentcreateelement hello world var div documentcreateelement div divappend documentbodyappend div entered document first edit construct order react would", "d": "12/2014"}, {"body": "yeah good point think docs clarified waiting expert opinion", "d": "12/2014"}, {"body": "bug maybe confusing docs creation order dom elements nothing document since guarantee anyway since root may document thheller particular use case topdown order technically lifecycle methods guarantee particular component mounted nt make promises regard children relying order usually indication breaking encapsulation boundaries components example component renders another component component may choose delay rendering children loading data even passed", "d": "12/2014"}, {"body": "technically lifecycle methods guarantee particular component mounted nt make promises regard children relying order usually indication breaking encapsulation boundaries components right thinking relying dom components ie ref node time happens", "d": "12/2014"}, {"body": "javascript var state function stateinit id state id dummy something complex happening function statesubscribe id channel callback state id null consolelog state nt exist yet id var inner reactcreateclass componentdidmount function consolelog inner mount thisprops statesubscribe thispropscon thispropschannel function data render function return hello world var outer reactcreateclass componentdidmount function consolelog outer mount thisprops stateinit thispropscon render function return reactdomdiv null inner con thispropsid channel inner con thispropsid channel inner con thispropsid channel reactrender documentbody note actual code clojurescript om minimal example wanted websocket connection may actually already exist without component persist even component goes away nt exist must initialized though plenty ways organize first using nt work well given misunderstanding part mounted means use another method ps actually figure whether document quite simply walk till either end false true", "d": "12/2014"}, {"body": "thheller yea use case seems mutative nature might able use instead thinking relying dom components ie ref node time componentdidmount happens technically breaking encapsulation dom parent allowed defer rendering children direction going first class refs allow respond child mount event regardless happens later actually figure whether document quite simply walk elparentelement till either end null false documentbody true yes ca nt reliably fast wait become true eg mutationobservers crossbrowser could throw unmounted would hurt use cases", "d": "12/2014"}, {"body": "might able use componentwillmount instead think op original point runs server well wants behavior client guess need put behind flag similar react technically breaking encapsulation dom parent allowed defer rendering children interesting related layout proposals", "d": "12/2014"}, {"body": "chose another implementation still feels like bug nonetheless familiar react internals nt batch updates transaction checking whether root element need test rest document negligible cost nt really need know guess order sure nt affected", "d": "12/2014"}, {"body": "similar question", "d": "12/2014"}, {"body": "actually attribute html", "d": "12/2014"}, {"body": "ahh see shall use componentdidmount method thanks update", "d": "12/2014"}, {"body": "even better solution use string instead array split string delimiter lose extra characters tag", "d": "12/2014"}, {"body": "looks like something gzip handle quite nicely transport level", "d": "12/2014"}, {"body": "use get even better compression far know browsers stream based rendering approach probably get faster rendered example js var http require res reswritehead contenttype texthtml reswrite testthis visible first simulate bad connection settimeout function reswrite visible timeout resend listen", "d": "12/2014"}, {"body": "would imagine within", "d": "12/2014"}, {"body": "going point since wrote long reply sure tracked elsewhere well", "d": "12/2014"}, {"body": "bmcmahen looking elements created chrome dev tools see single screen shot br seeing", "d": "12/2014"}, {"body": "confirm chrome firefox jsbin", "d": "12/2014"}, {"body": "chrome got ff", "d": "12/2014"}, {"body": "well since br supported tag test already", "d": "12/2014"}, {"body": "perhaps react generates browser interprets two tags interesting", "d": "12/2014"}, {"body": "try get different results lowercase", "d": "12/2014"}, {"body": "interestingly nt happen type lowercase edit beat", "d": "12/2014"}, {"body": "relevant check source code seems like instead checked wonder react places though", "d": "12/2014"}, {"body": "gaearon right use jsx something like may implied convention", "d": "12/2014"}, {"body": "ah yeah even bug wo nt matter capitalized tags disallowed", "d": "12/2014"}, {"body": "addition convention tag names beginning capital letter userland components", "d": "12/2014"}, {"body": "dashed jsx tags start lowercase letter contain dash treated html", "d": "12/2014"}, {"body": "convention extend folks exclusively using actually nt know bc use jsx sweatsmile", "d": "12/2014"}, {"body": "well considering jsx gets transformed js would think rules", "d": "12/2014"}, {"body": "whoops sorry read idea using capital letters something avoided would disallowed actually using within context parsing limited number tags contenteditable container parser records tagname natively capital letters passed works perfectly except br case anyway use lowercase tags thanks", "d": "12/2014"}, {"body": "thanks reporting either work seamlessly uppercase tags warn use", "d": "12/2014"}, {"body": "warning probably better guys established convention anyways probably also note convention clearly", "d": "12/2014"}, {"body": "load regular fastclick fix browser delay dom event level react event system sits top right", "d": "12/2014"}, {"body": "bad public setstate uses internally ideally pass context way enqueue updates", "d": "12/2014"}, {"body": "hard coded list still list transform deprecation purposes noted pass anything work may special cases custom elements nt accounted attributes work plan let anything eventually need make transfer consumption better otherwise super easy put way many props dom elements still need whitelist attributes special requirements make sure mutate nodes correctly probably use many though lastly namespaced attributes bit needs done first adding support know use deciding write jsx jsx nt support even transform ca nt best path probably make way unless expose way register properties whitelist everything possible xul svg mechanism register properties react works internally publicly exposed clear handle collisions talk long time ago exposing way register elements get rid whitelist nt make sense moving forward registering attributes may thing though need figure details support web components definitely progress", "d": "12/2014"}, {"body": "zpao thanks comment think could maybe provide value boxing function indicate given prop indeed attribute end managed find workaround generating custom element constructors wrapped react component see enables define custom elements providing field anotations although afraid way throwing optimizations away", "d": "12/2014"}, {"body": "inside nt ca nt unmount happens react stays react let state changes drive dom js var example reactcreateclass getinitialstate function return showsomecomponent true render function return handletoggleclick function thissetstate showsomecomponent thisstateshowsomecomponent toplevel methods used toplevel nodes entry points react toplevel node managed react every change caused component state change expressed declaratively parent component state change propagate prop change children", "d": "12/2014"}, {"body": "hopefully gaearon answer helped explained probably better would explicit unmounting done roots react works clear closing let use know good luck", "d": "12/2014"}, {"body": "ideal work around issue substituting code get correct behavior needed get link clickable give little hand mouse pointer", "d": "12/2014"}, {"body": "make link tutorial prominent already implementations node python ruby companion repo", "d": "12/2014"}, {"body": "mean tutorial tells use python simplehttpserver get ajaxy territory despite fact point established browser node never mentioned going need python anything might well stick node tell use nt need download install python say windows linuxunix nt come python part default distribution run localhost server dir rather making prominent makes far sense remove need python tutorial entirely", "d": "12/2014"}, {"body": "hand getting requires installing another tool internet whereas python installed builtin works", "d": "12/2014"}, {"body": "right point assume people python installed know already node installed explicitly told use get react getting started section every os comes python nodejs preinstalled least getting started know nodejs npm", "d": "12/2014"}, {"body": "tutorial nt really assume went getting started nt need npm tutorial starter kit let get pedantic let argue node vs python know needs better think place offers different servers run whatever language want ultimately best thing", "d": "12/2014"}, {"body": "nt argument though windows user trying use react first time life finally gave polymer breaks way much firefox started getting started running tutorials feels like extremely logical first time user path scenario suddenly told use python felt weird would python already node thing let know although arguments given change feel like based assumptions users counterpoint", "d": "12/2014"}, {"body": "jsx html parser design compilation output js object tree ambiguity js tree", "d": "12/2014"}, {"body": "jsx html distinct set parsing rules close xml makes rules explicit avoids special cases link tags closed wo nt changing", "d": "12/2014"}, {"body": "see also", "d": "12/2014"}, {"body": "think something like better solution eg surfacing error code something production maybe hash original message reason nt think matters checks often end common validation helpers particularly common warnings also invariants nt take levels stack trace account structuring internal code even moved one level next level still problematic besides catch complete stack traces production browsers part error message logging solution give much better error messages anyway since track source code easier experimented converting using transpiler shown performance boost also safely strip error message production builds especially nonjit environments since lot code currently deopts unrelated problem stack traces though", "d": "12/2014"}, {"body": "nt figured yet defer unmount fine resolved one way another", "d": "12/2014"}, {"body": "syranide simply blur button closing popup issue though fixed react nt process events elements unmounted left alone leaving alive caches", "d": "12/2014"}, {"body": "think issue related", "d": "12/2014"}, {"body": "nt know relevant often seen error happening load react twice example may module depends different version react thus two reacts wo nt play nice together", "d": "12/2014"}, {"body": "right error disappears require react file run using tag index html pass object directly modules like", "d": "12/2014"}, {"body": "build system use must issue bundling react twice reason also check dependencies copy react", "d": "12/2014"}, {"body": "related", "d": "12/2014"}, {"body": "build systems copies problem caused nodewebkit script file loaded directly via tag run browser context loaded via run node context two different react objects created contexts need replace require jsappjs", "d": "12/2014"}, {"body": "woah interesting thanks sharing", "d": "12/2014"}, {"body": "kinda crazy openmouth anything close", "d": "12/2014"}, {"body": "maybe dependencies context introduced works fine situation", "d": "12/2014"}, {"body": "react context meant nt changed many things could make minimal sample app something familiar nodewebkit works pretty hard actually understand problem might going", "d": "12/2014"}, {"body": "created repo clone use run nodewebkit nodewebkit main executable contexts see wrote requiring react required module running node context nt global variable copy browser context root variable node", "d": "12/2014"}, {"body": "show css", "d": "12/2014"}, {"body": "always present others added csstransitiongroup", "d": "12/2014"}, {"body": "defined issues declaring instead example assume defining since ca nt find code", "d": "12/2014"}, {"body": "transition defined defined need define twice issues declaring leaveactive instead leave example assume defining since ca nt find code issues", "d": "12/2014"}, {"body": "defined need define twice nt understand element issues apple changed something coreanimation yosemite ios animation nt get triggered defined ruleset", "d": "12/2014"}, {"body": "nt understand element forget nt come play apple changed something coreanimation yosemite ios animation nt get triggered transition defined active ruleset using chrome", "d": "12/2014"}, {"body": "bitplanets forget nt come play show full css maybe make jsbin minimal repro nt see defined element nt provide styles would also help showed relevant jsx nt understand used using chrome iirc chrome also uses ca hood os x may wrong though", "d": "12/2014"}, {"body": "show full css maybe make jsbin minimal repro nt see transition defined element nt provide styles would also help showed relevant jsx nt understand used previous commend said always present others added csstransitiongroup also nt care part making confusion somehow expect existsbe included already said included included css html panel leaving looks like clearer", "d": "12/2014"}, {"body": "sure seeing write hello world element within maincomponent seeing otherwise please post simple repro case take look", "d": "12/2014"}, {"body": "hahahaha spicyj really long day apologize idiot changed use", "d": "12/2014"}, {"body": "use case normally pass data component props", "d": "12/2014"}, {"body": "instance imagine got mixin needs add listeners applied top level component", "d": "12/2014"}, {"body": "think react way solving prop component mixin set top level component explicitly concept top level flawed may top level react component ed another component would count top level", "d": "12/2014"}, {"body": "yes counts top level top level mean component instance use aka owner", "d": "12/2014"}, {"body": "ah think see trying mixin want listen events outermost component mixin correct think use supported documented yet weird edge cases lot libraries already relying polished see would look like js var backbonemixin childcontexttypes pass hasparentbackbonemixin proptypesboolisrequired contexttypes may may passed us hasparentbackbonemixin proptypesbool getchildcontext function return hasparentbackbonemixin true componentdidmount function thiscontexthasparentbackbonemixin add listeners componentwillunmount function thiscontexthasparentbackbonemixin remove listeners note currently uses owner relationship use parentchild relationship whether fits use case", "d": "12/2014"}, {"body": "thank example going try", "d": "12/2014"}, {"body": "worked well struggling warning stating parent owner context keys differ aware differ problem afraid wo nt possible future", "d": "12/2014"}, {"body": "think warning meant prepare changes ok context parent future think fine", "d": "12/2014"}, {"body": "idea changes need made avoid warning ready incoming versions explicitly use case contexts wo nt solution use case", "d": "12/2014"}, {"body": "plan reactwithcontext go away", "d": "12/2014"}, {"body": "nt think avoid warning context values differ use case seems like next version behavior aligned want", "d": "12/2014"}, {"body": "imo ignore warning fine next version however keep getting warning", "d": "12/2014"}, {"body": "thank feedback keep eye open check changes made api gets mature let know rising concern going close issue thank", "d": "12/2014"}, {"body": "yeah problem lot people counting maturing", "d": "12/2014"}, {"body": "cc salier", "d": "12/2014"}, {"body": "cc joshduck interesting fires nt fire typing call incorrect counts path least resistance might stop using native event ie instead use fallback using firefox already ignoring native ie event similar inconsistencies perhaps need investigate bit", "d": "12/2014"}, {"body": "lack event keypress sounds familiar look currently standardizing api hopefully resolve ambiguity ie update implementation short term ignoring event sounds ok", "d": "12/2014"}, {"body": "bit weird guess purpose mdn length unit optional react code px added see weird string gets expanded discussion", "d": "12/2014"}, {"body": "thx answer think close answer", "d": "12/2014"}, {"body": "maybe updating docs", "d": "12/2014"}, {"body": "access removed already gone master", "d": "12/2014"}, {"body": "wondering thought intentional never understood reasoning", "d": "12/2014"}, {"body": "indeed intentional first syntax nt really supported yet nt related react chose avoid react runtime dependency ifwhen want promote syntax broadly sure note need polyfill docs", "d": "12/2014"}, {"body": "point better way nt think really considered case known issue using multiple copies react page cause problems typical answer nt nt really apply think couple longerterm possibilities first remove use attribute entirely stick ids page generate random prefix attribute values startup essentially way runtime would mostly isolated cc sebmarkbage syranide talked things", "d": "12/2014"}, {"body": "would nice get rid possible seen newcomers turned away aesthetic reasons really important", "d": "12/2014"}, {"body": "gaearon pr exactly somewhat thrasing devs prefer know full story many different ways done may faster others also react currently irrelevant bugs pr trips bad definitely see much possible seemingly even preferable performance perspective", "d": "12/2014"}, {"body": "also mention simple workaround involve building version exec unless using prebuilt package", "d": "12/2014"}, {"body": "thanks responses amp info closing nothing else pending", "d": "12/2014"}, {"body": "looking closer realize actually pretty nice feature transpiler compiles effectively enforces privacy underscoreprefixed properties class neat though still suggest making optin b work references", "d": "12/2014"}, {"body": "totally agree feature neat also unexpected side effect picking transforms jstransform transforms coming internal codebase wanted enforce underscore means private nt even try convention stands ca nt easily turn going close would interested bring jstransform repo though people actually maintaining might thoughts", "d": "12/2014"}, {"body": "tl dr top file suppress", "d": "12/2014"}, {"body": "please post question another venue mailing list stack overflow try keep github bugs issues react", "d": "12/2014"}, {"body": "react context propagated owner tree nt receives externally props afaik changed context propagated parent tree", "d": "12/2014"}, {"body": "thank andrey would explain problem good changed", "d": "12/2014"}, {"body": "lot discussion", "d": "12/2014"}, {"body": "seems work fine character keys specific versionenvironment", "d": "12/2014"}, {"body": "chrome windows seems link jsbin expired wo nt happen output frame code editor click little arrow top right output frame order reproduce link live", "d": "12/2014"}, {"body": "minipai found workaround seems official way achieve", "d": "12/2014"}, {"body": "thanks heads took care go next website update", "d": "12/2014"}, {"body": "seems sane surface though sure play mixins future migration path might cc sebmarkbage", "d": "12/2014"}, {"body": "reasonable also area different polyfills screw example objectassign polyfill nt copy real symbols likewise symbol polyfills add getownpropertysymbols feature overlap polyfills might cause issues tempted wait bit see space shakes also clear symbols primary way using private state since observable method weakmaps safer way keep completely isolated private state curious use case though seems completely private nt instance module level functions somehow using virtual nature combine multiple mixins share symbol certain methods might also useful put symbols state point start using native objectassign one exists copy symbols", "d": "12/2014"}, {"body": "sebmarkbage like use namespacing like let mymixininterface foo symbol bar symbol let mymixin mymixininterfacefoo default implementation foo uses mymixininterfacebar let foo reactcreateclass mixins mymixin mymixininterfacebar fill implementation somewhere thisrefsfoomymixininterfacefoo yes could use prefixed functions like something seems even worse moment symbols mixin useless might well give meaning also opens door allowing custom methods chain like exposed dictionary allowed people attach symbols would worry conflict seems completely private nt instance module level functions ca nt override class module level functions", "d": "12/2014"}, {"body": "seems like facebookjstransform addresses issue", "d": "12/2014"}, {"body": "yup closing favor issue", "d": "12/2014"}, {"body": "unsure specifics reactbootstrap feel like losing state likely state living parent component passed props state live store object external components may beneficial read article composability multiple components", "d": "12/2014"}, {"body": "seems like something take reactbootstrap possible maintain state tab content would need maintain hidden prop always render tabs even whatever answer root question yes unmounting means references gone data get gced", "d": "12/2014"}, {"body": "see like last time nt possible due mocking problems", "d": "12/2014"}, {"body": "also lots minified exceptions production stack traces help always captured reliably", "d": "12/2014"}, {"body": "hmm think actually result us blowing stack nt supposed callable inside looks like may inadvertently removed check fix master backport", "d": "12/2014"}, {"body": "fixed go next release list things backported release", "d": "12/2014"}, {"body": "think seems like pretty reasonable thing react fixup properties cc syranide", "d": "12/2014"}, {"body": "overly familiar intricasies fo dragdropdatatransfer iirc quite lot normalizedpolyfilled seems like worthwhile endeavour least", "d": "12/2014"}, {"body": "cool said give go like basically thinking adding class implements defined interface specification plus perhaps property interface properties calls return corresponding property native object except converted array sounds good pretty straightforward implement though sure tests go", "d": "12/2014"}, {"body": "true lifecycle really cycle server called rest nt documented long time exception reasoning actually affect state initial need make sure called server called client initial render could different whole checksum would fail considered forbidding call would eliminate need call server happens necessary case listeners whatnot probably better set", "d": "12/2014"}, {"body": "cool thanks reasoning behind keep ear ground anything change componentwillmount", "d": "12/2014"}, {"body": "hi hallgren tasks primarily tracking changes needed react code base since general question related react diffing libraries probably success asking stackoverflow going close issue since general question community rather bug closing issue nt prevent others jumping responding encourage anyone good answer exactly take issue todo list reason using controlled component rather uncontrolled one sounds like uncontrolled components mostly want need something fancy component always break react use dom imperative api though obviously nt react way nt official recommendation building react apps good luck project", "d": "12/2014"}, {"body": "hi thanks answer jsfb switching value defaultvalue trick almost cases transfered mutate value replacement input tag new value new title loaded backend inserted react dom special cases type submit compared type text comes value gt defaultvalue make uncontrollable", "d": "12/2014"}, {"body": "understanding input type submit results button inherently editable user nt think concept controlleduncontrolled exists cc spicyj", "d": "12/2014"}, {"body": "problem", "d": "12/2014"}, {"body": "sorry found could apply imgresponsive classname every images resize correctly", "d": "12/2014"}, {"body": "would nt require walking entire component tree collect shouldcomponentupdate return values one main benefits shouldcomponentupdate node large number children tell react nt need talk hundredsthousands children nodes components nt implement shouldcomponentupdate really emergency escape hatch extreme cases need manual perf optimizations default implementation return true also difficult generalize function usually used developer firm understanding implementation details hisher page knows behavior child components", "d": "12/2014"}, {"body": "would nt require walking entire component tree collect shouldcomponentupdate return values assuming actually hit shouldcomponentupdate reconciliation process begin changing something similar behavior true true one main benefits shouldcomponentupdate node large number children tell react nt need talk hundredsthousands children nodes agreed data immutable possible generalize something ed toplevel behavior something like om application case time via immutablejs makes performance insanely fast hundreds thousands components rendering top cases like escape escape hatch speak currently workaround something like request provide inverse generalizing something like purerendermixin except cleaner approach requiring sometimes know always want rerender could mixin would disable behavior componentbycomponent basis", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "necessity feature past", "d": "12/2014"}, {"body": "alternatively feature mentioned something others feel would worth adding willing put together pull request", "d": "12/2014"}, {"body": "believe already work master release yet", "d": "12/2014"}, {"body": "version react using smallest amount code use reproduce seeing", "d": "12/2014"}, {"body": "agree hiding exceptions bad thing really hiding exceptions code linked appears tryfinally block understand correctly affect flow exceptions example function foo throw new error myerror function bar try foo finally consolelog bar calling bar cause exception foo caught perhaps missunderstanding issue really like see example test case exception caughtswallowed react codebase andor pull request suggested change see think needs done going close bug invalid feel still incorrect please reopen andor provide test case andor pull request", "d": "12/2014"}, {"body": "intention let errors bubble without explicitly rethrowing tends cut stack trace make harder find original bug far know current code work correctly browsers except old ie still throws exception nt provide good stack trace", "d": "12/2014"}, {"body": "believe error due bug react please post simple example fragment code demonstrates issue reproduceverify", "d": "12/2014"}, {"body": "jsfb found api changes still calling rendercomponent using createelement instead", "d": "12/2014"}, {"body": "still nt happen jsfb repro case might worth fixing point release sometime", "d": "12/2014"}, {"body": "apparently edge presumably also ca nt reproduce nt think anything let us know see dotfelixb", "d": "12/2014"}, {"body": "suggestions fix", "d": "12/2014"}, {"body": "coyotte react edge version using fiddle longer use component constructors directly building virtual dom tree use reactcreateelement instead use jsx transform see updated fiddle also change react version previous api deprecated still working", "d": "12/2014"}, {"body": "cc sebmarkbage", "d": "12/2014"}, {"body": "record one thing quickly noticed deferring postrender life cycle methods longer execute code expect component method run may noticed ran test suite pretty much every test asserts list executed life cycle methods failed nt seem possible bug much philosophical decision expectations surrounding react render methods corresponding life cycle methods", "d": "12/2014"}, {"body": "indeed intentional react reconciliation lifecycle occurs within single event loop clear scheduling api within event loop rely explicit batching ensures one reconciliation happens within batch cases reactrender synchronous ideally would always asynchronous use case work react reconciled properties may want extra work next frame painted otherwise would always see flash normally writes dom component effect next event loop anyway unless read reads example explicitly schedule work happen next frame painted using elaborate particular use case", "d": "12/2014"}, {"body": "totally agree reasoning laid sebmarkbage give color particular scenario also admit something edge case building ui particular element one three css values depending current state ui element also independently animated along x axis value well state ui dictates element toggle vice versa need execute class transition without element moving within browser meaning value change time value however rule targets result element animating nt want order get around current solution set store old transition value retrieval later transition update without element moving browser set stashed value turns transition back animate along x axis necessary found fires event loop changes occur single paint occurs desired effect achieved contents deferred get thanks replying sebmarkbage far concerned issue closed agree leave close", "d": "12/2014"}, {"body": "currently unknown attributes nt get passed dom nodes things like transferring props would result many unknownnoisy properties passed dom elements aware issue solution unknownattribute issue todo list duplicate", "d": "12/2014"}, {"body": "unit tests get instance text components nt instance consecutive text components might merged implementation detail thought cleaned internal unit tests relied diff patch fixes new ones something findallinrenderedtree always breaks dec pm paul shannessy notifications githubcom wrote recent separation internal external instances reactdomtextcomponents got left certain tools namely reacttestutils expect everything rendered tree conforms certain api attempting sync last couple weeks react fb causing tests depend reacttestutilsfindallinrenderedtree fail result cc spicyj sebmarkbage reply email directly view github", "d": "12/2014"}, {"body": "bring diffs nt new failures probably missed hidden believe always break text component since blindly call", "d": "12/2014"}, {"body": "sebmarkbage return nt work yet", "d": "12/2014"}, {"body": "probably null explicitly leaving throw validate assumption nothing trying get public instance text components looks like need fix scry sure nt show tests dec pm ben alpert notifications githubcom wrote sebmarkbage reactrender foo el return nt work yet reply email directly view github", "d": "12/2014"}, {"body": "per subsequent inperson conversation sebmarkbage decided update scry instead adding getpublicinstance method textcomponent", "d": "12/2014"}, {"body": "needs nt bound pass like pass good go", "d": "12/2014"}, {"body": "thanks replyso pull request", "d": "12/2014"}, {"body": "closed", "d": "12/2014"}, {"body": "extent possible want framework agnostic let developers use react see fit components clearly provide styles generally complex components need sort styling others probably inherit styles page without knowing details component hard make recommendation one way design principals selfevident like building components reused many different contextsenvironments possible others less obvious existing docs talk patterns antipatterns discovered facebook using react internally try provide guidance build components particular bestpractice feel nt sufficiently communicated feel free submit pull request happy take look whatever come", "d": "12/2014"}, {"body": "tricky problem come thought lot nt really solution yet really problem web whole specific react hit lot problems questions package manager get used npm bower css many questions prevent clashing class names package style going intrinsic way build component take reactbootstrap example would pretty silly exist without styles dependency management whole worms good discussions hints might able start solving think long way final solution best could start write minimal best practices like use interested think section site would good happy reviews chat might belong section", "d": "12/2014"}, {"body": "ya away thinking whole lot lately completely understand guys coming million one things thing days becomes increasingly difficult recommend right way write components read following article writing css changing start writing component based applications think little naive opened post think react unopinionated great job expressing especially one answer ever something like core react components something similar polymer website think developers would able build upon components using best practices following similar standard way core component written", "d": "12/2014"}, {"body": "agree core component library would awesome lot work maintain library focus point making react core best worth taking look reactbootstrap nt already pretty awesome set components since mentioned polymer website might like also react component libraries", "d": "12/2014"}, {"body": "see also", "d": "12/2014"}, {"body": "input value set value state price key value try input dot keypress would result state would update price key value running parsefloat inputs like return", "d": "12/2014"}, {"body": "mentioned handling floats quite simple need specialized handling nothing wrong react exactly told going close", "d": "12/2014"}, {"body": "ideas also accepts callback also returns value techniques used row call focus autofocused created new style refs callbacks get fired child mounted used trigger focus without need wrapping also use lifecycle hook component gets updated ensure focused thing according business logic always retains focus eg newest one think probably better alternatives nt rely imperative nature source state change eg tying action triggered event add another state transition state nt confusing end state different sideeffects part beauty react avoid think one patterns could replace callback even nt honestly current batching strategy comes set problems right hesitant expand api sure going keep current model think temporary escape figure something better seem fair", "d": "12/2014"}, {"body": "experience whenever tempted use callback achieve overriding andor", "d": "12/2014"}, {"body": "please make sure right repo filing issues meant file say huh", "d": "12/2014"}, {"body": "oooops sorry head today p", "d": "12/2014"}, {"body": "note bind see following js console bind binding component method component react automatically highperformance way safely remove call see commentbox however nt bind sample code nt work perhaps regression react prevents ever automagic appears working using", "d": "12/2014"}, {"body": "works fine using full running example bound instance already thanks autobinding nt anything else needed indeed nt autobind would nt set bind warning saw close reopen repro code repro need environment information browser os etc", "d": "12/2014"}, {"body": "bug bit misunderstanding component lifecycle definitely confusing renders paginationdemo happening initial render update setstate via componentdidmount pageinationdemo update app rerendering async promise data render initial state initial state app reading established initial state app last update called async request response instead using probably want use docs may also want reconsider using something ever read looks like also idea based comment render", "d": "12/2014"}, {"body": "great thanks zpao love lifecycle works", "d": "12/2014"}, {"body": "yes great idea branch starts add try finish weekend", "d": "12/2014"}, {"body": "jsx column recently added give pretty good overview", "d": "12/2014"}, {"body": "working towards making possible purely use object literals currently still couple things related internals prevent us entirely simple dom component trees doable many things composite components nt quite nt anything actionable moment closing", "d": "12/2014"}, {"body": "zpao ok guess thanks", "d": "12/2014"}, {"body": "spread implies copying pretty sure still needed supporting could make sense", "d": "12/2014"}, {"body": "necessary specific case necessary general case personally think still room supporting tangential spread case something talked", "d": "12/2014"}, {"body": "fwiw discussion extending jsx bare object happen", "d": "12/2014"}, {"body": "nt think reactmultichildupdatechildren catching exceptions fact think specifically jumping hoops ensure exceptions caught note tryfinally blocks result exceptions caught demonstrated function foo nulldosomething function bar try foo finally consolelog bar invoking bar catch null pointer exception thrown foo simple examplefiddle demonstrates issue would allow us investigate", "d": "12/2014"}, {"body": "reported since sounds like parsing issue problem strip types transform may turn need update transform though ca reopen case", "d": "12/2014"}, {"body": "yea probably checks reactdomoption wrapper allow anything text children", "d": "12/2014"}, {"body": "hit", "d": "12/2014"}, {"body": "probably fixed", "d": "12/2014"}, {"body": "escaping tag leaves vulnerable someone creating link form tag even vulnerable trying create blacklist sanitizer inherently flawed approach security discouraged also custom escape function create html field shown allowing mostly gets want nt make sense add feature order support broken security policy going close bug unless someone stronger motivating reason feature", "d": "12/2014"}, {"body": "case custom escaping function properly handles case well many complex cases extensive test suite successfully made several external security audits mitigation improve code somewhat would still nice less verbose way invoke", "d": "12/2014"}, {"body": "anyone additional feedback also evaluating react would like know scales well large number dom elements workarounds speed first render scenarios", "d": "12/2014"}, {"body": "ricardosoeiro frameworks always overhead compare nonnaively suitable framework make sense general guideline many dom elements first render visibly slow wrong faster performance solution bandaid add content dynamically scrolled view etc way scales properly ps also react become faster faster time", "d": "12/2014"}, {"body": "speed first render important highly important project could better render serverside may possible worth effort imagine agree adding content dynamically would possible render first items first render probably far items person could see page without scrolling rest second render milliseconds later requires extra writing effort upfront hopefully one time effort provides shorter perceived load time answer evaluation react really depends tradeoffs want make willing accept lower render performance simplicity low mental overhead react provides", "d": "12/2014"}, {"body": "jsxless example consistently around chrome computer perhaps jsfiddle slow prevents jit optimizations test case standalone html really hoping actual customer data emails telephones addresses posting", "d": "12/2014"}, {"body": "think point use simpler library like underscore templates generates markup string memory performs single dom update afaik precisely react first render", "d": "12/2014"}, {"body": "good topic mailing list sorry said sooner mentioned appear discrepencies causing performance issues react simple string templating yes likely additional overhead react sets maintains references stores caches updates fast", "d": "12/2014"}, {"body": "also issue albeit different reason", "d": "12/2014"}, {"body": "error call reactunmountcomponentatnode documentgetelementbyid modalscontainer next action reactrender anothermodal everything ok without reactrender im getting error like react dispatching event clean everything unmount component ca nt find course", "d": "12/2014"}, {"body": "sure better putting globals components need communicate via kind global bus publish bus npm module components since would components would share instance", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "ran issue today caused two things mounting root node client side later nt mounted server also server side rendering inside jsdom instance currently working around issue rewriting implementation createreactrootid jsdom instance randomized server side behavior curious though reason use random always", "d": "12/2014"}, {"body": "interesting idea current react proptypes involves running bunch code think end goal make static use something like flow analyze like even move away make static property take look ideas working towards cc sebmarkbage", "d": "12/2014"}, {"body": "cc sebmarkbage", "d": "12/2014"}, {"body": "first thank excellent bug report well structured easy test bad news various wrappers undoing wrappers complex difficult get form perfect upgrade path guess special case something broke ended spending lot time inclined leave broken good news works master branch fixed would mind submitting formal pull request unit tests added tests ensure nt break exception asserting props mockcomponent probably wo nt support considered legacy point nt important since automocked components works better outofthebox probably encourage shallow testing use case", "d": "12/2014"}, {"body": "best get tests pr test suite fighting fires moment ca nt promise drop date thanks looking", "d": "12/2014"}, {"body": "draft class definition also latest upcoming draft october seems propertydescriptor methods class let desc propertydescriptor value f writable true enumerable false configurable true classelement order methods isstatic false let status result performing propertydefinitionevaluation argument proto b else let status result performing propertydefinitionevaluation argument f seems class methods current spec", "d": "12/2014"}, {"body": "first one constructor enumerable rest elements uses propertydefinitionevaluation make enumerable dec pm ceane lamerez notifications githubcom wrote draft class definition also latest upcoming draft october seems propertydescriptor methods class let desc propertydescriptor value f writable true enumerable false configurable true classelement order methods isstatic false let status result performing propertydefinitionevaluation argument proto b else let status result performing propertydefinitionevaluation argument f seems class methods enumerable current spec reply email directly view github", "d": "12/2014"}, {"body": "see number let desc property descriptor value propvalue writable true enumerable true configurable true report well browser vendors", "d": "12/2014"}, {"body": "also feature would like obviously deep merge performant maybe could configurable use either shallow deep merge basic example use case feature javascript var button getdefaultprops function return buttontext click buttonaction somemethod render function return somemethod function var custombutton reactcreateclass mixins button getdefaultprops function return buttontext alert click somemethod function alert hey clicked reactrender someelement expected behavior would button text alert click action still maintains default behavior calling", "d": "12/2014"}, {"body": "proptypes meant behavior nt depend adding removing proptypes declaration afaik react transitioning classes proptypes superseded flow typechecks another reason annotating proptypes nt option another problem currently react allows pass different types props describe however behavior suggest would make sense default value passed value objects user accidentally passes something object eg number user code may may fail would merging work case seems like much complexity pay something implement completely sidestepping instead merging using instead", "d": "12/2014"}, {"body": "gaearon method using fairly new user perspective expected behavior based docs found either concrete class would totally supersede mixin would merge values documenting behavior would help time try figure submit pr really makes composition difficult since mixin functionality requires props also fwiw lodash implementations handle edge cases well available standalone npm modules", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "nt think going change let sebmarkbage make final decision", "d": "12/2014"}, {"body": "understand might confusing first guess one terms learn sure clarification worth churning people already using accustomed terms generally open improving terminology people use react nt started yet predict lot use flow typescript another dynamic type syntax guards curiosity guys think flow typescript syntax object shapes ensure properties numbers kind weird learn maybe makes sense", "d": "12/2014"}, {"body": "fwiw nt think end react nt designed work like nt think would want support long term", "d": "12/2014"}, {"body": "interesting pattern think might mistake add component api since would usable toplevel components though similar restriction though think still want remove api way seems like would nt bad idea something like past cached reference node nt go component see stashing component reference think ok way working around", "d": "12/2014"}, {"body": "warning agree", "d": "12/2014"}, {"body": "explicitly setting react ends setting instead cc syranide", "d": "12/2014"}, {"body": "fix default value identical attribute try review retest wednesday fixes quite lot edgecases would good merged", "d": "12/2014"}, {"body": "sorry example code render attribute set rendered dom expected render second time attribute rendered dom wanted remove tabindex attribute completely case set explicitly setting value works fine something assuming tabindex attribute set explicit value", "d": "12/2014"}, {"body": "mczepiel believe mixed order anyway handful dom attributes exhibit default behavior set default value attribute removed restore default behavior", "d": "12/2014"}, {"body": "oh wait bad mczepiel yeah second bug referring", "d": "12/2014"}, {"body": "closing really nt think going", "d": "12/2014"}, {"body": "come couple times even get wrong building things happening esprima actually entity parsing sees jsx string treats like beginning entity looks known html entities eg replacement unicode fallbacks case think seeing unteminated entity since characters treats known entity looks object map undefined stick reason think agree entity parsing esprima bad idea related xml behavior trying achieve probably actually remove since rarely desired behavior cc jeffmo want end closing tracking elsewhere leave open", "d": "12/2014"}, {"body": "yea sounds like fit bill process revamping bit official support", "d": "12/2014"}, {"body": "gaearon zpao thanks actual reason request currently using yahoo flux tooling prerender serverside clientside noticed pass context outer child nodes order child nodes request given storemixin ex seemed wasteful property automatically propagate thanks letting know", "d": "12/2014"}, {"body": "going close feel free reopen something", "d": "12/2014"}, {"body": "removed docs", "d": "12/2014"}, {"body": "closing reopen repro", "d": "12/2014"}, {"body": "tkafka able resolve issue trying package code separate bundles vendor app faced issue tried various combinations alone etc luck thanks", "d": "12/2014"}, {"body": "pgollakota yes worked ca nt verify syntax use ok might case multiple arguments look like call get last one", "d": "12/2014"}, {"body": "way improve error message output part jsx uses plain function understand support breaking change possible like know problem fix", "d": "12/2014"}, {"body": "agreed fixed warnings somewhere beginning assuming initial reactrender far know possible jsxify", "d": "12/2014"}, {"body": "tryspace sure otherwise invoke manually want avoid jsx", "d": "12/2014"}, {"body": "irvinebroque unfortunately possible us print better error able set breakpoint warning inspect call stack see part code causing problem", "d": "12/2014"}, {"body": "think fixed master thanks", "d": "12/2014"}, {"body": "hey guys actually updated today tested adding hack working fine looks like fixed somewhere", "d": "12/2014"}, {"body": "changes jsx nt see difference", "d": "12/2014"}, {"body": "jussikalliokoski agree similar idea", "d": "12/2014"}, {"body": "hi sorry comment old post question assertion mentioned function returns object render method valid class function created return object containing method actually basically current existing react classes meet criteria idea ps using return object containing function", "d": "12/2014"}, {"body": "still issue seeing reactwithaddonsminjs v", "d": "12/2014"}, {"body": "currently using workaround would prefer", "d": "12/2014"}, {"body": "duplicate nt bug label", "d": "12/2014"}, {"body": "yea close", "d": "12/2014"}, {"body": "make sense rename property something sound like function make sense drop scary part name dangerous something dangerous depending used dangerous matches dangerous even though used safely knives ovens motorcycle listen shameful distant past php developer php absolutely chockfull danger even dangerous past start fact outputs unescaped html default standardlooking database library encourages users naively interpolate strings queries hello bobby tables concatenating strings query dangerous escaped safely generated strings mean dangerous mean everyone writing code knows taught phpmysql printed book early high school know email header injection furious find code wrote following book left contact form open used sending spam arbitrary recipients think conflated making right thing easy read escape default amp welldesigned apis taking additional precaution warning users dangerous code aware debating latter thread think right thing think may exhibiting common programmer belief think dangerous idea since every developer know x z hacking languagelibrarysystem every developer working know x z assure assumption true astounding numbers people call developers others simply google solution paste code app tweaking works people see word danger code pasting something open xss hole react attitude setting less experienced us failure react team smart thing name deserve applause congrats writing ethical software", "d": "12/2014"}, {"body": "well said alanhogan completely agreed", "d": "12/2014"}, {"body": "looks like latest iteration issue", "d": "12/2014"}, {"body": "think much better still fan syntax though even reading syranide follow prefix warning flag regardless actual harm done developers wo nt think twice part leading underscores usually mean working private api might change without warning working inherently dangerous", "d": "12/2014"}, {"body": "tend agree rymohr since prop name dangerouslysetinnerhtml making api awkward probably overkill anyone forgets consider xss setting going dissuaded extra hand prevent passing object nt control without transforming first maybe good", "d": "12/2014"}, {"body": "appsforartists intended another warning meant signify value safe use html using inline intended intention makes lot sense burden function guarantee value safe use html", "d": "12/2014"}, {"body": "really dangerous wrong place write looks safe long whoever wrote key made sure html safe", "d": "12/2014"}, {"body": "spicyj guess still alludes expecting special wrapped value though", "d": "12/2014"}, {"body": "spent couple minutes understanding component work feel like notice somewhere maybe missed maybe obviously wrong try javascript var optimistic reactcreateclass render function return thispropsname loves react react idea sprinkle divs reactrender documentgetelementbyid mycontainer", "d": "12/2014"}, {"body": "gabssnake gotten jsx compile error error adjacent xjs elements must wrapped enclosing tag see error clear explanation", "d": "12/2014"}, {"body": "thank answer spicyj well meant notice react documentation yes console show error need wrap make sense first searched got", "d": "12/2014"}, {"body": "like use contexts flux stores almost current flux implementations use singleton stores really nice use browser pain use server isomorphic apps multiple requests processed concurrently fit well singletons fixed creating instances stores manually pass stores props cumbersome end components depend store props nt actually use store pass forward others ugly imo think context instance based flux stores would get best worlds talk deprecating contexts issues really going happen", "d": "12/2014"}, {"body": "contexts still experimental feature probably going deprecated yet documented may subject change without notice reason may want avoid using production applications api solidifies said flux store perfect example good use case contexts serverside see reason everyone ca nt share single flux store request store would also need userid fetching information apps running clientside would get error trying access data another user flux store may act cache may query database directly either way making store requests include user share single store across app current status contexts optimistically hopeful ready prime time yet", "d": "12/2014"}, {"body": "using build trunk getting warnings owner tree vs parent tree parent tree keys want ca nt access perhaps understanding context supposed work use case supported creates form instance passes child context variable method uses return child case intent declare access render field named props however console output live version says undefined", "d": "12/2014"}, {"body": "insin nt think parentbased context master yet impression warnings already added implementation yet", "d": "12/2014"}, {"body": "doh took initial implementation face value scanning updates issue dizzyface", "d": "12/2014"}, {"body": "really sure much implemented obviously parentbased context calculated passed warning would nt work since react usually keeps deprecated behavior one version reckon ownerbased context getting looks warning implemented might get parentbased context like assume", "d": "12/2014"}, {"body": "pretty sure currently bug warnings trunk risk running trunk cc zpao stable build", "d": "12/2014"}, {"body": "insin gaearon master currently warns contexts differ uses old notion context change use parent contexts two line change wanted maintain old behavior warnings period time ready pull trigger switch yes entirely possible still bug looking masking performcontextupdate", "d": "12/2014"}, {"body": "wanted maintain old behavior warnings period time ready pull trigger switch heart react", "d": "12/2014"}, {"body": "flow guess issue less important need immutablejs type checked flow leebyron someone could also make new mixin ala proptypes immutablejs", "d": "12/2014"}, {"body": "yeah practice using refer value prop usually similar state object single key proptypes use technique similar davidtheclark proposal object spread operator nt work maps kind immutable sugar objectassign usage within jsx nt think likely props move object map anytime soon certainly possible create custom version jsx transpiler generates maps instead objects mapping collections immutable otherwise possible react master branch time included toarray immutable collections possible collections immutableitemsmap item gt item toarray works fine iterables immutableitemsmap item gt item", "d": "12/2014"}, {"body": "leebyron nt think likely props move object map anytime soon certainly possible create custom version jsx transpiler generates maps instead objects understanding seems counterintuitive nt props objects intended rather static set keys used whereas maps dynamic lookups", "d": "12/2014"}, {"body": "syranide think would nice react team document good practices dealing contenteditables quite hard manage well think found way deal cody want manipulate contenteditable script without jumping cursors best update dom directly sanitize rich pasted content cursor jump touch nodes selection think works", "d": "12/2014"}, {"body": "wonder wether workaround access elements transitiongroup ref nt work", "d": "12/2014"}, {"body": "brought reactframecomponent trying use chrome extension page already used react solution following cc nelix", "d": "12/2014"}, {"body": "frameworks worked would prefer names like since render method called would even sementically sensible stuff awkward silly", "d": "12/2014"}, {"body": "definitely spent lot time considering personally favor however general consensus end day verbosity worth", "d": "12/2014"}, {"body": "word progress using react widget browser extension work third party sites able update important styles issue", "d": "12/2014"}, {"body": "nelix maybe use something like workaround", "d": "12/2014"}, {"body": "cody would probably easier manually manage style property node", "d": "12/2014"}, {"body": "issue ability set property checkbox within react found solution react version drawbacks except jqueryzepto used example nt case element always rerendered", "d": "12/2014"}, {"body": "drawback mutating dom manually kinda sucks also want make sure happens right place subsequent render", "d": "12/2014"}, {"body": "also want make sure happens right place subsequent render make sure understand happens virtual dom placed real dom rendering real dom changing input may take time situations browser reflow done times", "d": "12/2014"}, {"body": "well rerender get called also need make sure happens needed", "d": "12/2014"}, {"body": "vote reopen quite real example wwwjusticketsin try booking ticket credit card feel free use test card future expiry cvv opening factor auth popup onclick popup blocker triggered anyway", "d": "12/2014"}, {"body": "popup firefox different browsers different heuristics determining something popup blocked nt think ever definitive guide making work time days call event handler callstack closest get guarantee nothing else afaik", "d": "12/2014"}, {"body": "callback never called", "d": "12/2014"}, {"body": "syranide sounds good least warn onload nt work one use", "d": "12/2014"}, {"body": "bumped issue", "d": "12/2014"}, {"body": "chances fixed", "d": "12/2014"}, {"body": "able solve tweaking order state variables applied component state eg", "d": "12/2014"}, {"body": "running issue usually removed lsvx mentioned", "d": "12/2014"}, {"body": "played around khan academy timeouttransitiongroup still see animation glitches occur components get correctly removed least prevents app getting stuck broken state", "d": "12/2014"}, {"body": "similar issue happens changing cssclass property element transition", "d": "12/2014"}, {"body": "getting rid nice animation fix bug code", "d": "12/2014"}, {"body": "tweaked khan academy avoid another problem maybe also fixes problem give try version", "d": "12/2014"}, {"body": "breaks things", "d": "12/2014"}, {"body": "saw issue react addons form adds things table list last things animation add many things quickly sometimes list classes remaining surplus elements", "d": "12/2014"}, {"body": "fixed miscommunication addons docs page mistakenly grouped testutils wrong section", "d": "12/2014"}, {"body": "textpath", "d": "12/2014"}, {"body": "svg icon handling", "d": "12/2014"}, {"body": "svg addon currently need project knows need future comprehensive addon would helpful", "d": "12/2014"}, {"body": "addon planning make extensive use svg react complete svg addon projects like seems like great idea", "d": "12/2014"}, {"body": "nt virtual dom memoization sorts actual dom testing see actual performance improvement something tells cache top cache situation", "d": "12/2014"}, {"body": "nt done tests need memoize one possible uses thought element n\u00e9e descriptor reuse op like said interest particular use really came considering something said talk react allowing us leverage familiar cs toolkits seems pretty easy imagine contrived examples lot computation required build element tree means memoization would improve performance practice always able solve problems better way", "d": "12/2014"}, {"body": "returning null undefined nt appear work reacttransitiongroup", "d": "12/2014"}, {"body": "fyi looks like dataprefix works facebook picking open graph namespace declaration", "d": "12/2014"}, {"body": "putting back agenda", "d": "12/2014"}, {"body": "spicyj give example ca nt find documentation simulatenative set relatedtarget appropriately", "d": "12/2014"}, {"body": "ryanzec want something like simulates mouse moving one element another element anything really important", "d": "12/2014"}, {"body": "believe fine cc spicyj", "d": "12/2014"}, {"body": "nt think changed setstate sync normally async batched updates context including event handler", "d": "12/2014"}, {"body": "take look console seems logging right async always order", "d": "12/2014"}, {"body": "componentwillreceiveprops special sorry outer setstate like shows sync behavior", "d": "12/2014"}, {"body": "ah gotcha thanks clarifying", "d": "12/2014"}, {"body": "came across issue today well bit weird want set initial input values based thisstate seems particular reason provide onchange case going fixed mean anything improper", "d": "12/2014"}, {"body": "ktei might want consider using purpose", "d": "12/2014"}, {"body": "tirdadc thanks advice works", "d": "12/2014"}, {"body": "spicyj sebmarkbage still case wrapped", "d": "12/2014"}, {"body": "nothing changed call string text node still nt valid reactelement", "d": "12/2014"}, {"body": "element reactnode might possible isvalidnode thought proptype already", "d": "12/2014"}, {"body": "hey wanted mention encountered problem wrapper component looks like ca nt call method throws error ca nt either remove check since raises solution found sure helps wanted explain usecase think taking action", "d": "12/2014"}, {"body": "understanding whatever propschildren child array children like two children one child one invalid child agreed upon would removing span result foo longer valid child use reactchildrenmap either case without complaint encountering nonchild nothing else name docs bit vague considering specific implementation definition child ambiguous never used nothing indicating string number nt valid value assume eventually end issue google search debugging problem", "d": "12/2014"}, {"body": "think working least nt see anything crazy running", "d": "12/2014"}, {"body": "suggestions fix", "d": "12/2014"}, {"body": "currently mixin using listen click globally hand locally necessary react perhaps easier port react mixing components using function call works exactly expected much rather able use native react course", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "think brutally honest say really unlikely make configurable short term especially looking changing transform pipelines make consistent going close stop sending wrong message", "d": "12/2014"}, {"body": "plan fix", "d": "12/2014"}, {"body": "sebmarkbage spicyj still relevant refs changes", "d": "12/2014"}, {"body": "see change easy", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "like something like", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "considered modern browser tried willwhitney suggested nt seem work", "d": "12/2014"}, {"body": "input event limitations eg nt work backspace delete cut operation delete operation already resolved react nt available right get event consistently borrow react internal selection utility contenteditable somewhat useable course still normalize generated html problem begging third party library", "d": "12/2014"}, {"body": "checking say combination mutation observer covers modern browsers", "d": "12/2014"}, {"body": "point think safe say never", "d": "12/2014"}, {"body": "nt think workaround syranide outlined work necessary cases example nt believe properly upgraded mybutton custom element assume setting attribute element created placed document happy hear another way deal particular case", "d": "12/2014"}, {"body": "good find aaronius love official way element added dom", "d": "12/2014"}, {"body": "syranide thanks trick aaronius pointed would great something like componentwillbeattached node domnode method order perform action effective insertion dom", "d": "12/2014"}, {"body": "sadly method described nt work server side mentionned wo nt work either server side feasible create method would allow modify outputted html either server browser allow us simply solve legacycustom tagsattributes problem simple mixin", "d": "12/2014"}, {"body": "solution came accross allowed inject custom attributes needs piece code js var htmldomlegacypropertyconfig iscustomattribute function attributename return align bgcolor border indexof attributename properties align null bgcolor null border null domattributenames dompropertynames var react require react allow customlegacy attributes mail templates reactinjectiondompropertyinjectdompropertyconfig htmldomlegacypropertyconfig better way inject plan exposing reactinjection react main object", "d": "12/2014"}, {"body": "came across issue workaround mentioned syranide wo nt work server side current situation prevents generating email html legacy attributes like align bgcolor", "d": "12/2014"}, {"body": "server side use dirty string replacement based workaround use datafokfokfok prefix safe enough still react allow custom attributes polymer sebmarkbage", "d": "12/2014"}, {"body": "would need workaround client side another one server side neat bad easily configurable", "d": "12/2014"}, {"body": "want move model render attributes provide without whitelist concerns though bit dangerous might need change meaning signature attributes eg complex properties gets added html code might break versions prefer rich data types instead strings also issue patterns like used transfer many properties people specified invalid html properties used silently ignored would need provide nice upgrade path case could probably webcomponents html could commit always supporting string values try find upgrade path existing code", "d": "12/2014"}, {"body": "eg complex properties gets added html code might break versions nt true web anyway ie using react imo expected behavior web html adds attribute already use whether accident purpose something might break moreover like attributes get added really often also issue patterns like transferpropsto used transfer many properties people specified invalid html properties since deprecated would still issue", "d": "12/2014"}, {"body": "gaearon yes properties riskier less likely rely property unless patch prototypes attribute try model properties possible", "d": "12/2014"}, {"body": "nt follow last comment sebmarkbage talking complex attribute values custom elements ca nt simply represented strings clear would work thought communication custom element needs done dom strings rather rendering attributes without whitelist maybe adding separate object used explicitly declare list attributes treated simple strings way simple attributes supported without breaking code use case following issue seems like others", "d": "12/2014"}, {"body": "custom elements really support simple strings since nt rich information known html elements use rich data structures matrices svg attributes etc maybe solution simply use string provided also rich property support eg would accept string although security risk might allow nested property could work even might great security perspective elegant think find way support things primary concern upgrade path ideas could replace existing uses wrapper propagates whitelist eg", "d": "12/2014"}, {"body": "sebmarkbage definitely authority seems natural otherwise simply add dedicated prop setting attributesproperties raw values dom nodes ie also comes understanding whatever provide attr gets set probably nice idea applied custom elements making default implementation dom elements nonwhitelisted definitely nice either imho especially conflates two different behaviors without hint one get obviously custom elements could passthrough kind fits nicely fact uniquely named apart handful svg nodes conflict unless need namespace anyway anyway rambling", "d": "12/2014"}, {"body": "rationale unlikely dom property accepts string would different behavior attribute eg semantics except imperative quirks time mutated browsers bugs unintuitive behavior update time would want invoke setter also internal state component might update property leaving attribute point even added special behavior later behavior would unaffected except fix unexpected lifecycle quirks escape makes confusing differ properties also nt get bug fixes properties", "d": "12/2014"}, {"body": "think think custom tagsattributes future web components adoption think heavily used deep knowledge properties useful traditional html would different future html said use property exposed set attribute allowing inject rules like suggested seems universal solution also could allow put htmlsvg properties definition another repo could updated quicker pace would also decrease sources size use svg html none downside injection api would harder change since users rely", "d": "12/2014"}]