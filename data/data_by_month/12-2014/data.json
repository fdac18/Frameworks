[{"title": "releases page updated", "body": "releases page github properly updated version result marked latest", "num": "2790", "d": "12/2014"}, {"title": "component mixins componentwillunmount called reverse order componentdidmount", "body": "allow dom manipulation outside react reach dom manipulations done undone reverse order currently possible components mixins see footnote due order events fired current order componentcomponentdidmount componentcomponentwillunmount correct order componentcomponentdidmount componentcomponentwillunmount jsfiddle full lifecycle example footnote mixins component mixins manipulating dom", "num": "2789", "d": "12/2014"}, {"title": "ismounted enough know setstate", "body": "sake simplify workflow three stages component mounting may call setstate ismounted false component mounted may call setstate ismounted true component unmounted must call setstate ismounted false particular case worried trigger promise similar delayed action componentwillmount could called two circumstances synchronously call stack asynchronously later stack know mixing async sync signature bad idea sake argument asynchronous case promise could resolve time future order prevent calling setstate nt allowed add check promise resolves component still mounting state outside componentwillmount stack possible happen chance js run componentwillmount component mounted cycle happen error shown synchronous case enter block still mounting state means false state wo nt set depending answers async questions see two outcomes async return component mounted minor inconvenience solved coding know async async return mounted way know safe call incomplete user manually track state component unmounted thoughts invented issue none exists", "num": "2787", "d": "12/2014"}, {"title": "spread operator component working", "body": "using component build custom react component uses spread operator receiving following error navitem hope someone may able shed light sense component yet support spread operator running exec componentbuild exec task props thisprops parseerror unexpected token code triggers error running exec componentbuild exec task props thisprops parseerror unexpected token", "num": "2786", "d": "12/2014"}, {"title": "componentwillmount getdomnode nt document yet", "body": "currently hook would allow us set attributes node injected document unfortunate attributes wild take effect element injected document workaround forced replacing react injected nodes clones would great react could expose node inserted added another hook node provided", "num": "2784", "d": "12/2014"}, {"title": "reason jsx deviate html", "body": "understanding legitimate reason jsx prohibit javascript keywords reasons reason require camelcase attributes appears oversight part original authors far fixing goes concern expressed appears backwards compatibility far tell nt seem reason someone could nt submit pr fully backwards compatible today jsx allows coders designers use html naturally something could major boon project well within minutes opening issue two people antoinegrant akiran seems like something many people want included also whether allowed fixed indicates health project something obviously broken people asked jump unnatural hoops absolutely reason enough reason fix something react anyone continue recommend project group members project admins ask give issue honest thought least minutes hitting close button still decide close issue please let community know reasoning understand thank greg slepak", "num": "2782", "d": "12/2014"}, {"title": "reason prohibit use js keywords jsx", "body": "understanding based docs prohibited html attribute jsx see reason one example given guide using instead shows transformation results js easily fixed quoting unless missing something obvious please normal html back", "num": "2781", "d": "12/2014"}, {"title": "mixins add mixins", "body": "use reflux handy ways autotrack stores via mixin eg writing mixin handles saving multiple forms touch posts convenient mixin could add reflux mixins similar", "num": "2780", "d": "12/2014"}, {"title": "add javascript button jsx file", "body": "wrong post", "num": "2779", "d": "12/2014"}, {"title": "injecting html conversion results dangerously ie converted markdown", "body": "setup log entries written stored markdown plain text come time render browser run markdown html converter gets rendered browser react despite fact code never works html except last step edits occur plain text saving occurs plain text plain text propsstate etc way get data loaded using cumbersome attribute even though html humangenerated way nt dynamic traditional sense snapshot html representation text way html react generates simply snapshot representation component something available nt lie done scenario like way tell react additional safe processors available reactregistercontenttransformer markdown markdowntohtml var markdown reactcreateclass render function return markdown thispropstext whatever syntax would work makes explicit working humangenerated dynamic html content rigidly transformed syntacticallycorrectunlessthetransformerhasbugs output edit explain motivation questionrequest mechanism great definitely need usergenerated html strings however also way extend mechanism exists inside function transforming data nt html snapshotserialized html like react components additional api telling jsx transformer additional transformers available used exclusively render using special curly bracket syntax would close ideal people would still need use regular html string data people data nt html merely transiently transformable html form need say html dangerous dangerous transformer makes putting part jsx transformer bugs notwithstanding resulting html always well formed legal", "num": "2778", "d": "12/2014"}, {"title": "jsx attribute shorthand objects", "body": "ecvevalent feature sorry bad english", "num": "2777", "d": "12/2014"}, {"title": "provide nextstate argument componentwillreceiveprops", "body": "need call particular state attribute nt change would possible pass lifecycle function", "num": "2776", "d": "12/2014"}, {"title": "drop support", "body": "dropping support ie days statistics show take wolrdwide statistics", "num": "2775", "d": "12/2014"}, {"title": "returning null tag always rerendered", "body": "tl dr component returns rerenders noscript tag unmounted new one created shouldupdatereactcomponent gets returns false came internal components breaking recent update nt gone see widely broken might recent updates empty component triggering reliably reports similar weird problems could nt track use similar happening trigger triggering update mount phase works correctly triggering rerender broken one nt called yet actually call first still call also whole question trying unmount anything seems like nt cc sebmarkbage spicyj drop examplesbasicjsxharmony debug pausing caught exceptions added breakpoints reactemptycomponent make super obvious js use strict var child reactcreateclass componentdidmount thispropsonmount amp amp thispropsonmount render thispropsvisible return null var parent reactcreateclass update thisforceupdate render return reactrender documentgetelementbyid container", "num": "2770", "d": "12/2014"}, {"title": "checkboxes get sync state", "body": "filing issue per sebmarkbage see bin example syranide suggested adding calling adding around inside approach works seems unnecessary since bubble handling event", "num": "2766", "d": "12/2014"}, {"title": "defaultvalue empty", "body": "hello everybody okay quite strange problem seto value defaultvalue nothing appears however set value using value appears props coming data correctly idea react conde", "num": "2764", "d": "12/2014"}, {"title": "componentdidmount executes wrong order", "body": "order child child child parent technically though child mounted dom parent yet mounted expect see parent child child child understand docs correctly componentdidmount meant clientside state therefore use setup state child components would need access state ca nt cause nt initialized yet using state quotes since react component state rather something external websocket connection could course use lifecycle callbacks trigger init would execute server ever choose use feature", "num": "2763", "d": "12/2014"}, {"title": "support indeterminate state checkbox input", "body": "seems like indeterminate true set checkbox indeterminate state could supported thanks", "num": "2762", "d": "12/2014"}, {"title": "feature request strip datareactid return array string", "body": "right every element adds lot unnecessary space server generated pages know still needed initialize browser solution minimize output strip add array tag end tag see example except example server script js var html reactrendertostring reactcreateelement element data reacts filtered html htmlreplace datareactid g function full value reactspush value return filtered htmlreplace appreact appreact jsonstringify reacts ressend filtered except example client script js var elements documentgetelementsbytagname fast nt trigger reflow arrayprototypeslicecall elements foreach function element index elementsetattribute datareactid appreact index reactrender reactcreateelement element data document except example jsx think solution could done lot bettersafer somehow included core html tags saved characters saved characters even higher labels often gets wrapped", "num": "2761", "d": "12/2014"}, {"title": "custom element tags xml render", "body": "possible create custom element render method interpreted class render exactly xml format", "num": "2758", "d": "12/2014"}, {"title": "scryrenderedcomponentswithtype func finding child components", "body": "trying test existence component within parent pretty sure function scryrenderedcomponentswithtype created nt working take look component test line fails following test error easier read screen shot react function question reference scryrenderedcomponentswithtype thanks", "num": "2757", "d": "12/2014"}, {"title": "warn rendering html tag spelled uppercase letters", "body": "try running following code javascript var hello reactcreateclass render function return reactcreateelement br null reactrender documentbody get two tags inserted dom instead one made quick jsfiddle show running chrome relevant", "num": "2756", "d": "12/2014"}, {"title": "implement fast click remove delay mobile web browser", "body": "nice react feature improve responsiveness similar fastclick ft labs", "num": "2753", "d": "12/2014"}, {"title": "improve errorutils usage", "body": "right guard autobound method intention actually guard calls event handlers", "num": "2750", "d": "12/2014"}, {"title": "tests make consistent use spys mocks", "body": "sometimes within test file probably pattern annoying ugly better think probably make use feels bit easier work", "num": "2749", "d": "12/2014"}, {"title": "thissetstate callback function spews console log", "body": "added callback thissetstate console warnings like following example line thissetstate data callback example warning bind binding component method component react automatically highperformance way safely remove call see componentname", "num": "2747", "d": "12/2014"}, {"title": "support custom dom elements amp attributes", "body": "reason react restricts subset dom elements attributes unfortunately makes really hard use new html non standard features unless support added noticed could create custom elements via documented amp sure supported long term even supported still solve problem attributes ones listed docs seem ignored think would good idea allow defining custom virtual dom elements custom list attributes users could implement even support new element nt core yet finally support namespaces would super useful using react even environments amp hard either successfully used vtree vdom", "num": "2746", "d": "12/2014"}, {"title": "unmount react component name node", "body": "components done component mounted away say unmount fly top find node attached unmount via node like docs state right seems like unmount node could unmount component name would make life lot easier cases route change ant unmount specific components via name maybe missing something", "num": "2743", "d": "12/2014"}, {"title": "svg present initial render added", "body": "jsfiddle render text link another label says toggle click toggle changes state removes puts place click toggle resets state fails show chrome browser tested see dev tools nt display page copy code jsfiddle var svg reactcreateclass getinitialstate function return showlink true renderlink function thisstateshowlink return link return text toggle function thissetstate showlink thisstateshowlink render function return thisrenderlink toggle reactrender documentbody", "num": "2742", "d": "12/2014"}, {"title": "update release grunt task modern times", "body": "nt delete license patents bower repo better messages postprocess", "num": "2741", "d": "12/2014"}, {"title": "tutorial improvement nt use python http server use node", "body": "since tutorial describes things either browser node nt make sense advocate using instead makes sense tell people run use much simple command fire localhost instance port whatever directory run", "num": "2739", "d": "12/2014"}, {"title": "jsx expects templating eg flagged missing", "body": "different rules xml things like xmldesirable even obsolete syntax correct syntax respectively leads situations react forces people write obsolete template html rather parsing true modern html author strongly feels like bug template getting evaluated xml instead html parser whatever reason please upgrade jsx parser proper one real html used templates without library throwing terminal error", "num": "2738", "d": "12/2014"}, {"title": "replace invariant inline throw error production build", "body": "perhaps larger issues preventing considering production errors encountered user rarely access stack traces get single toplevel error location error thrown react today know error thrown would nice replaced instead could report vaguely meaningful error locations could least hint error react would also avoid invariant invocation overhead cc zpao sebmarkbage spicyj", "num": "2736", "d": "12/2014"}, {"title": "reactmountnodecache leaks objects unmount", "body": "scenario pretty easy reproduce suppose popup implementation function render popup view react element overlay div element function unmount view destroy overlay popup button element onclick set call destroy popup function user clicks button reactunmountcomponentatnode called react cleans everything reactmountnodecache empty react starts process blur event remember user clicked button close popup focused resurrects button element reactmountnodecache button dom element ends stuck nodecache forever worst part lot dom nodes sometimes hundreds subject gc anymore", "num": "2731", "d": "12/2014"}, {"title": "use input element nodewebkit", "body": "trying use react nodewebkit project problem element module exports component containing typeerror read property firstchild undefined error thrown using code cjsx reactdom react require react moduleexports reactcreateclass render test require jscomponentstest app reactcreateclass render reactrender documentbody piece code works fine replace elements write file", "num": "2730", "d": "12/2014"}, {"title": "csstransitiongroup transition add remove fast", "body": "reproduce add item opacity item transitioning ex opacity remove item next tick fast item opacity item disappears completely transition supposed add item opacity item transitioning ex opacity remove item item fading smoothly opacity", "num": "2729", "d": "12/2014"}, {"title": "order components arbitrary", "body": "ran issue recently attempting get particular child components noticed something interesting seems order thispropschildren populated based execution time component actual order positioned let give example html hello world current method using try grab element using expectation since array first element array would tag however since components inside added array regardless order declared understand react provides ways manipulating children via however real method differentiating certain children without cumbersome turns javascript var heading reactchildrenmap thispropschildren function child heading amp amp childdisplayname heading child maybe providing sort interface searchretrieve specific children using may beneficial something like similar requires callback entirely portable bit cumbersome pull put mixin utility object reuse without copypaste lines every component would like retrieve specific children apologize already resources within react maybe methodology follow instead searching able find anything", "num": "2728", "d": "12/2014"}, {"title": "distinguish component owner ownee", "body": "title self explanatory asking due removal thank", "num": "2725", "d": "12/2014"}, {"title": "trigger twice component show hide fast reactcsstransitiongroup leave enteractive class component", "body": "", "num": "2723", "d": "12/2014"}, {"title": "inconsistent order events ie", "body": "usually user enters deletes character input field event triggered event however internet explorer deleting character input triggered entering character see correct order events also ie could observe behavior test ie lt understand react aims abstracting event handling inconsistencies across different browsers seems like issue needs fixing jsfiddle demonstrating issue found realworld implementation suffering bug found try using backspace ie see easy workaround make implementation work atm", "num": "2722", "d": "12/2014"}, {"title": "inline style value nt add px", "body": "hello docs say number purpose", "num": "2721", "d": "12/2014"}, {"title": "usage owner", "body": "hi would like know owner property deprecated mean moved private scope future still accessible right thank", "num": "2719", "d": "12/2014"}, {"title": "still used", "body": "using outside jsx markup still using instead jsx still uses objectassign var bar uses reactspread var component becomes javascript still uses objectassign var objectassign bar uses reactspread var component reactcreateelement div reactspread props tested online", "num": "2714", "d": "12/2014"}, {"title": "collision two react copies running dom reactmount two valid unequal nodes", "body": "working chrome extension injects data current page chrome extensions concept content script access page dom page javascript variables means include react page dom may already react running page wo nt conflicts code however two copies react running ran datareactid obvious reasons solution modify extension version react change dompropertyidattributename avoid conflicts better way modifying react source", "num": "2713", "d": "12/2014"}, {"title": "strange behaviour underscores classes", "body": "using jsx compiler flag class like following gets transformed notice becomes far aware nt traceur also gives expected output might special treatment intended make properties less susceptible use outside collisions class hierarchies regardless would nice able turn wanted verified online compiler", "num": "2712", "d": "12/2014"}, {"title": "load initial data via ajax react", "body": "seen ajax data receive huge nt want maintain state load props render page", "num": "2711", "d": "12/2014"}, {"title": "custom classes reactcsstransitiongroup instead hard coding postfix enter", "body": "would like control classes transition automatically add could done break current api still accept pull requests file changed related", "num": "2709", "d": "12/2014"}, {"title": "context passing children thispropschildren", "body": "example b contexttypes value reactproptypesinteger render function return thiscontextvalue childcontexttypes value reactproptypesinteger getchildcontext return value render function return thispropschildren case app render function return case component b rendered inside app render method case nt see context value b rendered directly case access context value desired behaviour yes could explain simply omission", "num": "2706", "d": "12/2014"}, {"title": "onkeyup onkeydown propagating correctly certain keys chrome", "body": "noticed working chrome character keys nt seem trigger event handler keys eg enter space tab others nt seem happen firefox see though work expected jsbin code editor output frame", "num": "2703", "d": "12/2014"}, {"title": "work web component", "body": "want use jsx gotchas says react wo nt render attribute fill fixed workaround", "num": "2701", "d": "12/2014"}, {"title": "doc typo", "body": "jsx depth small typo render react component local variable starts uppercase letter probably want render react component use local variable starts uppercase letter", "num": "2698", "d": "12/2014"}, {"title": "allow symbols mixins", "body": "symbols useful making mixins guaranteed clash namespaces mixins however currently symbols mixins ignored uses loop find properties mixin ignores symbols propose getownpropertysymbols used well pick symbols defined mixin object", "num": "2696", "d": "12/2014"}, {"title": "accessing component prototype another component warns plain functions", "body": "really sure expected behaviour simply moving component warns plain functions calling components directly simplified test case javascript var emptycomponent reactcreateclass render return var testcase reactcreateclass emptycomponent emptycomponent getdefaultprops return usecomponentonobject false render var component reactrendertostring warns using plain functions rendering component directly reactrendertostring", "num": "2692", "d": "12/2014"}, {"title": "jsxtransform bug array destructuring", "body": "code lo gt hi lo hi hi lo generates code react lo gt hi var hi lo lo hi note absence braces following test generated code produces incorrect behaviour two statements one worked", "num": "2691", "d": "12/2014"}, {"title": "unmount mean garbage collect like persist state renderings seems possible", "body": "sometimes switch tabs within application whatnot using reactbootstrap components mount unmount wish might updated nt want lose overlooking feature lets", "num": "2688", "d": "12/2014"}, {"title": "adding better error message missing mixin", "body": "add informative message case try mixin either nil null basically submit patch maintainers think good idea", "num": "2687", "d": "12/2014"}, {"title": "error reporting production", "body": "using sentry log errors serverside rendering clientside unfortunately error message react throws production mode pretty useless wind lot unactionable reporting react two levels logged console errors ones thrown enableddisabled using env varcompile option would really great two different options could reap benefits disabling warnings eg runtime type checking without losing meaningful error messages example checksum violations thanks", "num": "2686", "d": "12/2014"}, {"title": "setstate componentwillupdate return proper error", "body": "returned error nothing else maybe adding link note would help", "num": "2682", "d": "12/2014"}, {"title": "strokeopacity missing ignore list automatic unit concatenation", "body": "strokeopacity value gets px suffix although unitless css property", "num": "2681", "d": "12/2014"}, {"title": "flexible class names csstransitiongroup", "body": "classes added animated element fixed based transitionname ex classes added provide flexibility naming classes ex fadein enter animation fadeout leave animation propose following api adds classes adds classes adds classes", "num": "2680", "d": "12/2014"}, {"title": "make lint block fail tests", "body": "blocked things current jshint incompatible template strings pr mostly fix bet things even think want switch using eslint however set problems still working support mostly blocked libraries point seems pr start using eslint rules disabled incompatibilities end really important enabling blocker x use eslint x enable appropriate rules add custom rules namely must use string literals argument", "num": "2678", "d": "12/2014"}, {"title": "normalize eventdatatransfer drag drop events", "body": "currently implementing draganddrop react application different kinds data dragged dropped means want check certain types eventdatatransfer object see drop enabled basically looks like works fine chrome less firefox turns firefox type datatransfertypes domstringlist method according latest drafts specification whatwg returning array like webkit correct obviously fix easy side check one available use one thought might useful fix react instead since least related event system could probably take stab wanted gauge interest perhaps datatransfer object deemed scope synthetic event handler", "num": "2676", "d": "12/2014"}, {"title": "rendertostring call life cycle methods", "body": "came across whilst investigating another unrelated issue page requesting route twice call rendertostring server react try call calling mountcomponent turn triggers life cycle method componentwillmount seems odd essentially nt mounted utilizing method far see generate markup thus broken life cycle symmetrical life cycle lead odd issues lingering objects eg component listens events outside life cycle componentwillmount get proper componentwillunmount call get chance clean references main question rendertostring method invoke life cycle methods never complete cycle understand could move bindings componentdidmount still seems wrong asymmetric life cycle perhaps could block call componentwillmount including nt run called server side thoughts anyway really enjoying react", "num": "2674", "d": "12/2014"}, {"title": "make controlled components uncontrolled", "body": "hi issue question guess found turboreact project instead binding json template sends html directly use react diff update body tag love idea going back root web use javascript progressive enhancement made think created todo app based todomvc guides named reactizetodo use reactizejs made ssorallen things struggle controlled components react makes fiddle alot creating react classes instead diff html page replacing html question controlled components made uncontrolled make acts pure html forms diffing libraries br morgan", "num": "2673", "d": "12/2014"}, {"title": "classname render correctly", "body": "display items render pagebypage pagination going pages onward images display distorted margins even class expected outcomes lifecycle require using bootstrap var displayitems thisstatelistmap function item return var listitemwrapper reactcreateclass render function return thispropsdatatitle", "num": "2670", "d": "12/2014"}, {"title": "changing shouldcomponentupdate specpolicy", "body": "wanted propose changing spec might termed rationale sometimes may know efficient skip reason component mixin may able define whether able skip updating based knowledge propsstatecontext might hold true combined components app thought changed return values must return false update skip return true behavior default update", "num": "2669", "d": "12/2014"}, {"title": "expose reactcompositecomponentinterface", "body": "realize start patching internals project pretty much risk case looking add plugin would act similar could validations builtin state change time application using fully immutable data store uses ton able isolate individual units root data prevent unnecessary rerenders know exactly path changed able get working pretty quickly unable internal could see exposing fully might bad idea wanted see discussion allowing consumers hook behavior define mergeable types outside core", "num": "2668", "d": "12/2014"}, {"title": "accept immutable iterables render", "body": "would nice immutable iterable types accepted place arrays one could say rather later ugly easy forget", "num": "2667", "d": "12/2014"}, {"title": "strange componentwillreceiveprops behaviour", "body": "screenshot thing propsselected undefined type console hand chrome console suggest eg type sel arrowright shows proper value condition fails thing blowing mind suggest something wrong getterssetters let know know teh root teh problem", "num": "2666", "d": "12/2014"}, {"title": "rendervalidatedcomponent method hides exceptions", "body": "hi stumbled across code block causes exceptions hidden good reason catch exceptions block tidy finally without rethrowing exception generally considered fairly bad practice without good reason certainly made debugging applications difficult us valid reason would least good idea debug mode would rethrow exception problem happy supply pull request direction correct approach thanks", "num": "2665", "d": "12/2014"}, {"title": "wire autobinding", "body": "keep getting error using react edge uncaught typeerror read property reactautobindmap undefined", "num": "2661", "d": "12/2014"}, {"title": "reacttestutilsmockcomponent pass props", "body": "using mocked components test props nt get passed mocked component get passed particular reason nt get passed well think would make asserting certain props get passed submodule easier looking mockcomponent function module mocktagname mocktagname mocktagname modulemocktagname div little digging found info given module props get passed properly asserted accessing mocked component using named ref thus assert however unless missing something access props submodule iterated always undefined", "num": "2660", "d": "12/2014"}, {"title": "componentdidupdate fires browser paint operation", "body": "sure nt design discovered today lifecycle methods executed react element renders ie executed point noted appear executed browser paint operation srcbrowserreactreconciletransactionjs introduced unexpected behavior scenario similar example given react class would expect following order operations component rerenders browser fires fires browser repaints dom fires however case actual behavior steps occur reverse order chrome record timeline events see following example looks like changes changes back paint ever occurs rendering efforts futile without manually deferring logic using test theory order would different fired paint operation made following changes react source load element browser using modified code timeline chrome follows order operations would expect provided lifecycle methods defined example class said ca nt say certain something corrected wanted submit issue hopefully get feedback react contributor sure domain knowledge explain existing flow exists indeed designed thanks", "num": "2659", "d": "12/2014"}, {"title": "react legacycustom elementsattributes", "body": "noticed legacy attributes like align cellpadding cellspacing nt rendered react least server side annoying since trying convert email templating system use react order able display frontend app fact unable complete task react led another question supposed make react webcomponents work together custom elementattributes names filtered react rendering engine", "num": "2657", "d": "12/2014"}, {"title": "split internal react properties user supplied props", "body": "internal react properties mean current api design forces users mix two single object unfortunate case user wants props name solves problem nicely takes separate arguments understand current api designed around single props object rest treated children believe making explicit distinction user supplied props used internal purposes lead less confusion", "num": "2656", "d": "12/2014"}, {"title": "reactdomtextcomponent needs getinstance", "body": "recent separation internal external instances reactdomtextcomponents got left certain tools namely reacttestutils expect everything rendered tree conforms certain api attempting sync last couple weeks react fb causing tests depend fail result cc spicyj sebmarkbage", "num": "2654", "d": "12/2014"}, {"title": "guide section lead error", "body": "click lead error", "num": "2648", "d": "12/2014"}, {"title": "react component guide", "body": "quick thought maybe guide best practices order guide developers creating better reusable components components include styles others nt include tests others nt built using browserify others use webpack others strictly clientside based think sort standard example think open source components style agnostic able used server well client would love thoughts nt mind contributing starting guide imagine world could pull carousel component navigation component footer component etc wire full blown web application", "num": "2644", "d": "12/2014"}, {"title": "input float number problem", "body": "case input dot case also strange last use string type var price solve problem", "num": "2643", "d": "12/2014"}, {"title": "make setstate return promise", "body": "setstate currently accepts optional second argument callback returns undefined results callback hell stateful component return promise would make much managable somewhat convention js world api symmetric method accepts callback returns promise returns promise accept callback case editable table user presses enter moved next row call setstate user last row like create new row call setstate focus new row call setstate currently way achieve nested callback hell", "num": "2642", "d": "12/2014"}, {"title": "emailing notes nt work", "body": "", "num": "2640", "d": "12/2014"}, {"title": "error tutorial source code", "body": "page error setinterval function bind function instance code fails run incorrect code componentdidmount function thisloadcommentsfromserver setinterval thisloadcommentsfromserver thispropspollinterval correct code componentdidmount function thisloadcommentsfromserver setinterval thisloadcommentsfromserverbind thispropspollinterval", "num": "2637", "d": "12/2014"}, {"title": "race condition thisstate vs thisprops component", "body": "still confusing app render method start render undefined value take qwest retrieve completed json data time setstate return json rerender paginationdemo component moving paginationdemo render method seem thisstate produced undefined value thisprops contain value guess bug var paginationdemo reactcreateclass getinitialstate function return total current visiblepages componentdidmount function thissetstate total thispropsdatasetlastpage current thispropsdatasetfirstpage visiblepages handlepagechanged function newpage thissetstate current newpage render function consolelog thisstatetotal consolelog thispropsdatasetlastpage loggers shown undefined undefined undefined undefined undefined var app reactcreateclass getinitialstate function return activenavigationurl navigationitems productitems loadjson function qwestget api async get url function jsondata thissetstate navigationitems jsondata productitems jsondatadata bind complete function jsondata consolelog complete thisstatenavigationitems return object bind componentdidmount function thisloadjson render function return", "num": "2634", "d": "12/2014"}, {"title": "features supported jsx transform", "body": "would nice document point new react users explains syntax features used jsx files best overview found far directory jstransform tests also contains flow stuff well", "num": "2632", "d": "12/2014"}, {"title": "virtual dom fomatting json", "body": "created make backend template engine mizchijsonicreact current problem result pure json although big reason heard react plan able make diff web worker case feature also needed serialize send plan formatting json string format", "num": "2631", "d": "12/2014"}, {"body": "curious hear use case nt usually find depending order mixin lifecycle hooks kind dom manipulation perform mixins", "d": "12/2014"}, {"body": "add confusion true allowed", "d": "12/2014"}, {"body": "original issue comment", "d": "12/2014"}, {"body": "nt know component enabled harmony jsx transform options", "d": "12/2014"}, {"body": "dan referring nodes implementation component used within browser nt turned harmony shortly report back thanks tip sent iphone dec dan abramov notifications githubcom wrote nt know component enabled harmony jsx transform options reply email directly view github", "d": "12/2014"}, {"body": "since using innerhtml building string go currently possible switched using createelement would think like keep implementation detail could conditionally switch eg might better use createelement modern firefox innerhtml think better solution make sure attribute support versatile", "d": "12/2014"}, {"body": "think missing point note maintainer user like jsx html trying make look almost like html worse imo semantics always different eg special merging behavior property btw object string like html whitespace handling quite different much practical looks exactly like html people expect behave like html nt nt attribute names lowercase would inconsistency declare component props dom props nt look weird way html lets use casing lowercase would like jsx behave like well props keys plain js objects js object keys casesensitive would work custom components also whether allowed fixed indicates health project something obviously broken people asked jump unnatural hoops absolutely reason call jumping unnatural hoops jsx html domain specific language describing dom trees happens lot common html practical upside making similar html lot downsides html less expressive", "d": "12/2014"}, {"body": "ok fair point regarding deviation required distinguish components html tags using capital first letter indicate component reason deviate beyond", "d": "12/2014"}, {"body": "attributes said lowercase attributes would weird js code model objects would probably camel case anyway get inconsistency like use camelcase custom component attributes get inconcistency casing custom dom component attributes reduce inconsistency react enforces certain rules make jsx like js less like html makes sense ca nt html semantics example ca nt selfclosing tags browser behavior tags like closing tag omitted would mean reimplementing whole html parser calling time diffing dom would inefficient hand try think jsx obeys rules js much html decisions taken react team begin make sense", "d": "12/2014"}, {"body": "maintainer really strong opinion one way another issue practically really simple use jsx ever chunks html needs converting run html jsx converter like", "d": "12/2014"}, {"body": "make changes jsx transformer keeping semantics js class jsx transformed classname js hyphenated attributes jsx transformed camel case attributes js angularjs similar thing angular templates use hyphenated attributes camelcased attributes available access angular directives", "d": "12/2014"}, {"body": "hyphenated attributes jsx transformed camel case attributes js would point lose greppability props grep versions time still get inconsistency html style style suggesting lose spread attributes longer leak hyphenatedattribute convention js objects well trading real consistency false feeling familiarity", "d": "12/2014"}, {"body": "apache flex actionscript background problem jsx since somewhat similar mon dec pm dan abramov notifications githubcom wrote hyphenated attributes jsx transformed camel case attributes js would point lose greppability props grep versions time still get inconsistency twowords html style twowords style suggesting lose spread attributes longer trading real consistency false feeling familiarity reply email directly view github", "d": "12/2014"}, {"body": "assure oversight talked ad nauseum giving given years design decision bug class jsx transformed classname js actually initially takes away real uses cases want prop remember composite components vital part react dom components example transforming terrible idea super surprising entirely outside programmer control inside component access specified goes hyphenated camelcase idea specifying values one way reading another keeping jsx transform simple possible real goal going support something couple people opinionated happy unpopular people ultimately think right hand confident wo nt listen people saying made mistakes case spent lot time thinking going change", "d": "12/2014"}, {"body": "gaearon wrote use camelcase custom component attributes get inconcistency casing custom dom component attributes understanding correctly good thing reason helps make clear distinction react components dom nodes zpao wrote giving given years nt say nt would lie apparently nt given even one minute worth thought demonstrated complete total misunderstanding example gave though nt even read takes away real uses cases want class prop remember composite components vital part react dom components example transforming reactcreateelement teacher classname physics terrible idea yeah good thing nobody suggesting sorry clear react run folks short attention spans poor design decision making faculties hoping like aspects project like much simplicity angularjs everything simple compared angularjs", "d": "12/2014"}, {"body": "calling somebody liar really nt get far fwiw talked exactly topic many times last years truth yeah good thing nobody suggesting suggested demonstrated complete total misunderstanding example gave though nt even read example seen far examples go really nt give much go said want use instead explained nt reason provided applies broadly across properties going continue hostile insulting team helpful people work going ask remove involvement project", "d": "12/2014"}, {"body": "suggested comment mistake nt see nt suggesting example seen example saying instead would simple use however saw new comment posted hours ago thanks clears things actually better reasons ones saw going continue hostile insulting team helpful people work going ask remove involvement project brought hostility upon responded polite patient attempts discourse maybe next time try actually engage conversation folks understand pov instead closing issues without serious honest engagement", "d": "12/2014"}, {"body": "helps make clear distinction react components dom nodes would want distinction find often making tiny wrappers around dom components proxy props custom logic convention would choose prop custom wraps suggest try actually use react real project couple months make dozens components help adjust perspective vs initial impressions maybe see value consistency current design sad assume people disagree ignorant stubborn liars", "d": "12/2014"}, {"body": "convention would choose tabindex prop custom flexibletextarea wraps textarea one works sad assume people disagree ignorant stubborn liars sad assume case", "d": "12/2014"}, {"body": "would help clarified advocating hyphenated attributes htmlstyle attributes", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "times mistakenly use class jsx wonder css styles working", "d": "12/2014"}, {"body": "prohibited use right nt support dom components already deviating pure html xml camelcase attributes enforcements overall using js api attributes fits already years deep commitment backing sorry", "d": "12/2014"}, {"body": "zpao wrote prohibited use right nt support dom components sounds like selfcontradiction use nt support already deviating pure html xml camelcase attributes enforcements overall using js api attributes fits takes less one minute fix search replace", "d": "12/2014"}, {"body": "sounds like selfcontradiction use nt support use prop called class custom components feel like react dom components use classname dom property named takes less one minute fix would practical benefit breaking name attributes dom api properties convention", "d": "12/2014"}, {"body": "make easier understand parse html parser hard lots edge cases xmlish much easier parse stricter rules part trying make clear still becomes pure js minimal processing search replace nt work browser afaik part dom api", "d": "12/2014"}, {"body": "make easier understand parse html parser hard lots edge cases since familiar internals react take word assume thirdparty parser used solve problem nt work browser afaik part dom api ah nt understand using dom classname attribute internals thing would know would nt misunderstanding akiran suggestion makes sense response likewise also makes sense downturn result gap perspective new user vs knees deep implementation made worse seeming lack desireeffort close gap reasons making jsx similar html challenging obvious explanations docs nt clear comment said nt work browser afaik clicked feedback sorry harsh words thread result misunderstanding", "d": "12/2014"}, {"body": "ah nt understand using dom classname attribute internals thing would know would nt react uses dom property names instead html attribute names many instances match semantics closely example take html string like nt make sense jsx want react able diff individual styles course could also say jsx needs css parser well aside providing benefit would also complicated developer life generating strings harder settings properties objects need objectish jsx would allow something like value already kind api called dom dom object string indeed keys camel cased hyphenated need fix dom well findandreplace think dom api allows settingreading styles via hyphenated api sure consistently supported across browsers true node hyphenated properties see jsx cases much closer dom api html generated js server template language needs jsfriendly would awkward use within js reason dom api nt match html either dom specification also uses tabindex instead html tabindex properties jsx use dom property name convention coming", "d": "12/2014"}, {"body": "thanks detailed explainer gaearon feel like would valuable include something explicit like docs maybe whatever reason nt click first time one main challenges seems ability diff changes say want react able diff individual styles hand least far html attributes go still seems doable thinking actually nt understand entirely response zpao gave akiran actually initially takes away real uses cases want class prop remember composite components vital part react dom components example transforming reactcreateelement teacher classname physics terrible idea probably speaking seems misunderstanding suggestion would transformed components used indicate somewhere along line dealing html dom nodes react components react components nt need far understand case would simply accessed using jsx create html components still would nt use pass internally react would map dom property note longer advocating done since get feeling may asking lot point curious", "d": "12/2014"}, {"body": "see latter point agree doable although would breaking use dom property names convention mentioned zpao allencompassing eg corresponding jsx rule thumb team using quite react tries stress js templating language appealing guts dom api reference point makes sense imo see also context around decision", "d": "12/2014"}, {"body": "wow still lol iirc thing killed restructuring pulling key nt work conflicts upcoming keyword end discussion right", "d": "12/2014"}, {"body": "like", "d": "12/2014"}, {"body": "good example petehunt helpful", "d": "12/2014"}, {"body": "looks like works", "d": "12/2014"}, {"body": "hrrmmmm ok must reflux problem mixin definitely nt work used within mixin investigate sorry false alarm", "d": "12/2014"}, {"body": "would work mixin defines nonlifecycle method mixins use mixin component uses way nonlifecycle method gets defined twice causes error actually problem obvious solution please let know", "d": "12/2014"}, {"body": "fix problem", "d": "12/2014"}, {"body": "totally unrelated reactjsx please use resources questions stack overflow example", "d": "12/2014"}, {"body": "syntax troubles use side note nt like idea react handling things like react tries dissuade using plain html", "d": "12/2014"}, {"body": "looks like thing nt registered react anywhere means get duplicated million components good solution api lie still right still saying jsx nt guarantee never work html transformation html data programmatically done none danger comes usercontent ontheflyfromstring html dissuading using plain html jsx already nt html fact still thinking one major pitfalls people keep trying selectmanipulate kindof xml reactspecific behaviour tag even look like html tags pretty much nothing real html ends generating html snapshot way end browser needs actually load dom", "d": "12/2014"}, {"body": "yes said sentence nt clear duplication use module javascript var markdown require utilsmarkdown render return context javascript var context md require utilsmarkdown reactwithcontext context function reactrender mountnode reactcreateclass contexttypes md reactproptypesfunc render return andor mixin javascript var markdownmixin markdownhtml string return dangerouslysetinnerhtml html markdown string reactcreateclass mixins markdownmixin render return", "d": "12/2014"}, {"body": "ah yeah mixin probably thing looking thanks", "d": "12/2014"}, {"body": "still dangerous unless markdown parser somehow immune xss nt count imo react right thing forcing explicitly admit parts secure however", "d": "12/2014"}, {"body": "course equally true jsx invented csp security custom transformer would necessarily rest authors transformers massively used markdown transformer like packages could reasonably expected basics place csp adding bits miss sitebysite basis", "d": "12/2014"}, {"body": "could parse traverse nodes call createelement strip anthing feel dangerous", "d": "12/2014"}, {"body": "think using incorrectly recommendation tells write parser output definitely wo nt trust passes comprehensive suite tests requires spend lots time developing new piece software instead tying already existing software designed purpose react mixins work still feel little hacky reactregistertransformer would much awesome required thought filed issue", "d": "12/2014"}, {"body": "argue one would consider meaningless statements sure marginally terse syntax worth possible ambiguity also jstransform already allow object initializer shorthand outside jsx attributes", "d": "12/2014"}, {"body": "touchesir mistakes like described could done spread objects included core", "d": "12/2014"}, {"body": "attempting use results notable error compilation step specific example demonstrating said mistakes spread attributes", "d": "12/2014"}, {"body": "touchesir like", "d": "12/2014"}, {"body": "vanesyan possible option compiles nt really get spread works props toplevel nt using plain object job ref", "d": "12/2014"}, {"body": "bloodyowl good example would agree rreverser reasoning linked issue explicit destructuring less ambiguous captures process effectively suppose rather subjective matter", "d": "12/2014"}, {"body": "feel like said good reason ca nt find link regardless discussion extending semantics jsx belongs issue bloodyowl linked sebmarkbage perhaps remember talked weigh", "d": "12/2014"}, {"body": "props state ca nt change simultaneously parent changes state leading prop change component nt chance update state fact method best bet fired props state changed", "d": "12/2014"}, {"body": "ok thanks", "d": "12/2014"}, {"body": "also clickycom", "d": "12/2014"}, {"body": "would love long facebook supports", "d": "12/2014"}, {"body": "unmounting comparing old new actually whereas returns false", "d": "12/2014"}, {"body": "throwing three componentdidmount calls get queued order rendered child null child child null batching nt happen initial render something meaning make forceupdate happens synchronously causes unmountremount child components old enqueued child null didmount callback runs throws component nt mounted", "d": "12/2014"}, {"body": "two issues fix", "d": "12/2014"}, {"body": "first one new regression right", "d": "12/2014"}, {"body": "sure think added test recently ensure text components nt get remounted update add one empty components", "d": "12/2014"}, {"body": "initial render nt asynchronous change think need change api pass instance callback instead synchronously returning able queue new updates initial render though guaranteed happen queue processed", "d": "12/2014"}, {"body": "right already new mounts child components within larger update", "d": "12/2014"}, {"body": "clarify necessary anyway mentioned tweet unless mistaken correctable corrected react works onclick well nt hard love take look still way behind rest prs right ps thanks opening issue", "d": "12/2014"}, {"body": "code nt run bit tricky actually see problem gut expecting work across multiple renders used initial render rerendering different props state update actual dom node take look docs controlled components", "d": "12/2014"}, {"body": "sorry explain works structure modal component receives props value state component appnotas click link collapse run function appnotas makes change state rightly props modal bringing object model props modal appears anywhere render however form fields input example using defaultvalue appear data use value appears set value defaultvalue appears one thing appear defaultvalue value props", "d": "12/2014"}, {"body": "sounds like props empty first render since look initial render empty first render never populate form really think want make use controlled inputs meant paste link last time", "d": "12/2014"}, {"body": "yes initially props dados empty form appear click open modal props updated receives due value big problem props display anywhere appears normal even set input value ok appears value nt show value", "d": "12/2014"}, {"body": "right big problem props important understand fact props change reason problem yes first code wrote update value props updated makes input controlled see docs second line code update looked first render first render see empty set value render props updated even look misunderstanding happening bug react going close", "d": "12/2014"}, {"body": "omg sorry paul solution using ref input componentdidupdate value input thank much", "d": "12/2014"}, {"body": "executes direction expect parent first oh well wanted run server pardon", "d": "12/2014"}, {"body": "lifecycle method invoked client immediately initial rendering occurs matter order method nt called rendering", "d": "12/2014"}, {"body": "might want use componentwillmount", "d": "12/2014"}, {"body": "lifecycle method invoked client immediately initial rendering occurs docs say exactly want would need websocket connection server always starts disconnected render wait connect whether starts rendering issue nevertheless bug opinion workarounds exist though big priority", "d": "12/2014"}, {"body": "oh sorry guess read issue quickly hmm component really nt rendered point life cycle would biggest issue react ever imagine", "d": "12/2014"}, {"body": "nevertheless bug opinion nt think bug time fires expect component dom ready react would nt touch next executed parentfirst thing find node child nodes mounted moment makes useless majority use cases eg counting attaching thirdparty nonreact plugins etc", "d": "12/2014"}, {"body": "talking order reread docs never say whether dom element actually document point exist guess undefined makes order callbacks pretty much undefined well technically defined dom element created added document order wrong since child dom parent tree child exist ca nt document seems defined way since otherwise could reliably calculate dimensions anything else actually requires dom element document rather existing still bug opinion", "d": "12/2014"}, {"body": "javascript var documentcreateelement hello world var div documentcreateelement div divappend documentbodyappend div entered document first edit construct order react would", "d": "12/2014"}, {"body": "yeah good point think docs clarified waiting expert opinion", "d": "12/2014"}, {"body": "bug maybe confusing docs creation order dom elements nothing document since guarantee anyway since root may document thheller particular use case topdown order technically lifecycle methods guarantee particular component mounted nt make promises regard children relying order usually indication breaking encapsulation boundaries components example component renders another component component may choose delay rendering children loading data even passed", "d": "12/2014"}, {"body": "technically lifecycle methods guarantee particular component mounted nt make promises regard children relying order usually indication breaking encapsulation boundaries components right thinking relying dom components ie ref node time happens", "d": "12/2014"}, {"body": "javascript var state function stateinit id state id dummy something complex happening function statesubscribe id channel callback state id null consolelog state nt exist yet id var inner reactcreateclass componentdidmount function consolelog inner mount thisprops statesubscribe thispropscon thispropschannel function data render function return hello world var outer reactcreateclass componentdidmount function consolelog outer mount thisprops stateinit thispropscon render function return reactdomdiv null inner con thispropsid channel inner con thispropsid channel inner con thispropsid channel reactrender documentbody note actual code clojurescript om minimal example wanted websocket connection may actually already exist without component persist even component goes away nt exist must initialized though plenty ways organize first using nt work well given misunderstanding part mounted means use another method ps actually figure whether document quite simply walk till either end false true", "d": "12/2014"}, {"body": "thheller yea use case seems mutative nature might able use instead thinking relying dom components ie ref node time componentdidmount happens technically breaking encapsulation dom parent allowed defer rendering children direction going first class refs allow respond child mount event regardless happens later actually figure whether document quite simply walk elparentelement till either end null false documentbody true yes ca nt reliably fast wait become true eg mutationobservers crossbrowser could throw unmounted would hurt use cases", "d": "12/2014"}, {"body": "might able use componentwillmount instead think op original point runs server well wants behavior client guess need put behind flag similar react technically breaking encapsulation dom parent allowed defer rendering children interesting related layout proposals", "d": "12/2014"}, {"body": "chose another implementation still feels like bug nonetheless familiar react internals nt batch updates transaction checking whether root element need test rest document negligible cost nt really need know guess order sure nt affected", "d": "12/2014"}, {"body": "similar question", "d": "12/2014"}, {"body": "actually attribute html", "d": "12/2014"}, {"body": "ahh see shall use componentdidmount method thanks update", "d": "12/2014"}, {"body": "even better solution use string instead array split string delimiter lose extra characters tag", "d": "12/2014"}, {"body": "looks like something gzip handle quite nicely transport level", "d": "12/2014"}, {"body": "use get even better compression far know browsers stream based rendering approach probably get faster rendered example js var http require res reswritehead contenttype texthtml reswrite testthis visible first simulate bad connection settimeout function reswrite visible timeout resend listen", "d": "12/2014"}, {"body": "would imagine within", "d": "12/2014"}, {"body": "going point since wrote long reply sure tracked elsewhere well", "d": "12/2014"}, {"body": "bmcmahen looking elements created chrome dev tools see single screen shot br seeing", "d": "12/2014"}, {"body": "confirm chrome firefox jsbin", "d": "12/2014"}, {"body": "chrome got ff", "d": "12/2014"}, {"body": "well since br supported tag test already", "d": "12/2014"}, {"body": "perhaps react generates browser interprets two tags interesting", "d": "12/2014"}, {"body": "try get different results lowercase", "d": "12/2014"}, {"body": "interestingly nt happen type lowercase edit beat", "d": "12/2014"}, {"body": "relevant check source code seems like instead checked wonder react places though", "d": "12/2014"}, {"body": "gaearon right use jsx something like may implied convention", "d": "12/2014"}, {"body": "ah yeah even bug wo nt matter capitalized tags disallowed", "d": "12/2014"}, {"body": "addition convention tag names beginning capital letter userland components", "d": "12/2014"}, {"body": "dashed jsx tags start lowercase letter contain dash treated html", "d": "12/2014"}, {"body": "convention extend folks exclusively using actually nt know bc use jsx sweatsmile", "d": "12/2014"}, {"body": "well considering jsx gets transformed js would think rules", "d": "12/2014"}, {"body": "whoops sorry read idea using capital letters something avoided would disallowed actually using within context parsing limited number tags contenteditable container parser records tagname natively capital letters passed works perfectly except br case anyway use lowercase tags thanks", "d": "12/2014"}, {"body": "thanks reporting either work seamlessly uppercase tags warn use", "d": "12/2014"}, {"body": "warning probably better guys established convention anyways probably also note convention clearly", "d": "12/2014"}, {"body": "load regular fastclick fix browser delay dom event level react event system sits top right", "d": "12/2014"}, {"body": "bad public setstate uses internally ideally pass context way enqueue updates", "d": "12/2014"}, {"body": "hard coded list still list transform deprecation purposes noted pass anything work may special cases custom elements nt accounted attributes work plan let anything eventually need make transfer consumption better otherwise super easy put way many props dom elements still need whitelist attributes special requirements make sure mutate nodes correctly probably use many though lastly namespaced attributes bit needs done first adding support know use deciding write jsx jsx nt support even transform ca nt best path probably make way unless expose way register properties whitelist everything possible xul svg mechanism register properties react works internally publicly exposed clear handle collisions talk long time ago exposing way register elements get rid whitelist nt make sense moving forward registering attributes may thing though need figure details support web components definitely progress", "d": "12/2014"}, {"body": "zpao thanks comment think could maybe provide value boxing function indicate given prop indeed attribute end managed find workaround generating custom element constructors wrapped react component see enables define custom elements providing field anotations although afraid way throwing optimizations away", "d": "12/2014"}, {"body": "inside nt ca nt unmount happens react stays react let state changes drive dom js var example reactcreateclass getinitialstate function return showsomecomponent true render function return handletoggleclick function thissetstate showsomecomponent thisstateshowsomecomponent toplevel methods used toplevel nodes entry points react toplevel node managed react every change caused component state change expressed declaratively parent component state change propagate prop change children", "d": "12/2014"}, {"body": "hopefully gaearon answer helped explained probably better would explicit unmounting done roots react works clear closing let use know good luck", "d": "12/2014"}, {"body": "ideal work around issue substituting code get correct behavior needed get link clickable give little hand mouse pointer", "d": "12/2014"}, {"body": "make link tutorial prominent already implementations node python ruby companion repo", "d": "12/2014"}, {"body": "mean tutorial tells use python simplehttpserver get ajaxy territory despite fact point established browser node never mentioned going need python anything might well stick node tell use nt need download install python say windows linuxunix nt come python part default distribution run localhost server dir rather making prominent makes far sense remove need python tutorial entirely", "d": "12/2014"}, {"body": "hand getting requires installing another tool internet whereas python installed builtin works", "d": "12/2014"}, {"body": "right point assume people python installed know already node installed explicitly told use get react getting started section every os comes python nodejs preinstalled least getting started know nodejs npm", "d": "12/2014"}, {"body": "tutorial nt really assume went getting started nt need npm tutorial starter kit let get pedantic let argue node vs python know needs better think place offers different servers run whatever language want ultimately best thing", "d": "12/2014"}, {"body": "nt argument though windows user trying use react first time life finally gave polymer breaks way much firefox started getting started running tutorials feels like extremely logical first time user path scenario suddenly told use python felt weird would python already node thing let know although arguments given change feel like based assumptions users counterpoint", "d": "12/2014"}, {"body": "jsx html parser design compilation output js object tree ambiguity js tree", "d": "12/2014"}, {"body": "jsx html distinct set parsing rules close xml makes rules explicit avoids special cases link tags closed wo nt changing", "d": "12/2014"}, {"body": "see also", "d": "12/2014"}, {"body": "think something like better solution eg surfacing error code something production maybe hash original message reason nt think matters checks often end common validation helpers particularly common warnings also invariants nt take levels stack trace account structuring internal code even moved one level next level still problematic besides catch complete stack traces production browsers part error message logging solution give much better error messages anyway since track source code easier experimented converting using transpiler shown performance boost also safely strip error message production builds especially nonjit environments since lot code currently deopts unrelated problem stack traces though", "d": "12/2014"}, {"body": "nt figured yet defer unmount fine resolved one way another", "d": "12/2014"}, {"body": "syranide simply blur button closing popup issue though fixed react nt process events elements unmounted left alone leaving alive caches", "d": "12/2014"}, {"body": "think issue related", "d": "12/2014"}, {"body": "nt know relevant often seen error happening load react twice example may module depends different version react thus two reacts wo nt play nice together", "d": "12/2014"}, {"body": "right error disappears require react file run using tag index html pass object directly modules like", "d": "12/2014"}, {"body": "build system use must issue bundling react twice reason also check dependencies copy react", "d": "12/2014"}, {"body": "related", "d": "12/2014"}, {"body": "build systems copies problem caused nodewebkit script file loaded directly via tag run browser context loaded via run node context two different react objects created contexts need replace require jsappjs", "d": "12/2014"}, {"body": "woah interesting thanks sharing", "d": "12/2014"}, {"body": "kinda crazy openmouth anything close", "d": "12/2014"}, {"body": "maybe dependencies context introduced works fine situation", "d": "12/2014"}, {"body": "react context meant nt changed many things could make minimal sample app something familiar nodewebkit works pretty hard actually understand problem might going", "d": "12/2014"}, {"body": "created repo clone use run nodewebkit nodewebkit main executable contexts see wrote requiring react required module running node context nt global variable copy browser context root variable node", "d": "12/2014"}, {"body": "show css", "d": "12/2014"}, {"body": "always present others added csstransitiongroup", "d": "12/2014"}, {"body": "defined issues declaring instead example assume defining since ca nt find code", "d": "12/2014"}, {"body": "transition defined defined need define twice issues declaring leaveactive instead leave example assume defining since ca nt find code issues", "d": "12/2014"}, {"body": "defined need define twice nt understand element issues apple changed something coreanimation yosemite ios animation nt get triggered defined ruleset", "d": "12/2014"}, {"body": "nt understand element forget nt come play apple changed something coreanimation yosemite ios animation nt get triggered transition defined active ruleset using chrome", "d": "12/2014"}, {"body": "bitplanets forget nt come play show full css maybe make jsbin minimal repro nt see defined element nt provide styles would also help showed relevant jsx nt understand used using chrome iirc chrome also uses ca hood os x may wrong though", "d": "12/2014"}, {"body": "show full css maybe make jsbin minimal repro nt see transition defined element nt provide styles would also help showed relevant jsx nt understand used previous commend said always present others added csstransitiongroup also nt care part making confusion somehow expect existsbe included already said included included css html panel leaving looks like clearer", "d": "12/2014"}, {"body": "sure seeing write hello world element within maincomponent seeing otherwise please post simple repro case take look", "d": "12/2014"}, {"body": "hahahaha spicyj really long day apologize idiot changed use", "d": "12/2014"}, {"body": "use case normally pass data component props", "d": "12/2014"}, {"body": "instance imagine got mixin needs add listeners applied top level component", "d": "12/2014"}, {"body": "think react way solving prop component mixin set top level component explicitly concept top level flawed may top level react component ed another component would count top level", "d": "12/2014"}, {"body": "yes counts top level top level mean component instance use aka owner", "d": "12/2014"}, {"body": "ah think see trying mixin want listen events outermost component mixin correct think use supported documented yet weird edge cases lot libraries already relying polished see would look like js var backbonemixin childcontexttypes pass hasparentbackbonemixin proptypesboolisrequired contexttypes may may passed us hasparentbackbonemixin proptypesbool getchildcontext function return hasparentbackbonemixin true componentdidmount function thiscontexthasparentbackbonemixin add listeners componentwillunmount function thiscontexthasparentbackbonemixin remove listeners note currently uses owner relationship use parentchild relationship whether fits use case", "d": "12/2014"}, {"body": "thank example going try", "d": "12/2014"}, {"body": "worked well struggling warning stating parent owner context keys differ aware differ problem afraid wo nt possible future", "d": "12/2014"}, {"body": "think warning meant prepare changes ok context parent future think fine", "d": "12/2014"}, {"body": "idea changes need made avoid warning ready incoming versions explicitly use case contexts wo nt solution use case", "d": "12/2014"}, {"body": "plan reactwithcontext go away", "d": "12/2014"}, {"body": "nt think avoid warning context values differ use case seems like next version behavior aligned want", "d": "12/2014"}, {"body": "imo ignore warning fine next version however keep getting warning", "d": "12/2014"}, {"body": "thank feedback keep eye open check changes made api gets mature let know rising concern going close issue thank", "d": "12/2014"}, {"body": "yeah problem lot people counting maturing", "d": "12/2014"}, {"body": "cc salier", "d": "12/2014"}, {"body": "cc joshduck interesting fires nt fire typing call incorrect counts path least resistance might stop using native event ie instead use fallback using firefox already ignoring native ie event similar inconsistencies perhaps need investigate bit", "d": "12/2014"}, {"body": "lack event keypress sounds familiar look currently standardizing api hopefully resolve ambiguity ie update implementation short term ignoring event sounds ok", "d": "12/2014"}, {"body": "bit weird guess purpose mdn length unit optional react code px added see weird string gets expanded discussion", "d": "12/2014"}, {"body": "thx answer think close answer", "d": "12/2014"}, {"body": "maybe updating docs", "d": "12/2014"}, {"body": "access removed already gone master", "d": "12/2014"}, {"body": "wondering thought intentional never understood reasoning", "d": "12/2014"}, {"body": "indeed intentional first syntax nt really supported yet nt related react chose avoid react runtime dependency ifwhen want promote syntax broadly sure note need polyfill docs", "d": "12/2014"}, {"body": "point better way nt think really considered case known issue using multiple copies react page cause problems typical answer nt nt really apply think couple longerterm possibilities first remove use attribute entirely stick ids page generate random prefix attribute values startup essentially way runtime would mostly isolated cc sebmarkbage syranide talked things", "d": "12/2014"}, {"body": "would nice get rid possible seen newcomers turned away aesthetic reasons really important", "d": "12/2014"}, {"body": "gaearon pr exactly somewhat thrasing devs prefer know full story many different ways done may faster others also react currently irrelevant bugs pr trips bad definitely see much possible seemingly even preferable performance perspective", "d": "12/2014"}, {"body": "also mention simple workaround involve building version exec unless using prebuilt package", "d": "12/2014"}, {"body": "thanks responses amp info closing nothing else pending", "d": "12/2014"}, {"body": "looking closer realize actually pretty nice feature transpiler compiles effectively enforces privacy underscoreprefixed properties class neat though still suggest making optin b work references", "d": "12/2014"}, {"body": "totally agree feature neat also unexpected side effect picking transforms jstransform transforms coming internal codebase wanted enforce underscore means private nt even try convention stands ca nt easily turn going close would interested bring jstransform repo though people actually maintaining might thoughts", "d": "12/2014"}, {"body": "tl dr top file suppress", "d": "12/2014"}, {"body": "please post question another venue mailing list stack overflow try keep github bugs issues react", "d": "12/2014"}, {"body": "react context propagated owner tree nt receives externally props afaik changed context propagated parent tree", "d": "12/2014"}, {"body": "thank andrey would explain problem good changed", "d": "12/2014"}, {"body": "lot discussion", "d": "12/2014"}, {"body": "seems work fine character keys specific versionenvironment", "d": "12/2014"}, {"body": "chrome windows seems link jsbin expired wo nt happen output frame code editor click little arrow top right output frame order reproduce link live", "d": "12/2014"}, {"body": "minipai found workaround seems official way achieve", "d": "12/2014"}, {"body": "thanks heads took care go next website update", "d": "12/2014"}, {"body": "seems sane surface though sure play mixins future migration path might cc sebmarkbage", "d": "12/2014"}, {"body": "reasonable also area different polyfills screw example objectassign polyfill nt copy real symbols likewise symbol polyfills add getownpropertysymbols feature overlap polyfills might cause issues tempted wait bit see space shakes also clear symbols primary way using private state since observable method weakmaps safer way keep completely isolated private state curious use case though seems completely private nt instance module level functions somehow using virtual nature combine multiple mixins share symbol certain methods might also useful put symbols state point start using native objectassign one exists copy symbols", "d": "12/2014"}, {"body": "sebmarkbage like use namespacing like let mymixininterface foo symbol bar symbol let mymixin mymixininterfacefoo default implementation foo uses mymixininterfacebar let foo reactcreateclass mixins mymixin mymixininterfacebar fill implementation somewhere thisrefsfoomymixininterfacefoo yes could use prefixed functions like something seems even worse moment symbols mixin useless might well give meaning also opens door allowing custom methods chain like exposed dictionary allowed people attach symbols would worry conflict seems completely private nt instance module level functions ca nt override class module level functions", "d": "12/2014"}, {"body": "seems like facebookjstransform addresses issue", "d": "12/2014"}, {"body": "yup closing favor issue", "d": "12/2014"}, {"body": "unsure specifics reactbootstrap feel like losing state likely state living parent component passed props state live store object external components may beneficial read article composability multiple components", "d": "12/2014"}, {"body": "seems like something take reactbootstrap possible maintain state tab content would need maintain hidden prop always render tabs even whatever answer root question yes unmounting means references gone data get gced", "d": "12/2014"}, {"body": "see like last time nt possible due mocking problems", "d": "12/2014"}, {"body": "also lots minified exceptions production stack traces help always captured reliably", "d": "12/2014"}, {"body": "hmm think actually result us blowing stack nt supposed callable inside looks like may inadvertently removed check fix master backport", "d": "12/2014"}, {"body": "fixed go next release list things backported release", "d": "12/2014"}, {"body": "think seems like pretty reasonable thing react fixup properties cc syranide", "d": "12/2014"}, {"body": "overly familiar intricasies fo dragdropdatatransfer iirc quite lot normalizedpolyfilled seems like worthwhile endeavour least", "d": "12/2014"}, {"body": "cool said give go like basically thinking adding class implements defined interface specification plus perhaps property interface properties calls return corresponding property native object except converted array sounds good pretty straightforward implement though sure tests go", "d": "12/2014"}, {"body": "true lifecycle really cycle server called rest nt documented long time exception reasoning actually affect state initial need make sure called server called client initial render could different whole checksum would fail considered forbidding call would eliminate need call server happens necessary case listeners whatnot probably better set", "d": "12/2014"}, {"body": "cool thanks reasoning behind keep ear ground anything change componentwillmount", "d": "12/2014"}, {"body": "hi hallgren tasks primarily tracking changes needed react code base since general question related react diffing libraries probably success asking stackoverflow going close issue since general question community rather bug closing issue nt prevent others jumping responding encourage anyone good answer exactly take issue todo list reason using controlled component rather uncontrolled one sounds like uncontrolled components mostly want need something fancy component always break react use dom imperative api though obviously nt react way nt official recommendation building react apps good luck project", "d": "12/2014"}, {"body": "hi thanks answer jsfb switching value defaultvalue trick almost cases transfered mutate value replacement input tag new value new title loaded backend inserted react dom special cases type submit compared type text comes value gt defaultvalue make uncontrollable", "d": "12/2014"}, {"body": "understanding input type submit results button inherently editable user nt think concept controlleduncontrolled exists cc spicyj", "d": "12/2014"}, {"body": "problem", "d": "12/2014"}, {"body": "sorry found could apply imgresponsive classname every images resize correctly", "d": "12/2014"}, {"body": "would nt require walking entire component tree collect shouldcomponentupdate return values one main benefits shouldcomponentupdate node large number children tell react nt need talk hundredsthousands children nodes components nt implement shouldcomponentupdate really emergency escape hatch extreme cases need manual perf optimizations default implementation return true also difficult generalize function usually used developer firm understanding implementation details hisher page knows behavior child components", "d": "12/2014"}, {"body": "would nt require walking entire component tree collect shouldcomponentupdate return values assuming actually hit shouldcomponentupdate reconciliation process begin changing something similar behavior true true one main benefits shouldcomponentupdate node large number children tell react nt need talk hundredsthousands children nodes agreed data immutable possible generalize something ed toplevel behavior something like om application case time via immutablejs makes performance insanely fast hundreds thousands components rendering top cases like escape escape hatch speak currently workaround something like request provide inverse generalizing something like purerendermixin except cleaner approach requiring sometimes know always want rerender could mixin would disable behavior componentbycomponent basis", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "necessity feature past", "d": "12/2014"}, {"body": "alternatively feature mentioned something others feel would worth adding willing put together pull request", "d": "12/2014"}, {"body": "believe already work master release yet", "d": "12/2014"}, {"body": "version react using smallest amount code use reproduce seeing", "d": "12/2014"}, {"body": "agree hiding exceptions bad thing really hiding exceptions code linked appears tryfinally block understand correctly affect flow exceptions example function foo throw new error myerror function bar try foo finally consolelog bar calling bar cause exception foo caught perhaps missunderstanding issue really like see example test case exception caughtswallowed react codebase andor pull request suggested change see think needs done going close bug invalid feel still incorrect please reopen andor provide test case andor pull request", "d": "12/2014"}, {"body": "intention let errors bubble without explicitly rethrowing tends cut stack trace make harder find original bug far know current code work correctly browsers except old ie still throws exception nt provide good stack trace", "d": "12/2014"}, {"body": "believe error due bug react please post simple example fragment code demonstrates issue reproduceverify", "d": "12/2014"}, {"body": "jsfb found api changes still calling rendercomponent using createelement instead", "d": "12/2014"}, {"body": "still nt happen jsfb repro case might worth fixing point release sometime", "d": "12/2014"}, {"body": "apparently edge presumably also ca nt reproduce nt think anything let us know see dotfelixb", "d": "12/2014"}, {"body": "suggestions fix", "d": "12/2014"}, {"body": "coyotte react edge version using fiddle longer use component constructors directly building virtual dom tree use reactcreateelement instead use jsx transform see updated fiddle also change react version previous api deprecated still working", "d": "12/2014"}, {"body": "cc sebmarkbage", "d": "12/2014"}, {"body": "record one thing quickly noticed deferring postrender life cycle methods longer execute code expect component method run may noticed ran test suite pretty much every test asserts list executed life cycle methods failed nt seem possible bug much philosophical decision expectations surrounding react render methods corresponding life cycle methods", "d": "12/2014"}, {"body": "indeed intentional react reconciliation lifecycle occurs within single event loop clear scheduling api within event loop rely explicit batching ensures one reconciliation happens within batch cases reactrender synchronous ideally would always asynchronous use case work react reconciled properties may want extra work next frame painted otherwise would always see flash normally writes dom component effect next event loop anyway unless read reads example explicitly schedule work happen next frame painted using elaborate particular use case", "d": "12/2014"}, {"body": "totally agree reasoning laid sebmarkbage give color particular scenario also admit something edge case building ui particular element one three css values depending current state ui element also independently animated along x axis value well state ui dictates element toggle vice versa need execute class transition without element moving within browser meaning value change time value however rule targets result element animating nt want order get around current solution set store old transition value retrieval later transition update without element moving browser set stashed value turns transition back animate along x axis necessary found fires event loop changes occur single paint occurs desired effect achieved contents deferred get thanks replying sebmarkbage far concerned issue closed agree leave close", "d": "12/2014"}, {"body": "currently unknown attributes nt get passed dom nodes things like transferring props would result many unknownnoisy properties passed dom elements aware issue solution unknownattribute issue todo list duplicate", "d": "12/2014"}, {"body": "unit tests get instance text components nt instance consecutive text components might merged implementation detail thought cleaned internal unit tests relied diff patch fixes new ones something findallinrenderedtree always breaks dec pm paul shannessy notifications githubcom wrote recent separation internal external instances reactdomtextcomponents got left certain tools namely reacttestutils expect everything rendered tree conforms certain api attempting sync last couple weeks react fb causing tests depend reacttestutilsfindallinrenderedtree fail result cc spicyj sebmarkbage reply email directly view github", "d": "12/2014"}, {"body": "bring diffs nt new failures probably missed hidden believe always break text component since blindly call", "d": "12/2014"}, {"body": "sebmarkbage return nt work yet", "d": "12/2014"}, {"body": "probably null explicitly leaving throw validate assumption nothing trying get public instance text components looks like need fix scry sure nt show tests dec pm ben alpert notifications githubcom wrote sebmarkbage reactrender foo el return nt work yet reply email directly view github", "d": "12/2014"}, {"body": "per subsequent inperson conversation sebmarkbage decided update scry instead adding getpublicinstance method textcomponent", "d": "12/2014"}, {"body": "needs nt bound pass like pass good go", "d": "12/2014"}, {"body": "thanks replyso pull request", "d": "12/2014"}, {"body": "closed", "d": "12/2014"}, {"body": "extent possible want framework agnostic let developers use react see fit components clearly provide styles generally complex components need sort styling others probably inherit styles page without knowing details component hard make recommendation one way design principals selfevident like building components reused many different contextsenvironments possible others less obvious existing docs talk patterns antipatterns discovered facebook using react internally try provide guidance build components particular bestpractice feel nt sufficiently communicated feel free submit pull request happy take look whatever come", "d": "12/2014"}, {"body": "tricky problem come thought lot nt really solution yet really problem web whole specific react hit lot problems questions package manager get used npm bower css many questions prevent clashing class names package style going intrinsic way build component take reactbootstrap example would pretty silly exist without styles dependency management whole worms good discussions hints might able start solving think long way final solution best could start write minimal best practices like use interested think section site would good happy reviews chat might belong section", "d": "12/2014"}, {"body": "ya away thinking whole lot lately completely understand guys coming million one things thing days becomes increasingly difficult recommend right way write components read following article writing css changing start writing component based applications think little naive opened post think react unopinionated great job expressing especially one answer ever something like core react components something similar polymer website think developers would able build upon components using best practices following similar standard way core component written", "d": "12/2014"}, {"body": "agree core component library would awesome lot work maintain library focus point making react core best worth taking look reactbootstrap nt already pretty awesome set components since mentioned polymer website might like also react component libraries", "d": "12/2014"}, {"body": "see also", "d": "12/2014"}, {"body": "input value set value state price key value try input dot keypress would result state would update price key value running parsefloat inputs like return", "d": "12/2014"}, {"body": "mentioned handling floats quite simple need specialized handling nothing wrong react exactly told going close", "d": "12/2014"}, {"body": "ideas also accepts callback also returns value techniques used row call focus autofocused created new style refs callbacks get fired child mounted used trigger focus without need wrapping also use lifecycle hook component gets updated ensure focused thing according business logic always retains focus eg newest one think probably better alternatives nt rely imperative nature source state change eg tying action triggered event add another state transition state nt confusing end state different sideeffects part beauty react avoid think one patterns could replace callback even nt honestly current batching strategy comes set problems right hesitant expand api sure going keep current model think temporary escape figure something better seem fair", "d": "12/2014"}, {"body": "experience whenever tempted use callback achieve overriding andor", "d": "12/2014"}, {"body": "please make sure right repo filing issues meant file say huh", "d": "12/2014"}, {"body": "oooops sorry head today p", "d": "12/2014"}, {"body": "note bind see following js console bind binding component method component react automatically highperformance way safely remove call see commentbox however nt bind sample code nt work perhaps regression react prevents ever automagic appears working using", "d": "12/2014"}, {"body": "works fine using full running example bound instance already thanks autobinding nt anything else needed indeed nt autobind would nt set bind warning saw close reopen repro code repro need environment information browser os etc", "d": "12/2014"}, {"body": "bug bit misunderstanding component lifecycle definitely confusing renders paginationdemo happening initial render update setstate via componentdidmount pageinationdemo update app rerendering async promise data render initial state initial state app reading established initial state app last update called async request response instead using probably want use docs may also want reconsider using something ever read looks like also idea based comment render", "d": "12/2014"}, {"body": "great thanks zpao love lifecycle works", "d": "12/2014"}, {"body": "yes great idea branch starts add try finish weekend", "d": "12/2014"}, {"body": "jsx column recently added give pretty good overview", "d": "12/2014"}, {"body": "working towards making possible purely use object literals currently still couple things related internals prevent us entirely simple dom component trees doable many things composite components nt quite nt anything actionable moment closing", "d": "12/2014"}, {"body": "zpao ok guess thanks", "d": "12/2014"}, {"body": "spread implies copying pretty sure still needed supporting could make sense", "d": "12/2014"}, {"body": "necessary specific case necessary general case personally think still room supporting tangential spread case something talked", "d": "12/2014"}, {"body": "fwiw discussion extending jsx bare object happen", "d": "12/2014"}, {"body": "nt think reactmultichildupdatechildren catching exceptions fact think specifically jumping hoops ensure exceptions caught note tryfinally blocks result exceptions caught demonstrated function foo nulldosomething function bar try foo finally consolelog bar invoking bar catch null pointer exception thrown foo simple examplefiddle demonstrates issue would allow us investigate", "d": "12/2014"}, {"body": "reported since sounds like parsing issue problem strip types transform may turn need update transform though ca reopen case", "d": "12/2014"}, {"body": "yea probably checks reactdomoption wrapper allow anything text children", "d": "12/2014"}, {"body": "hit", "d": "12/2014"}, {"body": "probably fixed", "d": "12/2014"}, {"body": "escaping tag leaves vulnerable someone creating link form tag even vulnerable trying create blacklist sanitizer inherently flawed approach security discouraged also custom escape function create html field shown allowing mostly gets want nt make sense add feature order support broken security policy going close bug unless someone stronger motivating reason feature", "d": "12/2014"}, {"body": "case custom escaping function properly handles case well many complex cases extensive test suite successfully made several external security audits mitigation improve code somewhat would still nice less verbose way invoke", "d": "12/2014"}, {"body": "anyone additional feedback also evaluating react would like know scales well large number dom elements workarounds speed first render scenarios", "d": "12/2014"}, {"body": "ricardosoeiro frameworks always overhead compare nonnaively suitable framework make sense general guideline many dom elements first render visibly slow wrong faster performance solution bandaid add content dynamically scrolled view etc way scales properly ps also react become faster faster time", "d": "12/2014"}, {"body": "speed first render important highly important project could better render serverside may possible worth effort imagine agree adding content dynamically would possible render first items first render probably far items person could see page without scrolling rest second render milliseconds later requires extra writing effort upfront hopefully one time effort provides shorter perceived load time answer evaluation react really depends tradeoffs want make willing accept lower render performance simplicity low mental overhead react provides", "d": "12/2014"}, {"body": "jsxless example consistently around chrome computer perhaps jsfiddle slow prevents jit optimizations test case standalone html really hoping actual customer data emails telephones addresses posting", "d": "12/2014"}, {"body": "think point use simpler library like underscore templates generates markup string memory performs single dom update afaik precisely react first render", "d": "12/2014"}, {"body": "good topic mailing list sorry said sooner mentioned appear discrepencies causing performance issues react simple string templating yes likely additional overhead react sets maintains references stores caches updates fast", "d": "12/2014"}, {"body": "also issue albeit different reason", "d": "12/2014"}, {"body": "error call reactunmountcomponentatnode documentgetelementbyid modalscontainer next action reactrender anothermodal everything ok without reactrender im getting error like react dispatching event clean everything unmount component ca nt find course", "d": "12/2014"}, {"body": "sure better putting globals components need communicate via kind global bus publish bus npm module components since would components would share instance", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "ran issue today caused two things mounting root node client side later nt mounted server also server side rendering inside jsdom instance currently working around issue rewriting implementation createreactrootid jsdom instance randomized server side behavior curious though reason use random always", "d": "12/2014"}, {"body": "interesting idea current react proptypes involves running bunch code think end goal make static use something like flow analyze like even move away make static property take look ideas working towards cc sebmarkbage", "d": "12/2014"}, {"body": "cc sebmarkbage", "d": "12/2014"}, {"body": "first thank excellent bug report well structured easy test bad news various wrappers undoing wrappers complex difficult get form perfect upgrade path guess special case something broke ended spending lot time inclined leave broken good news works master branch fixed would mind submitting formal pull request unit tests added tests ensure nt break exception asserting props mockcomponent probably wo nt support considered legacy point nt important since automocked components works better outofthebox probably encourage shallow testing use case", "d": "12/2014"}, {"body": "best get tests pr test suite fighting fires moment ca nt promise drop date thanks looking", "d": "12/2014"}, {"body": "draft class definition also latest upcoming draft october seems propertydescriptor methods class let desc propertydescriptor value f writable true enumerable false configurable true classelement order methods isstatic false let status result performing propertydefinitionevaluation argument proto b else let status result performing propertydefinitionevaluation argument f seems class methods current spec", "d": "12/2014"}, {"body": "first one constructor enumerable rest elements uses propertydefinitionevaluation make enumerable dec pm ceane lamerez notifications githubcom wrote draft class definition also latest upcoming draft october seems propertydescriptor methods class let desc propertydescriptor value f writable true enumerable false configurable true classelement order methods isstatic false let status result performing propertydefinitionevaluation argument proto b else let status result performing propertydefinitionevaluation argument f seems class methods enumerable current spec reply email directly view github", "d": "12/2014"}, {"body": "see number let desc property descriptor value propvalue writable true enumerable true configurable true report well browser vendors", "d": "12/2014"}, {"body": "also feature would like obviously deep merge performant maybe could configurable use either shallow deep merge basic example use case feature javascript var button getdefaultprops function return buttontext click buttonaction somemethod render function return somemethod function var custombutton reactcreateclass mixins button getdefaultprops function return buttontext alert click somemethod function alert hey clicked reactrender someelement expected behavior would button text alert click action still maintains default behavior calling", "d": "12/2014"}, {"body": "proptypes meant behavior nt depend adding removing proptypes declaration afaik react transitioning classes proptypes superseded flow typechecks another reason annotating proptypes nt option another problem currently react allows pass different types props describe however behavior suggest would make sense default value passed value objects user accidentally passes something object eg number user code may may fail would merging work case seems like much complexity pay something implement completely sidestepping instead merging using instead", "d": "12/2014"}, {"body": "gaearon method using fairly new user perspective expected behavior based docs found either concrete class would totally supersede mixin would merge values documenting behavior would help time try figure submit pr really makes composition difficult since mixin functionality requires props also fwiw lodash implementations handle edge cases well available standalone npm modules", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "nt think going change let sebmarkbage make final decision", "d": "12/2014"}, {"body": "understand might confusing first guess one terms learn sure clarification worth churning people already using accustomed terms generally open improving terminology people use react nt started yet predict lot use flow typescript another dynamic type syntax guards curiosity guys think flow typescript syntax object shapes ensure properties numbers kind weird learn maybe makes sense", "d": "12/2014"}, {"body": "fwiw nt think end react nt designed work like nt think would want support long term", "d": "12/2014"}, {"body": "interesting pattern think might mistake add component api since would usable toplevel components though similar restriction though think still want remove api way seems like would nt bad idea something like past cached reference node nt go component see stashing component reference think ok way working around", "d": "12/2014"}, {"body": "warning agree", "d": "12/2014"}, {"body": "explicitly setting react ends setting instead cc syranide", "d": "12/2014"}, {"body": "fix default value identical attribute try review retest wednesday fixes quite lot edgecases would good merged", "d": "12/2014"}, {"body": "sorry example code render attribute set rendered dom expected render second time attribute rendered dom wanted remove tabindex attribute completely case set explicitly setting value works fine something assuming tabindex attribute set explicit value", "d": "12/2014"}, {"body": "mczepiel believe mixed order anyway handful dom attributes exhibit default behavior set default value attribute removed restore default behavior", "d": "12/2014"}, {"body": "oh wait bad mczepiel yeah second bug referring", "d": "12/2014"}, {"body": "closing really nt think going", "d": "12/2014"}, {"body": "come couple times even get wrong building things happening esprima actually entity parsing sees jsx string treats like beginning entity looks known html entities eg replacement unicode fallbacks case think seeing unteminated entity since characters treats known entity looks object map undefined stick reason think agree entity parsing esprima bad idea related xml behavior trying achieve probably actually remove since rarely desired behavior cc jeffmo want end closing tracking elsewhere leave open", "d": "12/2014"}, {"body": "yea sounds like fit bill process revamping bit official support", "d": "12/2014"}, {"body": "gaearon zpao thanks actual reason request currently using yahoo flux tooling prerender serverside clientside noticed pass context outer child nodes order child nodes request given storemixin ex seemed wasteful property automatically propagate thanks letting know", "d": "12/2014"}, {"body": "going close feel free reopen something", "d": "12/2014"}, {"body": "removed docs", "d": "12/2014"}, {"body": "closing reopen repro", "d": "12/2014"}, {"body": "tkafka able resolve issue trying package code separate bundles vendor app faced issue tried various combinations alone etc luck thanks", "d": "12/2014"}, {"body": "pgollakota yes worked ca nt verify syntax use ok might case multiple arguments look like call get last one", "d": "12/2014"}, {"body": "way improve error message output part jsx uses plain function understand support breaking change possible like know problem fix", "d": "12/2014"}, {"body": "agreed fixed warnings somewhere beginning assuming initial reactrender far know possible jsxify", "d": "12/2014"}, {"body": "tryspace sure otherwise invoke manually want avoid jsx", "d": "12/2014"}, {"body": "irvinebroque unfortunately possible us print better error able set breakpoint warning inspect call stack see part code causing problem", "d": "12/2014"}, {"body": "think fixed master thanks", "d": "12/2014"}, {"body": "hey guys actually updated today tested adding hack working fine looks like fixed somewhere", "d": "12/2014"}, {"body": "changes jsx nt see difference", "d": "12/2014"}, {"body": "jussikalliokoski agree similar idea", "d": "12/2014"}, {"body": "hi sorry comment old post question assertion mentioned function returns object render method valid class function created return object containing method actually basically current existing react classes meet criteria idea ps using return object containing function", "d": "12/2014"}, {"body": "still issue seeing reactwithaddonsminjs v", "d": "12/2014"}, {"body": "currently using workaround would prefer", "d": "12/2014"}, {"body": "duplicate nt bug label", "d": "12/2014"}, {"body": "yea close", "d": "12/2014"}, {"body": "make sense rename property something sound like function make sense drop scary part name dangerous something dangerous depending used dangerous matches dangerous even though used safely knives ovens motorcycle listen shameful distant past php developer php absolutely chockfull danger even dangerous past start fact outputs unescaped html default standardlooking database library encourages users naively interpolate strings queries hello bobby tables concatenating strings query dangerous escaped safely generated strings mean dangerous mean everyone writing code knows taught phpmysql printed book early high school know email header injection furious find code wrote following book left contact form open used sending spam arbitrary recipients think conflated making right thing easy read escape default amp welldesigned apis taking additional precaution warning users dangerous code aware debating latter thread think right thing think may exhibiting common programmer belief think dangerous idea since every developer know x z hacking languagelibrarysystem every developer working know x z assure assumption true astounding numbers people call developers others simply google solution paste code app tweaking works people see word danger code pasting something open xss hole react attitude setting less experienced us failure react team smart thing name deserve applause congrats writing ethical software", "d": "12/2014"}, {"body": "well said alanhogan completely agreed", "d": "12/2014"}, {"body": "looks like latest iteration issue", "d": "12/2014"}, {"body": "think much better still fan syntax though even reading syranide follow prefix warning flag regardless actual harm done developers wo nt think twice part leading underscores usually mean working private api might change without warning working inherently dangerous", "d": "12/2014"}, {"body": "tend agree rymohr since prop name dangerouslysetinnerhtml making api awkward probably overkill anyone forgets consider xss setting going dissuaded extra hand prevent passing object nt control without transforming first maybe good", "d": "12/2014"}, {"body": "appsforartists intended another warning meant signify value safe use html using inline intended intention makes lot sense burden function guarantee value safe use html", "d": "12/2014"}, {"body": "really dangerous wrong place write looks safe long whoever wrote key made sure html safe", "d": "12/2014"}, {"body": "spicyj guess still alludes expecting special wrapped value though", "d": "12/2014"}, {"body": "spent couple minutes understanding component work feel like notice somewhere maybe missed maybe obviously wrong try javascript var optimistic reactcreateclass render function return thispropsname loves react react idea sprinkle divs reactrender documentgetelementbyid mycontainer", "d": "12/2014"}, {"body": "gabssnake gotten jsx compile error error adjacent xjs elements must wrapped enclosing tag see error clear explanation", "d": "12/2014"}, {"body": "thank answer spicyj well meant notice react documentation yes console show error need wrap make sense first searched got", "d": "12/2014"}, {"body": "like use contexts flux stores almost current flux implementations use singleton stores really nice use browser pain use server isomorphic apps multiple requests processed concurrently fit well singletons fixed creating instances stores manually pass stores props cumbersome end components depend store props nt actually use store pass forward others ugly imo think context instance based flux stores would get best worlds talk deprecating contexts issues really going happen", "d": "12/2014"}, {"body": "contexts still experimental feature probably going deprecated yet documented may subject change without notice reason may want avoid using production applications api solidifies said flux store perfect example good use case contexts serverside see reason everyone ca nt share single flux store request store would also need userid fetching information apps running clientside would get error trying access data another user flux store may act cache may query database directly either way making store requests include user share single store across app current status contexts optimistically hopeful ready prime time yet", "d": "12/2014"}, {"body": "using build trunk getting warnings owner tree vs parent tree parent tree keys want ca nt access perhaps understanding context supposed work use case supported creates form instance passes child context variable method uses return child case intent declare access render field named props however console output live version says undefined", "d": "12/2014"}, {"body": "insin nt think parentbased context master yet impression warnings already added implementation yet", "d": "12/2014"}, {"body": "doh took initial implementation face value scanning updates issue dizzyface", "d": "12/2014"}, {"body": "really sure much implemented obviously parentbased context calculated passed warning would nt work since react usually keeps deprecated behavior one version reckon ownerbased context getting looks warning implemented might get parentbased context like assume", "d": "12/2014"}, {"body": "pretty sure currently bug warnings trunk risk running trunk cc zpao stable build", "d": "12/2014"}, {"body": "insin gaearon master currently warns contexts differ uses old notion context change use parent contexts two line change wanted maintain old behavior warnings period time ready pull trigger switch yes entirely possible still bug looking masking performcontextupdate", "d": "12/2014"}, {"body": "wanted maintain old behavior warnings period time ready pull trigger switch heart react", "d": "12/2014"}, {"body": "flow guess issue less important need immutablejs type checked flow leebyron someone could also make new mixin ala proptypes immutablejs", "d": "12/2014"}, {"body": "yeah practice using refer value prop usually similar state object single key proptypes use technique similar davidtheclark proposal object spread operator nt work maps kind immutable sugar objectassign usage within jsx nt think likely props move object map anytime soon certainly possible create custom version jsx transpiler generates maps instead objects mapping collections immutable otherwise possible react master branch time included toarray immutable collections possible collections immutableitemsmap item gt item toarray works fine iterables immutableitemsmap item gt item", "d": "12/2014"}, {"body": "leebyron nt think likely props move object map anytime soon certainly possible create custom version jsx transpiler generates maps instead objects understanding seems counterintuitive nt props objects intended rather static set keys used whereas maps dynamic lookups", "d": "12/2014"}, {"body": "syranide think would nice react team document good practices dealing contenteditables quite hard manage well think found way deal cody want manipulate contenteditable script without jumping cursors best update dom directly sanitize rich pasted content cursor jump touch nodes selection think works", "d": "12/2014"}, {"body": "wonder wether workaround access elements transitiongroup ref nt work", "d": "12/2014"}, {"body": "brought reactframecomponent trying use chrome extension page already used react solution following cc nelix", "d": "12/2014"}, {"body": "frameworks worked would prefer names like since render method called would even sementically sensible stuff awkward silly", "d": "12/2014"}, {"body": "definitely spent lot time considering personally favor however general consensus end day verbosity worth", "d": "12/2014"}, {"body": "word progress using react widget browser extension work third party sites able update important styles issue", "d": "12/2014"}, {"body": "nelix maybe use something like workaround", "d": "12/2014"}, {"body": "cody would probably easier manually manage style property node", "d": "12/2014"}, {"body": "issue ability set property checkbox within react found solution react version drawbacks except jqueryzepto used example nt case element always rerendered", "d": "12/2014"}, {"body": "drawback mutating dom manually kinda sucks also want make sure happens right place subsequent render", "d": "12/2014"}, {"body": "also want make sure happens right place subsequent render make sure understand happens virtual dom placed real dom rendering real dom changing input may take time situations browser reflow done times", "d": "12/2014"}, {"body": "well rerender get called also need make sure happens needed", "d": "12/2014"}, {"body": "vote reopen quite real example wwwjusticketsin try booking ticket credit card feel free use test card future expiry cvv opening factor auth popup onclick popup blocker triggered anyway", "d": "12/2014"}, {"body": "popup firefox different browsers different heuristics determining something popup blocked nt think ever definitive guide making work time days call event handler callstack closest get guarantee nothing else afaik", "d": "12/2014"}, {"body": "callback never called", "d": "12/2014"}, {"body": "syranide sounds good least warn onload nt work one use", "d": "12/2014"}, {"body": "bumped issue", "d": "12/2014"}, {"body": "chances fixed", "d": "12/2014"}, {"body": "able solve tweaking order state variables applied component state eg", "d": "12/2014"}, {"body": "running issue usually removed lsvx mentioned", "d": "12/2014"}, {"body": "played around khan academy timeouttransitiongroup still see animation glitches occur components get correctly removed least prevents app getting stuck broken state", "d": "12/2014"}, {"body": "similar issue happens changing cssclass property element transition", "d": "12/2014"}, {"body": "getting rid nice animation fix bug code", "d": "12/2014"}, {"body": "tweaked khan academy avoid another problem maybe also fixes problem give try version", "d": "12/2014"}, {"body": "breaks things", "d": "12/2014"}, {"body": "saw issue react addons form adds things table list last things animation add many things quickly sometimes list classes remaining surplus elements", "d": "12/2014"}, {"body": "fixed miscommunication addons docs page mistakenly grouped testutils wrong section", "d": "12/2014"}, {"body": "textpath", "d": "12/2014"}, {"body": "svg icon handling", "d": "12/2014"}, {"body": "svg addon currently need project knows need future comprehensive addon would helpful", "d": "12/2014"}, {"body": "addon planning make extensive use svg react complete svg addon projects like seems like great idea", "d": "12/2014"}, {"body": "nt virtual dom memoization sorts actual dom testing see actual performance improvement something tells cache top cache situation", "d": "12/2014"}, {"body": "nt done tests need memoize one possible uses thought element n\u00e9e descriptor reuse op like said interest particular use really came considering something said talk react allowing us leverage familiar cs toolkits seems pretty easy imagine contrived examples lot computation required build element tree means memoization would improve performance practice always able solve problems better way", "d": "12/2014"}, {"body": "returning null undefined nt appear work reacttransitiongroup", "d": "12/2014"}, {"body": "fyi looks like dataprefix works facebook picking open graph namespace declaration", "d": "12/2014"}, {"body": "putting back agenda", "d": "12/2014"}, {"body": "spicyj give example ca nt find documentation simulatenative set relatedtarget appropriately", "d": "12/2014"}, {"body": "ryanzec want something like simulates mouse moving one element another element anything really important", "d": "12/2014"}, {"body": "believe fine cc spicyj", "d": "12/2014"}, {"body": "nt think changed setstate sync normally async batched updates context including event handler", "d": "12/2014"}, {"body": "take look console seems logging right async always order", "d": "12/2014"}, {"body": "componentwillreceiveprops special sorry outer setstate like shows sync behavior", "d": "12/2014"}, {"body": "ah gotcha thanks clarifying", "d": "12/2014"}, {"body": "came across issue today well bit weird want set initial input values based thisstate seems particular reason provide onchange case going fixed mean anything improper", "d": "12/2014"}, {"body": "ktei might want consider using purpose", "d": "12/2014"}, {"body": "tirdadc thanks advice works", "d": "12/2014"}, {"body": "spicyj sebmarkbage still case wrapped", "d": "12/2014"}, {"body": "nothing changed call string text node still nt valid reactelement", "d": "12/2014"}, {"body": "element reactnode might possible isvalidnode thought proptype already", "d": "12/2014"}, {"body": "hey wanted mention encountered problem wrapper component looks like ca nt call method throws error ca nt either remove check since raises solution found sure helps wanted explain usecase think taking action", "d": "12/2014"}, {"body": "understanding whatever propschildren child array children like two children one child one invalid child agreed upon would removing span result foo longer valid child use reactchildrenmap either case without complaint encountering nonchild nothing else name docs bit vague considering specific implementation definition child ambiguous never used nothing indicating string number nt valid value assume eventually end issue google search debugging problem", "d": "12/2014"}, {"body": "think working least nt see anything crazy running", "d": "12/2014"}, {"body": "suggestions fix", "d": "12/2014"}, {"body": "currently mixin using listen click globally hand locally necessary react perhaps easier port react mixing components using function call works exactly expected much rather able use native react course", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "think brutally honest say really unlikely make configurable short term especially looking changing transform pipelines make consistent going close stop sending wrong message", "d": "12/2014"}, {"body": "plan fix", "d": "12/2014"}, {"body": "sebmarkbage spicyj still relevant refs changes", "d": "12/2014"}, {"body": "see change easy", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "like something like", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "considered modern browser tried willwhitney suggested nt seem work", "d": "12/2014"}, {"body": "input event limitations eg nt work backspace delete cut operation delete operation already resolved react nt available right get event consistently borrow react internal selection utility contenteditable somewhat useable course still normalize generated html problem begging third party library", "d": "12/2014"}, {"body": "checking say combination mutation observer covers modern browsers", "d": "12/2014"}, {"body": "point think safe say never", "d": "12/2014"}, {"body": "nt think workaround syranide outlined work necessary cases example nt believe properly upgraded mybutton custom element assume setting attribute element created placed document happy hear another way deal particular case", "d": "12/2014"}, {"body": "good find aaronius love official way element added dom", "d": "12/2014"}, {"body": "syranide thanks trick aaronius pointed would great something like componentwillbeattached node domnode method order perform action effective insertion dom", "d": "12/2014"}, {"body": "sadly method described nt work server side mentionned wo nt work either server side feasible create method would allow modify outputted html either server browser allow us simply solve legacycustom tagsattributes problem simple mixin", "d": "12/2014"}, {"body": "solution came accross allowed inject custom attributes needs piece code js var htmldomlegacypropertyconfig iscustomattribute function attributename return align bgcolor border indexof attributename properties align null bgcolor null border null domattributenames dompropertynames var react require react allow customlegacy attributes mail templates reactinjectiondompropertyinjectdompropertyconfig htmldomlegacypropertyconfig better way inject plan exposing reactinjection react main object", "d": "12/2014"}, {"body": "came across issue workaround mentioned syranide wo nt work server side current situation prevents generating email html legacy attributes like align bgcolor", "d": "12/2014"}, {"body": "server side use dirty string replacement based workaround use datafokfokfok prefix safe enough still react allow custom attributes polymer sebmarkbage", "d": "12/2014"}, {"body": "would need workaround client side another one server side neat bad easily configurable", "d": "12/2014"}, {"body": "want move model render attributes provide without whitelist concerns though bit dangerous might need change meaning signature attributes eg complex properties gets added html code might break versions prefer rich data types instead strings also issue patterns like used transfer many properties people specified invalid html properties used silently ignored would need provide nice upgrade path case could probably webcomponents html could commit always supporting string values try find upgrade path existing code", "d": "12/2014"}, {"body": "eg complex properties gets added html code might break versions nt true web anyway ie using react imo expected behavior web html adds attribute already use whether accident purpose something might break moreover like attributes get added really often also issue patterns like transferpropsto used transfer many properties people specified invalid html properties since deprecated would still issue", "d": "12/2014"}, {"body": "gaearon yes properties riskier less likely rely property unless patch prototypes attribute try model properties possible", "d": "12/2014"}, {"body": "nt follow last comment sebmarkbage talking complex attribute values custom elements ca nt simply represented strings clear would work thought communication custom element needs done dom strings rather rendering attributes without whitelist maybe adding separate object used explicitly declare list attributes treated simple strings way simple attributes supported without breaking code use case following issue seems like others", "d": "12/2014"}, {"body": "custom elements really support simple strings since nt rich information known html elements use rich data structures matrices svg attributes etc maybe solution simply use string provided also rich property support eg would accept string although security risk might allow nested property could work even might great security perspective elegant think find way support things primary concern upgrade path ideas could replace existing uses wrapper propagates whitelist eg", "d": "12/2014"}, {"body": "sebmarkbage definitely authority seems natural otherwise simply add dedicated prop setting attributesproperties raw values dom nodes ie also comes understanding whatever provide attr gets set probably nice idea applied custom elements making default implementation dom elements nonwhitelisted definitely nice either imho especially conflates two different behaviors without hint one get obviously custom elements could passthrough kind fits nicely fact uniquely named apart handful svg nodes conflict unless need namespace anyway anyway rambling", "d": "12/2014"}, {"body": "rationale unlikely dom property accepts string would different behavior attribute eg semantics except imperative quirks time mutated browsers bugs unintuitive behavior update time would want invoke setter also internal state component might update property leaving attribute point even added special behavior later behavior would unaffected except fix unexpected lifecycle quirks escape makes confusing differ properties also nt get bug fixes properties", "d": "12/2014"}, {"body": "think think custom tagsattributes future web components adoption think heavily used deep knowledge properties useful traditional html would different future html said use property exposed set attribute allowing inject rules like suggested seems universal solution also could allow put htmlsvg properties definition another repo could updated quicker pace would also decrease sources size use svg html none downside injection api would harder change since users rely", "d": "12/2014"}, {"title": "ngselect selects wrong value ios", "body": "encountered issue ngselect ios selecting value ngselect wrong value shows specifically value value selected get selected easily illustrate isolate created plunker use test phone ipad anticipated thanks", "num": "341", "d": "12/2014"}, {"title": "return null", "body": "sorry english problem http want use external api server example invoke error method return null data stats javascript code get page angular app success methods tried avail resource config etc somebody help much", "num": "340", "d": "12/2014"}, {"title": "watchcollection firing dotted field name", "body": "hi experience issue using directive scope field containing dot name mean field named instance domobj ie obj dom field actual property name contain btw remove name watchcollection first parameter expression works scenario supported thanks", "num": "336", "d": "12/2014"}, {"title": "asd", "body": "", "num": "335", "d": "12/2014"}, {"title": "benchpress add assertions performance tests", "body": "idea assert collected data time see idea use ratios compare benchmarks baselines problems ratios different js vs also different browsers eg chrome vs firefox", "num": "334", "d": "12/2014"}, {"title": "benchmarks run benchmarks real mobile devices", "body": "experiment test reliable benchmark numbers real mobile devices maybe use appium appurify appurify bought google depends", "num": "332", "d": "12/2014"}, {"title": "create single export file per module exports everything", "body": "already eg modules well use file import modules helps refactorings also separate private public exports", "num": "331", "d": "12/2014"}, {"title": "ngsanitize linky filter incorrectly converts query key html entities entity numbers", "body": "url query parameters like part converted results example becomes ie link see jsfiddle", "num": "329", "d": "12/2014"}, {"title": "directive order compiler pipeline", "body": "step order directive types component template decorators step order directives decorators template component could cause issue element ie template decorators use index get directive element injector cc tbosch vsavkin", "num": "328", "d": "12/2014"}, {"title": "putting dijs separate lib", "body": "days research realized dijs repo longer maintained dependency injection repo pretty away previous code base guess plan separate update old repo new code happen time soon thanks", "num": "324", "d": "12/2014"}, {"title": "rootscope global", "body": "reason make rootscope global variable unique single scope present always maybe used apply digest thing whenever single event want handle use custom directive one single purpose ca nt use angularelement scope debuginfoenabled set false wanted use events like onkeydown onfocus", "num": "323", "d": "12/2014"}, {"title": "support async keyword correctly intercepting zones", "body": "traceur support async functions makes writing functions use promises lot easier javascript far know last time checked hidden away behind flag enabled atscript could enabled default might also end driving implementation async support due usage async functions make aspects promises incredibly easier example without async async", "num": "322", "d": "12/2014"}, {"title": "binding multiple directive properties work", "body": "work first property would work expected second work issue seems null second property", "num": "320", "d": "12/2014"}, {"title": "hello world broken dart", "body": "hello world example broken dart following error", "num": "309", "d": "12/2014"}, {"title": "better code generation dart constructors", "body": "vojtajina one difference dart javascript dart fields always exist initialized null explicitly initialized constructor initalization complete constructor body executed current pattern assigning initial value fields constructor body causes initialize field assign later code would smaller probably slightly faster transpiler generated dart initializers instead assignments example generates generate initializer depend constructor parameters initialized field general rule transpiler promote assignments cstyle initializers sees noninitializing position example export class injector bindings list instances list parent injector defaultbindings boolean asyncstrategy asyncinjectorstrategy syncstrategy syncinjectorstrategy constructor bindings list parentnull defaultbindingsfalse var flatten flattenbindings bindings mapwrappercreate thisbindings thiscreatelistofbindings flatten thisinstances thiscreateinstances thisparent parent thisdefaultbindings defaultbindings b much harder since used body dart used initializer initializing field prevent uninitialized fields used hard transpiler know whether thiscreatelistofbindings reads thisparent assigned code rewritten move simple initializers first transpiler promote assignments initializers sees context assigning field expressions avoid helper methods used static methods rather instance methods moving fields forward gives us export class injector bindings list instances list parent injector defaultbindings boolean asyncstrategy asyncinjectorstrategy syncstrategy syncinjectorstrategy constructor bindings list parentnull defaultbindingsfalse thisparent parent thisdefaultbindings defaultbindings b var flatten flattenbindings bindings mapwrappercreate thisbindings thiscreatelistofbindings flatten thisinstances thiscreateinstances generates generate", "num": "308", "d": "12/2014"}, {"title": "protoview finalize method", "body": "gets built using compiler method method would called compiler let know done would allow pre compute values example see", "num": "301", "d": "12/2014"}, {"title": "protoview precompute number local variables", "body": "iterates local variables determine see information precompeted cached", "num": "300", "d": "12/2014"}, {"title": "expression watched twice property changes directive changes", "body": "given create watch points separate watch whcih points one slot property directive binding would speed instantiation run time performance", "num": "299", "d": "12/2014"}, {"title": "performance optimization compiler", "body": "see getting hold lot expensive iterating children using update compiler take advantage", "num": "298", "d": "12/2014"}, {"title": "fix nested template tags", "body": "following template compiled view nt think templates siblings", "num": "293", "d": "12/2014"}, {"title": "ngtouch child element triggers ngclick parent", "body": "example problem using ngtouch angularjs app provide touch events using ngtouch built ngclickactive class animate tile clicked good far issues also checkbox inside tile displayed user edit mode point nt want clicking checkbox trigger parent element click tried canceling click edit mode ngclick ineditmode false amp amp dostuff also using eventstoppropagation checkbox try stop click event propagating tile nothing worked far thanks help also asked", "num": "287", "d": "12/2014"}, {"title": "improve code block rendering output", "body": "dgeni try rendering viewa name viewa viewa local variable name viewa hello namevalue viewa binding expression namevalue inside block resulting output two issues evaluated angular instead escaped background color code block inline instead block making hard eyes block ideally would like run color codingformatting plugin", "num": "285", "d": "12/2014"}, {"title": "question templateconfig directives swapping templates", "body": "hope nt mind fact opening issue ask question one part design bothers could nt find covered design docs looking hello world example see directives used template explicitly listed given template took surprise since one could easily swap template given directive thus customizing markup without touching single line javascript recognize swapping template existing directive asking troubles bit strong contract template directive still convenient amp useful practice understand need solve modularity problem somehow need express directives needed given template gets loaded wonder decision factors involved decision thing comes mind tooling support understand still feels bit backwards express template dependencies js instead template level would obvious question express things template level different story would detailed questions yeh would totally awesome guys could share factors contributed decision expressing template dependencies js sorry answer already covered one design docs simply could nt find", "num": "283", "d": "12/2014"}, {"title": "benchmark compares change detection ideal change detection", "body": "believe considered maximum rate ideal world able get within ideal check code performs sufficiently fast", "num": "273", "d": "12/2014"}, {"title": "make dart optional build system", "body": "build rules autodetect dart found ignore dart rules build js part", "num": "268", "d": "12/2014"}, {"title": "ngoption select item failure", "body": "hello select input field nt load select value indicated variable scope seems problem comparison json objects even content created plunker example show similar issue", "num": "267", "d": "12/2014"}, {"title": "disallow setters nonexisting properties contexts", "body": "consider component prop set template expression evaluation throw clicked would force component authors explicitly declare properties plan use would benefit hiddenclass optimizations js engines also brings parity locals allow extending nondeclared keys", "num": "265", "d": "12/2014"}, {"title": "issues dart", "body": "dart released causes several errors w travis ci working", "num": "262", "d": "12/2014"}, {"body": "configured http use cross domain need add true delete config need inject", "d": "12/2014"}, {"body": "thank help added avail request issued server also recorded server records state angular received use firefox console view response also empty", "d": "12/2014"}, {"body": "wrong repository angularjs located", "d": "12/2014"}, {"body": "oh", "d": "12/2014"}, {"body": "yes wrong repo general support questions like nt asked github rather one support channels see osadan suggestion incorrect nt exist angularjs", "d": "12/2014"}, {"body": "thank", "d": "12/2014"}, {"body": "hi wrong repository want use githubcomangularangularjs", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "wrong repository could please reopen looks like valid bug", "d": "12/2014"}, {"body": "yes sorry", "d": "12/2014"}, {"body": "standalone di w useful seems shame couple back angular", "d": "12/2014"}, {"body": "nt simple git submodule", "d": "12/2014"}, {"body": "use submodule dijs already standalone lib asking", "d": "12/2014"}, {"body": "nt go process publishing npm copying files also nt want diffs built di file angular", "d": "12/2014"}, {"body": "watchtower amp expressionist hoping use nonangular project", "d": "12/2014"}, {"body": "hi subfolders published separate npm modules working implementation meant reusable whether sources split separate projects github separate question right want keep everything one repository allows us make bigger changes quickly still git submodules nt work well us require commit project includes another project whenever project changes change made included project travis run tests projects includes project ie would possible add change would break without knowing updated current sha releasing first stable version want rethink strategy source code though", "d": "12/2014"}, {"body": "akxe wrong repo guess wanted open issue good reasons making rootscope global apart obvious problems connected global variables root scope per angular app theoretically bootstrap multiple apps one page actually people seem practice rootscope wo nt made global variable", "d": "12/2014"}, {"body": "sorry nt thought", "d": "12/2014"}, {"body": "actually bug pr way", "d": "12/2014"}, {"body": "confirmed apparently got broken build system refactoring", "d": "12/2014"}, {"body": "size check iteration thu dec pm mi\u0161ko hevery notifications githubcom wrote view iterates local variables determine see information precompeted protoview cached reply email directly view github", "d": "12/2014"}, {"body": "checking compiler whether element really property case nt bind element property create watch element property would happen following case sure often happens whether really special case", "d": "12/2014"}, {"body": "actually think would simplify code one kind memento", "d": "12/2014"}, {"body": "ok bug html parser works outer nested parser change outer nested reason nest elements directly via element example follows subitem x", "d": "12/2014"}, {"body": "haha course get copying old tests incorrect things html", "d": "12/2014"}, {"body": "bzamora guess wanted report", "d": "12/2014"}, {"body": "see two major benefits declaring directives per template modularity want directives active current template treeshaking removing deadcode nt want pay bits wire directives nt use code size big concern mobile web mobile web future declaring going use different using think vs even declarations live template made look less jarring declarations global wrote let assume move declarations templates job translating actual import declaration basically linking emerging js importexport mechanisms html course doable adds extra complexitymagic top current proposal treeshaking provided scripting platform js compiler obviously go templates also treeshaking requires list active directives known compilation time runtime support template directive declarations would need require angular specific preprocessor would basically generate annotation see today treeshaking run afterwards bad idea option imho much require upfront every application also note current design error overspecify list directives example provide list buildin directives pass annotation prototyping later productionizing application narrow reap treeshaking benefits directive list contains union directives swapping templates issue", "d": "12/2014"}, {"body": "rkirov thnx taking time respond much appreciated hopefully others community follow discussion get insight cooking afraid got couple follow questions comments let start question first declare usage directive given template using attribute directives going automatically visible child templates well child templates mean templates referenced components given template specific provide reference set common directives app component level going implicitly visible subcomponent templates trying determine painful going declare directives developer daily life would definitively unhappy situation need reference commonly used directives ngif ngrepeat etc individual templates well components use templates think might partially answering question example provide ngdirectives list buildin directives pass directives annotation prototyping later productionizing application narrow reap treeshaking benefits directive list contains union directives swapping templates issue wonder would work practice would prepare module would export array builtin directives thnx patience answers know could infer things reading code hopefully answers serve community large", "d": "12/2014"}, {"body": "declaring going use different using think angulardirective vs even declarations live template made look less jarring declarations global wrote hmm sure compare nt way expressing template use directives believe new concept way see analogy gt annotating class etc gt directive usage activation concept nt exist gt property correct mixing", "d": "12/2014"}, {"body": "specific provide reference set common directives app component level going implicitly visible subcomponent templates currently directive annotation extend subcomponents shadowdom one good reason validate component template locally ie without knowing component tree might live would prepare module would export array builtin directives yes exactly see confusion analogy nt quite match design annotations thin pod classes basically array push onto internal list directives mutate part system maps class metafields read later accessing correct analogy would static bits ddo gt annotating class etc gt directive usage activation gt directives property templateconfig", "d": "12/2014"}, {"body": "rkirov ok kind expected wo nt propagation template directives tree components makes sense logical technical point view get technicalities correctly practical impact every component well actually template import built directives directive add property sounds like rather annoying inconvenience especially folks coming world things worked technical arguments bringing valid wonder get system technically right easy convenient ti use developers consider creating kind global registry one could say going need directives majority templates ngrepeat ngif good candidates declaring order avoid importing declaration every template know guys trying best thing possible sure going awesome framework point trying understand need write daily basis developer", "d": "12/2014"}, {"body": "merged benchmark js changedetector slower baseline changedetector slower baseline", "d": "12/2014"}, {"body": "mhevery mean sdk available skip everything related dart", "d": "12/2014"}, {"body": "yes tue dec pm victor berchet notifications githubcom wrote mhevery mean sdk available skip everything related dart reply email directly view github", "d": "12/2014"}, {"body": "version", "d": "12/2014"}, {"body": "please use angularjs repo repo", "d": "12/2014"}, {"body": "sure like currently match semantics js returns undefined creates new property start disallowing sets case returns undefined throws addition make get set asymmetric ides know component class result fields able highlight typos", "d": "12/2014"}, {"body": "would vote throwing also getters symmetric", "d": "12/2014"}, {"body": "agree either go full strictness getters setters none", "d": "12/2014"}, {"body": "based hello world example looks like need manually bootstrap top level component register angular allow angular find child models directives services etc", "d": "12/2014"}, {"body": "added new syntax proposal nt radically different team proposal constraints make thing difficult introduces two key ideas explicit ng marker prefix data bound elements raw html depending browser support web components angular parsercompiler either register new matching element proxies bound element via shadow dom replace live dom attribute sections demarcated special attributes bind etc take optional suffix allows special types attribute expressing bindings properties events etc without need prefixes every attribute ngbind ngon inventing opaque new shorthand syntax every new attribute type example one way bindings either direction could easily added bindin bindout attribute sections without invent new prefixes shorthand like ngbindinproperty property may horribleunimplementable figured throw", "d": "12/2014"}, {"body": "sure affects svg type syntax colons allowed nt necessarily mean namespace asked use colons reserve namespaces", "d": "12/2014"}, {"body": "unfortunately nt work internet explorer", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "incompatibility xml serialization broadly reasonable html preprocessing tool like htmlmin etc deal breaker please add constraint one possible mitigation alternate xmlfriendly syntax multiple xmlfriendly proposals pick syntax works xml serialization go also please note xml serialization dead sometimes used intermediate template format various html preprocessing validation tools editor exensions many internal regardless inappropriate angular team take hard antixml stance secondly microsyntax nothing wrong nt care ides hard time supporting never truly supported binding expression syntax generation frameworks either loss would rather readable ngrepeat like comprehension syntax one several awkward binding syntax proposals ngrepeat seen far comprehension syntax easier read far", "d": "12/2014"}, {"body": "sure came conclusion antixml stance supporting haml xml constraint supported fri dec sleepy daddy lt notifications githubcom wrote incompatibility xml serialization broadly reasonable html preprocessing tool like htmlmin etc deal breaker please add constraint one possible mitigation alternate xmlfriendly syntax multiple xmlfriendly proposals pick syntax works xml serialization go also please note xml serialization dead sometimes used intermediate template format various html preprocessing validation tools editor exensions many internal regardless inappropriate angular team take hard antixml stance secondly microsyntax nothing wrong nt care ides hard time supporting never truly supported binding expression syntax generation frameworks either loss would rather readable ngrepeat like comprehension syntax one several awkward binding syntax proposals ngrepeat ive seen far comprehension syntax easier read far reply email directly view github", "d": "12/2014"}, {"body": "two cents syntax discussion one biggest advantages angularjs simple html compliant syntax instead extending expression language introducing entirely new expresion language would prefer learning new attribute prefixes eg ngsyncvalue twoway binding value property ngbindvalue oneway binding value property ngsetvalue ngonclick event binding syntax somewhat verbose defiitely simpler pow expression language plus advantage using keywords describe binding mode simple characters like etc nt mean anything actually harder adopt read", "d": "12/2014"}, {"body": "figured might well join fun wrote proposal ideas inspired believe passes latest criteria summary ideas independently discussedacceptedrejected microsyntaxes extensions expression language string interpolation shorthand instead iteration arrayobject destructuring terseness prop set properties instead bind limited version arrow function syntax use event handler expressions limited use spooky characters html attribute kind suffix reserved special angular stuff like directive configuration exporting controller variables little example snippet inspired artists example misko current proposal html album albumname j trackname play playertime", "d": "12/2014"}, {"body": "hello everyone wanted say thank dev ninjas google bringing angularjs scene love declarative approach developing dom new angularjs actually week hard time conforming api structure syntax came across video today angularjs super excited changes feel current approach sort convoluted layered top dom new approach seems like working dom native approach nice anyways going back topic search possible alphabeta release angular came across discussion mentioned earlier im far angularjs pro feel input someone learning angular may useful especially scenario developer migrating new stack also ux designer past years ca nt help question experience point reviewing comments came conclusion original proposition probably one like visually standards conform came like example ewinslow recent proposed template approach considered developer like idea using reservedkey words indicate logic html syntax decided modify ewinslow proposition consider contextual slightly less verbose html album albumname j trackname play ten tracks tracks albums playertime", "d": "12/2014"}, {"body": "angular current expressiveness approachability influx people trying web development includes lots devs microsoft community hated web development php devs web designers found could understand angular believe approachability due angular current syntax light syntax minimizes symbols braces parens syntax introduce less approachable error prone become web developer since internet bubble speakertraining see people struggle technologies yet current version angular see successful little way trainingintroduction syntax add less expressive approachable becomes", "d": "12/2014"}, {"body": "agree deborah wed dec pm deborah kurata notifications githubcom wrote angular current expressiveness approachability influx people trying web development includes lots devs microsoft community hated web development php devs web designers found could understand angular believe approachability due angular current syntax light syntax minimizes symbols braces parens syntax introduce less approachable error prone become web developer since internet bubble speakertraining see people struggle technologies yet current version angular see successful little way trainingintroduction syntax add less expressive approachable becomes reply email directly view github r mark volkmann object computing inc", "d": "12/2014"}, {"body": "agree deborahk also think programmers ready learn new things whole life even technology easy understand php newcomers still powerful popular enterprise software world java sure team find good balance happy new year dizzy", "d": "12/2014"}, {"body": "cc vicb vsavkin need support take end week", "d": "12/2014"}, {"body": "already master", "d": "12/2014"}, {"body": "landed", "d": "12/2014"}, {"body": "components inline templates already working", "d": "12/2014"}, {"body": "missing peaces need implemented compiler x recursive components load templates via relative url", "d": "12/2014"}, {"body": "rkirov close", "d": "12/2014"}, {"title": "child components", "body": "hi easy dynamic way adding vuecomponent components also way assign vuecomponent variable see var mycomponents mycomponentsnavbar vuecomponent later mycomponentsnavbar somedatavariables value previous query child components vuecomponent uinavmenus parent uinav later mainapp uinav uinavmenus ever possible would needed somehow accessing variable assigned way accessing child thanks", "num": "661", "d": "12/2014"}, {"title": "binding undefined property works dom updates intermittently", "body": "following code vue instance contains hash tabs property however initially undefined first part html allows change tabs second allows change view value current tab confusing thing click number value change dom however switch tabs switch back dom update jsfiddle copied code well html choose tab key value value almost working behaviour confusing suspect problem view layer nt add currenta dependency initially undefined ideally becomes defined added dependency nt possible warning message indicating binding undefined property screws everything would helpful", "num": "660", "d": "12/2014"}, {"title": "feedback difficulty appending child vm", "body": "really issue rather feedback difficult time appending child vm quite easy simple use case follows js var new vue template root var comp vueextend template child mount documentbody addchild comp appendto el tried code quite figured quite bit arduous passing component configuration would really nice could something like js var b new component append b passing component instance append appendto would call mount append el thoughts workflow", "num": "659", "d": "12/2014"}, {"title": "certain component names cause error doublenested vrepeats", "body": "found naming child component ending input causes error doublenested reason error set property vue undefined complaining though vuejs great", "num": "658", "d": "12/2014"}, {"title": "insertbefore breaking data binding undefined parentnode", "body": "trying solve odd problem thought could work around manually adding items directive element causes error replace method bug expected behavior", "num": "657", "d": "12/2014"}, {"title": "typescript support", "body": "plan add typescript definition file", "num": "656", "d": "12/2014"}, {"title": "fails silently component root element", "body": "see replace set true multi root template could cause param ca nt pass component case comment block cause problem", "num": "655", "d": "12/2014"}, {"title": "subscribers undefine", "body": "vue version encounter error uncaught typeerror read property update undefined pnotify anonymous function anonymous function handler handler happens click dropdown works well jsfiddle example needed extract one", "num": "654", "d": "12/2014"}, {"title": "scoped component", "body": "plan scoped component currently even register component vm level still affecting global would nt makes sense registration affects enclosing template think maintainable way component nt affect example reusing list component built someone else nt want worry item component internally used overrides item component app cents", "num": "653", "d": "12/2014"}, {"title": "multiple event listeners element extension causes error", "body": "something like fails init happens due parent array however expected array", "num": "652", "d": "12/2014"}, {"title": "mustachestyle inline variable nt work used style attribute", "body": "somehow datatest attribute works see action", "num": "651", "d": "12/2014"}, {"title": "similar dom string", "body": "hi know standalone also implement similar style creating dom using function like thanks", "num": "649", "d": "12/2014"}, {"title": "xlink namespace working", "body": "tried write vattr property unfortunately got warning following code according stack overflow link must worked point one problem seen far xlink regex nt match even fixing still getting error line completely misunderstanding issue", "num": "648", "d": "12/2014"}, {"title": "component loses dependency parent vue", "body": "components try replace passed object end shadowing instead updating however setting property individually works correctly see replace properties button properly passes data back parent replacing whole object ends breaking link component parent trying replace object root data new one loaded using ajax", "num": "647", "d": "12/2014"}, {"title": "vcomponent vrepeat render child elements", "body": "update version got unexpected behavior use component vrepeat component repeat children update got parent element read changelog ca nt find information fix issue repeat child span tag repeat parent div", "num": "646", "d": "12/2014"}, {"title": "doc inserted updated attached", "body": "hey find nowhere report doc specific errors component lifecycle every component vue instance lifecycle created compiled inserted attached detached finally destroyed key moments", "num": "645", "d": "12/2014"}, {"title": "reason missing vprop directive", "body": "builtin vprop would convenient modifying dom properties scrolltop", "num": "644", "d": "12/2014"}, {"title": "getting typeerror node undefined compiling vue component", "body": "js fiddle replicates issue basically trying make vue component use bootstrap modal suspect done something js caused error compilation even fault could situation relevant vue error message help users", "num": "643", "d": "12/2014"}, {"title": "number work select", "body": "vmodel number always gets string select changes please see example", "num": "642", "d": "12/2014"}, {"title": "get inner content compile component", "body": "going write common datagrid component sample jsfiddle sample case user wants customise body datagrid rowdataaaa filtera rowdatabbb filterb rowdataccc filterc according vue doc content tag used copy content component two questions get costomized content uidatagrid component javascript file use vm interpolate vm compile compile content dynamically thanks", "num": "641", "d": "12/2014"}, {"title": "change default", "body": "seems components write today need want get idea actual usage think makes sense", "num": "640", "d": "12/2014"}, {"title": "unhandled errors thrown evaluating computed properties getting swallowed silently", "body": "thought would ask sending pull request intentional swallowing exception point prevents reaching thus logged note console blank even though would expect something similar read property property undefined thank", "num": "639", "d": "12/2014"}, {"title": "vmodel", "body": "\u662f\u5426 \u4e00\u76f4\u4e3a", "num": "638", "d": "12/2014"}, {"title": "ca nt set selected value select option groups", "body": "updating backing model option groups nt set selected value see fiddle", "num": "637", "d": "12/2014"}, {"title": "vref update correctly keepalive set dynamic vcomponent", "body": "dynamic directive keepalive set vref update point currently active view model instance works fine keepalive set fiddle demonstrates issue open console see output switching components", "num": "636", "d": "12/2014"}, {"title": "vcomponent attributes thoughts", "body": "hi fiddling lately mostly add features vueroute question come usage vcomponent dynamic directive regarding attributes static behavior would expected component define attributes enable disable use cases pages different transition timing change one hack meh instance want preload disappear showing website outin want pages inout page heavy computation webgl module instance nt want recreate time would use one keepalive store components waste memory would need webgl module know footprint big highlighting could avoid storing webgl stuff global var nt get gced ai nt nobody got time vm waiting global preloader waitfor event problem time vm instanciated wait event even though preloader comes website bootstrap could fix testing instance best thing requests felt like putting thoughts use vue build websites amp experiences rather webapps although line close use cases little specific anyway hit keep good work loving far", "num": "635", "d": "12/2014"}, {"title": "issue updating dynamic select options", "body": "hi able update options array dynamic select seems javascript error thrown causing execution stop error uncaught typeerror read property childnodes undefined see fiddle reproduce", "num": "634", "d": "12/2014"}, {"title": "use inplace overwrite primitive values", "body": "could result less code consistent behavior", "num": "633", "d": "12/2014"}, {"title": "vfocus directive", "body": "programmatically focus input elements", "num": "632", "d": "12/2014"}, {"title": "may bug twoway directive", "body": "define twoway directive use set function bind error ca nt read property set undefined code follows javascript vuedirective tags twoway true bind function var selfthis consolelog self selfel itemadded function selfset val", "num": "631", "d": "12/2014"}, {"title": "components receive uncompiled version", "body": "possible pass child component compiled version tried following seems contain static elements work way", "num": "630", "d": "12/2014"}, {"title": "data available context component", "body": "created fiddle also noticed run instead works expected ps confirmed issue appears starting since", "num": "629", "d": "12/2014"}, {"title": "\u592a\u597d\u4e86\u4f5c\u8005\u662f\u534e\u4eba", "body": "javascript var scheduleoptions \u57fa\u7840\u8d44\u6599\u5b8c\u5584\u4e2d \u57fa\u7840\u8d44\u6599\u5df2\u5b8c\u5584 \u8be6\u60c5\u5b8c\u5584\u4e2d \u8be6\u60c5\u5df2\u5b8c\u5584 \u5b9a\u4ef7\u4e2d \u4ed3\u5e93\u4e2d \u9500\u552e\u4e2d \u552e\u99a8 \u5df2\u4e0b\u67b6 new vue el cards data goods id name image event false \u662f\u5426\u53c2\u4e0e\u6d3b\u52a8 cats \u5206\u7c7b gprice \u5e73\u53f0\u4ef7\u683c gmarketprice \u5e02\u573a\u4ef7 gcost \u4f9b\u8d27\u4ef7 storagesq \u5e93\u5b58 isstock false \u662f\u5426\u5165\u5e93 scheduleoptions scheduleoptions schedule id name \u4f73\u80fd image event false cats \u5206\u7c7b gprice \u5e73\u53f0\u4ef7\u683c gmarketprice \u5e02\u573a\u4ef7 gcost \u4f9b\u8d27\u4ef7 storagesq \u5e93\u5b58 isstock false \u662f\u5426\u5165\u5e93 scheduleoptions scheduleoptions schedule methods modify function id limitscheduleoptions value \u5bf9\u5e94 scheduleoptions \u95ee\u9898\u4e8c \u6539\u4ef7 \u95ee\u9898\u4e09", "num": "628", "d": "12/2014"}, {"title": "best way share globals vars", "body": "willing drop current angular app wondering use vue context want share global infos like user name counters etc shall reproduce layout angular got main app linked body impact performance vue shall avoid fastersaferbetter simply use global app variable attached window every view object able access data part model know exists subviews question recommended considering perf maintainability put issue linked documentation chapter like managing larger apps thanks", "num": "627", "d": "12/2014"}, {"title": "vattr takes one attribute used globals", "body": "made fiddle big issue since bottom solution works wanted give hint open console inspect dom see first input render attribute second input correctly renders", "num": "626", "d": "12/2014"}, {"title": "camelcase attribute params propagated child component", "body": "js var vm new vue template data showclosebutton true components xdialog template close paramattributes showclosebutton vm mount vm appendto documentbody vmshowclosebutton false assertequal vm elinnertext result", "num": "625", "d": "12/2014"}, {"title": "param number vmodel working", "body": "param number vmodel working", "num": "624", "d": "12/2014"}, {"title": "value defined using vcomponent vrepeat since", "body": "title somewhere adding directive like situation described array primitives means value longer accessible jsfiddle used work vue jsfiddle works vue notice buttons top text later version value undefined also note click top buttons event handler works old version new", "num": "623", "d": "12/2014"}, {"title": "circular dependency observed properties", "body": "two properties model depend run loop want update one avoid seen property twoway binding directives case tried set property observer effect", "num": "622", "d": "12/2014"}, {"title": "unexpectedmissing directive values", "body": "trying pass strings arguments directives without values defined cases nt expecting examples could misunderstanding part rather bug documentation issue confirm", "num": "621", "d": "12/2014"}, {"title": "js transition enter function needs extra initialization", "body": "example clicking container content box expected shown slidedown shown immediately default show operation think due function executed line file know works expected uncomment line jsfiddle intended behavior", "num": "620", "d": "12/2014"}, {"title": "dynamic select options default options", "body": "", "num": "619", "d": "12/2014"}, {"title": "weird html escaping triplebraces", "body": "one actually loading html", "num": "618", "d": "12/2014"}, {"title": "event listener defined nested vue ignored", "body": "code show confusion expected click element method defined vue called actually one seems methods defined inner vue ignored matter outer vue defined method name intentional behavior read model inheritence document found nothing concerning methods", "num": "617", "d": "12/2014"}, {"title": "paramattributes handle attribute change", "body": "result", "num": "616", "d": "12/2014"}, {"title": "passing array objects child component via attribute fails", "body": "hello upgrading ca nt pass correctly array objects parent child component working example working working sure seems value passed string", "num": "615", "d": "12/2014"}, {"title": "caching arrays using trackby vrepeat", "body": "arrays cached using trackby put component cache repeatjs bunch nested view models contain arrays change position parents tracked property arrays lost see storing data property", "num": "614", "d": "12/2014"}, {"title": "vrepeat loop across object", "body": "finding ca nt use object vrepeat vm reference flavour manages iterate right number times access properties keys first time nest another vrepeat use object presumably gets new vm contrast arrays seem work every time fiddle", "num": "613", "d": "12/2014"}, {"title": "html directive working starts", "body": "snippet html starts bound using html directive template parser interprets id template", "num": "612", "d": "12/2014"}, {"title": "vclass vcomponent replaces component class", "body": "instead appending fiddle expecting got", "num": "611", "d": "12/2014"}, {"title": "destroy throws error", "body": "components use subcomponents partials throw error destroy result", "num": "610", "d": "12/2014"}, {"title": "view listening components transitions destroy", "body": "hi looking convenient clean way solve problem main view implementing components want view wait components finishes transition main view destroyed way defer destroy process main view triggered instance route change thanks", "num": "609", "d": "12/2014"}, {"body": "html key value value", "d": "12/2014"}, {"body": "tried appears worked able use jquery without well sure bug might help someone", "d": "12/2014"}, {"body": "answer question maybe interested discussion gist basic defintion file far complete", "d": "12/2014"}, {"body": "scoped available children", "d": "12/2014"}, {"body": "aha make sense love", "d": "12/2014"}, {"body": "thanks", "d": "12/2014"}, {"body": "known issue ie browsers recommended use instead", "d": "12/2014"}, {"body": "mean want virtual dom vue looking standalone virtual dom implementation", "d": "12/2014"}, {"body": "virtual dom vue", "d": "12/2014"}, {"body": "virtual dom vue interesting concept quite different vue current templating strategy realdombased thinking nt see practical implementation without completely overhauling api would feel like different project wo nt happen near future", "d": "12/2014"}, {"body": "thanks man looking forward", "d": "12/2014"}, {"body": "need wrap quotes vue nt treat colon argument separator", "d": "12/2014"}, {"body": "expected behavior current version oneway moment however become twoway next release code would work", "d": "12/2014"}, {"body": "awesome thanks ideas date converting ractivejs due problems templating engine trying figure make code update properties continue conversion knowing work correctly time done converting thanks much vuejs love templating speed ease use", "d": "12/2014"}, {"body": "likely christmas", "d": "12/2014"}, {"body": "related component scope change since belongs parent scope need inject explicitly using really want maybe put child component template", "d": "12/2014"}, {"body": "thank fix code please feedback understanding mistaken smile", "d": "12/2014"}, {"body": "thanks want make pr", "d": "12/2014"}, {"body": "yes ticket closed pr opened", "d": "12/2014"}, {"body": "guess simple one would good enough define function use strict need check assign guess leaves flexibility developer", "d": "12/2014"}, {"body": "thing watch filtered security", "d": "12/2014"}, {"body": "tmiguelt dealing third party js like bootstrap jquery usually find best separate logic regarding items vm events like way keep track modal state simultaneously calling appropriate bootstrap methods show modal also may want read mvvm guides also take another look vue docs way trying use computed properties little wrong generally used display purposes modifying state actions paramattributes also noted using vue want try stay away manipulating dom libraries like jquery would much better maintainability wise dom state controlled vue", "d": "12/2014"}, {"body": "still nt explain error none code actively break vue even slightly better way honestly ca nt see issue using computed properties like getterssetters trigger logic changed plus toggle function nt option need actively set visibletruefalse rather toggling opposite value", "d": "12/2014"}, {"body": "michaelliao believe select returning string value select different value see mean", "d": "12/2014"}, {"body": "yes also returns string converted number vuejs number specified", "d": "12/2014"}, {"body": "yeah currently nt support param fix", "d": "12/2014"}, {"body": "updated using vm interpolate render td compile render inner component advice thanks", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "rarely use default behaviour", "d": "12/2014"}, {"body": "nt started converting rather large app yet thing least looking forward", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "replacetrue makes sense always creating one extra layer breaks readability semantic structure html", "d": "12/2014"}, {"body": "cool since breaking change probably wait though", "d": "12/2014"}, {"body": "hand woult possible pass template prevent component replacing node html ie html content like thefooter use template possible", "d": "12/2014"}, {"body": "say less components use replace true go code base get accurate number wednesday december florian morel notifications githubcom wrote hand woult possible pass template prevent component replacing node html ie content like thefooter use template possible reply email directly view github", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "ayamflow reckon want pick old element lifecycle callback attach created also may able pick embedded template using hash tag starts used queryselector use selected element innerhtml template string allows use common trick include templates", "d": "12/2014"}, {"body": "normanzb use case easy seo footer stuff nt want use embedded templates javascript manipulation basically", "d": "12/2014"}, {"body": "thanks original intention allow simple paths like fail silently property present computed properties indeed seems undesired behavior", "d": "12/2014"}, {"body": "computed property", "d": "12/2014"}, {"body": "putting inside", "d": "12/2014"}, {"body": "thanks fixed", "d": "12/2014"}, {"body": "hey evan unfortunately still working tested branch property tracked set clone repo build dev webpack see happening", "d": "12/2014"}, {"body": "works expected", "d": "12/2014"}, {"body": "moved vuejsdiscussions", "d": "12/2014"}, {"body": "really sure code works binding attribute readonly according mdn fairly sure best way according html spec dyamically modify elements using vue use directive html text fiddle", "d": "12/2014"}, {"body": "tmiguelt vue feature also using attribute different property jmooresparc still put inside using dynamic options using dynamic options nt put anything inside gets rid error example", "d": "12/2014"}, {"body": "see thank situation updaing options object ajax request based different input values change one inputs performing ajax call modifying options object result", "d": "12/2014"}, {"body": "still running issues removing initial", "d": "12/2014"}, {"body": "initial issue unfortunately build good bit initial html server come client populated hybrid returning html vue take causes types problems nt think vue issue resolved end modifications generate", "d": "12/2014"}, {"body": "give example", "d": "12/2014"}, {"body": "purely internal implementation note", "d": "12/2014"}, {"body": "think left user space", "d": "12/2014"}, {"body": "okie dokie", "d": "12/2014"}, {"body": "even try example guide also errors uncaught typeerror read property set undefined", "d": "12/2014"}, {"body": "yeah bug give empty function work also fixed branch", "d": "12/2014"}, {"body": "content compiled parent scope", "d": "12/2014"}, {"body": "mean amp nt belongs parent scope following value number index", "d": "12/2014"}, {"body": "case first compiled parent scope injected child component since parent scope nt empty different use without component", "d": "12/2014"}, {"body": "got thank", "d": "12/2014"}, {"body": "issue following since everything parent template compiled parent scope well content going inserted child component", "d": "12/2014"}, {"body": "jails thanks replying quite sure understand tag inherit container component scope case since separate vue component scope ie acts separate component might missing something maybe working example fiddle provided would help understand new behavior basically want elements get inserted scope containing instance", "d": "12/2014"}, {"body": "data belongs component scope write way otherwise data belongs parent scope write way hope help", "d": "12/2014"}, {"body": "hmmm intention though want wrap dynamically inserted block markup inside template data instance ready used dynamically inserted block example template html count use way final template html count showing count count given returns data interpolated output look like html showing count works newer releases maybe shed light whether attempting done", "d": "12/2014"}, {"body": "new mechanism explained short semantics block changed uncompiled template injected parent already compiled content injected parent might need rethink expect work case showed fiddle assume trying dynamically inject uncompiled template component achieve template somewhere eg pass id paramattribute hook replace placeholder template content leverage returns cloned fragment template", "d": "12/2014"}, {"body": "hmmm kinda sucks feel great flexibility content insertion mechanism longer situation example control template replacing block plugin used others structure template working components latter child first surely get work using suggestion think usefulness reduced quite bit personally would much rather work way new scope inheritance mechanism ca nt really think use case would need inject content interpolated parent scope child component opinion thanks taking time explain change", "d": "12/2014"}, {"body": "simple idea parent component template coupled state child component except explicitly passed via makes easier reason scoping larger applications", "d": "12/2014"}, {"body": "bit created loading component tried use like html loading belong every view component since nt work forced repeat axloader declaration inside every component template", "d": "12/2014"}, {"body": "thelinuxlich need repeat right case make loader partial replace", "d": "12/2014"}, {"body": "need put every component okay cause logic insertion point ca nt see replace vpartial", "d": "12/2014"}, {"body": "might missing something else way compiled makes much sense useful right ca nt see good reason block components template dynamic block compiled scope parent component inserted instead scope component inserted think option choose want interpolation happen scope containing component would great sure would possible ways", "d": "12/2014"}, {"body": "nvm saw understand decision adopt approach although replacing raw uncompiled block nested useful personally suggestion emulate pre behavior able replace tag beforecompile seems like point already transcluded", "d": "12/2014"}, {"body": "closing discussion behavior still open continued", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "html", "d": "12/2014"}, {"body": "\u4e3a\u6bdb\u6ca1\u4e0b\u6587\u4e86", "d": "12/2014"}, {"body": "jsfiddle", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "html", "d": "12/2014"}, {"body": "click modify limitid \u6211\u8981\u83b7\u53d6\u5f53\u524dlimitid", "d": "12/2014"}, {"body": "\u76f4\u63a5 \u4e0d\u5c31\u884c\u4e86\u561b", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "modify limit data \u7684\u8bdd\u83b7\u53d6\u7684\u5230\u7ed3\u679c\u662f undefined", "d": "12/2014"}, {"body": "\u54e6\u662f\u6211\u5f04\u9519\u4e86 \u76f4\u63a5 \u5e94\u8be5\u5c31\u53ef\u4ee5", "d": "12/2014"}, {"body": "methods modify function consolelog dname smalltestmodal modal show \u663e\u793a\u4e00\u4e2a\u5f39\u7a97 new vue el smalltestmodal data name dname gcost dgcost", "d": "12/2014"}, {"body": "modal directive modal modify \u91cc\u9762\u7ed9\u5b83\u8bbe\u7f6e\u65b0\u7684 \u8fd9\u91cc issue \u4e3b\u8981\u662f bug \u548c feature", "d": "12/2014"}, {"body": "recommended approach share global vars pass root component root vm linked problem angular handle vue definitely", "d": "12/2014"}, {"body": "great thanks answer", "d": "12/2014"}, {"body": "interesting actually global symbol explicitly allowed expression parser expression simple keypath vue uses faster keypath parser treats path segment added check special case", "d": "12/2014"}, {"body": "html attributes differentiate upper lower case attribute actually treated get around use dash case paramattributes vue auto convert camel case setting data", "d": "12/2014"}, {"body": "thanks see api docs however intuitive maybe warning use paramattribute camel case would good idea", "d": "12/2014"}, {"body": "good idea added", "d": "12/2014"}, {"body": "perfect thanks", "d": "12/2014"}, {"body": "oh works limit inputing numbers", "d": "12/2014"}, {"body": "want limit input numbers add trigger native browser behavior", "d": "12/2014"}, {"body": "tried chrome also input words way found bug work eg work since eg work since", "d": "12/2014"}, {"body": "try jsfiddle edge version send link working either", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "oh breaking change see blog post fixed version", "d": "12/2014"}, {"body": "great thank", "d": "12/2014"}, {"body": "see first change basically using component anything parent template compiled parent scope case need put child component template", "d": "12/2014"}, {"body": "would rethink design two computed properties depending one another constraint look like", "d": "12/2014"}, {"body": "simplified looks like svg shape reacts hammerjs inputs pan rotate scale inputs trigger calculation transformation matrix render shape accordingly proplem far component also hasneeds sort public api properties like use values initialize transformation shape values properties also feed bindings eg rendering text rotation need observed two inputs entering single function finally updating two similar things hammer updating matrix updating properties api setting eg property updating matrix updating properties investigated topic bit looks like common problem common edge case knockout something called deal peek function lets access observable computed observable without creating dependency watchtowerjs observersystem upcoming angular faces similar issue", "d": "12/2014"}, {"body": "nt quite understand circular dependency use case though", "d": "12/2014"}, {"body": "two possible events function called unified parameters recalculate matrix also rotation keep sync updating rotation meens triggering watcher keep two inputs completely seperated buisnesslogic eg updating shape etc triggered", "d": "12/2014"}, {"body": "make matrix computed property depends transform properties modify transform properties finally matrix apply bind directive seems could oneway data flow", "d": "12/2014"}, {"body": "thanks suggestion patience think see direction move moment seems lead similar problems multitouch gesture updates three properties translation rotation scale trigger three watcher run matrix calculation three times different values one another maybe combine single object one deep watching observer said many thanks help", "d": "12/2014"}, {"body": "indeed new design trick small drawbacks close want nevertheless really belive situations developers face circular triangular dependencies well vuejs fantastic", "d": "12/2014"}, {"body": "glad works thing even circular dependency eventual value able stabilize additional iteration vue stop new evaluated value otherwise probably problem design actually helpful look problem functional way ie eventual needed value derived raw values oneway dataflow", "d": "12/2014"}, {"body": "function called data observed hence value right data observed function called first time value set time", "d": "12/2014"}, {"body": "makes sense seems like option nt useful getting access directive arguments inconsistent example isliteral set true nonexpression argument argument accessed via bind method isliteral set true expression argument mustaches argument available via argument bind update methods isliteral set true expression argument filter value available via bind method noncalculated state update called cases bind value undefined mentioned doc suggests value argument available designed", "d": "12/2014"}, {"body": "code behaviors intended forgot update descriptions custom directive functions upgrade updated basically called data binding finished immediately called first time initial value", "d": "12/2014"}, {"body": "probably jquery works done leaves element state element enters simply setting element css property initial value clears inline styles element imagine calling already shown element wo nt anything", "d": "12/2014"}, {"body": "thank reply really enjoy using vuejs yes know mean also noticed guide page tried express necessity kind writing point may intuitive displaying process left done function know simple make function jsjs shared", "d": "12/2014"}, {"body": "display part different different directives setting could operations part intentionally abstracted transition logic applied everywhere", "d": "12/2014"}, {"body": "understand intention thanks", "d": "12/2014"}, {"body": "\u53ea\u8981\u5728 data \u91cc\u7ed9 loves \u6240\u6307\u5411\u7684", "d": "12/2014"}, {"body": "want nested view need register component use invoke parent code created outer vm already compiled whole dom inner vm created basically nothing make sure read component section guide", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "reproduce", "d": "12/2014"}, {"body": "closing nt really need use option use case", "d": "12/2014"}, {"body": "refactoring fixed commit", "d": "12/2014"}, {"body": "closing discussed gitter", "d": "12/2014"}, {"body": "tried used jqueryui conjunction sortable items got deleted every time moved one sortable list another nt know yet worked poorly try make js fiddle next days showing", "d": "12/2014"}, {"body": "jsfiddle showing sortable items get deleted sorted still nt figured turns happening regardless using", "d": "12/2014"}, {"body": "honest nt clear vision best approach prefer keep separate layer possibly mixin provides easy integration via instantiation options", "d": "12/2014"}, {"body": "moving vuejsdiscussions", "d": "12/2014"}, {"body": "actually much simplier actual connection contenteditable needed connecting mutationobserver contenteditable set", "d": "12/2014"}, {"body": "mutationobserver available everywhere though nt make sense vue include mutationobserver polyfill feature", "d": "12/2014"}, {"body": "also whenever try set property starts sign get warning message properties set view model instance happens component instances children another component ex child set property grid instances column nested grid using vue", "d": "12/2014"}, {"body": "make fiddle reserved key problem", "d": "12/2014"}, {"body": "hmm difficulties reproducing problem jsfiddle release npm exact code cdnjs dist edit well replaced npm vue package cdnjs source exposing vue global instead problem gone still like know npm package latest code though cdnjs release newer", "d": "12/2014"}, {"body": "weird though maybe create cloneable repo using npm version demonstrates issue", "d": "12/2014"}, {"body": "ok repo problem clone npm install get vue webpack also uncomment script tag includes cdnjs version comment requiring vue mainjs file build see problem go away although cdnjs version issue nt merge reserved properties component nested within another component case column inside grid", "d": "12/2014"}, {"body": "hah actually using minified production version cdn suppresses warnings reserved key warning leftover old design longer needed removed", "d": "12/2014"}, {"body": "oh wow well hopefully last question issue supposed work non observed keys able retrieve using", "d": "12/2014"}, {"body": "afraid limitation work reserved keys proxied vm internal methodsproperties retrieved via called vm possible prototypal inheritance parent scope", "d": "12/2014"}, {"body": "understandable", "d": "12/2014"}, {"body": "closing inactivity", "d": "12/2014"}, {"body": "must another issue play reproduce outside code", "d": "12/2014"}, {"body": "inactivity", "d": "12/2014"}, {"body": "closing inactivity", "d": "12/2014"}, {"body": "made gist pattern use basic definition file use vueprojects works perfect even subclassing got even better ts modifier although say holy grale truth made nice comparisson two possible aproches sum perspective use straight forward almost benifits plain js misuse small hack get benifits ts like intellisense think second approach done like shown gist way superior writing definition files always weak point using ts passion write keeping uptodate constant work classapproch get definitions writing code stays sync development said ts vue make significant move towards depends paradigm hacks affort think making vue fit ts wont painless affects parts code fully oversee would maybe also worth trouble", "d": "12/2014"}, {"body": "used create custom components behaving like form inputs using vwith eg would switch component could use like concept keeping parent scopes untouched makes sense except seems way reproduce inputtype behaviours using components nt find another way would great way using vmodel custom components suggestions", "d": "12/2014"}, {"body": "inside although maybe could old", "d": "12/2014"}, {"body": "use inside component template still gon na reference child property clone right manually watching value change operating parent using quite dirty one sure understand reasoning behind change whole point vm library performs bidirectional binding maintaining accurate representation decoupled data imposing hierarchical flow architecture javascript ca nt modify original variable outside function within mutate object passed sure understand mean eg javascript root scope var rootvariable foo parent scope function var parentvariable consolelog rootvariable bar", "d": "12/2014"}, {"body": "mean js var rootvar var rootobj function child parentval parentvala parentval child rootvar consolelog rootvar child rootobj consolelog rootobja pass object indeed mutate child component ca nt change parent reference", "d": "12/2014"}, {"body": "ok example makes sense think context vm library handling bidirectional binding key allow form inputs manipulate source data components access parent scopes nt see big difference semantics form input comes preexisting component library applies custom behaviour html tag custom ui component level access right", "d": "12/2014"}, {"body": "thinking tend agree oneway restriction unnecessary likely reverted next point release", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "able reproduce working sorting library looks like sorting last item list vrepeat comment node moved end beginning vrepeatordered list exception occurs try put together reproduction case", "d": "12/2014"}, {"body": "example reproduction steps seems like sorting library responsible comment getting moved could vue protect error anyway way could define repeat depend comment retaining position within list", "d": "12/2014"}, {"body": "impractical vue add comprehensive support every input type possible extend adding custom handlers reference implementations found", "d": "12/2014"}, {"title": "collection issue", "body": "backbone app model nested collections models structure javascript layout extends backbonemodel gt sections new sections extends backbonecollection section extends backbonemodel gt rows new rows extends backbonecollection two section model layout go add row model one sectionrows collection adding sections btw adding view event thanks advance", "num": "3429", "d": "12/2014"}, {"title": "backbone route permission denied", "body": "project permission denied exceptions code like problems put function another router project permission denied exceptions eg", "num": "3428", "d": "12/2014"}, {"title": "urierror parsing url params encoded encodeuricomponent", "body": "appears decodeuri called urls extractparameters calls decodeuricomponent params extracted url cause urierror param already partially decoded contain character would nt legal uri example url fix works us though confident tested router backbone history options using", "num": "3426", "d": "12/2014"}, {"title": "address bar shows mobile safari calling routernavigate", "body": "sure bug seems always router updates url safari shows address bar possible somehow disable backbone", "num": "3422", "d": "12/2014"}, {"title": "view attributes recalculate render", "body": "hi nt know bug purpose nt seem like attributes recalculated views rendered simple use case list views handling selection base model childviews want set ariaselected attribute view element based model property seems doable callback render would great could specify attributes function recalculated every time view renders makes sense seems obvious wonder overlooked makes stupid thing", "num": "3418", "d": "12/2014"}, {"title": "error folder creation vm", "body": "getting error cloudera vm error please help thanks advance", "num": "3417", "d": "12/2014"}, {"title": "left scrollbar working safari os x yosemite", "body": "debugging issue also checked backbonejsorg see sites issue", "num": "3416", "d": "12/2014"}, {"title": "create register new user ejabberd ejabberd client like xmpppy sleekxmpp using api call", "body": "", "num": "3414", "d": "12/2014"}, {"title": "collectionset iteration tests variable model iteration", "body": "hello thanks work see version see collectionset see loop l modelslength lt l iteration line suppose attrs instance model gt variable model set line variable model set iteration line suppose attrs instance model gt variable model changed line test attrs attrs model modelattributes attrs gt attrs iteration test model iteration", "num": "3413", "d": "12/2014"}, {"title": "collections wiped responses models parsed", "body": "type bug description backbone wipes collections responses returned server calling andor collection models parsed may harmless certain situations expected behavior backbone empty collection backbone nt call parse model still triggers event situations wat response servers configured return modified response response means version resource server one client behavior distinct clientside caching typically means making ajax request serverside caching typically means hitting database sometimes even application interfacing database rather like handshake client server feature work according specification server client must configured appropriately server must store one two things resource time last modified etag etag unique identity resource given url note completely independent arbitrary caching times configured server modified dates etags must reference specific versions resources request made client api always return full resource unless one two headers passed header header headers correspond computed last modified timestamp etag value server respectively server use values determine whether client outdated version resource server determines resource changed returns response cares right well final piece response contains empty body problems backbone stem situation client supposed keep current version resource whole process convenient blog post may better job explaining details backbone go wrong backbone goes wrong always sets data successful callback even responses return data collections get wiped due behavior models get called inefficient could reasonably throw errors nt checking empty responses within nt enough information determine whether actually empty response method never relied upon make distinction hooks prevent make work backbone wraps success callback pass success callback erases data way get around wrap backbone wrapped method overriding example way works updates empty response value cached sets response time backbone code accesses nt even realize response actually empty fine standpoint functionality still causes unnecessary code executed ideally nothing happens backbone saying ok ur good firing success callbacks see example following example use jquery option configure jquery automatically manage caching us means jquery automatically send appropriate headers along every request words handles client side things us also use github api configured manage server role feature see backbone wipes collection second fetch wherein server informs us resource uptodate js configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url var gists new gists fetch twice log length fetch gistsfetch function logs consolelog first fetch gistslength gistsfetch function logs consolelog second fetch gistslength switching things bit create model parse called unnecessarily situation problem data remains parse function nt checking responses nt think might calculate incorrect data js configure jquery backbone ajaxsetup ifmodified true define instantiate model w parse var model backbonemodelextend url parse function data consolelog parse called return data var model new model fetch twice log attributes fetch modelfetch function consolelog first fetch modelattributes modelfetch function consolelog second fetch modelattributes fix one idea revert reverted pred pr braddunbar gives counterexample shows backbone appearing functioning correctly issue example twofold server following specification return resource nt changed based headers arbitrary caching times correct response situation response data caching layer nt exist even server returned correct response empty unreasonable conceive situations could cause method error otherwise calculate incorrect value concerns pr pr requires specific convention using models model created destroyed reason pr provide new hooks fetch data cache rather assumes current version model still data last fetch jquery fetches uri get rid model instance otherwise make new one unable get new data model unless reference original model external cache fine apps use backbone maybe folks destroying instantiating models point uri", "num": "3412", "d": "12/2014"}, {"title": "collectionget model id eg constructor", "body": "ran issue today collection terms generated body text contained model interfaces object call get back constructor object could certainly work around issue something like wanted ask first see behavior expected might convenient add safeguard", "num": "3411", "d": "12/2014"}, {"title": "unsaved attributes available model via overridden methods save wait true", "body": "looking changes occurred fix saving wait true understand expected behavior working however unsure correct fix implemented would assume expected behavior saving model attributes touched way backend responds current behavior temporarily sets attributes property model new attributes sets asynchronous call resets attributes looks fine good looking progression code initial fix solidified given home believe interesting inconsistencies introduced namely since methods available via model prototype overridden technically access model attributes invalidnot yet saved use case use name attribute well id attribute determine model save fashion method evaluate since name temporarily saved changing value synchronize thus calling update post occur realize examples relies stretching intent believe best exemplifies issue think used cloning via extend model attributes passed attributes sending call via would preferred realize probably theoretical fundamental reasons ie nt using save attributes new models implementation made would love better understand however think appropriate prototype methods overridden see attributes model told via set heard back backend", "num": "3409", "d": "12/2014"}, {"title": "model method without prototype backbonecollection causes crash", "body": "discussed previously however discussed context think confused discussion issue actually happens whenever function lacks property example var mycollection backbonecollectionextend initialize function thismodelprototype null new mycollection backbone errors line nt exist obviously people would write lot people might write also removes prototype backbone able handle case seems like pretty straightforward line also check existence think", "num": "3408", "d": "12/2014"}, {"title": "plans roadmap", "body": "wondering plans roadmap schedule maybe list future features many thanks", "num": "3405", "d": "12/2014"}, {"title": "backbone support blob datatype", "body": "lack support blob data type like images pdf etc inconvenient unpleasant experience support would awesome thing kitty indeed much need thingy imho", "num": "3404", "d": "12/2014"}, {"title": "release schedule", "body": "wondering release schedule plans next release backbone reason asking current release writing bug models custom fix master specify collection without new release dependency tools like bower wo nt get unless point master nt want", "num": "3403", "d": "12/2014"}, {"title": "best way show data database leaflet pop", "body": "good day wan na ask little question ahmm show data database leaflet pop code php select command date usertime address lat lng iconname tblmarker rs db query sql rs echo sql error occuredn exit rows array r rs fetch pdo fetchassoc rows r name r name userdate r userdate usertime r usertime address r address iconname r iconname print jsonencode rows db null code showing marker map database function getinfo getjson getinfophp function data var lt datalength var location new llatlng data lat data lng var marker new lmarker location icon var markergetlatlng markerbindpopup name userdate usertime address iconname addto map thought works refresh marker database shows map click marker pop pop shows like name userdate whats wrong code missing something tyfh ia", "num": "3402", "d": "12/2014"}, {"body": "hi spyropress please use mailing list stackoverflow questions github issues maintaining framework", "d": "12/2014"}, {"body": "think issue cant use default param use initialize function model set property new collection backbone cloning default attributes javascript pass value reference clone defaults well", "d": "12/2014"}, {"body": "hard tell issue looks like may misunderstanding way javascript prototypes work example demonstrate js var model backbonemodelextend items var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems references objects stored prototype shared amongst instances js var model backbonemodelextend initialize function thisitems var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems", "d": "12/2014"}, {"body": "doubt research let us know", "d": "12/2014"}, {"body": "giving thought totally understand inappropriate thanks reasonable gatekeeper jashkenas", "d": "12/2014"}, {"body": "cheers buddy", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "reproduce though scrollbar safari safari version yosemite", "d": "12/2014"}, {"body": "steps reproduce right side scrolled top page scroll right side page anywhere nt scroll top page table contents scroll even apparent scroll table contents first scroll right side", "d": "12/2014"}, {"body": "clarify scrollbar content left column scroll mouse scroll wheel", "d": "12/2014"}, {"body": "ahh thanks jridgewell reproducing", "d": "12/2014"}, {"body": "remember problem safari ios idea carried desktop looks like whatever focused clicked last control scroll really bug safari since works fine every browser click one elements drag scroll bar scroll bar focus", "d": "12/2014"}, {"body": "would rather set beginning loop necessary since case take second condition ternary", "d": "12/2014"}, {"body": "concerns pr written application success callback provided still called app could perform update cache needed would think typical usecase namely use ifmodified flag situations know still old data loaded refresh changed scenario nt want overburden default backbone sync code cache handling something could added consensus folks think needs provide better caching hook ok stands reasonable job solving problem thanks thorough presentation issues", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url parse function data consolelog data return data var gists new gists fetch twice log length fetch gistsfetch function consolelog gistslength return gistsfetch function consolelog gistslength gists new gists fetch function consolelog gistslength var gist backbonemodelextend urlroot parse function data consolelog data return data var gist new gist id fetch twice log attributes fetch gistfetch function consolelog gistattributes return gistfetch function consolelog gistattributes gist new gist id fetch function consolelog gistattributes think comes differences unset attributes default removes models default getting second request one returns called since unset default model attributes changed called since removes default collection models removed jashkenas braddunbar worth changing behavior stopgap use prevent models removed present json response javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url var gists new gists fetch twice log length fetch gistsfetch function logs consolelog first fetch gistslength gistsfetch remove false function logs consolelog second fetch gistslength concerns think scope backbone going need sort caching layer catches sets data whatever returned last time cache stopgap use fetching first time", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections true true explicit two problems called returned passing empty data models collections collections likely wiped problem ca nt differentiate actually empty data simply nt enough information action think comes differences model set collection set right second problem affects collections worth changing behavior nt think anyone wants behavior change suggesting stopgap stopgap proposed insufficient handle problem sure works example data nt changed server imagine situation delete gist two requests get response gists collection updated reflect change option passed going need sort caching layer catches sets data whatever returned last time cache true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer stopgap use collectionfetch ifmodified false fetching first time ca nt imagine anyone would want use sometimes passing first time noop system works first request", "d": "12/2014"}, {"body": "nt think anyone wants behavior set change suggesting arguing either saying would stop collection wiped would directly mirror new models would added akin new attributes added existing models would updated akin existing attributes updated removed models would left alone akin removed attributes ignored data nt changed server imagine situation delete gist two requests still want data match exactly true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer nt solve issue second instantiation meant fetching first time javascript var gists new gists gistsfetch var new gists empty passing first fetch would grab new data needed second instance caching layer would solve since empty response body would replaced original request", "d": "12/2014"}, {"body": "ah gotcha thanks clarifying jridgewell", "d": "12/2014"}, {"body": "jmeas call fire event collections model attached deleted", "d": "12/2014"}, {"body": "stephanebachelier elaborate mean understand destroy works sure relates convo", "d": "12/2014"}, {"body": "jmeas nt remember say forget cite know sure know destroy works answer probably complete request collection destroy model collection server informed requesting first collection trigger collection changed", "d": "12/2014"}, {"body": "brought numerous times", "d": "12/2014"}, {"body": "yep thanks jmeas general nt using arbitrary strings model ids stick backendgenerated integers uuids fine", "d": "12/2014"}, {"body": "jmeas thanks assumed worked like given tradeoff simplicity thoroughness seems backboney favor simplicity mention performance", "d": "12/2014"}, {"body": "please submit failing test case demonstrates undesirable behavior glad merge discuss", "d": "12/2014"}, {"body": "think bigger issue model function returns instance meant could fixed making since uses reference model handy since released would easy make change", "d": "12/2014"}, {"body": "actually issue would method", "d": "12/2014"}, {"body": "always little curious nt receive model instance might handy pr setting nt think supporting really necessary functions property object anything else nt seem like good javascript", "d": "12/2014"}, {"body": "jridgewell return functions without property sure functions thing saying anything else nt seem like good javascript flies face underscorejs library", "d": "12/2014"}, {"body": "johnfn trying bind function anyways", "d": "12/2014"}, {"body": "thejameskyle wanted use property set inside", "d": "12/2014"}, {"body": "hmm make sense potentially change constructor way nt functions return model instances correct", "d": "12/2014"}, {"body": "obviously people would write thismodelprototype null lot people might write thismodel bind thismodel also removes prototype backbone able handle case read code jumped discussion sorry finished reading changing would nt worse thing", "d": "12/2014"}, {"body": "jridgewell nt see helps", "d": "12/2014"}, {"body": "guard null return default though think edge", "d": "12/2014"}, {"body": "means still problem custom bound method function returns model instance", "d": "12/2014"}, {"body": "deemed acceptable trying get rid error base think going end left define custom going provide true constructor function hell lot better setting landed", "d": "12/2014"}, {"body": "since released potential pass model handle use case better although sure handle use case storing reference various container looking", "d": "12/2014"}, {"body": "realize forgot access also thinking make sense takes model attributes since id really dependent attributes etc may places using unnecessary though since always date", "d": "12/2014"}, {"body": "jridgewell essentially exists today update collections could determine uniqueness ids instead models see", "d": "12/2014"}, {"body": "moral story avoid especially nt bind unnecessary calls already get passed correct native functionprototypebind nt give result proper prototype instance need rethink way modelid works", "d": "12/2014"}, {"body": "nt binding binding always gets called", "d": "12/2014"}, {"body": "ok issue johnfn collection looked like instead also expect work right js var mycollection backbonecollectionextend initialize function thismodelprototype null", "d": "12/2014"}, {"body": "shrug like mentioned think bigger issue specifying model method returns instance make fail silently fix case along great", "d": "12/2014"}, {"body": "make modelid fail silently using idattribute using factory model different override bit confusing nothing documentation ca nt fix", "d": "12/2014"}, {"body": "bit confusing nothing documentation ca nt fix nt aware prior issue good need rethink way modelid works think makes much sense", "d": "12/2014"}, {"body": "usually add documentation cut release pull open may may get used docs add case makes much sense explain make sense pass model attributes instances called use uses uses benefit", "d": "12/2014"}, {"body": "agree probably accept model instance master different times nt need accept since getting model edge cases though would need drop support favor think standard use case anyways would need way perform bookkeeping changing model id separated could done pretty easily would also fix", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget want able call unparsed attributes collection would also fix real issue though think argument time nt use arbitrary strings ids given persistence layer integer uuid etc", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget yeah nt want get rid either think issue multiple model types wanting know type dealing although nt know common multiple types collection different", "d": "12/2014"}, {"body": "want able call get unparsed attributes set damn forgot search places using could get around instantiating model mean unnecessary object finds existing collection attributemethods collection attributemethods real issue though need able quickly grab model old id eg would kill two birds", "d": "12/2014"}, {"body": "actually could instantiate model", "d": "12/2014"}, {"body": "strongly disagree nt side effects change completely breaks contract", "d": "12/2014"}, {"body": "nt view instantiating object side effect adding model collection creating passed really thought could still support edge case", "d": "12/2014"}, {"body": "scratch comments wo nt work well due argument may require closest able get letting determine argument model attributes hash id model existing model model continue id thismodelid modelattributes id thismodelid model order amp amp modelisnew modelmap id orderpush model get model set id get function obj obj null return void var id thismodelid thisismodel obj objattributes obj return thisbyid obj thisbyid id thisbyid objcid return thisbyid obj thisbyid objcid thisbyid thismodelid obj modelid function attrs return attrs thismodelprototypeidattribute id modelid function model var idattribute result thismodelprototype idattribute id return thisismodel model modelid model idattribute internal method create model ties collection addreference function model options thisbyid modelcid model var id thismodelid modelattributes var id thismodelid model id null thisbyid id model modelon thisonmodelevent event destroy thisremove model options event change var previd thismodelid modelpreviousattributes var id thismodelid modelattributes var id thismodelid model previd id previd null delete thisbyid previd id null thisbyid id model diff git testcollectionjs testcollectionjs index testcollectionjs testcollectionjs thisismodel attrs attrs attrsattributes return attrstype attrsid", "d": "12/2014"}, {"body": "although nt know common multiple types collection different idattributes agreed though counter anecdote recently worked project tracks keyed db artists albums etc live backbone collection depends backend could get around instantiating model nope gone path horrible built class creator skillshare using older version backbone behavior hack around correctly parsing ids even temporarily persisting cids get models show correctly behavior want grateful eventually fixed change seems natural fan polluting way makes interface ugly especially nt like part sometimes passing model sometimes passing attributes", "d": "12/2014"}, {"body": "nope gone path horrible finding leaving method signature though may want check existence prototype trying grab leave end dev override use factory built class creator skillshare using older version backbone behavior forgot danapplegate mentioned worked skillshare", "d": "12/2014"}, {"body": "would idattribute ever function goal using result guard plain js", "d": "12/2014"}, {"body": "guard", "d": "12/2014"}, {"body": "ok sure looks like back started say looks like case useful overriding anyway add doc note", "d": "12/2014"}, {"body": "prefer second option personally sure looks like back started say looks like case useful overriding model anyway add doc note think appropriate", "d": "12/2014"}, {"body": "nt currently plan would major revamping features interface nt seem like good idea needed one next release changes far", "d": "12/2014"}, {"body": "ok got thanks jeremy", "d": "12/2014"}, {"body": "eta", "d": "12/2014"}, {"body": "soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend", "d": "12/2014"}, {"body": "fingers crossed thanks wed dec pm jeremy ashkenas notifications githubcom wrote soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend reply email directly view github", "d": "12/2014"}, {"body": "mean getset whatever want including used storing raster tiles store issue example", "d": "12/2014"}, {"body": "megawac first thanks quick response well use react view component use case persist change serverside thorugh backbone model like way instead file metadata hash sent server value avatar key contrary thanks answer get handle file serverside gets persisted set pic attribute difference two ways communicating missing something wrong", "d": "12/2014"}, {"body": "hmm thats case problem interesting suspected kept blob client side never sent back pipe either way big first class support bb belong core yet another extension overriding sync someone nt beat see reproduce behaviour jsbin tonight seems like interesting problem cold snowy evening", "d": "12/2014"}, {"body": "megawac use bb react views rails backend bb plugins added override behaviour interesting seen people raising issue stackoverflow deciding workarounds raising issue seek suggestions also appreciate thoughts bb works nested bb model associations say user model association bb profile model replication rails resource say profile nested resource user serverside case explicitly orchestrated association bb talk serverside guess picture got problem thanks time appreciate thoughts experience", "d": "12/2014"}, {"body": "backbone model attributes supposed serializeable json sticking types stuff responsible legwork case overriding might right thing better answer stick file handles attributes first place serialize first", "d": "12/2014"}, {"body": "yessir backboneconf third two weeks cut either", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "dependency tools like bower wo nt get unless point master nt want fwiw point specific commit hash bower npm want grab untagged version nt want take risk point master", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "please use stackoverflow mailing list irc channel questions github issues developing framework", "d": "12/2014"}, {"body": "models designed support view ui seemed obvious use change event model attribute order drive web form example user moves slider number times called view seems implementation significantly limits use models anything data interchange w server", "d": "12/2014"}, {"body": "thesmart understand correctly said store previous state model form submit perhaps", "d": "12/2014"}, {"body": "thanks tips also looks like accept attributes object compare going write plugin looks like someone beat", "d": "12/2014"}, {"body": "sort found solution works clean right modified version backbone historynavigate method library updated extension might need different yeah comment seems work fine hope helps javascript extend backbonehistory navigate function fragment options cached regex stripping urls hash var pathstripper", "d": "12/2014"}, {"body": "extend router js navigate function fragment var options backbonehistoryoptions ret much simpler", "d": "12/2014"}, {"body": "probably even get away setting router property directly", "d": "12/2014"}, {"body": "would nt recommend depends leading trailing slash changing assumption could cause strange results avryl curious technical reason want slash included purely aesthetic fine aesthetic technical reason love hear smiley", "d": "12/2014"}, {"body": "braddunbar purely aesthetic urls trailing slash weird root nt removing trailing slash urls option", "d": "12/2014"}, {"body": "backbone allows set root trailing slash nt behave differently", "d": "12/2014"}, {"body": "got aesthetic prefer drop special case well shrugs", "d": "12/2014"}, {"body": "prefer drop special case well sure mean special case thu dec pm brad dunbar notifications githubcom wrote got aesthetic prefer drop special case well shrugs reply email directly view github", "d": "12/2014"}, {"body": "listening click events see url child root requiring trailing slash backbonehistoryroot breaks default route root", "d": "12/2014"}, {"body": "referring code", "d": "12/2014"}, {"body": "issue", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "hi project try implement objectobserve backbone model project modify event asynchronous separate via objectobserve feature project also support objectprototypewatch performance well use benchmark test performance least double growth use objectobserve chrome gt nt growth node gt unittest migrated project backbone change event asynchronous advises thanks jone casper", "d": "12/2014"}, {"body": "yeah retrospect wish stood ground one like revert add note wiki page conversation worth think current set continues problematic folks trying load libraries build top backbone within browser think better", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load enough client side code days uses commonjs think time re\u00ebxamine", "d": "12/2014"}, {"body": "add noise thread based volume issues questions raised marionette land directly related change reverting commit would save many people time make lives much easier", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load big difference backbone officially dependency underscore included packagejson jquery nt adding optional require code everybody uses browserify obligated expose least module jquery dependency otherwise build wo nt even work", "d": "12/2014"}, {"body": "guys want change feel free open new pull request desired change made full description rationale explanation going work play different environments", "d": "12/2014"}, {"body": "pr open quite time", "d": "12/2014"}, {"body": "pr try jquery fully describe explain going work different environments want change let put elbow grease really explain idiot like going able push merge button something resembling confidence", "d": "12/2014"}, {"body": "laptop genius bar next days someone doesnt open pr add main gist want common case loading jquery work without issue folks nt need jquery tell build tool ignore require node done throwing error catch ignore browserify webpack config option backbone variable still available ender zepto etc", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "browserify webpack config option famiar option would look like", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies try catch surprises weirdness server side takes insignificant amount space time load browser somebody using dom library jquery onus person swap library choice browserify done easily browserifyshim sure webpack must way like put together pr simple case w examples handle nonjquerydomlibs con seeing considered", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies good question obviously regarding people nt use jquery curious aliasing similar distasteful things really break rereading thread nt see mention actual breakage included said using routerapp time bit odd nt problems", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies asking question time know issues folks server two minor inconveniences mentioned sure current setup favoring use case although jashkenas described usecase think something problematic comes client sec said using backbone require jquery routerapp time bit odd nt problems using backbone problem issue comes load library like marionette depends backbone defined marionette work backbone say webpack environment force webpack inject dep configuration difficult folks trying get set may experts module bundlers browserify webpack config option curious see familiar alias option would easily let people swap jquery say zepto admit sure one would configure backbone ignore jquery change set include packagejson add line problem mentioned earlier post", "d": "12/2014"}, {"body": "also want backbone use zepto still use jquery areas aliasing work case", "d": "12/2014"}, {"body": "issue comes load library like marionette depends backbone defined always set loading marionette chaplin thorax ideal certainly tedious", "d": "12/2014"}, {"body": "exactly also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage least done past", "d": "12/2014"}, {"body": "also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage disagree marionette using jquery backbone jquery app becomes absolute mess view property different rest app plugins etc metaframeworks always use variable instead trying require jquery", "d": "12/2014"}, {"body": "fair enough smiley", "d": "12/2014"}, {"body": "famiar option would look like webpack throw runtime error like node", "d": "12/2014"}, {"body": "project permission denied exceptions code like problems put function another router project permission denied exceptions eg", "d": "12/2014"}, {"body": "issue using backbone using parse sdk extends backbone call fetch collection get resetoverwritten rather appending", "d": "12/2014"}, {"body": "sorry comment longclosed issue really fail see even case provided braddunbar using following snippet var model new backbonemodel modelon change function consolelog change modelset b change b function consolelog b change modelset modelset produces output using model set method related question regard care weigh", "d": "12/2014"}, {"body": "feel free use objectdefineproperty directly tried adding new properties directly defineproperties long set enumerable seems generally work show one glitch always generates change event even property writeable nt tried real code yet general think might reasonable approach simple computed properties model new backbonemodel apple modelset b boy objectdefineproperty modelattributes c value cat enumerable true writable true objectdefineproperty modelattributes c get function return thisctouppercase enumerable true objectdefineproperty modelattributes get function return new date enumerable true modeltojson", "d": "12/2014"}, {"title": "discussion swapping top level dynamic segments preserving others", "body": "nt get much love created emberclitransitiontodynamic addon problem route system like want swap locales preserving rest route state implementation came javascript function transitiontodynamic name segments var routes thisrouterroutercurrenthandlerinfos var models var lt routeslength var params routes params var param params paramshasownproperty param modelspush segments param params param var args modelsslice argsunshift name thistransitiontoapply args would called like pass hash matching segments replace rest preserved questions better way flawed place main ember code better suited addon", "num": "10094", "d": "12/2014"}, {"title": "feature default event actionhelper configurable", "body": "linkview eventname changed via reopen action handler easily changed makes difficult necessary create addon switches ember default eventing case overridden default click tap linkviews would like action helper without needing entirely overwrite helper", "num": "10090", "d": "12/2014"}, {"title": "production builds need compiler stripped", "body": "", "num": "10087", "d": "12/2014"}, {"title": "refreshing model different route based query params behavior changed", "body": "case app filters route display result filters achieve queryparams controller model refresh changes model stopped refreshing updated ember yesterday nt see anything change changelog assuming intentional please correct wrong simplified example works nt work good measure", "num": "10081", "d": "12/2014"}, {"title": "upgrade emberjs fails simple app", "body": "sample app reproduce bump version ember could related", "num": "10080", "d": "12/2014"}, {"title": "emberselect rendering correct selected option canary", "body": "seen bin selection changed updated selected option render selected screen rendered properly option selected second time works fine without optiongrouppath works fine beta", "num": "10076", "d": "12/2014"}, {"title": "mismatched check istop appears lead null outletsource", "body": "seeing error executing code written line emberjs see elsewhere someone references deprecating istop happened find change conditional follows code makes good sense error subsides thoughts", "num": "10070", "d": "12/2014"}, {"title": "cp mapped query param becomes constant", "body": "code coffeescript apppostscontroller embercontrollerextend queryparams computedproperty property false computedproperty emcomputed property gt get property jsbin problem changing nt cause change changing cause url change", "num": "10069", "d": "12/2014"}, {"title": "better deprecation within initializer", "body": "deprecation pretty cryptic dealing initializers call first argument documented api initializer receive container perhaps provide custom wrapper message specific case dgeb thoughts", "num": "10067", "d": "12/2014"}, {"title": "ca nt reload hasmany relationship", "body": "try reload update server joined record like working data ember store changes view rendering changes tried set record manually model result new record added rendered old record updated wrong", "num": "10057", "d": "12/2014"}, {"title": "serialize route params nested routes", "body": "hi using following route configuration want show slug model instead id url projectroute contains serialize method works well nested routes modify model however events nested route another model set breaks obviously events model slug property actually assumed events nested route projects would inherit model project route seems case think could go around overriding serialize hook projecteventsroute using modelfor seems like hack miss something ps wnat use resource want keep proper namespace nesting", "num": "10056", "d": "12/2014"}, {"title": "unable run tests embercli amp ember due missing embertestingjs file", "body": "appears file called missing ember release causing using embercli fail instead running tests expected uncaught syntaxerror unexpected token lt exception logged console app loads usual generated file contains html error jshint ignore start runningtests true jshint ignore end found found code nosuchkey message specified key exist key requestid hostid rest file appears ok steps reproduce using ember cli change handlebars version ember version visit browser instead seeing expected page tests default welcome emberjs page shown exception logged console", "num": "10055", "d": "12/2014"}, {"title": "factory undefined", "body": "new ember much confused debug ember debug ember data debug handlebars debug jquery trying get record via works good refreshing page getting jqueryjs \u0441\u0442\u0440\u043e\u043a\u0430 store lt modelfor store lt recordforid deserializerecordid normalizerelationships lt eachrelationship lt mapprototypeforeachcb orderedsetprototypeforeach mapprototypeforeach eachrelationship normalizerelationships store lt push find lt trycatch invokecallback publish queueprototypeinvoke queueprototypeflush deferredactionqueuesprototypeflush backburnerprototypeend backburnerprototyperun run exportsdefault lt ajax loggererror errorstack error assertion failed typeerror factory undefined var tmp errorapply arguments model route json nt know may lost something could happens", "num": "10052", "d": "12/2014"}, {"title": "configure emberrails work handlebar", "body": "trying get simple app runnning based nt even begun app done far generate using rails new rails g ember bootstrap n app javascriptengine js rails g ember install ember rails g ember install emberdata set root route home applicationjsemblem ember page getting error visiting link error rough directions update handlebars version update template precompiler version later gem file believe thats related ember ember gem emberrails gem embersource gem emblemrails believe correct embersource update handlebars version tried installing handlebarssource gem got error requested handlebarssource bundle currently handlebarssource locked try running course following tried bundle update yet got error bundler could find compatible versions gem handlebarssource gemfile embersource ruby depends handlebarssource gt ruby suspect needs happen embersource depend handlebarssource idea update handlebars emberrails app use ember", "num": "10051", "d": "12/2014"}, {"title": "sendaction problem components embedded", "body": "sendaction seems work property components embedded suppose component b embedded component component b invokes sendaction throw error action handler might problem example posted js bin code borrowed book mastering emberjs example postphotocomponent postdatecomponent work fine sendaction postratingitemcomponent throw error", "num": "10050", "d": "12/2014"}, {"title": "container regressions ember data", "body": "work fixing thought would bring looks like containernormalize may longer used since refactor tests complete ms unitstorecreaterecord store models dash creating record camelcase string finds model died test model found something unitstorecreaterecord store models camelcase creating record dasherize string finds model died test model found something unitstoremodelfor dsstore modelfor fetching factory string sets normalized key typekey died test model found blogpost unitstoremodelfor dsstore modelfor fetching factory string dashing normalizer sets normalized key typekey died test model found blogpost", "num": "10044", "d": "12/2014"}, {"title": "api docs nt mention linkto helper used inline", "body": "helper used either block helper inline helper two variants different helper arguments block variant documented figured syntax inline variant second argument defaulting current route document inline use arguments", "num": "10041", "d": "12/2014"}, {"title": "view events bubbling actions", "body": "sure go issues might nice handled event sent action along event handler otherwise opening component ideal implies setting global handler specific cases extending new component registering specific helper feels like overkill something like", "num": "10040", "d": "12/2014"}, {"title": "new error registry instance must passed option constructing container", "body": "specs passing versions ember latest canary release started failing build relevant spec lines", "num": "10039", "d": "12/2014"}, {"title": "fillin test helper focus target element", "body": "helper fills target without ever causing element focused jsbin failing test issue makes difficult test application logic depends focused state case validation logic triggers input field loses focus focus state input element never changes validation logic never triggered tests", "num": "10034", "d": "12/2014"}, {"title": "meta emberjs run ember data tests well", "body": "see build recent container refactor broke pretty much tests canary would nice know ahead time lot work happened times see mapsetorderedset changes back look cross reference time since ember ember data tight dependency think makes sense test together ember data test suite also nt take long either", "num": "10033", "d": "12/2014"}, {"title": "wrong route priority asterisk match", "body": "came across potential bug router given following definition impossible reach route entering url jsbin demonstrating happens try enter search route enter url see links correctly transition routes happy dig fix wanted get confirmation proper code misunderstanding things work asterisk match", "num": "10025", "d": "12/2014"}, {"title": "bug ember live reload", "body": "using ember get following error start page load thisreloader null object last line livereloadprototypeaddplugin tries execute fails additional message without line number livereload disabled browser seem support web sockets maybe error handled gracefully execute code web sockets detected", "num": "10024", "d": "12/2014"}, {"title": "emptyview broken", "body": "think argument broken sample jsbin working fine dandy using arguments", "num": "10019", "d": "12/2014"}, {"title": "error phantomjs rendering contains twice ember component ember", "body": "upgrade process ember integration tests fail phantomjs following message running test real browsers chromefirefoxsafari problem everything perfect realized issue appears section template contains twice component quite easy reproduce error need empty component insert tags run", "num": "10018", "d": "12/2014"}, {"title": "deprecate bind helper", "body": "see comment nt want lose track", "num": "10017", "d": "12/2014"}, {"title": "update htmlbars", "body": "changes cc mmun", "num": "10015", "d": "12/2014"}, {"title": "canary channel updated day ago", "body": "found following error message travis ci binpublishbuilds currentbranch master pullrequest false error filepath hometravisbuildemberjsemberjsdocsdatajson nt exist introduced seems canary channel updated", "num": "10010", "d": "12/2014"}, {"title": "canary builds publishing", "body": "cc fivetanley rwjblue rondalesc", "num": "10008", "d": "12/2014"}, {"title": "template custom textfield component rendering", "body": "ember noticed assigning template longer render template occuring due commit examples cookbook section docs cookbook version ember ember", "num": "9992", "d": "12/2014"}, {"title": "save serialized attr without relation", "body": "config attribute save config attribute save", "num": "9990", "d": "12/2014"}, {"title": "embera wrap dom arrays correctly docs claim", "body": "", "num": "9989", "d": "12/2014"}, {"title": "release blog post", "body": "ticket summary items discussed release post repo followers please consider guarantee even prediction behavior place notes issue locked keep us focused commit bit please edit description feature htmlbars feature block params feature embermetalinjectedproperties filesize change basically wash within talk current state boolean attrs review performance profiles changes common situations enumerate tools support htmlbars compilation today crosslink blog post write compilation tools node rwjblue discuss mental model attributes noting svg exception use attribute rules doc reference deprecations deprecated quoteless outlet names deprecate setting container childviews deprecate private bind helper always private removed beta feature inline feature emberroutingnamedsubstates feature htmlbars attr syntax still pending go decision must go indepth deprecate emberobjectcontroller remove previously deprecated private helper", "num": "9985", "d": "12/2014"}, {"title": "computedequal nt update properly", "body": "easiest way explain example shown short explainaition basically nt work", "num": "9980", "d": "12/2014"}, {"title": "index parameter computedmap callback function undefined", "body": "per document callback method computedmap following signature problem index always undefined showed problem repo commit code get logs ember version", "num": "9979", "d": "12/2014"}, {"title": "emberisnone breaks page passing undefined object", "body": "experimenting ways load script addthis found weird use vanilla js check object exists things work fine try using emberisnone breaks page nothing loads break missing something", "num": "9975", "d": "12/2014"}, {"title": "final argument api documentation", "body": "opening issue may left api docs intentionally behavior final argument mentioned guides api docs intentionally left docs happy add yuidoc blocks open pr", "num": "9973", "d": "12/2014"}, {"title": "dom nodes displayed", "body": "running situation certain dom nodes displayed sure going jsbin inspect see divs containing color names hidden reason might related", "num": "9971", "d": "12/2014"}, {"title": "svg need use setattributens setting xlink href", "body": "svg sprites utilize work properly attribute must set using instead jsbin demonstrates issue fix", "num": "9970", "d": "12/2014"}, {"title": "queryparams return updated values within", "body": "calling within return updated queryparam values bin shows returns correct values full transition route taken place allowing get complete current qp state cc machty ps use case trying reload routes model within queryparamsdidchange without setting full rerender child routes always needed", "num": "9969", "d": "12/2014"}, {"title": "ca nt", "body": "searched issues router map return router main got results confirmed canary use case error expected able return result routermap expected return router instance think would great api would assume ember supports method chaining every object grumpily curious else nt straightforward jquerylike chaining disclosure actually discovered error using documented", "num": "9966", "d": "12/2014"}, {"title": "embertestingjs included release", "body": "looking changelog believe embertestingjs file included releases ca nt seem find file bower releases ember", "num": "9963", "d": "12/2014"}, {"title": "emberbeta breaks translateattr", "body": "spec passing every version ember current beta version relevant code helper function gets called correct arguments emits correct content nt show dom aswritten relies ember removed added tried changing calls use new function html generated tests fail", "num": "9961", "d": "12/2014"}, {"title": "restoring debugger functionality htmlbars", "body": "see debugger helper htmlbars nt access template context console able get view context using seem reasonable add var described comments using happy create pr", "num": "9960", "d": "12/2014"}, {"title": "bug canary bug emberautolocation", "body": "faced problem upgrading app latest canary found minor problems important clone app run set location history hash app mostly works", "num": "9956", "d": "12/2014"}, {"title": "detect warn loudly people series npm", "body": "basically broken", "num": "9954", "d": "12/2014"}, {"title": "warning using linkto disabledwhen", "body": "set linkto helper get following warning jsbin", "num": "9953", "d": "12/2014"}, {"title": "svg component prevents triple mustache rendering text", "body": "tested ember chrome svg component exists sibling element triple mustache tag longer renders provided text see little digging looks like domhelperparsehtml function attempting parse text svg instead html", "num": "9948", "d": "12/2014"}, {"title": "duplicate definitions yuidoc output", "body": "working found functions definitions checked cursory glance different definitions cc rwjblue", "num": "9946", "d": "12/2014"}, {"title": "windows newlines cause extra whitespace safarichrome", "body": "problem app working since upgraded emberjs happens chrome issue somehow templates rendered lots additional spaces surrounding html node say instead tab hello get something like rendered maybe see example obviously breaks styling lot funny thing remove least one space strange construct magically styling given section back even though spaces still mention using embergrunttemplates compile know new versions think tried update well nt help know mention whitespace issue chrome says people get opposite effect missing spaces due bug chrome gt chrome instance consuming gathering people whitespaces update tried update ember handlebars gruntembertemplates alpha fixes occurrences whitespace issue still present ie results space front rendered text nt expressionless", "num": "9945", "d": "12/2014"}, {"title": "release channel versioned", "body": "seems updated following header comment", "num": "9944", "d": "12/2014"}, {"title": "bindattr tests", "body": "today silly error cause issues following handlebars code test expecting find least bar baz class instead found neither really wanted looking code bindattrjs wanted able write test said warning produced duplicate tag element bindattr already exists element someone point right direction test live would test valuable htmlbars support thanks awesome work", "num": "9942", "d": "12/2014"}, {"title": "expose ember streams", "body": "ember streams ie simplestream nt appear exposed anywhere use case converting rxjs observables ember streams direct output bindings feasible current tactic subscribe rxjs observable property emitted values rxember set helpers use thought cases able jump past run loop write directly bindings using ember new streams", "num": "9940", "d": "12/2014"}, {"title": "implement serverside rendering seo", "body": "currently ember apps must downloaded entirety evaluated executed end user sees ui typically ember apps serve static loading page replaced framework app boots lead degraded experiences user wait js assets load get actionable ui issue exacerbated mobile devices take longer desktop boot app often connected via highlatency mobile networks users developing world may using slow connections older browsers suffer degraded experience fetching initial data payload separate request highlatency networks imposes additional penalty seo also problem clientside rendered apps despite google recently announcing search crawler would evaluate javascript scraping sites secrecy around ranking algorithms leads many organizations distrust relying new system vs wellunderstood behavior serverrendered pages additionally crawlers tools like curl ca nt fetch content javascript apps without embedding javascript engine anyway ability remix scrape content one strengths web would like address shortcomings starting seo thanks generous sponsorship bustle wycats working booting rendering ember apps server designed ember beginning serverside rendering initial work largely infrastructural getting pieces place ember apps run statelessly server work prerequisite ambitious goal rendering apps server downloading javascript background take control loaded sometimes referred rehydrating client aka issue tracks infrastructure changes needed achieve seo server rendering mvp x abstract browser environment necessary executing ember library x abstract browser environment necessary booting ember application x incorporate tests verify node compatibility built output x support booting application node environments x split container code registry stateless session store stateful remove application lt session coupling x render component string instead dom element x render route string api asynchronously initializing application api asynchronously rendering multiple sessions using single application x audit disable assertions browser specific running serverrendering mode build demo app showing feature working compile ember directory commonjs modules turned difficult use compiled output sent browser node revisit later distribute commonjs ember build npm implement boot lifecycle hooks entered loading state application state settled application rendered useful things like analytics integration well still want get discovered critical path expect list expand time start dig", "num": "9938", "d": "12/2014"}, {"title": "htmlbars error bound attributes yet supported emberjs", "body": "decided test htmlbars jsbin upgrading embercli app keeps throwing error bound attributes supported based merged pull request ought working app allows users customise look css store database mimic added css controller property try use css property bound attribute template throws error mentioned non htmlbars style using bindattr still works jsbin link demonstrating issue template controller", "num": "9936", "d": "12/2014"}, {"title": "expose backburner emberbackburner", "body": "need private backburner instance ember data right reaching grab constructor backburner loader may always especially bundle format future know may far still account need private instance ed igort fill", "num": "9935", "d": "12/2014"}, {"title": "emberroute beforemodel description ends abruptly", "body": "description ends abruptly see propagate error handled hook would either machty wrote original text ended probably removed purpose guessing removing either end previous line fine", "num": "9932", "d": "12/2014"}, {"title": "emcontrollerdetectinstance emobjectcontrollercreate false", "body": "jsbin link demonstrating issue", "num": "9930", "d": "12/2014"}, {"title": "usersposts posts controllerbaz use controller", "body": "fixing deprecations updating found option seem work documented using syntax js bin updated js bin also seems similar", "num": "9929", "d": "12/2014"}, {"title": "uncaught typeerror line ember canary", "body": "bone headed markup like could self closing tags like ember dies line elementloc undefined uncaught typeerror read property start undefined quick example line still useful info case line could perform check case elementtag elementloc undefined thanks", "num": "9928", "d": "12/2014"}, {"title": "error assertion failed template must function", "body": "exact ember version also using embercli problem try test component default test comes ember generator javascript test renders function expect creates component instance var component thissubject equal componentstate prerender appends component page thisappend equal componentstate indom throws error", "num": "9927", "d": "12/2014"}, {"title": "sortby wo nt work record id", "body": "recordarray ids sortby id returns sorted array like would treat id attribute string number possible add extra parameter tell cast numerically sugestions thanks", "num": "9926", "d": "12/2014"}, {"title": "rawfunction emberhandlebarshelpers missing", "body": "hi updated ember ran unit tests unfortunately test use rawfunction test helpers new way", "num": "9924", "d": "12/2014"}, {"title": "port use attr nodes", "body": "slow ported use streams attr node related class name bindings weird world class name bindings code general consolidated steps repeated eachcollection helper bindattr applyclassnamebindings implementation ported already", "num": "9922", "d": "12/2014"}, {"title": "port attr nodes", "body": "slow ported use streams attr nodes", "num": "9921", "d": "12/2014"}, {"title": "deprecate", "body": "buffer methods completely legacy however still required several tests tests updated use morphs dom fragments htmlbars features marked deprecated possibly even removed", "num": "9920", "d": "12/2014"}, {"title": "classes unordered", "body": "via indream way keep order class names eg ui eight wide become eight ui wide bindattr break framework like semantic ui new based bound classes explicitly ordered rolled back ordered", "num": "9912", "d": "12/2014"}, {"title": "ember handlebars emberresolver could process handlebars template", "body": "trying upgrade ember handlebars latest ember handlebars files structure based file setup works fine old version failed new version error output browser inspector failing new version generated gt controller application object fullname controller application fullname view application fullname template application fullname template error fullname route error error processing route index unknown template object function error transition index transition aborted working old version generated gt controller application object fullname controller application fullname view application fullname template application fullname view toplevel rendering application default view object fullname view application fullname controller index fullname controller index generated gt controller index object fullname controller index fullname view index fullname template index could find index template view nothing rendered object fullname template index transitioned index transition transition complete ember inspector active almost certain related new changes handlebars know seems like handlebars rendering logic changed could run template function sorts someone help", "num": "9911", "d": "12/2014"}, {"title": "using unbound helper undefined value", "body": "getting error whenever undefined custom helper wrote using ember htmlbars", "num": "9910", "d": "12/2014"}, {"title": "rsvp onerrorhandler probably nt sync assert within run loop", "body": "jsbin highlights issue whereby uncaught promise clobber tasks within run loop due emberassert one point assert fired within settimeout escape run loop good reason stopped keeping mind meaningful stack trace already lost given assert fires within runloop queue rather anywhere related source error cc stefanpenner", "num": "9901", "d": "12/2014"}, {"title": "htmlbars addon templates compiled", "body": "app uses customnamed templates extra resolver rules find good news htmlbars picks templates without custom hooks required bad news structure working inside addons components also tree files somehow picked different addons vs main app", "num": "9900", "d": "12/2014"}, {"title": "use development build without mandatorysetters feature", "body": "cursory glance looks like feature compiled source way disable feature", "num": "9897", "d": "12/2014"}, {"title": "attributes syntax update", "body": "attributes feature must refactored pass strings properties land refs", "num": "9896", "d": "12/2014"}, {"title": "inline needs property truthyness test", "body": "feature goes live truthy check needs fixed mmun thoughts", "num": "9895", "d": "12/2014"}, {"title": "work nested inside unbound block", "body": "nested within work jsbin code sample entirely clear bug bug definitely obvious use case pretty simple list items multiple types type different rendering using determine type gives big performance boost list gets longer example javascript unbound isimage image markup unbound unbound ispdf pdf markup unbound unbound ispostitnote postit note markup unbound unbound isvideo video markup unbound unbound isunknown unknown file type markup unbound edit occurs canary likely recent regression", "num": "9894", "d": "12/2014"}, {"title": "ember bindattr render classes using ternary operator", "body": "example handlebars inspect class name div ends null rendered liked html inspect jsbin would thought someone else would reported searched around could nt find anything sorry dup", "num": "9893", "d": "12/2014"}, {"title": "code different github screencast guides nt run ember", "body": "", "num": "9892", "d": "12/2014"}, {"title": "could release embersource rubygemsorg", "body": "", "num": "9891", "d": "12/2014"}, {"title": "class name passed via bindattr sometimes simplestream instead string", "body": "created js bin demonstrating issue", "num": "9890", "d": "12/2014"}, {"title": "proxied promise fail handler promiseproxymixin nt execute exception thrown fail handler nt caught application", "body": "example proxied fail handler nt called exception rethrown promiseproxymixin nt caught application causing error handling acceptance tests fail", "num": "9888", "d": "12/2014"}, {"title": "feature recordsinqueryparams support records queryparams", "body": "often find wanting store list selected records queryparams ideally serialization records would represented ids however currently see represented complete record json serialized form records query params current desired potential api current workaround javascript appexamplecontroller embercontrollerextend", "num": "9886", "d": "12/2014"}, {"title": "feature storageparams queryparams except using localsession storage", "body": "thank query params awesome ember love using thank much everyone involved concept thinking new feature ember instead putting serialized data could persist transitionsrefreshessessions localsession storage example note might make sense key name contents would persisted scoped route serializationdeserialization params could identical since namevalue pairs also always stored strings localsession storage use cases commenting long body messages queryparams great small pieces information filters sorting parameters persist page refreshes however long messages commenting think github commenting make sense persist query parameters would great data like automatically synchronized localsession storage easytouse fashion ember queryparams always could implemented developerbydeveloper appbyapp basis however would great builtin emberjs thank", "num": "9885", "d": "12/2014"}, {"title": "ca nt stub injected properties tests", "body": "previously stubbing component dependencies tests passing hash subject new injected properties feature however get otherwise helpful error message saying set injected property service object lt subclass embercomponent think default behavior correct letting people know try override injected property however tests need way override error proceed setting stub one hypothetical api js import stub emberqunit var servicestub stub emberobjectcreate var component thissubject service servicestub stamped stub passed cp proceed setting raise exception cc slindberg", "num": "9884", "d": "12/2014"}, {"title": "ember starter kit broken", "body": "current starter kit contains announced supported anymore error assertion failed ember handlebars requires handlebars version please see details typeerror emberapplication undefined quite frustrating people trying start ember", "num": "9882", "d": "12/2014"}, {"title": "components break encapsulation access controller properties", "body": "see jsbin short syntax inside component gives access calling controller properties even correctly return", "num": "9880", "d": "12/2014"}, {"title": "amp requirejs uncaught error could find module handlebars", "body": "hello started new project today ember requirejs handlebars ca nt get ember load without handlebars error handlebars gets loaded fine requirejs nt recognized ember downgrade ember handlebars bower magically starts working fiddled shims avail requireconfig baseurl bowercomponents paths modernizr modernizrmodernizr jquery jquerydistjquerymin handlebars handlebarshandlebars ember emberember shim modernizr modernizr handlebars exports handlebars ember deps handlebars exports ember config require jquery handlebars ember function k handlebars ember use strict", "num": "9879", "d": "12/2014"}, {"title": "app broken upgrade", "body": "upgrading get following error loading application error stack contains line application code model hook route dance bower help anything using handlebars embercli emberdata ideas went wrong", "num": "9875", "d": "12/2014"}, {"title": "expose htmlbars", "body": "", "num": "9874", "d": "12/2014"}, {"title": "htmlbars backslash template generates unexpected token syntax error", "body": "backslashes handlebars literal characters html entity code generates following error compiled runtime syntaxerror unexpected token illegal embercli apps backslash simply stripped errors thrown command line app rebuilt jsbin backlash application template", "num": "9869", "d": "12/2014"}, {"title": "emberrunlater return function object", "body": "emberrunlater return function object documentation see", "num": "9866", "d": "12/2014"}, {"title": "various instrumentation hooks extremely nonperformant", "body": "serve tracking issue various pain points performance issues even leak affect app instrumented view instrumentation", "num": "9865", "d": "12/2014"}, {"title": "requiring generated controllers", "body": "documentation states ember automatically generate controllers try require one get error example approutermap gt resource room path room gt resource page path page approomcontroller emobjectcontrollerextend needs lt page gt since work default generated controller nt extend explicitly fails extend ember controller called pagecontroller nt add functionality", "num": "9863", "d": "12/2014"}, {"title": "populate store ember data", "body": "yet fully understood emberdata think populate store events work model conf javascript appeventadapter dsrestadapterextend host namespace mynamespace appeventserializer dsjsonserializerextend primarykey id keyforattribute function attr return emberstringunderscore attr appevent dsmodelextend userid dsattr string title dsattr string startatdate dsattr string startathour dsattr string json return external service", "num": "9862", "d": "12/2014"}, {"title": "htmlbars create component tagname textarea", "body": "giving component fails assertion jsbin", "num": "9861", "d": "12/2014"}, {"title": "query params broken mapping", "body": "good day using mapping shown unclear used hook example open jsbin see support names mapping contains keys controller updated extra action fired controller action always undefined doc says check like add strings array via input click would simillar click would empty array please advice thank", "num": "9860", "d": "12/2014"}, {"title": "review usage k obj", "body": "reviewing perf android noticed bunch deoptimisations due loops example deoptimises issue covered particular code switched use objectkeys saves hasownproperty call anyway android deoptimisation actually quite noticeable cc stefanpenner", "num": "9857", "d": "12/2014"}, {"title": "passing view instance view template helper fails", "body": "old regression happened fixed looks like back example code crashes regression removing line loads view instance template makes everything work line", "num": "9856", "d": "12/2014"}, {"title": "typeerror embernone function", "body": "since started working ember using check values variables since updated says function available anymore wrong use function deprecated bug", "num": "9855", "d": "12/2014"}, {"title": "inconsistent return value orderedset", "body": "see orderedset internal class thought report anyway feel free close necessary orderedset returns undefined object already exists set unexpected imho changed match interface set fwiw behaviour previously firefox chrome since fixed firefox issue exists chrome", "num": "9852", "d": "12/2014"}, {"title": "properties first capital letter produces uncaught typeerror call method unchain undefined", "body": "likely related jsbin reproduce error click link error appear console changing global avoids error global lookups deprecated ember uncapitalizing first letter avoids error much expected expected able use properties upper case first letters allowed reason throw error tells thanks", "num": "9851", "d": "12/2014"}, {"title": "create styleguide contributing", "body": "include following something close come standards ember projects follow x setup jshint run prs travis x setup jscs cover things jshint nt handle also run travis prs convert existing codeexamples follow standards set x styleguidemd basic rundown styles follow contributing linked contributingmd add styleguide website", "num": "9849", "d": "12/2014"}, {"title": "remove need loaderresolve build step", "body": "backburner rsvp router route recognizer", "num": "9844", "d": "12/2014"}, {"title": "pushobjects nt work argument arrayproxy", "body": "using ember chrome execute following command browser console since arrayproxy enumerable return value instead array containing single object arrayproxy verify running seeing result believe bug caused array proxy native method nt understand arrayproxies sees single object pushed onto array", "num": "9843", "d": "12/2014"}, {"title": "observers computed macros firing", "body": "apologies duplication nt able find anything topic come across following unexpected behavior multiple times including latest stable ember release use computed macro looks property class macro observer fire unless explicitly write example nt work import em ember export default emviewextend someproperty emcomputedalias parentviewsomeproperty nt update work import em ember export default emviewextend someproperty emcomputedalias parentviewsomeproperty update makecomputedmacrowork function thisget parentviewsomeproperty willinsertelement intended behavior correct way handle kind situations intended behavior please let know create jsbin anything else required", "num": "9842", "d": "12/2014"}, {"title": "using htmlbars optionally omitted start tags added html", "body": "earlier handlebars template like would produce dom like noticed bootstrap expects tbody element style big deal maybe implications fresh embercli app passing test failing canaryhtmlbars probably related", "num": "9839", "d": "12/2014"}, {"title": "large replace test max call stack", "body": "rwjblue test request run current beta tests cyanogenmod asop browser one test wich fails call stack overflow", "num": "9838", "d": "12/2014"}, {"title": "loop passed itemcontrollerwrapped array shifts context actions", "body": "jsbin explanation jsbin application service responsible maintaining state collection items state app state nt persisted part model using item controllers encompass extra states expose service seems using item controllers causes context actions least within loop shift away controller template buttons outside loop fire action exact actions inside loop notice also action fails silently typically uncaught actions result console error believe issue context considered service rather containing template relevant template question excerpted handlebars action works color colors action work fails silently", "num": "9836", "d": "12/2014"}, {"title": "update containerview preamble docs", "body": "changes deprecated initial definition child views upon extend make preamble incorrect blocked lack versioned api docs changing means someone using lt access accurate docs version", "num": "9833", "d": "12/2014"}, {"title": "rename build output emberjs emberdebugjs", "body": "renaming nonproduction file makes clear file intended production use need maintain buildsemberjscom files using like buildsemberjscomcanaryemberjs used many many jsbin whatnot include deprecation indicating consumers switch", "num": "9830", "d": "12/2014"}, {"title": "controller needs nt allow runtime changeslookups", "body": "nt array respond changes trying achieve something bit strange yet might beneficial routes controllers share common property would like observe value one controllers closest thing solution gotten depracted call end javascript export default emberobjectcontrollerextend needs application currentroute embercomputedalias controllersapplicationcurrentroutename currentsomevalue function deprecated call return thiscontrollerfor thisget currentroute get somevalue property currentroute way current release without deprecated calls tried route well ca nt observe property controller since routes nt", "num": "9828", "d": "12/2014"}, {"title": "htmlbars binding streams flush didinsertelement", "body": "handlebars view layer attribute bindings via synced immediately rendering process means hooks query elements inside component based things like bound class names htmlbars attribute bindings available inside caused regressions skylight reduced test case htmlbars feature flag hook work class name set via flushed yet turning htmlbars displays correct behavior", "num": "9823", "d": "12/2014"}, {"title": "confusing htmlbars error template caused error", "body": "htmlbars seems lint structure html insanely awesome btw provides error messages one got testing discourse error message useful confusing look way bottom determine template came would really nice mentioned name template first line along error message realize might tough templates compiled like perhaps template file name could passed parameter compile method development mode note using emberrails already exists actual issue might get emberrails support", "num": "9821", "d": "12/2014"}, {"title": "query params work computed property", "body": "hi case use date objects query params however want shown day format yyyymmdd url ember way miss deserialize object outputted url forced using computed property however seem work written reproducible jsbin shows problem ember", "num": "9819", "d": "12/2014"}, {"title": "infinite recursion willtransition hook queryparams", "body": "route query parameter set true route hook prompts user confirm want navigate away route user presses cancel transition aborted using combination causes router enter infinite recursion user presented confirm dialog press ok jsbin steps reproduce click one colors press cancel button confirmation dialog", "num": "9818", "d": "12/2014"}, {"title": "tries reuse destroyed view rerendering outlet", "body": "put applicationhbs put indexhbs toggle checkbox second time toggle true ember throws looks like reusing view already destroyed previous render block bug effects canary without htmlbars outlet fails rerender nt throw exception", "num": "9814", "d": "12/2014"}, {"title": "handlebars selecting wrong option", "body": "jsbin illustrate seems kind ember selecting wrong element list note without using regular view happen ember seem happen canary htmlbars turned believe regression introduced metamorphs removed", "num": "9813", "d": "12/2014"}, {"title": "difficult get dynamic linkto behavior", "body": "wanted dynamically created custom semiback button link appears changed route changes accomplished sending event parameter information pretty janky currently working nt support active states although required need nice easier plus pretty sure nt using router like seems like similar problem crept components generating example ca nt pass dynamic segments better approaches could", "num": "9812", "d": "12/2014"}, {"title": "input typesubmit default value regression", "body": "ember following code returned button default value submit value working broken", "num": "9809", "d": "12/2014"}, {"title": "binding computed properties", "body": "hey components may contain calculated properties required controllers assuming component computed property x simple enough bind controller property x currently overrides computed property logic guess comes one way binding easy handlebars thoughts", "num": "9807", "d": "12/2014"}, {"title": "checkboxes unclickable contained within element action attached", "body": "simple example input tag type checkbox contained inside checkbox clickable expected put action containing div say catch click events checkbox unclickable catch change event see attempts work expected reverted every time couple fiddles works expected nt", "num": "9806", "d": "12/2014"}, {"title": "handlebars outputting null undefined escaped", "body": "created jsbin show behaviour ember evaluating foo would output empty string nothing html template ember evaluating outputs word template want note happen escaping enabled seems related unescaped output", "num": "9805", "d": "12/2014"}, {"title": "htmlbars ember canary uncaught error unknown template object function", "body": "testing htmlbars ember canary mentioned application load opening console shows ember handlebars jquery uncaught error unknown template object function anonymous function rolling back ember handlebars everything fine using embercli happy provide details needed", "num": "9804", "d": "12/2014"}, {"title": "mixin detect work like coreobject detect", "body": "looks like provides used like javascript var vehicle emobjectextend var car vehicleextend consolelog vehicledetect car true consolelog vehicledetectinstance carcreate true hand seems provide javascript var movable emmixincreate var vehicle emobjectextend movable var car vehicleextend consolelog movabledetect carcreate true consolelog movabledetect car false consolelog movabledetect vehicle false well looking around came conclusion public api check whether class uses given mixin either directly indirectly opinion renamed work like make consistent thoughts", "num": "9799", "d": "12/2014"}, {"title": "htmlbars rendering issue component working ember", "body": "jsbin illustrates issue see background images displayed code using code htmlbars using jsbin template gives error amp images nt display happy update code better pattern thats issue thought worth raising seems like nt drop replacement case", "num": "9797", "d": "12/2014"}, {"title": "statement crashing whole page", "body": "use ember data load large amount readership stats show viewed posts website however people permissions view previously used readership worked fine issues using ember data caused whole chrome tab crash", "num": "9795", "d": "12/2014"}, {"title": "equally named controller properties nested query parameters influence", "body": "issue using controller properties different query parameters route hierarchy created jsfiddle illustrate issue shortly explain fiddle binds query parameter local property binds query parameter also local property fiddle click change outer params first changes outer sort property value case id click move inner link inner route without query parameter argument however transition property also mysteriously equals remained unchanged edit using ember", "num": "9794", "d": "12/2014"}, {"title": "loop radio button work deselection", "body": "", "num": "9793", "d": "12/2014"}, {"title": "click linkto refresh data nested cycle key value", "body": "outlet model linkto lineitem name linkto lt div class row gt lt p class lead gt name lt p gt lt form role form gt eachkeyvalue config lt div class formgroup gt lt label class radioinline gt key lt label gt eachkeyvalue value lt input type radio bindattr namecolor valuevalue amp gt value eachkeyvalue lt div gt eachkeyvalue lt button type submit class btn btnsuccess gt save lt button gt lt form gt lt div gt route need create form selected product applineitemroute emberrouteextend model function params return productsproductsfindby id paramsproductid", "num": "9792", "d": "12/2014"}, {"title": "htmlbars errors", "body": "hi upgrading working app following dockyard request update htmlbars test initially got errors looked like related liquidfire replaced instances amp amp remove equation getting bunch deprecation messages relating amp makes sense errors knowledge using bound attributes anyway nothing rendering happy help debug excited see htmlbars working", "num": "9791", "d": "12/2014"}, {"title": "exception silently ignored load initial route", "body": "using embercli modules throws exception load time exception silently swallowed initial route rendered example put try start app url fail render expected exception never logged instead try start app valid url exception properly logged", "num": "9790", "d": "12/2014"}, {"title": "embermetalinjectedproperties missing featuresmd", "body": "", "num": "9787", "d": "12/2014"}, {"title": "htmlbars plain html attributes throw without emberhtmlbarsattributesyntax enabled", "body": "following throws error html repro", "num": "9785", "d": "12/2014"}, {"title": "handlebars helper function parameter gets confused named context", "body": "parameter confused current context passing values template helper function context parameter property name works broken know workaround naming context differently ember able resolve different value using helper function jsbin example", "num": "9784", "d": "12/2014"}, {"title": "emberhtmlbarsattributesyntax fails contains inline without output value", "body": "quite easy replicate showmenu false output anything htmlbars tries append classlist illegal contains space end", "num": "9780", "d": "12/2014"}, {"title": "someundefinedvalue throws", "body": "passing undefined value unboundif helper htmlbars fails would previously evaluate falsy handlebars thus render block", "num": "9774", "d": "12/2014"}, {"title": "query params replacestate nt work refreshmodel true", "body": "jsbin sure limitation introduced design certain use cases sorting replacestate refreshmodel needed cc machty", "num": "9771", "d": "12/2014"}, {"title": "unable multiselect listbox using keyboard internet explorer", "body": "using emberselect view multiselect enabled ie view emberselect multiple true contentxyz optionlabelpath contentlabel optionvaluepath contentvalue one way select multiple options click one option keeping shift pressed press arrowdown arrowup direction many ever times want ie shift arrowdown shift arrowup works fine browsers except internet explorer use ie press shiftarrowup nothing happens however keep pressing shiftarrowdown two options keep getting selected happens emberselect happen usual used", "num": "9766", "d": "12/2014"}, {"body": "api would nt work routes like", "d": "12/2014"}, {"body": "run issue multiple times would great nice api cover api also covered cases like switching routes rather dynamic segments", "d": "12/2014"}, {"body": "igort api would nt work routes like products iditems id right nt think could expand api look like allow identical segment names think something similar could accomplish route swapping well dynamic segments", "d": "12/2014"}, {"body": "made change fix duplicate dynamic segment names javascript function transitiontodynamic name routeswithsegments var routes thisrouterroutercurrenthandlerinfos var models var lt routeslength var route routes var params routeparams var routesegments routeswithsegments routename var param params paramshasownproperty param continue var segment params param routesegments amp amp routesegments param segment routesegments param modelspush segment var args modelsslice argsunshift name thistransitiontoapply args route could call like", "d": "12/2014"}, {"body": "semiblind guess part suspect recent changes might something specifically symptoms nt seem get called anymore example given", "d": "12/2014"}, {"body": "definitely bug expected behavior docs query params declared routedriven controllers eg configure query params active within articles route must declared articlescontroller js bin example works use applicationroute rather indexroute could easily mistaken since built ember app uses query params kind makes sense reason overarching communicate specific maybe way around work specific controller able bind query params see get example test means misunderstood something let know still relatively new ember world", "d": "12/2014"}, {"body": "provide error messages description fails repro jsbin", "d": "12/2014"}, {"body": "error try create jsbin might take time thanks", "d": "12/2014"}, {"body": "mmrath might take time guaranteed take us much time repro fix issue pulling app", "d": "12/2014"}, {"body": "thanks mixonic understand trying put together jsbin sure put together app jsbin first jsbin", "d": "12/2014"}, {"body": "mmrath problem looks like needed bump emberclihtmlbars thank testing new beta really appreciate", "d": "12/2014"}, {"body": "excellent mixonic thanks awesome work guys", "d": "12/2014"}, {"body": "provide jsbin reproducing error", "d": "12/2014"}, {"body": "sorry bit pressed deadline codebase large enough would take quite lift separate whatever matter step back hit milestones timely istop simply smells brief look thought offer potential fix", "d": "12/2014"}, {"body": "istop set compile template embedded template object istop added emberhtmlbarstemplate istop generally incorrect", "d": "12/2014"}, {"body": "ends needing way cp diverge qp set outside", "d": "12/2014"}, {"body": "stefanpenner oh yeahh forgot ember distinguish co accept value works fine coffeescript apppostscontroller embercontrollerextend queryparams computedproperty property false computedproperty emcomputed property k v gt argumentslength gt set property v get property", "d": "12/2014"}, {"body": "rwjblue agree pretty cryptic alternative bit explicit container method called registry registry forwarded call first associated container behavior deprecated may one container per registry please call directly container instead glad pr even marginally clear right solution introduce asap provide documented alternative state initialization", "d": "12/2014"}, {"body": "unable reproduce canary see jsbin would able create minimal jsbin demonstrating issue reopen emberjsdata", "d": "12/2014"}, {"body": "wecc thanks looks like works canary recheck reopen emberdata able reproduce", "d": "12/2014"}, {"body": "chance could put together jsbin would help clear issue", "d": "12/2014"}, {"body": "hi gave another try yesterday appeared nt implemented model hook route rather explicitly set model setupcontroller implementing model hook everything work expected closing", "d": "12/2014"}, {"body": "sorry fixed", "d": "12/2014"}, {"body": "closed", "d": "12/2014"}, {"body": "sorry inconvenience reopen githubcomemberjsdata feels like ember data issue better tackle", "d": "12/2014"}, {"body": "sure thanks quick reply", "d": "12/2014"}, {"body": "think using instead since stable release", "d": "12/2014"}, {"body": "update barber latest use handlebarssource working properly", "d": "12/2014"}, {"body": "key code javascript apppostphotocomponent embercomponentextend click function thissendaction action xxxxx work fine consolelog img click apppostratingitemcomponent embercomponentextend click function e var content thisget content thisset parentviewselected content thisset parentviewselected content", "d": "12/2014"}, {"body": "belongs stackoverflow answer question end sending action parent context postratingcomponent either need handle action within postratingcomponent possibly retriggering wish handle controller", "d": "12/2014"}, {"body": "runspired thanks reply possibly retriggering postratingcomponent following code work javascript postrating contentpost actionselrate apppostratingcomponent embercomponentextend selected selected ratings actions selrate function r consolelog postratingcomponent selrate", "d": "12/2014"}, {"body": "nothing sendaction nt send action property specified action name case action defined", "d": "12/2014"}, {"body": "also reason answering ember moving towards component heavy strategy particular issue one found annoying sometimes nice nest components consistently belong instance messaging component contains components uploading selecting photos messaging related items nested components also get used think great easier way send actions nested components active route controller directly also suspect antipattern core team would support better ways handling issue", "d": "12/2014"}, {"body": "looks like normalize stuff removed sure course action forward add normalization stuff back ember data need", "d": "12/2014"}, {"body": "ah looks like hook ember data wants", "d": "12/2014"}, {"body": "tests actually exercising far tell longer thing think options delete tests testing behavior container ember data seems little weird bandaid tests reach reintroduce goes dgeb wycats tomdale strategy would prefer missing strategy entirely", "d": "12/2014"}, {"body": "seems reasonable", "d": "12/2014"}, {"body": "first sorry proven painful ember data team best help smooth transition using registries well containers already exposed container deprecated see unfortunately overriding going override underlying recommend creating registry alongside container override instead something like obviously would require tweaking create registry return", "d": "12/2014"}, {"body": "sounds good thanks", "d": "12/2014"}, {"body": "sounds good pr smiley", "d": "12/2014"}, {"body": "rwjblue sorry nt send pr newbie ember neither familiar inline helper behaves exactly properly structure documentation ps locks found inline feature documented guide ticket request document feature api docs", "d": "12/2014"}, {"body": "try set nt able find anything similar ember test suite", "d": "12/2014"}, {"body": "seems relevant", "d": "12/2014"}, {"body": "seems relevant", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "ya bad idea long pain ass maintainrun", "d": "12/2014"}, {"body": "fivetanley publish builds test suite simply run like need build first", "d": "12/2014"}, {"body": "cool get started tomorrow fixing container stuff ember data", "d": "12/2014"}, {"body": "one thing think set current breakage intentional like changes types cases private api changed purpose failing tests would quite annoying", "d": "12/2014"}, {"body": "nt mind breaking private stuff lot cognitive overhead two codebases know using probably use computers case mental bookkeeping us happy put work hear dgeb putting fix great lt", "d": "12/2014"}, {"body": "rwjblue cases unexpected issues arise think reasonably setup types cases private api changed purpose failing tests would quite annoying ya clearly deficiency breaks private api change hopefully latest work help", "d": "12/2014"}, {"body": "could make allowed failure travisyml would still get us early warning things break", "d": "12/2014"}, {"body": "machty mind chiming", "d": "12/2014"}, {"body": "seems likely could routerjs bug", "d": "12/2014"}, {"body": "seems like live reload issue ember issue suspect may using ember cli feel free open issue repo may need fork live reload code fail gracefully suspect worth", "d": "12/2014"}, {"body": "feeling moving away usage work prior versions probably fix", "d": "12/2014"}, {"body": "would preferred approach going forward monday december peter wagenet notifications githubcom wrote feeling moving away usage work prior versions probably fix reply email directly view github", "d": "12/2014"}, {"body": "jherdman oops broke big streamify pr couple months ago surprised one hit yet write failing test preferred approach going forward", "d": "12/2014"}, {"body": "mmun opened failing tests", "d": "12/2014"}, {"body": "best tell problem partly matter set overwrote", "d": "12/2014"}, {"body": "yes thats correct", "d": "12/2014"}, {"body": "kind weird override imho nt able figure provided", "d": "12/2014"}, {"body": "jherdman yeah right better feel free add fix pr", "d": "12/2014"}, {"body": "yay two failing tests", "d": "12/2014"}, {"body": "note issue nt appear anymore", "d": "12/2014"}, {"body": "awesome thanks much letting us know szines since works beta nt think may worth backporting release unless lot trouble lot people others weigh find affecting happy holidays", "d": "12/2014"}, {"body": "upgrading depends", "d": "12/2014"}, {"body": "would like go beta mmun htmlbars longer passes quoted depends", "d": "12/2014"}, {"body": "mixonic labeled nt lose track going update like get would prefer avoid major changes", "d": "12/2014"}, {"body": "mixonic yes", "d": "12/2014"}, {"body": "donezo", "d": "12/2014"}, {"body": "thanks tracking error message closing favor", "d": "12/2014"}, {"body": "stefanpenner need details seems work simple jsbin", "d": "12/2014"}, {"body": "another jsbin prod build", "d": "12/2014"}, {"body": "latest canary build days old something builddeployment process borked", "d": "12/2014"}, {"body": "gotcha get asap", "d": "12/2014"}, {"body": "look well soon get minute", "d": "12/2014"}, {"body": "tricknotes found following error message travis ci binpublishbuilds currentbranch master pullrequest false error filepath hometravisbuildemberjsemberjsdocsdatajson nt exist introduced seems canary channel updated", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "ok initial issue fixed hitting publishing", "d": "12/2014"}, {"body": "node work", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "photoshop tell pixels", "d": "12/2014"}, {"body": "stefanpenner actually think legit last week trollface edit jk", "d": "12/2014"}, {"body": "void element template first place ember behavior seems accurate actually rendering template since inside gt tag browser ignoring get", "d": "12/2014"}, {"body": "correction browser render content inside appears browser assumes content inside sibling node instead child actually renders looks like forcing remain child node done example using input element probably remove template cookbook example", "d": "12/2014"}, {"body": "agreed believe current behavior actually correct", "d": "12/2014"}, {"body": "made issue website repo keep track updating cookbook", "d": "12/2014"}, {"body": "nt ember related emberdata related suspect issue opened mistake", "d": "12/2014"}, {"body": "yes resolve javascript appproduct dsmodelextend families dshasmany family name dsattr string config dsattr config appconfigtransform dstransformextend deserialize function serialized return serialized serialize function deserialized return deserialized", "d": "12/2014"}, {"body": "nore need arrays watched using enumerableutils use enumerable utils directly", "d": "12/2014"}, {"body": "current behavior seems broken docs embera say returns embernativearray array like object seems like embera either error pass dom array update docs say nt really accept array like objects normalize dom array ember native array", "d": "12/2014"}, {"body": "another option update docs", "d": "12/2014"}, {"body": "feel like also error", "d": "12/2014"}, {"body": "assertion seems good", "d": "12/2014"}, {"body": "ah nt read docs correctly param nt dependendkey raw value sorry confusion", "d": "12/2014"}, {"body": "simple jsbin seems work properly provide jsbin demonstrates issue describing", "d": "12/2014"}, {"body": "browser using", "d": "12/2014"}, {"body": "using firefox de get time tonight try reproducing jsbin", "d": "12/2014"}, {"body": "able reproduce inside view didinsertelement anything emberisnone block nt run error", "d": "12/2014"}, {"body": "bug ember indeed intended behavior spec believe browsers throw error pass literal value declare variable instead relying think case works engine wart javascript little inconsistent good practice always use statements open stack notice starts place call emberisnone inside emberisnone", "d": "12/2014"}, {"body": "angus croll great writeup", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "misteroneill thanks pointing definitely intentional nt show api love could document api docs", "d": "12/2014"}, {"body": "yep update doc blocks tomorrow free time", "d": "12/2014"}, {"body": "closing favor pr fixing docs", "d": "12/2014"}, {"body": "nothing svg removing still problem think may related adding empty text node using dev tool edit html add space anywhere save see get rendered fine simply select dom node curiously simply removing nodes fix problem", "d": "12/2014"}, {"body": "maybe krisselden mixonic could weigh", "d": "12/2014"}, {"body": "think need clarify something removing svg dev tools solve problem removing template may something svg", "d": "12/2014"}, {"body": "far tell bug related inside remove either wrapping things look correct seems likely bug ember related since remove html via dev tools readd exactly render properly", "d": "12/2014"}, {"body": "think likely related htmlbars", "d": "12/2014"}, {"body": "think perhaps svg namespace properly left tag closed still needs investigation", "d": "12/2014"}, {"body": "character immediately fixes problem", "d": "12/2014"}, {"body": "removing wrapping also fixes", "d": "12/2014"}, {"body": "div svg indeed svg namespace", "d": "12/2014"}, {"body": "fixed master thanks", "d": "12/2014"}, {"body": "salzhrani right namespaced attributes still wip probably issue htmlbars well think also nt handle namespaced attributes correctly static html", "d": "12/2014"}, {"body": "really easy pr though ca nt yet guarantee merge", "d": "12/2014"}, {"body": "result map instance routerjs router ember router solution today original flexibility api design chaining routerjs vs ember router", "d": "12/2014"}, {"body": "stefanpenner reason wrap map function emberrouter return ember version", "d": "12/2014"}, {"body": "unsure suspect fine sure fine recall reason could nt around ca nt remember exactly", "d": "12/2014"}, {"body": "go small leaking inner router confusing", "d": "12/2014"}, {"body": "could put check would best place put check robust way check posted stackoverflow anyone searches find answer", "d": "12/2014"}, {"body": "could put check check think routermap return instead", "d": "12/2014"}, {"body": "agree return instance emberrouter got active work area targeting roll effort", "d": "12/2014"}, {"body": "rwjblue", "d": "12/2014"}, {"body": "fixed merged", "d": "12/2014"}, {"body": "able get embertestingjs file cloning repo building manually wording enable testing production builds publishing embertestingjs along standard builds imagined file would bower module", "d": "12/2014"}, {"body": "correct auto published bower channels contain testing file tagged releases fix retag", "d": "12/2014"}, {"body": "fixed autopublishing added embertestingjs standard release updates tags componentsember repo updated", "d": "12/2014"}, {"body": "shajith might interested", "d": "12/2014"}, {"body": "jamesarosen suspect make htmlbars compatible helpers others probably fill best way go", "d": "12/2014"}, {"body": "wagenet would like ensure compat layer works case agree htmlbars helpers much better performance jamesarosen provide jsbin could use test easily", "d": "12/2014"}, {"body": "unfortunately use emberbeta get problems version nt pushed anywhere uses available falling back", "d": "12/2014"}, {"body": "jamesarosen fixed reopen", "d": "12/2014"}, {"body": "james mentioned test still failing reopening", "d": "12/2014"}, {"body": "failing build", "d": "12/2014"}, {"body": "provided demo seems working canary beta jamesarosen confirm show done wrong jsbins", "d": "12/2014"}, {"body": "yes seems work fine must artifact test nt see passing reliably months", "d": "12/2014"}, {"body": "aha demo running current beta note attribute element sorry nt clear test original jsfiddle specifically failing beta canary", "d": "12/2014"}, {"body": "thanks clarification dig hours", "d": "12/2014"}, {"body": "wagenet rwjblue regarding htmlbars helpers want go route maintain compatibility ember either release maintain two separate versions b detect htmlbars browser register proper helper first headache nt want second ok though adds bloat shipped js file", "d": "12/2014"}, {"body": "contrary popular belief semver pretty important us going try hard make sure use htmlbars versions likely performance though", "d": "12/2014"}, {"body": "compatibility layer seems work really well regression shows perfect perfect far nt care", "d": "12/2014"}, {"body": "tracked issue submitted get ball rolling also created simpler repro", "d": "12/2014"}, {"body": "chained helpers supported ember releases could change recommended usage", "d": "12/2014"}, {"body": "believe usage would believe subexpressions supported handlebars unsure specific support required ember though", "d": "12/2014"}, {"body": "looks like nt like cf may remove since nt currently support bindings see", "d": "12/2014"}, {"body": "helper context view documentation updated correct way lookup value like would appear template", "d": "12/2014"}, {"body": "mmun something new streams work prevents us presenting novicefriendly interface inside debugger helper context creating screencast debugging ember aimed new users always thought helper nice way learn explore going templates talk streams even views case would mean ca nt reasonably cover feature", "d": "12/2014"}, {"body": "mitchlloyd expect able old debugger context misleading take keywords account want access view context take account keywords use want controller use", "d": "12/2014"}, {"body": "explicit previous context misleading consider template inside correct way access particular would return nt work expect plan simplify breaking change needs wait ember", "d": "12/2014"}, {"body": "debuggerhelper could define local function sugar value call", "d": "12/2014"}, {"body": "mmun seem pretty reasonable seeing pop debugger chrome might nice saw like whoa see situation tricky assuming something like possible", "d": "12/2014"}, {"body": "possible ember semver", "d": "12/2014"}, {"body": "seems like nice compromise pushing far", "d": "12/2014"}, {"body": "much better name p", "d": "12/2014"}, {"body": "mitchlloyd please feel free make pr associated documentation changes", "d": "12/2014"}, {"body": "believe resolved closing", "d": "12/2014"}, {"body": "seeing details error occurring", "d": "12/2014"}, {"body": "ran failing jsbin error undefined point reason getpath function var pathname thislocationpathname various versions ieopera nt always return leading slash pathnamecharat pathname pathname return pathname cibernox mentions setting location type workk fine", "d": "12/2014"}, {"body": "capturing updated messge nice photo", "d": "12/2014"}, {"body": "almost certainly caused", "d": "12/2014"}, {"body": "found problem fixing", "d": "12/2014"}, {"body": "created let see tests pass", "d": "12/2014"}, {"body": "closed via", "d": "12/2014"}, {"body": "stefanpenner mean embercli repo", "d": "12/2014"}, {"body": "haha", "d": "12/2014"}, {"body": "updated description title", "d": "12/2014"}, {"body": "fixed beta canary channels", "d": "12/2014"}, {"body": "rwjblue close", "d": "12/2014"}, {"body": "yeah thinking", "d": "12/2014"}, {"body": "looked one seems two definitions one instance method class method unfortunately indication likely need add andor bmac always seems know right yuidoc declarations use idea", "d": "12/2014"}, {"body": "looks like could using docs blocks nt think alone fix issue danmcclain mentioned methods yuidoc finding methods confirmed using standard docsite yuidoc generates listed duplicated methods twice see example suspect logic using generate extended lines api docs site could improved check method name like flag overriding method definition", "d": "12/2014"}, {"body": "literally running problem yesterday tried replicate using jsfiddle could nt made suspect something also use probably use yeoman found mainly affects elements floated right andor contain selector compare compiler output see putting everything one line creates different morphs mins yesterday experiment working going going spend time today see figure problem let know find anything", "d": "12/2014"}, {"body": "almost certainly need something reproducible able track happening jsbin simple demo project compiled output etc", "d": "12/2014"}, {"body": "nt encountered anything like yet bug space plausible repro definitely required dig", "d": "12/2014"}, {"body": "try prepare jsbin maybe manage make issue occure meantime say happen chrome ie works fine firefox", "d": "12/2014"}, {"body": "fwiw problem app spots tried minutes get reproduce jsbin could nt ended working around css changes", "d": "12/2014"}, {"body": "create bootstrap breadcrumb component like causes whitespace issues put everything one line like problem example see lines like compiled morphs full compiled templates working nonworking gist using windows workmanw michaljagielskisc guys using windows might windows thing handlebars template compiler", "d": "12/2014"}, {"body": "ok tried extract small piece code html css excerpt build process iwe use downloading extracting first type npm install grunt nodejs grunt required guys definitely know probably notice close text space left visible firefox ie checked opera exactly like chrome space visible proof chrome opera firefox ie hope helps find culprit sorry text misleading placeholder kind typed text without thinking jonnii using windows", "d": "12/2014"}, {"body": "expect another chromeblink bug insignificant whitespace cc krisselden thanks repro take look soon see seen", "d": "12/2014"}, {"body": "looks like problem related line endings crlf template saved crlf line endings see problem changing file use lf occur handlebars value value javascript define testetemplatesapplication ember exports function exports use strict var ember default exports default emberhandlebarstemplate function anonymous handlebars helpers partials data thiscompilerinfo helpers thismerge helpers emberhandlebarshelpers data data var buffer sourceurltestetemplatesapplicationjs", "d": "12/2014"}, {"body": "suspect line endings windows ca nt reproduce jsfiddle also affects browsers chrome", "d": "12/2014"}, {"body": "thank much help really quick response also thanks work ember guys much appreciated", "d": "12/2014"}, {"body": "likely clean compiler level would pretty easy probably also reported bug upstream", "d": "12/2014"}, {"body": "mixonic upstream correct", "d": "12/2014"}, {"body": "jonnii going suggest input layer handlebars htmlbars", "d": "12/2014"}, {"body": "mixonic confirmed indeed line ending issue windows save file unix line endings works", "d": "12/2014"}, {"body": "mixonic short term possible solutions convert using unix line endings causes problems team mates edit hbs templates visual studio complains write kind grunt step fix line endings get compiler thoughts", "d": "12/2014"}, {"body": "another solution seems work using grunt following need update packagesjson newer version gruntembertemplates make sure clear npm cache npm install", "d": "12/2014"}, {"body": "jonnii awesome idea step embertemplates task thank much", "d": "12/2014"}, {"body": "due failure publisher step issue missing cibernox time take look", "d": "12/2014"}, {"body": "probably caused issue found following message ember docs hometravisbuildemberjsemberjs ember yuidoc version generating documentation sh nodemodulesembercliyuidocnodemodulesyuidocjslibclijs found could someone accessible permission try clearing cache travis", "d": "12/2014"}, {"body": "deleted cache restarting job", "d": "12/2014"}, {"body": "clearing cache trick thanks tricknotes", "d": "12/2014"}, {"body": "confirmed thanks much heart", "d": "12/2014"}, {"body": "williamsbdev could assert attribute already value used applied would need assert though would performance overhead checks", "d": "12/2014"}, {"body": "test file exists hbs helper today add assert unit test", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "nice thanks quick feedback rwjblue", "d": "12/2014"}, {"body": "rwjblue thank pointer nt looking htmlbars directory still looking handlebars", "d": "12/2014"}, {"body": "think would happily accept pr making nonproduction build ergonomics better going close issue original question asking tests resolved", "d": "12/2014"}, {"body": "think rwjblue already pull request closing favor pr", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "willdoes ember metalviews support binding properties return streams", "d": "12/2014"}, {"body": "blesh sounds like good experiment setting binding simple js var somestream new whateverstream emberobjectcreate foobinding somestream subclass subscribes observerable observable callback calls stream happy bounce code back forth google chat immmun gmailcom message irc mmun", "d": "12/2014"}, {"body": "sounds good send chat", "d": "12/2014"}, {"body": "tomdale bout firstclass emberdata client nt need fetch models", "d": "12/2014"}, {"body": "want note excited please nt add posts like yay want people contribute constructive feedback want people participate without getting hundreds emails nt content thanks", "d": "12/2014"}, {"body": "jayphelps scope current phase definitely something intend incorporate solid", "d": "12/2014"}, {"body": "could recipes deployment seems like tad complicated deploy push invalidate cloudfront really awesome see btw", "d": "12/2014"}, {"body": "seems also want mechanism clearly distinguishing pre postrehydrated apps elements would otherwise tied ux instance would lot cases need start disabled occluded click capturer lot visual indications could handled via simple class added root element though", "d": "12/2014"}, {"body": "hopefully iojs real thing nt need use year old version", "d": "12/2014"}, {"body": "button elements would otherwise tied ux instance would lot cases need start disabled occluded click capturer ya important default broken ui would bad trademark apps hopefully patternconvention emerge satisfy sensible way", "d": "12/2014"}, {"body": "button elements would otherwise tied ux instance would lot cases need start disabled occluded click capturer build app certain way namely like serverapp whole thing still work early clicks even clientside app bootstraps react reactrouter instead handling actions inline controller action actually make transition new route usually query params whether opening modal submitting form use router query params nonclientsidebootstrapped app loses animations state fully renderable server client mindshift back years works beautifully", "d": "12/2014"}, {"body": "bout firstclass emberdata storepush client nt need fetch models reactrouter dump initial data script tag like clientside app initializes primes data stores stuff app asks data already got react causes html checksum created client equal prerender server dom nt get thrashed events get added big prereq folks get model hooks work isomorphically", "d": "12/2014"}, {"body": "timevans definitely still exploring exactly deployment happens probably application server deploy built versions intended serverside rendering build workflow ember cli potentially via addon", "d": "12/2014"}, {"body": "endash lot think definitely lot edge cases keeping scope constrained rendering punting rehydration better understand cases", "d": "12/2014"}, {"body": "sidenoterant fundamental issue rendering app server side usually taken consideration designing libraries framework happens essential part business many complex applications bucket infrastructure cases bucketing new features app ui elements spas transcend boundaries csshtml different code path needed eg module requires module sometimes users bucket import implements secondary code path client side easy rely build process produce different bundles different code paths need worry delivering right bundle right set modules probably custom loader knows right wiring dependencies server side things go south really fast code path ca nt decided per request forcing people fight framework try implement bucket infrastructure problem react use singletons etc ericf nt know talked wycats maybe good time make sure whatever solution gets implemented server side rendering flexible enough introduce alternative code path per request", "d": "12/2014"}, {"body": "caridy yes please ericf talk wycats would love make sure understand requirements would great yahoo ember shop", "d": "12/2014"}, {"body": "great stuff future developer working quite big emberjs based app involved issues described main problem found server side page rendering identify point time page finished rendering dom scraped solve cooperative approach renderer app described maybe also relevant prerendering outlines plans", "d": "12/2014"}, {"body": "vanthome planning api detecting application boot settled soon one first tasks working part effort something weeks", "d": "12/2014"}, {"body": "another constraint worry singleton state ember clean singleton state lot users wo nt cause major issues server since singletenant like browser one idea allow singleton state wrapping entire application function build time executing per request optimizations proabably way singleton state closed per request conventions embercli help lot since already owns build", "d": "12/2014"}, {"body": "experimentation framework bucketing strategy well foresee us going road permutation based builds completely different application instance based bucketing strategy traffic allocation", "d": "12/2014"}, {"body": "chadhietala permutation based builds works client side realistic execute code one permutations per request server side keep isolation people suggested used execute new context might scale big complex apps due perf penalty executing app code per request", "d": "12/2014"}, {"body": "work htmlbars", "d": "12/2014"}, {"body": "donaldpipowitch say absolutely", "d": "12/2014"}, {"body": "zeppelin indeed built terms htmlbars", "d": "12/2014"}, {"body": "big players making big plays keep great work guys", "d": "12/2014"}, {"body": "tomdale wycats checklist looks good one area phase work think added checklist around shortcircuiting since requests server stateless could good opportunities removing autowiring observable bindings setting expensive server likely used serverside related component lifecycle making possible devs avoid costly operations wo nt needed serverside like react sure ember components already something like similar work avoiding dom operations general shortcircuiting might allow server avoid executing entire code paths nt required handling current request plan rendering elements assuming ember app deal everything inside container within scope would dev provide wrapping html around app visible content bout firstclass emberdata storepush client nt need fetch models reactrouter dump initial data script tag like windowprerenderdata clientside app initializes primes data stores stuff jayphelps rpflorence using expressstate built serializejavascript team yahoo wrappedup idea tidy way flux implementation enabling stores dehydraterehydrate", "d": "12/2014"}, {"body": "since requests server stateless could good opportunities removing autowiring observable bindings setting expensive server likely used serverside potentially although users unfortunately rely even basic rendering maybe good patterns exist help users prevent", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "super awesome say makes logical coupling lazyloading ember apps well wishful thinking", "d": "12/2014"}, {"body": "already mentioned zipfworksemberprerender something works well backends ruby python php would awesome thought something like inverted rest api backend post json route service running node receives complete html back probably focus issue would awesome next step imo", "d": "12/2014"}, {"body": "probably obvious anyway seo might neat solution served html page contain content inside body ember boots replaced dynamic app", "d": "12/2014"}, {"body": "feature flags enableddisabled runtime noncanary builds warnings printed console intended explain jsbin console output working jsbin canary builds", "d": "12/2014"}, {"body": "thanks quick response work emberjs", "d": "12/2014"}, {"body": "sgtm", "d": "12/2014"}, {"body": "please mark via yuidoc", "d": "12/2014"}, {"body": "naming confusing nt think implementation bug see objectcontroller actually objectproxy thing", "d": "12/2014"}, {"body": "actually seems working perfectly example using cases however get wrapped version case need access controller wrapped property base scope example handlebars foo bar controller something context outside block barsomeproperty lt wrapping controller someproperty lt surrounding context", "d": "12/2014"}, {"body": "rwjblue sorry fault contriving example much original problem actions updated jsbin", "d": "12/2014"}, {"body": "context changed using keyword preserving form actions sent surrounding controller controller specified words behavior exhibited latest jsbin correct get behavior desire specifying action", "d": "12/2014"}, {"body": "rwjblue thank posted stackoverflow", "d": "12/2014"}, {"body": "ran markup like got error would great get better error", "d": "12/2014"}, {"body": "provided jsbin cause exception either fixed issue many updates tweaks gone htmlbars ember helpers last week jsbin tweaked working state himansudesai confirm issue fixed", "d": "12/2014"}, {"body": "apologize seems like jsbin saved markup instead required show error user gets hint going manually tracing source code shows issue line outlined original comment sorry confusion please see jsbin", "d": "12/2014"}, {"body": "problem htmlbars pr take care", "d": "12/2014"}, {"body": "oneeman awesome thank add specific test case input selfclosing tag htmlbars pr free time", "d": "12/2014"}, {"body": "good point updated test include case", "d": "12/2014"}, {"body": "thanks much someone htmlbars crew take look pr soon holiday nt expect move today", "d": "12/2014"}, {"body": "looks like dupe", "d": "12/2014"}, {"body": "nt even ember issue emberdata one one solution define property like models", "d": "12/2014"}, {"body": "closing reopening ember data", "d": "12/2014"}, {"body": "marcemira something like work santa", "d": "12/2014"}, {"body": "believe answer export raw function named export bound helper default export import test raw function tests see example check blueprint ember cli", "d": "12/2014"}, {"body": "tomdale advice absolutely best way forward need bring back backwards compatibility", "d": "12/2014"}, {"body": "totally makes sense thanks help", "d": "12/2014"}, {"body": "removed initial streams refactor leading landed property documented underscored considered private safe remove refactor fairly easy work around globals modules apps would prefer add back thanks report going close issue wo nt fix", "d": "12/2014"}, {"body": "give shot seen looks like one time might messier together since attribute nodes need created element generated whereas old way bindings set call correct confused", "d": "12/2014"}, {"body": "oneeman wonder might appropriate apologies working splitting attr nodes attribute morph object htmlbars attrview object managed via renderer believe required order port attribute bindings shared system htmlbarssyntax attrs", "d": "12/2014"}, {"body": "worries familiarizing view layer good", "d": "12/2014"}, {"body": "mixonic love tackle could provided little additional guidance", "d": "12/2014"}, {"body": "seanpdoyle methods harken back used string buffer would add script tag placeholder string would search convert script tags metamorph objects methods public api safe remove master unfortunately went remove ran several tests still use string buffers believe intent avoiding using template tests decoupled handlebars htmlbars template engine tests keep avoiding templates become bit painful expect utility function two could make things easy buffer pushed dom fragment instead string instead appending view via buffer child view appended via morph still unsure complexity worth vs using template", "d": "12/2014"}, {"body": "mixonic removing seems break tests dependent block fail", "d": "12/2014"}, {"body": "seanpdoyle right test probably exact kind talked", "d": "12/2014"}, {"body": "instead appending view via buffer child view appended via morph good example docs somewhere use looked otherwise undocumented", "d": "12/2014"}, {"body": "mixonic trouble figuring append child using attempt js view viewcreatewithmixins template compile awesome content render function buffer thissuper buffer thisappendchild childview fails complaining ca nt live buffer", "d": "12/2014"}, {"body": "ps sorry handson imagined still trying wrap head around get dom manipulation within", "d": "12/2014"}, {"body": "indream seen behavior recent beta master large refactor process classlist seem recreate easily", "d": "12/2014"}, {"body": "mixonic able reproduce inspect dom edit also present canary", "d": "12/2014"}, {"body": "fivetanley gracias", "d": "12/2014"}, {"body": "mixonic thought regression would appear like", "d": "12/2014"}, {"body": "verified freshly downloaded today date packed old version ember handlebars manually update version ember handlebars ember handlebars run answer questions bower command line thrown confirmed ember handlebars installed ember inspector application failed error mentioned", "d": "12/2014"}, {"body": "replace ref", "d": "12/2014"}, {"body": "mattma try enabling feature flag please", "d": "12/2014"}, {"body": "indream switch module like mentioned works fine blog post helps well post comment someone mentioned quoted update template precompiler using embercli info appreciated well second using instead emberrocks could take advantage fashion interface mixonic anyway could use dependency roll version replace rwjblue could share insights magic must implement feature support latest release info would much appreciated thanks", "d": "12/2014"}, {"body": "mattma course plan way build tools use htmlbars compilation could definitely use help getting gulp wrapper sounds neat rwjblue working emberrails build pipeline think recommended api starting come focus claims usable without broccoli commit robert days ago think remaining hurdle general usage without ast plugin system", "d": "12/2014"}, {"body": "mixonic sounds awesome ast plugin system work parallel along development htmlbars going roll soon think wait official release ember core team rwjblue", "d": "12/2014"}, {"body": "mixonic confirmed work without broccoli thanks rwjblue used version simply export compiler since project developed lighting fast speed wonder going update along new releases also export compiler well", "d": "12/2014"}, {"body": "mattma things settling beta stable yet final api compiling better see reason need keep dependency emberclihtmlbars next weeks answers question", "d": "12/2014"}, {"body": "package everything need compile templates done things", "d": "12/2014"}, {"body": "mixonic sounds great working gulphandlebars allow custom htmlbarshandlebars compiler rwjblue would awesome could drop hard dependency rely package something understand hopefully could help clear confusion difference emberhtmlbartemplate emberhandlebarstemplate two api going merge one simple api", "d": "12/2014"}, {"body": "replicate jsbin unable", "d": "12/2014"}, {"body": "fivetanley oh bad still using emberhandlebarsregisterboundhelper santa", "d": "12/2014"}, {"body": "error occurring compat helper layer either", "d": "12/2014"}, {"body": "link pinned latest commit case comes future", "d": "12/2014"}, {"body": "one point assert fired within settimeout escape run loop good reason stopped keeping mind meaningful stack trace already lost given assert fires within runloop queue rather anywhere related source error made assertions entirely unusable would result cascading failures", "d": "12/2014"}, {"body": "tasks within run loop due emberassert fine people onerror set isolate tasks emit failures channel", "d": "12/2014"}, {"body": "made assertions entirely unusable would result cascading failures sure cascading failures referring given assert question takes place run loop queue async disconnected originating failure stack trace useless came settimeout fine people onerror set isolate tasks emit failures channel well nt think fine based demonstrated jsbin still emit failures channel asynchronously effect substituting useless settimeout stack useless run loop queue stack thoughts", "d": "12/2014"}, {"body": "believe solution looking unfortunately also poses additional ergonomic issues testing originating failure easily leak subsequent tests enhancing solution require work rsvp amp backburner emit class errors existing queues flushed current runto completion async perspective within runloop sync world outside runloop makes similar chrome firefox log unhandled exceptions logged end current macro task queue micro tasks flushed", "d": "12/2014"}, {"body": "seem ember issue likely issue emberclihtmlbars embercli please open issue one projects share repo used easily reproduce issue facing", "d": "12/2014"}, {"body": "please reopen githubcomstefanpennerembercli may even end htmlbars addon sure yet thanks bringing attention take better care track", "d": "12/2014"}, {"body": "rwjblue always beating commenting issues p", "d": "12/2014"}, {"body": "thank", "d": "12/2014"}, {"body": "way disable published builds", "d": "12/2014"}, {"body": "theory custom builds could ghempton", "d": "12/2014"}, {"body": "yep definitely possible prevent embedded published builds", "d": "12/2014"}, {"body": "feature seems slightly disruptive lot past issues closed solution disable mandatory setters would accept pr reenable configurable runtime development builds", "d": "12/2014"}, {"body": "adding removing feature source build step allows much better optimizations production builds remove code completely would prefer fix whatever issues alluding add long running flags people know use aka expert mode", "d": "12/2014"}, {"body": "saying leave check production saying allow feature disabled development runtime without requiring custom build production build could still identical libraries require custom setters conjunction ember objects", "d": "12/2014"}, {"body": "somewhat unique feature removed production build required development", "d": "12/2014"}, {"body": "yes pr", "d": "12/2014"}, {"body": "opposed reviewing pr need carefully consider move forward", "d": "12/2014"}, {"body": "well since logic would relatively straightforward makes sense decide beforehand happy work since third party library developing depends would detriment require users custom build ember get around developmentonly constraint", "d": "12/2014"}, {"body": "lot past issues closed solution disable mandatory setters usecases entirely ambiguous guard meant protect users bypassing kvo suffering many worse issues cases people using bypass guarantees framework offer using framework provide api solves issue specific issue working around using getset nt solve problem", "d": "12/2014"}, {"body": "working feature flag would really useful us right go directly emberjs bowercomponents directory comment assertion use coalesce build offline tool working looking github seems even feature flag developed called mandatorysetter looks like used parts embermetal including tests guess put properties back since removed disabled", "d": "12/2014"}, {"body": "stefanpenner think general issue libs target want write adapters ember ca nt guaranteed every lookup within ember adapter uses ember", "d": "12/2014"}, {"body": "stefanpenner think general issue libs target want write adapters ember ca nt guaranteed every lookup within ember adapter uses ember get set nt seem impossible also work around provide specific example", "d": "12/2014"}, {"body": "simply put property setter emberobject production works fine development blows using property versions ember one supported behind flag hiding behind feature flag imo still keep users insulated", "d": "12/2014"}, {"body": "hiding behind feature flag imo still keep users insulated runtime flag development versions third party library bypasses mandatorysetter without consuming developer anything whole app would open issues mandatorysetter exists prevent", "d": "12/2014"}, {"body": "well would nt new flag requesting flag maintained order compatibility party libraries class issues mandatory setters aims prevent", "d": "12/2014"}, {"body": "bypassing kvo surprised come think development runtime flag appropriate users disabling feature voiding assurances bypassing known development semver guarantees risk", "d": "12/2014"}, {"body": "think development runtime flag appropriate mentioned happily review pr mostly saying need cautious weigh carefully risk really nt control third party library deciding likely without user understanding ramifications remove helpful assertions mandatorysetter provides", "d": "12/2014"}, {"body": "mentioned happily review pr mostly saying need cautious weigh carefully yes reason part compile step performance overhead even guarded really nt control third party library deciding likely without user understanding ramifications remove helpful assertions mandatorysetter provides ya maybe said risk", "d": "12/2014"}, {"body": "workmanw bindings within block work", "d": "12/2014"}, {"body": "wagenet yeap far tell types bindings work nt know much ember internals used nt know critiea would relevant testing cooked jsbin tests componentcontroller value bindings plain ole templatevalue bindings though streams think edit detail test clicking button demonstrates bug toggling value bound changing text field demonstrates inline template value change bound value checking box demonstrates outward binding change within block", "d": "12/2014"}, {"body": "also fwiw work using aware private checked jsbin helper work expected see least say behave differently regard", "d": "12/2014"}, {"body": "oneeman fixed", "d": "12/2014"}, {"body": "workmanw heads plan remove private unboundifboundif helpers", "d": "12/2014"}, {"body": "mmun referring removing replacing right", "d": "12/2014"}, {"body": "workmanw yes exactly still acting let know", "d": "12/2014"}, {"body": "mmun awesome thanks heads migrated using cheers", "d": "12/2014"}, {"body": "closing favor", "d": "12/2014"}, {"body": "believe meant favor", "d": "12/2014"}, {"body": "access", "d": "12/2014"}, {"body": "published thank reminder", "d": "12/2014"}, {"body": "simpler failing testcase bindattrtestjs javascript test able bind multiple classes passed string bindattr class function var template compile var content emberobjectcreate property firstclass secondclass view emberviewcreate template template content content runappend view ok view div hasclass firstclass ok view div hasclass secondclass", "d": "12/2014"}, {"body": "closing favor", "d": "12/2014"}, {"body": "ah promisealias shorthand maybe causing", "d": "12/2014"}, {"body": "reminder move", "d": "12/2014"}, {"body": "things like probably better addon eg embercli addon submit", "d": "12/2014"}, {"body": "believe several options drop readonly needs lazy injected properties special case construction enforce container tests nt like unit level tests add special case test helpers may favorite although like feature advocate", "d": "12/2014"}, {"body": "personally see injections declarative di seems completely broken died properties providable di system say straightup obvious bug", "d": "12/2014"}, {"body": "personally think guarding accidentally overwriting service save devs lot headaches see wycats point perhaps assert changed ensure stub isa etc would make collisions quickly apparent also allow services specified directly stubbed also really bad always wanted see emberqunit support stubbed eg javascript var thingservicestub emberobjectextend moduleforcomponent something somethingcomponent needs component otherthing service thing thingservicestub", "d": "12/2014"}, {"body": "dependency injection composition intended work hand hand even though implement lookups cps user playing role nondynamic properties imo allowing injection cps stomped cleanest least surprising solution making allow registration might nice nt think solves issue simple manner special objects simply impossible create without container feels really wrong great catch tomdale", "d": "12/2014"}, {"body": "perhaps assert changed ensure stub isa emberservice embercontroller etc interesting wonder nail", "d": "12/2014"}, {"body": "wrong say controller able override potentially injected property think many cases default injected property would generally apply across class objects also see places particular controller service may special requirement explicitly override default may thinking incorrectly treat injected properties property present base class use case case basis perhaps property could explicitly whitelist properties intentionally overridden still assertion catch unintended overrides another option add modifier property like", "d": "12/2014"}, {"body": "perhaps assert changed ensure stub isa emberservice embercontroller etc lean toward making assert tests often use informal double ducktypes actual serviceapi see trying fear leaking validation step injection domain valid enforcement type", "d": "12/2014"}, {"body": "agree mixonic always correct detect poor experience folks making simple mistakes clobbering incorrectly", "d": "12/2014"}, {"body": "sounds like consensus treat injected properties like embercomputedreads", "d": "12/2014"}, {"body": "slindberg c", "d": "12/2014"}, {"body": "yep pr merged last night get right version update tag link shortly", "d": "12/2014"}, {"body": "tag updated new version linked emberjscom correct", "d": "12/2014"}, {"body": "topic components breaking encapsulation access hence access containing controller via handy ugly kind way feel like breaking encapsulation one great benefits components aid encapsulation two ways easy break encapsulation rendering somewhat leaky abstraction core team view something fixed future version ember", "d": "12/2014"}, {"body": "nt much experience requirejs fundamentally change way use require handlebars update handlebars perhaps root issue handlebars bower compatible requirejs regardless ember", "d": "12/2014"}, {"body": "strange thing upgraded also upgraded embercli problem uncaught error could find module handlebars requiremodule anonymous function requiremodule requiremodule requiremodule anonymous function anonymous function uncaught error could find module ember", "d": "12/2014"}, {"body": "made test reverted everything though might related embercli started working project amp handlebars updated bowerjson handlebars amp ember previous errors appear", "d": "12/2014"}, {"body": "using requirejs old preember cli projects ran issue looks like handlebars nt exposing global get things working ie prevent ember complaining define pathtohandlebars function handlebars windowhandlebars handlebars require pathtoember function ember", "d": "12/2014"}, {"body": "issue another way remove amd check top handlebars lib expose global variable requirejs conf make sure keep handlebars shimmed", "d": "12/2014"}, {"body": "courthead put code make work", "d": "12/2014"}, {"body": "app work nt use instead create hbs template file instead know embercli included production build", "d": "12/2014"}, {"body": "yeah trying minutes app results far tried canary running different app canary yesterday problems seems like either recent bug forgetting step somewhere", "d": "12/2014"}, {"body": "looks like feature flag still necessary beta enabling solves error", "d": "12/2014"}, {"body": "must still use feature flag due issue embercli world actually know version ember using working need enable feature flag", "d": "12/2014"}, {"body": "indeed solved problem thanks lot guys", "d": "12/2014"}, {"body": "balinterdi great hear sorry troubles", "d": "12/2014"}, {"body": "rwjblue planning leave open fixed things embercli close point embercli ticket", "d": "12/2014"}, {"body": "wagenet like keep nt loose track final", "d": "12/2014"}, {"body": "fixed emberclihtmlbars", "d": "12/2014"}, {"body": "also thanks danmcclain fixing upstream", "d": "12/2014"}, {"body": "submitted add back compat layer still need decide want export", "d": "12/2014"}, {"body": "closing need add api htmlbars future simple", "d": "12/2014"}, {"body": "seems like backslash prior causes error might issue simplehtmltokenizer throw error throw error", "d": "12/2014"}, {"body": "rwjblue yeah retested issue embercli app throw error command line backslash directly precedes however note cases throwing error character still appears stripped final rendered html", "d": "12/2014"}, {"body": "one bad easy fix need escape appear string escaping double quotes newlines currently see", "d": "12/2014"}, {"body": "fixed tildeiohtmlbars", "d": "12/2014"}, {"body": "close", "d": "12/2014"}, {"body": "type marked basically back burner provide along cancel everything good", "d": "12/2014"}, {"body": "time take stab updating accordingly", "d": "12/2014"}, {"body": "stefanpenner emberruncancel later return undefined", "d": "12/2014"}, {"body": "stefanpenner", "d": "12/2014"}, {"body": "stefanpenner cancel function timer var timertype typeof timer", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "also run really pain controller needs extended purpose", "d": "12/2014"}, {"body": "ember generates route backed controllers route entered model fulfills decide correct type controller known time may need define upfront use something like going forward controllers singleton services rendered components needs goes away entirely nt believe specific problem continue exist", "d": "12/2014"}, {"body": "hello unfortunately nt appear bug rather questions suggest using better venue stackoverflow feel free cross link post", "d": "12/2014"}, {"body": "sorry", "d": "12/2014"}, {"body": "problem need keep issue tracker organized", "d": "12/2014"}, {"body": "morph tag single textnode processing element assertion happening find escaped", "d": "12/2014"}, {"body": "suppose nt try put morph first place possibility dynamic content inside", "d": "12/2014"}, {"body": "rlivsey correct believe would fixed inclusive morph changes pipeline mixonic mmun would know", "d": "12/2014"}, {"body": "rwjblue seems wrong placeholder script tag look little wacky probably better", "d": "12/2014"}, {"body": "thanks report couple issues htmlbars components generating unsafe morphs ember needs htmlbars template object ca nt believe test", "d": "12/2014"}, {"body": "seems good would love pr changing use", "d": "12/2014"}, {"body": "rwjblue dont believe solution ultimately slower assuming safely iterable would suggest first approach making safely iterable appears like flat object suspect nt needed likely causing deopt try switching also contain correctly shape node samsaffron unfortunately nt extra bandwidth week work time add benchmarks make changes gladly provide feedback", "d": "12/2014"}, {"body": "micro benchmark demonstrating object enumeration assuming object fast enumerable numbers chrome latest best solution attempt get fast use nt possible best option", "d": "12/2014"}, {"body": "stefanpenner safely iterable mean eg objects without custom prototypes", "d": "12/2014"}, {"body": "petka enumerates cases really well", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "possibly deprecated nt use internal methods use", "d": "12/2014"}, {"body": "deprecated since prior removed time removed every time used deprecation warning printed console", "d": "12/2014"}, {"body": "rwjblue well using app worked pretty well nt cause deprecation warning suddenly nt work anymore also anyway exactly looking thanks pointing btecu internal methods mean ones described documentation", "d": "12/2014"}, {"body": "think may getting deprecation warnings use development ember production build minified", "d": "12/2014"}, {"body": "ember used ember cli uses development ember gotten every deprecation warning worked beginning far important useful embernone never saying", "d": "12/2014"}, {"body": "awesome easy patch got time try pr", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "thanks", "d": "12/2014"}, {"body": "whoops wrong linking last one sorry", "d": "12/2014"}, {"body": "shama believe interpret capital part global moving away globals may want change behavior", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "code codebase look like single person typed matter many people contributed quote favorite style guide clean without unnecessary spaces easy read pretty standard almost need consistent across project", "d": "12/2014"}, {"body": "rwjblue happened jscs setup going", "d": "12/2014"}, {"body": "like airbnb style guide well ca nt project simply adopt airbnb style guide usemodify licensed mit license long original source referenced appropriately serve huge jump start particular issue new sure genesis request know say greatest form flattery imitation airbnb certainly worthy imitation comes style document", "d": "12/2014"}, {"body": "landed jscs integration working rules", "d": "12/2014"}, {"body": "related pr", "d": "12/2014"}, {"body": "nt optimal nt believe bug either", "d": "12/2014"}, {"body": "one solution call eg sure internally expect developer stefanpenner pretty sure bug close", "d": "12/2014"}, {"body": "sure internally expect developer ya suspect nt bug nt believe developers without monkey patching native array methods ca nt hope safe guard reasonable scenarios also hope continue minimize usage proxies going forward", "d": "12/2014"}, {"body": "going go ahead close bendemboski hope makes sense", "d": "12/2014"}, {"body": "well see two issues either bug documentation bug documentation says pushobjects adds objects passed enumerable end array implementation correct say accepts native array enumerable also reason ran addobjects works fine passed arrayproxy converted addobjects pushobjects stopped functioning correctly quick survey similar methods reveals addobjects actually outlier pushobjects unshiftobjects removeobjects setobjects work passed native array whereas addobjects works fine arrayproxy would think would want methods consistent especially addobjects pushobjects want support native arrays passed methods rather enumerables documentation updated sure leaves us far bug think issues definitely addressed", "d": "12/2014"}, {"body": "agreed unless compelling reason accept arguments", "d": "12/2014"}, {"body": "compelling reason maybe compelling reasons slightly unmotivated consider issue worth fixing atm obviously someone energy time provide quality tested pr nt demonstrate issues sure happy accept potential performance overhead intercepting method calls extra internal complexity plans move away proxies plans move enumerable something iterable compatible", "d": "12/2014"}, {"body": "totally fine requiring native arrays saying consistent either way due semver compat would need deprecate passing arrayproxy instead removing support completely", "d": "12/2014"}, {"body": "due semver compat would need deprecate passing arrayproxy instead removing support completely ya need find way mess preference entirely rather scenario solving somewhat loosely held opinion", "d": "12/2014"}, {"body": "stefanpenner totally agreed bendemboski would able take look submitting pr deprecate using", "d": "12/2014"}, {"body": "sure", "d": "12/2014"}, {"body": "pr created", "d": "12/2014"}, {"body": "intended behaviour computed properties lazy nt really exist data fetched typically template layer pulls data activates listen cp via observer cp nt get consumed naturally add observer assuming observer also consumes cp everything works expected", "d": "12/2014"}, {"body": "htmlbars nt support feature yet template look like table static dynamic parts", "d": "12/2014"}, {"body": "mmun handlebars welcome emberjs outlet", "d": "12/2014"}, {"body": "yeah static fix easily dynamic stuff curious actually using vs hbs items item itemname bit trickier", "d": "12/2014"}, {"body": "mmun makes sense easy enough add tags figured going figured making issue might save others time upgrading static version hard might good idea add something changelog people least aware upgrading going forward sure best way handle pretty confusing tags normally added dom automatically missing ember apps", "d": "12/2014"}, {"body": "know mixonic quite bit work ensuring exact scenario worked properly metalviews see", "d": "12/2014"}, {"body": "pretty confusing tags normally added dom automatically missing ember apps totally confusing maybe added html spec grrr concerned catching possible edge cases implement optionally omitted start tags tbody think position shifted opinion problem worth solving since solution might confusing bug cooler heads may yet prevail", "d": "12/2014"}, {"body": "mixonic generally cool lets discuss today next htmlbars meeting todayish", "d": "12/2014"}, {"body": "mixonic agreed edge cases trying catch could become huge source issues especially trying mimic behavior browser maybe good solution leave behavior core htmlbars add hooks could done addon", "d": "12/2014"}, {"body": "mikegrassotti possible addons update ast template compile time possible hook today even easier", "d": "12/2014"}, {"body": "built htmlbars", "d": "12/2014"}, {"body": "code paths likely hitting", "d": "12/2014"}, {"body": "seems bad confirm state master betas", "d": "12/2014"}, {"body": "ember latest ember seem fail way", "d": "12/2014"}, {"body": "saladfork thank kindly", "d": "12/2014"}, {"body": "think currently emergent behavior anything else controllersitemcontrollers deprecated suspect may get fixed suspect good tested pr get accepted suspect core may opt fix", "d": "12/2014"}, {"body": "agree seems counterintuitive behavior working example hack properly set colorservice arraycontroller indexcontroller enables proper bubbling behavior", "d": "12/2014"}, {"body": "thanks responses ember seems suggest desire move towards explicit datacontext templates see consistent handlebars scope deprecating contextshifting even behavior emergent template deceives reader action flow expect action fire context current template gt gt stefanpenner hmm would happy try forwardthinking solution would recommended nocontrollers approach solve issue booleans putting array service item controllers components check membership nonbools still issue though short creating hashdictionary lookup service ca nt think way maintain state item ebryn suspect solution might work case items used multiple places would clobbered", "d": "12/2014"}, {"body": "saladfork yep definitely limitation workaround", "d": "12/2014"}, {"body": "furthermore using itemcontroller directly results actions sent inside loop expected see", "d": "12/2014"}, {"body": "needs considered static modified runtime seems strange need create strange graph share route controllers routes push data controllers via controllers push actions routes likely dataflow going less ideal nt bug much better venue qa stackoverflow need keep issue tracker focused", "d": "12/2014"}, {"body": "closing favor", "d": "12/2014"}, {"body": "template name known compiler gets string following printed embercli", "d": "12/2014"}, {"body": "could pass template name think bad idea", "d": "12/2014"}, {"body": "eviltrout seems fine pass source filename htmlbars compiler option want set property location info ast nodes eventually anyways support source maps", "d": "12/2014"}, {"body": "able hack asset pipeline wrap htmlbars compilation rethrow error proper document think might good idea pass option want close issue clean things cool", "d": "12/2014"}, {"body": "agree eviltrout would definitely nice context debugging", "d": "12/2014"}, {"body": "yes known issue currently cc machty", "d": "12/2014"}, {"body": "ca nt use computer properties qp default values may add something similar functionality soon meantime try overriding following methods either via within route de serializing date query param", "d": "12/2014"}, {"body": "discovered thsoe two methods posting issue works like charm", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "looking far added failing unit test getting assertion error described hope sort long submit test punt fixing someone else", "d": "12/2014"}, {"body": "reference couple old issues", "d": "12/2014"}, {"body": "looking old issues seems clear best handle certainly depths took failing test ebryn old issue changed line get work current branch wagenet putting discuss tag like old one pinging relevant folks weigh confirmed problem still present htmlbars", "d": "12/2014"}, {"body": "looks like duplicate", "d": "12/2014"}, {"body": "duplicate still fixed canary despite bug marked closed perhaps misunderstanding issue status looked little bit seems caused line code curious api seems remove inserting newly created element say option list attribute output get looks like node list self contained piece html one options looping get false element element removed nodelist first elements default true assume first option list considered selected popped actually selected node stack subsequent nodes marked selected", "d": "12/2014"}, {"body": "eviltrout grrrr seems bad look like bug related slightly different need take look closely seems like tags injected wo knowing context treated separate elements aware stored properties likely fixed upstream", "d": "12/2014"}, {"body": "eviltrout append member new parent element removed node list weird true trust length ie dos nt count blank text nodes toward length", "d": "12/2014"}, {"body": "mixonic api surprised seems support theory odd observation option removed promortes first remaining list automatically", "d": "12/2014"}, {"body": "eviltrout bet exactly correct yuck would need specialcase check track offset actually selected definitely regression sure getting patch cycle worth overheadcomplexityeffort let us brainstorm angles attack", "d": "12/2014"}, {"body": "seems like better question stackexchange rather bug", "d": "12/2014"}, {"body": "sounds good posted", "d": "12/2014"}, {"body": "cc calvinmetcalf", "d": "12/2014"}, {"body": "would love look ca nt find input setup type submit", "d": "12/2014"}, {"body": "best practice related data flows bindings controllers via actions", "d": "12/2014"}, {"body": "also nt likely better question ask stackoverflow", "d": "12/2014"}, {"body": "stefanpenner nt think data flow addressing problem far understand actions triggered user interaction calculated properties may defined component level apart characteristic component nt make sense calculated properties lost binding thanks", "d": "12/2014"}, {"body": "hilem nt actually issue event types appears specifically issue click suspect ember preventing default event behavior browser takes mean checkbox change state nt believe bug solution would apply action handler way want also handle things like checkboxes", "d": "12/2014"}, {"body": "wagenet common design pattern able click anywhere row select row row checkbox checkbox added purely reinforce selectable accessibility reasons telling way deal basically use checkbox fake checkbox images whatever way handle puts lot burden onto accessibility testing would otherwise fine btw nonissue form elements spotted behavior checkbox one thing say ember needs punt issue awhile difficult handle way code currently architected nt see argue nt bug", "d": "12/2014"}, {"body": "default action helper prevents default action case means checkboxes trigger override setting helper see", "d": "12/2014"}, {"body": "thanks wagenet", "d": "12/2014"}, {"body": "addressed issue htmlbars", "d": "12/2014"}, {"body": "speaking ben lesh might related", "d": "12/2014"}, {"body": "quick ccareynetflix probably related p", "d": "12/2014"}, {"body": "fwiw issue referenced project using ember", "d": "12/2014"}, {"body": "ccareynetflix updated version latest right restarted server", "d": "12/2014"}, {"body": "rwjblue correct missed step got go process fix number mismatched tags promising fixing mismatched tags giving error ember serve version valid watchman found version livereload server port serving throw er unhandled error event error fseventstreamstart failed null emit null emit emitreadable emitreadable readableaddchunk readablepush transformpush jsonstreamtransform going try temporarily disable watchman see helps", "d": "12/2014"}, {"body": "running ember serve watchernode worth noting watchman worked great ember embercli", "d": "12/2014"}, {"body": "yes error basically indicating system invalid state regards fsevents either reboot start polling watcher ember serve watcherpolling temporarily", "d": "12/2014"}, {"body": "reverting get fseventstreamstart failed error must unrelated watcher error think far htmlbars bug user error closing thanks look forward testing htmlbars", "d": "12/2014"}, {"body": "awesome thanks testing", "d": "12/2014"}, {"body": "warning incorrect remove harmless nt worry", "d": "12/2014"}, {"body": "thanks mmun thats good know case still sure using htmlbars broke code", "d": "12/2014"}, {"body": "chrism jsbin seems work properly confirm", "d": "12/2014"}, {"body": "rwjblue yep working", "d": "12/2014"}, {"body": "warning fixed", "d": "12/2014"}, {"body": "provide reproducible example otherwise nt actionable us also example open chrome bug nt crash", "d": "12/2014"}, {"body": "verify behavior happening described also suspect bug would like verify machty", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "ember emberradiobutton viewcomponent likely included componentaddon provide also question better suited stack overflow try keep issues repo focused bugs framework please feel free crosslink back post", "d": "12/2014"}, {"body": "rwjblue know implement function problem write nothing occurs loop radio button please reopen issue", "d": "12/2014"}, {"body": "almost certainly bug view related ember example super simple radio button component illustrate things work properly", "d": "12/2014"}, {"body": "rwjblue thank much error mine", "d": "12/2014"}, {"body": "ok seems strange code gives error html signinheader isauthenticatedsessionisauthenticated currentusersessioncontentcurrentuser signin authenticatewithservice signout invalidatesession renders html signinheader isauthenticatedsessionisauthenticated currentusersessioncontentcurrentuser signin authenticatewithservice signout invalidatesession problem using id amp class element fixed html signinheader isauthenticatedsessionisauthenticated currentusersessioncontentcurrentuser signin authenticatewithservice signout invalidatesession", "d": "12/2014"}, {"body": "another template seems break removing class svg element like works", "d": "12/2014"}, {"body": "ugh think dupe issue already raised", "d": "12/2014"}, {"body": "fixed merged", "d": "12/2014"}, {"body": "thanks follow using config seeing message thought would test latest version amp commenting feature flag back seeing message understood correctly nt commit fixed", "d": "12/2014"}, {"body": "chrism think might", "d": "12/2014"}, {"body": "rwjblue still getting error manually removing bowercomponents completely running bower install amp also clearing browser cache case nt want hold think error thought worth mentioning case still appear need include feature flag", "d": "12/2014"}, {"body": "chrism definitely important get right thanks working try update addon published", "d": "12/2014"}, {"body": "rwjblue ok bumped amp think looking good installation wise getting error one thing maybe important say still using ember cli could issue", "d": "12/2014"}, {"body": "ember version", "d": "12/2014"}, {"body": "rwjblue also still seeing thing chrism using", "d": "12/2014"}, {"body": "fixed publish emberclihtmlbars merged", "d": "12/2014"}, {"body": "chrism cdoornink please test emberclihtmlbars latest canary might need", "d": "12/2014"}, {"body": "rwjblue seems work fine amp without need feature flag", "d": "12/2014"}, {"body": "awesome thanks sticking one", "d": "12/2014"}, {"body": "pleasure", "d": "12/2014"}, {"body": "think duplicate", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "take look shortly get kids bed", "d": "12/2014"}, {"body": "came post", "d": "12/2014"}, {"body": "workin", "d": "12/2014"}, {"body": "jonnii meantime enabled feature work well", "d": "12/2014"}, {"body": "rwjblue yeah worked earlier big deal also going play new attribute syntax", "d": "12/2014"}, {"body": "yep played yesterday today gone", "d": "12/2014"}, {"body": "non cases fixed", "d": "12/2014"}, {"body": "definitely seems like work", "d": "12/2014"}, {"body": "cool wanting get involved looks manageable famous last words report status soon", "d": "12/2014"}, {"body": "actually js bin works master well latest release wagenet closed js bin example", "d": "12/2014"}, {"body": "awesome thanks confirming", "d": "12/2014"}, {"body": "fixed updating", "d": "12/2014"}, {"body": "hmm seeing error thrown jsbin double check", "d": "12/2014"}, {"body": "rwjblue forgot mention uncomment offending block uncommented", "d": "12/2014"}, {"body": "private please use general still errors though going update title keep open new failing jsbin", "d": "12/2014"}, {"body": "fix updated issue", "d": "12/2014"}, {"body": "krisselden wagenet bradleypriest sorry guys sure tag seen comments many issues hence", "d": "12/2014"}, {"body": "vishwaas unfortunately emberselect nt good state overall planning deprecate soon simpler version available may still accept prs unlikely work emberselect see", "d": "12/2014"}, {"body": "ah right thanks wagenet", "d": "12/2014"}, {"body": "unlikely core team fix though may accept prs definitely want go direction new select helper", "d": "12/2014"}, {"body": "wagenet point new helper may continue use ember select get working", "d": "12/2014"}, {"body": "new helper yet talk rwjblue progress work", "d": "12/2014"}, {"body": "thoughts issue", "d": "12/2014"}, {"body": "aexmachina may duprelated reducecomputed bug also meta issue pr pr whilst provides improvements address way arraycomputedreducecomputed handles corner cases think realisation different approach sort mergediff required sadly current project deliverables leaves time invest alternative solution much would like", "d": "12/2014"}, {"body": "ahacking yeah like like acrc need overhaul nt suppose got tips workaround avoid thrashing might able use cp becomes async", "d": "12/2014"}, {"body": "yes used avoid repeated updates well deferredasync update nt issue use cases soothing ailment treating core problem per issues referenced potential way forward use stable merge sort derivative diff state calling addremove functions cp appropriate nt think core actually much work compared complexity currently nt luxury time bite polishing testing full array cp replacement stage look various sorting algorithms implementations upshot tsort appears best algorithm array based cp exploit runs stable nt reorder items otherwise considered equal would close n minor changes case ui interactions may approaches array cp given complexity currently obvious many edge cases would nice elegantly bypass problem areas hope sortdiff approach could perhaps dirty list bitmap might allow efficient cp updating would certainly better understanding may able elaborate since depths array cps least sorting use case", "d": "12/2014"}, {"body": "sohumb might potential workaround us also sohumb thoughts ahacking discussion conceptually possible use arrayobservers produce set transformations fed acrc interface way behaves like computed property changes coalesced current implementation seems attempt nt really succeed agree diffing algorithm could well simpler approach", "d": "12/2014"}, {"body": "think regenerating diffing right idea ultimately like diffing happen dom level manipulate list way want including total regeneration still get minimal dom updates lot active discussion around current htmlbars work lays groundwork make possible", "d": "12/2014"}, {"body": "yeah agree diffing dom level would whole lot preferable given small arrays tend ui elements wonder far recompute everything strategy would able take us would bypass fragility incidental complexity suspect cases diffing would matter performance data coming diffs anyway least translated diffs layer semantic information changes involved also like raise incredibly weird design moment really meant incremental reducers ones update diff information provide full array even though property changes coalesced ember call handlers multiple times ca nt realistically pass inside", "d": "12/2014"}, {"body": "wonder far recompute everything strategy would able take us react demonstrated quite far", "d": "12/2014"}, {"body": "react also couples efficient dom diffing engine quite comparison new htmlbars stuff comes meant whatever dom thrashing involved", "d": "12/2014"}, {"body": "recompute everything coalescing property changes avoid dom thrashing", "d": "12/2014"}, {"body": "react also couples efficient dom diffing engine quite comparison new htmlbars stuff comes meant whatever dom thrashing involved gets us far please note ember kvo system well tuned types updates unfortunately entire array changes forces entire rerender nt change array mutate ember underlying system handles scenario optimally using diffing point provides clear wins restores minimal rerendering goal ember even naive array rebuilding point arrayreduce computed shifts problem preserving array equality large complex book keeping problem book keeping current expensive many scenarios flawed remove limitation get big win", "d": "12/2014"}, {"body": "sohumb agree reducecomputed interface mighty strange difficult work thing change event addremove think probably easier cleaner observe array use emberrunonce recompute derived value currently reducecomputed broken excessive recomputation entire array change anyway", "d": "12/2014"}, {"body": "got ta say imho current implementation moved plugin eventually replaced something kinda broken", "d": "12/2014"}, {"body": "ripping implementation would breaking change would something rush people want new implementation right away could definitely plugin would fantastic tue dec pm simon wade notifications githubcom wrote got ta say imho current implementation moved plugin eventually replaced something kinda broken wed dec ahacking notifications githubcom wrote sohumb agree reducecomputed interface mighty strange difficult work thing change event addremove think probably easier cleaner observe array use emberrunonce recompute derived value currently reducecomputed broken excessive recomputation entire array change anyway reply email directly view github reply email directly view github", "d": "12/2014"}, {"body": "aexmachina agree along others doubt wasted significant amount time persuing approach based array cp working looks like first class feature framework find really practice fine unstable features marked array cp stuff state really feature flagged experimental since level critical unappreciative hard work people put feature curation process features like array cp get promoted stable ember release given problems", "d": "12/2014"}, {"body": "curation process features like array cp get promoted stable ember release given problems unfortunately inherited time strict release gonogo policy", "d": "12/2014"}, {"body": "critical unappreciative hard work people put feature curation process features like array cp get promoted stable ember release given problems landed therefore instituted feature flagging general feature review processes", "d": "12/2014"}, {"body": "stefanpenner thanks intimately familiar ember change history surprised given good work observed recently glad current strict policy", "d": "12/2014"}, {"body": "rwjblue thanks might pr ember documentation change give people heads", "d": "12/2014"}, {"body": "add issue sohum spent several hours chasing bug coming eventually tracked another ac issue fix imagine pretty unimpressed think really goes show really nt included ember reliable two experienced ember developers able chase anyone less experience would completely flummoxed another exciting thing came across travels following code reducecomputedjs dependentarraysobserver flushchanges call removeditem addeditem exact arguments reasons debugging noticed view destroyed corresponding removal underlying array turns code normal behaviour sometimes views destroyed recreated apparent reason perhaps example broken acrc leaking another layer system ideally able remove obviously suboptimal performance pov also quite confusing debugging point view create issue", "d": "12/2014"}, {"body": "anyone interested simple implementations use get around problems arraycomputed reducecomputed use naive approach traversing whole array every time changes work fine performance nt seem much worse small arrays lt ember na\u00efve replacements", "d": "12/2014"}, {"body": "javascript diff git amodulesatticaddonutilsunborkarraycomputedreducecomputedjs bmodulesatticaddonutilsunborkarraycomputedreducecomputedjs index amodulesatticaddonutilsunborkarraycomputedreducecomputedjs bmodulesatticaddonutilsunborkarraycomputedreducecomputedjs emcomputedfilterby function key property value emcomputedsort function key sortdefinition yes rolls sort sortby emberassert embercomputedsort requires two arguments array key sort either sort properties key sort function argumentslength var sortproperty typeof sortdefinition string var dep sortproperty key sortdefinition key return emcomputed dep function sortproperty return emget key sortby sortdefinition else return emget key sort sortdefinition yeah absolutely utterly think need removed", "d": "12/2014"}, {"body": "igort another one", "d": "12/2014"}, {"body": "record complexity inherent cps array cps dealing plethora feedback related issues come observers made realise ember approach needs questioned added fact ties views rendered dom updated also constant frictionnocando view contextscope handlebarshtmlbars expressivity handlebarshtmlbars requires lot cps since templates provide limited language express basic js constructs whats scope real problem ability reference components propertiescps yield wire components properties handlebars eg video player controls new block params work bikeshedding syntax passed block params context default led question entire ember paradigm look elsewhere come conclusion reactflux style approach offers much cleaner way forward client server seorendering need complexity cps use fast immutable datastructures get strong guarantees applications behavior use immutable data get undoredo changesets free get damn fast rendering low overhead processing nt need express state terms cps overhead entails use real js etc limited constructs handlebars provides know exactly scope templates limited expressivity case handlebars easily mapreduce data need components use real js using jsx entire view composed components stuff uses js scope rules react damn fine router modelled embers thanks emberists also looked outside box far less surprises gotchas never thought saying much ember looked good going getting polished app across line ember taken toll", "d": "12/2014"}, {"body": "ahacking believe identified things agree working towards hopefully soon see continued evolution satisfy concerns unfortunate nt satisfy points today one thing take offense open minded statement ember evolved desktop like experience web sproutcore solution tries embrace web almost annually ember reinvented refined self improve status quo remove entire categories problems afraid change rather attempt embrace allow system evolve web ecosystem learns unfortunate acceleration evolution ca nt instantaneous personally wish ultimately everything requires elbow grease time reinvestment perseverance enjoyed point often brutally honest comments mostly hold thoughts high regard sad see opinion open mindedness negative", "d": "12/2014"}, {"body": "stefanpenner sorry offended nt believe made statement open mindedness certainly aware embers roots constant evolution undergone tireless efforts core team including immense respect ember core done regard leaders contemporary web development previous statement intended criticize ember developers community even suggest ember ca nt reinvent statement record candid list encountered critical aspects cause pause drivers considering alternatives could silently walk away felt important state ember still complete oss web framework holistic view found anywhere else still ember projects maintain far done ember however believe reactflux offers better proposition architecturally technically well developer productivitymaintenancerobustnessfragility point view things hard discern really understand value merit approaches used anger previously used frameworks drove ember driven something else even though said much looks good ember initially excited prospect htmlbars great stuff still entrenched logicless template model requires helpers lots cps well constrained expressibility composing ui embers way trying tame unnecessary computation minimal dom updates approach starts get strained dealing scopes templates property observer feedback cp observers number inputs mutually dependant fire multiple times problems react jsx templates nt want reduce set numbers divide another present percentage cpobserver shenanigans dealing deferred calculations run loop better yet use immutable datatypes avoid unnecessary recomputation get undoredo free way incredibly empowering compared ember requires react approach nt require declarative templates order minimize dom updates nt need defer cp helpers components render data virtual dom diff approach feel critical factor developer productivity deterministic outcomes cleanrobust implementations maintainable long haul react nt coverage ember allows superior architecture works well client server encompassing like ember ember cli pull router immutable datatypes flux implementation data layer cobble build system together ember offers lot turnkey value react nt yet closing feel ember local maximum requires leap another curve break free legacy see cps handlebars templates see ember reinventing htmlbars push components deprecating controllers server side rendering services like pink unicorns sit seeing kind moves change game like fluxreact ember core team embrace flux unidirectional architecture approach action dispatch stores view controller dom update paradigm built around immutable datatypes dom diff rallying behind", "d": "12/2014"}, {"body": "ahacking totally respect decision part ember still providing exactly looking think plans brings benefit lessons learnt react ultimately ember still delivers coverage workflow conventions need team bit horrified dirty little corner ember codebase made clear think removed time implementing simple replacements go hoping release soon think react got lot offer nt believe second panacea may ultimate nt mean going everyone else team react awesome got long way go get anywhere near ember sure people looking jump ship next shiny new thing limitations approach become well understood ahacking end submitting pr add warning docs stefanpenner would open pr says arraycomputed reducecomputed exhibit unexpected behaviour circumstances people ember community recommend use alternative implementations would good official replacements maintained community stefanpenner plans resolving ember people keep getting mauled even igort certified ember ninja", "d": "12/2014"}, {"body": "aexmachina nt submit pr put forth proposal nt get positive indication would accepted mostly agree everything say also please nt get wrong also recognise react small part overall solution nowhere near coverage ember case shiny new things quite contrary interested flux architecture pattern immutable data dom diff way foward independent particular framework react managed capture ecosystem approaches seem diametrically opposed rendering handlebars cps observers much like ember core team holistically framework including react recognise probably aligned approach react allows currently would great clearer idea future direction ember nt like assume means stefanpenner indicated big changes ahead clear overall vision even though know ember core pretty big thinkers space know services coming controllers dead long live components nt convey enough intent overall architecture vision kindly asking detail please nothing public please publish something clearly articulates defines architecture data events flow architecture", "d": "12/2014"}, {"body": "road rfc pretty explicit highlevel goal explicitly calls reactlike data flow dec pm stefan penner notifications githubcom wrote kindly asking detail please nothing public please publish something clearly articulates defines architecture data events flow architecture tomdale wycats reply email directly view github", "d": "12/2014"}, {"body": "agree ahacking read rfc", "d": "12/2014"}, {"body": "aexmachina wasnt aware rfc since read thanks whilst rfc points important changes still nt get sense big picture changes together transform ember architecture nt see despite fact every change seems like reasonable one see words reactlike nt mean lot really want see holistic picture data event flows within architecture exactly compose everything together clear actually compose components effectively proposed rfc nt see block params sufficient accordion want separate blockscomponents header bodypane basic use cases ca nt see working raised block params rfc think diagram showing event data flows view would really help focus align proposed changes validate fact support goal also nt see reactflux like single directional flow architecture rfc despite changing component actions work nt see clear possibility immutable data supported rfc may well possible may goal purpose clear without high level architecture overview heard services talked mention rfc intended replace models data sourcepersistence layer anyway questionsobservations raise rfc", "d": "12/2014"}, {"body": "nt see block params sufficient accordion want separate blockscomponents header bodypane basic use cases ca nt see working raised block params rfc ahacking helper would handle pretty elegantly", "d": "12/2014"}, {"body": "machty thanks sounds like could work keen see things make composition workable kind overview given htmlbars limited vocabulary compared say dom builder api jsx scope preserving embedded js sounds like core feature support composition nt see rfc admit love ability filtermap real js per react composing components either js jsx seeing handlebars helper escape hatches bit legacyroundabout way get things done see value ember clean dom builder api choice using htmlbars style templates pure js something like jsx nt see something like within rfc", "d": "12/2014"}, {"body": "ahacking love jsx well tradeoffs start using maps filters sort iteration react got pull mapping fn main jsx return value inline return wind something like experimented react section app immutable structures desirable though already working fidgeting ember immediately became part app htmlcss designerdev could longer touch know nt everyone story real tradeoffs react ember fans still feeling certain aspects htmlbars could better elegantly expressed jsx could said way around example handlebarshtmlbars attempting best possible presentation language block still faithful html relieving designers need understand closure jsx attempting minimize number technologies unnecessary coupling build web app view layers still kinda resembling html assumes definitely must know javascript anything meaningful", "d": "12/2014"}, {"body": "machty think excellent description tradeoffs personally like code show looks even nicer fat arrows jsx thispropspeoplemap p gt hello pname using component jsx thispropspeoplemap p gt accept different shops different responsibilities work flows lean towards developer happiness change request markup nt work styles designer wants apply end structural changes anyway new templates partials etc may introduced nt expect designers understand anything within moustaches bindattrs put outlets ember template naming conventions think comments demonstrate base rendering layer amenable hence earlier suggestion foundational dom building api similar reacts potentially whatever htmlbars uses internally would less opinionated imo sensible thing compiled htmlbarshandlebars style templates templating system including things like jsx could use dom builder api", "d": "12/2014"}, {"body": "rwjblue think closed since got merged unless", "d": "12/2014"}, {"body": "updated latest beta version ember still getting strange behavior would really appreciate someone could take look thanks", "d": "12/2014"}, {"body": "providing additional options helper supported spent little bit time tracking figured share helper creates instance view provides options view creation helper transforms bound properties work hood today setting property actually setup binding must provided creation time binding automatically setup likely current form deprecated ember going forward would suggest using component wrap type behavior component layout would use iterate items present", "d": "12/2014"}, {"body": "malstrom mixonic totally right use computed properties use exactly bootstrap accordions works raw handlebars show use emblem template engine similar jade syntax compiles handlebars however app file use configure link views allows pass data attributes links generated linkto still struggle tell try setup jsfiddle", "d": "12/2014"}, {"body": "benoithubert thanks", "d": "12/2014"}, {"body": "thoughts", "d": "12/2014"}, {"body": "seems like bug sorry nt chance triage yet", "d": "12/2014"}, {"body": "lancedikson possible put together small sample app demonstrates issue rwjblue stefanpenner think done loader work thoughts", "d": "12/2014"}, {"body": "wagenet ok push gh soon", "d": "12/2014"}, {"body": "wagenet check demoproject please grateful help issue", "d": "12/2014"}, {"body": "create issue requirejs repo", "d": "12/2014"}, {"body": "lancedikson thanks try give look soon", "d": "12/2014"}, {"body": "disabled hidden behind additional feature flag closing", "d": "12/2014"}, {"body": "erunamojazz without failing jsbin going hard us debug going close get information please let know point also give try", "d": "12/2014"}, {"body": "stefanpenner twokul icajax perhaps make emberdata", "d": "12/2014"}, {"body": "rwjblue ah mystery solved yes would great emberdata also", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "oh odd potentially open changing name deprecating old one", "d": "12/2014"}, {"body": "sounds like reasonable solution", "d": "12/2014"}, {"body": "turns css issue repeatable without emberjs", "d": "12/2014"}, {"body": "released closing", "d": "12/2014"}, {"body": "someone going spearhead nt usually like leaving open feature requests around without pr", "d": "12/2014"}, {"body": "super familiar process introducing new public api though", "d": "12/2014"}, {"body": "jamesarosen good starting place", "d": "12/2014"}, {"body": "also ran problem", "d": "12/2014"}, {"body": "ran problem boolean value set attribute still set element behavior exists chrome firefox nt appear case safari jsbin displays behavior via attribute applied custom anchor link attempt download google homepage instead opening new tab chrome", "d": "12/2014"}, {"body": "adamferguson following plain js shows setting attribute actually adds attribute counterintuitive js developers jsbin deal ember use special value indicate attribute added updated jsbin showing works properly", "d": "12/2014"}, {"body": "rwjblue thanks helps", "d": "12/2014"}, {"body": "mixonic rwjblue still issue right", "d": "12/2014"}, {"body": "yes", "d": "12/2014"}, {"body": "updates", "d": "12/2014"}, {"body": "machty ping", "d": "12/2014"}, {"body": "rwjblue ping", "d": "12/2014"}, {"body": "updated jsbin ember different error trying bindattr element dom underlying issue fancybox changing dom ways view aware basically nt nonember libraries affecting dom bindings otherwise controlled ember", "d": "12/2014"}, {"body": "wagenet recommended way use modals common use case reason work previously", "d": "12/2014"}, {"body": "jgadbois cookbook guides good article modals get started", "d": "12/2014"}, {"body": "yoranbrondsema thanks pointing correct model object string also looks like controller either string object able submit pr changes", "d": "12/2014"}, {"body": "feedback actually issue work intended", "d": "12/2014"}, {"body": "seems like bug need others verify cc emberjscorecontributors", "d": "12/2014"}, {"body": "machty going try look weekend", "d": "12/2014"}, {"body": "zencocoon nice idea unlikely going add significant changes current plan deprecate favor lightweight component helper see", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "solution found nt sure since issue closed", "d": "12/2014"}, {"body": "michaellee since hash urls break anchor links general ember issue proposed solutions valid solution alternative use history location type", "d": "12/2014"}, {"body": "knownasilya awesome thanks went component needed create skip link accessibility reasons modified component little also allows focus change scrollto occurs", "d": "12/2014"}, {"body": "michaellee nice feel free leave comment modifications", "d": "12/2014"}, {"body": "knownasilya left comment also wrote quick tip codehive thanks", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "get fixed", "d": "12/2014"}, {"body": "mixonic looking dom fragment returned seems show elements intact deeper dive html contents nodes passed around methods mentioned mysterious issue seems html looks normal", "d": "12/2014"}, {"body": "ember scriptsafeinnerhtml get unknown runtime error following html hbs columnname errors line", "d": "12/2014"}, {"body": "estshy unfortunately many issues may necessitate significant overhaul ca nt give eta moment love hear people interested helping though", "d": "12/2014"}, {"body": "hi fighting integrate format js ember last days hard fight found discussion issue bmeurant exactly moment necessary extend viewrender solves first part problem explore deeper find whenever condition bound helper one registered ember observes changed example hidden part template shown trigger rendering emberview common thing unless write every single content helper separate view format jsdefined helpers called inside block wo nt available intl object inside data object get injected emberviewrender called therefore translations available helper hand explored handlebars implementation see whether feasible way inject data extending handlebars default maybe overriding method far could find nice bunch chaotic workaround integrate nicely ksol quite right took decision keep walking path rwjblue actually found thread basically topic seen two optics btw guys anyone already working plz let know happy collaborate integration", "d": "12/2014"}, {"body": "btw eventually going", "d": "12/2014"}, {"body": "still experiencing issue ember emberdata however tested without everything worked expected sham truly needed specific emberdata operations simply require shim sans sham", "d": "12/2014"}, {"body": "stefanpenner really sure going issue please go ahead close split like", "d": "12/2014"}, {"body": "stefanpenner really sure going issue please go ahead close split like neither someone needs figure", "d": "12/2014"}, {"body": "going close issue since according stefanpenner least fixed still problems latest stable release currently please file new ticket bonus points check problem still exists beta canary", "d": "12/2014"}, {"body": "time validate app holidays current still require shim additional info issue", "d": "12/2014"}, {"body": "nt problems since removed objectcreate stub removed sham limited shim made sure include first", "d": "12/2014"}, {"body": "good hear", "d": "12/2014"}, {"body": "issue also happening", "d": "12/2014"}, {"body": "fixed folks rwjblue may want cut release weekend", "d": "12/2014"}, {"body": "mixonic agreed thought couple things would like get waiting feedbackclarification", "d": "12/2014"}, {"body": "rwjblue supposed embertestingjs file bower package seeing", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "blesh workaround nt work get url want pass depends properties sure pass value solution", "d": "12/2014"}, {"body": "cwarny hard say without seeing reproduced work around works fine still least next week", "d": "12/2014"}, {"body": "use case tileimagejs export default embercomponentextend tagname image attributebindings x width height src xlink href width height x function return thisget property function return thisget property src function key value argumentslength gt var thisget attr xlink href b c mathrandom return attr xlink href property tileimage called loop parent template passing tile data property notice anything weird using ember", "d": "12/2014"}, {"body": "oh remove workaround meant replace", "d": "12/2014"}, {"body": "probably silly drop attribute never gets added property never gets called something else nt get nt dangerous refer computed property might computed prior rendering case return nothing sorry right place discussion", "d": "12/2014"}, {"body": "possibly work around worked specific scenario could also observe set attribute run run next hack hack workaround afterall commented something like js src undefined updatelinkhref function attr link href thisget src updatesrc function emberrunonce afterrender thisupdatelinkhref observes src didinsertelement", "d": "12/2014"}, {"body": "also tracked", "d": "12/2014"}, {"body": "record also breaks ember persistence foundation", "d": "12/2014"}, {"body": "dontfidget trying align embermap private made breaking change need support multiple versions ember use polyfill please note missing methods like copy friends return wrong version methods copy polyfill attempts use new style foreach callback using older version ember lt think", "d": "12/2014"}, {"body": "wonderful fix converting variable name lower case fixed problem think start battle renaming variable", "d": "12/2014"}, {"body": "skoryky yes works pretty fine thank", "d": "12/2014"}, {"body": "also facing issue", "d": "12/2014"}, {"body": "also confirm well situation multiple query params set like", "d": "12/2014"}, {"body": "seeing error", "d": "12/2014"}, {"body": "also issue ember though cause error nt seem fatal though", "d": "12/2014"}, {"body": "also facing issue updates", "d": "12/2014"}, {"body": "putting agenda next core team meeting", "d": "12/2014"}, {"body": "also observed behavior", "d": "12/2014"}, {"body": "also encountered dirty solution use function within didtransition trick albeit elegantly", "d": "12/2014"}, {"body": "problem thisset controller update query parameter url", "d": "12/2014"}, {"body": "appsearchcontroller embercontrollerextend queryparams domain domain null domainfield embercomputedoneway domain actions searchsubmit function thisset domain thisget domainfield sets domain parameter nt modify url model appsearchroute never called expected appsearchroute emberrouteextend queryparams domain refreshmodel true opt full transition model function params var domain paramsqueryparamsdomain actions refresh function emberloggerlog route refreshing thisrefresh", "d": "12/2014"}, {"body": "please provide work around interim", "d": "12/2014"}, {"body": "clarify thisset code make change class object nt change url", "d": "12/2014"}, {"body": "hi news using build managed fix wrapping assert obviously workaround thanks", "d": "12/2014"}, {"body": "wagenet rwjblue believe closed due getting merged", "d": "12/2014"}, {"body": "anyone interested simple implementations use get around problems arraycomputed reducecomputed use naive approach traversing whole array every time changes work fine performance nt seem much worse small arrays lt ember na\u00efve replacements", "d": "12/2014"}, {"body": "quite beginner ember checked canary build seems fixed simply checked updated createchildview works fine", "d": "12/2014"}, {"body": "getting rid eager urls closing favor", "d": "12/2014"}, {"body": "working htmlbars", "d": "12/2014"}, {"body": "issue problem query params defined route instead route moving query params route controller fixed problem see", "d": "12/2014"}, {"body": "good close due getting merged", "d": "12/2014"}, {"body": "closing trek please reopen think still need docs", "d": "12/2014"}, {"body": "like suggest reopening issue see background basically able past create helper renders component based bound property however internals rendercomponent helper changed individual releases ember possibly longer functions see link background", "d": "12/2014"}, {"body": "quickly wrote believe simple solution problem intimately familiar inner workings ember though could way base add new helper register import ember embermetalcore emberassert import lookuphelper emberhtmlbarssystemlookuphelper module ember submodule emberhtmlbars method component emberhandlebarshelpers param string componentname name component render export function componenthelper params hash options env emberassert one argument helper bound property whose value component render paramslength var helper lookuphelper loadinganimation envdataview env return helperhelperfunctioncall hash options env quick test application seemed work correctly thoughts", "d": "12/2014"}, {"body": "greenarrow would work single one time lookup component bound property would tear set new component bound property changed roughly limitation view helper", "d": "12/2014"}, {"body": "rwjblue ah figured could nt easy acceptable would somebody else interested making happen pointing right direction making happen", "d": "12/2014"}, {"body": "greenarrow rwjblue fine dynamic unbound helper assert stream passed helper would throw assertion implemented would work expected", "d": "12/2014"}, {"body": "mmunoz would taking similar approach partial helper appropriate ie stream provided first parameters view helper create metamorph view subscribes stream tears appends new child view changes sunday december martin mu\u00f1oz notifications githubcom wrote greenarrow rwjblue fine dynamic unbound component helper reply email directly view github", "d": "12/2014"}, {"body": "lukemelia yes definitely", "d": "12/2014"}, {"body": "mmunoz cool work progress able pull together pr early week sunday december martin mu\u00f1oz notifications githubcom wrote lukemelia yes definitely reply email directly view github", "d": "12/2014"}, {"body": "lukemelia think want assert first argument always string name looked container nt make mistakes helper least initially", "d": "12/2014"}, {"body": "mmunoz makes sense planning start making view helper get behavior implement component helper similarly restriction mention sunday december martin mu\u00f1oz notifications githubcom wrote lukemelia think want assert first argument always string name looked container nt make mistakes view helper reply email directly view github", "d": "12/2014"}, {"body": "lukemelia heart mmun made much bettereasier recent refactorings view helper", "d": "12/2014"}, {"body": "lukemelia let know like help awesome smile", "d": "12/2014"}, {"body": "able kill emberdynamiccomponent builtin", "d": "12/2014"}, {"body": "initial pass", "d": "12/2014"}, {"body": "closing issues verified jsbin works expected canary machty fix pr", "d": "12/2014"}, {"body": "metalviews htmlbars fix", "d": "12/2014"}, {"body": "least metalviews", "d": "12/2014"}, {"body": "looks busted", "d": "12/2014"}, {"body": "problem model really strange behaviour", "d": "12/2014"}, {"body": "archaeron pointing nothing embera actually something inherent javascript result two different arrays contents javascript equality checks array object comparing arrays nt compare contents", "d": "12/2014"}, {"body": "seems like likely fix wrapping returns embera means need shim every native array function use concerning alternatives also cross platform performant internal ember uses handle case js var map emberenumerableutilsmap map array function suspect weighing everything balance reasonable limitation mode", "d": "12/2014"}, {"body": "agree stefanpenner", "d": "12/2014"}, {"body": "future js allow us actually subclass things like array happens clear hopefully performant solution", "d": "12/2014"}, {"body": "wagenet know js equality checks meant structure totally different implemented function checks value equality still strange behaviour", "d": "12/2014"}, {"body": "arandaio believe page please demonstrate issue emberjsjsbincom suspect see working code example understand", "d": "12/2014"}, {"body": "wrong person stefanpenner", "d": "12/2014"}, {"body": "oops archaeron", "d": "12/2014"}, {"body": "addressed within", "d": "12/2014"}, {"body": "status issue", "d": "12/2014"}, {"body": "ember removes concept controllers itemcontrollers", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "news", "d": "12/2014"}, {"body": "hey friends picking eventualbuddha left wondering rationale behind breaking change trying upgrade breaking routes", "d": "12/2014"}, {"body": "alexgorbatchev see conversation tl dr need consistent convention know whether path needs transforming autolocation foobar lt gt foobarabout consider index route foobar path hash history ending slash means index basically enforcing convention make sense would great know went omitting trailing slash though please lmk", "d": "12/2014"}, {"body": "alexgorbatchev also note previous important comment extraneous history states index discussion may seem like simple problem first glance tell experience w location classes nontrivial support trivial change server configuration use trailing slash old route needed", "d": "12/2014"}, {"body": "jayphelps existing emberrails app currently ember currently testing following monkey patch work around without modify coffeescript create emberautolocationcreate emberautolocationcreate gt assert emberassert emberassert msg gt emberassert assert return msg rooturl must end trailing forward slash eg app assertapply arguments createapply arguments", "d": "12/2014"}, {"body": "alexgorbatchev mind using plain js people nt know cs", "d": "12/2014"}, {"body": "alexgorbatchev disabling assertion okay keep mind reason least one known bug possibly since location classes nt written tested handle", "d": "12/2014"}, {"body": "javascript var create create emberautolocationcreate emberautolocationcreate function var assert assert emberassert emberassert function msg emberassert assert msg rooturl must end trailing forward slash eg app return return assertapply arguments return createapply arguments", "d": "12/2014"}, {"body": "jayphelps thanks heads testing whole app tomorrow see comes", "d": "12/2014"}, {"body": "wagenet believe closed something ca nt realistically support someone gobs time hands love proved wrong every approach tried leaked", "d": "12/2014"}, {"body": "landed", "d": "12/2014"}, {"body": "thanks stefanpenner help snowballed help posted update solution stackoverflow using knowledge", "d": "12/2014"}, {"body": "jenseng suggestion updated docs always assumed setting computed property worked well", "d": "12/2014"}, {"body": "error emberdata ember", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "workaround use render inside collectionview item template attach item controller pass model works without hacks controller created container described", "d": "12/2014"}, {"body": "still little dark track bugfixfeature towards betarelease merged master figured common meta question raised separately", "d": "12/2014"}, {"body": "seeing issue unfortunately ca nt isolate upgrading giant ember app happening nested properties", "d": "12/2014"}, {"body": "possible mark spam", "d": "12/2014"}, {"body": "seawatts fact username ghost means github already identified spam deleted user account go ahead deleted comment though", "d": "12/2014"}, {"body": "dontfidget may ask decided end resolve", "d": "12/2014"}, {"body": "concern admittedly speculation chugging along hoping nt run problem fair nt run incidents upgraded app ember ember controller alias could definitely cause behavior crop upgrading change things upgrading sure caused effect ember introduces streams supposed lazy bindings curious affected behavior", "d": "12/2014"}, {"body": "seeing issue unfortunately ca nt isolate upgrading giant ember app happening nested properties", "d": "12/2014"}, {"body": "artze suspect change global behavior future maybe", "d": "12/2014"}, {"title": "investigate failure scroll left top test", "body": "see", "num": "1981", "d": "12/2014"}, {"title": "html deep papertoast nt work firefox ie", "body": "html deep papertoast nt work firefox ie documentqueryselector html deep papertoast works html deep papertoast works chrome firefox ie error error syntax error unrecognized expression html deep papertoast caught", "num": "1979", "d": "12/2014"}, {"title": "url", "body": "", "num": "1978", "d": "12/2014"}, {"title": "event toggle", "body": "api works certain type event nt bound bound nothing happen elements sometimes want bind avoid binding twice one event fired wo nt execute twice", "num": "1974", "d": "12/2014"}, {"title": "clone true fails copy event original element cloned one", "body": "attempting use jquery site contains multiple coupon elements respond click event however attempt clone one elements events clone true click event copied cloned element", "num": "1973", "d": "12/2014"}, {"title": "css width nt work", "body": "example var diva var divb css width work nt work", "num": "1972", "d": "12/2014"}, {"title": "firefox throws error sizzle due xhtml violation feature check", "body": "circumstances yet able reproduce simple test case firefox throws system error firebug get following error output invisible char output select id fact line feed shown firebug malformed input popup error code guestimate issue mix xhtml html tags popup error line link reads switch xhtml html source code issue found line following code code changed issue seems f interpreted firefox line feed trips firefox browsers nt see issue issue also present minified version except showing debugger however page appears work fine show stopper step backwards", "num": "1969", "d": "12/2014"}, {"title": "simplify xhr detection", "body": "object detection code used nowhere code documented object supported modern browsers including android ios opera ie caniusecom remove variable together block", "num": "1967", "d": "12/2014"}, {"title": "support usecapture", "body": "jquery dropped support ie lt reason support adding event listeners browsers jquery supports support added would willing work question method signature accept param would guess could also", "num": "1966", "d": "12/2014"}, {"title": "code coverage", "body": "evaluate prototype implementation code coverage tool maybe even core first sizzle cc timmywil mzgol jaubourg dmethvin", "num": "1965", "d": "12/2014"}, {"title": "firefox autoplay video element appended jqueryappend", "body": "part application creating media preview user media acquired getusermedia use jqueryappend video element autoplay ff chrome investigated ff autoplay video element appended document fragment fragment added document basically queryappend think firefox bug already filed mozilla bug report however issue may affect jquery users wanted let know possibly work around issue document issue users performing play element appended works btw might starting point work around code jquery", "num": "1964", "d": "12/2014"}, {"title": "proc varargs ca nt curried properly", "body": "curried proc least one arg argument ca nt partially applied gist demo", "num": "1963", "d": "12/2014"}, {"title": "write new plugin", "body": "sorry jquery question plugin jquery faced problem write plugin plugin form library", "num": "1960", "d": "12/2014"}, {"title": "html value nt work firefox working element", "body": "hi think found weird bug using latest firefox simple test case set random html works try switch script tag div one behavior failing firefox tested ie chrome safari weirdest thing cloning element var tpl tableproducttemplate clone html exact behavior workaround found directly using innerhtml", "num": "1956", "d": "12/2014"}, {"title": "nt rely uglify minification tool", "body": "according mzgol jquery supports uglify possibly specific version uglify based comment dmethvin consider terrible limitation honestly nt know mzgol referring certainly nt writing code work one minifier discouraging users ever minifying code especially best advice developers builds js files", "num": "1955", "d": "12/2014"}, {"title": "jqueryajax datatype default intelligent guess nt work jquery minified", "body": "works code minified minified throws error uncaught typeerror use operator search key data tracking found parses object string solves problem jquery version gruntcontribuglify version think likely problem jquery uglify", "num": "1953", "d": "12/2014"}, {"title": "nt assume browser environment src run smoketest node", "body": "since want support nodejs branch rely globals except passed factory jshint config updated basic node smoketesting issues like nt happen future", "num": "1950", "d": "12/2014"}, {"title": "calling fnextendcss document throws typeerror chrome", "body": "idea consider bug easy enough fix calling code", "num": "1946", "d": "12/2014"}, {"title": "scrollleft scrolltop reinitializing iframe contentdocument", "body": "scrolling manually iframe using iframe contentwindow scrolltop scrollleft x scrollleft reinitializes scrolltop demo see plunker", "num": "1945", "d": "12/2014"}, {"title": "problem supportstyle", "body": "version file jquerydistjqueryjs line run ie service vm parallels desptop found agetattribute style return float left top opacity q return object think better thinks test code", "num": "1943", "d": "12/2014"}, {"title": "take copy jquerylatest", "body": "nt updating anymore per blog post jqueryjs file etc also frozen", "num": "1942", "d": "12/2014"}, {"title": "performance forced evaluation camelcase key fndata", "body": "retrieving data jquery element jquery needlessly calculates camelcased version key even data could accessed via original key already camelcased code could rewritten order evaluate camelcased key failed user setting data", "num": "1941", "d": "12/2014"}, {"title": "release zip files empty", "body": "release script supposed build two zip files distribute cdns created always zerolength release files js minjs minmap named without version numbers internally consistent eg map reference file without version number file also distributed cdnjs release files version numbers", "num": "1940", "d": "12/2014"}, {"title": "release error sizzle version check", "body": "dies check sure backed fon need fix master compat checking sizzle version throw e typeerror arguments pathjoin must strings arrayfilter native objectexportsjoin githubresolvercheckout fulfilled selfpromisedispatchdone promisepromisepromisedispatch flush", "num": "1939", "d": "12/2014"}, {"title": "disable test relying java applets browserstack", "body": "per irc conversation time time browserstack outofdate java causes test run hang causing failures whole module uses seems test seems matter branch nt special logic handling seems hight chance someone team run test suite manually least would catch potential problems disable test browserstack", "num": "1938", "d": "12/2014"}, {"title": "sizzle tickets fixed", "body": "tracmigrated tickets milestone allow css escapes contains fix webkit siblingoffilteredid queries support documentfragment context", "num": "1937", "d": "12/2014"}, {"title": "add renameby method renamenode function", "body": "today browser understand new renamenode method see also typical javascript solution discussed suggestion add method jquery", "num": "1936", "d": "12/2014"}, {"title": "jquery attribute starts selector unrecognized expression", "body": "building web form user clicked text box check box would check box marking record selected using attribute starts selector chrome worked safari firefox developer edition error log contained firefox error syntax error unrecognized expression idfattendingradio safari error error syntax error unrecognized expression idfattendingradio error line tokenize line select line sizzle line find line init line jquery line anonymous function show line dispatch line handle line tested jquery osbrowser environment os x safari older original user report came older safari os x firefox developer edition chrome", "num": "1935", "d": "12/2014"}, {"title": "tolerant", "body": "use promises join several get however fails promises fails could use version whentolerant would fail promises failed read source could work make pull request want know think", "num": "1934", "d": "12/2014"}, {"title": "typeof null object null", "body": "seems odd jquery thinks references type string null javascript thinks references type object javascript typeof null object jquery treat type treating type object useful certain cases since language seems odd", "num": "1933", "d": "12/2014"}, {"title": "migrated release tickets", "body": "tickets closed release migrated trac github issues see original trac ticket details ticket summary warn sizzle nt recent tag release isnumeric implementation version returns wrong results opera workaround tests android unable crossdocument node manipulation error using jqueryajax amd wrap module uses manipulation module declare dependency selector attrval recognize whitespace delimiters", "num": "1930", "d": "12/2014"}, {"title": "hello", "body": "name son", "num": "1929", "d": "12/2014"}, {"title": "get mouse position dragover event", "body": "get mouse position via epagex epagey dragover event recent version jquery however code working jquery example code", "num": "1925", "d": "12/2014"}, {"title": "jquery dialog widget x mark slightly close button", "body": "using dialog ui widget x mark top right hand corner centered button slightly lower right using following libraries following added address dialog box working issue added address dialog box working issue documentation demo shows perfect placement x mark set right please", "num": "1924", "d": "12/2014"}, {"title": "null handled defaultprefilter", "body": "issue day trying use animate eventually tracked issue following piece code line optsqueue hooks jqueryqueuehooks elem fx hooksunqueued null hooksunqueued oldfire hooksemptyfire hooksemptyfire function hooksunqueued oldfire hooksunqueued hooks jqueryqueuehooks elem fx coming back null therefore breaking rest code sure way handling comes back null thought would raise case", "num": "1923", "d": "12/2014"}, {"title": "switch npm internal dependencies", "body": "see landed master", "num": "1921", "d": "12/2014"}, {"title": "ajaxjs depend ajaxxhrjs", "body": "right order use jquery ajax function need depend ajaxxhr wanted use load example would nt work without ajaxxhr never transports setup always errors specifically add ajaxxhr dependencies array order get work", "num": "1920", "d": "12/2014"}, {"title": "csshiddenvisibleselectors selector dependency selectorsizzle effectsanimatedselector", "body": "csshiddenvisibleselectors depends selectorsizzle selector selector points selectornative csshiddenvisibleselectors nt work needs explicitly depend sizzle", "num": "1919", "d": "12/2014"}, {"title": "create css tests using negative numbers", "body": "moment nt tests test things like negative margins one turns bogus see", "num": "1918", "d": "12/2014"}, {"title": "ajaxjs specifying dependencies", "body": "ajax module uses serialize event module nt declare dependencies definition look like", "num": "1917", "d": "12/2014"}, {"title": "isarraylike crashes", "body": "calling causes crash isarraylike final line return type array length typeof length number amp amp length gt amp amp length obj operator supported primitive types string boolean number suggest changing return type array length typeof length number amp amp length gt amp amp type string amp amp length obj", "num": "1916", "d": "12/2014"}, {"title": "use case defensive coding addclass", "body": "currently using bxslider github project something library causing jquery crash site raise issue two reasons bx slider repo seems dead issues think chances getting good fix zero although probably caused jquery think jquery could benefit bit defensive coding case occasion moving slider quickly without multiple sliders page encounter following err outside bx slider messing things things ultimately terminate classesjs module tested things changed kept page crashing intents purposes sliders worked well isnt bug jquery something think would make library better nt see anything contributingmd style guide defensive coding official opinions defensive coding like", "num": "1914", "d": "12/2014"}, {"title": "append bug", "body": "got none navdot element expect get two jquery", "num": "1913", "d": "12/2014"}, {"title": "jquery returns empty set jquery document find throws", "body": "see discussion decided correct behavior throw situations", "num": "1911", "d": "12/2014"}, {"title": "remove context selector properties", "body": "originally reported jquery anonymous lurking months ago remembered looks like properties still present selector deprecated since context since removed attempt however able sign cla due weird moonlighting policies employer properties deprecated since former courtesy strikes right time probably ca nt applied directly anymore bet pretty close", "num": "1908", "d": "12/2014"}, {"title": "doubt currentstyle overlay runtimestyle", "body": "source code url rsleft rsleft elemcurrentstyleleft doubt condition far know runtimestyle attribute higher runtimestyle value currentstyle attribute must value runtimestyle attribute find history bug find bug rwaldron fix opera exception modified code added condition want know reason mybe understanding runtimestyle attribute wrong", "num": "1906", "d": "12/2014"}, {"title": "drop support opera firefox lt safari lt ancient browsers jquery compat", "body": "", "num": "1903", "d": "12/2014"}, {"title": "selectval newvalue nt work option contents leadingtrailing spaces", "body": "example return nt", "num": "1902", "d": "12/2014"}, {"title": "question", "body": "mainly wondering possible via html possible web language hover text appear one rolls mouse pointer text one chooses roll hover text hover text possible nth degree possible know possible html one wants one set hover text", "num": "1900", "d": "12/2014"}, {"title": "nodevalue used deprecated", "body": "nodevalue used deprecated line oreilly book already get debugger errors use", "num": "1898", "d": "12/2014"}, {"title": "jqueryevent created timestamp", "body": "jquery version found around row jqueryjs condition remove dom contains events executing iframe nt know event quetion jquerynow method throw exception date defined iframe removedthis bug happen ie", "num": "1897", "d": "12/2014"}, {"title": "hasclass returning false despite selecting based class", "body": "selecting elements based class example genderchart nvslice function value genderchart nvslice function matter use print hasclass thisvalue get false example consolelog hasclass nvslice consolelog value hasclass nvslice see looping elements class nvslice calling hasclass nvslice elements returns false help much appreciated", "num": "1896", "d": "12/2014"}, {"title": "dom inserted scripts run asynchronously", "body": "see discussion", "num": "1895", "d": "12/2014"}, {"title": "progress already resolved deferred", "body": "code displays undefined would expect result behavior last notify appear described documentation deferred objects already resolved display", "num": "1894", "d": "12/2014"}, {"title": "elem offset", "body": "top boxtop winpageyoffset docelemclienttop left boxleft winpagexoffset docelemclientleft source code offset function return object question dose minus docelemclienttopdocelemclientleft consider maybe part specification", "num": "1892", "d": "12/2014"}, {"title": "check fn undefinednull eventjs function", "body": "would like request small fix attach event selector implementation implementation function class fail place better clearer explanation problem example body click selector handlerhandleclick handler kind implementation however possible handler handleclick click anywere error thrown line jquery file ret jqueryeventspecial handleobjorigtype handle handleobjhandler apply matchedelem args long search found problem hander method implemented yet write tdd everything small steps easy check function fix fn case undefined null throwing error better explanation could make day fix mean eventjs method start line", "num": "1891", "d": "12/2014"}, {"body": "post example mean selector work expression", "d": "12/2014"}, {"body": "expression shadow dom stuff allows pierce web component afaik firefox amp ie nt support shadow dom yet even nt throw selection still valid", "d": "12/2014"}, {"body": "yeah nt registering agreed something fix shadow dom nt implemented browser need detect avoid invalid queries", "d": "12/2014"}, {"body": "issue opened intent could close", "d": "12/2014"}, {"body": "hi dont use like", "d": "12/2014"}, {"body": "nt api technofreaky posted work use case nt want rebind event handler already registered need track imagine second use case terribly common", "d": "12/2014"}, {"body": "works invoke code swapped global exposed page chrome could create test case works completely jsfiddle jsbin without relying specific external site browser experience problem", "d": "12/2014"}, {"body": "hi mzgol thank looking realize already loaded site injecting newer version using using chrome well unfortunately unable generate standalone code tried figure little using existing jquery site able get event copied behave expected question cloned event points original element click cloned element original elements gets highlightedselected way use clone method way event copied applied cloned element guessing function definition original element used following code thank", "d": "12/2014"}, {"body": "two copies jquery independent copy nt knowledge events would need use jquery instance want interact jquery data events element", "d": "12/2014"}, {"body": "try see set elements returned calling jquery selector ignored", "d": "12/2014"}, {"body": "second parameter used context thing add first one behaves expected", "d": "12/2014"}, {"body": "got thanks much", "d": "12/2014"}, {"body": "change since adds trycatch nt cause problem skip remaining feature tests none appear used firefox seems like potential problem currently causing bugs", "d": "12/2014"}, {"body": "fortunately tests reported support tests results result changed detect unless problem exists xhtml mode cough currently nt test", "d": "12/2014"}, {"body": "sounds like great idea see references testunitsupportjs go away well since nt guarantee properties would like file pr", "d": "12/2014"}, {"body": "xml object supported modern browsers right disable ie say nt support anymore always weird understanble used activex hear pointless method never documented tested say get rid sure property never used anywhere else might useful tests either remove add tests cc jaubourg", "d": "12/2014"}, {"body": "sure property never used anywhere else might useful tests either remove add tests property appeared msdn drop check", "d": "12/2014"}, {"body": "markelog xml object supported modern browsers right disable ie say nt support anymore tend agree especially like hear dmethvin thoughts though sure property never used anywhere else might useful tests either remove add tests imo keep detection code perfect weird setups nice people workaround potential problems setting even nt officially support see eg", "d": "12/2014"}, {"body": "xml object supported modern browsers right disable ie say nt support anymore tend agree especially like hear dmethvin thoughts though hence statement prevents crashing startup sure property never used anywhere else might useful tests either remove add tests imo keep detection code perfect weird setups nice people workaround potential problems setting even nt officially support see eg definitely keep meaning need create xhr startup meaning need", "d": "12/2014"}, {"body": "definitely keep meaning need create xhr startup meaning need ie native xhr disabled still global crashes otherwise better change code noop sth like rely", "d": "12/2014"}, {"body": "side note also need think nonbrowser environments may xhr implementation may want fail miserably ie native xhr disabled still global crashes otherwise better change code noop sth like rely whether throws exception constructor invoked irrelevant since cases handled pretty solid point", "d": "12/2014"}, {"body": "side note also need think nonbrowser environments may xhr implementation may want fail miserably right land moment get covered", "d": "12/2014"}, {"body": "whether throws exception constructor invoked irrelevant since cases handled right never throwed better avoid guess nt guarantee", "d": "12/2014"}, {"body": "guess nt guarantee exactly module talking ajax tend apply better safe sorry policy", "d": "12/2014"}, {"body": "ie native xhr disabled still xml global crashes checked disable check later", "d": "12/2014"}, {"body": "checked even disable still available", "d": "12/2014"}, {"body": "imo keep detection code perfect weird setups nice people workaround potential problems setting jquerysupportcors true even nt officially support document support otherwise face problems future would nt reason see leave tests besides way documented way whereas setting like using preferable way say okay inviting user change support properties feels like jaubourg would interesting see unsupported envs would fail would would low amount users woundt could avoid case code", "d": "12/2014"}, {"body": "many undocumented edges would like reduce something trying kill external object", "d": "12/2014"}, {"body": "second thought remove client support property provides way make crossdomain requests like easyxdm library way send request force property real life example", "d": "12/2014"}, {"body": "dup trac talked adding capture new interface though see interested one fit use cases", "d": "12/2014"}, {"body": "cc gnarf", "d": "12/2014"}, {"body": "already multiple projects arschmitz jzaefferer", "d": "12/2014"}, {"body": "use coveralls really really noisy first disabled pr comments looks like qunit well means lose lot value looking notification settings coverage ranges may much issue previously every new commit pr triggered coverage comment lot noise often absolutely actual change coverage", "d": "12/2014"}, {"body": "mobile istanbul envs run", "d": "12/2014"}, {"body": "markelog yes mobile use gruntcoveralls locally via travis", "d": "12/2014"}, {"body": "yeah plugin grunt code coverage tool coveralls service representation code coverage data also code coverage tool check use istanbul phantom", "d": "12/2014"}, {"body": "getting coverage jquery core would tricky many forks require specific actual browser hit", "d": "12/2014"}, {"body": "problems apparently solved istanbulmiddleware enables mode operation aggregates results simple spinning nodejs server istanbulmiddleware making sure test swarm gets downloadinglooking coverage results tearing server run complete", "d": "12/2014"}, {"body": "workaround would expensive size performance whereas issue impacting low amount users given release cycle firefox seems would easier wait fix side", "d": "12/2014"}, {"body": "seem like rare edge case best addressed code encounters problem ideally fixed firefox", "d": "12/2014"}, {"body": "thanks feedback agree edge case please note autoplay issue may also occur similar use cases example webrtc applications playing remote video streams web applications autoplaying video file something people hate done part web page", "d": "12/2014"}, {"body": "nt think submitted issue right repository", "d": "12/2014"}, {"body": "oh yeah wrong j tab sorry", "d": "12/2014"}, {"body": "could ask forum search around find places report new plugins issue tracker definitely wrong place", "d": "12/2014"}, {"body": "asked answer write new plugin", "d": "12/2014"}, {"body": "asking html inside element parsed dom element point text convinced using method makes sense seems like would want use method", "d": "12/2014"}, {"body": "text converts tags html entities ca nt yes asking html inside script element works got html inside script tag set", "d": "12/2014"}, {"body": "gets really weird tpl looks fine html tpl elements html suddenly empty yet text sees text", "d": "12/2014"}, {"body": "want", "d": "12/2014"}, {"body": "text converts tags html entities ca nt example mean", "d": "12/2014"}, {"body": "clearly ca nt take comers comes tools munging code canonical example closure compiler advancedoptimizations enabled comment ticket aimed helping narrow problem could determine whether something code build process sure rely means title clarify seems like way us confidence tool even different version uglify nt break jquery would run jquery potentially multiple times different settings run unit tests", "d": "12/2014"}, {"body": "mentioned actually need pass uglify drop unused args problem us since linter preserves us writing code sure use constructs could changed uglify observable way comment general one may want write code like perfectly valid external consumers think use uglifyjs default settings default manglecompress names code broken", "d": "12/2014"}, {"body": "dmethvin way us confidence tool even different version uglify nt break jquery would run jquery potentially multiple times different settings actually guaranteed fail minifiers aggressive modes break lot valid code rely unwritten contract uglifyjs author code code adheres couple guidelines eg creating functions unused last parameter consumer uses minifier set options make sure external code minify adheres rules well actually default nt break anything compresses terribly basically removes whitespaces safe way default enables options", "d": "12/2014"}, {"body": "sum exactly sure issue minifier nt break code obviously wo nt break code minifier modes may break code may break code exactly mean us write code work one minifier", "d": "12/2014"}, {"body": "exactly mean us write code work one minifier idea earlier comment made sense seemed adamant users minifying code extremely dangerous pretty terrible view us case close issue please nt make comments like", "d": "12/2014"}, {"body": "seemed adamant users minifying code extremely dangerous already seen multiple times external code relying broke passed uglifyjs manglecompress flags turned ca nt give concrete examples currently stopped long time ago partly problems discover code uses one constructs blacklisted uglifyjs prevent linter maybe nt problem currently please nt make comments like ok wo nt btw official policy", "d": "12/2014"}, {"body": "think want code work welltested minifier bugs opened individual basis gladly make change fix", "d": "12/2014"}, {"body": "ok wo nt btw official policy would certainly hope developers absolutely concatenation minification determining right packaging sites apps", "d": "12/2014"}, {"body": "ideally reporter would narrow problem determine whether inside jquery whether want support particular minification behavior nt happened yet timmywil point think need handle come people start using lot aggressive options reporting bugs us either need change code accommodate document unsafe options", "d": "12/2014"}, {"body": "could use little info work break complete test case mention gruntcontribuglify building copy", "d": "12/2014"}, {"body": "checked packagejson file shows dependency howwhy running older version", "d": "12/2014"}, {"body": "building copy using dev version yeoman boilerplate build webapp supply info soon", "d": "12/2014"}, {"body": "sorry insistent since released want sure nt problem published files running uglify jquery retrieve minified cdn work works running older uglify causes problems problem uglify", "d": "12/2014"}, {"body": "running uglify retrieve updated gruntcontribuglify still gives error minified cdn works code minified using lot plugins looks like simple look give details free thanks", "d": "12/2014"}, {"body": "quickly tested result least know broken new version", "d": "12/2014"}, {"body": "really nt minify external files many things go wrong", "d": "12/2014"}, {"body": "really nt minify external files wholeheartedly disagree perfectly sane thing fact saying developers since day one", "d": "12/2014"}, {"body": "really nt minify external files agree scottgonzalez build system site probably minify concat vendors", "d": "12/2014"}, {"body": "scottgonzalez minifiers certain assumptions eg uglifyjs may break code relying value function nt know assumptions external code made ca nt sure minifier wo nt break actually perfect example projects switching development production mode grunt tasks swap development files minfied ones concatenate way safer obviously starts getting harder want use parts jquery use modules via amd use full files huge problem way edit changed rephrased little", "d": "12/2014"}, {"body": "stevemao thought changed template get one jquery unminified file another file rest break change second line get separate minified jquery separate file rest js", "d": "12/2014"}, {"body": "going close find issue jquery please post reply reopen", "d": "12/2014"}, {"body": "fnextendcss please create testcase site like", "d": "12/2014"}, {"body": "markelog names anonymous functions attached jquery using yes test case needed", "d": "12/2014"}, {"body": "looks like used inside chrome extension nt support way sure happen markelog says need stack trace go", "d": "12/2014"}, {"body": "looks calling crashes", "d": "12/2014"}, {"body": "indeed extension tested nt time right try grab pfnpassifox change chromeipasschromeipassjs see error console page tries search password fields", "d": "12/2014"}, {"body": "kasbah dmethvin said nt support jquery extensions need use", "d": "12/2014"}, {"body": "think jbedard right though nt make sense", "d": "12/2014"}, {"body": "oh good one funny go extra lengths get correct window nt use setting values happening iframe gets parent window value", "d": "12/2014"}, {"body": "yea good like", "d": "12/2014"}, {"body": "easy fix seems need iframe test", "d": "12/2014"}, {"body": "oh probably better using iframe window setting", "d": "12/2014"}, {"body": "anyone working take hilnius", "d": "12/2014"}, {"body": "araghava want go", "d": "12/2014"}, {"body": "behaves expected ie lt supposed get experience issues", "d": "12/2014"}, {"body": "closing inactivity", "d": "12/2014"}, {"body": "note also applies branch", "d": "12/2014"}, {"body": "btw nt cause problems file copied jenkins jobs disabled copying file", "d": "12/2014"}, {"body": "would like create pull request easily skipped might well", "d": "12/2014"}, {"body": "would good see jsperf well", "d": "12/2014"}, {"body": "pretty sure diff negligible even worsens codepath since would add check reflect performance cc rwaldron", "d": "12/2014"}, {"body": "certain break tests reason used inside consequent returns end regardless outcome alternate path assignment moved first condition would duplicated alternate path appreciate devs want tweak tinker case nt going benefit jquery", "d": "12/2014"}, {"body": "ok test", "d": "12/2014"}, {"body": "see retrieving data key already camelcased could made times faster chrome firefox without penalty cases cost rwaldron already said repeated twice", "d": "12/2014"}, {"body": "break testsuite", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "weeeeird rwaldron seems reopen investigation need look perf tests implementation bytesize hit", "d": "12/2014"}, {"body": "markelog break testsuite would nt long true cost rwaldron already said camelkey jquerycamelcase key repeated twice appears", "d": "12/2014"}, {"body": "victorhomyakov could send us pr", "d": "12/2014"}, {"body": "yes far understand additional tests needed", "d": "12/2014"}, {"body": "patch", "d": "12/2014"}, {"body": "patch fear nt understand mean", "d": "12/2014"}, {"body": "yes submit code changes made pull request", "d": "12/2014"}, {"body": "yes right also could please guide write commit message properly according style repository", "d": "12/2014"}, {"body": "something like core speed fndata camelcased key", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "additional description needed maybe link jsperf test", "d": "12/2014"}, {"body": "also running comparesize files comparesize task raw gz sizes distjqueryjs distjqueryminjs raw gz compared master distjqueryjs distjqueryminjs raw gz compared last run distjqueryjs distjqueryminjs", "d": "12/2014"}, {"body": "nt worry commit message adjust needed", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "better test runs create zip files skip", "d": "12/2014"}, {"body": "looking code created test runs created prereleases", "d": "12/2014"}, {"body": "oh right confusing meaning variable", "d": "12/2014"}, {"body": "final step build maybe archive creation happening async waiting exiting", "d": "12/2014"}, {"body": "nt think likes version number however sure encounter problem mastercompat since dropped bower", "d": "12/2014"}, {"body": "oh understand wo nt encounter problem mastercompat sizzle version funky", "d": "12/2014"}, {"body": "rversion nt match passing null fix wo nt matter", "d": "12/2014"}, {"body": "occurs would considered error", "d": "12/2014"}, {"body": "suppose would right might future", "d": "12/2014"}, {"body": "publish version sizzle npm exactly fit format xxxoptionalword", "d": "12/2014"}, {"body": "jzaefferer mentioned whole test nt need dropped part", "d": "12/2014"}, {"body": "looking source wondering two places confused think important part test check three things data andor data flash data nonflash nt need applet need nonflash pdf seems work least android ios modern chrome firefox", "d": "12/2014"}, {"body": "could done plugin initially discussion stackoverflow thread see several important issues consider make crossbrowser implementation create plugin please post link turns useful many people consider including future version jquery", "d": "12/2014"}, {"body": "missing error correct chrome lenient closes selector still wrong", "d": "12/2014"}, {"body": "urgh thank", "d": "12/2014"}, {"body": "thanks adding new apis deferred point method want implemented plugin", "d": "12/2014"}, {"body": "need enhanced promise functionality look library bluebird including would make jquery lot bigger", "d": "12/2014"}, {"body": "thanks suggestion bluebird settle looking tue dec pm dave methvin notifications githubcom wrote need enhanced promise functionality look library bluebird including would make jquery lot bigger reply email directly view github", "d": "12/2014"}, {"body": "provided values wanted would nt exist please read docs", "d": "12/2014"}, {"body": "seems odd jquery makes types ok", "d": "12/2014"}, {"body": "odd jquery nt making types began bug first implementation javascript stuck object type tag represented pointer incorrectly treated type tag hence erroneous result", "d": "12/2014"}, {"body": "ok kind knew rick blew mind", "d": "12/2014"}, {"body": "timmywil wink realized nt used since talking c code haha", "d": "12/2014"}, {"body": "rwaldron pretty interesting curiosity bug would thought would accidentally unused definition another condition jstypeofvalue may due gross inexperience c", "d": "12/2014"}, {"body": "think logical connection pointer sometimes bugs right", "d": "12/2014"}, {"body": "nt potential breaking change sure include patch release", "d": "12/2014"}, {"body": "oh forgot remove list", "d": "12/2014"}, {"body": "dmethvin really need think gives us work real reason", "d": "12/2014"}, {"body": "regex include drag events prevents properties pagex pagey coped modifying regex might potential fix", "d": "12/2014"}, {"body": "agree would easy fix get mouserelated properties since dragevent inherits mouseevent general support dragdrop special properties directly use see discussion trac", "d": "12/2014"}, {"body": "araghava blacksvk would like send us pr", "d": "12/2014"}, {"body": "markelog look shortly", "d": "12/2014"}, {"body": "else asked help already first place ask try stackoverflow", "d": "12/2014"}, {"body": "also issue jqueryui think", "d": "12/2014"}, {"body": "need test case investigate put one jsbincom jsfiddlenet link", "d": "12/2014"}, {"body": "try knock one quite difficult contents site dynamic best helps tell causing issue appeared bug somewhere site inserting unnecessary rn start html trying manipulate rn removed problem went away know problem within site figured null probably handled jquery well", "d": "12/2014"}, {"body": "created fiddle get actually run info see happening new content coming rn start appears caused issue hooks coming back null undefined", "d": "12/2014"}, {"body": "variable string jquery object nt appear used", "d": "12/2014"}, {"body": "yeah really get head around get information afraid site dynamic trying pull bits together needed maybe close probably freak incident due bugs code", "d": "12/2014"}, {"body": "close come test case demonstrates error inside jquery post reopen", "d": "12/2014"}, {"body": "already existed want migrate issues milestone remember created list", "d": "12/2014"}, {"body": "take subset list land patch release make single ticket mark milestone note one way references github changes", "d": "12/2014"}, {"body": "could use ajax script transport right potentially might use custom transport", "d": "12/2014"}, {"body": "exactly majority cases also want include ajaxxhr nonetheless optional dependency replaced custom transport excluded altogether", "d": "12/2014"}, {"body": "thing applies effectsanimatedselector", "d": "12/2014"}, {"body": "would like submit pull request dependency logic gruntfile build task", "d": "12/2014"}, {"body": "nt think changes needed gruntfile buildjs", "d": "12/2014"}, {"body": "right nt think changes necessary convention include selector dependences let selector module specify engine use gruntfile mark selector extensions removal sizzle replaced selectornative building think prefer let error messages work someone includes doubt happen", "d": "12/2014"}, {"body": "timmywil would nt better dependencies actual code marked use selector rather gruntfile mean jquery ever went away using grunt wanted use something else dependencies would clearly stated code", "d": "12/2014"}, {"body": "dependencies required way allow optional dependencies excluded main functionality still work amd module keeps track toplevel modules need cdn file noticed selector module points selectorsizzle default user would change include selector extension something overly concerned gruntfile config building ever moved away grunt build task whole would refactored work replacement rather tracing dependencies manually noting exceptions modules depending excluded module removed keep small list keyvalue pairs note remove modules depending excluded one sentence", "d": "12/2014"}, {"body": "thanks opening issue optional dependencies serialize needed data already string error present indicating included user check presence jqueryevent need fire global ajax events", "d": "12/2014"}, {"body": "timmywil apologize tried open ticket tag ajaxjs file nt check master ajaxjs line compared line tagged versions ever get bug fixes see mean serialization custom built versions jquery ever run issue user able figure issue error undefined function thrown", "d": "12/2014"}, {"body": "tagged versions ever get bug fixes releasing patch version soon", "d": "12/2014"}, {"body": "thanks info next time find bug cross reference master branch make sure nt submitted submit", "d": "12/2014"}, {"body": "get call docs pretty clear arg either array object primitive string one", "d": "12/2014"}, {"body": "ah fault calling string primitive object closing issue", "d": "12/2014"}, {"body": "seems defensive coding synonym masking errors whatever passed jquery dom element understand frustrating become dependent blackbox plugin nt work knowing enough plugin inner workings fix asking jquery ignore errors going make harder plugin writers find bugs like bxslider well enough perhaps could fork fix help others since current author seems unresponsive", "d": "12/2014"}, {"body": "yeah see merit viewpoint im used working lot api data inconsistent need keep page crashing agree jquery vested interest forcing plugin writers right yeah already started planning fork taking since original developer dropped map thanks", "d": "12/2014"}, {"body": "works expected please seek help resources like stackoverflow", "d": "12/2014"}, {"body": "still code migrate needs restore methods dmethvin think", "d": "12/2014"}, {"body": "nt thought lately earlier could nt figure simple way expose migrate could move another property like suppose sure inadvertently used", "d": "12/2014"}, {"body": "rather migrate duckpunch etc carry around cruft mainline support", "d": "12/2014"}, {"body": "hmmm since already mess might work could poke selector property", "d": "12/2014"}, {"body": "saying longer necessary opera presto supported may case perhaps could remove patch made see fails currently supported browsers", "d": "12/2014"}, {"body": "ref", "d": "12/2014"}, {"body": "hmmm see probably asking general question line well agree seems setting beforehand needed least unit tests cases tried work fine without docs runtimestyle currentstyle anyone would know answer suspect would markelog", "d": "12/2014"}, {"body": "liujiangfeng doubt perfectly justifiable hack indeed needless guess one ever question magic lines supported whole hack nt code anymore closing", "d": "12/2014"}, {"body": "oh fast still needs", "d": "12/2014"}, {"body": "liujiangfeng would like send us pr", "d": "12/2014"}, {"body": "guard definitely seems unneeded comments ticketcommit right nt sure assigning done advance seems every version dean edwards awesome hack found taking nt break unit tests confident unit tests era", "d": "12/2014"}, {"body": "add couple tests sure course would nt looking hack think simplify even", "d": "12/2014"}, {"body": "alrighty since original author ticket responds taking", "d": "12/2014"}, {"body": "improved via", "d": "12/2014"}, {"body": "meh memory short", "d": "12/2014"}, {"body": "caused fact set valhook reading without going get valhook", "d": "12/2014"}, {"body": "pr", "d": "12/2014"}, {"body": "hi nlowhim jquery issues github reporting problems jquery library rather support questions able get help posting question places stack overflow jquery forum good luck ps trying wo nt possible html alone might able html css might also need use javascript well", "d": "12/2014"}, {"body": "bug report mattlunn explained detail closing", "d": "12/2014"}, {"body": "hey thanks sorry mistake someone told head question try sites best nelson lowhim nelsonlowhimblogspotcom twitter nlowhim get free thu dec matt notifications githubcom wrote hi nlowhim jquery issues github reporting problems jquery library rather support questions able get help posting question places stack overflow jquery forum good luck ps trying wo nt possible html alone might able html css might also need use javascript well reply email directly view github", "d": "12/2014"}, {"body": "jquery extremely old nt support versions please test newest version currently", "d": "12/2014"}, {"body": "mention see master one sizzle sure removed without crossbrowser implications note jquery still heavily used net decade given often sites update browser going break version jquery sure would spewing messages annoy", "d": "12/2014"}, {"body": "information nodevalue deprecated foudn google yahoo apparently old site anymore checked word deprecated document say anything special nodevalue except implemented however still get debugger complaints use attributes nodevalue attribute deprecated use value instead like maybe jquery looking attribute nodevalue source file jquery using nodevalue attribute ff nt like", "d": "12/2014"}, {"body": "new jquery nodevalue used line unminifieded source element perhaps recommend jquery upgrade", "d": "12/2014"}, {"body": "know annoying get spurious console messages nt much version jquery released several years ago provide time machine reopen although new timeline ticket wo nt even exist stuckouttonguewinkingeye", "d": "12/2014"}, {"body": "please provide test case jsbincom jsfiddlenet using latest version jquery", "d": "12/2014"}, {"body": "reveal bug independently cause refer many complicated lib", "d": "12/2014"}, {"body": "okay perhaps get help debugging stackoverflow nt enough information actionable bug report", "d": "12/2014"}, {"body": "remove row jquery version catch exception else", "d": "12/2014"}, {"body": "know since know causing need debug", "d": "12/2014"}, {"body": "need programming help please ask jquery forum stackoverflow report bug please demonstrate using short test case jsfiddlenet jsbincom include thirdparty plugins test case sure use latest version jquery", "d": "12/2014"}, {"body": "cc", "d": "12/2014"}, {"body": "matter many n combined last one never gets progress notification reference docs say deferred resolved rejected progress callbacks longer called exception progresscallbacks added deferred enters resolved rejected state executed immediately added using arguments passed notify notifywith call deferrednotify called progresscallbacks added deferredthen deferredprogress called callbacks executed order added callback passed args notify calls notify deferred resolved rejected progresscallbacks added ignored frankly would nt even expected combined deferred report progress individual ones kind situations probably many reasons standard promise punted progress others thoughts", "d": "12/2014"}, {"body": "jaubourg input", "d": "12/2014"}, {"body": "properly investigate since travelling monday look", "d": "12/2014"}, {"body": "think problem comes deferredjs progress update perhaps done first", "d": "12/2014"}, {"body": "think problem wan na make pr nice unit test boot nicolashenry", "d": "12/2014"}, {"body": "okay way", "d": "12/2014"}, {"body": "merged thank", "d": "12/2014"}, {"body": "per returns coordinates relative", "d": "12/2014"}, {"body": "many ways pass invalid arguments jquery ca nt give specific error messages people reading code would definitely want know handler undefined checking code make clear", "d": "12/2014"}, {"body": "closing since documentation issue keeping milestone since present changelog blog discussion release", "d": "12/2014"}, {"body": "frowning goodbye", "d": "12/2014"}, {"body": "frowning goodbye queue sorry chime seriously going core alternatives custom queue supported anymore", "d": "12/2014"}, {"body": "ever document worked documentation plain objects see docs miss discussion present operations supported plain javascript objects wrapped jquery data prop trigger triggerhandler use data method requiring data plain object result new property object called jquery randomnumber eg undocumented functionality covered unit tests", "d": "12/2014"}, {"body": "side thought since active contributor uses would safe assume functionality implicitly supported even though explicitly documented probably mistake though sure widely used", "d": "12/2014"}, {"body": "yeah learned animating plain object demos back found uses good news deprecation time think way make perhaps queue something replace", "d": "12/2014"}, {"body": "someone time investigate feel free pretty rare case", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "closed sizzle updated", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "jsperf indicating faster", "d": "12/2014"}, {"body": "true currently slow chrome opssec today code firefox considering surprised faster plus ca nt avoid current code path add another path sure call old path cases nt work broken qsa jquery selector extensions", "d": "12/2014"}, {"body": "right way said need comprehensive research including implementation details one perf link", "d": "12/2014"}, {"body": "haha guys merely cross linking relevant stuff also worthwhile show classlist situation native slower rush chill", "d": "12/2014"}, {"body": "per discussion meeting today let add match current docs", "d": "12/2014"}, {"body": "nt think possible autoclose issues another repo timmywil fyi absolutely possible", "d": "12/2014"}, {"body": "arschmitz already written", "d": "12/2014"}, {"body": "mzgol ah ok sorry missed really long thread lol", "d": "12/2014"}, {"body": "mottie think definitely difference firefox interprets things sure fix jquery ideas miketaylr", "d": "12/2014"}, {"body": "yeah looks like firefox bug one linked duped", "d": "12/2014"}, {"body": "way worked around issue set transform back zero demo used quickfix css definition override transform measuring offset top", "d": "12/2014"}, {"body": "going close nt think able put fix jquery level", "d": "12/2014"}, {"body": "dump direct feature detect switch indirect detect reduces whole mess without resource leaks cleanup could even simpler need second part opera support comment right", "d": "12/2014"}, {"body": "could even simpler need second part opera support comment right dropping opera presto support nt matter", "d": "12/2014"}, {"body": "landed fix", "d": "12/2014"}, {"body": "discussed weekly meeting decided change behavior", "d": "12/2014"}, {"body": "actual issue behaviour documented", "d": "12/2014"}, {"body": "oh given filed code repo thought asking behavior change clarifications like make docs file", "d": "12/2014"}, {"body": "dmethvin misc label ok", "d": "12/2014"}, {"body": "mzgol yeah guess seems like waste create new label something like also add behaviorchange since something may want highlight", "d": "12/2014"}, {"body": "mzgol yeah guess seems like waste create new label something like ok wanted distinguish issues consider invalid forgot milestone already serves purpose remove label", "d": "12/2014"}, {"body": "landed nt know github nt autoclose", "d": "12/2014"}, {"body": "knobli seeing first delete request fail", "d": "12/2014"}, {"body": "dmethvin mzgol sorry late response yesterday tested right fails time sure able reproduce problem phonegap app try weekend", "d": "12/2014"}, {"body": "dmethvin tested phonegap like said first time works times return message could find source phonegap run android click navigation test click button see result click anotherbutton see result close app task manager open app click navigation test click second button see another result", "d": "12/2014"}, {"body": "bug way obscure hard debug us invest time someone else would like track give us root cause might able fix", "d": "12/2014"}, {"body": "pretty clearly leak since outer scope ca nt unit test add removal", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "jaubourg review", "d": "12/2014"}, {"body": "test case simpler test case timmywil take look looked like sizzle handling case attributes sure matching", "d": "12/2014"}, {"body": "real know way differentiate given ie lt two cases look identical standard tricks sizzle somewhat arbitrary treatment assume preserve reasonable behavior queries theirselves dubious benefit", "d": "12/2014"}, {"body": "regression patchlevel release broke headless testing see added milestone alarms could please clarify position supporting nonbrowser environments support still readme introjs", "d": "12/2014"}, {"body": "nt landed investigate", "d": "12/2014"}, {"body": "denissokolov could write exactly requiring jquery code", "d": "12/2014"}, {"body": "denissokolov assigned small number things pulled back release expect month two going long wait also need find way test prevent regressions root cause problem first place", "d": "12/2014"}, {"body": "run jquery node simple", "d": "12/2014"}, {"body": "best way sure lands create pull request want happen", "d": "12/2014"}, {"body": "mzgol stated wo nt release new patch quite quickly understand release process complex case big project like jquery make judgement decision want make sure full information however way see currently jquery completely broken nodejs everyone needs blacklist version packagejson fix build inconvenient", "d": "12/2014"}, {"body": "everyone needs blacklist version packagejson sorry assumed something broke nt fix see working correctly working little accident node jsdom check throwing trycatch around fixing makes problem serious thought denissokolov confirm changing one line fixes problem", "d": "12/2014"}, {"body": "kind thing fear would happen think start running smoke tests environments like ie jsdom phantom etc", "d": "12/2014"}, {"body": "running promisesa tests node see fix node still future", "d": "12/2014"}, {"body": "mzgol yes changed line ran copied project tests passed confirmed patch top top", "d": "12/2014"}, {"body": "yeah although original intentent cover environments", "d": "12/2014"}, {"body": "agree need smoke tests environments promisesa tests help node need enable jshint options disable possible nt accidentally use planning january address least denissokolov lot work involved pushing release including sending cdn providers would prefer process get various issues process fixed require manual steps nt think lot node users moment set dependency specifically sorry exactly using jquery node side", "d": "12/2014"}, {"body": "dmethvin run automated tests automated measurements code production run browsers provides much convenient fast environment phantomjs also preparing use environmentagnostic modules analyze html documents pure serverside application", "d": "12/2014"}, {"body": "ok pr serve basic smoketest nonbrowser environments still requires work though", "d": "12/2014"}, {"body": "reference fixed smoketesting added followup", "d": "12/2014"}, {"body": "wrote patch makes working properly actually similar mzgol wrote first comment thing jquery uses hood works fine elements problem check whether element disconnected dom nt found better way rather recursive traversal parent would great native browser function time need deal somehow existing tools solution pretty works expected nt create significant overhead elements inside shadowdom", "d": "12/2014"}, {"body": "without test case ca nt proceed reopen test case showing bug unable create one using either simulated usergenerated events", "d": "12/2014"}, {"body": "since deprecating use plain objects per perhaps close wontfix also even current docs nt say valid plain object", "d": "12/2014"}, {"body": "even though wontfix seems still need modification tests", "d": "12/2014"}, {"body": "looks like unit test plain objects one unit test introduced says fix trac nt mention plain object looked around commits time ca nt find references code depending gnarf anything know history think predates us", "d": "12/2014"}, {"body": "seen written code examples use animate plain objects said things attrhooks cssnumber behave super strangely nt documented particular test cover uses wild believe animating property plain object nt really supported", "d": "12/2014"}, {"body": "wow sorry spreading plainobject comments around multiple tickets gnarf sounds like proposing support plain objects extent want avoid bug reports like one need document okay done example someone always avoid css property names ensure consistent behavior", "d": "12/2014"}, {"body": "black hole undocumentedunsupported really think generic animation layer could support plain objects pretty easily honestly fringe area jquery animation might better supported lower level animate api instead", "d": "12/2014"}, {"body": "examples animating plain objects stuff like text length floating around internet since team member fringe supported", "d": "12/2014"}, {"body": "updating jquery shows longer bug also changing current edge shows bug nt returned well might want close accordingly", "d": "12/2014"}, {"body": "ok closing ticket thanks robertmaxrees", "d": "12/2014"}, {"body": "test cases seem working expected jquery master close please reopen interpreted wrong", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "related per want embrace option camelcase attributes data object first access set camelcase key setter camelcase added keys bulk setter look camelcase key getter ignore direct manipulation operations", "d": "12/2014"}, {"body": "close issue closed sizzle updated jquery fyi reminded sizzle master already supports need add tests", "d": "12/2014"}, {"body": "test smaller window case appears correct content height cases going close ticket really stale reopen someone info", "d": "12/2014"}, {"body": "hmmm attempting parse url bit sanely per might possible preserve hash", "d": "12/2014"}, {"body": "golly think lands hash conveniently could reappend adding serialized params", "d": "12/2014"}, {"body": "unlocked might want distinct ticket ajax hash preservation", "d": "12/2014"}, {"body": "agreed since potentially breaking change good candidate", "d": "12/2014"}, {"body": "per discussion meeting today might occasional run xhtml mime type", "d": "12/2014"}, {"body": "ref", "d": "12/2014"}, {"body": "per comment scottgonzalez seems highly likely jquery code assumes innerouterupperdowner widthheight value since ticket asked way change would break code common enough need create new widthheight apis corresponding documentation done pretty simply plugin needed nt previously requested although op says useful matching media queries", "d": "12/2014"}, {"body": "per comment scottgonzalez seems highly likely jquery code assumes innerouterupperdowner widthheight value since ticket asked way change would break code hand season breaking changes scrollbarwidth pretty mild docs state nt even apply windows would nice consistency media queries scrollbarbearing elements nt even checked match throw really gets fun could certainly see something anyone defensible idea", "d": "12/2014"}, {"body": "agree would nice expose functionality assuming scott knew code would break scottgonzalez point code jquery ui depends apis returning value", "d": "12/2014"}, {"body": "nt think affect jquery ui problem returned made generic logic like making two elements size dynamically aligning elements painful plugin developers accept elements documents windows input long meaningful values returned nt problems possible break existing code jquery ui two cases think use dimensions like try match outer widths generated elements like menu select autocomplete effect placeholder windows never valid inputs cases change wo nt affect accept elements documents windows events positioning logic plugin including scrollbar would undesirable already explicit checks window using support old versions jquery different project lead support jquery would likely dropped long time ago code would likely reduced check change would break positioning within window right edge latter type situation wanted account previous change note making element size window via outer width matching result horizontal scrollbars already vertical scrollbar see also example previous comment end developers always include window check first place", "d": "12/2014"}, {"body": "okay", "d": "12/2014"}, {"body": "looked think another case significant complexity little gain one potential benefits event caller could abort request way callback returning however event calls via documented return last handler value meaning hard find bugs multiple handlers need use signal like call starting get bigger complex potential unusual interactions least single callback know one", "d": "12/2014"}, {"body": "see comments", "d": "12/2014"}, {"body": "per discussion decided good solution least bad solution clear sizzle expando correct", "d": "12/2014"}, {"body": "correct", "d": "12/2014"}, {"body": "fixed nt know github nt autoclose", "d": "12/2014"}, {"body": "autocloses things land master compatonly bugs pulls done manually", "d": "12/2014"}, {"body": "dmethvin ah explains lot", "d": "12/2014"}, {"body": "mzgol great thank", "d": "12/2014"}, {"body": "jquery amd format leverage get custom builds could optimized use requirejs calculate dependencies get functions amd naming conventions names variables filename jquery follows exceptions core jquery amp sizzle sizzle knowledge wrap callbacks iifes assign returned values variables named script name yields something like functions looking variable value add iife wrapped functions output variable requirejs load needed functions custom build allow user download custom build proof concept wrote fun expecting anything", "d": "12/2014"}, {"body": "settling amd marriage convenience us time nt standard seemed better plus previous custom build system definitely adhoc much uglier point would lean towards using modules tool like transpile amd modules something like could still use amd files custom build though check jquery ui builder anything learnborrow", "d": "12/2014"}, {"body": "close pending info", "d": "12/2014"}, {"body": "let us know problem still exists reopen", "d": "12/2014"}, {"body": "dmethvin already updated first post believe clear enough repost hey guys sure proper submit issue really edge case reproduce prerequest using jquery http method crossorigin request browser setup thanks relative easy reproduce jsfiddle however since requiring cors pr merged amp amp deployed forked setup server thanks heroku reproduce please visit jsfiddle see error tested virtual box vm one confirm issue exists native windows open link chromefirefoxsafari works like charm however code setup jquery works fine across possible cause dug code found differences creating object code using method absence regex statement use old maybe nt support method", "d": "12/2014"}, {"body": "little extra thing regarding topic irc channel must changed", "d": "12/2014"}, {"body": "thanks changed", "d": "12/2014"}, {"body": "thanks dmethvin", "d": "12/2014"}]