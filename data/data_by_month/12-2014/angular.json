[{"title": "return null", "body": "sorry english problem http want use external api server example invoke error method return null data stats javascript code get page angular app success methods tried avail resource config etc somebody help much", "num": "340", "d": "12/2014"}, {"title": "watchcollection firing dotted field name", "body": "hi experience issue using directive scope field containing dot name mean field named instance domobj ie obj dom field actual property name contain btw remove name watchcollection first parameter expression works scenario supported thanks", "num": "336", "d": "12/2014"}, {"title": "asd", "body": "", "num": "335", "d": "12/2014"}, {"title": "benchpress add assertions performance tests", "body": "idea assert collected data time see idea use ratios compare benchmarks baselines problems ratios different js vs also different browsers eg chrome vs firefox", "num": "334", "d": "12/2014"}, {"title": "benchmarks run benchmarks real mobile devices", "body": "experiment test reliable benchmark numbers real mobile devices maybe use appium appurify appurify bought google depends", "num": "332", "d": "12/2014"}, {"title": "create single export file per module exports everything", "body": "already eg modules well use file import modules helps refactorings also separate private public exports", "num": "331", "d": "12/2014"}, {"title": "ngsanitize linky filter incorrectly converts query key html entities entity numbers", "body": "url query parameters like part converted results example becomes ie link see jsfiddle", "num": "329", "d": "12/2014"}, {"title": "directive order compiler pipeline", "body": "step order directive types component template decorators step order directives decorators template component could cause issue element ie template decorators use index get directive element injector cc tbosch vsavkin", "num": "328", "d": "12/2014"}, {"title": "putting dijs separate lib", "body": "days research realized dijs repo longer maintained dependency injection repo pretty away previous code base guess plan separate update old repo new code happen time soon thanks", "num": "324", "d": "12/2014"}, {"title": "rootscope global", "body": "reason make rootscope global variable unique single scope present always maybe used apply digest thing whenever single event want handle use custom directive one single purpose ca nt use angularelement scope debuginfoenabled set false wanted use events like onkeydown onfocus", "num": "323", "d": "12/2014"}, {"title": "support async keyword correctly intercepting zones", "body": "traceur support async functions makes writing functions use promises lot easier javascript far know last time checked hidden away behind flag enabled atscript could enabled default might also end driving implementation async support due usage async functions make aspects promises incredibly easier example without async async", "num": "322", "d": "12/2014"}, {"title": "binding multiple directive properties work", "body": "work first property would work expected second work issue seems null second property", "num": "320", "d": "12/2014"}, {"title": "hello world broken dart", "body": "hello world example broken dart following error", "num": "309", "d": "12/2014"}, {"title": "better code generation dart constructors", "body": "vojtajina one difference dart javascript dart fields always exist initialized null explicitly initialized constructor initalization complete constructor body executed current pattern assigning initial value fields constructor body causes initialize field assign later code would smaller probably slightly faster transpiler generated dart initializers instead assignments example generates generate initializer depend constructor parameters initialized field general rule transpiler promote assignments cstyle initializers sees noninitializing position example export class injector bindings list instances list parent injector defaultbindings boolean asyncstrategy asyncinjectorstrategy syncstrategy syncinjectorstrategy constructor bindings list parentnull defaultbindingsfalse var flatten flattenbindings bindings mapwrappercreate thisbindings thiscreatelistofbindings flatten thisinstances thiscreateinstances thisparent parent thisdefaultbindings defaultbindings b much harder since used body dart used initializer initializing field prevent uninitialized fields used hard transpiler know whether thiscreatelistofbindings reads thisparent assigned code rewritten move simple initializers first transpiler promote assignments initializers sees context assigning field expressions avoid helper methods used static methods rather instance methods moving fields forward gives us export class injector bindings list instances list parent injector defaultbindings boolean asyncstrategy asyncinjectorstrategy syncstrategy syncinjectorstrategy constructor bindings list parentnull defaultbindingsfalse thisparent parent thisdefaultbindings defaultbindings b var flatten flattenbindings bindings mapwrappercreate thisbindings thiscreatelistofbindings flatten thisinstances thiscreateinstances generates generate", "num": "308", "d": "12/2014"}, {"title": "protoview finalize method", "body": "gets built using compiler method method would called compiler let know done would allow pre compute values example see", "num": "301", "d": "12/2014"}, {"title": "protoview precompute number local variables", "body": "iterates local variables determine see information precompeted cached", "num": "300", "d": "12/2014"}, {"title": "expression watched twice property changes directive changes", "body": "given create watch points separate watch whcih points one slot property directive binding would speed instantiation run time performance", "num": "299", "d": "12/2014"}, {"title": "performance optimization compiler", "body": "see getting hold lot expensive iterating children using update compiler take advantage", "num": "298", "d": "12/2014"}, {"title": "fix nested template tags", "body": "following template compiled view nt think templates siblings", "num": "293", "d": "12/2014"}, {"title": "ngtouch child element triggers ngclick parent", "body": "example problem using ngtouch angularjs app provide touch events using ngtouch built ngclickactive class animate tile clicked good far issues also checkbox inside tile displayed user edit mode point nt want clicking checkbox trigger parent element click tried canceling click edit mode ngclick ineditmode false amp amp dostuff also using eventstoppropagation checkbox try stop click event propagating tile nothing worked far thanks help also asked", "num": "287", "d": "12/2014"}, {"title": "improve code block rendering output", "body": "dgeni try rendering viewa name viewa viewa local variable name viewa hello namevalue viewa binding expression namevalue inside block resulting output two issues evaluated angular instead escaped background color code block inline instead block making hard eyes block ideally would like run color codingformatting plugin", "num": "285", "d": "12/2014"}, {"title": "question templateconfig directives swapping templates", "body": "hope nt mind fact opening issue ask question one part design bothers could nt find covered design docs looking hello world example see directives used template explicitly listed given template took surprise since one could easily swap template given directive thus customizing markup without touching single line javascript recognize swapping template existing directive asking troubles bit strong contract template directive still convenient amp useful practice understand need solve modularity problem somehow need express directives needed given template gets loaded wonder decision factors involved decision thing comes mind tooling support understand still feels bit backwards express template dependencies js instead template level would obvious question express things template level different story would detailed questions yeh would totally awesome guys could share factors contributed decision expressing template dependencies js sorry answer already covered one design docs simply could nt find", "num": "283", "d": "12/2014"}, {"title": "benchmark compares change detection ideal change detection", "body": "believe considered maximum rate ideal world able get within ideal check code performs sufficiently fast", "num": "273", "d": "12/2014"}, {"title": "make dart optional build system", "body": "build rules autodetect dart found ignore dart rules build js part", "num": "268", "d": "12/2014"}, {"title": "ngoption select item failure", "body": "hello select input field nt load select value indicated variable scope seems problem comparison json objects even content created plunker example show similar issue", "num": "267", "d": "12/2014"}, {"title": "disallow setters nonexisting properties contexts", "body": "consider component prop set template expression evaluation throw clicked would force component authors explicitly declare properties plan use would benefit hiddenclass optimizations js engines also brings parity locals allow extending nondeclared keys", "num": "265", "d": "12/2014"}, {"title": "issues dart", "body": "dart released causes several errors w travis ci working", "num": "262", "d": "12/2014"}, {"body": "configured http use cross domain need add true delete config need inject", "d": "12/2014"}, {"body": "thank help added avail request issued server also recorded server records state angular received use firefox console view response also empty", "d": "12/2014"}, {"body": "wrong repository angularjs located", "d": "12/2014"}, {"body": "oh", "d": "12/2014"}, {"body": "yes wrong repo general support questions like nt asked github rather one support channels see osadan suggestion incorrect nt exist angularjs", "d": "12/2014"}, {"body": "thank", "d": "12/2014"}, {"body": "hi wrong repository want use githubcomangularangularjs", "d": "12/2014"}, {"body": "see", "d": "12/2014"}, {"body": "wrong repository could please reopen looks like valid bug", "d": "12/2014"}, {"body": "yes sorry", "d": "12/2014"}, {"body": "standalone di w useful seems shame couple back angular", "d": "12/2014"}, {"body": "nt simple git submodule", "d": "12/2014"}, {"body": "use submodule dijs already standalone lib asking", "d": "12/2014"}, {"body": "nt go process publishing npm copying files also nt want diffs built di file angular", "d": "12/2014"}, {"body": "watchtower amp expressionist hoping use nonangular project", "d": "12/2014"}, {"body": "hi subfolders published separate npm modules working implementation meant reusable whether sources split separate projects github separate question right want keep everything one repository allows us make bigger changes quickly still git submodules nt work well us require commit project includes another project whenever project changes change made included project travis run tests projects includes project ie would possible add change would break without knowing updated current sha releasing first stable version want rethink strategy source code though", "d": "12/2014"}, {"body": "akxe wrong repo guess wanted open issue good reasons making rootscope global apart obvious problems connected global variables root scope per angular app theoretically bootstrap multiple apps one page actually people seem practice rootscope wo nt made global variable", "d": "12/2014"}, {"body": "sorry nt thought", "d": "12/2014"}, {"body": "actually bug pr way", "d": "12/2014"}, {"body": "confirmed apparently got broken build system refactoring", "d": "12/2014"}, {"body": "size check iteration thu dec pm mi\u0161ko hevery notifications githubcom wrote view iterates local variables determine see information precompeted protoview cached reply email directly view github", "d": "12/2014"}, {"body": "checking compiler whether element really property case nt bind element property create watch element property would happen following case sure often happens whether really special case", "d": "12/2014"}, {"body": "actually think would simplify code one kind memento", "d": "12/2014"}, {"body": "ok bug html parser works outer nested parser change outer nested reason nest elements directly via element example follows subitem x", "d": "12/2014"}, {"body": "haha course get copying old tests incorrect things html", "d": "12/2014"}, {"body": "bzamora guess wanted report", "d": "12/2014"}, {"body": "see two major benefits declaring directives per template modularity want directives active current template treeshaking removing deadcode nt want pay bits wire directives nt use code size big concern mobile web mobile web future declaring going use different using think vs even declarations live template made look less jarring declarations global wrote let assume move declarations templates job translating actual import declaration basically linking emerging js importexport mechanisms html course doable adds extra complexitymagic top current proposal treeshaking provided scripting platform js compiler obviously go templates also treeshaking requires list active directives known compilation time runtime support template directive declarations would need require angular specific preprocessor would basically generate annotation see today treeshaking run afterwards bad idea option imho much require upfront every application also note current design error overspecify list directives example provide list buildin directives pass annotation prototyping later productionizing application narrow reap treeshaking benefits directive list contains union directives swapping templates issue", "d": "12/2014"}, {"body": "rkirov thnx taking time respond much appreciated hopefully others community follow discussion get insight cooking afraid got couple follow questions comments let start question first declare usage directive given template using attribute directives going automatically visible child templates well child templates mean templates referenced components given template specific provide reference set common directives app component level going implicitly visible subcomponent templates trying determine painful going declare directives developer daily life would definitively unhappy situation need reference commonly used directives ngif ngrepeat etc individual templates well components use templates think might partially answering question example provide ngdirectives list buildin directives pass directives annotation prototyping later productionizing application narrow reap treeshaking benefits directive list contains union directives swapping templates issue wonder would work practice would prepare module would export array builtin directives thnx patience answers know could infer things reading code hopefully answers serve community large", "d": "12/2014"}, {"body": "declaring going use different using think angulardirective vs even declarations live template made look less jarring declarations global wrote hmm sure compare nt way expressing template use directives believe new concept way see analogy gt annotating class etc gt directive usage activation concept nt exist gt property correct mixing", "d": "12/2014"}, {"body": "specific provide reference set common directives app component level going implicitly visible subcomponent templates currently directive annotation extend subcomponents shadowdom one good reason validate component template locally ie without knowing component tree might live would prepare module would export array builtin directives yes exactly see confusion analogy nt quite match design annotations thin pod classes basically array push onto internal list directives mutate part system maps class metafields read later accessing correct analogy would static bits ddo gt annotating class etc gt directive usage activation gt directives property templateconfig", "d": "12/2014"}, {"body": "rkirov ok kind expected wo nt propagation template directives tree components makes sense logical technical point view get technicalities correctly practical impact every component well actually template import built directives directive add property sounds like rather annoying inconvenience especially folks coming world things worked technical arguments bringing valid wonder get system technically right easy convenient ti use developers consider creating kind global registry one could say going need directives majority templates ngrepeat ngif good candidates declaring order avoid importing declaration every template know guys trying best thing possible sure going awesome framework point trying understand need write daily basis developer", "d": "12/2014"}, {"body": "merged benchmark js changedetector slower baseline changedetector slower baseline", "d": "12/2014"}, {"body": "mhevery mean sdk available skip everything related dart", "d": "12/2014"}, {"body": "yes tue dec pm victor berchet notifications githubcom wrote mhevery mean sdk available skip everything related dart reply email directly view github", "d": "12/2014"}, {"body": "version", "d": "12/2014"}, {"body": "please use angularjs repo repo", "d": "12/2014"}, {"body": "sure like currently match semantics js returns undefined creates new property start disallowing sets case returns undefined throws addition make get set asymmetric ides know component class result fields able highlight typos", "d": "12/2014"}, {"body": "would vote throwing also getters symmetric", "d": "12/2014"}, {"body": "agree either go full strictness getters setters none", "d": "12/2014"}, {"body": "based hello world example looks like need manually bootstrap top level component register angular allow angular find child models directives services etc", "d": "12/2014"}, {"body": "added new syntax proposal nt radically different team proposal constraints make thing difficult introduces two key ideas explicit ng marker prefix data bound elements raw html depending browser support web components angular parsercompiler either register new matching element proxies bound element via shadow dom replace live dom attribute sections demarcated special attributes bind etc take optional suffix allows special types attribute expressing bindings properties events etc without need prefixes every attribute ngbind ngon inventing opaque new shorthand syntax every new attribute type example one way bindings either direction could easily added bindin bindout attribute sections without invent new prefixes shorthand like ngbindinproperty property may horribleunimplementable figured throw", "d": "12/2014"}, {"body": "sure affects svg type syntax colons allowed nt necessarily mean namespace asked use colons reserve namespaces", "d": "12/2014"}, {"body": "unfortunately nt work internet explorer", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "incompatibility xml serialization broadly reasonable html preprocessing tool like htmlmin etc deal breaker please add constraint one possible mitigation alternate xmlfriendly syntax multiple xmlfriendly proposals pick syntax works xml serialization go also please note xml serialization dead sometimes used intermediate template format various html preprocessing validation tools editor exensions many internal regardless inappropriate angular team take hard antixml stance secondly microsyntax nothing wrong nt care ides hard time supporting never truly supported binding expression syntax generation frameworks either loss would rather readable ngrepeat like comprehension syntax one several awkward binding syntax proposals ngrepeat seen far comprehension syntax easier read far", "d": "12/2014"}, {"body": "sure came conclusion antixml stance supporting haml xml constraint supported fri dec sleepy daddy lt notifications githubcom wrote incompatibility xml serialization broadly reasonable html preprocessing tool like htmlmin etc deal breaker please add constraint one possible mitigation alternate xmlfriendly syntax multiple xmlfriendly proposals pick syntax works xml serialization go also please note xml serialization dead sometimes used intermediate template format various html preprocessing validation tools editor exensions many internal regardless inappropriate angular team take hard antixml stance secondly microsyntax nothing wrong nt care ides hard time supporting never truly supported binding expression syntax generation frameworks either loss would rather readable ngrepeat like comprehension syntax one several awkward binding syntax proposals ngrepeat ive seen far comprehension syntax easier read far reply email directly view github", "d": "12/2014"}, {"body": "two cents syntax discussion one biggest advantages angularjs simple html compliant syntax instead extending expression language introducing entirely new expresion language would prefer learning new attribute prefixes eg ngsyncvalue twoway binding value property ngbindvalue oneway binding value property ngsetvalue ngonclick event binding syntax somewhat verbose defiitely simpler pow expression language plus advantage using keywords describe binding mode simple characters like etc nt mean anything actually harder adopt read", "d": "12/2014"}, {"body": "figured might well join fun wrote proposal ideas inspired believe passes latest criteria summary ideas independently discussedacceptedrejected microsyntaxes extensions expression language string interpolation shorthand instead iteration arrayobject destructuring terseness prop set properties instead bind limited version arrow function syntax use event handler expressions limited use spooky characters html attribute kind suffix reserved special angular stuff like directive configuration exporting controller variables little example snippet inspired artists example misko current proposal html album albumname j trackname play playertime", "d": "12/2014"}, {"body": "hello everyone wanted say thank dev ninjas google bringing angularjs scene love declarative approach developing dom new angularjs actually week hard time conforming api structure syntax came across video today angularjs super excited changes feel current approach sort convoluted layered top dom new approach seems like working dom native approach nice anyways going back topic search possible alphabeta release angular came across discussion mentioned earlier im far angularjs pro feel input someone learning angular may useful especially scenario developer migrating new stack also ux designer past years ca nt help question experience point reviewing comments came conclusion original proposition probably one like visually standards conform came like example ewinslow recent proposed template approach considered developer like idea using reservedkey words indicate logic html syntax decided modify ewinslow proposition consider contextual slightly less verbose html album albumname j trackname play ten tracks tracks albums playertime", "d": "12/2014"}, {"body": "angular current expressiveness approachability influx people trying web development includes lots devs microsoft community hated web development php devs web designers found could understand angular believe approachability due angular current syntax light syntax minimizes symbols braces parens syntax introduce less approachable error prone become web developer since internet bubble speakertraining see people struggle technologies yet current version angular see successful little way trainingintroduction syntax add less expressive approachable becomes", "d": "12/2014"}, {"body": "agree deborah wed dec pm deborah kurata notifications githubcom wrote angular current expressiveness approachability influx people trying web development includes lots devs microsoft community hated web development php devs web designers found could understand angular believe approachability due angular current syntax light syntax minimizes symbols braces parens syntax introduce less approachable error prone become web developer since internet bubble speakertraining see people struggle technologies yet current version angular see successful little way trainingintroduction syntax add less expressive approachable becomes reply email directly view github r mark volkmann object computing inc", "d": "12/2014"}, {"body": "agree deborahk also think programmers ready learn new things whole life even technology easy understand php newcomers still powerful popular enterprise software world java sure team find good balance happy new year dizzy", "d": "12/2014"}, {"body": "cc vicb vsavkin need support take end week", "d": "12/2014"}, {"body": "already master", "d": "12/2014"}, {"body": "landed", "d": "12/2014"}, {"body": "components inline templates already working", "d": "12/2014"}, {"body": "missing peaces need implemented compiler x recursive components load templates via relative url", "d": "12/2014"}, {"body": "rkirov close", "d": "12/2014"}]