[{"title": "could build changed files", "body": "commoner internally need makelike behavior build tasks finally grunt plugin build newer files could evaluate want shave sub seconds testing cycle needs experimenting handle file renames deletions etc", "num": "619", "d": "11/2013"}, {"title": "jsx tool return zero error", "body": "using jsx tool automated build system want check errors compiling jsx files instead returning nonzero error code jsx command writes everything stderr exits zero error code even worse stderr used build successfull well forcing parse stderr output check error", "num": "615", "d": "11/2013"}, {"title": "always clone components mounting", "body": "solve many problems developers retaining references coincidentally authoritative backing component instance inability reuse constant components top file var wrongpw entered wrong password later react component currently supported could supported clone components mounting render function return thisloggedin wrongpw subtle reinitialization issues occur previous example components reset time createddestroyed however since hijack provided instances provided outside props actually retained across internal state changes solution clone components mounting inside container original design react actually clone elements cleaner avoids pitfalls conservation memory changed mounting process clone instead hijack originally provided instances average browser performance profiles changed since makes sense reevaluate decision importantly cloning though consume memory short term allows us make many optimizations make memory usage application level much lean ability use constant component expressions critical parts aplication go long way memory usage also cpureconcile time imagine ability utilities like would allow us reuse memory every time render invoked every node could also anotated never reconcile never change importantly cleaner design means jsx function calls write truly descriptions components actual components truly declarative programming program according guidelines effectively allows many optimizations nt possible apart cloning make sure benchmark potential solutions issue make sure know getting", "num": "614", "d": "11/2013"}, {"title": "use classes create react components", "body": "let use classes create react component classes accumulated custom concepts nt lend using classes still use conjunction react components classes separation performed enhancers top completely pure classes class typeahead extends reactcomponent render enhancers reactcomponent reactcomponentautobindmethods typeahead reactcomponentvalidateproptypes typeahead reactcomponentapplymixins mixinone mixintwo moduleexports typeahead reactcomponentreactcompositecomponentreactcompositecomponentreactcomponentreactcomponentreactcomponentbasereactcreateclassnewcomponentwillmountcomponentwillreceivepropsreactcompositecomponent attempt intelligently merge results okay factor helper utilities supply code mod automatically updates code uses mixins huge undertaking anyone takes shot please lock api related questions run ideas jeffmo sebmarkbage understand direction happy chat feasibility potential changes react core practical ways get started might require tiny changes jsx transformer sure jeffmo could get done help minutes quite easy", "num": "613", "d": "11/2013"}, {"title": "error ie caused trailing comma object", "body": "maybe best way dev react using ie anyway use browser jsxtransform ie got error expected identifier string number turns jsxtransformerjs trailing comma body following code causes issue ie big deal good fix", "num": "612", "d": "11/2013"}, {"title": "better error display docs live editor", "body": "currently preview shows empty div editor content fails eval opposition oneline change display error message extra transition background red warning downside editing preview often throws nt think much trouble thus transition red preview nt constantly flashes red code edited", "num": "611", "d": "11/2013"}, {"title": "fails", "body": "nt support", "num": "608", "d": "11/2013"}, {"title": "crashes ios safari", "body": "", "num": "606", "d": "11/2013"}, {"title": "reacteventemitter accept argument", "body": "accepts listeners added except ones registered register", "num": "605", "d": "11/2013"}, {"title": "remove jquery tutorial", "body": "may controversial browsing stackoverflow believe way many people load jquery really nt need let add nt think loading jquery tutorial ajax request let instead dummy object returns static list could simply replaced implement ajax loading old post thought using static data let replace standard xmlhttprequest code say something like simple code ajax request alternatively could use favourite framework like jquery mootools yui instead jquery loaded tutorial may make people think jquery necessary use react", "num": "603", "d": "11/2013"}, {"title": "avoid deoptimization accessing undefined properties andor initializing null properties", "body": "fun ran benchmarks serverside using example shows optimized deoptimized hundreds times depending benchmark iterations obviously due accessing undefined leaf nodes type string number quick fix check first also avoids cascading deopts elsewhere thousands undefined accesses seen running accessing undefined properties perhaps common deopt reason among adding new properties without initialising null something earlier perhaps fixed speedmemory performance optimized functions use less intermediate variables less gc burden suppose example accessed undefined could either initialized null somewhere one could prevent undefined access using instead similarly property accessed undefined nt really looked output could reveal optimization possibilities", "num": "600", "d": "11/2013"}, {"title": "honor instance identity key prop root component", "body": "key prop component changes render passes react expected unmount previous instance mount new one reconciliation however said component root ie whose dom parent mount point component instance used jsfiddle demonstrates stateful component changing key unmounted root", "num": "590", "d": "11/2013"}, {"title": "better reactcsstransitiongroup docs", "body": "given confusion seems like docs nt quite good enough right component new item added reacttransitiongroup get exampleenter css class exampleenteractive css class added next tick convention based transitionname prop", "num": "587", "d": "11/2013"}, {"title": "add docs context", "body": "", "num": "580", "d": "11/2013"}, {"title": "add onclickoutside event", "body": "add clickoutside event similar jquery plugin useful sugar components like dropdowns modals need closehide click side container", "num": "579", "d": "11/2013"}, {"title": "fix travis run tests properly", "body": "pull request fixes tests master travis nt think tests broken old one crucially looks think due old version jstransform maybe hit error machine fixed presumably travis workspace already clean though since starts git get travis back feet would nice figure make report failures like properly instead counting pass", "num": "574", "d": "11/2013"}, {"title": "documentation document usage", "body": "leifdenby came irc could nt get working nt clear use rather need make doc clearer jsfiddle gives examples controlled controller linkstate uncontrolled", "num": "571", "d": "11/2013"}, {"title": "rendercomponent without jsx clone props object passed avoid pollution", "body": "issue manifests using vanillajs notjsx making call issue pass object object mutated props try use object render different component props first component pollute props second component example code var hello reactcreateclass getdefaultprops function return randomnumber mathrandom render function return thispropsname thispropsrandomnumber var configdata foo bar configdataname reactrendercomponent hello configdata documentgetelementbyid configdataname reactrendercomponent hello configdata documentgetelementbyid first component get carried second component configdata mutated example code asked reactjs irc response", "num": "570", "d": "11/2013"}, {"title": "transitiongroup regressions", "body": "encountered problems upgrading react looks like regressions related transitions addon test cases", "num": "568", "d": "11/2013"}, {"title": "offline transform error run jsx watch src build", "body": "windows c jsx watch src build throw er unhandled error event error spawn enoent errnoexception processchildprocesshandleonexit c cd src c jsx watch src build throw er unhandled error event error spawn enoent errnoexception processchildprocesshandleonexit c", "num": "567", "d": "11/2013"}, {"title": "warn clashing keys proceed render", "body": "hit couple bugs prod keys supposed distinct nt causes react throw errors render nothing would nice react could instead warn render components anyway perhaps adding suffix make keys unique render one components id seem preferable completely dying though maybe fault properly js error reporting figured", "num": "566", "d": "11/2013"}, {"title": "make possible run single test", "body": "like talked cc benjamn", "num": "563", "d": "11/2013"}, {"title": "jsx enable lazy subtree execution", "body": "html certain tags stop parser parsing children eg possible something similar jsx eg jsx would compiled instead immediately executing children like", "num": "561", "d": "11/2013"}, {"title": "add reacttestutils reacttools mainjs document", "body": "", "num": "560", "d": "11/2013"}, {"title": "stop passing parameter lifecycle functions", "body": "think would better used", "num": "559", "d": "11/2013"}, {"title": "inconvenient owner assignment prevents updating component", "body": "take look component second time click show popover react throws invariant violation replaceprops called component owner antipattern since props get reactively updated rendered instead change owner method pass correct value props component created happens second time line executed calls old component throws popoverdemo component despite popoverdemo creates component nt actually mount concluded wrong thing check instead property set child component upon mounting probably conversely root component", "num": "557", "d": "11/2013"}, {"title": "reactproptypescomponent would nice", "body": "reactproptypescomponent would nice wrote instead", "num": "556", "d": "11/2013"}, {"title": "input typerange onchange fire changing value using keyboard arrow keys", "body": "", "num": "554", "d": "11/2013"}, {"title": "button beside editor switch jsx js", "body": "think neat way solving instead deciding snippet written js jsx put jsx compiler bigger use could button beside live editor label toggles two applies tips also general", "num": "552", "d": "11/2013"}, {"title": "waitforjscondition deprecated use waitfor jscondition asserter instead", "body": "", "num": "551", "d": "11/2013"}, {"title": "jekyll serve w gives invalid byte sequence usascii", "body": "trying run jekyll work docs ca nt get boot utf characters blog post jekyll ruby probably like tried setting lang variables already luck yet", "num": "548", "d": "11/2013"}, {"title": "android gingerbread fail immutableobject tolerate arrays deeper levels prevent mutation", "body": "linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject tolerate arrays deeper levels prevent mutation dev linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject tolerate arrays deeper levels prevent mutation prod linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception", "num": "546", "d": "11/2013"}, {"title": "android gingerbread fail immutableobject", "body": "linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject prevent shallow field addition strict linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject prevent shallow field mutation strict linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject prevent deep field addition strict linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception linux u android enus buildgingerbread khtml like gecko mobile ok immutableobject prevent deep field mutation strict linux u android enus buildgingerbread khtml like gecko mobile expected function throw exception", "num": "545", "d": "11/2013"}, {"title": "android gingerbread fail reactdomselect allow switching multiple", "body": "linux u android enus buildgingerbread khtml like gecko mobile ok reactdomselect allow switching multiple expected false true", "num": "544", "d": "11/2013"}, {"title": "android gingerbread fail mutatehtmlnodewithmarkup mutate document html", "body": "linux u android enus buildgingerbread khtml like gecko mobile ok mutatehtmlnodewithmarkup mutate document html typeerror read property innerhtml null", "num": "543", "d": "11/2013"}, {"title": "document bind element usecase lists", "body": "see javascript handleclick function color e thispropsaddcolor color render function var items thispropscolorsforeach function color return bind return items", "num": "542", "d": "11/2013"}, {"title": "make output less noisy", "body": "json format great sauce great running tests manually console", "num": "541", "d": "11/2013"}, {"title": "code coverage reactcomponent", "body": "lines currently covered tests", "num": "540", "d": "11/2013"}, {"title": "warning eventreturnvalue deprecated", "body": "used following place getting warning chrome version may notice issue reported kindly update code avoid warning thanks", "num": "538", "d": "11/2013"}, {"title": "fail immutableobject expected function throw exception", "body": "nt looked going yet capturing errors right", "num": "534", "d": "11/2013"}, {"title": "fail dompropertyoperations setvalueforproperty set values attributes necessary", "body": "", "num": "533", "d": "11/2013"}, {"title": "getelementsbyclassname nt exist", "body": "", "num": "532", "d": "11/2013"}, {"title": "provide valuelink value onchange event want use value onchange probably nt want use valuelink", "body": "shows console running tests", "num": "531", "d": "11/2013"}, {"title": "also", "body": "", "num": "530", "d": "11/2013"}, {"title": "throws typeerror read property namedtypes undefined", "body": "var namedtypes typesnamedtypes typeerror read property namedtypes undefined object modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs error var namedtypes typesnamedtypes typeerror read property namedtypes undefined object modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs warning task jsx test failed use force continue error task jsx test failed task nullontimeout timerlistontimeout ontimeout", "num": "528", "d": "11/2013"}, {"title": "newest chrome get warning", "body": "new today started seeing eventreturnvalue deprecated please use standard eventpreventdefault instead", "num": "527", "d": "11/2013"}, {"title": "links clickable", "body": "david walsh excellent blog post khan academy looks like css issue", "num": "523", "d": "11/2013"}, {"title": "reactaddonstransitiongroup throw children", "body": "consider example var foo thisstatebar foo foo false undefined reactaddonstransitiongroup throw", "num": "521", "d": "11/2013"}, {"title": "reactdominput support reactlink ie", "body": "reactdominput support reactlink expected typeerror unable get property undefined null reference", "num": "519", "d": "11/2013"}, {"title": "reactdominput set value submit buttons unnecessarily fails ie", "body": "reactdominput set value submit buttons unnecessarily expected true false", "num": "518", "d": "11/2013"}, {"title": "reactdominput properly control value number fails ie", "body": "expected giraffe", "num": "517", "d": "11/2013"}, {"title": "ie breaking tests", "body": "instance types throw invalid instances expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance", "num": "516", "d": "11/2013"}, {"title": "error invalid target element operation", "body": "rendering react components document able get root component id document node error invalid target element operation rendering react components document able unmount component document node error invalid target element operation rendering react components document able switch root constructors via state error invalid target element operation rendering react components document able switch root constructors error invalid target element operation rendering react components document able mount document error invalid target element operation", "num": "515", "d": "11/2013"}, {"title": "fix failing tests", "body": "logs may order compatible msie windows nt ok instance types throw invalid instances compatible msie windows nt error invalid target element operation compatible msie windows nt ok rendering react components document able unmount component document node compatible msie windows nt ok rendering react components document able get root component id document node compatible msie windows nt ok rendering react components document able switch root constructors via state compatible msie windows nt error invalid target element operation compatible msie windows nt ok rendering react components document able switch root constructors compatible msie windows nt error invalid target element operation compatible msie windows nt error invalid target element operation compatible msie windows nt ok rendering react components document able mount document compatible msie windows nt error invalid target element operation compatible msie windows nt ok rendering react components document throw full document render compatible msie windows nt expected function throw exception threw invalid target element operation compatible msie windows nt error invalid target element operation compatible msie windows nt error invalid target element operation compatible msie windows nt ok mutatehtmlnodewithmarkup mutate document html compatible msie windows nt expected giraffe compatible msie windows nt ok reactdominput set value submit buttons unnecessarily compatible msie windows nt ok reactdominput support reactlink compatible msie windows nt expected compatible msie windows nt typeerror unable get value property object null undefined compatible msie windows nt ok reactdomtextarea properly control value number compatible msie windows nt expected giraffe compatible msie windows nt expected compatible msie windows nt ok reactdomtextarea support reactlink compatible msie windows nt typeerror unable get value property object null undefined compatible msie windows nt expected function throw exception compatible msie windows nt ok immutableobject prevent shallow field mutation strict compatible msie windows nt ok immutableobject prevent deep field mutation strict compatible msie windows nt ok immutableobject prevent shallow field addition strict compatible msie windows nt expected function throw exception compatible msie windows nt expected function throw exception compatible msie windows nt ok immutableobject tolerate arrays deeper levels prevent mutation dev compatible msie windows nt expected function throw exception compatible msie windows nt ok immutableobject tolerate arrays deeper levels prevent mutation prod compatible msie windows nt expected function throw exception compatible msie windows nt expected function throw exception compatible msie windows nt expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance compatible msie windows nt ok mutatehtmlnodewithmarkup change attributes compatible msie windows nt ok reactdominput properly control value number compatible msie windows nt expected true false compatible msie windows nt expected function throw exception compatible msie windows nt expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance compatible msie windows nt expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance compatible msie windows nt ok immutableobject prevent deep field addition strict compatible msie windows nt expected function throw exception", "num": "514", "d": "11/2013"}, {"title": "undefined", "body": "", "num": "513", "d": "11/2013"}, {"title": "android test runner fails even though tests pass", "body": "looks like android selenium server buggy getting confused thing", "num": "512", "d": "11/2013"}, {"title": "test failure", "body": "windows nt like gecko ok instance types throw invalid instances windows nt like gecko expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance windows nt like gecko expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance windows nt like gecko ok rendering react components document able get root component id document node windows nt like gecko ok instance types throw valid values windows nt like gecko expected function throw invariant violation invalid prop supplied expected instance threw invariant violation invalid prop supplied expected instance", "num": "511", "d": "11/2013"}, {"title": "download links hard copy chrome", "body": "looks like css weirdness", "num": "509", "d": "11/2013"}, {"title": "reactminjs found document", "body": "", "num": "504", "d": "11/2013"}, {"title": "reactminjs", "body": "", "num": "503", "d": "11/2013"}, {"title": "support pointer events specification", "body": "approach touch events hammerjs checks switches", "num": "499", "d": "11/2013"}, {"title": "examples visible react site without cloning running server", "body": "", "num": "498", "d": "11/2013"}, {"title": "tests run release builds browsers", "body": "", "num": "497", "d": "11/2013"}, {"title": "compiled", "body": "throws syntax error sure code transformation clearly happening", "num": "496", "d": "11/2013"}, {"title": "move tooling jsx depth", "body": "let leave link jsxindepth new location also make link sublime package wrapped looks like link", "num": "490", "d": "11/2013"}, {"title": "frontpage stateful component example could easily retain selection", "body": "currently selecting portion seconds elapsed text stateful component example possible update ticks usual template renderers would impressive string concatenation inside single div replaced comma explicit span elements number would change also would extra span number even selection changing number would retained retention selection could also noted frontpage example preserving copypaste quite major win traditional templating solutions pages become ever lively", "num": "485", "d": "11/2013"}, {"title": "add docs multiple components page communicate parent child", "body": "ie explain pass callbacks", "num": "478", "d": "11/2013"}, {"title": "reactlink nt support checked selected", "body": "using reactlink checkboxes dropdowns state bound value checked selected instead", "num": "475", "d": "11/2013"}, {"title": "gives button text", "body": "pretty sure fixed replacing check make sure", "num": "473", "d": "11/2013"}, {"title": "exception raised pass number props", "body": "two numbers passed props exception raised", "num": "468", "d": "11/2013"}, {"title": "possible memory leak replacing many elements", "body": "memory usage inspected via chromium memory timeline grows hundreds mbs clicking switch button many times tested locally react something browser gc handle properly optimized version fix causes text selections change hover example retain text selections updating components get native feel sorry two issues one", "num": "467", "d": "11/2013"}, {"body": "found issue within commoner module", "d": "11/2013"}, {"body": "good point use intermediate tool caching smart things going pass benjamn author commoner", "d": "11/2013"}, {"body": "yes high personal wishlist op nov schreef jordan w notifications githubcom let use classes create react component classes accumulated custom concepts nt lend using classes still use conjunction react components classes separation performed enhancers top completely pure classes class typeahead extends reactcomponent render enhancers reactcomponent reactcomponentautobindmethods typeahead reactcomponentvalidateproptypes typeahead moduleexports typeahead blockers probably want call base class reactcomponent even though base class components today called reactcompositecomponent need rename reactcompositecomponent reactcomponentand reactcomponent reactcomponentbase right reactcreateclass nt return constructor returns convenience constructor invoked without new unify two concepts eliminate convenience constructors altogether determine support autobinding likely enhancer shown get rid figure way abstract special proprietary handling overridden methods like componentwillmount componentwillreceiveprops nt classical oo equivalents proprietary handlers purpose validation preventing people overriding base class methods others add actual functionality whatever ensure validation additional functionality factored class hierarchy special enhancers hinted bottom previous example possible program pure straight classes main challenge proprietary handlers allow multiple mixins redefine properties reactcompositecomponentwill attempt intelligently merge results okay factor helper utilities supply code mod automatically updates code uses mixins huge undertaking anyone takes shot please lock api related questions run ideas jeffmo sebmarkbage understand direction happy chat feasibility potential changes react core practical ways get started reply email directly view github", "d": "11/2013"}, {"body": "heads concerns regarding class support address many people become accustomed using oo inheritance tool primary means abstraction application worked java shop know talking personal opinion classical oo inheritance implemented many popular languages often best tool jobs let alone jobs situation approached even caution inheritance used within framework paradigm uses functional composition primary abstraction react certain patterns want prevent many strange things people come combining inheritance nt make sense addressed via simple composition also risk making mutation convenient might make sense start classes simply better syntax react component creation intentionally limiting use cases limiting inheritance depth making react base class methods final used react components course nonreact use classes would nt restricted", "d": "11/2013"}, {"body": "version ie problems support standards mode right quirks mode shows behavior seeing page add doctype force standards mode imagine want anyway", "d": "11/2013"}, {"body": "might confusing show box maybe new error box red could nice let something though would actually even cooler debounce nt parse editor content keypresses stop would avoid flashes combined would make much better experience", "d": "11/2013"}, {"body": "get line number error highlighting problematic line would nice", "d": "11/2013"}, {"body": "method killed soon sent iphone nov pm thomas aylott notifications githubcom wrote nt support getattributens setattributens hasattributens reply email directly view github", "d": "11/2013"}, {"body": "thinking using static list would probably better ajax given tutorial ajax loads static file updated description reflect", "d": "11/2013"}, {"body": "thank bringing try good job setting default propertiesmembers base classes avoid issue said objects checking nt always react components strings numbers detecting text etc great idea first checking let start making part regular test plan core diffs add new members", "d": "11/2013"}, {"body": "deoptimization mostly due dev affected prod builds also seems firefox etc deal undefined member access gracefully generally may important seems point view", "d": "11/2013"}, {"body": "think right fix layers basically adding transparent div top entire viewport capturing clicks simple way", "d": "11/2013"}, {"body": "pretty much well suggestion create sugar around common ui pattern could done listener document instead transparent div would need styling", "d": "11/2013"}, {"body": "cool idea make easy adding packagejson entrypoint app petehunt sound good let make sure sharable components work supports components also react plugins general", "d": "11/2013"}, {"body": "right think nt practical way get list components event handler attached currently way create plugin would dispatch event literally every element page", "d": "11/2013"}, {"body": "could pretty easily add additional event propagator look registered events stored inside conveniently stored registration name search way get click id need search previously registered ids match parent path click occurred", "d": "11/2013"}, {"body": "might even possible single change core would give access listeners particular type anyone build custom propagators match listener parent path click occurred", "d": "11/2013"}, {"body": "travis installs fresh every run pretty strange", "d": "11/2013"}, {"body": "ah legit bug transform fixes make fail let address separately", "d": "11/2013"}, {"body": "format used easier work react reason also could take without mentioning linkstate right also mentioned dom inconsistencies", "d": "11/2013"}, {"body": "since already object getdefaultprops copy items onto object instead way around ie difference copyproperties mergeinto also need stop putting props maybe open diff iirc pretty easy use receivecomponent", "d": "11/2013"}, {"body": "cc petehunt commits went easier look sure want think might happening fixing bug triggered behavior nt expecting look console end state example end event triggered bug end node still classes nt remove classes transition triggered happens example", "d": "11/2013"}, {"body": "used transitiongroup admit docs could clearer using examples think want set way transform applied happens presumably removed time transition back leave transition changes result transition see action", "d": "11/2013"}, {"body": "zpao yeah turns overlooked fact default opacity value looking documentation thought exampleenteractive supposed stay enabled course scenario exampleenter class would redundant since card nt back face reduced test case rotated card looks version seems want fixing problem moving translation cardenter nt translate well application anyhow wrapped head around timeline piece cake thanks", "d": "11/2013"}, {"body": "thanks", "d": "11/2013"}, {"body": "said irc jasmine supposed respect url query parameter filter test name never worked us would great feature", "d": "11/2013"}, {"body": "gruntcontribjasmine takes filter param sure guys using", "d": "11/2013"}, {"body": "current workaround manually wrap stuff like super ugly", "d": "11/2013"}, {"body": "could render right instantiating component instances pretty cheap mounting expensive part", "d": "11/2013"}, {"body": "wanting render children immediately ability easily render later maybe multiple times various places like html element documentfragment various meta programming stuff want ability completely vanilla jsx code dependency react", "d": "11/2013"}, {"body": "thumbsup", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "dupe", "d": "11/2013"}, {"body": "thanks", "d": "11/2013"}, {"body": "cc yungsters", "d": "11/2013"}, {"body": "redoing stuff related proptypes try get", "d": "11/2013"}, {"body": "chrome nt fire event range modified using arrow keys firefox", "d": "11/2013"}, {"body": "good idea pull request", "d": "11/2013"}, {"body": "lol might get someone else viable compile jsx js problem course way around write js view go back jsx tab correct behaviour", "d": "11/2013"}, {"body": "code talking", "d": "11/2013"}, {"body": "webdriver test runner", "d": "11/2013"}, {"body": "indicate characters christopher vjeux chedeau facebook engineer nov guido bouman notifications githubcom wrote trying run jekyll work docs ca nt get boot utf characters blog post jekyll ruby probably like tried setting lang variables already lang lcall luck yet reply email directly view github", "d": "11/2013"}, {"body": "quite possibly name real apostrophe problem past version ruby using like said problem past recently using think going need least see anyway hopefully big problem say post would help narrow", "d": "11/2013"}, {"body": "sorry guys rather incomplete error report error takes place stacktrace jekyll scan method line numbers afterwards ran without issues edit confirm emdash cause error replacing bare dash raised error another post happening ruby accept weird stuff", "d": "11/2013"}, {"body": "wow asleep morning completely forgot front language statements found checking locale", "d": "11/2013"}, {"body": "added tips wiki list", "d": "11/2013"}, {"body": "related", "d": "11/2013"}, {"body": "willfix", "d": "11/2013"}, {"body": "ping makes rather hard scan test output quickly tests fail", "d": "11/2013"}, {"body": "definitely felt pain could solved summary end test output ability run test time", "d": "11/2013"}, {"body": "new cleaner output good enough raw json", "d": "11/2013"}, {"body": "possible reprint failing test lines end otherwise happy current output", "d": "11/2013"}, {"body": "dupe", "d": "11/2013"}, {"body": "oops", "d": "11/2013"}, {"body": "rather way nt mind", "d": "11/2013"}, {"body": "think think forced clean force clean build artifacts modulecache part", "d": "11/2013"}, {"body": "zpao distinguish", "d": "11/2013"}, {"body": "benjamn situation would want clean remove", "d": "11/2013"}, {"body": "actually aware use cases maybe fine still means need tell people encounter problems might fixed whereas gives us way get effect verbal communication", "d": "11/2013"}, {"body": "going think probably also", "d": "11/2013"}, {"body": "closed", "d": "11/2013"}, {"body": "seems like behind latest version feel free reopen nt fix", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "coming", "d": "11/2013"}, {"body": "maybe fall back looking somebody familiar events would need look", "d": "11/2013"}, {"body": "fixed gets put prod little later today", "d": "11/2013"}, {"body": "want take go fixing think would good opportunity learn bit constrained subset internals", "d": "11/2013"}, {"body": "zpao yea give shot", "d": "11/2013"}, {"body": "use nonstandard get good possible invariants case would satisfied conditional test set right comparison string", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "mutatehtmlnodewithmarkup mutate document html error invalid target element operation mutatehtmlnodewithmarkup change attributes error invalid target element operation", "d": "11/2013"}, {"body": "starting think fullpage react nt worth supporting soooo complicated get right every browser different thoughts", "d": "11/2013"}, {"body": "petehunt googling issue seems readonly ie ca nt find anything trustful threads though maybe wait retire fix mutate mutating elements separately", "d": "11/2013"}, {"body": "ok msdn innerhtml property readonly col colgroup frameset html head style table tbody tfoot thead title tr objects reconciliation done rearranging nodes way desirable cause prevents flashing due stylesheet reappending see facebookreactpage", "d": "11/2013"}, {"body": "guess try power see bad eh", "d": "11/2013"}, {"body": "oldestbugevar mootools handles problem also effects firefox lt cases", "d": "11/2013"}, {"body": "something like already", "d": "11/2013"}, {"body": "zpao requires bit example take special care elements move around new ones previous would trigger new http request stylesheets example patch way hacky example looks like changes minimal worst think introduces one special case use whole page components branch without beautiful robust think anyway fine remove support whole page components react", "d": "11/2013"}, {"body": "remove support throw someone tries something dangerous", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "failing specs", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "break separate issues", "d": "11/2013"}, {"body": "keeps test runner running plan post fix test runner soon", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "fixed gets put prod little later today", "d": "11/2013"}, {"body": "run repo root sure solve issue reopen get bottom", "d": "11/2013"}, {"body": "update", "d": "11/2013"}, {"body": "maybe polyfill pointer events always like pointer events always available seems way better manage touch ouse events hand", "d": "11/2013"}, {"body": "would love enabled polyfill default seems like genuine barrier creating responsive componentsapps fri nov ben alpert notifications githubcomwrote maybe polyfill pointer events always like pointer events always available seems way better manage touch ouse events hand reply email directly view github", "d": "11/2013"}, {"body": "issues listening touch events always forget though zpao knows probably make work", "d": "11/2013"}, {"body": "think get rid initializetouchevents attach listeners elements handlers attached instead level", "d": "11/2013"}, {"body": "right tests test devonly", "d": "11/2013"}, {"body": "code", "d": "11/2013"}, {"body": "made lot easier find problem", "d": "11/2013"}, {"body": "still happening", "d": "11/2013"}, {"body": "try", "d": "11/2013"}, {"body": "worked add task", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "ship ed", "d": "11/2013"}, {"body": "feel free update examples make impressive", "d": "11/2013"}, {"body": "react frontpage prominent place native speaker dare time", "d": "11/2013"}, {"body": "sure english involved diff makes better though codemirror nt fan line", "d": "11/2013"}, {"body": "guess obvious api suppose obvious way keep asis still work opinions", "d": "11/2013"}, {"body": "either change thing", "d": "11/2013"}, {"body": "nice catch usually submit though firefox submit query weird", "d": "11/2013"}, {"body": "think always consistency browser default", "d": "11/2013"}, {"body": "browser default since account locales", "d": "11/2013"}, {"body": "ooh good point", "d": "11/2013"}, {"body": "expected behaviour please use prop number instead propnumber monday november john wu wrote hello react jsx reactdom var mycomponent reactcreateclass render function return lt div gt lt p gt thispropsfirstadder thispropssecondadder thispropsfirstadderthispropssecondadder lt p gt lt div gt var app lt mycomponent gt reactrendercomponent app documentbody two numbers passed props exception raised uncaught error parse error line xjs value either expression quoted xjs text reply email directly view github", "d": "11/2013"}, {"body": "sorry ignorance thanks help", "d": "11/2013"}, {"body": "seems gc works chrome", "d": "11/2013"}, {"body": "andreypopp right extra gc memory leak splitmapfiltermap ahead time save bunch allocations also adding prop probably speed transition bit well", "d": "11/2013"}, {"body": "ok good know might chromium issue something see first jsfiddle link experimenting different kinds clicking patterns fast slow", "d": "11/2013"}, {"body": "plievone little trash icon lower left dev tools click go gc looks ton different things like app memory available system etc etc believe optimize performance expense memory available", "d": "11/2013"}, {"body": "thanks time memory grows like even click gcicon many times chromium ubuntu fiddle extreme worried thinking using react long lived pages several hours large number realtime updates let see closing", "d": "11/2013"}, {"body": "ca nt run tests ie fixed", "d": "11/2013"}, {"body": "tests run", "d": "11/2013"}, {"body": "build expose reactutils browser use test", "d": "11/2013"}, {"body": "closing", "d": "11/2013"}, {"body": "zpao", "d": "11/2013"}, {"body": "good points zpao another place namespacing requested props would transform sounds like good idea first well may also suffer problems zpao mentioned", "d": "11/2013"}, {"body": "shripadk going wontfix based appreciate discussion though love hearing ideas people improving way react works keep coming", "d": "11/2013"}, {"body": "bump bite us next github sync since added param think remove zpao", "d": "11/2013"}, {"body": "still need document", "d": "11/2013"}, {"body": "actually", "d": "11/2013"}, {"body": "open briefly mentioned jsx gotchas references would go references", "d": "11/2013"}, {"body": "probably supported tagsattributes page well mention dom differences", "d": "11/2013"}, {"body": "easy landed", "d": "11/2013"}, {"body": "mavericks comes", "d": "11/2013"}, {"body": "arguments jsx js build throw er unhandled error event error spawn enoent errnoexception processchildprocesshandleonexit works mingw", "d": "11/2013"}, {"body": "cc benjamn likely commoner", "d": "11/2013"}, {"body": "working", "d": "11/2013"}, {"body": "fixed pull request", "d": "11/2013"}, {"body": "classset available reactaddonsclassset inlined transform time otherwise good", "d": "11/2013"}, {"body": "jump familiar yuidoc", "d": "11/2013"}, {"body": "someone tweeted docsets", "d": "11/2013"}, {"body": "vjeux nt see tweet related", "d": "11/2013"}, {"body": "kapeli nt yet agreed form documentation docsets looks like good target mentioned case someone wants try integrate react", "d": "11/2013"}, {"body": "case misunderstanding please note docset way package documentation already something searchable dash zeal docsets way generating documentation source files think issue", "d": "11/2013"}, {"body": "made changes back get", "d": "11/2013"}, {"body": "somebody wants tackle comma part go otherwise let close", "d": "11/2013"}, {"body": "componentdidmount nt take node", "d": "11/2013"}, {"body": "uses global removed", "d": "11/2013"}, {"body": "well mentioned", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "often needed discovered", "d": "11/2013"}, {"body": "danielmiladinov far understand better approach jetbrains would plugin specifically targetting jsx syntax since ide allows use language injections see feature request", "d": "11/2013"}, {"body": "circlecode agree would awesome feature however orthogonal question linting general jshint plugin particular jshint plugin shell make much light grateful whatever version jshint downloaded configurable options puts relevant error messages red squigglies relevant line numbers editor see error mouse squigglies handy editor already pretty good inferring using kind xml literal right middle javascript nt understand notion validforjsx xml already goes long way ensuring jsx least wellformed xml unless put jsx expression inside parentheses single root tag every starting tag either selfclosing corresponding close tag rest javascript syntax coloring goes completely crazy indicating something wrong missing convention valid jsx ie tag names correspond either global reactdom components custom components must visible current scope attribute names correspond component prop names attribute values correspond expressions containing variables current scope beginning describe jsx transform works nt", "d": "11/2013"}, {"body": "closing unless actual interest", "d": "11/2013"}, {"body": "benjamn noticed mean example examples folder yes", "d": "11/2013"}, {"body": "meh honestly nt care one especially since means would another step building", "d": "11/2013"}, {"title": "add option", "body": "indicate whether replace vm root node compiled template works template one node", "num": "41", "d": "11/2013"}, {"title": "make conditional output work dep tracking", "body": "eg current deps tracking shortcircuiting ternary expression gets tracked miss solution access everything statement", "num": "40", "d": "11/2013"}, {"title": "seedfilters", "body": "rip default filters separate module basic case transforms done css since complicated filters better customized anyway", "num": "39", "d": "11/2013"}, {"title": "improve anon exp binding performance", "body": "", "num": "38", "d": "11/2013"}, {"title": "improve observer performance", "body": "object observed many anonymous expression bindings gt new viewmodel instantiation gets increasingly slow currently idea something exp parser anon directive thing need profiling", "num": "37", "d": "11/2013"}, {"title": "split directive expression comma inside quotes", "body": "", "num": "36", "d": "11/2013"}, {"title": "transition class able use different classes enterleave", "body": "", "num": "35", "d": "11/2013"}, {"title": "skip window expparser", "body": "potential xss vulnerability", "num": "34", "d": "11/2013"}, {"title": "seedrouter", "body": "separate module parse stuff hash change history push build top existing router component eg pagejs store parsed data somewhere viewmodels automatically observes route router present", "num": "33", "d": "11/2013"}, {"title": "component option accept plain objects toi", "body": "", "num": "32", "d": "11/2013"}, {"title": "rename", "body": "", "num": "31", "d": "11/2013"}, {"title": "seedvalidators", "body": "separate module providing easier api validations use vm watch validate stuff trigger things provide set validation filters consider", "num": "30", "d": "11/2013"}, {"title": "able deal expressions", "body": "", "num": "29", "d": "11/2013"}, {"title": "allow custom binding prefix", "body": "instead changing globaldefault prefix allow users create namespaced directives prefixes", "num": "28", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "resolved", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "thinking users simply namespace stuff eg", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"title": "add field using cookies addition urls", "body": "idea think complementary backbone would cookie io basically attribute equivalent would look url attribute fallback cookie one try parse data instead http request server also save method models collections would encode data", "num": "2899", "d": "11/2013"}, {"title": "collectioncreate expects http response instead http", "body": "receiving http created response collectionget add event get triggered model get added collection would good support response codes", "num": "2898", "d": "11/2013"}, {"title": "send custom headers worse legacy servers", "body": "glad see legacy server support sync hostings accept options method backbone sends xoverridemethod header browser sends options request cors work browser forbids would add another option backboneallowcustomheaders could true default set false would prevent custom headers sent need create pull request", "num": "2896", "d": "11/2013"}, {"title": "examples list moved end documentation", "body": "examples list current form shadow faq section several time mistaken beliving examples end documentation faq important info difficult actually see faq section one scroll throught long list assume ever increasing list examples could actually last item documentation changelog examples nice useful developing faq come particularly true since flowing documentation meant read scrolling", "num": "2894", "d": "11/2013"}, {"title": "regression locationsearch ignored routing via historystart", "body": "use backbonehistorystart pushstate true document ready modern browser ie firefox routes processed badly ones contain get parameters working though routes working try use routernavigate issue introduced code working dived issue found locationsearch part dropped url routes checked execution plan backbonehistorystart checks finally call last line function backbonehistoryloadurl get fragment using backbonehistorygetfragment backbonehistorygetfragment uses locationpathname hash calculate fragment locationsearch ignored incomplete fragment used iterate routes backbonehistoryloadurl wrong route used need fix could use routes works query params proposed fix probably need better solution", "num": "2893", "d": "11/2013"}, {"title": "brew doctor", "body": "hello begun exploring world development course already issue following installation phase ror tutorial lyndacom appears basic something comprehend message receive inputing brew doctor anyone help would tremendously appreciated michaeldang brew doctor warning directories usrlocalshareman nt writable happen sudo make install software nt managed homebrew brew tries add locale information one directories install fail link step probably warning unbrewed dylibs found usrlocallib nt put purpose could cause problems building homebrew formulae may need deleted unexpected dylibs warning unbrewed pc files found usrlocallibpkgconfig nt put purpose could cause problems building homebrew formulae may need deleted unexpected pc files usrlocallibpkgconfigtclpc usrlocallibpkgconfigtkpc warning unbrewed static libraries found usrlocallib nt put purpose could cause problems building homebrew formulae may need deleted unexpected static libraries", "num": "2892", "d": "11/2013"}, {"title": "backbone amd module nt return factory", "body": "recent amd support added definestatement nt return factory means requirecall backbone nt get factory returned nt intention expose backbone global object still return factory follow umd convention would make following change instead", "num": "2891", "d": "11/2013"}, {"title": "follow semver", "body": "backbonejs project large following regular minor versions eg break compatibility existing backbone codebases make easier developers determine new version backbone includes backwardscompatible features vs backwardsincompatible api changes backbone versioning scheme follow semantic versioning semver gist semver follows given version number majorminorpatch increment major version make incompatible api changes minor version add functionality backwardscompatible manner patch version make backwardscompatible bug fixes additional labels prerelease build metadata available extensions majorminorpatch format would make existing version version changes broke existing api would clearly indicate developers api different allow developers utilise npm wildcard versions eg", "num": "2888", "d": "11/2013"}, {"title": "infinite loop change event", "body": "following code produce infinite loop backbone probably older versions well understand code problem lies use changing pending counting semaphores booleans plus actual logic fire events imho recursive calls set fire event end code exactly fires change attribute events change events recusrion case handle attribute changing twice aware issue anybody working try fix please let know code", "num": "2884", "d": "11/2013"}, {"title": "add favicon backbonejsorg", "body": "use chrome pin tab feature makes things look like one tabs ca nt tell unless remember favicon use", "num": "2883", "d": "11/2013"}, {"title": "set default sort arrow column grid loaded", "body": "hi want set arrow icon column grid reloaded loaded first show gird sorted column order possible", "num": "2882", "d": "11/2013"}, {"title": "fragment fragmentreplace pathstripper querystring support", "body": "hello first want say thanks greet library awesome work line navigate function fragment fragmentreplace pathstripper querystring support striping fragment pathstripper current fragment example test want navigate navigate test triger true work line thisfragment fragment return want able navigate changing querystring thanks", "num": "2881", "d": "11/2013"}, {"title": "convert synchronous ajax call asynchronous", "body": "hello experts validating availability user using jquery user form using jquery validationengine checkuseravailability function field rules options var result noerror ajax type post url registrationformaspxcheckuseravailability data jsonstringify userid fieldattr value contenttype applicationjson datatype json async false success function data status callerror datad failure function data status error function data status convert synchronous ajax call asynchronous make async true code working want make code asynchronous time return optionsallrulescheckuseravailabilityalerttext checkuseravailability function thanks", "num": "2880", "d": "11/2013"}, {"title": "model reset", "body": "would convenient method modereset model reset default values defined modeldefaults", "num": "2879", "d": "11/2013"}, {"title": "unable populate collection raw data", "body": "causes backbone underscore lodash", "num": "2877", "d": "11/2013"}, {"title": "clarify underscore gt vs gt", "body": "currently discrepancy backbonejsorg website packagejson required backbone packagejson gt website backbone hard dependency underscorejs gt please clarify", "num": "2874", "d": "11/2013"}, {"title": "model attribute named constructor lost starting", "body": "code outputs test outputs model constructor function could find documentation explaining change could find diff causing change note outputs test versions", "num": "2873", "d": "11/2013"}, {"title": "routernavigate trigger false still triggers routes used hashchange mode", "body": "hi apologize covered search issues nothing seemed address app developed using backbonerouter hashchange mode without pushstate true order support older browsers backbone doc seems say pushstatemode hashchangemode work way particular ca nt seem avoid triggering route every time call routernavigate adding trigger false ineffective case anyway false meant default find nothing doc warns bunch reassurances pushstate hashchange modes work exactly took us understand happening definition way avoid triggering hashchange event changing hash part url local solution would wrap backbonenavigate backbonecheckurl first set clear kind ignoreonehashchangeevent flag hashchange event triggered navigate silently ignored approach could added direct backbone gladly contribute code good idea hand ca nt believe ones problem wonder something wrong advice appreciated particular nt able call navigate without triggering route somehow incorrect undesirable thanks mykle", "num": "2872", "d": "11/2013"}, {"title": "trailing slash default route", "body": "backbone keeps adding slash end default route explanation backbone routes like assuming root url routes say routernavigate test trigger true url changes routestest similar way call routernavigate testing trigger true url changes routestesting call routernavigate trigger true url changes routes know nt expect end never passed back root url ie routes adding end makes lot differencemeaning checkout fix ie end default route source", "num": "2871", "d": "11/2013"}, {"title": "inconsistent docs regarding arguments error callbacks", "body": "according documentation accepts success error callbacks options hash passed model response options model xhr options arguments respectively accepts success error callbacks options hash passed model response options arguments far could tell looking code error callbacks basically treated way cases receive second argument ultimately depends transport naming issues aside vs current documentation seems imply unintentionally difference error callbacks fetch vs savedestroy behave none nt docs unified respect avoid confusion please correct wrong also come across attempts fix looks like never merged reasons maintaining generic naming opposed going jquery specific xhr hand done docs source even", "num": "2866", "d": "11/2013"}, {"title": "targetmodelprototype returns undefined", "body": "trouble fetching collection array model attributes server backbonejs line returns uncaught typeerror read property idattribute undefined chrome returns id", "num": "2863", "d": "11/2013"}, {"title": "global events delegation", "body": "hi use case developer wants bind event specific element unrelated view example implementing custom select box developer want close select area click happens anywhere else currently possible overloading methods manually attach detach events however approach bit complex errorprone standard mapping proposal would allow special tag would basically say nt want stay scope view take select box example could kind event definition thing would multiple benefits would allow easy global event handling whole point would break backward compatibility neither mess jquery sizzle would selfdocumented reader would immediately know selector viewlimited would inconvenients bit code check selector starts keyword nt think performances would affected call especially harmony developers could encouraged use global event instead viewlimited ones without good reason however thing sayed almost everything using keyword allows sure developer aware implications write draft implementation wish", "num": "2861", "d": "11/2013"}, {"title": "interested dropping dependencies underscore jquery", "body": "zepto shit nt even work pretty modern used smartphones also many strange bugs jquery reasonable library use backbone currently big increases latency mobile devices totally cool backbone fork exoskeleton w decided try dropping dependencies worked well instead including gzipped javascript need include five times less noticeable shitty networks important part dropping jquery relying native methods performance apps develop usually complex interacting dom natively allows increase speed times chrome proofs website dom total bottleneck unfortunate jquery slows several magnitudes mobile devices even bigger deal since slow would interested dropping dependencies maybe jquery folks may defend status quo cool users want freedom look like todos example native methods commit removes deps random web app", "num": "2859", "d": "11/2013"}, {"title": "problem change event firefox", "body": "reason happens firefox tested ff ver var v backboneviewextend el body events change cardselector selectcard selectcard function e elappend cardselector val event backbone view call selectcard select box changes something missing working chrome jsfiddle tried ff windows thanks", "num": "2855", "d": "11/2013"}, {"title": "tests failing", "body": "bb dropped support", "num": "2850", "d": "11/2013"}, {"title": "key changed attribute", "body": "hello listening find attr wich trigger event nt pass object insteadof value enhancement possible things like modelon change attr function model changed options consolelog event fired changedkey value gt changedvalue moment nt know without big mess modification", "num": "2848", "d": "11/2013"}, {"title": "collection item undefined id method get returns item regardless param", "body": "javascript var person backbonemodelextend talk function consolelog name thisget name id thisid var persons backbonecollectionextend model person var gang new persons name alice id hello name bob id undefined gangfindwhere id hello talk gangget hello talk returns tested know usual undefined id", "num": "2847", "d": "11/2013"}, {"title": "nested change events fired incorrect options", "body": "set model inside model change callback options passed set call discarded favor original options trigged model change event ie second change event fired change get vs expected behavior model set events always trigger change events options passed set ie second change event get reason happens second set call resets pending true causes us stay loop fire second change event options closure first set call idea fix would look like setting silent option docs advise since want callbacks fired result change pass flag prevent function getting called since wrong options passed nt help sorry writing test later look backbone testing jsfiddle demonstrates behavior seeing expected behavior would result output originaloption followed skipchange actual output originaloption twice", "num": "2846", "d": "11/2013"}, {"title": "register events initial page slient true passed backbone history start", "body": "building app client side server side rendering initial page rendered server rest backbone client passing silent true client history start method dont want route executed initial page want register events initial page", "num": "2845", "d": "11/2013"}, {"title": "firefox bug", "body": "app cracked useing firefox find firefox spider monkey set variable prototype prototype used like child function parentapply arguments function surrogate thisconstructor child thiscname nan surrogateprototype parentprototype childobjpropertyisenumerable prototype call enumerable false childprototype new surrogate var enumerable childobjpropertyisenumerable prototype true fix problem", "num": "2844", "d": "11/2013"}, {"title": "enhancement modelset mechanism", "body": "currently modelset would cause attributes key value simplest explanation however would worthwhile extend mechanism query attributes key set method available use method delegate attribute update allow nested attributes without going hoops idea sounds interesting work details similar done modelget mechanism well", "num": "2843", "d": "11/2013"}, {"title": "collection semantics ambiguous", "body": "parse semantics model collection somewhat confusing suppose one provides custom parse collection model deal raw response eg response server always form success truefalse data errormsg modelfetch would work fine parse method able parse correctly however would fail case first able parse response correctly return list model attributes method fail call model repeatedly one deal error modify custom parse collection wrap attribute format modelparse expects clumsy opinion collectionfetch responsible complete valid parsing return valid attributes list model subsequent model attribute necessary keeps semantic clean however requires patch collectionfetch set optionsparse true call passing collectionset make changes desired", "num": "2842", "d": "11/2013"}, {"body": "backbone nt internally distinguish status codes collectioncreate adds model collection prior syncing unless passed option might want check response including right data seeing success callback trigger create", "d": "11/2013"}, {"body": "result jquery handling workaround found perhaps could incorporated", "d": "11/2013"}, {"body": "thanks following one thing post stuck however backbone uses jquery ajax method treat anything nt code error unfortunately true jquery treat status code success take peek relevant line jquery", "d": "11/2013"}, {"body": "nope request actually nt something backbone control hook override need tell jquery specifically need way headers", "d": "11/2013"}, {"body": "find change log faq much useful regular basis", "d": "11/2013"}, {"body": "concur", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "solid meh current format doesnt displease much use sidebar table contents browser find jump later sections", "d": "11/2013"}, {"body": "sounds fine feel free move faq", "d": "11/2013"}, {"body": "hi tonnzor already discussed patched would mind looking see would satisfy requirements", "d": "11/2013"}, {"body": "hey try stackoverflow answer question others might welcome world programming", "d": "11/2013"}, {"body": "hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers", "d": "11/2013"}, {"body": "lot learning experimenting first many concepts higher barier entry others try go meetup city ask techie friends advice good luck nov notifications githubcom wrote hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers reply email directly view github", "d": "11/2013"}, {"body": "nope passing object basis see first line factory function define call need return object make requireaware test", "d": "11/2013"}, {"body": "curious logic determining module exports lives function requirejs", "d": "11/2013"}, {"body": "absolutely right thanks clarification", "d": "11/2013"}, {"body": "thanks strictly following semantic versioning would nt work well backbone given project almost surface area little internals almost given change patch pull request backbone breaks backwardscompatibility small way even folks relying previously undefined behavior strictly followed semantic versioning would probably backbonejs nt help anyone evaluate actual progress project like joke semantic versioning romantic versioning given version number majorminorpatch increment major version make major new release significantly update andor stabilize api minor version add minor new features patch version make tiny changes likely go unnoticed allows folks immediately upon hearing new release get rough sense scope backwards compatibility ideally every release even major ones backwardscompatible ca nt api changing done way nt difficult upgrade avoiding change api waiting major release ready would terrific impediment progress alternative frequently incrementing major version number incredibly unhelpful honestly prefer simpler scheme used version numbers like desktop applications worry breaking package managers tooling", "d": "11/2013"}, {"body": "problem backbone sent chrome", "d": "11/2013"}, {"body": "spadgos question version numbers arbitrary reason agile web apps trying keep within ranges oses many apps freak going past projects modeling windows linux etc yearmultiyear dev cycles release big deal agile project moves quickly incrementing quickly makes sense", "d": "11/2013"}, {"body": "also disagree reasoning behind marionette right best follow strict semantic versioning far nt issues even though surface area well added new features fixed bugs still compatible deferred tickets release api expected behavior breaking changes major releases breaking changes nt happen every week pull request accepted pooled major release encompass enough value large release major version bump stands breaking compatibility release causes lot pain plugin addon developers like marionettejs team backfill behaviors patches code remain viable fun situation ripple effects core library like backbone breaking changes enormous backbone affected", "d": "11/2013"}, {"body": "agree seems like case nt want rather ca nt breaking changes real sense urgency could waited major version update nt want problem biggest problem backbone respecting semver among things teaching evangelizing backbone great tell group students potential customers everything stack going work certain way except backbone always two huge caveats evangelizing backbone amd box nt respect semver nt take version numbers seriously one fixed let fix", "d": "11/2013"}, {"body": "honestly prefer simpler scheme used bigsmall version numbers like desktop applications worry breaking package managers tooling jashkenas could always leave digit probably map semantically semver little closer right maybe tamp passiveaggressive cryptopolitical sniping somehow technically wrong follow semver think bob point right important clearly articulate system follow irrespective system follow ps mean imply keithamus issue passive aggressive sorry came way definitely legit discuss backbone communicates changes users", "d": "11/2013"}, {"body": "semver primarily interested version given piece software index progress compatibility generally expect things mostly stable working version numbers largely meaningless indicators progress software x version may much less mature fewer features software version want know progress piece software look changelog roadmap knowing backbone whatever means nothing terms features however mean upgrade without anything breaking", "d": "11/2013"}, {"body": "hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms", "d": "11/2013"}, {"body": "haha never something happening real code app probably something wrong", "d": "11/2013"}, {"body": "find response strange happening five lines code anything illegal according docs point point library misused really want tolerate hole easily fixable brad dunbar mailto notifications githubcom sent tuesday november pm jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one", "d": "11/2013"}, {"body": "turns spoke quickly probably never simple solution case posted creates race condition would require redefinition change event even addressable let alone solvable sorry brad dunbar mailto notifications githubcom sent wednesday november jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "hi agree issue feels wrong unexpected nevertheless completely rational realize happening happens events actually async let explain little set methods finishing trigger change event get computed finishing change callback basically change event gets fired time creating infinite loop seeing couple solutions issue code looks like want create computed property property depends get value case try reacting change also silence setting avoid behaviour like finally passed using attributes directly personally would nt getting way things turn get hard debug later hope help cheers", "d": "11/2013"}, {"body": "good catch docs page generated docco far tell nt accept custom favicon without using custom template might worth adding feature", "d": "11/2013"}, {"body": "underscoreorg faviconico file domain root backbone subdir behavior deprecated little cleaner put rest docs assets nt see harm moving root objections anyone edit dminkovsky pointed favicon shows underscoreorg annotated docs", "d": "11/2013"}, {"body": "moving root", "d": "11/2013"}, {"body": "thanks much", "d": "11/2013"}, {"body": "looks really backbone related issue looks like question another lib jquery related maybe try", "d": "11/2013"}, {"body": "think wrong project", "d": "11/2013"}, {"body": "maybe looking", "d": "11/2013"}, {"body": "hi ygaradon unfortunately one discussed several times likely change please see good summary issues involved", "d": "11/2013"}, {"body": "interesting idea nt think good", "d": "11/2013"}, {"body": "oh nt know could yes good", "d": "11/2013"}, {"body": "nt work defined function opposed hash seems like would safer also attributes nt default value changed might want call first going trigger bunch needless change events", "d": "11/2013"}, {"body": "forgot put front", "d": "11/2013"}, {"body": "oops silly guess happens code several languages simultaneously forget little significant things every thank much help", "d": "11/2013"}, {"body": "due gt", "d": "11/2013"}, {"body": "hi joaonuno backbone attributes javascript objects hood meaning property exists empty object used attribute key see issue details", "d": "11/2013"}, {"body": "ok see problem would get constructor attribute even without setting js works issue pointed year old issue reporting appeared month ago implying backbone allow constructor attribute js objects also instance outputs test expected nt js new backbonemodel constructor test mget constructor gets object constructor function vs new backbonemodel mset constructor test mget constructor gets test thank", "d": "11/2013"}, {"body": "interesting seems caused change whereas previously see behavior set defaults model see regardless despite bug still think current behavior correct js object nt hash reverting old behavior would make bug appear time also undesirable hinted issue changing use ultimate longterm solution oldie support final say", "d": "11/2013"}, {"body": "myklemykle think something wrong implementation nt need pass trigger false default trigger route logic simply update url history perhaps using links like blah case browser trigger route unless default prevented happening need catch click using events hash view eventpreventdefault stop route triggering update url history routernavigate hope helps", "d": "11/2013"}, {"body": "agreed route logic triggered trigger false default nt passed pass pass makes zero difference happens call routernavigate somepath code clicking happening point trying add history however routernavigate updates url hash causes browser issue hashchange event historystart called without pushstate true installed hashchange listener router catches hashchange event triggers route even though supposed trigger route", "d": "11/2013"}, {"body": "myklemykle check leading slash see", "d": "11/2013"}, {"body": "using leading hashes though prevent browser window dancing around", "d": "11/2013"}, {"body": "add working version change log says many optimizations bug fixes including url overrides mutation options bulk ordering trailing slashes edgecase listener leaks nested model parsing already solved latest version change log nt clarify detail", "d": "11/2013"}, {"body": "solved released", "d": "11/2013"}, {"body": "thanks noticing", "d": "11/2013"}, {"body": "perhaps misunderstand misunderstanding question docs unified respect avoid confusion case would try contribute improvement previous pull request corrected issue end merged makes unclear guess thanks noticing means yes", "d": "11/2013"}, {"body": "patch linked fix issue eyes feel free send pull request", "d": "11/2013"}, {"body": "misunderstanding turns thanks", "d": "11/2013"}, {"body": "targetmodel", "d": "11/2013"}, {"body": "changing false pending false previousattributes object attributes object changed object cid id null proto surrogate attributes default properties defined model id null title default title", "d": "11/2013"}, {"body": "really meant nt breaking unless setting something strange collection model property feel free send pr reproducible failing test case like pursue otherwise better luck irc stackoverflow mailing list", "d": "11/2013"}, {"body": "looks like setting instance rather constructor function target model try passing instead example also see docs", "d": "11/2013"}, {"body": "hi arcanis one proposed several times still nt think direction go event handlers hash cleaned removing element dom via large part convenient global events would cleaned would require special dispensation given rarity sort thing departure current semantics think best bind manually", "d": "11/2013"}, {"body": "well quick thanks", "d": "11/2013"}, {"body": "would interested dropping dependencies maybe jquery certainly happy try optionally dropping jquery patchedin versions work properly even browsers like case", "d": "11/2013"}, {"body": "need investigate support support keep mind bring board backboneutilsajax backboneutilsmatchesselector view delegate undelegate native methods increase lib size take look exos source code implemented", "d": "11/2013"}, {"body": "fine except use native matchesselector means support correct", "d": "11/2013"}, {"body": "right guess polyfill", "d": "11/2013"}, {"body": "elementparentnodequeryselector example", "d": "11/2013"}, {"body": "problem jquery basically set great polyfills tightly coupled together jquery core takes lot time extract one need", "d": "11/2013"}, {"body": "true use queryselectorall mean dropping support", "d": "11/2013"}, {"body": "could nt people even use bare sizzle fallback jquery need ie lt compat something", "d": "11/2013"}, {"body": "right people could use jquery interested see pull request might look like", "d": "11/2013"}, {"body": "discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie", "d": "11/2013"}, {"body": "invalid argument since benchmarks size footprint reduce maybe nov phil freo notifications githubcom wrote discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie reply email directly view github", "d": "11/2013"}, {"body": "pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like", "d": "11/2013"}, {"body": "nope would mean including another pseudojquery library functional think firstclass support native dom alternative better nov brad dunbar notifications githubcom wrote pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like backbone whateveryoulike reply email directly view github", "d": "11/2013"}, {"body": "agree paul ever tried create small subset jquery would compatible ajax events api example apis crucial backbone application easier go jquery reason jquery api bloated contains much parameters covers much cases would nice backbone define smaller subset jquery api would much easier create shim", "d": "11/2013"}, {"body": "afraid still nt understand different using instead bikeshedding relative merits jquery api define whatever subset jquery api like", "d": "11/2013"}, {"body": "braddunbar saying", "d": "11/2013"}, {"body": "main point good minimal shims existence follow requirement jquery api compatible backbone nt need compatibility anyway declaration bit frustrating developers really want go minimum total size ca nt sure shim craft enough better minimal show subset jquery api really needed ie params actually required url optionssuccess returning promise required etc goes events api element creation api could way check ajax present use provide minimal functional fallback", "d": "11/2013"}, {"body": "braddunbar propose create library emulates jquery api still wrapper simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone example marionette may use strange jquery method undefined simple plugins use native methods wrapper unnecessary slowdown still need create views time", "d": "11/2013"}, {"body": "could way check ajax present use provide minimal functional fallback would nt mean case defined would use jquery api sort defeats purpose dropping jquery api completely favor builtin solution would things differently potentially faster", "d": "11/2013"}, {"body": "simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "foxbunny use jquery api parameters cases builtin solution faster much less code allow drop jqueryzepto dependencies add really need features builtin solution provides", "d": "11/2013"}, {"body": "agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "speed red herring doubt going find meaningful difference actually compatible comparison sending pull request jquery interesting idea would backbone potentially ship functional state without load jquery nt need dom manipulation backbone box seems like might possible finally braddunbar quite right could either take form set internal functions value implements exactly thing nothing magic naming practice two approaches equivalent", "d": "11/2013"}, {"body": "also worth pointing jquery dom manipulations ajax xhr wrapper pretty important nontrivial", "d": "11/2013"}, {"body": "ajax xhr wrapper pretty important nontrivial fifty lines code enough production systems", "d": "11/2013"}, {"body": "doubt going find meaningful difference wat stuff takes takes without jquery noticeable users", "d": "11/2013"}, {"body": "arguments file size dom performance pretty weak seemed contrived micro benchmarks provide real world implications something takes jquery nt intentionally poorly designed refactoring jquery would noticeably increase performance thoughts hugely breaking change sure get unit tests pass explicit contract implicit one promised documentation real world usage basically remove jquery becomes useless backwards breaking deferreds gone breaking implicit contract sure could add stuff back bother jquery already significantly better tested widely accepted anything could write", "d": "11/2013"}, {"body": "woundt first backwardsincompatible change hurt someone code", "d": "11/2013"}, {"body": "solid point thanks", "d": "11/2013"}, {"body": "plus could always wrap jquery wish possibly subclass monkey patch class either standard cure backwardsincompatible changes backbone nt bad get used", "d": "11/2013"}, {"body": "everything tbranyen said woundt first backwardsincompatible change hurt someone code let play hurt feelings game guys removing substantial extreme change ignored imho think healthy project something like exoskeleton makes api work without extra deps pull logic without really good reason would harmful project", "d": "11/2013"}, {"body": "substantial extreme change use jquery like substantial remove actually using gone", "d": "11/2013"}, {"body": "nt get exist currently jquery wo nt exist projects without jquery cares", "d": "11/2013"}, {"body": "paulmillr think valid concerns api consistency related upstream dependencies point examples widely used libraries frameworks optin pieces api based deps present", "d": "11/2013"}, {"body": "understand one introduced something new nt invent good point", "d": "11/2013"}, {"body": "paulmillr nt think asking unreasonable question need try ravage rapier wit seriously though api optional components based dependencies included seems make code documentation complex", "d": "11/2013"}, {"body": "every change comes sacrifice slightly complex docs api code sacrifice willing make produce real value real apps app speed page load speed want backbone stay current state instead evolving fine", "d": "11/2013"}, {"body": "want backbone stay current state instead evolving fine paulmillr nt need ad hominem anything interested finding precedent elsewhere taking added complexity crusade type prefer speak point pretty clear guess totally prerogative", "d": "11/2013"}, {"body": "also original request still stands lots talk proof someone word", "d": "11/2013"}, {"body": "need worry nothing ticket yet nothing real debate tranquilo ya asked paulmillr submit exoskeleton ideas pr kind enough particular idea allow backbone function including views ajax without mandatory inclusion jquery might turn well might let wait see pull request jumping conclusions would nt backwardsincompatible features api would stay exactly jquery present page closing ticket gone rails bit looking forward first draft pull request", "d": "11/2013"}, {"body": "paulmillr using ender backbone projects works beautifully build jquery using components backbone needs weighs around vs jquery", "d": "11/2013"}, {"body": "another approach could really nice without adding loc backbone people want include jquery would determining exactly jquery modules necessary backbone function optional instructions custom build jquery required modules see also example including modules able build jquery version comes lt gzipped", "d": "11/2013"}, {"body": "think point great web community run jquery parallel standard vanilla js even gzipped great could get extra paul pull adds loc", "d": "11/2013"}, {"body": "oh sadness late party glad someone else attempting address issue well read comment skipped apologize advance long comment need relay experience performance drop using jquery real especially collection views create large number backboneview instances naively eager creation new jquery context every backboneview initialization slows things enormously agree probably nt many applications create large number gt view instances horrible performance degradation jquery brings affect types apps quite negatively note taking desktop browsers mobile creating around view instances introduce quite noticeable lag real world example try sorting backgrid example grid jquery contexts backing sorting right destroy recreate could done smarter way without recreating views probably guess backgrid refresh automatically upon resetting backing collection collection reset rows cells destroyed recreated anyway creating measly number jquery contexts takes gt fast laptop gt takes total time spent js chrome according halfass attempt reimplement mostly compatible backboneview get rid jquery found hardest things reimplementing compatible method native methods nt support namespacing problems bookkeeping works everything implementation works except event delegation compatibility breaks lot things crucial get right compatible think doable necessary introduce flag view allow opting jquery large apps jquery mostly works fine except portions portions opt use native code speed things default opt nt assume always chainable anymore delegate view nt using jquery make jquery optional picks uses automatically default like let introduce another deferredpromisefuture whatever may chainable anymore pointless backbone nt use successerror callbacks already nt want jquery need deferred drop instead embedding yet another deferred object backbone large enough app probably half dozen incompatible versions embedded different libraries anyway however jquery detected automatically access like create eagerly view opts jquery andor create view instance nt using jquery nt whole point people replace point people one many jqueryajax extractions docs people want use backbone without jquery still default jquery detected need reimplement jqueryajax nt big bearing performance issues result largely compatible backbone interface slightly larger backbone file size reimplementation allows possibility much much faster backboneview instance creation much smaller total js file size btw similar attempts removing jquery dependency done lot like implementation much less ambitious line backbone philosophy", "d": "11/2013"}, {"body": "nt whole point backboneajax people replace point people one many jqueryajax extractions docs people want use backbone without jquery backboneajax still default jquery detected need reimplement jqueryajax nt big bearing performance issues great point might make sense leave ajax backbone proper using jquery works going vanilla route recommended dropin nt assume always chainable anymore delegate thiselqueryselectorall view nt using jquery think best leave find using jquery use native qsa nt use jquery nt use overwrite let introduce another deferredpromisefuture whatever leave ajax wo nt interested performance implications backbonenative since essentially implementing small surface area jquery minus sizzle promises namespaces etc etc also creating new contexts also one layer abstraction native dom methods simply comply basics backbone api needs means always going fail level abstraction either complex complete enough", "d": "11/2013"}, {"body": "reserved jquery fine may confuse people already know delegates jquery might think aliases delegates ok keeping reserved jquery long jquery context created constructor branch native code jquery play instance completely reimplement use native dom methods maintain compatibility existing code", "d": "11/2013"}, {"body": "names native methods since spec replacing nt implemented widely makes sense consistent short concise names backbonenative supports nt like layers dom abstraction backbone reasons mentioned", "d": "11/2013"}, {"body": "also agreed putting extra dom helper methods replacing qs qsa accept different arguments behave differently return different things also even draft status damn long calling succinct concise understood immediately without creating confusion like calling variables xmlhttprequest", "d": "11/2013"}, {"body": "added exoskeleton support backgrid benchmark resorting example table clicking first row resort env things slower see jquery natively exoskeleton took five minutes searchandreplace make changes backgrid yields perf increase optimised done today production app ofc take bit time wrappers shit nothing", "d": "11/2013"}, {"body": "pretty much done perf branch haha goal get less ca nt happen eagerly creating jquery context within constructor jquery also culprits majorly slow things", "d": "11/2013"}, {"body": "wyuenho results branch main env results env exoskeleton less", "d": "11/2013"}, {"body": "nice", "d": "11/2013"}, {"body": "try stackoverflow mailing list kind question answer says change event wo nt fire select element loses focus", "d": "11/2013"}, {"body": "even select element lost focus dom event truly fired event handler attached view events option wo nt called attach event handler using ways works fine ps case occurs firefox maybe old browsers even works well nt matter kind element use select text field text area", "d": "11/2013"}, {"body": "let tag em close em", "d": "11/2013"}, {"body": "tests", "d": "11/2013"}, {"body": "fixed small omission indicate drop support", "d": "11/2013"}, {"body": "hi well use syntax know attributes changed since event triggered changed", "d": "11/2013"}, {"body": "dynamic assignment assuming arguments passed change attribute event model gt model changed gt instead value key attributekey value attributevalue options gt options javascript var myhandler function model changed options switch changedkey case pos case deep dosomething model changed options break case distance case height dosomethingelse model changed options break case x case break default dosomethingbydefault model changed options modeldefaults foreach function v k modelon change k myhandler mycontext moment achieve create handler case", "d": "11/2013"}, {"body": "case alshten hinted still access key scope closure give try see works", "d": "11/2013"}, {"body": "well case still loop way javascript var myhandler function model attributevalue options attributekey modeldefaults foreach function v k modelon change k partial myhandler k mycontext ca nt see case would want case would always prefer manually adding handler attribute rather writing loop", "d": "11/2013"}, {"body": "thanks every model nt fixed sometimes add remove attribute ca nt always manually add handler using partial could solution hack term perfomance without preferable stop listening test case need examples need store reference association play hash something stop listening aim reduce mess augment nt understand pass key value good choice even listening one model full model passed argument part even store options options passed arguments good points changed attribute treated differently pass full attribute part value give model key able find value store every changed attributes new value previous value make evry comparaison need pass key value impossible find key think better full information key value semi information value", "d": "11/2013"}, {"body": "considered attaching handler event using javascript var myhandler function model value options modelhaschanged pos modelhaschanged deep dosomething model value options return modelhaschanged distance modelhaschanged height dosomethingelse model value options return modelhaschanged x modelhaschanged return dosomethingbydefault model value options modelon change myhandler mycontext never used assume use way saying passing key value bad design point ca nt see relevant example would want dynamically assign handler attribute change event nt know name since think generating attribute names dynamically would bad design cases least never experience interested see real world example would", "d": "11/2013"}, {"body": "seem focalized test case better understanding need test case simplicity know advance attribute name case create remove attributes flow attach event detach event change different actors modify model instead looping find changed attribute using different lot functions easier provide key value better performances see examples simple way achieve logic tell made change give modified object modified value fend find held imagine changed town name usa new name great town possible find moment localy modified source add line private event name achieve ultime solution cause ultime solution come source demand regression functionality removing adding performance client side see many propattrfunction exist backbone related retreive changed attributes easily best thing according provide spirit rest gt complete model complete options please complete attribute", "d": "11/2013"}, {"body": "said previous message handler also use retrieve fields changed looks like exactly need without changing value parameter passed callback still think nt make sense attribute key parameter using syntax either use event get changed attributes use syntax handler listening one attribute means know attribute changed", "d": "11/2013"}, {"body": "wrote another test case collection objects kind updated timessecond key provided would allow avoid lot mess increase performance backbone loop changed attributes providing loop backbone loop need create contexted function preserve find key play hash key function stop listening key provided maybe unusual way use model works like need key becomes argument perfect still think nt make sense attribute key parameter using change attr disagree think staying phylosophy provide model listening provide complete attribute key value even listening key callback nt know key listening nt understand nt make sense trying model still think nt make sense model parameter using modelon making sense means know attribute changed sorry human know callback nobody know providing key permit one handler many keys impossible providing value force people use many functionshandlers keys launch common functions thinking everything goes value also based keys provide key nt use function attributes property etc find key set complete model model keys loop search attributes find one need provided another example logical backbone write event triggered times know wich one triggered event need search create routine find one attra attrb together passing key nt search spend superflus things avoided", "d": "11/2013"}, {"body": "hello see tagged invalid explications invalid want know understanding thanks", "d": "11/2013"}, {"body": "question nt appropriate bug tickets", "d": "11/2013"}, {"body": "ok thank answer agree bug means longer think question closed invalid hope", "d": "11/2013"}, {"body": "used either model passed model directly search property case since undefined property dutifully return object id shortcircuiting rest evaluation got good use case might make sense change internal behavior otherwise might try using null another placeholder id attributes", "d": "11/2013"}, {"body": "oops nt see caseywebdev edit bus wifi nicely done", "d": "11/2013"}, {"body": "think temporary workaround nt cause unexpected behavior guarantee dealing pretty fundamental internals setting nested set call nested set gives expected behavior change callback cares single nesting think work set events trigger deeper nesting well nt tested using example would look like technically case single nesting setting pending false set event right thing confident incorrect cases people want nest fire oncehave chained change callbacks", "d": "11/2013"}, {"body": "sorry lean braddunbar got bright ideas believe used recursive bit used work property even things", "d": "11/2013"}, {"body": "diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs changeslength thispending true changeslength thispending options var l changeslength lt l thistrigger change changes current changes options changing return silent thispending options thispending thispending false thistrigger change options nt test came head reading issue", "d": "11/2013"}, {"body": "interesting bandwidth moment take look", "d": "11/2013"}, {"body": "caseywebdev would simply reverse wrongness options passed callback think external one needs first options inner one second", "d": "11/2013"}, {"body": "jashkenas added test case unless test wrong seems work", "d": "11/2013"}, {"body": "nicely tested indeed", "d": "11/2013"}, {"body": "good stuff clear though still fail one call since last win probably acceptable though", "d": "11/2013"}, {"body": "braddunbar curiosity failing case described look like", "d": "11/2013"}, {"body": "test still passes notice never passed event", "d": "11/2013"}, {"body": "ahh gotcha", "d": "11/2013"}, {"body": "quoth braddunbar interesting bandwidth moment take look know congratulations brad beautiful addition already beautiful family hopefully wo nt seeing much around github parts", "d": "11/2013"}, {"body": "congrats brad", "d": "11/2013"}, {"body": "thanks much lots fun", "d": "11/2013"}, {"body": "braddunbar congrats", "d": "11/2013"}, {"body": "sounds like question better suited", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "tgriesser jashkenas close please answer really stuck right", "d": "11/2013"}, {"body": "hmm sure getting running tests firefox prototype appears enumerable would mind submitting small snippet illustrating problem", "d": "11/2013"}, {"body": "necessary commit firefox backbone extend function returns child class enumerable prototype extend amodel bmodel staticprops override amodelsprototype bmodelprototype jus change extend function var extend function protoprops staticprops var parent var child extend definition defaulted us simply call parent constructor protoprops amp amp protoprops constructor child protopropsconstructor else child function return parentapply arguments call make child prototype enumerable firefox childpropertyisenumerable prototype add static properties constructor function supplied extend child parent staticprops set prototype chain inherit without calling constructor function var surrogate function thisconstructor child surrogateprototype parentprototype childprototype new surrogate add prototype properties instance properties subclass supplied protoprops extend childprototype protoprops set convenience property case parent prototype needed later childsuper parentprototype return child", "d": "11/2013"}, {"body": "oh see missing point odd bug indeed", "d": "11/2013"}, {"body": "fixed", "d": "11/2013"}, {"body": "want get set funky way always write setmyproperty function model practice usually want keep getset simple javascript object many use cases enough listen change event property model react set", "d": "11/2013"}, {"body": "looked following extension", "d": "11/2013"}, {"body": "usual way things always writing separate setmyproperty reacting change event etc usual way extension also overtly complicated spirit keeping things simple minor extension mechanism effects powerful imagine one attribute model model naturally provides method changes propagate next level without much effort", "d": "11/2013"}, {"body": "use case describe would common mymodelget submodel set use nesting plugin mymodelset submodelprop still think thee need somehow propagate call set need specify good concrete examples think", "d": "11/2013"}, {"body": "ideal world nt need parse data backbone provides parse function extension collection model use like also believe always pass parse truefalse setfetch method get behaviour require", "d": "11/2013"}, {"body": "issue parse functionality used collection go collection well model would ideally want go collection", "d": "11/2013"}, {"body": "another good option passing flag testing existence property determine context collection model model parse method think current behavior correct one cases model schema whether requesting single model collection models said suggestion make parse documentation clearer feel free send pull", "d": "11/2013"}, {"body": "would ideally want go parse collection used work changed consistent nt change back", "d": "11/2013"}, {"body": "happy submit pull request clarity either changes would lovely yes please general trying prevent invalid models created first place case side effects think change best", "d": "11/2013"}, {"body": "hi wondering changed behaviour part change log could lead painful app upgrade process", "d": "11/2013"}, {"body": "totally send pull documentation update happy merge", "d": "11/2013"}, {"body": "many tweaks optimizations bugfixes relating backbone including url overrides mutation options second thought already someone needs specifics search issues", "d": "11/2013"}, {"body": "makes sense", "d": "11/2013"}, {"body": "correct supposed work backbone send attributes pass directly save call took attributes instead would defeat whole point ca nt expect every function look magic property", "d": "11/2013"}, {"body": "another parse function parse function sending data real problem control data sent server way current version working patch", "d": "11/2013"}, {"body": "ok makes sense anyone else opinion proposed fix", "d": "11/2013"}, {"body": "issue dealing tabs tab selected appends search query without trigger think case pushstate way go backbone extending router method hardcores history like changing queries fragment context", "d": "11/2013"}, {"body": "understand confusion caused issue comes maintaining hashchange support opinion breaking applications acceptable tradeoff reducing developer confusion measure noted perceived issues resolved using appropriate route patterns allowing developer handle query strings interest full disclosure application broken change downgrade backbone compensate refactoring accomodate change costeffective us", "d": "11/2013"}, {"body": "drrcknlsn apologies breakage certainly nt intent discussion patch going would mind checking see fits needs", "d": "11/2013"}, {"body": "braddunbar apologies needed certainly appreciate work effort going project first glance seems like good compromise", "d": "11/2013"}, {"body": "thanks help took example addy osmani book backbonejs application published oreilly changed libs underscorejs version backbonejs failed wrote issue tried rebuild example show failure message firebug recognizable mistakes something wrong another part work used newest versions backbone underscore without problems sorry used time", "d": "11/2013"}, {"body": "developing wordpress theme based backbone using pretty permalinks assuming root route multisitename automatically remove trailing slash problem case cause home page url becomes instead refresh web browser loading extra time cause wordpress redirects", "d": "11/2013"}, {"body": "zowens check exoskeleton real fork much amd support speed improvements optional dependencies etc", "d": "11/2013"}, {"body": "paulmillr awesome looks legit may even contribute", "d": "11/2013"}, {"body": "reopening reconsidered", "d": "11/2013"}, {"body": "self support componentio see use easy", "d": "11/2013"}, {"body": "use case adding special amd registration code backbone using shim configuration read post however remember requirejs shim configuration allows specify library dependencies solve issue requirejs user already faced problems libraries registering requirejs andor requesting libraries named usual example always register libraries vendors namespace etc library tries something like fails solve use requirejs map configuration would nt issue library used exported globals mean nt single use case seems inevitable us write bit code loader configurations amd explicitely registered libraries rather amd supporting external libraries without additional code since possible maybe jrburke could help us", "d": "11/2013"}, {"body": "arcanis one difference wrapping shimming excluded dependencies eg jquery via cdn cause wrapped code break build shimmed libraries known fail case", "d": "11/2013"}, {"body": "agreed using map configuration friendly use cases using rjs build also appealing able avoid globals altogether", "d": "11/2013"}, {"body": "foxbunny see thanks example", "d": "11/2013"}, {"body": "amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amen brother preach", "d": "11/2013"}, {"body": "think know web dev community wo nt converge module system working groups browser vendors force something us finally standard modules able enjoy benefits able make assumptions thirdparty code community encouraged write smaller neatly packaged singlepurpose modules care dependency tree rather script tag insertion tool making assumptions module format handling us also easy see building lot simpler everyone standard module format amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amd attempt build standard modules wgs browser vendors figure us everyone embraces standard everyone start making beneficial assumptions codebase requirejs figure load nonamd code code black box regards assumptions made dependency graph must explicitly stated application configuration assumptions made exports must explicitly stated said would great everyone adhered way thinking clearly best going happen completely understand everyone got ideas modules approached community fragmented amd attempt unify fragmentation suppose wait harmony everyone get boat", "d": "11/2013"}, {"body": "hello backbone dependencies jquery underscore templates engine import backbone", "d": "11/2013"}, {"body": "sorry gravedig reopen dealing problem coffeescript mariomodule deviseappregister register app backbone marionette class registernew extends marionetteitemview template deviseregistertemplatesnew debugger session opens get following see returned params object param seems ok nowhere found", "d": "11/2013"}, {"body": "hi ellmo put fiddlegistjsbin glad take look", "d": "11/2013"}, {"body": "braddunbar change threw baby bath water already possible resolve using appropriate route pattern developers want query string support parameterization forcing router strip query string patterns option disable behavior big mistake one prevents upgrading unfortunately please reconsider", "d": "11/2013"}, {"body": "drrcknlsn looked though discussion somewhat disjointed point repeating quite bit respond would appreciate", "d": "11/2013"}, {"body": "jashkenas master charset content type", "d": "11/2013"}, {"body": "going chime try revive thread usecase well jashkenas address question asked replies back exactly create event specific ca nt use add sync generic ca nt use singular success callback use case actually want trigger collection add event new model created need know new model created want code coffeescript class occontact extends backbonemodel class occontacts extends backbonecollection model occontact class occontactslistview extends backboneview initialize opts gt optscollection new occontacts occontacton create instance gt optscollectionadd instance could accomplished explicit success callback save happens many cases preferable would argue organize logic events problem using sync event case fired every time model interacts server includes updates deletes thanks", "d": "11/2013"}, {"body": "afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right", "d": "11/2013"}, {"body": "yea apologies pseudocode correct event listener constructor exist convenient imho hand posting saw suggested solution documentation site via backbonecollectioncreate seeks like may better solution global thanks quick reply alex nov pm jeremy ashkenas notifications githubcom wrote afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right reply email directly view github", "d": "11/2013"}, {"body": "seeing android mobile safari user agent strings offending browsers noticed fix users", "d": "11/2013"}, {"body": "adambom get exact error tried apps android device nt issue far would mind paste stack trace", "d": "11/2013"}, {"body": "yeah basically personally seeing recorded sent log using windowonerror also seeing chrome guess people still running version backbone version unfortunately windowonerror nt capture stack traces error sorry minified code beautified version", "d": "11/2013"}, {"body": "documentation clarity reset parameter trying figure backbone behaviour fetch documentation nt forthcoming hence arriving glad default behaviour nt want backbone clobber client state different semantic serverpersisted state vs clientephemeral state model know better anything passing reset option fetch bad design assumes external caller knows model modelattributes merges state single object ability override tojson control gets persisted minor effort using approach similar aratlas fetch get semantics clear attributes want fetch however easy obvious whilst backbone provides raw tools work one would like appears common use case indeed core backbone design decision ie nt clobber client state general approach would perhaps whitelist option model grunt work us warning untested ideaexample code ahead save whitelist filter attributes ensure serverside attributes get persisted fetch override parse update server attributes ensure server ca nt accidentally clobber clientephemeral state functionality would minor change backbone seems like common use case given backbones default behaviour clobber client state also easily implementable generic model class extends backbonemodel doubt others want blacklist instead different fetchsave lists finer control lists different api versions trying things creates bloat may better extensionplugin leave backbone", "d": "11/2013"}, {"body": "well given backbone provides reset true option entire collection think reasonable provide model well geting model server implies getting updated version server attributes deleted important information nt lost storing ephemeral client side data mixed attributes think ephemeral data stored wrong place request reopening ticket", "d": "11/2013"}, {"body": "change implemented", "d": "11/2013"}, {"body": "tauren solution go end comma delimitated routes pretty much mind wondering achieve writing routing system", "d": "11/2013"}, {"body": "without investigating apply used instead call see reference backbone model constructor var baseview backboneviewextend prototype properties baseviewextend function alert extend called return backboneviewextendapply arguments lt use apply var subview baseviewextend alert shown", "d": "11/2013"}, {"body": "goranvukovicoskyinteractive absolutely thanks catching", "d": "11/2013"}, {"title": "concatenatedproperties isdestroyed isdestroying etc nonenumerable properties", "body": "suggest properties manually set enumerable could make least one need use getproperties often serialization", "num": "3825", "d": "11/2013"}, {"title": "ember data model attribute another data model", "body": "newbie ember using ember ember data model project situation need call model another model eg response restapi video title blah blah description blah blah src blah blah favorite date note good video title blah blah description blah blah src blah blah queue queuedate time day video title blah blah description blah blah src blah blah model ember data beta version appvideodsmodelextend title dsattr string description dsattr string src dsattr string appfavoritedsmodelextend date dsattr string note dsattr string video dsattr raw appqueuedsmodelextend queuedate dsattr string time dsattr string video dsattr raw apprawtransform dstransformextend deserialize function serialized return serialized serialize function deserialized return deserialized using transform get video data favorite queue model working fine problem change video data favorite binding video model displaying queue video part want see change need refresh page video favorite queue models using page usage like appfavoritedsmodelextend date dsattr string note dsattr string video appvideo appqueuedsmodelextend queuedate dsattr string time dsattr string video appvideo solution able change api response", "num": "3823", "d": "11/2013"}, {"title": "bug missing latest stable versions", "body": "released stable versions missing downloads reason route longer supported please say page", "num": "3821", "d": "11/2013"}, {"title": "documentation missing removetodo function todocontroller actions", "body": "following example getting started accepting edits chapter missing removetodo function think shown example", "num": "3820", "d": "11/2013"}, {"title": "twitter bootstrap modal work", "body": "emberjs versions following twitter bootstrap model work eg confirmdeletenotedialog modal show works emberjs versions", "num": "3819", "d": "11/2013"}, {"title": "arrayproxy length reflect content length", "body": "making multiple modifications arrayproxy object inside function proxy fails update length confusing part single performed content length update correctly behavior best inconsistent made js bin demonstrate problem may related sure", "num": "3818", "d": "11/2013"}, {"title": "abandon ruby", "body": "skipped first three search result pages ruby may already issue switching nodejs build test system like grunt node capable stuff ruby way lose dependency would comply de facto standard almost js libraries frameworks use node building testing course pretty minor stand way making ember even awesome already smile", "num": "3816", "d": "11/2013"}, {"title": "embera object returns object", "body": "might completely crazy expect work way way works happy submit pr cc stefanpenner wagenet rjackson", "num": "3815", "d": "11/2013"}, {"title": "logtransitionsinternal working latest canary stable", "body": "link jsfiddles demonstrate point jsfiddle ember logtransitionsinternal working jsfiddle ember logtransitionsinternal working jsfiddle ember canary", "num": "3813", "d": "11/2013"}, {"title": "unable render nested loading route", "body": "minimal example fails render exception happens outer template tries evaluate property router", "num": "3810", "d": "11/2013"}, {"title": "setting default select fail warning", "body": "fiddle demonstrating issue realize may bug failed number matching string ids select content guess default emberdata took digging code figure going wrong know selects getting overhaul least need one think assertion type item send value match types item value path could save people time frustration thoughts clear happens line", "num": "3805", "d": "11/2013"}, {"title": "router location object provided container", "body": "additional location objects easy config resolvable", "num": "3803", "d": "11/2013"}, {"title": "yield default template components", "body": "template ember component exist default using precompiled yield template", "num": "3802", "d": "11/2013"}, {"title": "access queryparams controller", "body": "disclaimer definitely ember newbie wanting use experimental query params feature documented latest canary build feature sort seems working trying get access query params controller populate field containing selected value emberselect documentation page claims able get access query params object various route methods follows according docs parameter setupcontroller method however parameter undefined documentation also seems wrong methods well instance says model method query params object second parameter instead passed two parameters get query params within transition object passed second param third sure documentation issue code issue need way access query params inside controller thought could setupcontroller nt seem work fixessuggestions would appreciated", "num": "3801", "d": "11/2013"}, {"title": "incorrect rendering using control helper inside block", "body": "first table renders incorrectly displaying last value iteration loop remove block renders values correctly expected behaviour", "num": "3798", "d": "11/2013"}, {"title": "send method propagate controller route case render", "body": "summary created reusable view imported index template soon added dom enabled typeahead user clicks typeahead options update method indexcontroller called sending event selecteditem propagates actions indexroute actions selecteditem hook well see use render tag import another template posts use view click typeahead options displayed even though event triggered selecteditem propagate postsroute actions selecteditem error message displayed uncaught error nothing handled action selecteditem see issue work around also observed action event propagation happening rendering template thisrender method", "num": "3797", "d": "11/2013"}, {"title": "functionality difference render thisrender", "body": "provision pass model render tag thisrender route api", "num": "3796", "d": "11/2013"}, {"title": "substates url updates eager possible", "body": "presently urls nt update transition fully completed even loading substate entered nt ideal ux ideally templates updated able refresh transition destination route loaded parameters present preferable eagerly update url note likely possible transition initiated via stringnumeric param eg since transition promisey context might loaded data necessary serialize route behavior remain today cc kselden", "num": "3795", "d": "11/2013"}, {"title": "ember starter kit script link incorrect", "body": "hi small typo script link current starter kit indexhtml file links actual file name lt v omitted", "num": "3794", "d": "11/2013"}, {"title": "bugfix actions losing predefined controller functions", "body": "following action hash action ignored defined function controller prototype via according lukemelia commit supported deprecated behavior however appears test intended apply functions specifically defined controller perhaps functions prototype would advocate actions prefer controller function case directly defined object inherited prototype generally agreed put together pr", "num": "3793", "d": "11/2013"}, {"title": "document jquery modules relied upon", "body": "would allow people custom build jquery would like", "num": "3791", "d": "11/2013"}, {"title": "dynamic computedproperty dependencies", "body": "javascript emberobjectcreate resolves true c removed dependency list property briefly mentioned year jsconf talk marious gundersen", "num": "3790", "d": "11/2013"}, {"title": "behaviorscope yielded component different depending whether component template provided", "body": "difference two jsbins latter one defines template layout guess component confusing breaks least expectations scope works within component part solution also consider whether want support something like requested stackoverflow would seem prefer previous jsbin concept scope", "num": "3789", "d": "11/2013"}, {"title": "object path error message broken", "body": "trying modify property objectcontroller nt exists see error message little mistake determining path last char truncated javascript function setpath root path value tolerant var keyname get last part path keyname pathslice pathlastindexof get first part part path pathslice pathlength unless path look first part get root path root getpath root path keyname keynamelength throw new error passed empty path root tolerant return else throw new error object path path could found destroyed return set root keyname value", "num": "3786", "d": "11/2013"}, {"title": "reopen swizzles existing instances next instance created", "body": "class override existing method instances class created prior use new implementation another instance class created seems prototype nt updated javascript var robot emberobjectextend status online var robot robotcreate true robotget status online emberobjectreopen get function return offline still true robotget status online robotcreate still true robotget status online prototype gets changed including robot get emberobjectcreate false equals offline robotget status online many pseudoclass js libraries behavior guessing design since unintuitive could lead hard track bugs since next instance could created varying times", "num": "3783", "d": "11/2013"}, {"title": "emrun methods destroyed objects", "body": "javascript var mycontroller emcontrollerextend actions dostuff function emrundebounce refresh refresh function thisisdestroyed return thisset content somewhere code tests appreset use pattern calls experience set destroyed object errors could fix async methods execute destroyed objects cc ebryn", "num": "3780", "d": "11/2013"}, {"title": "nested creates multiple metamorphstarts id", "body": "template nested constructs conditions used toggle details box due complexity template nested toggling inner handlebar inserts another tag id dom sure whether intended reproduce issue visit plunkr toggle inner seconds seconds right first toggle one see exists twice seem problematic example project second toggle removes unrelated dom elements reference continuation", "num": "3779", "d": "11/2013"}, {"title": "everyby called collection makes new request", "body": "works expected", "num": "3773", "d": "11/2013"}, {"title": "nested component blocks precompiled templates nt work", "body": "using emberrails encountered bug patch code handlebars compiler nt run precompiling templates patch introduced commit", "num": "3772", "d": "11/2013"}, {"title": "emberapplicationcreate breaks inputs ios", "body": "steps reproduce visit jsfiddle ios mobile safari tap input result pane type characters tap input expected outcome able continue typing actual outcome unable continue typing additional info may may useful noticed first tap step element responds jquery second tap step responds somehow lost focus even though appears focused keyboard remains onscreen", "num": "3771", "d": "11/2013"}, {"title": "emberselect view updates value binding change event", "body": "certain truly bug current behavior nt match expectations emberselect view property bound computed property custom setter behavior view initializes setter invoked immediately test case expected result would updated user changes selected value actual result changed almost immediately assume sideeffect emberselect initialization workaround replace emberselect view custom component", "num": "3770", "d": "11/2013"}, {"title": "loadingerror templates replaced default templates using named outlets nested routes", "body": "exiting loadingerror route template removed default route template nt added back far tell happens templates rendered named outlet route context change like model app transitioning nested route working example breaking example difference breaking example uses named outlet way able patch sure much classier solution explanation patch nt know nonnamed outlets replacing correctly transition named outlets change partitionhandlers router check route loadingerror routes exiting route context nt changed say context changed anyway rendertemplate function gets called like said classy solution please tell better way need named outlets nested routes twopane app", "num": "3768", "d": "11/2013"}, {"title": "routermap similar routes", "body": "two root routes share child routes last one declared overwrites previous ones case routes child routes except renders plan programs program route track trackindex route routes gone addition click track displays track template however linkto programs routes back planprograms guessing caused routing issue design way resolve hierarchical routes structure layers deep root changing plan track ideas appjs code javascript app emberapplicationcreate logtransitions true approutermap function put routes thisresource track function thisresource programs function thisresource program path programid thisresource plan function thisresource programs function thisresource program path programid appprogramsroute emberrouteextend model function return programs appprogramroute emberrouteextend model function params return programsfindby id parseint paramsprogramid var programs id name id name templates handlebars lt div class navbar gt lt div class navbarinner gt lt class brand href gt routetester lt gt lt ul class nav gt lt li gt linkto plan plan linkto lt li gt lt li gt linkto track track linkto lt li gt lt ul gt lt div gt lt div gt lt p gt outlet linkto programs plan programs linkto outlet linkto programs track programs linkto outlet lt ul gt lt li gt linkto program name linkto lt li gt lt ul gt outlet id name lt ul gt", "num": "3767", "d": "11/2013"}, {"title": "bugfix emberget returns length null", "body": "noticed first looking problem ember model would break hasmany relations apparent reason related issue first parameter passed toplevel path lookup immediately relayed finds property rather helpful lot cases also return unexpected values situation depending number frames page windowlength case returns integer always even application using frames extension like readability chrome extension inject page increases number sure anything want fix directly framework let know either way wanted bring find existing issue spent time tracking hopefully someone else looking problem save", "num": "3760", "d": "11/2013"}, {"title": "collection helper look class container", "body": "container following work", "num": "3751", "d": "11/2013"}, {"title": "embercomputedmatch could efficient", "body": "current implementation uses stringmatch regexp returns array matches double negates produce boolean could use regexptest string returns boolean directly nt bother allocating matches array etc good reason way", "num": "3746", "d": "11/2013"}, {"title": "transition new route template bad closing tag causes internal exception", "body": "ran case bad closing tag template loaded another route ember failed particular case accidentally closed problem occurs first time two templates loaded reload second route template page render fine stack uncaught typeerror read property parentnode null prependfunc dommanagerprepend insertviewcollection embermergeensurechildrenareindom embercontainerviewemberviewextendensurechildrenareindom deferredactionqueuesflush backburnerend backburnerrun emberrun anonymous function jqueryeventdispatch jqueryeventaddelemdatahandle", "num": "3744", "d": "11/2013"}, {"title": "emcomputedfilterby react change collection", "body": "given expected emcomputedfilterby detect pendingdistribute change businesscontactspendingdistribute get updated businesscontact pendingdistribute change works source code think", "num": "3742", "d": "11/2013"}, {"title": "emberjs todomvc chrome firing objectcontroller action multiple times", "body": "following getting started guide ember come parts deal editing removing items come across problem seems occur chrome firefox custom component edittodo events linked action acceptchanges acceptchanges action fires removetodo action item title empty acceptchanges function thisset isediting false emberisempty thisget modeltitle thissend removetodo else thisget model save removetodo function var todo thisget model tododeleterecord todosave edit item delete text press enter switch focus item gets deleted works perfectly firefox chrome however acceptchanges action firing twice delete title press enter dom updates remove item acceptchanges action fired presumably loses focus jsbin shows problem essentially code guide console logs edit item bbb delete text press enter data ccc deleted also remains dom longer interact item items remaining count wrong open ember inspector developer tools see data left item aaa wondering bug ember emberdata chrome expected behaviour checking js using chrome version", "num": "3741", "d": "11/2013"}, {"title": "regarding warning message running production build ember localhost wo nt receive detailed error messages want full error messages please use nonminified build provided ember website", "body": "tried running emberjs prod version still getting running production build ember localhost wo nt receive detailed error messages want full error messages please use nonminified build provided ember website ran almost emberjs prod version get rid message url localhost always get", "num": "3739", "d": "11/2013"}, {"title": "calling components methods outside", "body": "hi building complex components moment including composite components hit roadblock extreme isolation components live several cases nt need components trigger action controller controller needs trigger behaviour change component problems components nt know controller controller creating components either defined template kind solved problem subclassing embercomponent class offer way messages get components new component subclass breaks purpose isolation components nt know outer controller less invasive options found make component methods calls outside cache component name instance pairs global array like appcomponents call component method appcomponents name method trigger events outside register handle components however case passing eventsource object component often controller like mycomponent eventsourcecontroller question could solve problem elegant less invasive way possible components achieving composite components using components like lego pieces seems impossible moment see achieve goal without breaking components isolation input ideas solutions discussion welcome richard", "num": "3738", "d": "11/2013"}, {"title": "input type file breaks ancestor element action", "body": "security reasons click event button must propagate way top browser handles opens system file picker called automatically action helper file picker nt open attached ancestor dom perhaps way handle scenario use eventmanager view described issue unavoidable using happy describe limitation relevant sections docs demonstrate workaround would far nicer clicks would propagate reduced following test case using ember canary fails parent clicking choose file button nothing removing fixes problem discovered using variation emberjscom modal cookbook recipe create file upload modal use case found added modal create file upload modal removing actions divoverlay divmodal causes file picker work actions used catch clicks outside modal dialog dismiss", "num": "3737", "d": "11/2013"}, {"title": "emberenumerable breaks nan", "body": "super simple reproduction hardcode array get false use array normal numbers get true", "num": "3736", "d": "11/2013"}, {"title": "input helper nt accept arbitrary attributes", "body": "well accepts silently ignores instead passing attributes compiled html following valid attributes also bunch browserproprietary attributes like currently helper accepts following attributes ideally like make input helper simply pass hash arguments gets attributes however acceptable let least whitelist valid attributes get feedback start working pr", "num": "3733", "d": "11/2013"}, {"title": "emberselect multipletrue clears selectionbinding content loaded asynchronously", "body": "emberselect gets options asynchronously clears selectionbinding preserve selection contentbinding comes ember data starts empty asynchronously populated time options selection cleared think caused code jquery object always truthy conditional always executed changing fix issue", "num": "3732", "d": "11/2013"}, {"title": "wrapper component parameters working precompiled templates", "body": "let say component template simply contains would use templates wrapstuff stuff wrap wrapstuff ember worked perfectly fine precompiled handlebars files however betacanary raising exception see move template uses component script tag instead precompiled template works fine also pass somethinganything component eg works fine precompiled script tag exception raised code problem undefined emberhandlebarsresolvehelper function container name container nameindexof tracing back precompiled template triggering call follows use component without parameters looks like work done containerrenderables feature caused sideeffect ember overridden used one built handlebars containerrenderables work however ember overrides see adding arbitrary parameter component helper works", "num": "3728", "d": "11/2013"}, {"title": "tr elements inside collectionview nt get cleaned", "body": "using collectionview nested tr elements element removed collection nt remove associated html though objectsviews successfully cleaned jsbin dump press delete beside one colors remove object update list update table", "num": "3723", "d": "11/2013"}, {"title": "buggy behavior using embercomputedsort", "body": "docs provide example using dependent key passed nt able get work instead get wildly erratic behavior see js bin", "num": "3720", "d": "11/2013"}, {"title": "appreset clear observers", "body": "fiddle agree bug try work submitting failing test andor pr like add note testing page caused inconsistencies tests thanks amir", "num": "3718", "d": "11/2013"}, {"title": "returning route containerview throws exception", "body": "transitioning route displays containerview navigating away route returning results containerview rendered exception assertion failed calling set destroyed object thrown jsbin reveals issue", "num": "3716", "d": "11/2013"}, {"title": "new line inserted component precompiled", "body": "pretty sure right project report bug since cuts across ember ember rails handlebars need help triaging see everything working fine however equivalent emberrails app source newline beings inserted component call inspecting source seems coming javascript embertemplates componentsmycomponent emberhandlebarstemplate function anonymous handlebars helpers partials data thiscompilerinfo gt helpers thismerge helpers emberhandlebarshelpers data data var buffer hashtypes hashcontexts escapeexpressionthisescapeexpression hashtypes hashcontexts databufferpush escapeexpression helperstriagemustachecall yield hash contexts types id hashcontexts hashcontexts hashtypes hashtypes data data databufferpush n lt return buffer unsure handlebars compiler bug ember bug emberrails bug help getting right hands would appreciated bug prevents components used inside whitespace sensitive context", "num": "3715", "d": "11/2013"}, {"title": "promiseproxy nt rethrow rejections correctly", "body": "fml", "num": "3714", "d": "11/2013"}, {"title": "promiseproxymixin createwithmixins nt play nicely", "body": "works correctly surprisingly nt work model never becomes even promise fulfills", "num": "3713", "d": "11/2013"}, {"title": "stefan needs make container work values promises", "body": "", "num": "3712", "d": "11/2013"}, {"title": "sortablemixin work whole array changes", "body": "arraycontroller models whose property sortablepropertie computed change dependent single property another model belongto happens every object gets inserted binary search algorithm function properly anymore whole array became unsorted", "num": "3706", "d": "11/2013"}, {"title": "emberobjectcreate undefined fails breaks semver", "body": "throws assertion seems break semver said case assertion rather runtime exceptio additionally comparison nt really congruent sorta feel work fine", "num": "3701", "d": "11/2013"}, {"title": "computed properties inherit volatility setting dependencies", "body": "example total property volatile inference subscriptions observing properties handled way subscriptions volatile properties practice let say developing library contains object property depends volatile property b inferred volatility b know future able make b cacheable happens nt need go back delete volatility setting lazy another library b semantical meaning described behavior undesirable ember least warn new developers try include volatile property dependency list", "num": "3700", "d": "11/2013"}, {"title": "emberstate moved plugin", "body": "referencing latest ember build get error console uncaught error emberstate moved plugin code latest build brings error ember module ember function throwwithmessage msg return function throw new embererror msg", "num": "3699", "d": "11/2013"}, {"title": "linkto helper nested routes", "body": "hi folks trying diagnose problem route structure click linkto helper directly correctly highlights parent reload page ember restores nested route lose highlight routes approutermap function example linkto application template maps expect ideas thanks time", "num": "3698", "d": "11/2013"}, {"title": "arrayproxy length sync", "body": "ap content set observer another property length updated following code demonstrates issue", "num": "3694", "d": "11/2013"}, {"title": "observer property parentviewparentview working", "body": "observing property one level parentview chain seem work used work earlier release candidates javascript appview embercontainerviewextend childviews foow foo embercontainerviewextend childviews barw jsbin embermeta appview shows chainwatchers undefined", "num": "3693", "d": "11/2013"}, {"title": "emkeys behaves differently production", "body": "use emberjs emkeys returns expected keys instance object use emberprodjs emkeys return keys instance user interacted form value key bind nt able found evidence emkeys culprit nt know start digging help guidance much appreciated", "num": "3691", "d": "11/2013"}, {"title": "inconsistent reference handlebars", "body": "line references global whereas everywhere else referred via", "num": "3687", "d": "11/2013"}, {"title": "ca nt send action applicationroute activate", "body": "hi machty reason possible send events activate applicationroute routes seem work fine though see jsbin thanks", "num": "3685", "d": "11/2013"}, {"title": "need handling promise rejection case applicationroute", "body": "promise returned model hook causes transition halt till either resolution rejection promise occurs valid case applicationroute error hook provide applicationroute attempt route transition via transitionto made infinite loop occurs since transition occurs via applicationroute promise rejection occurs fine case route extentions", "num": "3684", "d": "11/2013"}, {"title": "computed property stops firing predictable number times", "body": "strange one indeed reproduce press button times time every time fail trigger recalc associated cp without throwing errors", "num": "3681", "d": "11/2013"}, {"title": "insertnewline event fires twice firefox", "body": "noticed firefox nt tested versions yet insertnewline event textfields textareas fired twice try jsfiddle fine chrome", "num": "3679", "d": "11/2013"}, {"title": "observes firing property nt change", "body": "model property controller setup default setupcontroller observer fire js app emberapplicationcreate appindexroute emberrouteextend model function return appindexcontroller emberobjectcontrollerextend nothingchanged function consolelog weird observes nothing reproduce open fiddle see weird console expected behavior", "num": "3676", "d": "11/2013"}, {"body": "seems like good stackoverflow question try keep issue tricky specifically issues qa would recommend cross linking stack overflow question issue", "d": "11/2013"}, {"body": "downloads github repository deprecated downloaded", "d": "11/2013"}, {"body": "adelrosarioh guides actually maintained website repo could submit pull request repo fix issue", "d": "11/2013"}, {"body": "yes thanks", "d": "11/2013"}, {"body": "really ember bug mate tell bootstrap modals work fine using beta", "d": "11/2013"}, {"body": "give jsbin example also using custom view using", "d": "11/2013"}, {"body": "seems like good stackoverflow post bug found reopen", "d": "11/2013"}, {"body": "need move super call making modifications content init use init event say would mutating proxy target init method", "d": "11/2013"}, {"body": "worked bit seems adding proxy content inside event callback works well made js bin demonstrate solution", "d": "11/2013"}, {"body": "kselden thanks pointing event discovered solution independently comment came seems work well modifying target object proxy use case using proxy object intercept items added array persist inmemory cache backed network storage hooking proxy cache cache contains anything belongs proxy immediately tries populate thus modification target object inside method", "d": "11/2013"}, {"body": "also move manipulation super call like", "d": "11/2013"}, {"body": "planning move build node based build solution grunt unfortunately wont suffice actual build system various efforts begun see comes deployment release code remain ruby development depending node seems reasonable also sort point brought forums issue try keep issues clean proposals", "d": "11/2013"}, {"body": "oh sorry nt know", "d": "11/2013"}, {"body": "way suggest would bring closer ruby method definitely like api standpoint return anything array seems bizarre kind change would seem bug fix unsure would considered breaking change guess depends documentation states", "d": "11/2013"}, {"body": "seems totally strange unless history exist nt know feels like bug", "d": "11/2013"}, {"body": "would necessarily expect return array length similar native array would still work proposed", "d": "11/2013"}, {"body": "expected result although point embera transform arrays ember arrays prototype extensions", "d": "11/2013"}, {"body": "problem check flag nt work since check moved routers init method flag works javascript init function thisrouter thisconstructorrouter thisconstructormap emberk thisactiveviews thissetuplocation get namespace logtransitionsinternal thisrouterlog emberloggerdebug", "d": "11/2013"}, {"body": "believe resolved", "d": "11/2013"}, {"body": "landed thanks rjackson", "d": "11/2013"}, {"body": "thanks reporting work done", "d": "11/2013"}, {"body": "nateredding setupcontroller also enabling feature flag query params using feature documentation correct would really help could setup jsbin something like", "d": "11/2013"}, {"body": "stumble upon fact query params modelquery object wish named queryparams consistency oh well still seems misdocumented however setupcontroller looks like", "d": "11/2013"}, {"body": "also wanted check query params slated official release sometime near future may want depend going stay experimental state unforeseeable future", "d": "11/2013"}, {"body": "nateredding must something wrong setup queryparams get third argument setupcontroller could reproduce issue jsbin would helpful easier nail thing going wrong yes think make next release rjackson", "d": "11/2013"}, {"body": "added third parameter named queryparams always undefined however even though modelquerystatus defined query parameters seems like simply matter incorrect documentation try set jsbin later think still needed", "d": "11/2013"}, {"body": "sure still believe bug end jsbin showing setting things would help lot mon nov pm nateredding notifications githubcomwrote added third parameter named queryparams always undefined however even though modelquerystatus defined query parameters seems like simply matter incorrect documentation try set jsbin later think still needed reply email directly view github", "d": "11/2013"}, {"body": "cc alexspeller", "d": "11/2013"}, {"body": "nateredding query params definitely work must something wrong please double check documentation still trouble post code look", "d": "11/2013"}, {"body": "nateredding query params likely official release soon definition soon", "d": "11/2013"}, {"body": "definitely nt broken leave bugs code hook called properly params change betting declaring query params properly route please reread docs carefully ensure configured routes correctly", "d": "11/2013"}, {"body": "nateredding possible specify queryparams parent resource specify queryparams children resources hoping query params inherited parent case yes children get proper model hooks routes message tells note nt specify query params given route parameters passed route hooks remains unchanged", "d": "11/2013"}, {"body": "closing since sounds pretty definite bug", "d": "11/2013"}, {"body": "may related scoping issue unsure would use helper opposed using option please note removed see", "d": "11/2013"}, {"body": "switched render helper solved issue", "d": "11/2013"}, {"body": "within helper flow action controller rendered parent controller template render embedded controller target usually router router tries sending action current route bubbles route hierarchy action sent route associated rendered controller unless application happens route", "d": "11/2013"}, {"body": "thanks help", "d": "11/2013"}, {"body": "problem barbareek good luck", "d": "11/2013"}, {"body": "barbareek thanks raising query mind quite long time rendering different templates model different templates set explicitly whereas render template via helper able provide model template damn easily believe inconsistency addressed would like go favor pr seems right would like hear thoughts community going", "d": "11/2013"}, {"body": "warned changes made would break existing apis otherwise would break semver cc machty", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "affect preventing url routeless state done something like javascript approutelessroute emberrouteextend beforemodel function transition transitionmethod null routeless state suggested", "d": "11/2013"}, {"body": "selvag keep mind nt affect", "d": "11/2013"}, {"body": "yeah definitely want make sure still nt change url models redirects happen", "d": "11/2013"}, {"body": "wagenet kinda contradicts intent though changing url eager async transition parameters present url already generated still guarantee one model hooks wo nt redirect elsewhere stefanpenner kselden thoughts", "d": "11/2013"}, {"body": "hmm definitely discuss feel like people may relying current behavior suspect app verify", "d": "11/2013"}, {"body": "could substatesonly thing ie change url loadingerror state entered rather eagerly updating url across board", "d": "11/2013"}, {"body": "believe fixed could redownload confirm", "d": "11/2013"}, {"body": "confirmed starter kit appears correct", "d": "11/2013"}, {"body": "bcardarella known limitation strategy took including deprecated support old behavior change suggesting would surprising behavior app developerdefined controller class hierarchies would suggest instead add flag opt deprecated behavior removed anyway open thoughts others including wycats strong proponent hash approach", "d": "11/2013"}, {"body": "considering guides say supposed use hash current reference controller functions used actions might use action name common get unexpected function controller used instead action confusing unfamiliar history actions", "d": "11/2013"}, {"body": "hmm seem like problem lukemelia confused ca nt check first use exists fall back controller methods", "d": "11/2013"}, {"body": "wagenet perobject basis suggesting going way target chain actions going deprecated behavior action handled would consistent expected behavior would challenging implement given current apis think allowing people opt deprecated behavior would simpler cleaner futurelooking", "d": "11/2013"}, {"body": "fix easily addresses issue cases pr discussion", "d": "11/2013"}, {"body": "bcardarella sure", "d": "11/2013"}, {"body": "ok later tonight", "d": "11/2013"}, {"body": "shortterm workaround anyone running would add action handler controller simply returns let action bubble", "d": "11/2013"}, {"body": "lukemelia volunteering matter running tests custom build seeing fails", "d": "11/2013"}, {"body": "yes assign ongoing basis think would want tests run necessary custom build jquery", "d": "11/2013"}, {"body": "good question think might want consider changing official dependency subset jquery run tests run subset able run full thing theory could also make tests thought helpful", "d": "11/2013"}, {"body": "cc rjackson", "d": "11/2013"}, {"body": "mbixby although cool idea bug opening discourse discussion would appropriate", "d": "11/2013"}, {"body": "duplicate", "d": "11/2013"}, {"body": "failing test case curious javascript test reopening class immediately update prototype function var base emberobjectextend status offline base basecreate var robot baseextend status online robot robotcreate basereopen get function return unknown ok baseget status unknown existing instances reopened class immediately get prototype changes ok robotget status unknown existing instances inherited reopened class immediately get prototype changes", "d": "11/2013"}, {"body": "known quirk tl dr nt instances created likely documented warned", "d": "11/2013"}, {"body": "initially thought maybe blow away existing queues reset likely going mega confusing suspect emrun perform isdestroyed objects unfortunately option kselden thoughts", "d": "11/2013"}, {"body": "stefanpenner hmm think blowing existing queues confusing simple way app want", "d": "11/2013"}, {"body": "tchak currently undefined area seen people use queues explicitly around mitigate currently issues reset within admit looked closely usages may error", "d": "11/2013"}, {"body": "stefanpenner another maybe related issue fact something like app recreated wired state like view rerendered actions registered tried wrap creation help adding delay ms emrunlater helps almost thinking could help return promise method app resolves app completely cleared maybe", "d": "11/2013"}, {"body": "ya need ensure resetdestroycreate occur independent runloops", "d": "11/2013"}, {"body": "stefanpenner plan needs done find someone else", "d": "11/2013"}, {"body": "hi ryrych using ember data bug tracker", "d": "11/2013"}, {"body": "thanks", "d": "11/2013"}, {"body": "almost certainly precompiling templates older version embertemplatecompiler update embersource something like go away make sure clear assets cache make sure everything getting fully reprecompiled close ends case", "d": "11/2013"}, {"body": "would go long way giving people information happens", "d": "11/2013"}, {"body": "agreed likely needs happen gets released", "d": "11/2013"}, {"body": "closing since merged still issues let us know", "d": "11/2013"}, {"body": "stefanpenner may interest", "d": "11/2013"}, {"body": "update realized binding behaves correctly provides satisfactory workaroundsolution perhaps value binding behave way", "d": "11/2013"}, {"body": "cc machty", "d": "11/2013"}, {"body": "specific substates seems like happening even slow promises nt involved confirm", "d": "11/2013"}, {"body": "fiddle", "d": "11/2013"}, {"body": "nested resources nt namespaced automatically think want manually like javascript approutermap function thisresource track function thisresource trackprograms function thisroute program thisresource plan function thisresource planprograms function thisroute program take look nested resources section routing docs want actually share route classes sure possible", "d": "11/2013"}, {"body": "xtian right right ca nt share plans discussion forward movement yet might good see proposals related forums start new one", "d": "11/2013"}, {"body": "invalid html nt something fix said future htmlbars project could likely offer improved syntax validation", "d": "11/2013"}, {"body": "ran exact issue agree stefanpenner nt something handlebars fix however ticket nt exist would taken lot longer find error would possible add check point throw different error adds may malformed html would big help development would added handlebars ember happy put together pull request", "d": "11/2013"}, {"body": "exactly hope created ticket better error message nov pm joel kallman notifications githubcom wrote ran exact issue agree stefanpenner nt something handlebars fix however ticket nt exist would taken lot longer find error would possible add check point throw different error adds may malformed html would big help development would added handlebars ember happy put together pull request reply email directly view github", "d": "11/2013"}, {"body": "thumbsup joelkallman stumbling ticket saved bunch time troubleshooting day", "d": "11/2013"}, {"body": "joelkallman filmknurd saved bunch time", "d": "11/2013"}, {"body": "currently nt ability since htmlbars future successor handlebars full dom parsing provide sort highly useful feedback", "d": "11/2013"}, {"body": "tb failing jsbin would help lot description looks like trying ought work", "d": "11/2013"}, {"body": "tb put jsbin together seems work might missing something could please take look cc hjdivad", "d": "11/2013"}, {"body": "nt looked yet playing around jsbin definitely seems weird also behavior exhibited safari chrome", "d": "11/2013"}, {"body": "mbracero looks like fired safarichrome press enter clearing title entry seems like desired behavior since action triggered twice causing amounts race condition seem strange though", "d": "11/2013"}, {"body": "mbracero thanks creating issue question probably done sooner thanks looking rjackson nt like ignoring weird behaviour tutorials case done something fundamentally wrong", "d": "11/2013"}, {"body": "yeah error message telling use dev build dev environment working intended specific request", "d": "11/2013"}, {"body": "message intentional using production version prod portion emberprodjs means going using localhost want message would need use emberjs debug version", "d": "11/2013"}, {"body": "way first method breaks component isolation inspired work done emberbootstrap components author solve problem capable triggering methods inside components outside", "d": "11/2013"}, {"body": "rlopes would make good stack overflow question discuss post please feel cross link tag posts accordingly additionally providing concrete examples help provide context used frame proper solution", "d": "11/2013"}, {"body": "record another way access component use emberviewviews name name view name gave component however feel dirty make calls even controller", "d": "11/2013"}, {"body": "strongly suggest reaching around globals accomplish tasks likely lead much sadness mentioned solid examples foster good discussion discourse stackoverflow great places discussion", "d": "11/2013"}, {"body": "thanks trying luck copied question stack overflow", "d": "11/2013"}, {"body": "mentioned modal cookbook issue", "d": "11/2013"}, {"body": "joefiorini ok found causes code see unfortunately result guess could check make sure value something undefined", "d": "11/2013"}, {"body": "come several times current prescribed mechanism add additional bindings see said always advocate stuff working would interesting hearing trek tomdale opinion changed", "d": "11/2013"}, {"body": "ember early days late remember decision stick attribute bindings use newer attributes looking observers set attribute binding wary expanding default bindings include possible attributes default", "d": "11/2013"}, {"body": "right creating passed options helper", "d": "11/2013"}, {"body": "jamesotron curious stops specifying html apart values attributes data driven magically bound", "d": "11/2013"}, {"body": "wound since helper kind expected work", "d": "11/2013"}, {"body": "jamesotron ok imo always extend create ideal stefanpenner point agree things work", "d": "11/2013"}, {"body": "jamesotron input helper wraps textfield reopen class suggestion work done globally app", "d": "11/2013"}, {"body": "imo allowing people use attributes introduce places nt work suggest thing always say nobody taken want ember ship even attributes bound default start enumerate every attribute explanation wo nt come expected behavior need support example maxlength added input whose already inserted bound value longer truncate value field controller part old value lost need cache truncating undone", "d": "11/2013"}, {"body": "trek assume mean unexpected behavior", "d": "11/2013"}, {"body": "inclined go trek one leave open bit longer see anyone else wants chime", "d": "11/2013"}, {"body": "indeed mean expected behavior new behavior would people expect ember include around new attributes", "d": "11/2013"}, {"body": "let move discuss discussion", "d": "11/2013"}, {"body": "needs lot work current line thought deprecate introduce new simpler version want complex behavior customize", "d": "11/2013"}, {"body": "machty possible bug containerrenderables feature", "d": "11/2013"}, {"body": "bitten trek one apps trouble reproducing oh think realized something precompiling templates might probably version ember template compiler nt handlebars hacks would explain seeing seeing assuming using ruby build tools could try updating equivalent whichever tools using", "d": "11/2013"}, {"body": "thank originally using emberrails default release version embersource wanted use features canary builds command fetch canary builds emberemberdata idea gem included additional files eg template compiler would incompatible canary build embersource still little behind canary builds looks like template compiler current enough fixed problem completely might submit pr emberrails repo make sure documentation clearly states want run betacanary builds done addition settingt correct embersource version thanks tons time hard work guys putting ember", "d": "11/2013"}, {"body": "machty compiler version issue would explain could never isolate produce jsbin", "d": "11/2013"}, {"body": "joepym bug setting collectionview incorrectly ca nt outside context view need bind element using current implementation looks like second custom view nt need specify ember knows child rather updated jsbin", "d": "11/2013"}, {"body": "oh thanks nt realise reading collectionview docs mandatory way using collection view table compared rails collection partials head reason like app wanted put header row table", "d": "11/2013"}, {"body": "joepym problem also check collection helper", "d": "11/2013"}, {"body": "good catch courthead fix soon", "d": "11/2013"}, {"body": "courthead bit time please confirm fixes problem thanks", "d": "11/2013"}, {"body": "hjdivad works like charm thanks", "d": "11/2013"}, {"body": "courthead awesome glad hear", "d": "11/2013"}, {"body": "hjdivad may discovered another bug let say call using dependent key pass sort function references also item try get buggy behavior updated js bin reflect talking might click run js button wait sec output appear try unchecking box next task edited editing task name trigger sort function run ends replacing another word list entirely two instances word edited list also even code work would still trigger sort function run property edited way call observe multiple properties using syntax edit digging around code seems accept number dependent keys first argument accepts one particular reason updated local copy allow work given multiple dependent keys changed controller property reference seems fixed issues mentioned", "d": "11/2013"}, {"body": "courthead could accept one dk recent pull request others yet updated reflect", "d": "11/2013"}, {"body": "dependent item properties calling sort function instead indirect list properties must specify dependent item properties wo nt update correctly believe docs mention nt pr fix would much appreciated specifying multiple item properties enable feature following multiple dependent arrays reason accepts one dependent key sort one array course combine multiple arrays sort need multiple cps hope make easier composable computed properties case one dependent array need sort multiple properties sort function preferred approach enable need run stable ember right thing run beta enable beta features really need reason want run patched stable rather limitedfeature beta able backport although say recommended insufficient problematic way please provide feedback one benefits feature flagging things beta lets users try new features retaining overall library stability", "d": "11/2013"}, {"body": "ah occurs obviously already know features since must enabled", "d": "11/2013"}, {"body": "thanks info though helpful", "d": "11/2013"}, {"body": "observers typically unless explicitly managed last lifecycle object attached means unless explicitly programmatically remove observers longlived objects retain observers time object destroyed instance remains observers also remain seems entirely reasonable case observers attached managed instances controllers cleanedup reset instances observe destroyed case would likely indicate issue misunderstood related issue raised gladly reopen", "d": "11/2013"}, {"body": "thanks stefanpenner clear appreset clearing observers cause issues tests polluting sorted setup tests refactor app use properties app workarounds easy enough confirmed observers cleared expected", "d": "11/2013"}, {"body": "ya blows away objects managed app instance app instance refactoring step took seems like simplest path another option isolation emberappkit based app nt use reset rather actually destroy recreate even app instance", "d": "11/2013"}, {"body": "seems strange u sharing view instances instances container", "d": "11/2013"}, {"body": "oh right mistake", "d": "11/2013"}, {"body": "ya likely cause sharing views multiple instances anyways best luck", "d": "11/2013"}, {"body": "rails app template ends new line coming think bug", "d": "11/2013"}, {"body": "rjackson nope least nt intend end one emberrails thinks ends newline probably bug emberrails", "d": "11/2013"}, {"body": "unclear coming seem like bug", "d": "11/2013"}, {"body": "tried reproducing ember app kit nt seem affected probably narrows rails sprocket emberrails", "d": "11/2013"}, {"body": "found added sprockets code around since forever one seems know related issue leshillhandlebarsassets unsure point rjackson think ideally fix sprockets nt look like going happen anytime soon", "d": "11/2013"}, {"body": "way case wondering yes real issue affecting code using components inside whitespace sensitive context right workaround override render trim newline buffer really hope get fixed one way work around sprockets emberrails really push fix sprockets whatever totally willing help want get people opinion bestpreferred course action", "d": "11/2013"}, {"body": "chancancode sorry nt control sprockets much possible manage workaround real fix going sprocket", "d": "11/2013"}, {"body": "solution think manually include template actual html output kinda sucks work", "d": "11/2013"}, {"body": "wagenet yes makes sense ember issue sure rjackson see get fixed sprockets want issue emberrails track", "d": "11/2013"}, {"body": "tracked bug way works basically arguments passed function treated mixins including last argument supplying promise example created failing test example fixed issue unfortunately changing handle mixins separate object used creation caused quite failures many invalid tests like using within still may dependent existing incorrect implementation fix", "d": "11/2013"}, {"body": "nt bug createwithmixins describe work never intention old create method renamed ever define semantics setter never create mixed semantics", "d": "11/2013"}, {"body": "kselden currently misleading", "d": "11/2013"}, {"body": "create jsfiddle jsbin demonstrates problem isolation", "d": "11/2013"}, {"body": "something like", "d": "11/2013"}, {"body": "hmm seems odd hjdivad chime", "d": "11/2013"}, {"body": "fall case although slightly different reasons sortablemixin item sort property changes checks see item still sorted comparing left right neighbours item sorted reinserts check fails entire array unsorted due batch updates array sorted prior values case jsbin sort arbitrary initial values emcomputedsort comes little closer much attempt handle multiple property changes eg batches changes unfortunately cache invalidated fixing sortablemixin fixing much code require adding complexity add decide whether remove item mark item marked reinsert fixing emcomputedsort needs flush one item time ie batch changes multiple properties multiple items flush last property first", "d": "11/2013"}, {"body": "cc wagenet", "d": "11/2013"}, {"body": "use case", "d": "11/2013"}, {"body": "people stuff along lines essentially relying either populated unpopulated emberobject regardless passed searching replacing occurrence following fix felt kinda strange break unclear payoff surprising break", "d": "11/2013"}, {"body": "guess since used work harm changing back", "d": "11/2013"}, {"body": "practice cp nearly never used fall poweruser category unsure changing semantics", "d": "11/2013"}, {"body": "right solution ended manually notify property change rather volatile dependency key concrete use case cp volatile dependency", "d": "11/2013"}, {"body": "poweruser category reactive tree manipulation library set nodes volatile toggle memoization neighbors hjdivad real benefit wrote issue current behavior nt make sense", "d": "11/2013"}, {"body": "hjdivad meant context issue search github examples volatile properties", "d": "11/2013"}, {"body": "mbixby current api nt built support changing flags designtime would recommend trying call even cps already retrieved invalidation unless kselden comes says otherwise really nt think expect toggle things like think need track nodes maybe volatile nonvolatile cps toggle via flag", "d": "11/2013"}, {"body": "yeah expect able change properties existing cp get things working hjdivad suggestion go", "d": "11/2013"}, {"body": "likely better suited stack overflow take stab anyways guess using older version ember data likely relied package ember nt use neither ember data package removed repo warning added avoid error upgrade latest ember data beta assumption correct simply include latest build emberstates application immediately ember", "d": "11/2013"}, {"body": "question would ideal post stackoverflow emberjs tag try keep github issues bug reports pull requests", "d": "11/2013"}, {"body": "permaclosed make sure actually bug followed routing guide pretty closely", "d": "11/2013"}, {"body": "provide jsfiddle jsbin post reference post someone time investigate dig", "d": "11/2013"}, {"body": "get property least observers work works call init", "d": "11/2013"}, {"body": "general sorts chains sign code smell however seems like work put together jsfiddle demonstrates issue", "d": "11/2013"}, {"body": "already jsbin attached jsfiddle commit introduced regression swapping line makes example work know idiomatic use observers pattern often use build complex reusable views app basically sproutcore app ported ember using flame give example declare following view javascript appcomplexview flameviewextend childviews contentvieww label button contentview flameviewextend childviews labelview buttonvieww use without care complex structure way ember currently works changing properties would invalidate values cached computed property debugging noticed called init starts chain last chainnode one add chainwatcher object node returns undefined turn making return undefined", "d": "11/2013"}, {"body": "whoops missed jsbin sorry", "d": "11/2013"}, {"body": "kselden related work still seems like work maybe notice something missing", "d": "11/2013"}, {"body": "hmm odd look", "d": "11/2013"}, {"body": "confirm seeing problem examples weird indeed fix", "d": "11/2013"}, {"body": "happens mandatory setters promote prototype properties encountered issue checks prototype properties included since dev build sets mandatory setters properties observed promoted pass test production build however mandatory setters see jsbin uses production build sets", "d": "11/2013"}, {"body": "teddyzeenny ah interesting thoughts", "d": "11/2013"}, {"body": "configurable option first place documenting work tell users mandatorysetters assuming already", "d": "11/2013"}, {"body": "mandatory setters debug helper assume production performance reasons said seem like issue need think", "d": "11/2013"}, {"body": "wagenet sure fix said requires thought", "d": "11/2013"}, {"body": "could mark non enumerable believe would solve modern browsers", "d": "11/2013"}, {"body": "stefanpenner would something like would need redefine property first set", "d": "11/2013"}, {"body": "actually went path marking defineproperty usage non enumerable abit work terrible hard place caused many issues although nt mainline aware may need fixing go path entirely clear nt enumerable likely come strategy implement accordingly", "d": "11/2013"}, {"body": "since need consistent behavior dev production builds deciding property enumerable depend runtime value right adding mandatory setter making enumerable first", "d": "11/2013"}, {"body": "teddyzeenny know enough send pr", "d": "11/2013"}, {"body": "teddyzeenny want help would guide little bit submit patch", "d": "11/2013"}, {"body": "alanandrade sure guess first step would create failing test make sure behaves without mandatory setters needs tested following cases assume object creation setting property observing property observing property setting observing property removing observer observing property setting removing observer observing property removing observer setting", "d": "11/2013"}, {"body": "teddyzeenny two tests fail since testing env mandatorysetters true observers sure proceed like would assertion make hope helps please hit leads continue helping one sidenote people hipchat nt exited haha yeah agree weird", "d": "11/2013"}, {"body": "alanandrade tests added fail fix prototype property nt included refer previous comment javascript object creation test currently always pass var beer emberobjectextend type ipa create deepequal emberkeys beer setting property test currently always pass var beer emberobjectextend type ipa create emberset beer type ipa deepequal emberkeys beer type testing observers javascript test currently fail fix var beer emberobjectextend type ipa create emberaddobserver beer type emberk deepequal emberkeys beer teardown test emberremoveobserver beer type emberk", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "apparently defining property", "d": "11/2013"}, {"body": "alanandrade tests look good create pr", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "moving discussion", "d": "11/2013"}, {"body": "nt totally remember rationale presently nt consider route part currently active route hierarchy called without throwing exception nt thing generally calling within route entered fire route parent routes since parents one else handle event seeing error nt know makes sense change behavior reason keeping way error thrown route hooks transition elsewhere occurs anyone else calls firing route failed enter suppose could change behavior push route active hierarchy calling pop error thrown ca nt think reason moment seems like good change", "d": "11/2013"}, {"body": "ok hope complicated fix would like see work easy workaround less clean", "d": "11/2013"}, {"body": "dimitrisuls matter best practices would argue calling inside clean pattern would seek avoid generally used handling usereventgenerated action often implicitly way helper hand role allow route ensure state application suitable route active need call code action handler nonaction context extract method", "d": "11/2013"}, {"body": "lukemelia good point think argument fire route call though", "d": "11/2013"}, {"body": "agree lukemelia used separate method called activate method also called userevent moved inside actionhash maybe left method delegate action anyhow applicationroute activate even good place put stuff like checking session connecting socketio etc maybe overlooking something", "d": "11/2013"}, {"body": "machty long delegates use case calling async operation consideration route may changed since async operation started ie want currently active route handle result async op since handled differently depending state app dimitrisuls examples gave sound like async async stuff want wait often better choice machty may thoughts", "d": "11/2013"}, {"body": "lukemelia could handle using action fires newlyentered active routes transition complete seems like better patterns supporting desired behavior closing unless major pushback", "d": "11/2013"}, {"body": "code causes issue emberrouteextend works fine", "d": "11/2013"}, {"body": "cc machty", "d": "11/2013"}, {"body": "infinite looping behavior describing seems correct requirement app enter since every route child hook always returning rejecting promise expect continue fail example different action handler transitioning another route whose parent nt include going see infinite loop sounds like want structure app use another toplevel entry resource route fails transition another toplevel route nt resource route parent nt seem like buggy behavior reopen demonstrated otherwise", "d": "11/2013"}, {"body": "thanks alex timely reply told work around issue actual issue mentioned url go applicationroute putting features like authentication logic inside applicationroute common authentication issues handled common place whats worth observing recursive infinite loop seem occur case promise resolution handled issue using deferred object calling error success ajax defferresolve defferresolve error respectively also observed error previous transition continued rather generating new transition applicationrotue since main principle promise rejection resolution emberjs continue left", "d": "11/2013"}, {"body": "infinite loops nt occur cases causes trying transition back route originally failed load authenticated resource route user fails authenticate user transitioned say child authenticated route seems like putting authenticated routes inside also toplevel route like transition handler", "d": "11/2013"}, {"body": "browsers test quickly hit button matter happen log html contents parent nodes phone right take look home sounds like kind quirky behavior encountered firefox using timeout involved chrome whenever paint events happen rapidly sent mailbox iphone fri nov pm aaron notifications githubcom wrote strange one indeed reproduce press button times time every time fail swap content without throwing errors reply email directly view github", "d": "11/2013"}, {"body": "tested chrome safari pressing button every second stops swapping content button presses", "d": "11/2013"}, {"body": "confirmed latest chrome timing nt seem issue waving mouse around window seconds click makes difference replacing computed sort simple alias resolves issue probably ultimate source bug", "d": "11/2013"}, {"body": "scumbag chrome bug sent mailbox iphone fri nov pm christopher swasey notifications githubcom wrote confirmed latest chrome timing nt seem issue waving mouse around window seconds click makes difference replacing computed sort simple alias resolves issue probably ultimate source bug reply email directly view github", "d": "11/2013"}, {"body": "though chrome safari unlikely sent mailbox iphone fri nov pm christopher swasey notifications githubcom wrote confirmed latest chrome timing nt seem issue waving mouse around window seconds click makes difference replacing computed sort simple alias resolves issue probably ultimate source bug reply email directly view github", "d": "11/2013"}, {"body": "firefox also affected", "d": "11/2013"}, {"body": "twokul likely issue nt looked yet seems issue browsers tested chrome safari firefox", "d": "11/2013"}, {"body": "seems bad ca nt take look right try later today sent mailbox iphone fri nov pm robert jackson notifications githubcom wrote twokul likely issue nt looked yet seems issue browsers tested chrome safari firefox reply email directly view github", "d": "11/2013"}, {"body": "kumavis work around depend instead feature enabled depend rjackson seems issue least directly seems issue either lazy cps tl dr recomputations incorrect watching count actually toggles quite bit believe result lazy cp code yet clear watchers count incremented sixth time toggled", "d": "11/2013"}, {"body": "okay tracked basically lazy cp stuff slightly incompatible something fully recomputed presently uncached need add dks amp watchers fix", "d": "11/2013"}, {"body": "kselden think directly related undefined issues although root causes likely similar", "d": "11/2013"}, {"body": "weird works fine firefox event fired also noticed call cp upgrade latest version p", "d": "11/2013"}, {"body": "example jsfiddle found insertnewline code using latest ember anything like cacheable perhaps windows specific problem running windows", "d": "11/2013"}, {"body": "could put together new jsbin latest version ember", "d": "11/2013"}, {"body": "expected behavior reason change property hook goes causes change", "d": "11/2013"}, {"body": "turned prototype extensions modified ember implementation accordingly conflict brightcove smartplayer api resolved thank wendy cary stefan penner mailto notifications githubcom sent thursday october pm emberjsemberjs cc wendy cary subject emberjs conflict brightcove smartplayer api unfortunately without details likely able track provide example issue maybe jsbin jsfiddle thoughts may issue prototype extension run ember prototype extensions see reply email directly view github", "d": "11/2013"}, {"body": "recommended stefanpenner changes made defer start routing testing mode first called currently behind feature flag", "d": "11/2013"}, {"body": "looking able least track going", "d": "11/2013"}, {"body": "definitely confirmed issue created failing test using track culprit didtransition hook fired every time called words call twice fire twice call five times fired five times seems like something nt cleaned properly still digging exactly", "d": "11/2013"}, {"body": "twokul tracked original test incorrect issue ultimately caused fact location object never cleaned router destroyed meant every called would add another listener never removed", "d": "11/2013"}, {"body": "rjackson storing location object container solve", "d": "11/2013"}, {"body": "merged closing", "d": "11/2013"}, {"body": "simontseng got response machty", "d": "11/2013"}, {"body": "thanks responses days trying figure problem without success given finding problem decide upgrade ember newest stable emberdata canary avoid localstorageadapter embertool use fixture adapter emberdata instead issue since disappeared would suspect something incompatible various versions libraries also something promises handled going write adapter work websql little project end since nt find publicly available yet localstorageadapter temporary measure get development going thanks machty wagenet trying help close issue", "d": "11/2013"}, {"body": "simontseng works newest stable ember canary ed probably nothing fix sorry trouble glad figured something", "d": "11/2013"}, {"body": "odd one thanks bringing attention specific situation causing trouble", "d": "11/2013"}, {"body": "vinilios ping", "d": "11/2013"}, {"body": "hi actually tried use multiple statements within template order reuse partial template different context checkout binding issue caused fiddle", "d": "11/2013"}, {"body": "cc kselden", "d": "11/2013"}, {"body": "happens alias binding never gets disconnected multiple statements use alias one ends correct value looked fixing could nt figure deactivate listeners without reference binding", "d": "11/2013"}, {"body": "trek think", "d": "11/2013"}, {"body": "think understand confusion specific issue didorothy seeing nt actually related docs didorothy using normal action sending element template component accurate component use behavior like said docs sendaction general nt super clear address week", "d": "11/2013"}, {"body": "trek thanks clarification jsfiddle looking making docs clear apparently missed misunderstood aspect examples explanation docs example explanation helpful", "d": "11/2013"}, {"body": "ideas improve error messages recommendations considered correct", "d": "11/2013"}, {"body": "working also thanks example setup consider ticket closed stack nodejs connectexpress browserify way", "d": "11/2013"}, {"body": "experiencing bug", "d": "11/2013"}, {"body": "skddc could make jsbin demonstrating issue", "d": "11/2013"}, {"body": "hmm jsbin works looks like bug eak using wrong investigate open issue eak actual bug thanks", "d": "11/2013"}, {"body": "skddc may related", "d": "11/2013"}, {"body": "turns nt know component names ca nt single words earlier versions nt complain show deprecations warnings worked fine way used", "d": "11/2013"}, {"body": "skddc yeah components contain dash keep line web component spec see could manually register single word probably better go dasherized name follow conventions", "d": "11/2013"}, {"body": "ok thanks", "d": "11/2013"}, {"body": "closing due inactivity joelkallman still issues let us know", "d": "11/2013"}, {"body": "setup seems odd though clarify expected behavior", "d": "11/2013"}, {"body": "gavinwahl jamesotron hjdivad still issue everything cleared", "d": "11/2013"}, {"body": "nt prevent kind reduce computed written needs defined works either fresh old usually pretty straightforward write properties eg cache higher priority things reduce computed unlikely anything soon however would happy review pull request gave fresh resets", "d": "11/2013"}, {"body": "gavinwahl please reopen find current api blocks implementing something", "d": "11/2013"}, {"body": "closing favor discussion pr", "d": "11/2013"}, {"body": "stefanpenner know ton plate curious happened made progress", "d": "11/2013"}, {"body": "actually sure want seems like strange interleaving could occur think keeping tasks granular independent nt bad thing", "d": "11/2013"}, {"body": "stefanpenner ok removed test anyway close", "d": "11/2013"}, {"body": "stefanpenner assume nt able get yet", "d": "11/2013"}, {"body": "also need", "d": "11/2013"}, {"body": "good idea", "d": "11/2013"}, {"body": "need made base resource tho called root problem encountering link keeping query params cases read setup rootbase route nt want keep url ca nt figure remove tried baseroot route class hook tho trying redirect route called course current route neither existing one virtual one idea clear query params user browsing application wants give url someone else include parameters specific user", "d": "11/2013"}, {"body": "especially things like modal signuplogin windows activated anywhere", "d": "11/2013"}, {"body": "hjdivad ping", "d": "11/2013"}, {"body": "closing custom reset semantics handled via jamesotron please reopen usecase missing concern feature plan updating internals reducecomputed per discussion wycats need spend time thinking detail sure think changes likely change semantics anyway", "d": "11/2013"}, {"body": "fine", "d": "11/2013"}, {"body": "wycats tomdale expected behavior", "d": "11/2013"}, {"body": "mmun research looking implementation think bug templatename property route seems working two lines want specify templatename route view check following jsfiddle work see could done route official doc stefanpenner saw added line users also declare templatename controller line causing issue could submit fix desired behavior consistency go keeping view removing line", "d": "11/2013"}, {"body": "closing favor pr", "d": "11/2013"}, {"body": "glad confusion inconsistency resolved want register concern around define view want name template different route name convention would require also seems like property always visible important property language guides centers around template firstclass citizen route object tells template model display", "d": "11/2013"}, {"body": "right discussed irc totally makes sense router pullrequest fixes issue", "d": "11/2013"}, {"body": "cool thanks update appreciate work", "d": "11/2013"}, {"body": "thanks run one glad see fixed", "d": "11/2013"}, {"body": "alexspeller", "d": "11/2013"}, {"body": "disallow params collide ember linkview props using kind blacklist maybe dev mode change way query params specified linkto helper eg active param specified better convention particularly nice either way", "d": "11/2013"}, {"body": "using also conflictive", "d": "11/2013"}, {"body": "twokul rjackson thanks efforts problem emberjs right", "d": "11/2013"}, {"body": "believe main issue mocha starting tests immediately ember initializers creates object nt run document ready", "d": "11/2013"}, {"body": "seems like integration problem would likely close issue cc stefanpenner sent mailbox iphone fri nov pm yoshihiro kikuchi notifications githubcom wrote twokul rjackson thanks efforts problem emberjs right reply email directly view github", "d": "11/2013"}, {"body": "thank guys close", "d": "11/2013"}, {"body": "saved whole lot time", "d": "11/2013"}, {"body": "dealing regards autofocus form elements two possible routes query params involved model well something similar parallax scrolling scrolling skrollr library needs refreshed dom changes thought call time since fired first time approach nt work understanding bubbled therefore container view capture event execute callback nt case however may bubble nt bubble applicationview solution create skrollrview views needed parallax autofocus using within fix issue still fired initial load pretty sure supposed work binding straight raised error rerendering rendering nt found solution yet autofocus form element user transitions one set queryparams edit apologies hit space bar posted ready", "d": "11/2013"}, {"body": "anyone else happens want autofocus form field like search bar multiple routes pointing form different queryparams solutioni found simply trigger hook router hook gets fired every transition regardless whether view getting rerendered", "d": "11/2013"}, {"body": "clearing confusion didinsertelement bubble mutating dom focus within router great idea lukemelia suggests view component could observe controllermodel detect change another option track via boolean property controller userhasinteracted bind accordingly", "d": "11/2013"}, {"body": "stefanpenner figured nt bubble working pretty sure read tried finding link could nt going assume read something incorrectly per actually mutating dom particular use case user search toggle statistics setting stored queryparams well toggle form statistics amp search get path nav bar shortcut link issue caused user clicked search chose click statistics link statistics toggle search form would refocus transition wanted nice user experience", "d": "11/2013"}, {"body": "certainly seems like bug", "d": "11/2013"}, {"body": "wagenet todo capital letters triggering global lookup", "d": "11/2013"}, {"body": "stefanpenner yeah figured happen path chain begins capital letter though", "d": "11/2013"}, {"body": "wagenet problem view part path discarded path bound context view rather", "d": "11/2013"}, {"body": "update tests passing routerjs refactor", "d": "11/2013"}, {"body": "fwiw solution refire beforemodel hook", "d": "11/2013"}, {"body": "believe fixed updated two jsbins use handlebars seem working properly", "d": "11/2013"}, {"body": "asaf check problems still present ember beta particular feature flag enabled might knock problem perhaps", "d": "11/2013"}, {"body": "machty think variation work correct closing someone demonstrate fiddlejsbin failing master container renderables enabled reopen", "d": "11/2013"}, {"body": "global method approach bypasses dependency injection system legacy container friendly name version default resolves correctly injected see currently half way supporting globals supporting local approach local approach prevents coupling around surperior accomplishes loose coupling utilized di container system makes work injections theory work support global approach injections preference would continue transition entirely local loosely coupled system specific details loose coupling check clearly docs around currently lacking someone wants lend hand would pretty excited someone feels strongly issue reopened gladly", "d": "11/2013"}, {"body": "closing favor", "d": "11/2013"}, {"body": "stefanpenner ping", "d": "11/2013"}, {"body": "fixed part next container related refactor", "d": "11/2013"}, {"body": "hjdivad would prefer supporting maybe correctness selftrolling sadness likely avoid", "d": "11/2013"}, {"body": "stefanpenner hjdivad gon na second say avoid support", "d": "11/2013"}, {"body": "machty ping", "d": "11/2013"}, {"body": "craigteegarden pr mention hmm well naive approach assumed star segment would last segment case shown routerjs readme affect pr", "d": "11/2013"}, {"body": "submitted original pr assuming star segment last segment realized star segment could middle updated pr correctly handles star segments middle end", "d": "11/2013"}, {"body": "following pr onceif merged sync ember", "d": "11/2013"}, {"body": "great thanks", "d": "11/2013"}, {"body": "related question someone else brought whether query param portion url passed kind leaning toward idea nonquery param portion path normalized ie remove slash query params seems bad parsing query params also passing unformatted string param seems extra bad specialcasing detection whether slash removed thoughts", "d": "11/2013"}, {"body": "closing due inactivity rlivsey still issue let us know", "d": "11/2013"}, {"body": "closing favor pr", "d": "11/2013"}, {"body": "lastobelus think big concern memory leaks", "d": "11/2013"}, {"body": "machty ping", "d": "11/2013"}, {"body": "status corner cases parameter preservation nt properly handled taken stab times quite tricky perhaps needs mini refactor handle issues mentioned elsewhere particular think need embrace concept transitions routers somewhat similar haverepresent route hierachies router represents hierarchies routes fully entered fully active transitions represent hierarchies routes intended entered unify concepts likely better handle corner cases parameter preservation oldnewactive transitions otherwise think code getting little hand sorry delay like start refactor shortly need talk folk see right trick wan na", "d": "11/2013"}, {"body": "link provided broken ember master seems fixed thought going fixed routerjs refactor stuff seems like already fixed", "d": "11/2013"}, {"body": "stefanpenner johnkpaul guys make progress", "d": "11/2013"}, {"body": "johnkpaul keeps standing attractive pairing partners", "d": "11/2013"}, {"body": "believe encountered issue using emberarraycontroller lookupitemcontroller embercollectionview createchildview overwritten issue illustrated example included modified version emberjs following fix applied per johnkpaul bug fix additional change controller javascript file emberjspackagesemberviewslibviewscollectionviewjs line var attrs content item contentindex idx emberhandlebars instanceof emberhandlebarseachview attrscontext item needed data show attrscontroller item additional change needed controller actions work view thiscreatechildview itemviewclass attrs guess code somewhere else still pretty new ember hope helps", "d": "11/2013"}, {"body": "latest wrote", "d": "11/2013"}, {"body": "say pretty confidently entirely cease issue routerjs refactor", "d": "11/2013"}, {"body": "issue tripped awhile might suggest amending guides call behavior clearly since nt apparent view objects effectively wrapped templates html elements needed specified div nt appropriate table context seemed tagname element optional contexts way wrap template convenience sake fwiw div default behavior nt appear mentioned latter half customizing view element section", "d": "11/2013"}, {"body": "hajee status", "d": "11/2013"}, {"body": "able recreate symptoms test", "d": "11/2013"}, {"body": "hajee still seeing problem", "d": "11/2013"}, {"body": "changed test setup", "d": "11/2013"}, {"body": "alexspeller going assume fixed let know", "d": "11/2013"}, {"body": "although entirely obvious would argue correct desired behavior machty suggested context actually controller helper binds controller controller change binding also wont change although might surprising without feature swapping controllers model would cause entire view hierarchies torn rerendered quite wasteful forfeits core kvo value proposition example navigating general case tear entire view hierarchy rather update bindings changed infact want helper update model changes bind bind rather see", "d": "11/2013"}, {"body": "stefanpenner fence normalize provided path unwrapping points href update model changes binding parity existing behavior unwraps try pass param eg clicking would fire action model fire person controller little inconsistent actions unwrap models bindings case bound helpers nt also see point", "d": "11/2013"}, {"body": "still happening ember one notice retry failed transition actually works shows undefined params address bar", "d": "11/2013"}, {"body": "im assuming work land htmlbars", "d": "11/2013"}, {"body": "trek ping", "d": "11/2013"}, {"body": "one old really clear considerations anymore b docs would go think going close real issue comes docs would solved", "d": "11/2013"}, {"body": "machty ping", "d": "11/2013"}, {"body": "stefanpenner others still need hash related question whether router hooks take place promise land try flesh stef et al arrive conclusion issue", "d": "11/2013"}, {"body": "stefanpenner ping", "d": "11/2013"}, {"body": "wagenet think concerns long running flag fix u thoughts", "d": "11/2013"}, {"body": "stefanpenner lets discuss core team", "d": "11/2013"}, {"body": "wagenet wrap nicely whole naming proposal prepare monday related", "d": "11/2013"}, {"body": "machty ping", "d": "11/2013"}, {"body": "stefanpenner ping", "d": "11/2013"}, {"body": "wagenet resolver eak uses fixes correctly yehuda suggested since good solution make fixes existing system improve handle friends provide upgrade path eventually get people new less ambiguous resolver world provide proposal monday meeting", "d": "11/2013"}, {"body": "nt think change hit sorry", "d": "11/2013"}, {"body": "well ember components andor shadow dom ok instead cases", "d": "11/2013"}, {"body": "istefo trying resurrect closed issue anything could nt find better place ask animated transitions implemented boinx app look great specifically slidein animations used sidebar would love gain insight went accomplishing within ember routing system anything could show far actual code even high level explantion would awesome especially regarding actually hooking route transition process thanks", "d": "11/2013"}, {"body": "billdami istefo likely opening discourse post discuss linking would appropriate", "d": "11/2013"}, {"body": "timevans comments", "d": "11/2013"}, {"body": "wagenet sorry responded nt want actually wire ux logic onto model case nt want create blank email address phone number etc showing model different context prefer putting logic controller ux logic multiline edit mode preexisting items show uncommited blank one otherwise show records asis", "d": "11/2013"}, {"body": "handled logic like route existing data entering route add placeholder one exiting route placeholder nt saved remove", "d": "11/2013"}, {"body": "rlivsey nt exactly logic use user tries delete objects always shows placeholder", "d": "11/2013"}, {"body": "news directions", "d": "11/2013"}, {"body": "although improving ember provides important many usecases would benefit intelligent custom solution", "d": "11/2013"}, {"body": "using right think nice cooperate little bit folks addepar integrate tightly maybe rename current implementation emberslowselect", "d": "11/2013"}, {"body": "korczis seems integrate well concerns", "d": "11/2013"}, {"body": "concern nice ambitious web framework llike ember integrated imagine newbie new ember need select component plays nicely ember find emberselect ps really love addepar think basic component like select performing better current emberselect", "d": "11/2013"}, {"body": "improving ember native select roadmap absorbing great party library like addepar select makes little sense ember kitchen sink", "d": "11/2013"}, {"body": "think pretty locked may changed specific issue lets open new ticket", "d": "11/2013"}, {"body": "closing since inactive", "d": "11/2013"}, {"body": "seems like worthwhile thing leaving ticket open nt seem helping htmlbars think matter less", "d": "11/2013"}, {"body": "hey guys got caught problem workaround help appreciated", "d": "11/2013"}, {"body": "closing since convenience bug someone wants something pr would great", "d": "11/2013"}, {"body": "closing due inactivity someone still concerns please open new issue", "d": "11/2013"}, {"body": "iamjstates still issues yes could try using instead retain stackoverflow response want precisely template compilation browser btw emberjs starter kit include full handlebars script html regards", "d": "11/2013"}, {"body": "closing due inactivity still need someone wants tackle please send pr", "d": "11/2013"}, {"body": "closing due inactivity still issue please open new ticket", "d": "11/2013"}, {"body": "wagenet nt use separate container sub container life cycle pining proved serious blocker entirely transparently likely revisit also unless im something wrong jsfiddle works fine latest release problem seems resolved", "d": "11/2013"}, {"body": "closing since inactive may even issue", "d": "11/2013"}, {"body": "closing due inactivity", "d": "11/2013"}, {"body": "documented working would great add obviously difficult high enough priority someone wants work happy review pr", "d": "11/2013"}]