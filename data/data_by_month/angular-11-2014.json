[{"title": "invoking parser empty string creates ast chain", "body": "chains watchable reproduces using", "num": "252", "d": "11/2014"}, {"title": "need specify componentservices directive", "body": "taking look hello world example repo wondering hellocmp needs line needed inject greetingservice hellocmp constructor thought type annotation constructor would enough inject service thanks", "num": "249", "d": "11/2014"}, {"title": "number num transpiler work default arguments", "body": "attempting transpile fails nt transpile", "num": "248", "d": "11/2014"}, {"title": "bug callback specified onload attribute nginclude nt invoke", "body": "includecontentloaded event fires expected handler declared via onload attribute nt work see plnkr bug repro expected two alerts one event amp one attribute actual one alert event", "num": "244", "d": "11/2014"}, {"title": "rttsassert object accept stringnumberbool", "body": "passing stringnumberbool type valid even though check ts", "num": "243", "d": "11/2014"}, {"title": "rttsassert stringnumberboolean throw", "body": "confusing nt think real use case treat ie end codebase good", "num": "242", "d": "11/2014"}, {"title": "issue source map", "body": "order debug code add statement code execute karma debug mode via intellijwebstorm code stops statement expected sync source code seem get lost couple steps ultimately keep stepping code get error load idea could go wrong cc vojtajina", "num": "240", "d": "11/2014"}, {"title": "compiler take templateroot", "body": "compile method give component take templaterootelement believe left thinking template come inline case needs fixed pave way webworkers", "num": "233", "d": "11/2014"}, {"title": "providedecorator extend directive scope longer works", "body": "using directive isolated scope would like expose additional member bind value parent scope since directive third party would like without modifying original code angular used able decorate existing directive new twoway binding javascript appconfig function provide providedecorator mycustomdirective delegate controller function delegate controller however angular extending scope way longer seems work evident simplified plunkr changing script tag breaks behavior seems properties directive still modified using providedecorator scope particular longer seems get updated bug changed angular cause specific behavior recommended way extending scope existing directive isolated scope", "num": "231", "d": "11/2014"}, {"title": "angular find components", "body": "may right place ask question wondering someone help understand angular find modules needs example class annotated component module angular know import module would angular app need import modules using register angular would need something like register base components router angular walk dependency tree using directives annotations reason ask playing around idea creating adapter library take angular style directives register angular app stuck find directives modules thanks", "num": "230", "d": "11/2014"}, {"title": "ngstyle nt work minification", "body": "icon element defined like directive minification works perfect see computed inline style added inspect element minification using ngannotate requirejs inline style never gets added still prints fine directive also gets right path right use workaround get things work", "num": "228", "d": "11/2014"}, {"title": "injectable services component lightdom shadowdom optionally accept function", "body": "dart requires annotations compiletime constants thus use list literals injectable services however static function assigned services call compiler use returned list bindings injector", "num": "226", "d": "11/2014"}, {"title": "move createrootprotoview protoview compiler", "body": "discussed tbosch compiler make better reuse router", "num": "224", "d": "11/2014"}, {"title": "add tostring representation injector tokens", "body": "tokens used bootstrapping tostring method injection fails error messages cryptic", "num": "223", "d": "11/2014"}, {"title": "generate examples indexhtml main dart js one template", "body": "", "num": "222", "d": "11/2014"}, {"title": "documentation", "body": "settings cache see mentioning cache section doc doc http say set says need mention property defaults section want make sure following valid", "num": "219", "d": "11/2014"}, {"title": "refactor reflection production", "body": "eg make compiler benchmarks realistic add general reflector delete probably need add utility functions di present direflector utilities written atscript jsdart specific implementations singleton injected via di js version already include caching dart production version needs replace whole file provide different implementation otherwise mirrors would still used loading original file helper method di relies singleton would otherwise hard use example dart production version getters name obj gt objname age obj gt objage methods methodname obj args gt funcionwrapperapply objmethodname args factories service b gt new service b parameters service myfactory annotations service myfactory", "num": "216", "d": "11/2014"}, {"title": "use flexible views", "body": "reading lot seem miss something least nt see current state lets say feature application quite simple needs couple different viewstemplates show data represented bit different easy nginclude template done created small demo show mean data different views pagination kind thing viable option would look mean best code code nt write need code create version nt see option without writing fair amount code miss something obvious edit updated link right plunker", "num": "215", "d": "11/2014"}, {"title": "questions amp roadmap change detection", "body": "vsavkin amp mhevery things like discuss change detection trying catch vacations best probably edit text instead adding replies record disabled onoff move bit field implemented shallow watch watch collections vicb todo setcontext set context records evaluate context implicitreceiver watch group vsavkin rationale markers removed required mark insertion spot child groups without removing group require processing need recursively scan child groups remove previously removing matter getting first last records unlink portion ideas currently tailrecord include child groups group needs removed look last children tail record remove child groups together parent group possible add record group created tail record could move end child groups retrieving last tail record including child group possible group watch still needs marker records child group could record need inserted right place currently maintain head tail markers groups tail marker probably needs created root group child groups able reuse marker groups misc create protorecordcreator fn call use tmp array rather field protorecord memory gc destinationrecord used instantiation time kept protodest vicb also used context mark records fresh reuse", "num": "210", "d": "11/2014"}, {"title": "repo angular", "body": "", "num": "208", "d": "11/2014"}, {"title": "integrate zones angular", "body": "", "num": "204", "d": "11/2014"}, {"title": "ngresource response headers problem", "body": "trying use responseheaders resource jut returning response headers returning api returning", "num": "200", "d": "11/2014"}, {"title": "atscript macros traceur", "body": "kristianmandrup raised using macros instead atscript seen second biggest issue devs syntax atscript use macros bring functionality would provided atscript types annotations surely would best limitations macros atscript overcomes alternatiely traceur already types annotations experimental features something could leverage", "num": "199", "d": "11/2014"}, {"title": "build hello world example", "body": "contain index html bootstrapping component property component template contain", "num": "192", "d": "11/2014"}, {"title": "asyncvalidators destroys bound data value", "body": "promise rejected angular sets data bound property effectively destroys previously valid value property seems wrong curious intended behavior like know could possibly justify permanently erasing model property value written plunker illustrate behavior readme explains behavior greater detail elaborates dangers feature highly recommend avoiding behavior fixed", "num": "191", "d": "11/2014"}, {"title": "text interpolation fixed string end work", "body": "eg", "num": "190", "d": "11/2014"}, {"title": "compiling inline templates throws", "body": "decorator selector decorator class decorator component template new templateconfig inline blah directives decorator class root compiling throws looks like returns template element instead content see elements class", "num": "189", "d": "11/2014"}, {"title": "animations nt work element added animateenter vs elementappend angular", "body": "written directive appends child directives append child using everything works expected however append child using animations child work mean esque classes never added issue occur angular tried failed make minimal test case includes broad functionality parent template compiling template adding element child template showinghiding text link clicked currently works expected regardless whether used suggestions could look source problem", "num": "187", "d": "11/2014"}, {"title": "formcontroller setpristine nt clear submitted", "body": "appears calling setpristine formcontroller clear submitted property ngsubmitted class form tag plunker demo problematic code", "num": "184", "d": "11/2014"}, {"title": "transform indexhtml", "body": "use template flags dartjs variable files remove tags leave maindart auto create well", "num": "181", "d": "11/2014"}, {"title": "auto refresh chromium st changed", "body": "", "num": "180", "d": "11/2014"}, {"title": "auto start chromium start serving", "body": "", "num": "179", "d": "11/2014"}, {"title": "nested ngform trigger submitted parent form submitted", "body": "", "num": "178", "d": "11/2014"}, {"title": "set performance ci server", "body": "create jenkins instance local workstation run full suite performance benchmarks every commit master results reported external server basic ui tracking performance progress component time pending changes benchpress runner creation benchmarks project", "num": "176", "d": "11/2014"}, {"title": "old issues go", "body": "guys delete repo make new one", "num": "175", "d": "11/2014"}, {"title": "named arguments annotations transpiled dart correctly", "body": "transpiler already converts dart however nt annotations like", "num": "169", "d": "11/2014"}, {"title": "http arbitrary overriding headers based case", "body": "hi using angular angularroute angularresource version experiencing strange behaviour trying override common headers override header example must write exactly like wo nt neither get really strange comes type like wo nt overriden order make work must use either behaviour observed using means could override two also header using", "num": "166", "d": "11/2014"}, {"title": "typeerror read property compiler undefined", "body": "error build angular use win dart sdk message run gulp build using gulpfile repoangulargulpfilejs starting build starting jsruntimebuild starting modulesbuilddartsrc starting modulesbuilddartpubspec starting modulesbuilddevjs error transpiling repoangularmodulescoresrccorejs throw errors typeerror read property compiler undefined objectcompile destroyabletransformtransform repoangulartoolstranspilergulptr destroyabletransformtransformread repoangularnodemodulesthroug destroyabletransformtransformwrite repoangularnodemodulesthrou dowrite writeorbuffer destroyabletransformwritablewrite repoangularnodemodulesthrough write flow transformpipeonreadable framework issue environment issue thx", "num": "163", "d": "11/2014"}, {"title": "filter stack frames rttsassert", "body": "", "num": "162", "d": "11/2014"}, {"title": "karma stack traces external source maps", "body": "using webstorm atscript watcher karma needs consume source maps external files", "num": "159", "d": "11/2014"}, {"title": "build angular sample app streams", "body": "build stock ticker example application angular covers following use cases incorporates streams realtime data like stock ticker one state takes simple stream another state aggregates many streams one stream streams able asynchronously express ready application stream ready soon first piece data emulates connection errors clientserver incorporate userfriendly messaging ui bad connections aggregate streams single data source multiple views using shared connectionssubscriptionsstreams jeffbcross blesh collaborate idea illustrate common use cases awkward unclear angular find ways make clearer angular", "num": "157", "d": "11/2014"}, {"title": "installed ngvalue stopped working", "body": "try avoid dropdown controls nt big hit go change ngvalue objvalue options value objvalue nt dug much variables ngvalue value directive died", "num": "156", "d": "11/2014"}, {"title": "allow usage jscs atscript", "body": "forked changed correctly parse atscript source evaluate configurable style constraints esprima currently parse atscript tokens function arguments annotations", "num": "153", "d": "11/2014"}, {"title": "changedetection detect changes map", "body": "", "num": "151", "d": "11/2014"}, {"title": "support methods closures changedetection", "body": "add support methods invoked every time closure invoked every time pure functions invoked changes", "num": "150", "d": "11/2014"}, {"title": "hook changedection parser ast", "body": "produces compiled code needs used method build", "num": "149", "d": "11/2014"}, {"title": "implement view nesting", "body": "x x form tree easily traversed see treenode x adding needs link together well tree see treenode perhaps needed refactored reusable superclass needs keep track active destroyed available destroyed removed dom render tree animation still active hence yet reused x removing form unlink x tree x tree reset directive instances null x tree well", "num": "147", "d": "11/2014"}, {"title": "better error referencing class defined", "body": "typescript class child extends parent class parent", "num": "146", "d": "11/2014"}, {"title": "better error importing nonexisting module", "body": "also module trying import", "num": "145", "d": "11/2014"}, {"title": "better error importing nondefined symbol", "body": "exists export", "num": "144", "d": "11/2014"}, {"title": "improve sourcemaps usability", "body": "issue capture things could improved sourcemaps chrome dev tools", "num": "143", "d": "11/2014"}, {"title": "performancefirst research", "body": "determine tools resources practices encouraged usersdevelopers angular make performance frontofmind consideration building angular core building apps angular", "num": "142", "d": "11/2014"}, {"title": "implement application class bootstrapping", "body": "", "num": "140", "d": "11/2014"}, {"title": "scope eval empty string keys", "body": "produce result see", "num": "139", "d": "11/2014"}, {"title": "rename js files ats atscript files", "body": "", "num": "138", "d": "11/2014"}, {"body": "looks like one wondering one innocent line code see discussion understand inject services local given file without exposing di container thus potentially rest application understand reasoning feel like creating different ways getting services component kind injection systems guess nt great since wanted avoid dual tripple injection systems present people find confusing see issue comments mentioned commit would really great explore options would love help soon better understand motivation", "d": "11/2014"}, {"body": "pkozlowskiopensource thanks linking discussion still hard time wrapping head around understanding maybe rkirov correct wrong parent component child component inject service share instance service unless child component lists would happen two sibling components inject service neither specify would share instance service would depend whether parent component injects service", "d": "11/2014"}, {"body": "two different injectors app level injector familiar angular element level injector two turns angulardart built system one injector work well issue normal injector understand concepts inject direct parent inject parent inject list children hide injection light dom expose shadow dom tried teach regular injector concepts became mess end decided generic injector specialize injector better way forward actually three ways register object injection componentservices lightdomservices shadowdomservices component services normal services used configure app level injector item inserted used child directive one easy understand times want component expose service children example element expose interface use register far good component service could let look happens components shadow dom shadowroot purpose shadow dom encapsulation shadow root able see parent light dom achieved component services since app level injector understand visibilityencapsulation requirement paints need light dom services light dom services shadow dom services flip side thing need symmetry case wish create default services inject want override children light dom ok light shadow dom services two parts make tho whole ca nt git rid component services unfortunately lazy load code application code needs loaded injector independent dom structure summary component services app level services dom independent fully recursive meaning component matter deeply nested inside components get services injected light dom services limited current template light dom component used communicating children shadow dom services limited shadow dom component used set environment component private implementation details", "d": "11/2014"}, {"body": "pkozlowskiopensource want make sure saw response realized commented sha responded pr anyways thread better place discuss new injection system point relevant thread", "d": "11/2014"}, {"body": "mhevery rkirov thanks descriptions much better high level understanding new injector capable angular lot question details use rather taking lot time wait examples published first thanks", "d": "11/2014"}, {"body": "rkirov yes saw response thank make sure understand correctly let rephrase saying however instead services basically global per application angular scope overloaded term warning services particular component service available component constructor constructor subdecoratators components rest application could conceptually equivalent creating child injector registering services listed child injector telling component use child injector", "d": "11/2014"}, {"body": "mhevery thank details nt aware quick read separating domlinked injector regular service injector makes sense need digest details probably come back question input provided much appreciated thank", "d": "11/2014"}, {"body": "pkozlowskiopensource yes got also note mechanism need configure global application injector new bootstrapping process asks point toplevel component like example", "d": "11/2014"}, {"body": "rkirov ok great glad right track one last question regarding topic saying wo nt need configure global service injector fine question would going able configure one mean want set services global application wide able express guess asking make sure", "d": "11/2014"}, {"body": "components hierarchical think root component global injector service configured per application time thu nov pawel kozlowski notifications githubcom wrote rkirov ok great glad right track one last question regarding topic saying wo nt need configure global service injector fine question would going able configure one mean want set services global application wide able express guess asking make sure reply email directly view github", "d": "11/2014"}, {"body": "mhevery rkirov thnx perfectly clear terms concepts still questions regarding details get reading code concepts clear head thnx taking time answer questions", "d": "11/2014"}, {"body": "could also get global singleton service angular style service nt specify component example ever refer service constructor type annotations throw error service never configured", "d": "11/2014"}, {"body": "would error top level component would singletons angularjs sense thu nov rob notifications githubcom wrote could also get global singleton service angular style service nt specify component componentservices example ever refer service constructor type annotations throw error service never configured reply email directly view github", "d": "11/2014"}, {"body": "ah ok thanks", "d": "11/2014"}, {"body": "seeing bug version", "d": "11/2014"}, {"body": "wrong repo please move issue repo", "d": "11/2014"}, {"body": "oops sorry realized clicked submit", "d": "11/2014"}, {"body": "pls use angularjs repo one angular", "d": "11/2014"}, {"body": "wrong repo", "d": "11/2014"}, {"body": "wrong repo", "d": "11/2014"}, {"body": "yup otodockal right could move angularjs thnx", "d": "11/2014"}, {"body": "vsavkin fyi", "d": "11/2014"}, {"body": "adjust use manual created reflector get correct numbers dart version compiler", "d": "11/2014"}, {"body": "reasoning combining single class create coupling modules independent di make hard test nt see benefit injecting elaborate", "d": "11/2014"}, {"body": "mhevery single class prevent code duplication right well walk annotations class single class provides annotations write atscript code walk would eliminate duplication want add dart transformers need one class right classes separate concerns reflection directly coupled di compiler parser general mechanism want hide behind facade like abstract use di annotations directives want use write something like already analyze dependencies class need reflector nt access di chicken egg problem injecting reflector already need reflect upon let say create root injector want pass reflector binding like binding binding reflector would need provided via otherwise di would need reflect upon reflector di would need know bindings reflector needs analyze bindings would work made reflector special argument di cc vsavkin", "d": "11/2014"}, {"body": "tbosch let talk vc good idea couples things better ways achieve want", "d": "11/2014"}, {"body": "discussed vsavkin came plan would involve making reflection top level module would injected root injector wed nov pm tobias bosch notifications githubcom wrote mhevery single class prevent code duplication right direflector well corereflector walk annotations class single class provides annotations write atscript code walk would eliminate duplication want add dart transformers need one class right classes direflector corereflector changedetectionparserclosuremap separate concerns reflection directly coupled di compiler parser general mechanism want hide behind facade like abstract lists maps use di annotations directives want use write something like decoratordirective lightdomservices bind myservice tovalue bind myservice already analyze dependencies class need reflector nt access di chicken egg problem injecting reflector already need reflect upon let say create root injector want pass reflector binding like binding binding reflector would need provided via tofactory tovalue otherwise di would need reflect upon reflector di would need know bindings reflector needs analyze bindings would work made reflector special argument di cc vsavkin reply email directly view github", "d": "11/2014"}, {"body": "angular think would move controller logic service create directive view code since creating directives much easier nt think lot code think correct current proposal angular anything like rob eisenberg points post", "d": "11/2014"}, {"body": "robianmcd know ngcontroller sample used ngcontroller mistake updated plunk use directive makes difference issue", "d": "11/2014"}, {"body": "yes", "d": "11/2014"}, {"body": "seeing headers network tab devtools api domain main site requested protocol port", "d": "11/2014"}, {"body": "seeing headers network tab running domain api domain working locally angular think problem", "d": "11/2014"}, {"body": "btw api cors configured", "d": "11/2014"}, {"body": "might want add server actually carefully selected list", "d": "11/2014"}, {"body": "thanks caitp gon na try", "d": "11/2014"}, {"body": "great also wrong repository sort issue still trouble please reopen", "d": "11/2014"}, {"body": "ok sorry", "d": "11/2014"}, {"body": "would pretty easy leverage di injections annotations types using sweetjs macros need include new modules find part also quite possible experiences macro developer yet macro convert angular class angular module correct type complete old injection syntax even minification macros super powerful especially new readtables feature let anything imagine good luck ps angular made jump mercury looking back wish best angular pretty sure next version angular radically different hardly make sense call angular angular horse like spaceship imagine p", "d": "11/2014"}, {"body": "found traceur supports atscript option convenience option turning experimental features needed atscript guess answer alternatively yes angular leverage traceur", "d": "11/2014"}, {"body": "watched awesome presentation sweetjs believe could full roundtrip compilation angular syntax proposed atscript syntax using sweetjs macros would theory allow traverse current project find angular modules various types factories directives compile atscript equivalent could continue coding atscript time compile back old angular script run angular know pretty whacky idea hey dare try fex start annotation injection syntax might try whenif time", "d": "11/2014"}, {"body": "perhaps would possible prepare angular code atscript today js var anevent name type var keys objectkeys type var propname keys var proptype type propname propname proptype annotate new event name proposed annotation syntax atscript foofn function annotate new event foo event foo foofn function inside angular module anevent foo foofn function bind", "d": "11/2014"}, {"body": "current release sweetjs supports syntax output eg everything working class example basically cherry picked esprima harmony branch soon available well turning atscript syntax statements js macro case gt var val unwrapsyntax letstx val makeident val return angular val module gt angularmodule js macro toupper case x gt grab syntax object var stx x get string value var val unwrapsyntax stx upper case var valupper val touppercase valslice use sugarjs classify similar turn class name make new syntax object based old one return makeident valupper stx toupper foo expands foo next step", "d": "11/2014"}, {"body": "already using traceur worried syntax sweetjs also discovery traceur transpiler used atscript makes sense feeling much better atscript means nt run source another transpiler need turn options traceur hindsight think mistake label atscript many devs got feeling learn another flavor javascript fact couple nonstandard features could come single term annotations really nothing types think proposed anyway scary class method annotations bit difficult grasp probably comes lack documentation least nt able find many useful examples use may marketing political reasons labelling atscript think would spook fewer developers sold annotations currently lot research best structure new projects migration path whatever may easier based know angular things make transition easier using jqlite reducing dependency still need certain things like etc still need use move lot use spend time traceur annotations could probably figure get rid ddo well would cover rip items ngeurope talk think good start", "d": "11/2014"}, {"body": "think would nice use atscript combination flow goal flow find errors javascript code little programmer effort flow relies heavily type inference find type errors even program annotated precisely tracks types variables flow program time flow gradual type system parts program dynamic nature easily bypass type checker mix statically typed code dynamic code flow also supports highly expressive type language flow types express much finegrained distinctions traditional type systems example flow helps catch errors involving null unlike type systems", "d": "11/2014"}, {"body": "landed", "d": "11/2014"}, {"body": "appears submitted wrong repository reentered issue angularjs repo", "d": "11/2014"}, {"body": "solved", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "wrong repo repost issue repo angular", "d": "11/2014"}, {"body": "oops sorry", "d": "11/2014"}, {"body": "claycephas issue go", "d": "11/2014"}, {"body": "guess wanted open issue angularjs remember provide minimal live reproduce scenario", "d": "11/2014"}, {"body": "think looking angularangular new prototype repository next major version", "d": "11/2014"}, {"body": "caitp ah thanks angular repo dart js", "d": "11/2014"}, {"body": "trusktr one angular written atscript transpiled js dart", "d": "11/2014"}, {"body": "otodockal actually", "d": "11/2014"}, {"body": "interesting joepea nov pm georgios kalpakas notifications githubcom wrote otodockal actually reply email directly view github", "d": "11/2014"}, {"body": "phcoliveira guess talking problem angularjs proper repository please open issue mentioned repository providing minimal live reproduce scenario using similar tool would allow us see code action thnx", "d": "11/2014"}, {"body": "stacktrace reminds happening pr since pr nt issue anymore please try updating repo launching new build", "d": "11/2014"}, {"body": "hmm solved ran gulp clean said module rsvp found installed manually reclean build works fine build successfully thanks mlaval", "d": "11/2014"}, {"body": "brianminister think wanted open issue repo please provide info ideally live reproduce scenario using plunker similar otherwise little chance going get meaningful help", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "vsavkin done close issue", "d": "11/2014"}, {"body": "differentiate closure pure function also pure function also closure afaik", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "alxandr know certain things pure functions eg binary operations write b actually gets compiled something like pure function also provide way annotate code indicate functions pure", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "covered first half items list", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "probably bad repository", "d": "11/2014"}, {"body": "yeh wrong repo please open", "d": "11/2014"}, {"body": "vsavkin current thinking go generate dummy class interface try cast whatever means javascript benefit iife could contain rtti downside typescript compiler would implement would rtti classes explicitly implemented interface know would classgetinterfaces type syntax already supported actual action item think already support nt think anything", "d": "11/2014"}, {"body": "unit test could look", "d": "11/2014"}, {"body": "pavelsavara register implementation interface injected using syntax sugar unit tests look", "d": "11/2014"}, {"body": "closing since believe covered", "d": "11/2014"}, {"body": "akircher think would look less expression parser would give function tries fetch iterator eg js could easily iterate item collection name iterated value would also accessible returned value easy way populate scope would even possible helper functions angular would automatically insertremove html elements automatically update scopes repeated children using tools implementation ngrepeat could turned something like lines easily implemented extended third party code generic work would handled framework getting iterators iterating updating scopes etc basically getting expression looks like would return iterator getter would something like use js extends syntax expression language include concept iterators would bindable", "d": "11/2014"}, {"body": "last comment jamm made think easy understand able wrap braces create valid js object work feels right", "d": "11/2014"}, {"body": "json array provides dropdown user selection via ngdropdowns upon selection need use json value route new ngview nt solved realize ngroute logical operation expects anchor tag view element violates separation function words logic routing currently depends view element construct new router use defined string character however wherever presented", "d": "11/2014"}, {"body": "one thing semicolon object fardelian propose microsyntax eliminate problem collision directives attributes example directives expect attribute src element want give different meanings src example angularjs valid code src attributes semicolonobject microsyntax code valid directive values inside isolated declaration", "d": "11/2014"}, {"body": "mhevery said angular framework html compiler angular used html compiler angular html compiler users fine working jsx allow us use updated html syntax transpiling text based syntax everyone else nt like saying api starting look bad going route solve way solved diannotationstypes going language level change looking new proposals compared original vision clear original idea right lot flexible remember original vision angular angular allows use future web web components today really like vision angular since still holding values beliefs others understand using new tools language extensions needs clear path could almost suggest using release bridge gap would give everyone opportunity introduce new concepts learn atscript hand whole year teach people concepts better prepare everyone future", "d": "11/2014"}, {"body": "really like jamm semi colonobject syntax clear easy understand humans parsers read instantly know even never done angular yet verbose also really easy extend took example ngrepeat familiar asks one special property item media box example see subtitles would need special properties enabled src nt see syntax would allow us", "d": "11/2014"}, {"body": "please keep syntax simple selfexplaining colonandsemicolonsyntax looks eerie many programming languages adopted loops like x want get rid common standard ngrepeat sure better ways distinguish loop ordinary string without using syntax hard understand ng prefix please nt use colon jsf uses colons consequence make impossible use angularjs jsf application", "d": "11/2014"}, {"body": "stephanrauh ng escaping looks sexy think problem use ng x nt agree write code loops inside html stay declarative", "d": "11/2014"}, {"body": "x nt agree write code loops inside html stay declarative late mind ngrepeat loop way suggest make ngrepeat ngif proper tags one angularjs design documents read states directive look bit odd reside tag control visibility tag agree like proposal", "d": "11/2014"}, {"body": "like stephanrauh proposal", "d": "11/2014"}, {"body": "goal change keep right side valid expression dalcib syntax would defeat purpose", "d": "11/2014"}, {"body": "pondering onewaybinding vs twowaybinding onlyoncebinding angulardart uses annotation corresponding attribute dart class atscript adds annotations angularjs equation would nt better use annotations instead adding cryptic symbols attribute name proposed value instead writing would write using following component hint copied snippet component angularprimedart project dart code atscript dart class puidatatablecomponent ngtwoway value list mylist ngattr initialsort string initialsort", "d": "11/2014"}, {"body": "stephanrauh could used provide default directionality property however use cases needing override binding expression proposal default properties oneway allow annotation like specify default actually two way add binding options would allow override deviation normal required", "d": "11/2014"}, {"body": "dalcib something like syntax works polymer polymer supports much simpler expression syntax however present angular expression syntax allows literal arrays parenthetical expressions result possible tell whether intended part actual expression identify", "d": "11/2014"}, {"body": "thinking overnight believe bigger problem current syntax allows web components consumers set property based already declared variable given consume already created event however current syntax nt allow web components declare new variable scope trigger new event propose create two generic prefixes one means publish variable one means trigger event get conversation started say name publish trigger publish complementopposite bind trigger complementopposite ngrepeat would result think may also solve oneway vs two way binding syntax making explicit", "d": "11/2014"}, {"body": "everything caitp saying really think needs community involvement personally flipping entire framework upside huge breaking changes two cents", "d": "11/2014"}, {"body": "use razor like syntax aspnet something near html item mean alot technologies somehow help get idea", "d": "11/2014"}, {"body": "attributes valid either asp use server side interpreted reaches client", "d": "11/2014"}, {"body": "suggestions ngrepeat item items html item html item binding two way html item one way view gt component html item one way component gt view html item event html item", "d": "11/2014"}, {"body": "ocombe angular interpretes dom presenting btw point answer razor", "d": "11/2014"}, {"body": "angular interpret dom initial web page navigator include js file end page loads template include page create based directives", "d": "11/2014"}, {"body": "valid attribute html item", "d": "11/2014"}, {"body": "actually valid least xml probably nt want since would break svg xhtml documents leading breaks qualified names", "d": "11/2014"}, {"body": "know verbose like rkirov canonical syntax proposal hand think shorthand syntax good would go gets transformed", "d": "11/2014"}, {"body": "anyways still proiterator bindings idea sounds really cool really reusable destroys microsyntax html paragraph grammar like", "d": "11/2014"}, {"body": "hesitant criticize proposed new syntax probably nt understand rationale would help probably others greatly answers fillin blank statements attribute names start ng bad click doit better ngclick doit repeatperson people better ngrepeat person people", "d": "11/2014"}, {"body": "attribute names start ng bad nt really problem feeling bit verbose click doit better ngclick doit idea want clear tools developers attribute value expression evaluated reason becomes clear find many issues angularjs confusing vs vs without clear marker confuses people hard tools like ides repeatperson people better ngrepeat person people idea make binding identifier totally separate expression thus making easier tools idea playing works around pretty elegant way think much better solution crap crap absolute unadulterated crap encoding identifier attribute", "d": "11/2014"}, {"body": "attribute names start ng bad idea differentiate property bindings directive bindings wo nt need make directive bind properties value checked else angular click doit better ngclick doit important point able differentiate propertydirective bindings event bindings event bindings oneway propertydirective bindings twoway need click syntax proposal problem angular unable know easily least directive event binding one twoway also needs know event binding able throw event function also things event delegation repeatperson people better ngrepeat person people better first case right side people valid expression old syntax angular parse string extract microsyntax regex could find expression", "d": "11/2014"}, {"body": "repeatperson people better ngrepeat person people better first case right side people valid expression old syntax angular parse string extract microsyntax regex could find expression syntax angular would still parse microsyntax albeit simpler one", "d": "11/2014"}, {"body": "general thoughts like share coming practical world one thing concerned announced syntax templating ngeurope nonstandard htmllike syntax one reason know many developers went angular framework use pure html templates onboarding new developers became lot easier feature speaking personal experience new developer assisting many developers templating language nonstandard ie already supported browser one introduce build tools set templates usage separate problem using atscript increases complexity able run angular major complaint backbone views ember react becomes harder new developers get web application development introduces complexity anyone attempting learn angular say switching backbone angular type overhead feel angular avoiding design subtle problem also one wants migrate angular reason future using standard html makes css difficult reason something problem every major framework except angular trust team arrive good consensus let process play feel worthwhile point take consideration possible", "d": "11/2014"}, {"body": "stephanrauh sated tag something like inconvenience see additional nesting repeated markup see use case attribute", "d": "11/2014"}, {"body": "angular decorators elements otherwise declare css selectors create something like instead one coupling second chrome browser element ngrepeat unrecognized element wrapping element ngrepeat affect css layouts even declare somewhere core angular code prevent unpredictable default styling designers forced learn remember good", "d": "11/2014"}, {"body": "jamm always depends implementation repeat content element content would issue", "d": "11/2014"}, {"body": "lgalfaso idea render elements structure declared source html even worse like jquery plugins elements change dom structure render something interesting default element leads unpredictable dom changes impossible work select observe affected sure nt want cooperate tools webcomponents example", "d": "11/2014"}, {"body": "jamm suggesting make repeat content trying pull conversation back syntax please take comment syntax defined directive behaves another discussion css sideeffect syntax remain independent", "d": "11/2014"}, {"body": "lgalfaso want css sideeffects sideeffects proposed syntax ca nt independent", "d": "11/2014"}, {"body": "angular user iterator bindings arguments", "d": "11/2014"}, {"body": "yet think would much like get people talking particular bikeshed gets momentum behind", "d": "11/2014"}, {"body": "available right", "d": "11/2014"}, {"body": "sheerun simply proposed functionality mind caitp seems like even pretty much happened regarding whole iterator idea right nt even much traction sadly doubt chosen answer problem nt seen talk support angular devs", "d": "11/2014"}, {"body": "making sure get full picture plus like state important templating language compatible html use slim jade nt want next jsx", "d": "11/2014"}, {"body": "sheerun think prefer closer match js using iterators covers would better use grammar least matches js people would using easier understand happening get already would work better compatibility think much easier switch switch whatever throwing ideas around popular despite matching actually happening could probably instead want avoid two ways thing though", "d": "11/2014"}, {"body": "caitp iterator idea choose one would better right many breaking changes hardly make break change might well take opportunity match js syntax", "d": "11/2014"}, {"body": "regard would nt mind changing", "d": "11/2014"}, {"body": "users fine even looking jsx working developers including hate jsx similar anything else web", "d": "11/2014"}, {"body": "please", "d": "11/2014"}, {"body": "per two keywords would different functionalitymeanings reason wanting one", "d": "11/2014"}, {"body": "coffeescript background one arrays objects common find confuse one would much preferable two would best david souther sun nov pm akircher notifications githubcom wrote per two keywords would different functionalitymeanings reason wanting one reply email directly view github", "d": "11/2014"}, {"body": "semantics really dumb generally also nt want write full es parser imho", "d": "11/2014"}, {"body": "fair enough", "d": "11/2014"}, {"body": "caitp templating language compatible html use slim jade nt want next jsx sheerun", "d": "11/2014"}, {"body": "one thing nt seen discussed far makes think missing something obvious parts microsyntax eg microsyntaxes directives eg others emerge future either missing something please elaborate trying fulfill part actual requirements run difficulties road case without really thought implications idea understand correctly using separate attributes part microsyntax solves problems verbosity downside introducing new shorthand notation would equivalent even expanded basically using keyvalue pairs enclosed value attribute would equivalent even expanded string possibly expanding camelcase key strings spinalcase attribute suffixes must valid expression would work attribute eg fact would even allow grouping bound attributes together although primary intend eg following would also possible sure something understand would preprocessed compiletime would parsed already valid expressions even microsyntax one microsyntax rule situation one nt know typename attribute parse value determine expressions need parse plain js object extract values ides tooling nt find hard understand prefix even syntax examples still debatable needs way separate stringified plain js object attribute expandable object cool name needed one btw smiley", "d": "11/2014"}, {"body": "one thing bothers lack angular prefix proposed syntax angular needs play nicely frameworks framework would use attribute purposes think prefix like necessary interoperability remember attributes nt supposed prevent attribute name conflict future versions html adopted set attributes cool html feature yes highly unlikely hey completely impossible", "d": "11/2014"}, {"body": "gkalpak good idea see", "d": "11/2014"}, {"body": "regarding scandal syntax performance biggest issue think really need create template programmatically impossible come workaround especially enough specify attributes html template initially change create programmatically possible workaround case would benchmark bad slower comparing initial need create attributes js performance probably fixed kind caching like creating discovered attribute names angular app using precreated attribute nodes set attribute values syntax appears bigger issue attribute names valid html xml limits angular html even performant workaround exists requires additional precompile step added template engine", "d": "11/2014"}, {"body": "trying understand proposal caitp say html itembar expected generator function result calling iterator several times exposed thru name proposal", "d": "11/2014"}, {"body": "lgalfaso quite problem case would nt binding name use expression form would work wanted work also need another attribute get binding identifier nt really want", "d": "11/2014"}, {"body": "lgalfaso operator generates iterator issue see iterator would need name suddenly dealing something specific templates like object notation better strongly use two attributes", "d": "11/2014"}, {"body": "caitp ok directive microsyntax itemname generatorfunction annotation", "d": "11/2014"}, {"body": "fardelian understand several opinions subject moment trying cleanup different ideas summarize single place comparison", "d": "11/2014"}, {"body": "caitp ok directive ngrepeat microsyntax itemname generatorfunction annotation misunderstanding whole line discussion nt microsyntax instead extend expression parser support following syntax basically see identifier lookahead token advance twice parse expression result object name binding identifier getter evaluates expression returns iterator microsyntax makes parser syntax bigger", "d": "11/2014"}, {"body": "caitp thanks patience part fully understand existing parser able evaluate expression able know variables involved expression may change future idea completeness let know means proposal extend parser expressions form supported result operation object property identifier say string getter executed execute expression return equivalent correct", "d": "11/2014"}, {"body": "way imagining would like gt js class iterableexpression extends expression parser build syntax valid toplevel expression would nt make sense way convinced otherwise yeah constructor name expression thisname name thisexpression expression get iterator atscript assert produces actual iterator get iterator iterator return thisexpression helper produce arraylist iterator get collection array return arrayfrom thisiterator get name return thisname normal value getter expression implemented iterable expressions special case explicitly handled get value throw new typeerror implemented new iterableexpression item parse collection", "d": "11/2014"}, {"body": "caitp thanks think clear", "d": "11/2014"}, {"body": "case anyone curious explains syntax changes ember like eisenbergeffect proposal defaulting oneway data binding", "d": "11/2014"}, {"body": "gkalpak hashbased expanding shorthand syntax always using prefix properties meant parsed angular introducing iterators expression syntax oneway binding default confuse bindonce default agree vlazar conflict frameworks think could use prefix oneway binding prefix twoway binding prefix binding events", "d": "11/2014"}, {"body": "caitp disagree prefix think might confusing bem css syntax block blockelement block modifier prefer prefix value attribute maybe missing something avoid conflict frameworks prefix bad smiley", "d": "11/2014"}, {"body": "know taking risk sounding like coming back obvious things would like better understand current state proposal normal bindings seem number competing proposals clear proposals still table tradeoffs assuming got web component attribute associated property setter proposals table understanding one feasible appreciated community large table seems proposal nt suffer identified technical issues perceived verbose seems like eisenbergeffect sees like possible alternative downside attributes bindings would removed template dom debug info potentially added instantiated dom something else proposal table least partially correct seems remaining proposals nt work proposals things left would love better understand problems associated apart identified debug info need domrewriting looks like discussed igorminar eisenbergeffect guys notes discussion basically trying understand viable option maybe thing got table right", "d": "11/2014"}, {"body": "item nt really work ca nt annotate contents attribute decide interpret creates stupid scenario need able escape annotations becomes mess main problem nt look angularspecific makes harder identify angular code even verbose really course also makes selector bit complicated", "d": "11/2014"}, {"body": "caitp clear makes lot sense conceptual impl point view still many framework users might perceive easier shorter nicer write trying get bottom problems understand correctly saying stupid scenario need able escape annotations becomes mess mean people could passing string literal containing thus would nt able distinguish string binding markers getting wrong", "d": "11/2014"}, {"body": "caitp think handle value escaping liked approach complicated need anyway interpolation understand correctly mhevery nt like proposal mostly makes debug dom different developer would write nt think problem reasonable tradeoff order get best template authoring experience misko authoring new doc proposal traveling sure status", "d": "11/2014"}, {"body": "mean people could passing string literal containing thus would nt able distinguish string binding markers bingo expressions interpolated strings event handlers need identify based content point going need escape things think would better avoiding headache caitp think handle value escaping liked approach complicated need anyway interpolation understand correctly yes absolutely want possibly avoid terrible idea", "d": "11/2014"}, {"body": "caitp feel like experience nt adequately captured discussions issue deal think document binding syntax document nt heard argument anyone else team afraid might missed also think talk mhevery iterator syntax idea nt think thoroughly discussed internally yet either seems like elegant solution reflected design docs", "d": "11/2014"}, {"body": "issue issue text general nobody wants escape text nt escape nobody wants processing unescaping text nobody wants anything bad idea nobody favour place time desirable thing bad users nt want write crap nt represent trying write developers nt want write crap deal obfuscated representation trying write things nt want note contentdeterminedinterpretation also gets int way whole make easy ides understand thing gives extra layer complicated processing understand attributes bad awful nt", "d": "11/2014"}, {"body": "really favor objectlike syntax somewhat knockoutjs nt looked things exception take one attribute everything however far understood things need work try list understanding someone correct wrong first say webcomponent another framework altogether used like angular going baz string variable understood discussion far changing html result set scope variable given decide deal events dealt like case triggers event named far understood regards binding web components needed next part see angular directives quite different control actually happens string value passed property angular directives therefore nt see problem parsing two handled slightly different different prefix example would produce one per item current scope inner scope generated loop current item named property bound value things notice first enclosed content evaluated expression exception omit around second always predictable functionality ca nt create directive starts meaning always set property value expression always listen event named writing suddenly produce new items third giving objects directives solves problem duplicating attribute names directive handed data defined attribute obviously also needs reference element query dom attributes means stop", "d": "11/2014"}, {"body": "object syntax nt want pass config objects directives objects keyvalue pairs could easily passed attributes also clear values bound scope vs treated strings without yet another syntax example given itemid itemdesc values bound scope literals omit single quotes mean list unlike others actually bound scope without changes parser could clearly concisely represented attributes without namespace itemid itemdesc b attributes namespace itemid itemdesc angular strength templates look like regular html object syntax nt think need make parser support syntax redundant html attributes", "d": "11/2014"}, {"body": "akircher clearly read post example stated content ngrepeat evaluated expression exception omit around take look following guesswork scope variables whole thing javascript problem though name reserved keywords language might cause problems edit also discussed previously thread one problems solved multiple directives using attributes good example used example hard imagine multiple directives takes mention html inputs among others takes attributes namespacing solves issue get incredibly verbose example", "d": "11/2014"}, {"body": "alxandr actually quoting using fardelian example think like syntax okay bindbar itemname coincidentally name used ngrepeat using bindbar itemname publish ngrepeat itemname scope like less also agree namespacing attributes get verbose maybe choose attributes unlikely used normally namespace example", "d": "11/2014"}, {"body": "basically use achieve syntax nt thnk declaratively add event handler though example wo nt obvious reasons pattern like use putting using loop variable elements every something feel use showing capability wrote original post directives unconditionally setting propertiesevents tag", "d": "11/2014"}, {"body": "fond iterators many thumbs caitp everything said far", "d": "11/2014"}, {"body": "cents", "d": "11/2014"}, {"body": "unfortunately wo nt work ie", "d": "11/2014"}, {"body": "nt normally comment issues like spent previous week refactoring couple angular directives thought would make contribution big fan angular like developers niggles comes wellknown performance issues assumption always bright spark solve issues near future back main point favour proposed straw man like keep things concise adding additional attributes would bloat templates html itemname micro syntax explicit intent whereas strawman hides intention funnily enough even started read angular debates refactored existing microsyntax regexes using dsl takes form item collection track trackby map mapitem using usingitem describes expressions returned describe optional items syntax markers compiled syntax executed returns object key value pairs said one thing always keen maintain style underlying framework using reflected microsyntax style likes ngrepeat already defined saying opportunity revisit predefined concepts per comments made mhevery fardelian jamm much favour syntax variation based html style attribute html itemname indeed kiss approach parser would also lightweight follows existing html approach template bloat annotate single vs binding please keep intuitive simple", "d": "11/2014"}, {"body": "eisenbergeffect mentioned article important issue specifying view dependencies component makes component coupled view reasonably way view plugin component ie view define dependencies including component rob suggested using define dependency think better approach would automatically recognize view dependencies using twopass compilation first time parse html expressions extract dependencies resolve second pass executing directives expressions correct dependencies parameters see suggestions clear directive filter deps itemname itemname itemname think avoid syntax dependency recognition possible", "d": "11/2014"}, {"body": "ngdirective view really think much limit better use little bit magic instead perfect code prevent insane verbosity tons boilerplate code", "d": "11/2014"}, {"body": "could rather something akin regards deps imho though discussion probably belongs another topic seems sort topic regards discussion binding syntax", "d": "11/2014"}, {"body": "expand topic bikeshed new ways around absolutely terrible ideas proposed far suck know suck limited binding syntax angular calling chance fix embarassing unfixable problems usher new era simplicity application development make easy ought yet spite keep throwing absolute nonsense ideas around increase complexity decrease community involvement make pain ass us work needless say need better", "d": "11/2014"}, {"body": "mentioned ability extract dependencies template code could factor designing proper syntax plus nt think something like absolute nonsense ideas", "d": "11/2014"}, {"body": "plus nt think something like absolute nonsense ideas absolute nonsense idea anything makes product less enticing difficult use well difficult develop maintain well anything violate laws generally useful note nt specifically talking proposals largely ones come already", "d": "11/2014"}, {"body": "caitp last two comments unacceptable violate code conduct please polite keep discussion technical refrain commenting issue", "d": "11/2014"}, {"body": "clearly remember picked angular frameworks months ago angular markup semantics simply made sense nt alienate bunch adhoc syntax needs memorized otherwise keep visiting documentation every minutes understand decisions behind removing scope controller module nt make lot sense personally always disliked handlebars spacebars jsx level markup abstraction frameworks nt fit mental model things dom nt know many people would agree ngclick dosomething different plain old onclick dosomething ngblur well course readable one less thing worry", "d": "11/2014"}, {"body": "garyranson please could explain distinction example html itemname", "d": "11/2014"}, {"body": "quick update core team working bits next days think feedback summarize constraints solution looking must match following valid html see issue discussion chars attr name valid html web designer friendly interoperable webcomponents nt interfere web component initialization support debugging story via inspecting rendered dom development syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives support additional info options binding order avoid directive specific microsyntaxes enables tooling work without hardcoding support microsyntaxes must supported way preserves constraint please nt propose new solutions nt meet criteria", "d": "11/2014"}, {"body": "apologies", "d": "11/2014"}, {"body": "proposal two alternative formats canonical syntax works well debugging shorthand syntax less verbose canonical syntax proposal directives appear canonical name empty attribute directive parameters attributes follow syntax attribute value define parameter type parameters string literals follow javascript syntax string constants string templates binding expressions prefix follow js expression syntax event expressions function calls prefix followed expression variable declarations prefix followed valid js identifier eg html event declarations follow pattern function calls html shorthand syntax shorthand syntax entire definition parameters attribute named directive format following eg html", "d": "11/2014"}, {"body": "eisenbergeffect unfortunately wo nt work ie strange works fine ie valid option", "d": "11/2014"}, {"body": "lgalfaso et al initial thoughts shorthand hope see fill long form twoway binding function call need different syntax seems clear method call sufficient denote intention without extra variable declarations need prefix assignment would make clear context changes everything rhs valid js", "d": "11/2014"}, {"body": "igorminar result become valid would original proposed syntax back table think xmls would still invalid svg mathml etc", "d": "11/2014"}, {"body": "shorthand syntax limited issues relating limitations setattribute instead defining type parameter parameters value define type parameter name suffix indicates value string template suffix indicates twoway binding example sort goes back days basic data types specified suffixes addition directive specified element parameters could configured attribute fixed name eg", "d": "11/2014"}, {"body": "davidsouther twoway binding function call need different syntax seems clear method call sufficient denote intention without extra important make clear binding expression exposed directive without form binding syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives variable declarations need prefix assignment would make clear context directives like need specify current element way expose flexibility using eg proposal syntax directive html hello name click change name item", "d": "11/2014"}, {"body": "oneway binding bindonce multiline functions click current syntax", "d": "11/2014"}, {"body": "maybe support found actually improvement due administrative overhead incurs may implementation quality issue totally clear", "d": "11/2014"}, {"body": "lgalfaso important make clear binding expression exposed directive without form binding yes read assertion wanting explanation assertion meant accomplish directives like ngrepeat need specify current element yes course thinking along lines better usecase consider ty", "d": "11/2014"}, {"body": "caitp maybe support bindonce found actually improvement due administrative overhead incurs really useful nondynamic components repeated many times page different initialization data", "d": "11/2014"}, {"body": "think could implement much better designing dirty checker way would allow easily turning watches would make administrative work lot easier lets avoid crazy watchdelegates interceptors thing though point really making nt going get good implementation need afterthought ca nt support early probably nt", "d": "11/2014"}, {"body": "caitp think right better turn onoff watchers entire dom sub tree way kick digestupdate cycle hand stead watching created small plunk test kind attributes compliance current browsers", "d": "11/2014"}, {"body": "sanderelias caitp look proloser solution regarding onoff watchers", "d": "11/2014"}, {"body": "garyranson much favour syntax variation based html style attribute could nt agree would even allow us define sort functionality styling apply reusable conventionspatterns using mechanism similar css classes components using decorators think could even allow community come various different mechanisms achieving goal using different attribute value syntaxes using styledecorator parse info kind style attribute js decorator selector ngrepeat class ngrepeatstyledecorator constructor element element string attrs gt repeater attrs repeater attrs gt array list strategysplit var name var repeater collection pluralize name iterator singularize name topics would recommend staying close conventional html syntax help work easily existing tooling still recognisable angular sugar string interpolation stay line syntax used currently many frameworks events ie binding syntax prefix indicates sort binding default one way component html would strategy used could implemented decorator directive guess could optimization syntax binding sides component property name bound reverse binding implicit oneway binding os using style syntax simplify perhaps could externalize similar hardly belongs either html component could use principles directly html overrides external declarations pseudo code js decorator selector bound class boundattribute constructor element element string attrs gt extract attribute name bind know attribute bind strategy hold extract attrs hash sync object attrs gt attrsstream elementasstream sync debounce attrsdebounce toproperty multiple decorators using selector think could different ones use style map different purposes way define binding strategy names customise see fit need reinvent wheel let reuse existing concepts idoms infrastructure missingmisunderstanding something proposal would also super nice could override decorators perelement context basis general purpose strategy could customised input customised special inputs makes especially sense want customize binding debounce effect mappingfiltering values etc want use baconjs handle binding via eventstreams js componentdirective class input customize boundattribute decorator input components class inputboundattribute extends boundattribute sync gt super local customisation goes think quite revolutionary approach sure got many details wrong general idea sound open way flexibility developer control limited microsyntax approach discussed far", "d": "11/2014"}, {"body": "kristianmandrup", "d": "11/2014"}, {"body": "problem characters setattribute supports could use setattributens instead based one proposed syntaxes databinding web components based nonpronounceable characters seems like namespacing attributes respective purpose bindingevent makes intuitive sense", "d": "11/2014"}, {"body": "think quite hack use special chars namespaces intention would cool set namespace element allow custom namespaces distinguish core tags provided angular tags namespace provided various parties propose decorate binding template component controller manages dataflow controller provides basic twoway data binding alternative shorthand syntax decouple specification data flow attributes use minimize controller logic central place control crosscutting concerns css boundinputvalueinput value streamtype bacon binding would nice inherit previous via sth like scss input typetext value mixin boundinputvalue streamdebounce streamfilter nospaces input typesearch value mixin boundinputvalue streamdebounce streamfilter none binding would better achieved javascript via json pure code form allow mixins inheritance etc still keeping declarative syntax instead could use directive pattern simply one yet another decorator layer could load whatever config external source json filerepo whatever maybe little overarchitectured illustrate possibilities js controller selector ngvalue ctrl class bindingcontroller constructor element component object attrs switch attrctrl case sync new synccontroller class synccontroller extends bindingcontroller constructor element component object attrs attrstream streamerfactorybuild component attrs js class streamerfactory constructor element component object attrs setup event streamer binding via attrs hash streamerfactorydefaultstreamer baconstreamer ideas pouring", "d": "11/2014"}, {"body": "akircher problem characters setattribute supports could use setattributens instead yes possible set namespaces attributes via document however trying template like creates attribute named attribute named namespace according spec html syntax namespace prefixes namespace declarations effect xml instance colon special meaning html element names seems would work xml html cry", "d": "11/2014"}, {"body": "vlazar svg xhtml html prior support element like html namespace aware therefore understand namespace prefixes html parser element different element name html supports literal svg element name inline svg code solution either serve page xhtml processed xml thus namespace aware need add default namespace declaration element svg namespace like latter example remove svg namespace prefix still continuing use svg namespace return page xhtml options sure anything would loose however", "d": "11/2014"}, {"body": "return page xhtml nt think good idea xhtml days past", "d": "11/2014"}, {"body": "vlazar svg xhtml apparrently tab got svgwg agree try merge html namespace html svg freely intermixed guess wo nt worry necessarily exciting see plays", "d": "11/2014"}, {"body": "vlazar svg xhtml nt meant xhtml solution really thinking excluding html xml nogo angular changes nothing mathml svg mentioned spec", "d": "11/2014"}, {"body": "garyranson much favour syntax variation based html style attribute itemname could nt agree would even allow us define sort functionality styling apply reusable conventionspatterns using mechanism similar css classes components character already special meaning js able", "d": "11/2014"}, {"body": "yes character already special meaning html exactly makes sense reuse syntax possible rather invent something new facilitates tooling support nt require developers learn new obscure syntaxes become choose use certain framework stick standards imo limitations sometimes good thing", "d": "11/2014"}, {"body": "js meaning separates statements expression parser nt deal statements deals expressions much simpler subset language good thing probably nt want change", "d": "11/2014"}, {"body": "interesting uses applicationxhtmlxml content type whereas uses texthtml content type applicationxhtmlxml content type xhtml real one hardly ever used internet explorer nt support version xhtml always served texthtml therefore browsers used much lenient html parsers xhtml ones surprise xhtml almost never used spite advantages become recommended markup language due simplicity suitability everyday purposes however web designers keep mind wellformedness proper document structure correct element use always provided markup regardless serialization used even html parser forgiving xml parser wondering finally change would way better parse document xml imo digress", "d": "11/2014"}, {"body": "another proposal believe factors requirements uses proposed similarities xhtml namespaces html posted commentpostedon date collapsing even perhaps html good things part looks like normal html nt try look like embedded css think plus keeps right side simple expression events bindings namespaces allow really nice autocomplete options code editor easily show available directive attributes list typing example putting end makes read bit better think see important bits kind attribute code editors simple place find important bits also autocomplete end type since knows would binding smart enough crawl directive class definition keep string values interpolated values pretty easily believe valid browsers put middle attribute oh yeah shows oneway data flow using interpolation wanted example user type rather getting interpolated string always set comment directive class type requirement set binding like would serve user rather string ca nt would throw exception bad things uh pretty verbose without editor help fast ide support though one proposal reduce typing html basically able omit directive name space attribute name collisions required add namespace two attributes name different directives reason discourage using community written directive decide randomly add new attribute called item directive using alongside ngrepeat element break cases would impossible spot without reading every single changelog stay date components used app edit accidentally saved finished extra info", "d": "11/2014"}, {"body": "uses proposed similarities xhtml namespaces let cause problems anything else encoding variables attribute names least addition also directive names", "d": "11/2014"}, {"body": "would agree caitp besides nt really support namespaces ie polyglot document model yet ca nt assume document compatible either believe valid browsers put middle attribute would treated namespaced attribute nt compatible concluded previous comments regards prefix supposed mean oneway binding component template feel syntax overly verbose use attribute model would feel writing like get idea even ide support hardly assume require would make html difficult read even remove namespace nt choose strategy sure", "d": "11/2014"}, {"body": "kristianmandrup trying compare css html bit strange argument honestly probably closer actually kind makes sense nt look terrible besides point perhaps usually attach class element style stylesheet anyway also verbose proposed strawman also prefix exactly angular currently means onetime binding angular team wanted get rid onetime binding would nt syntax also per namespacing going vlazar said creates attribute named click attribute named click namespace specifically using namespaces rather using attributes since seemed one valid special characters although breaks things obviously rules encoding variables attribute names least addition also directive names caitp regarding mean longer directives scopes pull properties populate scopes misunderstanding bit nt encoding variables attr names say fake namespacing nt work browsers sorry maybe useful things proposal take though", "d": "11/2014"}, {"body": "encoding variables attribute names least addition also directive names caitp regarding mean longer directives scopes pull properties populate scopes misunderstanding bit nt encoding variables attr names nt know going end people already writing compiler may need encoding attribute names bind limited cases nt put much strain system order bind also encode variable names directive attributes makes compiler selector lot complicated rather special prefixes could anything would end looking pretty ugly hard use technical reasons well usability think much avoid instance bindvarname probably okay ngrepeatvarname probably okay due making selector engine lot complicated really gross use disclaimer making decisions saying think would terrible users maintainers think avoid", "d": "11/2014"}, {"body": "please nt put names variables attributes like someattrvariablename value ask much looks counterintuitive suppose ide feel crazy parsing constructions", "d": "11/2014"}, {"body": "event bindings expressions need different syntaxes need know expression needs executed least expose value need expose expression executed directive sees fit", "d": "11/2014"}, {"body": "lgalfaso nt done name attribute like full name stuff", "d": "11/2014"}, {"body": "lets say got repeat example going see benefits able use syntax separate create directivescomponents would nt say title attr particular binding similar benefit getting rid stupid gets rid one microsyntax overall one seems object dropping going sound like squeeky wheel still nt feel like addresses performance issue enough get people jumping ship react like still come back namespace approach know considered complex use still find less complicated turning watchers html three rendered bindings require different degrees upkeep change language first one changes change person language second changes change person third one changes using vs vs vs vs variants readability going improve performance get behind setting attr quickly getting ide recognize patterns attr vs content primarily effort make definition sort binding part attr name nt keep information stored somewhere else", "d": "11/2014"}, {"body": "hworld regarding point things closely related usually grouped together makes intuitive sense would nt know properties belong together unless humandeveloper machine perspective ie parseride would fragile approach maintaining list related properties might change time etc much better group related subproperties using like syntax", "d": "11/2014"}, {"body": "proloser making assumption expressions need exposed using attribute follows convention eg another possibility discussed question convention make things awkward directives use expressions things events eg please keep mind example say table widget get elements lazy performance reasons infinite scroll table requires expression retrieve next item template would look like event something directive needs consume something external naming convention makes look like something directive produces something happens", "d": "11/2014"}, {"body": "lgalfaso feel like second half comment missing lol yes see confusion nt follow affects decisions syntax bindings trying prevent devs making confusing attribute names", "d": "11/2014"}, {"body": "think general confusionmiscommunication amongst entire discussion btw could wrongconfused everyone throwing around term twoway binding oneway binding really relevant time lot people examples onetime binding live bindingtwotime binding twoways variables expressions written nt really touched whole lot brought namespaces feel people missing point realizing frequency bindings evaluated rendering need syntax syntax really tl dr think people confusing frequency evaluations purpose binding binding purposes render configure evaluate event callback evaluation frequencies upon truthy constantly live occasionally onoff watchers namespaces shared watchers etc", "d": "11/2014"}, {"body": "proloser comment already getting long expect everybody able fill gaps producer consumer well known want syntax allows developers expressive possible write templates read immediately understand without going documentation implementation", "d": "11/2014"}, {"body": "lgalfaso nt realize big issue want see performance boost confusing api used example nt seem merit degree complexity dropping microsyntaxes like ngrepeat strings expressions nt know enforcing attributes appear really going make big difference mean iunno people still weird names attributes confusing poorly designed api going happen vs telling people follow convention something gain enforcing type syntax level vs letting people use whatever names want definition attrs defined hash", "d": "11/2014"}, {"body": "thread see lot proposals ideas community members comments proposals team drafts consideration already discuss variants internally please post vectors future proposals based likedislike current ideasproposals", "d": "11/2014"}, {"body": "lgalfaso writing crappy example rereading example think disagree fact event core team seems think nt event based wether read without prefix honestly difference one returns data evaluated exact way otherwise making things less confusing anyone", "d": "11/2014"}, {"body": "proloser first would like clarify speaking behalf way opinion understood opinion angular core team fact working angular involved design new compiler agree one possible view view every expression passed directive event one view perfectly valid one side viewing every expression event may everybody wants see expressions like important syntax flexible force specific mindset reduce expressiveness said strong opinion majority developers comfortable different syntax welcome open arms", "d": "11/2014"}, {"body": "think whole imposing prefixes special characters different situations exactly claim imposing specific mindset reducing expressiveness vs letting people name crap whatever horrible convention want sort hash defines attribute similar current behavior", "d": "11/2014"}, {"body": "guess another way see would see bindings using gettersetter methods see fex instead directly affecting component propertiesvalues think always template call method component", "d": "11/2014"}, {"body": "lgalfaso think everyone getting excited think pertains bindonce livebind reality nt think stuff really addresses issue kristianmandrup pertain templating system tho", "d": "11/2014"}, {"body": "proloser idea achieve greater flexibility make interface consistent thus easier tooling developers etc kiss proposed similar idea previous posts would like binding super customizable see need controller template component handling data transfers least nice way define logic data transferred makes obvious case getterssetters minimum", "d": "11/2014"}, {"body": "simply drop microsyntax keep reference hash would nt see performance boost start evaluating attribute names detect purpose nt going see albeit slight performance drop using hash definition plus less flexibility kristianmandrup nt agreedisagree reading nt know getterssetters pertained dom element attributes mean generally people agree put stuff declaratively html", "d": "11/2014"}, {"body": "radically different approach would avoid elementattribute micro syntax go back old school arguments html clean possible prefer attributes external decorators similar css principle whether declarative via code define element decorations would avoid embedding decorator details html intentions tags picked external selectors hmmm like considered bad practice imbed font tags onevent handlers html common early days web another interesting reactive template framework", "d": "11/2014"}, {"body": "proloser believe team something similar reference hash early documentation part speculation rather attributes object class describing using annotations methods event bind example instead class directive constructor bind data thisevaluation value event click eventbinding event loadmore callback however four problems approach could nt get annotations work class properties methods adding annotate property would mess object nt possible primitives bind wo nt work example reference hash solution solves expense verbosity thought would helpful see difference property binding event binding template annotations seems overkill relative template syntax web components two salient parts events amp properties however questioned directive like ngrepeat need declare variable need able declare direction onetimeness binding subset sometime two templates might use directive one might want binding onetime another might liked idea able override directives default pertemplate basis difference syntax means angular would compile template actually see expression evaluates one onepass regex either case performance close solution feel free ignore missed concerns completely update looks like latest commits angular repo binding reference hash inside top level annotation", "d": "11/2014"}, {"body": "kristianmandrup similar idea head syntax html gives us ability interoperate webcomponents tools tool maybe web component change property dom node property directive handle render move properties js layer webcomponents able way html dom transport layer apps like http restful apps really wish less fragile polluted transport layer nt believe jsweb tools follow idea doubt adopt new css sibling html given point apis apps interoperation", "d": "11/2014"}, {"body": "thanks akircher like discussion going allow hash syntax like idea treating kind functionality similar styling decorator approach jamm see point agree least couldshould option road imo could registered determine attribute special act accordingly like initially parsed could addremoveedit decorator attributes like hmm respect property binding event binding considered equivalent bindvalue x essentially equivalent component getterssetters used much different really except always one way", "d": "11/2014"}, {"body": "kristianmandrup politely think using wrong framework want remove declarative syntax angular jamm yeah realized overhead probably high akircher thought would helpful see difference property binding event binding template feel like although nifty really nt decisionmaking factor adds verbosity templates already using names like options like hungarian notation variables prefixed type nifty theory painfully verbose execution negligible benefits", "d": "11/2014"}, {"body": "kristianmandrup team definitely thought getterssetters eisenbergeffect wrote approaches twoway databinding moved away one core angularisms using pojo data binding rather extending custom object using getterssetters like frameworks sure right decision seems unlikely change minds argue earlier time expression function call going event listener many times execute function expression bind result almost never since done directive could get rid difference bindingevent syntax allowed function calls events bindings eg expression string event otherwise binding notice nt distinguish bind example instead use ng prefix case ng means two different things ngvalue binding expr nt ngclick event binding dowork look first comments thread see examples", "d": "11/2014"}, {"body": "kristianmandrup shadow dom events almost sure angular use component directive shadow dom element team assumptions akircher totally agree idea events binding moreover bindings like impossible lead us much clean maintainable code expression looks handy simple leads ugly code grows mess new piece logic added binding", "d": "11/2014"}, {"body": "jamm agreed makes good tutorial horrible app really wanted feature could parse inline functions eg", "d": "11/2014"}, {"body": "akircher agree everything noted except think one core angularisms using pojo limitation makes sense point time made sense years ago sure would achieve event stream binding debounce necessary searchautolookup field fex filtermap data templatecomponent common scenarios mind definitely proposing getterssetters similar used ember natural class getterssetter functions could autogenerated explicitly defined similar ruby macros gettersetter would used available otherwise default access pojo attributes directly makes sense specify bound attributes component annotation section basic getterssetters generated overriden assume proposal mentioned eisenbergeffect", "d": "11/2014"}, {"body": "wanted let know issue monitored least speaking reading every comment posted lot interesting ideas pretty cool see much participation believe mhevery putting together new proposal syntax takes feedback issue along additional constraints account nt seen yet file permissions issue preventing access funny enough imagine post update feels details worked enough warrant meaningful feedback akircher document approaches twoway databinding authored actually extremely incomplete intended expand approach detailed explanation advantagesdisadvantages would nt use document real indication approaches thoroughly explored point think exploration needs done however mostly independent actual syntax discussed kristianmandrup actually prototyped new databinding system used multistrategy approach observing models system would pick appropriate technique per property per object basis uses objectobserve gettersetters suggest auto generated dirty checking last resort also allowed plug custom strategies ideas may find way new databinding system likely form proposed", "d": "11/2014"}, {"body": "eisenbergeffect thanks update keeping us loop updates recent blog post immensely helpful good know brainstorming helping team", "d": "11/2014"}, {"body": "kristianmandrup fair criticisms sure", "d": "11/2014"}, {"body": "eisenbergeffect akircher happy see think alike great ideas looking forward see experiments implemented test would work practice", "d": "11/2014"}, {"body": "clear stick existing html infrastructuresyntax much possible leverage existing apis tooling support need reinvent new micro syntaxes unless practical way broad browser support dom mutation observers already", "d": "11/2014"}, {"body": "made sense years ago sure makes sense today many places want pipe json api result directly screen without overhead instantiating actual class", "d": "11/2014"}, {"body": "davidsouther fair enough noted gettersetter would used available otherwise defaults access pojo attribute directly", "d": "11/2014"}, {"body": "want use angular angular perhaps would already possible extent using macros enter sweetjs make super easy compiletransform dsls like enjoy", "d": "11/2014"}, {"body": "sad see eisenbergeffect leave team yet read detail angular talks first thing list reason use angular expressive html current syntax ngrepeat read easily anyone take middle school student htlm experience get meaning except eisenbergeffect proposals seen little syntax would call expressive syntax really need change clean understandable angular html code make look like scripting", "d": "11/2014"}, {"body": "quote mhevery discussion let discuss semantics", "d": "11/2014"}, {"body": "thank suggestions want know read one even thought time respond put together document describing current thinking short figured way micro syntax satisfies constraints making primary syntax optional secondary syntax finally want know changing syntax heck good technical reasons enumerated various documents describe reasoning making changes", "d": "11/2014"}, {"body": "good news guys get brand new syntax ignores keyvalue system baked platform looks weird comparison status quo essentially reason less micro syntax one advantage put sub expressions order want could anyways keyvalue system baked platform ignored special bonus feature new situation nt confusing enough also get n ways accomplish given task lessons apparently learned confusing people thanks participating submitting proposals surely good come", "d": "11/2014"}, {"body": "mhevery see trying compromise would possible anyone community build set attribute directives could provide something similar canonical syntax design doc actually something like want automatically apply filter bindings instead bf set custom attributes automatically generate another example today bindonce library set directives living top angular core one time binding added core essentially better version bindonce honest sure like short hand syntax think good argument made expose one simple easy short hand syntax default core long community able build extensions top core provide something like describe canonical syntax potentially override template engine nodejs world take special care distinguish core vs user land years node started push stuff core user land number benefits including making easier maintainupdate core allowing users choose recommended community library something vs preferred custom solution perhaps needed tighten streamline core essentials time empowering community take ownership things often matter taste", "d": "11/2014"}, {"body": "caitp keyvalue system baked platform referring sets html attributes jsstyle objects angular expressions assuming latter example mhevery doc html album albumname j trackname would become something sorta like html album albumname j trackname seems case would able signal things create new variables templates original example means fewer hooks inspections autocompletion like could use strings expressions add back annotations html album albumname j trackname seems little awkward", "d": "11/2014"}, {"body": "mhevery absolutely right long syntax valid sane devil details really important compiler issue syntax could opened made flexible level overridecustomisation imagine developers nt would never quite satisfied whatever syntax wizards decide hehe", "d": "11/2014"}, {"body": "kristianmandrup agree semantics important syntax syntax thread people want discuss different semantics start new issue discuss relevant design doc", "d": "11/2014"}, {"body": "bit update serious counterproposal please add scoring sheet use make sure counterproposal pass requirements", "d": "11/2014"}, {"body": "read document recently posted mhevery like syntax much better prior proposals seen seems straight forward still requires explanation nonexperts template use angular directives others know line web components many thousands developers getting feet wet web development using angular understand complexities web components rhetorical questions looking answers hoping user stories features include lower experienced community", "d": "11/2014"}, {"body": "repeating existing template creating new one supported", "d": "11/2014"}, {"body": "good news guys get brand new syntax ignores keyvalue system baked platform looks weird comparison status quo essentially reason less micro syntax one advantage put sub expressions order want could anyways keyvalue system baked platform ignored special bonus feature new situation nt confusing enough also get n ways accomplish given task lessons apparently learned confusing people thanks participating submitting proposals surely good come brought twitter replied today given reply twitter replies limited characters everyone seen asked right thing anyways going make clear statement first foremost apologize sounding overly negative sarcastic actually edited reply numerous times try make less negative sounding yes unhappy current state affairs want people know want make next iteration framework easier rather harder people use people migrate want users know trying back want work framework would want use things nt think would want use however sarcastic implicitly negative comments way go unprofessional somewhat immature apologize really dumb chat mi\u0161ko today topic templating trying find ways factor complexity way aligns well constraints put forward rather making snarky remarks instead want make sure people understand someone read lot calvin amp hobbes child sarcasm negativity sort bakedin fully aware trying hard make best possibly know everyone involved going keep trying make attractive developers use projects goal everyones goal first started working working angular found made things simpler rather difficult see us moving away ways want line back simpler better approach best spite disagreements current proposal important understand picking fights anyone nt want nasty anyone certainly nt want imply developers antagonizing users anything everyone definitely wants best framework anyone interested helping factor complexity current design please shoot email ideas add try build proposal makes sense users developers toolkit", "d": "11/2014"}, {"body": "angular could understand caused confusion people nt understand property directives many harmless directives nt affect dom structure accomplished using angular", "d": "11/2014"}, {"body": "caitp thank much clarification caitlin way think point granted controversial comment short intelligible least without reading entire thread reading comments misko mhevery document understood pointing dear angular team please keep mind speed efficiency nt optimization goal end day deal developers important group newbies intuitive syntax better angularjs succeed", "d": "11/2014"}, {"body": "thanks caitp thoughtful reply folks general long issue comment thread thanks much passion enthusiasm around topic hear paying attention tough design area argued internally well yikes think close year care much getting right goal come something works well intuitive many folks possible please submit ideas counterproposals doc misko shared", "d": "11/2014"}, {"body": "fyi regarding tag", "d": "11/2014"}, {"body": "thanks link mhevery nt know intents understandable agree reasonable use ngrepeat ngswitch ngif turns onoff elements sorry nervous ngfans worry things less say see slow movement better syntax current proposal better initial need little bit genius ideas", "d": "11/2014"}, {"body": "mhevery great thing angular moving lots developers web might know new template tag angular team stats community user base many designers find angular easy dabbling javascript many students many rails developers many windows formswpf developers dipping toe web development first time percent actually javascript gurus might interesting know angular session vslive yesterday standing room recently top courses pluralsight angular like see angular continue approachable developers future developers", "d": "11/2014"}, {"body": "must say love new approach discussing problem reasons mentioned earlier many times firmly believe directives template prefixed one way mainly dependency injection ability distinguish values contain pseudo microsyntax also think better way writing templates well reuse short prefixes pseudo microsyntax attributes keys added new proposal angular document", "d": "11/2014"}, {"body": "looks bad really", "d": "11/2014"}, {"body": "vkoonline issue something sort issue angular making sure things apply right element rationale understand see attribute going generate element attributes derived items attribute string template sort replaces used populate discretion whatever directive issue like directive attribute merging original host element mess things quite issue sort related see want work around one idea sort like given magic attribute prefixes etc could also variants prefixes like whatever people like nt matter able separate template attributes element attributes easily still using syntax baked web platform years would something like sound still working hammering solid proposal meets constraints would good hear people would feel versus magic template attribute thing challenge case sensitivity", "d": "11/2014"}, {"body": "caitp really like template template since aligns better syntax check comments doc unfortunately mhevery like template allows one template directive per element think could helpful feature caused problems although attribute order nondeterministic browsers looked kept could mean breaking change browsers change order future maybe improve solution solve problems", "d": "11/2014"}, {"body": "note talking referring directives referring template target whatever attribute whatever template may slightly different note still running multiple template directives thing sure would nt meaningful point magic syntax nt really prevent one option attribute explicitly requests instantiation template directive maybe short something think ways around", "d": "11/2014"}, {"body": "caitp see slightly different like going unrelated clarifying question original problem elementsetattribute foo exp working setattribute actually necessary reason think compiler recreatecopy template element new dom element ca nt grab whole node originally written author template insert need dom escapedshorthand attributes move along manipulate nonescaped propertiesevent handlers normally seems like simple solution sure good reason would nt work someone would care explain would appreciate", "d": "11/2014"}, {"body": "coming bit late regarding microsyntaxes think different approach would possible angularjs takes pride everything angularjs implementable directive including etc nice also complicates things ie compiling templates new symbols introduced alternative would hardwire core structural elements templating much like programming languages hardwire syntax loops function calls variable declarations etc less powerfuldynamic directives overall give power angularjs understand templates going number constructs one would hardwire actually quite small basic level need repetition conditionals inclusion mechanism expansion directives plus everything introduces new names template lexical scope must built eg think things wrapped directive controller fields nt think might deserve exploration hardwiring primitives restrict directive overly simplify entire system lot", "d": "11/2014"}, {"body": "caitp two issues write need convert done efficient manner need conversion view dom dev tools see binding nt want show binding yet another format tools haml able generate mprobst considered solution issues limit number core keywords infinite repeater dragable custom selector nonhomogeneous repeater really better keep open think current proposal strikes good balance", "d": "11/2014"}, {"body": "cents onto attribute name syntax hunt anybody considered using suffixes also using periods periods valid xml btw using period first position appear work fine apis like", "d": "11/2014"}, {"body": "know works svg thu nov bernard notifications githubcom wrote cents onto attribute name syntax hunt anybody considered using suffixes also using periods periods valid xml titleng contains count items titleng contains count items btw using period first position appear work fine apis like elementsetattribute titleng reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "11/2014"}, {"body": "popbee period interesting idea needs work without ng suffix seems like period get kind lost", "d": "11/2014"}, {"body": "eisenbergeffect worked svg elements browsers chromefirefoxrecent ie period gives twisted feel something bit special happening attribute yet think people wo nt get scared starring unlike abc click since valid xml probably generated lot xmlbuilding tools supported tool good chance supported mixing may also work visually myownattributeng course period would need special meaning like really part attribute name mhevery agree period alone end good looks like bug going docs posts missed reason ca nt use ng", "d": "11/2014"}, {"body": "interesting something like", "d": "11/2014"}, {"body": "sure materially different cant use prefix prefix core angular directives binding general problem needs work directives webcomponents prefix practical purposes part name part binding system directive needs bindable also library may declare prefix instead prefix let thu nov rob eisenberg notifications githubcom wrote interesting something like propertybind expression propertylink expression eventtrigger expression eventbubble expression reply email directly view github", "d": "11/2014"}, {"body": "differences using easily distinguish part attribute name vs part binding syntax related first point would less likely get odd naming schemes imagine someone actually names event prefix dash end apposed early discussions main argument obscured attribute name particularly ltr grammar looks fine inside view many expressions harder read favored operator suffix think easier read cases makes grammatical sense example vs thought think would interesting see substantial view looked like syntax", "d": "11/2014"}, {"body": "glance would prefer see eventtrigger expression event expression still see parens either evaluate expression function parameter list also fine going syntax onevent expression", "d": "11/2014"}, {"body": "eisenbergeffect like especially agree point two using notation makes lot clearer happening first thought might confusing sort notation actually happening representing affected affecting familiar context", "d": "11/2014"}, {"body": "yup second look period almost look like call also somehow gives standard visual location describes magic going applied thought think would interesting see substantial view looked like syntax feeling entire solution another option juggle", "d": "11/2014"}, {"body": "eisenbergeffect also favor suffix annotation except please nt call could also enable quite easily something wanted end", "d": "11/2014"}, {"body": "perhaps would better name idea play around", "d": "11/2014"}, {"body": "eisenbergeffect suffixes", "d": "11/2014"}, {"body": "nice idea popbee anyone feels need case like parsing template angular frameworklibrary probably also uses purpose attribute names would unchanged compilation angular issue frameworklibrary worried prefixes suffixes angular syntax directives see comment syntactically looks really nice though eisenbergeffect use overall feels like angular trying take cool syntax need interoperability frameworklibrary alter less popular library needs adopt fact already use angular kind like jquery became popular taken jquery sorry libs underscorejs took hope idea clear", "d": "11/2014"}, {"body": "btw noticed commit landed guys still expecting community continue exploring ideas making proposals google docs document syntax kind final least please submit ideas counterproposals doc misko shared", "d": "11/2014"}, {"body": "release worry backwards compatibility everything changeable nt want blocked going best proposal far thu nov vladislav zarakovsky lt notifications githubcom wrote btw noticed commit landed guys still expecting community continue exploring ideas making proposals google docs document syntax kind final least please submit ideas counterproposals doc misko shared reply email directly view github", "d": "11/2014"}, {"body": "use appears possible css attribute selectors jquery dom queries escaping broad testing required assert fully course nicest work assume type stuff would rare typical developer anyways css", "d": "11/2014"}, {"body": "one note counterproposals evaluation think mhevery got emotional reviewing counterproposal rejected soon think reviewing counterproposal idea maybe party reject proposals", "d": "11/2014"}, {"body": "escaping liked dotsnotation really disagree use ugly escaping nganimation still use css css selectors look ugly ugliness brings entropy sure small grow something ugly later", "d": "11/2014"}, {"body": "hi adam sorry came across emotional proposal rejected technical reasons work detailed issues document fix proposal ask look first want really understand counterarguments work thu nov pm adam stankiewicz notifications githubcom wrote one note counterproposals evaluation think mhevery got emotional reviewing counterproposal rejected soon think hes reviewing counterproposal idea maybe party reject proposals reply email directly view github", "d": "11/2014"}, {"body": "jamm sure would write css dotted attributes unless wanted actually style things expressions words unless wanted make developer tool styled angularbound elements instead would still write css normal attribute would set binding system", "d": "11/2014"}, {"body": "eisenbergeffect simple example ngshow currently contain expressions often used nganimation selectors", "d": "11/2014"}, {"body": "spamming matsko case understood something wrong happens often hehe please matias minutes share opinion escaping css selectors", "d": "11/2014"}, {"body": "omg thread never end least xmas", "d": "11/2014"}, {"body": "jamm case matters directive could easily implemented update attribute associated element case cases targeting decorator directive css common", "d": "11/2014"}, {"body": "also escape css selector follows titleng slightly modified jsfiddle slightly better though still really like dot syntax seems nice clean putting name attribute binding first makes easier read propertybind value eventhandle handler add also seems work fine colon character like dot better though", "d": "11/2014"}, {"body": "nborelli discussed multiple times thread already colon work document interpreted xml xhtml colon seen namespace separator", "d": "11/2014"}, {"body": "alxandr yes correct new discussion missed need read huge thread carefully still think escape css selector little better like dot syntax stated earlier also allows syntax like propertybindonce value although could also see binding behavior part expression", "d": "11/2014"}, {"body": "nborelli also stated earlier thread one points inside attribute valid expression", "d": "11/2014"}, {"body": "alxandr well agree going micro syntax ngrepeat discussed earlier allow something like would allow additional binding behaviors added later time syntax looks like javascript object luck nt missed something else thread usually lucky", "d": "11/2014"}, {"body": "new may wrong would work simple binding binding options way single attribute could used either way", "d": "11/2014"}, {"body": "nborelli like optional nature approach although case differentiate generic expression value expression mode also expression probably would rather quotes around inner expression", "d": "11/2014"}, {"body": "popbee yes thinking things nt know locked expression syntax point nt know something could added differentiate two kinds expressions think may need quotes around inner expression though inner expression comma things could get pretty confusing radical changes still happen expression syntax example unfortunately still quotes around inner expression though maybe micro syntax could help get rid sure someone smarter could think better expression syntax really area expertise worked guess markup proposed earlier might work feels heavy", "d": "11/2014"}, {"body": "sure proposed idea embedding binding options part expression syntax way filters past example way filter function operates output expression binding option function operates binding change behavior default", "d": "11/2014"}, {"body": "eisenbergeffect could ampersand interpreted part expression concern like wonder would better mode oneway twoway etc", "d": "11/2014"}, {"body": "nborelli nt think single used expression syntax currently nt looked bit though could certainly basically imagined would hood bit shorter syntax common case either way though", "d": "11/2014"}, {"body": "eisenbergeffect could character besides ampersand used ampersand comes xml escaping issues etc character guess whitespace could also removed feels like hashtags smile", "d": "11/2014"}, {"body": "optional separators expressions already proposed doc misko linked think loosing difference discuss syntax semantics many buzz may favorite symbol dash imho", "d": "11/2014"}, {"body": "eisenbergeffect nborelli jamm said suggestion doc extend alternating word micro syntax templates bindings would allow something like would allow bindings additional options amp filters course proposal could use additional delimiters like etc like make sure comment promise make cut since mhevery seems like", "d": "11/2014"}, {"body": "extending alternating word micro syntax templates bindings long separate alternating words expression parsing jamm would fine dash instead dot attribute name dot seems unique attributes already contain dashes seems easier tell binding really small difference imo", "d": "11/2014"}, {"body": "jamm buzz huge thread price pay yes difficult sometimes follow multifaceted long worth every penny imho quite refreshing everybody appears calm yet passionate succeed syntax essential angular acceptation amp love keep ideas flowing", "d": "11/2014"}, {"body": "use inlinecsslike approach put things angular single attribute big pro ultimate freedom syntax want use inside make name attribute configurable someone builds web component ng attribute one override angular default use another name approach would need api interact elements bindings kind abstraction bindings would allow html attribute syntax completely separated underlying mechanism could decide support syntax attribute least migrating ngattributes ng seems easy automate well option way help migrating code rewrite old syntax new one dom nobrainer", "d": "11/2014"}, {"body": "markmeeus approach seems nice also resemble approaches described earlier ie might wrong first sight looks like problem simply moved single attribute microsyntax issues would remain becomes sort namespace advantage see avoiding clashing attributes name introduces challenges additional escaping layer would required look example lots double quotes seem parseable elementaddbinding coolproperty itemcoolvalue mode twoway syntax csslike actually square brackets nt like anything seen actually looks bit like array quite like said would require new apis deal special attributes angular team create sometimes html generated server sorts ways beyond reach angularteam compatibility interesting idea since change markup really compatible since touching markup better change syntax directly would rather way make template work box possible angular team give path migration yet confident community come something greatly ease pain", "d": "11/2014"}, {"body": "popbee nt exactly trying define syntax pitching general idea adding angular things element single attribute mainly way complete control acual syntaxgrammar could potentially make code much readable read code another time posting quotes completely messed edited original comment makes sense", "d": "11/2014"}, {"body": "markmeeus ok whichever syntax pick nonetheless force adding layer escaping might help readability besides large attribute value always work nicely want split multiple lines source code readability purposes", "d": "11/2014"}, {"body": "seems everyone pet syntax better worse one proposed would like see discussion semantics none discussion addresses key points discussed document working webcomponents clearly identifying expressions without knowing semantics active directives clearly identify locations dom structure mutate clearly identify new variables introduced support microsyntax wether chose something else secondary", "d": "11/2014"}, {"body": "seen recent talks polymer web components would ever want document various different types web components would nt bit mess super confusing especially framework uses different microsyntax", "d": "11/2014"}, {"body": "webcomponents standards nothing say databinding webcomponents deal browsers create new elements extend behavior dom databinding concern framework standards", "d": "11/2014"}, {"body": "mhevery overall really like team proposal small questionssuggestions like alternating word microsyntax little worried attribute directive name eg ngrepeat looks keyword might get lost could angular force template directives appear actual template elements throw error author puts elsewhere authors could shim template tag ie supports eg works throws would like alternating word microsyntax available bind attributes even needed first still possibility implementing something also works better paired first word syntax would variable bind current template syntax first word directive name syntax bikeshedding def used declaring variables something like var let seem aligned javascript although annotation declarations directives may less surprising behavior current configuration looks little intimidating seems complicated ddo nt know enough interworkings make specific recommendations hope move complexity annotation template conventions instead ideas mentioned doc know global registry complicated could move annotation directive selector property template using html imports worth discussing proscons separate doc template property annotation really need could nt done implicitly properties templateconfig put template per issue think understand distinction amp services seems overly complicated latter two element injectors parent element declare directive via one methodsproperties using def children elements access sure morebetter ideas simplify annotation api happy holidays adam", "d": "11/2014"}, {"body": "akircher one comment said probably nt replacec actually valid variable name whereas", "d": "11/2014"}, {"body": "looks like vojta fixed issue since passes", "d": "11/2014"}, {"body": "stupid read vicb description understand reopening fix properly", "d": "11/2014"}, {"body": "blocking anything deferring later", "d": "11/2014"}, {"body": "nt computer check think running pub get second time return immediately lock file created first invocation satisfies version requirements case easy fix gulp running two tasks subsequently copy pubspec build folder run pub get pub spec push updates detection pub need duplicate effort gulp side might wrong pub behavior needs checked", "d": "11/2014"}, {"body": "rkirov thanks parentheses also working yet", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "compiler parses expressions stores", "d": "11/2014"}, {"body": "moved", "d": "11/2014"}, {"body": "taking look see could submit pr ran scenarios would helpful get input pretty easy modify dartparsetreewriter write works multiline work leading tag processing using templateliteraltransformer transforms however fails dart nt string could subclass templateliteraltransformer append tostring guaranteed work expression something nt define tostring example version output object object test transpiles invalid dart dart version output instance test test using templateliteraltransformer tag processing generates object definition import statement causes compile error would need elevate imports top probably needed scenarios", "d": "11/2014"}, {"body": "think sufficient assume dart version always strings think vicb suggestion good enough support rest semantics", "d": "11/2014"}, {"body": "submitted pr simple approach writing triple quoted strings added explicit error tagged template strings attempted use hoist imports generated code brought another issue properly handle generated code dart nt support object literals objectfreeze objectdefineproperties would require converting convention dart would support", "d": "11/2014"}, {"body": "read templatelitteraltransformer correctly features used tagged template strings need special arraylike object string propriety etc dart tagged template strings easiest throw tagged templates merged", "d": "11/2014"}, {"body": "output looks like including source maps", "d": "11/2014"}, {"body": "nt notice assigned took stab interested pr worries", "d": "11/2014"}, {"body": "tpodom looks good create pr merge", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "fyi say close comment issues gets closer gets merged thanks hard work", "d": "11/2014"}, {"body": "yeah thought fixes comment would well guess nov pm mi\u0161ko hevery notifications githubcom wrote fyi say close comment issues gets closer gets merged thanks hard work reply email directly view github", "d": "11/2014"}, {"body": "thanks sun nov tommy odom notifications githubcom wrote closed reply email directly view github", "d": "11/2014"}, {"body": "start using nodeinspector makes debugging much easier", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "compiler correctly parses template directives stores following values variables specified view template directive including annotation protoview template directive use", "d": "11/2014"}, {"body": "tbosch", "d": "11/2014"}, {"body": "done", "d": "11/2014"}, {"body": "vicb vojtajina one closed still pending action", "d": "11/2014"}, {"body": "pr merged traceur end last week need add dart support repo back vacations please leave open le novembre naomi black notifications githubcom \u00e9crit vicb one closed still pending action reply email directly view github", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "current syntax correct", "d": "11/2014"}, {"body": "forin js rejected since semantically different map iteration syntax js supports", "d": "11/2014"}, {"body": "yes put traceur runtime take care", "d": "11/2014"}, {"body": "vsavkin assigning along parser work please update", "d": "11/2014"}, {"body": "migrated tests porting parser", "d": "11/2014"}, {"body": "means changed regards di injection right", "d": "11/2014"}, {"body": "understanding state feature vicb correct traceur parse generics type arguments missing generate runtime annotations generate runtime type assertions probably format annotations output generics dart code output generics code nt need would nice generate type annotations runtime type assertions suggest js function foo bar b bar currently generate fooparameters bar suggest generate fooparameters new typeannotation bar new typeannotation bar baz means traceurruntime need define class type assertions something like thoughts mhevery arv", "d": "11/2014"}, {"body": "thinking something along lines function foo bar b bar fooparameters bar barparameterize baz means types define method generecized purpose crate returned cache new type parameterize type used assertions normal thoughts", "d": "11/2014"}, {"body": "mhevery would indicate write generic class would generate static method automagically", "d": "11/2014"}, {"body": "mhevery like would good limit amount garbage create alxandr yes generate method reminds need one thing update parser allow actually define parametrizable types traceur would also generate method", "d": "11/2014"}, {"body": "updated list tasks x parse generate method see x output generics dart code x generate runtime annotations x generate runtime type assertions probably format annotations x make sure see update rttsassert library deal generics x output generics code nt need would nice", "d": "11/2014"}, {"body": "going work today", "d": "11/2014"}, {"body": "traceur currently transform typereference turn creates new instance last step important assertion library see generic adhoc moment", "d": "11/2014"}, {"body": "needed hello world working", "d": "11/2014"}, {"body": "tried karma setup fails traceur compilation even run tests output shows line numbers errors also improved way gulp shows errors see looks like please reopen suggestions make better", "d": "11/2014"}]