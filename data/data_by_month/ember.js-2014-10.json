[{"title": "actions hash merging properly routes mixin", "body": "function actions hash route works fine including actions hash mixin deleting route moving code actions hash mixin routes action hash deleting actions hash mixin neither optimal solution button partial component triggers actions event corresponding component sends action template handlebars argument method route propagates back correct route code works correctly use mixin actions hash extend route another actions hash methods run problems get issue template ihtable showmodalshoweditinvoicemodal component showmodal function actionname record thissendaction showmodal actionname record route import ember ember import presentsmodalsmixin mixinspresentsmodals export default emberrouteextend presentsmodalsmixin actions showeditinvoicemodal function name record var lineitems recordget lineitems thissend openmodal invoicesedit record mixin import ember ember export default embermixincreate actions openmodal function name record thiscontrollerfor name set content record var modaloutletstack thisget modaloutletstack thisrender name modaloutletstack modaloutletstacklength outlet modal modaloutletstackpush name thisset modaloutletstack modaloutletstack surprisingly code works fine goes correct action nt throw error message route import ember ember import presentsmodalsmixin mixinspresentsmodals export default emberrouteextend presentsmodalsmixin mixin import ember ember export default embermixincreate actions showeditinvoicemodal function name record var lineitems recordget lineitems thissend openmodal invoicesedit record looking ember docs says make things consistent give flexibility action naming standardized around using hash called actions extending class actions defined merge actions defined subclass instance parent also support super wo nt lose flexibility approach ideas seems maybe hash nt merging properly ca nt find action actions hash route mixin actions hash clobbering maybe wierd naming conflict related ember cli odd reason", "num": "9459", "d": "10/2014"}, {"title": "issue boolean bound attributes ember", "body": "ember docs mentions use bindattr boolean value add remove specified attribute example given template isadministrator true handlebars produce following html element example produced html nt value assigned disabled attribute important particular attributes attribute tags browsers interpret differently output vs noticed recently bound attributes bound boolean values generating html like latter attribute given value name attribute example found jsfiddle selected attribute screen shows chrome safari edit failed notice ember result blue displayed instead red think thrown fact clearing value attribute caused right option displayed", "num": "9457", "d": "10/2014"}, {"title": "ember breaks component classnamebindings attributebindings", "body": "ember following code results element ember results element instead html foobar class fromtemplate check classnames fromclass fromtemplate reduced test case jsbin jsbin", "num": "9455", "d": "10/2014"}, {"title": "notifypropertychange makes dshasmany dsbelongsto properties null", "body": "call notifypropertychange property dshasmany dsbelongsto forces property null obviously bug eg foo dsbelongsto bar thisnotifypropertychange foo force foo null", "num": "9453", "d": "10/2014"}, {"title": "yuidoc generation broken", "body": "neither seem work moment command never completes causing autobuild publishing fail find json file cibernox tackle", "num": "9450", "d": "10/2014"}, {"title": "rendered template placed wrong place", "body": "source code define template div div gt script typetextxhandlebars gt someone helloafter rendered html becomes hello someone", "num": "9449", "d": "10/2014"}, {"title": "block triggering undesired computed property", "body": "template use block depends flag model false render basic html true render computed property model array case use also linkto template point route different model problem model changes model false flag computed property still triggered expected accessing property true part block reproduced problem js bin best make clear selfexplanatory would also like take opportunity thank emberjs wonderful team really making world better place thanks", "num": "9448", "d": "10/2014"}, {"title": "strange error buildiesafedom passing number directly variable", "body": "hey folks sure bug really strange edge case essentially case passing number directly non escaped handlebars yes clearly human error completely lost one sensible error message also results google fearful nt know anything done happy help debugging needs", "num": "9445", "d": "10/2014"}, {"title": "doc update deleting records update view", "body": "exactly sure docs go would wanted see something deleting records background quite new ember still spent last two hours long day trying figure deleted record view nt updating view panel template shows recent comment declared popup show comments functionality delete individually delete working would disappear list using persisting using looked ember plugin chrome data section sure enough record getting deleted nt view updating breakdown done google search everything could think finally somehow saw post deep interwebs said something property array might changing array almost bypassed thought well array changing removing one whole object kicks threw like know worked view updated know many read shake head ignorance newbie ember amateur javascript heavily rely docs feel like might somewhere appropriate put something effect deleting record object computed property relies make sure watching record whole object someone knows something like go happy pr maybe info already docs shape form takes several hours figure maybe obvious enough maybe mine edge case nt happen often still love ember", "num": "9443", "d": "10/2014"}, {"title": "potential jsc points concern", "body": "apple needs fix would consider high risk x x x x x would consider low risk following likely problem creating prototype still often use would likely prefer wait ones cause issues wild cc rwjblue", "num": "9441", "d": "10/2014"}, {"title": "property bindings settable properties component nt behave expected", "body": "settable property component depends another property properties set handlebars binding setter runs old value never gets triggered changes", "num": "9440", "d": "10/2014"}, {"title": "ember embermerge error mandatorysetter enabled", "body": "hey saw issue performing partial updates emberdata recreated experiencing using emberobject jsfiddle encountering performing partial update emberdata model already exists issue originates update jsfiddle use emberdata please let know relevant console output debug debug ember debug handlebars debug jquery debug uncaught error error assertion failed must use emberset set property lt unknown mixin gt", "num": "9437", "d": "10/2014"}, {"title": "performing differently", "body": "tested emberselect good bad ugly sometimes used old html selects use render last item selected rather first", "num": "9436", "d": "10/2014"}, {"title": "performance problem chrome", "body": "like bring attention serious performance problem chrome ubuntu present browsers eg firefox details please look following posted discussion forum hope helps", "num": "9435", "d": "10/2014"}, {"title": "error binding meta data template", "body": "seeing error trying bind meta data template upgrading ember see jsbin removing contentmetacurrent stops error", "num": "9433", "d": "10/2014"}, {"title": "mouse hover", "body": "hello new ember want hover mouse png file transparent exist right corner x button press removed store ideas example", "num": "9432", "d": "10/2014"}, {"title": "provide custom optionsdata object template", "body": "hi tried add formatjs ember app uses store messages cf providing object template seams impossible defines imagine clean integration", "num": "9431", "d": "10/2014"}, {"title": "broken ember", "body": "application shows ie quit unexpectedly ember problem look", "num": "9430", "d": "10/2014"}, {"title": "error removeobject store unloadall", "body": "upgraded ember get error try unloadall route problem occurs ember tries remove hasmany array record happens revisit record", "num": "9428", "d": "10/2014"}, {"title": "passing view instance template view helper fails", "body": "passing view instance view helper worked fine stopped working helper refactor fails logs message strange method class method called anywhere seems like helper nt identify properly instance name class", "num": "9427", "d": "10/2014"}, {"title": "overriding attribute assert", "body": "see jsbin clicking button logs nothing console change script tag reference emberjs build console output appears button click seems bad", "num": "9424", "d": "10/2014"}, {"title": "setting meta computed property replaces existing meta", "body": "currently possible add meta data computed property uses meta example creating properties ember data using dsattrdsbelongstodshasmany uses meta therefore available application also use issue specific ember data rather ember limitation current computed property api simply replaces meta provided argument use case simply needing track additional property specific meta data properties dynamically created using ember data also happens use meta currently must access directly cp set meta data evil given api solution currently would like rectify situation via pr allows merging cp meta data two obvious approaches use merge meta data instead replacing current api remove keys approach add accessor returns allow caller manipulate required prefer option preference consensus change accepted", "num": "9423", "d": "10/2014"}, {"title": "broken api emberobserver", "body": "could something like seems like list arguments passed callback looks like mention breaking change release notes sure understand point changing api plus lost valuable argument could used perform cleanup previously assigned value", "num": "9422", "d": "10/2014"}, {"title": "expose api get views bounding rect", "body": "used ember inspector cc teddyzeenny", "num": "9419", "d": "10/2014"}, {"title": "assert classnamebindings used tagless view", "body": "twokul", "num": "9418", "d": "10/2014"}, {"title": "classnamebindings nt get merged classnames tagless component", "body": "linked bin works nt work specifically classes div believe working recently ember realize nt common use case changed app accordingly thought file anyway mixonic said emberjsdev likely bug", "num": "9417", "d": "10/2014"}, {"title": "issue", "body": "property based setting value array dependent causes computed property automatically change reflect new array seems always provide empty array back jsbin working change ember script tag point beta build instead release see working", "num": "9413", "d": "10/2014"}, {"title": "order arguments switched ember", "body": "previously calling embermap invoked callback per item map looked like looks like order arguments switched", "num": "9412", "d": "10/2014"}, {"title": "ensure embercreate used remove strict mode", "body": "stopgap solution reported need move calls use also ensure module resides strict mode working changes wanted ensure included milestone nt forget", "num": "9403", "d": "10/2014"}, {"title": "debug advanced debugging install ember inspector", "body": "although installed ember inspector still get following message console every time start app little debugging see undefined following ifstatement google chrome ubuntu version minor issue still eyesore every time fire inspector", "num": "9399", "d": "10/2014"}, {"title": "npm run build failing node", "body": "using node ember build usersstocknemberjs ember build environment production version module selfregister error module selfregister error native moduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire require nvm install already installed using node macbookprodenicholas emberjs stockn npm run build ember build usersstocknemberjs ember build environment production version built project successfully stored dist", "num": "9394", "d": "10/2014"}, {"title": "observer emberget regression beta canary", "body": "property set without setter later observed longer access via worked fails canary remove observer everything works cc kategengler", "num": "9387", "d": "10/2014"}, {"title": "performance regression ember", "body": "eviltrout looking perf regressions ember move stuff forward would like start bug shows specific regressions butchered works beta running tests looks like html bindings test worst one real world discourse seems running half speed afford upgrade much would love resolve perf regression", "num": "9381", "d": "10/2014"}, {"title": "container performing lookup checking registry resolver", "body": "referring line code latest master commit whole resolve function javascript function resolve container normalizedname var cached containerresolvecache normalizedname cached return cached var resolved containerresolver normalizedname containerregistry normalizedname containerresolvecache normalizedname resolved return resolved seems backwards nt checking registry see factory explicitly registered falling back resolver check classes whose names match according resolver naming conventions rather way around practically speaking suppose two classes application initialization code want registered would expect object called would get instance instead gets instance seems wrong specific use case want instrument services unit tests tried simply subclassing service class registering subclass named factory javascript module mediaservice tests setup function var instrumentedservice appmediaserviceextend somemethod function testspecific code overriding default application code appreset overrides nontest application initialization code registers appmediaservice service media appcontainerregister service media instrumentedservice test nt work reason outlined instead mess around resolver get behavior want seems like sort case whole point container registerlookup model missing something", "num": "9380", "d": "10/2014"}, {"title": "action within link triggering link", "body": "following handlebars triggers action link according docs without bubblesfalse triggered", "num": "9378", "d": "10/2014"}, {"title": "testing would great also log unhandled promise rejections", "body": "would likely trick", "num": "9376", "d": "10/2014"}, {"title": "minor typo textsupportjs", "body": "packagesemberhandlebarslibcontrolstextsupportjs line reads whether event guessing read whether keyup event", "num": "9373", "d": "10/2014"}, {"title": "containeroptions seems actually populate optionsfortype", "body": "populating", "num": "9371", "d": "10/2014"}, {"title": "route properties observe properties route controller", "body": "route property observes property controller never gets triggered example fiddle example expect every time oscillator toggled function observeoscillator route called never gets called", "num": "9370", "d": "10/2014"}, {"title": "emberselect nt update selection data changed", "body": "jsbin two users next name link edit opens edit form form text inputs selects names cities types choose edit item entire form perfectly substituted data shows current city type select click edit link another item selects remains previous city type also save changes trying edit item changed fields discard changes waiting answer thank", "num": "9369", "d": "10/2014"}, {"title": "handlebars inside html comments assert", "body": "others see trouble migrating due usage handlebars expressions inside html comments like previously supported results entire view fails render console error safari chrome jsfiddle demonstrating issue", "num": "9365", "d": "10/2014"}, {"title": "components blocks properties set showing", "body": "got build chain switched handlebars latest canary many components stopped working basically narrowed components used like wo nt output errors output work output leaving property elementid property work correctly also works correctly without property set view apptestblockcomponent elementid someid content view view apptestblockcomponent content view nonblock level form also works correctly without property set jsbin see", "num": "9363", "d": "10/2014"}, {"title": "dose storefind always request server", "body": "userroutejs ary time select user route always request server nt save store first successful request", "num": "9357", "d": "10/2014"}, {"title": "publish npm", "body": "seems like pieces pretty much pushed need script publish thing missing something", "num": "9354", "d": "10/2014"}, {"title": "feature request groupby computed property", "body": "many projects group collection property leaves behind alot copied code looks something like quick google search found discussion alone request hoping something like", "num": "9353", "d": "10/2014"}, {"title": "bower vs packagejson", "body": "ember previous bower install puts emberjs root bowercomponentsember however emberjs includes breaks perhaps emberjs put subdirectory like lib bower distribution", "num": "9352", "d": "10/2014"}, {"title": "pass current dom object every events", "body": "hi pass current dom object every actions events view also router controller anything since ember uses jquery manipulate dom would helpful thanks", "num": "9351", "d": "10/2014"}, {"title": "programmatic dom manipulation triggering actions", "body": "trying improve unit test coverage adding tests particular dom elements use test helper nothing happens nothing mean get triggered use jquery add click handler click event happening clicking using jquery enter text element also nt trigger actions issues seem isolated tests either meaning running application use jquery click enter text application seem notice helps us understand seems disconnect get work", "num": "9350", "d": "10/2014"}, {"title": "binding simple array values embertextfield loop broken unusable", "body": "problem encountering simple array values loop typing input field updating value immediately focussed normal behaviour also binding basic example work binding embertextfield helper seems like bug something wrong", "num": "9349", "d": "10/2014"}, {"title": "ember array render", "body": "created like databinding works pretty well use array updates html use could fix ember stackoverflow", "num": "9348", "d": "10/2014"}, {"title": "notfounderror failed execute insertbefore node", "body": "get error regular basis rather unpredictable mostly running testem using beta everything ok anyone pointers look", "num": "9347", "d": "10/2014"}, {"title": "ember templates properly preserving white space ember", "body": "upgrading ember beta snippet longer outputting proper white space filteruser john doe output johndoe john doe used computed property filteruserfullname instead would properly display white space john doe", "num": "9346", "d": "10/2014"}, {"title": "unable test apps production builds", "body": "embertesting longer included wonderful reallife great testing production build application ember cli ability run tests production via worked perfectly likely need custom file injected ember application tests started running tests production", "num": "9345", "d": "10/2014"}, {"title": "subclass", "body": "hi great work emberjs even though hard understand angular love features would like ask print console gives string ex sample emberrouteextend consolelog sample prints subclass emberroute consolelog typeof sample function explain please", "num": "9341", "d": "10/2014"}, {"title": "ember crashes used along prototypejs could third party js", "body": "embedding ember app another environment prototypejs also used getting errors console ember application created emberapplicationcreate read documentation emberjs disabling prototype extensions tried steps suggested errors persists ember application crashes jsbin link please suggest possible solution note might repeated question since beginner confuses lot", "num": "9339", "d": "10/2014"}, {"title": "redirect hook parent route fired transition \u0430 child route", "body": "hi version emberjs fixed bugfix nt fire redirect parent routes transitions one child route another fix causes error following situation jsbin route posts declared redirect child route post using hook redirect first transition posts using navigation redirect works correctly however use navigation go back posts expected redirect happen method redirect called", "num": "9338", "d": "10/2014"}, {"title": "properties getting sync canary", "body": "updating property nt seem reflected example input display bound controller property stay sync clicking clear simply updates property nt affect input jsbin latest canary works latest beta mmun might stream related oddness", "num": "9337", "d": "10/2014"}, {"title": "bring back emberhandlebarsget", "body": "removed believe since marked private see docs try bring back number tools using links", "num": "9336", "d": "10/2014"}, {"title": "collectionview trigger observers parentview", "body": "view described following template handlebars input valueviewinputvalue view viewnestedview happens observer inputvalue never fired instantiate view nested collectionview weird thing observer triggered get parentview init method ie", "num": "9335", "d": "10/2014"}, {"title": "profile url sign", "body": "wondering way fix router profile url mimic way medium uses sign example tried couple solutions earlier nt able work", "num": "9334", "d": "10/2014"}, {"title": "unnecessarily removes readd items dependent key changes", "body": "using defined causes contents unnecessarily removed readded dependent key changes even item continues pass filter jsbin illustrates problem use case simply shown jsbin views animate dependent filter key changing often additionally particular views complex prefer frequently rerendering little bit digging discovered issue lies believe reducedcomputed enough knowledge know operation necessary however seems like way operation without unnecessary rerendering opening alternatives even ones nt use", "num": "9331", "d": "10/2014"}, {"title": "emberset even though enumerable", "body": "jsbin since uses expect valid property passed enumerate however get side note let know file separate issue trying create jsbin found causes error returned route hook probably due ember trying generateuse use return set model", "num": "9330", "d": "10/2014"}, {"title": "ember testing included emberprodjs emberminjs builds since", "body": "believe production builds need small possible need embertesting part production build look search embertesting search embertesting results cheers", "num": "9329", "d": "10/2014"}, {"title": "lack innerhtml support causes problems table rendering", "body": "table tr td fail render read issue poor support innerhtml several tags tested using jsbin latest version ember latest beta canary using vm jsbin url testing anybody idea resolved anybody else run htmlbars resolve visualjeff", "num": "9319", "d": "10/2014"}, {"title": "access model outside scope", "body": "hi need get access controller model script run outside ember scope also possible send actions way please give examples thanks", "num": "9317", "d": "10/2014"}, {"title": "handlebars helper duplicates content toggling visibility", "body": "simple template hbs isfoovisible foo simple controller expected result show hide foo many times want disappear reappear actual result gets duplicated every time foo shown metamorph tags keep nesting inside previous tag gets crazy foo shown html click show foo html foo click hide foo html foo show foo html foo foo hide foo html foo foo show foo html foo foo foo created jsbin demonstrating issue", "num": "9315", "d": "10/2014"}, {"title": "reducecomputed recomputes everything single change dependant property", "body": "please see following jsbin reproduces issue open console toggle checkbox see first calls effectively throws away result calls times thus recomputing based items array nt seem expected behaviour match api design appears intended minimize computation chance expected behaviour simplified instead mirror avoid current complex api would also like note clear documentation happens dependent property changes something else said nt callback jsbin example best guess something seems work question marks drove start logging callbacks occur discovered issue", "num": "9313", "d": "10/2014"}, {"title": "parent cancels submit events", "body": "appears using action prevent submit actions happening forms really understand possible jsbin cookbook implementation modal slightly changed use form nest modal inside overlay div truly puzzles event never triggered form even binding console ie missing something bug", "num": "9310", "d": "10/2014"}, {"title": "ember gt uncaught typeerror read property parentnode null", "body": "embercli application upgrading get error application start uncaught typeerror read property parentnode null function debug ember debug ember data debug handlebars debug jquery huge project tried isolate problem luck", "num": "9307", "d": "10/2014"}, {"title": "issue using inside references parent component context", "body": "use helper inside component try use helper references context component inside value condition passed helper rendered html example handlebars tags viewcanremove value rendered html instead contents block jsbin reproduces issue", "num": "9304", "d": "10/2014"}, {"title": "feature flag set true build canary ember errorwarn", "body": "", "num": "9302", "d": "10/2014"}, {"title": "stefan please fix map test failures masterbeta", "body": "", "num": "9301", "d": "10/2014"}, {"title": "emberenumerableutilsindexesof design broken returns", "body": "returns array matching indexes matches obviously would return empty array right returns array single element makes impossible simple search see matches instead examine array make sure first element api supposed return array matches matches would seem array empty minimum design changed reasons backward compatibility documentation highlight lessthanoptimal behavior", "num": "9300", "d": "10/2014"}, {"title": "embercomponent attributebindings nt work namespaced attributes eg xlink href", "body": "following code produces undesired results js export default embercomponentextend tagname image attributebindings src xlink href x width height src mericuhflaggif ends setting rather suggested workaround ebryn use observer manually set fine", "num": "9298", "d": "10/2014"}, {"title": "unable sustain query parameters linux", "body": "linux browsers remove query string placed url hash requesting open cutting query string hash issue observed ubuntu current stable releases chrome firefox possible solution might move query string location hash", "num": "9296", "d": "10/2014"}, {"title": "binding stop working select multipe true", "body": "select multipefalse works change multipletrue bindings stop working app emberapplicationcreate approutermap function put routes appindexcontroller emberobjectcontrollerextend selectedserviceflavours embercomputeddefaultto serviceflavoursfirstobjectmyvalue serviceflavours function return name myvalue name myvalue name myvalue property select", "num": "9295", "d": "10/2014"}, {"title": "route transition nt work working modal", "body": "working modal using tutorial ember website difference trying make modal template outlet another template make reusable opened modal rendered modal outlet exactly try make transition another route nt work write default behavior rendertemplate target route works commented jsbin bug handled thisrender properly", "num": "9294", "d": "10/2014"}, {"title": "computed property model obfuscates view", "body": "refactoring use views deprecation warning change made views working fine particular case failing strange message uncaught error assertion failed looking xx xx xx view lt namespace namespace could found turns computed property somewhat similar name property picked template rendering view name tried removing quotes luck could say problem code view called property name would agree names different enough one suffix view starts uppercase accepted practice ember property starts lowercase also accepted practice solve problem without real justification workaround ember quirks renamed property maybe safe way go properties seems work", "num": "9293", "d": "10/2014"}, {"title": "packagesembermetalliblibrariesjs nt idiomatic js", "body": "packagesembermetalliblibrariesjs likely js function libraries thislibraries librariesprototype etc export default libraries", "num": "9291", "d": "10/2014"}, {"title": "default readonly cp", "body": "add writable mode put ember cp readonly default update internals use writable correctly make test suite also run flag likely use feature flag tech currently flag", "num": "9290", "d": "10/2014"}, {"title": "remove emberenvcpdefaultcacheable old", "body": "", "num": "9289", "d": "10/2014"}, {"title": "backburner needs updated", "body": "nt chance yet doit evening noone time tl dr changes reduce cost trying flush empty queues commit combine queueflush deferredqueuesflush commit x update bb ember x confirm embers tests still correctly pass", "num": "9287", "d": "10/2014"}, {"title": "render helper dynamic view names", "body": "im ember seems code render helper explicitly causing reject googling reading source check happening created new helper simply forcing values javascript emhandlebarsregisterboundhelper renderdynamicview function name model options optionstypes string id everything seems working exactly expected trivial hack must something missing guides source seem understand render helper even rejecting begin anyone help understand", "num": "9286", "d": "10/2014"}, {"title": "ability avoid creating dummy parent div class emberview", "body": "ember enforces creating parent div created components view", "num": "9285", "d": "10/2014"}, {"title": "shared repository internal ember testing helpers", "body": "eg friends super nice could emberdev like bower repository testing helpers stop cheating p copying ember data nt owner rights organization somebody could make repository add release team comitters pretty cool", "num": "9283", "d": "10/2014"}, {"title": "create pair bound properties across two disconnected objects emberbind", "body": "follow seems like op question properly understood believe valid use cases suggesting let rephrase right api following property paths relative api lacks flexibility two object instances create binding using following scenarios exists path globally accessible instance eg singleton two objects apparent connection create pair bound properties directly like api would javascript emberbind object objfrom string pathfrom object objto string pathto var emobjectcreate foo var emobjectcreate bar embind would first define property either one reference end pair ie var emobjectcreate foo var emobjectcreate bar embind opinion elegant pollutes hash good reason", "num": "9281", "d": "10/2014"}, {"title": "types arguments passed bound handlebars helpers changed", "body": "types arguments passed bound handlebars helpers changed jsbin demonstrating difference alternate commenting versions", "num": "9280", "d": "10/2014"}, {"title": "enumberable invoke throw iscallable", "body": "likely raise foo available iscallable without merely hides mega bugs clearly would breaking change though", "num": "9279", "d": "10/2014"}, {"title": "index range error using multiple sort properties", "body": "nasty one issue occurs inside removeitem array computed callback finding correct index item whose observed sort property changes binary search return bad index due internal order function properly reporting item order happen multiple sort properties one changes previous values changed sort property equivalent change moves item side midpoint array due change introduced commit sort property looked item without problem instance created meta object obviously contain unchanged sort properties means unchanged property looked directly line uses comparison instead actual sort property jsbin issue bugfix commit corrects still valid see ways address new one check sort property proxy object accessing directly overhead simple add sort properties creating search proxy object probably overhead previous solution still simple address original issue directly somehow sure possible since would likely require overriding stop using binary search altogether use assume done originally performance large lists probably maintain index mapping objects index never even needs found also assume memory reasons mmpestorich hjdivad thoughts also possibly related", "num": "9278", "d": "10/2014"}, {"title": "calling set computed property deletes binding", "body": "amazed never seen guess deliberate seems unexpected call property permanently overwrites computed property obviously get around using computed property interestingly omit argument computed property calling set overwrites property think unexpected would much clearer threw exception rather permanently diverging intended behaviour", "num": "9276", "d": "10/2014"}, {"title": "ember maximum call stack size exceeded ember command", "body": "unfortunately still bit new emberjs javascript general issue started project ember working great bit learning curve things going fine hit point upgrade version ember embercli working followed steps one upgrading new version ember brings us version followed steps directory ember project usual enter command ember make sure running correct version get version awesome got right version maximum call stack size exceeded hmm first certain something project first attempt tried ember init run new project blueprint project directory also tells maximum call stack size exceeded fails considering project working fine updated version ember using certain something project case feel like simply entering command ember still work normal cause error details needed somewhere specific please let know provide also relevant even ember v reports back correct version followed maximum call stack size exceeded also relevant working windows", "num": "9273", "d": "10/2014"}, {"title": "remapped query params correct url model hook", "body": "please see following jsbin replication problem experiencing app building remapping query parameters get pushed url correctly ie snakecased version however model hook receives camelcased version problem model hook pass parameters like hit api snakecased params like url right written hacky code remap correct overrides provided controller expected behaviour", "num": "9270", "d": "10/2014"}, {"title": "extendprototypes false default", "body": "currently ember extends builtin prototypes amp default although ember nt require extensions disabled enabled default tend stay way evident sites like vine twitch nbcnews amp discourse using default settings problem adding methods like amp increases likelihood used cause problemsroadblocks future builtin language extensions example tried add behaved different way ember newer environments would get builtin version older would get ember causing inconsistency increased possibility breaking thing seen recently mootools happened even", "num": "9269", "d": "10/2014"}, {"title": "routerhandleurl nt work rooturl set router", "body": "machty kinda confirmed expected behavior", "num": "9268", "d": "10/2014"}, {"title": "createrecord updating list queryparams present", "body": "list shows users name taken export default emberrouteextend queryparams q refreshmodel true setup like action quickly adds one record user store problem executing action list nt update however changed model hook works perfectly nt know bug done something wrong", "num": "9267", "d": "10/2014"}, {"title": "unconsumed computed properties triggering observers", "body": "sure bug intentional change documentation nt updated broke bunch code updated ember figured point either fixed documentation updated explains unconsumed computed properties trigger observers however appears ember nt true certain computed properties namely maybe others tested consider following script snippet run ember produces console output run ember produces computed properties unconsumed alias oneway readonly computed properties triggered observers bool manuallyspecified computed properties perhaps desired documentation needs updating really intentional would inconsistent certain computed properties trigger observers unconsumed others", "num": "9265", "d": "10/2014"}, {"title": "using parent context helper changes context entire block", "body": "given following template model expect output instead appears ember handlebars changing context within helper block used reference parent context jsbins ember handlebar output normal handlebars output", "num": "9263", "d": "10/2014"}, {"title": "setting dsmodel array property defaultvalue caches property", "body": "model property defined follows subsequent instances model initialise contents held last loaded model makes properties defined way behave singleton strings booleans seem behave properly", "num": "9260", "d": "10/2014"}, {"title": "deferred readiness", "body": "helped someone irc rather annoying track issue attempting run simple integration test like javascript module acceptance channels setup function app startapp teardown function emberrun app appdestroy test page contents function expect visit andthen function ok true got unfortunately initializer called wait application ready async initializer case need one following error advances readiness application ready state cause wait application ready", "num": "9259", "d": "10/2014"}, {"title": "typo docs", "body": "small typo emberrun documentation page invokes passed targetmethod optional arguments specified period time", "num": "5678", "d": "10/2014"}, {"title": "update back burner", "body": "fixed regression least bug fix beta might release think merely beta though nt time upgrade ember today client work maybe someone else time noone likely able late tonight tomorrow", "num": "5674", "d": "10/2014"}, {"title": "queryparams nt work lazy loaded code", "body": "hi queryparams simply nt work lazy loaded code shown jsbin step backwards one previously queryparams implementation code worked fine nt remember flag enable sorry get way making ember modular guess something needs fixed meanwhile possible workaround hint helpful thanks", "num": "5672", "d": "10/2014"}, {"title": "ember enumerable align array contains", "body": "moment ember contains match values support like array contains cause inconsistency ember adds", "num": "5670", "d": "10/2014"}, {"body": "ordering nt documented guaranteed nt technically bug defer mmun krisselden", "d": "10/2014"}, {"body": "talked briefly capturelike phase called top bottom clear changed nt know old code well new render much easier reason", "d": "10/2014"}, {"body": "change documented changelog release blog post regressionbug fixed", "d": "10/2014"}, {"body": "duplicate scent", "d": "10/2014"}, {"body": "ah whoops thank sir fast usual", "d": "10/2014"}, {"body": "duplicate fixed providing helpful assertion released hopefully next days", "d": "10/2014"}, {"body": "updated jsbin current release build showing assertion assertion failed use class attributebinding use classnamebindings instead", "d": "10/2014"}, {"body": "sorry dupe thanks info assertion", "d": "10/2014"}, {"body": "sounds like bug also calling explicitly", "d": "10/2014"}, {"body": "general via plain continuata provide jsbin reproduces bug", "d": "10/2014"}, {"body": "creating multilevel validation mixin observes triggers validation contained models forcing notification validation triggered simple workaround instance trigger validation directly notifypropertychange behaviour obviously correct raising", "d": "10/2014"}, {"body": "continuata suspect emberdata issue please also provide failing test emberjsjsbincom", "d": "10/2014"}, {"body": "rwjblue stefanpenner give minutes ember exactly quick get running scratch", "d": "10/2014"}, {"body": "continuata base jsbin ember data", "d": "10/2014"}, {"body": "rwjblue thanks post replicated", "d": "10/2014"}, {"body": "rwjblue jsbin nt work throws errors typeerror read property create undefined", "d": "10/2014"}, {"body": "continuata updated also opened update jsbin", "d": "10/2014"}, {"body": "rwjblue ca nt reproduce jsbin investigate post could version using", "d": "10/2014"}, {"body": "temparary fix need figure fix going", "d": "10/2014"}, {"body": "template positioning nt related place script tags please read ember oficial guides great", "d": "10/2014"}, {"body": "miguelcobain thks ur reply way place rendered template specified div", "d": "10/2014"}, {"body": "could answer afraid missing important points ember control place application main template rest hierarchy must laid using ember conventions really nt something explain also really respecting guidelines contributing places like stack overflow ember discuss better kind questions final advise please follow ember guides really great read bit questions soon disappear believe", "d": "10/2014"}, {"body": "agreed miguelcobain try keep issue tracker focused bugs ember sorts questions asked stackoverflow andor irc", "d": "10/2014"}, {"body": "need convert buffer string pushed nt able add numbers render buffer", "d": "10/2014"}, {"body": "nt ensure string internally convert", "d": "10/2014"}, {"body": "instructs listener detect array replaced content changed suspect need exists otherwise ambiguity watching arrays", "d": "10/2014"}, {"body": "way preferred version prone failure hacky happens work regardless stefanpenner think belongs docs somewhere explanation computed property watch contents object rather object whole", "d": "10/2014"}, {"body": "jdhines would surprised nt docs imagine hard search ca nt find find nt clear lets fix open appropriate pr gladly iterate wording solution specification nt actually care merely care dk dependent key", "d": "10/2014"}, {"body": "accurate solution", "d": "10/2014"}, {"body": "seems pretty straightforward well little clearer want watch things thinking section page computed properties object since examples observing singular fields", "d": "10/2014"}, {"body": "jdhines nt actually want watch things merely want know changes correct", "d": "10/2014"}, {"body": "stefanpenner yes guess correct use case since showing firstobject thinking along lines recalculate time length changes", "d": "10/2014"}, {"body": "yes remember things nt change length mutate place need use", "d": "10/2014"}, {"body": "docs nt exist think add seems belong website repo guide", "d": "10/2014"}, {"body": "fix high risk items", "d": "10/2014"}, {"body": "rwjblue could transform issue metatracking issue wanted", "d": "10/2014"}, {"body": "stefanpenner sounds good", "d": "10/2014"}, {"body": "tired look fresh eyes tomorrow appears work correctly update cp following output might wondering nt invalidate since declares dependency also expected behavior values passed via component property provided object initialization time means basically js emberobjectcreate init function thisset inconsistent foo inconsistentdidchange function nt fire due values introduced initialization observes inconsistent properties set initialization time emit change events prime value changes postinit emit change events nolonger prime values reason consistency performance want clarification go detail", "d": "10/2014"}, {"body": "nt want claim value passed value actually want current value real code value depends last set value stored current value fuller version cp output want correct happens simpler case", "d": "10/2014"}, {"body": "sohumb sorry hit enter expected expanded response explain expected behavior tl dr values provided initialization propagate change events object becomes observable initialization", "d": "10/2014"}, {"body": "right makes sense properties set initialization time would nt fire change events expect values see computed properties also reliably said initialized values bug set sees invalid value value according ember model never valid", "d": "10/2014"}, {"body": "sohumb setting initialization thus change events change post render see change events means nt invalidate due initialized value different value prototype", "d": "10/2014"}, {"body": "expecting change events expecting value seen inside initialising valid", "d": "10/2014"}, {"body": "expecting value inconsistent seen inside settable valid explicitly setting initialization causes cached value consumed cache read never called invalidated cache containing purged listeners notified consumed invoked value expect returned", "d": "10/2014"}, {"body": "oh hmm", "d": "10/2014"}, {"body": "cached value per result run time invalid value", "d": "10/2014"}, {"body": "ok bad gone sleep p said still seems like totally correct behavior time settable set return value cached yet set reads prototype", "d": "10/2014"}, {"body": "vs yield two different results order dictates setting order although unsure order documented guaranteed remain today set first read updated set first read reason hungup change events assuming thought setting would invalidate causing emit consumer would force cp recompute rereading property would value expect computed properties object initialization work like explicitly prevent churn", "d": "10/2014"}, {"body": "ultimately likely guarantee ordering component properties sets believe numeric keys abide implied insertion based ordering document would nervous rely mmun thoughts component property ordering continuing preserved way component initializations", "d": "10/2014"}, {"body": "hey going weigh issue stefanpenner late please come back morning", "d": "10/2014"}, {"body": "writing english domain words mindfuck", "d": "10/2014"}, {"body": "concern pushing subtle bug consumers component ie make sure put template using component else totally work possible work around using pushing bug component author may never realise issue usage properties right order also nt like lexical order significant obvious significant template one possible solution check dependant keys properties set constructor make sure set order works", "d": "10/2014"}, {"body": "would like see realworld example problem nt believe exists would like frame potential solutions around concrete examples agree ordering matters frustrating case component author subjected consumers implicit ordering dependency believe one assume system resolve implicit ordering lt strongly suspect real example restructured alleviate constraint provided example lacks context know ca nt changed", "d": "10/2014"}, {"body": "im going head sleep leave concrete example provide feedback inpractice way cp tricky case actually relying collaborator expands problem domain inall reality authored explicitly throw ordering violated believe primary failure scenario initialization point time check could guard throw accordingly believe failure normalized later life cycle dk would cause invalidate thereby informing consumers reconsume yielding expected value ultimately refactoring remove dependency strongly considered lets see examples look like would great derive better pattern mitigate class problem", "d": "10/2014"}, {"body": "okay concrete example let discuss tomorrow", "d": "10/2014"}, {"body": "fyi related fact component pass options object create time properties set order provided one possible solution check dependant keys properties set constructor make sure set order works theory good idea would likely negatively impact performance calls unsure", "d": "10/2014"}, {"body": "given example pretty sure want cp downstream consume allows data settle final answer extracted", "d": "10/2014"}, {"body": "aexmachina suggest using init hook properties must set order believe implying static values always set cps since cps dependent keys nt robust solution race condition grappling must know values two properties cps static props think thing use fairly certain way remove racewhoisfirst problem entirely start thinking examples two cps instead cp static prop see mean", "d": "10/2014"}, {"body": "nt robust solution race condition grappling also would change refactor internals class moving raw properties cp cps row properties seems ok result problem mentioned properties refactored cp", "d": "10/2014"}, {"body": "think settled bug using resolve sorts race conditions path forward", "d": "10/2014"}, {"body": "observer would also work well many use cases better explaining property differs function takes argument", "d": "10/2014"}, {"body": "okay agree although pretty sure sohumb bristle trading performance correctness case problem solved using another computed property definitely subtle gotcha though nt know communicated anywhere writing ember code years nt know lexical order significant object initialization long avoid issue consumers happy", "d": "10/2014"}, {"body": "nt even think trading performance correctness think implemented efficiently merely simpler model nt rewrite ordering", "d": "10/2014"}, {"body": "clear recommend using recommend using function runs properties set example jsbin rewritten aexmachina think dependent keys like roots property property set serialize dependent keys key like disabled modified set must question information expressed setting draggable gone asked draggable value setting would always get answer properly written computed property answer always yes well pretty much refactored example property dependent keys upon init disabled value changes proactively set draggable better expresses want happen relationship properties oneway make sense property setters method calls caching rules use make efficient specific meaning start relying sideeffects value properties setter meaning starts violated sorry wish could express thinking bit better hope helps", "d": "10/2014"}, {"body": "also clear root issue nothing creationtime properties imagine app let toggle draggable disabled would behave differently depending order user clicked buttons", "d": "10/2014"}, {"body": "imho optimal solution use another computed property also mixonic issue indeed caused createiontime properties fact ember nt notify changes properties initialization think totally fine original property entirely consistent although bit strange setting true getting false long notified changes", "d": "10/2014"}, {"body": "imho optimal solution use another computed property", "d": "10/2014"}, {"body": "omarestrella correct objects observed properties bound templates regular property setter based setter set value using object observed must use suggest using", "d": "10/2014"}, {"body": "mixonic ember data jsbin mostly repro issue", "d": "10/2014"}, {"body": "understand behavior technically correct issue used store pushes without taking account partial use case stands call partial loads", "d": "10/2014"}, {"body": "gotcha omarestrella emberdata issue ed using incorrectly", "d": "10/2014"}, {"body": "okay great thanks report issue emberdata", "d": "10/2014"}, {"body": "mixonic nt believe bug ember data merges private intended observable", "d": "10/2014"}, {"body": "last item selected canary working properly", "d": "10/2014"}, {"body": "seems like regression", "d": "10/2014"}, {"body": "yeah need know going permanent adjust needed qa group caught quick original message robert jackson sent pm emberjsemberjs cc hal diggs subject emberjs performing differently seems like regression reply email directly view github context issue github action type viewaction url issue", "d": "10/2014"}, {"body": "haldiggs jsbin pasted show works properly canarymaster builds work properly release permanent regression added issue milestone would like track fix days possible", "d": "10/2014"}, {"body": "thanks much usual team ember shows professional side wed oct pm robert jackson notifications githubcom wrote haldiggs jsbin pasted show works properly canarymaster builds work properly release permanent regression added issue milestone would like track fix days possible reply email directly view github hal diggs non sibi sed patriae self country half communications listening ca nt listen mouth", "d": "10/2014"}, {"body": "lazy addition options dom cause issue", "d": "10/2014"}, {"body": "also occurs ff", "d": "10/2014"}, {"body": "safari", "d": "10/2014"}, {"body": "turns canary nt fixed issue canary build publishing introduced fixed last night means commit broke following list likely labeled", "d": "10/2014"}, {"body": "rwjblue mixonic looking", "d": "10/2014"}, {"body": "commit seems causing grief", "d": "10/2014"}, {"body": "points following list commits htmlbars", "d": "10/2014"}, {"body": "almost certainly", "d": "10/2014"}, {"body": "mixonic rwjblue pr fix issue upstream sadly lack context continue looking try understand pr merged pr ember update sha", "d": "10/2014"}, {"body": "twokul pr looks right type variable changed silently succeeding", "d": "10/2014"}, {"body": "sorry reopen githubcomemberjsdata get appropriate eyes", "d": "10/2014"}, {"body": "done good luck", "d": "10/2014"}, {"body": "number issues js bin sure actually error much oversight return array model trying access property model single item array additionally model nt property query performing attempting match string property model also present", "d": "10/2014"}, {"body": "runspired accessing meta property array worked used pagination makes sense able access meta properties array scenario also define property meta model see", "d": "10/2014"}, {"body": "ah see sure able access way believe need access meta findquery via", "d": "10/2014"}, {"body": "ember working ember broken", "d": "10/2014"}, {"body": "charlieridley right back well documentation used able fetch metadata fact open console run store hand still works something decidedly wrong internals ember computed property autoupdating templates broken", "d": "10/2014"}, {"body": "foxnewsnetwork put hack make work bind metadata template", "d": "10/2014"}, {"body": "similar jsbin showing failure storemetadatafor seems show whenever template directly renders something metadata object nt problem components paginator interacting metadata also charlieridley works great temporary solution thanks", "d": "10/2014"}, {"body": "folks definitely looks like emberdata issue reason ca nt move discussion", "d": "10/2014"}, {"body": "mixonic could emberdata think comment foxnewsnetwork considered something decidedly wrong internals ember computed property autoupdating templates broken meta property accessible controller template would suggests might fact related changes", "d": "10/2014"}, {"body": "definitely bug mandatory setter code working tracking things teaser", "d": "10/2014"}, {"body": "mixonic working fix screenshot pasted", "d": "10/2014"}, {"body": "ember observers seem handle objects created well", "d": "10/2014"}, {"body": "mixonic objects observed used exclusively fastsafe internals actually want support observing objects", "d": "10/2014"}, {"body": "stefanpenner issue nt directly observer system mandatorysetter calling object also pretty common use ember data meta tracking things like current page max page would create observer would used template", "d": "10/2014"}, {"body": "think impedence mismatch ember considers meta object internals ember data considers meta hypermedia perspective current page find info etc like rwjblue brought", "d": "10/2014"}, {"body": "fivetanley agreed meant ember data meta", "d": "10/2014"}, {"body": "ember data meta tracking things like current page max page could assume null prototypes non observable opt observer treat unbound nervous pollute objects ember meta required observations", "d": "10/2014"}, {"body": "appears benefit null prototype neither internal needing safe fast cache misses restore back pojo", "d": "10/2014"}, {"body": "think default enumerable true based object presume answer true ca nt get tonight morning tomorrow tests stefanpenner agree probably wrong ed return kind object also support displaying still fix", "d": "10/2014"}, {"body": "mixonic seems like derived separate fixes remains want enable observing objects suspect yes although unsure want pollute meta suspect although feels strange", "d": "10/2014"}, {"body": "belongs stack overflow discuss please ask question want come back leave link question", "d": "10/2014"}, {"body": "thodwris please feel free link back issue opened discuss post", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "general would like nice story formatjs need dig literature see actually done know integrate better", "d": "10/2014"}, {"body": "michaelklishin please fairly certain ember tests passing checked revisions release commit tests could missing something", "d": "10/2014"}, {"body": "good hear thanks keeping us posted", "d": "10/2014"}, {"body": "bad news see attachment", "d": "10/2014"}, {"body": "please share repro simple tests seem work properly", "d": "10/2014"}, {"body": "similar described jamesreggio end", "d": "10/2014"}, {"body": "michaelvdheeren would love repo based starterkit simplicity pull test also comment talking using ember describing possible ember issue directly", "d": "10/2014"}, {"body": "indeed including nt problems", "d": "10/2014"}, {"body": "michaelvdheeren yup laying blame need reproduction able triage fix", "d": "10/2014"}, {"body": "seems call unloadall related records well", "d": "10/2014"}, {"body": "ablanco provide small jsbin demonstrates issue", "d": "10/2014"}, {"body": "code jsbin code crashes remove second view helper template render properly second view helper one trying load view instance instead view class line removing line everything works line template ember crashes nt recognize view instance change line loading ember order load ember work fine even second view helper template seems like regression ember", "d": "10/2014"}, {"body": "smells like regression", "d": "10/2014"}, {"body": "agreed", "d": "10/2014"}, {"body": "fixed stable branch still needs updates streamified master branch closing", "d": "10/2014"}, {"body": "thanks quick fix", "d": "10/2014"}, {"body": "closing issue pr master pending review already fixed stable", "d": "10/2014"}, {"body": "console output appears click jsbin want action raise thissendaction need wrap action quotes assign value controller", "d": "10/2014"}, {"body": "fivetanley suspect edited jsbin stays streaming take look forked original", "d": "10/2014"}, {"body": "fivetanley easy trigger finger hoss", "d": "10/2014"}, {"body": "discussed irc issue forces classes attribute element include required somewhat surprised worked older versions think attempt restore previous imho flawed older behavior however need nice assertion tells someone done something wrong recover flagging milestone assertion", "d": "10/2014"}, {"body": "updated title reflect last comment", "d": "10/2014"}, {"body": "adds assertion", "d": "10/2014"}, {"body": "rwjblue process updating noticed regressions used pattern components component consumer pass arbitrary number es component also use internal made component api little understandable imho mistaken need instead would suggest moving forward thanks", "d": "10/2014"}, {"body": "aortbals work ultimately everything gets merged classnamebindings see inherited sproutcore ideas clean expect rfcs soon", "d": "10/2014"}, {"body": "ahacking extremely hesitant suggest cp meta data public api ember must keep lowlevel apis private ensure migrate better optimizations abstractions time yet current use meta emberdata probably code smell storing emberdata level metadata cp seems wrong propose specific use case understanding looking", "d": "10/2014"}, {"body": "mixonic method already public api want use exactly intended purpose annotate computed property however way api currently defined ability actually use meta impacted library like ember data also needs annotate properties currently calling replaces existing meta data api seems bit broken nt fully support intent described documentation proposing support merge semantics meta computed property distinct metaforproperty cp mixed onto object easily chain eg", "d": "10/2014"}, {"body": "merge seems reasonable would still slightly concerned property collisions", "d": "10/2014"}, {"body": "stefanpenner yes collisions always issue could mitigated somewhat library best practice use single key libraryfoo host meta hash", "d": "10/2014"}, {"body": "could mitigated somewhat library best practice use single key libraryfoo host meta hash yes toplevel key per library something merging moving ed key", "d": "10/2014"}, {"body": "ok work pr doc changes best practice libraries nt looked inspector know changes ds meta keys likely trip use cooked attribute relationship enumerators", "d": "10/2014"}, {"body": "teddyzeenny", "d": "10/2014"}, {"body": "nt think inspector would affected long methods like remain anyway code inspector ed tested", "d": "10/2014"}, {"body": "herriau nt think anything way check pr", "d": "10/2014"}, {"body": "twokul apps make use went versions ember since issue never come everything working perfectly fine", "d": "10/2014"}, {"body": "herriau hm jsbin output array two items misunderstanding", "d": "10/2014"}, {"body": "herriau callback signature changed produce jsbin demonstrating behavior describing", "d": "10/2014"}, {"body": "rwjblue well emberrassing ca nt reproduce issue guess bower ignored tricked using older version ember closing", "d": "10/2014"}, {"body": "herriau awesome thank following", "d": "10/2014"}, {"body": "would like end week focus beyond timing pr adding support", "d": "10/2014"}, {"body": "one hour one hour coffee ready", "d": "10/2014"}, {"body": "mixonic haha submit pr thanks opening issue matthew", "d": "10/2014"}, {"body": "wanted track milestone", "d": "10/2014"}, {"body": "twokul would like end week focus beyond pr ready review tonighttomorrow", "d": "10/2014"}, {"body": "rwjblue sure thing wondering throw warning instead assertion using causes lot grief mixonic thoughts", "d": "10/2014"}, {"body": "mentioned think assert explicitly specified blank tag names strong assert makes sense example implicitly tagless view converted div add", "d": "10/2014"}, {"body": "specifying tagname class classnamebindings classnames assert completely rails scenario us decipher conflicting intent question assert vs warn think assert makes sense real way proceed expected way", "d": "10/2014"}, {"body": "mixonic break take look", "d": "10/2014"}, {"body": "twokul weird use case unsure fails bindings used merged nt seem appreciate looking think bug significant enough divergence behavior violate semver sure would like thoughts research", "d": "10/2014"}, {"body": "mixonic check avoids parsing empty string since set empty string imo nt make sense parse nt attach maybe warn developers specified empty string help avoid confusion bugs violating semver obviously bad would hesitant bring behaviour back", "d": "10/2014"}, {"body": "twokul agree assertion would enough whip something get master expect release next week two meirish going call correction bug new bug think twokul logic makes sense performance argument real friends supposed spec classes view element view nt element nt reason process suggest writing custom cp use case instead relying old behavior", "d": "10/2014"}, {"body": "mixonic amp twokul thanks agree makes sense thanks hard work well", "d": "10/2014"}, {"body": "since beginning ember time presence classnames classnamebindings enough make view render div instead metamorph ok performance improvement think would good assert development view andor defined empty", "d": "10/2014"}, {"body": "lukemelia tagname classnamebindings exist certainly assert right means confusion intent apply noop ember sure else would apply possibly div already", "d": "10/2014"}, {"body": "throw exception", "d": "10/2014"}, {"body": "seems bad rwjblue believe make beta flagged bad noticing", "d": "10/2014"}, {"body": "cherrypicked travis builds seem pretty backed moment adamferguson test latest beta build completed", "d": "10/2014"}, {"body": "mixonic rwjblue seems working latest beta build thanks much", "d": "10/2014"}, {"body": "related calling logs deprecation notice bc checks attribute provided object attribute deprecated favor maps sure embermap supposed able provided thought bring", "d": "10/2014"}, {"body": "adamferguson private api sync standard thus motivation change emberdata uses polyfill allow computability across old new versions ember unsure behavior sounds like untested since deprecation would raised error builds", "d": "10/2014"}, {"body": "bug fix", "d": "10/2014"}, {"body": "closing favor", "d": "10/2014"}, {"body": "mixonic awesome thanks pointing direction polyfill compatibility makes sense", "d": "10/2014"}, {"body": "moved separate module", "d": "10/2014"}, {"body": "nicholasjstock although causes issues ember bug embercliyuidoc likely using execsync", "d": "10/2014"}, {"body": "could cloned master confirm embercliyuidoc problem close thanks", "d": "10/2014"}, {"body": "stack trace says error originating", "d": "10/2014"}, {"body": "giant brain dump using mandatory setters current value given property returned instead watchers property watchkey canary using setup mandatory setter property exists object time call provided example jsbin property exist object prototype therefore mandatory setter function get setup see updated jsbin showing set prototype mandatory setter assertion fires properly never initialized means always see allows jsbin work properly forward handling previous mandatory setter stuff different way unused paths completely removed production development builds means since setting without object maintained setup since could known set property directly value returned tldr ultimately think poor error bug functionality incorrect lack proper assertions set property object time watcher setup", "d": "10/2014"}, {"body": "pr submitted provide assertion watched property retrieved via set without original jsbin pr needs bit assistance completed one failing test need help", "d": "10/2014"}, {"body": "part mandatory setter feature flag removing milestone list block release discussed rwjblue", "d": "10/2014"}, {"body": "reparses output handlebars align future htmlbars backed templates suspect explain difference believe reparse least improved clever caching unfortunately take away time final solution spare time may worth looking take closer look example", "d": "10/2014"}, {"body": "ran test actually looks ok leaving open get representative repro going", "d": "10/2014"}, {"body": "nt think testing think time measured appears gap waiting next runloop believe might indicate something maybe excess gc", "d": "10/2014"}, {"body": "real world discourse seems running half speed afford upgrade much would love resolve perf regression get reproduction ideally isolation", "d": "10/2014"}, {"body": "made updates benchmarks reviewed show actually considerably faster tests atworst par rest please review benchmarking hard totally possible also trolling", "d": "10/2014"}, {"body": "looking discourse home page vs using chrome canery timeline flame charts see interesting picture ember vs ember noticing huge increase amount time stuff loaded dom vs somewhat expected metal rendering however seeing general gain around scripting times vs zoom single row topic list see see phases create element cosing us scripting loading followed another bit dom building takes another majority time spent parsing dom think enough info create representative test key list say components experiment direct vs templated renders repro quite simple need dev box running discourse replaced emberjs file", "d": "10/2014"}, {"body": "first glance appears regression stated normalization needed get htmlbars believe improve throughput hard work htmlbars improve could use extra peoplepower continue digging ensure additional regressions exists reduce even bottle necks please note also see many performance improvements hopefully reduce overhead around win samsaffron concrete isolated examples provide actionable stuff become also way run discourse get datapoints numbers bit bad apple restores much", "d": "10/2014"}, {"body": "also reference updated test numbers runs render list render list objectcreate objectcreate template bindings template bindings html bindings html bindings", "d": "10/2014"}, {"body": "stefanpenner definitely confirm bit problem benches added complex list example bench suite look looking chrome stable complex list first run complex list third run interesting data points looking timeline though interesting much pronounced perf effect due new rendering techniques look lot faster yet reach parity running discourse get complex test run faster fairly likely discourse also run faster testing mbp noticed larger perf degradation vs firefox faster test vs need fix test suite work ie", "d": "10/2014"}, {"body": "samsaffron thanks update spend time evening new test", "d": "10/2014"}, {"body": "gon na little work today btw get concerned known performance regression easily patched", "d": "10/2014"}, {"body": "eviltrout yes focus without performance regression would interesting datapoints", "d": "10/2014"}, {"body": "yep ships weekend definitely effort go patches probably apply cleanly master continue valuable streams rewrite binding layer land", "d": "10/2014"}, {"body": "redacted post got confused canary beta sorry repost", "d": "10/2014"}, {"body": "canary extremely confusing canary current canary builds identify include output numbers prevent confusion ensure page", "d": "10/2014"}, {"body": "yes sorry confused update soon", "d": "10/2014"}, {"body": "rwjblue apologies canary bench indeed safely ignored release far away still think consider releasing line patch users nt go back get better perf data coming soon", "d": "10/2014"}, {"body": "would like try ensure fixes regression scenarios eviltrout time hangout later tonight", "d": "10/2014"}, {"body": "stefanpenner tonight unfortunately tomorrow day weekend good", "d": "10/2014"}, {"body": "btw rush wanted next release weeks important us ticketed categorized hurried weekend said think others might disappointed effects hence suggestion perf fix line", "d": "10/2014"}, {"body": "rwjblue release remove ember testing build cheers", "d": "10/2014"}, {"body": "still think consider releasing done release remove ember testing build cheers done", "d": "10/2014"}, {"body": "heart heart heart heart heart guys best", "d": "10/2014"}, {"body": "okay updated ember performance suite use new ascii table export easier show findings much clear progression performance current release tests performed desktop tweaks thanks help look like performance bad initially thought seems simple rendering nice improvement creating objects faster awesome however complex list test recently added seem slower average tests quite hit certain entirely related normalization stefanpenner spoke likely spend time looking closely code tomorrow try find perhaps isolate specific benchmark additionally seeing much severe difference ember inspector initially wrote profiling code possible needs updated potentially scary discourse something codebase makes regression worse also something like look tomorrow", "d": "10/2014"}, {"body": "additionally seeing much severe difference ember inspector initially wrote profiling code possible needs updated potentially scary discourse something codebase makes regression worse also something like look tomorrow honestly ember inspector performance ca nt trusted currently currently overhead consuming metrics often costly action processing teddyzeenny chatted various strategies minimize cost honestly engaging instrumentation modes ember slow us dramatically example dramatically reduced cost promise instrumentation view layer instrumentation ember still leaves much desired additionally engaging inspector overhead remember users run devtools open benchmarks perf testing would strongly suggest notice problem use tooling assume outputted values worse without tooling enabled said ember performance bottlenecks would like us keep pushing dramatically reduce cost give everyone better faster apps eviltrout samsaffron would love hangout evening discuss feel free ping free", "d": "10/2014"}, {"body": "going remove blockers list come radical improvements always release since render performance seems improved since even degraded since nt see reason hold back train", "d": "10/2014"}, {"body": "correct took slight perf hit get ember line htmlbars part perf hit goes away entirely lands wip solution nt going block release", "d": "10/2014"}, {"body": "slightly higher nexus goes note also highlights severe issue would upgrade performance android already legendarily bad moving second today render times second load times something could accept", "d": "10/2014"}, {"body": "ya ceiling still incredibly high need time", "d": "10/2014"}, {"body": "fair enough hope robin find wins week mon oct pm stefan penner notifications githubcom wrote ya ceiling still incredibly high need time reply email directly view github", "d": "10/2014"}, {"body": "stefanpenner playing around bit micro optimising core issue calling innerhtml appendchild insertbefore ton times example bench trigger calls innerhtml whereas old branch would trigger calls wonder anyway reconstruct rendering tree generates one dom fragment walks assign elements child views core main reason stuff gotten slower", "d": "10/2014"}, {"body": "thinking fragment reuse bit unbound content makes tricky since executes inline rerender wonder could something addon might impractical inclusion upstream given understand caching happening use templates accordingly think reuse could possible start would override method look cache uncertain exposed apps today dom string parsing certain performance gains keep mind code disposable pick performance elsewhere impact line", "d": "10/2014"}, {"body": "talking perf halved front page render time cost creating views non negligable nt need bindings", "d": "10/2014"}, {"body": "first admin way draw views nt great easier maintain long barrier concerned managing rows october sam notifications githubcom wrote talking perf halved front page render time discoursediscourse discoursediscourse discoursediscourse cost creating views non negligable nt need bindings reply email directly view github", "d": "10/2014"}, {"body": "samsaffron nice delegating native handlebars via helper might streal idea", "d": "10/2014"}, {"body": "please remember hacks help performance immediate future harm performance app complete htmlbars transition like try keep discussion focused improve performance across board", "d": "10/2014"}, {"body": "mixonic note actually fixed large number performance issues many naive scenarios much much faster many apps perform better course unless already selfoptimizing fine always comes caveat may continue wonderful yes normalization handlebars style htmlbars style hurting go away soon", "d": "10/2014"}, {"body": "behavior required issue ember emberdata register defaults container resolved entities must win defaults override obvious tedious breaking solution instead defaults resolved least made lower priority today example provided ember data registering container user may want override resolved alternative imho nt bug merely current state things agree would better reversed nt gotten around work accomplish yet embercli emberaddons provide great way forward somewhat uncertain best way us support globals builds absolutely possible", "d": "10/2014"}, {"body": "closing future plans exist change currently bug hopefully explanation helpful", "d": "10/2014"}, {"body": "yes understand explanation definitely helpful thanks", "d": "10/2014"}, {"body": "write quick jsbin replicate", "d": "10/2014"}, {"body": "unable replicate trying dig", "d": "10/2014"}, {"body": "gon na close able replicate", "d": "10/2014"}, {"body": "observable property believe expect remiss make one probably suggest using action cause route something workaround agree bit confusing", "d": "10/2014"}, {"body": "thanks quick reply worked around issue specific problem would definitely useful become observable close", "d": "10/2014"}, {"body": "royk route several unobservable properties might see elsewhere think improve maybe discussion around pr leaving hanging issue likely get much done", "d": "10/2014"}, {"body": "believe emberdata issues promise proxies select expect simplify example promises involved select work expected probably issue emberdata unless simplify example use ed please use strings ids emberdata times", "d": "10/2014"}, {"body": "mixonic thank much answer", "d": "10/2014"}, {"body": "mixonic ideas achieved emberdata models", "d": "10/2014"}, {"body": "lessless using example could bind directly promiseobject property workaround", "d": "10/2014"}, {"body": "jasonmit man really simple awesome thank", "d": "10/2014"}, {"body": "jasonmit yes looks like work around today ember select needs work correctly likely removing promise proxies favour make raw promises bindable believe still leaves select situation likely part project see select fixed", "d": "10/2014"}, {"body": "made handle async bit better send action selection change instead using two way binding outside value closing favor meta issue", "d": "10/2014"}, {"body": "previously supported handlebars completely unaware surrounding html try creating binding must use", "d": "10/2014"}, {"body": "mmun true supported work least cause entire templateview blow", "d": "10/2014"}, {"body": "mmun rwjblue exactly", "d": "10/2014"}, {"body": "question detect throw useful error message honestly unsure", "d": "10/2014"}, {"body": "regression supported nt support bound comments oo", "d": "10/2014"}, {"body": "mmun regression developer experience definitely saying support bound comments helpful error message would nice", "d": "10/2014"}, {"body": "rwjblue agree nt using types comments one developers used project already changed handlebars syntax expect others might trip well", "d": "10/2014"}, {"body": "pr better error definitely welcome sure conditions might cause error occur", "d": "10/2014"}, {"body": "submitted add helpful error message", "d": "10/2014"}, {"body": "experiencing exact issue update handlebars latest canary find component nt rendering", "d": "10/2014"}, {"body": "confirmed updated duplicate", "d": "10/2014"}, {"body": "nullrocket thanks reporting simpler jsbin showing various permutations one showing failing block hash arguments", "d": "10/2014"}, {"body": "failing tests added", "d": "10/2014"}, {"body": "fix details", "d": "10/2014"}, {"body": "rwjblue thanks end long day nt even thinking duplicate ids junk left different bin focused fact rhino wo nt precompile", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "luoguanzhong question stack overflow please feel free crosslink back", "d": "10/2014"}, {"body": "quick note use storeall find loaded records", "d": "10/2014"}, {"body": "network request first call find already store please note unless using local storage indexeddb adapter record stored browser across page refreshes meaning ember data store gets cleared page refreshes wo nt access model anymore meaning network request", "d": "10/2014"}, {"body": "current state would nt attach dependencies properly jquery handlebars nt expose used commonjs iirc also like get tests passing", "d": "10/2014"}, {"body": "personally nt even care supports cjs artifacts npm helps people nt deal bower", "d": "10/2014"}, {"body": "working time like make nice browserify experience probably get something release", "d": "10/2014"}, {"body": "fivetanley also would nice separate package node browserify", "d": "10/2014"}, {"body": "good addon material", "d": "10/2014"}, {"body": "suggest taking look", "d": "10/2014"}, {"body": "looks like file nt good catch", "d": "10/2014"}, {"body": "needing big code smell properly separating concerns router definitely nt care dom element controller almost certainly nt even view properly broken components custom views care little actual element play fwiw time cared dom elements nt explicitly create instance modal blocker needed completely separate rendered view track location match trigger even element main element view easily grabbed passed action firing almost situation properly handled via custom component view", "d": "10/2014"}, {"body": "see takes time implemented hmmm saying manipulation dom elements scoped ember app animations using css transitionanimation one since need timing complete pardon ignorance coding pure jquery tryinginvesting time ember readinglearning ember docs helping nt seen dom manipulation either intended anyway first place downside meaning say needs need dom element wrong first place", "d": "10/2014"}, {"body": "downside would allow probably even encourage wholesale abandonment proper separation concerns need manipulate dom element view end story", "d": "10/2014"}, {"body": "imagine someone clicking button app might trigger api call might trigger database update might trigger stored procedure crazy things ever know button got hit ui right would mean architecture massive mess ember apps smaller scale layer responsible concerns route concerning concrete dom elements reaching way architectural onion inappropriately messing view layer recipe disaster", "d": "10/2014"}, {"body": "manipulation dom every route handled view right see make sense sequence flow ember app model templates controllers views route", "d": "10/2014"}, {"body": "events get event node actions", "d": "10/2014"}, {"body": "event dispatcher set ember handles events adding handlers root element app one place without event dispatcher placing element outside root element app actionsview events wo nt fire", "d": "10/2014"}, {"body": "im sure checkverify entire test harness javascript karmaloaded function chaishould windowexpect chaiexpect windowshould chaishould windowsinon sinon embertestadapter embertestmochaadaptercreate appsetupfortesting appinjecttesthelpers var karmastarted false appinitializer name run mocha tests initialize function container apptestcontainer container karmastarted appendto body", "d": "10/2014"}, {"body": "jefflage want suggest something wacky initializer already body create ember application test mode ember application passed initializer definitely seems like wrong place start karma imagine want start karma first app starts globals app using acceptance tests tricky less idea globals mode app however many examples jsbins guides", "d": "10/2014"}, {"body": "jefflage jsbin failing test would help us figure going nt use karma mocha stack nt know tell without able dive example", "d": "10/2014"}, {"body": "eptis creating new string time type field setting value set new value scope block cause template rerender normally would write code objects set properties instead looping primitives", "d": "10/2014"}, {"body": "ok clear also case loop object array primitives property still story wed oct matthew beale notifications githubcom wrote eptis creating new string time type field setting value set new value scope block cause template rerender normally would write code objects set properties instead looping primitives reply email directly view github", "d": "10/2014"}, {"body": "sure question context template object template rerender object properties change rerender object changes", "d": "10/2014"}, {"body": "question current behavior also bind object property contains array primitives example", "d": "10/2014"}, {"body": "use array primitives templates must rerender values change nt matter array primitives model", "d": "10/2014"}, {"body": "ok thank much clarifying case would normally use array proxy sent mailbox thu oct pm matthew beale notifications githubcom wrote use array primitives templates must rerender values change nt matter array primitives model reply email directly view github", "d": "10/2014"}, {"body": "sortable arrays usually used presenting list possible may found bug occurring mutated", "d": "10/2014"}, {"body": "sorry forgot explain mentioned stackoverflow bug caused simultaneous usage ember sugarjs extends method overwritten sugar close issue related ember", "d": "10/2014"}, {"body": "able track helper still unknown exactly generates error import em ember var helper function text var handlebars emhandlebars var text handlebarsutilsescapeexpression text text replace gt rn rnnrrn g return new handlebarssafestring export default helper", "d": "10/2014"}, {"body": "remove expression error generated", "d": "10/2014"}, {"body": "thanks looking provide failing jsbin helper code", "d": "10/2014"}, {"body": "strangely enough works setup", "d": "10/2014"}, {"body": "reference seems empty text parent element null", "d": "10/2014"}, {"body": "still concerning need way attack", "d": "10/2014"}, {"body": "adding stacktrace looking asap", "d": "10/2014"}, {"body": "michaelvdheeren looks like simple binding updated data ajax call catch exception debugger able see path binding see binding used templates may point somewhere", "d": "10/2014"}, {"body": "found switching render partial could good optimisation also fixed issue however believe still strange happened", "d": "10/2014"}, {"body": "michaelvdheeren share part template caused issue child template understand might fixed app like know apps nt going problem release stable", "d": "10/2014"}, {"body": "celebrated quickly solved share much possible", "d": "10/2014"}, {"body": "happens switch routes data reloaded child template least interesting part error happens partial using lastcomment title lastcomment lastcomment partial igcommentsmini parent contains view igsea nodesarrangedcontent view renders collection view without template specified", "d": "10/2014"}, {"body": "always happens last child view element within collectionview", "d": "10/2014"}, {"body": "going spend little time trying recreate goes far still little go far see use partial render container view change content route anything specific jsbin working backwards complex issuecausing case simple one would big aid know takes time tricky", "d": "10/2014"}, {"body": "believe getting closer replace simple loop using view helper within loop show node works perfectly hence problem igsea view added great part code view feels like morph elements tore view destroyed hence update data object retrieved tries update morph element igview responsible rendering sea per page applying masonry containerview support heterogenous childviews want sea idea machine given ideamachine also render idea machine card export default emcontainerviewextend layoutenginemixin infinitescrollmixin tagname div classnames sea row nodes null offset null pagesize schedule displaycards sea sorting filtering search options changed emberrunscheduleonce first page sea rendered swaping dom prevents empty sea flicker displaycards function emrunscheduleonce afterrender function thisclear thisset offset thisnextpage observes nodes controllersortascending loops controllerarrangedcontent inserts cards page page basis using endlessscroll nextpage function var self nodes thisget nodes offset thisget offset nextoffset offset thisget pagesize insertnode function node var card thiscreatechildview nodecardview context node thispushobject card return card didinsertelement function thissuper trigger displaycards underlying arrangedcontent changed appon addednode thisdisplaycards appon addedcomment thisafterrenderevent thisdisplaycards willclearrender function appoff addednode thisdisplaycards appoff addedcomment thisafterrenderevent thisdisablescrolldetection thissuper infinitescroll mixin global window document import em ember import jquery export default emmixincreate loadmoreview emviewextend templatename igloadmore enablescrolldetection function window scroll proxy thisdidscrolldebounce disablescrolldetection function window scroll proxy thisdidscrolldebounce didscrolldebounce function emrunthrottle thisdidscroll false didscroll function thisisscrolledtobottom emrunscheduleonce render thisnextpage nextpage function implement function didinsertelement function thissuper emrunscheduleonce afterrender thisenablescrolldetection willdestroyelement function thissuper thisdisablescrolldetection isscrolledtobottom function var windowheight window height var totaldistance document height windowheight var currentdistance document scrolltop destroy function thissuper return", "d": "10/2014"}, {"body": "suspect comment explaining change accurate impossible output render queue visible screen queue flushed browsers singlethreaded runloop executing browser draw believe funky logic view may rendered removed render tree destroyed invalidated curious schedules update cancelled addition cancelled destroy place cancelled today", "d": "10/2014"}, {"body": "michaelvdheeren afraid nt able decipher going release looming today tomorrow may end shipping regression unless get reproduction jsbin demos setting content container view observe render demonstrates none bad behavior described", "d": "10/2014"}, {"body": "mixonic agreed please keep open try dig hopefully provide answer", "d": "10/2014"}, {"body": "mixonic add following piece code see check safestring line reference previously working perfectly value undefined good code suspect something diff safestring value undefined update function thisupdateid null var value thisnormalizedvalue nt diff safestring instances valueconstructorname safestring return", "d": "10/2014"}, {"body": "removing blocker label think fix forthcoming hold release much longer", "d": "10/2014"}, {"body": "rwjblue nt block dive week find significant issue shout", "d": "10/2014"}, {"body": "mixonic sounds good definitely problem point release needed", "d": "10/2014"}, {"body": "mixonic rwjblue attached drumroll failing test fact used dotdotdot didinsertelement probabbly modifies element hence nt correspond morph howto open test index page click reload transition post page sorry bad naming posts page see lastcomment post presented ellipsis done dotdotdot press reload button posts page reloads lastcomment take look console", "d": "10/2014"}, {"body": "michaelklishin excellent lot going definitely trivial reproduce dive next day two see glean thank spending time us", "d": "10/2014"}, {"body": "michaelklishin issue cloning content point replacing whatever page generated dom nt way keep track data bindings dom rebuilt nt seem compatible databinding try commenting line jsbin seems work fine thanks effort diving reproducible case made short work", "d": "10/2014"}, {"body": "mixonic agreed worked perfectly ember read error somewhat problematic", "d": "10/2014"}, {"body": "may worked chance design party destroying dom nodes ember binds difficult impossible thing support apologies sucks app dotdotdot simply greedy plugin worst tradition jquery plugins attached event handler dom event handler would also become disconnected ember issue design flaw lib makes compatibility javascript code ember ember intractable practical sense trying support libraries like keep us ever getting amazing rendering performance want land htmlbars", "d": "10/2014"}, {"body": "agreed", "d": "10/2014"}, {"body": "seems work properly provide failing test jsbin demonstrating problem", "d": "10/2014"}, {"body": "please provide information still occurring specific browser", "d": "10/2014"}, {"body": "using latest version chrome version mac would like provide detail sure isolate problem happening one part template styling view way anything weird css like letterspacing", "d": "10/2014"}, {"body": "seem recreate going close breaking whitespace would definitely bug need go debugging", "d": "10/2014"}, {"body": "updated project use ember today seeing issue breaking white space within templates mixonic seems issue present work values resolved dom rendered see jsbin example system windows chrome vote reopening issue really seems like bug cc rwjblue updated previous jsbin example", "d": "10/2014"}, {"body": "demonstrating difference initially late rendered content whitespace definitely bug thanks much repro herom", "d": "10/2014"}, {"body": "welcom mixonic smiley updated jsbin little typo make work whole smilecat", "d": "10/2014"}, {"body": "bug chrome rendering engine blank text node still present two names simply rendered firefox exhibit bug", "d": "10/2014"}, {"body": "omg yes confirm tried following browsers seeing bug latest chrome windows firefox latest chrome failing mac osx safari", "d": "10/2014"}, {"body": "bug chrome", "d": "10/2014"}, {"body": "following bug chrome seems moving forward solving issue thanks lot mixonic smiley", "d": "10/2014"}, {"body": "likely best asked stack overflow appear bug try keep issue tracker tracking issues", "d": "10/2014"}, {"body": "fiddle working appear bug emberlibrarieseach implements function collides prototype map function triggers possible prototype longer behavior recent versions verify morning", "d": "10/2014"}, {"body": "jasonmit really appreciate effort afraid kind issues might occur whenever get type issues need put patch better solution would avoid prototypejs case sure whether one third party js collides ember way avoid similar issues without putting patch", "d": "10/2014"}, {"body": "enumerableutils friends use arrayprototypeforeach method available helper used think jayphelps rewriting libraries could use loop instead meantime instead helpers pretty sure would nt break public api libraries think jdalton stefanpenner talking using polyfills always helpers avoid collisions native methods like foreach contains etc however think changing enumerableutils behavior would breaking change one could nt make ready start releasing ember stef could probably fill plans polyfillenumerable stuff core team talked already", "d": "10/2014"}, {"body": "also fixed use recent prototype version tested jsbin provided works properly", "d": "10/2014"}, {"body": "rwjblue yes ember working fine latest prototype version prototype breaks included ember fivetanley thanks updating ongoing work really good avoid collisions", "d": "10/2014"}, {"body": "definitely digging", "d": "10/2014"}, {"body": "jsbin working", "d": "10/2014"}, {"body": "needs return", "d": "10/2014"}, {"body": "bring back deprecate", "d": "10/2014"}, {"body": "yes deprecation suggest use component registermakeboundhelper", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "defined behavior described ember guides observers never fire unless consumer", "d": "10/2014"}, {"body": "see thanks lot ahacking", "d": "10/2014"}, {"body": "suspect issue may", "d": "10/2014"}, {"body": "seems possibly reducecomputed issue seems entire family issues array computed tracked well could relevance problems", "d": "10/2014"}, {"body": "hit wall twice stated pr try make arraycomputedreducecomputed properties smarter discovered way cp implemented deeply flawed senses open first step refactor cps nt think going make anytime soon think probably delayed ember time comes cp redone scratch", "d": "10/2014"}, {"body": "yea seem several issues relating arraycomputedreducecomputed think close infavor wagenet cleanup arraycomputed issue", "d": "10/2014"}, {"body": "maybe related", "d": "10/2014"}, {"body": "fyi emberset deprecated although would nice worked", "d": "10/2014"}, {"body": "make sure enumerables eached though cc wycats r", "d": "10/2014"}, {"body": "kiwiupover check canary prod", "d": "10/2014"}, {"body": "confirm canary prod build", "d": "10/2014"}, {"body": "crap", "d": "10/2014"}, {"body": "review fix tonight thanks noticing reporting kiwiupover", "d": "10/2014"}, {"body": "thanks robert wednesday october robert jackson notifications githubcom wrote review fix tonight thanks noticing reporting kiwiupover reply email directly view github", "d": "10/2014"}, {"body": "definitely bug nt seen test suite passes certain try recreate look jsbin nt want ship broken trs visualjeff failing test would really helpful thank jsbin", "d": "10/2014"}, {"body": "mixonic ok learning current state ember htmlbars pr nt really applicable today understand know best practice work arounds issue couple ideas thought check first btw also like see failing test ember", "d": "10/2014"}, {"body": "visualjeff yes likely fixable without failing test", "d": "10/2014"}, {"body": "seeing problem canary visualjeff please reopen still seeing issue", "d": "10/2014"}, {"body": "mixonic tested vm nt work expected trview render data formatting nt honor column boundaries unformatted data dumped table row canary", "d": "10/2014"}, {"body": "hey jerel opsb know two worked together enable ember support legacy browsers either two every work around bug tables apparently nt completely support setinnerhtml number tags like tag either know shim shiv workarounds", "d": "10/2014"}, {"body": "ugh think possible vm upgraded jsbin nt seem work need wait new vm download evening visualjeff share screenshot aware innerhtml problems ember solutions tests place many issues want sure see thing see test fix believe related nt good test case might one", "d": "10/2014"}, {"body": "mixonic happy test automatically get pulled master", "d": "10/2014"}, {"body": "visualjeff merged need pull branch build version ember", "d": "10/2014"}, {"body": "make difference jsbin example listed running emberjs version used renderbuffer branch handlebars jquery", "d": "10/2014"}, {"body": "yup tests pass think upgradedidontknowwhen vm trolled failures test suite right confirmed failing jsbin", "d": "10/2014"}, {"body": "visualjeff pretty positive put would appreciate check today time want push beta stable today tomorrow morning latest", "d": "10/2014"}, {"body": "mixonic sorry delay test today post results visualjeff", "d": "10/2014"}, {"body": "mixonic love yeah man works visualjeff", "d": "10/2014"}, {"body": "visualjeff thanks confirming", "d": "10/2014"}, {"body": "question would best asked stack overflow", "d": "10/2014"}, {"body": "mistake missing", "d": "10/2014"}, {"body": "standard browser behavior see smaller reproduction using jquery basically click event submit button handled higher level called trigger submit event", "d": "10/2014"}, {"body": "rwjblue argh sorry opening irrelevant issue thanks detailed answer", "d": "10/2014"}, {"body": "maybe", "d": "10/2014"}, {"body": "exact problem trying took forever track handlebars code commented html comments eg based description bet money", "d": "10/2014"}, {"body": "workmanw exact issue end though quickly resolved using handlebars comments instead probably reported discovered months back flushed", "d": "10/2014"}, {"body": "workmanw kanongil made day thank much start app hank loading error last line uncaught typeerror undefined function reading used emberdata canary everything works fine", "d": "10/2014"}, {"body": "happy help cheers", "d": "10/2014"}, {"body": "might worth making note blog post andor release notes likely trip people terribly easy debug rwjblue", "d": "10/2014"}, {"body": "default creates new scope want block share surrounding scope need use syntax updated bin", "d": "10/2014"}, {"body": "caused binding context plain string meirish definitely correct solution use context preserving version details change ember using modules enforced strict mode across codebase generally good thing however causes issue attempt bind function primitive value strict mode primitive value boxed converted object automatically us strict mode", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "misunderstood design closing", "d": "10/2014"}, {"body": "related", "d": "10/2014"}, {"body": "workaround computed property set attribute directly", "d": "10/2014"}, {"body": "whops fault looks using old version ember nt support queryparams controller", "d": "10/2014"}, {"body": "set true need use property would still consider bug since lacks documentation example", "d": "10/2014"}, {"body": "looks like possible bug outlets", "d": "10/2014"}, {"body": "verified issue related computed properties model properties", "d": "10/2014"}, {"body": "pretty intriguing tried make jsbin test issue nt able chance could make bin simulate problem", "d": "10/2014"}, {"body": "get frustration gonvaled case transparency ember magic might seem particularly arbitrary seeing conversion using globalssymbols refer classes using lookups injected container new code referring class actually registered container view phonewithflag big effort made attempt move similar class lookups itemcontroller itemview collection etc use container ways semantically appropriate resolve resolve design decision consequence modules nt necessarily names usual sense app instance using embercli think phonewithtag module exported one file imported another case embercli app imported registered container name based directory file name without ever needing define name nb reply postscript issue since removed", "d": "10/2014"}, {"body": "concur workmanw ca nt replicate without removing quotes entirely could include initial debug information ember handlebars version spit console", "d": "10/2014"}, {"body": "duplicate fixed merged", "d": "10/2014"}, {"body": "nice looking forward", "d": "10/2014"}, {"body": "tertiary maybe fixed newer version noticed behavior components js willnotsurvive function return thisget thisget b property b magic adding key value arguments seem keep computed property overwritten willsurvive function key value return thisget thisget b property b set overwritten whatever value set seems odd relevant jsbin", "d": "10/2014"}, {"body": "set willnotsurvive overwritten whatever value set willsurvive seems odd works expected yes odd someone aware", "d": "10/2014"}, {"body": "whoa expected til genuinely surprised behavior generally think function javascript nt expect behave differently based presence argument variables guess would nt expect something analyzing part function see somehow different never really liked implicit injection thing angular either jshint actually hates using also warrants adding comment like seems like something like proposing could solve still nt descriptive making writable really trying make untrampleable unoverwriteable", "d": "10/2014"}, {"body": "generally think function javascript nt expect behave differently based presence argument variables feature meant interim step allow backwards compatibility never transitioned hope get us plan js writable fullname embercomputed firstname lastname get function key return thisget firstname thisget lastname set function key value var name valuesplit thissetproperties firstname name lastname name", "d": "10/2014"}, {"body": "jefflage looks like problems code hack forcing property name processed string code implies general helper probably deprecated future support dynamic rerendering based changing viewcontroller name property likely support future", "d": "10/2014"}, {"body": "mixonic thanks responding far hack realize also realize dangerous helper explicitly allowing specify view want render using dynamic property helper guess question around maybe specifically right pattern want able dynamically render different view also want specify controllermodel", "d": "10/2014"}, {"body": "jefflage safe supported path today use container view via rwjblue basically works", "d": "10/2014"}, {"body": "makes sense appreciate help", "d": "10/2014"}, {"body": "mixonic deprecate render", "d": "10/2014"}, {"body": "fivetanley likely components become sufficiently powerful replace need wont remove feature unless great reason great alternative would nt worry", "d": "10/2014"}, {"body": "actually avoid creation parent div set property manually want unordered list view something like handlebars adding elements", "d": "10/2014"}, {"body": "herom thanks quick response want avoid creating parent tag want depend handlebars", "d": "10/2014"}, {"body": "nt think possible view would know boundaries clear see view representation actual dom element particular use case trying cover could perhaps provide jsbin", "d": "10/2014"}, {"body": "use case trying create component found ember added parent div wrapping component html broke css solution define javascript component class override tagname remove top level tag handlebars required output like pattern happens many times working solution sure best practice wondering better solution instead creating javascript component option avoid creating parent div take handlebars without adding parent div", "d": "10/2014"}, {"body": "nt think better practice achieve views components also targets actions etc would ember detect code related random dom markup distinguish possibilities need tell ember therefore dom representation least know far", "d": "10/2014"}, {"body": "remember backbonejs specify element view responsible via normal jquery selector otherwise new element created anyway works hope improve future thanks lot man", "d": "10/2014"}, {"body": "problem welcome smiley", "d": "10/2014"}, {"body": "tagname null", "d": "10/2014"}, {"body": "stefanpenner use tagname null html defaults normal div tag use tagname null instead get component issue misunderstand direction set tagname null", "d": "10/2014"}, {"body": "stefanpenner notmessenger tried using tagname null tell ember create div default value use tagname null create tag want avoid creating tag keep empty like tagname worked perfectly herom btw solution problem", "d": "10/2014"}, {"body": "cool thing nt know abousamra thanks update sharing", "d": "10/2014"}, {"body": "tagname technique nt appear documented test tell used internally always coupled isvirtual true consider private api personally however useful", "d": "10/2014"}, {"body": "endash good point considered thanks", "d": "10/2014"}, {"body": "endash correct", "d": "10/2014"}, {"body": "use tagname null create tag oops answered phone endash pointed correct likely coupled isvirtual need although isvirtual may want depends usecase", "d": "10/2014"}, {"body": "man used cowboy developer go documented tested idea actually today might tomorrow pass", "d": "10/2014"}, {"body": "fwiw technique least potentially seriously children collectionview", "d": "10/2014"}, {"body": "fivetanley could use emberdev maybe new major revision cc rwjblue", "d": "10/2014"}, {"body": "make sense branch current version branch something add new stuff plain js either non used directly via bower", "d": "10/2014"}, {"body": "pass would really like see someone else pick run ember emberdata embercpm could benefit greatly", "d": "10/2014"}, {"body": "herriau new internal ember metal called stream landed master much flexible adhoc property change notification synchronization nt think great docs regardless expect rough answer talking would found codez tests", "d": "10/2014"}, {"body": "looks like works canary arguments undefined null passed bound handlebars helper showing empty strings helper rather undefined", "d": "10/2014"}, {"body": "works canary updated jsbin test js qunitmodule handlebars helpers arg types test bound helpers consistent argument types function emberhandlebarshelper gettype function value return typeof value view emberviewcreate controller emberobjectcreate template compile gettype null gettype undefprop gettype string gettype gettype appendview equal view text undefined undefined string number object helper output correct run function viewdestroy reveals fixed", "d": "10/2014"}, {"body": "thanks following glad streams pr fixed bug canary know commit introduced regression fyi handlebars supports string number boolean primitives consequently treated regular property lookups eg fooundefined foonull", "d": "10/2014"}, {"body": "mmun thanks nt know commit introduced regression fixed play around git bisect later though primitives makes sense jsbin used property defined null controller passed helper gave type undefined test could nt recreate think managed confuse", "d": "10/2014"}, {"body": "fixed need review", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "slindberg thanks yes nasty one previous commit probably never made beta mattraydub aware little temporarily worked around exactly proposed eliminating altogether js addeditem function array item changemeta instancemeta var index instancemetabinarysearch array item arrayinsertat index item arrayindexof item arrayinsertat index item return array however nt belive eliminating good solution however one come allows us still use property paths actually two related issues describe created using modified properties exposed multiple sort properties function used erroneously compares unchanged sort property used case always point value property changes object shared among multiple items ie common parent belongsto relationship property sort property function compares new sort property value old sort property value instead compare using values last used sort array old sort property value old sort property value believe order move past second issue going necessary create cache sort property values proper comparision take place original value sort property value used side effect approach able eliminate need altogether turn fix first issue hope pull request completed sometime soon", "d": "10/2014"}, {"body": "thanks mmpestorich glad hear top smile", "d": "10/2014"}, {"body": "arrayreduce computed use embermap emberorderedset internally cc hjdivad", "d": "10/2014"}, {"body": "stefanpenner see internally maintains hash calls uses amongst others create passed along originally thought exposing via would helpful rather changing internals felt like using maintain cache sort property values better approach nt", "d": "10/2014"}, {"body": "bug really bugging please see pr let know think", "d": "10/2014"}, {"body": "aexmachina behavior cps long long time documented would definitely welcome review set improvements documentation difficult change within release though due constraints semantic versioning additionally behavior actually useful want raise exception mark cp readonly", "d": "10/2014"}, {"body": "aexmachina advocating cp readonly default likely cause pain worth imho", "d": "10/2014"}, {"body": "stefanpenner cp readonly default", "d": "10/2014"}, {"body": "matthooks first approach would introduce writeable make embers internals work manor maybe using flag", "d": "10/2014"}, {"body": "yes realised solution way home yesterday cps readonly default think fine clearer call cp set", "d": "10/2014"}, {"body": "generate new empty project test builds", "d": "10/2014"}, {"body": "sorry realized wrong repo reopen embercli repo instead", "d": "10/2014"}, {"body": "oh sorry reopen ember cli repo", "d": "10/2014"}, {"body": "believe", "d": "10/2014"}, {"body": "jdalton know internal ember rely things lots flexibility unsure default default wycats tomdale question think always use user land versions never fall back native versions way something change users still get consistent original behavior expected", "d": "10/2014"}, {"body": "would also add lot blog posts stack overflow answers jsbins even ember guides currently show code assumes set changing hard would effectively invalidate examples exist could ultimately another point confusion newer users", "d": "10/2014"}, {"body": "added confusion enumerable allows enumeration non array like objects array like goodies leaves us potential differences sucks big time part ember inherited sprout core days time browser world stale prototype extensions used without fear wrongfully going forward category wish see improved strategy plan needs derived", "d": "10/2014"}, {"body": "think behaving ala lodash might way forward ultimately using small subset lodash may useful nervous explode gzip bite size even", "d": "10/2014"}, {"body": "willing reconsider way consume ember via modules release change would way breaking series", "d": "10/2014"}, {"body": "also worth noting theory currently ember run slower prototypes involved good refactoring address", "d": "10/2014"}, {"body": "think behaving ala lodash might way forward also worth noting theory currently ember run slower prototypes ah good know manually bolting methods reminds prototype approach supporting dom extensions older browsers awesome deeper issues looks like even config new builtins still leak lead issue described simple example", "d": "10/2014"}, {"body": "jdalton yes need consistent current state result much scenario solving holistic set solutions currently ember always falls back existing natives clearly nt actually want may result future breakages nt ember enumerable would opt immediately drop version move minimal lodash", "d": "10/2014"}, {"body": "could wrong believe misunderstanding feature documentation stinks default class used ie urls use look like intended using ember needs know nt considered parsing path looking valid route nt even reference since nt actually need nt tl dr using default rather meaningless afaik using serving app index path eg something make sense", "d": "10/2014"}, {"body": "said another way using jsbin example given rooturl route full path would internal method gets url location class currently use nt provide full path part calling nonhashed portion rooturl router wo nt know cause abstracted location classes mostly lack documentation misleading method names nt renamed since ability added also words path url actual true definitions incorrectly everyone including explanation making things even confusing", "d": "10/2014"}, {"body": "could assert rooturl used hash location", "d": "10/2014"}, {"body": "jayphelps thank great explanation", "d": "10/2014"}, {"body": "jayphelps thoughts asserting used", "d": "10/2014"}, {"body": "rwjblue think would break things using auto location falls back hash unless ignore special case imo clearer documentation best path", "d": "10/2014"}, {"body": "jayphelps ok sounds good hairbrained idea anyways think close since original issue mostly misunderstanding", "d": "10/2014"}, {"body": "query find update server returns set records effectively immutable", "d": "10/2014"}, {"body": "correct must result storefilter", "d": "10/2014"}, {"body": "issue solution somehow cheers jsbin issue", "d": "10/2014"}, {"body": "bugregression", "d": "10/2014"}, {"body": "started fixing realized much problem krisselden planning rework get address correctly", "d": "10/2014"}, {"body": "supported ember", "d": "10/2014"}, {"body": "something could support really nice", "d": "10/2014"}, {"body": "mmun r", "d": "10/2014"}, {"body": "fivetanley moving away context changing helpers purpose future excusing keywords paths etc always return value like using theory could support context changing helpers twokul work view helper context complete recommend code smell block params febreze", "d": "10/2014"}, {"body": "mmun already supported luck currently jsbin never mind swapped updated jsbin nt know syntax thanks mmun", "d": "10/2014"}, {"body": "always passes around instance array strings booleans immutable luckily defaultvalue function return new instance every time", "d": "10/2014"}, {"body": "wow wow anyway thanks explanation appreciated", "d": "10/2014"}, {"body": "nt disagree fix curious need deferred readiness", "d": "10/2014"}, {"body": "stefanpenner completely agree rarely ever done found reviewing code felt returning successfully essentially ignored kinda insane", "d": "10/2014"}, {"body": "hi issue app stefanpenner need deferreadiness inject external script app better way writing unit tests custom restadapter seems external script loaded yet try use store find records", "d": "10/2014"}, {"body": "better way async handled routes", "d": "10/2014"}, {"body": "rwjblue time seen less less genuine usecases deferreadiness nt result poor user experience white screen death deferrals complete advancedefer readiness hooks time good async story route typically initializers meant registering stuff container configuration options injection rules less error prone approach registering initialization allow application resolve needs entity prevents whole category issues exist cases practical register something initialization process imho cases dwindling", "d": "10/2014"}, {"body": "saarangsoltani please open pull request fix would happily merge", "d": "10/2014"}, {"body": "fixed back thinking fixed next time documentation officially generated released often docs get generated wait first nonbeta release", "d": "10/2014"}, {"body": "tehcurtis definitely deployed around release uncertain schedule outside rwjblue might man know", "d": "10/2014"}, {"body": "done", "d": "10/2014"}, {"body": "code transitioning immediatly visiting none code seen", "d": "10/2014"}, {"body": "damn sorry hopefully work code question going route lazy created remove use commented bottom works", "d": "10/2014"}, {"body": "pretty sure setupcontrollers deprecated besides setupcontroller used setting controller creating controller needs exist method called", "d": "10/2014"}, {"body": "first jsbin little bit sophisticated using setupcontroller app used demonstrate issue pretty sure problem controller exists time method called know lazy showing true another place controllers generated", "d": "10/2014"}, {"body": "router looks controller via container want found needs able looked via container wondering container setup see", "d": "10/2014"}, {"body": "nt get seems saying something wrong problem already mentioned", "d": "10/2014"}, {"body": "saying use resolver dynamically create resolve controller needed still nt work query params", "d": "10/2014"}, {"body": "adding custom resolver lazily dynamically create controllers via eval like wanted seems work fine", "d": "10/2014"}, {"body": "thank taking time looking really happens loading code demand try changing apppageeditcontroller exists point picked queryparams initialization somehow", "d": "10/2014"}, {"body": "np return eval controller still want assign global js var controller eval emberobjectcontrollerextend queryparams query query null loaded true windowapppageeditcontroller controller return controller give better use case trying much create controllers using lazily runtime", "d": "10/2014"}, {"body": "wo nt work mean controller want queryparams nt work tested", "d": "10/2014"}, {"body": "works say nt", "d": "10/2014"}, {"body": "indeed loading code pageroute actually root every tree route working modules somehow ember looking pageroute hit code yet find solution possible load code resolver since async least something dig thanks lot", "d": "10/2014"}, {"body": "welcome sure even possible would proxy controller work spitting ideas top head maybe proxies query params everything else controller available", "d": "10/2014"}, {"body": "first lookup controller meant queryparams take data controller real controller wo nt find data needs proxies wo nt help thinking cheating put query info pageeditroute since available time machty always said first idea put everything route changed mind think would good go back first idea even tho setget values tofrom controller", "d": "10/2014"}, {"body": "thanks get fixed asap", "d": "10/2014"}, {"body": "rock made jsbin unrelated underscore issue shows open web console try nonfirefoxnightly browser see report firefox nightly see report using native array contains ff nightly", "d": "10/2014"}, {"body": "jdalton thanks headsup appreciate", "d": "10/2014"}, {"body": "fix push get work", "d": "10/2014"}, {"body": "mgenev provide jsbin complete code example unclear want fetch item view container access class stored property fwiw work fuzzy syntax embercli would need check real app", "d": "10/2014"}, {"body": "sorry got overwhelmed worked nt gotten around making bin try soon", "d": "10/2014"}, {"body": "mgenev ping issue definitely want resolve lose track details", "d": "10/2014"}, {"body": "verified changing index route arraycontroller associated template gives following error uncaught error assertion failed collection could find itemviewclass nt chance put jsbin", "d": "10/2014"}, {"body": "overall getting itemviewclass usable context collection view yet nt know create tie collection view index route arraycontroller example docs page nt quite let know uses appendto body unfamiliar way rendering mark nt want using either way itemviewclass", "d": "10/2014"}, {"body": "carpeliam yeah please make pr address documentation using functions instead strings performance consideration behavior expected strings", "d": "10/2014"}, {"body": "mixonic keyup event listens key event believe option specify event type key pattern fillin somehow something around sure best way least support different events types supported input fields", "d": "10/2014"}, {"body": "abousamra concern listeners firing data pass event object reference implementation fillin keyevent might want use single key events going close general issue safe say would welcome specific suggestions else could done fillin", "d": "10/2014"}, {"body": "rwjblue stefanpenner thanks pointing indeed problem seems good way install via bower since specific version nt cut fix ideas add patched version embercli app via bower", "d": "10/2014"}, {"body": "lock sha via components repo use canary version", "d": "10/2014"}, {"body": "michaelvdheeren think issue within app sounds like something causing view render render something modified causes view torn definitely expensive ideal event triggered rerender example overriding rerender hook sure detailed trigger could build going close specific direction please feel free reopen open new issue something specific address", "d": "10/2014"}, {"body": "still possible use old order rendering example created layout module based jquery layout call order didinsertelement goas top bottom child element knows parents size every child element gets didnt know sizing property parent think break lot apps better way", "d": "10/2014"}, {"body": "onceatime always schedule work queue runloop flush rendering complete probably want", "d": "10/2014"}, {"body": "hi wondering latest app also completely broken although getting different error message logged ipadiphones running including sure adds much thought share different error message ones mentioned previously", "d": "10/2014"}, {"body": "lindyhopchris possible would nt bank", "d": "10/2014"}, {"body": "ported patch case anyone needs", "d": "10/2014"}, {"body": "fyi anyone using patch production alter line include ipads well ipad retina identified ipad think seem exhibit problem also patch seems work great production site w ipad included even add homescreen standalone mode tested within simulator physical ipad retina amp iphone", "d": "10/2014"}, {"body": "thanks lukegalea patch somewhere download builded js get build using npm mac update manually patched emberjs put thanks work guys", "d": "10/2014"}, {"body": "hmrdk glad worked case want build", "d": "10/2014"}, {"body": "rwjblue issue build without use strict sorry nt chance go yet", "d": "10/2014"}, {"body": "stefanpenner told happy need decide", "d": "10/2014"}, {"body": "another fyi workaround nt capture ipad mini addtohomescreen webapp mode seeing issue original ipad mini complicate workaround output different ipad mini safari ipad mini addtohomescreen nobrowsercontrols webapp mode seems similar useragent uiwebview ipad mini safari ipad mini webapp mode notice missing webapp mode cause check apply workaround catch case infuriatingly causes workaround function correctly normal safari addedtohomescreen webapp version even device modified detection", "d": "10/2014"}, {"body": "confirm bug device every one refreshes app wont launch device seems work connected safari debugger cant ever see error", "d": "10/2014"}, {"body": "yet know fix land point release", "d": "10/2014"}, {"body": "simonjefford nt ember bug broken safari believe new helpers htmlbars integration nt walk specific path anymore may prevent us hitting failure case mmun confirm statement unfortunately ca nt really sure covered scenarios non bit jsc broken problems might exist nt know yet bug seem triggered primarily hot code use strict could disable ember wide high likely hood success unfortunate user apps cause failure scenario without knowing think later trying get new helper code longer binds primitives soon right course action", "d": "10/2014"}, {"body": "craigteegarden modified detection fix also handles simulator simulator ua modified detection", "d": "10/2014"}, {"body": "stefanpenner hi yup realise ios issue perhaps wrongly thought hotfix referenced going land ember point interestingly issue went away switched canary referring new helper code", "d": "10/2014"}, {"body": "fyi bower users less crazy patch", "d": "10/2014"}, {"body": "thanks work stefanpenner", "d": "10/2014"}, {"body": "canary snapshot fix fyi bower users less crazy patch", "d": "10/2014"}, {"body": "trackjs logs attempted assign readonly property nt show hits error new ios maybe patched anyone else seeing improvement app uses angular underlying issue would per tryghostghost reference underlying cause might edit unfortunately started seeing errors well", "d": "10/2014"}, {"body": "borhub unfortunately issue touch dom natives", "d": "10/2014"}, {"body": "following links around various patches various bits software related issue webkit bug linked one people pointing anyone know bug actually fault reported fixed etc much favour patching working around sorts bugs would like keep eye", "d": "10/2014"}, {"body": "nt believe reported yet spent time reading related issues nt found reported try find time evening finally report hoping get isolated failure without ember nt cracked nut scenario yet", "d": "10/2014"}, {"body": "finally chance report bug sorry delay hate writing bug reports", "d": "10/2014"}, {"body": "believe release without use strict confirm tomorrows meeting cc rwjblue", "d": "10/2014"}, {"body": "stefanpenner thank taking time raise issue know fun really appreciate", "d": "10/2014"}, {"body": "seen issues safari private browsing mode ios wondering related anyone seeing bug please tell color chrome safari browser black means private browsing enabled white means normal", "d": "10/2014"}, {"body": "zaius bug unrelated using private browsing occurs normal browsing", "d": "10/2014"}, {"body": "ok thanks clarification keep digging", "d": "10/2014"}, {"body": "todd trackjs tracking occurring least different prominent web properties help provide additional error details stacktraces privately help", "d": "10/2014"}, {"body": "toddhgardner shot email", "d": "10/2014"}, {"body": "fixed stable canary mitigate jsc broken contexts removed affected modules also removed places inlined possible missed want careful regress ember entire codebase run without", "d": "10/2014"}, {"body": "stefanpenner like open new issue us track bug reported remember stop removing", "d": "10/2014"}, {"body": "rwjblue sounds good", "d": "10/2014"}, {"body": "emberhandlebarshelper myhelper function value options form creates simplehandlebarsview optimizations assuming leaf node api intended helpers formatting ca nt call view helper functions may appeared work past versions actually structure hierarchy properly required recursive rendering actually partially work fails fast", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "still issues ed basic scaffolding embercli app attach documents models", "d": "10/2014"}, {"body": "seems like fix ed sorry trouble check issue already open open one nt thinking since ember data add logic ehhhh could help case add related edit polymorphic check going away working nt look polymorphic", "d": "10/2014"}, {"body": "polymorphic inheritance yes open ticket ed", "d": "10/2014"}, {"body": "another ticket", "d": "10/2014"}, {"body": "one solution would reopen class rather extending class", "d": "10/2014"}, {"body": "oh lord returns return value runloop event handler would control propagation simply changing results two failed tests think think using nested runloop actually correct rely jquery event system means need return false keep event bubbling without nested runloop way ensure hook code run returning value jquery move away jquery could done much efficiently leveraging runloop tl dr nt think deeply willing let going known regression expect number apps relying document release notes think must replace jquery sufficient", "d": "10/2014"}, {"body": "going leave open release without fix believe workaround always correct way fire focus encourage jquery event triggering causes runloop execute nested inside runloop triggering happens render queue views currently rendering may rerendered torn leaving things parent runloop render tree unpredictable point forward see three approaches could consider would allow safely triggering events running render tree using would avoid corruption would also cause new issues event hooks would longer chance return value handlers control even bubbling return value joined loop use would possible unsure nt already return value would warrant discussion could introduce custom method scheduled ember runloop render instead creating nested runloop might raise issues target trigger removed dom instance could discussed elsewhere defer queue would mean nested runloops never execute render tree run ways challenges deferred", "d": "10/2014"}, {"body": "mixonic mmun thank investigating information actually seems like edge case workaround triggering afterrender guarding element beeing dom sure needs fixed price three alternatives first one looks like simplest would require others check view dom feel free close want", "d": "10/2014"}, {"body": "hi guys update issue anything provide", "d": "10/2014"}, {"body": "getting error", "d": "10/2014"}, {"body": "also seeing error worth noting rsvp method deprecated however result using", "d": "10/2014"}, {"body": "error materially affecting guys apps tests", "d": "10/2014"}, {"body": "seeing main app testing based error taken moved", "d": "10/2014"}, {"body": "also seeing error reported users via error tracking service adding seems triggered route whose model updated every seconds", "d": "10/2014"}, {"body": "investigating looks like second call copy emberjs routerjs library causes error first call made call earlier function comment line app seems work normally without errors seemed like bug notifying query param changes twice however second call implemented raytiley specific reason entirely sure understand reason duplicating behavior setting true qunit tests failing due something else entirely setting query param null route deactivate callback caused next test fail transition due query param change attempted", "d": "10/2014"}, {"body": "got possible similar issue outlined built", "d": "10/2014"}, {"body": "sandstrom think bit different seems like", "d": "10/2014"}, {"body": "drogus right thanks interestingly commented issue months ago apparently memory nt today smile", "d": "10/2014"}, {"body": "sandstrom yeah problem actually part expected behavior computedsort well would nice property change event nt change array positions nt cause removesadds expected behavior computedsort nt exactly desirable want direct edit things sorting either buffer edits somehow like object controller intermediate property control exactly refresh list drogus narrowed specific cases think already linked thread nt chance try patch yet hopefully week", "d": "10/2014"}, {"body": "ok several points aceofspades nt think make happy going lay things much detail possible last jsbin uses private api removed private apis definitely subject change sure agree one gone updating jsbin remove use results working string believe expect things work please note comment would expect template able incorrect ember reserves right change behavior internal templates call signatures indeed change htmlbars reintroduced two changes required avoid error firing view must placed state buffer must attached view see maybe relax requirement buffer attached view render worry relaxing restriction cause errors wild enable good behavior lastly even without errors important note output hello name present must updated binding view later runloop last point highlights think may crux api building string html child views moment run api generating string buffer meaning buffer evolved api generates html content buffer far sane way achieve similar behavior use fetch outerhtml creates dom representation view child views recursively calling render method recursive part maybe inaccurate get idea api includes child views jsbin using api suggest caveat ember view layer designed used adhoc manner like infact codepath used course normally running application allow passing contextual element really used tests wary suggest solution adhoc rendering seems closest want closing issue poor suggestion made adhoc rendering regardless made suggestion changing meaning buffer accommodate use specific method specific circumstance", "d": "10/2014"}, {"body": "thanks mixonic detailed explanation original usecase bit different forgetting original workaround stated simply would like fetch component simple raw template compile handlebars runtime since embercli precompiles templates appears possible alternative seems declare markup javascript rather hbs", "d": "10/2014"}, {"body": "ping case important release suggest close", "d": "10/2014"}, {"body": "mucho importante oct pm matthew beale notifications githubcom wrote ping case important release suggest close reply email directly view github", "d": "10/2014"}, {"body": "ember handlebars ember canary handlebars also come across behaviour rather peculiar given following controller string class names property throws array class names property switching array throws static string class names using static string renders", "d": "10/2014"}, {"body": "inform everyone bug fixed", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "newcomer ember huge everyone company cleaning ember whenever wasted lot time found thread", "d": "10/2014"}, {"body": "asteinlein also wasted embarrassing amount time one rwjblue correct via globals easily import export embercheckboxextend app use believe change component leave view", "d": "10/2014"}, {"body": "stefanpenner respectfully disagree change use component within release without breaking semver contract completely sympathize want changed use component recall submitted pr pr declined semver impact", "d": "10/2014"}, {"body": "rwjblue making embercli addon version suffering", "d": "10/2014"}, {"body": "rwjblue breaks past complaints people subclasses textfield textfields input helper variant", "d": "10/2014"}, {"body": "machty actually happens cp mapped qp dead simple example error click post removing qp namemapping surprisingly fixes", "d": "10/2014"}, {"body": "also issue come multiple times", "d": "10/2014"}, {"body": "looking bit interesting title coreobjectreopen nt handle actions hash quite correct actually notyetextended class mixes nt handle hash example following work javascript var actionwrangler emobjectextend emactionhandler var subwrangler actionwranglerextend subwranglerreopen actions wrangle function consolelog wrangled var wrangler subwranglercreate wranglersend wrangle logs wrangled reason nt work try reopen anything else directly mixes callback mixin nt get added mixin well merged typically happens time extended though prototype reopening subclass works fine term merging hash appropriately want make work stop moving actions mergedproperty hack special case hash something else decent argument breaking change original motivation actions allow objectcontrollers able proxy property might app domain might something argument everybody used hash nt know worth seems like bad idea since core object stuff lean fast laden special cases got nothing suggestion would maybe add something guides pointing would work use case mentioned api docs maybe also somewhere routecontroller docs would useful well", "d": "10/2014"}, {"body": "also hit", "d": "10/2014"}, {"body": "ran one apps recently idea improving ergonomics embertesting loop waiting say seconds switch verbose version loop logs reason test still waiting eg embertesting waiting router load embertesting waiting pending ajax requests embertesting waiting scheduled timers possibly including tasks scheduled thoughts implement sounds good cc stefanpenner machty denisnazarov raycohen", "d": "10/2014"}, {"body": "sure default count retries wait helper seems like nice idea", "d": "10/2014"}, {"body": "app handle problem", "d": "10/2014"}, {"body": "workmanw ya like approach", "d": "10/2014"}, {"body": "luke approach intended address issue may know causing tests hang separate work around oct pm stefan penner notifications githubcom wrote workmanw ya like approach reply email directly view github", "d": "10/2014"}, {"body": "timeout length avoid hangforever tests would great would go seconds even", "d": "10/2014"}, {"body": "jamesarosen neck deep location classes router gon na try squash issue additional thoughts revelations since last discussed plow ahead", "d": "10/2014"}, {"body": "experimented number options think closest ended ie nt still use something get", "d": "10/2014"}, {"body": "adding notes believe ultimately duplicate issue using item filtereditems filtereditems defined embercomputedfilterby causes contents unnecessarily removed readded dependent key changes even item continues pass filter jsbin illustrates problem use case simply shown jsbin views animate dependent filter key changing often additionally particular views complex prefer frequently rerendering", "d": "10/2014"}, {"body": "would like see entire consider using reliable predictable approach comment nt want sound extreme issues caused mis feature kind thing result people giving ember makes question something complex incomprehensible given results surprising unexpected behavior recent sorted array handling fixes numerous issues surrounding feature demonstrates current approach complex get right entirely different approach warranted core team given thought rebooting simplify semantics improve api given current complexity actually implementing reliable cp atop current approach", "d": "10/2014"}, {"body": "core team given thought rebooting arraycomputed reducecomputed simplify semantics improve api given current complexity actually implementing reliable cp atop current approach yes lack time act current pushes need complete circle back interested could use extra help", "d": "10/2014"}, {"body": "stefanpenner yes time issue barely get need get done sleep something documented anywhere intended way forward minefield arround already cost time project point ripping anything arraycomputed reducecomputed negative payoff get unpredictable behavior performance benefit despite documentation suggests entrie array recomputes property change cases views rerender items removed readded nt given remove acrc agreed way forward could looking moving right direction least share whatever inclusion future pr", "d": "10/2014"}, {"body": "ahacking several thoughts one thought resonates putting energy diffing container view would allow us longer require maintaining array uniqueness one big goals rcac many usecases suspect recomputing entire set data coupled diffing result much better performance sanity reasonable n ala react additionally may also solve eager array observers nov meeting chicago quarterly inperson session hope related rfc going even nt believe acrc important topic hope concise path forward exist feel pain acrc narrow success path currently thoughts nt hesitate share one thing problem needs owner someone give thought attention needs unfortunately everyone capable interested likely already saturated hopefully change", "d": "10/2014"}, {"body": "happy work rfc someone couple things mind like rewrite mapsortfilter fully lazy way cp two strategies tracking array mutations diffing technique strengths generally speaking diffing better ergonomics", "d": "10/2014"}, {"body": "another bin believe shows issue editing item list item results multiple items list mutated instead one edited post discuss issue well work around refactor appapplicationcontroller emberarraycontrollerextend sortproperties manufacturer asc modelname asc series asc filteredcontent embercomputedfilter model function model return modelget isactive property model eachisactive sortedcontent embercomputedsort filteredcontent sortproperties property filteredcontent", "d": "10/2014"}, {"body": "seeing issue simple sorted arraycontroller item gets moved arraycontroller resorting item seems get destroyed recreated gets inserted correct spot array came upon thread asking problem stack overflow included jsbin shows itemcontroller logging method every time moves essentially problem talking", "d": "10/2014"}, {"body": "would possible update version ember refactoring go expected issues ticket aggregating months months old respectively", "d": "10/2014"}, {"body": "perrierism go canary time merged weeks later beta weeks later stable lots time catch bugs stuff possible might fast forwarded active beta time completion depending impact firm date unfortunately provide", "d": "10/2014"}, {"body": "stefanpenner appreciated impact seems render dynamic collection items properties actions means app dead water probably implementation use honestly reading documentation looking lot examples idea supposed done flavor terrible hack thing came close working upgrading errors started refactoring expecting find better implementation idea supposed done magical combination collectionview itemviewclass arraycontroller itemcontroller hacking init methods knows", "d": "10/2014"}, {"body": "perrierism sorry extra time would work unfortunately realjob obligations makes hard", "d": "10/2014"}, {"body": "oh man fixed soon soooo happy rush though smile", "d": "10/2014"}, {"body": "fastforwarding changes beta done impact would pretty huge least", "d": "10/2014"}, {"body": "major rewrite please add select without hacks explain somewhere use emberdata see", "d": "10/2014"}, {"body": "update issue worked master issue", "d": "10/2014"}, {"body": "wat rondalesc wonderful prs merged going close", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "got problem created jsbin recreating curious", "d": "10/2014"}, {"body": "worth encounter error app ends dynamic segment route like without issues browser refresh using ember", "d": "10/2014"}, {"body": "took pass additional documentation looks like may missing something key pressupdown methods though since ca nt seem get working advertised continue investigate update documentation necessary", "d": "10/2014"}, {"body": "xpost ping case important release suggest close", "d": "10/2014"}, {"body": "rwjblue current workaround access component inside yielded block content currently possible jsbin demonstrates use case example somerandom somerandom componentssomerandomhandlebars", "d": "10/2014"}, {"body": "ppcano afaik still need use alternative update jsbin working example also updated method mirror current component implementation yield function context options var view optionsdataview var parentview thisparentview var template emberget template", "d": "10/2014"}, {"body": "ppcano also ongoing discussion according krisselden comment probably used solve issue", "d": "10/2014"}, {"body": "rpflorence hbs controller template xpanel xpanelheader something interesting componentisopen else xpanelheader xpanel prop needed controller user customize component template based state could pass prop controller seems unnecessary user perspective nt want make new prop wants customize template think better way", "d": "10/2014"}, {"body": "think", "d": "10/2014"}, {"body": "multiple panels though", "d": "10/2014"}, {"body": "yeah sounds terrible nt find inside terrible probably works well lot things", "d": "10/2014"}, {"body": "could always specify context alternativey labels within component statements", "d": "10/2014"}, {"body": "keyword could jsbin oh using alternative private apis right", "d": "10/2014"}, {"body": "ssot branch", "d": "10/2014"}, {"body": "searls yeah since use branch ember data designed fix relationship bugs increase consistency adding removing relationships sides relationship eg add remove one side postget comments show side commentget post merged regressions fixed let us know", "d": "10/2014"}, {"body": "thanks response fivetanley case think issue unrelated think ticket", "d": "10/2014"}, {"body": "wagenet think linked wrong issues reopen", "d": "10/2014"}, {"body": "relation bug raised bug raised still relevant", "d": "10/2014"}, {"body": "looking answer exact problem dynamic fields need enumerate build form input controls seems helpers nt get value variable passed instead get passed variable name ie string example actual value however able figure interim solution custom input helper allows dereference loop variable following code working note using particular case may may limit usefulness ymmv would keen know start implementing general dereference support bound properties nothing particularly obvious jumped initial scan code stefanpenner heads start", "d": "10/2014"}, {"body": "ahacking believe mmun stream work plays nicely either already likely need bit swamped right give thought deserves apologize quick low value response", "d": "10/2014"}, {"body": "update able extract initial solution standalone general purpose helper dereference variable use within context another helper use follows helper apphelpersderefjs import ember ember export default function name options emberassert must specify variable name argumentslength var deref optionsdatakeywords name typeof deref string return deref return name questions betternicer general solution interest pr box ember helper something guide least", "d": "10/2014"}, {"body": "ahacking yes nice solution using subexpressions streams nt use syntax", "d": "10/2014"}, {"body": "mmun thanks guess wait eventual release settle cutting across new goodness something functioning nt want risk stability", "d": "10/2014"}, {"body": "ahacking basically would look like javascript import read embermetalstreamsread export default function derefhelper params options var view optionsdataview var key read params return viewgetstream key little work could make bound eg changes", "d": "10/2014"}, {"body": "mmun thanks ask documentation streams stuff please pardon ignorance aware features benefits new streams work provides", "d": "10/2014"}, {"body": "ahacking nt documentation yet stream rewrite canary still privateinternal api benefits simplifies lot template binding code makes simpler generalize example currently queryparams helper implementation manage bindings nt streamified yet interested could work find emberjs mmun want chat", "d": "10/2014"}, {"body": "exact problem sandstrom workaround meantime", "d": "10/2014"}, {"body": "sounds related simple jsbin issue demonstrates property change causes affected item removed entire array recomputed", "d": "10/2014"}, {"body": "hjdivad interested second scenario mentioned earlier could give example happening ahacking jsbin example scenario want make sure understand would happen seems like something could bite ass p although observers triggered properties set existing values triggered dependencies chains changed even nt result changes actual value hjdivad", "d": "10/2014"}, {"body": "stefanpenner thanks comment would great addition guide sin emberjscom", "d": "10/2014"}, {"body": "jayphelps bugging cause really really want keep racehorse", "d": "10/2014"}, {"body": "working right meow pr weekend yippy", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "woooo thanks jayphelps thanks heaps pushing forward", "d": "10/2014"}, {"body": "welcome working adding autoscrolling automatically even route waits promises separate pr coming shortly", "d": "10/2014"}, {"body": "love go go go", "d": "10/2014"}, {"body": "jayphelps fix native browser scrolltoanchor behavior", "d": "10/2014"}, {"body": "mmun thing scrolling inside route transitions without delay otherwise browser native autoscroll nt keep looking dom people nt solve issue next phase manually recreating affect transition done making work even almost done said pr", "d": "10/2014"}, {"body": "jayphelps take look reactrouter know recentlyadded feature people seem like", "d": "10/2014"}, {"body": "machty ca nt seem find code referring see pushpop scrolling behavior imo ember core afaik rejected several times may misremembering though", "d": "10/2014"}, {"body": "thanks ongoing work jayphelps people including attempted implement twitter bootstrap scrollspy ember main stackoverflow question ember amp scrollspy implies getting scrollspy working dependent issue working confirming understanding think fix issue fix issue bootstrap scrollspy", "d": "10/2014"}, {"body": "sure since never used scrollspy anything say would conjecture however knowing definitely pull test since seems like legit use case support keep thread apprised", "d": "10/2014"}, {"body": "cheers", "d": "10/2014"}, {"body": "bryanhunt thanks much raising saved hours digging around best part error happened hit url page directly transitioned another area app worked fine", "d": "10/2014"}, {"body": "working canary today", "d": "10/2014"}, {"body": "pwfisher awesome news thanks confirming", "d": "10/2014"}, {"body": "anyone stumbling example wagenet describes", "d": "10/2014"}, {"body": "maybe dumb question attributes supposed constants could way declaring specifically rather building behaviors affect computed properties work based capitalization behavior really hard track manifested several bizarre behaviors around calculated properties dependent capitalized attributes luck attempts figure ran exception chainnodeprototypeunchain led thread lost many hours circling smelled like bizarre conventionsrelated behavior discarded theory usually problems turn mistakes fortunately solution pretty easy aliasing properties using lowercased names using aliases dependents super hard track", "d": "10/2014"}, {"body": "fyi fixed introduction library currently beta scheduled release", "d": "10/2014"}, {"body": "also seeing issue", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "easy miss guides believe issue warning nested found", "d": "10/2014"}, {"body": "yea agree atleast throw warning", "d": "10/2014"}, {"body": "agree really want ability bind individual css properties property view without jump hoop generating valid string api would similar way bind classnames eg opposed would privilege contribute likely accepted", "d": "10/2014"}, {"body": "seems like good addon", "d": "10/2014"}]