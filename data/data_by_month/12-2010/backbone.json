[{"title": "backbutton setting documentlocationhash nt work", "body": "situation autocomplete sets hash documentlocationhash controller routes page fine backbutton nt work checked backbonehistory hashes seem save fine well ideas autocomplete currently running independently backbone views incorporated view thanks thanks great library fred", "num": "159", "d": "12/2010"}, {"title": "views referencing multiple models show relationships nested models", "body": "experimenting contrived example modelling conferences venues speakers understand backbonejs allows collections nested inside models however still uncertain relationships models coded specifically view reference multiple models relate example models speaker venue conference collections named speakers venues conferences html table view particular collection row contains data one model collection development view seems self explanatory example could table speakers andor table venues collection model collection modified relevant html table would updated uncertain convention would want html table view conferences row contains data conference model also contains data venue conference speakers attending conference obviously could server api return venue speaker data part conference data however would allow scenario venue edited via separate view still want view lists conferences automatically update instead something like thismodelbind change thisrender suppose conference model could reference venue id could pass modela modelb declaring view something like thisoptionsmodelabind change thisrender thisoptionsmodelbbind change thisrender since view treats model special case option assume nt things done also certain would work scenario multiple speakers attending conference conference model could include nested collection speakers however nested collection would updated speaker updated via another view happy model data differently ultimately want able views reference models relate models way still data submodels updated views", "num": "158", "d": "12/2010"}, {"title": "would nice backbonehistoryloadurl took url parameter", "body": "test routes without change location hash", "num": "157", "d": "12/2010"}, {"title": "one event bind", "body": "added new events method bind event trigger code end would nice integrate backbone listpush callback return binds event called one function ev callback thisbind ev callback var calls thiscallones thiscallones var list thiscallones ev thiscallones ev listpush callback return var calls ev thiscallbacks thiscallones thiscallones else calls thiscallbacks callback calls ev thiscallones amp amp thiscallones ev thiscallones ev else var list calls ev list return var l listlength lt l callback list listsplice thiscallones amp amp thiscallones ev j indexof thiscallones ev callback j gt thiscallones ev splice j break list calls ev slice l listlength lt l list apply arrayprototypeslicecall arguments thiscallones amp amp thiscallones ev var callback list j indexof thiscallones ev callback j gt thiscallones ev splice j j indexof thiscallbacks ev callback j gt thiscallbacks ev splice j calls list calls slice l listlength lt l list apply arguments thiscallones amp amp thiscallones var callback list j indexof thiscallones callback j gt thiscallones splice j j indexof thiscallbacks callback j gt thiscallbacks splice j return", "num": "156", "d": "12/2010"}, {"title": "blocking issues deep attributes cloning models", "body": "hi consider code attributes model level changing value deep level attributes clone original also changed original clone share deeplevel attribute object function could simply enhancement bug fix browsing code suspect replaced places used instance code thispreviousattributes clone thisattributes current shallow cloning results unexpected behavior attributes single level object change deep attributes like points object report anymore previous attributes state maybe could think like jquery survey interesting library looking lightweight mvc raise questions forum exchange backbone underscore thanks nice job joel var bill new backbonemodel name bill smith address city boston street var john billclone consolelog billattributes johnattributes gt true johnset name john gospel consolelog billget name johnget name gt bill smith john gospel consolelog billattributes johnattributes gt false consolelog billattributesaddress johnattributesaddress gt true johnget address city paris consolelog expected boston paris found billget address city johnget address city gt expected boston paris found paris paris consolelog billattributesaddress johnattributesaddress gt true", "num": "155", "d": "12/2010"}, {"title": "custom data backbonesync", "body": "possible check whether already string suppress yes rationale provide ability pass custom data thus making custom ajax calls consistently via vladimir", "num": "154", "d": "12/2010"}, {"title": "urlerror way aggressive", "body": "calling urlerror makes optionsurl noop please consider removing moving options honored tia vladimir", "num": "153", "d": "12/2010"}, {"title": "exceptional errors server", "body": "confused communicate exceptional events server back models example nt client side validation say uniqueemail however happen server present solution set email notunique check string backbone user model better way thanks", "num": "152", "d": "12/2010"}, {"title": "iframe src causes invalid character error", "body": "anytime hash change event starts invalid character error pops changed iframe instantiated point src empty page avoids error seems like blame", "num": "148", "d": "12/2010"}, {"title": "adding model instance multiple collections", "body": "found useful patterns single model instance part multiple collections say multiple todoitems collections belong many todolists maybe useful maintain collection todoitems perform bulk operations add model collection models collection reassigned theres easy way avoid behavior without reimplementing internal method patch adds simple option prevent joshbackbone wanted get feedback sure good idea violates backbones current collection model maybe allowing modelcollection array pointing multiple collections would better change", "num": "147", "d": "12/2010"}, {"title": "question localstorage server combination", "body": "hi fast loading like store collections via localstorage request new items server besides crud good possible solutions used localstorage module overrides syncing server fast loading syncing localstorage may also overkill dump exiting app refresh collection next startup would enough possible add different collections sync methods collection penny thoughts", "num": "144", "d": "12/2010"}, {"title": "suppory hyphen delimiter named parameters routes", "body": "currently named parameters routes stop globbing encountered personally use hyphen delimiter routes since use jquery mobile expects find dom element id current bit peculiar case maybe hack jquery mobile work slashstyle routes though open ticket see regular expression namedparam current regexp personal branch thoughts", "num": "143", "d": "12/2010"}, {"title": "model save method pass request object parse", "body": "new resource created backbone excepts server return hash changed attributes would update object notable part id attribute would make backbone see resource persisted use update method instead create subsequent save calls api frameworks returns empty response set location response header uri created resource able utilize response parse method receive request object", "num": "141", "d": "12/2010"}, {"title": "parsing data nested collection", "body": "structure looks like grouplist gt group gt userlist gt user grouplist contain multiple group objects group contains userlist made user objects following examples nested collection documentation created grouplist collection fetches server list groups group collection attribute new userlist gets fetched server parsing userlist user attributes seem lost see data parse function lost get user objects userlist none attributes json data contained windowgroup backbonemodelextend initialize function bindall addone addall testthis thisusers new userlist thisget users group thisusersurl thisid users thisusersbind add thisaddone thisusersbind refresh thisaddall thisget name thisset name new user addall function model modeleach thisaddone addone function model var view new groupview model model viewtemplate template usertemplate html userlist append viewrender el clear function thisdestroy thisviewremove users collection windowuserlist backbonecollectionextend users model groupview var groupview backboneviewextend tagname li initialize function bindall render thismodelbind change thisrender thismodelview render function thisel html thistemplate thismodeltojson thissetcontent return setcontent function consolelog thismodelcollectionmodels var content thismodelget name usercontent text content groupview nt view application trying break everything component parts", "num": "140", "d": "12/2010"}, {"title": "destroying models collection", "body": "obviously collectioninvoke destroy work would one empty collection", "num": "139", "d": "12/2010"}, {"title": "collection hold different types models", "body": "models different attributes consider fictitious car hire application keeps track collection vehicles hired might common attributes among vehicles parameters might different therefor could models car van truck moped etc would another approach better", "num": "138", "d": "12/2010"}, {"title": "collection addorupdate", "body": "would nice addorupdate method collection would look id attribute decide whether trigger set existing model add collection", "num": "137", "d": "12/2010"}, {"title": "collection next prev", "body": "like know next previous model collection would nice methods next prev collection example collectionnext model collectionprev model nt new previous return undefined", "num": "136", "d": "12/2010"}, {"title": "docs point wrong url", "body": "docs link douglas crockford removed prevent hotlinking pointing github repo may helpful", "num": "134", "d": "12/2010"}, {"title": "viewdelegateevents call thisel unbind", "body": "case using jquerymobile backbone app creating view jqm page turns jqm adds bunch event handlers things like pages creating view causes bindings jqm added get removed causes problems road", "num": "133", "d": "12/2010"}, {"title": "set includes id id gets set attribute model", "body": "title says also problem incorrectly trigger change event", "num": "132", "d": "12/2010"}, {"title": "export geturl", "body": "use overriding backbonesync would nice rewrite geturl reason export backbonegeturl", "num": "130", "d": "12/2010"}, {"title": "access collection one models", "body": "defined methods backbonecollection need invoked contained models property something similar", "num": "129", "d": "12/2010"}, {"title": "collectionrefresh release model", "body": "assumed work like old models new models currently lacks model releasing old models still collection assigned events still triggering collection longer owns model something behind behavior nt see yet", "num": "128", "d": "12/2010"}, {"title": "incorrect value eventcurrenttarget delegateevents callback", "body": "delegateevents callback view gets called event passed parameter currenttarget attribute incorrect pseudo code better job describing problem click var view backboneviewextend events click clicked clicked function event say element clicked instead says alert eventcurrenttargetid var view new view el documentgetelementbyid", "num": "127", "d": "12/2010"}, {"title": "collectioncreate return server response success callback", "body": "creating new model using create want assign id model corresponds id server generated unfortunately currently bug create function removes response modelsave success callback easy fix specific reason missing servergenerated id assigned models different way", "num": "126", "d": "12/2010"}, {"title": "best way models needed load time already bootstrapped place", "body": "hello new framework would really like incorporate application trying determine best way instantiate objects initially understand print giant javascript object serverside something like collectionparse argument giant javascript object best way go initializing objects initially missed something docs please let know", "num": "125", "d": "12/2010"}, {"title": "question previousattributes", "body": "hi guys trying understand intentions behind modelpreviousattributes assumed var foo backbonemodelextend code var foo new foo test fooset test consolelog foochangedattributes would get attribute test instead getting false looked source think reason change method executed inside set method line inside change thispreviousattributes clone thisattributes overrides previousattributes current ones basically means changedattributes always return false probably missing something could please let know intension behind changedattributes thanks", "num": "124", "d": "12/2010"}, {"title": "backbone always initialized window", "body": "sometimes page loads backbone nt get initialized got bit abnormal setup using requirejs load core files backbone underscore loaded grabbing models views collections explicitly setting windowbackbone backbone end backbone within selfcalling anonymous function line version fixes issue like anyone else issue happens chrome firefox osx nt tested anywhere else", "num": "121", "d": "12/2010"}, {"title": "underscore methods collection return array models collection", "body": "tried nt work method returns big deal use get names new backbone wondering missing something", "num": "120", "d": "12/2010"}, {"title": "backbone handle models within models", "body": "first backbone totally awesome thanks great work implemented something similar earlier year got done set aside get project done certainly give backbone spin development backbonelike solution ran issues easy solution wondering backbone way deal ui displays list projects along members projects project icon clicked expandshrink view show list full details member essentially looks like retrieve project list get get json like icon clicked another ajax request made get member project get returns json like totally simplified point models within models wondering backbone somehow support update every instance view instance expand super duper project click click activate button tom jones want backbone update multiple things screen update tom jones full detail row indicate active also update super duper project row show tom jones active want refresh entire project list expandcollapse state project gets lost user would reexpand projects also scroll location would lost scrollable div would jump back top note complete control json change whatever need project contain array full member objects instead light versions also wanted reduce bandwidth increase speed application lot data anyone give advice handle situations like thanks tauren", "num": "119", "d": "12/2010"}, {"title": "form serialization railsy mass assignment", "body": "practice may prove yagni thinking want write little something would serialize form object suitable passing directly modelset figure since since rails forms often map directly models make easy models front end well know nt belong backbone per se figured post since related implementation frankly love thing like formfor backboneflavored form could could automatically map instance model validation errors dataevent binding etc sure potential dryness worth potential headaches form magic tempting said phrase backbone flavored sounds gross thoughts", "num": "118", "d": "12/2010"}, {"title": "namespacing outgoing requests w rails convention", "body": "note different includerootinjson question way namespace attributes outgoing putpost requsts backbone makes eg follow rails convention rather integrating backbone existing app bunch endpoints following former convention way right would willing accept patch", "num": "117", "d": "12/2010"}, {"title": "bind enhancements", "body": "rather nice able know event sometimes want addremoverefresh without supporting multiple events seems like fairly simple handy enhancement also since often end binding event handler perhaps function could take third argument sets context idea thanks", "num": "113", "d": "12/2010"}, {"title": "question views rendering sub views", "body": "hopefully good spot post question please forgive posted elsewhere playing backbone bit starting sink wondering someone could help understand correctbest way go certain task like create two different views mainview subview subview charge rendering view particular instance model eg show action mainview charge rendering view collection several models eg index action like mainview use subview render collection sure going correctly got gist came love someone could take look provide feedback easierbetter way achieve thing sort feel way rendering subviews within main view render method little hacky suggestions would greatly appreciated john", "num": "112", "d": "12/2010"}, {"title": "nested collections", "body": "possible nested collections eg would like collection subtodos todo model still one remote store", "num": "111", "d": "12/2010"}, {"title": "models fire events collections member", "body": "following code illustrates var testmodel backbonemodelextend var extendedcollection backbonecollectionextend model testmodel var firstcollection new extendedcollection var secondcollection new extendedcollection firstcollectionbind add function consolelog first collection something added secondcollectionbind add function consolelog second collection something added firstcollectionadd test attribute secondcollectionadd firstcollectionat", "num": "109", "d": "12/2010"}, {"title": "view rendering single item", "body": "currently application development looking backbonejs framework far everything worked fine thanks great piece software nonetheless stumbled upon problem maybe even issue know exactly post large sets data coming ajax request use collectionadd get data collection use view backboneviewextend ultimately render single item collection appending item dom element using application view like todo example want accomplish kind html code text text text every text using standard backbone functionality backboneview would use tagname create new element filled content would always wrap around content backboneview would create something like using span tagname way create kind html code backbone functionality necessary write something custom accomplish thanks advance work amp answer exinferis", "num": "108", "d": "12/2010"}, {"title": "view id initialization", "body": "understand id classname etc need explicitly passed extend el correctly intialized id forth set html id el correctly would something like question circumvent behavior inferred modelid cid use case every single one views requires elid set rather readd viewintiailize ala current method uglier version nicer centralized way handling without add code every view directly patching backbone", "num": "107", "d": "12/2010"}, {"body": "sure actually dom element page time js first loaded", "d": "12/2010"}, {"body": "yes moved backbone code document ready one point also tried id none worked stumped going conceptually achieving binding", "d": "12/2010"}, {"body": "going replacing new element manually probably something nt want try removing line adding bottom instead right calling", "d": "12/2010"}, {"body": "wow almost backbone made new div subordinate selector event unclickable changed using wrap events narrow selector wrap element wanted clicked new element strictly made event rendering view displays regardless thanks jeremy", "d": "12/2010"}, {"body": "hi fred using ie perchance merely setting windowlocationhash nt enough record history event browsers suggest using backbone purpose", "d": "12/2010"}, {"body": "hi jash use ie absolutely testing purposes using chrome savelocation works great storing hash history need hashchange triggered controller route new page way trigger change", "d": "12/2010"}, {"body": "backbonepreferred way simply call function want route calling call think dropping bookmark waypoint want able go back later", "d": "12/2010"}, {"body": "perfect thanks backbone beautiful thing", "d": "12/2010"}, {"body": "view option provided mere convenience common case certainly views listen events disparate models collections views perhaps something like", "d": "12/2010"}, {"body": "little fuzzy specific proposal want able trigger route without url actually changing testing app browser", "d": "12/2010"}, {"body": "exactly probably good idea nt log tickets late night", "d": "12/2010"}, {"body": "share use case patch specific thing writing accomplish", "d": "12/2010"}, {"body": "trigger event exactly like jquery", "d": "12/2010"}, {"body": "mean specifically trying accomplish app", "d": "12/2010"}, {"body": "sorry misunderstood fetch todo server renders collection items complete want select specific one bind event make sense", "d": "12/2010"}, {"body": "hi jeremy want see app building send mail set martin planboxcom", "d": "12/2010"}, {"body": "yep think would cleaner use success callback fetch call instead binding removing event", "d": "12/2010"}, {"body": "well oversimplified example complicated cascade events occur need catch last one makes sense", "d": "12/2010"}, {"body": "sure trying discover answer question would want event triggered callback would nt work accomplish fired time nt understand possible use", "d": "12/2010"}, {"body": "method first call cascade events first call successerror callbacks code triggers start cascade binds last event catch different collections involved throughout cascade admit usage rare nonetheless useful plus implementation offers performance hit one never used", "d": "12/2010"}, {"body": "could pass data js object also able set value desire", "d": "12/2010"}, {"body": "chance pass optionsdata since get first model object wo one must pass object looking like valid model even wants pass optionsdata thus issue", "d": "12/2010"}, {"body": "alright made viable solution patch sha thanks ticket", "d": "12/2010"}, {"body": "thanks issue patched sha", "d": "12/2010"}, {"body": "responses tend send back model attributes handle non model related errors want return json whatever else", "d": "12/2010"}, {"body": "serverside validation fails return appropriate http code like say error message like send format choosing text json passed callback call invoked model response nt pass callback get event triggered model also passing response second argument", "d": "12/2010"}, {"body": "added bit explanation sha", "d": "12/2010"}, {"body": "nt see error seeing version errors mind little research try couple options source let know ones work without triggering errors blank javascript false javascript void javascript", "d": "12/2010"}, {"body": "tested bit looks like real issue issue running compatibility mode running genuine copy", "d": "12/2010"}, {"body": "ah yes indeed running guess really nt issue maybe stub empty page solution dev mode assuming lot mac devs running issue", "d": "12/2010"}, {"body": "whew record compatibility mode completely broken really ca nt rely behave like real copy ie fashion js window properties css rendering", "d": "12/2010"}, {"body": "wow good know always thought reliable make sure test real double check make sure particular issue nt present project", "d": "12/2010"}, {"body": "think definitely improvement allow something sophisticated current last collection wins moment model needs know collection currently order generate appropriate url say got belongs save later pick move different list save url agree keeping array collections would great long figure rules model url generated", "d": "12/2010"}, {"body": "override smart function knows whether check localstorage make ajax request throw pseudocode backbone give tools need make work well nt matter side data originates arrives good go", "d": "12/2010"}, {"body": "honor possible querystring moreover syntax denote optional named parameter splats param way greedy vote querystring special passed intact handlers completely optional accidentally clash routes mean certain route match uri wo querystring vladimir", "d": "12/2010"}, {"body": "also escape literal char routes way could catch special chars mean eg notice first autoescaped otherwise treated vanilla char breaks assumptions token", "d": "12/2010"}, {"body": "patched started test issue realizing premise funky part url dealing posthash part query strings nothing probably nt encoding faux query strings location hash first place bnolan proposal delimit dashes afraid dashes valid characters urls often parts literal named param case slugs accounts documents plenty dashes closing ticket", "d": "12/2010"}, {"body": "escape literal char routes afterhash url browser takes want single page app aheterhash route nt escape search queryp page example p treated special regexp char consider vladimir", "d": "12/2010"}, {"body": "dvv thanks raising issue patch escaping regex characters literal route parts sha give try let know think", "d": "12/2010"}, {"body": "curiosity framework", "d": "12/2010"}, {"body": "djangotastypie checked looks perfectly valid answer create", "d": "12/2010"}, {"body": "patch pull request agree xmlhttprequest object available jquery sure minimal version backbone work quick look zepto page shows call success function request object believe would passed undefined case", "d": "12/2010"}, {"body": "sam hit issue day zepto updated pass along xhr madrobbyzepto", "d": "12/2010"}, {"body": "merge patch amended thing collections well going go route nt seem little hacky rely actual xhr object passed success callback actual response server need order complete action", "d": "12/2010"}, {"body": "jashkenas point ajax callback wouldnt say hacky mean whole result ajax request passed normally jquery zepto also api return success resource creation set location header new resource sound reasonable point backbonesync could look hacky especially local persistion storage use request sure maybe results sync operation passed back callback function without thinking arguments", "d": "12/2010"}, {"body": "another alternative would make default function smarter handle sort location header redirect resource new url would preferable presuming currently making ajax call inside function nt see right way go time triggered actual data hand", "d": "12/2010"}, {"body": "check response empty location header parsing \u00ecd specific thing sure saved object change attributes really nt care server return whole object case resource could changed saved api really return object representation resource method could add callback fetch resource would suboptimal would spend requests seems logic", "d": "12/2010"}, {"body": "mybad retrieving json contained key called attributes", "d": "12/2010"}, {"body": "ended extending model collection methods mymodel backbonemodelextend destroy function options options options thisselected thisunselect options optionssilent thistrigger destroy options thiscollection thiscollectionremove options return mycollection backbonecollectionextend clear function options options options thislength gt thisat destroy options optionssilent thistrigger clear options return", "d": "12/2010"}, {"body": "two things first destroying models collection client server second simply removing models collection clientside reason backbone nt former builtin standard basic rest wo nt want encourage folks submitting individual http requests one destroy item special endpoint perform bulk destroy empty collection clientside done like", "d": "12/2010"}, {"body": "happens code watches particular model would never know got removed would nice event triggered rest call made hence implementation destroyclear rest calls server specialized methods deletedeleteall model trigger destroy event watchers get notified admit nt like current implementation clean server calls could made optional events always triggered happy", "d": "12/2010"}, {"body": "certainly collection hold different types models well models different sets attributes defined able listen events defined attributes", "d": "12/2010"}, {"body": "sure one tend rendered synchronously whereas tend happen asynchronously get model reference returned callback mind fleshing think api would look like bit", "d": "12/2010"}, {"body": "assumption create triggered client however consider server pushes new model created another user use case mind method would require model id thinking could pass option collection method add called forceupdate private helper add could update existing model exists instead shooting error bit background usage backbone building collaborative list list collection items item represented model updates insertions initiated user ie client pushed server initiated another user", "d": "12/2010"}, {"body": "great new todo comes server", "d": "12/2010"}, {"body": "already code would nice option add collection", "d": "12/2010"}, {"body": "would think simply making behave like currently throws error model already exists within collection", "d": "12/2010"}, {"body": "may break existing functionality others would work", "d": "12/2010"}, {"body": "pretty simple patch wanted put pull request diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs return thismodels index get next model collection next function model return thisat thisindexof model get previous model collection prev function model return thisat thisindexof model force collection resort nt need call normal circumstances set maintain sort order item added sort function options diff git atestcollectionjs btestcollectionjs index atestcollectionjs btestcollectionjs document ready function ok isequal collast attributes aattributes test collection next function equals colnext colfirst get label c equals colnext collast undefined test collection prev function equals colprev collast get label b equals colprev colfirst undefined", "d": "12/2010"}, {"body": "looks good think", "d": "12/2010"}, {"body": "interesting idea think method collection model thought", "d": "12/2010"}, {"body": "would think", "d": "12/2010"}, {"body": "thanks tip fixed", "d": "12/2010"}, {"body": "comment unbind call delegateevents test fails think want remove events previously added via delegateevents none events", "d": "12/2010"}, {"body": "easy fix make tests pass anyway cache delegated events new delegatedevents property view clean top delegatedevents nt feel right though delegateevents adds events user decide add ca nt think happier removing unbind call delegateevents making peer function undelegateevents runs unbind happy fork give go including updating doctest cases etc notion adding undelegateevents makes sense course perfectly happy oneliner removal unbind well", "d": "12/2010"}, {"body": "pmuellr quite right twoline patch uses jquery namespaced events cause ever unbind events bound please give patch try let know think", "d": "12/2010"}, {"body": "works great thx", "d": "12/2010"}, {"body": "supposed behave notified model observing changes even listen events treated specially set direct property model object convenience particular reason think behave differently", "d": "12/2010"}, {"body": "looking problem problem behaving way got unexpected event saw listed assumed mistake nt noticed real problem test fails nothing changed yet got change event also inside change callback call get sure seems like bug", "d": "12/2010"}, {"body": "sure thanks reporting patch fix", "d": "12/2010"}, {"body": "hmm perhaps although call property function lot folks choosing override using rest tell us little using overridden function", "d": "12/2010"}, {"body": "using jsonp lot basically means using backbonesync function one two changes datatype method like really much trouble rewrite function since keep figured might worth exporting thing thought though strays farther current code setting default geturl method models collections returns thisurl url explicitly set returns could override geturl entirely return something else backbonesync always call modelgeturl might adding much complexity small convenience", "d": "12/2010"}, {"body": "second point think effectively overriding ah jsonp love default backbonesync support seamlessly feel like cooking patch enables either option simply jquerystyle detecting remote urls also changes jqueryajax works may want take look", "d": "12/2010"}, {"body": "ok take shot patching seems like could simple passing datatype option somewhere autodetection would nice see make work", "d": "12/2010"}, {"body": "recent commit added support pass arbitrary options actual call jsonp easy", "d": "12/2010"}, {"body": "saw thought thing handy thanks", "d": "12/2010"}, {"body": "indeed try", "d": "12/2010"}, {"body": "nope legit bug thanks bringing patch fixes tests let know works", "d": "12/2010"}, {"body": "works great thanks", "d": "12/2010"}, {"body": "seeing problem running test script produces alert seeing sounds like bug jquery nothing complicated going", "d": "12/2010"}, {"body": "indeed right result shenanigans code thank much looking amp apologies unnecessary distraction", "d": "12/2010"}, {"body": "couple things throwing away callback also server responds json representation model attributes send including set model need use callback triggering sideeffect", "d": "12/2010"}, {"body": "great success response preserved sorry right update id server json response nt namespaced model works beautifully thanks great work backbone", "d": "12/2010"}, {"body": "hi collin order bootstrap initial models page load time recommend serverside code print js array use like documentcloud like", "d": "12/2010"}, {"body": "added little section bootstrapping documentation", "d": "12/2010"}, {"body": "awesome thank", "d": "12/2010"}, {"body": "yep use course event detect changes previous version object example using documentation bind callback event model give looking alternately building changes model without triggering event passing function expect call triggering event clearing changeset", "d": "12/2010"}, {"body": "thanks makes sense building changes model think looking thanks", "d": "12/2010"}, {"body": "sorry sounds like bug requirejs might something screwy object backbone looking order detect commonjs relevant bit backbone", "d": "12/2010"}, {"body": "thanks file", "d": "12/2010"}, {"body": "nope missing anything collection methods indeed return arrays models use underscorejs rewrap array like continue perform collection operations", "d": "12/2010"}, {"body": "handy thanks big fan underscore missed wrapper style entirely", "d": "12/2010"}, {"body": "tried using wrap array version nt know backbone models like collection version would need call rather access perhaps wrapper function like also knows models would useful", "d": "12/2010"}, {"body": "ah yes special case use conjunction get list active thing names like trying either", "d": "12/2010"}, {"body": "hi tauren question asked several times comment led finally add faq section backbone documentation take look bit nested collections let know answers questions let know", "d": "12/2010"}, {"body": "think feel way would awfully nice able instantly convert form backbone attributes viceversa however found forms least little bit custom probably spend time hacking around mapping gain first place said include jquery backbone already form serialization athand", "d": "12/2010"}, {"body": "one thought closing ticket interest backbone probably start life backbone plugin proves popular", "d": "12/2010"}, {"body": "agreed far jquery thing goes want test assertion first blush nt look like fnserializearray function would actually work according docs serializes forms like would think would need like work set thought either way page far potential relevance plugin", "d": "12/2010"}, {"body": "yes array object deal duplicate keys", "d": "12/2010"}, {"body": "possibly something like", "d": "12/2010"}, {"body": "override tojson models", "d": "12/2010"}, {"body": "think agree collin time adding line like slightly easier let leave things time arises common question add option also note accomplish thing models overriding", "d": "12/2010"}, {"body": "wo nt mess collection tojson though seems bit weird endpoint config tweak json representation things", "d": "12/2010"}, {"body": "depends endpoint expecting nt used internally backbone anything like discuss livelier fashion feel free pop", "d": "12/2010"}, {"body": "thanks irc chat try overriding tojson backbonesync posterity also note accomplish thing models overriding backbonesync since models nt know names ca nt tweak backbonesync done go configure models least know names doable course", "d": "12/2010"}, {"body": "hi henrik nice idea moment event names arbitrary strings restrictions format think feature worth keeping example change would nt work attribute key contains space think pattern perhaps better served something like", "d": "12/2010"}, {"body": "ah see point still think keep things cleaner another option would pick delimiter like comma example also think idea supporting third context argument", "d": "12/2010"}, {"body": "forgot respond bit sorry able pass context object means need rebind function need rebind function object identity wo nt match time go left function ca nt reference", "d": "12/2010"}, {"body": "fair enough thanks taking time respond building cool stuff backbone big client let know wild thanks", "d": "12/2010"}, {"body": "problem looking forward seeing wild like get quick answers questions like feel free pop", "d": "12/2010"}, {"body": "one possibility would initialize subviews main view nt creating new view objects every render render reduce values rendered subviews top head nt tried also probably want us backbonecollection instead array gist could create view collection main view call render view individual items collection main view may little bigheavy handed need", "d": "12/2010"}, {"body": "patterns rendering collection modelviews still like implement nt single pattern fits levels performance convenience small numbers models rendering templates loop inserting mainview element fine large numbers models probably want single template generates entire html models end single dom insertion single page reflow", "d": "12/2010"}, {"body": "sure sort question come several times added section faq let know nt help answer question", "d": "12/2010"}, {"body": "thanks first must say much like backbonejs learned much javascript allready looking forward last get structure gui code thing try nested collection backbone would like service server returns something like title footitle description desc subpages title title page body body till title page title title page body body till title page one single get request would also like post string one single request get atomic post model looks something like windowiup backbonemodelextend initialize function bindall thissubpages new pagelist sync function method model success error success model windowpagelist backbonecollectionextend reference collection model model page initialize function bindall addquestionpage tried shortcut sync method sucess still struggle get run smoothly updatesave nested subpage collection think madness totally wrong could done", "d": "12/2010"}, {"body": "thanks reporting pushed fix tests closing ticket", "d": "12/2010"}, {"body": "would nt worry wrapper good practice view nested single node easily removed dom time comes really want avoid view element avoid using methods depend event binding scoped selector would nt recommend", "d": "12/2010"}, {"body": "nt centralized way options already laid either passing create new view setting may red herring though part idea backbone views maintain reference model object necessary ever look model id stored dom modelbacked views id properties html element specific patch way autosetting dom ids like propose", "d": "12/2010"}, {"body": "much looking model accessing model via outside context view giving view dom element randombutmeaningful attribute case original intention aside fits perfectly could definitely following red herring outline one recent scenarios turning jquery ui sortable list whose gets renderedappended sortable require support ordering update etc callbacks problems almost certainly stem trying mix legacy code case lots vanilla jquery ui widgets respective events nt specific patch mind conclusion something wrong manually assign curry cheers help b", "d": "12/2010"}, {"body": "point see attributes changed since last event priority constructor change value appears like avoid use regular inside constructor function added test cases around issue backbone behaving correctly case", "d": "12/2010"}, {"body": "bug changed set true haschanged returns false haschanged attr returns true see general need super silent nt ever tell anyone setter function add icognito option set would better another setter function", "d": "12/2010"}, {"body": "thanks making distinction patch fixes pulling calls outside checks", "d": "12/2010"}, {"body": "change good nt comment suggestion extra option set think", "d": "12/2010"}, {"body": "like hear usecase first main thing need distinguish calls trigger events calls nt think handles adequately point going might well", "d": "12/2010"}, {"body": "use case think initialization model case want complete set attributes model read code constructor see previousattributes set calling initiatilize", "d": "12/2010"}, {"body": "could nt know initialization changed default value attribute however nt alternative also override constructor long remember call", "d": "12/2010"}, {"body": "documentation implies constructor initialize nt know distinction might want update doc clear tell user constructor overwritten silently set attributes end replace initialize constructor things fine thanks martin", "d": "12/2010"}, {"body": "actually nt work attributes created constructor way call set inside overloaded constructor call super", "d": "12/2010"}, {"body": "good point", "d": "12/2010"}, {"body": "let step back explain need collection items display list fetched server js add selected attribute user select interactions need set upon construction model maybe attribute right way thoughts", "d": "12/2010"}, {"body": "ok pulled selected attributes set property model firing select unselect events setting attributes quietly initialize directly call thispreviousattributes clone thisattributes consider case closed thanks", "d": "12/2010"}, {"body": "yes works thanks raising issue patch clones list tests closing ticket", "d": "12/2010"}, {"body": "works thanks", "d": "12/2010"}, {"body": "hey jeremy playing around bit actually makes lot sense especially browser allows start quickly binding updates optimize much want plus sideeffect making related properties update change make sure get rerendered cool koen", "d": "12/2010"}, {"body": "agree module loading nt relevant backbone want clarify requirejs lets specify dependencies development code create combined minified optimized files production using optimization tool browserbased js goal nt much let module loading production let develop small units functionality express dependencies know generate optimized code done", "d": "12/2010"}, {"body": "thank rebecca nt time reply basically thoughts subject asking module system people using either part typically used others using requirejs everywhere including backend worked james flush bugs app uses lot frameworksprojects works perfectly modules built work environments far mostly form validation objectstorage serializationdeserialization used helpful saying", "d": "12/2010"}, {"body": "thanks ticket bit reluctant change means changing api bit think best patch makes possible pass jquery parameter option call method relies", "d": "12/2010"}, {"body": "great gives us much control requests sent thanks", "d": "12/2010"}, {"body": "thanks feedback default backbone think going keep pattern awfully convenient view element times render regardless happens dom", "d": "12/2010"}, {"body": "per discussion jeremy irc specific use cases warrant able fetch refresh rather clearing collection triggering refresh want individual addremove events based added generally ideal dom manipulations say subscribing unsubscribing live feed model collection cases want know item removed discussing good api pass options object ideas include current frontrunner individual think", "d": "12/2010"}, {"body": "ckorhonen patch merged", "d": "12/2010"}, {"body": "alright zepto backbone zepto support thanks taking care hard work sam closing ticket", "d": "12/2010"}]