[{"title": "tests running", "body": "shows spec expect skip fail running tests locally spec expect skip fail looked back past days see happening strictly new problem idea benjamn", "num": "138", "d": "6/2013"}, {"title": "address emfile many open files errors clean runs", "body": "cc jeffmo", "num": "137", "d": "6/2013"}, {"title": "onclick broken ios", "body": "ios safari really nt want clicking anything tag known issue way fix putting empty onclick attribute nodes wish emit click events yep presumably emit click ios ensuring click event actually reachable ios device stack overflow link points also issue elements associated elements order behave clickable label must also include empty onclick attribute", "num": "134", "d": "6/2013"}, {"title": "consider allowing unmounting", "body": "let people invoke seems harmless currently throw theory cleared unmounting backward compatibility reasons aside get better clearing asynchronous callbacks unmount seriously consider clearing unmounting", "num": "133", "d": "6/2013"}, {"title": "jsx overwrites modules without relativize", "body": "encountered issue demoing airbnb today steps repro create dir create regular js module containing contains run build js files alongside jsx common use case tool observe reactjs gets overwritten file throws exception manifests time pass something x js require react js files get overwritten confusing think really need turn magic tool unless relativize provided includes debranching relativizing module names sort thing jsx desugaring happen", "num": "131", "d": "6/2013"}, {"title": "reactnativecomponent throw invalid property names", "body": "dompropertyoperationssetvalueforproperty complain invalid properties coworker confused silently ignored", "num": "130", "d": "6/2013"}, {"title": "maybe interpolate within jsx attributes", "body": "would cool useful compiled similar though looks like fighting uphill battle", "num": "129", "d": "6/2013"}, {"title": "write docs reactprops", "body": "", "num": "127", "d": "6/2013"}, {"title": "id selection", "body": "search nt find related issue go apparently react today still hijacks dom element id nt gotten chance try yet rendering bit unpractical css wondering rather using attribute like datareactuid performancecompatibility issue motivation behind using id internally target elements instead attribute sure still possible use classes bit think one less quirky gotcha like would make react much appealing", "num": "125", "d": "6/2013"}, {"title": "pending state updates may confusing", "body": "incremented new state stored finishes refactoring never increment twice probably confusing maybe nt bug fix behavior instead updating thisstate immediately still updating ui later right ca nt think situations thisstate sync ui problem vjeux suggested open issue probably easiest fix updating though", "num": "122", "d": "6/2013"}, {"title": "getting jsx syntax play nicely jslint", "body": "playing around library trying use jsx syntax wondering guys get play nicely jslintjshint jslint obviously like jsx syntax expected identifier instead saw lt javascript syntax error get around jshintrc file", "num": "121", "d": "6/2013"}, {"title": "remove content property", "body": "currently paths child content supporting paths makes code complicated needs really single child content using make sure single text child thought nt look like anymore", "num": "119", "d": "6/2013"}, {"title": "adding incrementally setstate gives approximate numbers", "body": "sure whether intended problem javascript fiddled around example facebookgithubioreact tried code var timer reactcreateclass getinitialstate function return secondselapsed tick reactautobind function thissetstate secondselapsed thisstatesecondselapsed componentdidmount function setinterval thistick render function return reactdomdiv seconds elapsed thisstatesecondselapsed reactrendercomponent timer mountnode result comes intended point adding give numbers hope explains well hieu", "num": "118", "d": "6/2013"}, {"title": "parens inside causes syntax error passed jsxtransformer", "body": "happens jsxtransformer something like gets transformed testdemo case think might related issue", "num": "116", "d": "6/2013"}, {"title": "stop requiring docblock jsx transformer", "body": "pretty annoying noise let stop requiring probably keep simple want make jsx generic standalone might need bit carefully", "num": "114", "d": "6/2013"}, {"title": "commoner grep providesmodule turns vim swap files", "body": "getting errors grunt maybe also causing confusion mine sure right thing perhaps filter file extension hiddenness vim swap filenames start", "num": "111", "d": "6/2013"}, {"title": "come convention forcing binjsx rebuilds without manually clearing modulecache", "body": "cc petehunt zpao", "num": "104", "d": "6/2013"}, {"title": "react throw nested tags", "body": "browsers special things selfclosing tags like react warn throw detects nested reactdomp", "num": "101", "d": "6/2013"}, {"title": "reactrendercomponent tries update components without checking constructor type", "body": "see jsfiddle reported looks like nt checking constructor type figure unmount rather receive new props may fixed master already nt checked yungsters jordow take look add test", "num": "100", "d": "6/2013"}, {"title": "react browserify module issues", "body": "hello using react combining browserify goal able use node modules react using workflow write jsx logic include require installed node modules use reacttools compile jsx js browserify said js would include node modules however compiled jsx reacttools changes something like creates stub file much breaks importing modules seems happens part compiling workflow workaround", "num": "98", "d": "6/2013"}, {"title": "scoped css", "body": "way react renders dom really interesting wondering plan include functionality sets style rendered content without css name pollution something like following initialize style beginning changing key something unique say rendered class name course concern css rule might reach anymore since class name nt actually exists see huge benefit believe worth thinking find solution", "num": "94", "d": "6/2013"}, {"title": "mocking working eventpluginregistry", "body": "since tests injecting plugins name multiple times fail nt happening since", "num": "90", "d": "6/2013"}, {"title": "add demo using coffee files implement react component", "body": "cc petehunt", "num": "83", "d": "6/2013"}, {"title": "support comments jsx", "body": "work comment nt fix actually need happen wanted get file remember call changelog", "num": "82", "d": "6/2013"}, {"title": "binjsx relativize required module ids unless relativize passed", "body": "inspired reduce number assumptions imposed considerably still use grunt tasks poison pick cc petehunt zpao", "num": "80", "d": "6/2013"}, {"title": "grunt test hangs", "body": "nt know going tried cleaning project grunt test hangs without output cpu fan starts spinning probably thinking something hard", "num": "79", "d": "6/2013"}, {"title": "preserve line numbers grunt test", "body": "line numbers reported according package output original file line number", "num": "78", "d": "6/2013"}, {"title": "ordering componentdidmount events", "body": "currently mounting two nested components componentdidmount fires outer element inner one ca nt remember frustrated earlier week expect inner component mounted completely outer component componentdidmount method runs rely children fully mounted agreedisagree", "num": "76", "d": "6/2013"}, {"title": "allow namespacing component names jsx", "body": "", "num": "74", "d": "6/2013"}, {"title": "jsx offline transform exits error code change ubuntu", "body": "basically title says install reacttools using jsx w correctly detect existing files transform upon write watched file jsx exit error code commoner tests pass exact steps followed ubuntu install nodejs via manual instructions ubuntumint install reacttools sudo npm install g reacttools create file helloworldjs described getting started tutorial new terminal jsx w edit helloworldjs add comment notice jsx exited echo prints akrieger vb www ls js helloworldjs akrieger vb www ls htmljs akrieger vb www jsx w js htmljs helloworld akrieger vb www echo akrieger vb www ls htmljs akrieger vb www", "num": "71", "d": "6/2013"}, {"title": "automatically bind scope user provided methods", "body": "common case let make default nt need wrap methods", "num": "70", "d": "6/2013"}, {"title": "jsx whitespace coalescing work like regular html", "body": "currently two escaped entities outputted space removed code expected output hello world actual output helloworld without space hello world var hello reactcreateclass render function return thispropsgreeting thispropsname reactrendercomponent documentbody link discussion google groups", "num": "65", "d": "6/2013"}, {"title": "jsx page gives linked react blog post", "body": "following url found linked", "num": "64", "d": "6/2013"}, {"title": "jsx able watch subdirs", "body": "trying run jsx build subdir seems exit error message publicjs exist however run directly public works without hitch", "num": "60", "d": "6/2013"}, {"title": "name jsx already taken use xjs instead", "body": "jsx file extension extendscript files since least extendscript supports amount syntax compatible facebookjsx syntax since least may jsx faster safer easier javascript", "num": "50", "d": "6/2013"}, {"title": "work compiletojs languages like coffeescript", "body": "jsx nice using compiletojs language change transpiler connect jsx compiler chance adding alternative dom syntax jsx break every compiletojs language something style would nice addition would nice support", "num": "47", "d": "6/2013"}, {"title": "uncaught syntaxerror unexpected token lt", "body": "even basic tutorial code unable get past error thrown error trace uncaught syntaxerror unexpected token lt exportsrun execute runscripts full source running chrome issue also appears firefox", "num": "40", "d": "6/2013"}, {"title": "required", "body": "normalizedeventlistener uses objectcreate unavailable nt added edit longer added common questions doc react site nt say also required sure docs problem good way avoid objectcreate side note little bit pain test since neither website examples include", "num": "39", "d": "6/2013"}, {"title": "docs nt even mention reconciliation", "body": "go site nothing talks synthetic events mock dom reconciliation etc think documenting would huge impact", "num": "37", "d": "6/2013"}, {"body": "recommended workaround time run due caching pick left", "d": "6/2013"}, {"body": "confirming reducing commoner file reading queue makes problem go away", "d": "6/2013"}, {"body": "issue generate markup every node affected browsers", "d": "6/2013"}, {"body": "think affects modern ios browsers well", "d": "6/2013"}, {"body": "style cursor pointer also fixes", "d": "6/2013"}, {"body": "happens onclick also ontouchstart ondblclick attaching onclick event listener dom node fixes issue christopher vjeux chedeau facebook engineer jun pm lee byron notifications githubcom wrote style cursor pointer also fixes reply email directly view github", "d": "6/2013"}, {"body": "least offensive way imo", "d": "6/2013"}, {"body": "benjamn came game plan irc opening specific actionable issues moving forward", "d": "6/2013"}, {"body": "right working problem recently close solution allow changed file plan use almost identical suggestion", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "might best think understanding much confusion seems go away pondering exact thing let read state updates immediately write even ui synchronized first thought let read update immediately realized something allowing reads state enqueueing updates interesting effect encourage aggregate entire update payload single object execute single since mutations hardest things world understand makes sense encourage squeezing small centralized parts code theory better crap one pile opposed spreading code depending feel mutations stance might apply nt thought enough feel strongly either way thought share recent thoughts gone back forth one", "d": "6/2013"}, {"body": "agree isolating mutations one place good sounds like suggesting making statesetting awkward discourage nt make sense continue think finish setstate batching gut feeling right updating immediately may simplify code well less confusing user see turns case", "d": "6/2013"}, {"body": "unfortunately looks hard change due arguments component lifecycle methods take", "d": "6/2013"}, {"body": "fyou must first pass source code jsx transform done everything work perfectly one benefit proceeded jsx preserve line numbers transforms using lint transformed work means jslint even catch variable scope complain defined customized version vim jslint plugin highlights lint errors red underline working getting windows support would something like work lint flow", "d": "6/2013"}, {"body": "jsx watch inplace transform may benefit well tool supports extension directive transform jsx files js files alongside", "d": "6/2013"}, {"body": "thanks much quick detailed response actually running sublime sublime linter obviously tries lint jsx syntax thus keeps throwing errors might take customization vim plugin try create something similar sublimelinter think quite easy extend meantime think run jslint build run jsx transform turn dev nice run background catching silly errors developing thanks hardwork find powerful alternative views backbone", "d": "6/2013"}, {"body": "problem tyronemichael experimenting idea forking jshint build jsxhint something interested please let know saying get done anytime soon try get roadmap least", "d": "6/2013"}, {"body": "would definitely something interested definitely prefer jsx syntax much easier visualize code", "d": "6/2013"}, {"body": "standard behavior javascript unrelated react expected floatingpoint numbers ca nt represented exactly binary approximation used base added got instead artifact rounding happens stack overflow question explaining phenomenon", "d": "6/2013"}, {"body": "ldhieu yea expected behavior js one common solution working decimals eg currency use whole numbers divide number need display number use would stored displaying user would", "d": "6/2013"}, {"body": "confirm works emptyxjsexpressions diff coming soon coordinate zpao pushing separate dependent repos coming day two hope", "d": "6/2013"}, {"body": "fyi safe push esprima point pull updated transform update esprima dependency rev", "d": "6/2013"}, {"body": "thinking substitute cover inbrowser transforms well something like requirejs without inbrowser transforms thought using convention went editors break", "d": "6/2013"}, {"body": "well need consider want jsx general purpose talk pulling project need think get used want keep idea generic plug namespace need keep working right transform takes uses turn also make sure support transforms eg react displayname tool specific also plug pure wrapper nt want support custom components nt concern supporting targets would say transform anything command line inbrowser transform talked something like still nt quite solve multiple transform possibilities without map namespace transforms reactdom would use react reactdisplayname could start accepting list transforms assume jsx separate package ships executable react would depend jsx react could ship set transforms needs maybe create customized executable basically alias whatever", "d": "6/2013"}, {"body": "benjamn fix commoner", "d": "6/2013"}, {"body": "inline elements allowed inside tags blocklevel elements", "d": "6/2013"}, {"body": "react idea though", "d": "6/2013"}, {"body": "react also badly case things like text nodes inside elements outside cell ends throwing error uncaught error framework attempted either insert zero multiple markup roots single location serious error fault framework please report immediately confusing nt help anyone happens setting innerhtml gives two child nodes demo work better messaging", "d": "6/2013"}, {"body": "better error messages think could get dangerous territory quickly though petehunt pretty soon want fullon child validation like xhp", "d": "6/2013"}, {"body": "react also gets confused click table produce output row row row row row row nt inserts instead jquery hardcoded list places stuff differently maybe need", "d": "6/2013"}, {"body": "think got fixed nt confirmed", "d": "6/2013"}, {"body": "confirmed working master", "d": "6/2013"}, {"body": "version commoner upgraded longer relativizes imports default nt think released version yet use install latest master things work", "d": "6/2013"}, {"body": "spicyj totally right hoping anybody hit issue since still working put monday sorry remixz", "d": "6/2013"}, {"body": "spicyj amp zpao thanks eagerly awaiting checkout master smile", "d": "6/2013"}, {"body": "great intuition several us thought opportunity thinking approaches similar suggest one benefits defining style rules css class specifications javascript use full power javascript define styles already ways model dependencies would nt need another language like sass less also mention since also renderingabstraction framework ensure nt polute css namespace also ensure components nt target nodesclass names considered implementation detail concern deeper component", "d": "6/2013"}, {"body": "fixed yungsters via", "d": "6/2013"}, {"body": "things also talked adding would transformed already following optimal handlebar following javascript comments already working within tag", "d": "6/2013"}, {"body": "update got change parser queued allows probably send tomorrow time little extensive testing first trick", "d": "6/2013"}, {"body": "commoner task", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "try grunt test debug click link pass command line gives output", "d": "6/2013"}, {"body": "hang phantom run get far", "d": "6/2013"}, {"body": "nt able reproduce machine suspect something going wrong time try sprinkling statements see far gets hangs", "d": "6/2013"}, {"body": "gets phantom run", "d": "6/2013"}, {"body": "jordow luck still ca nt reproduce happy dig deeper still problem", "d": "6/2013"}, {"body": "idea could generate browserified bundle module dynamically creates tag module source hopefully phantomjs could give right line numbers individual module files", "d": "6/2013"}, {"body": "see would cause way thinking sounds like common sense hope actually true firing callbacks wrong order agree without looking code closely", "d": "6/2013"}, {"body": "think makes sense reasoning one valid reasons wanting use besides integrating frameworks measure something container order accurately children might also want measured containers parent measurement accurate child must already completed", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "imma jump bandwagon great idea", "d": "6/2013"}, {"body": "hypothesis thing keeps commoner exiting mode right option passed means process stay alive files left watch text editors save files deleting rewriting causes fswatch unwatch file original inode inotify cared got discarded one file unwatching causes node think files need watched process exits cc jeffreylin", "d": "6/2013"}, {"body": "opened new commoner issue even though akrieger said commoner tests pass mode test coverage lacking frowning", "d": "6/2013"}, {"body": "nt seem work unless file supposed valid jsx file something transform", "d": "6/2013"}, {"body": "also nt solve issue jsx nt seem static transformation anyway even example getting started tutorial", "d": "6/2013"}, {"body": "another regrettable known issue suspect missing comment top file wo nt necessary soon currently still important cc zpao", "d": "6/2013"}, {"body": "copy pasted sample code exactly", "d": "6/2013"}, {"body": "try something else take single file name command line also show transformations try already", "d": "6/2013"}, {"body": "binjsx jshelloworldjs right thing", "d": "6/2013"}, {"body": "furthermore file named helloworldjs destination directory deleted try run jsx source dest directory either watch go mode", "d": "6/2013"}, {"body": "deletion design least files end output directory actually hardlinked master versions kept default build unlinks relinks files output directory relink fails look like file deleted sure relinking might failing case different device could try relocating cache", "d": "6/2013"}, {"body": "yeah different devices moving cache dir worked thanks", "d": "6/2013"}, {"body": "accidental close sorry still need mitigate cache dir problem", "d": "6/2013"}, {"body": "important cache behavior could disable trade perf ease use tool", "d": "6/2013"}, {"body": "thumbsup petehunt said also take defaulting cachedir srccurrent dir think sass cache", "d": "6/2013"}, {"body": "petehunt pretty important incremental speedup significant codebase size oneline change switch default location wo nt break anything anyone kicking actually considered whether commoner likely ever different device clearly guessed wrong", "d": "6/2013"}, {"body": "wonder requirements need react codebase end users think people want simple syntax transform watcher ala coffee script", "d": "6/2013"}, {"body": "also moving cache dir", "d": "6/2013"}, {"body": "petehunt true nt think pretend fullyfeatured source transform tool nt caching coffeescript sass clearly suggest caching worthwhile enough people original location cache directory moved added support printing transformed code stdin case definitely okay skipping cache logic case", "d": "6/2013"}, {"body": "looking various implementations dir watchers gaze chokidar nodejs pretty clowny pretty easy test case breaks making new directory adding files directory since someone internet wrong wrote another fs watcher last night think way stable try merge new file watcher transformer made couple days ago see happens proof concept akrieger probably something play w hour two", "d": "6/2013"}, {"body": "pretty good results makefile running make every p", "d": "6/2013"}, {"body": "petehunt trolling p", "d": "6/2013"}, {"body": "jeffreylin ca nt wait", "d": "6/2013"}, {"body": "trolling reliable easy reason comparing file mtimes determine need rebuilt bad relative module cache", "d": "6/2013"}, {"body": "akrieger give shot still workinprogress lmk goes", "d": "6/2013"}, {"body": "dear petehunt question deserves careful response know looks longwinded read know everything thinking primary virtue module cache cache filenames hashes relevant input variables source module name build steps configuration properties commoner version change one input variables get different hash find file called module cache completely certain cached file contains right contents believe useful guarantee secondary benefit old versions file nt go away file recently rebuilt revert file version ever built nt rebuild order make promise strategy find way storing distinct versions confident method would come would closely resemble hashing strategy every sensible version control system goal strategies determine whether trust contents file built time past decision completely reliable hashing strategy ever fails must additional piece information neglected incorporate hash none bugs fixed commoner anything module cache inconsistency last time wipe module cache nt qualify made sure left cache untouched background let answer orginal question comparing file determine need rebuilt bad relative module cache yes input variables considered strategy name source file source file allows avoid rebuilding file corresponding output file later know input variables changed meantime build steps configuration properties new files addedremoved whose presenceabsence affects build independent build processes racing update files output directory etc requirement strong nt necessarily rebuild source files appear newer output files see second paragraph requirement strong nt know things accounted automatically hashing strategy strategy good enough maybe know spot signs inconsistency trained predict finally necessary nt think expect new users react much likely attribute subtle problems library instead guessing build tool messed sometimes reinvent wheel know exactly wheel using works quirks guilty defense really trying get us point nt make apologies way tools work know still bugs commoner committed squashing", "d": "6/2013"}, {"body": "hating commoner excellent commonjs build system totally right choice build react jsx project uses commonjs modules transforms problem users think simple syntax transform like coffee reality nt behave way specifically assumes everything desugaring commonjs module assumes specifics implementations path resolution methods requirejs browserify haste different relativizing nt using commonjs define unrelated require function arguments get rewritten weird missing module warnings fire fake modules created actually really freaking awesome tooling commonjs projects really confusing commonjs project using different module resolver annoyances faced rjs tries clever area eval require somewhere insta codebase user since know jsx willing rewrite code find hard predict exactly transform instead jsx relativize option disabled default treated everything like file transformed either cache based mtime continue use option react perhaps even advertise commonera browser packager brigade recommended module system since likely want debranching goodies even though nt know yet", "d": "6/2013"}, {"body": "original issue still needs fixing way still working", "d": "6/2013"}, {"body": "similar closure soy templates might useful retain whitespace instance space clearly two elements single line however seems ideal delete whitespace elements separate lines would still equivalent space", "d": "6/2013"}, {"body": "ugly use following fix", "d": "6/2013"}, {"body": "adambrunner yep way right though use directly definitely something want fix", "d": "6/2013"}, {"body": "fixed rerolled site minutes thanks heads", "d": "6/2013"}, {"body": "files yet also potentially useful running os", "d": "6/2013"}, {"body": "file src builds using subdir public dir node version im os x mountain lion", "d": "6/2013"}, {"body": "installed luck reproducing try mountain lion machine tomorrow thanks report see failure empty file using empty file makes failure go away perhaps try cutting different parts file figure minimal contents trigger failure could problem mountain lion though hunch", "d": "6/2013"}, {"body": "one idea module cache might gotten bad state somehow try clearing deleting directory", "d": "6/2013"}, {"body": "file builds fine use note lack publicjs deleting directory nt work", "d": "6/2013"}, {"body": "know still broken still working fix", "d": "6/2013"}, {"body": "heart", "d": "6/2013"}, {"body": "problem ubuntu yesterday jsx watch worked fine today sshed ran jsx watch reactjs js silently nothing", "d": "6/2013"}, {"body": "hojberg hieu issues w vim file writes caught hacked together feel free try let know works nt time test ubuntu yet might use file watcher repo commoner jsx future", "d": "6/2013"}, {"body": "jeffreylin work like charm thank much", "d": "6/2013"}, {"body": "ok think know issue jsx created lockpid file output directory file still running jsx quick silently", "d": "6/2013"}, {"body": "xjs project nt gotten code since created", "d": "6/2013"}, {"body": "edc think works box jsx actually compiles fear solution parses strings performance implications include parser core bytes wire becomes easier introduce xss vulnerabilities", "d": "6/2013"}, {"body": "well really better writing jsx transform sucks otherwise would nt jsx ever decide change output transform things going fail weirdly edc proposing nice since js things like coffeescript parse choke could maybe jsx transform step look method parse contents turning reacty code additional bytes transformer nt bad", "d": "6/2013"}, {"body": "like zpao proposal could simply syntactical escape jsx transform treat argument string literal instead expression therefore bypass performance implications xss issues jsx transform simply abort argument string literal", "d": "6/2013"}, {"body": "ah get meant style sounds like pretty good idea", "d": "6/2013"}, {"body": "another way support least coffeescript could make component constructor little lenient playing little favorite syntax far something like l reactdom hellocomponent reactcreateclass render gt ldiv class myclass lp hi propsname linput type button onclick onclick value click allow props omitted allow one child since coffeescript bit weird combine multiple props objects one coffeescript turns last line may html quite readable imho", "d": "6/2013"}, {"body": "holmsand may want check coffeekup coffeekuporg pass arrays children today try avoid singlechild nodes save array allocation bet could build jsxcoffee package wraps reactnativecomponents reactdom expose interface pretty easily think approach", "d": "6/2013"}, {"body": "petehunt fond coffeekup eval evilness whatnot arrays children found confusing couple times multiple children disappeared without warning coffeescript gets little bit prettier without anyway wrapping exactly playing react ended something like code autoautobinding thrown sure would nice common humanusable api us preprocessorchallenged users coffeescript reactor reactor isprops val gt typeof val object reactisvalidcomponent val arrayisarray val copyobject gt key val key val wrapcomponent compfn gt children gt coffeescript breaks objects one syntax linput type button onclick onclick value click button combine second object first also allow props omitted class instead classname props null isprops children props copyobject childrenshift props props class props propsclassname props class delete props class childrenlength children children childrenlength compfn props children else compfn props reactordom key val reactdom reactordom key wrapcomponent val reactorcreateclass comp gt newc autobind handlers starting handle key val comp keymatch onhandle val reactautobind val newc key val wrapcomponent reactcreateclass newc", "d": "6/2013"}, {"body": "one common use case jsx embed complex javascript code within xml like javascript thispropschildrenmap function child return child would write coffeescript suggested method would code inside written javascript would nt weird mix coffeescript javascript", "d": "6/2013"}, {"body": "still prefer jsx since html quote react document easier visualize structure dom designers comfortable making changes familiar used mxml xaml imho dsl based coffeescript easily become mess mixture optional parenthesisbraces significant whitespace instance forget trailing comma instead continue compile semantic totally different", "d": "6/2013"}, {"body": "think following made work xml add think best course action make coffeescript dedicated wrapper nicer syntax constructor", "d": "6/2013"}, {"body": "means attributes means children general form name attributes children children optinal", "d": "6/2013"}, {"body": "vjeux would really nice treat coffeescript firstclass citizen csx addition jsx smiley might even able get rid use unreasonable smile", "d": "6/2013"}, {"body": "feel like making jsx work coffeescript would awesome nt think anyone working right class extension could totally nt class support raw javascript", "d": "6/2013"}, {"body": "vjeux cool try put something together topic guys attending meetup get traction", "d": "6/2013"}, {"body": "edc course would nice preprocessor coffeescript well say downsides using dsl upsides well since preprocessor essentially creating entirely new somewhat unfamiliar language gotchas", "d": "6/2013"}, {"body": "edc yes nothing books yet suggestions particular meetups let know", "d": "6/2013"}, {"body": "coffeescript grammar appears fairly welldefined extensible might even easier write transformer xml literals coffeescript implement jsx using esprima", "d": "6/2013"}, {"body": "sure ever make work valid coffeescript p ignore also xml p", "d": "6/2013"}, {"body": "following could made work nt really look like xml anymore prefer version talked earlier", "d": "6/2013"}, {"body": "realized following works fine guess could close issue", "d": "6/2013"}, {"body": "like see issue open solution looks great defeats purpose coffeescript making potentially big chunk code javascript plus kills syntax highlighting really makes designer life hard mistaken whole point jsx write htmllike code js file nt disclaimer still checking react mean fluent please point false assumption making many thoughts matter first happen written lines fully functional templating engine coffeescript long ago mostly coffeekup sweet clean syntax without eval evilness holmsand mentioned please also ignore freakish mess code successful code challenge anything else since tags functions imagine pretty easy convert current reactdom calls plus looks like cleaner html one would actually want write natural syntax highlighting code checking editors downside like many solutions proposed looks clean expense regular javascript neat solutions mind another time second like lots newcomers still bit uncomfortable idea writing markup especially markup needs compiling js files mostly mental barrier idea best worlds writing think need bit reflection open separate issue get acquainted library", "d": "6/2013"}, {"body": "wanted use directly forget jsx vjeux done check integration jsx coffeescript hard coffeescript probably chokes jsx transform works js ast ca nt parse coffeescript order work support needs added one end currently position spend time adding coffeescript support transform maybe could add support suggestion like would likely end different esprima fork would adding work around coffeescript last point reiterate nt use jsx write calls use jsx think makes life easier started thinking solutions write render function separately component markup could live separately nt gone far path happy hear thoughts", "d": "6/2013"}, {"body": "chenglou something like thin wrapper around reactdom make dsly coffeescript", "d": "6/2013"}, {"body": "yeah reply zpao want use jsx though thing makes sense designers actually thinking isolating jsx maybe even css another file way people able create react components contain js jsx css file instead compiling jsx kind insert js file maybe much appreciate guys jsx dropping completely make mustachelike template like said nt experimented react enough provide concrete examples comment get familiar short", "d": "6/2013"}, {"body": "conversation may interest", "d": "6/2013"}, {"body": "chenglou add another datapoint turns idea edc works quite well practice least ie escaping jsx coffeescript compiling resulting js file using react compiler rewritten something like lines code using method far absolute pleasure ie using code like actually like look jsx coffeescript better js since escaping clearly demarks jsx", "d": "6/2013"}, {"body": "indeed deceptive got really bad error message need fix amongst things right scripts need prefixed docblock assist transformer fact missing causing recognize converting jsx much want fix asap sorry causing issues mean time prefixing code docblock fix problem please close condensed version work", "d": "6/2013"}, {"body": "works thanks tremendously", "d": "6/2013"}, {"body": "meet problem maybe warned documentation", "d": "6/2013"}, {"body": "turns normalizedeventlistener actually causing bugs changed internally still working kinks code sync process making way master soon meantime site would help make happen", "d": "6/2013"}, {"body": "ca nt tell answer whether means used presence relied upon go away completely code sync happens shims site might help testing also general repeatedly running using examples test maybe good way loading react nt require explicit build step", "d": "6/2013"}, {"body": "might able go away nt actually know polyfills need live shim vs sham know sure need something completely support even get rid document better testing facebookcom general though making internal changes need rebuild test builds debug minified builds skip minified step run might make cycle little faster could also run automated tests browser start server hit browser nt help shim issue though probably wo nt much use nobuild way test would smart bet could maybe using requirejs maybe node server builds reactjs demand building option", "d": "6/2013"}, {"body": "fwiw builds enough stuff run jasmine specs takes lot less time", "d": "6/2013"}, {"body": "made quick attempt use react necessary parts appears functionprototypebind arrayisarray arrayprototypeindexof needed functions wonder worth including lines code react directly claiming native support edit also datenow replaced new date without hurting anyone", "d": "6/2013"}, {"body": "suppose arrayprototype methods like map functionprototypebind useful render method dying", "d": "6/2013"}, {"body": "good call", "d": "6/2013"}, {"body": "jordow ping", "d": "6/2013"}, {"body": "wondering reconciliation really works like conditions made merge dom efficiently logic behind reactroot n tracking think part reactjs really shines even would use part separate library people want functionality", "d": "6/2013"}, {"body": "find little bit lee post get deeper explanations official docs thank interest patience", "d": "6/2013"}, {"body": "think issue probably shipped defines anonymous module rather one id react unless file loaded asynchronously merged together files using optimizer mismatched anonymous define error thrown means currently file loaded via normal block amd environment example jquery define amd module", "d": "6/2013"}, {"body": "lets reopen ship something works require using browserify standalone option wraps umd build mostly compatible module like keep process simple possible might want try fix one tools", "d": "6/2013"}, {"body": "zpao mean modify browserify generates something works amd module requirejs ability load modules demand different sort philosophy monolithic package browserify produces approaches worthwhile easy support implicitly preferred monolithic package approach far", "d": "6/2013"}, {"body": "mean modify browserify generates something works amd module yea jriecken said right maybe get umd changed gets used browserify much provide name super familiar requirejs maybe need reactjs already react dependencies nt think need ship bundle modules stick single file long actually works", "d": "6/2013"}, {"body": "changed rewrite file version bumps going call good enough close", "d": "6/2013"}]