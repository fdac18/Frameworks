[{"title": "provide umd build simplecacheprovider", "body": "expect planned wanted make sure file make sure missed want request feature report bug feature current behavior cjs build simplecacheprovider expected behavior react reactdom umd build makes easy test things teach people react simple file without tooling complicate things umd build simplecacheprovider would help teaching suspense versions react browser os affected issue work previous versions react na", "num": "13753", "d": "9/2018"}, {"title": "input typenumber eventtargetvalue changes empty string pressed onchange emitted used", "body": "want request feature report bug bug current behavior onchange event changes value input empty string pressed additionally seems like nt fire onchange dot comma example current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior value stays integer seen user fire onchange versions react browser os affected issue work previous versions react react chrome", "num": "13752", "d": "9/2018"}, {"title": "ok login button", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13750", "d": "9/2018"}, {"title": "error expected subtree parent mounted class component", "body": "idea error occured version prod develop whats wrong official react page says expected subtree parent mounted class component error likely caused bug react please file issue many thanks", "num": "13743", "d": "9/2018"}, {"title": "expected subtree parent mounted class component", "body": "want request feature report bug bug current behavior demo use use render add worked change generate error invariant violation expected subtree parent mounted class component error likely caused bug react please file issue expected behavior correct render", "num": "13742", "d": "9/2018"}, {"title": "click mobile working", "body": "research link github page showing", "num": "13741", "d": "9/2018"}, {"title": "react context value propagation performance", "body": "hi observed performance issue context providers value updates spoken gaearon twitter bit context let say provider update value provider good far let say want pass value tree performance reasons want render tree components want render consumer components case naive way would something like js class blocker extends reactcomponent shouldcomponentupdate return false render return thispropschildren render return thispropschildren even though components tree rendered except consumers update expensive suspect tree walking algorithm takes run standalone example example render time simple counter update production app list nodes components components looking update times similar rendering tree bit context trying replace root would create subscription store pass latest state context consumers would pick update run selector rerender result value changed working found updates context slow usage see relevant files", "num": "13739", "d": "9/2018"}, {"title": "schedulecjsschedulejs thinks browser run server", "body": "want request feature report bug bug current behavior code meant run browser running server error seeing current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example using one components server render broken due dependencyfile pulled expected behavior error guess root problem seems faulty check environment somewhere versions react browser os affected issue work previous versions react narrowed nothing downgrading using fixes issue", "num": "13735", "d": "9/2018"}, {"title": "controlled component receiving state rendered variable", "body": "want request feature report bug bug current behavior create controlled input element store variable render update input value according state value expected behavior update demo sure bug lack understanding", "num": "13730", "d": "9/2018"}, {"title": "setstate working component remounte", "body": "setstate bug triggered child component callback component mounts first time unmounts mounts button onclick gt closetab gt method setstate mutating state share fullcode becouse work since im using serverside component generator injecting eval function code setstate component mounted second time tested tested toggle ui pasing button tesed state setstate bu debuugging tested using state clallback setsate gt never runs second mount consolelog thisstate tried", "num": "13724", "d": "9/2018"}, {"title": "context context", "body": "hello list items edit item panel opens list also edit item new tab ssr use redux isomorphic code panel item editing difficult composition several controls task edit several items simultaneously one window react legacy context itemeditpanel receives data redux puts context edit two items simultaneously context deprecated done without using context props proxy", "num": "13723", "d": "9/2018"}, {"title": "official tutorial mistake", "body": "url \u5730\u5740 official tutorial mistake completing game lifting state code snippet class square extends reactcomponent render return thispropsvalue cause error maximum update depth exceeded onclick brace", "num": "13722", "d": "9/2018"}, {"title": "element type invalid expected string builtin components classfunction composite components got undefined", "body": "dealing json response react native coming wordpress rest api containing pages profile page id title featured image using flatlist created screen featured images titles artist page want add functionality navigate individual page clicking item flatlist passing title featured image later content regarding page next screen display information probably based id linksscreenjs import react component react import proptypes proptypes import artist artist import createstacknavigator reactnavigation import scrollview stylesheet view text image flatlist activityindicator touchablehighlight reactnative export default class linksscreen extends reactcomponent constructor props super props thisonalerttypepressed thisonalerttypepressedbind thisstate data onalerttypepressed typeid typename imageurl static navigationoptions title links state data isloading true iserror false static proptypes navigation proptypesshape navigate proptypesfuncisrequired isrequired componentwillmount fetch response gt responsejson responsejson gt responsejsonsort b gt atitlerendered lt btitlerendered thissetstate data responsejson isloading false iserror false catch error gt thissetstate isloading false iserror true consoleerror error renderrow item gt getkey item gt string itemid rendercomponent thisstateisloading return else thisstateiserror return error loading data else return render return thisrendercomponent const styles stylesheetcreate container flex backgroundcolor elementscontainer backgroundcolor grid margintop marginbottom marginleft height width borderbottomwidth borderbottomcolor title color ffffff textalign left fontsize thumb height width resizemode cover artistjs import react component react import createstacknavigator reactnavigation import scrollview stylesheet view text touchableopacity image reactnative export class artist extends reactpurecomponent constructor props super props onpress gt thispropsonpressitem string thispropsitemid string thispropsitemname string thispropsitemimageurl static navigationoptions title artist render const artist thispropsnavigationstateparamsartist return const styles stylesheetcreate container backgroundcolor title color ffffff textalign left fontsize image height width resizemode cover getting error moment saying string expected undefined type found used different way unable pass id identifier pass data next screen open specific generated screen artist error edible code used like working grid version navigation functionality sure gives good indication supposed work notes please nt mind titles moment still small unsolved issue regarding unicodes think wo nt matter passing titles another screen", "num": "13719", "d": "9/2018"}, {"title": "feature request purecomponent children comparison compare component instance instead element instance always returns false", "body": "want request feature report bug feature current behavior consider root component export default class root extends reactpurecomponent constructor render return purecomponent color component gets new element instance although pointing old component instance wrapper shouldcomponentupdate provided purecomponent functionality compares element instance always false expected behavior wrapper shouldcomponentupdate provided purecomponent functionality compares component instance true false purecomponent behavior nt necessarily changed instead solution even helper function argument use within custom would really great feature example shouldcomponentupdate nextprops nextstate const childrenprops reactchildrengetprops thispropschildren new react helper const nextchildrenprops reactchildrengetprops nextpropschildren const childrencomp reactchildrengetcomponent thispropschildren new react helper const nextchildrencomp reactchildrengetcomponent nextpropschildren compare variables realise could nt work children array etc would require bunch stuff considered think need kind solution problem ultimately purecomponent could components elements comparison hood somehow currently way achieving sort performance optimization either cache price losing reactivity accept fact unnecessary rendering involved tree aware discussion subject solution provided like know way feature could implemented react future thanks", "num": "13717", "d": "9/2018"}, {"title": "schedule package problem npm yarn", "body": "want request feature report bug bug current behavior gives error build installing react packages npm problem nt give error yarn error raises mac linux could nt test windows installed packages fixing nt help ps working smoothly new experimental schedule started give error using experimental feature error steps build webpack give error build webpack build success also share webpack setup think related expected behavior work npm yarn versions react browser os affected issue work previous versions react react reactdom nodejs npm yarn working version react reactdom nodejs npm yarn", "num": "13716", "d": "9/2018"}, {"title": "improved stack trace", "body": "want request feature report bug feature current behavior usability current stack trace components native dom elements improved example tells divs followed select tag sure select display name showing components name option tag structure exists lot places component expected behavior stack trace line numbersome way pinpoint location like idclass provided desired versions react browser os affected issue work previous versions react os ubuntu react", "num": "13715", "d": "9/2018"}, {"title": "reactdomtestutilsproductionminjs working npm", "body": "want request feature report bug bug current behavior reactdomtestutilsproductionminjs published npm package differs one release current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example trying use reactdomtestutils npm package production mode throws error typeerror read property undefined related line col expected behavior error thrown versions react browser os affected issue work previous versions react", "num": "13714", "d": "9/2018"}, {"title": "dom event mount target considerations", "body": "given considering rewrite event system thinking attaching events react root thought would fitting explore options mount event listeners little combine knowledge scattered across repo general three candidates attaching event listeners document listeners react root listeners element listeners every option comes shortcomings want summarize learned years document listeners historically react always listened document level implemented synthetic event system simulate capture bubble phases inside react tree event listeners listening bubble phase means users still add capturelevel document listeners see fire react process event additionally events bubble dom support bubbling events react sometimes eagerly adds event listeners media events example listens capture phase instead usually works leave react event system attach native listeners needed certain caveats come one example calling capture documentlevel listener effect another implication interoperability react roots thirdparty frameworks behave unexpectedly browsers certain optimizations place make handling document listeners complicated safari properly bubbling document listeners used chrome respect preventdefault touch start document level also never cleaning documentlevel listeners certain benefits solution well current event system use event bus implement polyfills require document based listeners implementation portalbubbling easier need ensure already listening document portal target later react root listeners one solution issues outlined use react roots mount target events would still rely event delegation would require synthetic event system root level listeners would certainly help make bubbling robust using multiple react instances since longer add listeners level however work bubbling events use capturing would fire inverse bubble order capture handlers multiple roots also always fire wrong order portal bubbling also become complicated since find portal root inside reactroot see need attach listeners portal root well consider following example need add listeners well compare example need compiled list previous implementation attempts issues pointed well date pr issues oct enterleave shims using instance react events like focus firefox fire reverse order tap highlight shims jun firefox mousemove events aug enterleave shims probably possible work around someall issues invalid capturing order worked around adding bubble capture listener regular events trigger appropriate phase shims probably rewritten need document additional listeners could added ios tap highlight could disabled via css get rid edge cases around events bubble browser consider deprecating support together new features since taking time rethink event system also want us think passive event listeners web components think albeit additional implementation effort support passive event systems keep using event delegation add two different listeners one capturing one bubbling handle completely different events support shadow roots bit complex event delegation really make sense easily consider shadow root react root portal root since rely adding listeners parent shadow root consider following case html handy comparison custom elements support different javascript framework react definitely better planned changes event system work element listeners sort radical approach changing event system get rid event delegation altogether happens preact reactdomlite vuejs probably frameworks well research ember angular point case trivial add support passive event listeners bubblecapture behave expected also allows us completely remove need synthetic event system could rely browser also know browsers better optimize certain events attached directly element think least two major roadblocks though performance event delegation avoids need every element event handler figure significant overhead really especially considering possible bundle size improvement make initialrender faster needs compared realworld application rough benchmarking microbenchmark outcomes representative real apps eventsystem less react noticed another feature event delegation often overlooked setstate batching right react knows event listeners called batch setstate calls case looked bit potential callback mechanism would fire events processed next frame drawn think possible browsers evaluate performance implications realworld application see bad often setstate batching occurring could still batch inside event listener portal bubbling big issue see portal bubbling still need use event delegation portal roots catch events listened parents writeup react fire gaearon mentioned could use redispatching native events would still require us set listeners first considerations whole synthetic event system currently accounts react dom bundle size back july worked example removed everything event related added tiny preactlike system find much save look edge cases much already got tests pass general might also consider adding api installing global dom event handlers since upcoming concurrent mode make complicated listen arbitrary non reactcontrolled events possibly fired render time slices discussion scope writeup though maybe good keep mind especially curious ways could implement portal bubbling using element listeners say biggest uncertainty right", "num": "13713", "d": "9/2018"}, {"title": "pass refs", "body": "wondering good idea pass refs understand passing instance welcomed edge cases next state calculated based refs take look example javascript const getflyoutposition idealdirection margin parseint statictooltipmargin relativeoffset triggerrect gt const windowsize height windowinnerheight width windowinnerwidth scrollx scrolly needed get element dimensions use calculate next state moment way access refs const flyoutsize height thisflyoutref thisflyoutrefclientheight width thisflyoutref thisflyoutrefclientwidth const maindir getmaindir flyoutsize idealdirection triggerrect windowsize margin const base baseoffsets relativeoffset flyoutsize maindir triggerrect windowsize margin const flyoutoffset top basetop left baseleft return flyoutoffset maindir export default class extends component state flyoutoffset top undefined right undefined bottom undefined left undefined maindir null static getderivedstatefromprops getflyoutposition setflyoutref c gt thisflyoutref c flyoutref render const flyoutoffset thisstate const children thisprops think consider passing refs sometimes state may based values dom please let know create pr", "num": "13707", "d": "9/2018"}, {"title": "context consumer rendering correctly inside tag", "body": "want request feature report bug bug current behavior context consumer rendering correctly placed inside html tag reproduction fresh generated project js import react react const examplecontext reactcreatecontext const examplevalues number zero zero class app extends reactcomponent render return value gt examplevalues value zero value gt examplevalues value zero export default app first renders expected second one renders expected behavior second render versions react browser os affected issue work previous versions react react version browser chrome os ubuntu mate work previous versions react nt know", "num": "13706", "d": "9/2018"}, {"title": "accessing reactdebugcurrentframe without using secretinternalsdonotuseoryouwillbefired", "body": "want request feature report bug request feature current behavior working writing custom react renderer right use order access stack information current frame order display warnings developer expected behavior would like able access stack information current frame without worrying safety employment better way versions react browser os affected issue work previous versions react react", "num": "13704", "d": "9/2018"}, {"title": "displayname supported combination forwardref react developer tools", "body": "display names components based reactforwardref currently ignored react developer tools gt name always forwardref think bug example edit preview", "num": "13703", "d": "9/2018"}, {"title": "component previous route staying memory navigation different route", "body": "want request feature report bug bug current behavior using reactrouter making single page application multiple routes navigating routes noticed component previous route still present memory eg navigate see component corresponding still memory moreover change route component cleared component still memory adding heap snapshot unexpected behaviour codesandbox demo reproducing demo expected behavior ideally component corresponding previous route must completely removed memory navigate new route must rule keeping optimizations versions react browser os affected issue work previous versions react react react reactrouterdom", "num": "13702", "d": "9/2018"}, {"title": "upgrade rollup", "body": "working upgrading rollup test builds show decreasing size bundles also problems option deprecated critical building react checked issue tells totally fine couples circular dependency warnings also default exported warnings also check branch maybe help think make sense", "num": "13701", "d": "9/2018"}, {"title": "component inside handled string", "body": "current behavior use reactintl translations project since release reactdom use anymore use snapshot tests nt fail use reacttestrenderer u look rendered html string rendered option tag expected behavior tests failing react component tag expected object object rendered inside option versions react browser os affected issue work previous versions react use createreactapp occurs test env react reactdom reacttestrenderer reactint", "num": "13699", "d": "9/2018"}, {"title": "jsx whitespace consistent line starts expression", "body": "want request feature report bug bug current behavior jsx content text line starts expression whitespace rules followed current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior whitespace jsx rules respected always versions react browser os affected issue work previous versions react", "num": "13696", "d": "9/2018"}, {"title": "schedule ssr windowaddeventlistener function", "body": "want request feature report bug bug current behavior windowaddeventlistener function current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example build serverbundlejs ssr node usual try run node serverbundlejs see windowaddeventlistener function consolelog window line returns navigator server true expected behavior working usual versions react browser os affected issue work previous versions react react well worked fine yarn upgrade first since march guess", "num": "13694", "d": "9/2018"}, {"title": "react error looking schedule", "body": "want request feature report bug bug current behavior installing seems throw error looking schedule nt exist current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example npm err code etarget npm err notarget matching version found schedule npm err notarget cases one dependencies requesting npm err notarget package version nt exist npm err notarget npm err notarget specified dependency react expected behavior react get installed versions react browser os affected issue work previous versions react react", "num": "13693", "d": "9/2018"}, {"title": "implement filereaderreadasarraybuffer", "body": "want request feature report bug feature current behavior currently unimplemented expected behavior implemented versions react browser os affected issue work previous versions react versions react affected approved plan work towards implementing may need guidance along way first time using native code react using native ios code", "num": "13691", "d": "9/2018"}, {"title": "unmountcomponentatnode works async", "body": "want request feature report bug bug current behavior tried use manage multi roots found use sync code get error like change route pages use browserhistory change route code written componentdidmount method root react component use wrap result success expected behavior versions react browser os affected issue work previous versions react react reactdom", "num": "13690", "d": "9/2018"}, {"title": "global overwritten react development mode", "body": "want request feature report bug report bug current behavior global overwritten react development mode minimal repro steps react dev mode click button see event type expected behavior current behavior contradicts specified behavior window property event returns event currently handled site code outside context event handler value always undefined moreover works properly production mode react prod mode returns expected event type versions react browser os affected issue work previous versions react works properly react prod mode react dev mode issue reproduced chrome works properly ff nt support however reproduced ff recently added see details seems issue introduced conradirwin", "num": "13688", "d": "9/2018"}, {"title": "error duplicate identifier librarymanagedattributes", "body": "suddenly could nt build react project error seems appear many people failed compile c devprojectfrontendnodemodules typesproptypesnodemodules typesreactindexdts duplicate identifier librarymanagedattributes error command failed exit code looks like defined following files expected behavior error versions react browser os affected issue work previous versions react", "num": "13686", "d": "9/2018"}, {"title": "input render createprotal blur input", "body": "want request feature report bug bug current behavior input render portal blur input current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example see types diff input expected behavior change value blur versions react browser os affected issue work previous versions react latest version", "num": "13685", "d": "9/2018"}, {"title": "prevent reactdomrender errors bubbling otherwise explicitly handled", "body": "want request feature report bug bug ordinarily would probably considered feature request however stated purpose feature referenced violated certain environments current behavior react surfaces uncaught error render even using designed using trycatch around render described comment related code convenience provided developers using devtools debugging purposes however convenience provided development debugging changing behavior specs causing failures otherwise protected code paths goes statement comment description code error happens different event loop context interrupt normal program flow error occurs spec runner mocha fail test uncaught error continue next test advancing second render component complete call reactdomrender callback continues code alreadyfailed test subsequent test progress pollutes spec suite leads issues produced using production version react current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example relevant code content included codesandbox due use karmamocha tests must run locally inline comments add detail behavior expectations see tests pass switch test production file expected behavior typically devtools used different context running vs investigation lack precise terms option rather default using react nonproduction environment least environment spec runners conditionally sensitive global errors developers must option disable disallow behavior implemented time second perhaps intuitive option refer portion mentioned comment talking pause caught exceptions untintuitive though even though react caught error developer perspective error uncaught exception render captured using trycatch mentioned exception considered caught developer explicitly created error boundary around render case expected behavior would error surfaced globally developer debug exceptions within error boundary defined versions react browser os affected issue work previous versions react present nonproduction version react environments react feature behavior react issue prior react explicit trycatch handlers solely responsible error boundary render", "num": "13681", "d": "9/2018"}, {"title": "possible return dom elements ref callback", "body": "hi guys wondering possible return dom elements ref callbacks codebase working currently need use refs parts find wrap components id divs get dom element ref required another library using openlayers would convenient dom elements returned callback unless ofcourse reason custom component object proxies callback case ca nt dom element attached proxy trivial change would willing given guidance course work", "num": "13680", "d": "9/2018"}, {"title": "eventtargettext returns undefined react", "body": "hello using react reactbootstrap select dropdown unable get selected text value eventtargettext says read text undefined code dropdown function testmefunction event gt let setvar eventtargettext thanks", "num": "13678", "d": "9/2018"}, {"title": "childrenmap amp co traverse keyed fragments", "body": "want request feature report bug report bug current behavior documentation reactchildrenmap tells us children keyed fragment array traversed function never passed container objects demo shows arrays indeed traversed keyed fragments traversed open developer console click run see output expected behavior childrenmap foreach toarray count traverse keyed fragments per documentation versions react browser os affected issue work previous versions react example runs also seen fail locally never tried know ever worked see fail latest firefox chrome ubuntu linux", "num": "13677", "d": "9/2018"}, {"title": "ios safari react dom attempting configurable attribute unconfigurable property", "body": "want request feature report bug report bug current behavior page crashes current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example ca nt load fiddle pages ios basic react app demonstrate issue expected behavior app load versions react browser os affected issue work previous versions react", "num": "13676", "d": "9/2018"}, {"title": "possible use profiler server side", "body": "trying use profiler server side rendering onrender callbacks getting called way using nodeenv development code looks like works fine client side javascript import react unstableprofiler react const profilercallback id phase actualtime basetime starttime committime gt consolelog consolelog consolelog consolelog consolelog const mycomponent gt", "num": "13673", "d": "9/2018"}, {"title": "jsx attributes must assigned nonempty expression", "body": "want request feature report bug honestly nt know current behavior jsx attributes must assigned nonempty expression", "num": "13670", "d": "9/2018"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13667", "d": "9/2018"}, {"title": "possible react skip dom nodes hydrate different server render", "body": "server component example server render props available client frontend rehydrate app updates dom node thispropsserverdata empty make react touch dom nodes created server hydrate parts tree kind behaviour possible example something like", "num": "13664", "d": "9/2018"}, {"title": "edit oauth configuration inside quip", "body": "help helpful us would like ask one question working integration quip doc app inside authorization url also want add question mark please tell way helps add inside configuration quip example authorization url wwwquipcomauthorization want hit authorization url wwwquipcomauthorization typeuseragent send error please tell add typeuseragent using coding helpful us regards vaishali", "num": "13661", "d": "9/2018"}, {"title": "update existing state transition exception caught componentdidcatch", "body": "want request feature report bug bug current behavior working right mistake code could rerender inner query time outer query integration test see react error console perfectly makes sense problem expect caught toplevel boundary component componentdidcatch nt get executed case result hangs bitbucket pipelines stop build pr hours inactivity expected behavior guess componentdidcatch could caught exception versions react browser os affected issue work previous versions react using react", "num": "13655", "d": "9/2018"}, {"title": "root element noop blocking gsap draggable", "body": "want request feature report bug honestly nt know current behavior moderator greensock forums recent update causing issues draggable tool default draggable tool ignores clicks specific elements default draggable elements unless specify element draggable starting version function passed event root element react app preventing simple tag used draggable tool current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react blue square draggabl rotate either uncomment line change react reactdom versions expected behavior nt necessary add indication make element draggable work default regular application web page versions react browser os affected issue work previous versions react react chrome firefox edge windows also users tested chrome firefox osx nt know specific versions", "num": "13654", "d": "9/2018"}, {"title": "react causes jest unit tests fail", "body": "using jest enzyme unit tests project working recently upgrading caused errors appear almost unit tests error occurs use enzyme unit test mount component given example code however since upgrading always fails following error since downgraded react since causing issues think looked thanks", "num": "13653", "d": "9/2018"}, {"title": "finddomnode nt work argument", "body": "getting error component strange behaviour attached component already mounted issue reason wo nt work desired behaviour missing something running everything storybook styledcomponents reactreactdom versions import react component children react import proptypes proptypes import finddomnode reactdom export default class extends component static proptypes children proptypesnode onclick proptypesfunc componentdidmount documentaddeventlistener click thishandleclickevent capture true componentwillunmount documentremoveeventlistener click thishandleclickevent capture true handleclickevent event gt const el finddomnode render return thispropschildren", "num": "13652", "d": "9/2018"}, {"title": "input typenumber value nt updated", "body": "want request feature report bug bug current behavior enter input typenumber set value nt work still show current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior enter show versions react browser os affected issue work previous versions react think update updatewrapper", "num": "13651", "d": "9/2018"}, {"title": "image onerror event getting triggered even image loading", "body": "current behavior image onerror event getting triggered every time loads data piped image amazon sample code piping image code js execute promise data gt reswritehead contenttype imagepng createreadstream pipe res catch err gt let filepath pathjoin dirname images missingfilepng let src fscreatereadstream filepath expected behavior image trigger onerror event image loads", "num": "13649", "d": "9/2018"}, {"title": "better support iframe side effects", "body": "want request feature report bug bug current behavior transitioning state iframe inside component state without said iframe error current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example working expected behavior break versions react browser os affected issue work previous versions react affected since coming pr exactly check fallbacks reason", "num": "13648", "d": "9/2018"}, {"title": "feature request add dom life cycle hooks", "body": "currently straight forward get hands components full dom particular returns multiple elements case wo nt work left refs never get whole dom instead get one element time course something along lines feels bit awkward hence question adding dom nodes rendered given component end argument list relevant life cycle events mistaken would well perhaps although sure would good time access dom nt dug deep react internals naive guess would information available life cycle hooks called philosophical note seems storing references dom component nt clean event handlers use event reach dom seems life cycle hooks practically destined allow thanks consideration", "num": "13646", "d": "9/2018"}, {"title": "element attributes removed silently frameset tag", "body": "want request feature report bug bug current behavior historical reason still using obsolete tag project render component includes tag react attributes ignored like could anyone tell solve hacking way thx input javascript export default class obsoleteelment extends reactcomponent render return old page output expect versions react browser os affected issue work previous versions react react version node environment os", "num": "13645", "d": "9/2018"}, {"title": "react breaks hmr svg state", "body": "please remove issue due react hot loader", "num": "13644", "d": "9/2018"}, {"title": "state lifecicle", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react bug \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u043a\u043b\u0430\u0441\u0441 thispropsdate \u043d\u0430 thisstatedate \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 render \u0438 \u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 thispropsdate", "num": "13637", "d": "9/2018"}, {"title": "event delegation react", "body": "given react attach event handlers nodes react team recommend app developers event delegation working large lists saving memory something like jsx import react react import reactdom reactdom class app extends reactcomponent render return id etargetdatasetid clicked gt item item item reactdomrender documentgetelementbyid root", "num": "13635", "d": "9/2018"}, {"title": "missing umd variant reactprofilingminjs", "body": "package released unpkg currently productionprofiling variant present cjs builds equivalent umd builds ie file would great future release profiling variant packaged umd well also thanks awesome framework", "num": "13634", "d": "9/2018"}, {"title": "react ontransitionend event gets called frequently", "body": "want request feature report bug bug current behavior callback getting called repeatedly even transition nt end reproduce demo click first button noticed ontransitionend callback called times clicking button calls another times randomly app extreme callback called lot frequently current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior gets called end css transition versions react browser os affected issue work previous versions react react browsers", "num": "13633", "d": "9/2018"}, {"title": "placeholder input attribute text displaying", "body": "want request feature report bug bug current behavior loads input placeholder blank however click outside input placeholder appears momentarily described current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example problems running virtualbox expected behavior input display placeholder attribute text input versions react browser os affected issue work previous versions react currently affecting", "num": "13632", "d": "9/2018"}, {"title": "add primereact community ui components page", "body": "sorry post could find another communication channel appreciate could add primereact ui suite primereact open source ui suite react thank", "num": "13631", "d": "9/2018"}, {"title": "warning reactforwardref render function nt take exactly two arguments confusing arguments", "body": "want request feature report bug feature improvement current behavior defining two parameters reactforwardref render function warning message stating forwardref render functions accept two parameters props ref forget use ref parameter gets logged current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior option overall message could explicit accepting exactly two parameters also arity greater second part message may omitted instance forwardref render functions accept exactly two parameters props ref option defining arguments function ok may case since real goal warning make sure people use ref parameter think message could shown arity gt therefore chaging condition versions react browser os affected issue work previous versions react one includes new warning", "num": "13627", "d": "9/2018"}, {"title": "component mounted twice", "body": "bug current behavior component called multiple times without calling using use link reproduce expected behavior called calling versions react browser os affected issue work previous versions react", "num": "13626", "d": "9/2018"}, {"title": "event delegation works react", "body": "reading statements like one multiple articles event delegation react nt actually attach event handlers nodes react starts starts listening events top level using single event listener component mounted unmounted event handlers simply added removed internal mapping jsx import react react import reactdom reactdom class app extends reactcomponent render return reactdomrender documentgetelementbyid root get event listeners one one bug", "num": "13625", "d": "9/2018"}, {"title": "passing reactcreatecontext mistakenly element causes confusing error", "body": "want request feature report bug bug current behavior really tired forget use instead use provider react understandably freaks error message confusing ie js import react react import reactdom reactdom const context reactcreatecontext import stylescss function app return hello codesandbox duh const rootelement documentgetelementbyid root reactdomrender rootelement results console looking something like pasted codesandbox current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior error roughly paraphrased says something along lines versions react browser os affected issue work previous versions react", "num": "13624", "d": "9/2018"}, {"title": "ie window display blank page", "body": "hello working react project working properly chrome qa uat environment working ie window ie window fine uat environment problem qa displays blank page following information console display error message except warning code page disabled back forward caching information see network tab display transaction first one second one debugger tab display message failed open click refresh tab url return url click back button expected page displayed debug found click login page backup route called react version read post website said react ie inconsistency sure error cause inconsistency advice need information please let know thank tom", "num": "13623", "d": "9/2018"}, {"title": "react notfounderror failed execute removechild node node removed child node", "body": "bug using wijmo react appears react attempting redraw control changed treeview control selected changes state property reveals controls screen logic render treeview content exists together single render call appears even though treeview changed react rerendering click treeview checkbox whole control blinks resets checkboxes default state found related posts indicated wrapping control div worked included screenshot basically happens checkeditemschanged called updates state course triggers render however treeview control rerender every time reason think least part reason error included chrome browser js checkeditemschanged e gt const self const currentitem thisreportstreeviewselecteditem render thispropsuserid return null", "num": "13617", "d": "9/2018"}, {"title": "unable call apply consoleerror encountering unknown tag", "body": "introduced react encounters unknown html element development react crashes attempts call consoleerrorapply reproduceable following codepen code demo", "num": "13610", "d": "9/2018"}, {"title": "use blacklist offensive", "body": "change blocklist let bright future please read software development still lot terminology racist patriarchal background let change blacklist denylist whitelist allowlist killer app beloved app masterslave primaryreplica related code", "num": "13604", "d": "9/2018"}, {"title": "passing data child components aspnet core react", "body": "nt know supposed ask somewhere else aspnet core application react want fetch data let say boottsx file layouttsx file referring files come default create aspnet core react app vs pass data child components would", "num": "13603", "d": "9/2018"}, {"title": "reactdomprofiling typeerror read property current null", "body": "ca nt quite figure use profiling build aliased get error nt want interactions want profiling wrong repro use cra eject add alias webpack prod config build", "num": "13601", "d": "9/2018"}, {"title": "schedule low priority updates block high priority updates", "body": "timeslicing great feature thank great works enjoying problem scheduling know scheduler unstable issue tell prblem problem high priority updates many low priority updates low priority updates interrupt block high priority updates reproduce open page set repeat count check enable timeslicing typing long text fast possible imagine app like spreadsheet app recognize low priority updates block high priority updates guess become huge problem ime composition events try type \u3053\u3093\u306b\u3061\u306f konnnitiha following timeline measured source code previous version used requestidlecallback nt problem requestidlecallback runs registered callback ui thread idle following version uses requestidlecallback implement another way avoid block high priorities low priorities", "num": "13597", "d": "9/2018"}, {"title": "componentdidcatch support ssr server side rendering", "body": "want request feature report bug feature docs outline supported serverside rendering react universal implementations become increasingly common small projects large corporate websites feature seems especially important", "num": "13592", "d": "9/2018"}, {"title": "bug broke react native web", "body": "want request feature report bug bug current behavior react native web broken describe due change expected behavior release version react exports eventpluginhub versions react browser os affected issue work previous versions react worked", "num": "13589", "d": "9/2018"}, {"title": "bug option returns object object instead string", "body": "current behavior returns object object instead string demo expected behavior expected string versions react browser os affected issue work previous versions react", "num": "13586", "d": "9/2018"}, {"title": "toggle button group calling onchange event react", "body": "trying make use toggle button group select option event getting called working ran simple sample codepen dependencies works non working reproduces issue create example using dependencies nt work nt get much help stackoverflow post able figure causing different behaviour operating system macos nodejs version", "num": "13585", "d": "9/2018"}, {"title": "reactapp makes chrome consume cpu", "body": "dont know reap app hosted making chrome consume cpu happens specially signing facebook account use first login following account user github myappcom password github login facebook account see cpu starting raise maybe app requires facebook page initiate live streaming event fb page order monitor app use phone make stream private live stream live press start button press start cpu goes stays start button initiates connection serversentevent app created using createreactapp command uploaded production using npm run build firefox hand stays within cpu chrome turns fans laptop gets hot idea could wrong", "num": "13584", "d": "9/2018"}, {"title": "bug shouldconstruct check", "body": "want request feature report bug reporting bug current behavior recent change logic checking prototype property become strict turns using dependencies defining method called update caused components treated type internally current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior would nice react could recognize case maybe log error development happy try implementing want go route people definitely nt defining components happens quick check error message would make quick fix versions react browser os affected issue work previous versions react impacts nt issue due less exhaustive check earlier versions", "num": "13580", "d": "9/2018"}, {"title": "external javascript working reactjs", "body": "hi creating react app using createreactapp external javascript libraries template design main indexhtml js files working first page application gets started libraries working redirect page first page understand files rendering functions variables methods accessible route changed using reactrouterdom routing googled found solution render js libraries componentdidmount method even solution working please help solve issue thanks", "num": "13578", "d": "9/2018"}, {"title": "interaction reference count decremented aggressively", "body": "certain conditions decrement attribute often result called prematurely andor given interaction x track interactions scheduled sync render phase x doubledecrement suspense loads within sync render x decrement sync commits waiting suspense past expiration x properly decrement pending interaction count suspense resource loads placeholder shown x add test high priority render suspended resolved suspense states sync async rendering", "num": "13574", "d": "9/2018"}, {"title": "need isbatchingupdates isunbatchingupdates", "body": "want request feature report bug question current behavior imo naming always equals wonder need add variable comment says weird case initial mount synchronous add test follow pr delete comment nt remove nt know remove comment seems weird case comment said nt solved pr expected behavior try remove use instead like encounter many tests fails thought tests would fails try could give clarifications still need thanks versions react browser os affected issue work previous versions react master branch", "num": "13569", "d": "9/2018"}, {"title": "consider stopping autoadding number style values except small whitelist", "body": "want request feature report bug removal feature sense current behavior react automatically adds suffix numerical values passed prop css properties accept unitless values react maintains blacklist properties nt get autoappended problem solution nt scale requires us add amp properties list css specs expand recently list grows faster flexbox amp grid added quite confusing props would work amp without suffix changes meaning suffering although react newbie quite familiar issue due member jquery core team jquery logic react keep add list actually exposed list jquerycssnumber people nt always wait us add support property release decided jquery drop autoprefixing blacklist turn whitelist lists common properties want autoappend mostly extremely common nt want break world much plan expand list unless missed something really common see current plan pr particular see proposed whitelist visualized regexp current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior propose react could thing jquery planning switch everexpanding blacklist css props nt suffix applied small whitelist suffix applied topic initially described versions react browser os affected issue work previous versions react browses amp oss nt know old logic react", "num": "13567", "d": "9/2018"}, {"title": "thispropschildren", "body": "want request feature report bug feature current behavior ambiguous current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react everything hi maybe nt feature request api choice would like put open maybe try understand decision led implementation apologies advance nt get either render child array children ca nt array children time take example parent class something like problems cause prop inside array however decide want pass child like get error prop inside direct reference instead array children nt make sense always return array sanitation time rendering children bit silly might totally missing point nt name clue children array children n opinions", "num": "13564", "d": "9/2018"}, {"title": "document fragments respond events", "body": "want request feature report bug bug current behavior due event listeners added access modify current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example jsx import react react import reactdom reactdom import stylescss function dosomething alert something happens function app return hello codesandbox const rootelement documentgetelementbyid root var frag documentcreatedocumentfragment reactdomrender frag rootelementappendchild frag expected behavior could manually call element document components could still respond events versions react browser os affected issue work previous versions react", "num": "13563", "d": "9/2018"}, {"title": "unable install reacttestrenderer using yarn", "body": "want request feature report bug report bug current behavior fails error expected behavior reacttestrenderer install correctly versions react browser os affected issue work previous versions react react installed using createreactapp", "num": "13562", "d": "9/2018"}, {"title": "remove factory components", "body": "support unusual kind components look like functional components return instance note functional components pretty exotic nt offer practical benefits classes time added think thought type systems might want compile format like instead es classeslike output nt happen complexity associated continuing support since confusing useful think deprecate remove", "num": "13560", "d": "9/2018"}, {"title": "scheduler package umbrella", "body": "short term x replace getinteractionsref getsubscriberref methods direct mutable exports update scheduletracking umd fork x remove umd dev prod bundles since part public api x fix interactiontracking reference count bug split subscriptions entry point apart tracking eg break long term move git repo maybe even org prior release enable used without build step replacing devprod check single export add es module entry point well cjs umd entry points", "num": "13559", "d": "9/2018"}, {"title": "cjsreactdomserverbrowserdevelopmentjs calls", "body": "bug including script source pointing result error complaining function according react documents rendertostring work browser following methods used server browser environments rendertostring rendertostaticmarkup react version", "num": "13558", "d": "9/2018"}, {"title": "fbjs dependency includes uaparserjs redos vulnerability", "body": "end uaparserjs installed depend react uaparserjs redos vulnerability fixed uaparserjs could addressed requiring fbjs instead fbjs plans address", "num": "13557", "d": "9/2018"}, {"title": "possible avoid calling jestresetmodules much", "body": "test suites call every test reactdominputtest reactdomserverintegrationforms reactdomeventlistenertest probably test suites mind observed calling consumes significant amount test time almost always used reset warning cache react holds state determine warning fire instead react warnings keyed tracker could quickly reset example reactdomunknownpropertyhook object tracks properties already raised warnings could look like state whether warning triggered could live another package could easily reset testing javascript import reactwarnings reactwarnings beforeeach gt reactwarningsclear wonder possible without breaking convention testing public interface mind lot working test suites reset module registry frequently", "num": "13555", "d": "9/2018"}, {"title": "react fire feature flag", "body": "needs feature flag react thought make issue track entails need help make list roughly going react fiber add feature flag reactfeatureflags execute test suite react fire flagged probably needs config setting jest sure yet might nice build reactdom fire enabled testing dom test fixtures", "num": "13554", "d": "9/2018"}, {"title": "uncaught typeerror read property removechild null", "body": "getting error saying uncaught typeerror read property removechild null using chrome issue happening inside domchildrenoperationsjs function removedelimitedtext parentnode startnode closingcomment true var node startnodenextsibling node closingcomment closing comment removed reactmultichild break else parentnoderemovechild node parentnode null causing issue method called form code function replacedelimitedtext openingcomment closingcomment stringtext var parentnode openingcommentparentnode var nodeaftercomment openingcommentnextsibling nodeaftercomment closingcomment text nodes opening closing comments insert new one stringtext nt empty stringtext insertchildat parentnode documentcreatetextnode stringtext nodeaftercomment else stringtext set text content first node opening comment remove following nodes closing comment settextcontent nodeaftercomment stringtext removedelimitedtext parentnode nodeaftercomment closingcomment else removedelimitedtext parentnode openingcomment closingcomment code called code receivecomponent function nexttext transaction nexttext thiscurrentelement thiscurrentelement nexttext var nextstringtext nexttext nextstringtext thisstringtext todo save pending props use performupdateifnecessary andor updatecomponent actual update consistency component types thisstringtext nextstringtext var commentnodes thisgethostnode domchildrenoperationsreplacedelimitedtext commentnodes commentnodes nextstringtext", "num": "13552", "d": "9/2018"}, {"title": "debug", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13551", "d": "9/2018"}, {"title": "old new context used simultaneously unexpected render occur component", "body": "bug current behavior old new context used simultaneously unexpected render occur component demo click ok button see log expected behavior ok button clicked component must called parent pure component called visible reason call versions react browser os affected issue work previous versions react react source expand see source javascript import react react import reactdom reactdom import proptypes proptypes const provider consumer reactcreatecontext class oldcontext extends reactcomponent static childcontexttypes proptypesnumber getchildcontext return render return reactchildrenonly thispropschildren class stateprovider extends reactcomponent state value onchange value gt thissetstate value render const props children state value onchange const blabla gt consolelog must called button click return value onchange gt value class pure extends reactpurecomponent render consolelog pure render return const rootelement documentgetelementbyid root reactdomrender v gt rootelement", "num": "13548", "d": "9/2018"}, {"title": "make possible get component stack least hash", "body": "want request feature report bug feature current behavior good way get list component parents way wrap rendered component error boundary throw dummy error pass rendered component without throwing error unfortunately idea hiding thrown errors refused see experimental hack nt useful expected behavior like deterministically identify components dom tree use data assign persistent data without using custom identifiers example store visibility state specific component windowlocalstorage related", "num": "13542", "d": "9/2018"}, {"title": "use asyncawait getderivedstatefromprops", "body": "hi need aysncawait getderivedstatefromprops working expected expected results ca nt use asyncawait getderivedstatefromprops thanks", "num": "13541", "d": "9/2018"}, {"title": "uncaught syntaxerror unexpected token lt", "body": "want request feature report bug bug current behavior app nt render current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example link broken app expected behavior app render versions react browser os affected issue work previous versions react react chrome notes using firebase public directory scenarios worked wrote frustrated please help", "num": "13527", "d": "9/2018"}, {"body": "work note generally meant last resort recommended except edge cases methods problem", "d": "9/2018"}, {"body": "tried reproduce latest version react seems ok issues like one explained even codesandbox", "d": "9/2018"}, {"body": "hello kbalus steps reproduce issue maybe codesandbox link version react using also dependencies installed", "d": "9/2018"}, {"body": "locally projects im using react issue appear googlemapreact package", "d": "9/2018"}, {"body": "version using latest see issue repo seems like changed", "d": "9/2018"}, {"body": "need reproducing example", "d": "9/2018"}, {"body": "two possible fixes think could stop passing third argument would break legacy context propagation nt using anyway since get deprecated think would remove fragile dependency versions alternatively update dependency version came together imagine", "d": "9/2018"}, {"body": "thank gaearon try fix", "d": "9/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "9/2018"}, {"body": "looked running codesandbox example mode flags makes update time take around try running production flags see performance issue went away looking development bundle time taken seems due markers really bad performance something react team already found past", "d": "9/2018"}, {"body": "looks like alexreardon might assuming js import reactcjsreactproductionminjs import reactdomcjsreactdomproductionminjs import react react import reactdom reactdom would switch production mode nt think correct said still appreciate trueadm could look locally prod build maybe less calls previous discussion alexreardon said issues occur prod builds even without measurements", "d": "9/2018"}, {"body": "gaearon added well ivan asked enable production mode codesandbox recommended way keep digging issue though see something comes", "d": "9/2018"}, {"body": "issue still existed reduced amount production builds real world example listed item list time hit consumers still taking production builds compare something like reactredux uses event emitter pass values tree cost hit consumer", "d": "9/2018"}, {"body": "made codesandbox illustrate issue try get working production builds", "d": "9/2018"}, {"body": "would kinda big deal reactredux actually trying switch using version instead connected components separate subscribers also tie performance benchmarks trying wip branches well", "d": "9/2018"}, {"body": "try gather numbers helps thought sandbox showed issue enough clarity needed try obtain numbers", "d": "9/2018"}, {"body": "yes certainly appreciate details gather also curious whether comes play consumers marked bitmasks nt require update react still traverse entire tree speed things", "d": "9/2018"}, {"body": "sandbox nt helpful nt run production mode includes sandboxspecific overhead eg inject code every loop check infinite get issues sorted definitely need repro cases plain html files working umd production builds react reactdom markerikson let leave think derails issue little bit issue specifically default update performance extra overhead want look regardless optin optimization apis fact talking apis distracts us fixing bigger issue tempting say need optin thing fix", "d": "9/2018"}, {"body": "yeah selfcontained html version using umd builds would big help noticed also another reactdom used render codesandbox ui probably affected profiling bit", "d": "9/2018"}, {"body": "bit digging turns things bad first observed good must tested dev builds point tip want run codesandbox examples locally developer copy paste repo run custom builds react cheers gaearon tip simplified real world use case clarity find branch stateprovidersimplier allow parent renders reordering broken simplifies use case results production build critical render using critical render slow critical render dragging item render rest tree sort makes sense face value context updates walk tree whereas direct subscription state update propigation closer looks like context updates would sufficient use cases although significant slowdown event emitter model would push extremely fast updates gt slow still significant us", "d": "9/2018"}, {"body": "relevant markerikson moving leaning context propigating state values would lead slow current subscription pattern", "d": "9/2018"}, {"body": "look like zerosubscriptioncost model used context api absolutely free", "d": "9/2018"}, {"body": "ironically one reasons moving hoped switching single subscription passing state via context instead n subscriptions would faster reactredux ability memoization checks bail even asking react update advantage immediately calling top component tree letting react walk everything fwiw current benchmarks indicate single subscription approach winds bit slower multiple subscriptions approach artificial stress test scenarios would nice quantify exactly cost inside react case", "d": "9/2018"}, {"body": "yep old subscription mechanics could use observedbits sender side receiver still nt get real problem tearing actually bad", "d": "9/2018"}, {"body": "alexreardon also dug last night morning new context never fast redux updating state simply new context model work behind scenes thus incurs overhead traverse entire tree going fiber time might things tweak implementation function however dig today", "d": "9/2018"}, {"body": "trueadm think beginning thought would cache traversal path updates put scope initial implementation maybe revisit problem need somehow invalidate cache keep consistent", "d": "9/2018"}, {"body": "could also linked list context consumers still traversal less whole tree", "d": "9/2018"}, {"body": "thanks looking work blows mind fri sep pm dan abramov notifications githubcom wrote could also linked list context consumers still traversal less whole tree receiving mentioned reply email directly view github mute thread", "d": "9/2018"}, {"body": "trueadm gaearon yeah expected knew calling top tree redux update cause react reevaluate things work bailing early one reasons interested potential thing help potentially skip work way context implementation sped especially cases context updates need propagated tree due use type blocking would helpful", "d": "9/2018"}, {"body": "something like obtaining ref provider calling value update react render would great almost got", "d": "9/2018"}, {"body": "thekashey see", "d": "9/2018"}, {"body": "markerikson would work client side stuff default value could work everyone ssr different clients shares context value", "d": "9/2018"}, {"body": "seems related issue looks like fixed master", "d": "9/2018"}, {"body": "yeah issue means define server ideally nt adjusted heuristic also check separately next version", "d": "9/2018"}, {"body": "thanks pointing nt anywhere codebase set except tests maybe dependency dig deeper", "d": "9/2018"}, {"body": "nt seem like bug anything inside runs essentially equal thus example input state updated state updates value still stuck", "d": "9/2018"}, {"body": "seems updating state initial value like muniftanjim mentioned", "d": "9/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources general likely get help put effort reducing examples saying discourage lot work dig wall code like", "d": "9/2018"}, {"body": "context deprecated old unsupported api new context api lets everything old one could supported general use issue tracker bug reports questions please see", "d": "9/2018"}, {"body": "nt true new context old context difference pattern use unsupported api", "d": "9/2018"}, {"body": "sorry understand without example run old new context propagate tree way", "d": "9/2018"}, {"body": "oh yes mistake looked source code new context thought work synchronous mode enablesuspense true try context recreate providers async branch interesting application ca nt lot context objects thank", "d": "9/2018"}, {"body": "see mistake show failing fiddle", "d": "9/2018"}, {"body": "default import named export wo nt work", "d": "9/2018"}, {"body": "thanks letting know unfortunately nt solve issue still gives error", "d": "9/2018"}, {"body": "try removing still breaks know issue something else keep removing find jsx element broken type figure type undefined", "d": "9/2018"}, {"body": "gaearon issue nt occur anymore removed following artistjs seems error unclear error happening exactly course need artist object fill data pushing another screen tips please unfortunately stuck days nt seem able solve", "d": "9/2018"}, {"body": "error location clearly wrong write becomes error seeing happens receives first argument maybe making similar mistake inside rendering something nt imported correctly tips please unfortunately stuck days nt seem able solve stuck days need reexamine approach debugging issues nt try randomly guess happens cut parts code see causing find bad callsite fix explained error means precisely hope helps", "d": "9/2018"}, {"body": "put right direction managed resolve error slowly getting somewhere thanks lot", "d": "9/2018"}, {"body": "encounter problem cause import blank component another component render reference thanks gaearon debugging method", "d": "9/2018"}, {"body": "wish live tutor understand", "d": "9/2018"}, {"body": "sorry clear native speaker thing component rerenders every time receives new props blocks rerender props nt change soft comparison primitives pointers stay purecomponent block unnecessary rerenders problem received children changed every time parent component rerenders new instance react element created parent rerender always different comparison fails even though pointing unchanged reactcomponent instance suggesting nt compare children guaranteed receive different instance react element instead somehow extracts actual component instance element instance checks actual component instance props changed hope expressed main thought understandable way", "d": "9/2018"}, {"body": "problem close favor one", "d": "9/2018"}, {"body": "nt see one searched lot swear sorry confusion thanks pointing", "d": "9/2018"}, {"body": "please provide full project might bug package manager build tool build setup hard guess without actually reproducing", "d": "9/2018"}, {"body": "would interested hearing others handled case ended storing refs state could access use case value state needs updated changes flushed dom", "d": "9/2018"}, {"body": "correct way would move state update need take measurements render exactly right tool job", "d": "9/2018"}, {"body": "clear code reading values writing values ref response change external props nt think enough context code example really understand important eg used related component suspect nt need use general usually better solutions getderivedstatefromprops jason mentioned getsnapshotbeforeupdate lifecycle sure really needed case either limited knowledge component would inclined say could everything something like js function updateflyoutposition props flyout flyout const windowsize height windowinnerheight width windowinnerwidth scrollx scrolly export default class extends reactcomponent flyoutref reactcreateref componentdidmount always update position flyout first render updateflyoutposition thisprops thisflyoutrefcurrent componentdidupdate prevprops prevstate update position flyout related props changed thispropsidealdirection prevpropsidealdirection thispropsmargin prevpropsmargin thispropsrelativeoffset prevpropsrelativeoffset thispropstriggerrect prevpropstriggerrect updateflyoutposition thisprops thisflyoutrefcurrent render const children thisprops", "d": "9/2018"}, {"body": "would interested hearing others handled case ended storing refs state could access use case value state needs updated changes flushed dom call setstate ref know bad practice call setstate render nt think approach correct one", "d": "9/2018"}, {"body": "correct way would move state update need take measurements render exactly right tool job tried using nt work quite well triggered component receives props renders late", "d": "9/2018"}, {"body": "clear code reading values writing values ref response change external props nt think enough context code example really understand important eg used related component suspect nt need use general usually better solutions getderivedstatefromprops jason mentioned getsnapshotbeforeupdate lifecycle sure really needed case either limited knowledge component would inclined say could everything something like js function updateflyoutposition props flyout flyout const windowsize height windowinnerheight width windowinnerwidth scrollx scrolly export default class extends reactcomponent flyoutref reactcreateref componentdidmount always update position flyout first render updateflyoutposition thisprops thisflyoutrefcurrent componentdidupdate prevprops prevstate update position flyout related props changed thispropsidealdirection prevpropsidealdirection thispropsmargin prevpropsmargin thispropsrelativeoffset prevpropsrelativeoffset thispropstriggerrect prevpropstriggerrect updateflyoutposition thisprops thisflyoutrefcurrent render const children thisprops component reading div sizes calculations see fits screen writes position values update div div positioned relatively another element anchor looks position size anchor changes updates flyout element like approach tried writing styles ref directly opening issue nt sure written styles leave react decides better update dom sorry posting enough code getmaindir javascript export const curryternary predicate gt right gt left gt predicate right left export const setorreset predicate gt right gt curryternary predicate right export const getmaindir flyoutsize idealdirection triggerrect windowsize margin gt const predicatevertical windowsizewidth triggerrectright gt const predicatehorizontal windowsizeheight triggerrectbottom gt const setorreset predicatevertical triggerrecttop flyoutsizeheight margin windowsizeheight flyoutsizeheight triggerrectbottom margin const left right setorreset predicatehorizontal triggerrectleft flyoutsizewidth margin windowsizewidth flyoutsizewidth triggerrectright erroroffset margin const spaces right left const max mathmax spaces return idealdirection amp amp spaces parseint directionsindexmap idealdirection gt idealdirection spacesindexmap spacesindexof max basically returns one values left right direction flyout function javascript export const baseoffsets relativeoffset flyoutsize maindir triggerrect windowsize margin gt let top windowsizescrolly triggerrecttop let left windowsizescrollx triggerrectleft maindir directionsdown top windowsizescrolly triggerrectbottom margin else maindir directionsup top windowsizescrolly triggerrecttop flyoutsizeheight margin maindir directionsleft left windowsizescrollx triggerrectleft flyoutsizewidth margin else maindir directionsright left windowsizescrollx triggerrectright margin return top top relativeoffsety left left relativeoffsetx", "d": "9/2018"}, {"body": "nulledgravity think use case basically inside positioner component determines topleft position values popovertooltip run issues storing refs state causing cascading updates somehow code got us around issue alternative approach considered store refs instance setstate stored ie deferred initial render pass ran issues think route end going two pass rendering brian suggestion updating positioned element setting styles setting state update position finally setting tooltip unfortunate needs two passes passes generally quite fast", "d": "9/2018"}, {"body": "hey hamlim interesting approaches used brian suggestion small changes fit needs end updating dom directly", "d": "9/2018"}, {"body": "looks related issues think suggested solution move context consumer outside option", "d": "9/2018"}, {"body": "check docs function pass needs named rather object returned updated code preview", "d": "9/2018"}, {"body": "oooops like always helps read thanks lot bvaughn overlooked part documentation", "d": "9/2018"}, {"body": "worries looks like easy mistake make", "d": "9/2018"}, {"body": "afaik expected component one level deep would retained next update would clear seeing deeper tree getting gc please make sure checking production version include exact steps diagnose", "d": "9/2018"}, {"body": "gaearon investigated see screenshot would see route deep nested react components huge state go route test see heap snapshot root component nested child along state result route memory bloats gets garbage collected route debugging could see mentioned reconciliation gets gced creating next wip tree previous fibers used effects nexteffect firsteffect lasteffect wiped references get removed line reactfiberjs parent route component type \u0192 route still keeps reference using lasteffect lasteffect reset fiber gets reused code pointed behaviour seems fiber node even though disconnected parent child alternate using detach fiber still references fibers using effects array also reproducible production version well detailed repro steps load sandbox navigate route take memory snapshot navigate route take memory snapshot route components still persist navigate route take memory snapshot route components still persist route gone wait seconds trigger state change automatically take memory snapshot route gced", "d": "9/2018"}, {"body": "wip", "d": "9/2018"}, {"body": "trysound see prs mistake need help happy help", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "please see react dom behavior intentional supported put custom components inside worked cases accident crashed others changed work consistently either use render prop right unfortunately reflect test renderer intentionally dom specific behavior catch problem something plan change needs remain agnostic use cases", "d": "9/2018"}, {"body": "working intended unfortunately way understand jsx specialcase adds space newline separating two literal texts universally want case otherwise obviously breaks output easy fix adjacent texts rarely want unintentional occurrences space always clearly visible simple work around believe following case", "d": "9/2018"}, {"body": "hi andreas thanks clarifying gotcha close thursday september bst andreas svensson wrote working intended unfortunately way understand jsx specialcase adds space newline separating two literal texts universally want case otherwise obviously breaks output easy fix adjacent texts rarely want unintentional occurrences space always clearly visible simple work around believe following case", "d": "9/2018"}, {"body": "hmm strange server environment defines fake global nt behave like real could possibly check checks kind arbitrary line get rid fake server environment", "d": "9/2018"}, {"body": "gaearon wow bizzare legacy fun found globalwindow navigator server true serverjs entry file added works like guessing added bypass errors like one strange places consolelog globalwindow going undefined anyone wonder", "d": "9/2018"}, {"body": "team seeing something similar react native seeing runtime crash nt dug metro internals see whether defined seems like likely cause problem due recent bump", "d": "9/2018"}, {"body": "inspecting bundle see development version included addition nt umd wrapper odd trying track link files seems schedule renamed", "d": "9/2018"}, {"body": "standalone package come rn would nt expect used", "d": "9/2018"}, {"body": "moreover nt understand brings version run", "d": "9/2018"}, {"body": "moreover nt understand brings version maybe installing newer version package like issue", "d": "9/2018"}, {"body": "oh maybe well supported never", "d": "9/2018"}, {"body": "standalone package come rn yeah think somehow getting dependency depends reactdom bad dependency tree part build tooling bit complicated try thanks", "d": "9/2018"}, {"body": "issue caused reactdom latest version got issue fixed downgraded previous version", "d": "9/2018"}, {"body": "yeah dependency added version need depend time would reasonable version pin", "d": "9/2018"}, {"body": "running rn react got error windowaddeventlistener downgrading react reactdom resolved problem", "d": "9/2018"}, {"body": "fix unblock rn", "d": "9/2018"}, {"body": "sure going maybe transient npm registry definitely published npm see also jsfiddle code sandbox linked work fine going assume npmcache hiccup", "d": "9/2018"}, {"body": "appreciate looking yes think may caching issue within npm proxy sorry wasting time thanks", "d": "9/2018"}, {"body": "probably meant file repository generic parts web version", "d": "9/2018"}, {"body": "oops right thanks gaearon", "d": "9/2018"}, {"body": "please provide single runnable complete example reproduces issue example fiddle", "d": "9/2018"}, {"body": "gaearon demo thanks", "d": "9/2018"}, {"body": "gaearon nt use unmountcomponentatnode react root clear old component eventsdomsstate sub components self old component unmount automatically", "d": "9/2018"}, {"body": "hello tried investigate example gave note first time checking reactdom source want try contribute react first want achieve need call plan renderrerender react component case rendering component gt rerender properly without unmount mount new component case rendering component gt properly unmount previous component render new one easily test behavior removing adding component check behavior correct however think code share work correctly investigation bug behavior first button click unmount something empty return false correct behavior doc component render correctly set correctly second button click unmount react component return true correct behavior doc component render component unmount set container bug next click error return false unmount correctly component root cause null guess root cause might come uncorrect order unmount mount wrap code async works order component unmount set component render reactrootcontainer correctly set used investigate let know needs fix investigation wrong", "d": "9/2018"}, {"body": "send fix happy verify", "d": "9/2018"}, {"body": "gaearon thank u yes right checked source code unmountcomponentatnode think works relates fiber demo works right react maybe new changed feature noticed", "d": "9/2018"}, {"body": "little investigate think problem come behavior testing timeout working render believe somehow reschedule job rendering order might inverted still nt clue continue investigate making fix", "d": "9/2018"}, {"body": "gaearon could reproduce unit test tried find correct way fix found multiple way really confident quality seems quite hacky pr feedback opinion make fix would appreciated", "d": "9/2018"}, {"body": "seems like bug figure wrong could revert altogether although still get different event cases tried fix", "d": "9/2018"}, {"body": "figure wrong according docs outside context event handler value always undefined sets value never resets back undefined always stores previous event", "d": "9/2018"}, {"body": "want send pr reset long handle nesting correctly", "d": "9/2018"}, {"body": "gaearon tried couple things nt think possible restore property correctly initially looks like assigned eg looks like would suggest using something fix eg roll back entirely", "d": "9/2018"}, {"body": "sorry testing observed changes windowevent made within event handlers restored end event handler said ca nt reproduce must mistaken happy either exposing somewhere using property descriptor restore let property objectgetownpropertydescriptor window event property let windowevent windowevent function call windowevent windowevent dispatchevent property objectdefineproperty window event property", "d": "9/2018"}, {"body": "conradirwin applied suggested fix project issue initially detected works fine also verified restored descriptor let know would like make pr delegate", "d": "9/2018"}, {"body": "able get tomorrow want jump ahead please feel free conrad sent via superhuman wed sep pm sergei startsev lt notifications githubcom gt wrote conradirwin applied suggested fix project issue initially detected works fine also verified restored descriptor image let know would like make pr delegate receiving mentioned reply email directly view github mute thread", "d": "9/2018"}, {"body": "conradirwin np changes look pretty straightforward", "d": "9/2018"}, {"body": "react relationship sounds like typescript definitions maintain typescript definitions react definitelytyped community perhaps would best place report actionable us files", "d": "9/2018"}, {"body": "work create new div every render including updates move portal works", "d": "9/2018"}, {"body": "sorry link work edited mobile looks like codesandbox save changes cc compuives basically moved creation parent div constructor attaching document componentdidmount render would always render portal", "d": "9/2018"}, {"body": "gaearon thanks fault", "d": "9/2018"}, {"body": "observed opposite large products people error boundaries place accidentally catching failing surface legitimate bugs tests", "d": "9/2018"}, {"body": "certainly valuable tool removed outright retaining behavior permanent path specs eliminates option gracefully detect assert around render failures specs especially important nonsandboxed spec frameworks failures global scope disruptive flow specs often tricky debug jest jsdom eliminate form pollution choice two tools available every project allowing behavior option would ensure intended convenience remains benefit projects depending nonsandboxed spec frameworks hindered conflicts behavior introduce spec suite", "d": "9/2018"}, {"body": "add error handler like", "d": "9/2018"}, {"body": "probably seems hacky would also smother non renderrelated errors could relevant specs deliberate error handling could valuable addition reactdomrender api use determines whether render errors surfaced globally designated handler", "d": "9/2018"}, {"body": "gaearon handler interfere error handling places issue states problem occur tests would expect test framework may use handler needs start malfunction mess", "d": "9/2018"}, {"body": "proxy mean inner class component instance suggested solution inner component forward ref dom node desired wo nt wrapper middle", "d": "9/2018"}, {"body": "thanks link gaearon something like", "d": "9/2018"}, {"body": "yes work need use like described link", "d": "9/2018"}, {"body": "thanks give go", "d": "9/2018"}, {"body": "hey try keep react issue tracker specific react bugs features issue run reactbootstrap nt pass event object first argument dropdown onselect handler eventkey", "d": "9/2018"}, {"body": "thanks jquense tried replacing event eventkey still working please recheck function suggest done wrong cause working fine react", "d": "9/2018"}, {"body": "read reactbootstrap docs nt react issue onselect event nt browser one fired something picked dropdown", "d": "9/2018"}, {"body": "hey read reactbootstrap docs passing itemindex previously eventkey param inside menuitem changed itemvalue works fine changed onselect onclick eventtargettext also works thanks suggestion", "d": "9/2018"}, {"body": "think test added also demonstrates bug failing", "d": "9/2018"}, {"body": "nt think bug actually discussed times issues believe consensus intended fragments distinct elements vs array elements", "d": "9/2018"}, {"body": "jquense bug documentation", "d": "9/2018"}, {"body": "sounds like let wait core team member confirm", "d": "9/2018"}, {"body": "way automatically flatten among children much desired feature anyway would happy see code work currently specified documentation", "d": "9/2018"}, {"body": "nt think bug actually discussed times issues believe consensus intended fragments distinct elements vs array elements yes intentional traverse update docs apologies confusion", "d": "9/2018"}, {"body": "searching found comment dan abramov think changing behavior might reasonable interpret implementation particularly intentional proposes submit rfc changes find moment try create one", "d": "9/2018"}, {"body": "rfc flatten fragments", "d": "9/2018"}, {"body": "interpret implementation particularly intentional maybe although worth talked confirm intentional earlier yesterday brian reactchildrenmap treat fragment single child docs worded bit ambiguously dan yeah intentional brian cool wanted confirm update docs said rfc sounds like right way go", "d": "9/2018"}, {"body": "hey hard time reproducing issue use new codesandbox project indeed work ios due code codesandbox inserting react working expected ios matter use production development build react deployed internal testing application try suggest try find code interfering removing everything react specific application closing ticket ios clearly working latest react version feel free follow reproduction case isolated enough", "d": "9/2018"}, {"body": "currently supported", "d": "9/2018"}, {"body": "plan happy investigate could help", "d": "9/2018"}, {"body": "despite name callback called commit commit phase implemented noop server renderer wo nt break app wo nt collect log metrics either nt feel strongly either way offering additional context", "d": "9/2018"}, {"body": "bvaughn thanks info also thanks working profiler helped us much find components slowing rendering us server side render speed much important client side right tracking entire rendertostring call using node perfhooks would really nice able use profiler node track performance granularly would happy try work someone could point right direction", "d": "9/2018"}, {"body": "reason jsx transpiled js function meaning gets converted empty expression made would converted result invalid javascript see info", "d": "9/2018"}, {"body": "tryingtoimprove right must assign nonempty expression nt include valid definitions javascript props passed without props using first expression better use proptypes default props cheers", "d": "9/2018"}, {"body": "thanks everyone helping ihaddream going close like keep issue board focused bugsimprovements react however please checkout support page discussion boards sources get help great day", "d": "9/2018"}, {"body": "reason jsx transpiled js function meaning gets converted empty expression made would converted result invalid javascript see info thank", "d": "9/2018"}, {"body": "hey issue tracker react repo unrelated quip try quip support resources looks like might helpful using react please check community support resources", "d": "9/2018"}, {"body": "maybe could sure right kind treated fatal error otherwise might difficult ensure get terminal state hand could keep unwinding boundary boundary happens like normally", "d": "9/2018"}, {"body": "way developers catch kind exception right unwinding boundary boundary sure means tbh", "d": "9/2018"}, {"body": "oh sorry thinking completely different error one nt error warning therefore ca nt catch never thrown technically something overriding adding custom logic tests", "d": "9/2018"}, {"body": "reason work around issue ios safari say breakage unfortunate react root generally expected react control handlers attach implementation detail fact future plan move event handlers root instead document even fixed could break later nt necessary add indication make element draggable work default regular application web page understand correctly decision use heuristic whether explicit click handler gsap common convention therefore sure see nt necessary looks like overly broad heuristic clashing implementation detail know would sufficient change get around heuristic think could seems bit fragile fixed would expose flaw heuristic consider property event listeners maybe heuristic would better change hope makes sense let know misunderstood", "d": "9/2018"}, {"body": "hi dan thanks detailed fast response fact normal behaviour using gsap draggable elements buttons tags inputs select textareas keep default functionality clicked unless indicated user hijack passing boolean mentioned sandbox sample heuristic mention also normal behaviour tag nt need heuristic work hand discussion forums jack doyle creator gsap mentions user wants make form element button tag draggable intention clear matter heuristic kind redundant considering popularity react decision starting next release gsap boolean true default order avoid unexpected behaviour linked issue forums gsap users wants chime come add opinion matter appreciate keep open best rodrigo", "d": "9/2018"}, {"body": "thank sure keep open sorry inconveniencing", "d": "9/2018"}, {"body": "hi gaearon thanks addressing think best way move forward us change default behavior draggable dragclickables true way nt need anything react people want disallow dragging clickable elements set dragclickables false answer question yes resolve things switched declaring onclick addeventlistener click totally see point fragility hence recommendation switch behavior end side us course change could break legacy code doubt widespread problem easy fix setting dragclickables false plan making change next gsap release thanks consideration thanks rhernandog reporting", "d": "9/2018"}, {"body": "want put together reproducable example", "d": "9/2018"}, {"body": "error nt descriptive actual problem happening nt upgraded version compatible react result getting multiple instances reactreactdom bundle confusing react", "d": "9/2018"}, {"body": "create isolated fiddle demonstrating", "d": "9/2018"}, {"body": "able reproduce issue three logs defined appears correctly console order react class html node found end event passed children test case created produce warnings errors using versions feel free editfork fiddle correct deliver behavior mentioned issue", "d": "9/2018"}, {"body": "sorry taking long answer tried simek code modifications resemble use component worked intended manage install nt use often try install keep updated manage replicate issue point assume problem maybe something multiple react instances keep investigating locally", "d": "9/2018"}, {"body": "stupid error side versions different sorry making fuss", "d": "9/2018"}, {"body": "nhunzaker thoughts actually sure bug", "d": "9/2018"}, {"body": "guess default behaviour input element related react properly", "d": "9/2018"}, {"body": "assuming thinking correctly looks like issue value attribute reporting aligned state happening value attribute gets synced based think bug fix need figure best way get point also need make sure worked value set event callback blur", "d": "9/2018"}, {"body": "regard value property user sees type react strictly modify value property number inputs tricky user input progress different character strings represent value important user typing easy react accidentally take way user input change unexpected way example user starts type make user types converting number turns user input lost input reverts back", "d": "9/2018"}, {"body": "check whether reactspecific get behavior browser builtin event", "d": "9/2018"}, {"body": "thanks response man appreciate try get back office let know find nice weekend", "d": "9/2018"}, {"body": "probably mistake send pr please", "d": "9/2018"}, {"body": "yep done", "d": "9/2018"}, {"body": "think solution use callback ref fill array nt really see react providing special api easy enough need cases want discourage direct dom manipulation also performance overhead attaching refs nt want default", "d": "9/2018"}, {"body": "hi dan thanks prompt response written see expressed poorly nt really see react providing special api also performance overhead attaching refs nt want default neither asked special api although sure exactly mean special attaching refs given example right away maybe clearer indeed would still lead allocation array best guess negligible compared everything else going reconciliation initially thinking easy react must information looked reconciler though things seem way complicated initially assumed perhaps possible without much effort solution proposed improves upon one gave nt address core issue developer maintain dom references manually course think much nicer nt way much nicer passed even though would work fine goes result passed around framework convenient means developer less mutable state maintain last point cases want discourage direct dom manipulation absolutely agree cases want access dom fact one use case documentation gives enables component capture information dom eg scroll position potentially changed hence suggestion passing dom function arguments fully backwards compatible", "d": "9/2018"}, {"body": "strongly feel valuable suggest drafting rfc detailed proposal want set clear expectation unlikely go route said write detailed rfc able respond detail nt think work well", "d": "9/2018"}, {"body": "thanks heads", "d": "9/2018"}, {"body": "according html specification tag obsolete valid optional attributes anyway nt know react dom server renderer aims create valid output answer yes somewhat expected behaviour answer seems like bug", "d": "9/2018"}, {"body": "simek get puzzled react dom server renderer aims create valid output output obsolete tag without warning even remove valid attributes silently valid attributes", "d": "9/2018"}, {"body": "dig little currently many obsolete tags supported correctly also according documentation attributes supported react standard custom dom attributes fully supported gon na prepare pr later today fix issue", "d": "9/2018"}, {"body": "lines highlighted responsible omitting values currently positive numbers valid react value attributes since values correct according html spec think restriction lifted decision might cause complications aware andor reflected tests pr way ca nt assure merged", "d": "9/2018"}, {"body": "\u044d\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0435 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u044d\u0442\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043d\u0435\u0442", "d": "9/2018"}, {"body": "\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043d\u0435 \u043d\u0430\u0448 \u044f \u043d\u0435 \u0437\u043d\u0430\u044e \u043a\u0442\u043e \u0435\u0433\u043e \u0445\u043e\u0441\u0442\u0438\u0442", "d": "9/2018"}, {"body": "would nt expect meaningfully save memory given react attach event handlers nodes think might misunderstood answer react nt attach click event handlers nodes uses event delegation listens document level handler seeing attached empty event handler necessary work around ios safari issue", "d": "9/2018"}, {"body": "afaik might mistake provide profiling build nt actually differ production build use need profiling mode bvaughn please correct wrong fix one way another though", "d": "9/2018"}, {"body": "think artifact way initially exposing schedulingtracing api secret object react longer cjs builds right safely remove said also nt productionprofiling umd variant umd profiling support seemed like edge case want support need add new build type plug bundles probably add entry point matching naming convention bundle avoid confusion", "d": "9/2018"}, {"body": "thanks clarification would one edge cases use umd production profiling glad see make thanks", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "adding native handler dom element produces number calls inspect see receiving events various properties addition change extra calls go away nt know enough innards css transition spec tell firing events things seemingly changed problem react", "d": "9/2018"}, {"body": "saw fix around year half ago thread able recreate spades thank guys much taking gander", "d": "9/2018"}, {"body": "versions react problem try different versions report results", "d": "9/2018"}, {"body": "thanks getting back fast checked things certainly regression bug input focused initial load placeholder blank apologies", "d": "9/2018"}, {"body": "please file instead thanks", "d": "9/2018"}, {"body": "got thank", "d": "9/2018"}, {"body": "happy take pr option purpose accepting arguments clear never get filled", "d": "9/2018"}, {"body": "cool make pr tonight", "d": "9/2018"}, {"body": "might want add note argument rest well also warning confusing manor since transpiled use directly", "d": "9/2018"}, {"body": "think nt warn arguments", "d": "9/2018"}, {"body": "fixed", "d": "9/2018"}, {"body": "oh mean nt appear console context let check", "d": "9/2018"}, {"body": "whsdothk yes pared", "d": "9/2018"}, {"body": "example nt render try change", "d": "9/2018"}, {"body": "might bug case probably want use portal workaround fact portals better way anyway", "d": "9/2018"}, {"body": "example nt render try change component without side effect see child dom element inside get rendered check get name world", "d": "9/2018"}, {"body": "might bug case probably want use portal workaround fact portals better way anyway thanks suggestion actually using maintain another virtual dom tree renders webgl scene via side effects life cycle hooks portal needed nt actually render dom elements another dom node add bit little details create webgl canvas webgl redrawing finally destroy canvas calling order life cycle hooks get many es", "d": "9/2018"}, {"body": "want support crossrenderer portals day yeah wan na dig happening", "d": "9/2018"}, {"body": "would look suspicious race conditions around", "d": "9/2018"}, {"body": "yes checked yesterday saw scheduled task callback set following triggered somehow cancelled real task without removing callback root cause component regular update due callback called resulting following updating logic thinking fresh initial mount", "d": "9/2018"}, {"body": "seems strategies merging know", "d": "9/2018"}, {"body": "familiar logic expect mistake related race conditions flag set read rather merging", "d": "9/2018"}, {"body": "code example specific setstate right onclick said returns prevstate think cause back fourth update mount", "d": "9/2018"}, {"body": "whsdothk imo calling inside common way update state right anyway got simpler reproducing code issue desc updated happened code clear world render world clear render see mounted without unmounting specific use instead clear everything fine updated rather mountedunmounted", "d": "9/2018"}, {"body": "gaearon seems merging callback set first cleared maybe issue merging code", "d": "9/2018"}, {"body": "maybe want try fixing", "d": "9/2018"}, {"body": "sure maybe need time find merging code lies could shed light", "d": "9/2018"}, {"body": "mean nt consume yet", "d": "9/2018"}, {"body": "whsdothk nt actually unmount job callback clearing called somehow", "d": "9/2018"}, {"body": "problem call callback done callback maybe unmount", "d": "9/2018"}, {"body": "would try add calling callback sending pr", "d": "9/2018"}, {"body": "whsdothk thanks help nt think right way fix issue callback clearing meta data attached dom element actual unmount job job inside callback", "d": "9/2018"}, {"body": "right think passing child already recursive", "d": "9/2018"}, {"body": "oh logic right gaearon point earilier nt called anywhere add back thing inside maybe set", "d": "9/2018"}, {"body": "whsdothk still trying figure updating merging logic reading code honestly nt clue fix issue gaearon right issue caused condition race find code responsible making race", "d": "9/2018"}, {"body": "first step would helpful make failing test", "d": "9/2018"}, {"body": "gaearon thanks tip work today", "d": "9/2018"}, {"body": "relevant handlers document ones element empty listeners added work around ios safari bug requires event handle element receive clicks general events delegated document unless detail event requires elsewhere", "d": "9/2018"}, {"body": "actually thing although accidental wanted change later expect render function maybe first warning could amended suggestive causes", "d": "9/2018"}, {"body": "also worth noting documentation suggest good practice using destructuring assignment initializing context prevents mentioned mistake ps gaearon maybe examples context page release blog post updated according good practice suggested method documentation seems doable even multiple contexts using notation", "d": "9/2018"}, {"body": "react runs include necessary polyfills hard guess problems running isolate small reactonly example third party libraries take look otherwise ca nt really help", "d": "9/2018"}, {"body": "see error like usually means something else touched dom react attempts modify dom nt exist anymore might want use dom breakpoints chrome debugger see removing dom element react tries remove later might browser extension different library description rerendering causes input values lost also suspicious normal react points problem code libraries using hard say anything else without reproducing example", "d": "9/2018"}, {"body": "yes correct multiple combobox controls addedremoved using state controls created library called wijmo able fix issue wrapping control div tag unique key somehow small change enough let react distinguish instance combobox control could elaborate works opposed naked control problem function js getparamview gt let paramview null let progress null", "d": "9/2018"}, {"body": "sorry question bit vague hard give answer explanation keys work see explanation integrate dommodifying libraries safe way see think bug react need runnable reproducing case thanks", "d": "9/2018"}, {"body": "guess meant clear wrapper would sufficient react suddenly recognize bunch elements still rendering", "d": "9/2018"}, {"body": "render dom node something else react wo nt recognize think seeing something different ca nt guess without actually running code", "d": "9/2018"}, {"body": "ok fair enough way watching redux videos eggheadio good stuff", "d": "9/2018"}, {"body": "error", "d": "9/2018"}, {"body": "spread operator turns apply like nt support", "d": "9/2018"}, {"body": "try check one good first issue nt mind", "d": "9/2018"}, {"body": "fixed", "d": "9/2018"}, {"body": "sure sounds good changed descriptive wording", "d": "9/2018"}, {"body": "ummm black white words blacklist whitelist nothing race next replace black color css severelydarkpurpleindistinguishablefromthecloudednightskyasviewedfrominsideaforest", "d": "9/2018"}, {"body": "etymology words nt steeped racial undertones history like problematic tech word choices harm changing synonyms understandable avoid question entirely", "d": "9/2018"}, {"body": "worked", "d": "9/2018"}, {"body": "rats looks like oversight way endpoint nt initialize refs production mode nt really considering use profiling nonprofiling fastest fix would put bugfix release production bundle initializes refs nt impact nonprofiling since production bundle nt even require sure want warn profiling bundle since nt normally warnings production bundles", "d": "9/2018"}, {"body": "docs outline known intentional limitation see context", "d": "9/2018"}, {"body": "thanks aweary limitation derived library vs external factors despite explanation cause linked issue provided failing understand intentional missing serverside support feature seems like unintentional result priorities feature creation nt seem like runtime based feature available clientside code make assumptions rest technology stack develop new features react without rewriting existing code", "d": "9/2018"}, {"body": "topic exports specifically react native web nt appear used still need exposed", "d": "9/2018"}, {"body": "right api used nt think ever sure api ie whether used something", "d": "9/2018"}, {"body": "still undefined latest release ticket reopened nt see changes reactnativeweb update rnw use inject plugin instead", "d": "9/2018"}, {"body": "nt render string renders valid html inside tag use directly try setting avoid extra span", "d": "9/2018"}, {"body": "jquense sorry forgot add default tag nt work", "d": "9/2018"}, {"body": "worth code sandbox works react maybe related cc gaearon nt context change sure outcome expectedokay", "d": "9/2018"}, {"body": "remove tag add property demo works correctly fork", "d": "9/2018"}, {"body": "nt work reactfragment make work probably well idk categorize breakage worked solely forgiving browsers unlimited causing original bug markup definitely incorrect also definitely broke something worked", "d": "9/2018"}, {"body": "work context consumer inside option either", "d": "9/2018"}, {"body": "going tag regression least sure one way another", "d": "9/2018"}, {"body": "quazzie fix wrapping tag inside context render function fork", "d": "9/2018"}, {"body": "simek thanks real app use component uses context internally ca nt really use mycomponent uses contextconsumer processes value bit returns string", "d": "9/2018"}, {"body": "bvaughn yeah seems connected seems ca nt use component child option test simple functional component yields problem", "d": "9/2018"}, {"body": "quazzie sure thing seems like regression want implement property pass value component app property provided wrap string inside component otherwise return string clear providing quick solutions react team decided solve issue", "d": "9/2018"}, {"body": "nt think strictly regression kind thorny area never intentionally supported accidentally worked initial mount crashed updates fixing crash important fixed treated text content unfortunately means putting custom components middle supported consistent similar elements work think better show invalid output warn something breaks updates let people use discover crashes production see arguments supported custom component returns string unfortunately nt know fix way would solve update crashes support textonly content think reasonable say putting custom components nt really work never quite worked correctly ask manually provide string", "d": "9/2018"}, {"body": "react also warned accidentally lost warning cases components return string", "d": "9/2018"}, {"body": "since warned crashes unexpected ways think new behavior actually bugfix missing warning inconsistent behavior unfortunate warnings nt get emitted cases clear components returning dom nodes missed case strings think allowing crashes case worse addressing problem head intended workaround using reactintl indeed use something else make passing child actually string cases nt crash updates work correctly sorry discovered", "d": "9/2018"}, {"body": "gaearon single renders single string would nt trigger crash understand easier validate enforce children input truth anyone want use context setup leak context parent corner case ca nt use react setup element children feels extremely weird", "d": "9/2018"}, {"body": "nicolascherel welcome file proposal work long nt include crashes", "d": "9/2018"}, {"body": "clear figure make work cases think happy supporting using custom components returning strings could nt figure yet", "d": "9/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "9/2018"}, {"body": "past problem react javascript general bad one infinitive loop check code inside profiler", "d": "9/2018"}, {"body": "unlikely related react try profiling", "d": "9/2018"}, {"body": "future usage support question please check community resources", "d": "9/2018"}, {"body": "could use object value symbol every component use equality check instead could warn exists nt equal internal value use obscure name like", "d": "9/2018"}, {"body": "revert particular change doubt breaking intentional likely oversight", "d": "9/2018"}, {"body": "aweary checking specifically part today contract years easily change also think changing worth churn since libraries adopted check", "d": "9/2018"}, {"body": "using shared object equality check would nt break anyone though right thought used somewhere else", "d": "9/2018"}, {"body": "solve components would still broken pass check could warn shadow also seems worth", "d": "9/2018"}, {"body": "proper warning mind established contract seems like discourage users shadowing", "d": "9/2018"}, {"body": "fixed", "d": "9/2018"}, {"body": "hi use issue tracker bug reports feature requests react question please check community support resources", "d": "9/2018"}, {"body": "sorry guys update", "d": "9/2018"}, {"body": "awesome proposal thanks writing looking regex created feeling managing whitelist considerable easier would expand regex object would faster test production assume really save lot anything think dropping number values css properties would also great solution since handy use would break probably every react app planet well people use cssinjs heard alternative suggestion always add numbers add devonly warnings unitless css property list probably issue would lot less magic going hood could add warning keep current behavior point remove whole blacklist production build", "d": "9/2018"}, {"body": "always add px numbers add devonly warnings unitless css property list probably issue nt already issue actively break whole lot properties right", "d": "9/2018"}, {"body": "think intermediate solution applying subset properties good option means nt going break apps nt worry endless arms race adding properties", "d": "9/2018"}, {"body": "nt already issue actively break whole lot properties right currently use whitelist production example use added without suffix also find string also warning see agree break react apps maybe add warning people slowly migrate away one day react lol might able drop whitelist save precious bytes", "d": "9/2018"}, {"body": "whitelist properties without suffixes eg unitless ones otherwise always add px numbers sure understand suggesting warning tho would warn", "d": "9/2018"}, {"body": "idea warn using numbers unitless css properties encourage strings instead way might eventually get rid remaining numbers safely suffix sure plan ambitious though", "d": "9/2018"}, {"body": "philippspiess looking regex created feeling managing whitelist considerable easier would expand regex object would faster test production assume really save lot anything idea whitelist would nt really maintained would basically frozen went css props deduced ones might much popular ones mentioned increasing whitelist case release people report missed popular css prop doubt happen though ideal world would nt auto appending behavior sure feasible would achieve react jquery decided due legacy code around jquery used wildly different ways often wordpress projects without build process sometimes even without version control code pasted cms fields many old unmaintained plugins often included etc nt codemod mechanism like react even many people would nt way use want keep small whitelist limit damage react could follow strategy could aim ambitious goal get rid autoappending completely alternative suggestion always add px numbers add devonly warnings unitless css property list probably issue would nt intuitive imo consider surprising people following actually sets need quote number get without suffix", "d": "9/2018"}, {"body": "yeah think auto px append bit relic probably inspired jquery tho check old timers one zpao interesting thing px special want write something terms already need specify string think moving toward space numbers mean unitless best option going mgol interested making happen seeing much code could remove removing whitelist dev would good first step might give us better idea potential worth gaearon could give us sense change feasible fb context well", "d": "9/2018"}, {"body": "could take stab totally question wait feedback", "d": "9/2018"}, {"body": "idea whitelist would nt really maintained would basically frozen sure think continue support auto unitless numbers run problems new css properties make adjustments users expect work idea auto everything probably biased use lot definitely look broader audience keep future units account well jquense comment different mgol example also important plan could migrate either way getting rid one patterns make react less magical really like idea seeing much code could remove removing whitelist dev would good first step thought", "d": "9/2018"}, {"body": "nt make sense always return array imo intended provides flexible us render children new context api many things relay", "d": "9/2018"}, {"body": "hi nesmalltown understand changing right break lot things conversation decision made much ca nt change imho relying something nt necessarily mean concept correct", "d": "9/2018"}, {"body": "want use instead initial reason avoid extra array allocation every single child common case small costs like add large hierarchies another reason generally like treat opaque data structure might optimize stored later nt intend specific form considered public api finally making array wo nt solve problem example could nested children arrays probably handle case incorrectly used exactly exists handles cases right thing", "d": "9/2018"}, {"body": "gaearon thanks detailed answer even issue closed please allow ask questions regarding term opaque data structure asked something like older issue already answers completely satisfying hope annoying ask btw answer help close open issue reactjsorg repo opaque data structure means imho must make assumptions concrete nature data structure wirtten nt intend specific form considered public api two lines propschildren seems concrete type error least suboptimal data structure propschildren opaque nt something like following function child pattern considered bad code makes assumptions data structure propschildren jsx function somecomponent props propschildren someargs nt something like reactchildrenonly propschildren someargs thanks lot advance clarification", "d": "9/2018"}, {"body": "agree mcjazzyfunky calling children semantically incorrect opinion property child set children something else future understand making array lead memory usage however tests prove initializing array holds children fact measurable performance decrease many libraries using scene graph like threejs pixijs organized way meant public api maybe cleared documentation across examples thispropschildren vastly used mentioned could also arguably move thispropschilden public api hidden location let users render children method suggested anyway appreciate clarification earlier tremendous amount work put library understand petty low priority issue without clarification documentation lead people like coming github complaining life", "d": "9/2018"}, {"body": "two lines propschildren seems concrete type error least suboptimal go suboptimal yes ideally would nice something deal via data structure propschildren opaque nt something like following function child pattern considered bad code makes assumptions data structure propschildren fair point think right would conceptually better ship somewhat sailed ongoing work eg compilation experiments might make important happens reevaluate importance maybe start enforcing maybe", "d": "9/2018"}, {"body": "ever work", "d": "9/2018"}, {"body": "tried yet tried work however mechanism manually assign element attaching event listeners could necessary", "d": "9/2018"}, {"body": "developed workaround", "d": "9/2018"}, {"body": "types errors normally related internet problems package host blip behind sort firewall something ran test installed reacttestrenderer without problem probably blip machine would try nt react bug", "d": "9/2018"}, {"body": "workinprogress pr locally maybe take weekend nt mind", "d": "9/2018"}, {"body": "need add deprecation warning first take pr", "d": "9/2018"}, {"body": "ok fine next time", "d": "9/2018"}, {"body": "seen mentioned twice even actually used anywhere real world", "d": "9/2018"}, {"body": "relay used guess means people stuck relay classic", "d": "9/2018"}, {"body": "last answer sounded unclear would love take suppose warning could placed somewhere", "d": "9/2018"}, {"body": "type umbrella ella ella eh eh", "d": "9/2018"}, {"body": "files modules meant use bundler like webpack node want umd builds located", "d": "9/2018"}, {"body": "real vulnerability react nt use happens transitive dependency unrelated modules inside used literally unused react code next patch version wo nt using solved", "d": "9/2018"}, {"body": "helpful isolate bugs caused accidental statefulness agree overkill default approach makes sense", "d": "9/2018"}, {"body": "definitely need flag fire might also separate feature flags smaller changes within current system need assess much effort migrate real code", "d": "9/2018"}, {"body": "likely due browser extension modifying dom manually code try disabling extensions otherwise need see full reproducing example", "d": "9/2018"}, {"body": "sounds lot like think thing failing test outline fix could look likely dive legacy context support creates overhead best spend effort migrating away code libraries use", "d": "9/2018"}, {"body": "said feel free try fixing", "d": "9/2018"}, {"body": "notion persistent identifier flawed unless somehow guarantee going get exact tree structure reload gives guarantee", "d": "9/2018"}, {"body": "gaearon thank response every use nonlist component gets unique stack parents case component names different example heading every issue could child following stack always remain props data nt affect every component reused different places get stack parents means another logical element component rendered child one parent rendered child another parent child actually changes meaning identifier must different xml different logical elements think yes imagine unique id checksum concatenation parent component source codes key ideal case imo hash function simpler requirement make secure instead could use think", "d": "9/2018"}, {"body": "guess saying way enforce stack stable might library middle choose rename internal component patch release minifier could change semantics code reusing name different components functions get mangled see feature grabbing devonly stack would helpful cases fragile rely production maybe context explicit nested providers would work better", "d": "9/2018"}, {"body": "gaearon hmm makes sense component source code like proposed sure would affect performance providers stuff sound overcomplicated issue would prefer use custom identifiers", "d": "9/2018"}, {"body": "component source fragile two components trivially share source code providers stuff sound overcomplicated issue explicitly models trying implicit assumptions like stable function names source make complicated", "d": "9/2018"}, {"body": "hmm makes sense thank", "d": "9/2018"}, {"body": "expected react outputs today see honest react common javascript function call javascript works react works hand mistakes async operations useless even cwrp call still bad idea one reasons react deprecate side effect read rfc doc details", "d": "9/2018"}, {"body": "nt use data fetching meant want put logic", "d": "9/2018"}, {"body": "gaearon called initial render trying render component serverside using clear load initial data like something like nextjs thanks", "d": "9/2018"}, {"body": "ca nt load initial data asynchronously current ssr implementation think synchronous simply nt make sense unofficial workarounds like rendering twice nt recommend understand want case use constructor future possible wait data load using server renderer tracking expect might something next year", "d": "9/2018"}, {"body": "gaearon gotcha thank", "d": "9/2018"}, {"body": "gaearon next year ssr suspense wo nt released client suspense", "d": "9/2018"}, {"body": "client implementation less ready cache provider still needs work core implementation already production fb starting work ssr part might come later", "d": "9/2018"}, {"body": "oh gotcha notice issuesprs hope could helps", "d": "9/2018"}, {"body": "appears mainxxxjs file served html", "d": "9/2018"}, {"body": "hi could causd service worker serving old version html updated js assets happens unregister service workers", "d": "9/2018"}, {"body": "uncommented service worker function nothing changed fix nt really fix made new firebase project code worked fix redux devtools make render mobile could right way", "d": "9/2018"}, {"body": "faced issue realize misconfigured webpack problem get error please double check network request bundle correct url case tried diffrent route request made instead case well please double check webpack publicpath option hope fix issue", "d": "9/2018"}, {"body": "charbelsako commenting service worker code wo nt change anything problem service worker registered browser causes problem however wo nt problem anymore stopped registering service workers properly register service workers probably devtools browser chrome application tab nt know browsers", "d": "9/2018"}, {"body": "sorry bother unregister service worker went back registering worker works", "d": "9/2018"}, {"body": "know chrome doable devtools open dev tools go application tab gt service worker unregister option", "d": "9/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "9/2018"}, {"body": "thanks gaearon fixed particular fix", "d": "9/2018"}, {"body": "gaearon plans backward compatibility maybe follow path react fiber adding warnings changes giving time large codebases update without losing new updates", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "regarding know wo nt get broad agreement whichever way go people really strong opinions one want share thinking hope helpful component api feel idiomatic common argument react matches javascript thus preferred think assertion subtly misunderstood like focus little react first foremost care using react component feel like idiomatic javascript means use hypothetical component expect props camelcase nt expect see prop names like component public api component props object kind like option bag generally expect options may always idiomatic dom dom consistent many places react aligns javascript ecosystem overwhelmingly uses dom gets thorny dom properties attributes js dom attributes properties attributes things usually see html properties things usually set js crucially dom apis exist setting properties setting attributes even always setting thing many cases nt matter cases maybe way one might think using react one abstraction react setting properties common misconception since react currently uses convention dom props means react setting dom properties wrong fact react currently using attributes almost props supports cases like causing issues discussed want revert cases actually great nt include list supported properties react bundle using attributes hood allowed major size reduction react point whether react uses properties attributes internally implementation detail nothing whether react dom element api using property names attribute names even names make sense still let use property names okay properties attributes implementation detail standardize using dom property names since specifically made javascript nt react api designed today well quite one props enumerated corresponds real dom object property ironically prop actual dom property name corresponding nt sure actually set react attribute point probably see neither clearcut consistent cases properties nt exist custom nonstandard attributes cases react could provide richer api vs currently nt cases react intentionally chooses deviate react vs dom property makes sense custom react components react components often expose complex event handlers like would inconsistent wrote nt camelcase wanted avoid component api explained react already nt consistent always using dom property name react nt even actually use properties internally rule thumb nt describe actual mechanics either many cases dom properties simply nt exist stick allowing attribute name property names let consistent use attribute names go using attribute names could plausible bump first consideration brought using react component feel like idiomatic javascript often components forward least props underlying dom element js renders would awkward custom accept props inconsistent capitalization forces consumer always remember certain prop actual dom prop part component contract even distinction fuzzy component may choose first pass certain prop actually start using extra logic put boundary dom props props think primary reason desirable props like domrelated props follow camelcase convention dom property names often end component apis want component apis consistently camelcase want make easy custom components like wrap forward without either translating attribute name point flow dom without introducing noncamelcase props custom component api also explains props like custom attributes reasonable exceptions even though could make richer apis rarely passed custom components typically coupled dom useful custom components instead become implementation detail something like richer camelcase api react properties already nt match dom properties dom property name convention nt work need something else could camelcase version attribute name seems like almost always already checks sounds radical consider already support something called dom property name dom property called dom property already deviating dom property names nt match camelcase javascript convention brings us finally vs part original justification making react setting dom properties name dom property however explained react nt use properties anymore except three four special case importantly react nt even consistently use dom property names rather uses names would look natural used javascript regardless internal naming inconsistency either dom attribute property names react cares keeping prop names custom components feel javascripty sense javascripty another argument early code like nt valid relevant nt write anymore either using toolchain like babel likely targeting react nt even support inconvenience left ca nt write think time argument strong enough react nt force use destructuring using specific variable name writing something like nt much effort typically people pass far often read many components contain one inner host elements end writing much often wanting destructure thus change would save keyboard typing would introduce another important point passing many levels great pattern necessary libraries application code often leads fragile components ones whose styles break time hundred different callsites appending different class causing cascade bugs clear valuable encourage destructuring first place think fine need write one line code read props use think writing component close dom thus makes sense take prop likely want forward props use rest syntax destructuring js valid function button color rest const buttonclass restclass button color return nt need modify could forwarded without even reading destructuring limitation might help encourage better component design finally ca nt support way already react yells warning reason support without warnings community split one use component npm accepts class prop remember forward even one component middle nt play along implements one prop class gets lost risk ending bottom disagreeing way react resolve conflict think would worse status quo want avoid summary react open sourced today seems like pros allowing closer conceptually people expect less typing commonly used prop outweigh downsides slightly typing intercept cases probably want spread operator anyway used see downsides inconsistent dom properties moot neither set dom properties anymore even strive consistent instead aiming attributebased camelcase api consuming side react components already almost consistent clearly convenient fact dom api designed today would probably let set property precisely restriction using assignment like lifted almost ten years ago remaining big downside migration cost assess carefully bunch changes anyway might able make one fix good thinking lightly take concerns consideration note might make sense react prop names nt match camelcased attribute names thinking", "d": "9/2018"}, {"body": "renatoagds plans backward compatibility maybe follow path react fiber adding warnings changes giving time large codebases update noted thousands components facebook keep us honest migration strategy ca nt afford rewrite product code except targeted fixes automated codemods definitely try make migration strategy smooth possible like always smooth wo nt able make change", "d": "9/2018"}, {"body": "classname class cool whichever decision definitely see exception changing class new users side benefit shorter lines code although would still need learn camelcase names", "d": "9/2018"}, {"body": "inconvenience left class ca nt write think time argument strong enough react nt force use gt destructuring writing nt much effort two possibly small things nt invalid javascript nt think quick test chrome nt like also article suggests valid could see change potentially small area frustration folks write components like nvm see update js const oneprop twoprop classname rest thisprops stuff oneprop twoprop classname return change would need something like js const oneprop twoprop rest thisprops stuff oneprop twoprop thispropsclassname return impossible work around change little bit keep mind writing reading components style update nevermind trick", "d": "9/2018"}, {"body": "remaining big downside migration cost assess carefully bunch changes anyway might able make one fix good thinking lightly take concerns consideration luckily easily mitigated one using cssinjs approach like aesthetic thanks amazing write", "d": "9/2018"}, {"body": "random tip regarding attribute names found excellent project great converting large svgs use react", "d": "9/2018"}, {"body": "jamesplease sorry mind blanked right edited", "d": "9/2018"}, {"body": "jamesplease right also comes frequently working json default value annoying", "d": "9/2018"}, {"body": "changing event system would really nice see something similar inferno linkevent function event handling using props functional components without create anonymous function render", "d": "9/2018"}, {"body": "huge change ecosystem numerous unmaintained components become incompatible nothing patch maybe wrapper like disables change components deeper tree provide gradual migration path", "d": "9/2018"}, {"body": "could see change potentially small area frustration folks write components like js const oneprop twoprop classname rest thisprops stuff oneprop twoprop classname return nt destructure js const oneprop twoprop rest thisprops return", "d": "9/2018"}, {"body": "gaearon whether react uses properties attributes internally implementation detail seems like problem honestly dom elements behave differently cases depending whether setting attributes properties react ca nt possibly know differences users elements know elements use explicit control properties attributes events would let authors break situation", "d": "9/2018"}, {"body": "justinfagnani specific things like us change mind filing separate issue api suggest sounds bit scope issue", "d": "9/2018"}, {"body": "sompylasar classname class huge change ecosystem numerous unmaintained components become incompatible nothing patch maybe wrapper like strictmode disables change components deeper tree provide gradual migration path agree still weighing pros cons nothing finalized practice problem unmaintained components new comes every react major release something changes majors defintion ca nt move forward otherwise nt luxury keeping legacy code bundle forever unlike eg server environments problem came moved separate package happen lifecycle renaming unmaintained packages get forked patched realize big time sink avoid one big major year folks ca nt afford help typically waiting months moving new major best strategy early adopters pave way revive abandoned packages move forward together much understand hesitation principally different breaking changes happened past might happen future always put lot effort emphasis automated scripts run convert codebase run packages well send prs fork last state", "d": "9/2018"}, {"body": "regardless decision one argument searchability many false positives give searching wanted find components use css classes code uses js class components yes search destructuring props jsx created object js heavy use props destructuring still used course need better contextaware astbased search tools code editors text regexp course type systems may help track object passing large population nt adopted", "d": "9/2018"}, {"body": "something using reserved word nt sit right even nt cause issues say sure example wo nt significant language x years", "d": "9/2018"}, {"body": "geordiep works today ca nt break tomorrow core principle javascript evolved reason many idiosyncrasies", "d": "9/2018"}, {"body": "gaearon fair enough big enough win say go", "d": "9/2018"}, {"body": "sompylasar usually search seems like would work", "d": "9/2018"}, {"body": "please get rid god sake dom developer usually something wrong access native dom methods biggest challenge onboarding people react abstraction jsx makes dom weird replacement html attributes everything transpiled reason worry reserved words point imo", "d": "9/2018"}, {"body": "sure adding anything existing discussion seems like better reason change saving beginner react learners slightly unintuitive name worthy everyone update projects amp behavior someone uses destructuring liberally remember new exception rule probably larger mental hiccup rare occasion write instead also would nt beginners still confused vast amount material blogsreposetc uses currently finally sompylasar said hurts searchability within codebase maybe tabs vs spaces type argument nt totally understand change necessary seems like large cost little gain unless part larger shift want model api time said sure using whatever ya decide", "d": "9/2018"}, {"body": "bit offtop kinda sad one far know idea make htmlcsssvg jsx transfomer order ease migrations react many trivial changes map html attrs react props jxub built html jsx converter part hackathon way back sure handles svg well though hackathon project make script would ajaxify plain html site using react part required build way create react component chunk html released html jsx part separate standalone page still care supporting possible attempt smooth existing browser differences stance taken many modern ui libraries gaearon examples modern ui libraries smooth browser differences one major reasons use library", "d": "9/2018"}, {"body": "conspiracy theory entire classname class news one bright controversial thing everybody immediately pay attention argue either attract attention rework project whole distract something bigger happening shadows give one thing later retracted rest accepted like following anecdote great theatrical artist tyshler creating sketches scenery corner drawing small green dog one admissions committee asked like everything dog artist sigh regret plastered true reasons behind change nt clear already skyrocketed popularity new upgrade project community buzz around react", "d": "9/2018"}, {"body": "would nice supporting passive event listeners within scope react fire important feature mobile", "d": "9/2018"}, {"body": "thanks hard work please reconsider react newbies nt prevent us learning loving react", "d": "9/2018"}, {"body": "remember using vue jsx already disagree classname changed react pioneer virtual dom represent dom self", "d": "9/2018"}, {"body": "attach events react root rather document gaearon mean testing environment wo nt append elements document able dispatch real browser events handlers associated called counterintuitive sure source many developers unfamiliar react internals get confused waste lot time writing tests incurring event simulation poor testing practices takes another note something specially interested possible removal given issues associated know course necessary changes truly needed anymore could scope cc kentcdodds", "d": "9/2018"}, {"body": "love direction big picture view react fire taking far look like great changes work towards", "d": "9/2018"}, {"body": "love announced changes sceptical change react nt force use destructuring using specific variable name writing something like code snippet nt much effort nt much effort write current experience expect way harder explain developers especially developers languages hand years used react company guess one two devs confused accepted reacts api setting class names within couple minutes personal opinion love destructing renaming syntax sometimes feels weird beginners different renaming imports looks quite similar combined things like default values one could use destructing would big exception code currently write company experience others may differ course view problem", "d": "9/2018"}, {"body": "great", "d": "9/2018"}, {"body": "also sceptical change one minor changes scheme things attracting massive chunk commenting discussion really worth spending much political capital change much good stuff announced stand making decision part justification writing something like nt much effort decision got massive upside change nt comparison everything else announced", "d": "9/2018"}, {"body": "major advance react fire", "d": "9/2018"}, {"body": "vs think remind jsx react since jsx dsl designed look like html best keep close html possible granted called dom api using jsx probably nt want deal dom api directly makes sense react api closely match dom api hope okpossible mapping transpilation would valuable make jsx syntax clean superset html", "d": "9/2018"}, {"body": "add said current state things react inconsistent api camelcase proposed state things react inconsistent api camelcase perceived benefits react open sourced today seems like pros allowing class closer conceptually people expect less typing commonly used prop outweigh downsides slightly typing intercept cases probably want spread operator anyway actual downsides entire ecosystem depends stops working huge upgrade effort entire vast body books tutorials examples code posts articles becomes ever slightly invalid valid js remaining additional typing every possible usecase plain js becomes invalid react api remains inconsistent breaks assumptions etc product manager immediate reaction change would wat", "d": "9/2018"}, {"body": "gaearon might considered already please tag prs react fire similar keyword issues usually tagged correctly prs sometimes nt helps potential contributors coming experience trying read git history looking react fiber react reconciler related commits whole fiber development helps us trying figure whats happening see contribute ways", "d": "9/2018"}, {"body": "also think renaming cause big migration effort problems new devs attribute visible heavily used literally break libraries relying react enough tutorials broken new device copy amp pasting article wondering working says valid prop senior help gained anything still explain work like would expect real explaining use define classes component takes minute easily understandable explaining changed every developer takes much longer results frustration efforts required single word change anything way react behaves boost development reactdom increase productivity devs working longer week react break everything please think really worth", "d": "9/2018"}, {"body": "using babelpluginreacthtmlattrs years serving well nt think renaming good idea better achieved plugin like one mentioned", "d": "9/2018"}, {"body": "babel plugin handle whole v v situation", "d": "9/2018"}, {"body": "hope possible support html attributes asis maintaining backward compatibility naming decisions already made fact babel plugins already conversion perhaps evidence possible support core jsx transpiler making official spec would make things much easier reliable everyone aware react internals ca nt say much real feasibility expressing think terms userfriendliness", "d": "9/2018"}, {"body": "please reconsider vs said gain almost inexistant real downsides one us using haxe language write react applications would breaking change simply prevent us writing react application reserved keyword programming languages could simply manipulate prop anymore making react application near impossible good luck creating real one without manipulating classes goes vs sadly one really ugly grateful exists", "d": "9/2018"}, {"body": "oh way searchability imagine google react class get mixed signals react class components react class attribute google react classname get outdated documentation people mentioned huge amount upgrade work geterated change besides code upgrades goal project generate work community noise mixed signals internet hope yes web javascript ecosystem struggles maintain backcompat stupid mistakes past strive backcompat allowed grow scale without major fragmentation understand progress without change adopted early fb motto breaking things move fast also plan reassemble back advance persistent change really needed tell true reason change ca nt hard learn thing sounds shallow mighty react core team definitely something mind", "d": "9/2018"}, {"body": "sompylasar usually search classname classname seems like would work class also good luck directly github", "d": "9/2018"}, {"body": "read comments fine changes sure main reason work plans jsx shortcut notation objects everything else seems nice improvements waiting final decision thanks amazing efforts folks", "d": "9/2018"}, {"body": "one comments mentioned works today work tomorrow keep mind ask maintain ui library called rmwc targets versions react back able maintain unified api surface changing classname class onchange oninput overhauling event system make nearly impossible continue possibility compat layer translate stuff hood write whatever version react fire continue run lower runtime expect weird code going get weirder", "d": "9/2018"}, {"body": "really change please also change since originally invalid destructuring", "d": "9/2018"}, {"body": "react api normalises lot attribute names make consistent api surely perfect fit one extra idiomatic learning top camelcase idioms plus fact maps dom property name like jsx attributes surely fine comparison destructure special case every single time use props object feel like heard lot vocal opinions status quo class everyone happy using stayed quiet line old adage people much likely give negative reviews positive ones personally think tiny learning curve top many others far better special casing prop every time appears think like see bit democracy around think specific change done committee essentially pseudo committee got consider change happy losing side affects least people day day ps everything else looks great btw especially event stuff", "d": "9/2018"}, {"body": "waiting new updtates", "d": "9/2018"}, {"body": "gaearon worth considering example jsx const oneprop twoprop rest thisprops return contains bug would nt work expect might straightforward nt destructure", "d": "9/2018"}, {"body": "one nt concerned class classname ask problems react would never even cross mind still updates freebies love freebies", "d": "9/2018"}, {"body": "one nt concerned class classname worried class subtle bugs going funnier still fine changes nonetheless", "d": "9/2018"}, {"body": "would nice supporting passive event listeners within scope react fire important feature mobile agree definitely scope work", "d": "9/2018"}, {"body": "hey gaearon first thanks considered survey order gather information people using react apis used confusing react far favourite frontend development stack find footguns learning first using nt want lay people taught found confusing personally found useful projects involved personally node bluebird etc terms personally like see core love better simpler nonglobal dependency injection support better consistent event handling already discussing", "d": "9/2018"}, {"body": "considered survey order gather information people using react gt apis used confusing think reactnative cannyio nt realize react nt", "d": "9/2018"}, {"body": "maintain ui library called rmwc targets versions react back able maintain unified api surface changing classname class onchange oninput overhauling event system make nearly impossible continue possibility compat layer translate stuff hood write whatever version react fire continue run lower runtime empathize concerns also wrote fair share libraries however since many tradeoffs changing anything tend err side putting effort helping people upgrade rather helping people support multiple versions mean release polyfill library authors lifecycle changes optimize use case suggestion cut new major cut new major something incompatible people keep using old major versions library want know effort maintain especially keep developing questionable whether single hacky codebase better two diverged consistent codebases", "d": "9/2018"}, {"body": "jamesmfriedman possible complicated update automatically codemod new api part build process transform codemod old api ship bundles require dynamically based react version work done webpack plugin npm install script example nt hard assume kind thing released used libraries like compile time compatibility layer specifically libraries", "d": "9/2018"}, {"body": "support dropping htmlfor think bridge release supports classname class would good idea would allow developers use older third party react code current first party code future facing third party updates easy dropping bridge package fully optimized react dom", "d": "9/2018"}, {"body": "react api remains inconsistent breaks assumptions htmlfor etc think missed last sentence said also change think fully consistent camel cased attribute names except one two rare svg attributes change", "d": "9/2018"}, {"body": "babel plugin handle whole class v classname v htmlfor situation see quite mentions like clarify babel plugin great place conversion work cases like also make sense pass get props component plugin targeted platform elements would odd replacing changes prop compiles using babel plugin obscures semantics code writing leads confusion view worse solution either allowing fun fact old version jsx compiler worked behavior removed confusing", "d": "9/2018"}, {"body": "awesome changes", "d": "9/2018"}, {"body": "amazing thank contributors working bring exciting updates idea gt big scandal personally gotten used reduced bundle size amp upgraded event system sound really promising super stoked", "d": "9/2018"}, {"body": "really looking forward separating polyfills event system separate packages whether classname gt class radical know react wide impact lead unforeseen many systems", "d": "9/2018"}, {"body": "dropping third react dom would nice great using react web app development", "d": "9/2018"}, {"body": "would also nice namespace react specific props like eg discussed", "d": "9/2018"}, {"body": "elado may something want future think scope affects non domspecific api", "d": "9/2018"}, {"body": "exciting especially reduction bundle size always welcomed worry folks facebook underestimating inertia pain fragmentation breaking api changes cause ecosystem community true large number components fb worry advantage got assume minimal dependency external open source react libraries since likely built components internally folks uses lot open source libraries really took big deal effort waiting frustration get proptypes many libraries speak real experience upgrading large react code base moving fast breaking things might applicable folks want build stable business limited resources really enjoy react api simple personally took time learn adjust syntax thus really urge maintainer evaluate proscons ecosystem wide breaking changes carefully think pragmatically change warrant forcing whole ecosystem rewrite really appreciate effort building maintaining upgrading react passion engineers behind", "d": "9/2018"}, {"body": "future updates", "d": "9/2018"}, {"body": "nt think rare situation class attribute defined outside jsxobject declaration situations use different naming thing itroducing inconsistency increasing code complexity cognitive load suggested change wo nt remove attributeprop name mismatch codebases exist somewhere due syntax limitations working native dom good thing standardized well established point workaround naming problem currently used consistently everywhere always refering thing even working native dom actually react may literally place forced use refer class attribute seemed quite unnecessary bit confusing start turned quite practical later relatively easy get used would also get rid extra object seems really unnecessary may worth problems related migration perhaps unrelated issue altogether changes generate lot less emotions much interesting important thank fb team effort", "d": "9/2018"}, {"body": "breaking changes longer take upgrade actual user applications personally already quite long way behind latest greatest react saddens previous versions react broken stuff requires libraries depend upgrade introduces delay ideally like scenario downstream react library rewrites code new version introducing bug use case react adds cool new feature bundle reduction old library version remains usable new react yay use new feature right react launches wait library fix bug practice like library rewrites code introducing bug react releases new breaking change old library longer works new library eventually updates bug may still present stuck outdated react rather quote ken wheeler new hotness long time feel sad shipping code perspective every major breaking upgrade becomes huge piece annoying technical debt involves updating dependencies retesting everything hunting new bugs see workaround unless critical vulnerability truly impractical something bar high gets deprioritised unfortunately despite shed paradigm despite trying core web library react still churning version numbers meaning lots time spent running stand still basically saying please please try plan api allows future big changes breaking also thing sad deprecating browser eol last release days ago think react team find pushes work facebook team external internal library teams mitigate instead", "d": "9/2018"}, {"body": "urugator would also get rid extra object html dangerouslysetinnerhtml seems really unnecessary intentionally designed explicit difficult use accidentally removed unsanitized data accidentally passed dangerouslysetinnerhtml philipwhiuk basically saying please please try plan api allows future big changes breaking breaking changes necessary improve technology react responsibly infrequent batches breaking changes without breaking changes like removing componentwillreceieveprops would nt great things like react suspense software community would difficult maintain old apis staying around forever upgrade one major release time fine also thing sad deprecating browser eol last release days ago nobody deprecating ie react current version actually requires polyfills features ie suggested changes would likely effect ie development", "d": "9/2018"}, {"body": "would also get rid extra object html dangerouslysetinnerhtml seems really unnecessary urugator worth internally facebook common usage insert serverrendered html react component tree use case construct objects serverside lint rules clientside serverside methods serialize xhp objects properties ensures nt introduce security holes anywhere xhp similar jsx actually main inspiration jsx also xss protection essentially objects mark string html know sanitized somewhere safe directly insert dom raw string harder handle tell sanitized vs someone accidentally returned raw user input thus introduced xss hole yes intentionally difficult use nt many use cases apps use cases reasonably contained generally nt construct object directly react component rather function returns see docs use function", "d": "9/2018"}, {"body": "worry folks facebook underestimating inertia pain fragmentation breaking api changes cause ecosystem community thanks bringing totally understand coming like point majority people react team using react outside facebook getting hired often large applications think helps us empathize kinds issues affect open source users used react two years remember fragmentation caused eg parentowner context switch well key good migration strategy applies changes true large number components fb worry advantage got assume minimal dependency external open source react libraries since likely built components internally historically true product side development however since yarn created integrated web repository seen increasing number thirdparty components used internal tool pages much larger surface area facebook consumer products need strategy gradual migration third party packages unlike many companies use version react across whole codebase also unique challenges eg ca nt wait upgrading products certainly add pressure us good migration strategy serve stress test folks uses lot open source libraries really took big deal effort waiting frustration get proptypes many libraries speak real experience upgrading large react code base moving fast breaking things might applicable folks want build stable business limited resources case curious still code like codebase ca nt afford migrate clean slate fully either people starting react today well modern parts codebase nt carry weight kind think want choose better defaults new react users good migration story everyone else even parts might hacky might communicated clear enough apologize large change need sophisticated wellexecuted migration strategy takes account thirdparty libraries take long time update different versions might need coexist etc example plan nt change overnight want want smart roll possibly grace period allow helper make easier gradually phasing old name specific strategy yet clear change infeasible without good strategy us something take seriously", "d": "9/2018"}, {"body": "also thing sad deprecating browser eol last release days ago think react team find pushes work facebook team external internal library teams mitigate instead nt understand referring nt say anywhere getting deprecated post says might require polyfills browsers like react already requires polyfills saying want break still many users need include polyfills want work seems entirely fair also nt get push work teams facebook break something us fix care much migration strategies typically execute rest comment absolutely nt make breaking changes sake fact trying hard avoid breaking changes many parts react complicated hard maintain keep sole reason trying support legacy apis even explicitly marked unstable however point weight issues accumulates need clean slate move forward fix issues op post exactly kinds problems would nt worth breaking change alone combined think worth effort", "d": "9/2018"}, {"body": "get people negative upgrade dependencies", "d": "9/2018"}, {"body": "keyword issue vs vs something jsx compiler handle override reserved words would really concerned changes big enough search results give obsolete answers like pain angular introduced googling angular angularjs etc welcome changes", "d": "9/2018"}, {"body": "gaearon said may need drop compatibility older browsers drop compatibility part problem following polyfill part going back dark ages worry regarding process nt sort issue rfc process designed", "d": "9/2018"}, {"body": "drop compatibility part problem following polyfill part going back dark ages worry talking earlier specifically noted want keep supporting think represents traffic much cutoff consider old regarding process nt sort issue rfc process designed post rfcs things fleshed lot requires exploration experimentation actual testing determine migration strategies could use nt enough details right even begin thinking rfcs include comprehensive migration strategy", "d": "9/2018"}, {"body": "ok thanks clarification", "d": "9/2018"}, {"body": "gaearon plausible get rid synthetic events altogether would work pointing element event listener attached native case always means react root react switches react setting properties point whether react uses properties attributes internally implementation detail implementation detail influence happens dom unless referred properties somehow reflected attributes back like feel confusion around treatment related fact whether react uses property attribute considered implementation detail angular background started using react biggest gotcha angular separation attributes properties event handlers clear directly syntax confused whether props dom elements set react properties attributes", "d": "9/2018"}, {"body": "would work eventcurrenttarget pointing element event listener attached native case always means document react root react switches nt know yet see entirely possible things wo nt work come differently plan rough outline things plan look unifying vision implementation detail influence happens dom unless referred properties somehow reflected attributes back like classclassname majority observable difference user perspective one use think reflected although maybe wrong angular background started using react biggest gotcha angular separation attributes properties event handlers clear directly syntax confused whether props dom elements set react properties attributes appreciate perspective however practice difference often irrelevant dom elements debatable learning ins outs one use always think actually valuable everyday product development think degree people confuse speaks fact actually much relevant cases becomes much relevant custom elements even supporting equally confusing pick one use debated elsewhere like avoid jumping debate proposals folks like robdodson look", "d": "9/2018"}, {"body": "without mentioned policies nt think mentioned anywhere else extra object wrapper nt make safer way believe user quite sufficiently warned dangerous usage via point user si forced check docs consider implications make decision need wrap possibly unsanitized string objectfunction whatever wo nt make reconsider sanitize wrapped value would work way perhaps nt complicated enought would make even safer many times state something dangerous order make safe insight provided understand reasoning think currently nt apply anyone outside facebook nt clue represents sanitized html rule always thought another obstruction api thank taking time sheding light makes sense", "d": "9/2018"}, {"body": "making complex preventing nonsanitized data used accidentally", "d": "9/2018"}, {"body": "love way react opinionated community kudos guys hear make best", "d": "9/2018"}, {"body": "love everybody thinks changes coming came react last versions breaking people clearly nt experience angular gt gt times love changes personally nt mind destructuring could become hassle would love see guys gon na come", "d": "9/2018"}, {"body": "like ask keep discussion topic whether find tainting dangerous html helpful interesting related issue", "d": "9/2018"}, {"body": "love react", "d": "9/2018"}, {"body": "perfect chance help developers new react feel welcome glad happening", "d": "9/2018"}, {"body": "letting people use class negative effects except work destructuring migration cost gaearon throwing two negatives seem big bigger current negative onetime small cost learning class gt classname vs always avoiding destructuring ecosystemlevel migration cost", "d": "9/2018"}, {"body": "react heart", "d": "9/2018"}, {"body": "echoing natew gaearon throwing two negatives seem big bigger current negative onetime small cost learning class gt classname vs always avoiding destructuring ecosystemlevel migration cost anyway motivation behind changing far glean comment boils two arguments please correct wrong closer conceptually people expect ok adding tiniest hurdles learning use simplest part learning react little quirk downsides indeed actually solves problem four characters way less cognitive overhead destructuring alternatives provided imagine teaching someone style first react component noob head would exploded think interacting api people expect api provide solutions classname builtin solution class builtin problem less typing bruh four characters besides even destructure far less frequently currently use way typing typed fewer characters times added characters times desctructure silly another compelling reason change missed motivation kind concern conformance dom attributesproperties seems like far academic argument people aware implementation details nt think need released today react would allow instead changing classname think irrelevant react open sourced today werewould open sourced year future different set decisions might made time sometimes better stick consistency try iron every wrinkle react using class beginning would gotten used destructuring class reassigning classname whomever came around pr changing class classname would hailed savior lastly want say expect get worked apologize anything came across rude insulting accusatory thankful work react knowledge drop twitter used tweets defend answers given interviews pray danchurch change mind", "d": "9/2018"}, {"body": "happy react continuously upgradedas developer using react nt want see overtaken vue process classname class must painful", "d": "9/2018"}, {"body": "renaming copypaste sake nt clear motivation exists dom reserved prop names comes nowhere like feel like prioritized comes renaming probably less pervasive change serve test well", "d": "9/2018"}, {"body": "sonhanguyen htmlfor official web api name well", "d": "9/2018"}, {"body": "instead wrapping array wrap", "d": "9/2018"}, {"body": "also please let keep thread topic ask questions filing separate issue like", "d": "9/2018"}, {"body": "like draw attention patchpackage package makes rather easy patch dependencies eg make stop using unsupported react apis admittedly useful application code library code think help address philipwhiuk concerns", "d": "9/2018"}, {"body": "looking forward", "d": "9/2018"}, {"body": "migrate onchange oninput polyfill uncontrolled components words curious onchange event used close native event used future", "d": "9/2018"}, {"body": "muyunyun based wording nt plan keeping current behavior onchange would nt make much sense react like modern libs wo nt browser compatibility layer current onchange emulates onput cases nt make sense considering change event already exists dom nt semantics", "d": "9/2018"}, {"body": "jxub bit offtop kinda sad one far know idea make htmlcsssvg jsx transfomer order ease migrations react many trivial changes map html attrs react props many manhours wasted perfoming mostly findandreplace nt know editors intellij idea webstorm phpstorm etc transformation paste html code js", "d": "9/2018"}, {"body": "bit offtop kinda sad one far know idea make htmlcsssvg jsx transfomer order ease migrations react many trivial changes map html attrs react props many manhours wasted perfoming mostly findandreplace actually exists pretty old entirely correct revive effort want help please far nobody offered help followed", "d": "9/2018"}, {"body": "actually exists pretty old entirely correct used ton times common use outsourcing certain components people know htmlcss javascript giving feedback useful tool people use practice also converters online problem approach oneway migrate react problem nt special react though", "d": "9/2018"}, {"body": "hope make things much easier", "d": "9/2018"}, {"body": "problem approach oneway migrate react problem nt special react though even easier way around run", "d": "9/2018"}, {"body": "patiently waiting release", "d": "9/2018"}, {"body": "gaearon even easier way around run reactdomserverrendertostring ok context problem discussed want people write htmlcss nt know javascript well enough work js code able work markupstylelayout components one way right develop htmlcss use htmltojsx works pretty well problem maintain every markupstylelayout change react call indeed get static html html would missing actual component code feasible give ui people use output rewrite logic things like reactsketchapp nice possible take problem hope generic approach letting using regular htmlcss example form metadata keeping react ids elements totally get nt scope reactdom core definitely domain interesting problem nt high priority mostly wanted explain htmltojsx useful us even outside context migration", "d": "9/2018"}, {"body": "want people write htmlcss nt know javascript well enough work js code able work markupstylelayout components big problem hard would teach little jsx changes need reviewed reactsavvy engineer anyway sorry gets offtopic believe htmlcss enough nowadays", "d": "9/2018"}, {"body": "gaearon feel free hide gets noisy reply already slight ot comment big problem hard would teach little jsx changes need reviewed reactsavvy engineer anyway well would require following work contractors familiar current react stack far harder find people learn styledcomponents install node npm stack react webpack etc everything else required run project ui peoples computer keep date teach basic programming javascript learning work devtools console errors etc teach react syntax stuff like means etc work contractors freelancers willing work way rather producing htmlcss usually also makes things expensive like mentioned things like reactskeptchapp useful way make approachable easy ui people still requires learn lot totally get asking sure common problem suspect regardless nt think scope future reactdom core", "d": "9/2018"}, {"body": "quite topic let continue discussion twitter somewhere else", "d": "9/2018"}, {"body": "behavior see tool used behavior tool encourages gary bernhardt way react used part react api results high number pitfalls result discussions like everyone confused frustrated using reserved keyword bad javascript html react going back changes made remember correctly library would behave differently accepting attribute passed native html elements rendered vdom remember quite clearly codebase plagued bugs behavior implementing clearly bad pattern got ta say im quite disappointed dan suggesting keep spreading terrible code across codebases first guarantees contents first time native html elements almost always whats expected pass wrong props however time considered safe propagate parent props child components reality terribly lazy js const child props gt sometimes nt even know rendering issue becomes even harder deal also extremely hard typecheck kind components using type systems would mean components required implement number random interfaces share deep deep rabbit hole go rewrite react made fix would expect designers behind realize harm bad patterns cause codebase instead doubling bad decisions got ta remember jsx built top javascript using javascript idiosyncrasies excuses deliberately conflict language use keywords bad first step towards fixing api would suggest instead starting war language would move away entirely", "d": "9/2018"}, {"body": "gaearon long time ps sorry tl dr ahead anyway wanted give insight learned adventures made bare minimal react derivative use performancefeature critical applications initially fun side experiment seeing performance improvements beyond realworld cases initial renderingupdatingdeleting including many others benefits without using pooled event handler iirc large portion comes simply library bypassing reactprops logic simply feeding attributes straight setattribute styles straight stylesetproperty listeners straight addeventlistener basic dom element interface looks like attributes style listeners classname verbose interface small trivial implement extremely fast probably extreme served well something well dropping css entirely styles inline much much faster would expect comes lot nice practical benefits also sidesteps cost browser initial cssparsing surprisingly expensive selector matching recoups overhead easily achieve stable fps way beyond underpowered laptop even complex hierarchies without tree pruning imagine really useful maybe something interesting anyway main gripe htmlreact react user components expose interface layoutingpositioning probably extent also events without resorting css put simply create buttoncomponent use default positioned integrated layout without implementing purposespecial logic inside wrapping dummy element positioned exposing styleprop merged styles used buttoncomponent root element none perfect merging styles asis dangerous easy put styles nt essentially problem component boundaries subset available properties public positioninglayouting internal visual styling another thing separation components contentchildren eg dom components take list children instead accepts content instance content instance implements reconciliation logic rendering children means different implementations different purposes obvious usecases mostly static hierarchies vs dynamically generated children static hierarchies make majority implemented using faster simpler logic whereas dynamically generated children may configurable strategies also opens possibility content components could used intelligently managing eg flexbox layouts without unnecessary indirection related something think react gets wrong children nt arrived specific conclusion solution yet strongly believe fundamental problem react bubble props root arbitrary point hierarchy without rerendering every single element two points effectively pruning often problematic performance mostly good enough added complexity managing react might make worth solving experiments far able reduce full root update costs mere fractions small amounts trivial code intuition says compatible philosophy react simplistic children model something mostly definitely big feature library basically provides bare minimal base dom element general purpose idea trivially extendreplace implement lowlevel specific behaviors developing large project specific requirementscircumstances cheaply without resorting hacks eg heavily touchoriented want special stylehandling etc also means different versions compatible run sidebyside long abi change extremely rare simple fix also means quite opinionated dom element interface without allencompassing try solve everyone problem anyway perhaps mostly rambling probably conveying concepts well maybe something interesting information someone went opposite direction probably relevant simply targeting simplicity knows also forget might interested function specifically optimized exceedingly fast comparing prevnext props reactlike scenarios responsible quite significant realworld performance gains", "d": "9/2018"}, {"body": "imho drop class idea jsx eventually die", "d": "9/2018"}, {"body": "thoughts adding support nonelement based domwindow events react dom possible removal synthetic events suspect still form event collectingupdatingbatching keypress resize window scroll events common scenarios come mind possibly able support mostall list would beneficial behind abstraction happens also discussed oldest open issue", "d": "9/2018"}, {"body": "gaearon practical effect become change cause quite bit pain benefits entirely academic seen communities similar things eg consider first released decade ago still arguing sizeable portion community made transition never please reconsider", "d": "9/2018"}, {"body": "kans similar complexity original function", "d": "9/2018"}, {"body": "liked classname class keyword js nt think big deal either way prefer styling something like glamorous nt something affects maybe used classname couple dozen times past years almost never though one thought occurred favor people actually make use classname using css expect htmlcss model overwhelmingly main purpose prop really linking css code right call class like htmlcss user expects imo outside design system code really idiomatic react development would nt typically using classname class much anyway need use classes css mostly isolated small ui components pretty much anything used application layer higher level like say guess wonder renaming makes easier kind people use prop anyway easier get react development switch contexts get angry etc rename", "d": "9/2018"}, {"body": "reduce bundle size please", "d": "9/2018"}, {"body": "since big breaking update perhaps could fix react lifecycle naming ie gt etc naming beyond silly", "d": "9/2018"}, {"body": "alexgalays since big breaking update perhaps could fix react lifecycle naming ie shouldcomponentupdate gt shouldupdate etc naming beyond silly longer lifecycle hook names less ambiguous searched shorter names generic depend context located may coincidentally match something else large codebase false positive match", "d": "9/2018"}, {"body": "lifecycle methods part react core issue solely reactdom", "d": "9/2018"}, {"body": "ljharb oops indeed sompylasar sorry simply good reason pun intended reasonreact fixed method names nt prefix modules package names well find fine anyway going stop talking since reactcore scope issue", "d": "9/2018"}, {"body": "would love see changes hope implemented customelements interop mind", "d": "9/2018"}, {"body": "wonder worth moving discussions separate threads forum since github issues nt threaded like forum posts makes tricky discuss multiple different things issue", "d": "9/2018"}, {"body": "changed seems interesting", "d": "9/2018"}, {"body": "watch react projects see coming sure totally love able copy paste html change time see issues reserved keyword could bring point would prefer stick unless strong engineering concern personal preference pragmatic opinion", "d": "9/2018"}, {"body": "understand additional friction able destruct identifier feel like many people thread overestimate number times need receive class name prop passing react component dom element means either making quite small building blocks without providing new abstractions component expose implementation details first case eg component probably would want follow gaearon example forward rest props dom element well second case maybe additional friction would force avoid thing come better solution humble experience copy paste html jsx replace times remember making component receives", "d": "9/2018"}, {"body": "spreading props html anti pattern someone future includes extra prop happens match html attribute unexpectedly change behaviour ie adds new attribute hosed", "d": "9/2018"}, {"body": "philipwhiuk spread props use behavior problems", "d": "9/2018"}, {"body": "spread props use behavior problems really add new option component api option stops passed underlying dom node someone may depend exact attribute set element break person spreading unused props anything underneath means addition component api breaking change", "d": "9/2018"}, {"body": "btw used random example deconstruct value nt get cut detail many yes deconstruct almost every value instead using dot notation nonreasons avoiding type extra text making emphasis situation go sideways focusing spreading props whichever another side topic could talk little bit pragmatic would talk technical implications instead personal preferences nt see anyone saying anything technical implications another thing need pay attention making core contributors focus something matter personal preferences prove wrong want think pragmatically time effort money company limited better community understand better things focus attention anyone core team expend hour something prefer used next big thing react refactoring code change pragmatic opinion", "d": "9/2018"}, {"body": "speaking polyfills nt think react try detect whether user specified good polyfills eg code react nt held responsible random mistakes one make programming project", "d": "9/2018"}, {"body": "alexgalays react relies using map implementation correct semantics users using noncompliant polyfill app may break unexpected confusing ways helpful warn ahead time case done development build well overhead production", "d": "9/2018"}, {"body": "nice", "d": "9/2018"}, {"body": "hello gaearon would interested working thanks", "d": "9/2018"}, {"body": "maybe really cool feature", "d": "9/2018"}, {"body": "fixed master try rebasing branch nhunzaker", "d": "9/2018"}, {"body": "yep thanks", "d": "9/2018"}, {"body": "nhunzaker problem react nt allow distinguish empty inputs type number nonempty invalid ones often needed eg implement material designstyle floating labels descend input empty see eg assume cases empty string modifying steps scenario follows enter input callback fires remove making input empty callback fires enter e callback nt fire implement material ui inputs need check input field wo nt chance actually see could fired input value changes also field changes seems anything else valid input eg value respected field zeroed note ie nt support ie also nt always clear nonnumber values number input example according cleared ie problem might solvable though", "d": "9/2018"}, {"body": "mgol would resolve", "d": "9/2018"}, {"body": "gaearon understand correctly line allowed overfire many events even nothing changed suggests solve issue browser fires event change even nt change property example type empty nt know difference polyfilled nonpolyfilled relevant particular issue affects controlled uncontrolled inputs", "d": "9/2018"}, {"body": "mgol issue controlled uncontrolled component", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "tentatively reopening future consideration", "d": "9/2018"}, {"body": "hi update issue", "d": "9/2018"}, {"body": "hi update issue plan start reactjs contributions writing unit tests improve test coverage issue blocking", "d": "9/2018"}, {"body": "trivikr feel free investigate like nt currently priority us unlikely anyone else time look near future", "d": "9/2018"}, {"body": "according quirks mode safari ios bubbles mouse events target element ancestors including explicit event handler set mouse events event handler may empty function react attaching listeners document would explain problem", "d": "9/2018"}, {"body": "hmm never mind read correct first time yeah intentional regardless apple decided engineers typically expect handlers fire browser react attaches empty handler every target even though delegates real handler like workaround quirksmode article hope helps", "d": "9/2018"}, {"body": "react attaches empty handler every onclick target even though delegates real handler like workaround quirksmode article ah ok explains bug nt present onclick bug present mouse events etc would consider adding empty handlers mouse events click", "d": "9/2018"}, {"body": "think reasonable expect click work regardless device common idiom whereas mousedown mouseup explicitly refers mouse", "d": "9/2018"}, {"body": "created event handler id event handler directly printing using console", "d": "9/2018"}, {"body": "ok probably best pretend nt exist unless allowed give hint prepare code ready mysterious exciting releasing new iphone thank", "d": "9/2018"}, {"body": "sorry disappeared minute got distracted seem uncovered nt quite get selenium works found app working testing using synchronous animations sort material design library things like clicking buttons opening menus resulting several hundred millisecond synchronous animations confirmed devtools indeed synchronous indeed blocking entire time however another command command appears execute use various kinds waits course curious thing found also use execute javascript elements animation javascript code execute return stuff send query see animation dom element present good times animation sure selenium managing execute javascript within browser scope browser busy performing synchronous blocking operation certainly nt react problem hopefully react asynchronous operations become available also tooling place tell react done work sure guys covered thanks great work", "d": "9/2018"}, {"body": "usually nt need wait animation finish firing button click even suppose wait resulting change eg new section appeared text shows stuff disappears screen based button intent need", "d": "9/2018"}, {"body": "instead using use", "d": "9/2018"}, {"body": "still working could take form", "d": "9/2018"}, {"body": "tweaked ones", "d": "9/2018"}, {"body": "offscreen api work fragments like", "d": "9/2018"}, {"body": "trysound iirc react nt support attribute fragment except one two special nt remember", "d": "9/2018"}, {"body": "nesmalltown know supports prop asking quite useful feature example windowing", "d": "9/2018"}, {"body": "issue still reproducing ie attached gif file couple comments addition ie select usable mouse closing onmouseup event immediately way move mouse another item hold mouse button without releasing looks like different order events chrome remove state change select become usable ie console see following order chrome onchange onmouseup onmouseup onchange", "d": "9/2018"}, {"body": "gaearon correct current state client side work done support server side rendering edit found answer anyone else eagerly looking using suspense ssr universal apps found comment dan lets us know client side however comment also points talks possible implications ssr", "d": "9/2018"}, {"body": "actually starting work related ssr case soon", "d": "9/2018"}, {"body": "imagine scenario async react app running lowend mobile device external ad loading using cpu user clicks link router triggers new render react async mode waits chromesafari gives permission use cpu ad keeps loading seconds user thinks app working problem could avoided using technique discussed suspense showing spinner seconds example scenario considered work slow async renders", "d": "9/2018"}, {"body": "luisherranz two mechanisms prevent react deadline associated every update updates clicks interactions like flush within unless explicitly opt longer deadline eg nonessential updates react synchronously force flush something hogging thread react nt actually use anymore indeed browsers nt aggressive enough scheduling exact scheduling approach might also change time definitely something care", "d": "9/2018"}, {"body": "many thanks quick answer dan react deadline associated every update awesome already api place could test react nt actually use requestidlecallback anymore indeed browsers nt aggressive enough scheduling experimented well sometimes crowded app external ads embeds twitter youtube may take several seconds called render finished btw us another use case related first answer trying use lazyloads two offsets first one triggers async render second one triggers sync render async nt finished something like user scrolls heavy element example next post blog first offet triggers async render next post user keeps scrolling next post second offset triggers async post finished componentdidmount called nothing happens triggers sync render whole post instead time like control flush second trigger make sense could possible", "d": "9/2018"}, {"body": "already api place could test sure mean master async mode officially available npm releases expiration time assigned automatically every update events like clicks prod mode ca nt set although could opt deferred longer update want special unstable api instead time like control flush second trigger make sense could possible yeah possible described mechanism like", "d": "9/2018"}, {"body": "sure mean master async mode officially available npm releases yes using npm package please start releasing alphabeta versions changes npm yeah possible described mechanism like oliviertassinarireactswipeableviews comment brilliant much better current implementation using ca nt wait start using guys amazing job", "d": "9/2018"}, {"body": "luisherranz careful things unstable may bugs pretty inefficient eg crucial optimization resuming implemented yet removing favor new module", "d": "9/2018"}, {"body": "yep using small portion app testing intensively far good", "d": "9/2018"}, {"body": "may offtopic called times per second chrome core linux machine really useful ui work called often specific task name suggests", "d": "9/2018"}, {"body": "stopped using reason", "d": "9/2018"}, {"body": "yall using instead", "d": "9/2018"}, {"body": "tejasq", "d": "9/2018"}, {"body": "ah course silly wondering browser api scheduler module uses hood instead presented question clearly", "d": "9/2018"}, {"body": "oh wow found nextlevel cool", "d": "9/2018"}, {"body": "gaearon could ask one last thing answer top makes seem like libs break us react since code must buggy already could please amend going warn users upgrade react going link issue new behaviour im totally fine definitively changing react functions component assumes setstate going gdsfp going break safeguarding cost major churn warning would fine users come back say dan abramov said fault", "d": "9/2018"}, {"body": "updated tldr change broke code moved code already buggy subtle ways change react made bugs product code occur often fix consider making existing bugs code reproduce reliably breaking change coming issue thirdparty library works nt work hitting react bug issue complaint bug getting fixed however think fixing right choice recommend everyone upgrade react later think clearer", "d": "9/2018"}, {"body": "nice thanks", "d": "9/2018"}, {"body": "going lock thread since super large everyone gets notified new comments somebody concerns please file new issue happy discuss", "d": "9/2018"}, {"body": "similarly called twice props dispatching loading action triggers api fetching action dispatching via something like saga makes development pretty confusing might see flashes ui changes component enters loading state multiple times sure helpful day day development guess downside relying side effects saga", "d": "9/2018"}, {"body": "faced issue progress may workaround call without triggering", "d": "9/2018"}, {"body": "according would try tags placed return statement", "d": "9/2018"}, {"body": "bad idea call sideeffects works", "d": "9/2018"}, {"body": "kayis bad idea best solution offer dead sadly nt like class cause transform babel warning many years mdn warning changing prototype object nature modern javascript engines optimize property accesses slow operation every browser javascript engine effects performance altering inheritance subtle farflung limited simply time spent objectsetprototypeof statement may extend code access object whose prototype altered care performance avoid setting prototype object instead create new object desired prototype using objectcreate", "d": "9/2018"}, {"body": "would like fix good first issue", "d": "9/2018"}, {"body": "jacksongabbard use desktop application feature makes sense used mouse component behaved differently firefox used within another component attached outer think component robust matter used prevent problems like const onmousedown event gt eventstoppropagation const onmouseup event gt eventstoppropagation", "d": "9/2018"}, {"body": "returning empty object trigger rerender", "d": "9/2018"}, {"body": "returning empty object trigger rerender called render already progress already triggered whether continue depends component method returns react lifecycles shows flow", "d": "9/2018"}, {"body": "goals react library definition types eg move definitions project question requested", "d": "9/2018"}, {"body": "understanding many cases typing changes react also require changes flow source due react features modeled sure would actually fix anything except adding friction deploying changes", "d": "9/2018"}, {"body": "agreed current state definition answer specific question let assume write entire react flow definition jsflow file would react team willing host code base want flow team code base", "d": "9/2018"}, {"body": "would release cycle work", "d": "9/2018"}, {"body": "mean since jsflow file within react library gets released whenever npm package published react team make sure definitions defined jsflow file inline package contents consumer standpoint flow reads jsflow npm package installed get types npm package api changes jsflow within package reflect consumer updates newer version flow yell break actually ends easier safer consumer using older version react say flowbin definitions react static type definitions may correct could result runtime failures annoyingly flow nt documented website currently clicking link shoots alert says todo overall though similar design typescript definition files typescript case instead extra file root project definition location defined packagejson", "d": "9/2018"}, {"body": "npm package api changes jsflow within package reflect consumer updates newer version flow yell break flow makes breaking change expectation ships react guaranteed work latest flow backwards compatible even results worse definition", "d": "9/2018"}, {"body": "think general flowjs would generally work latest version flow would consumer update package also update version flow flow fire error supporting multiple flow versions ask flow team assume goal currently", "d": "9/2018"}, {"body": "think general flowjs would generally work latest version flow would consumer update package also update version flow flow fire error issue downstream react projects also use flow eg reactnative rn usually lags versions behind flow projects use flow ime pin react latest version flow prevent downstream react projects updating latest react version update latest version flow flow releases require significant effort upgrade changes eg version changed way flow interacted unknown properties objects required heavy refactor code nt think anything makes upgrading react difficult good idea unless benefit presents exceedingly obvious still sure actual benefit moving libdef would", "d": "9/2018"}, {"body": "anyone working still would give try thanks", "d": "9/2018"}, {"body": "also want help dantesolis work together one else working", "d": "9/2018"}, {"body": "armujahid yes sure work together", "d": "9/2018"}, {"body": "dantesolis started working complete yet", "d": "9/2018"}, {"body": "armujahid wow move fast start working today tomorrow tackle work thing time basically done table today", "d": "9/2018"}, {"body": "dantesolis added collaborator repository see changes branch done following use babelupgrade tool upgrade packagejsons manually update references babel packages code manually update references babel packages babelrc file babelupgrade nt support monorepo yet issues tests still failing different errors eg add babelpluginproposalclassproperties plugins section babel config enable transformation although already added babelrc file need resolve issues least tests wo nt fail", "d": "9/2018"}, {"body": "let check", "d": "9/2018"}, {"body": "armujahid working today tomorrow", "d": "9/2018"}, {"body": "calling setstate render avoid smells really bad nt way tell react gc removed child without using render gaearon", "d": "9/2018"}, {"body": "think anyone suggests actually calling setstate render understand problem alivedise gets cleared next update difference make explain realistic scenario matters", "d": "9/2018"}, {"body": "swieckowski pick nt plan work work top fork", "d": "9/2018"}, {"body": "edit packagejson file update rolluppluginnoderesolve run build need fix failure look pr linked get idea", "d": "9/2018"}, {"body": "pravi look compiled rolluppluginnoderesolve", "d": "9/2018"}, {"body": "yes need listen click change events", "d": "9/2018"}, {"body": "update fiddle reproduces issue firefox quantum", "d": "9/2018"}, {"body": "lot funny things locales number formatting locales use minus sign hyphen chrome macos locales ie represent negative numbers brackets like us accounting ie windows server use brackets locales group digits thousands apply grouping fractional part btw locale agnostic accepts digits dot exponent symbol plus hyphen sign", "d": "9/2018"}, {"body": "could find existing rfc subject created one", "d": "9/2018"}, {"body": "comments past days took liberty taking stab hope ok pr", "d": "9/2018"}, {"body": "sassanh could nt reproduce safari fail locally fixed spacing issues affect ie could prepare test case affects safari way confirm safari false warning fix well pr another one", "d": "9/2018"}, {"body": "mgol unfortunately migrated ubuntu ca nt test safari anymore guess assume solved months going back macos check reminder required one projects regularly run system see problem exists create another issue mention tagging take care thanks solving ie issue following safari issue", "d": "9/2018"}, {"body": "check safari tomorrow", "d": "9/2018"}, {"body": "discussions fix skip validation ie normalizes string much making warn really could complex incur performance hit easy skip ie checking safari may require checking useragent errorprone", "d": "9/2018"}, {"body": "hi guys issue still open someone already working", "d": "9/2018"}, {"body": "dantesolis nhunzaker working check also probably gon na revisit behavior going remove good first issue label avoid future confusion", "d": "9/2018"}, {"body": "philippspiess thanks good first issues could pick thanks", "d": "9/2018"}, {"body": "dantesolis look good first issue taken see recent activity usually work contribution guides mention week period others start working issue well also think take look far know still least one test uses private api tackled community member also great improve test type coverage need research find uncovered lines since nt solution right jest comes coverage tool might helpful let know stuck steps", "d": "9/2018"}, {"body": "philippspiess would giving try since think someone already asked also keep eye open one thanks adding coverage yes jest comes coverage check one well", "d": "9/2018"}, {"body": "romanlex want comment using would fail never attached body child components", "d": "9/2018"}, {"body": "stumbled one also almost broke", "d": "9/2018"}, {"body": "looked fixing pretty convoluted nt feel like worth going rabbit hole intend make easier upgrade new context deprecate legacy one", "d": "9/2018"}, {"body": "makes sense gaearon relieved found actual issue going insane", "d": "9/2018"}, {"body": "alexreardon work around behaviour wrapping child components update response event emitter wrapped entire event publishing single", "d": "9/2018"}, {"body": "whosesmile thanks hack use case bunch bookmark scripts things autologin autofill forms various test data constant stream new development servers autofill usually nt work update scripts several times new react versions", "d": "9/2018"}, {"body": "thanks ephem fixing think fix makes sense issue bit mindbender somebody still problems next version probably please raise new issue reference one", "d": "9/2018"}, {"body": "update react warning gone content rendered even child string thanks fix guys", "d": "9/2018"}, {"body": "gaearon closed issue nt great case zones lifecycle methods could ran zone error handling mechanism could used catch async errors", "d": "9/2018"}, {"body": "meanwhile api like exposed would react capable handling asynchronously sent errors", "d": "9/2018"}, {"body": "would bad practice use error boundary component uncaught errors like fetch event handlers setting state throwing error one lifecycle methods based javascript class mybuggycomponent extends reactcomponent constructor props super props thisstate error null handleclick try badstuff catch err thissetstate error errmessage render thisstateerror throw new error thisstateerror return", "d": "9/2018"}, {"body": "want workaround could work", "d": "9/2018"}, {"body": "think possible timeout option need let know find something promising aware forces browser call fn msecs force even sec delay finding something forces browser measure time difference performance api new date linked framescheduling uses requestanimationframe setimmediate settimeout requestanimationframe setimmediate force either", "d": "9/2018"}, {"body": "sorry messaged previous ones wrong issue removed checked possible deferring solutions phantomjs nt really good solutions test following opened child window loaded page child window deferred callbacks child window used karma test firefox opera chrome phantomjs emulated chrome might behave differently karma manual tests sure methods tried call callback unload new document created child window call forced methods others called new document created new document loading readystate others new document child window loaded call first group lightly forced second group delayed sometimes hundred msec delay compared load event new document lightly forced would useful could inject script child document scripts head run sadly phantomjs nt lightly forced solutions every forced lightly forced solutions might good call callback timeout summary test results chrome forced append inline script promiseresolve lightly forced postmessage messagechannel settimeout requestidlecallback delayed requestidlecallback requestidlecallback requestidlecallback requestanimationframe fire opera forced append inline script promiseresolve lightly forced postmessage messagechannel requestidlecallback delayed requestidlecallback requestidlecallback requestidlecallback settimeout requestanimationframe fire phantomjs forced append inline script lightly forced delayed postmessage settimeout requestanimationframe messagechannel ie forced append inline script lightly forced delayed script readystatechange messagechannel requestanimationframe settimeout setimmediate postmessage ie forced append inline script lightly forced delayed messagechannel postmessage requestanimationframe settimeout setimmediate firefox forced append inline script promiseresolve lightly forced settimeout requestidlecallback requestidlecallback requestidlecallback postmessage messagechannel requestanimationframe delayed requestidlecallback defers good luck", "d": "9/2018"}, {"body": "checked whether forced ones sync turned append inline script sync use one checked mutation related solutions mutationobserver similar promiseresolve gives nexttick phantomjs mutationevent onpropertychange sync work time origin bad upper list sec delay requestidlecallback requestanimationframe sometimes settimeout opera others msecs", "d": "9/2018"}, {"body": "gaearon would like work confirm pick", "d": "9/2018"}, {"body": "chrome says using src deprecation urlcreateobjecturl media streams deprecated removed around september please use htmlmediaelementsrcobject instead see details", "d": "9/2018"}, {"body": "new someone explain got error script use returning picture sometimes picture showing got error expected server html contain matching import react react import menu semanticuireact import link routes export default props gt return", "d": "9/2018"}, {"body": "coupled two backends time caused bit problem project working using two components dependencies reactdnd reacttaginput reactreduxgrid view several tabs one contains reacttaginput view uses reactreduxgrid user view clicks navigate view intercept navigationprompt reactrouternavigationprompt case view rendering view unmounted got error described looked possible solutions nt think use reactreduxgrid patched setting state flag view render component mounted seems work time switch reactreduxgrid component", "d": "9/2018"}, {"body": "sorry would design part differently today longer maintain alas", "d": "9/2018"}, {"body": "components dependencies nt including backend provider meant supplied application developer top components please feel free file issues explaining alternatively design part needs changes", "d": "9/2018"}, {"body": "helps react test suite much simpler although also potentially filter valid warnings", "d": "9/2018"}, {"body": "hey gaearon thank patch react tried project unfortunately failed constructed minimal reproduction issue importing setup test leads test failure proposed solution seems event listener triggered adapter present know way around", "d": "9/2018"}, {"body": "issue solved using also prevent error log console", "d": "9/2018"}, {"body": "nhunzaker happy power open source account sauce labs beautiful open source projects like react", "d": "9/2018"}, {"body": "link track bug firefox", "d": "9/2018"}, {"body": "zwithz thank much", "d": "9/2018"}, {"body": "import react react", "d": "9/2018"}, {"body": "sophiebits wrote react nt recommend use exceptions except programmer errors prefer react user always show pause exception despite error boundary error boundaries failsafe check nt expect hit normal operation suspense change perspective wondering whether error boundaries appropriate mechanism handle data fetch failures simply mapping promise rejection whether wrap handle separately programmer errors", "d": "9/2018"}, {"body": "like point behavior clearly explained error boudaries componentdidcatch documentation moment missing error logs production builds using window error event capture errors globally working dev production error boundaries seems like right thing confusing different behavior documented", "d": "9/2018"}, {"body": "ikhilko facing issue get solution issue thank kumar", "d": "9/2018"}, {"body": "ampbind xmlcompatible syntax alternative see nt seem support bracketed attribute syntax would required react", "d": "9/2018"}, {"body": "great case nt think worth effort support xmlincompatible syntax", "d": "9/2018"}, {"body": "benschac still poking would like take crack worked", "d": "9/2018"}, {"body": "nah went rabbit hole chatbots sun sep pm charlie truong notifications githubcom wrote benschac still poking would like take crack worked receiving mentioned reply email directly view github mute thread", "d": "9/2018"}, {"body": "convenience like add able access scope arrow functions simply prefix underscore breakpoint console returns ca nt find error changing example trick said exacly ideal course", "d": "9/2018"}, {"body": "referring believe babel output chrome debugger inability properly handle source maps repl unrelated issue", "d": "9/2018"}, {"body": "imo losing access etarget would regression like keep access element props useful access selection range data props etc another reason access needed input validation", "d": "9/2018"}, {"body": "put cursor input try type nothing happen every time type react component rerender react see value supposed hi type first char like value becomes hia react overwrite hi wonder react rerenders user types even remove event hander attribute case state changes accordingly purpose attribute controlled element without code react component could still track state attribute set future access like code", "d": "9/2018"}, {"body": "hi guys updates issue testing google chrome still delete change focus numeric input state application updated type numbers right number saved integers gt entered numeric input still shows number preceding confusing user", "d": "9/2018"}, {"body": "gaearon advice changed also latest react typings expose ref property despite property readable runtime something bad", "d": "9/2018"}, {"body": "read comments read correctly working solutions either eject webpack config add cdn package support", "d": "9/2018"}, {"body": "nt need add anything webpack config", "d": "9/2018"}, {"body": "react requires runtime js features missing easy add polyfills see add make sure put imports entry point application imports nt help might problem tldr choose polyfill react nt require make sure polyfill runs also put imports entry point file going lock prevent confusion since comments webpack already confusing people ejecting absolutely unnecessary custom webpack config maybe problem similar provides clue fix", "d": "9/2018"}, {"body": "discussion believe closed behavior inline rfc form reset behavior settled", "d": "9/2018"}, {"body": "technically react attach nonreactgenerated markup although pretty fragile gaearon referring portals", "d": "9/2018"}, {"body": "way process could automatic ca nt think use case oldnew compared instead oldnew instance props receiving reason instance comparison desirable situations think could done automatically class", "d": "9/2018"}, {"body": "maulerjan nt understand mean comparing instance think conceptual model react might incorrect", "d": "9/2018"}, {"body": "understand implement something similar compare next old next old changed rendering happening also contain property contains reactelement reactelement new every time parent component renders always thought reactelement internally stores component instance nt change renders nt work way might wrong always thought react works", "d": "9/2018"}, {"body": "maulerjan think mean component type eg case type could check type props deep go also children props dependent render method way get actual props without calling render end ends thing react reconciler already less performant", "d": "9/2018"}, {"body": "right nt think yes meant sorry poor explaining abilities believe guys come good solution stick researching react source better use next time", "d": "9/2018"}, {"body": "using react version still problem mouse pasting nt trigger event added work around use case idea might case", "d": "9/2018"}, {"body": "added function indexhtml fnextend animatecss function animationname callback var animationend function el var animations animation animationend oanimation oanimationend mozanimation mozanimationend webkitanimation webkitanimationend function animateerror loginbox animatecss shake react component pretty sure correct way", "d": "9/2018"}, {"body": "gaearon please provide example reproducing example throws error docs javascript create ref react docs constructor props super props thisfirstname reactcreateref docs render return get environment system os macos high sierra binaries node usrlocalbinnode npm usrlocalbinnpm browsers chrome safari npmpackages react reactapollo reactnative reactnativesvg reactnativesvgicon reactnativevectoricons reactnavigation", "d": "9/2018"}, {"body": "unfreeze object reassigning", "d": "9/2018"}, {"body": "faced issue used increment props solution many times reasoning one time thought using callbacks something like class mycomponent extends component constructor props super props submitform form thissetstate isloading true formsubmitioncallback response responseerror thissetstate formsubmittedsuccessfully true rednder adds bit coupling component know handle response believe would price pay guys think thanks advance", "d": "9/2018"}, {"body": "uglify things minify code webpack config development mode warning showed remove new webpackoptimizeuglifyjsplugin mangle false compress warnings false webpack development config get rid warning hasangilak changing mangle false minified file size increases little bit", "d": "9/2018"}, {"body": "mirkojotic still interested", "d": "9/2018"}, {"body": "one would like take one", "d": "9/2018"}, {"body": "question related topic children takes longer load due eg api calls promises parent mount soon ready without waiting child finish first rerender child finished work link broken milesj", "d": "9/2018"}, {"body": "react components nt wait feature planned addresses might heard suspense available yet yes child parent normally mount immediately notion child finishing today react mean child returned spinner still counts rendered child calls later eg data ready child alone rerenders", "d": "9/2018"}, {"body": "jethrolarson would nt also possible switch last lines use instead writing twice", "d": "9/2018"}, {"body": "code given following warning warning using maps children unsupported likely yield unexpected results convert sequenceiterable keyed reactelements instead", "d": "9/2018"}, {"body": "fyi support components created see", "d": "9/2018"}, {"body": "also ran issue still investigating workarounds anyone find workaround post back find good way fix", "d": "9/2018"}, {"body": "workaround use replace stop event propagate window", "d": "9/2018"}, {"body": "baurine saved life", "d": "9/2018"}, {"body": "another possible solution reparenting allow invalidate react tree force react reconciliation start allow make dom modifications external libraries like sortable dnd animations etc force react reconciliation start find way possibility awesome", "d": "9/2018"}, {"body": "thank wojtekmaj version groups pattern javascript const replacepatterntocomponent text pattern component gt const splittext textsplit pattern const matches textmatch pattern splittextlength lt return text return splittextreduce arr element gt element return arr const string foo first bar second const pattern first second g replacepatterntocomponent string pattern", "d": "9/2018"}, {"body": "implementing inputnumber component wrapper prop used component always passed property today need pass nullable default link value component adds warning decision could imagine change prop set null feel correct one input typenumber work numbers", "d": "9/2018"}, {"body": "ran problems today accidentally installed project warning react make matters worse duplicate versions caused bug open year", "d": "9/2018"}, {"body": "lost quite time today like reiterate probablyup said back simple specs nt see one valid reason fully supporting", "d": "9/2018"}, {"body": "response deleted comment using babel transform understand strongly recommend using plugin like changes semantics otherwise valid javascript code tends cause many problems longer term code breaks different environments copypaste codebases surprising new team members etc", "d": "9/2018"}, {"body": "anyone boil current bug react handles events inputs autofill fires either work clear original issue still relevant things may different issues values autofilled pre render eg ssr page react hydrating believe use correct value case cc nhunzaker inputs nt fire events autofill inputs fire different event react listening solved anything missed anyone know browsers behave correctly", "d": "9/2018"}, {"body": "btw want consider part ideally whatever partly service helping solve issue", "d": "9/2018"}, {"body": "jquense use correct value nt send change event uncheck autohydrate change value click hydrate change", "d": "9/2018"}, {"body": "ok done bit research well think two issues values filled browser react hydrates lost chrome ios fire events autofill site ya use test tell platforms browsers work fine selecting autofilled values", "d": "9/2018"}, {"body": "note gatsby page also demonstrates ssr problem", "d": "9/2018"}, {"body": "nhunzaker clever ideas ios chrome case looks like vue punted well", "d": "9/2018"}, {"body": "gaearon used unmount component created", "d": "9/2018"}, {"body": "nerdo thanks helped", "d": "9/2018"}]