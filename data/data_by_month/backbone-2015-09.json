[{"title": "yii extension display selected value update view", "body": "issue query trying solve stuck point please solve mystery using extension fortunately searchable drop like start typing loads stored data business table query show selected business update view currently address view four fields sector city business street getting business name using extension working update address every stored field data comes except business code addressviewsform var model address var form cactiveform beginwidget bootstrapwidgetsbsactiveform array id gt addressform please note enable ajax validation make sure corresponding controller action handling ajax validation correctly call performajaxvalidation commented generated controller code see class documentation cactiveform details enableajaxvalidation gt false fields required errorsummary model textfieldcontrolgroup model streetnumber array size gt maxlength gt error model streetnumber labelex model businessid widget array name gt address businessid data gt chtml listdata business model findall id businessname whole available list htmloptions gt array placeholder gt search business name options gt options selected values multiple gt multiple style gt textfieldcontrolgroup model sector array size gt maxlength gt error model sector textfieldcontrolgroup model city array size gt maxlength gt error model city isnewrecord create save endwidget", "num": "3812", "d": "9/2015"}, {"title": "add underscore methods findlastindexsortedindex", "body": "finding writing much better", "num": "3809", "d": "9/2015"}, {"title": "changedattributes behaving weird", "body": "using write computed field helper issue returns false expected least reproduced pen javascript consoleclear let backbone windowbackbone var new backbonemodel let log txt obj gt documentwrite txt jsonstringify obj let lastchange mon change gt log lastchange lastchange mchangedattributes lastchange log lastchange mset search text emit false changed mset search mset search text need multiple instances code model instance use determine dependency changes computed fields expected behavior", "num": "3808", "d": "9/2015"}, {"title": "npm tarball missing license", "body": "license file present tarball missing guess due please add back", "num": "3807", "d": "9/2015"}, {"title": "multi inheritance", "body": "hi project needed multi inheritance capability backbone implemented feel free give feedback positive negative feature could useful", "num": "3805", "d": "9/2015"}, {"title": "constructor delegateevents regression bug", "body": "old backboneview var view backboneview function options thiscid uniqueid view options options extend pick options viewoptions thisensureelement thisinitializeapply arguments thisdelegateevents new var view backboneview function options thiscid uniqueid view extend pick options viewoptions thisensureelement thisinitializeapply arguments delegateevents removed many patterns rely collections models set initialize", "num": "3802", "d": "9/2015"}, {"title": "collection byid hash sync removing models", "body": "following removemodels function models options var removed var lt modelslength var model thisget models model continue return removedlength removed false updates collectionmodels removing model event emitted collectionbyid mapping model id model updated collectionbyid sync collectionmodels problem listener tries remove model currently removed collection case occurs uses collectionbyid determines model fact collection returns following splice clobbers model array", "num": "3801", "d": "9/2015"}, {"title": "router passing object route params handler", "body": "currently matched parameters passed action javascript routes folder name mode openfolder openfolder function name mode querystring stuff would like actions given object instead resembling express routing solution javascript routes folder name mode openfolder openfolder function routedata routedata name openfolder params name valueofname mode valueofmode querystring querystring amp ab could option enabled bbrouter good idea functionality base bbrouter external library tried seems working well new set tests cloned current router test make sure nothing breaks thanks", "num": "3799", "d": "9/2015"}, {"title": "syntaxerror unexpected token p objectparse native kparsejson", "body": "backbone tries call objectparse default object validate false parse false createurl url contenttype applicationjson beforesend contenttype applicationjson createurl emulatehttp false emulatejson false error e n errorthrown syntaxerror unexpected token p objectparse native kparsejson j n xmlhttprequestkajaxtransportqcorstcrossdomainsende message unexpected token p stack get stack set stack proto error parse false success textstatus parsererror url validate false xhr object proto object object validate false parse false createurl url contenttype applicationjson beforesend contenttype applicationjson createurl emulatehttp false emulatejson false error e n errorthrown syntaxerror unexpected token p objectparse native kparsejson j n xmlhttprequestkajaxtransportqcorstcrossdomainsende message unexpected token p stack get stack set stack proto error parse false success textstatus parsererror url validate false xhr object proto object", "num": "3798", "d": "9/2015"}, {"title": "chainable routes", "body": "alternative interim step overhauling router could adding ability chain routes built several applications required executing routes varying combinations rendering wrote lightweight plugin handle simply wondering something community open including library rather plugin creating pull request examples implementation full documentation found example usage using dot syntax within callback names able chain callbacks executing one chained routes parameters would passed parameters respectively want include additional route middle chain intended passed parameters bracket callback", "num": "3796", "d": "9/2015"}, {"title": "inconsistent events callback", "body": "far tell problem javascript appeventson function eventname consolelog eventname triggered works expected appeventson somethingelse function eventname consolelog eventname triggered nope gon na work eventname automatically available callback first argument listen first arg event name listen specific event first arg event name bad fixed", "num": "3795", "d": "9/2015"}, {"title": "incorrect behavior collection method", "body": "retrieving model unexisting index expect undefined value check index lt index thislength nothing index less thislength example index collection length please remove line index lt index thislength cause bug", "num": "3793", "d": "9/2015"}, {"title": "make model attribute sync server", "body": "hi saw cases store states view like dropdown countries data country list get server want add selected attribute country model need change selected value view get rendered selected attribute meanless server nt want sent server local attribute backbonemodel use set get set modify attributes local attribute also fires events sync server right way", "num": "3791", "d": "9/2015"}, {"title": "update event fails fire times", "body": "use backbone react flux build application uses babel listen add remove update change events backbone collection react component collection polls server times fetch models adds collection works fine lot add remove gets fired cases models replaced avoid removed add remove fire one update component sometimes work fine sometimes wont observed situation models returned new whole collection changed problem network response verified never fires update event confirm also thisbind update function tried logging problem fire added add remove statements back statement works fine said interested addition causes react components rerender many times look issue happy give details", "num": "3790", "d": "9/2015"}, {"title": "undocumented collectionat behavior", "body": "functionality introduced documented may lead surprising results record mentioned changelog nt stop breaking app tests obscure cases would happy add sentence method doc agree", "num": "3789", "d": "9/2015"}, {"title": "saving model part collection sync event triggered collection", "body": "able find anywhere documentation sure happens help would appreciated thanks advance", "num": "3786", "d": "9/2015"}, {"title": "possible get code books code words vector quantization", "body": "working matlab vector quatization know vector quantization provide set code words input get code vectors used lpg loyed algorithms result locations code word want locations code book subset locations code vectors ali", "num": "3785", "d": "9/2015"}, {"title": "hotel booking integration using catalook", "body": "hi want add hotel booking system dnn site concept discussed given link tried hotel booking using catalook catalook store found hotel related fields like number bed rooms beds bath rooms accommodates property type ammenities etc clear add custom field catalook product detail page filtering things using latest catalook version dnn need additional fields adding product hotel management sure booking hotel system using catalook module please assist move forward configuring online reservation system using catalook module urgent please thanks advance thanks amp regards jay", "num": "3783", "d": "9/2015"}, {"title": "modelprototypeget counts properties", "body": "hi stumbled following behaviour returns constructor function object rather expecting method filter properties return also hold true line underscore filter properties without model object would true hash thoughts", "num": "3782", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "awesome looking forward pull", "d": "9/2015"}, {"body": "want work pr", "d": "9/2015"}, {"body": "sure submitted one though sure approach adding iteratee value arguments reverse order underscore methods thoughts", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "looking passing object event compare previous attributes current meaning comparing think want closer sure previous attributes behavior expected someone else want weigh", "d": "9/2015"}, {"body": "license mit packagejson sufficient needs", "d": "9/2015"}, {"body": "packagejson whole license text sufficient according license requires copy license text included reason care maintain fedora package backbone required ship license text package", "d": "9/2015"}, {"body": "thing multiple inheritance javascript mix properties instead", "d": "9/2015"}, {"body": "hum yep precisely purpose avoid mixing manually properties", "d": "9/2015"}, {"body": "precisely mixing properties prototype multiple inheritance", "d": "9/2015"}, {"body": "yes simulates multiple inheritance final result use many module want js test extend multi inheritance function var function return", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "thanks write looks duplicate though", "d": "9/2015"}, {"body": "sorry missed one", "d": "9/2015"}, {"body": "could might nice addition implementation little heavyweight though way could slim", "d": "9/2015"}, {"body": "thanks please give pointers heavy code might think could cleaned bit replace current logic done backward compatibility mind added stuff top existing logic", "d": "9/2015"}, {"body": "would guess without looking much possible combine logic already respond diff", "d": "9/2015"}, {"body": "related router changes cc jmeas", "d": "9/2015"}, {"body": "great idea think folks looking feature baserouter returns hash named params query params though ca nt recall works splats evident commit referenced op dsl implementation backbone biggest hindrance feature nt planning making changes dsl implementation keep concerns separate hugely favor updating vague plan subsequent pr focused solely dsl sure ifwhen get chance anytime soon", "d": "9/2015"}, {"body": "sorry jmeas done better research pretty much already implemented baserouter converting querystring object also great addition think possibly objectified rare case someone needs use raw value", "d": "9/2015"}, {"body": "possibly querystring objectified query routedata rare case someone needs use raw querystring value seems like good idea comes single point entry router think giving user much information possible best open pr baserouter merge cut release p query parameters super interesting comes router two leading clientside router philosophies uirouter ember router take fairly different approaches uirouter blends query parameter rest route sense ember keeps separate also todo list evaluate pros cons approach nt reached conclusions prefer dsl working client side router ignores query params moment reason", "d": "9/2015"}, {"body": "closed ps mark answer correct", "d": "9/2015"}, {"body": "nice suggestion plenty times would nt want previous routes run view edit comment page example nt need post data counterpoint could nt common method called routes need", "d": "9/2015"}, {"body": "counterpoint could nt common renderpost method called routes need yes commonly solved plenty times would nt want previous routes run agreed routes would simply pass chained callback string", "d": "9/2015"}, {"body": "routes simply would pass chained callback string ah note readme cool concept opinion magical problem ultimately trying solve data view dependencies metaframeworks like marionette chaplin use regions layouts help sure tack take gives flexibility control without learn esoteric router syntax", "d": "9/2015"}, {"body": "aside able implement event router something like js chainedrouter backbonerouterextend constructor backbonerouterapply arguments thison route thischainedroutes", "d": "9/2015"}, {"body": "yeah confirm really bad", "d": "9/2015"}, {"body": "special event specifically prepend event name callback know event called bind listener event already know event triggered listener", "d": "9/2015"}, {"body": "yeah consistent callbacks every events event name first parameter callback imo", "d": "9/2015"}, {"body": "negative number indicates select end collection would indicate last item collection believe works expected need negative number indicate found suggest check calling", "d": "9/2015"}, {"body": "believe works expected need negative number indicate found suggest check calling agreed", "d": "9/2015"}, {"body": "hi please use mailing list stackoverflow questions like github issues maintaining framework", "d": "9/2015"}, {"body": "happy look provide test case", "d": "9/2015"}, {"body": "sure thing since add remove working perfectly fine sure part share debug", "d": "9/2015"}, {"body": "whatever calling causes event also state collection beforehand", "d": "9/2015"}, {"body": "overrided parse looks like consolelog prints response received every time fires adds removes update calling set directly fetch call fires parse calls set assume instance api calls give objects time gives adds removals time updates verified via issuing bind collection logging changes update", "d": "9/2015"}, {"body": "adding found another one collection firing change event bypassed binding sync seems like hack", "d": "9/2015"}, {"body": "write jsfiddle demonstrate", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "docs event triggered model collection also triggered collection directly convenience allows listen changes specific attributes model collection example documentson change selected", "d": "9/2015"}, {"body": "thanks gone documentation thoroughly bad", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "something address objectcreate might worth looking drop", "d": "9/2015"}, {"body": "polyfilled black magic think", "d": "9/2015"}, {"body": "prior art exoskeleton see etc general say right generally nt realworld use case naming keys constructor hasownproperty keep mind object hash change easy comes minimal side effects let bite bullet", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like nt one let leave", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like constructor nt one let leave trouble actual current project made sad case treatment overwrite collection", "d": "9/2015"}, {"body": "thing happens dumping backbone routers initialised seems app freezes nt get executed upon navigation works fine cases bang routing behaviour btw also break backbone marionette routing", "d": "9/2015"}, {"body": "browser using post code sample", "d": "9/2015"}, {"body": "using latest chrome code sample difficult actually marionette app quite complex modularised routers", "d": "9/2015"}, {"body": "weirdest thing running issue end backbonehistoryhandlers array empty properly initializing approuter", "d": "9/2015"}, {"body": "ps forked fork jashkenas backbone v ember performance demo add backbone incremental dom stunningly fast", "d": "9/2015"}, {"body": "jridgewell maybe incremental dom future backbone", "d": "9/2015"}, {"body": "jridgewell cool ambitions see opportunities integrating backbone incremental dom", "d": "9/2015"}, {"body": "beside promoting defacto templating language wink nt think anything done majority use cases exactly analogous using html lt content gt underscoreviewtemplate template documentgetelementbyid template text idomviewtemplate function data incrementaldomelementopen div null null class box id box datanumber style top datatop px left dataleft px background rgb datacolor incrementaldomtext datacontent incrementaldomelementclose div pretty hand write several others working precompilation x gt idom using swap build target compiled function compiled idom continue use jst object however referencing templates replace jquery part use js var view backboneviewextend template underscoreviewtemplate render elhtml thistemplate thismodelattributes return var view backboneviewextend template idomviewtemplate render idompatch thisel thistemplate thismodelattributes return", "d": "9/2015"}, {"body": "pretty hand write several others working precompilation x idom using template swap build target template compiled function compiled idom continue use jst object however referencing templates replace jquery innerhtml part render use idompatch kind hinting perhaps idom templating language ready bake render function backbone sets thought", "d": "9/2015"}, {"body": "could certainly", "d": "9/2015"}, {"body": "way override bit ugly also obvious clean backbone rides line magic allowing implementer understand happening quite well would nt want middleware approach personally megawac make backbone plugin extends backbone exactly suggested", "d": "9/2015"}, {"body": "pretty common major plugin developers fall trap thrash sync environment storing access originalprevious sync way may conflict instance mixing two popular sync overrides run stack overflow issues due recursive calls load second occurs resolves default case ajaxsync thus causing resolve though could implemented plugin nt think optimal way disseminate change think core feature something implemented officially", "d": "9/2015"}, {"body": "would good additional functionality baked sync could configure behaviour rather pluginchainoverride system", "d": "9/2015"}, {"body": "maybe could rename enough convention", "d": "9/2015"}, {"body": "like suggestion allows backwards compatibility also believe addresses megawac concerns thorough explanation got thinking differently", "d": "9/2015"}, {"body": "reason martynsmith generic code backboneorm update fix", "d": "9/2015"}, {"body": "use case collection callback sync problem listener tries remove model currently removed collection case occurs thisget models uses collectionbyid determines model contained collection thisindexof model returns following splice clobbers model array generic sense seems wrong finds model also uses probably vulnerable whole method inlined callback model property unset callback could cause code relies property fail", "d": "9/2015"}, {"body": "going make work class properties way need class properties annotated create special decorator attaches decorated property prototype js class todoview extends backboneview protoprop static tagname li function protoprop target name descriptor targetprototype name descriptorinitializer see babel repl example relied experimantal things works", "d": "9/2015"}, {"body": "justboris discussed blog comments behavior seeing implementation detail babel handling class properties decorators specs defined behavior proposal right want things way want make issues andor make decorators class properties standardized behavior otherwise could probably break time", "d": "9/2015"}, {"body": "benmccormick wycatsjavascriptdecorators already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged", "d": "9/2015"}, {"body": "ah cool nt seen thanks pointing mon sep boris serdiuk notifications githubcom wrote benmccormick already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged reply email directly view github", "d": "9/2015"}, {"body": "agree would useful natively needed reset attributes without mangling id attribute clear gist", "d": "9/2015"}, {"body": "someone please help issue", "d": "9/2015"}, {"body": "check nt actually seem useful since lacks caseinsensitive regex modifier urls work well", "d": "9/2015"}, {"body": "think backbone changing url browser dropping bookmark folks go back later thing need change application state would say state machine web developer use", "d": "9/2015"}, {"body": "jvitela solution works well sometimes adds little delay dont use partial template root tags generated view moreover still workaround started learn backbone one week maybe miss something solution one saw wich fully functionnal surprising think essential feature native way define root tag template template view yes please give us example possible associated pull request one use template el thanks", "d": "9/2015"}, {"body": "hi ylacaute native way define root tag template backbone template agnostic free choose whatever want template system imposible provide generic way achieve", "d": "9/2015"}]