[{"title": "problem model collection parse methods", "body": "subject problem model collection parse methods alexander danel collection underlying model parse method defined attempt collectionfetch causes problem retrieved data processed first collectionparse little bit later processed data passed modelparse second parse fails data cooked raw reason parse method model sometimes instantiate model singleton member collection words although model gets instantiated automatically collection parts program also want sometimes manually instantiate automatic bulk instantiations versus manual singleton instantiations workaround suppose define two different model classes otherwise identical except one would parse would elegant intention bulk singleton instantiations one class proposal understanding options instantiation include value parse truefalse therefore suggest option used collection instantiates model temporarily setting parse false mac os working chrome using following backbone version note attempting use insert code feature site switch preview results nt look like code perhaps mac using safari therefore also attempt drop text file message adanelbackbonedisfunctiontxt time problem manifests stacktrace stack trace surrounding code backbonemodel backbonejs var model backbonemodel function attributes options var attrs attributes options options thiscid uniqueid thiscidprefix thisattributes optionscollection thiscollection optionscollection gt optionsparse attrs thisparse attrs options lt attrs defaults attrs result defaults thisset attrs options thischanged thisinitializeapply arguments child backbonejs var extend function protoprops staticprops var parent var child gt child function return parentapply arguments lt preparemodel backbonejs preparemodel function attrs options thisismodel attrs attrscollection attrscollection return attrs options options clone options optionscollection gt var model new thismodel attrs options lt modelvalidationerror return model thistrigger invalid modelvalidationerror options return false set backbonejs new valid model push list else add gt model models thispreparemodel model options lt model toaddpush model thisaddreference model options modelmap modelcid true setpush model optionssuccess backbonejs fetch function options options extend parse true options var success optionssuccess var collection optionssuccess function resp var method optionsreset reset set gt collectionmethod lt success successcall optionscontext collection resp options collectiontrigger sync collection resp options wraperror options return thissync read options", "num": "4035", "d": "5/2016"}, {"title": "feature suggestion backbonemodelprototypeupdate", "body": "fairly common pattern find typing working backbone models involves code like iterating modelset totalcount modelget totalcount modelset modelget updating max modelset maximum max modelget maximum newvalue updating according algorithm let cost modelget cost isfinite cost nt calculated cost yet cost calculatecost model modelset cost applycouponcode cost couponcode nothing wrong examples find writing getmodifyset chunks code lot think experience could pretty easily made nicer picturing method model would make examples look like iterating modelupdate totalcount count gt count updating max modelupdate maximum max gt max max newvalue updating according algorithm modelupdate cost function cost key model isfinite cost nt calculated cost yet cost calculatecost model return applycouponcode cost couponcode update function would likely take options attribute name array attribute names apply transform function defaults identity passed arguments return new value attribute run would options would passed underlying set call would result update opening issue basically gauge interest function like part backbone core receive feedback interest happy open pr explore", "num": "4034", "d": "5/2016"}, {"title": "backbone nt suppress duplicate events", "body": "using backboneevent bind handler event context n times handler run n times trigger event one time company never really want fact cause many bugs universe behavior useful love understand codebase solve problem ugly pattern parts codebase sure remains unsolved duplicate events creep silently best nt notice worst cause strange slowness amp behavior hard debug dream world backboneeventon would detect try bind event already bound function context silently nothing perhaps bit complexity cornercase interleaving", "num": "4033", "d": "5/2016"}, {"title": "backbonerouter nomatch event", "body": "event trigger matching route want something matching route", "num": "4032", "d": "5/2016"}, {"title": "navigate silently", "body": "wondering option without updating url history historical reason would pr considered", "num": "4030", "d": "5/2016"}, {"title": "dom exception navigate safari", "body": "securityerror dom exception thrown safari ios osx moment called times fiddle var testrouter backbonerouterextend initialize function thisroute test id function id consolelog test id var router new testrouter backbonehistorystart pushstate true try var lt routernavigate test alert passed catch e var msg failed error e nstack estack consoleerror e msg alert msg fails", "num": "4029", "d": "5/2016"}, {"title": "prepare backbone", "body": "significant changes occurred master since like get sooner later list important activity highlights past couple months added support classes hook model creation one require good example create class extending bb iterator support fixed bug hash generation routernavigate cc jridgewell", "num": "4028", "d": "5/2016"}, {"body": "would addressed also", "d": "5/2016"}, {"body": "though particular hidden reason see one bugged pr indeed harmonize set parse behaviour among collection amp model also favour add parse model set", "d": "5/2016"}, {"body": "could create parse detects cookeduncooked nature data passed imho temporarily flipping values middle operation recipe bugs line", "d": "5/2016"}, {"body": "firstly let congratulate jeremy ashkenazi team existence backbone quite achievement said let get business issue concerns fact problem occurs parse defined model collection levels conditions current behavior bug ever correct parse message twice current behavior rely upon one two extremes either accident programmer defining parse levels programmer extraordinary awareness writing special detection code order enable parse places understand parse always little different model level versus collection difference single value array values programmer way ever come conclusion suggest write custom code detect data already parsed running problem debugging problem message parsed twice simply expected behavior puzzled say flipping values middle operation recipe bugs line read backbone code replete snippets code look like way imho alexander", "d": "5/2016"}, {"body": "could check current model instance part collection checking within method", "d": "5/2016"}, {"body": "pmalouin could check current model instance part collection yes could yes cleverness idea without fault satisfactory solution checking whether instance assigned collection solve problem originally stated solve larger problem original statement class manually instantiate singleton also autoinstantiate collection members always case backbone application collection needs parse different singleton parse collection class model class parse method defined called current workaround create model class use collection derivative model class use singletons modelclasswithoutparse backbonemodelextend modelclassforsingletons modelclasswithoutparseextend parse function mycollectionclass backbonecollectionextend model modelclasswithoutparse first problem nt need second problem workaround found examining solution proposed pmalouin builds upon prior proposal responsibility modelparse method determine whether called take action determining called error suggests determination made checking modelcollection first blush suggestion seems make sense since model instance autoinstantiated collection always modelcollection set manually instantiated singleton doubt segregation effortlessly guaranteed inability guarantee segregation also works workaround technique examining modelcollection assumes static structure tells us dynamic usage maybe strongly typed language could case doubt backbone allows manually instantiate model add collection kills workaround yet pmalouin backbone also allows model already within collection used outside collection suppose take individual model send server update singleton nt server send back something would subject parse appropriate parse would singleton collection read backbone code clear model instance member one collection therefore follow model instance member collection also used different context considered singleton whole discussion seems silly view following two points clear parsing twice nobody intention bug simple solution exists solution breaks nothing simple solution requires follow pattern much backbone code create scoped therefore temporary version options object scoped options used turn downstream parse collectionparse completed big deal alexander", "d": "5/2016"}, {"body": "could easily extend backbonecollection extend collections actually root view model collection objects classes javascript nt classes use start projects custom setters amp constructors handle parents kinds automagical things makes life much easier would nice backbone everyone needs need solutions like one propose could break people code people using parse implemented today suggest trying root collection find something really works well make branch rewrite code tests broken make pullrequest solution see everyone thinks", "d": "5/2016"}, {"body": "like idea another approach could allow model set accept signature maybe overcomplicating api much", "d": "5/2016"}, {"body": "probably better imlement separate method instead modifying set", "d": "5/2016"}, {"body": "another approach could allow model set accept signature mind", "d": "5/2016"}, {"body": "idea reminds immutablejs update", "d": "5/2016"}, {"body": "mind add new signature set like afterthoughts agree erosb separate method better", "d": "5/2016"}, {"body": "considered suggesting set modification nt workable api currently valid syntax also new method keeps individual method simple clear feel backboney", "d": "5/2016"}, {"body": "think pretty small change heavy lifting eventing stuff still done set look something like update function attrs transform options attrs flatten attrs transform isfunction transform transform identity var attrstoset reduce attrs function setobj attribute var value thisget attribute setobj attribute transform value attribute bind thisset attrstoset options tested may work thats general idea", "d": "5/2016"}, {"body": "use thislistento gets destroyed automatically", "d": "5/2016"}, {"body": "call remove method stoplistening el object listento bind event call remove event rewrite remove method like", "d": "5/2016"}, {"body": "add splat route final", "d": "5/2016"}, {"body": "work cant find key word nomatch source", "d": "5/2016"}, {"body": "splat like variable name whatever like js anyname myfunction myfunction function use arguments bc var inputs", "d": "5/2016"}, {"body": "call function history specifically manage history state", "d": "5/2016"}, {"body": "apple developer forum link posted seems suggest issue safari want backbone", "d": "5/2016"}, {"body": "backbone needs workaround browser bug", "d": "5/2016"}, {"body": "workaround aware zowers bug occur navigate called times synchronously happen called times general", "d": "5/2016"}, {"body": "workaround wrap navigate safari latest stable today times total safari developer preview times seconds", "d": "5/2016"}, {"body": "wo nt fix say acceptable nonworking functionality", "d": "5/2016"}, {"body": "placed reading safari bug see acceptable solution using trycatch changing route change acceptable imo", "d": "5/2016"}, {"body": "using trycatch changing route change acceptable imo agreed silent failure worse current behavior", "d": "5/2016"}, {"body": "probably navigate fallback hash case error", "d": "5/2016"}, {"body": "today safari fix got released safari safari fails called times seconds", "d": "5/2016"}, {"body": "closed hoping people get update soon", "d": "5/2016"}, {"body": "bug safari without much given months think safe anything letting people update", "d": "5/2016"}, {"body": "others prs merge", "d": "5/2016"}, {"body": "probably get perhaps meh", "d": "5/2016"}, {"body": "said days obviously lie get something weekend", "d": "5/2016"}, {"body": "afaiu hash part uri unicode characters encoded assigning unicode string probably avoided safari quirk another reason original authors jsfiddle latest using hash encoded name consistent safari chrome", "d": "5/2016"}]