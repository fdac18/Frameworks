[{"title": "contextual components hash helper causes attribute assignments prototypes", "body": "seeing unexpected behaviour using contextual components conjunction helper causes passed component template invocation appear assigned component prototype rather component known issue perhaps way invoking components twiddle demonstrating issue cc mixonic", "num": "12540", "d": "10/2015"}, {"title": "returning rejected promise application route fails ungracefully", "body": "reduced example nt know want behavior current state clearly less ideal think cc nickiaconis krisselden", "num": "12539", "d": "10/2015"}, {"title": "contextual components new instances", "body": "selectboxhbs applicationhbs renders foo three times fiddle expected select box public api render new instance selectboxoption", "num": "12537", "d": "10/2015"}, {"title": "using observes child class emberobject breaks ember data eachcomputedproperty proto firefox", "body": "js bin breaks eg firefox ubuntu windows windows works eg chrome ubuntu windows setup simple create ember object properties create child class extends object defines observer try iterate properties bar way via disappeared bizarrely still shows iterator seems skipping massively breaking issue ember data uses part pushing data models method fire properties bug means ember data silently ignores whatever payload produces model without data eg turn effectively means entire user interface application broken wherever pattern occurs options docs state observes used properties class fix firefox needs found ideas firefox breaking dug enough ember know block least bug appear must something going deep addobservelistener code nt time dig moment", "num": "12534", "d": "10/2015"}, {"title": "enumerable vs array", "body": "docs says return boolean nt necessarily true returns first truthy value returned last falsey value returned inconsistent well always returns correct functionality either way make either pr docs repo correct behaviorexplanation", "num": "12533", "d": "10/2015"}, {"title": "expose test stubbing", "body": "currently dynamically replaced function invocation makes sense nt currently lend stubbing method tests since whatever stub replaced actually call function additionally since nt exposed lives function closure ca nt stub directly realize might small usecase wondering would worthwhile expose via property returned function", "num": "12531", "d": "10/2015"}, {"title": "build error editing js files", "body": "developing locally get build error every time save js file restarting server fixes error save", "num": "12530", "d": "10/2015"}, {"title": "make regexps emberstring configurable", "body": "emberstring methods support cyrillic letters add cyrillic letters regexps probably good idea would great make regexps emberstring configurable", "num": "12529", "d": "10/2015"}, {"title": "guides issue better doc emberobserver", "body": "page lost debugging instead selectedfeatures embera", "num": "12528", "d": "10/2015"}, {"title": "node supported", "body": "get ember cli lol also getting started documentation instruct install unstable version phantom install hangs osx", "num": "12527", "d": "10/2015"}, {"title": "helper returning emberstringhtmlsafe string passes unit tests chrome fails phantomjs", "body": "created twiddle shows functionality helper given large string smaller string bolds occurrences smaller string larger string ie returns run autocompleteemphasizer unit tests chrome pass run phantomjs via fail instead returning string returns testsunithelpersautocompleteemphasizertestjs file import autocompleteemphasizer helpersautocompleteemphasizer import module test qunit module unit helper auto complete emphasizer test emphasizes one word correctly single search word defaults bold function assert assertexpect var inputstring end batman longer afraid bats var searchtext batman var expected end batman longer afraid bats var result autocompleteemphasizer inputstring searchtext assertequal result expected test using non default emphasizer works function assert assertexpect var inputstring end batman longer afraid bats var searchtext batman var emphasiselement empher var expected end batman longer afraid bats var result autocompleteemphasizer inputstring searchtext emphasiselement assertequal result expected test emphasizes multiple words correctly single search word function assert assertexpect var inputstring end batman longer afraid bats var searchtext bat var expected end batman longer afraid bats var result autocompleteemphasizer inputstring searchtext assertequal result expected test emphasizes multiple words correctly multiple search words function assert assertexpect var inputstring tick tock went clock var searchtext ck ent var expected tick tock went clock var result autocompleteemphasizer inputstring searchtext assertequal result expected test space end search text effect result function assert assertexpect var inputstring end batman longer afraid bats var searchtext batman var expected end batman longer afraid bats var result autocompleteemphasizer inputstring searchtext assertequal result expected test search word equal emphasizer works function assert assertexpect var inputstring building supplies var searchtext b var expected building supplies var result autocompleteemphasizer inputstring searchtext assertequal result expected helper save taking twiddle import ember ember inputs params text add emphasis parts params searchtext use emphasizing params optional emphasizing element ie defaults export function autocompleteemphasizer params params undefined params null paramslength return false var result params provide string search return unaltered paramslength return result var searchtext params tolowercase replace g searchtextlength return result get search words make sure search wordsare unique non empty var searchwords searchtextsplit uniq reject w gt w var emphasiselement params b search words match emphasis element word first searchwordscontains emphasiselement searchwordsremoveobject emphasiselement searchwordsinsertat emphasiselement make sure result html safe contains nothing malicious result emberhandlebarsutilsescapeexpression result searchwordsforeach w gt result resultreplace new regexp w ig lt emphasiselement gt make result html safe know contains malicious html return emberstringhtmlsafe result export default emberhelperhelper autocompleteemphasizer unsure ember issue stringhtmlsafe something like ember qunit issue phantomjs", "num": "12524", "d": "10/2015"}, {"title": "jscs tests failing", "body": "getting lot jscs errors cc rwjblue", "num": "12521", "d": "10/2015"}, {"title": "action helper argument placeholders", "body": "currently ember simple component gridlike functionality happens becomes first argument action callback default reads first argument case instead jquery event case arguments fix bypass neatness value setting modify click code would neat able would also quite powerful currying etc also give flexibility using someone else api ca nt control farfetched", "num": "12520", "d": "10/2015"}, {"title": "embercomputedsort nt update live recordarray updates", "body": "upgraded ember ember noticed embercomputedsort longer updates live recordarray updates example javascript users embercomputed function return thisstorefilter user filter isactive true function record return recordget isactive sortlastname lastname asc firstname asc userssorted embercomputedsort users sortlastname print add new user users list update userssorted list", "num": "12516", "d": "10/2015"}, {"title": "setter embercomputed nt fire set false", "body": "hello maybe missing something nt find anyone else complaining think found bug computed property looks like javascript import ember ember export default embercomponentextend someprop embercomputed get return emberispresent windowlocalstoragegetitem someprop set key value consoledebug somepropset value value windowlocalstoragesetitem someprop windowsessionstoragegetitem someprop else windowlocalstorageremoveitem someprop volatile custom checkbox component something like javascript import ember ember export default embercomponentextend checked null value determines checkbox checked actions toggle function really nt matter use toggleproperty problem still thisset checked thisget checked code running setter nt get invoked value set get around problem actually using happening value valid value set", "num": "12515", "d": "10/2015"}, {"title": "setting placeholder component broken", "body": "try localize placeholder text component hook passing localization key parameter component code working broken versions twiddle demonstrates problem bug something wrong javascript emberstrings hello bonjour componentslocalizedinputjs export default embercomponentextend tagname input attributebindings placeholder willinsertelement function thissuper var placeholder thisget placeholder placeholder thisset placeholder placeholderloc template localizedinput placeholder hello", "num": "12514", "d": "10/2015"}, {"title": "memory leak conditionally included components", "body": "twiddle demonstrates simple example using two components conditional logic determine one included appears causing memory leak application came light memory usage climbs lot data around application crashes memory usage climbs change underlying data determines components include remove toggling data back forth various components included removed repeatedlyafter iteration data hence component use returned initial state would therefore expect memory usage also return gc back initial amount chunk memory allocated fraction ever released second twiddle produces exact output one without component outputs divs text instead text conditionally included inline example memory released although convinced memory full description problem stackoverflow", "num": "12513", "d": "10/2015"}, {"title": "linkto currentwhen supplied per docs", "body": "docs specify however currently appear case always treated string called docs updated reflect expected string separated list route names work documented shall pr either way", "num": "12512", "d": "10/2015"}, {"title": "allow queryparams sub expression reset query params", "body": "also like weigh addition would great able pass simple use case would example filter bar multiple different options etc typically want clear currently way would would uhhhhh verbose redefine every query param ton duplication remember add new one rename one need go back clear link multiple clear links addchange would great could instead say know simply remove query params url", "num": "12510", "d": "10/2015"}, {"title": "add gitter badge readme", "body": "discovered official gitter chatroom repo wondering nt add badge readme", "num": "12508", "d": "10/2015"}, {"title": "parameterless helper calls nt work inside attributes", "body": "example given helper nt able call without parameters inside attribute quick workaround specify parameter wo nt used", "num": "12506", "d": "10/2015"}, {"title": "aborted transitions ember propagate error emberrsvpon error", "body": "seen example aborted transitions redirection manual abortion propagates error rsvp error handler intentional change error erroneous error", "num": "12505", "d": "10/2015"}, {"title": "html progress element value changes rendered outlet ie", "body": "experiencing weird issue html progress element value changes one rendered compiled templates coming server contain correct values rendered value always nt know put fiddle together embercli syntax replicate use ie windows place following code indexhtml opening body tag applicationhbs end file progress bar indexhtml render correctly one inside application template value changed ember jquery", "num": "12504", "d": "10/2015"}, {"title": "perf manually force gc node", "body": "summary noticed fastboot appears gc related issues quote coworker prateek briefly app ember allocating lot objects every request triggers pathological behavior garbage collector best guess dynamically increases new gen size uses incremental scavenging algorithm gc however larger new gen sizes require iterations collect results early requests small new gen fast subsequent requests progressively getting slower full gc since nt expose many gc tuning options solution found far force full gc new old gen every request adds every request still faster consistent normal behavior average even percentile without forced gc forced gc graphs include rendering simply resource discovery meaning execute route handlers would assume would allocations rendered string questions steps taken make gc less issue ember land done application land would transpiled classes allocate less rewrite ember functionally pure everyone knows oop considered harmful wink cc wycats kratiahuja chancancode krisselden tomdale", "num": "12499", "d": "10/2015"}, {"title": "acceptance tests leak container every test run", "body": "came across issue app basically pretty large test suite hits chrome tab memory limit clearly unacceptable prevents running tests integration server js bin repro steps open developer tools new tab open jsbin chrome wait developer tools hit debugger line take memory snapshot note chrome automatically continues snapshot complete sure continue better demonstrate problem take another memory snapshot use comparison snapshot snapshot see memory leaking notably container objects hold references virtually everything else scroll see delta next container following screenshot demonstrates results machine", "num": "12490", "d": "10/2015"}, {"title": "objectkeys emberobjectcreate return values differ development production", "body": "tried current master well release development return value objectkeys emberobjectcreate empty array code built production return value super happening latest versions firefox chrome nt appear browser issue please let know need information", "num": "12489", "d": "10/2015"}, {"title": "route storefindall working correctly records type already present previous page", "body": "working fine ember ember data nt seem work ember ember data navigate works fine see orders come api page displays information seven orders first navigate correctly see orders member account however press link goto displays orders api deffinitely hit correctly returns orders put breakpoint end ember data findall method returning array items line posted first think ember data done job orders route import ember ember import authenticatedroutemixin embersimpleauthmixinsauthenticatedroutemixin export default emberrouteextend authenticatedroutemixin model function return thisstorefindall order function orders return orderssortby creationdate reverse aftermodel function orders documenttitle orders return emberrsvpall ordersgeteach orderitems account member model import ds emberdata export default dsmodelextend accounttype dshasmany accounttype async true addresses dshasmany address async true contacts dshasmany contact async true membershiptype dsbelongsto membershiptype async true communicationsavailable function var commsavailable thisget contacts foreach contact gt commsavailablepushapply commsavailable contactget communicationsavailable property contacts eachcommunicationsavailable joindate dsattr date name dsattr string orders dshasmany order async true prices dshasmany price async true suppliercode dsattr string order model import ds emberdata export default dsmodelextend account dsbelongsto account async true address dsbelongsto address async true collect dsattr boolean deliverydate dsattr date paymentdate dsattr date memberpurchaseordernumber dsattr string orderitems dshasmany orderitem async true ordernotes dshasmany ordernotes async true ordernotifications dshasmany ordernotifications async true orderstatus dsbelongsto orderstatus async true creationdate dsattr date", "num": "12488", "d": "10/2015"}, {"title": "calling watch property update cached value", "body": "record watched template computed property nt appear possible update cached value returned unless makes impossible use signal value property updated outside looks like branch code always checks value watched property however updated emberset jsbin reproduces issue", "num": "12484", "d": "10/2015"}, {"title": "inconsistent behaviour extendprototypesfalse", "body": "note behaviour appears prototype extension disabled return different arrays returns empty array returns non empty array due ember mixins injected native array looks like keys added array declared nonenumerable jsbin prototype extensions enabled cases empty array returned", "num": "12482", "d": "10/2015"}, {"title": "emberset clobbers computed property setters", "body": "jsbin would expect setter log console however setter code never gets run line emberset overrides existing property descriptor defined property otherwise ember tries copy value form property subclassing class edit computed setter gt setter setter es something different nt directly issue", "num": "12480", "d": "10/2015"}, {"title": "add options object deprecate calls missing", "body": "app working eliminating deprecations going end life using emberdebughandlerspolyfill filter anything noticing depcrecations provide options properties going list go one one fix adding options emberviewslibviewsviewjs line line emberviewslibviewscomponentjs line emberapplicationlibutilsvalidatetypejs line containerlibregistryjs line line emberruntimelibcontrollersobjectcontrollerjs line", "num": "12478", "d": "10/2015"}, {"title": "disallow using context property name", "body": "hello suggest disallowing least logging warning use property name granted smart use name generic one bit twice week debugging first occurence quite hard obvious context happened service named gets injected controllers routes components route query params refreshes model property named prevented model ever reloaded internal property name replaced service instance expected therefore method call throwing error appear console found copypasted default implementation didchangequeryparams putting something similar happened morning component time knew look easier know smart first place use name hand though nowhere said name used obvious warning error happens using since maybe property names blacklisted nt know hope clear enough misdiagnosed issue thanks time efforts making emberjs great piece software", "num": "12477", "d": "10/2015"}, {"title": "use hook didinsertelement", "body": "used emberjs version less used hook far function removed ember solution instead thanks", "num": "12476", "d": "10/2015"}, {"title": "computed properties broken", "body": "every computed property based something using broken upgrade two examples functions longer running expected attribute changed edited reflect stefanpenner comment", "num": "12475", "d": "10/2015"}, {"title": "helpers properties meta", "body": "meta information helper properties quite helpful case wonder removed case many helpers wrote application using meta information extract key used resolved value key question workaround", "num": "12474", "d": "10/2015"}, {"title": "infinite loop aborting query param transition opting refreshmodel", "body": "title says really aborting transition sends router infinite loop see jsbin hit go get call stack exceeded error thing happens surprising bad code routerjs", "num": "12473", "d": "10/2015"}, {"title": "adaptererror persisting despite route errorhook treatment", "body": "two jsbins identical except first uses ember data ember second uses ember data ember represent app enters route testroute tries get testmodel record model adapter fails get record rejecting promise adaptererror back route handle error transitioning servererror route although versions successfully transition servererror route second ember data see error console errorreportingpersistence seems breaking tests anybody able comment whether regression something wrong error handling route jsbin dumping console expected", "num": "12472", "d": "10/2015"}, {"title": "sortablemixin never deprecated", "body": "please deprecate sortablemixin ember patch noted workmanw never deprecated removed without warning", "num": "12470", "d": "10/2015"}, {"title": "applicationcurrentroutename nt change switching routes", "body": "appears stuck first route comes across name loading route setup working ember currentroutename appears stuck also seems causing trouble linkto component setting active current page turned logtransitions transitions complete without error", "num": "12469", "d": "10/2015"}, {"title": "component layout problem", "body": "get work overwriting component layout property nt seem anything ember import ember ember import layout templatestest export default embercomponentextend layout layout", "num": "12467", "d": "10/2015"}, {"title": "namespace vs component name hyphenation rule", "body": "currently check hyphenation component names fairly dumb means skirt rules defining component nested name lives namespace contains hyphen example component completely valid sure intended feature understanding component names meant hyphenated namespace case probably improved example jsbin cc nathanhammond", "num": "12466", "d": "10/2015"}, {"title": "devprod inconsistency emberobjectcreate hasownproperty super", "body": "hey today ran issue production builds broken ultimately caused minified builds behaving differently nonminified builds nonminified builds minified ones actually verified building environment nt making property assume minification issue nothing else might differ production development builds stumbled upon checking properties yes fishy nt think good idea yes changed code already inconsisteny somewhere remains show behavior prepared demo project completely empty project projects good run compare outputs br domme", "num": "12462", "d": "10/2015"}, {"title": "ca nt replace hasmany relationship", "body": "something like work", "num": "12461", "d": "10/2015"}, {"title": "emberstring underscore returns bad result", "body": "passing string current result expected result jsbin reproduce problem", "num": "12460", "d": "10/2015"}, {"title": "empty comment select tag causes problem nvda screenreader", "body": "see empty comment created inside select tag first child options like investigated bit found created first parent child null setnode function nvda screenreader read selected option gets confused comment comment removed way", "num": "12459", "d": "10/2015"}, {"title": "longer stubspy via sinon call ember", "body": "obviously relevant testing nt tested another stubbing library sinon example js class export default applicationserializerextend modelnamefrompayloadkey function key manipulate key code return thissuper key test test modelnamefrompayloadkey function assert var serializer thissubject var superspy sinonspy serializer super serializermodelnamefrompayloadkey user assertequal superspycalledwith user true given user passes user understand example little awkward run assertion returned couple instances il manipulate argument confirm manipulation correct actually happening call additional bonus mixin method call works expected used super method", "num": "12457", "d": "10/2015"}, {"title": "computedfilter longer works gt wrapped property", "body": "previous versions ember needed property recompute based second dependent key wrap filter like structure behavior previously new records added filter would run new record modified entire filter would rerun ember gt wrapping filter breaks behavior described additions occur filter run new record ui never updated show addition record versions ember could changed would recompute new additions made technique massive flaw addition made entire filter rerun happen list constantly added cause serious performance problems twindle showing issue replicate twindle play around start stop index see filter recomputing try add item see filter run", "num": "12453", "d": "10/2015"}, {"title": "new computed property gettersetter invalid embercli uglify", "body": "hey using object literal shorthands nt supported nt work leads build failed file assetsvendorjs unexpected token punc expected punc got change", "num": "12447", "d": "10/2015"}, {"title": "ember model property named type wrongly mapped", "body": "happens property value equal another model name example myappfoo dsmodelextend type dsattr string myappbar dsmodelextend type dsattr string given json ember data seems confused wo nt map correctly foo instance fields except id null renaming property something else fix problem apologies already loggeddocumented ps tested ember", "num": "12446", "d": "10/2015"}, {"title": "using rest arg version breaks hash version", "body": "specify string would set params array property location specify hash argument instead positional params assertion added triggered even nonhash params present javascript appfoobarcomponent embercomponentextend appfoobarcomponentreopenclass positionalparams allthethings demo", "num": "12444", "d": "10/2015"}, {"title": "api doc warn went away", "body": "emberwarn longer shows api doc website even though code comments still completely sure happened cause move documentation emberdebugwarnjs emberdebugmainjs shows could due order files processed doc process run pr moves doc main think ok doc would next place function registered via methods documented like main navigate back mean implementation reading imports", "num": "12442", "d": "10/2015"}, {"title": "initial load app work ember inspector open w ember", "body": "ember inspector open initial load ember app cause app fully load white screen death errorless hard refresh app ember inspector open also produce results closing ember inspector refreshing allow app load", "num": "12439", "d": "10/2015"}, {"title": "click event fire component button type button", "body": "hi creating component extends button using ember type attribute button click method called however comment type button works perfectly attribute import ember ember export default embercomponentextend tagname button attributebindings autofocus accesskey form formaction formenctype type formmethod formnovalidate formtarget name value contenteditable contextmenu dir draggable dropzone hidden id lang spellcheck style tabindex title translate disabled role targetform type button click alert click without attribute import ember ember export default embercomponentextend tagname button attributebindings autofocus accesskey form formaction formenctype type formmethod formnovalidate formtarget name value contenteditable contextmenu dir draggable dropzone hidden id lang spellcheck style tabindex title translate disabled role targetform click alert click", "num": "12438", "d": "10/2015"}, {"title": "uncaught typeerror read property reopen undefined", "body": "updated get typeerror downgrade back moment wanted let know cheers morgan", "num": "12437", "d": "10/2015"}, {"title": "doc beta deprecate warn handlers", "body": "x requires api documentation x requires api documentation x guides reviewed rwjblue seems reasonable add guide upgrade workflow ember proper however interested blocking beta blog post best resource along rfc implementation pr", "num": "12428", "d": "10/2015"}, {"title": "inconsistent behavior transitioning error substates", "body": "appear inconsistencies treatment error substates assume following route structure oddities arise attempting linkto transitionto error substate redirect one transition linkto transitionto behavior apptemplatesindexhbs linkto created target unuseddummyerrorpathrouteapplicationundefined linkto error error linkto route ca nt linkto without error thrown app loads though appears ember inspector linkto searcherror searcherror linkto linking directly error substates template probably useful feature likely nt supposed work however ember create nonfunctional link error substate ask attempt create link nontoplevel error route ember throw error links error substates nt allowed would good throw error indicates behavior exhibited attempting transition using case think makes sense allow manual transitions error substates instance redirecting transition strange behavior happens attempting manually redirect error substate transition example approutessearchnewjs beforemodel function transition ends going search error return thistransitionto error may wonder developer would want redirect error substates directly instead returning rejected promise described guides however use case ember provides indirect control error substate loaded promise rejected eg promise rejected beforemodelaftermodelmodel hook searchnew route searcherror template searcherror route always entered way load error route instead via promise rejection happens desired particular failure state reason allowing manual redirection transitions useful feature jsbin shows behavior described", "num": "12424", "d": "10/2015"}, {"title": "transitioning css class multiple links route", "body": "linking route different model links add class one sure right wrong seems definitely like bug transition ends none links one clicked remove small example click color switch subroute links go immediately red transition clicked color goes blue links stay red might related even duplicate", "num": "12419", "d": "10/2015"}, {"body": "believe duplicate sohara confirm close", "d": "10/2015"}, {"body": "rwjblue yeah correct missed somehow", "d": "10/2015"}, {"body": "sohara worries thanks testing feature get sorted shortly", "d": "10/2015"}, {"body": "cc machty", "d": "10/2015"}, {"body": "definitely seems like bug serabe happen time figure going", "d": "10/2015"}, {"body": "landed madrid plane still let take look weekend fri oct robert jackson notifications githubcom wrote definitely seems like bug serabe happen time figure going reply email directly view github", "d": "10/2015"}, {"body": "submit fix tomorrow", "d": "10/2015"}, {"body": "nt believe support stubbing super directly nt feature super language aware super wish test super chains mock ancestors method likely best way actually wire inheritance", "d": "10/2015"}, {"body": "please share versions using", "d": "10/2015"}, {"body": "version node npm os darwin", "d": "10/2015"}, {"body": "result", "d": "10/2015"}, {"body": "emberclibabel broccolibabeltranspiler broccolipersistentfilter embercliqunit broccolijshint broccolipersistentfilter emberfire emberclibabel broccolibabeltranspiler broccolipersistentfilter", "d": "10/2015"}, {"body": "broccolipersistentfilter likely fix issue please install latest versions", "d": "10/2015"}, {"body": "thank stefanpenner fixed", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "jakobud version embercli using", "d": "10/2015"}, {"body": "sudo npm install g embercli password usrlocalbinember gt usrlocallibnodemodulesemberclibinember embercli usrlocallibnodemodulesembercli processrelativerequire cleanbaseurl silenterror broccoliunwatchedtree pleasantprogress escapestringregexp isgiturl isbinaryfile emberclicopydereference broccoliwriter abbrev promisemapseries bowerendpointparser jsstringescape nodemodulespath walksync emberclipreprocessregistry exit semver temp rimraf rsvp stripansi ansiregex broccolisanewatcher broccolislowtrees symlinkorcopy copydereference broccolikitchensinkhelpers mkdirp broccolifilter mkdirp debug ms mergedefaults lodash requiresport github mime portfinder async mkdirp compression bytes vary onheaders compressible accepts findupsync glob rimraf glob cpr gracefulfs mkdirp rimraf markdownit linkifyit mdurl ucmicro entities argparse yam fsextra lodashmerge sane watch minimist execsh minimatch fbwatchman walker broccolimergetrees broccoliplugin broccolifunnel walksyncmatcher mkdirp broccoliplugin coreobject lodashnode emberroutergenerator recast mkdirp esperanto markdownitterminal ansistyles clitable cardinal lodashnode broccolicachingwriter broccolireadcompat coreobject lodashnode broccolisourcemapconcat mkdirp lodashuniq lodashnode broccolicachingwriter fastsourcemapconcat ember v future versions ember cli support please update node iojs version could find watchman falling back nodewatcher file system events visit info node npm os darwin installed via npm per instructions", "d": "10/2015"}, {"body": "warning wrong repository last version released warning works warning fixed master therefore gone new version released", "d": "10/2015"}, {"body": "oh sorry nt realize separate thing thanks", "d": "10/2015"}, {"body": "supposed return string returns instance given way invoking helper function directly comparing output definitely seems fine directly without calling likely unstable based platform chrome passes automatically calling guess tweak unit tests call result helper function make pass scenarios", "d": "10/2015"}, {"body": "thanks rwjblue solved object issue obvious pointed remaining issue regex line nt work phantom js chrome pretty sure unrelated ember close thanks", "d": "10/2015"}, {"body": "thanks reporting try jump evening someone else nt take crack first", "d": "10/2015"}, {"body": "think", "d": "10/2015"}, {"body": "believe setter return value cached strange yes maybe someday change", "d": "10/2015"}, {"body": "updated setter return value transformed boolean looks like problem related value refreshing page manually setting string setter invoked set set quite opposite first post", "d": "10/2015"}, {"body": "phcoliveira try create simple embertwiddlecom example shows bug", "d": "10/2015"}, {"body": "well really must something wrong would nt first complain nt create component service regular input helper type checkbox showing behaviour twiddle said previous post problem related value rather original value returned getter first invocation", "d": "10/2015"}, {"body": "got thought use since computed value nt depend property turns fine without still sure behaviour intentional nt computed property volatile nt depend anything else", "d": "10/2015"}, {"body": "quaertym think using hook instead use computed property like js import ember ember emberstrings hello bonjour export default embercomponentextend tagname input attributebindings prompt placeholder prompt embercomputed placeholder function let prompt thisget placeholder return emberstringloc prompt", "d": "10/2015"}, {"body": "pixelhandler fixes explain suddenly broke", "d": "10/2015"}, {"body": "pixelhandler points using cp correct several issues setting willinsert causes rerender occur render read set livecycle hook breaks bindings said appear indicate issue believe issue collision attribute passed placeholder property one changes attribute anything else maybe updated use everything works rwjblue thing come mind", "d": "10/2015"}, {"body": "yes believe bug op still change cp better sort thing bug basically seem use changes things wag grab attributebinding values calling setting run loop nt properly trigger dirtied updated", "d": "10/2015"}, {"body": "wag grab attributebinding values calling willinsertelement setting run loop nt properly trigger dirtied updated ya likely issue although would prefer users use functionality seem like bug cc tomdale wycats", "d": "10/2015"}, {"body": "stefanpenner take look one", "d": "10/2015"}, {"body": "think fixed cc tomdale wycats may another edgecase memory leaking lanbale confirm still leak master also storying state prototype extremely dubious please store state instances", "d": "10/2015"}, {"body": "cloned project confirm fine latest master went back tried beta builds looks like fine latest incremental build thanks pointers", "d": "10/2015"}, {"body": "rwjblue memory serves backported fixes", "d": "10/2015"}, {"body": "applied canary build project discovered memory leak whilst leak dramatically smaller still apply suggested improvements try isolate another simple test demonstrate remaining leak", "d": "10/2015"}, {"body": "tried latest also exhibits leak", "d": "10/2015"}, {"body": "ianbale demonstrate leak isolated latest releasemaster would great", "d": "10/2015"}, {"body": "best took fair isolate one working big project handles huge amount data fresh load browser using according chrome task manager isolating one issue like far easy seeing pretty much straight line memory use seeing saw tooth larger drops unfortunately still steady upward climb terms retained memory whereas discarding objects pretty much rate creates ought holding relatively steady around instead steadily climbs slows crawl dies want post back demo create new ticket either way likely days get another demo together since idea hand replicate outside application thanks help ian", "d": "10/2015"}, {"body": "tried latest also exhibits leak latest ember version series rwjblue memory serves backported fixes yes known memory leak fixes backported branch", "d": "10/2015"}, {"body": "tried sorry got far jumped", "d": "10/2015"}, {"body": "yes known memory leak fixes backported branch thanks tried sorry got far jumped suspect primary leak fixed try curious secondary one mentioned please confirm provide reproduction latest versions specific release line", "d": "10/2015"}, {"body": "hi trying find cause looked like another memory leak found problem code essentially old objects destroyed always time number unexpected objects growing consuming extra memory combination fixing latest code suggested results pretty static memory use expect many thanks help ian", "d": "10/2015"}, {"body": "fact nt work seems like regression think make docs correct", "d": "10/2015"}, {"body": "possible make helper auto generate verbose version", "d": "10/2015"}, {"body": "briefly looked internals see would done seems like straightforward add defaultqueryparams routenamehere something helper using existing primitives would basically return hash represents default values", "d": "10/2015"}, {"body": "rwjblue seem like something someone knowledge ember code base could tackle id happy try help", "d": "10/2015"}, {"body": "one way get knowledge try leave breadcrumbsnotes tomorrow morning", "d": "10/2015"}, {"body": "rwjblue perfect also emberatx thursday well think minutes would rather way", "d": "10/2015"}, {"body": "djhedgehog nt believe inclined suggest gitter official linking prominently however link slack irc community resources think would great place call gitter", "d": "10/2015"}, {"body": "oh nt know slack channel either could either one badge repo lot people never see communitypage homepage", "d": "10/2015"}, {"body": "seems good idea indicate prominently readme", "d": "10/2015"}, {"body": "djhedgehog mind submitting badge readme entry pr", "d": "10/2015"}, {"body": "problem badge height related slackin deployments heroku try find fix keep updated", "d": "10/2015"}, {"body": "example left slackin badge pointing left one socketio", "d": "10/2015"}, {"body": "ofbriggs best guess commit days ago addresses behavior around perhaps chancancode rwjblue answer question", "d": "10/2015"}, {"body": "doubt commit changed particular behavior personally agree seems better propagate rsvp although sure exactly changed might looking something related next week routes instrumentation one else figured might uncover part work", "d": "10/2015"}, {"body": "seems like internals handling rejection considered bug rejection handled turn propagate", "d": "10/2015"}, {"body": "right line supposed ie line nt actually set value element however order attributes reverted work results swapping order max value attributes", "d": "10/2015"}, {"body": "believe may ie bug reproduced outside ember jsbin guess nothing luckily nt mind swapping attributes around want close something think", "d": "10/2015"}, {"body": "great job tracking issue unsure actually ember bug point seems like ie one attribute ordering matters specific browser sure think best thing might try provide compile time assertion even seems like bit stretch", "d": "10/2015"}, {"body": "rwjblue agree definitely looks like ie bug see third comment going raise ms edge team affected well nt believe actually get fixed ie hopes edge hopefully discovered people see ever happens swapping order attributes really nt big deal see acceptable workaround", "d": "10/2015"}, {"body": "raised ms", "d": "10/2015"}, {"body": "things noticed experiment took heapsnapshot two consecutive runs looked difference two snapshots even though running test resource discovery mode template strings object allocation highest per instance rather application container atleast saw object allocations entire router per instance nt application level try run tests simpler scaled app", "d": "10/2015"}, {"body": "first thing seems odd possibly easy deal confirm using version beta also confirm objects leaking since using fastboot using contextify", "d": "10/2015"}, {"body": "confirm using version beta channel include optional features including api running channel either way value would helpful tracking exactly commitsha used", "d": "10/2015"}, {"body": "chancancode running canary tests last time checked using node vm module directly", "d": "10/2015"}, {"body": "hope trolling oop harmful", "d": "10/2015"}, {"body": "yes using node vm module contextify", "d": "10/2015"}, {"body": "kratiahuja comment think somehow bar templates registry set", "d": "10/2015"}, {"body": "believe using one duplicates large swaths things putting extra pressure gc memory serves using contextify aimed mitigate", "d": "10/2015"}, {"body": "replicate steps containers less expected full suite ran appears maybe someone else demonstrate", "d": "10/2015"}, {"body": "actually let retry swear got leak yesterday testing however perhaps made mistake let come back get right", "d": "10/2015"}, {"body": "julkiewicz also possible noticed issue older version several libs spent time last months trying squash leaks possible already fixed one encountered", "d": "10/2015"}, {"body": "going close gladly reopen reproduction provided", "d": "10/2015"}, {"body": "somewhat expected making properties nonenumerable extremely slow guess would expect still dev vs prod", "d": "10/2015"}, {"body": "curiosity behavior differ two environments", "d": "10/2015"}, {"body": "idea taking alook", "d": "10/2015"}, {"body": "alright guess closed thanks rapid response", "d": "10/2015"}, {"body": "similar issue", "d": "10/2015"}, {"body": "identified fixed", "d": "10/2015"}, {"body": "like release soonish using latest channel builds fix", "d": "10/2015"}, {"body": "oh excellent thank", "d": "10/2015"}, {"body": "rwjblue yup forgot one", "d": "10/2015"}, {"body": "likely something reproduction example app would really make actionable suspect related arrayproxy issues reported lately gt", "d": "10/2015"}, {"body": "thanks stefanpenner would posted straight away findall seemed returning data would expect wanted quick opinion first posted", "d": "10/2015"}, {"body": "ok try put example app together nearing end working day uk may monday finish post link", "d": "10/2015"}, {"body": "stefanpenner example app shows login username password work click members top right click b company click orders button see links orders click orders top right see orders checking network tab shows orders came back api came back findall load successfully shows orders let know see bug need information", "d": "10/2015"}, {"body": "bmac take look together", "d": "10/2015"}, {"body": "currently expected behavior objectdefineproperty used marks nonenumerable extremely slow compared property arrays ca nt subclassed extendprototypesfalse currently must apply custom methods every array shared prototype result prohibitively slow planned work improve situation quite bit work eventually finish although ideal nt considered bug im going close", "d": "10/2015"}, {"body": "thanks good luck fwiw future readers comment led good read methods respective caveats trying extend arrayprototype kangax tl dr hidden property etc fail using works nonstandard", "d": "10/2015"}, {"body": "thanks writing definitely seems like bug", "d": "10/2015"}, {"body": "working one", "d": "10/2015"}, {"body": "need sleep continue", "d": "10/2015"}, {"body": "want work backporting values gladly merge provide way match via", "d": "10/2015"}, {"body": "would still figure untils add matchmessages", "d": "10/2015"}, {"body": "rwjblue guess depends many think ton yeah maybe workflow faster otherwise fix pretty quick figure go away", "d": "10/2015"}, {"body": "got ambitious today fixed unoptioned deprecations seeing started using emberclideprecation workflow", "d": "10/2015"}, {"body": "would nt better write eslint rule instead", "d": "10/2015"}, {"body": "well think eslint rules reserved everything related language framework internals opinion long developper gets notified use property name nt really care done", "d": "10/2015"}, {"body": "ksol seems like reasonable proposal think preferece use use rfc issues propose rough idea would consider opening suggestion rfc issue", "d": "10/2015"}, {"body": "think request halfway feature bug case far rough idea rfc seems little overkill anyone core teamissue team tells gladly", "d": "10/2015"}, {"body": "ksol issue bug idea help creating bugs apps looks like enhancement think falls requesting feature rfc issues feature requests nt need rfc proposal simply issue", "d": "10/2015"}, {"body": "didinsertelement hook continues exist components able use please note qa better directed stackoverflow better venue discussions would like keep issue tracker focused bug reports", "d": "10/2015"}, {"body": "provide jsbin similar demonstrate issue isolation also little things hopefully prevent future confusion nt observers computed properties nt fire rather two marked dirty someone interested consume someone like active template chooses", "d": "10/2015"}, {"body": "wonder related", "d": "10/2015"}, {"body": "js bin added broken computed property kuzirashi js bin", "d": "10/2015"}, {"body": "may related cc krisselden", "d": "10/2015"}, {"body": "likely patch plan wait", "d": "10/2015"}, {"body": "also looking guidance whether get patched looking fix anything novice help move things along please let know", "d": "10/2015"}, {"body": "gcassie nt time really dig fix proposed definitely depending invasive could backport needed first step someone needs figure fix bug", "d": "10/2015"}, {"body": "know link docs shows meta property help public api", "d": "10/2015"}, {"body": "raised question embercommunityslackcom needhelp channel", "d": "10/2015"}, {"body": "understanding correctly information public may good demonstrate trying accomplish stackoverflow cross link maybe someone help", "d": "10/2015"}, {"body": "sorry wasting time thank", "d": "10/2015"}, {"body": "francisperp workaround using another route hook abort avoid infinite loop created combination queryparam change willtransition use see alternative implementation using hook locks may documentation concern case query param refresh willtransition used infinite loop created avoided using another hook abort transition eg", "d": "10/2015"}, {"body": "pixelhandler thanks guidance good know work however use case handling transitions hook application route bubbles active routes interact bubble many reasons implementing kind global transition block example actually hacked together solution use case involved overwriting part router prototype took hours spending much time router code seems need deep refactoring right way cause bug code overly stateful circular point functions return values may may registered recursive call abort set", "d": "10/2015"}, {"body": "wondering addressed bug nt think permission label one", "d": "10/2015"}, {"body": "samcic asked question emberdata andor needhelp channel also see jsbin examples catching error using", "d": "10/2015"}, {"body": "wanted add experiencing behaviour bug also appears reported point comment rwjblue", "d": "10/2015"}, {"body": "oh hey bandwidth afternoon let get", "d": "10/2015"}, {"body": "vatosteve would mind creating working example using", "d": "10/2015"}, {"body": "vvsalmin yes bug regression layout using another template working", "d": "10/2015"}, {"body": "vvsalmin guess chat last week slack rwjblue ideas determining behavior actually correct desired behavior", "d": "10/2015"}, {"body": "thanks answer found workaround slack extended component rather using dynamic template think issue still bug", "d": "10/2015"}, {"body": "yes dash last slash likely path take also original idea enabled corresponding check strengthened identified component name last likely considered purely namespace sorts unfortunately suspect would breaking change potentially worth warningdeprecating wycats rwjblue related component amp pods story input would appreciated", "d": "10/2015"}, {"body": "worth think would good tighten behavior deprecation period make changes needed also another side effect current check also valid components", "d": "10/2015"}, {"body": "confirmed running debug prod builds without minification running minified builds", "d": "10/2015"}, {"body": "ok tracked issue check see function contains attempting super wrap given method saves quite bit extra super wrapping functions need unfortunately number platforms support support calling attempt detect fall back always super wrap everything mode roughly code detect call get original source works perfectly development builds unfortunately minified take look minified source see note minifier stripped trailing semicolon function body attempting check sadly check still contains semicolon tldr super wrap every function uglified builds", "d": "10/2015"}, {"body": "suspect may related emberdata likely issue posted", "d": "10/2015"}, {"body": "new issue", "d": "10/2015"}, {"body": "seems working expected note example may write custom method", "d": "10/2015"}, {"body": "duggiefresh works examples described doc usecase work well", "d": "10/2015"}, {"body": "inclined think bug would expect following gt gt ensures funky acronyms work like becomes also activesupport underscore rails works question treat bugfix semver violation", "d": "10/2015"}, {"body": "stefanpenner seems ok means initialisms must greater chars get split via underscore common example might issue today returns suggestion would expect return", "d": "10/2015"}, {"body": "suggestion would expect return cc suggestion", "d": "10/2015"}, {"body": "rails problems personally prefer version ember underscore", "d": "10/2015"}, {"body": "underscore https gt strange dislike p", "d": "10/2015"}, {"body": "stefanpenner suggesting special case made", "d": "10/2015"}, {"body": "bcardarella think stefanpenner proposing underscores occur case changes changes https https underscore whereas https underscore would gt", "d": "10/2015"}, {"body": "unsure make change would make everyone happy break things also unsure specific proposed change though rlivsey said sounded pretty good think may warrant specific rfc walk various permutations", "d": "10/2015"}, {"body": "passing optional parser customize strategy sunday october robert jackson notifications githubcom wrote unsure make change would make everyone happy break things also unsure specific proposed change though rlivsey said sounded pretty good think may warrant specific rfc walk various permutations reply email directly view github brian cardarella ceo dockyard visit us call us dockyrd follow twitter follow us twitter", "d": "10/2015"}, {"body": "whoa sounds like bug nvda sure report even possible although work likely work around", "d": "10/2015"}, {"body": "wanted check significance comment actually removed nt serve purpose", "d": "10/2015"}, {"body": "sharadjay started using comments hold empty dynamic slots used use empty text nodes chrome bug", "d": "10/2015"}, {"body": "though maybe screen reader assuming firstchild option firstelementchild", "d": "10/2015"}, {"body": "krisselden yes issue way handle", "d": "10/2015"}, {"body": "please share reproduction seeplay without example would guess sort conditional listing options pretty common using prompts empty emit comment node thought without empty section nt render empty comment", "d": "10/2015"}, {"body": "rwjblue select components template causes need reproduce confirm sharadjay nt use select component use", "d": "10/2015"}, {"body": "krisselden last two stable releases ember include default select implementation would like confirm version ember select implementation actually used", "d": "10/2015"}, {"body": "rwjblue sounds good reason said confirm screenshot see emberselect class name know old select component block start options likely causing issue", "d": "10/2015"}, {"body": "gotcha yeah assumed related top prompt pretty common seems like issue easy work around using emberselect die horrible death", "d": "10/2015"}, {"body": "yes see good workaround thank krisselden", "d": "10/2015"}, {"body": "spying nt something support suspect wont fix", "d": "10/2015"}, {"body": "agreed davidcasagrande suggest simply using different parent class asserting samenamed method parent class called", "d": "10/2015"}, {"body": "behavior change introduced change causing issue spying prior versions value always function object called upstream function pr set upstream function directly means spy sinon adding replaced soon call function super wrapped pr fixed number issues much easier debug seems unlikely would revert behavior change", "d": "10/2015"}, {"body": "rwjblue pretty much assumed going looking changelog thx confirming mixonic solution makes sense def work use cases lingering concern behavior happening spyingstubbing class nt method defined guess user error haha would value added throwing warning user making unnecessary call", "d": "10/2015"}, {"body": "also worth noting also unobservable way basically accident implement userspace even observable", "d": "10/2015"}, {"body": "describe seems working expected large datasets maybe need use alternative data structure custom cp", "d": "10/2015"}, {"body": "ember twindle appears using ember feature worked properly sure get twindle use ember gt edit updated twindle fix error", "d": "10/2015"}, {"body": "looks like managed get use ember showing issue updated twindle sorry stupidity part", "d": "10/2015"}, {"body": "kilowhisky minor pedantic correction", "d": "10/2015"}, {"body": "correct", "d": "10/2015"}, {"body": "new records added model filter would run new record functionality longer part macros existing functionality riddled bugs primary goal feature maintain stable arrays view would nt entirely rerender glimmer provides much simpler model likely future utilizing microlibrary give people better tools work extremely large datasets", "d": "10/2015"}, {"body": "oh thought removed mean longer supported either ember wondering acceptable replacement actively filtering array", "d": "10/2015"}, {"body": "mean addarrayobserver longer supported either ember nope still oh thought storefilter removed computedfilter still around although performance characteristics different likely good large lists much better scenarios appear bug report longer would like recommend posting stackoverflow cross linking", "d": "10/2015"}, {"body": "prope embercomputed title get key return key nt valid syntax must either lt syntax lt syntax appears merged two", "d": "10/2015"}, {"body": "ohh shame ca nt note self nt try figure errors work haha thanks sorry", "d": "10/2015"}, {"body": "note self nt try figure errors work without beer", "d": "10/2015"}, {"body": "believe may better opened emberdata repo describe handle entirely data layer", "d": "10/2015"}, {"body": "oh bad", "d": "10/2015"}, {"body": "fabienbk problem project starts ends nt always obvious", "d": "10/2015"}, {"body": "rwjblue believe true input would welcome think discussed working agreed behavior intentional", "d": "10/2015"}, {"body": "entire point optional invoke long hand version work exactly used positional params using example one tests added invoking component three lines result exactly attrs example works properly today test added simply confirmation changes named version made using rest argument version exactly concept use positional params want use hash arguments", "d": "10/2015"}, {"body": "discussed working component agreed behavior intentional thinking discussion lead added assertions use hash argument named positional param assertion still desired behavior makes named rest versions api regard", "d": "10/2015"}, {"body": "sounds good", "d": "10/2015"}, {"body": "fix merged closing issue", "d": "10/2015"}, {"body": "thank reporting try dig tonight", "d": "10/2015"}, {"body": "likely issue", "d": "10/2015"}, {"body": "issue fixed issue caused id attributebindings", "d": "10/2015"}, {"body": "please share reproduction info reproduce", "d": "10/2015"}, {"body": "thank answering grabbed following file emberjs builds page embertemplatecompilerjs emberdebugjs emberdataminjs called exact order markup rest js indexhtml called markup three scripts use embercli starterkit way stripped code following minimum still get error lt gt welcome emberjs lt gt outlet app app emberapplicationcreate basic logging eg transitioned post logtransitions true append claimcheck app rootelement content router approuter emberrouterextend rooturl entschaedigungpruefenneu approutermap function routes appindexroute emberrouteextend model function return red yellow blue brown call rooturl get error hopefully enough help solve issue cheers morgan", "d": "10/2015"}, {"body": "morgaan bug ember may good idea start using ember cli soon created jsbin show setup content element well reopen approuter set rooturl see", "d": "10/2015"}, {"body": "hi thank feed back struggling bit newbie came across awesome resource rock roll emberjs book book using ember cli loving cheers morgan ps think close issue", "d": "10/2015"}, {"body": "bandwidth amidst north carolina rain weekend work", "d": "10/2015"}, {"body": "awesome thank please feel free ping slack questions", "d": "10/2015"}, {"body": "got progress hope pr end day tomorrow planning emberdebug class doc explanations new function something like", "d": "10/2015"}, {"body": "sounds great", "d": "10/2015"}, {"body": "api docs added new handlers deprecation guides added new properties required friends reviewed guides repo usage none ember inspector section talks deprecations linking back deprecation guide think still perfectly correct mixonic add issue guides repo fleshing process tackling deprecations", "d": "10/2015"}, {"body": "mixonic think issue resolved please confirmclose agree", "d": "10/2015"}, {"body": "toddjordan thanks much hand weekend really really appreciate back", "d": "10/2015"}, {"body": "happy help", "d": "10/2015"}, {"body": "aquamme seem documentation errors states indicates states intended support failed promises also indirectly suggests used explicitly transition error state either template code via transitionto attempting linkto transitionto error substate redirect one transition opinion necessarily happy path using error states route links error substates nt allowed would good throw error indicates may case alternative jsbin implementation error handling since specific documentation explicitly transition promise failure error states routes may want define routes error pages example router may define page error state another route could transition route code could transition route including linkto", "d": "10/2015"}, {"body": "also indirectly suggests used explicitly transition error state either template code via transitionto indirect suggestion nt notice smiley discovered error substates transitioned model provided eg also works linkto helper updated jsbin examples behavior manual transitions error substates intended feature descriptive error thrown model included attempting transitionlink error substate model optional manual transitions disallowed descriptive error thrown error substate manually transitionedlinked either way think good update guides document glad submit pr correct behavior determined alternative jsbin implementation error handling implement workaround drawback url updated reflect transition error route user refreshes shown error may longer relevant using built error substate instead would mean user could refresh brought back last known good position application flow point try", "d": "10/2015"}, {"body": "topaxi yeah seems like bug css class seems sticky html clicking links order red yellow blue class gone transition done right html red yellow blue", "d": "10/2015"}, {"body": "pixelhandler yes definitely gone transition", "d": "10/2015"}, {"body": "far tell based mdn article dom documentation valid value attribute guess kind coercion setter nt", "d": "10/2015"}, {"body": "submitted potential solution", "d": "10/2015"}, {"body": "think bug embercli special case application serializer", "d": "10/2015"}, {"body": "rbemis part emberqunit repo serializer associated model test serialization nt use embercli blueprint serializer test expects factory exist generated test case generated serializer test application default blueprint assumes related model serialize hence lookup model application nt exist appmodelsapplication module however tests application serialize wo nt need serialize application model change import quit instead emberquint best guess may want test application serializer assert type jsonapi bug ember embercli emberquint", "d": "10/2015"}, {"body": "deprecation guide still needed weekend", "d": "10/2015"}, {"body": "deprecation guide entries done calls updated show url following pr", "d": "10/2015"}, {"body": "closing believe items addressed mixonic please reopen see something missed", "d": "10/2015"}, {"body": "understand reason hooks attrs property docs intentional considered publicfinalized yet primarily usable without glimmercomponentangle bracket components using component life cycle hooks since post", "d": "10/2015"}, {"body": "solutions problem facing think real scenario still need share queryparams controllers", "d": "10/2015"}, {"body": "added list thanks", "d": "10/2015"}, {"body": "stefanpenner progress know got weakmap rfc pr unfortunately move issue resolved", "d": "10/2015"}, {"body": "vacation take look sunday feel free pester sunday p", "d": "10/2015"}, {"body": "hehe thank know million things plate happy help work want delegate seems weakmap may require low level emberjavascript knowledge nt possess", "d": "10/2015"}, {"body": "pr needs feature flagging public api cycles spare would push edge", "d": "10/2015"}, {"body": "shameless bump root cause issue customer reported us still would really love get fixed", "d": "10/2015"}, {"body": "take care backport nt time workmanw care submit pr backporting backburner", "d": "10/2015"}, {"body": "stefanpenner give little bit direction happy seems fixed backburner backburner seems pulled via bower pr simple updating bowerjson", "d": "10/2015"}, {"body": "pr simple updating bowerjson yup", "d": "10/2015"}, {"body": "fix back ported", "d": "10/2015"}, {"body": "noslouch could also try queue", "d": "10/2015"}, {"body": "exact issue issues inside initial load started getting error fine somehow query params persisted app behaves expected weird thing error phantom chrome", "d": "10/2015"}, {"body": "kmiyashiro exactly problem upgrading", "d": "10/2015"}, {"body": "btecu first two things seem like documentation things pr would welcome btecu last thing seems like legit bug nt know exactly work top head", "d": "10/2015"}, {"body": "understand hooks called bottom hooks called top making specific proof concept project way precisely reverse ie parent child child parent alternatively something like afterdestroy queue could get problem solved ideal", "d": "10/2015"}, {"body": "thanks indeed helps get working", "d": "10/2015"}, {"body": "came across issue need case css class applied change depending block", "d": "10/2015"}, {"body": "new ember spent last hour tracking one unsure recent convert angular used available right still sure actions feel mean nt even know search regardless adore framework coming angular everything feels well thought far consistent edit actions required post giving feedback", "d": "10/2015"}, {"body": "rwjblue morganick got bitten missunderstanding following correct though simplified guideline use form input component usecase vs observe values inputs checkboxes w actions keep clickevent updating checkbox checked property note observer checked fire checkbox checked property ca nt accessed also note binding way breaks typical checkbox toggling behaviour input types event supported embertextsupport otherwise also think change actions amp checkboxes section imo way register action handler access checkbox checked value reliably use form check action handler also noticed behave differently first one passes eventlistener second one nt intended", "d": "10/2015"}, {"body": "query params ember effectively broken confused ps canary subj title stable", "d": "10/2015"}, {"body": "issue", "d": "10/2015"}, {"body": "also problem browsers query params computed property getset specified", "d": "10/2015"}, {"body": "ran issue", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "came core team discussion initial default values query params always intended statics language nt give us ability express nt tests around using computed property nobody thought people would use way machty said honestly nt expect work might accident like understand using app basically using computed property way worked coincidentally cases change removed cases however using computed property way likely introducing insidious edgecasey bugs interactions query param controller value looked controller controller single instance see relevant code changes accept pr fixes also included enough tests demonstrating nt weird interactions query params controller query param property computed property could include next release people migrating would nt carry behavior definitely wo nt possible various upcoming router changes rlivsey solution allow people avoid", "d": "10/2015"}, {"body": "fair enough would good nice descriptive error message pointing people right direction amp making clear bug take stab shortly pointers advice detect cp used way would great", "d": "10/2015"}, {"body": "anyone interested tried basic example jsbin seems work fine", "d": "10/2015"}, {"body": "closing views deprecated yet look whether affects components well", "d": "10/2015"}, {"body": "added ability run performance tests multiple versions ember show graphs latest numbers complex list benchmark", "d": "10/2015"}, {"body": "gavinjoyce thank hard work emberperformance", "d": "10/2015"}, {"body": "minutes wasted issue silent error impossible find glad found issue end solution use dashes like stefanpenner stated", "d": "10/2015"}, {"body": "probably wise set failing tests order stimulate development solving issue", "d": "10/2015"}, {"body": "probably little late scenario works fine ember app", "d": "10/2015"}, {"body": "app grows becomes bigger bigger headache started manual binarysearch templates removing half time find source warning time consuming errorprone would also love update anyone way add context error", "d": "10/2015"}, {"body": "wkoffel stick breakpoint deprecate function called work back trace able find element causing", "d": "10/2015"}, {"body": "using backtrace worked splendidly none method names useful frames found function variable set information helped track problem thanks", "d": "10/2015"}, {"body": "one achieve result pre", "d": "10/2015"}, {"body": "support added embertesthelpers little back supports ember", "d": "10/2015"}, {"body": "rwjblue sadly writing acceptance tests thisregistry defined", "d": "10/2015"}, {"body": "rwjblue ran issue today component html page source painted elements within fo still svg change add components template amp fo rendered appears tag set component fo namespace never reset", "d": "10/2015"}, {"body": "also like weigh addition would great able pass simple use case would example filter bar multiple different options etc typically want clear currently way would would uhhhhh verbose could assign would help still redefine every query param ton duplication remember add new one rename one need go back clear link multiple clear links addchange would great could instead say know simply remove query params url", "d": "10/2015"}, {"body": "jfelchner agree verbose simply unsetting every query param null might unintended consequences especially reaching query params owned controller likely compromise find open new issue address close one fixed", "d": "10/2015"}, {"body": "literals added htmlbars working exactly sure version suspect fixed", "d": "10/2015"}, {"body": "resolved", "d": "10/2015"}, {"body": "way working around find performing asynchronous behavior outside transition ajax request use app code set promise properties application objects look tests like answer guides say async helpers aware wait asynchronous behavior within application making much easier write deterministic tests yet wait async behavior complete found reading source code would happy submit pr docs makes clear async helpers wait async behavior hope ideal solution ca nt write deterministic acceptance tests without solving", "d": "10/2015"}, {"body": "also curious published generic waiter nonajaxbased models fix acceptance testing emberfire emberpouch etc submitted pr wrap emberfire login process testaware seems like trying plug async holes onebyone may losing game nt really applicationlevel concern cases stefanpenner still think tracking promises returned action reasonably unlikely break anything sufficient cover manymost use cases may able take crack writing rfc next week", "d": "10/2015"}, {"body": "still think tracking promises returned action reasonably unlikely break anything sufficient cover manymost use cases yes possible potentially something support via addon start cut breaking may able take crack writing rfc next week", "d": "10/2015"}, {"body": "ran thanks ehntoo workaround", "d": "10/2015"}, {"body": "reemasaluja rwjblue fwiw think related case experienced issue updating backburnerjs seem resolve issue see emberjsemberjs", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "hello exact issue working sails backend using linkto data pages one come one linked data refresh page anyone find reason", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "rosshadden still stage many improvements made spec", "d": "10/2015"}, {"body": "rosshadden yes agree wycats push aspects spec benefit day day forward infact decorator spec largely championed wycats", "d": "10/2015"}, {"body": "kimroen move bit also parent route work expect", "d": "10/2015"}, {"body": "yes please", "d": "10/2015"}, {"body": "ran spent lot time get blank page error warning computed property used work lt breaks gt", "d": "10/2015"}, {"body": "stefanpenner like said inherits would nt make sense fulfill api highlighted original post imo violates inheritance guys happy discrepancy great otherwise please consider reopening issue confusing hell", "d": "10/2015"}, {"body": "discrepancy javascript accomplishes inheritance via two prototype chains class side instance side js function promisesubclass promisesubclassprototype objectcreate promiseprototype instance side thencatch promisesubclassproto promise class side resolverejectraceall objectsetprototypeof promisesubclass objectgetprototypeof promise class side resolverejectraceall sugars ultimately thing less syntax js class subclass extends promise unfortunately ember predates accomplishes exact js feature somewhat manually creating two first class prototype chains mixin class mixin instance semver allows platforms improve plan use platform provided machinery full example js emberobjectextend adetectinstance acreate true adetect acreate false adetect true b aextend bdetect false adetect b true adetectinstance bcreate true bdetectinstance bcreate", "d": "10/2015"}, {"body": "actually say believe demonstrates observable discrepancy given examples feel free point issues additional scenarios fit described model", "d": "10/2015"}, {"body": "stefanpenner really appreciate comprehensive answer however nt believe addresses inconsistency mentioned previously perfectly understand need two prototype chains consequence need two apis check inheritance class side instance side questions asked however like object least conceptually quote words class inherits mixin would make sense embraces api fullest extent would otherwise constitute violation contract set forth albeit conceptual seem case today provides following api provides following api notice signature changed accepting accepting inconsistency trying highlight would nt possible mixins classes implement following api", "d": "10/2015"}, {"body": "notice signature detect changed accepting instance accepting class inconsistency trying highlight signature changed example uses disambiguate two separate mixin hierarchies accepts object returns true object descendent given false would nt possible mixins classes implement following api mixins building block used implement classes specifically mixin concept construct implementation detail class note composition several mixin hierarchies analogy could edge vs polygon true related polygons composed edges edge concept multiple edges could composed create polygon relationship defines polygon look class coreobject today see many mixin describes relationship relationship essentially defines class although plausible consider mixins morphing something else unlikely pursue mixins ember exist largely due amp existing runtimes features landed continue land case need dual inheritance class side instance side userland super chains evaporate active aligning new features js ember someday hopefully sooner rather later remove parts ember changing works today ways continued alignment javascript likely great idea", "d": "10/2015"}, {"body": "stefanpenner understand concept still believe way internals laid preclude good public api remember ember users aware internals aware use mixins interfaces andor traits ember sets example etc let conclude rephrasing original request yet another form suppose achieve following without using private apis", "d": "10/2015"}, {"body": "seems case query params wo nt cached way expecting least prepared little quick demo show case checkout steps reproduce first need initialize query parameters route clicking set query params button take little bit time query param setup refresh route model delay hook simulate heavy http request make sure query changed try navigate child routes clicking child child links query param picked cache expected lets make transition route call used intentionally case change route query params clicking transition route different query button take time make sure route query params updated lets navigate child routes clicking child child links query param wo nt picked cache url wo nt contain query kind unexpected diving debug noticed query params change action called transition route step new query param cached old route sources tested verified canary version", "d": "10/2015"}, {"body": "ember piotrze solution almost worked use instead router code actions queryparamsdidchange function emberrunnext refresh", "d": "10/2015"}, {"body": "jamesarosen would great addition happy saw fix works boat", "d": "10/2015"}, {"body": "pretty old curious progress", "d": "10/2015"}, {"body": "stefanpenner weird problem workaround wo nt work app tried making twiddle must something specific debug call end code like function superfunction var func thisnextsuper var ret trouble ends undefined even workaround idea maybe fixed recent version hence works twiddle fwiw got work calling incredibly dirty edit might related change chance backporting nt realize choose dependency versions twiddle version works one nt", "d": "10/2015"}, {"body": "meirish nice one", "d": "10/2015"}, {"body": "wycats willing help bring hot reload embercli ecosystem would help revisit commit jan done today ember make happen", "d": "10/2015"}]