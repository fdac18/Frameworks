[{"title": "documentation rationale event callback signatures", "body": "wondering rationale couple elements backbone design events callback method signature whereas thinking situation desirable use callback types change events would helpful always passed position pass new value attr name model passed anyway attr name want new value trivial call current setup straighforward way get attr name seems callback received attr name instead value would open dynamic possibilities using callbacks multiple attributes case nt think documentation good job explaining eventually went thoroughly found information different callback signatures think mentioned section either inline via link submitted pull request links faq gt catalog events section", "num": "1361", "d": "5/2012"}, {"title": "trigger change event bug", "body": "code expect nothing name changed description event nt triggle set name triggle set attribute without", "num": "1358", "d": "5/2012"}, {"title": "modelfetch calls url returns empty array yet empty model created", "body": "hi description simple backbone modelcollection thing going application initialize like javascript var models contains backbone models sort global dictionnay document ready function modelsimagescollection new imagescollection ownerid context jsp page el expression modelsimagescollectionfetch javascript var img backbonemodelextend var imagescollection backbonecollectionextend model img url damimageviewlist initialize function annonceurid thisurl annonceurid fetch collection calls url url may return two things depending value variable http status array json object mime type applicationjson http status ressource identified variable value exists body request empty array like contenttype applicationjson error last case empty array weirdest thing happen backbone creates one model collection model attributes results page showing one item one item empty attributes pretty use html templates populate view models one model case even empty array guess backbone bug somewhere well server returns empty array creating one model empty array workaround using error callbacks collection hacking framework reproducce hardest part reproduce need server serve urls reproduceblabla gt returns http json mime type non empty array json objects array must size strictly superior one gt returns http json mime type empty array use html page change scripts includes course switch line value changeme blabla see value console outputs never equals html", "num": "1356", "d": "5/2012"}, {"title": "unable bind event view event using parent gt child selector", "body": "love backbonejs little shocked currently nt way bind view method event happens one viewel immediate children let explain usually define events view view backboneview dosomething function works fine encounter situation want immediate children elementsmain click event good example tree data like see every element could potentially elements child holds elements using view declaration binding click event element would binding click event every element tag entire tree element represented actual element dom cause number problems undoubtedly methods use current view dom object viewel possible trigger event could change wrong object next logical step declare something like usually define events view view backboneview dosomething function notice greater sign used jquery parent gt child selector order try pinpoint immediate children nt work jquery delegate function used viewdelegateevents call bound methods correct context play nicely parent gt child selector lot really terrible workarounds broke things like calling estopimmediatepropagation eventual solution putting initialize method view anyway seems like pretty basic feature ask anyway get fixed experienced enough feel attempt tackle mainly wondering issue looked also potential fixes", "num": "1354", "d": "5/2012"}, {"title": "way get defaults via function", "body": "custom id field part object sending back server needs different model easy way specify field get initial value using function generates id tried seem work", "num": "1352", "d": "5/2012"}, {"title": "coffeescript strange backbonerouter instance behavior", "body": "check normal code class router extends backbonerouter properties initialize options gt windowbug properties propertiessomeattribute optionsattribute new router attribute foo new router attribute bar new router attribute foobar foobar foo foobar bar foobar ok consolelog windowbug foobar windowbug trololo trololo foo trololo bar trololo foobar consolelog windowbug trololo", "num": "1351", "d": "5/2012"}, {"title": "collectionwhere fails stringnumeric integer comparison", "body": "awkward behavior backbone collectionwhere method unlike collectionget operation operates identity comparison particularly problematic dealing integer ids get operation things work fine either way operation fails get stuck wondering went wrong glaring example problem would router grabs id url id therefore string instead proper integer unless take care parseint route cause failures line meets well formed integers model data collectionwhere behavior loosened accept stringnumber comparison sanitizing data gets bit onerous considering possible ways accidentally triggered", "num": "1350", "d": "5/2012"}, {"title": "optimistic modeldestroy", "body": "hi way without rewrite modeldestroy method prevent destroy event bubbles collection contains model istance want check server response json content http code http delete response case example server response contains errormessege inside json remove model collection know success callback inside modeldestroy call destroy event already triggered bubbles collection thanks", "num": "1347", "d": "5/2012"}, {"title": "tailoring search nonhash fragments", "body": "currently using pushstate windowlocationsearch unconditionally included fragment backbone uses routing however always make sense query string parameters irrelevant cache defeat parameter classic example web servers design neglect query string parameters django plausible example could course incorporate routes kind specification lets ignore irrelevant query string parameters unnecessarily repetitive quirky difficult maintain currently think near future needs situation demands four kinds options use search backwards compatible current implementation default behavior ignore search respect certain enumerated query string parameters using standard http query string structure planning implementing like right wanted see anyone else thoughts suggestions relevant issue overlooked important feature backbone", "num": "1346", "d": "5/2012"}, {"title": "add success callback create method", "body": "working project three collections mapped different apis need fire fetch different collection create new instance model problem fetch requires id passed returned create post method need wait success callback firing fetch pass id parameter returned create thanks", "num": "1345", "d": "5/2012"}, {"title": "slice collections", "body": "perhaps could collectionslice method would work pretty much exactly like arrayslice method already slice collectionmodelsslice probably efficient way even underscore slice would simple huge deal might make things touch readable", "num": "1343", "d": "5/2012"}, {"title": "providing convention completely destroying view", "body": "wondering backbone nt provide default convention fully removing view along bound modelcollection events view single method eg seen recommended several places track remove external modelcollection listeners proper garbage collection zombie views etc wondering feature left specific reason", "num": "1339", "d": "5/2012"}, {"title": "backbonehistoryloadurl appears fire twice", "body": "overriding loadurl method history prototype place alert console whilst calling super results two alertsconsole per hashtag change first call fragmentoverride always undefined example code var authentication new backboneview var old backbonehistoryprototypeloadurl backbonehistoryprototypeloadurl function fragmentoverride alert loadurl called oldapply fragmentoverride alert page found else trigger fact url changed authenticationtrigger urlchanged fragmentoverride authenticationon urlchanged function fragmentoverride sorry nt investigated fix yet make pull request agree bug", "num": "1338", "d": "5/2012"}, {"title": "destory model collection", "body": "hi trying delete model collection well database case deleting database list want know also deleting model database refresh list iterate list deletion getting updated list code like windowapp appproductcategory backbonemodelextend urlroot restproducts url function var base restadminprodcat thisisnew defaults id null productcategory description parentproductcategoryname appproductcategorycollection backbonecollectionextend initialize function alert productcategorycollection intialization model appproductcategory url restadminprodcat appproductcategoryview backboneviewextend initialize function thiscollectionbind reset thisrender thiscollectionbind change thisrender thismodelbind remove thisrender render function eventname alert productcategoryview render appproductcategorylistview backboneviewextend tagname li initialize function thistemplate template tplget categorylistview thismodelbind remove thisrender thismodelbind change thisrender render function eventname alert render productcategoryitemview thisel html thistemplate thismodeltojson alert render productcategoryitemview return appproductcategorydetailview backboneviewextend tagname div thistemplate template tplget productcategorydetailview initialize function render function alert model thismodelid alert changed el thisel events change input change click save saveproductcategory click delete deleteproductcategory change function event thismodel new appproductcategory var target eventtarget consolelog changing targetid targetdefaultvalue targetvalue could change model spot like var change change targetname targetvalue thismodelset change saveproductcategory function event deleteproductcategory function event alert inside delete thismodeldestroy alert model deleted thismodelget productname var vthismodelget productname thismodelproductnamev var iid id val thismodelid id val thismodeldestroy success function alert deleted successfully windowhistoryback appheaderview backboneviewextend tagname div initialize function thistemplate template tplget header render function eventname thisel html thistemplate return events click new newproduct newproduct function event routernavigate productsnew true return false approuter backbonerouterextend routes list productsnew newproduct products productcategory productdetails list function callback productdetails function productcategory productname var pname productcategory alert product name pname var productcategorymodel routerproductlistwhere productcategory unescape pname productcategorymodel null alert size productcategorymodellength alert value array productcategorymodel get productname app productcategorymodel tojson thismodel new appproductcategory thismodelset app routershowview content new appproductcategorydetailview model thismodel newproduct function showview function selector view alert show view thiscurrentview thiscurrentviewclose selector html viewrender el thiscurrentview view return view tplloadtemplates header categorylistview productcategorydetailview function router new approuter backbonehistorystart backboneemulatejsontrue backboneemulatehttp true backboneemulatehttp true", "num": "1337", "d": "5/2012"}, {"title": "model defaults shallowcopied object attributes altered defaults object", "body": "backbonemodel constructor following code used use property well default values data newly created model properties type object overridden one new model attributes contain reference attribute object means attribute updated model value defaults altered nt sound like something ever want reduced example javascript var modelwithdefaults backbonemodelextend defaults obj var new modelwithdefaults consolelog mattributesobj modelwithdefaultsprototypedefaultsobj gt true consolelog modelwithdefaultsprototypedefaultsobj gt var objval mget obj objvalu mset obj objval consolelog modelwithdefaultsprototypedefaultsobj gt u", "num": "1336", "d": "5/2012"}, {"title": "parameters structure modelsave mongoid", "body": "application rails mysql migrating mongoid using backbonejs make application friendly use modelsave mysql version got ajax call like use params user controller key user params mangoid got params user key disappear solve problem thank", "num": "1334", "d": "5/2012"}, {"title": "unset option side effect", "body": "model unset clear methods modify options argument case nothing set options acquired unset property clear would agree trap", "num": "1331", "d": "5/2012"}, {"title": "stop view add parent element template", "body": "know backbonejs view parameter like id tagname classname javascript var documentrow backboneviewextend tagname li classname documentrow use insert template parents property doest set add div template template parent really annoy cuz something nt need parent need already template cancel", "num": "1330", "d": "5/2012"}, {"title": "separate view collection model different js file couldt recognize", "body": "use backbonejs create web app view collection model write one js file success want separate different js files like javascript load model code jquery load javascript function model var managemodel backbonemodelextend default selectedid unknow selectlayer function uuid thisset selectedid uuid dellayer function firebug tell bug javascript managemodel defined break error model managemodel collection file separate different file could recognize solve problem right load order", "num": "1329", "d": "5/2012"}, {"title": "collectioncomparator fails ie", "body": "environment creating function returning value ie throws exception saying exception point shown ie returning comparator makes ie happy", "num": "1328", "d": "5/2012"}, {"title": "bug backbone nt work ohio", "body": "ca nt connect internet man tried connect backbone times yesterday connection backbonejsorg", "num": "1321", "d": "5/2012"}, {"title": "backboneview able match toplevel view elements", "body": "hi found problem project take look backboneview function implemented course work assume view composed one toplevel dom element nested ones eg javascript var somemodel backbonemodelextend nothing var myview backboneviewextend el myview initialize function consoleinfo something something consoleinfo view myview var model new somemodel var view new myview model model case see console output project create views one root element case collection items item represented two table elements corresponding view found able match el root elements found solution problem would like ask backbone community think change suggesting changed function acceptable selectors maybe argument could added switch two selection modes root without root", "num": "1320", "d": "5/2012"}, {"title": "returns host hash fragment", "body": "hey backbonehistory settled follow using latest bb simple link like one links actions binded javascript body click function e returns hash fragment way everything works expected firefox safari chrome opera edit ok bug affiliated bb directly using relative path href instantiates affiliated posts", "num": "1319", "d": "5/2012"}, {"title": "list methods documentation alphabetical order", "body": "find hard find find methods scanning docs methods listed category model collection etc etc nt seem listed order think would helpful methods listed alphabetical order", "num": "1318", "d": "5/2012"}, {"title": "missing undelegate undelegateevents backboneview", "body": "inspecting code seems backboneviewdelegateevents branch call delegate jquery however backboneviewundelegateevents never explicitly removes events delegated delegate recommended undelegate method jquery following sufficient remove bind delegate events nt used backbone yet looking code get understanding principles guiding project first checking bug thanks", "num": "1316", "d": "5/2012"}, {"title": "use save post model data", "body": "model whit attr like call mymodelsave listen http request request payload key correspondence value", "num": "1315", "d": "5/2012"}, {"title": "backbonejsorg", "body": "unknown known", "num": "1313", "d": "5/2012"}, {"title": "discussion fire adddestroy event immediately wait true", "body": "usually call want know app started response destroy model finished catch sync pass wait true fire destroy model immediately instead response completed nt think otherwise sync destroy fired basically succession making one useless", "num": "1312", "d": "5/2012"}, {"title": "eventsoff issue", "body": "example gt", "num": "1310", "d": "5/2012"}, {"title": "historygetfragment handle uninitialized options", "body": "new backbonejs new github sure exactly causing scenario running simple example found backbone site run jquery works however jquery fails following error chrome uncaught typeerror read property root undefined issue seems caused timing issue regardless understand could scenarios thisoptions initalized situations feel like either fail explicitly fix follows backbonejs line add check undefined options collection typeof thisoptions undefined amp amp new line looks like typeof thisoptions undefined amp amp fragmentindexof thisoptionsroot fragment fragmentsubstr thisoptionsrootlength code causes problem var navigationrouter backbonerouterextend data null items null view null routes info id showinfo actions defaultroute initialize function options var ajax url contentnewtestjson datatype json data async false success function data", "num": "1309", "d": "5/2012"}, {"title": "model set undefined value nt rise event changing state", "body": "scenario create model attributes label name subscribe change label validate rise subscribe change name set label undefined change name change label event show next test var done false act sourceon change label function done true sourceon change name function sourceset label undefined sourceset name target assert ok done model rose change event fails equal sourceget label undefined model changed label good smth like", "num": "1308", "d": "5/2012"}, {"title": "modelclear deletes id", "body": "modelclear behavior changed surprised people nt affected", "num": "1306", "d": "5/2012"}, {"title": "router hash value error firefox", "body": "firefox router callback trigger twice hash ascii first callback decoded needed second callback undecoded routes routes name test test function name consolelog name name consolelog hash locationhash consolelog href locationhref visit \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn name \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn hash \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn href name ad af hash \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn href think bug use name ajax data pass raw encoded encoded string backend", "num": "1305", "d": "5/2012"}, {"title": "comparator usage backwards compatible", "body": "version used bound closure comparator effect method used reference arguments call actual comparator fixed nt work anymore sort code checks arity comparator invokes old behavior arity exactly one instead voting invoking new behavior arity exactly two use old behavior cases better backwards compatibility also voting relying arity methods much easily lost javascript using closures", "num": "1301", "d": "5/2012"}, {"title": "regression initializing model another model fails", "body": "initializing one model another one like foo backbonemodelextend bar backbonemodelextend defaults foo bar var bar new bar new foo bar defaults treats incoming instance foo hash instead object mixes means call barattributes foo instead foos attributes", "num": "1300", "d": "5/2012"}, {"title": "route event triggered accessing url browser", "body": "think question route event works moment page loaded say route like web page link click route event triggered want access web site event triggered way suppress behavior identify route event triggered user action browser", "num": "1297", "d": "5/2012"}, {"title": "collection preparemodel use", "body": "attempting migrate code use factory function instead return constructor run problem goal write model factory function whose children inherit semantics returns specified model possibly custom logic instance first tried following work problem still uses regardless intent behind thus context always new object always fail another choice use custom dismissed idea altogether wo nt work coffeescript likely bad practice seems current implementation real choice manually set create function model class rather awkward inelegant think requires either stop using go back return constructor thoughts", "num": "1296", "d": "5/2012"}, {"title": "unexpected result undefined passed backbonemodelhaschanged", "body": "version discovered overriding model haschanged method calling super haschanged function attr custom fun stuff backbonemodelprototypehaschangedcall attr simply pass undefined haschanged following condition fail argumentslength return isempty thischanged course workarounds ie using apply instead call wanted make known since took time track funky model behavior experiencing upgrading", "num": "1292", "d": "5/2012"}, {"title": "multiple backbones inside node makes instanceof fail", "body": "consumed last hours life boy crazy difficult thing debug two modules module provides custom backbonejs models module b provides custom backbonejs collections app requires module requires module b creates model instance using custom model module creates collection instance using custom collection module b adds model instance collection instance sky falls burns horrible plagues know answer give gold star guess answer lovely inside fails models using one backbonejs collections using another despite backbonejs version argh line needs better perhaps check presence variable defined arghhhh seems solution pass modules backbonejs module want use rather use local copies real pia imho flag idea much better one thoughts", "num": "1288", "d": "5/2012"}, {"title": "router redirect means browser back", "body": "routes loadgistugly redirects pretty one example correct way history", "num": "1286", "d": "5/2012"}, {"title": "add deepclone object methods", "body": "anybody considered adding deep cloning capabilities underscore wrote back memory serves works objects arrays could use cleanup optimization work objectprototypeclone objectprototypeclone function var newobj instanceof array clone continue amp amp typeof object newobj clone else newobj return newobj", "num": "1281", "d": "5/2012"}, {"title": "pass route option router callbacks", "body": "pull submit patch want submit issue first get feedback interest discern routes still receiving argument properties currently use backbonerouterroute regular expression perform routing reimplement parsing basically want preserve gain ability parse name internally callback function two approaches considering pass second argument callback object ie execute route callback instead extend params object name simply executing executing callback would anyone else find useful prefer one approach see flaws approaches especially second approach", "num": "1278", "d": "5/2012"}, {"title": "accessing router options routing methods", "body": "views automatically store away options initialization param later use routers reason finding would handy", "num": "1277", "d": "5/2012"}, {"title": "bug silent nt silent chaining setunset", "body": "var new backbonemodel listen change property mbind change function alert changed loudly correctly alerts nothing mset cows silent true alerts mset cows silent true set glue bob alerts mset cows silent true unset chicken set listener property update property silently chain another set unset silent ignored event triggered sure nasty little issue backbone underscore filing", "num": "1276", "d": "5/2012"}, {"title": "keep track routes added dynamically", "body": "think able access dynamically added routes order remove later provide full use case nt see anyone would one possible solution would returning route added providing access route name provided route function", "num": "1272", "d": "5/2012"}, {"title": "uncaught referenceerror foo defined", "body": "tpl lt foo gt foo variable defined report error recommended php smarty template engine masked error value without manually assignment may consider using try catch e", "num": "1271", "d": "5/2012"}, {"title": "question nt push unshift fire add event", "body": "looks perfectly right expect functions fire add event firing push unshift event nt option least head nt matter add add reason could applied pop unshift", "num": "1270", "d": "5/2012"}, {"title": "persist single object", "body": "appologies correct forum raise question trying save settings object subsequent visits id item localstorage user last working perhaps correct way go sure problemlimitation localstorage adapter something nt understand backbone tried cartstatus backbonemodelextend localstorage new store cartstatus currentclientid var mystatus new cartstatus function mystatusfetch alert loaded mystatusget currentclientid mystatusset currentclientid abc mystatussave load page multiple times says loaded undefined every time however second load would expect loaded abc every time inspect localstorage loads see duplicate nested records currentclientid abc id currentclientid abc id cartstatus currentclientid abc id also written question", "num": "1266", "d": "5/2012"}, {"body": "thanks issue chuangbo actually expected behavior backbone setting attribute silently delays change event next call calls setting many attributes triggering one change event", "d": "5/2012"}, {"body": "oh got feature like expected change attribute without trigger events bind", "d": "5/2012"}, {"body": "would also like make know phasing previously allowed invalid css selectors delegate element never work future releases way accomplishing delegateevents without using delegate also nt necessarily use syntax element think needs method getting immediate child", "d": "5/2012"}, {"body": "hi thanks issue since event selectors completely delegated jquery nt think anything backbone change way handle child selectors however run issue well solved checking parent element handler js var view backboneviewextend events click element elementclick elementclick function e etargetparentnode thisel return hope helps", "d": "5/2012"}, {"body": "hi thanks issue think looking something like js var model backbonemodelextend defaults function return myid genid", "d": "5/2012"}, {"body": "yes normal expected properties prototype shared instances class think looking something like instead coffeescript class router extends backbonerouter initialize options gt properties", "d": "5/2012"}, {"body": "rather unelegant workaround entails checking var first extend object var false reset object nt worry using initialize", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true", "d": "5/2012"}, {"body": "agreed behaves way due coercion happens using value object property unfortunate unavoidable", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true would nt want programmer supplying numeric operand would nt expect numeric comparison occur conversely supply string field contains numeric data fault numeric comparison occurs consistent nt think strictness would big deal seeing two different behaviors breaking principle least surprise", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "sure know behaviour wait true question different http delete returns destroy success callback call cant prevent example server response contains error message destroy event bubbles till collection backbonedestroy", "d": "5/2012"}, {"body": "server error return error message http status code callback wo nt triggered", "d": "5/2012"}, {"body": "either destroy either create http return code invoke error callback instead success", "d": "5/2012"}, {"body": "sounds great probably something would appropriate core backbone ideally urls canonical nt irrelevant query string parameters", "d": "5/2012"}, {"body": "ran using dfp need append urls debug ad scheduling problems routes trigger creates bigger problems say something would appropriate core backbone used case without change", "d": "5/2012"}, {"body": "backbone used case case add pattern route regex strips params", "d": "5/2012"}, {"body": "think one route regex one issue regular expressions great saying include good exclusions another issue conceptually simple task rapidly becomes impossibly complex deal correctly pushed regular expression design said note rather easy implement efficiently important decision costs one time thing history start common cases implemented working documenting", "d": "5/2012"}, {"body": "parsing query string parameters route regular expressions variation issue", "d": "5/2012"}, {"body": "looking lot harder thought currently tests routing pushstate true suspect absence tests browsers implement pushstate right way handle autosucceed tests tested browser implement pushstate", "d": "5/2012"}, {"body": "fwiw using jquery pass around deferred objects collectionmodel properties chain callbacks places code happy hacking feelsgood", "d": "5/2012"}, {"body": "two reasons think views outlived models collections references need destroy references garbage collected along objects destroying view generally involves destroying childnested views since backbone nt dictate implement childnested views rightfully way destroying reasons mind would nt stub method like points convention nt implement also functionality removing event handlers dealing child views might alright worried cause users overlook point number one though", "d": "5/2012"}, {"body": "braddunbar think stub method might useful standardize naming something common use many cases taking care two would user calling nested views destroy methods appropriately also think clear distinction something like docs would help ensure users would nt overlook point one one thing consider harm users overlook point one overlook need remove references modelscollections outlive view", "d": "5/2012"}, {"body": "braddunbar created jsperf amp jsfiddle illustrate thinking important jsperf jsfiddle first time jsperf may somehow completely missed boat supposed jsperf illustrates slightly better take consideration first point action needed view model drop reference simultaneously considerably worse ignore need destroy event references get rid cases even required jsfiddle illustration destroy function action think would good idea include bare bones destroy method similar posted extended necessary without anything childnested views", "d": "5/2012"}, {"body": "another option rather adding new method might change anyone needing functionality edit remove class necessary", "d": "5/2012"}, {"body": "even straight forward code probably simplifies issue backbonehistoryprototypeloadurl function fragmentoverride alert loadurl called", "d": "5/2012"}, {"body": "nope loadurl intended called multiple times first trying default pushstate route patch secondly checking fragment overriding want take account see last line", "d": "5/2012"}, {"body": "unless severely misunderstood something apologise tell history whether use pushstate call loadurl conditional based upon", "d": "5/2012"}, {"body": "may want use pushstate happen internet explorer case transparently falls back hashchange", "d": "5/2012"}, {"body": "ok could nt managed internally ie bootstrap works browser capabilities uses going forward", "d": "5/2012"}, {"body": "maybe feel free send pull request like", "d": "5/2012"}, {"body": "nt place debugging help try mailing list irc channel", "d": "5/2012"}, {"body": "correct using nested objects probably want define function value", "d": "5/2012"}, {"body": "thanks workaround could documentation least hint solution confident obvious anyone suspect easy get caught problem", "d": "5/2012"}, {"body": "alternatively defaults could deepcopied", "d": "5/2012"}, {"body": "idea feel free try mailing list irc need help sounds like mongoid thing", "d": "5/2012"}, {"body": "hi zon thanks issue already fixed pull master bug fixed", "d": "5/2012"}, {"body": "prevent backbone views creating element passing via option hope helps", "d": "5/2012"}, {"body": "braddunbar still nt quite understand way create view javascript windowaudiomanageview backboneviewextend el template managetemplateaudio html apply script like commet nt work", "d": "5/2012"}, {"body": "going need show us code ie collections using separate files works fine", "d": "5/2012"}, {"body": "hi vkovalskiy thanks issue sounds right many arguments used declaration sort function recently changed use directly instead declared two parameters interested discussion regarding change going well", "d": "5/2012"}, {"body": "thanks info braddunbar using one argument recent changes mention release right monitor resolutions suppose oneargument sorting comparator available pointed convenient sort something based style kind etc", "d": "5/2012"}, {"body": "definitely interesting work reproducible test case post jsfiddle similar would love see", "d": "5/2012"}, {"body": "went ahead made test case jsfiddles head nt gotten fail either environments xp vkovalskiy could take look see get reproducible error", "d": "5/2012"}, {"body": "wookiehangover thanks windows hands check tomorrow get back results", "d": "5/2012"}, {"body": "thanks thanks use like match elements outside backbone view need special case", "d": "5/2012"}, {"body": "performed benchmarks gives gives first method faster", "d": "5/2012"}, {"body": "also available reference jquery zepto ender wrapped instance", "d": "5/2012"}, {"body": "hi sarxos thanks issue multiple root elements definitely nonstandard unsupported could probably achieve goal think would easier clear adding option work", "d": "5/2012"}, {"body": "jashkenas suppose nt understand want match elements outside need matched", "d": "5/2012"}, {"body": "sarxos", "d": "5/2012"}, {"body": "braddunbar unfortunately solution nt satisfy requirements since always add root element selector result wookiehangover property case views composed two elements one would like match contains attribute backbonemodelbinding unfortunately done without overriding either backbone backbnodemodelbinding methods", "d": "5/2012"}, {"body": "understand point braddunbar true multiple roots something really usual one solution able base keep code clean simply override function views match root elements hopefully many great thanks", "d": "5/2012"}, {"body": "hi mattotodd thanks issue actually discussed underscore methods listed according functionality like however might nice headings present backbone docs", "d": "5/2012"}, {"body": "fair enough love anyways keep great work", "d": "5/2012"}, {"body": "looks like nt see docs jquery likely moving delegate onoff", "d": "5/2012"}, {"body": "really forum whatever language using need json decode example php trick", "d": "5/2012"}, {"body": "hi yishenggudou thanks issue think get much better response mailing list taken liberty starting thread thanks", "d": "5/2012"}, {"body": "known email owner domain", "d": "5/2012"}, {"body": "music ears saxophone", "d": "5/2012"}, {"body": "hswolff still trying get docs", "d": "5/2012"}, {"body": "serious", "d": "5/2012"}, {"body": "still connection ohio whatsoever", "d": "5/2012"}, {"body": "see previous comment backbone docs still accessible dns issue fixed shortly", "d": "5/2012"}, {"body": "great sadness", "d": "5/2012"}, {"body": "several days", "d": "5/2012"}, {"body": "still", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "beginning use backbonejs fact noone get organizations primary domain registered dns lend confidence good thing many folks recommending", "d": "5/2012"}, {"body": "transfer made four days ago afraid domain status still says actions required please allow days transfer complete hang tight little longer", "d": "5/2012"}, {"body": "back", "d": "5/2012"}, {"body": "yep back online got domain sorry dns trouble", "d": "5/2012"}, {"body": "cool", "d": "5/2012"}, {"body": "nope point wait server acknowledge destroy triggering client side events nt want wait server nt use", "d": "5/2012"}, {"body": "wanted know server started request recommendation fire nondestroy event like wait destroy event done case point additional sync event", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "destroy event nt called immediately wait true called xhr request finished along collection remove case manually trigger different startdestroy event know started console output normally listen sync event nt look like bubbled leads aforementioned hackery", "d": "5/2012"}, {"body": "yes correct meant event", "d": "5/2012"}, {"body": "great catch thanks cfddream", "d": "5/2012"}, {"body": "hi provega thanks issue appears using backbone example know recently several bugs fixed related url would mind giving latest version try", "d": "5/2012"}, {"body": "sample using running look see offending code getfragment function fragment forcepushstate fragment null thishaspushstate forcepushstate fragment windowlocationpathname var search windowlocationsearch search fragment search else fragment thisgethash undefined check fragmentindexof thisoptionsroot fragment fragmentsubstr thisoptionsrootlength return fragmentreplace routestripper", "d": "5/2012"}, {"body": "think problem stems calling could happening due call callback called synchronously due custom backend cached data would exist causing error describe make sure called fragments fetched furthermore nt full picture code calling application code probably good idea let browser trigger possibly use", "d": "5/2012"}, {"body": "hi grobakh thanks issue could tell version backbone using latest would mind testing version thanks", "d": "5/2012"}, {"body": "tested work", "d": "5/2012"}, {"body": "nt forget acceptable models id", "d": "5/2012"}, {"body": "yep solid good starting poit implement old behaviour new semantics", "d": "5/2012"}, {"body": "sure escaped documentation changed discussed", "d": "5/2012"}, {"body": "thanks issue plievone going close documentation fix feel free comment open new request think current implementation changed", "d": "5/2012"}, {"body": "nt routes object instead array", "d": "5/2012"}, {"body": "francisc spelling mistake updated thanks", "d": "5/2012"}, {"body": "braddunbar please help us must hack application decodeuricomponent thank much", "d": "5/2012"}, {"body": "braddunbar think proposed change style comparators already shipped", "d": "5/2012"}, {"body": "hmm nt see much harm restricting sortstyle used arity exactly two however nt really fix problem anyone dwt issue arises want use sortbystyle curry one argument right", "d": "5/2012"}, {"body": "could wish would like methods available separated magic anymore care comparator one parameter obvious enough comparator deals therefor nt declare parameters least happened p", "d": "5/2012"}, {"body": "hi dwt thanks issue actually design discussed previously takes attributes options parameters acting accordingly", "d": "5/2012"}, {"body": "request add upgrade notes bitten quite severely", "d": "5/2012"}, {"body": "suppose could go release notes although never really supported knowledge accident due problem causing wan na write pull request effect", "d": "5/2012"}, {"body": "presumably user navigated would say triggered user said wo nt start ask via nt think understand desired behavior way understand want route events triggered user clicks link navigate url via browser would suffice listen click events instead", "d": "5/2012"}, {"body": "yes listen click event suffice want know route feature help thank", "d": "5/2012"}, {"body": "could stop using", "d": "5/2012"}, {"body": "one option would function could overridden javascript backbonemodelcreate function attributes options return new attributes options preparemodel function attrs options model thismodelcreate attrs options", "d": "5/2012"}, {"body": "essentially adding additional level indirection hooked return constructor", "d": "5/2012"}, {"body": "thought backbone stance discourage return constructor edit one", "d": "5/2012"}, {"body": "use separate factory collection time maybe come something better thinking awhile thanks discussion jashkenas", "d": "5/2012"}, {"body": "merged fix course passing undefined behavior", "d": "5/2012"}, {"body": "touch\u00e9", "d": "5/2012"}, {"body": "slow clap thanks guys great piece software", "d": "5/2012"}, {"body": "duck typing ftw", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require push code repo inspection", "d": "5/2012"}, {"body": "think nodejs caches loaded export based absolute filename exported object backbonejs files located filesystem one module directory", "d": "5/2012"}, {"body": "could lead simply two different required versions instead edit balupton said despite backbonejs version", "d": "5/2012"}, {"body": "yuchi nailed built sample app highlights problem", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require appears due nodejs internally caching results per module entire application module includes module copy backbone applications", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single root containing single instance backbonejs nothing backbonejs solve problem entirely design decision include two redundant copies backbone might way work around issue instead try figure need multiple application configs packagejson eliminate avoid issues like", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single nodemodules root containing single instance backbonejs tbranyen think completely missed point sorry clear anyway sample application includes directory way nt publish npm registry perfectly valid use case modules files fact npm modules work write module define dependencies publish npm registry another moduleapplicationwhatever install module via backbonejs included module files stupid decision means modules relying external dependency bad practice modules include everything need inside reopened", "d": "5/2012"}, {"body": "put whole thing bigger perspective queryengine module provides new extends however include queryengine app also include backbonejs app queryengine backbonejs app causing situation occur expect queryengine ludicrous published expect queryengine include backbonejs dependency file equally crazy earth ensure queryengine continue work backbonejs dependency external queryengine completely breaks point using specify dependencies fact using logic backbonejs nt even specify underscore dependency file even better yet file serious issue feel nt means post back asking clarification rather saying wrong closing", "d": "5/2012"}, {"body": "nothing backbonejs solve problem yes implementing flag suggested original post", "d": "5/2012"}, {"body": "going wrong creates model instance using custom model module creates collection instance using custom collection module b adds model instance collection instance mixing matching two different versions backbone together guarantee models version x work together properly collections version nt mingle two different versions error occurs right", "d": "5/2012"}, {"body": "nt mingle two different versions error occurs right correct though seems two different opinions never ever using multiple backbone copies anything support whether compatible existing code passes tests irrelevant backbone internal module dependency within different modules perfectly valid use case support added considering compatible existing code passes tests personally understand one would pull duck typing change works enables new use case counter seems personal opinion best practice rather expressed practical benefits understand practical basis never ever using multiple backbone copies seems argument expressed personal opinion finally understand case backbone exception underscore opinion allowed include multiple underscore copies multiple backbone copies seems reason latter breaks due use instanceof something willing fixed", "d": "5/2012"}, {"body": "allowed use multiple backbone copies independently mixing matching models one version collections another version hence problem like saying expecting rest continue work", "d": "5/2012"}, {"body": "help avoid using also use avoid history entry hope helps javascript loadgistugly function id thisnavigate gist id replace true thisloadgist id loadgist function id", "d": "5/2012"}, {"body": "perfect thanks tell avoid", "d": "5/2012"}, {"body": "let blog post derick bailey explain since much better job could", "d": "5/2012"}, {"body": "read comments derick post avoid trigger true simply opinion universal truth post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done answers avoid trigger true call router method directly would require reference router every view nt really heard solid arguments trigger true", "d": "5/2012"}, {"body": "post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done granted certainly great number ways handle situation one worked think main point keep router dumb possible anecdotally worked corner certainly solution avoiding prevent issues majority cases answers avoid trigger true call router method directly would require reference router every view views responding changes state often little need call router methods type situation obviating need reference router", "d": "5/2012"}, {"body": "use backbonehistorygetfragment get current url router uses able process internally callback function similar need describing came two first sounds like would likely better option", "d": "5/2012"}, {"body": "would enough route name passed route callback way get route name nt suggets use thisroutes backbonehistoryfragments nt work cases wher id splat present url parts project dependable url fragments backbonerouter already parsed fragments resulted particular callback route name called one might use route name implement detalisation project otherwise parse url fragments regexp double work", "d": "5/2012"}, {"body": "guess nt use later often save custom router classes though reason nt work coffeescript class router extends backbonerouter constructor options gt super", "d": "5/2012"}, {"body": "view nt appear use options later either afaict convenience view subclasses seems like would handy router subclasses realize store away", "d": "5/2012"}, {"body": "sorry misread definitely useful copy options view nt see would nt apply routers well", "d": "5/2012"}, {"body": "whilst could easily add functionality top collection model well options get passed frequently pass extra options used later creating subcollections submodels", "d": "5/2012"}, {"body": "couple questions would need answered thinking implementing options created provided options cloned user reuse number particular comes areas eg sometimes point contention providing would nicety leaving implementation user also rather nice since free like", "d": "5/2012"}, {"body": "braddunbar reason exactly view already would nt acceptable answer questions", "d": "5/2012"}, {"body": "ok answer wanted make sure thought", "d": "5/2012"}, {"body": "might one thinking opposite actually nt like options copied views promotes people getting things via even getterssetters accessors exist way see viewmodelrouterwhatever copy chooses nothing options options initialization keyvalue store life instance", "d": "5/2012"}, {"body": "said decided copied copied views routers models collections", "d": "5/2012"}, {"body": "think agree ianstormtaylor backbone stay flexible let user decide want", "d": "5/2012"}, {"body": "long consistent behaviour matters", "d": "5/2012"}, {"body": "quick workaround unset case nice", "d": "5/2012"}, {"body": "actually design see previous conversations work", "d": "5/2012"}, {"body": "ah relevant thread anyone finds darn excited found backbone bug", "d": "5/2012"}, {"body": "behavior make sense real state transitions would triggered", "d": "5/2012"}, {"body": "matter taste first comment thread defer seems suited silent behavior would make sense add defer attribute revert silent behavior", "d": "5/2012"}, {"body": "yes might also case write model new backbonemodel modelset defer true modelset defer true next time model change event fired case temporary change truly", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets also hella counterintuitive reading mentions silent docs newcomer backbone confused could nt figure app breaking checked assumptions found behavior", "d": "5/2012"}, {"body": "agree completely going option like needs way ensure never buffered triggered hack situation javascript thismodelset source thiseditorgetvalue silent true thismodelprevious source thismodelget source thismodelpreviousattributessource thismodelget source also situation identical delvarworld", "d": "5/2012"}, {"body": "seems like desired use case silent stop event triggered wanted use stop view rerendering listening attribute change event rerender certain cases found different probably better way benefit silent gives first glance skips events jarring eventually learn case maybe least make obvious docs", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets calls may code may triggered indeterminate amount times performance reasons beneficial able silence events called seems like desired use case silent stop event triggered would want change attribute without notifying listeners eventually set directly bypass altogether maybe least make obvious docs agreed backbone skipped events assumption partially true", "d": "5/2012"}, {"body": "set directly attributes bypass set altogether nt know option considered hacky valid way would show affect change listeners line since ticket still open reading explanation seems like would nice truly silent also option case defer property twice use second one event fires vote newcomer backbone nt know larger implications would", "d": "5/2012"}, {"body": "nt know option considered hacky valid way would show affect change listeners line yes would bypass benefits getting purpose attaching event listeners change events get notifications changes nt want notifications use property instead reason need notify listeners changes", "d": "5/2012"}, {"body": "event triggering validation consistency code sometimes set property want trigger event sometimes set property nt property model nt get choice modify attributes directly branch different code opposed toggling boolean", "d": "5/2012"}, {"body": "set event triggering validation consistency code sometimes set property want trigger event sometimes set property nt would mind elaborating perhaps never encountered type situation", "d": "5/2012"}, {"body": "another thing add either change defer seems odd listening update silently modification property trigger even though already changed action triggering event nt touching seems like counter intuitive api behavior", "d": "5/2012"}, {"body": "braddunbar jashkenas etc read comments linked change request guess never made connection backbonespecified options silent etc additional arbitrary options could pass would get passed event handlers ability pass arbitrary options ability individual event listeners receive successfully fulfills needs go ahead add noop option better name come event listeners choose based option use cases similar pull request app collaborative multiple people dealing datasets simultaneously push model changes server connected clients socketio need distinguish changes made interactively user changes pushed app server think ability seems commonly overlooked find free time submit additional documentation model set events think would make clearer people", "d": "5/2012"}, {"body": "edwardmsmith wonderful agree commonly overlooked unsure document going close feel free open separate issue documentation updates proposals improvingmodifying changes", "d": "5/2012"}, {"body": "never removing route urls supposed permanent mint keep", "d": "5/2012"}, {"body": "understand wouldt remove defined route meant overriding route able remove override think example would explain better let consider app would load list custom pages server standard route overriden route usually route load standard game page defined application code source whereas case would like able override custom routes case want load particular templates loading server nt know makes sense anyone else see best way package standard app able customize thank answer anyway", "d": "5/2012"}, {"body": "instead swapping function function know call either appropriate", "d": "5/2012"}, {"body": "true seems routing logic inside one function routing functionality backbone losing interest indeed would happen app routes overridden thank anyway advice", "d": "5/2012"}, {"body": "course fire events fire events", "d": "5/2012"}, {"body": "tried events double check thanks", "d": "5/2012"}, {"body": "looks like works", "d": "5/2012"}, {"body": "thanks issue myster think probably luck mailing list taken liberty posting question", "d": "5/2012"}, {"body": "noticed sortedindex nt used anymore model insertion instead whole collection gets resorted even one model added tried fixed send pull request think goes total different direction", "d": "5/2012"}, {"body": "fixed problem using sortedindex find position data added added passed add flag prevented sorting added data presorted add chance overlap previously added data better hindsight comparator sortby style one using js date adding single call eg adding passing array objects rather one time quite confusing took uncover upon upgrade", "d": "5/2012"}, {"body": "georgephillips sounds bizarre recently switched using style insertions backbone previously internally new single version ostensibly performance reasons actually case change mistake revert someone needs cook jsperf test prove either way", "d": "5/2012"}, {"body": "jashkenas application timeline ajax requests buffers certain length buffers models per request collection adding using single call add would say test loops adds n models time one go would probably replicate experiencing", "d": "5/2012"}, {"body": "one gets weekend think time throw together test see regards performance", "d": "5/2012"}, {"body": "jashkenas ran bug searching found tested solution commenting line fix problem way found problem looking backbonehistoryfragment wanted change url change page user switch item working rebuild route ran yielded array like user clicked change different product code produced hope helps reproduce bug please let know need information thanks", "d": "5/2012"}, {"body": "kept testing returned everything backbone stock created code solves issue url chunk code properly handles initial backbonehistoryfragment leading slash hope helps", "d": "5/2012"}, {"body": "disagree performance problem automatically keeping collection sorted assume sorted collection elements one elements changes nt resort entire collection since know elements already sorted relative reposition one element cost inserting model sorted collection even scenario jashkenas describes rapidly change ten models collection resorting individual models change still cheaper even single resort possibility could revisit keep collections sorted model changes reasons missing keeping collection sorted willing work free time philosophical conflict would prevent accepted", "d": "5/2012"}, {"body": "add another voice wanting feature work using api powered dancer happily supports patch requests wish use backbone send patch requests implemented workaround allowing backbone send patch requests much nicer see ability core think", "d": "5/2012"}, {"body": "pretty good article topic idea use pushstate backbone supports update browser url needs combined type server side technology render html accessibility seo clever way use nodejs reuse backbone render html server side think might meteor framework roadmap", "d": "5/2012"}, {"title": "embertextfield properties", "body": "hello looking forward using html tags handlebars template view embertextfield tags like tabindex required would useful form design", "num": "925", "d": "5/2012"}, {"title": "observers nested firing eg rows eachcols eachlabel", "body": "ca nt get observers containing one statement work example jsfiddle demonstrating issue fiddle using plain arrays also tried converting row col models arraycontrollers change behavior get notified rows object initially added table hence guard variable donewithsetup label changed last line code", "num": "922", "d": "5/2012"}, {"title": "layoutname defined containerview ignored", "body": "", "num": "921", "d": "5/2012"}, {"title": "add attribute view", "body": "hello question todo example want add autofocus attribute input newtodo", "num": "920", "d": "5/2012"}, {"title": "bindings declared mixins get applied reopening instance", "body": "ember clicking link apply mixin view mybinding property seem initialized binding seen clicking click clicking include mixin binding get applied correctly expected change", "num": "918", "d": "5/2012"}, {"title": "feature emberjs without requiring jquery", "body": "love emberjs architecture nt really like jquery would difficult remove jquery dependency lot people using jquery anymore right", "num": "914", "d": "5/2012"}, {"title": "emberrunlater nondeterministic behavior", "body": "currently emberrunnext guaranteed run current run loop emberrunlater sometimes run current run loop case occurs code render queue following call emberrunlater takes time execute delay duration passed emberrunlater seems would provide consistent behavior avoid surprising edge cases code scheduled emberrunlater guaranteed never run within run loop scheduled feedback", "num": "913", "d": "5/2012"}, {"title": "embertextfield render layout layoutname property", "body": "per emberview respect layout layoutname property quite nicely embertextfield", "num": "912", "d": "5/2012"}, {"title": "app initialization happen automatically", "body": "global emberapplication instance app declare classes javascript tests mocha running browser konacha would like initialize reinitialize app test case emberapplication automatically sets didbecomeready function run dom ready obviously suboptimal testing also introduce subtle ordering bugs able trigger one wrapping initialization code settimeout much prefer logic call ready handler test setup code rather ember automagically set ready handler think", "num": "911", "d": "5/2012"}, {"title": "bindattr examples complete", "body": "html html rest examples regarding bindattr issue", "num": "910", "d": "5/2012"}, {"title": "viewstate problem calling super overriding enter method", "body": "following fiddle seen exception gets throw statemanager viewstateenter get set statemanager instance gets initialized", "num": "909", "d": "5/2012"}, {"title": "strange emberjsjwplayer issue", "body": "strange issue run currently using jwplayer page loading playlist via javascript playlist array javascript objects works fine emberjs loaded page soon emberjs loaded player fails load playlist setup test case demonstrates issue may issue jwplayer seen similar behavior mixing emberjs libraries like salesforce remoting thoughts", "num": "907", "d": "5/2012"}, {"title": "custom handlebars helpers automatically update properties depend change", "body": "per documentation ghempton order create handlebars helpers listen event changes significant hackery required behavior confirmed wagenet believe writing custom listening helper possible possible without invoking metamorph require inclusion gist make work", "num": "906", "d": "5/2012"}, {"title": "selected item longer working adding change event emberselect", "body": "created fiddle reproduce problem remove change function select view see works perfectly thing need use change event selectbox linked another selectbox issue anybody workaround solve thanks advance", "num": "903", "d": "5/2012"}, {"title": "mixins property handlebars view helper", "body": "created mixins applied many views css design view model logic user interactions majority main views containerview decided migrate templates really missing ability apply mixins handlebars view helper nt know workaround understand well concepts missingpending feature", "num": "902", "d": "5/2012"}, {"title": "weird behavior emberselect selecting prompt option", "body": "expect see prompt selected first time instead select goes blank using firefox makes difference also easy remove prompt option something selected", "num": "901", "d": "5/2012"}, {"title": "error online documentation bindattr", "body": "following address bindattr examples missing attribute receiving value eg instead", "num": "895", "d": "5/2012"}, {"title": "classtostring returns incorrect bound global context", "body": "discovered writing specs app coffeescript classtostring gets confused called child embernamespace bound global context embernamespacecreate emberobjectextend consolelog var embernamespacecreate emberobjectextend consolelog thing", "num": "894", "d": "5/2012"}, {"title": "applicationcontroller instantiated connectoutlets", "body": "hi playing ember new helper found issue instanced correctly state created jsfiddle show behavior see unless explicitly set controller layout timeout nt appended outlet bug misconception used thanks awesome work", "num": "891", "d": "5/2012"}, {"title": "emberrouter work browse back forward", "body": "changes hash component browser url triggers call routepath current state since states always leaf nodes returns action taken due forward back buttons fail change state entering url hash part directly transitionto calls cause router go correct states states browser url changes correctly using version router code emee application namespace coffeescript emeerouter emberrouterextend location hash enablelogging true emeeinitialize", "num": "887", "d": "5/2012"}, {"title": "accessing variables parent context", "body": "sure ember handlebars related bug using template like code render jsfiddle edit clear tried minimalize fiddle practical usecase would instead", "num": "886", "d": "5/2012"}, {"title": "ember auto binding slow emberselect", "body": "worked ember autobinding nice feature however case binding collection emberselect slow application binding list country emberselect display view viewappendto get delay time display another issues select item emberselect also get delay time think reason ember must binding model rebinding view slow", "num": "885", "d": "5/2012"}, {"title": "emselect work multiple prompt options time", "body": "please look jsfiddle prompt option multiple selection gets messed", "num": "881", "d": "5/2012"}, {"title": "ember builds without handlebars", "body": "build ember handlebars included way procedure another step building ember release", "num": "875", "d": "5/2012"}, {"title": "nt work globals", "body": "example jsfiddle", "num": "874", "d": "5/2012"}, {"title": "show event emview", "body": "hi created controls everything going fine tried emtabcontainerview follow html view emtabcontainerview currentview zero view emtabpaneview viewname zero content first pane view view problem div second tabpaneview appmywidget rely didinsertelement calculate dimensions since inserted dom visible heights widgets zero show event something like would use everything work expected recommend plugin jquery handles watch css properties like uncommon scenario complex apps would benefit users implemented emview", "num": "872", "d": "5/2012"}, {"title": "viewtemplatecontext ca nt overridden", "body": "docs say templatecontext used context templates rendered wanted change context view thought would perfect thing override docs lie render uses templatecontext instead makes even worse attempt set templatecontext templatecontext completely ignored", "num": "867", "d": "5/2012"}, {"title": "error emberrunautorun", "body": "following emberrunautorun fails safari windowenv preventautomaticrunloopcreation windowenv defined", "num": "864", "d": "5/2012"}, {"title": "log view logging undefined actually defined", "body": "set using ember version demo code app emberapplicationcreate appview emberviewextend foo bar true template", "num": "862", "d": "5/2012"}, {"title": "bindattr binding", "body": "nt binding source attribute image moving used work fine img bindattr src collectiveusercontrollerimage alt picture miss something changelog", "num": "852", "d": "5/2012"}, {"title": "unbundle handlebars", "body": "since many apps already use handlebars unbundle handlebars emberjs distribution get file size", "num": "849", "d": "5/2012"}, {"title": "scoping issue", "body": "results fiddle seem like based tested emberlatest", "num": "848", "d": "5/2012"}, {"title": "gitignore additions", "body": "following additions would useful keeping repository clean idea rvmrc", "num": "846", "d": "5/2012"}, {"title": "would like emempty return true", "body": "related closed ago find always emkeys obj length see object empty would love emempty obj instead asking actually last item list tests top nt implemented pull request instead checks length property", "num": "845", "d": "5/2012"}, {"title": "able use handlebars helpers bound html attributes", "body": "would helpful able use handlebars helpers bound html attributes like handlebars helper takes argument", "num": "844", "d": "5/2012"}, {"title": "containerview childviews binding", "body": "hey guys sure bug behavior supposed changed although create array proxy content supposed driving content containerview nt work testing case works although fails work later versions javascript app emberapplicationcreate controller emarrayproxycreate content appmycollectionview emcontainerviewextend childviewsbinding controllercontent might something wrong someone assist please complete jsfiddle switching ember library would make work", "num": "841", "d": "5/2012"}, {"title": "automaticallyschedule run loops raise tests", "body": "look todo says raise run loop automatically scheduled tests autorun feature automatically creates run loop try schedule something existing run loop exists great convenience eg interacting application via browser console causes nondeterministic issues testing scheduled code deferred tests finished running change code raise testing mode explicitly wrap code causes run loop scheduled inside invocation", "num": "838", "d": "5/2012"}, {"title": "stray emberassert", "body": "emberassert deprecated one usage remains master", "num": "835", "d": "5/2012"}, {"title": "make mention cleaning bindings observers", "body": "", "num": "832", "d": "5/2012"}, {"title": "add emindexset package", "body": "think good revert back indexset instead adding core people nt complain add new package like emberindexset think indexset helpful many places help case building treeproxy", "num": "829", "d": "5/2012"}, {"title": "change view rendering states use statemanager", "body": "thought open issue already since come discussion could nt find going toss time unless someone else already handling", "num": "828", "d": "5/2012"}, {"title": "figure handle virtual views", "body": "", "num": "827", "d": "5/2012"}, {"title": "", "body": "", "num": "826", "d": "5/2012"}, {"title": "internal method", "body": "right override method forget call potentially break setup code provided framework use different internal init method users wo nt accidentally override require overriding class wrote", "num": "825", "d": "5/2012"}, {"title": "setjs talks ember", "body": "version comes something sproutcore", "num": "822", "d": "5/2012"}, {"title": "image flickering chrome adblock", "body": "bind img attribute object property updating object results flickering gray border appears adblock installed see details looks like something rendering slowing could solved emberjs part", "num": "821", "d": "5/2012"}, {"title": "statemanager documentation viewstate states show jsdoc", "body": "toplevel class documentation show anywhere jsdoc output presumably jsdoc ca nt deal multiple pieces class documentation class reopening statemanager find way fix work around limitation", "num": "820", "d": "5/2012"}, {"title": "pushunshift object breaking array controller computed length property head", "body": "use pushobject unshiftobject insert content array controller length property returns create array separately use set content returns correct length ember works expected", "num": "816", "d": "5/2012"}, {"title": "ca nt set rootelement rootview emberviewstate", "body": "would like setup html structure like example want centered login screen traditional blog feed assume nested divs ca nt move around way accomplishing state machine like coffeescript class appapplicationview extends embercontainerview loginview emberviewcreate templatename loginview elementid loginview mainview embercontainerviewcreate appendto main postsview emberviewcreate templatename postsview elementid postsview appset applicationview appapplicationviewcreate appendto body appstatemanager emberstatemanagercreate rootview appget applicationview initialstate loginview login emberviewstatecreate rootview appget applicationview view appgetpath applicationviewloginview posts emberviewstatecreate rootview appget applicationview get mainview view appgetpath applicationviewpostsview could refactor main issue ca nt access way think equal soontobe previous state means following returns previous states values also tried setting use computed properties retrieve current implementation still would nt work override like something make work expected override nested objects thanks", "num": "813", "d": "5/2012"}, {"title": "would like emcompare handle deep json object comparisons", "body": "several json deepequal implementations floating around web would helpful pick one add emcompare unless already ember somewhere missing", "num": "812", "d": "5/2012"}, {"title": "embertextfield take account tabindex attribute", "body": "think good provide convenient keyboard interface page sometimes done better manually setting tabindex attributes solution quite trivial add attribute attributebindings property embertextfield maybe done views also", "num": "811", "d": "5/2012"}, {"title": "bindattr class fails inside", "body": "jsfiddle", "num": "810", "d": "5/2012"}, {"title": "metamorph breaks actions", "body": "using wrokaround ie nested view metamorph mixin property accessing content index output works ok try use action select click view get chrome developer tools removing metamorph mixin view make action work", "num": "807", "d": "5/2012"}, {"title": "docs dont reflect docstring", "body": "seams online documentation dont contain documentation declared source go see info empty click source see docstring full information", "num": "806", "d": "5/2012"}, {"title": "docs dont reflect docstring", "body": "seams online documentation dont contain documentation declared source go see info empty click source see docstring full information", "num": "805", "d": "5/2012"}, {"title": "nt force fire thispropertywillchange firstobjectlastobject arraycontentdidchange emberarray", "body": "think emberarray shoud nt force update firstobject lastobject use case building sparsearray lastobject nt loaded loading first time firing propertywillchange lastobject arraycontentdidchange forces sparsearray request index lastobject nt needed also need disableremove following lines method arraycontentwillchange update firstobject lastobject adding property firstobject embercomputed function return thisobjectat property cacheable lastobject embercomputed function return thisobjectat get length property cacheable updates request nt time content changed", "num": "802", "d": "5/2012"}, {"title": "uncaught typeerror read property selectedindex undefined", "body": "hello trying insert emberselect childview containerview didinsertelement event getting errror uncaught typeerror read property selectedindex undefined seems like didinsertelement emberselect triggered element created jsfiddle reproduce error thank", "num": "801", "d": "5/2012"}, {"title": "improve childview rendering collectioncontainer view", "body": "collection views underlying array changes drastically dom manipulation htmlstring parse per item changed one render event scheduled parent parent could buffer rendering limit dom ops also viewdommanagerafter creates closure around previous view time render happens future may yet dom may destroyed parent manage rendering would avoid issue perform lot better", "num": "800", "d": "5/2012"}, {"title": "blank testsembertestsjs test suite", "body": "trying debug since yesterday really find solution guess others might run problem asking help trying run test suite master branch packages getting died test jshintrc defined realized later getting error testsembertestsjs asset returns blank page var jshintrc never created getting error run full test suite tried sandboxing gems make sure gems specified gemfile installed still getting error gem missing gemfile causing error external package missing system nodejs package maybe thanks", "num": "799", "d": "5/2012"}, {"title": "bindattr fails bleeding edge emberjs", "body": "hi guys tried bleeding edge version emberjs friday think found bug simplified version code isolating problem cocked something", "num": "798", "d": "5/2012"}, {"title": "arrayproxy length correctly updating", "body": "example extracted application switching sections arrayproxy contentlength nt update correctly causes collectionview try render array nulls appears caused removed discussion irc basically happening hwen replace array code path expires length arrayproxy nt fire hit error enumerablecontentdidchange gets called change reflected length nt notified changing collectionview tries update fails length still reflecting old value new round enumerablecontentdidchange comes reflecting new content triggers expiration late log seems related using nested array proxies", "num": "795", "d": "5/2012"}, {"title": "add name attribute binding ember input views", "body": "see order specify name attribute input tag subclass emberprovided input view class add name list attributebindings perhaps better way without retyping list attribute bindings parent class either way name definitely one attribute bindings default", "num": "794", "d": "5/2012"}, {"title": "class documentation missing jsdoc output docsemberjscom", "body": "beautiful class documentation nt show output fields methods documented html output", "num": "791", "d": "5/2012"}, {"title": "limit number ids get", "body": "loading data large number hasmany models sometimes get request sent extremely long browsers servers maximum data length send configurable option emberdata allows set maxbytesize request", "num": "790", "d": "5/2012"}, {"title": "handlebars ifunless changes context", "body": "unless changes context nt unpolished failing test case diff diff git apackagesemberhandlebarstestshandlebarstestjs bpackagesemberhandlebarstestshandlebarstestjs index apackagesemberhandlebarstestshandlebarstestjs bpackagesemberhandlebarstestshandlebarstestjs test bindings relative current context function equal ember trim view text name sfmoma price print baz twice test unless keep current context function view emberviewcreate emberobjectcreate foo works expected template emberhandlebarscompile view emberview barbinding foo foo foo view fails unless replace foo bar template emberhandlebarscompile view emberview barbinding foo unless viewdoesnotexist foo foo unless view appendview equal view text foo test bindings respect keywords function view emberviewcreate museumopen true", "num": "784", "d": "5/2012"}, {"title": "table messed updated built using", "body": "hi basically want build table row references ember object uses populate column built dead simple jsfiddle order exemplify work chrome ff amp notice table rendered started like pushed bottom inspecting final html seems shy elements inserted ember could", "num": "783", "d": "5/2012"}, {"title": "submitted discussion transitioning specific states embertransitionstate", "body": "every someone channel wants know find enterstate handler former state next state going exitstate handler reasons compelling need mutate ui ui changes depends particular change app state position basically knowing state used inside another state extrastate information another layer state existing outside formalized state chart liken following scenario object person state home home enterstate action take shoes state b work state c vacation argument want something person transitions vacation home say disable security system either vacation home states definitely work simply make statechart nontrivial say merely knowing used vacation means enough additional state quite home either transitory state transitioning vacation home follow chain logic conclusion nt great basically requires anytime want distinguish specific state transitions use intermediary state manually create handle moving ideal solution special kind state transitionstate autotransited call gotostate origin state destination state say transitionstate gt b call gotostate b statea transitionstate entered exited allowing proper stateaware encapsulation desired behaviour key state nt know intermediate transition states want go statea stateb call gotostate stateb statea transition handled transparently two questions crazy ability know previous forthcoming state inside enterexit handler nt big problem terms properly stateful reasonable solution distinction without difference thoughts issue general proposed resolutions welcome well edited clarify things", "num": "779", "d": "5/2012"}, {"title": "viewstate rootelement parent views", "body": "sure bug think behavior unexpected view state bound rootelement rootelemenet parent view removed view state still thinks root element dom tries update example create parent view view state progress next state remove parent view update binding view state observing view state throws rootelement longer dom fix could view state bound container rootview remove container parent view willdestroy however seems like lot workmaintenance developer would guys opposed viewstate attempting update rootelement longer exists", "num": "778", "d": "5/2012"}, {"title": "emberobjectcreate options set properties overwrite computed property functions", "body": "work bugs application introducing computed property setter functions clean data validate create bidirectional associations etc built app assuming calls create basically called setters given properties unfortunately works much like extend overwrite computed property functions static values contrived unrealistic example shows unintuitive behavior get another thread discussing issue stack overflow fwiw coworkers feel behaviors violates standard expectations objectoriented object model behave mentioned stack overflow thread reason see current behavior support rubystyle singleton instance method implementations would easily supported via", "num": "777", "d": "5/2012"}, {"title": "emberselect typeerror", "body": "system chrome ubuntu error uncaught typeerror read property indexof null ember master using emberselect get type error setting selection content asynchronous data load", "num": "775", "d": "5/2012"}, {"title": "observer computed property firing computed value unchanged", "body": "jsfiddle demonstrate issue set called prop property observer fires set new value expected behavior computedprop observer firing every time though even computed value believe unexpected behavior value recalculated one dependencies changes think observer fire actual value changes bug intended behavior", "num": "774", "d": "5/2012"}, {"title": "emberarrayproxy addobserver running twice latest code", "body": "fresh installed project visit tests pass web console imagine performance problem also makes testing impossible", "num": "773", "d": "5/2012"}, {"title": "emberhandlerbarscompile error documentation", "body": "emberjs api documentation handlerbars module mistaken example var template emberhandlebarscompile cool template var result template cool awesome consolelog result prints awesome template run gives following error chrome typeerror read property buffer undefined asked irc told probably removed documentation users nt expected compile templates way", "num": "770", "d": "5/2012"}, {"title": "nicer way optional template", "body": "helper sometimes want use template sometimes want pass block override template example seems backwards instead defining template inside helper would like define template inside view pass hash templatename undefined example reads better also benefit able use view expected template without go helper function define requirements view one place however try ember assert fails saying templatename inline block note worked asking question", "num": "768", "d": "5/2012"}, {"title": "access denied error ie", "body": "browser getting error worse pretty random happens around time ie screenshot debugger happens line method javascript embermeta function meta obj writable var ret obj metakey writablefalse return ret emptymeta ret odefineproperty obj metakey metadesc ret obj metakey createmeta descs watching values lastsetvalues cache source obj else retsource obj ret ocreate ret retdescs ocreate retdescs retvalues ocreate retvalues retwatching ocreate retwatching retlastsetvalues retcache retsource obj return ret call stack meta get findnamespaces classtostring anonymous function fmt helper anonymous function anonymous anonymous function render rendertobuffer createelement insertelement invokeforstate invoke iter foreach flush end end autorun", "num": "766", "d": "5/2012"}, {"body": "see html attributes section", "d": "5/2012"}, {"body": "hi trek thanks quick answer fact calling handlebars template view extract wondering could add tabindex tag docs seems use html attributes within view instead describing needs handlebars file thanks help javascript username view embertextfield valuebinding usr password view embertextfield valuebinding pwd type password", "d": "5/2012"}, {"body": "strategy discussed would also work", "d": "5/2012"}, {"body": "thanks seems clear reuse example provided discussion answer needs", "d": "5/2012"}, {"body": "please see templates layout section", "d": "5/2012"}, {"body": "yeah open idea bug developer ca nt really report much yehuda seems know", "d": "5/2012"}, {"body": "thumbsup whip thing", "d": "5/2012"}, {"body": "hi withshe probably appropriate ask question site like stackoverflow open github issue html attribute sections emberview documentation good place look see best phrase question stackoverflow", "d": "5/2012"}, {"body": "thanks \u5728 glowackireply replygithubcom hi withshe probably appropriate ask question site like stackoverflow open github issue html attribute sections emberview documentation good place look see best phrase question stackoverflow reply email directly view github", "d": "5/2012"}, {"body": "bindings problems applied prototypes reopen nt designed existing instances may seemed work nt without bugs apply mixin existing instance apply", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "ah good know thanks", "d": "5/2012"}, {"body": "see", "d": "5/2012"}, {"body": "believe may difficult relying much jquery thanks anyway ps emberjs works serverside like nodejs load jquery npm package", "d": "5/2012"}, {"body": "yeah using quite bit jquery internally ember totally could abstract away allow libraries dependencies right focus hitting release jquery facilities full ember package odd fit server includes domspecific code ember ecosystem written modularity mind number packages project available use npm", "d": "5/2012"}, {"body": "thanks lot trek", "d": "5/2012"}, {"body": "ember view layer relies jquery components entirely possible use metal runtime without jquery server packages node something like improve support future", "d": "5/2012"}, {"body": "view applied inside containing element selfenclosed content", "d": "5/2012"}, {"body": "ah well perhaps documentation updated reflect intended functionality", "d": "5/2012"}, {"body": "totally reasonable bitten", "d": "5/2012"}, {"body": "would expect see documentation like emberview layout section part textfield documentation", "d": "5/2012"}, {"body": "check changes would helped", "d": "5/2012"}, {"body": "closing since reopen adequate", "d": "5/2012"}, {"body": "least option disable autoinitialization", "d": "5/2012"}, {"body": "maybe property like", "d": "5/2012"}, {"body": "maybe property like would major improvement think wonder didbecomeready renamed already taken initializes state manager", "d": "5/2012"}, {"body": "already reported", "d": "5/2012"}, {"body": "oops missed statemanager parameter sorry", "d": "5/2012"}, {"body": "little extra digging turns jwplayer really culprit kinda jwplayer serializes playlist json nt check object ends trying serialize properties emberjs adds onto prototypes submitting patch jwplayer core team", "d": "5/2012"}, {"body": "emberselect uses sync property content selected option need stuff call make sure parent class version method called could also write method observes emberselect property", "d": "5/2012"}, {"body": "great good know solve dom change event looks like observer approach better thanks", "d": "5/2012"}, {"body": "right mixins applied javascript either helper mostly passes arguments internally single options hash nt property detected handled specially way ember options create view sublcasses mixins like applied use view helper write handlebars helper take option wrap view helper add functionality add meaningful option helper write tests submit pull request bad pattern core committers may another opinion", "d": "5/2012"}, {"body": "inclined say go one options trek suggested sure something want support though want submit pr open considering", "d": "5/2012"}, {"body": "issue already reported website repository see emberjswebsite", "d": "5/2012"}, {"body": "ok close one", "d": "5/2012"}, {"body": "specify namespace name default ember finds namespace name searching global scope global scope need give name explicitly", "d": "5/2012"}, {"body": "thanks", "d": "5/2012"}, {"body": "problem instead case root state entered immediately creation controllers instantiated call still rough edges bootstrap mechanism", "d": "5/2012"}, {"body": "thanks ca nt seem make work though far read define approuter method instantiate router store indeed could missing added new version fiddle modifications", "d": "5/2012"}, {"body": "go working version problem fact view rendering asynchronous ember ask ember render layout root state ready enter rootindex believe best practice render mainlayoutapplication view ready callback", "d": "5/2012"}, {"body": "wow thanks nt know rendering asynchronous makes sense thanks taking time help everywhere", "d": "5/2012"}, {"body": "josepjaume nice close issue", "d": "5/2012"}, {"body": "right sorry", "d": "5/2012"}, {"body": "known problem need rewinde states current workaround emberapplicationreopen setupstatemanager function statemanager var location emberget statemanager location change addition", "d": "5/2012"}, {"body": "wow fast thanks update thing bugging shall close issue", "d": "5/2012"}, {"body": "well suppose keep open fixed real", "d": "5/2012"}, {"body": "tried workaround seems work forward back buttons change hash part directly location bar mentioned workaround one questions stackoverflow please mention updates", "d": "5/2012"}, {"body": "hmm suppose master problems associated", "d": "5/2012"}, {"body": "good point thanks quick replies workaround", "d": "5/2012"}, {"body": "working master shall close", "d": "5/2012"}, {"body": "unable get work please post sample code using", "d": "5/2012"}, {"body": "sure thing coffeescript approuter emberrouterextend location hash hopefully autopick support future enablelogging true root emberstateextend index emberstateextend route connectoutlets manager consolelog root switch backforward button sure properly rebuilt ember js", "d": "5/2012"}, {"body": "pretty straightforward refuses change state unless use transitionto always reverts back sure properly rebuilt ember js using emberrails built copied necessary files gem folder router code coffeescript router emberroutercreate location hash enablelogging true emeeinitialize router", "d": "5/2012"}, {"body": "always reverts back sounds like issue accidentally ending root state router updates hash notice nt route state perhaps problem suggest try coming reduced test case demonstrate problem", "d": "5/2012"}, {"body": "nailed issue missing route app state thanks lot joliss closing ticket", "d": "5/2012"}, {"body": "post jsfiddle issue", "d": "5/2012"}, {"body": "let check show jsfiddle soon", "d": "5/2012"}, {"body": "hi code jsfiddle found something code observes reason delay said code select something delay property observes fortest function case want change value select control apply new value ui process observes later function", "d": "5/2012"}, {"body": "nt processorheavy work ie kind calculation preforming wrap call view redrawing nt waiting", "d": "5/2012"}, {"body": "thank trek perfect", "d": "5/2012"}, {"body": "ebryn take look", "d": "5/2012"}, {"body": "current master handlebars external dependency like jquery", "d": "5/2012"}, {"body": "make build like", "d": "5/2012"}, {"body": "download handlebars handlebars website include like would jquery", "d": "5/2012"}, {"body": "always master still progress may unstable use caution", "d": "5/2012"}, {"body": "see building branch includes handlebars", "d": "5/2012"}, {"body": "hekevintran nt downloading released version", "d": "5/2012"}, {"body": "also curious good haha", "d": "5/2012"}, {"body": "interested came across nt quite work mentioned gist", "d": "5/2012"}, {"body": "maybe looking callback ps better ask questions like", "d": "5/2012"}, {"body": "caligomentis looking called used emtabcontainerviewtabpaneview property widget changed ps nt think feature requests would better placed stackoverflow", "d": "5/2012"}, {"body": "looks like parentview notify children cool cool cool wo nt called visible soon appended dom default isvisible set true think work using didinsertelement becamevisible thanks caligomentis tip", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "part docs say afaict ca nt override trying figure set way", "d": "5/2012"}, {"body": "code setting templatecontext forwards templatecontext ignores", "d": "5/2012"}, {"body": "clarify templatecontext overridden useless", "d": "5/2012"}, {"body": "use also update full override effect", "d": "5/2012"}, {"body": "oh guess nt completely understand computed properties work documentation somewhere", "d": "5/2012"}, {"body": "call computed property value gets passed second parameter cp function however pass something overwrites prototype completely obliterating cp function", "d": "5/2012"}, {"body": "much understand language cp virtual properties storage associated fake property extra field must created looks like ember cp storage though", "d": "5/2012"}, {"body": "sure mean storage", "d": "5/2012"}, {"body": "fixed thanks finding", "d": "5/2012"}, {"body": "whoops helps read whole issue oh well least also implemented support", "d": "5/2012"}, {"body": "fixed master issue globals", "d": "5/2012"}, {"body": "also fixed release soon", "d": "5/2012"}, {"body": "tomdale need remove handlebars package requires update starterkit examples require handlebars", "d": "5/2012"}, {"body": "define env vars prior ember loaded", "d": "5/2012"}, {"body": "maybe thats worth mentioning warning revisiting entirely", "d": "5/2012"}, {"body": "way testing feature jsfiddle possible set env ember loaded probably good idea find another way opt new features considering many people going want test jsfiddle", "d": "5/2012"}, {"body": "machty load ember script tag instead jsfiddle resources", "d": "5/2012"}, {"body": "wagenet may seem like fairly minor point think ease using jsfiddle show features really helpful things changing even solution adds friction used sort thing going forward perhaps least default jsfiddle linked community page opt suggested settings", "d": "5/2012"}, {"body": "really used nonstandard experimental features nt see big issue", "d": "5/2012"}, {"body": "replaced pull request", "d": "5/2012"}, {"body": "general probably nt managing views controller instead create within container also", "d": "5/2012"}, {"body": "view created nested another view thus idea inject top level dependancy might created managing views currently visible case multiple views stacked like sheets right indeed used everywhere", "d": "5/2012"}, {"body": "took us tries think resolved issue closed", "d": "5/2012"}, {"body": "short use clean manually create bindings observers need tear manually good place anything created framework torn automatically", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "rough draft", "d": "5/2012"}, {"body": "trek would know version state view currently using view property state", "d": "5/2012"}, {"body": "guilhermeaiolfi thisgetpath renderstatescurrentstatename would value state slot", "d": "5/2012"}, {"body": "would ok common property used internally", "d": "5/2012"}, {"body": "guilhermeaiolfi private api one checking directly said would favor naming something less common", "d": "5/2012"}, {"body": "maybe keep name start using underscores indicate visibility property otherwise way know nt using case trek commit suggest wo nt necessary anymore", "d": "5/2012"}, {"body": "moving render state statemanger may get pulled though definitely thinking rename regardless", "d": "5/2012"}, {"body": "closing favor", "d": "5/2012"}, {"body": "duplicate", "d": "5/2012"}, {"body": "fail", "d": "5/2012"}, {"body": "pull request address", "d": "5/2012"}, {"body": "fixed", "d": "5/2012"}, {"body": "adblock extension chrome ca nt see issue doubt something ember fix", "d": "5/2012"}, {"body": "fixed", "d": "5/2012"}, {"body": "whoops misread good point", "d": "5/2012"}, {"body": "let make part viewstate docs add reference bottom statemanager class docs probably also reference documentation statemanager related casses ie routing eventually datastore since figure predominantly framework", "d": "5/2012"}, {"body": "fixed thanks trek", "d": "5/2012"}, {"body": "ok nt actually bug overrode method nt call", "d": "5/2012"}, {"body": "really implement two init level user use frameworklevel init hook internally stuff like bites people time", "d": "5/2012"}, {"body": "tomdale confirm pretty much every case think reason override framework level init", "d": "5/2012"}, {"body": "dont think bindattr used class correct bindattr datathis works", "d": "5/2012"}, {"body": "bindattr dont work class attribute without either", "d": "5/2012"}, {"body": "fri may pm samuel ytterbrink reply replygithubcom wrote bindattr dont work class attribute without either reply email directly view github", "d": "5/2012"}, {"body": "fri may pm samuel ytterbrink reply replygithubcom wrote bindattr dont work class attribute without either reply email directly view github", "d": "5/2012"}, {"body": "looks like comes property lacks proper documentation", "d": "5/2012"}, {"body": "qrilka could say working bulking docs would love address nt trip people future", "d": "5/2012"}, {"body": "proposed solution index metamorph used virtual view isvirtualtrue actions get triggered needed set isvirtual false make app work", "d": "5/2012"}, {"body": "master moved believe considered private", "d": "5/2012"}, {"body": "use stable assume breaking changes suppose next version workarounds around workaround supposed", "d": "5/2012"}, {"body": "next release probably think always considered private nt clear fact", "d": "5/2012"}, {"body": "duplicate", "d": "5/2012"}, {"body": "fixed", "d": "5/2012"}, {"body": "homepage still nt reflect changes", "d": "5/2012"}, {"body": "need rebuild docs probably wo nt happen next release", "d": "5/2012"}, {"body": "sorry double post thats bad though late update docs think many docstrings note docs post new issue list", "d": "5/2012"}, {"body": "sure sounds good get things locally run see current state master", "d": "5/2012"}, {"body": "property mixin applied arrayprototype problematic performance wise todo list make cpsetup lazily watch dependencies cached watched maybe could make current code firstobject lastobject lazy firstobjectlastobject cached andor watched", "d": "5/2012"}, {"body": "envone kselden right definitely want originally specifically want nt make sense notify changed actually nt however probably check see watched trigger probably enough change something like", "d": "5/2012"}, {"body": "think use containerview way", "d": "5/2012"}, {"body": "guilhermeaiolfi nt want like want able add view dynamically base conditions inside didinsertelement", "d": "5/2012"}, {"body": "going defer childviews modification want didinsertelement since didinsertelement notified recursively recurse newly appended views actually inserted working example", "d": "5/2012"}, {"body": "put init method", "d": "5/2012"}, {"body": "guilhermeaiolfi content ready init method afterrender method thanks everybody help resolved problem closing issue", "d": "5/2012"}, {"body": "see also", "d": "5/2012"}, {"body": "jfturcot trying run tests options run watch results command line run navigate", "d": "5/2012"}, {"body": "tried rake task also bundle exec rackup give error", "d": "5/2012"}, {"body": "jfturcot run tests time without difficulty maybe try running first", "d": "5/2012"}, {"body": "getting following error running top lines output trace tried clean set gems mac seems like character encoding issue could something mac related", "d": "5/2012"}, {"body": "setup mac well", "d": "5/2012"}, {"body": "rvm doubt causing issue try clean ubuntu install later today try debug mac fails system manage fix issue post case someone else run issue problem trying test emberdata needed submit patch emberjs", "d": "5/2012"}, {"body": "seems like sort thing wycats trying solve tokaido way get", "d": "5/2012"}, {"body": "get nothing defaultinternal right tokaido nt see would need running character encoding issues like", "d": "5/2012"}, {"body": "suspect cause", "d": "5/2012"}, {"body": "yep ran following shell use changed default encoding always thought since always default encoding guess reading encoding tonight thanks lot help", "d": "5/2012"}, {"body": "would thought default maybe wycats chime", "d": "5/2012"}, {"body": "ruby default encoding binary unless specified otherwise like", "d": "5/2012"}, {"body": "figured shell using week testing new ssh shell inside chrome wanted see could replace macbook chrome book connecting local machine developing im road well changing locale use shell uses nt time figure make chrome ssh plugin use use anyone character encoding problems using chrome ssh plugin use something else close issue thanks time", "d": "5/2012"}, {"body": "jfturcot looks like set env variable change default", "d": "5/2012"}, {"body": "yes fixed setting zshrc file working fine thanks", "d": "5/2012"}, {"body": "definitely seems like something weird", "d": "5/2012"}, {"body": "seems like ignoring special keywords ie watching updates never sees change", "d": "5/2012"}, {"body": "bah sunk day reproducing bug realize already filed someone looking give shot although familiar part code could use pointer right direction", "d": "5/2012"}, {"body": "jayferd consider lucky colleague spent afternoon stepping different versions side side trying find bug spent whole week updating code use new ember options ember big need expert help even start bug fixing", "d": "5/2012"}, {"body": "sorry guys definitely risk using bleeding edge hope fix actual release soon", "d": "5/2012"}, {"body": "true dat need apologise wagenet using bleeding edge", "d": "5/2012"}, {"body": "agreed johncant totally accepted risk decided use edge worked around putting properties need elsewhere nt use keyword", "d": "5/2012"}, {"body": "add bit description previously length array proxy depended contentlength whenever content changed length proxy guaranteed expire entirely dependent manually expire din enumerablecontentdidchange except logic enumerablecontentdidchange nt fire expiration length unless detects mutation wholesale change content array nt seem count", "d": "5/2012"}, {"body": "rlivsey looks like need failing test length property triggering duplicate notifications bad apparently accounting legitimate untested case look", "d": "5/2012"}, {"body": "confirm fixes issue fiddle amp app cheers", "d": "5/2012"}, {"body": "concatenated property simply adding property name subclass add need repeat likely attribute binding form elements support people like using ember manipulate forms submitting using browser built ability said suggest investigating handling data submission via ajax instead nt needed actual tags ember using html forms obviates need handling data serialization via attributes form elements still necessary user type somewhere", "d": "5/2012"}, {"body": "machty agree trek many cases nt need though understand js libraries make use main hesitation pretty generic property name bit concerned would immediately obvious", "d": "5/2012"}, {"body": "machty could also reopen embertextfield gut reaction leave issue open comments see others absolutely need included html form serialization pattern nt make much sense ember libraries frameworks ember really trying keep canonical source data dom wagenet probably insight simplified example", "d": "5/2012"}, {"body": "use attributes projects integrationtesting capybara currently using reopen trick like trek mentioned", "d": "5/2012"}, {"body": "bradleypriest curious name attribute play capybara testing way nt utilized production app", "d": "5/2012"}, {"body": "machty nt actually bothered turning production many things optimize worrying tiny bit extra overhead generating name attributes", "d": "5/2012"}, {"body": "bradleypriest right meant nt testable without name attributes", "d": "5/2012"}, {"body": "machty nt understand referencing inputs capybara tests", "d": "5/2012"}, {"body": "bradleypriest match form element capybara text long label property matches element label usage makes pleasant looking tests although find gets annoyingly brittle label text might change often personal practice pick good naming convention form element ids refer way", "d": "5/2012"}, {"body": "trek reason thought frowned upon set elementid often ember idea got honest maybe moving forward got label setup match inputs places binding seems bit dodgy quite forms inputs without labels master version capybara actually allows search placeholder well find even brittle", "d": "5/2012"}, {"body": "bradleypriest setting nt frowned upon need make sure unique thing nt allowed changing creation", "d": "5/2012"}, {"body": "want use jquery send contents form server manually attributes essential us refactoring existing applications ember emberdata waaay overkill pretty important able interact forms usual browsery way", "d": "5/2012"}, {"body": "gah ca nt think way say without sounding like asshat think might approaching wrong ember perspective ember really shines html driven javascript objects already object generated form running step backwards", "d": "5/2012"}, {"body": "jayferd instance form fields bound object use get hash object submit object data", "d": "5/2012"}, {"body": "understand ember supposed used seeing still good way implement radio button controls limited options real point though browsers frameworks developers expect form controls attributes think confusing allaround nt settable leaving case someone wants give nonattribute name one form controls optimizing weird edgecase imo", "d": "5/2012"}, {"body": "fair objection however still good way bind list radio buttons several control views still wonky using native form semantics still useful also came surprise actually input elements without attribute radio buttons particular super wonky try way mon may trek glowacki wrote gah ca nt think way say without sounding like asshat think might approaching wrong ember perspective ember really shines html driven javascript objects already object generated form running step backwards reply email directly view github", "d": "5/2012"}, {"body": "jayferd wonky control views radio buttons", "d": "5/2012"}, {"body": "know often questionsconfusion use checkboxes indicate inclusion array tempted add documentation embercheckbox unless think overkill waiting selection support make way arraycontroller", "d": "5/2012"}, {"body": "reference radio buttons topic", "d": "5/2012"}, {"body": "hm perhaps radio buttons also resolves pretty nicely integrates well attribute purposes pr mirror attribute go", "d": "5/2012"}, {"body": "browsers work closed duplicate", "d": "5/2012"}, {"body": "mochaleaf mean open emberdata instead", "d": "5/2012"}, {"body": "sorry close reopen", "d": "5/2012"}, {"body": "marklazz work ie", "d": "5/2012"}, {"body": "hi wagenet thanks quick answer fix works sample built sadly original concern complex need use want render one tr element per object collection new sample reflects concern ca nt use collection case right good great make work possible", "d": "5/2012"}, {"body": "marklazz make sure work wanted know works", "d": "5/2012"}, {"body": "yeah confirm collection works first example mentioned ca nt use collection second sample yes collection trick simple cases", "d": "5/2012"}, {"body": "nt think crazy idea probably one people channel asking existed somewhere needs exactly outlined ui changes based state knowing came going would really help applying visual transitions", "d": "5/2012"}, {"body": "edited first two questions closely align actually wondering whether making mountain molehill visavis conceptual problems knowing previous next state inside enterexit handlers", "d": "5/2012"}, {"body": "make transition state like animation viewingpeople slidinglefttoperson viewingperson slidingrighttopeople viewingperson transition state enter connects states follow pattern state events call gotostate allows guards states transition state", "d": "5/2012"}, {"body": "agree simply adding additional state moving washing hands suffices concern perfectly acceptable solution begins weigh primary purpose statechart forcing manual insertion states calling transition guard state instead transition state actually want end think particularly valid concern state transition question purely ui otherwise orthogonal concerns play laying states idea behind transitionstate api would allow hook concrete state transitions transparent way rather pollute statechart bunch accessory states sake flattening everything", "d": "5/2012"}, {"body": "states supposed stateless represent state app sends viewperson id nt know transition event handler state sets personcontroller calls goto slidinglefttoperson enter state slides person ui sends complete event state calls goto viewingperson button started sent viewperson accessory states might receive events could interrupt transition needs unwind exit state like history back button nt think polluting state chart much honest complexity app", "d": "5/2012"}, {"body": "sorry struggle head idea would save boiler plate setting still state maybe abort complete events please nt close nt trying dismissive", "d": "5/2012"}, {"body": "must confess think misread question probably haste little tiredness struggle lot issue routing animations app stewed lot think idea could simplify lot boilerplate question sometimes transition b different depending event kicks like routing via browser forward button might want cut directly vs app open button animates transition", "d": "5/2012"}, {"body": "sorry bit short tempered long day moving thinking behind transitionstate nt make transition state rather couple times told people transition actually separate state model way solution gotten push back probably creating states already kinda verbose adding additional boilerplate say see natural somewhat consequencefree extension logical statechart seems onerous thinking could lightly layer additional api top state creation transparently define state get inserted set transition given state given state b sort uionly state work could implemented without requiring people rewire statecharts also allowing transitions swapped easily would basically turn edges chart full states selective ad hoc basis downside deformalize statechart bit going state state b would longer guaranteed result exit state followed enter state b", "d": "5/2012"}, {"body": "thinking somewhat influenced used acts state machine model transitions states separate structures states think bridge far transitions properly belong states mental model upgrading transition full state without rewire chart currency think", "d": "5/2012"}, {"body": "modeling transition seems actual state possibly naming transitionstate holding back since transition state obviously involved also seems like exposing actual state transition seems logical sort strange ie", "d": "5/2012"}, {"body": "well developer perspective fact dealing transition two states internal implementation would full state transparently insinuated two states transitioning", "d": "5/2012"}, {"body": "importance full state would accept events explicitly constructed state chart gotostate yourtransitionstate called per kselden example escape could trapped cancel transition one additional fairly minor advantage hardcoding intermediate states statechart single transitionstate transition better name could bidirectional transition would definition exempt requirement know whence coming going", "d": "5/2012"}, {"body": "definitely started run well agree sort transition framework would nice shot dark potentially verbose emberish js emberstatemanagercreate transitions atob embertransition function called entering stateb statea statea stateb sure naming transitions much overhead whether would useful", "d": "5/2012"}, {"body": "one thing consider currently view removed corresponding viewstate exited added enters transition b needs perform animation view ca nt exit transition startsends however transition b needs perform animation b view likewise needs entered b transition kicks transition modelled period b would access neither view would already removed b yet added", "d": "5/2012"}, {"body": "jayferd thinking api simple extension current way statecharts laid simple nt add much verbosity extension nt alien concept something like emberstatemanagercreate slideinpicturetransition emberstatetransition function direction additionally opinion caring particular state transitioning means additional state information needed probably something conceptually regular enterstate handler nt sufficient rlivsey last hear viewstates deprecated either way automatic view addingremoving behaviour would considered incompatible animating views manually transition much would incompatible manually transitioning views using explicitly defined inbetween state although suppose could modified detect exiting handled transition case disable automatic behaviour anticipation developer manually handling", "d": "5/2012"}, {"body": "adamjmurray discussed extends prototypes setting computed property values nt something going change consider using want wycats kselden might able chime rationale", "d": "5/2012"}, {"body": "adamjmurray create nt setter setting operation", "d": "5/2012"}, {"body": "adamjmurray also performance reasons magic nt understand", "d": "5/2012"}, {"body": "main issue want create instance set initial property values init called adjust mental model ember supposed work seen confuse people going change deal", "d": "5/2012"}, {"body": "adamjmurray property setup", "d": "5/2012"}, {"body": "wagenet suggested adam open ticket discussion similar thoughts day hashed previous ticket could link dupe think something fair number people gon na look askance go looking answers changes help record reasoning behind design decision", "d": "5/2012"}, {"body": "wagenet like idea recommend pattern something like following seem reasonable would nt expect code classes sort thing would well suited toplevel superclass agree endash behavior kind thing go faq docs reasoning behind performance fine people want know understand need careful create arguments using computed property functions", "d": "5/2012"}, {"body": "emberobjectcreate like objectcreate prototype prototype instance constructed super constructor using cp setter curious use case want use args init use new class args instead wo nt able autowiring bindings cp observes remember call super arguments inside init javascript appfoo emberobjectextend init function props thissetproperties props new appfoo props careful overriding classes expect args init call super args", "d": "5/2012"}, {"body": "adamjmurray probably something like endash mainly design decision right fact override computed properties means following code work since computed property change code would nt work anymore either make verbose verbose using custom setup either way cost", "d": "5/2012"}, {"body": "would suggest instead setter design cp would set dependency create like templatename template view cp setters rare nt care wiring create nt use javascript appperson emberobjectextend init function firstname lastname thisset firstname firstname thisset lastname lastname appemployee apppersonextend init function firstname lastname manager thissuper firstname lastname thisset manager manager new appemployee john doe manager", "d": "5/2012"}, {"body": "kselden current use cases computed property setters enforcing bidirectional relationships parentchild relationship every time move child another parent would need call simplified code made less errorprone enforce relationship cp setter one two statements would needed enforcing data validity imageediting app certain combinations operations lead floating point values want enforce integers model simplified code allow app worry round nearest integer model cp setter data normalization really variation data validity like textediting app different browsers try set different markup model normalize markup via cp setter cases applied patterns previous app building experience build models enforce state valid new code paths introduced may interact models new ways nt worry regressions behaviors getting feeling simply use cp setters suppose might consider funneling model changes authorized controller enforce things keep brainstorming ideas input appreciated", "d": "5/2012"}, {"body": "expects provide array probably allow though set empty array default", "d": "5/2012"}, {"body": "adamlogic way around nt compute cps called happens observer fired checked right away compute much frequently performance would suffer", "d": "5/2012"}, {"body": "wagenet understood would open docs patch clarifies behavior", "d": "5/2012"}, {"body": "adamlogic certainly would definitely worth highlighting fact cps lazily computed totally worth sometimes catches people surprise especially trying use cps use observers", "d": "5/2012"}, {"body": "wagenet added pull request curious examples handy people using cps use observers", "d": "5/2012"}, {"body": "saw someone trying responsive style behavior cp definitely odd idea main thing notice observers fire instantly whereas bindings wait end runloop cps nt fire requested", "d": "5/2012"}, {"body": "thorough look observer executes twice callback executes seems random nt executing", "d": "5/2012"}, {"body": "looks like probably bug kselden investigation similar areas probably take look", "d": "5/2012"}, {"body": "fixed", "d": "5/2012"}, {"body": "nevermind setting null gives expected behavior thought tried guess", "d": "5/2012"}, {"body": "actually fixed issue editing ember source code pretty sure undefined checks incorrect diff fixed issue javascript index emberjs emberjs revision emberjs working copy embermeta function meta obj writable var ret obj metakey var ret false typeof obj metakey undefined ret obj metakey writablefalse return ret emptymeta ret obj return undefined var ret obj keyname typeof obj keyname undefined ret obj keyname retundefined amp amp functiontypeof objunknownproperty ret objunknownproperty keyname", "d": "5/2012"}, {"body": "sounds like might passing plain objects ember expecting instances way provide reduced test case also one professional another might want consider choosing less trollish github username future help spare time little offputting invest personal free time someone whose attitude comes adversarial seems like frustrated totally get help let us", "d": "5/2012"}, {"body": "tomdale sorry username changed meant sense fail ember realize guys least smarter bug subject may right doublecheck would nt see similar errors chrome though still right way check something undefined possible define undefined global variable completely breaks check code throw errors obj defined really strange error ie chose throw case nt see possibly access denied tried invoke manually ie gave right error message", "d": "5/2012"}, {"body": "heh worries nt sure meant meanspirited like give people benefit doubt since easy miscommunicate text form thing hot path one invoked functions entire framework ca nt make check slower calling every object goes assumption someone may something batshit insane like redefined also believe good error messages defensive coding every bit performance eek method adds real savings even avoiding object check important code guard calling undefined need said able look stack trace error thrown see wtf passed", "d": "5/2012"}, {"body": "status heard reports issues get reproducible failure diagnose still issue", "d": "5/2012"}, {"body": "tomdale sorry tom insanely busy project patch fixed bug using patched version ember honest nt know debug easily error message comes ie js debugger gives much stack trace none functions error originates ember realize probably incorrect data feeding", "d": "5/2012"}, {"body": "also getting error pretty sure something wrong well since ember demos wrote work fine see exception go ie debugger slightly better useless prints local variables says value nt know way expand evaluated console printed nothing ran printed screenshot debugger running makes ie say trying access property makes ie say lost", "d": "5/2012"}, {"body": "hekevintran thanks providing app failure app see happen", "d": "5/2012"}, {"body": "hekevintran right getting server error try submit results", "d": "5/2012"}, {"body": "wagenet fixed issue thanks looking problem see error quiz results page answer questions", "d": "5/2012"}, {"body": "hekevintran share fix others encountered issue", "d": "5/2012"}, {"body": "sorry meant fixed server error getting still clueless fix access denied error", "d": "5/2012"}, {"body": "ifail app running iframe", "d": "5/2012"}, {"body": "hekevintran figured going wrong looking namespaces ember trying examine iframe created facebook different domain access prohibited fix part release chance test master let know resolves issue", "d": "5/2012"}, {"body": "ifail guessing issue probably mistaken let know reopen issue", "d": "5/2012"}, {"body": "upgrading emberlatestjs fixed issue thanks", "d": "5/2012"}, {"body": "hekevintran warn running master may bugs glad know fixes one though hopefully release soon", "d": "5/2012"}, {"body": "confirm using emberlatestminjs fixed problem also running iframe using facebook signon safe run prod roughly think", "d": "5/2012"}, {"body": "known issues listed", "d": "5/2012"}, {"body": "wagenet ok looks good thanks help glad got resolved", "d": "5/2012"}, {"body": "wagenet roll naming conventions post wholesale documentation", "d": "5/2012"}, {"body": "tomdale fine", "d": "5/2012"}, {"body": "kselden thank example nt think bit insane amount code indirection required simple task", "d": "5/2012"}, {"body": "emberfail actually much unusual going read code see kselden implemented lot pieces app really unusual part actually nt complex rest standard pretty basic view definitions basic state manager gone beyond providing minimal solution actually given basic app framework", "d": "5/2012"}, {"body": "emberfail simplest example would showhide question understood want defer creating views templates append existing ember view simple example defers creating view template needed takes view dom manner wo nt cause issues like append loading templates via ajax going need loading states find statemanagers useful started one also thought dealing currentview would simpler childviews made computed property make set single property currentview idea give building blocks build nt meant simplest possible example hope one works better", "d": "5/2012"}, {"body": "currently manually example spacebar pause video", "d": "5/2012"}, {"body": "blindsamson reading code correctly never destroying objects bindings creating object", "d": "5/2012"}, {"body": "yay", "d": "5/2012"}, {"body": "almost feel like setting namespaces initial boot disallowed", "d": "5/2012"}, {"body": "kselden wycats remove rewatch code", "d": "5/2012"}, {"body": "pivotalmedici nt made yet address issue enough close", "d": "5/2012"}, {"body": "trek since using event managers complex concept even something use core also document standard events listed", "d": "5/2012"}, {"body": "trek yep seems good", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "cant test see attribute also property class use set otherwise pass subclass hash obj looping attributes anyway", "d": "5/2012"}, {"body": "guilhermeaiolfi think would confusing helpful principal least surprise possible keep semantics across properties", "d": "5/2012"}, {"body": "tomdale nt see confusion property already exists means want set value otherwise would extending class confusing expect helper subclassing bc keeps strategy behind scenes developers never know going face misbehavior described property nt exist result since properties simple values stringsnumber harm done would keep bindings stuff working", "d": "5/2012"}, {"body": "guilhermeaiolfi may cases want override computed property property one place though one nt something helper", "d": "5/2012"}, {"body": "saying since properties set view helper strings number wont matter setting extending result ones going extend class elsewhere", "d": "5/2012"}, {"body": "viewhelpers respect computed getters amp setters nobrainer another quickly contrived example illustrates confusion viewhelpers currently handle properties given view generates random background coffeescript apprandombackgroundview emviewexted attributebindings style defaultstyle emcomputed gt return backgroundcolor randomcolor style emcomputed key val gt getter argumentslength return get defaultstyle setter else return get defaultstyle val cacheable would one expect following viewhelpers usage", "d": "5/2012"}, {"body": "think points made sufficiently compelling reopen ticket track discussion release", "d": "5/2012"}, {"body": "jamesotron see created rake tasks basically copy packages node module equivalents guys thoughts wagenet tomdale think would ideal use npm instead bpm ruby stuff build large package individual files using simple regex cleanest implementation link even basic nt require ruby could equivalent ruby much way used npm since people probably downloading compiled distribution file client anyhow requires modifying statements working locally changing way also follows commonjs module pattern would like make pull request also another benefit setup emberjs package global npm cache individual projects develop emberjs code main repo locally reflected current project nt sure easily current setup", "d": "5/2012"}, {"body": "viatropos bpm different purpose npm npm server side code bpm client side however bpm also use packagejson format confusing ok want rename bpmpackagejson let care using bpm manually rename nt think want modify require statements", "d": "5/2012"}, {"body": "removing ruby dependency switching node provides us benefit either way developers want make builds install third party dependency", "d": "5/2012"}, {"body": "npm wo nt recognize inside library since actual path would need either seems like need rewrite commonjs question bpm curiosity idea node time people using definitely understand want keep purely build seems may easier use npm like", "d": "5/2012"}, {"body": "another alternative build single file node probably easiest wo nt require modifying statements nt feel clean", "d": "5/2012"}, {"body": "viatropos suggest actually include standard production versions pacakge", "d": "5/2012"}, {"body": "folder would used publishing", "d": "5/2012"}, {"body": "viatropos since better node experience welcome replace meagre attempt something better also need either fix windowglobal issue ember simply make patch part build system", "d": "5/2012"}, {"body": "closing track", "d": "5/2012"}, {"body": "tried make happen back march copypasted jquery get zepto passing modified version test suite modifications removal jquery selector extensions dropping synthetic event tests eventdispatcher since synthetic events much broken features testing worked fine manually going remembered tonight rebased pulled zepto master failing tests nt looked errors check tests look valid look like different symptoms issues planning hacking zepto get fully passing something people would interested", "d": "5/2012"}, {"body": "grayrest interested features jquery missing zepto jq css extensions order get emberjs working please open issues zepto issue tracker emberjs supporting zepto spoke wycats person explained wo nt support zepto officially emberjs short version zepto jquery therefore might always obscure bugs edge cases agree however made clear would interested patches emberjs test suite make less dependant jqueryspecific features proprietary css selectors test suite would easier run zepto people want take risk run zepto ember apps", "d": "5/2012"}, {"body": "would nice think would performance hit imagine would respond events like mousemove", "d": "5/2012"}, {"body": "includeexclude filters would use mostly dubugging", "d": "5/2012"}, {"body": "eishay feel like would bit much us implement debugging looked setting custom event manager view", "d": "5/2012"}, {"body": "exception situation like model childmodels model model loaded following manner views hamlbars wrapper list view item view model javascript emberresourceextend fails try render hb view categoriesbinding subcategories item view", "d": "5/2012"}, {"body": "kpetersons put together something jsfiddle preferably using standard js use starting point", "d": "5/2012"}, {"body": "kpetersons happen one time first runin templateview observing something changing really fast fast something wrong check type thing going", "d": "5/2012"}, {"body": "sorry trouble guys fault logic loading data json invalid ended error result infinite recursion", "d": "5/2012"}, {"body": "kpetersons worries still seems like would good us better error message", "d": "5/2012"}, {"body": "pull request issue", "d": "5/2012"}, {"body": "closing since merging soon", "d": "5/2012"}, {"body": "precise requirement wrote following generalize", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "forked version coffeescript provides hooks setting prototype properties static properties extends hook allows coffeescript coffeescriptmixin extend child gt object emberobjectextendapply objectname childname extendedcall object extended object definestaticproperty key value gt object object key value key value reopenclass object defineproperty key value gt object object key value reopen object emberobjectreopenclass coffeescriptmixin embernamespacereopenclass coffeescriptmixin emberapplicationreopenclass coffeescriptmixin emberarrayproxyreopenclass coffeescriptmixin emberstatereopenclass coffeescriptmixin emberstatemanagerreopenclass coffeescriptmixin class like coffeescript class towermodel extends towerclass field name options gt errors null generated using custom version coffeescript look like javascript var definestaticproperty function clazz key value typeof clazzdefinestaticproperty function return clazzdefinestaticproperty key value return clazz key value defineproperty function clazz key value typeof clazzdefineproperty function return clazzdefineproperty key value return clazzprototype key value hasprop hasownproperty extends function child parent typeof parentextend function return parentextend child towermodel function super var model function model return modelsuperconstructorapply arguments model extends model super definestaticproperty model field function name options defineproperty model errors null last thing trying figure create million instances one methodvariable way append methods sort current last mixin", "d": "5/2012"}, {"body": "opinion enter nt used shorthand state transitioning states state things immediately entering state needdemand fullyrealized idea state transitions first class entities open ticket concept case running issue call gotostate enter method depending whether object loaded state transitions unwind outer state est currentstate ultimate state reached actions broken", "d": "5/2012"}, {"body": "reference new view context changes nt directly address issue", "d": "5/2012"}, {"body": "closing since new view context changes cover case wycats talking", "d": "5/2012"}, {"body": "wycats mentioned nt update use appending prepending instead using following properties depend manually expire checking list new items inserted seeing needs update neighbours checkneighbours prev get previousmessageview oldnext prevcachefor nextmessage next get nextmessageview oldprevious nextcachefor previousmessage full listing took code seems reasonably fast obviously nt want properties update array length changes gets slower slower something like baked would rather useful", "d": "5/2012"}, {"body": "possible solution value binding emberselect uses optionvaluepath compare values", "d": "5/2012"}, {"body": "add css element ios magically listen click events also apparently add attribute element ios listen clicks sure something ember us something watch", "d": "5/2012"}, {"body": "also getting error also changing views time using state manager view bound content arraycontroller think know problem view removed dom arraywillchange embercollectionview still triggered question disabled somehow app big paste jsfiddle thanks", "d": "5/2012"}, {"body": "tobikko removing view dom", "d": "5/2012"}, {"body": "view bound content arraycontroller think state manager removing view since happens switch state newitemlistview readded everytime goes back original view metamorph different var newitemlistview appitemlistviewcreate contentbinding apptravelitemlistcontroller newitemlistviewappendto currentsectionviewget elementid goes clear html breaks removingall thisinvokeforstate empty metamorphprototypecheckremoved function thisisremoved throw new error perform operations metamorph dom empty function view viewmorphhtml", "d": "5/2012"}, {"body": "using almost certainly problem", "d": "5/2012"}, {"body": "use instead need append current section also appending didinsertelement event another event better", "d": "5/2012"}, {"body": "appending root view application never another view child view really need swap child views another view consider using", "d": "5/2012"}, {"body": "bring back right time", "d": "5/2012"}, {"body": "resolved since brought back", "d": "5/2012"}, {"body": "causes assert watching undefined global", "d": "5/2012"}, {"body": "still like feel like need better way handle different builds ember", "d": "5/2012"}, {"body": "still something people want", "d": "5/2012"}, {"body": "carllerche feature wanted", "d": "5/2012"}, {"body": "thinking nt think supporting bubbling behavior intuitive want get events item make custom view mouseentermouseleave item", "d": "5/2012"}, {"body": "could work performance issue apporders long list much better practice generally bind bubbling event container reference event target softmodal jquery previously delegates events inward example", "d": "5/2012"}, {"body": "jayferd nt see would performance issue missing", "d": "5/2012"}, {"body": "difference binding n events n dom elements binding event dom element example emberless world say html html order order order want something click order two ways straightforward problem selected objects jquery happily iterate bind separate click handlers whereas bound one event much easier browser works event bubbles element parent element still retains reference target newer versions jquery made pattern easier new semantics", "d": "5/2012"}, {"body": "jquery docs", "d": "5/2012"}, {"body": "ember event dispatcher uses jquerydelegate nt set individual watchers view", "d": "5/2012"}, {"body": "oh interesting surprised works seeing nt bubble", "d": "5/2012"}, {"body": "know issue nt really resolved months seems like bit stalemate", "d": "5/2012"}, {"body": "reopening seems like compelling use case adding notes addobserver roles addobserver obj root path target method obj book keeper fires events keeps listeners chains responsible destroy root root chain path path chain target listener method method listener argumentslength gt listener sure like tuple param", "d": "5/2012"}, {"body": "would implement emberwatch root path add chain watcher fire change events guid path", "d": "5/2012"}, {"body": "also allow side binding would allow separate bookkeeper either case keywords object could keywords keyword context path connect view would cleaned viewdestroy without ensure emberdestroy keywords viewdestroy", "d": "5/2012"}, {"body": "wycats thoughts", "d": "5/2012"}, {"body": "anyone hitting issue new application looking trace new issue page page moved sproutcore renamed emberjs", "d": "5/2012"}, {"body": "hi possible enclose strings like appcontrollersomecod pattern parsed passed getpath rest expression evaluated afterwards", "d": "5/2012"}]