[{"title": "documentation rationale event callback signatures", "body": "wondering rationale couple elements backbone design events callback method signature whereas thinking situation desirable use callback types change events would helpful always passed position pass new value attr name model passed anyway attr name want new value trivial call current setup straighforward way get attr name seems callback received attr name instead value would open dynamic possibilities using callbacks multiple attributes case nt think documentation good job explaining eventually went thoroughly found information different callback signatures think mentioned section either inline via link submitted pull request links faq gt catalog events section", "num": "1361", "d": "5/2012"}, {"title": "trigger change event bug", "body": "code expect nothing name changed description event nt triggle set name triggle set attribute without", "num": "1358", "d": "5/2012"}, {"title": "modelfetch calls url returns empty array yet empty model created", "body": "hi description simple backbone modelcollection thing going application initialize like javascript var models contains backbone models sort global dictionnay document ready function modelsimagescollection new imagescollection ownerid context jsp page el expression modelsimagescollectionfetch javascript var img backbonemodelextend var imagescollection backbonecollectionextend model img url damimageviewlist initialize function annonceurid thisurl annonceurid fetch collection calls url url may return two things depending value variable http status array json object mime type applicationjson http status ressource identified variable value exists body request empty array like contenttype applicationjson error last case empty array weirdest thing happen backbone creates one model collection model attributes results page showing one item one item empty attributes pretty use html templates populate view models one model case even empty array guess backbone bug somewhere well server returns empty array creating one model empty array workaround using error callbacks collection hacking framework reproducce hardest part reproduce need server serve urls reproduceblabla gt returns http json mime type non empty array json objects array must size strictly superior one gt returns http json mime type empty array use html page change scripts includes course switch line value changeme blabla see value console outputs never equals html", "num": "1356", "d": "5/2012"}, {"title": "unable bind event view event using parent gt child selector", "body": "love backbonejs little shocked currently nt way bind view method event happens one viewel immediate children let explain usually define events view view backboneview dosomething function works fine encounter situation want immediate children elementsmain click event good example tree data like see every element could potentially elements child holds elements using view declaration binding click event element would binding click event every element tag entire tree element represented actual element dom cause number problems undoubtedly methods use current view dom object viewel possible trigger event could change wrong object next logical step declare something like usually define events view view backboneview dosomething function notice greater sign used jquery parent gt child selector order try pinpoint immediate children nt work jquery delegate function used viewdelegateevents call bound methods correct context play nicely parent gt child selector lot really terrible workarounds broke things like calling estopimmediatepropagation eventual solution putting initialize method view anyway seems like pretty basic feature ask anyway get fixed experienced enough feel attempt tackle mainly wondering issue looked also potential fixes", "num": "1354", "d": "5/2012"}, {"title": "way get defaults via function", "body": "custom id field part object sending back server needs different model easy way specify field get initial value using function generates id tried seem work", "num": "1352", "d": "5/2012"}, {"title": "coffeescript strange backbonerouter instance behavior", "body": "check normal code class router extends backbonerouter properties initialize options gt windowbug properties propertiessomeattribute optionsattribute new router attribute foo new router attribute bar new router attribute foobar foobar foo foobar bar foobar ok consolelog windowbug foobar windowbug trololo trololo foo trololo bar trololo foobar consolelog windowbug trololo", "num": "1351", "d": "5/2012"}, {"title": "collectionwhere fails stringnumeric integer comparison", "body": "awkward behavior backbone collectionwhere method unlike collectionget operation operates identity comparison particularly problematic dealing integer ids get operation things work fine either way operation fails get stuck wondering went wrong glaring example problem would router grabs id url id therefore string instead proper integer unless take care parseint route cause failures line meets well formed integers model data collectionwhere behavior loosened accept stringnumber comparison sanitizing data gets bit onerous considering possible ways accidentally triggered", "num": "1350", "d": "5/2012"}, {"title": "optimistic modeldestroy", "body": "hi way without rewrite modeldestroy method prevent destroy event bubbles collection contains model istance want check server response json content http code http delete response case example server response contains errormessege inside json remove model collection know success callback inside modeldestroy call destroy event already triggered bubbles collection thanks", "num": "1347", "d": "5/2012"}, {"title": "tailoring search nonhash fragments", "body": "currently using pushstate windowlocationsearch unconditionally included fragment backbone uses routing however always make sense query string parameters irrelevant cache defeat parameter classic example web servers design neglect query string parameters django plausible example could course incorporate routes kind specification lets ignore irrelevant query string parameters unnecessarily repetitive quirky difficult maintain currently think near future needs situation demands four kinds options use search backwards compatible current implementation default behavior ignore search respect certain enumerated query string parameters using standard http query string structure planning implementing like right wanted see anyone else thoughts suggestions relevant issue overlooked important feature backbone", "num": "1346", "d": "5/2012"}, {"title": "add success callback create method", "body": "working project three collections mapped different apis need fire fetch different collection create new instance model problem fetch requires id passed returned create post method need wait success callback firing fetch pass id parameter returned create thanks", "num": "1345", "d": "5/2012"}, {"title": "slice collections", "body": "perhaps could collectionslice method would work pretty much exactly like arrayslice method already slice collectionmodelsslice probably efficient way even underscore slice would simple huge deal might make things touch readable", "num": "1343", "d": "5/2012"}, {"title": "providing convention completely destroying view", "body": "wondering backbone nt provide default convention fully removing view along bound modelcollection events view single method eg seen recommended several places track remove external modelcollection listeners proper garbage collection zombie views etc wondering feature left specific reason", "num": "1339", "d": "5/2012"}, {"title": "backbonehistoryloadurl appears fire twice", "body": "overriding loadurl method history prototype place alert console whilst calling super results two alertsconsole per hashtag change first call fragmentoverride always undefined example code var authentication new backboneview var old backbonehistoryprototypeloadurl backbonehistoryprototypeloadurl function fragmentoverride alert loadurl called oldapply fragmentoverride alert page found else trigger fact url changed authenticationtrigger urlchanged fragmentoverride authenticationon urlchanged function fragmentoverride sorry nt investigated fix yet make pull request agree bug", "num": "1338", "d": "5/2012"}, {"title": "destory model collection", "body": "hi trying delete model collection well database case deleting database list want know also deleting model database refresh list iterate list deletion getting updated list code like windowapp appproductcategory backbonemodelextend urlroot restproducts url function var base restadminprodcat thisisnew defaults id null productcategory description parentproductcategoryname appproductcategorycollection backbonecollectionextend initialize function alert productcategorycollection intialization model appproductcategory url restadminprodcat appproductcategoryview backboneviewextend initialize function thiscollectionbind reset thisrender thiscollectionbind change thisrender thismodelbind remove thisrender render function eventname alert productcategoryview render appproductcategorylistview backboneviewextend tagname li initialize function thistemplate template tplget categorylistview thismodelbind remove thisrender thismodelbind change thisrender render function eventname alert render productcategoryitemview thisel html thistemplate thismodeltojson alert render productcategoryitemview return appproductcategorydetailview backboneviewextend tagname div thistemplate template tplget productcategorydetailview initialize function render function alert model thismodelid alert changed el thisel events change input change click save saveproductcategory click delete deleteproductcategory change function event thismodel new appproductcategory var target eventtarget consolelog changing targetid targetdefaultvalue targetvalue could change model spot like var change change targetname targetvalue thismodelset change saveproductcategory function event deleteproductcategory function event alert inside delete thismodeldestroy alert model deleted thismodelget productname var vthismodelget productname thismodelproductnamev var iid id val thismodelid id val thismodeldestroy success function alert deleted successfully windowhistoryback appheaderview backboneviewextend tagname div initialize function thistemplate template tplget header render function eventname thisel html thistemplate return events click new newproduct newproduct function event routernavigate productsnew true return false approuter backbonerouterextend routes list productsnew newproduct products productcategory productdetails list function callback productdetails function productcategory productname var pname productcategory alert product name pname var productcategorymodel routerproductlistwhere productcategory unescape pname productcategorymodel null alert size productcategorymodellength alert value array productcategorymodel get productname app productcategorymodel tojson thismodel new appproductcategory thismodelset app routershowview content new appproductcategorydetailview model thismodel newproduct function showview function selector view alert show view thiscurrentview thiscurrentviewclose selector html viewrender el thiscurrentview view return view tplloadtemplates header categorylistview productcategorydetailview function router new approuter backbonehistorystart backboneemulatejsontrue backboneemulatehttp true backboneemulatehttp true", "num": "1337", "d": "5/2012"}, {"title": "model defaults shallowcopied object attributes altered defaults object", "body": "backbonemodel constructor following code used use property well default values data newly created model properties type object overridden one new model attributes contain reference attribute object means attribute updated model value defaults altered nt sound like something ever want reduced example javascript var modelwithdefaults backbonemodelextend defaults obj var new modelwithdefaults consolelog mattributesobj modelwithdefaultsprototypedefaultsobj gt true consolelog modelwithdefaultsprototypedefaultsobj gt var objval mget obj objvalu mset obj objval consolelog modelwithdefaultsprototypedefaultsobj gt u", "num": "1336", "d": "5/2012"}, {"title": "parameters structure modelsave mongoid", "body": "application rails mysql migrating mongoid using backbonejs make application friendly use modelsave mysql version got ajax call like use params user controller key user params mangoid got params user key disappear solve problem thank", "num": "1334", "d": "5/2012"}, {"title": "unset option side effect", "body": "model unset clear methods modify options argument case nothing set options acquired unset property clear would agree trap", "num": "1331", "d": "5/2012"}, {"title": "stop view add parent element template", "body": "know backbonejs view parameter like id tagname classname javascript var documentrow backboneviewextend tagname li classname documentrow use insert template parents property doest set add div template template parent really annoy cuz something nt need parent need already template cancel", "num": "1330", "d": "5/2012"}, {"title": "separate view collection model different js file couldt recognize", "body": "use backbonejs create web app view collection model write one js file success want separate different js files like javascript load model code jquery load javascript function model var managemodel backbonemodelextend default selectedid unknow selectlayer function uuid thisset selectedid uuid dellayer function firebug tell bug javascript managemodel defined break error model managemodel collection file separate different file could recognize solve problem right load order", "num": "1329", "d": "5/2012"}, {"title": "collectioncomparator fails ie", "body": "environment creating function returning value ie throws exception saying exception point shown ie returning comparator makes ie happy", "num": "1328", "d": "5/2012"}, {"title": "bug backbone nt work ohio", "body": "ca nt connect internet man tried connect backbone times yesterday connection backbonejsorg", "num": "1321", "d": "5/2012"}, {"title": "backboneview able match toplevel view elements", "body": "hi found problem project take look backboneview function implemented course work assume view composed one toplevel dom element nested ones eg javascript var somemodel backbonemodelextend nothing var myview backboneviewextend el myview initialize function consoleinfo something something consoleinfo view myview var model new somemodel var view new myview model model case see console output project create views one root element case collection items item represented two table elements corresponding view found able match el root elements found solution problem would like ask backbone community think change suggesting changed function acceptable selectors maybe argument could added switch two selection modes root without root", "num": "1320", "d": "5/2012"}, {"title": "returns host hash fragment", "body": "hey backbonehistory settled follow using latest bb simple link like one links actions binded javascript body click function e returns hash fragment way everything works expected firefox safari chrome opera edit ok bug affiliated bb directly using relative path href instantiates affiliated posts", "num": "1319", "d": "5/2012"}, {"title": "list methods documentation alphabetical order", "body": "find hard find find methods scanning docs methods listed category model collection etc etc nt seem listed order think would helpful methods listed alphabetical order", "num": "1318", "d": "5/2012"}, {"title": "missing undelegate undelegateevents backboneview", "body": "inspecting code seems backboneviewdelegateevents branch call delegate jquery however backboneviewundelegateevents never explicitly removes events delegated delegate recommended undelegate method jquery following sufficient remove bind delegate events nt used backbone yet looking code get understanding principles guiding project first checking bug thanks", "num": "1316", "d": "5/2012"}, {"title": "use save post model data", "body": "model whit attr like call mymodelsave listen http request request payload key correspondence value", "num": "1315", "d": "5/2012"}, {"title": "backbonejsorg", "body": "unknown known", "num": "1313", "d": "5/2012"}, {"title": "discussion fire adddestroy event immediately wait true", "body": "usually call want know app started response destroy model finished catch sync pass wait true fire destroy model immediately instead response completed nt think otherwise sync destroy fired basically succession making one useless", "num": "1312", "d": "5/2012"}, {"title": "eventsoff issue", "body": "example gt", "num": "1310", "d": "5/2012"}, {"title": "historygetfragment handle uninitialized options", "body": "new backbonejs new github sure exactly causing scenario running simple example found backbone site run jquery works however jquery fails following error chrome uncaught typeerror read property root undefined issue seems caused timing issue regardless understand could scenarios thisoptions initalized situations feel like either fail explicitly fix follows backbonejs line add check undefined options collection typeof thisoptions undefined amp amp new line looks like typeof thisoptions undefined amp amp fragmentindexof thisoptionsroot fragment fragmentsubstr thisoptionsrootlength code causes problem var navigationrouter backbonerouterextend data null items null view null routes info id showinfo actions defaultroute initialize function options var ajax url contentnewtestjson datatype json data async false success function data", "num": "1309", "d": "5/2012"}, {"title": "model set undefined value nt rise event changing state", "body": "scenario create model attributes label name subscribe change label validate rise subscribe change name set label undefined change name change label event show next test var done false act sourceon change label function done true sourceon change name function sourceset label undefined sourceset name target assert ok done model rose change event fails equal sourceget label undefined model changed label good smth like", "num": "1308", "d": "5/2012"}, {"title": "modelclear deletes id", "body": "modelclear behavior changed surprised people nt affected", "num": "1306", "d": "5/2012"}, {"title": "router hash value error firefox", "body": "firefox router callback trigger twice hash ascii first callback decoded needed second callback undecoded routes routes name test test function name consolelog name name consolelog hash locationhash consolelog href locationhref visit \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn name \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn hash \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn href name ad af hash \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5cn href think bug use name ajax data pass raw encoded encoded string backend", "num": "1305", "d": "5/2012"}, {"title": "comparator usage backwards compatible", "body": "version used bound closure comparator effect method used reference arguments call actual comparator fixed nt work anymore sort code checks arity comparator invokes old behavior arity exactly one instead voting invoking new behavior arity exactly two use old behavior cases better backwards compatibility also voting relying arity methods much easily lost javascript using closures", "num": "1301", "d": "5/2012"}, {"title": "regression initializing model another model fails", "body": "initializing one model another one like foo backbonemodelextend bar backbonemodelextend defaults foo bar var bar new bar new foo bar defaults treats incoming instance foo hash instead object mixes means call barattributes foo instead foos attributes", "num": "1300", "d": "5/2012"}, {"title": "route event triggered accessing url browser", "body": "think question route event works moment page loaded say route like web page link click route event triggered want access web site event triggered way suppress behavior identify route event triggered user action browser", "num": "1297", "d": "5/2012"}, {"title": "collection preparemodel use", "body": "attempting migrate code use factory function instead return constructor run problem goal write model factory function whose children inherit semantics returns specified model possibly custom logic instance first tried following work problem still uses regardless intent behind thus context always new object always fail another choice use custom dismissed idea altogether wo nt work coffeescript likely bad practice seems current implementation real choice manually set create function model class rather awkward inelegant think requires either stop using go back return constructor thoughts", "num": "1296", "d": "5/2012"}, {"title": "unexpected result undefined passed backbonemodelhaschanged", "body": "version discovered overriding model haschanged method calling super haschanged function attr custom fun stuff backbonemodelprototypehaschangedcall attr simply pass undefined haschanged following condition fail argumentslength return isempty thischanged course workarounds ie using apply instead call wanted make known since took time track funky model behavior experiencing upgrading", "num": "1292", "d": "5/2012"}, {"title": "multiple backbones inside node makes instanceof fail", "body": "consumed last hours life boy crazy difficult thing debug two modules module provides custom backbonejs models module b provides custom backbonejs collections app requires module requires module b creates model instance using custom model module creates collection instance using custom collection module b adds model instance collection instance sky falls burns horrible plagues know answer give gold star guess answer lovely inside fails models using one backbonejs collections using another despite backbonejs version argh line needs better perhaps check presence variable defined arghhhh seems solution pass modules backbonejs module want use rather use local copies real pia imho flag idea much better one thoughts", "num": "1288", "d": "5/2012"}, {"title": "router redirect means browser back", "body": "routes loadgistugly redirects pretty one example correct way history", "num": "1286", "d": "5/2012"}, {"title": "add deepclone object methods", "body": "anybody considered adding deep cloning capabilities underscore wrote back memory serves works objects arrays could use cleanup optimization work objectprototypeclone objectprototypeclone function var newobj instanceof array clone continue amp amp typeof object newobj clone else newobj return newobj", "num": "1281", "d": "5/2012"}, {"title": "pass route option router callbacks", "body": "pull submit patch want submit issue first get feedback interest discern routes still receiving argument properties currently use backbonerouterroute regular expression perform routing reimplement parsing basically want preserve gain ability parse name internally callback function two approaches considering pass second argument callback object ie execute route callback instead extend params object name simply executing executing callback would anyone else find useful prefer one approach see flaws approaches especially second approach", "num": "1278", "d": "5/2012"}, {"title": "accessing router options routing methods", "body": "views automatically store away options initialization param later use routers reason finding would handy", "num": "1277", "d": "5/2012"}, {"title": "bug silent nt silent chaining setunset", "body": "var new backbonemodel listen change property mbind change function alert changed loudly correctly alerts nothing mset cows silent true alerts mset cows silent true set glue bob alerts mset cows silent true unset chicken set listener property update property silently chain another set unset silent ignored event triggered sure nasty little issue backbone underscore filing", "num": "1276", "d": "5/2012"}, {"title": "keep track routes added dynamically", "body": "think able access dynamically added routes order remove later provide full use case nt see anyone would one possible solution would returning route added providing access route name provided route function", "num": "1272", "d": "5/2012"}, {"title": "uncaught referenceerror foo defined", "body": "tpl lt foo gt foo variable defined report error recommended php smarty template engine masked error value without manually assignment may consider using try catch e", "num": "1271", "d": "5/2012"}, {"title": "question nt push unshift fire add event", "body": "looks perfectly right expect functions fire add event firing push unshift event nt option least head nt matter add add reason could applied pop unshift", "num": "1270", "d": "5/2012"}, {"title": "persist single object", "body": "appologies correct forum raise question trying save settings object subsequent visits id item localstorage user last working perhaps correct way go sure problemlimitation localstorage adapter something nt understand backbone tried cartstatus backbonemodelextend localstorage new store cartstatus currentclientid var mystatus new cartstatus function mystatusfetch alert loaded mystatusget currentclientid mystatusset currentclientid abc mystatussave load page multiple times says loaded undefined every time however second load would expect loaded abc every time inspect localstorage loads see duplicate nested records currentclientid abc id currentclientid abc id cartstatus currentclientid abc id also written question", "num": "1266", "d": "5/2012"}, {"body": "thanks issue chuangbo actually expected behavior backbone setting attribute silently delays change event next call calls setting many attributes triggering one change event", "d": "5/2012"}, {"body": "oh got feature like expected change attribute without trigger events bind", "d": "5/2012"}, {"body": "would also like make know phasing previously allowed invalid css selectors delegate element never work future releases way accomplishing delegateevents without using delegate also nt necessarily use syntax element think needs method getting immediate child", "d": "5/2012"}, {"body": "hi thanks issue since event selectors completely delegated jquery nt think anything backbone change way handle child selectors however run issue well solved checking parent element handler js var view backboneviewextend events click element elementclick elementclick function e etargetparentnode thisel return hope helps", "d": "5/2012"}, {"body": "hi thanks issue think looking something like js var model backbonemodelextend defaults function return myid genid", "d": "5/2012"}, {"body": "yes normal expected properties prototype shared instances class think looking something like instead coffeescript class router extends backbonerouter initialize options gt properties", "d": "5/2012"}, {"body": "rather unelegant workaround entails checking var first extend object var false reset object nt worry using initialize", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true", "d": "5/2012"}, {"body": "agreed behaves way due coercion happens using value object property unfortunate unavoidable", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true would nt want programmer supplying numeric operand would nt expect numeric comparison occur conversely supply string field contains numeric data fault numeric comparison occurs consistent nt think strictness would big deal seeing two different behaviors breaking principle least surprise", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "sure know behaviour wait true question different http delete returns destroy success callback call cant prevent example server response contains error message destroy event bubbles till collection backbonedestroy", "d": "5/2012"}, {"body": "server error return error message http status code callback wo nt triggered", "d": "5/2012"}, {"body": "either destroy either create http return code invoke error callback instead success", "d": "5/2012"}, {"body": "sounds great probably something would appropriate core backbone ideally urls canonical nt irrelevant query string parameters", "d": "5/2012"}, {"body": "ran using dfp need append urls debug ad scheduling problems routes trigger creates bigger problems say something would appropriate core backbone used case without change", "d": "5/2012"}, {"body": "backbone used case case add pattern route regex strips params", "d": "5/2012"}, {"body": "think one route regex one issue regular expressions great saying include good exclusions another issue conceptually simple task rapidly becomes impossibly complex deal correctly pushed regular expression design said note rather easy implement efficiently important decision costs one time thing history start common cases implemented working documenting", "d": "5/2012"}, {"body": "parsing query string parameters route regular expressions variation issue", "d": "5/2012"}, {"body": "looking lot harder thought currently tests routing pushstate true suspect absence tests browsers implement pushstate right way handle autosucceed tests tested browser implement pushstate", "d": "5/2012"}, {"body": "fwiw using jquery pass around deferred objects collectionmodel properties chain callbacks places code happy hacking feelsgood", "d": "5/2012"}, {"body": "two reasons think views outlived models collections references need destroy references garbage collected along objects destroying view generally involves destroying childnested views since backbone nt dictate implement childnested views rightfully way destroying reasons mind would nt stub method like points convention nt implement also functionality removing event handlers dealing child views might alright worried cause users overlook point number one though", "d": "5/2012"}, {"body": "braddunbar think stub method might useful standardize naming something common use many cases taking care two would user calling nested views destroy methods appropriately also think clear distinction something like docs would help ensure users would nt overlook point one one thing consider harm users overlook point one overlook need remove references modelscollections outlive view", "d": "5/2012"}, {"body": "braddunbar created jsperf amp jsfiddle illustrate thinking important jsperf jsfiddle first time jsperf may somehow completely missed boat supposed jsperf illustrates slightly better take consideration first point action needed view model drop reference simultaneously considerably worse ignore need destroy event references get rid cases even required jsfiddle illustration destroy function action think would good idea include bare bones destroy method similar posted extended necessary without anything childnested views", "d": "5/2012"}, {"body": "another option rather adding new method might change anyone needing functionality edit remove class necessary", "d": "5/2012"}, {"body": "even straight forward code probably simplifies issue backbonehistoryprototypeloadurl function fragmentoverride alert loadurl called", "d": "5/2012"}, {"body": "nope loadurl intended called multiple times first trying default pushstate route patch secondly checking fragment overriding want take account see last line", "d": "5/2012"}, {"body": "unless severely misunderstood something apologise tell history whether use pushstate call loadurl conditional based upon", "d": "5/2012"}, {"body": "may want use pushstate happen internet explorer case transparently falls back hashchange", "d": "5/2012"}, {"body": "ok could nt managed internally ie bootstrap works browser capabilities uses going forward", "d": "5/2012"}, {"body": "maybe feel free send pull request like", "d": "5/2012"}, {"body": "nt place debugging help try mailing list irc channel", "d": "5/2012"}, {"body": "correct using nested objects probably want define function value", "d": "5/2012"}, {"body": "thanks workaround could documentation least hint solution confident obvious anyone suspect easy get caught problem", "d": "5/2012"}, {"body": "alternatively defaults could deepcopied", "d": "5/2012"}, {"body": "idea feel free try mailing list irc need help sounds like mongoid thing", "d": "5/2012"}, {"body": "hi zon thanks issue already fixed pull master bug fixed", "d": "5/2012"}, {"body": "prevent backbone views creating element passing via option hope helps", "d": "5/2012"}, {"body": "braddunbar still nt quite understand way create view javascript windowaudiomanageview backboneviewextend el template managetemplateaudio html apply script like commet nt work", "d": "5/2012"}, {"body": "going need show us code ie collections using separate files works fine", "d": "5/2012"}, {"body": "hi vkovalskiy thanks issue sounds right many arguments used declaration sort function recently changed use directly instead declared two parameters interested discussion regarding change going well", "d": "5/2012"}, {"body": "thanks info braddunbar using one argument recent changes mention release right monitor resolutions suppose oneargument sorting comparator available pointed convenient sort something based style kind etc", "d": "5/2012"}, {"body": "definitely interesting work reproducible test case post jsfiddle similar would love see", "d": "5/2012"}, {"body": "went ahead made test case jsfiddles head nt gotten fail either environments xp vkovalskiy could take look see get reproducible error", "d": "5/2012"}, {"body": "wookiehangover thanks windows hands check tomorrow get back results", "d": "5/2012"}, {"body": "thanks thanks use like match elements outside backbone view need special case", "d": "5/2012"}, {"body": "performed benchmarks gives gives first method faster", "d": "5/2012"}, {"body": "also available reference jquery zepto ender wrapped instance", "d": "5/2012"}, {"body": "hi sarxos thanks issue multiple root elements definitely nonstandard unsupported could probably achieve goal think would easier clear adding option work", "d": "5/2012"}, {"body": "jashkenas suppose nt understand want match elements outside need matched", "d": "5/2012"}, {"body": "sarxos", "d": "5/2012"}, {"body": "braddunbar unfortunately solution nt satisfy requirements since always add root element selector result wookiehangover property case views composed two elements one would like match contains attribute backbonemodelbinding unfortunately done without overriding either backbone backbnodemodelbinding methods", "d": "5/2012"}, {"body": "understand point braddunbar true multiple roots something really usual one solution able base keep code clean simply override function views match root elements hopefully many great thanks", "d": "5/2012"}, {"body": "hi mattotodd thanks issue actually discussed underscore methods listed according functionality like however might nice headings present backbone docs", "d": "5/2012"}, {"body": "fair enough love anyways keep great work", "d": "5/2012"}, {"body": "looks like nt see docs jquery likely moving delegate onoff", "d": "5/2012"}, {"body": "really forum whatever language using need json decode example php trick", "d": "5/2012"}, {"body": "hi yishenggudou thanks issue think get much better response mailing list taken liberty starting thread thanks", "d": "5/2012"}, {"body": "known email owner domain", "d": "5/2012"}, {"body": "music ears saxophone", "d": "5/2012"}, {"body": "hswolff still trying get docs", "d": "5/2012"}, {"body": "serious", "d": "5/2012"}, {"body": "still connection ohio whatsoever", "d": "5/2012"}, {"body": "see previous comment backbone docs still accessible dns issue fixed shortly", "d": "5/2012"}, {"body": "great sadness", "d": "5/2012"}, {"body": "several days", "d": "5/2012"}, {"body": "still", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "beginning use backbonejs fact noone get organizations primary domain registered dns lend confidence good thing many folks recommending", "d": "5/2012"}, {"body": "transfer made four days ago afraid domain status still says actions required please allow days transfer complete hang tight little longer", "d": "5/2012"}, {"body": "back", "d": "5/2012"}, {"body": "yep back online got domain sorry dns trouble", "d": "5/2012"}, {"body": "cool", "d": "5/2012"}, {"body": "nope point wait server acknowledge destroy triggering client side events nt want wait server nt use", "d": "5/2012"}, {"body": "wanted know server started request recommendation fire nondestroy event like wait destroy event done case point additional sync event", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "destroy event nt called immediately wait true called xhr request finished along collection remove case manually trigger different startdestroy event know started console output normally listen sync event nt look like bubbled leads aforementioned hackery", "d": "5/2012"}, {"body": "yes correct meant event", "d": "5/2012"}, {"body": "great catch thanks cfddream", "d": "5/2012"}, {"body": "hi provega thanks issue appears using backbone example know recently several bugs fixed related url would mind giving latest version try", "d": "5/2012"}, {"body": "sample using running look see offending code getfragment function fragment forcepushstate fragment null thishaspushstate forcepushstate fragment windowlocationpathname var search windowlocationsearch search fragment search else fragment thisgethash undefined check fragmentindexof thisoptionsroot fragment fragmentsubstr thisoptionsrootlength return fragmentreplace routestripper", "d": "5/2012"}, {"body": "think problem stems calling could happening due call callback called synchronously due custom backend cached data would exist causing error describe make sure called fragments fetched furthermore nt full picture code calling application code probably good idea let browser trigger possibly use", "d": "5/2012"}, {"body": "hi grobakh thanks issue could tell version backbone using latest would mind testing version thanks", "d": "5/2012"}, {"body": "tested work", "d": "5/2012"}, {"body": "nt forget acceptable models id", "d": "5/2012"}, {"body": "yep solid good starting poit implement old behaviour new semantics", "d": "5/2012"}, {"body": "sure escaped documentation changed discussed", "d": "5/2012"}, {"body": "thanks issue plievone going close documentation fix feel free comment open new request think current implementation changed", "d": "5/2012"}, {"body": "nt routes object instead array", "d": "5/2012"}, {"body": "francisc spelling mistake updated thanks", "d": "5/2012"}, {"body": "braddunbar please help us must hack application decodeuricomponent thank much", "d": "5/2012"}, {"body": "braddunbar think proposed change style comparators already shipped", "d": "5/2012"}, {"body": "hmm nt see much harm restricting sortstyle used arity exactly two however nt really fix problem anyone dwt issue arises want use sortbystyle curry one argument right", "d": "5/2012"}, {"body": "could wish would like methods available separated magic anymore care comparator one parameter obvious enough comparator deals therefor nt declare parameters least happened p", "d": "5/2012"}, {"body": "hi dwt thanks issue actually design discussed previously takes attributes options parameters acting accordingly", "d": "5/2012"}, {"body": "request add upgrade notes bitten quite severely", "d": "5/2012"}, {"body": "suppose could go release notes although never really supported knowledge accident due problem causing wan na write pull request effect", "d": "5/2012"}, {"body": "presumably user navigated would say triggered user said wo nt start ask via nt think understand desired behavior way understand want route events triggered user clicks link navigate url via browser would suffice listen click events instead", "d": "5/2012"}, {"body": "yes listen click event suffice want know route feature help thank", "d": "5/2012"}, {"body": "could stop using", "d": "5/2012"}, {"body": "one option would function could overridden javascript backbonemodelcreate function attributes options return new attributes options preparemodel function attrs options model thismodelcreate attrs options", "d": "5/2012"}, {"body": "essentially adding additional level indirection hooked return constructor", "d": "5/2012"}, {"body": "thought backbone stance discourage return constructor edit one", "d": "5/2012"}, {"body": "use separate factory collection time maybe come something better thinking awhile thanks discussion jashkenas", "d": "5/2012"}, {"body": "merged fix course passing undefined behavior", "d": "5/2012"}, {"body": "touch\u00e9", "d": "5/2012"}, {"body": "slow clap thanks guys great piece software", "d": "5/2012"}, {"body": "duck typing ftw", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require push code repo inspection", "d": "5/2012"}, {"body": "think nodejs caches loaded export based absolute filename exported object backbonejs files located filesystem one module directory", "d": "5/2012"}, {"body": "could lead simply two different required versions instead edit balupton said despite backbonejs version", "d": "5/2012"}, {"body": "yuchi nailed built sample app highlights problem", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require appears due nodejs internally caching results per module entire application module includes module copy backbone applications", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single root containing single instance backbonejs nothing backbonejs solve problem entirely design decision include two redundant copies backbone might way work around issue instead try figure need multiple application configs packagejson eliminate avoid issues like", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single nodemodules root containing single instance backbonejs tbranyen think completely missed point sorry clear anyway sample application includes directory way nt publish npm registry perfectly valid use case modules files fact npm modules work write module define dependencies publish npm registry another moduleapplicationwhatever install module via backbonejs included module files stupid decision means modules relying external dependency bad practice modules include everything need inside reopened", "d": "5/2012"}, {"body": "put whole thing bigger perspective queryengine module provides new extends however include queryengine app also include backbonejs app queryengine backbonejs app causing situation occur expect queryengine ludicrous published expect queryengine include backbonejs dependency file equally crazy earth ensure queryengine continue work backbonejs dependency external queryengine completely breaks point using specify dependencies fact using logic backbonejs nt even specify underscore dependency file even better yet file serious issue feel nt means post back asking clarification rather saying wrong closing", "d": "5/2012"}, {"body": "nothing backbonejs solve problem yes implementing flag suggested original post", "d": "5/2012"}, {"body": "going wrong creates model instance using custom model module creates collection instance using custom collection module b adds model instance collection instance mixing matching two different versions backbone together guarantee models version x work together properly collections version nt mingle two different versions error occurs right", "d": "5/2012"}, {"body": "nt mingle two different versions error occurs right correct though seems two different opinions never ever using multiple backbone copies anything support whether compatible existing code passes tests irrelevant backbone internal module dependency within different modules perfectly valid use case support added considering compatible existing code passes tests personally understand one would pull duck typing change works enables new use case counter seems personal opinion best practice rather expressed practical benefits understand practical basis never ever using multiple backbone copies seems argument expressed personal opinion finally understand case backbone exception underscore opinion allowed include multiple underscore copies multiple backbone copies seems reason latter breaks due use instanceof something willing fixed", "d": "5/2012"}, {"body": "allowed use multiple backbone copies independently mixing matching models one version collections another version hence problem like saying expecting rest continue work", "d": "5/2012"}, {"body": "help avoid using also use avoid history entry hope helps javascript loadgistugly function id thisnavigate gist id replace true thisloadgist id loadgist function id", "d": "5/2012"}, {"body": "perfect thanks tell avoid", "d": "5/2012"}, {"body": "let blog post derick bailey explain since much better job could", "d": "5/2012"}, {"body": "read comments derick post avoid trigger true simply opinion universal truth post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done answers avoid trigger true call router method directly would require reference router every view nt really heard solid arguments trigger true", "d": "5/2012"}, {"body": "post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done granted certainly great number ways handle situation one worked think main point keep router dumb possible anecdotally worked corner certainly solution avoiding prevent issues majority cases answers avoid trigger true call router method directly would require reference router every view views responding changes state often little need call router methods type situation obviating need reference router", "d": "5/2012"}, {"body": "use backbonehistorygetfragment get current url router uses able process internally callback function similar need describing came two first sounds like would likely better option", "d": "5/2012"}, {"body": "would enough route name passed route callback way get route name nt suggets use thisroutes backbonehistoryfragments nt work cases wher id splat present url parts project dependable url fragments backbonerouter already parsed fragments resulted particular callback route name called one might use route name implement detalisation project otherwise parse url fragments regexp double work", "d": "5/2012"}, {"body": "guess nt use later often save custom router classes though reason nt work coffeescript class router extends backbonerouter constructor options gt super", "d": "5/2012"}, {"body": "view nt appear use options later either afaict convenience view subclasses seems like would handy router subclasses realize store away", "d": "5/2012"}, {"body": "sorry misread definitely useful copy options view nt see would nt apply routers well", "d": "5/2012"}, {"body": "whilst could easily add functionality top collection model well options get passed frequently pass extra options used later creating subcollections submodels", "d": "5/2012"}, {"body": "couple questions would need answered thinking implementing options created provided options cloned user reuse number particular comes areas eg sometimes point contention providing would nicety leaving implementation user also rather nice since free like", "d": "5/2012"}, {"body": "braddunbar reason exactly view already would nt acceptable answer questions", "d": "5/2012"}, {"body": "ok answer wanted make sure thought", "d": "5/2012"}, {"body": "might one thinking opposite actually nt like options copied views promotes people getting things via even getterssetters accessors exist way see viewmodelrouterwhatever copy chooses nothing options options initialization keyvalue store life instance", "d": "5/2012"}, {"body": "said decided copied copied views routers models collections", "d": "5/2012"}, {"body": "think agree ianstormtaylor backbone stay flexible let user decide want", "d": "5/2012"}, {"body": "long consistent behaviour matters", "d": "5/2012"}, {"body": "quick workaround unset case nice", "d": "5/2012"}, {"body": "actually design see previous conversations work", "d": "5/2012"}, {"body": "ah relevant thread anyone finds darn excited found backbone bug", "d": "5/2012"}, {"body": "behavior make sense real state transitions would triggered", "d": "5/2012"}, {"body": "matter taste first comment thread defer seems suited silent behavior would make sense add defer attribute revert silent behavior", "d": "5/2012"}, {"body": "yes might also case write model new backbonemodel modelset defer true modelset defer true next time model change event fired case temporary change truly", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets also hella counterintuitive reading mentions silent docs newcomer backbone confused could nt figure app breaking checked assumptions found behavior", "d": "5/2012"}, {"body": "agree completely going option like needs way ensure never buffered triggered hack situation javascript thismodelset source thiseditorgetvalue silent true thismodelprevious source thismodelget source thismodelpreviousattributessource thismodelget source also situation identical delvarworld", "d": "5/2012"}, {"body": "seems like desired use case silent stop event triggered wanted use stop view rerendering listening attribute change event rerender certain cases found different probably better way benefit silent gives first glance skips events jarring eventually learn case maybe least make obvious docs", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets calls may code may triggered indeterminate amount times performance reasons beneficial able silence events called seems like desired use case silent stop event triggered would want change attribute without notifying listeners eventually set directly bypass altogether maybe least make obvious docs agreed backbone skipped events assumption partially true", "d": "5/2012"}, {"body": "set directly attributes bypass set altogether nt know option considered hacky valid way would show affect change listeners line since ticket still open reading explanation seems like would nice truly silent also option case defer property twice use second one event fires vote newcomer backbone nt know larger implications would", "d": "5/2012"}, {"body": "nt know option considered hacky valid way would show affect change listeners line yes would bypass benefits getting purpose attaching event listeners change events get notifications changes nt want notifications use property instead reason need notify listeners changes", "d": "5/2012"}, {"body": "event triggering validation consistency code sometimes set property want trigger event sometimes set property nt property model nt get choice modify attributes directly branch different code opposed toggling boolean", "d": "5/2012"}, {"body": "set event triggering validation consistency code sometimes set property want trigger event sometimes set property nt would mind elaborating perhaps never encountered type situation", "d": "5/2012"}, {"body": "another thing add either change defer seems odd listening update silently modification property trigger even though already changed action triggering event nt touching seems like counter intuitive api behavior", "d": "5/2012"}, {"body": "braddunbar jashkenas etc read comments linked change request guess never made connection backbonespecified options silent etc additional arbitrary options could pass would get passed event handlers ability pass arbitrary options ability individual event listeners receive successfully fulfills needs go ahead add noop option better name come event listeners choose based option use cases similar pull request app collaborative multiple people dealing datasets simultaneously push model changes server connected clients socketio need distinguish changes made interactively user changes pushed app server think ability seems commonly overlooked find free time submit additional documentation model set events think would make clearer people", "d": "5/2012"}, {"body": "edwardmsmith wonderful agree commonly overlooked unsure document going close feel free open separate issue documentation updates proposals improvingmodifying changes", "d": "5/2012"}, {"body": "never removing route urls supposed permanent mint keep", "d": "5/2012"}, {"body": "understand wouldt remove defined route meant overriding route able remove override think example would explain better let consider app would load list custom pages server standard route overriden route usually route load standard game page defined application code source whereas case would like able override custom routes case want load particular templates loading server nt know makes sense anyone else see best way package standard app able customize thank answer anyway", "d": "5/2012"}, {"body": "instead swapping function function know call either appropriate", "d": "5/2012"}, {"body": "true seems routing logic inside one function routing functionality backbone losing interest indeed would happen app routes overridden thank anyway advice", "d": "5/2012"}, {"body": "course fire events fire events", "d": "5/2012"}, {"body": "tried events double check thanks", "d": "5/2012"}, {"body": "looks like works", "d": "5/2012"}, {"body": "thanks issue myster think probably luck mailing list taken liberty posting question", "d": "5/2012"}, {"body": "noticed sortedindex nt used anymore model insertion instead whole collection gets resorted even one model added tried fixed send pull request think goes total different direction", "d": "5/2012"}, {"body": "fixed problem using sortedindex find position data added added passed add flag prevented sorting added data presorted add chance overlap previously added data better hindsight comparator sortby style one using js date adding single call eg adding passing array objects rather one time quite confusing took uncover upon upgrade", "d": "5/2012"}, {"body": "georgephillips sounds bizarre recently switched using style insertions backbone previously internally new single version ostensibly performance reasons actually case change mistake revert someone needs cook jsperf test prove either way", "d": "5/2012"}, {"body": "jashkenas application timeline ajax requests buffers certain length buffers models per request collection adding using single call add would say test loops adds n models time one go would probably replicate experiencing", "d": "5/2012"}, {"body": "one gets weekend think time throw together test see regards performance", "d": "5/2012"}, {"body": "jashkenas ran bug searching found tested solution commenting line fix problem way found problem looking backbonehistoryfragment wanted change url change page user switch item working rebuild route ran yielded array like user clicked change different product code produced hope helps reproduce bug please let know need information thanks", "d": "5/2012"}, {"body": "kept testing returned everything backbone stock created code solves issue url chunk code properly handles initial backbonehistoryfragment leading slash hope helps", "d": "5/2012"}, {"body": "disagree performance problem automatically keeping collection sorted assume sorted collection elements one elements changes nt resort entire collection since know elements already sorted relative reposition one element cost inserting model sorted collection even scenario jashkenas describes rapidly change ten models collection resorting individual models change still cheaper even single resort possibility could revisit keep collections sorted model changes reasons missing keeping collection sorted willing work free time philosophical conflict would prevent accepted", "d": "5/2012"}, {"body": "add another voice wanting feature work using api powered dancer happily supports patch requests wish use backbone send patch requests implemented workaround allowing backbone send patch requests much nicer see ability core think", "d": "5/2012"}, {"body": "pretty good article topic idea use pushstate backbone supports update browser url needs combined type server side technology render html accessibility seo clever way use nodejs reuse backbone render html server side think might meteor framework roadmap", "d": "5/2012"}]