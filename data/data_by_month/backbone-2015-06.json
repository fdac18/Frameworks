[{"title": "issue backbone collections", "body": "hi everyone likely found bug concerning backbone collections first run next code javascript var model backbonemodelextend idattribute id var new backbonecollection var model new model id alladd model consolelog allget model execute previous code using latest backbone version get false consecuently using custom idattribute add collection wo nt able get back id means get method otherwise case using backbone truly works expected", "num": "3697", "d": "6/2015"}, {"title": "plans modularize backbone", "body": "would love able something like js import events backbone objectassign mymodule events", "num": "3696", "d": "6/2015"}, {"title": "docs viewremove", "body": "jeremy imo absolutely positively needs read nt make clear el goes missing call elremove hiding inside remove dangerous one thing could pass boolean remove decide whether delete dom element", "num": "3694", "d": "6/2015"}, {"title": "removemodels regression bug", "body": "looks like removemodels simplified introduced regression bug removemodels function models options var removed var lt modelslength var model thisget models model continue code removed removed following lines means listening remove event check removal get infinite loop event called id removed think byid code put back events fired represent uptodate state", "num": "3693", "d": "6/2015"}, {"title": "listento scroll events", "body": "listento scroll events", "num": "3691", "d": "6/2015"}, {"title": "collection get idaddreference broken", "body": "looks like method broken around line nt look like trying index model value rather value course breaks well probably things", "num": "3688", "d": "6/2015"}, {"title": "deferred undefined requiring backbone gt", "body": "gist problem run install packagejson today install latest backbone version strangely undefined versions backbone greater backbone works expected console output anyone know going", "num": "3687", "d": "6/2015"}, {"title": "using backbone webpack without jquery throws errors", "body": "following guide get error uncaught error find module jquery seems like webpack defaulting amd trying load jquery throw error fails tried forcing webpack use commonjs using imports loader result following error message uncaught referenceerror backbone defined although backbone present js file sure getting error", "num": "3683", "d": "6/2015"}, {"title": "replace", "body": "wanting cut aliases lodash wondering would cool dropping use favor esfriendly flavor", "num": "3677", "d": "6/2015"}, {"title": "drop method use", "body": "underscore method dropped favor bb", "num": "3672", "d": "6/2015"}, {"title": "ditch bindall use", "body": "used backbone could swapped", "num": "3671", "d": "6/2015"}, {"title": "help mobile terminal tap event nt work", "body": "mobile terminal tap event nt work", "num": "3669", "d": "6/2015"}, {"title": "collectionat behavior change", "body": "release collectionat function specified follows beginning function specified prior providing index lt would return undefined may may return undefined depending index supplied behavior change would nice mentioned release notes", "num": "3668", "d": "6/2015"}, {"title": "type error html canvas", "body": "hello get type error backbone cdnjs rendering model within view document ready function var box backbonemodelextend defaults x w h var boxset backbonecollectionextend model box var boxview backboneviewextend render function var modelthismodel ctxthisoptionsctx var setview backboneviewextend initialize function thiscollectionon thisrender render function var canvasthis elget ctxcanvasgetcontext var cnew boxset cadd var vnew setview el canvas collection c vrender", "num": "3666", "d": "6/2015"}, {"title": "trigger change", "body": "line nt contain model amp amp setting value using silent true chaining amp triggering change event throws error modelset data silent true trigger change know says use silent", "num": "3662", "d": "6/2015"}, {"title": "model destroy method call success callback method server response", "body": "code var model collectionfindwhere id id modeldestroy success function consolelog seems success callback method never executed check source code optionssuccess function resp optionswait modelisnew destroy success success model resp options modelisnew modeltrigger sync model resp options optionssuccess executed please help", "num": "3654", "d": "6/2015"}, {"title": "routerhistory", "body": "backbone router inspired ye olde routers several years ago singlepage applications thing one usually reached handful jquery plugins build javascript app routers distinguished three characteristics route independent routes route callback triggered associated url matched router used bootstrap page never used pretty clear backbone router exhibits first two characteristics time changes router made number lil less obvious existence option fact default evidence third characteristic numerous blog posts books always warn setting additionally jashkenas expressed believed router used chatted bbconf months ago every popular javascript libraryframework moved away pattern place style routing pioneered ember become de facto way structure single page apps ember router went heavily influence react router angular ui router angular router reaching feature parity ember router might bit much backbone would prob increase size library lol think looking inspiration coming minimal version sort routing system would tremendously improve backbone think could done pretty small amount code providing right hooks would make easier third party developers create emberstyle router backbone third party library quite challenge right end post gathered important characteristics routers routes states router state machine transitions states asynchronous state optionally encoded url transitioned states children states large part complexity emberstyle routing comes routes minimum two callbacks associated asynchronous callback synchronous callback route activated every time url changes history readwrite interface browser history roles faq points two hooks generally two things want url changes fetch data maybe render view also maybe time generally fetching data asynchronous showing html synchronous two hooks routerjs breaks async method three async methods cover variety use cases complexity covers important use cases transitions might outofscope bb cover cases cool part single hook could split hooks plugin authors nested routes nesting routes makes easy compose nested view states also aids preserving view data state imagine route called uri route also imagine two child routes uri uri user active user navigates would nt want refetch data already got also probably would need render view one edge case router solves noted nested states likely far complicated backbone include flat route structure would keep code small right hooks would allow someone rewrite routes transition state machine well come representing many applications states router transitions truly simplify things much added bonus router also used manage state apps nt persist state url like embedded widgets whatevs since encoding state url optional ca nt create current router difficult right two main reasons current router developed different use case mind makes hooks provides bad purpose roles history router conflated think put another way backbone router characteristic emberstyle routing recent changes method attempt resolving first problem sort band aid solutions fundamental problem examples roles history think include url match algorithm history loadurl route execution history loadurl would argue router manage things easilyoverridable separate hooks willing put together poc router interest something like backbone", "num": "3653", "d": "6/2015"}, {"title": "lection id attribute", "body": "", "num": "3652", "d": "6/2015"}, {"body": "using backbone", "d": "6/2015"}, {"body": "need tell collection model class nt support using collection without setting model class", "d": "6/2015"}, {"body": "already work", "d": "6/2015"}, {"body": "removes view dom nt clear would rather removes view dom kinds changes make pull request issue", "d": "6/2015"}, {"body": "yes said would much much clearer", "d": "6/2015"}, {"body": "nt know make pull request", "d": "6/2015"}, {"body": "changed mean right jridgewell solution ca nt find pull think changed ordering collection updated little back way reconcile", "d": "6/2015"}, {"body": "move call trigger", "d": "6/2015"}, {"body": "would fail unbinds model listener trigger happens model collection alternatively could move call trigger trigger model collection directly juggling args bit align", "d": "6/2015"}, {"body": "yes use case unfortunately control flow little tricky would go one least side effects regarding moving call manually triggering sure cases users libraries might registered something get cleared triggering would get skipped personally would inline cleanup code like alternatively could update removereference unbind model events call manually take optional parameter skip clearing call twice without option", "d": "6/2015"}, {"body": "reason trying get model event part nt make sense already providing parameter collectionon remove would fail removereference unbinds model listener trigger happens model collection agh forgot fixes would acceptable think cleanup code left makes sense", "d": "6/2015"}, {"body": "listento scroll events", "d": "6/2015"}, {"body": "specifying event object works perfectly keep mind caveat scroll event sent element user scrolls different place element applies window objects also scrollable frames elements overflow css property set scroll auto element explicit height width less height width contents", "d": "6/2015"}, {"body": "please use mailing list stackoverflow gitter channel questions", "d": "6/2015"}, {"body": "code working intended docs confusingly worded meant return value given model attributes equivalent result update docs", "d": "6/2015"}, {"body": "see updated documentation however really misunderstanding moment documentation get collectionget id get model collection specified id cid passing model seems able use retrieve model collection reading code fetch model id literal string instead running issue live site case misreading backbone code currently process constructing smaller test case", "d": "6/2015"}, {"body": "grabbing model id handled first conditional ignoring call", "d": "6/2015"}, {"body": "hello constructing test case see problem code working properly thanks efforts", "d": "6/2015"}, {"body": "requiring backbone requires jquery set window var jquery ca nt detect global variable value factory function takes argument simple answer move backbone require setup also set later", "d": "6/2015"}, {"body": "oh okay thanks help", "d": "6/2015"}, {"body": "ah sorry never added let fix said loader work see example try whittle might causing referenceerror", "d": "6/2015"}, {"body": "yep works perfectly referenceerror came bad code referencing backbone without importing thanks", "d": "6/2015"}, {"body": "canonical name underscore anyways pr", "d": "6/2015"}, {"body": "sure moved", "d": "6/2015"}, {"body": "definitely weird maybe add alias deprecate existing method", "d": "6/2015"}, {"body": "relevant bit saw", "d": "6/2015"}, {"body": "mean relevant bit opening issue great pull request better always tweak code style", "d": "6/2015"}, {"body": "mapping older alias newer alias alias preferred alias longer documented", "d": "6/2015"}, {"body": "bump order remove able add though wo nt define used", "d": "6/2015"}, {"body": "cool cool", "d": "6/2015"}, {"body": "open pull", "d": "6/2015"}, {"body": "eh resolved sorry browser problem", "d": "6/2015"}, {"body": "definitely added change future feel free open pull request documentation merge", "d": "6/2015"}, {"body": "longer attach view error trying access property", "d": "6/2015"}, {"body": "thanks sent sony smartphone justin ridgewell wrote longer attach options view error render trying access ctx property reply email directly view", "d": "6/2015"}, {"body": "sure needs fixed event always passes first argument object second anything else breaking contract", "d": "6/2015"}, {"body": "hi justin odd happens model collection guess code somewhere regards john schroeder johns artisancolourcom jun pm justin ridgewell notifications githubcom wrote sure needs fixed change event always passes model first argument options object second anything else breaking contract modeltrigger change model options reply email directly view github", "d": "6/2015"}, {"body": "since model success callback executed asynchronously server responds successfully questions like better left stackoverflow though", "d": "6/2015"}, {"body": "hi jashkenas thanks lot reply question said since model id success callback executed asynchronously server responds successfully know concerns server already response client success callback method still executed understanding response code means responds successfully could please kindly help case confused much time thanks lot justin ridgewell date jashkenasbackbone cc miracleqsc subject backbone model destroy method call success callback method server response since model id success callback executed asynchronously server responds successfully questions like better left stackoverflow though reply email directly view github", "d": "6/2015"}, {"body": "examples roles history think include url match algorithm history loadurl route execution history loadurl would argue router manage things easilyoverridable separate hooks completely agree would much rather event system alerting changes url router holding onto routes detecting match would also help allowing router trigger errors etc", "d": "6/2015"}, {"body": "generally fetching data asynchronous showing html synchronous two hooks could nt async model stuff synchronous callback way often rerendering route already data need two callbacks seems like overkill backbone nt need handling fetching used ember router found massively overengineered nt think need go ahem route added bonus router also used manage state apps nt persist state url like embedded widgets whatevs url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle think nested routes another area things get dicey pretty quickly agree common pattern nest resources general nt want go one two levels deep sure need business wiring connections disparate parts app given complications seems best book route handles pretty handily already optional syntax agree history probably nt responsible handling route callbacks fall router implement history stateless dumb router significantly decoupled rest backbone originally backbone nt even include router could probably try test plugin first even think replacing already really like see history would look nt manage callbacks", "d": "6/2015"}, {"body": "could nt async model stuff synchronous callback way often rerendering route already data need two callbacks seems like overkill backbone nt need handling fetching right backbone nt need two callbacks need handle fetching think exposing callback router calls rather inlining would take make far easier another dev make plugin implements rest complexity used ember router found massively overengineered nt think need go ahem route oh yeah sure question emberstyle routing covers lot ground given far complex backbone may late change original post rewrote would emphasize detangling current router easier create different router top rather pointing style router want build top p url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle nt really know mean url string represents state application whether good idea router interprets string configures application corresponding state think nested routes another area things get dicey pretty quickly intended include information nested states fully describe emberstyle router know backbone would never implement smile thinking back prob nt need go much detail pretty late wrote issue sleeping general nt want go one two levels deep tangent think want go deep necessary make application current url four levels using emberstyle router get hang emberstyle routing actually even hard set reason test could probably try test plugin first even think replacing already really like see history would look nt manage callbacks work give update got one", "d": "6/2015"}, {"body": "url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle interested kind app state mean struggling find single web app nt encode app inside url looking examples backbone site every single one works way mean state individual page part devs tend encode query params anything important enough query params gets discarded", "d": "6/2015"}, {"body": "nt much time brief alternative approaches great router plugin replaces backbonerouter fine idea go see like think overengineered routers terrible waste time sweat tears using overengineered router organizing app along lines urls brief string serialization application state paradoxically less rich htmly app better works richer featureful app worse state fits nice urls useless router organizing principle using router organize state transitions inside app fundamentally assbackwards already app state real js objects disposal serializing string state deserializing reinflating silly business worrying refetching data already access part idea backbone router drop url breadcrumb whenever application reaches state user might want bookmark go back button nothing think right model minimalist library", "d": "6/2015"}, {"body": "interested kind app state mean struggling find single web app nt encode app inside url location sure state nope url entry point application guaranteed point resource nt particularly good storing state widgets things nt urls nt storing state router jashkenas said already real js environment work current url repository resource name identifier issues resource route looks like repoissues issueid also happens slash work give update got one awesome looking forward", "d": "6/2015"}, {"body": "already app state real js objects disposal serializing string state deserializing reinflating silly business worrying refetching data already access part would discard existing objects order serialize state url routebased app organization code flow anything else pseudocode example books bookid pages pageid model page function pagehandler params options let model optionsmodel new page let view new pageview model let fetching modelisnew fetching modelset id paramspageid fetch return promiseresolve fetching gt viewrender", "d": "6/2015"}, {"body": "location sure state nope url entry point application guaranteed point resource nt particularly good storing state sounds like talking individual view state rather application state work app entirely widgetcard based approach works really well outside global components state every widget gets tossed route another page needed persist yes would likely use localstorage accomplish nt see two things incompatible", "d": "6/2015"}, {"body": "conversation router philosophy really interesting love continue maybe belongs elsewhere rather issue focus concrete changes router agree go backbone agree think backbone router pretty lightweight backbone router history extensible backbone router history currently implemented way makes easily extensible three things currently plan investigate changing expose callback executed whenever route matched rather defining inline scope expose route sorting algorithm separate method modify history solely readwrite interface browser url move features router", "d": "6/2015"}, {"body": "sidenote jmeas link code sure link tag revision line numbers master shift time make links harder follow future", "d": "6/2015"}, {"body": "sidenote jmeas link code sure link tag revision line numbers master shift time make links harder follow future good call always forget update links updated", "d": "6/2015"}, {"body": "three things currently plan investigate changing expose callback executed whenever route matched rather defining inline scope expose route sorting algorithm separate method modify history solely readwrite interface browser url move features router define either inline regular vanilla instance method router preferable nt know exposing would mean changing router ordering algorithm seems like opposite minimal router ordering one predictable order easy change order define routes changing balance code history router totally style question could nice refactor historical reason split history must logically singleton object whereas reason routers need object", "d": "6/2015"}, {"body": "define either inline regular vanilla instance method router preferable nt know exposing would mean ah sorry callback one tried include link whenever used inline posts may used term without accompanying link somewhere might like dumb nt need really follows naturally number list refactor makes reason use inscope variables callback separate method router makes easier test isolation crazy people like gives hook override explicit talking difference always ask inline ask wait check refactor first changing router ordering algorithm seems like opposite minimal router ordering one predictable order easy change order define routes know feel way people disagree whether disagree sort algorithm currently tied definition handler callback makes tough anything router without overriding code many many developers would appreciate method exposed separately nt want well ca nt stop ya mind wanders angular ember think libraries make incredibly difficult change features though one main reasons devs know use backbone customizable ask wait refactor forming strong opinion expose changing balance code history router totally style question hm interesting think analogous saying changing balance given view given model style question sure may get result one seems philosophically sound think much elegant history interface browser history api nt concern routers said succinctly think history stateless dumb jashkenas preview going soon make clearer hope possible evaluate refactor without thinking turning backbone router ember router think cleanup valuable even one intends use backbone router exact way today", "d": "6/2015"}, {"body": "sure thing happy wait see", "d": "6/2015"}, {"body": "sounds like talking individual view state rather application state work app entirely widgetcard based approach works really well thejameskyle distinction two types state distinguishes application state view state mind imo backbone none sure supporting application state way eg selection listing view possibly worth effort problem fundamentally nt handled way great discussion folks thinking yesterday well one point kept popping head able use application without even knowing address bar forwardbackward navigation adding bits straightforward encapsulable task sense liken modules talking building principals behind ampersandjs components", "d": "6/2015"}, {"body": "distinction two types state distinguishes application state view state mind imo backbone none imagine github exactly singlepage application application state would particular issue page view state would something typed new comment textarea persisted page reload github stores information different places would challenge find application make distinction application state belongs url vs view state either discarded page reload stored something like localstorage", "d": "6/2015"}, {"body": "sorry idea blank issue created", "d": "6/2015"}, {"body": "similar problem gaperton backbone marionette modelevents mapping object nt seem trigger change sync callbacks revert back backbone everything works", "d": "6/2015"}, {"body": "message maps broken code triggering b c wo nt fire event handler normal object syntax works fine spaceseparated object syntax bug", "d": "6/2015"}, {"body": "ah explains things thanks looking next backbone version bump", "d": "6/2015"}, {"body": "actually used anywhere nt work affected anything", "d": "6/2015"}, {"body": "asking space separated callback syntax used anywhere documented marionette marionettecompositeviewextend modelevents change name namechanged thatthing namechanged function thatthing function", "d": "6/2015"}, {"body": "stevewillard case concerned use code workaround javascript var events backboneevents bblistento eventslistento eventslistento function obj events typeof events object var event events bblistentocall obj event events event return model collection view router history foreach function name var type backbone name typeprototypelistento eventslistento yes used somewhere otherwise one would made comments works perfectly regular listento calls clearly reason consistent least", "d": "6/2015"}, {"body": "sure understand backbone nt use strings callbacks anywhere deals keys listeners object event names values callbacks multiple event names keys listener objects nt supported previously ca nt causing breakage understand marionette uses hood split strings listento callback separately yes used somewhere otherwise one would made comments point specific line telling broke something nt help unless track", "d": "6/2015"}, {"body": "upgraded backbone version one unit tests framework started fail one interested figured posted quite clean example comments month ago think big deal fix fine anyway got lot backbone things overridden one one less nt matter though might concerned", "d": "6/2015"}, {"body": "figured posted quite clean example comments month ago referring second form never worked literally added support morning point line test code broken ca nt see anything obvious repository linked nt time follow rabbit holes", "d": "6/2015"}, {"body": "sorry mistake looks like form working fix shortly", "d": "6/2015"}, {"body": "literally added support morning nice hear point line test code broken yes insist easy test tests related nested collection change detection broken collection several reasons changed internally modelcollection metatype definition message map used subscription turn created bug events ignored nested collection changes detected course since live bad thing spend couple minutes adding lines code trying good boy reported bug maintainers story ps helpful first comment left month ago curious", "d": "6/2015"}, {"body": "look think workarounds nt work property model method wo nt work backbone uses access property model constructor nt seem support adding properties options altogether", "d": "6/2015"}, {"body": "think workarounds nt work idattribute property excellent catch work pr addressing meantime use getter notation supply custom js class model extends backbonemodel get idattribute return id get cidprefix return c", "d": "6/2015"}, {"body": "method wo nt work backbone uses modelidattribute access property getter method accessed like normal property", "d": "6/2015"}, {"body": "beginning sound like major rewrite required backbone perhaps", "d": "6/2015"}, {"body": "beginning sound like major rewrite required backbone perhaps already support subclassing exception models think interesting someone explored static property suggestion even nt necessary two solutions original post", "d": "6/2015"}, {"body": "jridgewell many thanks quick solution", "d": "6/2015"}, {"body": "decorators mentioned thread specifically yehuda katz proposal unresolved whether would solve issue playing around proposed write decorator like example using written like javascript props tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy class documentrow extends backboneview seems work fine decorator applied class prior class constructor executed declarative version saying class documentrow extends backboneview extend documentrowprototype tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy actually nt tested could probably make entire backbone extend function decorator wanted static prototype props unfortunately proposal babel supports behind experimental flag people feeling adventurous possible solution", "d": "6/2015"}, {"body": "problem found answer right needed run", "d": "6/2015"}, {"body": "caeost ran issue resorted following workaround use case js var collection new backbonecollection var model collectioncreate data wait true modelvalidationerror", "d": "6/2015"}, {"body": "would nt write need know whether model set valid data set happened already match data model application member loaded login application requires able ship products need make sure real information account thus walk steps verify data ux chosen one button design advances step eg first namelast name section address section phone number section etc model filled piecemeal due one aggregate endpoint member data thus multiple views map one model model info collected steps confirmation step actually sends entire dataset backend chose control transitions steps listening change event custom event overriding set whose purpose prevent ui locking user satisfied existing data opts click next button without changing model requesting feature added something needed address purposes thanks making great library public consume looks like coffee script", "d": "6/2015"}, {"body": "custom url inside destroy method url constant base url", "d": "6/2015"}, {"body": "thanks", "d": "6/2015"}]