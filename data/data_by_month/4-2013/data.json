[{"title": "underscore parameter", "body": "hello faced problem global variables like underscore project ca nt use backbone project use var underscore fixed problem use requirejs want get opportunities path underscore name noconflict function backbone something like hot fix like var rootunderscore root", "num": "2507", "d": "4/2013"}, {"title": "merge attributesclass classname", "body": "looked issues could nt find anything go views reusable often want one class view el always ability add extra classes via attributes property right overrides pass view failing test javascript test merge attributes class classname function var view backboneviewextend classname one attributes id id class two let know interested changing behavior fix right away", "num": "2506", "d": "4/2013"}, {"title": "response collectionfetch inconsistent", "body": "happened write dirty code needing use grab values set nested models tapped function however values passed means different things two versions collection means collection called called response json values parsed jquery whatever adapter given restful call options rest options passed however collection means response response means return value underlying adapter jquery would success ajax call successfully executed options holds thing since saw quite difference terms sync functions triggers different events callbacks would better mark kind changes change log migration guide people would know api changed enough break existing code even documentation changes actually nt indicate values thank", "num": "2505", "d": "4/2013"}, {"title": "need help backbone custom ajax call ca nt show loading message", "body": "ca nt resolve problem week view code events updatestats function e ajax call render loading hide run updatestats loading dom element ca nt show browser set debugger alert text ajax loading show way fix problem", "num": "2504", "d": "4/2013"}, {"title": "collection firing change event added model", "body": "using listen add change events collection model added collection fires add change get adding changes collection sense intended behaviour event model collection changes intended bug", "num": "2502", "d": "4/2013"}, {"title": "announcement hippo meetup event javascript frameworks libraries", "body": "hi sorry proper communication channel announcementsdiscussions support software developer originally egypt working living netherlands hippo employer besides normal support development work love build communities around different interests specifically open source software interest idea hippo meetup events born see javascript core hippo interests first pretty successful event beginning year would like new one time different javascript frameworks libraries backbone getting pretty much popular hippo would like someone backbone community give talk coming event event english speakers speaker nt speak dutch time transportation efficiency preferable speaker lives netherlands country close serious speaker lives far netherlands bring company see besides interest technologies technical ideas event good opportunity socialization meeting smart people make connections help spread word backbone drinks food served attendees lots fun hope one come show us great features backbone looking forward reply", "num": "2501", "d": "4/2013"}, {"title": "modulesave overwrites model data passed options data", "body": "hi pass additional data ajax request save like overwrite module data think inside backbonesync first copy data attributes", "num": "2500", "d": "4/2013"}, {"title": "unable hold attributes views", "body": "since updated version longer able store options views creating inner model every view needs attributes impractical uses least appears one major model used store business data originally stored path smaller views would rendered model underscore get value desired usually string line items case cant store paths views impractical model view screen even small views generating many selfupdating lists screen number items list change initial render data row change initial render run mobile platform limited resources nt want rerender entire list change element changed model one seems really impractical", "num": "2496", "d": "4/2013"}, {"title": "add beforeroute events backbonerouter", "body": "hello beforeroute event would useful able catch properties controller execution", "num": "2495", "d": "4/2013"}, {"title": "nt replace new model persisted model calling collection set", "body": "building nested modelscollections upon event top model call nested collection endpoint server responds back persisted child models following sample code modelscollections coffee class parentmodel extends backbonemodel urlroot apiparents initialize gt setupnestedmodels sync setupnestedmodels setupnestedmodels gt childcollection new childcollection childcollectionset attributeschildcollection rails backend unset childcollection class child extends backbonemodel class childcollection extends backbonecollection model child let say create new like render view dependent child hit save happens original model gets removed collection place new model different set seems bit clunky assumed automatically merge since option understand sometimes order ca nt guaranteed response rather single maybe even passing explicit options removeadd models rather manually loop response attributes update model individually way maintaining model object wo nt rerender view", "num": "2493", "d": "4/2013"}, {"title": "improve documentation", "body": "hey guys backbone really great documentation stuff forgotten like model set method nowhere saying options pass sucks another thing events never know events model collection fire unless browse every single method good table describing situations event fired", "num": "2492", "d": "4/2013"}, {"title": "providing bare bones convention nested views", "body": "biggest source questionscomplaintsissues encountered backbone deals handling issue nested views sufficiently complex application see real world applications need managing views within views cleaning properly well received addition helps degree think backbone could bit something add pretty much whatever working job without much overhead complexity js var view backboneview backboneview backboneviewextend constructor function thissubviews viewapply arguments addsubview function view view instanceof backboneview throw new error subviews must backboneview thissubviewspush view return view removesubviews function var children thissubviews var l childrenlength remove function thisremovesubviews viewprototyperemoveapply arguments completely understand agree backbone position keep things simple implement applications specific components time think providing basic starting point problem would great help many starting point could extended upon opinionated libraries frameworks like layoutmanager thorax marionette etc cc tbranyen", "num": "2490", "d": "4/2013"}, {"title": "introduce allchangedattributes retrieve changes since model initialisation", "body": "similar changedattributes introduce new function returns changed attributes since initialisation model would allow setting attributes model multiple times saving using http patch", "num": "2488", "d": "4/2013"}, {"title": "change event triggered another change event listener events changed attributes", "body": "expected behaviour upon triggering new change event listener another change event second change event fired containing first action second take code example want update attribute whenever either two attributes change also want happen attributes changed single action solution came listen general event check caused attribute interested changed issue model point subsequent change event triggered listener fired also contains previously changed attributes seems attributes changed twice javascript var model backbonemodelextend var model new model b unrelated foo computed modelon change function consolelog model changed modelchangedattributes modelchanged modelchanged b consolelog b changed recomputing modelset computed modelget modelget b consolelog modifying unrelated modelset unrelated bar recalculation consolelog modifying modelset result single recalculation consolelog modifying b modelset b also result single recalculation last two cause recalculation happen twice one solution would silence second change event nt want listeners triggered intended events behaviour one achieve", "num": "2487", "d": "4/2013"}, {"title": "route fragments numbers", "body": "url scheme changed urlsfragments site numbers example become change fragment string causes error backbone uncaught typeerror object method replace line added check getfragment method line fixed something wrong legitimate bug recently upgraded never numeric fragments previously", "num": "2486", "d": "4/2013"}, {"title": "issue collectionremove", "body": "issue occurs version manually set model id try remove model collection nt get removed reproduce issue example pasta model nt get removed javascript var meal backbonemodelextend defaults appetizer caesar salad entree ravioli dessert cheesecake var mealcollection backbonecollectionextend model meal var meals new mealcollection mealsadd maindish salmon id mealsadd maindish steak id mealsadd maindish pasta mealsfindwhere maindish pasta set id silent true var steak mealswhere maindish steak var pasta mealswhere maindish pasta mealsremove steak mealsremove pasta", "num": "2485", "d": "4/2013"}, {"title": "thisroot undefined line", "body": "shim backbone requirejs requireconfig deps main paths components components jquery componentsjqueryjquerymin bootstrap vendorbootstrap backbone componentsbackbonebackbone underscore componentsunderscoreunderscore text componentsrequirejstexttext handlebars componentshandlebarshandlebars shim bootstrap deps jquery exports jquery underscore exports backbone deps jquery underscore exports backbone upgrading backbone v get error line content nt understand root object undefined backbone", "num": "2483", "d": "4/2013"}, {"title": "ie patch support", "body": "putting reminder take look back comments regarding make sure everything alright cutting next release", "num": "2476", "d": "4/2013"}, {"title": "doc indexhtml created", "body": "file generated someone help", "num": "2475", "d": "4/2013"}, {"title": "pass ajax options fetch save destroy", "body": "seems like success error callbacks options passed ajax benefit finding hard add custom header single api call thing worked far ajaxsetup custom header added every subsequent api call easier way add custom header single ajax call", "num": "2474", "d": "4/2013"}, {"title": "pushstate navigation problem url", "body": "two routes first global routes second settings routes use pushstate case class demoroutersroot extends backbonerouter initialize options gt thisroute settings settings settings gt routesettings routesettings new demorouterssettings setting routes class demorouterssettings extends backbonerouter initialize gt thisroute settingsshow show navigate settingsshow trigger true replace false show gt consolelog press settingsshow nt fire show function", "num": "2472", "d": "4/2013"}, {"title": "defaults used merging attributes collectionset", "body": "currently pass attribute hash model id already exists collection resulting merge model default values applied merge takes place means give selection attributes want merged model attributes nt give defaults defined override existing nondefault values seems unexpected seems like perfect way apply partial updates models current functionality nt possible example javascript var model backbonemodelextend defaults key value var new model id key nondefault var col new backbonecollection model model colset id otherkey merge true consolelog colfirst attributes result id key value otherkey expected id key nondefault otherkey confusing thing setting attributes model directly behaves differently way would expected behave edit actually testing seems regression javascript version var model backbonemodelextend defaults key value var new model id key nondefault var col new backbonecollection model model colupdate id otherkey merge true consolelog colfirst attributes result id key nondefault otherkey edit commit seems source change really intended", "num": "2471", "d": "4/2013"}, {"title": "preparemodel method mutates options object", "body": "nt know intended work like preparemodel accidentally injects collection options object create method use preparemodel obtain correct object calls save options object using backboneio got error save method tries convert json whole options object collection ca nt serialized like", "num": "2470", "d": "4/2013"}, {"title": "support mongodb extended json", "body": "mongolab cloud version mongodb provides nice rest api however model id looks like id oid solution found stack overflow bit rough var sync backbonesync backbonesync function method model options options options optionsattrs present backbone use dumping tojson optionsattrs optionsattrs omit modelattributes id return synccall backbone method model options backbonemodelprototypetojson function options var attrs clone thisattributes case pass includeid true tojson actually want id output return options amp amp optionsincludeid attrs omit attrs id better way create patch backbone support ids", "num": "2468", "d": "4/2013"}, {"title": "cross site script vulnerability", "body": "recent security scan using tool called fortify found cross site scripting xss vulnerability code question updatehash function code called navigate function use navigate function way perform cross site script attack appnavigate help javascript alert xss trigger true would result following url called would result alert box displayed text xss appnavigate page", "num": "2467", "d": "4/2013"}, {"title": "fetch optionssuccess callback arguments changed", "body": "nt see changelog issues forgive duplicate fetch optionssuccess callback takes arguments collection resp used take model resp options change broke custom override", "num": "2466", "d": "4/2013"}, {"title": "function execution order model constructor", "body": "called code preforms set used override model constructor order ensure set occurs parse called answer yes hold true", "num": "2465", "d": "4/2013"}, {"title": "thisviewdelegateevents backbone", "body": "", "num": "2464", "d": "4/2013"}, {"title": "modeloff thismodeloff", "body": "", "num": "2463", "d": "4/2013"}, {"title": "define default option requestmethod", "body": "need define default option like wait true requestmethod", "num": "2459", "d": "4/2013"}, {"title": "saving model collection options", "body": "reason model collection save copy options hash instance like view see key properties getting plucked source added instance options argument assigned options", "num": "2458", "d": "4/2013"}, {"title": "parse longer called collectionreset", "body": "looks mistake need parse models populating reset let know design", "num": "2457", "d": "4/2013"}, {"title": "collection url set instantiation", "body": "docs state passing option collection constructor set collection url property several options provided attached collection directly url model comparator looking implementation see source code reflect sets legacy functionality misreading docs related thanks", "num": "2453", "d": "4/2013"}, {"title": "readd lodash docs", "body": "backbone bump lodash removed docs sure removed since unlike jquery zepto lodash ships tests backbone unit tests also maintains compat builds even cdnjs specifically compat underscorebackbone also seems come surprise backbone contributors", "num": "2452", "d": "4/2013"}, {"body": "nope nt noconflict underscore backbone loaded patch copy suggested", "d": "4/2013"}, {"body": "feel specific functionality many simple work arounds part core", "d": "4/2013"}, {"body": "ok fine disagree documentation states attributes hash attributes set html dom element attributes view el nt explicitly say override however also see cases want opposite probably fine", "d": "4/2013"}, {"body": "yep think probably overriding either one direction want merge jquery addclass constructor would make sense", "d": "4/2013"}, {"body": "please nt ask help issues tracker try mailing list irc channel", "d": "4/2013"}, {"body": "sample code gets fired new model gets fired existing model collection change attribute values great set breakpoints inside backbone entry points backbone watch backbone actually found pretty valuable learn backbone actually implemented", "d": "4/2013"}, {"body": "wanted add direct contact please nt hesitate get touch email mnour onehippocom looking forward get touch community", "d": "4/2013"}, {"body": "sorry proper communication channel announcementsdiscussions problem future please use irc mailing list announcements like github issues strictly bugspatchesissues backbonejs", "d": "4/2013"}, {"body": "hi casey mailing list would please point thanks advance", "d": "4/2013"}, {"body": "mnour", "d": "4/2013"}, {"body": "tgriesser thanks lot", "d": "4/2013"}, {"body": "supposed able overwrite model data like also include model data simply include override", "d": "4/2013"}, {"body": "yes think intuitive copy properties set like method otherwise set", "d": "4/2013"}, {"body": "using unstable version use stable version found", "d": "4/2013"}, {"body": "like model set method nowhere saying options pass ha actually recently took particular bit documentation builtin option pass highly discouraged mostly passing custom options forwarded along event handlers use see fit indeed documented better section events good table describing situations event fired like one", "d": "4/2013"}, {"body": "oh bad nt saw gorgeous catalog events exactly looking well thanks guys made awesome project really enjoy working backbone", "d": "4/2013"}, {"body": "nesting views much complex thing backbone", "d": "4/2013"}, {"body": "mornin tim certainly understand impetus change written similar code many times nt think subview management appropriate inclusion backbone views almost convention actual code powerful primitives good conventions build upon code rather small amount boilerplate nt address hard issues like disposal data binding people mostly nt agree however implies backbone handle nt many views nt contain views allocating array silly leaving unimplemented allows creativity solving hard problems working backbone instead around", "d": "4/2013"}, {"body": "nasty thing pattern stores references meaning go back manually remove child views agnostic setup html subviews removed time models stop referenced gets garbage collected unnecessary references js less garbage collection gets job try possible mandated core backbone", "d": "4/2013"}, {"body": "allocating array silly good point could simplified nasty thing pattern stores references meaning go back manually remove child views call top level view calls child views automatically good nt seem nasty working backbone instead around possible mandated core backbone makes sense agree really brought heard many questions probably behind nested modelscollections might worth mentioning something small docs ways deal views within views cases html subviews nt removed time objects view maintains references opinions", "d": "4/2013"}, {"body": "allocating array nt silly bringing valid reason something though braddunbar", "d": "4/2013"}, {"body": "maintaining views opinion difficult part backbone application must make sure properly dispose views detach events dereference objects etc absolutely run memory leaks post today many like opinion contrived problem plugins blog posts best way make library effective creating views newcomers way models collections attempt provide would love work layout manager point could merged fear would effort wasted nt mind asking would main objections nt want towards integrating well tested properly handled view management", "d": "4/2013"}, {"body": "think one main issues tbranyen touched upon backbone views typically promoted jquery better structure keep logicstate dom good stuff problem coming land nt think references gc almost black box handles cleaning references big way backbone nt much done outside modelscollections dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory many valid cases view would observing events object would outlive subviews added view render block referencing parent model parent view rerendered views hang around parent model gone unless explicitly kept track removed views beginning render block try possible mandated core backbone also looking comment say agree fully also think big difference mandating something providing outlet handling something rather common major pain point source confusion simple entirely optional fashion cloc backbone view section complicated going get vs models collections counting underscore fine certainly understand nested views nt immediately obvious sprung many blog posts half baked plugins frustration", "d": "4/2013"}, {"body": "tbranyen right nt great reason nt mentioned think main point still stands though known sorts silly things recommend dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory done ways found trade keeping things around memory improve perceived load time often accompanied high cost complexity cache management leaving view disposalmanagement altogether huge win valid strategies choice depends constraints", "d": "4/2013"}, {"body": "still nt think merging change like repeat maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners said course many cases want style view hierarchy let solve documentation anyone want cook nice nested views section homepage talking briefly make views flow nicely gc maintain explicit hierarchy automatic granular unbinding demonstrating code", "d": "4/2013"}, {"body": "great take shot putting together docs", "d": "4/2013"}, {"body": "addition docs need nt include code maybe make tgriesserbackbonenested official plugin link reference implementation", "d": "4/2013"}, {"body": "code intended manage fixed number subviews manage variable number subviews opinion fundamentally two different beasts warrant totally separate solutions start split section ui separate subviews organizational code reuse purposes fixed number subviews useful reference subviews names hash keyed subview name appropriate data structure storing subviews case contrast rendering collection arbitrary number subviews array appropriate storing subviews code sufficient solution either case imo first case simpler even case one question immediately arise need addressed subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements minimal solution rendering fixed number subviews able distill backbonesubviews mixin solution address rerending issue imo incomplete case variable number subviews another matter go complicated case add new backbonecollectionview plugin one available solutions", "d": "4/2013"}, {"body": "subviews reinitialized parent rerendered rerendered actually find majority cases parent rerendered easiest reinitialize rerender view case work fine long call topmost splitting ui many times wo nt use hash named subviews subviews rerender based model changes etc nt need reference parent guess confirms jeremy said one size fits scenario view management something nt addressed backbone", "d": "4/2013"}, {"body": "maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners jashkenas nt quite understand sentiment suppose one view proper way remove closing tab call document somewhere somehow big bold letter says dont use fnremove fnempty get mem leaks anyway tgriesser suggested change good start actually simplify memory management automatically propagating call nt know many beginner view code seen seen beginners absolutely definitively get socalled structure people whose brains warped jquery half decade jquery chain structure nt like look guidance backbone backbone offers next help refusing single likely place induce partially digested stomach content ejection jquery code lack blessed way nest views put code belongs subviews parent view implement halfass solutions propagate backbone events deeply nested subviews ancestors many times big blob jquery pasta within nt know deal subviews years backbone lot people starting converge towards solutions suggested herein sincerely hope reconsider trying hash view class solves problems people current implementation useful reference subviews names hash keyed subview name appropriate data structure storing subviews case dgbeck actually hash sufficient appropriate solution situation since rendering collection views keys simple index make sure subviews come right order caseywebdev et al book actually suggests using hash subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements cases parent call rerender subviews subview method dom events redelegated yes lot work cpu cycles done makes backbone view even tightly bound jquery love see clean implementation actually downgrades jquery importance sidebyside dom api many reasons whole blog posts", "d": "4/2013"}, {"body": "actually backbone could use views hash track child views provide extra methods make view management easier", "d": "4/2013"}, {"body": "actually interested approaches people using real software theory realms since lot people solving problems probably similar patterns used two patterns liked backbonesupport approach like like view rendering included inclusion subview way used subviews via backbonehandlebars nt try promote anything idea hide subviews templating engine method access subview via obscure ca nt recall ever use jashkenas one possible solution removing subview imaginary extend events understand subview rendering dependent tempting engine one biggest weaknesses strengths nt clear template engine pipeline", "d": "4/2013"}, {"body": "rstankov subview rendering depend template engines perfectly nest views view represents html element constructed jquery view constructor backbonesupport address dgbeck issues uses array sometimes need able name subviews also nt see giving extra events going help obvious way construct view hierarchy backbone backbone events also nt bubble like dom events useful subviews sharing modelcollection want look real world code backgrid whole thing entirely composed nested views using slightly less elegant variation tgriesser solution sufficient happen need name subviews many situations certainly call hash really default way go underscore trivially make hash behave like array", "d": "4/2013"}, {"body": "wyuenho nice grid point mainly look patterns used projects since noticed everybody handling different way moving subviews template helper see subviews markup view code understand pattern solution generic stuff need view event like subview model removed triggers removing subview removed dom still collection parent view way reference parent view subview upon removal remove child parent places take heavy use subviews hard part creating putting correct dom places self managed way communicated parent custom dom events ca nt remember case parent needed call method subview", "d": "4/2013"}, {"body": "hey ingoe sort functionality discussed bit see given somewhat common usecase idea think plugin would best strategy", "d": "4/2013"}, {"body": "hi ingoe thanks opening issue agree jashkenas though synced state model something belongs app code backbone ca nt know method best app choice left thanks reference mponizil", "d": "4/2013"}, {"body": "hi johtso nice see evening definitely intended behavior nested changes aggregated event way done seems nice probably way would go well fiddle behavior seems correct", "d": "4/2013"}, {"body": "hey braddunbar ah okay think understand expected recursive behaviour example approach work child set triggers another change event listener called second time model still contains previously changed attributes recalculation done twice wanted avoid key thing changes aggregated across distinct change events", "d": "4/2013"}, {"body": "ah see mean value computed attribute needs evaluated twice b change regardless thanks elaborating unless measured found doubling causing performance problems would nt worry even calculated get one change event say listen nt worry extra calculation", "d": "4/2013"}, {"body": "everything looks kosher anything funky link handling would imagine never came routes already strings backbone needs string fragment argument might try something like instead still nt solve issue post test case testing way get number backbonenavigate pass", "d": "4/2013"}, {"body": "exactly passing int stop fragment ended integer pulling html attribute jquery method auto type conversion thanks", "d": "4/2013"}, {"body": "ah yep url stuff queries hashes pushstate deal strings best pass string edit sorry extra posts seems github android broweser dont play nice either smileycat", "d": "4/2013"}, {"body": "thanks looking test case closing one", "d": "4/2013"}, {"body": "returns array matches want edit idiot takes array problem using braddunbar thought resolved", "d": "4/2013"}, {"body": "since relies event observe changes model id expected break silencing change fact would discourage using altogether removed documentation causes many known problems", "d": "4/2013"}, {"body": "lfortin thanks opening issue boiled example simple use case demonstrates bug javascript var collection new backbonecollection collectionadd maindish salmon id collectionadd maindish pasta collection findwhere maindish pasta set id silent true var pasta collectionwhere maindish pasta collectionremove pasta consolelog mealslength running example jsbin bug caused setting backbone uses events internally update indexes models ids change set id tell backbone trigger expected events mechanism updating indexes thus fails attempts use id index present workaround use set id", "d": "4/2013"}, {"body": "makes sense caseywebdev braddunbar wookiehangover thanks lot help", "d": "4/2013"}, {"body": "mornin exoer property set would passed function otherwise overwritten property nt yet started", "d": "4/2013"}, {"body": "also least unit tests error test running compat mode", "d": "4/2013"}, {"body": "ie testing see nt forget testing compat modes easy via dev console dropdown list", "d": "4/2013"}, {"body": "handwritten may try irc channel questions like", "d": "4/2013"}, {"body": "okay thanks", "d": "4/2013"}, {"body": "hi briansorahan actually options passed already passed enjoy", "d": "4/2013"}, {"body": "def bad thx", "d": "4/2013"}, {"body": "debug backbone found fix problem add line change line conflict", "d": "4/2013"}, {"body": "bug tracker personal support forum please try irc channel mailing list trouble", "d": "4/2013"}, {"body": "would say choice jeremy made makes much less useful honest never use backbone current behavior definitely unexpected imo", "d": "4/2013"}, {"body": "agreed screwed change feel free revert fix", "d": "4/2013"}, {"body": "well fix previous pr ideal still take thought first step revert tests back old expected results", "d": "4/2013"}, {"body": "looks like data output extended json format see process correctly", "d": "4/2013"}, {"body": "sure solution rough backbone meant extended catch adding methods backbonemodelprototype creating base subclass nt worry things supposed work good number people needing type change something could considered think extending would best solution", "d": "4/2013"}, {"body": "overriding instead sounds like good idea thx nt think omitting code mentioned rather good solution guess need something like mongo db extended json lt gt json converter time write suggestions", "d": "4/2013"}, {"body": "mornin dealancer thanks posting think tim right job amp something like js var model backbonemodelextend parse function res resid resid oid delete resid return res tojson function var attrs omit thisattributes id attrsid oid thisid return attrs", "d": "4/2013"}, {"body": "yeah sounds like plan also ideas dates objects going create extension conversion automatically", "d": "4/2013"}, {"body": "dealancer typical good practice pull nested objectsarrays modelscollections referenced directly model custom also might actually interested thread related handling mongodeep nested things", "d": "4/2013"}, {"body": "mornin thanks posting exploits question rely evaluating arbitrary user input html nt evaluate html nothing backbone please see previous discussion details hand isolate specific exploit preventable backbone jsfiddlejsbin would love take look", "d": "4/2013"}, {"body": "hang minute think saying malicious party sends user malcrafted link backbone app use hole way get immediate xss let take another look", "d": "4/2013"}, {"body": "excepting method evaluation fragment html would script executed nt evaluate fragment knowledge contents executed", "d": "4/2013"}, {"body": "take word absence demonstrable jsfiddle sorry", "d": "4/2013"}, {"body": "problem nt mind extra scrutiny unable reproduce exploit", "d": "4/2013"}, {"body": "jquery fixed similar issue past well dev used even though code base never might worth checking jquery resolved", "d": "4/2013"}, {"body": "see jquerysrccorejs line issue", "d": "4/2013"}, {"body": "says still params", "d": "4/2013"}, {"body": "yep looks like still takes arguments", "d": "4/2013"}, {"body": "override model constructor order ensure set occurs parse called correct way go say people prefer attributes called case solution constructor overriding difficult fact noted docs", "d": "4/2013"}, {"body": "please check documentation google groups ask questions irc channel github tickets issues related development library", "d": "4/2013"}, {"body": "yep unlike view standard behavior tagged options want attach property feel free also please search opening tickets asked", "d": "4/2013"}, {"body": "sorry see someone already posed question though assumed asked admit search thorough would changing models collections set thisoptions upon construction breaking change harm another reference options argument model collection instance code around behavior past developing apis top backbone major issue see might confusing developers newer backbone primarily working views explicitly create reference options argument initialize method override constructor", "d": "4/2013"}, {"body": "would probably best attachment left user well think ship sailed kind decision nt made user especially since easy several pretty good discussions old issues", "d": "4/2013"}, {"body": "agree like decisions made either since already done developer view makes sense consistent pretty common practice keep reference options object well jquery plugins developer would expect based behavior libraries including backbone views however point developers likely initialize functions setting may massaging data setting making change like might cause people issues becomes bit pain factories creating child models collections based complex parent model relationship objects relies options passed parent upon construction end override constructors set options need access later custom sync functions huge deal seems unnecessary thought maybe others frequently", "d": "4/2013"}, {"body": "inconsistent confusing done automatically backboneview model collection", "d": "4/2013"}, {"body": "spent time going annotated source trying figure collection options nt kept least would useful note documentation explaining inconsistency", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "going consistency like see optionsinstance attachment removed views may late", "d": "4/2013"}, {"body": "brad feel way maybe bite bullet line next upgrading paragraph", "d": "4/2013"}, {"body": "feels wrong super easy modelsviewscollectionsrouterswhatever want ca nt opt always feel weird", "d": "4/2013"}, {"body": "yep attaching always leads mess sure property use update one need update state mismatch seen code options nt attached used everywhere seems inelegant best options vehicle getting information constructor without needing arguments deal throw away", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using lots projects use sure whether removed nt care much either way would definitely require code changes many good reason backwards incompatibility", "d": "4/2013"}, {"body": "braddunbar agreed vs get confusing state management pain unless values arrays objects also agree options argument gets thrown away construction typically pick properties need assign however override call extending classes know inheritance chain support developers get options unfortunate might unique situation complaint inconsistency confusing especially new backbone also sure docs first started using backbone fact backbone picks certain properties key name assigns initially confusing none things issues start combing source assuming new users nt consult source think removing options views point would painful developers point", "d": "4/2013"}, {"body": "dropping always stood unexplained inconsistency even large apps depending oneliner add reference back views well count adding named argument point simple change anyone make", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "agree removing principle obviously significant change backbone huge user base also seems like root issue may go deeper also lot confusion discussion past around options attached directly view others several special options passed attached directly view model collection el id classname tagname attributes long considering significant breaking change might worth take step back see restructuring might address issues ideally could automagically attach options want view object right discussed several ways go white listing options attach view interesting though least experience almost always want attach options view pity people forced manually copy view class develop solution base view class fringe cases nt want attach options view source problem may three distinct things squished options parameter built options get attached directly view user defined options want attach directly view temporary options need initialization separating three things two parameters would give flexibility instance everything could attached view object everything used initialization discarded thisoptions manually copying", "d": "4/2013"}, {"body": "necessary change ugly code layoutmanager function smells bad need way consolidate options think everything instance makes perfect sense", "d": "4/2013"}, {"body": "addressed", "d": "4/2013"}, {"body": "curiosity anyone use default options ie attached prototype always put defaults directly view instead", "d": "4/2013"}, {"body": "mean yes recall rationale top head mon apr brad dunbar notifications githubcomwrote curiosity anyone use default options ie attached prototype always put defaults directly view instead reply email directly view github", "d": "4/2013"}, {"body": "braddunbar use stuff like modal popups determine whether include action buttons text padding etc handy default options inheriting classes new instance methods override inherit", "d": "4/2013"}, {"body": "thanks jstrimpel also use values options object ie probably nt added value right words code functionally equivalent long access", "d": "4/2013"}, {"body": "guess main thing hash looks little cleaner little obvious meant overridden passed instead part instance probably right functionally similar also quite easy bring back first supported called function coffeescript class abstractpopup extends baseview templatedata gt extend options modeltojson options gt class actionpopup extends abstractpopup options gt extend super fixed true showactions true text sure afterrender gt eladdclass fixed optionsfixed actions hide unless optionsshowactions super class leavegrouppopup extends actionpopup options gt extend super text want leave group fixed false", "d": "4/2013"}, {"body": "except clean ends confusing assign something like template extend level try override invocation level updated property inside instance options object", "d": "4/2013"}, {"body": "tbranyen inside instance heirarchy support several different types popups different options behaviors seemed like logical solution alternatively could put options instance properties feel like would clutter instance properties essentially optional parameters admittedly contrived ugly example", "d": "4/2013"}, {"body": "never used default prototype propertyfunction favor removing given passes plus creates asymmetry options options maybe matter preference class configuration properties attached prototype least inheritance come free", "d": "4/2013"}, {"body": "actually keeping options instance reason mentioned little obvious meant overridden passed instead part instance values live signify parts view configured code instantiates prototype define defaults values given ultimately responsibility copying directly onto instance removes distinction ownership", "d": "4/2013"}, {"body": "point raised spadgos makes sense think extra typing turns others curiosity ever come across gray area cases option determined code instantiates view logic within view example option passed perhaps manipulated transformed may change life view", "d": "4/2013"}, {"body": "still called closing still think bug please provide codepenjsfiddle reduced example", "d": "4/2013"}, {"body": "correct running collectionparse modelparse modelparse assuming certain format clearing fixed thanks quick reply", "d": "4/2013"}, {"body": "attaching removed master basically passing constructor options overload method causes drama see full discussion", "d": "4/2013"}, {"body": "thanks gsamokovarov say thing", "d": "4/2013"}, {"body": "thanks sorry could nt seem find issues first search", "d": "4/2013"}, {"body": "gsamokovarov tgriesser docs seem inaccurateunclear", "d": "4/2013"}, {"body": "docs usually follow latest stable version updated mostly version bumps master docs try rawgithubcom get latest one changes may sync one explicitly documented eg references attachable gone", "d": "4/2013"}, {"body": "reference got included docs", "d": "4/2013"}, {"body": "need remove lodash since puts effort underscore compatible", "d": "4/2013"}, {"body": "lodash backbone work well together used large application", "d": "4/2013"}, {"body": "removal done purpose provided reason", "d": "4/2013"}, {"body": "think calling lodash place documentation probably faq heading alternate dependencies seems like potential outcome least", "d": "4/2013"}, {"body": "wookiehangover mention better none though got ta say nt dig lumped use risk lib like zepto especially lodash goes beyond even underscore terms compatibility underscore broke compat versions backbone amp edge", "d": "4/2013"}, {"body": "actually really like event proxy feature collectionview disposed model collection disposed assuming something like simply check view", "d": "4/2013"}, {"body": "yea rather like feature doubt going anywhere anytime soon would break huge amount code", "d": "4/2013"}, {"body": "going open issue zepto inconsistency currently backbone problem zepto really event data never removed causing leak", "d": "4/2013"}, {"body": "jdalton thanks good catch imo evidence use risk line reasoning", "d": "4/2013"}, {"body": "plan release bb fix soon kind biggie workaround done backbonepageable necessitate setting generated url either callback gets invoked reset url original could leave open window seconds becomes useless", "d": "4/2013"}, {"body": "also ran issue spent tracking saw looking forward", "d": "4/2013"}, {"body": "yep right time let try wrap", "d": "4/2013"}, {"body": "jashkenas like get defaults w merge dealio fixed", "d": "4/2013"}, {"body": "feature team well took us quite time debug problem upgrading", "d": "4/2013"}, {"body": "seems likes caseywebdev change merged get soon", "d": "4/2013"}, {"body": "looking back previous versions backbone creation temporary internal models nt anything new maybe coming light addition defaulting collection fetch note docs mentioning something along lines models may point part collection nt bind events external objects probably best solution", "d": "4/2013"}, {"body": "got bit one pain hierarchy models need saved series", "d": "4/2013"}, {"body": "maybe time backbone explicitly support use promises indirectly jquery zepto support already quite shaky discussed several times already eg nt see big problem potential replacement anymore current solution rely jquery promises using validations etc creates really bad api methods communicate server think would far better solution long run backbone actually use promises internally quite big change would probably targeted specific reasons backbone nt use promises except supporting zepto", "d": "4/2013"}, {"body": "thinking monkey patching something like meantime originalsave backbonemodelprototypesave backbonemodelprototypesave attributes options gt req originalsavecall attributes options req model valid return jqxhr req else model invalid return promise consistency dfd new deferred dfdreject validationerror options dfdpromise", "d": "4/2013"}, {"body": "seem like could potentially provide nicer unified api feel free send pull request", "d": "4/2013"}, {"body": "sure others agree suggestion rename option instead consistent existing method", "d": "4/2013"}, {"body": "took first shot decided include option since fail handler handle case failed model validation unsuccessful ajax request feels little cleaner validation check save fails add event listener really need specific errors probably want invalid listener show user messages anyway alternatively", "d": "4/2013"}, {"body": "looks like findwhere missing backbonecollection", "d": "4/2013"}, {"body": "globexdesigns listed separately underscore collection functions", "d": "4/2013"}, {"body": "var collection new backbonecollection consolelog collectionfindwhere returns undefined", "d": "4/2013"}, {"body": "globexdesigns sure running backbone code fiddle run check console see", "d": "4/2013"}, {"body": "nt say findwhere sincerely joseph chapman managing director amp principal developer creatify limited apr kim joar bekkelund notifications githubcom wrote globexdesigns sure running backbone code fiddle run check console see function attrs return thiswhere attrs true reply email directly view github", "d": "4/2013"}, {"body": "ok maybe condition occurring code causing function get undefined take look get back based earlier comments seems one happened", "d": "4/2013"}, {"body": "think reopened bug regardless underlying library used backboneajax response server means operation case destroy success execute given callbacks called case destroy succeeded failed case server responds destruction success forcing developers change backend deal unexpected frontend implementation decision", "d": "4/2013"}, {"body": "look way client renders html form backed backbone model pressing submit button formmodel saved order benefit buildin model validation app execute modified value want take advantage http patch method submit changed attributes currently buildin way retrieving changed values model since returns change since last call also disagree problem concurrent modifications part discussion concurrency issues handled server side solution extend model listen event suggested jashkenas still buildin functionality would nice", "d": "4/2013"}, {"body": "experiencing problem android based phones workaround", "d": "4/2013"}, {"body": "workaround replace updatehash function one checks user using android browser chrome make sure replace false create extra history item browser chrome browser best possible solution could come javascript var oldupdatehash backbonehistoryprototypeupdatehash var nua navigatoruseragenttolowercase var isandroid nuaindexof gt amp amp nuaindexof android gt amp amp nuaindexof applewebkit gt amp amp nuaindexof chrome gt replace default updatehash function backbonehistoryprototypeupdatehash function location fragment replace", "d": "4/2013"}, {"body": "thanks jorgenfb used solution added android devices also use history without pushstate android devices supports pushstate", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "also caught", "d": "4/2013"}, {"body": "downside view know ahead time used use accordingly child placed parent nt concern child given following view expect b c foo class name new myview el render el view myview b viewrender el view myview c viewsetelement el render el", "d": "4/2013"}, {"body": "hi braddunbar although true many api return location header still want backbone object updated way telling object update location header even whatever successful code would valid use case", "d": "4/2013"}, {"body": "nt exists ca nt find arguments callback anywhere docs", "d": "4/2013"}, {"body": "looking", "d": "4/2013"}, {"body": "kjbekkelund unfortunately want know arguments provided event callback", "d": "4/2013"}, {"body": "kjbekkelund ahh see give link wanted nt expecting args different event nt expecting list thanks", "d": "4/2013"}, {"body": "absolutely agree request expressed use case similar twitter home timeline fetch collection update true remove false wait true collection add binded append adds new pages items last visible bottom useful say infinite scroll add things bottom creates collection fire add binds append wanted add things top comes problem want creates prepend instead appending items like twitter prepends new things top appending old things bottom isnew nt seem solve use case either bottomline want display things different ways add create happen easy wayhack around telling add called back", "d": "4/2013"}, {"body": "testing iterating array order iterates array order except routes defined object literal array assurance keys come back order put see instance", "d": "4/2013"}, {"body": "benanhalt practice eg major browsers kept order defined unless keys numeric would nt case routes see info", "d": "4/2013"}, {"body": "jashkenas allows create add views dom rendering later sure events bound correctly delegated viewel given following document test following var demo demo var el var template click demoappend el elon click button function alert works function clonecopyevent src dest clonecopyevent elget templateget elreplacewith template following happen empty div created empty div attached dom event delegated empty div template div button replaces empty div click button event initially attached empty div works directly jquery source come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates fully familiar backbone get last multiple templates part solution covers everything else anyway pov current behavior able attach events effectively nothing niche hold hand feature annoying practical implications stupid divs everywhere coupling template html application logic coupling template root elements application logic etc people binding events directly easy ensure template loaded bind events nt bind events directly though backbones click something feature even less issue problem whole div business solving also assuming problems solving existed obviously problem ca nt clean templates also ca nt time solution biased towards one frankly rather event handling integrated views annoying work views", "d": "4/2013"}, {"body": "lots issues nt think everyone thought help maintain backbone layout manager ability set unwrap problematic us node element multiple top level elements become nodelist probably would expect event binding becomes complicated top level elements well bind events top level elements separately losing benefit delegation bind parent worry cleaning elements another weird thing rerendering end first element list anyways lot issues technique hard generalize simplify problem without lots documentation", "d": "4/2013"}, {"body": "posterity supply function lose event delegation tbranyen seen code initial reaction would stay away breaks convention likely lead strange behavior since views written expecting legitimate use cases looking way elegantly require top level element", "d": "4/2013"}, {"body": "tbranyen use case needing templates one root element inside ca nt single wrapping element empty div like forced moment case think want template essentially replacement since every element would pretty normal single parent element regardless depth go personally see concatenation sets elements something outside scope template template somewhat equivalent custom tag body replacement extremely niche use case since means nt things like script tags things like wrapping element page instead stuff head imo bad practice", "d": "4/2013"}, {"body": "also maybe worth noting passed options could potentially quick oneoff views", "d": "4/2013"}, {"body": "like wrap element useful almost views templates nt include wrapper element nt think complexity view guess needs wrapper get worth could see lot bugs coming feature since backbone nt knowledge tempting system going feature similar mind better template opinions build feature", "d": "4/2013"}, {"body": "tgriesser nt template function produce function needs called data rstankov multiroot templates braddunbar following current implementation called view initialization judging code seems moment support multiple roots one template since lot assumptions made one element existing essentially reason multiple tags inside root template forced current wanky implementation backbone must generate root element remove requirement remove multiple roots argument think confusion stems see hacks get current system kindof work corner cases completely unacceptable currently essentially really difference following backboneviewextend tagname li classname something somethingelse compared backboneviewextend second flexible much better job splitting markup looks backbone glues together would deprecatedremoved properties second method", "d": "4/2013"}, {"body": "srcspider function called current view context", "d": "4/2013"}, {"body": "srcspider problem deprecating start using since jquery collection fairly easy problem element rendered active rendering happening relates rendering system using", "d": "4/2013"}, {"body": "rstankov problem element rendered active rendering happening relates rendering system using specific really following problem current system solving anything replacing original div nt", "d": "4/2013"}, {"body": "srcspider currently always sure set since called really early knowing interesting stuff example insert view dom content content arrives render view content know insert render slower render insert cases helped fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding also good thing current system call render n times content view changes element", "d": "4/2013"}, {"body": "rstankov example insert view dom content content arrives render view content would still empty default div replaced proper template replaced anything empty div replace div later nt see difference disadvantage fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding mean evaluate template data working empty div nt see dataanything actually inserting stuff using templates element using templates populate difference current way things inserting said div dom since step processing template nt really change two approaches currently place contents template inside div hence container hardcoded application second approach replace div template copy events nt require markup hardcoded application using templates throw content container using templates define actual container nothing changes use default div regard add conditions complicate workflow nasty dom element replacement event binding conditions yes would nt call want replace template nt see problem said feel current approach heavily based holding hand practical needs views nice clean independent markup able make application changing template alter way application structured ie changing using using clean using pattern add classes attributes markup going though programming hoops needing duplicate code support multiple approaches markup thinking difference probably implemented simply extra method would use want template replaced inserted", "d": "4/2013"}, {"body": "basic prototype implementation discussion purposes javascript appview backboneviewextend would use base view eg javascript function windowjquery", "d": "4/2013"}, {"title": "create views dynamically", "body": "maybe missing something probably since longer able create views dynamically specified snippet fails saying find template specified smallest piece code reproduce error found function container undefined case need dynamically create views custom", "num": "2597", "d": "4/2013"}, {"title": "missing approuter", "body": "ember pre able make kind calls make ember ca nt access router instance approuterplayerbarcontrollerresetplayer approuterget applicationcontrollerpresentation set currentposition parseint contextid", "num": "2596", "d": "4/2013"}, {"title": "default type text input helper", "body": "found new helpers like input available decided refactor templates sure app date new looks like default type working input valuevariable type attribute specified set text input helper arguments argumentslength lt fiddle issue", "num": "2595", "d": "4/2013"}, {"title": "registerboundhelper nt work html result", "body": "try display html content bound helper triple mustache html content escaped illustrate problem maked jsfiddle", "num": "2586", "d": "4/2013"}, {"title": "explain build directory", "body": "anyone point thorough documentation regarding arbitrary files generated run rake dist build source find emberdata additionally emberdatadepsjs find explanation name file makes wonder emberdata merged core need include deps get working additionally curious sorts files caught emberoldrouter reading comments issues wycats still would like clarity thanks ton", "num": "2585", "d": "4/2013"}, {"title": "strange error", "body": "probably bug sure resolve issue ideas would helpful", "num": "2583", "d": "4/2013"}, {"title": "currenthandlerinfos undefined transitioning route", "body": "application two root routes app user changes undefined transitionto user undefined transition feature works adding observer calling route callback called logic lies switch route play welcome pages functionality works except one nested routes page loads currentuser changed undefined loading page never renders content get errors logged console line question located", "num": "2582", "d": "4/2013"}, {"title": "fix clearrenderchildren simplehandlebarsview", "body": "clearrenderchildren nt actually remove rendered children calls destroy expects children remove parent view simplehandlebarsview views", "num": "2572", "d": "4/2013"}, {"title": "embertesting low test coverage", "body": "tests tester", "num": "2567", "d": "4/2013"}, {"title": "view container property documented used tests", "body": "started reading ember tests get better handle framework test uses undocumented features could nt find api docs", "num": "2566", "d": "4/2013"}, {"title": "emberselect content changedset value set selection selection lost", "body": "oeps like fiddle explaining problem emberselect change content value bound lose selection currently solved like fiddle appselect emberselectextend contentchanged function thisvaluedidchange nt work observes content", "num": "2565", "d": "4/2013"}, {"title": "dynamic segments routes fail length shorter two", "body": "saw behaviour ember app able recreate fiddle unable explain nt working basically route defined invoked path like sure intended behaviour", "num": "2559", "d": "4/2013"}, {"title": "documentation embercoreview", "body": "missed documentation well guide developers reuse views specific cases", "num": "2556", "d": "4/2013"}, {"title": "view renders instrumented renderrender", "body": "get something like console notice renderrender coreview instrumentation name automatically prefixed render seems like simply forgot instrumentation added instrumentation view classes eg containerview cc wycats repeating render prefix seems like mistake nice see fixed also collection view subclasses get", "num": "2552", "d": "4/2013"}, {"title": "feature request allow access metadata routes storing url params options hash", "body": "discussion regarding implement dynamic search states would nice params part url discarded stored hash accessible routes andor routers also useful passing access token etc token login possible current design seen mention access url params", "num": "2549", "d": "4/2013"}, {"title": "ember js work jquery although claims supported", "body": "tried ember", "num": "2547", "d": "4/2013"}, {"title": "longer redirect failureroute", "body": "see fiddle used work broken using handle errors ajax requests api redirecting login since updating longer works", "num": "2546", "d": "4/2013"}, {"title": "binding properties view created via render work", "body": "using render helper like properly connect binding hood render helper uses view helper supports adding bindings shown nonbinding properties work fine binding properties results property view jsbin example exhibiting bug root issue appears render helper instantiates passes view instance view helper instead view class view helper support creating bindings already instantiated object", "num": "2545", "d": "4/2013"}, {"title": "mutating array causes super property added array throwing wrench chaijs", "body": "discovered trying use chaijs assertions test suite discernible reason array deep equal comparisons failing eventually traced chai deep equality comparison function case choking arrays get mutated ember methods extra property mismatch number enumerated properties one failure criteria thus equal seems get added consequence superwrapper behaviour around overridden functions thus strongly suspect mitigating difficulttoimpossible hopefully someone insight approach incompatability update investigate probably workaround", "num": "2543", "d": "4/2013"}, {"title": "get always return undefined properties exist", "body": "consider following codes obtaining property actually exist ember return false value instead undefined example issue reproduced jsfiddle latest ember please refer following url", "num": "2540", "d": "4/2013"}, {"title": "missing api docs unkownproperty observable", "body": "", "num": "2538", "d": "4/2013"}, {"title": "using emblemjs", "body": "replaced handlebars emblem application keep getting error handlebars present example integrate ember emblem", "num": "2536", "d": "4/2013"}, {"title": "target changed action using helper", "body": "trying place simple button template connected specified controller via helper fiddle nt work event specify looks like bug context target changed function let know description clear", "num": "2535", "d": "4/2013"}, {"title": "regression rendering views", "body": "application complicated put pastebinjsfiddle help wizard component longer works functional firstly fails trying access noticed called render method prerender phase could nt previously remove code get exception occurs actually show component add empty model content appears looking metamodelstart end tags nt seem exist guessing recent performance improvements caused uncaught error notfounderror dom exception rangefor removefunc dommanagerremove embermergedestroyelement emberviewembercoreviewextenddestroyelement superwrapper embercoreviewemberobjectextenddestroy superwrapper emberviewembercoreviewextenddestroy superwrapper emberviewembercoreviewextendclearrenderedchildren superwrapper embermergererender emberviewembercoreviewextendrerender emberviewembercoreviewextendcontextdidchange sendevent observersetflush emberendpropertychanges embertryfinally runloopflush runloopend tryable embertryfinally emberrunend autorun", "num": "2527", "d": "4/2013"}, {"title": "contributingmd updated jsfiddle links", "body": "", "num": "2526", "d": "4/2013"}, {"title": "memory leak extendprototypes false", "body": "app using lot memory setup run extendprototypes set false set true test suddenly memory use went drastically case sure app ember forked todomvc run extendprototypes set false conclusion simply create dozen tasks reload get extendprototypes true extendprototypes false much soon start things gets worse case went idea look ember todomvc fork nb need toggle extendprototypes directly emberjs line", "num": "2525", "d": "4/2013"}, {"title": "document handlebars helper", "body": "helper added nt documented nt show api docs discussion discussembercom documented seems like lowhanging fruit sure format documentation make show api docs take whack tomorrow would appreciate knowledgeable person input", "num": "2513", "d": "4/2013"}, {"title": "emberaliasmethod aliased methods work subclasses well", "body": "hi think aliased method work subclasses well currently created show issue sorry pr issue issue reporter thanks", "num": "2495", "d": "4/2013"}, {"title": "computed property without key value arguments called", "body": "sure reproducible someone shed light documented somewhere definitely helps someone day problem computed property without parameters called strange check demo", "num": "2489", "d": "4/2013"}, {"title": "behavior model promise loading record documented", "body": "promise behavior emberroute model nt seem documented", "num": "2486", "d": "4/2013"}, {"title": "introduces nested runloop", "body": "introduce nested runloop nt good idea nt make reset situation worse usable planning properly solving next day chance", "num": "2484", "d": "4/2013"}, {"title": "binding parent view working", "body": "hi upgraded ember version project piece code seems work anymore view emberview contentbinding appcreditscontroller view embertextfield class valuebinding contentsellercode view way accomplish new version", "num": "2480", "d": "4/2013"}, {"title": "add collection docs api", "body": "collection helper docs nt available", "num": "2479", "d": "4/2013"}, {"title": "textfield textarea collectionview loses value binding focus", "body": "textfield texarea collectionview value binding breaks textfield textarea gets focus always retains last value", "num": "2478", "d": "4/2013"}, {"title": "attempted register view id already use", "body": "per question application route rendered throws mentioned error workaround suggested question would lead quite bit duplication", "num": "2477", "d": "4/2013"}, {"title": "error creating handlebars bound helper calls view says outside rendering process", "body": "error view javascript var bootstrap windowbootstrap bootstraplabel emberviewextend bootstraptypesupport tagname span classnames label baseclassname label template emberhandlebarscompile viewcontent bound helper wrap call view looking inside registerboundhelper emberhandlebarsregisterboundhelper function name fn var bindview new embersimplehandlebarsview path pathroot optionshashunescaped optionsdata see issue raised old fix seems following added following line looks like method wraps original helper method creates anonymous view problem observer puts anonymous view render mode without putting original view first would nice similar fix new code", "num": "2474", "d": "4/2013"}, {"title": "routes heirarchy followed routes dynamic segment page reload", "body": "hi issue nested show route supposed accept dynamic segment application transitioning route works expected page reload model function run see output since issue page reload unsure create fiddle code snippets coffeescript emeeroutermap gt resource event path events gt resource eventdetails path eventid gt route index path details route show path detailid emeeeventdetailsroute emrouteextend rendertemplate gt render consolelog event details renderer emeeeventdetailsindexroute emrouteextend rendertemplete gt render consolelog index renderer emeeeventdetailsshowroute emrouteextend model params gt consolelog params detail emeedetailsfind params detailid consolelog detail consolelog runs reload errors console request sent server return detail linkto helpers correct routes cause correct transitions transition show route reload page model method runs returns value action takes place happen reload index method add new route ex new reload page far understand show index methods supposed render whole view hierarchy also removing model method eventdetailsshowroute using default also work may something wrong misunderstanding something insights greatly appreciated", "num": "2470", "d": "4/2013"}, {"title": "ignoring routes", "body": "bootstrap uses lot hashtag urls things like accordian etc way able use bootstrap box wout html ember like perhaps telling ember ignore routes specific element perhaps", "num": "2463", "d": "4/2013"}, {"title": "nonstring linkto arg interpreted lookup", "body": "presently unsupported interpreted string name destination route rather looking property current context menuitem object use case common customized menu items list previously visited pages etc perhaps first argument interpreted property lookup unless string thoughts", "num": "2462", "d": "4/2013"}, {"title": "embercontainerdefaultcontainer causing headaches spec writing", "body": "found need set null delete order get specs independent case necessary contains compiled templates want use new templates name separate specs cache ember never goes back embertemplates object get new version get specs independent need thorough destroy first assigning null getting defaultcontainer rebuilt important part happens one sets defaultcontainer null general seems problematic container cache would kept permanently somewhere ember namespace even application destroyed rational keeping defaultcontainer ember namespace", "num": "2460", "d": "4/2013"}, {"title": "wrong open issue wiped content", "body": "please delete issue wrong open issue way delete wiped content waste body time sorry", "num": "2457", "d": "4/2013"}, {"title": "initial route called twice rooturl", "body": "rooturl set router initial route called twice setup route modified value causing onupdateurl fire early solution wrap line emrunnext setup observer setup complete seems slightly hacky", "num": "2451", "d": "4/2013"}, {"title": "construct data attribute object", "body": "template construct data attribute like datakey url url key key broken metaphore script tag way construct attribute template", "num": "2446", "d": "4/2013"}, {"title": "simplify arrayhelper methods removing native forks using simplified alternatives", "body": "simplify arrayhelper methods removing native forks using simplified alternatives would allow avoid check simplify iteration removing checks customize beyond defined ecmascript spec related", "num": "2443", "d": "4/2013"}, {"title": "follow spec", "body": "missing checks meaning incorrectly detect instead", "num": "2442", "d": "4/2013"}, {"title": "testing views linkto requires access appcontainer", "body": "working testing tutorial ember weakest link moment testing views require fair bit setup ca nt find good way test views using without directly accessing html lt gt name lt gt lt p class managedby gt managed linkto employee managedby managedbyname linkto lt p gt javascript module appemployeeview setup function emberrun function var model appemployeefind thiscontroller appemployeecontrollercreate need container test views linkto container appcontainer content model thisview appemployeeviewcreate controller thiscontroller context thiscontroller thisviewappend hook document test shows employee name function equal thisview text jane q public ok thisview manages li text match john find working jsfiddle thread going completely backward use another strategy testing views", "num": "2441", "d": "4/2013"}, {"title": "declaring observers emberobjectcreate longer works", "body": "remember seeing something longer possible declare computed properties create apparently true observers code demonstrates design perhaps worth mentioning guides also curious rational nt luck googling discussions working observer using extend one nt work using create", "num": "2440", "d": "4/2013"}, {"title": "flexible config internal class overridesextensions", "body": "want slightly modify ember internal magic seems like serious monkey patching ember classes would nice central location kind class config repo could reconfigure default classes ember uses point custom extension classes instead say fx create custom arraycontroller extension class wraps context array rubyjs using nice call would awesome could reconfigure ember use new class default whenever magic internally ember might instead find arraycontroller use sth like", "num": "2434", "d": "4/2013"}, {"title": "arraycontroller nonarray model throws error even setupcontroller", "body": "nt work javascript appindexroute emberrouteextend model function return setupcontroller function controller model controllerset content appindexcontroller emberarraycontrollerextend model get pass setupcontroller model ca nt anything related", "num": "2432", "d": "4/2013"}, {"title": "arraycontentdidchange docs arrayproxy", "body": "", "num": "2431", "d": "4/2013"}, {"title": "location history uncaught syntaxerror", "body": "hi navigate ember application well click link go new route everything loads fine try navigate manually via url refresh leave trailing slash anything root route get errors examples urls break without slash works instead used ember app navigate page would load say refreshed page defining routes", "num": "2430", "d": "4/2013"}, {"title": "render templates application ie amp", "body": "ie quirks mode amp ie render anything application template ie standards mode error message object support property method replacestate", "num": "2429", "d": "4/2013"}, {"title": "missing updates observers", "body": "question matter basically several different observers objectvalue fire updates nt seems like bug wanted get guys thoughts since replies question thanks", "num": "2426", "d": "4/2013"}, {"title": "parentviewdidchange nt get triggered", "body": "drag drop view one containerview inside another parentviewdidchangefunction nt get triggered dragged view however log parentview drag changed made soquestion jsfiddle explanation", "num": "2423", "d": "4/2013"}, {"title": "problem opera unhandled error unexpectedmutationerr", "body": "hi problem opera browsers ff chrome ie safari works fine extend visual studio template changing page menu change hash value url content website displayed error occures unhandled error unexpectedmutationerr call stack isetstartafter r isetendafter r u icreatecontextualfragment iinsertnode u prepend ensurechildrenareindom ensurechildrenareindom anonymous emberhandleerrors e anonymous emberhandleerrors e flush end anonymous emberrunend anonymous emberrun onupdateurl help us thanks", "num": "2421", "d": "4/2013"}, {"title": "arraycontroller length property updated arraycontroller pushobject", "body": "far documentation concerned get impression manipulating arraycontroller instance feel like manipulating array like length property longer updated properly example case foo emberarraycontrollercreate foopushobject bar fooget content bar fooget contentlength fooget length ps way get link latest emberjs file packages built inside use jsfiddle since emberrails changed rely embersource trivial task", "num": "2416", "d": "4/2013"}, {"title": "android default browsers calling setupcontroller multiple times", "body": "hi android default browser setupcontroller called multiple times url dynamic example may dynamic url url structure aabb thanks salehin", "num": "2413", "d": "4/2013"}, {"title": "render one outlet per route", "body": "guides seem suggest route supports multiple render calls per route see last example actually works however teardown happens last outlet rendered reason line emberroutinglibsystemroutejs refactored app header footer outlets however disappointed find nt work think proper solution might make array submit pull request sounds like best approach edit update link shifted new commits", "num": "2412", "d": "4/2013"}, {"title": "error assertion failed application store", "body": "hello appjs file like try uncaught error assertion failed application store property defined attempts call find model classes fail please provide one yourappnamestore dsstoreextend fixtureadapter works fine try use restadapter thanks help", "num": "2410", "d": "4/2013"}, {"title": "mention emberbeforeobserver function observesbefore guides", "body": "although working emberjs year never found pitty nice way prevent ugly workarounds detect difference value change since native english speaker experience contributing emberjs guides someone willing write lines topic", "num": "2408", "d": "4/2013"}, {"title": "browsers support historypushstate historyreplacestate methods", "body": "working ember application using trying provide cross browser compatibility issue url generate every transition seems incorrectfalsy user let say hit url like initially land sell page application tries transit new state called purchase land purchase page application new state transition generates url addressbar instead generated url includes two incorrect things initial prefix sellnew parameter amp query string url tried figure issue seems supports historypushstate historyreplacestate methods history api", "num": "2404", "d": "4/2013"}, {"title": "statemanger transition another state enter method", "body": "statemanger initialstate enter method wan transition another state method statemanager instance left screwed next time send signal target state get nt think state null fsm implementation catually illegal state ember", "num": "2400", "d": "4/2013"}, {"title": "linkto nt recalculate", "body": "bar id null linkto foo bar oh linkto time future barid becames linkto still points foonull", "num": "2399", "d": "4/2013"}, {"title": "safestrings using ember bindattr", "body": "nt much response question hoping guys could take look seems like shortcoming really bug", "num": "2398", "d": "4/2013"}, {"title": "routerjs change default routing", "body": "looking place code pullrequest aim forward default route url nt match route problem exist two router classes first one directory vendor second one directory system class directory vendor seem best place jslint checking", "num": "2396", "d": "4/2013"}, {"title": "possible enforce dependency state manager", "body": "hi possible enforce state dependency state manager example path state gt sate b gt state c go state b users go state c users go b user write url stateb restrict user going stateb redirect statea possible current state manager plan thanks salehin", "num": "2395", "d": "4/2013"}, {"title": "route shared rendertemplate render", "body": "two routes share template route call rendertemplate update route without rendertemplate rendered see jsbin name change route specifies model index rendered example use case users resource account route users show", "num": "2392", "d": "4/2013"}, {"title": "passing mixin plain old create raise exception", "body": "ember assertion raise exception something like attempted obviously use createwithmixin want check understanding correct creating pr", "num": "2390", "d": "4/2013"}, {"title": "better error messages include referrers", "body": "reporting error missing route reference assertion happening eg could easily misunderstood appalbumroute found separately implemented would great could attach assertion coming ie", "num": "2389", "d": "4/2013"}, {"title": "resetsubcontainers missing statment", "body": "found emberjspackagesemberruntimelibcontrollersarraycontrollerjs resetsubcontrollers statement test null running foreach statement missing without statement foreach throw typererror passed null array", "num": "2388", "d": "4/2013"}, {"title": "emberselect performance issue", "body": "nt numbers back could get necessary building app countries form takes second render quite noticeable considering fast rest app suspect performance problem coming tag setup binding necessary setup bindings individual tag large lists like countries unusual", "num": "2386", "d": "4/2013"}, {"title": "better error message misnamed controllers", "body": "lost good chunk time following handlebars js error message appeared said something like looked casesensitive mycontrollerforviewname could nt find would helped", "num": "2385", "d": "4/2013"}, {"body": "looked inside view tests defining container creating view preferred scenario right", "d": "4/2013"}, {"body": "myslik situations using setups childview correctly see details said giving helpful deprecation warnings rather rather opaque error", "d": "4/2013"}, {"body": "myslik help", "d": "4/2013"}, {"body": "use make render html see said agree feels inconsistent", "d": "4/2013"}, {"body": "like said workmanw behaviour inconsistent considered like bug", "d": "4/2013"}, {"body": "update think actually might fixed going try update tried yielded error", "d": "4/2013"}, {"body": "ryrych container currently private api", "d": "4/2013"}, {"body": "dear wagenet started read ember tests order learn better article set enviroment load run tests", "d": "4/2013"}, {"body": "ryrych basically need good container guide", "d": "4/2013"}, {"body": "whoa pretty bad fix shortly side note generally set links like ember use instead", "d": "4/2013"}, {"body": "ah see happens way manual linking urls generated however without leading slash error nt encountered still bug fix", "d": "4/2013"}, {"body": "awesome love ember far quick fixes", "d": "4/2013"}, {"body": "anything marked leading underscore intended private likely documented publicly said might worth documenting", "d": "4/2013"}, {"body": "closed", "d": "4/2013"}, {"body": "could flesh access token use case would appending access token url ember expected read redirecting somewhere say oauth redirect seems like would nt want get params sticking around router updates url even stick around guess assumes routes kind thing could get away reading information app startup storing proper controller sorry thinking loud like better idea use cases", "d": "4/2013"}, {"body": "sample use case program yes likely server redirect wanting pass meta data app using params user chooses log via oauth browsing around site could imagine many similar use cases fx passing kinds tokens often kinds keys nt always occur app startup often link email similar even pass referral info etc actual use case dynamic search want store search state navigate back please check post discourse better understand thanks", "d": "4/2013"}, {"body": "work helpful find problem ember app use jquery production weeks assure work", "d": "4/2013"}, {"body": "ok try reproduce update wed apr pm paul chavard notifications githubcom wrote work helpful find problem ember app use jquery production weeks assure work reply email directly view github", "d": "4/2013"}, {"body": "meant work unsupported version jquery console log realize original phrasing nt helpful neither sarcastic tone wed apr pm rotem yaari vmalloc gmailcom wrote ok try reproduce update wed apr pm paul chavard notifications githubcom wrote work helpful find problem ember app use jquery production weeks assure work reply email directly view github", "d": "4/2013"}, {"body": "vmalloc sorry sarcastic suppose imagine many work issues even lot good much", "d": "4/2013"}, {"body": "understood wed apr pm paul chavard notifications githubcom wrote vmalloc sorry sarcastic suppose imagine many work issues even lot good much reply email directly view github", "d": "4/2013"}, {"body": "vmalloc know resolve issue nt know really compatible jquery fact starter kit consistent released jqurey though master since commit assertion updated jquery edit erf bad include assertion assertion wrong", "d": "4/2013"}, {"body": "ok failed reproduce possible happened commit prior one mentioned happens pinpoint conditions caused thanks", "d": "4/2013"}, {"body": "rlivsey could fixed issue", "d": "4/2013"}, {"body": "nt appear looked last night try find time today investigate least whip failing test case sent iphone apr pepe cano notifications githubcom wrote rlivsey could fixed issue reply email directly view github", "d": "4/2013"}, {"body": "sure something intend support would good get definitive answer", "d": "4/2013"}, {"body": "fair enough supported binding property probably left alone transformed contextroot prepended however binding level quite useful working reusable components captured comment also pr tangentially related", "d": "4/2013"}, {"body": "fwiw solving calling slice arrays might mutated applying assertions closing nt think fix ember solve", "d": "4/2013"}, {"body": "nice catch", "d": "4/2013"}, {"body": "closing favor", "d": "4/2013"}, {"body": "reopen better info integration", "d": "4/2013"}, {"body": "correct helper changes context target always sure whether need better documentation something actually addressed meantime always use", "d": "4/2013"}, {"body": "stefanpenner behaviour really misleading guys sure nt improved", "d": "4/2013"}, {"body": "morgoth understand could confusing case context implied controller context something else model example maybe action helper could determine context variable action helper controller target specified target would become current context sure stefanpenner bradleypriest thoughts", "d": "4/2013"}, {"body": "isolate dummy jsbinfiddle failing test case lot without able see fail us", "d": "4/2013"}, {"body": "info give us issue maybe error message cause case fixed", "d": "4/2013"}, {"body": "bit hard take action without concrete example please reopen able isolate code example us", "d": "4/2013"}, {"body": "least info stack trace tells us state nothing got", "d": "4/2013"}, {"body": "constantly change doc point current release point emberlatest", "d": "4/2013"}, {"body": "right points fiddles emberlatest current release", "d": "4/2013"}, {"body": "also using files", "d": "4/2013"}, {"body": "actually leaking memory using memory disable array mixin arrayprototype apply mixin every array needs observability", "d": "4/2013"}, {"body": "kselden make sure understand comment saying way works array mixin activated arrayprototype manually added every single array needs observability ie corresponding set functions replicated potentially many times think might explain least part real challenge know people problem give context app deals significant amount data mostly arrays manipulated quite bit unions intersections etc data sets independent ui nt need mixin stuff initially extendprototypes set true app slow setting false made times faster mixins really slow things context problem memory consumption real concern might different topic way handle sort situation ember", "d": "4/2013"}, {"body": "relevant code", "d": "4/2013"}, {"body": "thank pretty big mixin actually realize nt know ebryn want seems might make sense mention tradeoff guides big deal think case memory delta means app run properly many mobile browsers", "d": "4/2013"}, {"body": "curious performance issues extendprototypes true", "d": "4/2013"}, {"body": "kselden investigate", "d": "4/2013"}, {"body": "stefanpenner us issue arrays example function basic stuff data pseudo code javascript largearrayofobjects function idx elem isincluded elem anotherarrayofobjects yetanotherarrayofobjects anotherarraypush elem isincluded basic comparisons also calls extend true data potentially many times code faster know might look strange consistently see tested multiple times extendprototypes false please let know help addition tips avoid kind performance issues use prototype extensions would really helpful", "d": "4/2013"}, {"body": "stefanpenner looks like key bottleneck deep clone array jquery much much slower array prototype extended replaced one manual implementation code difference terms speed", "d": "4/2013"}, {"body": "issue deep cloning likely copying properties using ember internals", "d": "4/2013"}, {"body": "closing since title misleading extendprototypes uses memory nt leak memory could possibly take standalone approach like getset replace arr fires array change events without mixin would suggestion bug", "d": "4/2013"}, {"body": "run docs section readme covers minimally", "d": "4/2013"}, {"body": "fixed", "d": "4/2013"}, {"body": "karlguillotte could see justification working either way right literally alias exact method pointing though see expecting different behavior probably something merits discussion", "d": "4/2013"}, {"body": "think computed property without parameter acts get property whereas specifying two parameters mean set value property first one called cached second one called time ebryn confirm please", "d": "4/2013"}, {"body": "properly documented spent hours googling finding nt call function habit without actually put curious detect arguments", "d": "4/2013"}, {"body": "ok bad previous explanation wrong looks like since commit see people confused computed property without argument simply replaced value set define binding checkbox property since function parameters property replaced value checkbox computed property dead", "d": "4/2013"}, {"body": "chaoszcat really sure expecting happen cp nt take arguments nt settable nt called called seems unexpected", "d": "4/2013"}, {"body": "hi expecting magic happens expecting documentation least mention properly computed property magically converted static property two parameters given mindset one key passed getter two keys passed setter yes consolelog arguments always get first getter get called nothing else expect two parameters passed javascript coding experience taught us nt need put parameters check parameters need arguments post appreciate save memory yea least doc behavior", "d": "4/2013"}, {"body": "agree overwriting nt setter ie args behaviour potentially confusing less option bumps behaviour mere introspection bona fide api gt never overwrittenset func accepts value gt always called set func nt accept value nt gt overwritten", "d": "4/2013"}, {"body": "also extremely inconsistent kicks urlbased transitions developer forced build controllersroutestemplates handle approaches slow urlbased transition halts promise context well based approach nt pause immediately assigns promise contexts controls trying get fixed long time would much appreciate thoughts proposal", "d": "4/2013"}, {"body": "wanted give quick real life problem example machty proposal talks quite technical details proposal really simple example people hit even going guides let say building simplest possible version todos app want display list todos route guides tell us enter browser page wait todos rendering go immediately render empty collection used", "d": "4/2013"}, {"body": "yea need use keyword specify scope also would probably better stack overflow question", "d": "4/2013"}, {"body": "thanks sorry right asked stackoverflow", "d": "4/2013"}, {"body": "closed favor emberjswebsite", "d": "4/2013"}, {"body": "could nt duplicate code provided able following javascript var app emberapplicationcreate approutermap function thisroute new appnewview emberviewextend elementid foo template emberhandlebarscompile yeah click function thisget controller transitiontoroute new error message appeared using clicking nt appear master try see fixed", "d": "4/2013"}, {"body": "thanks panoptic way get emberjs file building using ruby stuff develop windows net rumour getting ruby workiing pain rather avoid possible", "d": "4/2013"}, {"body": "ebenrouxmc get latest build", "d": "4/2013"}, {"body": "ok got around looking appears sorted latest version", "d": "4/2013"}, {"body": "looks like emberdata bug might related emberjsdata retry latest ember data build check still issue get", "d": "4/2013"}, {"body": "yeah looks like right teddyzeenny including latest build ember data resolves issue wasted lot time behind thank much helping close issue", "d": "4/2013"}, {"body": "benmonro would mind opening stack overflow instead", "d": "4/2013"}, {"body": "defaultcontainer gone work done improve deletion landed reconfirm issues", "d": "4/2013"}, {"body": "since gone issue seems resolved kbullaughey still testing issues please file new ticket thanks", "d": "4/2013"}, {"body": "seems fine thanks", "d": "4/2013"}, {"body": "bug chrome causes called page load fixed using latest emberjs build", "d": "4/2013"}, {"body": "talked cloke said still issue master", "d": "4/2013"}, {"body": "cloke issue related chrome issue fact webkit problem problem safari triggered page load matter even triggered navigation transitions triggered browser back forward button clicked issue called nt wrapping fixes symptom underlying problem thanks reporting issue uncovered several problems implementation fixed pr feel free pull confirm working", "d": "4/2013"}, {"body": "looks like merge fixed issue", "d": "4/2013"}, {"body": "generally use bindattr helper cases like questions stackoverflow good place ask", "d": "4/2013"}, {"body": "nt think bindattr help case anyway thanks feedback", "d": "4/2013"}, {"body": "would probably define computed property view controller use bindattr sent mailbox iphone thu apr tran ngoc sam notifications githubcom wrote nt think bindattr help case anyway thanks feedback reply email directly view github", "d": "4/2013"}, {"body": "thanks lukemelia good idea", "d": "4/2013"}, {"body": "jdalton would want remove native forks many cases native methods going much efficient", "d": "4/2013"}, {"body": "like submit pr ideas gladly review nt think something core team likely take action without direction", "d": "4/2013"}, {"body": "stefanpenner interested discussing", "d": "4/2013"}, {"body": "discussing kselden main concern tickets like provide context changes made", "d": "4/2013"}, {"body": "wagenet jdalton chatting likely transposed conversation pr try evening", "d": "4/2013"}, {"body": "thought using simplified methods internals likely worth especially since kselden informed jit actually faster using native version remove polyfills since many applications likely relying ie things like expecting work ie", "d": "4/2013"}, {"body": "whoops", "d": "4/2013"}, {"body": "internally use simplified versions make pollyfills spec compliant optional wycats suggested using lodash versions ago nt look yet", "d": "4/2013"}, {"body": "wagenet short screencast explain lodash approach native method use covers using simplified methods instead native cases", "d": "4/2013"}, {"body": "seems like great question forums try keep github bugs specific feature additions thanks", "d": "4/2013"}, {"body": "performance see seems like really need cover better guidesdocs warningsassertions", "d": "4/2013"}, {"body": "kristianmandrup create object ember use instead default generating would help situation see", "d": "4/2013"}, {"body": "yeah would work customizing controller behavior routes views similar hooks thanks", "d": "4/2013"}, {"body": "nt think think current practice reopen override base classes although means lose access original objects although semantics recently added might interest said personally qualms reopening core classes using understand people hesitate", "d": "4/2013"}, {"body": "thanks think alternative sometimes better way would introduce filter method classes could look sth like methods could simply look method fx call else return would cover lot cases including fx logging state fx log incoming context setup think make pull request functionality someone nt beat p", "d": "4/2013"}, {"body": "made pull request filters however problems writing tests even debugging wrong test code", "d": "4/2013"}, {"body": "problem appears model function returns object expects receive array content hash calling ember automatically set content controller associated model see source code consequently even resetting controller content hook already thrown error actually easy way prevent behaviour pending pr makes easier", "d": "4/2013"}, {"body": "lcoq thanks reply trying use ember without emberdata beginning think difficult thing", "d": "4/2013"}, {"body": "quangv certainly use ember without emberdata model array controller needs array object specific questions structure specific app please ask stack overflow", "d": "4/2013"}, {"body": "nt really public method would nt expect documented", "d": "4/2013"}, {"body": "uhm arraycontentwillchange docs", "d": "4/2013"}, {"body": "also way arrayproxys work kinda somewhat public api similar objectatcontent", "d": "4/2013"}, {"body": "ok fair enough", "d": "4/2013"}, {"body": "problem way nginx set index page requesting resources relatively index file requests made relative uri prefixing paths slashes fixed issue", "d": "4/2013"}, {"body": "ie lt support history pushstate need use delete line fiddle javascript approuterreopen location history", "d": "4/2013"}, {"body": "still difference worked removed appstore dsstoreextend revision adapter dsfixtureadapter error got expected identifier string number emberdatajs line character ds undefined working alternative", "d": "4/2013"}, {"body": "ah looks like ie nt like commas last elements arrays emberdatajs", "d": "4/2013"}, {"body": "bugsinamber nt already submit pr fix emberdata nt seem like ember bug", "d": "4/2013"}, {"body": "think bug mixed things bindings observers ca nt bind need bind array observe problem add observer value set fire value already set ie change example returns object immediately returns array immediately later filled data point run children already set contents going changes length observer fires properly fiddle changes added observerpath set person view inserted", "d": "4/2013"}, {"body": "edit sorry responded wrong issue", "d": "4/2013"}, {"body": "pr submitted workaround explicitly set property", "d": "4/2013"}, {"body": "thanks fast response thoughts getting built ember file", "d": "4/2013"}, {"body": "nt know mean want latest emberjs build following git clone git githubcom emberjsemberjsgit cd emberjs bundle rake dist cd dist cp emberjs yourdestination want last released version currently handlebars emberjs", "d": "4/2013"}, {"body": "second one thanks", "d": "4/2013"}, {"body": "fix merged", "d": "4/2013"}, {"body": "android browser strikes", "d": "4/2013"}, {"body": "tomdale bug seeing app maybe related", "d": "4/2013"}, {"body": "trying define appstore rest adapter reopen adapter define url like guide shows also define store like", "d": "4/2013"}, {"body": "hi appjs try access emberjs app options found xmlhttprequest load origin allowed accesscontrolalloworigin something else wrong thanks", "d": "4/2013"}, {"body": "course problem run client server differents servers put running single server works fine", "d": "4/2013"}, {"body": "hi edipofederle setup work tell browser disable security otherwise wo nt let cross domain requests using chrome try starting chrome parameter disablewebsecurity able access different port", "d": "4/2013"}, {"body": "hi intuitivepixel know parameter another way", "d": "4/2013"}, {"body": "edipofederle different way could think use jsonp work write adapter etc intercept requests server must support jsonp", "d": "4/2013"}, {"body": "intuitivepixel right two options run client server server use parameter disablewebsecurity right", "d": "4/2013"}, {"body": "edipofederle also use cors", "d": "4/2013"}, {"body": "try testing see browser capable using history api example hopefully use hashtags opposed history api problems solved", "d": "4/2013"}, {"body": "already using location property history router seems working behaving like location hash functionality", "d": "4/2013"}, {"body": "khajannavyug quite correct lt browsers support history api older browsers must use hash none locations need support older browsers app choices either stick hash location across whole app follow jimmyboh suggestion degrade older browsers hash whilst using history browsers support", "d": "4/2013"}, {"body": "bradleypriest correct", "d": "4/2013"}, {"body": "implement redirect method route transition instead", "d": "4/2013"}, {"body": "advice also true talking router usecase state manger used controller", "d": "4/2013"}, {"body": "usually put within reason issue enter called part transition process delaying next run loop allows state manager finishing transitioning starting next transition", "d": "4/2013"}, {"body": "lukemelia yes emrunnext trick also comprehend explanation thanks", "d": "4/2013"}, {"body": "dup", "d": "4/2013"}, {"body": "nt think support case could certainly useful add", "d": "4/2013"}, {"body": "made progress implementing support handlebarssafestring bindattr test included bit stuck though test view initialized safestring object property unescaped value returned example becomes fetched via attr however using set update property another html entity attr returns instead u idea happening help would greatly appreciated", "d": "4/2013"}, {"body": "routerjs vendor small framework agnostic lib built upon use ember library found want make generic routing change send pr want something ember specific systemrouterjs likely", "d": "4/2013"}, {"body": "try keep github addressing bugs specific feature proposals probably good ask sorts questions stackoverflow initially turns feature nt available write proposal put forums discussemberjscom thanks", "d": "4/2013"}, {"body": "issue found possible area documentation updated apparently specifying template change controller one exists name personally think always use routes controller unless alternate specified instead inferring one based template leaving open either guide updated behavior changed vote later", "d": "4/2013"}, {"body": "agree would helpful development assertion assertion likely placed", "d": "4/2013"}, {"body": "created pr", "d": "4/2013"}, {"body": "pr merged", "d": "4/2013"}, {"body": "problem uncaught typeerror read property foreach null foreach coming resetsubcontrollers please advise thank", "d": "4/2013"}, {"body": "needs resetsubcontrollers function var subcontrollers get subcontrollers subcontrollers foreach subcontrollers function subcontroller subcontroller subcontrollerdestroy", "d": "4/2013"}, {"body": "fwiw options rendered select", "d": "4/2013"}, {"body": "nt give numbers known issue", "d": "4/2013"}, {"body": "kselden ok already open issue apologize searched could nt find one", "d": "4/2013"}, {"body": "known nt know issue created", "d": "4/2013"}, {"body": "usually large selects especially nt need bindings generally people use custom view currently several gists", "d": "4/2013"}, {"body": "kselden sure guys talked internally solutions allow view take option force options bind render form select options queue options render next runloop sure allows", "d": "4/2013"}, {"body": "created jsbin capturing open console run takes ghz macbook pro", "d": "4/2013"}, {"body": "built latest well get error removing last remaining element list", "d": "4/2013"}, {"body": "mdi postgist anonymous function ebryn highlighted", "d": "4/2013"}, {"body": "stack trace seems changed anonymous function nt seem called", "d": "4/2013"}, {"body": "mdi looking meantime suggest using rather master emberdata", "d": "4/2013"}, {"body": "building latest get error well yet happens add object list objects held infused object added instance chrome stack trace seems indicate bug purely caused emberjs chrome stack trace firefox bug report always firefox bug reports look bit different according firebug error caused call line inside implementation", "d": "4/2013"}, {"body": "experiencing issue traced introduced", "d": "4/2013"}, {"body": "would awesome failing test demonstrating issue andor jsfiddle jsbin demo", "d": "4/2013"}, {"body": "kselden thanks looking created simplest example could clicking link get notfounderror dom exception error", "d": "4/2013"}, {"body": "sebastianseilund thanks noticing issue emberchat taking look", "d": "4/2013"}, {"body": "ebryn ran issue using ember master build yesterday using emberdata issue present project issue triggered templates nested helpers nested helpers build table outer builds rows inner builds columns let know small test case would helpful diagnosing issue", "d": "4/2013"}, {"body": "problem using nested helpers emberdata", "d": "4/2013"}, {"body": "hey guys good chance issue solved build latest master give try still getting similar error testing though try write failing test find time", "d": "4/2013"}, {"body": "test suite telling issue resolved", "d": "4/2013"}, {"body": "issue resolved closing", "d": "4/2013"}, {"body": "still get error even latest master seems bindings triggering view rerender befrore view even rendered debugger stops draw method page load even call function actually clicked expected", "d": "4/2013"}, {"body": "think also applies using itemcontroller basically every time needed controller singleton would happy try find fix first glance seems might mean changing container setup render called non singleton controller container works bit tricky grasp directions advanced ember developers", "d": "4/2013"}, {"body": "verified working", "d": "4/2013"}, {"body": "thanks look one soon get access machine safari", "d": "4/2013"}, {"body": "thank seems version safari", "d": "4/2013"}, {"body": "confirmed safari using browserstack", "d": "4/2013"}, {"body": "hi guys sorry earlier commit kind new github nt realize would show nt mean pollute thread anyways issue supported safari current implementation relies check current path making reason url updating safari fixed removing references get current path used instead went ahead removed method well since ca nt relied upon store data updated also reflect changes tests passing correctly including course modified sure make additional tests fix really appreciate advice build test browserspecific issue commit changes push fork hope nt mess submit pull request thanks", "d": "4/2013"}, {"body": "seeing fiddle think bug read guess render template template outlet template outlet replacing makes code working perhaps could warning outlet found expected template", "d": "4/2013"}, {"body": "see option specify route name tempate name wrong also working head", "d": "4/2013"}, {"body": "closing since persuasion taking place", "d": "4/2013"}, {"body": "never tried guess get working something like js app emberapplicationcreate rootelement widget approuterreopen location none would able use router state management super powers without messing url however multiple emberjs applications page", "d": "4/2013"}, {"body": "ohcibi still ordering issue input view responds keyup transition uses keydown k pressed transition happens input triggers key released keyup triggered updates input consider using keyup transition autofocusing input", "d": "4/2013"}, {"body": "andrewfan could verify still bug ember could also whip jsbin repeatable great well", "d": "4/2013"}, {"body": "andrewfan code using whereas needs refers app typo anyway could bug maybe also related", "d": "4/2013"}, {"body": "sorry typo fivetanley created jsfiddle issue created outputted times outputs times creating new instance objcontroller link", "d": "4/2013"}, {"body": "intentionally supported performance problem invalidate view rendered rendering graph views", "d": "4/2013"}, {"body": "could use back existed change page title inpage header javascript applicationview emberviewextend titlebinding routercurrentstatetitle routerbinding controllertarget titledidchange function documenttitle documenttitletemplate title thisget title observes title", "d": "4/2013"}, {"body": "letting dev decide naming scheme partials remove deprecation warning using nonunderscore partial names", "d": "4/2013"}, {"body": "agree proposal edit realize responding proposal guess makes sense seemed like good idea thu apr falk pauser notifications githubcom wrote letting dev decide naming scheme partials remove deprecation warning reply email directly view github", "d": "4/2013"}, {"body": "guys getting error", "d": "4/2013"}, {"body": "found another option konacha seems like running functional tests ember javascript", "d": "4/2013"}, {"body": "ember first commit testing helper karma ex testacular extracted helper angular ngscenario separated repo", "d": "4/2013"}, {"body": "kogi first cleaned fiddle little dealing anything async like timeout sure wrap code nt issue trying use create array ids presume nt supported path used create observable path computed property observer used map values instead correct call mapping attribute array objects array would fwiw also nt believe syntax good anything nt know would seen", "d": "4/2013"}, {"body": "doced", "d": "4/2013"}, {"body": "think rafshar pr cover", "d": "4/2013"}, {"body": "johnmcdowall sure mean magic internal ids using routerjs function checks two objects equal think behave differently actually place file", "d": "4/2013"}, {"body": "twinturbo wagenet think add api docs sortablemixin also fwiw prefer use explicit asking sorted content thoughts", "d": "4/2013"}, {"body": "nt even use internal facing proxy using proxy directly case controller using bypasses fact proxy return different object index underlying content", "d": "4/2013"}, {"body": "nt like controller use", "d": "4/2013"}, {"body": "wonder assume feels nicer controller somehow sent iphone apr kristofor selden notifications githubcom wrote nt like controller use reply email directly view github", "d": "4/2013"}, {"body": "agree", "d": "4/2013"}, {"body": "especially template already named something like title body", "d": "4/2013"}, {"body": "hood performant happens keywords well", "d": "4/2013"}, {"body": "kselden level implicitness suggesting makes frameworks harder learn referring directly give new developers amp future teammembers including clue exactly iterating small app might make much difference larger apps might lots templates nice know iterating sortedfiltered collection original one make sense", "d": "4/2013"}, {"body": "joefiorini opinion general statement priorities think ember prefers concise implicit application code considerations make framework easy learn might artifact framework status though please correct wrong", "d": "4/2013"}, {"body": "closing favor", "d": "4/2013"}, {"body": "think stefanpenner correct ember nt class source empty extension api area reopen think doc", "d": "4/2013"}, {"body": "fought well still issue current versions updated jsbin pr follow", "d": "4/2013"}, {"body": "crucial stuff heartsentwined emberauth machty think great solution take next step getting merged ember", "d": "4/2013"}, {"body": "seanrucker complicated issue want get composable primitives correct nt wind router vn leaving abovereferenced pr alive going get merged nt want right seems like describes best direction complications work promises router react response", "d": "4/2013"}, {"body": "machty seanrucker refers auth framework ember emberauth specifically heartsentwinedemberauth use case still viz authenticatedonly model partial solutions thus far proposed reordering hooks anything missed agree ember expose public api halting decorating state ember", "d": "4/2013"}, {"body": "agreement", "d": "4/2013"}, {"body": "master", "d": "4/2013"}, {"body": "slightly differing opinion fact looks literal string something container means templates become inflexible template call render always matter render something child however treats something path local context resolved changed programmatically helper dynamically change rendered subview class using property within current context similar select child view render objectbyobject basis overriding see love see ability differentiate helpers use containertemplate paths like container lookup name quoted string render lookmeuponthecontainer variable referencepath render iamapathtoberesolved sure would break large number existing apps loose use quotes passing quoted string different passing unquoted property reference current global context", "d": "4/2013"}, {"body": "ran issue today well created jsbin try pulled branch pr cherrypicked commit master resolved merge conflict updated test see resolves bug", "d": "4/2013"}, {"body": "cloned jsbin example bug linked latest table html generated properly perhaps issue pr pr closed", "d": "4/2013"}, {"body": "pixelhandler consider solved open new ticket problems thanks", "d": "4/2013"}, {"body": "joliss saying proxies automatically dictate usage word content", "d": "4/2013"}, {"body": "would useful monkeypatch added pull request tests would likely merge", "d": "4/2013"}, {"body": "hi wagenet showing list posts ie see index post page therefore nested routes case back button works fine however need access posts post controller run next previous functions next previous functions work fine routes nested however nt routes nested next previous work starting index post page advise routes nested case", "d": "4/2013"}, {"body": "bugsinamber probably good sort question ask stackoverflow", "d": "4/2013"}, {"body": "wagenet suppose main question using nested routes going posts postid hitting back button url changes posts view nt refresh show posts view hit back button one time meant", "d": "4/2013"}, {"body": "stefanpenner metamorph tags breaks style also thought", "d": "4/2013"}, {"body": "use case always want wrap default model rubyjs r method operate model array models views similar apis ruby would go without manually set model time like use applicationroute would nice could somehow acces default model generator sth like looking seems like might achieve like since inside model set context coming", "d": "4/2013"}, {"body": "updates tried using loadingroute get issue current way display loading spinner models populated", "d": "4/2013"}, {"body": "mean also create property listens changes belongsto field problem right sure issue cause", "d": "4/2013"}, {"body": "seems really bad updating master im seeing computed properties called", "d": "4/2013"}, {"body": "ghempton seeing previously way", "d": "4/2013"}, {"body": "works fine us using build days old", "d": "4/2013"}, {"body": "ghempton possibility running figure commit causes change", "d": "4/2013"}, {"body": "tried solve problem view handles actions stores state editing maybe best implementation works far goal get minimize one call instead using everywhere app ifstatement", "d": "4/2013"}, {"body": "eltehupkes great work nt tried yet seems good route context object query params sure use case need would written code", "d": "4/2013"}, {"body": "machty thanks transitioning context query done like modified separate queries context objects internally recognizes type object returns actually could rewritten would thing order query objects nt even matter explicitly define handler targeting way update code called well pretty much always use typeof lesscode yay", "d": "4/2013"}, {"body": "hi fyi anyone using emberquery update pushed bugfix meant docs wrong browser back button often nt work sure already fixed ages ago", "d": "4/2013"}, {"body": "newcomers anyone else whose attention directing thread could alexspeller eltehupkes please highlight different approaches taken tackle problem", "d": "4/2013"}, {"body": "sure summarize approach used emberquery going traditional querystring based approach anyone familiar rails recognize uses jquerydeparam railslike queryparam deserializer deserialize querystring javascript object like object passed hook routes respond hook currently active corresponding hook routes called create object controller state property called added properties array observed trigger hooks current routes changed allowing bind controller properties current query string approach gives standard recognizable url format however disadvantage params passed routes ie global explicit way scope routes apply identically named params clobber params parent routes current state really problem carefully chosen naming scheme real issue params affect model parent route hook called parent route even params change affect child route example transition using default router hook called router knows nt changed however using library transitioning need call model hook posts route comments route page param global way know route applies alternative approach allows params scoped routes equivalent routes eltehupkes solution believe would page param scoped comments controller although looks similar using semicolon instead question mark difference params parent routes eg category param applies posts route page param applies comments route nt tried solution yet may way nt think solution supports global params currently using filter params filters apply parent child routes think could done passing params parent routes child handlers tl dr solution assumes params always global urls traditional querystringlike eltehupkes assumes params always local individual routes think uses syntax traditional querystring syntax proposed tim bernerslee ultimately think valid use cases solution allows necessary please correct misrepresented solution way elte", "d": "4/2013"}, {"body": "alexspeller great stuff thank", "d": "4/2013"}, {"body": "yeah alexspeller writes essentially right parameters scoped route handler global implementation chose approach parentdeserialization problem also think syntax looks fancy implementationwise solution patch ember core work independent whether using alexspeller implementation custom based alongside additions former advantage could merged core latter used immediately without build ember anyway think something like alexspeller solution bigger chance merged core course independent submitted pull request nt require fundamental changes made looks familiar people job time clever parameter naming take care however problem unnecessary deserialization parent routes would solved would require detecting whether query specific handler actually changed transition pain sucks compare jsobjects anyhow building something new solves problem uses classic query string merged core well bolton version course powered rainbows endorsed unicorn community meaning hope work", "d": "4/2013"}, {"body": "eltehupkes idea suggested addition agreed work instead although could ambiguous maybe like ie way specifying param route param scoped", "d": "4/2013"}, {"body": "hmm would work would expose implementation details ie name route handler url nt clean think silver bullet guess going solution works expected without configuration common situation common situation say would single resource route allows something like paginationordering guess base case work would whatever parameters second requirement b nt break complicated scenarios without configuration eg unnecessary deserialization way see either allow query parameters leaf routes disable parameters default allow sort actually preferred maybe full obvious disadvantage want parameters nonleaf routes ca nt believe cases restriction violated already pretty much makes nogo disadvantage nt really work rather nt fail however highly doubt achieve works anyway would also require expected behavior even though us makes sense handler wo nt actually know use find postid derive case dynamic segments singularizing would work whole different problem altogether posts post simple categories category hand advantage flexible allows naminglinking scheme want free choose naming scheme scope routes tl dr think initial approach might best think", "d": "4/2013"}, {"body": "fwiw problem solution involved changes microlibs argued querystrings something router recognizer able handle change belongs yes little complicated coordinate change nt let sway correct solution edit apologies unproofread engrish", "d": "4/2013"}, {"body": "machty fair enough thing spent quite time understanding recognizer works almost equal amount time wondering designed way especially since old router contained recognizer far see functionality way way less complex believe looking code difference like lines vs lines sort figured must good reason though like wrong anyway global query string split router scoped parameters incorporated recognizer", "d": "4/2013"}, {"body": "remember correctly functionality route recognizer flexible routing wildcard star routes etc old router seemed like less code probably lot functionality already ish blurred mechanism come appreciate unixy one thing well approach ember trying take recently microlibs fan perroute querystrings try get people weigh", "d": "4/2013"}, {"body": "say rails router global query strings make sense since router ultimately leads single action single controller overlapping terminology bw railsember misleading since navigate route ember building multiple controllers routes presiding small chunk url rather one takes reason think would wise opt less conventional querystringperroute approach rather picking something looks familiar ultimately would need split controllersrouters need information favor perroutequerystrings reason could nt global querystring support enhancement ember core would work location types", "d": "4/2013"}, {"body": "reason global approach could nt work location types nt needed implement yet think coming prefer perroute option sit better design ember router", "d": "4/2013"}, {"body": "machty indeed reason could nt determining handlers need updated straightforward also ca nt done hack really need modify functions closed router module copy whole bunch code suppose kept people implementing guess working getting webapps work agree perroute querystrings make sense conceptually hope guys time take look implementation still needs polishing essential parts least", "d": "4/2013"}, {"body": "recognizer btw uses state machine every state consists set validchars invalidchars repeats flag used dynamic segments star routes static segment posts represented state characters path validchar equal letter p final character accepting state handler dynamic star segment one invalidchar repeats also accepting technically possible implement query strings state machine currently generated tree adding optional states behind every handler would make tree exponentially larger number handlers apart would also difficult implement actually say system sort regexengine use one javascript ships way solved problem replacing singlecharacter states states consist regular expression state every separated portion path allows adding optional query string said still quite complicated personally think would horrible idea change altogether", "d": "4/2013"}, {"body": "cake amp eat matrix params route local context amp query style global context authoralexspeller author param affects routes posts affects posts route authorigor affects comments route posts authorigor split posts authorigor sortoldestfirst split w global", "d": "4/2013"}, {"body": "igorbernstein much cake ca nt really think compelling use case could nt handled leafier route looking information parent route passed perroute query string nt ambiguous route using information forcing perroute query strings would remove ambiguity edit cake cake cake", "d": "4/2013"}, {"body": "hmm also sure desirable probably think use case explain everyone two types query strings takes preference updated spend day kitchen see guests stare doubt cake octahedron whipped cream sides", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "got decent workaround create outer controller view templates works controller context stack reaching stack pull arguments params controller sits desired controller route need parameters need params controller set paramsbinding controllersparams rough example manually involved helper function exists edit method nt work well see comment revised strategy", "d": "4/2013"}, {"body": "nthalk thanks sharing simple useful", "d": "4/2013"}, {"body": "agreed nthalk could post full jsfiddle sample app using trying use model route found params string represents multiple model properties bit awkward sure wrong", "d": "4/2013"}, {"body": "okay diving realized solution nt work well different usable way dealing note jsfiddle nt showing underlying routes address bar hidden iframe reflect dynamic parameters one major caveat method crowds url space whereas use uri space taken params must instead use something like nt collide resource routes small price pay see jsfiddle method indeed work allows extensions show routes projects lib planning adding withparams mixin generic parameters lifting additionally observer listens changes params updates current uri via transitiontoroute best left developer decide calling transitiontoroute observer sane", "d": "4/2013"}, {"body": "status update", "d": "4/2013"}, {"body": "fix anything new since six months handle case missing record", "d": "4/2013"}, {"body": "updated jsbin handlebars emberjs master today still get error", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "think problems occurs latest version sure really tested console browser like joliss said error thrown give look source seen required properties ignored idea sorry mistake first participation", "d": "4/2013"}, {"body": "marcioj hm hope beeing wrong emberrequired seems completely broken moment kselden", "d": "4/2013"}, {"body": "solved posting solution case anybody comes across", "d": "4/2013"}, {"body": "desired functionality please assign implement otherwise let close since hanging months like feature would like see added", "d": "4/2013"}, {"body": "emberjsemberjs", "d": "4/2013"}, {"body": "running issue ember entirely possible missing something basic ca nt find reference docs", "d": "4/2013"}, {"body": "sandello ever make progress issue updated js bin using cc wagenet kselden ebryn", "d": "4/2013"}, {"body": "seanabrahams nope implemented pagination possible plugged appropriate neither option full replacement big sortable tables", "d": "4/2013"}, {"body": "think real use supporting seems kind redundant want update ie width need set attribute binding sets style browser renderer parses style attribute updates element style object issue gets tough manage want update multiple styles would require specific property view aggregate styles want update nt know much performance difference whether makes supporting feature much appealing think ember supports attributes classes styles advocating views contract styles etc throwing two cents recently used ember app needed display progress bar needed update width percentage used style attribute felt like code smell view generate css", "d": "4/2013"}]