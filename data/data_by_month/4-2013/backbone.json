[{"title": "underscore parameter", "body": "hello faced problem global variables like underscore project ca nt use backbone project use var underscore fixed problem use requirejs want get opportunities path underscore name noconflict function backbone something like hot fix like var rootunderscore root", "num": "2507", "d": "4/2013"}, {"title": "merge attributesclass classname", "body": "looked issues could nt find anything go views reusable often want one class view el always ability add extra classes via attributes property right overrides pass view failing test javascript test merge attributes class classname function var view backboneviewextend classname one attributes id id class two let know interested changing behavior fix right away", "num": "2506", "d": "4/2013"}, {"title": "response collectionfetch inconsistent", "body": "happened write dirty code needing use grab values set nested models tapped function however values passed means different things two versions collection means collection called called response json values parsed jquery whatever adapter given restful call options rest options passed however collection means response response means return value underlying adapter jquery would success ajax call successfully executed options holds thing since saw quite difference terms sync functions triggers different events callbacks would better mark kind changes change log migration guide people would know api changed enough break existing code even documentation changes actually nt indicate values thank", "num": "2505", "d": "4/2013"}, {"title": "need help backbone custom ajax call ca nt show loading message", "body": "ca nt resolve problem week view code events updatestats function e ajax call render loading hide run updatestats loading dom element ca nt show browser set debugger alert text ajax loading show way fix problem", "num": "2504", "d": "4/2013"}, {"title": "collection firing change event added model", "body": "using listen add change events collection model added collection fires add change get adding changes collection sense intended behaviour event model collection changes intended bug", "num": "2502", "d": "4/2013"}, {"title": "announcement hippo meetup event javascript frameworks libraries", "body": "hi sorry proper communication channel announcementsdiscussions support software developer originally egypt working living netherlands hippo employer besides normal support development work love build communities around different interests specifically open source software interest idea hippo meetup events born see javascript core hippo interests first pretty successful event beginning year would like new one time different javascript frameworks libraries backbone getting pretty much popular hippo would like someone backbone community give talk coming event event english speakers speaker nt speak dutch time transportation efficiency preferable speaker lives netherlands country close serious speaker lives far netherlands bring company see besides interest technologies technical ideas event good opportunity socialization meeting smart people make connections help spread word backbone drinks food served attendees lots fun hope one come show us great features backbone looking forward reply", "num": "2501", "d": "4/2013"}, {"title": "modulesave overwrites model data passed options data", "body": "hi pass additional data ajax request save like overwrite module data think inside backbonesync first copy data attributes", "num": "2500", "d": "4/2013"}, {"title": "unable hold attributes views", "body": "since updated version longer able store options views creating inner model every view needs attributes impractical uses least appears one major model used store business data originally stored path smaller views would rendered model underscore get value desired usually string line items case cant store paths views impractical model view screen even small views generating many selfupdating lists screen number items list change initial render data row change initial render run mobile platform limited resources nt want rerender entire list change element changed model one seems really impractical", "num": "2496", "d": "4/2013"}, {"title": "add beforeroute events backbonerouter", "body": "hello beforeroute event would useful able catch properties controller execution", "num": "2495", "d": "4/2013"}, {"title": "nt replace new model persisted model calling collection set", "body": "building nested modelscollections upon event top model call nested collection endpoint server responds back persisted child models following sample code modelscollections coffee class parentmodel extends backbonemodel urlroot apiparents initialize gt setupnestedmodels sync setupnestedmodels setupnestedmodels gt childcollection new childcollection childcollectionset attributeschildcollection rails backend unset childcollection class child extends backbonemodel class childcollection extends backbonecollection model child let say create new like render view dependent child hit save happens original model gets removed collection place new model different set seems bit clunky assumed automatically merge since option understand sometimes order ca nt guaranteed response rather single maybe even passing explicit options removeadd models rather manually loop response attributes update model individually way maintaining model object wo nt rerender view", "num": "2493", "d": "4/2013"}, {"title": "improve documentation", "body": "hey guys backbone really great documentation stuff forgotten like model set method nowhere saying options pass sucks another thing events never know events model collection fire unless browse every single method good table describing situations event fired", "num": "2492", "d": "4/2013"}, {"title": "providing bare bones convention nested views", "body": "biggest source questionscomplaintsissues encountered backbone deals handling issue nested views sufficiently complex application see real world applications need managing views within views cleaning properly well received addition helps degree think backbone could bit something add pretty much whatever working job without much overhead complexity js var view backboneview backboneview backboneviewextend constructor function thissubviews viewapply arguments addsubview function view view instanceof backboneview throw new error subviews must backboneview thissubviewspush view return view removesubviews function var children thissubviews var l childrenlength remove function thisremovesubviews viewprototyperemoveapply arguments completely understand agree backbone position keep things simple implement applications specific components time think providing basic starting point problem would great help many starting point could extended upon opinionated libraries frameworks like layoutmanager thorax marionette etc cc tbranyen", "num": "2490", "d": "4/2013"}, {"title": "introduce allchangedattributes retrieve changes since model initialisation", "body": "similar changedattributes introduce new function returns changed attributes since initialisation model would allow setting attributes model multiple times saving using http patch", "num": "2488", "d": "4/2013"}, {"title": "change event triggered another change event listener events changed attributes", "body": "expected behaviour upon triggering new change event listener another change event second change event fired containing first action second take code example want update attribute whenever either two attributes change also want happen attributes changed single action solution came listen general event check caused attribute interested changed issue model point subsequent change event triggered listener fired also contains previously changed attributes seems attributes changed twice javascript var model backbonemodelextend var model new model b unrelated foo computed modelon change function consolelog model changed modelchangedattributes modelchanged modelchanged b consolelog b changed recomputing modelset computed modelget modelget b consolelog modifying unrelated modelset unrelated bar recalculation consolelog modifying modelset result single recalculation consolelog modifying b modelset b also result single recalculation last two cause recalculation happen twice one solution would silence second change event nt want listeners triggered intended events behaviour one achieve", "num": "2487", "d": "4/2013"}, {"title": "route fragments numbers", "body": "url scheme changed urlsfragments site numbers example become change fragment string causes error backbone uncaught typeerror object method replace line added check getfragment method line fixed something wrong legitimate bug recently upgraded never numeric fragments previously", "num": "2486", "d": "4/2013"}, {"title": "issue collectionremove", "body": "issue occurs version manually set model id try remove model collection nt get removed reproduce issue example pasta model nt get removed javascript var meal backbonemodelextend defaults appetizer caesar salad entree ravioli dessert cheesecake var mealcollection backbonecollectionextend model meal var meals new mealcollection mealsadd maindish salmon id mealsadd maindish steak id mealsadd maindish pasta mealsfindwhere maindish pasta set id silent true var steak mealswhere maindish steak var pasta mealswhere maindish pasta mealsremove steak mealsremove pasta", "num": "2485", "d": "4/2013"}, {"title": "thisroot undefined line", "body": "shim backbone requirejs requireconfig deps main paths components components jquery componentsjqueryjquerymin bootstrap vendorbootstrap backbone componentsbackbonebackbone underscore componentsunderscoreunderscore text componentsrequirejstexttext handlebars componentshandlebarshandlebars shim bootstrap deps jquery exports jquery underscore exports backbone deps jquery underscore exports backbone upgrading backbone v get error line content nt understand root object undefined backbone", "num": "2483", "d": "4/2013"}, {"title": "ie patch support", "body": "putting reminder take look back comments regarding make sure everything alright cutting next release", "num": "2476", "d": "4/2013"}, {"title": "doc indexhtml created", "body": "file generated someone help", "num": "2475", "d": "4/2013"}, {"title": "pass ajax options fetch save destroy", "body": "seems like success error callbacks options passed ajax benefit finding hard add custom header single api call thing worked far ajaxsetup custom header added every subsequent api call easier way add custom header single ajax call", "num": "2474", "d": "4/2013"}, {"title": "pushstate navigation problem url", "body": "two routes first global routes second settings routes use pushstate case class demoroutersroot extends backbonerouter initialize options gt thisroute settings settings settings gt routesettings routesettings new demorouterssettings setting routes class demorouterssettings extends backbonerouter initialize gt thisroute settingsshow show navigate settingsshow trigger true replace false show gt consolelog press settingsshow nt fire show function", "num": "2472", "d": "4/2013"}, {"title": "defaults used merging attributes collectionset", "body": "currently pass attribute hash model id already exists collection resulting merge model default values applied merge takes place means give selection attributes want merged model attributes nt give defaults defined override existing nondefault values seems unexpected seems like perfect way apply partial updates models current functionality nt possible example javascript var model backbonemodelextend defaults key value var new model id key nondefault var col new backbonecollection model model colset id otherkey merge true consolelog colfirst attributes result id key value otherkey expected id key nondefault otherkey confusing thing setting attributes model directly behaves differently way would expected behave edit actually testing seems regression javascript version var model backbonemodelextend defaults key value var new model id key nondefault var col new backbonecollection model model colupdate id otherkey merge true consolelog colfirst attributes result id key nondefault otherkey edit commit seems source change really intended", "num": "2471", "d": "4/2013"}, {"title": "preparemodel method mutates options object", "body": "nt know intended work like preparemodel accidentally injects collection options object create method use preparemodel obtain correct object calls save options object using backboneio got error save method tries convert json whole options object collection ca nt serialized like", "num": "2470", "d": "4/2013"}, {"title": "support mongodb extended json", "body": "mongolab cloud version mongodb provides nice rest api however model id looks like id oid solution found stack overflow bit rough var sync backbonesync backbonesync function method model options options options optionsattrs present backbone use dumping tojson optionsattrs optionsattrs omit modelattributes id return synccall backbone method model options backbonemodelprototypetojson function options var attrs clone thisattributes case pass includeid true tojson actually want id output return options amp amp optionsincludeid attrs omit attrs id better way create patch backbone support ids", "num": "2468", "d": "4/2013"}, {"title": "cross site script vulnerability", "body": "recent security scan using tool called fortify found cross site scripting xss vulnerability code question updatehash function code called navigate function use navigate function way perform cross site script attack appnavigate help javascript alert xss trigger true would result following url called would result alert box displayed text xss appnavigate page", "num": "2467", "d": "4/2013"}, {"title": "fetch optionssuccess callback arguments changed", "body": "nt see changelog issues forgive duplicate fetch optionssuccess callback takes arguments collection resp used take model resp options change broke custom override", "num": "2466", "d": "4/2013"}, {"title": "function execution order model constructor", "body": "called code preforms set used override model constructor order ensure set occurs parse called answer yes hold true", "num": "2465", "d": "4/2013"}, {"title": "thisviewdelegateevents backbone", "body": "", "num": "2464", "d": "4/2013"}, {"title": "modeloff thismodeloff", "body": "", "num": "2463", "d": "4/2013"}, {"title": "define default option requestmethod", "body": "need define default option like wait true requestmethod", "num": "2459", "d": "4/2013"}, {"title": "saving model collection options", "body": "reason model collection save copy options hash instance like view see key properties getting plucked source added instance options argument assigned options", "num": "2458", "d": "4/2013"}, {"title": "parse longer called collectionreset", "body": "looks mistake need parse models populating reset let know design", "num": "2457", "d": "4/2013"}, {"title": "collection url set instantiation", "body": "docs state passing option collection constructor set collection url property several options provided attached collection directly url model comparator looking implementation see source code reflect sets legacy functionality misreading docs related thanks", "num": "2453", "d": "4/2013"}, {"title": "readd lodash docs", "body": "backbone bump lodash removed docs sure removed since unlike jquery zepto lodash ships tests backbone unit tests also maintains compat builds even cdnjs specifically compat underscorebackbone also seems come surprise backbone contributors", "num": "2452", "d": "4/2013"}, {"body": "nope nt noconflict underscore backbone loaded patch copy suggested", "d": "4/2013"}, {"body": "feel specific functionality many simple work arounds part core", "d": "4/2013"}, {"body": "ok fine disagree documentation states attributes hash attributes set html dom element attributes view el nt explicitly say override however also see cases want opposite probably fine", "d": "4/2013"}, {"body": "yep think probably overriding either one direction want merge jquery addclass constructor would make sense", "d": "4/2013"}, {"body": "please nt ask help issues tracker try mailing list irc channel", "d": "4/2013"}, {"body": "sample code gets fired new model gets fired existing model collection change attribute values great set breakpoints inside backbone entry points backbone watch backbone actually found pretty valuable learn backbone actually implemented", "d": "4/2013"}, {"body": "wanted add direct contact please nt hesitate get touch email mnour onehippocom looking forward get touch community", "d": "4/2013"}, {"body": "sorry proper communication channel announcementsdiscussions problem future please use irc mailing list announcements like github issues strictly bugspatchesissues backbonejs", "d": "4/2013"}, {"body": "hi casey mailing list would please point thanks advance", "d": "4/2013"}, {"body": "mnour", "d": "4/2013"}, {"body": "tgriesser thanks lot", "d": "4/2013"}, {"body": "supposed able overwrite model data like also include model data simply include override", "d": "4/2013"}, {"body": "yes think intuitive copy properties set like method otherwise set", "d": "4/2013"}, {"body": "using unstable version use stable version found", "d": "4/2013"}, {"body": "like model set method nowhere saying options pass ha actually recently took particular bit documentation builtin option pass highly discouraged mostly passing custom options forwarded along event handlers use see fit indeed documented better section events good table describing situations event fired like one", "d": "4/2013"}, {"body": "oh bad nt saw gorgeous catalog events exactly looking well thanks guys made awesome project really enjoy working backbone", "d": "4/2013"}, {"body": "nesting views much complex thing backbone", "d": "4/2013"}, {"body": "mornin tim certainly understand impetus change written similar code many times nt think subview management appropriate inclusion backbone views almost convention actual code powerful primitives good conventions build upon code rather small amount boilerplate nt address hard issues like disposal data binding people mostly nt agree however implies backbone handle nt many views nt contain views allocating array silly leaving unimplemented allows creativity solving hard problems working backbone instead around", "d": "4/2013"}, {"body": "nasty thing pattern stores references meaning go back manually remove child views agnostic setup html subviews removed time models stop referenced gets garbage collected unnecessary references js less garbage collection gets job try possible mandated core backbone", "d": "4/2013"}, {"body": "allocating array silly good point could simplified nasty thing pattern stores references meaning go back manually remove child views call top level view calls child views automatically good nt seem nasty working backbone instead around possible mandated core backbone makes sense agree really brought heard many questions probably behind nested modelscollections might worth mentioning something small docs ways deal views within views cases html subviews nt removed time objects view maintains references opinions", "d": "4/2013"}, {"body": "allocating array nt silly bringing valid reason something though braddunbar", "d": "4/2013"}, {"body": "maintaining views opinion difficult part backbone application must make sure properly dispose views detach events dereference objects etc absolutely run memory leaks post today many like opinion contrived problem plugins blog posts best way make library effective creating views newcomers way models collections attempt provide would love work layout manager point could merged fear would effort wasted nt mind asking would main objections nt want towards integrating well tested properly handled view management", "d": "4/2013"}, {"body": "think one main issues tbranyen touched upon backbone views typically promoted jquery better structure keep logicstate dom good stuff problem coming land nt think references gc almost black box handles cleaning references big way backbone nt much done outside modelscollections dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory many valid cases view would observing events object would outlive subviews added view render block referencing parent model parent view rerendered views hang around parent model gone unless explicitly kept track removed views beginning render block try possible mandated core backbone also looking comment say agree fully also think big difference mandating something providing outlet handling something rather common major pain point source confusion simple entirely optional fashion cloc backbone view section complicated going get vs models collections counting underscore fine certainly understand nested views nt immediately obvious sprung many blog posts half baked plugins frustration", "d": "4/2013"}, {"body": "tbranyen right nt great reason nt mentioned think main point still stands though known sorts silly things recommend dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory done ways found trade keeping things around memory improve perceived load time often accompanied high cost complexity cache management leaving view disposalmanagement altogether huge win valid strategies choice depends constraints", "d": "4/2013"}, {"body": "still nt think merging change like repeat maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners said course many cases want style view hierarchy let solve documentation anyone want cook nice nested views section homepage talking briefly make views flow nicely gc maintain explicit hierarchy automatic granular unbinding demonstrating code", "d": "4/2013"}, {"body": "great take shot putting together docs", "d": "4/2013"}, {"body": "addition docs need nt include code maybe make tgriesserbackbonenested official plugin link reference implementation", "d": "4/2013"}, {"body": "code intended manage fixed number subviews manage variable number subviews opinion fundamentally two different beasts warrant totally separate solutions start split section ui separate subviews organizational code reuse purposes fixed number subviews useful reference subviews names hash keyed subview name appropriate data structure storing subviews case contrast rendering collection arbitrary number subviews array appropriate storing subviews code sufficient solution either case imo first case simpler even case one question immediately arise need addressed subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements minimal solution rendering fixed number subviews able distill backbonesubviews mixin solution address rerending issue imo incomplete case variable number subviews another matter go complicated case add new backbonecollectionview plugin one available solutions", "d": "4/2013"}, {"body": "subviews reinitialized parent rerendered rerendered actually find majority cases parent rerendered easiest reinitialize rerender view case work fine long call topmost splitting ui many times wo nt use hash named subviews subviews rerender based model changes etc nt need reference parent guess confirms jeremy said one size fits scenario view management something nt addressed backbone", "d": "4/2013"}, {"body": "maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners jashkenas nt quite understand sentiment suppose one view proper way remove closing tab call document somewhere somehow big bold letter says dont use fnremove fnempty get mem leaks anyway tgriesser suggested change good start actually simplify memory management automatically propagating call nt know many beginner view code seen seen beginners absolutely definitively get socalled structure people whose brains warped jquery half decade jquery chain structure nt like look guidance backbone backbone offers next help refusing single likely place induce partially digested stomach content ejection jquery code lack blessed way nest views put code belongs subviews parent view implement halfass solutions propagate backbone events deeply nested subviews ancestors many times big blob jquery pasta within nt know deal subviews years backbone lot people starting converge towards solutions suggested herein sincerely hope reconsider trying hash view class solves problems people current implementation useful reference subviews names hash keyed subview name appropriate data structure storing subviews case dgbeck actually hash sufficient appropriate solution situation since rendering collection views keys simple index make sure subviews come right order caseywebdev et al book actually suggests using hash subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements cases parent call rerender subviews subview method dom events redelegated yes lot work cpu cycles done makes backbone view even tightly bound jquery love see clean implementation actually downgrades jquery importance sidebyside dom api many reasons whole blog posts", "d": "4/2013"}, {"body": "actually backbone could use views hash track child views provide extra methods make view management easier", "d": "4/2013"}, {"body": "actually interested approaches people using real software theory realms since lot people solving problems probably similar patterns used two patterns liked backbonesupport approach like like view rendering included inclusion subview way used subviews via backbonehandlebars nt try promote anything idea hide subviews templating engine method access subview via obscure ca nt recall ever use jashkenas one possible solution removing subview imaginary extend events understand subview rendering dependent tempting engine one biggest weaknesses strengths nt clear template engine pipeline", "d": "4/2013"}, {"body": "rstankov subview rendering depend template engines perfectly nest views view represents html element constructed jquery view constructor backbonesupport address dgbeck issues uses array sometimes need able name subviews also nt see giving extra events going help obvious way construct view hierarchy backbone backbone events also nt bubble like dom events useful subviews sharing modelcollection want look real world code backgrid whole thing entirely composed nested views using slightly less elegant variation tgriesser solution sufficient happen need name subviews many situations certainly call hash really default way go underscore trivially make hash behave like array", "d": "4/2013"}, {"body": "wyuenho nice grid point mainly look patterns used projects since noticed everybody handling different way moving subviews template helper see subviews markup view code understand pattern solution generic stuff need view event like subview model removed triggers removing subview removed dom still collection parent view way reference parent view subview upon removal remove child parent places take heavy use subviews hard part creating putting correct dom places self managed way communicated parent custom dom events ca nt remember case parent needed call method subview", "d": "4/2013"}, {"body": "hey ingoe sort functionality discussed bit see given somewhat common usecase idea think plugin would best strategy", "d": "4/2013"}, {"body": "hi ingoe thanks opening issue agree jashkenas though synced state model something belongs app code backbone ca nt know method best app choice left thanks reference mponizil", "d": "4/2013"}, {"body": "hi johtso nice see evening definitely intended behavior nested changes aggregated event way done seems nice probably way would go well fiddle behavior seems correct", "d": "4/2013"}, {"body": "hey braddunbar ah okay think understand expected recursive behaviour example approach work child set triggers another change event listener called second time model still contains previously changed attributes recalculation done twice wanted avoid key thing changes aggregated across distinct change events", "d": "4/2013"}, {"body": "ah see mean value computed attribute needs evaluated twice b change regardless thanks elaborating unless measured found doubling causing performance problems would nt worry even calculated get one change event say listen nt worry extra calculation", "d": "4/2013"}, {"body": "everything looks kosher anything funky link handling would imagine never came routes already strings backbone needs string fragment argument might try something like instead still nt solve issue post test case testing way get number backbonenavigate pass", "d": "4/2013"}, {"body": "exactly passing int stop fragment ended integer pulling html attribute jquery method auto type conversion thanks", "d": "4/2013"}, {"body": "ah yep url stuff queries hashes pushstate deal strings best pass string edit sorry extra posts seems github android broweser dont play nice either smileycat", "d": "4/2013"}, {"body": "thanks looking test case closing one", "d": "4/2013"}, {"body": "returns array matches want edit idiot takes array problem using braddunbar thought resolved", "d": "4/2013"}, {"body": "since relies event observe changes model id expected break silencing change fact would discourage using altogether removed documentation causes many known problems", "d": "4/2013"}, {"body": "lfortin thanks opening issue boiled example simple use case demonstrates bug javascript var collection new backbonecollection collectionadd maindish salmon id collectionadd maindish pasta collection findwhere maindish pasta set id silent true var pasta collectionwhere maindish pasta collectionremove pasta consolelog mealslength running example jsbin bug caused setting backbone uses events internally update indexes models ids change set id tell backbone trigger expected events mechanism updating indexes thus fails attempts use id index present workaround use set id", "d": "4/2013"}, {"body": "makes sense caseywebdev braddunbar wookiehangover thanks lot help", "d": "4/2013"}, {"body": "mornin exoer property set would passed function otherwise overwritten property nt yet started", "d": "4/2013"}, {"body": "also least unit tests error test running compat mode", "d": "4/2013"}, {"body": "ie testing see nt forget testing compat modes easy via dev console dropdown list", "d": "4/2013"}, {"body": "handwritten may try irc channel questions like", "d": "4/2013"}, {"body": "okay thanks", "d": "4/2013"}, {"body": "hi briansorahan actually options passed already passed enjoy", "d": "4/2013"}, {"body": "def bad thx", "d": "4/2013"}, {"body": "debug backbone found fix problem add line change line conflict", "d": "4/2013"}, {"body": "bug tracker personal support forum please try irc channel mailing list trouble", "d": "4/2013"}, {"body": "would say choice jeremy made makes much less useful honest never use backbone current behavior definitely unexpected imo", "d": "4/2013"}, {"body": "agreed screwed change feel free revert fix", "d": "4/2013"}, {"body": "well fix previous pr ideal still take thought first step revert tests back old expected results", "d": "4/2013"}, {"body": "looks like data output extended json format see process correctly", "d": "4/2013"}, {"body": "sure solution rough backbone meant extended catch adding methods backbonemodelprototype creating base subclass nt worry things supposed work good number people needing type change something could considered think extending would best solution", "d": "4/2013"}, {"body": "overriding instead sounds like good idea thx nt think omitting code mentioned rather good solution guess need something like mongo db extended json lt gt json converter time write suggestions", "d": "4/2013"}, {"body": "mornin dealancer thanks posting think tim right job amp something like js var model backbonemodelextend parse function res resid resid oid delete resid return res tojson function var attrs omit thisattributes id attrsid oid thisid return attrs", "d": "4/2013"}, {"body": "yeah sounds like plan also ideas dates objects going create extension conversion automatically", "d": "4/2013"}, {"body": "dealancer typical good practice pull nested objectsarrays modelscollections referenced directly model custom also might actually interested thread related handling mongodeep nested things", "d": "4/2013"}, {"body": "mornin thanks posting exploits question rely evaluating arbitrary user input html nt evaluate html nothing backbone please see previous discussion details hand isolate specific exploit preventable backbone jsfiddlejsbin would love take look", "d": "4/2013"}, {"body": "hang minute think saying malicious party sends user malcrafted link backbone app use hole way get immediate xss let take another look", "d": "4/2013"}, {"body": "excepting method evaluation fragment html would script executed nt evaluate fragment knowledge contents executed", "d": "4/2013"}, {"body": "take word absence demonstrable jsfiddle sorry", "d": "4/2013"}, {"body": "problem nt mind extra scrutiny unable reproduce exploit", "d": "4/2013"}, {"body": "jquery fixed similar issue past well dev used even though code base never might worth checking jquery resolved", "d": "4/2013"}, {"body": "see jquerysrccorejs line issue", "d": "4/2013"}, {"body": "says still params", "d": "4/2013"}, {"body": "yep looks like still takes arguments", "d": "4/2013"}, {"body": "override model constructor order ensure set occurs parse called correct way go say people prefer attributes called case solution constructor overriding difficult fact noted docs", "d": "4/2013"}, {"body": "please check documentation google groups ask questions irc channel github tickets issues related development library", "d": "4/2013"}, {"body": "yep unlike view standard behavior tagged options want attach property feel free also please search opening tickets asked", "d": "4/2013"}, {"body": "sorry see someone already posed question though assumed asked admit search thorough would changing models collections set thisoptions upon construction breaking change harm another reference options argument model collection instance code around behavior past developing apis top backbone major issue see might confusing developers newer backbone primarily working views explicitly create reference options argument initialize method override constructor", "d": "4/2013"}, {"body": "would probably best attachment left user well think ship sailed kind decision nt made user especially since easy several pretty good discussions old issues", "d": "4/2013"}, {"body": "agree like decisions made either since already done developer view makes sense consistent pretty common practice keep reference options object well jquery plugins developer would expect based behavior libraries including backbone views however point developers likely initialize functions setting may massaging data setting making change like might cause people issues becomes bit pain factories creating child models collections based complex parent model relationship objects relies options passed parent upon construction end override constructors set options need access later custom sync functions huge deal seems unnecessary thought maybe others frequently", "d": "4/2013"}, {"body": "inconsistent confusing done automatically backboneview model collection", "d": "4/2013"}, {"body": "spent time going annotated source trying figure collection options nt kept least would useful note documentation explaining inconsistency", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "going consistency like see optionsinstance attachment removed views may late", "d": "4/2013"}, {"body": "brad feel way maybe bite bullet line next upgrading paragraph", "d": "4/2013"}, {"body": "feels wrong super easy modelsviewscollectionsrouterswhatever want ca nt opt always feel weird", "d": "4/2013"}, {"body": "yep attaching always leads mess sure property use update one need update state mismatch seen code options nt attached used everywhere seems inelegant best options vehicle getting information constructor without needing arguments deal throw away", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using lots projects use sure whether removed nt care much either way would definitely require code changes many good reason backwards incompatibility", "d": "4/2013"}, {"body": "braddunbar agreed vs get confusing state management pain unless values arrays objects also agree options argument gets thrown away construction typically pick properties need assign however override call extending classes know inheritance chain support developers get options unfortunate might unique situation complaint inconsistency confusing especially new backbone also sure docs first started using backbone fact backbone picks certain properties key name assigns initially confusing none things issues start combing source assuming new users nt consult source think removing options views point would painful developers point", "d": "4/2013"}, {"body": "dropping always stood unexplained inconsistency even large apps depending oneliner add reference back views well count adding named argument point simple change anyone make", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "agree removing principle obviously significant change backbone huge user base also seems like root issue may go deeper also lot confusion discussion past around options attached directly view others several special options passed attached directly view model collection el id classname tagname attributes long considering significant breaking change might worth take step back see restructuring might address issues ideally could automagically attach options want view object right discussed several ways go white listing options attach view interesting though least experience almost always want attach options view pity people forced manually copy view class develop solution base view class fringe cases nt want attach options view source problem may three distinct things squished options parameter built options get attached directly view user defined options want attach directly view temporary options need initialization separating three things two parameters would give flexibility instance everything could attached view object everything used initialization discarded thisoptions manually copying", "d": "4/2013"}, {"body": "necessary change ugly code layoutmanager function smells bad need way consolidate options think everything instance makes perfect sense", "d": "4/2013"}, {"body": "addressed", "d": "4/2013"}, {"body": "curiosity anyone use default options ie attached prototype always put defaults directly view instead", "d": "4/2013"}, {"body": "mean yes recall rationale top head mon apr brad dunbar notifications githubcomwrote curiosity anyone use default options ie attached prototype always put defaults directly view instead reply email directly view github", "d": "4/2013"}, {"body": "braddunbar use stuff like modal popups determine whether include action buttons text padding etc handy default options inheriting classes new instance methods override inherit", "d": "4/2013"}, {"body": "thanks jstrimpel also use values options object ie probably nt added value right words code functionally equivalent long access", "d": "4/2013"}, {"body": "guess main thing hash looks little cleaner little obvious meant overridden passed instead part instance probably right functionally similar also quite easy bring back first supported called function coffeescript class abstractpopup extends baseview templatedata gt extend options modeltojson options gt class actionpopup extends abstractpopup options gt extend super fixed true showactions true text sure afterrender gt eladdclass fixed optionsfixed actions hide unless optionsshowactions super class leavegrouppopup extends actionpopup options gt extend super text want leave group fixed false", "d": "4/2013"}, {"body": "except clean ends confusing assign something like template extend level try override invocation level updated property inside instance options object", "d": "4/2013"}, {"body": "tbranyen inside instance heirarchy support several different types popups different options behaviors seemed like logical solution alternatively could put options instance properties feel like would clutter instance properties essentially optional parameters admittedly contrived ugly example", "d": "4/2013"}, {"body": "never used default prototype propertyfunction favor removing given passes plus creates asymmetry options options maybe matter preference class configuration properties attached prototype least inheritance come free", "d": "4/2013"}, {"body": "actually keeping options instance reason mentioned little obvious meant overridden passed instead part instance values live signify parts view configured code instantiates prototype define defaults values given ultimately responsibility copying directly onto instance removes distinction ownership", "d": "4/2013"}, {"body": "point raised spadgos makes sense think extra typing turns others curiosity ever come across gray area cases option determined code instantiates view logic within view example option passed perhaps manipulated transformed may change life view", "d": "4/2013"}, {"body": "still called closing still think bug please provide codepenjsfiddle reduced example", "d": "4/2013"}, {"body": "correct running collectionparse modelparse modelparse assuming certain format clearing fixed thanks quick reply", "d": "4/2013"}, {"body": "attaching removed master basically passing constructor options overload method causes drama see full discussion", "d": "4/2013"}, {"body": "thanks gsamokovarov say thing", "d": "4/2013"}, {"body": "thanks sorry could nt seem find issues first search", "d": "4/2013"}, {"body": "gsamokovarov tgriesser docs seem inaccurateunclear", "d": "4/2013"}, {"body": "docs usually follow latest stable version updated mostly version bumps master docs try rawgithubcom get latest one changes may sync one explicitly documented eg references attachable gone", "d": "4/2013"}, {"body": "reference got included docs", "d": "4/2013"}, {"body": "need remove lodash since puts effort underscore compatible", "d": "4/2013"}, {"body": "lodash backbone work well together used large application", "d": "4/2013"}, {"body": "removal done purpose provided reason", "d": "4/2013"}, {"body": "think calling lodash place documentation probably faq heading alternate dependencies seems like potential outcome least", "d": "4/2013"}, {"body": "wookiehangover mention better none though got ta say nt dig lumped use risk lib like zepto especially lodash goes beyond even underscore terms compatibility underscore broke compat versions backbone amp edge", "d": "4/2013"}, {"body": "actually really like event proxy feature collectionview disposed model collection disposed assuming something like simply check view", "d": "4/2013"}, {"body": "yea rather like feature doubt going anywhere anytime soon would break huge amount code", "d": "4/2013"}, {"body": "going open issue zepto inconsistency currently backbone problem zepto really event data never removed causing leak", "d": "4/2013"}, {"body": "jdalton thanks good catch imo evidence use risk line reasoning", "d": "4/2013"}, {"body": "plan release bb fix soon kind biggie workaround done backbonepageable necessitate setting generated url either callback gets invoked reset url original could leave open window seconds becomes useless", "d": "4/2013"}, {"body": "also ran issue spent tracking saw looking forward", "d": "4/2013"}, {"body": "yep right time let try wrap", "d": "4/2013"}, {"body": "jashkenas like get defaults w merge dealio fixed", "d": "4/2013"}, {"body": "feature team well took us quite time debug problem upgrading", "d": "4/2013"}, {"body": "seems likes caseywebdev change merged get soon", "d": "4/2013"}, {"body": "looking back previous versions backbone creation temporary internal models nt anything new maybe coming light addition defaulting collection fetch note docs mentioning something along lines models may point part collection nt bind events external objects probably best solution", "d": "4/2013"}, {"body": "got bit one pain hierarchy models need saved series", "d": "4/2013"}, {"body": "maybe time backbone explicitly support use promises indirectly jquery zepto support already quite shaky discussed several times already eg nt see big problem potential replacement anymore current solution rely jquery promises using validations etc creates really bad api methods communicate server think would far better solution long run backbone actually use promises internally quite big change would probably targeted specific reasons backbone nt use promises except supporting zepto", "d": "4/2013"}, {"body": "thinking monkey patching something like meantime originalsave backbonemodelprototypesave backbonemodelprototypesave attributes options gt req originalsavecall attributes options req model valid return jqxhr req else model invalid return promise consistency dfd new deferred dfdreject validationerror options dfdpromise", "d": "4/2013"}, {"body": "seem like could potentially provide nicer unified api feel free send pull request", "d": "4/2013"}, {"body": "sure others agree suggestion rename option instead consistent existing method", "d": "4/2013"}, {"body": "took first shot decided include option since fail handler handle case failed model validation unsuccessful ajax request feels little cleaner validation check save fails add event listener really need specific errors probably want invalid listener show user messages anyway alternatively", "d": "4/2013"}, {"body": "looks like findwhere missing backbonecollection", "d": "4/2013"}, {"body": "globexdesigns listed separately underscore collection functions", "d": "4/2013"}, {"body": "var collection new backbonecollection consolelog collectionfindwhere returns undefined", "d": "4/2013"}, {"body": "globexdesigns sure running backbone code fiddle run check console see", "d": "4/2013"}, {"body": "nt say findwhere sincerely joseph chapman managing director amp principal developer creatify limited apr kim joar bekkelund notifications githubcom wrote globexdesigns sure running backbone code fiddle run check console see function attrs return thiswhere attrs true reply email directly view github", "d": "4/2013"}, {"body": "ok maybe condition occurring code causing function get undefined take look get back based earlier comments seems one happened", "d": "4/2013"}, {"body": "think reopened bug regardless underlying library used backboneajax response server means operation case destroy success execute given callbacks called case destroy succeeded failed case server responds destruction success forcing developers change backend deal unexpected frontend implementation decision", "d": "4/2013"}, {"body": "look way client renders html form backed backbone model pressing submit button formmodel saved order benefit buildin model validation app execute modified value want take advantage http patch method submit changed attributes currently buildin way retrieving changed values model since returns change since last call also disagree problem concurrent modifications part discussion concurrency issues handled server side solution extend model listen event suggested jashkenas still buildin functionality would nice", "d": "4/2013"}, {"body": "experiencing problem android based phones workaround", "d": "4/2013"}, {"body": "workaround replace updatehash function one checks user using android browser chrome make sure replace false create extra history item browser chrome browser best possible solution could come javascript var oldupdatehash backbonehistoryprototypeupdatehash var nua navigatoruseragenttolowercase var isandroid nuaindexof gt amp amp nuaindexof android gt amp amp nuaindexof applewebkit gt amp amp nuaindexof chrome gt replace default updatehash function backbonehistoryprototypeupdatehash function location fragment replace", "d": "4/2013"}, {"body": "thanks jorgenfb used solution added android devices also use history without pushstate android devices supports pushstate", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "also caught", "d": "4/2013"}, {"body": "downside view know ahead time used use accordingly child placed parent nt concern child given following view expect b c foo class name new myview el render el view myview b viewrender el view myview c viewsetelement el render el", "d": "4/2013"}, {"body": "hi braddunbar although true many api return location header still want backbone object updated way telling object update location header even whatever successful code would valid use case", "d": "4/2013"}, {"body": "nt exists ca nt find arguments callback anywhere docs", "d": "4/2013"}, {"body": "looking", "d": "4/2013"}, {"body": "kjbekkelund unfortunately want know arguments provided event callback", "d": "4/2013"}, {"body": "kjbekkelund ahh see give link wanted nt expecting args different event nt expecting list thanks", "d": "4/2013"}, {"body": "absolutely agree request expressed use case similar twitter home timeline fetch collection update true remove false wait true collection add binded append adds new pages items last visible bottom useful say infinite scroll add things bottom creates collection fire add binds append wanted add things top comes problem want creates prepend instead appending items like twitter prepends new things top appending old things bottom isnew nt seem solve use case either bottomline want display things different ways add create happen easy wayhack around telling add called back", "d": "4/2013"}, {"body": "testing iterating array order iterates array order except routes defined object literal array assurance keys come back order put see instance", "d": "4/2013"}, {"body": "benanhalt practice eg major browsers kept order defined unless keys numeric would nt case routes see info", "d": "4/2013"}, {"body": "jashkenas allows create add views dom rendering later sure events bound correctly delegated viewel given following document test following var demo demo var el var template click demoappend el elon click button function alert works function clonecopyevent src dest clonecopyevent elget templateget elreplacewith template following happen empty div created empty div attached dom event delegated empty div template div button replaces empty div click button event initially attached empty div works directly jquery source come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates fully familiar backbone get last multiple templates part solution covers everything else anyway pov current behavior able attach events effectively nothing niche hold hand feature annoying practical implications stupid divs everywhere coupling template html application logic coupling template root elements application logic etc people binding events directly easy ensure template loaded bind events nt bind events directly though backbones click something feature even less issue problem whole div business solving also assuming problems solving existed obviously problem ca nt clean templates also ca nt time solution biased towards one frankly rather event handling integrated views annoying work views", "d": "4/2013"}, {"body": "lots issues nt think everyone thought help maintain backbone layout manager ability set unwrap problematic us node element multiple top level elements become nodelist probably would expect event binding becomes complicated top level elements well bind events top level elements separately losing benefit delegation bind parent worry cleaning elements another weird thing rerendering end first element list anyways lot issues technique hard generalize simplify problem without lots documentation", "d": "4/2013"}, {"body": "posterity supply function lose event delegation tbranyen seen code initial reaction would stay away breaks convention likely lead strange behavior since views written expecting legitimate use cases looking way elegantly require top level element", "d": "4/2013"}, {"body": "tbranyen use case needing templates one root element inside ca nt single wrapping element empty div like forced moment case think want template essentially replacement since every element would pretty normal single parent element regardless depth go personally see concatenation sets elements something outside scope template template somewhat equivalent custom tag body replacement extremely niche use case since means nt things like script tags things like wrapping element page instead stuff head imo bad practice", "d": "4/2013"}, {"body": "also maybe worth noting passed options could potentially quick oneoff views", "d": "4/2013"}, {"body": "like wrap element useful almost views templates nt include wrapper element nt think complexity view guess needs wrapper get worth could see lot bugs coming feature since backbone nt knowledge tempting system going feature similar mind better template opinions build feature", "d": "4/2013"}, {"body": "tgriesser nt template function produce function needs called data rstankov multiroot templates braddunbar following current implementation called view initialization judging code seems moment support multiple roots one template since lot assumptions made one element existing essentially reason multiple tags inside root template forced current wanky implementation backbone must generate root element remove requirement remove multiple roots argument think confusion stems see hacks get current system kindof work corner cases completely unacceptable currently essentially really difference following backboneviewextend tagname li classname something somethingelse compared backboneviewextend second flexible much better job splitting markup looks backbone glues together would deprecatedremoved properties second method", "d": "4/2013"}, {"body": "srcspider function called current view context", "d": "4/2013"}, {"body": "srcspider problem deprecating start using since jquery collection fairly easy problem element rendered active rendering happening relates rendering system using", "d": "4/2013"}, {"body": "rstankov problem element rendered active rendering happening relates rendering system using specific really following problem current system solving anything replacing original div nt", "d": "4/2013"}, {"body": "srcspider currently always sure set since called really early knowing interesting stuff example insert view dom content content arrives render view content know insert render slower render insert cases helped fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding also good thing current system call render n times content view changes element", "d": "4/2013"}, {"body": "rstankov example insert view dom content content arrives render view content would still empty default div replaced proper template replaced anything empty div replace div later nt see difference disadvantage fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding mean evaluate template data working empty div nt see dataanything actually inserting stuff using templates element using templates populate difference current way things inserting said div dom since step processing template nt really change two approaches currently place contents template inside div hence container hardcoded application second approach replace div template copy events nt require markup hardcoded application using templates throw content container using templates define actual container nothing changes use default div regard add conditions complicate workflow nasty dom element replacement event binding conditions yes would nt call want replace template nt see problem said feel current approach heavily based holding hand practical needs views nice clean independent markup able make application changing template alter way application structured ie changing using using clean using pattern add classes attributes markup going though programming hoops needing duplicate code support multiple approaches markup thinking difference probably implemented simply extra method would use want template replaced inserted", "d": "4/2013"}, {"body": "basic prototype implementation discussion purposes javascript appview backboneviewextend would use base view eg javascript function windowjquery", "d": "4/2013"}]