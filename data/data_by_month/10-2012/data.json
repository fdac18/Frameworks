[{"title": "modelgetmodelhas behaviour certain javascript implementation defined attribute names", "body": "simple example expected result nullundefined actual result function returns constructor property modelattributes object value model attribute set method also problem typical mistake using objects hash tabledictionary please use hasownproperty", "num": "1783", "d": "10/2012"}, {"title": "binding view states routes", "body": "general question ticket backbone best practices thinking optimal way structure backbone application problem various complex states made views showing others hidden canonical way handle backbone two things thought either controlling state router calling views hide show methods making views listen route event problem first method router must aware views existing application problem second solution make views listen events hide couple make show thanks pointing lean solution", "num": "1781", "d": "10/2012"}, {"title": "rename viewoptionscollection", "body": "little words talking document collection model meaningless access models collection nothing view model confusing bad practice view parent view dom node however name confuses modelcollection rename", "num": "1780", "d": "10/2012"}, {"title": "infinite redirect loop old browsers", "body": "bug backbone supposed work way sure backbone identifies browser nt support push state tries fall back hashurl use instead sometimes causes infinite redirect loop consider following case user enter server identifies path redirect browser backbone identify browser nt support push state redirect browser server ignores hash part path identifies path redirect browser infinite loop cases handled", "num": "1779", "d": "10/2012"}, {"title": "trigger event attaching view dom", "body": "often required tweak view el attached dom example chosen current backbone implementation always hard know view already attached dom attach code event fired would great could add event triggered whenever view el attached dom", "num": "1778", "d": "10/2012"}, {"title": "optionally namespace data backbonesync", "body": "apologies already discussed would nice could optionally namespace data sent server order support following pattern could used pretty simple way could implemented checking namespace backbonesync", "num": "1777", "d": "10/2012"}, {"title": "provide backbone modelcollection first parameter jquery deferred callbacks", "body": "hi leveraging deferred objects returned backbonesync calls extensively application found convenient particularly views depend multiple models one case struggled nested backbone views forced provide collection instance deferred object child view constructor var backboneviewextend render function var collection new backbonecollection collectionurl pathtoresources var backboneviewextend initialize function thiscollection thisoptionscollection thisdeferred thisoptionsdeferred example fairly trivial quickly becomes complex hierarchy grows particularly certain views hierarchy blocked rendering based data ready would nice deferred would modified slightly collection model provided first argument callbacks var backboneviewextend render function var collection new backbonecollection collectionurl pathtoresources var backboneviewextend initialize function thiscollection thisoptionscollection thisdeferred thisoptionsdeferred attached pull request issue illustrating potential fix certainly open suggestions approaches take thanks phil", "num": "1774", "d": "10/2012"}, {"title": "minimalistic validation framework", "body": "use case provide simple way define frequently used validations optional nt use backward compatible nt get way nt need looks define attribute validations method works exactly usual call return error messages form implementation coffeescript class appmodel extends backbonemodel making validate default run validations validate attrs runvalidations attrs runs validations defined attribute model runvalidations attrs return null unless validations errors k v attrs msg validations k v errors k push msg msg errors size gt errors else null still backward compatible nt provide attribute work usual also override supposed used current version backbone", "num": "1771", "d": "10/2012"}, {"title": "extension points attribute setter", "body": "sometimes would nice ability extend attribute setters done changing current version believe optimizations speed use case one possible use cases make attributes available directly model backward compatibility ie acces ways direct usual extendable setter done simple javascript deleteattribute function attr delete attr delete attr setattribute function attr value attr value attr value think", "num": "1770", "d": "10/2012"}, {"title": "naming convention collections model", "body": "suggesting rename model property model constructor good convention start constructors uppercase letter", "num": "1765", "d": "10/2012"}, {"title": "initialize constructor documentation", "body": "learned significant amount backbone initialize constructor functions last week better documentation would helped lot example mymodel mycustomparameter object structure problem mycustomparameter properties get copied mymodelattributes nt want happen temporarily decided override constructor function handle custom object adds complexity overridden constructor still call superclass constructor doable ugly opinion final solution explicitly state parameters backbone uses default add custom parameter afterward example create model would call like keeps backbone functionality allows properly extend ran similar problem views solution similar explicitly state backbone default parameters collections work similarly models options parameters would great documentation talked initialize method stressed standardized way using feel like initialize method always called parameters backbone uses default add parameters afterward clean keeps backbone functionality allowing extend", "num": "1764", "d": "10/2012"}, {"title": "model hasa collection attribute", "body": "developing interface presented table format data pagination filtering etc would like presented one backboneview backbonemodel array data filters etc parameters would like array backbonecollection problems collection model maybe something wrong help please rendering template \u0441onvert collection array via toarray underscore var productitem backbonemodelextend var productlistcollection backbonecollectionextend model productitem var productlist backbonemodelextend defaults limit itemslist new productlistcollection var productlistview backboneviewextend var catalog new productlist var prodview new productlistview model catalog", "num": "1763", "d": "10/2012"}, {"title": "question backbone amp testing amp angular", "body": "talked someone said angularjs framework backbonejs library stmt correct far know bb also type framework testing tool ur using test bb qunit", "num": "1760", "d": "10/2012"}, {"title": "make root object global instead moduleexports running node module", "body": "currently backbone run node module server root object equal moduleexports see issue background would handy root object set global instead moduleexports private module never inject anything backbone root namespace currently came experimenting rendering backbone views server needed inject stubs documentcreateelement currently way since global scope effectively completely private", "num": "1755", "d": "10/2012"}, {"title": "question routing url rewrite ie", "body": "encountered peculiar issue dealing backbone routing app hosted like hook event triggered appear address bar set rewrite rule androuter settings inside backbonerouterextend router instantiated works great firefoxchromesafari access event hook cool tried toggling pushstate option hope could help whenever accessing page redirected instead actually displaying content suppose nonissue change event hooking url something like however ca nt touch part anyway make either working expected without pushstate", "num": "1753", "d": "10/2012"}, {"title": "incorrect comment global scope node", "body": "beginning code line current master comment says save reference global object browser global server far tell incorrect server case node case root object module global although fact would quite nice root object global node nt going case least comment fixed accurate", "num": "1751", "d": "10/2012"}, {"title": "documentation explain view constructor extends thisoptions options argument", "body": "unless functionality subject change think docs explain constructor really extends rather replacing behavior seems provide pattern providing default options view overridden options passed constructor however nt clear docs", "num": "1749", "d": "10/2012"}, {"title": "collectionget problem custom idattribute", "body": "latest master new test fails expecting something nt true", "num": "1748", "d": "10/2012"}, {"title": "assynchronous backbone routing problem", "body": "big backbone application loads new backbone apps assynchronous also routes loaded point apps loaded differently user user right use historystop add new route historystart add new routing comes big drawback times every time appnavigate x executes routing times view renderings", "num": "1747", "d": "10/2012"}, {"title": "chaning model value inside callback change event", "body": "hi real use case tests sure desired behaviour var foo backbonemodelextend var foo new foo property fooon change property function model consoleinfo change property modelget property modelprevious property var flag true fooon change function model consoleinfo change modelget property modelprevious property flag flag false fooset property fooset property outputs change property change change bothers second change event intuition tell value nt changed event nt fired new comes backbone thanks advance", "num": "1745", "d": "10/2012"}, {"title": "question retrieving model attribute", "body": "way retrieve model inside collection model attribute", "num": "1740", "d": "10/2012"}, {"title": "ca nt fetch model collection idattribute set", "body": "using mongodb backend setting id within models however backbone ca nt reference id models placed collections example javascript define model custom idattribute var meal backbonemodelextend idattribute id define collection var meals backbonecollectionextend create model var new meal id name cake create collection insert model created c new meals model find model id within collection nt seem match idattribute reason cget returns expect cake model", "num": "1738", "d": "10/2012"}, {"title": "bug incorrect values previousattributes setting silently", "body": "following collection one model may state therefor following actions model triggers change event foo state previousattributes model bar triggers change event bar state model foo nt trigger change event previousattributes set would like add something helps us trigger event internally values set correctly using backbones api correctly everywhere like setting directly", "num": "1737", "d": "10/2012"}, {"title": "bug models", "body": "constructor therefor never use attributes parse getting ignored solution", "num": "1735", "d": "10/2012"}, {"title": "collectionget assumes idattribute id", "body": "talking code starting line nt something like instead", "num": "1729", "d": "10/2012"}, {"title": "question assign index models instantiation", "body": "anyway let newly instantiated model know index inside collection assign something like", "num": "1728", "d": "10/2012"}, {"title": "modelfetch remove attributes longer found model", "body": "model preexisting attributes either previous load manual set operation removed fetch contained server response model new backbonemodel modelurl apimodel modelset bogus quick brown fox modelfetch modelget bogus gt quick brown fox", "num": "1727", "d": "10/2012"}, {"title": "native empty input fields send null server", "body": "backbonesync function following code called jsonstringify convert seem like empty strings nulls bug information really backbone issue know something like following believe issue go away friendly", "num": "1724", "d": "10/2012"}, {"title": "dependencies", "body": "hi confirm underscore jquery methods needed backbone work want implement code rather using libraries thanks", "num": "1722", "d": "10/2012"}, {"title": "fetch add true attaching phantom object collection", "body": "currently adds empty object original collection even fetched response lead unexpected errors processing collection data intended", "num": "1721", "d": "10/2012"}, {"title": "docs page links todo example", "body": "affected page second link page returns presumably correct link reference", "num": "1720", "d": "10/2012"}, {"title": "question raw response server", "body": "get raw response server using etc whose raw responses wo nt passed", "num": "1719", "d": "10/2012"}, {"title": "issues modelspy", "body": "related python django one model inherit data table b many fields wants create another table c consists three fields id b id one field insert values admin panel third table c takes value automatically means one row inserted", "num": "1718", "d": "10/2012"}, {"title": "reference inheritance", "body": "question potentially bug hopefully question trying create slightly enhanced view create instances view enhanced view var enhanced backboneviewextend foo test function thisfoopush mathrandom couple new objects var foo enhancedextend var bar enhancedextend instantiating var foo new foo var bar new bar trying push random number foo footest bartest expecting see something like consolelog foofoo barfoo one would expect see different values output however one gets array length identical values instances looking code around line one see following ctorprototype parentprototype order create truly new instance would nt ctorprototype extend true parentprototype suited better would solve problem described array foo feels like static instance variables know prescribed version use initialize instance variables would suggested fix wrong thanks", "num": "1715", "d": "10/2012"}, {"title": "way modify collection arguments", "body": "new collection instantiated following happens unfortunately nt give initialize way tweak models instance someone wanted make collection took object instead array would great backbone passed models directly initialize edited within initialize rather via arguments currently js wo nt let modify arguments b set initialize pass way initialize modify c initialize returns anything pass reset instead models add initialparse option something effect reset pass reset way user override reset something arguments e provide way modifying collection inputs get reset models", "num": "1711", "d": "10/2012"}, {"title": "change event triggering properly model attribute changed within event handler", "body": "hello basic test case sure whether bug working expected though behavior feels wrong basically change model attribute within change handler case unset color attribute processing change name event change event gets fired model appear work correctly fired changes hash returned change event lists name supposed work would expected change fire twice attribute changes since occurred independently one another would expected single change event fire listed name amp color changes hash", "num": "1710", "d": "10/2012"}, {"title": "provide archived documentation", "body": "people started building application upon nowoutdated release always feasible stay edge even latest stable version backbone people documentation incorrect quite dangerous could links provided snapshots documentation apply older versions", "num": "1707", "d": "10/2012"}, {"title": "model get alias tojson", "body": "using coffeescript write code looks like seems place well example view rendering edit allowing multiple arguments would also work", "num": "1706", "d": "10/2012"}, {"title": "set collection url instantiation", "body": "currently impossible javascript var collection backbonecollectionextend var c new collection url pathtoapi constructor wrapper required achieve javascript var wrapper function options var collection backbonecollectionextend url optionsurl var c new wrapper url pathtoapi workaround overly complex enable ability set attributes eg url collection instantiation would handy situations api urls dynamically generated nt want redefine collection", "num": "1705", "d": "10/2012"}, {"title": "ca nt pass data attributes within view attributes method", "body": "fan setting attributes within view backboneviewextend attributes dataattr mydata however throws error due hyphen key dataattr uncaught syntaxerror unexpected token realize illegal token javascript keyvalue object however hoping backbone offered work around given fact passing data attributes one likely scenarios working around setting attribute within render function using jquery render function elattr dataattr mydata works thought ask another option", "num": "1703", "d": "10/2012"}, {"title": "alternative events trigger select functor", "body": "hi wondering alternative standard backboneviewextend events trigger selector functor special alternative function gets called lets bind events specific view without mix trigger css selector string without pass callback string rather reference latter less important former way least even binding way keeps trigger view selector separate would awesome alternative", "num": "1702", "d": "10/2012"}, {"title": "improve documentation", "body": "disables propagation model change events collections users ca nt expected know yet documentation makes mention", "num": "1701", "d": "10/2012"}, {"title": "unbind topic processing topic", "body": "callbacks named binded event event happens callback processed processing callback callback unbind event also event happens inmediatly callback processed second event process callback unbind event first event continues callback unbinded event called expected behaviour suppose goint option setup asynchronous behaviour thanks", "num": "1700", "d": "10/2012"}, {"title": "backbonesync overriding partially", "body": "way override backbonesync partially say leave rest untouched using native backbonesync perhaps way need right due restrictions imposed existing apis", "num": "1699", "d": "10/2012"}, {"title": "stops propagation events model collection", "body": "call without parameters events model stop getting propagated collection model belongs worked around removing readding model collection", "num": "1698", "d": "10/2012"}, {"title": "documentation hide left bar rather text text", "body": "firefox window starts really narrow text navigation text page overlap seem happen chrome firefox matters besides bug would nice responsive design nav area hide window narrow starts narrow link context sensitive help backbone objects little room inside firebug moment useless rather link real documentation host copy thanks see sample ps nt work likely description issue starts firefox lot stuff particularly webkit", "num": "1697", "d": "10/2012"}, {"title": "backbonehistorystart atroot var incorrectly set false locationsearch present", "body": "experience windowhistorystart pushstate option called something like autoupdatedeeplink pushstate loaded word specific compatible browsers backbone behavior seems enforce push state option passed also convert push state urls hash urls browsers nt support push state seen examples online people hook flag modernizrhistory gets set false ie makes sense current variable name behavior seeing context setting pushstate true ie get hash url auto update finding everything works great except pass querystring variables along hash url ex works fine redirects tracked strange behavior var atroot locpathname thisoptionsroot amp amp locsearch backbonehistorystart method set always expect web app site root querystring present make sense context querystring analytics present effect backbone atroot logic solution comment amp amp locsearch tldr seems backbonehistorystart considers web app root nt querystring present causing ie urls querystringhash lose hash value", "num": "1695", "d": "10/2012"}, {"title": "silent set change attr handler commited parallel one", "body": "javascript var new backbonemodel x mon change change function md v consolelog v mon change x function md v mset mset silent true mon change function md v mset mset silent true mset x foo bar lt expected mchange lt silents placed extensive test case think proper behavior", "num": "1694", "d": "10/2012"}, {"title": "concerned model security", "body": "hi simple backbone modelview combo validating login field calling data sent server process problem realised inspecting model calling see password stored model plain text developer dynamically change javascript via standard builtin browser developer tools see user password implement usernamepassword login securely backbone current modelview code follows model js define backbone function view js define modelscustomerlogin backbone function customerlogin", "num": "1690", "d": "10/2012"}, {"title": "issues django facebook connect", "body": "want use facebook connect app requirements user login facebook account see friends want import facebook friend list tried lot able login facebookbut still unable import user friend list also confused place facebook connect files let say project p app many django facebook connect setup available github many files setting urls managers models templates files etc confused app already files place files place entire folder app done without placing files please suggest good facebook connect fulfils requirements also use app", "num": "1689", "d": "10/2012"}, {"body": "adamglass thanks opening issue opened add change future please feel free make pull request things like helps cut issue noise one follow question incorrect text may explain typescript description file backbone wrong well huh", "d": "10/2012"}, {"body": "typescript essentially javascript application scale development typed superset compiles javascript video anders explains pretty well anyway make type checking useful need essentially typed descriptions frameworks start one backbone sample people building complete one latter described reset requiring first argument looked documentation found inconsistent thus issue", "d": "10/2012"}, {"body": "jachor thanks opening issue originate real world usecase curious people actually using attributes names edit something actually tripping people", "d": "10/2012"}, {"body": "wookiehangover new js app thing hit spend time debugging list attribute names causing problem longer favorite firefox watch", "d": "10/2012"}, {"body": "theory coffee people new backbonecollection name dexter morgan profession blood spatter anaylst shoes sneaky boots name debra morgan profession miami metro lieutenant watch fossil peoplewithwatches peoplefilter person gt personhas watch peoplewithwatcheslength webkit firefox obviously many ways could affect real application like said wookiehangover interesting never mentioned", "d": "10/2012"}, {"body": "hi pistacchio say either approaches fine works application large application event driven model help keep code modular testable smaller app least one less pages keeping logic central router might work better", "d": "10/2012"}, {"body": "always enough one instance model belong many collections make perfect sense explained initializeconstructor documentation snippet creating new view options pass attached view thisoptions future reference several special options passed attached directly view model collection el id classname tagname attributes", "d": "10/2012"}, {"body": "mornin yahasana convention instance use fairly open ended take look related source fairly short read notice attached property used one time disposal convention optional think documentation covers pretty well", "d": "10/2012"}, {"body": "mornin alexeypetrushin seems app rooted tried using", "d": "10/2012"}, {"body": "thanks advice actually root fixed hack instead falling back hashurls fall back page reload solution hacking backbonejs hardcode always available wo nt redirect hashurls updating method use redirect page reload push state available maybe worth add option backbone router something like fall back redirects instead hashurls push state available", "d": "10/2012"}, {"body": "see option passing cause backbone never use hash based routing", "d": "10/2012"}, {"body": "set wo nt work router wo nt redirect good also stops recognizing urls firing correct route actions get empty screen happens function implemented disabled argument passed false return null url instead actual url correct route handler wo nt called", "d": "10/2012"}, {"body": "afraid nt quite understand provide example code illustrates problem", "d": "10/2012"}, {"body": "sample code wo nt work old browsers correctly try navigate first chrome internet explorer type home url html var router backbonerouterextend routes home home lt p gt home function alert route home url fired new router backbonehistorystart pushstate true hashchange false simple http server responding url html page javascript var http require var fs require fs req res consolelog processing requrl reswritehead contenttype texthtml resend fsreadfilesync backbonerouterhtml listen", "d": "10/2012"}, {"body": "thanks example alexeypetrushin confirm issue running locally however using backbone replacing current master solves problem would mind giving shot", "d": "10/2012"}, {"body": "backbone never attaches view dom nt know wo nt happen want event feel free trigger", "d": "10/2012"}, {"body": "hi moudy exactly use something like following accomplish goal", "d": "10/2012"}, {"body": "braddunbar yes means every template needs reflect well need tojson take option conditionally namespace parse method modifying data coming seems like would appropriate way modify data going", "d": "10/2012"}, {"body": "right way modify data going closely match original example", "d": "10/2012"}, {"body": "braddunbar means every corresponding template need account namespace distinction calling rendering view saving server seems bad template data structure coupled data server expects", "d": "10/2012"}, {"body": "pass options uses context view disable wrapping data view", "d": "10/2012"}, {"body": "yethee right written something like nice need pass options conventions set assume models render correctly json called", "d": "10/2012"}, {"body": "moudy good points nt consider nested models", "d": "10/2012"}, {"body": "braddunbar yeah rendering nested models gets tricky realized example would nt work would need something like prettiest piece code something like would nice", "d": "10/2012"}, {"body": "curious ca nt method model typically end modifying model data one way another passing template never found anything wrong additional method similar braddunbar example overriding imo extension always favored complicating method signatures", "d": "10/2012"}, {"body": "wookiehangover could able declare much nicer adding another method whether server expects attributes namespaced varies enough apps option would useful would allow projects like backbone rails need override sync add namespace main thing struggling way pass options called means needs return data server expects default generally everywhere else used rending template view maybe namespacing better suited pluginextension although found hard patch add without recreating whole method", "d": "10/2012"}, {"body": "definitely wrong using situation patching correct way add functionality certainly without replacing whole method would use something like following thanks input wookiehangover thanks sticking moudy", "d": "10/2012"}, {"body": "imo extension always favored complicating method signatures wookiehangover wonderful sentiment think backbone espouses already perhaps elevate place somewhere conspicuous reference", "d": "10/2012"}, {"body": "braddunbar got thanks", "d": "10/2012"}, {"body": "braddunbar added tao backbone godmode", "d": "10/2012"}, {"body": "tao backbone ooh pretty fun idea might make nice section homepage", "d": "10/2012"}, {"body": "would really help developers get speed currently reading backbone source effective way understand backbone underlying philosophy tao might way codify modelview also going braddunbar point think framework backbone way", "d": "10/2012"}, {"body": "yes particularly backbone lightweight people tend misuse tao section things like managing sub views amp amp events state amp shared state views view models routers etc", "d": "10/2012"}, {"body": "yes", "d": "10/2012"}, {"body": "hi pmaccart reason ca nt use event collection trigger callback", "d": "10/2012"}, {"body": "started using scale application upwards layers nested backbone views cases became unwieldy supply modelscollections way views well keeping track particular modelscollections fetched experimenting deferred pattern found much pleasant code particularly cases single view requires multiple models pattern works great single view managing collections lots nested views rely different combinations data render things break much cleaner able provide deferred fetch trust collectionmodel fetch invoked upon would provided callbacks pull request shortly", "d": "10/2012"}, {"body": "closing pull request created issue still working polishing github skills", "d": "10/2012"}, {"body": "nice seems backboneesque", "d": "10/2012"}, {"body": "thanks opening issue alexeypetrushin like feature considered please reopen pull request", "d": "10/2012"}, {"body": "alexeypetrushin thanks opening issue would confuse line properties model instance model attributes would likely cause lots breaking changes", "d": "10/2012"}, {"body": "maybe nt explained clearly nt mean implement new type setter change behavior showcase one many possible usage attribute setter extensions ie proposed change wo nt change anything gives users ability easy extend setter wish right easy javascript optionsunset thisdeleteattribute attr else thissetattribute attr val deleteattribute function attr delete attr setattribute function attr value attr value", "d": "10/2012"}, {"body": "hi alexeypetrushin definitely ability already though agree wookiehangover comments nt recommend following code want without altering backbone", "d": "10/2012"}, {"body": "also though sure attribute set change event sure behave listeners expect attribute someone call", "d": "10/2012"}, {"body": "always add property models agree logic would easy alias transition immediately breaking also currently instance constructor nt consistent", "d": "10/2012"}, {"body": "heard convention capitalizing constructor variable never naming properties way except part namespace eg curiosity point example capitalized properties major js libraries open source projects etc", "d": "10/2012"}, {"body": "machineghost comes mind", "d": "10/2012"}, {"body": "looks good smile also sexy", "d": "10/2012"}, {"body": "afraid going leave lowercase indeed tend point constructor function serving variable name analogy english refer tom capitalize proper noun refer man happens tom lowercase despite referring entity ditto point", "d": "10/2012"}, {"body": "makes sense would consider case alias pronoun like tom also goes thomas exactly property also goes da boss though wink", "d": "10/2012"}, {"body": "erikringsmuth thanks opening issue documentation pretty clear model instances passed model attributes type use case overriding function nt enough implementation docs creating instance model pass initial values attributes set model define initialize function invoked model created rare cases looking get fancy may want override constructor allows replace actual constructor function model", "d": "10/2012"}, {"body": "mornin daemonz think good bit luck mailing list since github issues development backbone took liberty opening discussion", "d": "10/2012"}, {"body": "sure important distinction would call library usually hear described yes qunit used test backbone excellent unit testing tool often use test application code well", "d": "10/2012"}, {"body": "thanks ur answer important distinction agree think", "d": "10/2012"}, {"body": "afraid backbone intended work node module node modules supposed export things properly create global variables feel free change documentcreateelement behavior fork", "d": "10/2012"}, {"body": "create global variables nt say anything backbone creating global variables global scope backbone code root object node global scope seems consistent standard node module behavior", "d": "10/2012"}, {"body": "feel free send pull request currently sounds like asking backbone attach", "d": "10/2012"}, {"body": "yes right fact issue linked described comments code said setting root global nt work pr thanks", "d": "10/2012"}, {"body": "mornin gsklee definitely describing docs indicate like use pushstate support application use backbonehistorystart pushstate true nt need feature test backbone using tells backbone ie would like translate let know nt fix problem", "d": "10/2012"}, {"body": "hello braddunbar really woud like achieve get rid sign ie address bar way stop appearing inside address bar using backbone routing pushstate", "d": "10/2012"}, {"body": "use prevent client side routing make navigation use full page reload looking", "d": "10/2012"}, {"body": "nevermind figured like achieve technically impossible ie browsers without pushstate", "d": "10/2012"}, {"body": "could wrong cursory test seems indicate inside iife node", "d": "10/2012"}, {"body": "yes inside iife evaluated passed parameter iife means value determined outside iife point equal module global", "d": "10/2012"}, {"body": "right left end appears result also appears executed module way would expect executed", "d": "10/2012"}, {"body": "yes equal moduleexports global running module guess never mentioned running module part sort implied though guess could run backbone server module would nt people running backbone server running module never really occurred run way", "d": "10/2012"}, {"body": "definitely nt think first tests think comments read instead serverside enviroments nt often use serverside javascript vms", "d": "10/2012"}, {"body": "could nt even name serverside javascript platforms could nt say work guess saying exports moduleexports fine otoh would way cooler way make original comment accurate root global node experimenting rendering backbone views server way inject stubs backbone global scope effectively private module", "d": "10/2012"}, {"body": "kevindente updated comment accurate think useful definitely open another issue describing thanks pointing", "d": "10/2012"}, {"body": "always thought undocumented behavior bit strange soon remove situations useful", "d": "10/2012"}, {"body": "seems provide pattern providing default options view overridden options passed constructor iirc exactly think number places view defined default configuration options instantiate configure without losing previous defaults", "d": "10/2012"}, {"body": "think lets implement similar pattern defaults properties like defined view declaration overridden perinstance basis use parameterizing clientside templates sometimes", "d": "10/2012"}, {"body": "jashkenas like wish documented written bunch views defined defaults property calling defaults thisoptions thisdefaults beginning inititalize method realizing configure behavior sticking around happy take pass documenting doc sources live", "d": "10/2012"}, {"body": "indexhtml main repo", "d": "10/2012"}, {"body": "nevermind found error", "d": "10/2012"}, {"body": "mornin cinezaster afraid nt quite understand problem provide reduced test case displays issue", "d": "10/2012"}, {"body": "read post mailing list think understand problem instead starting stopping history object create new one routes actually stored history object router", "d": "10/2012"}, {"body": "right routes callbacks stored added brad thu oct cinezaster notifications githubcomwrote thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure appjs reply email directly view github", "d": "10/2012"}, {"body": "thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure first routerjs define coremodelssession coreviewsauth corecollectionscubes function session authview cubescollection var approuter backbonerouterextend routes login showlogin logout dologout path loadapp showlogin function alert login viewauthrender dologout function viewauthlogout loadapp function path pathlength path home apploaderloadapp path true cubes trigger loading first needed app allowed view app app loaded require initiated means try add new routes try load new routes like know right way tried extend routerapp see know clue already made backbone applications never added new routes total new app structure existing backbone app", "d": "10/2012"}, {"body": "mlowicki believe bug created fix result case would fixed soon pending review jashkenas braddunbar", "d": "10/2012"}, {"body": "yep see multiple models returned use want one model returned", "d": "10/2012"}, {"body": "yep good candidates", "d": "10/2012"}, {"body": "mornin dhruvbhatia think problem got method signature collection constructor bit mixed try instead", "d": "10/2012"}, {"body": "thanks opening issue theluk worth nt create inconsistent behavior unit tests modelparse still passing since reference changes also reflected change introduced addressing inconsistencies passed model constructor said internally consistent variable referenced constructor attributes gone ahead submitted pull request address", "d": "10/2012"}, {"body": "hi lperrinfano normalized property regardless value take following example instance change necessary", "d": "10/2012"}, {"body": "ok passing object wrapped model collectionremove thinking collection would handle transparently like collectionadd", "d": "10/2012"}, {"body": "collection get expects id model perhaps clarified docs", "d": "10/2012"}, {"body": "addresses documentation", "d": "10/2012"}, {"body": "thanks quick reply", "d": "10/2012"}, {"body": "get index model collection using indexof nt access collection view know model inside particular collection always get collection like would nt recommend storing index model time add additional model update index values model collection", "d": "10/2012"}, {"body": "feeling stupid thanks", "d": "10/2012"}, {"body": "correct server allowed update attributes cares set nt return attributes potentially large response semantics want clear value set", "d": "10/2012"}, {"body": "would recommend patching globally anything would use stringify backbone", "d": "10/2012"}, {"body": "thank opening issue tysonnero including resolve listed dependency docs even though browsers support json suggested order address issues old ie json either nt supported incorrectly implemented whatever reason easily override backbonesync include workaround caseywebdev going clobber global might well use crock implementation squirrel", "d": "10/2012"}, {"body": "seems even though include default ie native behavior happening read stackoverflow answer native implementation exists including overwrite native implementation", "d": "10/2012"}, {"body": "nt think going best interest libraries lots work put lots people", "d": "10/2012"}, {"body": "ca nt pretty easy determine grep underscore methods grep jquery methods", "d": "10/2012"}, {"body": "nt forget array underscore methods mapped collections", "d": "10/2012"}, {"body": "add empty model collection want means array models empty nothing added question nt fetched json returning", "d": "10/2012"}, {"body": "quite right use ensure undefined results return empty array thanks caseywebdev", "d": "10/2012"}, {"body": "great explanation thanks caseywebdev", "d": "10/2012"}, {"body": "either add function options second parameter success function passed raw response", "d": "10/2012"}, {"body": "anthonyshort right callback contain server response hope helps", "d": "10/2012"}, {"body": "great thanks", "d": "10/2012"}, {"body": "way leverage ajax deferred promise using way", "d": "10/2012"}, {"body": "recall correctly returns model ca nt use deferred methods like could instantiate new model call get behaviour", "d": "10/2012"}, {"body": "hi tracker backbonejs issues perhaps looking django project source repository", "d": "10/2012"}, {"body": "hi ndanson give try instead prototype properties indeed shared javascript instances unique value instance need set explicitly", "d": "10/2012"}, {"body": "suppose following var foo viewextend initialize function consolelog toast yummy var foo new foo view initialize overwritten foo initialize thereby variable foo wo nt available foo anymore design", "d": "10/2012"}, {"body": "always call method prototype like", "d": "10/2012"}, {"body": "thank prompt replies indeed solve issue question provide deep copy option rather keep writing boilerplate code assuming project likely hundreds views thanks", "d": "10/2012"}, {"body": "glad help sure boilerplate talking referring super call reality inheritance javascript calling super methods rather verbose", "d": "10/2012"}, {"body": "thank patience much appreciated understand inheritance js fact question would rather provide option deep copying within backbone framework example describing problem included potential solution functionality rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general thanks", "d": "10/2012"}, {"body": "rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general examples instance shares prototype variables functions one example also default values good examples assuming need", "d": "10/2012"}, {"body": "last question nt option deep copying", "d": "10/2012"}, {"body": "ndanson objects arrays passed reference object properties prototype items need set explicitly per instance deep copying costly performance standpoint almost every case different solution would better suited something still want find something backbone", "d": "10/2012"}, {"body": "ps technically way work around issue pretty fugly pretty ugly right warn", "d": "10/2012"}, {"body": "machineghost current master branch functionality supported calling collection function specifying collection options", "d": "10/2012"}, {"body": "additionally nt like initialized called always welcome overloadwrite constructor function including wrapping existing functionality whatever modifications wish", "d": "10/2012"}, {"body": "tgriesser awesome ca nt wait get released knowtheory overloading initialize function easy allowed even encouraged framework contrast writing constructor function essentially requires remaking backbonecollection scratch huge amount copypaste required zero support framework sure like replace reset initialize function another reset something replace real reset sane programmer would run screaming opposite direction code", "d": "10/2012"}, {"body": "machineghost overloading constructor nt bad think really different method override", "d": "10/2012"}, {"body": "tbranyen idea could extremely handy thanks hope sake bb users feature gets documented point future right bb documentation actually refers constructorinitialize one thing implying constructor enduser access initialize mention anywhere else", "d": "10/2012"}, {"body": "write user misunderstanding thought change event included attributes changed hash nt realize could call instead worked fine", "d": "10/2012"}, {"body": "download old docs pattern agree might nice formal way viewing archived docs", "d": "10/2012"}, {"body": "could documentation checked git along code every tagged release browse github also grab documentation html page render fine locally nt know business hosting old versions docs online considering fairly easy keep date", "d": "10/2012"}, {"body": "mornin aeosynth use purpose", "d": "10/2012"}, {"body": "docs specifically warn also used attributes multiple values use single values well ignore entirely", "d": "10/2012"}, {"body": "fine way go mainly parallelism override something special wish", "d": "10/2012"}, {"body": "case warning removed modified currently explicitly directly reading attributes hash", "d": "10/2012"}, {"body": "docs please use set update attributes instead modifying directly like retrieve munge copy model attributes use tojson instead nt modify using retrieve values perfectly good practice", "d": "10/2012"}, {"body": "js var collection backbonecollectionextend var c new collection curl pathtoapi seems like pretty simple solution", "d": "10/2012"}, {"body": "yep javascript object use quoted keys", "d": "10/2012"}, {"body": "ahh thought tried thanks", "d": "10/2012"}, {"body": "suggest passing data attribute view dom element attributes within view model attributes dataattr thismodelfoo losing scope reference uncaught typeerror read property model undefined", "d": "10/2012"}, {"body": "use function like", "d": "10/2012"}, {"body": "awesome works perfectly thank prompt responses", "d": "10/2012"}, {"body": "welcome future please nt use bug tickets tech support like try irc channel mailing list first", "d": "10/2012"}, {"body": "happy tried first one user documentcloud irc turjakas responding", "d": "10/2012"}, {"body": "must mistyped folks documentcloud freenode right", "d": "10/2012"}, {"body": "special alternative function gets called lets bind events specific view without mix trigger css selector string afraid reason would rather concatenate event selector found object syntax rather succinct without pass callback string rather reference pass function instead string callback also work calling directly", "d": "10/2012"}, {"body": "use jquery", "d": "10/2012"}, {"body": "syntax succinct puts two completely different things string effectively making mystery string first word trigger whitespace selector get trigger back split whitespace always going true maybe maybe using jquery el good suggestion thank", "d": "10/2012"}, {"body": "want unbind callback asynchronously asynchronously", "d": "10/2012"}, {"body": "nope either avoid creating models already know id copypaste put", "d": "10/2012"}, {"body": "certainly without copy paste return results original unless method", "d": "10/2012"}, {"body": "much much better idea", "d": "10/2012"}, {"body": "pretty sure intended behaviour calling without parameters removes events including setup collection might nicer could namespace events", "d": "10/2012"}, {"body": "event propagation model collection implemented using events invisible user model event handlers added model user nt mixed event handlers used internally backbone understand backbone behaves way currently argue current behavior bug", "d": "10/2012"}, {"body": "never personally run issue usually remove events using context see point", "d": "10/2012"}, {"body": "intended behavior internal events nt meant invisible hidden behind scenes convenience use extend disable see fit example use disable default modelcollection set events replace trigger slightly different circumstances", "d": "10/2012"}, {"body": "good morning fishmongr thanks pointing given backbone ignores search parameters every area including transition opposite direction agree ignored case addressed please let know nt work", "d": "10/2012"}, {"body": "great thanks speed patch verified patch fixed issue diff version backbone noticed ton changes since last downloaded version nt version number changing signify code changes", "d": "10/2012"}, {"body": "yep next released version backbone probably", "d": "10/2012"}, {"body": "thinking case well working different scenarios addressed concluded loud changes nested inside change blocks discouraged particularly inside individual attribute change events guaranteed particular order javascript objects guaranteed follow insert order nt sure test suggests two callbacks listening change event guaranteed previous attributes seem intuitive would case although opinion would better somehow consolidate two listeners one making special exceptions nested loud changes javascript single threaded would difficult maintain divergent model histories loud changes given special treatment inside change blocks order backbone events fire events individual attribute changes fire single model change event others finished example called first point fired loudly amp logged set silently called calls loud change definition takes current changes amp pending silent changes queued fires believe would expected behavior event would fired despite change level say general rule thumb nt fire multiple loud changes model inside nested change blocks need consolidate final event guaranteed fire last majority applications write heavily event driven nt yet run case functionality would issue could wrong braddunbar jashkenas", "d": "10/2012"}, {"body": "hello tgriesser sure js guaranteed insert order object implied eg could logged different order believe come otherwise behavior could predictable think solution issue n include threads processes seperate nested handlers environments empty pending list provision collect pendings every parallel event emission propagate collected pendings next general", "d": "10/2012"}, {"body": "stegrams would happen conflicting changes models happen level build pending list would take precedence var new backbonemodel x mon change change function md v consolelog v mon change x function md v mset mset silent true mset conflicting ysilent silent true mon change function md v mset mset silent true mset conflicting xsilent silent true mset x foo bar mchange also example functionality issue real world case", "d": "10/2012"}, {"body": "yes tgriesser case collected pendings handler overlaped ones idea bulletproof think idea promotes little project maybe future someone else get farther ahead thats suppose works nt real world case proves improvement never necessary", "d": "10/2012"}, {"body": "yep think expected desirable idea changes wait next loud change state occur case next loud change immediate already inside", "d": "10/2012"}, {"body": "hello jashkenas meaning next two changes set simultaneously loop always guaranteed case come think least note documentation loud changes inside change handlers discouraged tgriesser mentioned", "d": "10/2012"}, {"body": "nested change handlers always tricky probably avoided general case loud changes inside change handlers avoided modelon change x gt modelset value modelset x value change value change x value fine", "d": "10/2012"}, {"body": "afraid nothing backbone insecure javascript website able sniff passwords nt allow insecure javascript site xss third party scripts etc use https nt store password client side moment longer takes send server hashed", "d": "10/2012"}, {"body": "jashkenas best procedure using backbone logon area nt https totally understand passwords nt stored hence concern realised model code actually getting handled using concepts modelsviews using model could validate data usernamepassword make sure correct format even model view manually validate fields use ajax send data server form post action handle standardtraditional way https available would safe ajaxing data across assume javascript still client side intercepted unless missing something", "d": "10/2012"}, {"body": "login form http password sniffed man middle anyone unencrypted wifi network ideally entire site runs https certainly page provides loggedin functionality needs backbone nothing password present field less secure present model page", "d": "10/2012"}, {"body": "jashkenas problem understand backbone issue ask take brief moment look following code advise whether would safe assumption running https site effectively storing form fields longer model literally validating letting form submit server per traditional post method js define modelscustomerlogin backbone function customerlogin", "d": "10/2012"}, {"body": "yep use https endtoend site nt xss holes sending password server fine nt matter keep around temporarily model", "d": "10/2012"}, {"body": "jashkenas ok thanks", "d": "10/2012"}, {"body": "afraid backbonejs nt particular connection either django facebook connect good luck getting sorted", "d": "10/2012"}, {"body": "got page found error requesting login urlbut shows error shows list url url file required url looking error page page found request method get request url using urlconf defined webdevurls django tried url patterns order namehome polls admindoc admin edit customerreg checkout order upload product profile logout login p namesocialauthbegin complete p namesocialauthcomplete associate p namesocialauthassociatebegin associatecomplete p namesocialauthassociatecomplete disconnect p namesocialauthdisconnect disconnect p p namesocialauthdisconnectindividual current url login nt match list see url file url nt access", "d": "10/2012"}, {"body": "matthewwithanm addressed right introduced regression thanks pointing", "d": "10/2012"}, {"body": "braddunbar thanks fixing quickly", "d": "10/2012"}, {"body": "agree xiaoli modelset id silent true shoud prevent firing event update byid please fix example", "d": "10/2012"}, {"body": "worth agree changed set validate values changed save validate attributes isvalid similarly validate attributes", "d": "10/2012"}, {"body": "would completely agree genexp comment would seem sensible solution", "d": "10/2012"}, {"body": "tgriesser recent refactor fix", "d": "10/2012"}, {"body": "jashkenas nt think valid issue begin shows times expected based change rules current master refactor", "d": "10/2012"}, {"body": "ah better", "d": "10/2012"}, {"body": "closing favor pull request", "d": "10/2012"}, {"body": "plugin something similar overloading events nondom events seems like bit overhead", "d": "10/2012"}, {"body": "yep much bug known limitation take care attribute keys making proposed patch would cause working code webkit firefox error internet explorer situation like avoid much possible", "d": "10/2012"}, {"body": "getting error well however removal function view called dispose got add stuff hence wrapped method boiled working remove calling like thismaptraildetails thismaptraildetailsdispose keep getting maximum call stack size exceeded error mentioned though", "d": "10/2012"}, {"body": "using edge version calls essentially calling case", "d": "10/2012"}, {"body": "issue assumed dispose safe use mistake renamed destroy works expected thank", "d": "10/2012"}, {"body": "looks like patches yet feel free send pr specific improvements docs always welcome", "d": "10/2012"}, {"body": "change ok understand correctly gt eg actually option allow models form collection individually trigger event updated datas existing models server response right addremove new models response collection missing models collection response respectively ed thank", "d": "10/2012"}, {"body": "understand correctly backbonecollection fetch gt eg master actually merge true option allow models form collection individually trigger change event updated datas existing models server response right yes seems correct addremove new models response collection missing models collection response respectively added remove collection reset appropriate type operation", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "another example useful mixin would able classagnostic common hook came backbone google group", "d": "10/2012"}, {"body": "fixed master needs get merged ghpages", "d": "10/2012"}, {"body": "convention global objects reference removes doubt", "d": "10/2012"}, {"body": "well could documentation updated generates urls form collectionurl id falling back urlroot id model part collection", "d": "10/2012"}, {"body": "tgoffman learning code rely lot documentation writing jasmine tests right trying hunt problem tests hours trusting docs true looked source voila", "d": "10/2012"}, {"body": "jashkenas sorry slow response think indeed misreading tests possibly applying diff current master demonstrates failure diff diff git itestrouterjs wtestrouterjs index itestrouterjs wtestrouterjs document ready function optional item optionalitem splatargsend splat firstcomplex partrest complex abc thingx thing entity args query anything anything document ready function thisroute implicit implicit thing function thing thisthingarg thing counter function thiscount document ready function equal routertesting test query string function locationreplace backbonehistorycheckurl equal routerthingarg foo test query string function locationreplace backbonehistorycheckurl equal routerthingarg bar test routes simple function locationreplace backbonehistorycheckurl query string test passes query string test fails", "d": "10/2012"}, {"body": "test fail nt think valid query string hash looks like one ignoring query strings work correctly", "d": "10/2012"}, {"body": "braddunbar ah right nt think adequately reproduce test suite running file going write small application demonstrate problem live example problem see running latest backbone nt see change would fix anywhere changelog see source", "d": "10/2012"}, {"body": "believe relevant change missing example noticed fragment used backbone longer contains search query", "d": "10/2012"}, {"body": "braddunbar ah thanks right set test server took look far tell fixed fixed master hopefully go next release", "d": "10/2012"}, {"body": "also running backbone also bit service added query param backbone url shed light use triggers page even though backbone route something like problem correctly triggers serverside serves page matter url hit", "d": "10/2012"}, {"body": "krunkosaurus suggesting strip search string seems reasonable though bit worried breaking backward compatibility fairly certain people currently use query strings fragments", "d": "10/2012"}, {"body": "definitely would nt want change breaks current apps backboneroute option ignore params", "d": "10/2012"}, {"body": "think pick strategy stick enough options", "d": "10/2012"}, {"body": "fine ignoring might decision side fence people", "d": "10/2012"}, {"body": "vote favor opting bb router parse query strings similar manner plugin passing parsequery true would cause bb parse query strings would keep backwards compatibility know would love ability thoughts", "d": "10/2012"}, {"body": "hswolff nt think parsing search params business backbone get routing search parameters semantically modifiers probably nt used use route handlers concern orthogonal best left plugin", "d": "10/2012"}, {"body": "appears current behaviour broken assume route running pushstate enabled trigger route workaround create second route triggers callback passes search params testing today seems latest code master changes behaviour triggers first route called presumably stripping search parameters parsing url however called nt trigger need add second route passed search parameters additionally observed following whether decision made ignore search parameters completely seems current behaviour inconsistent best", "d": "10/2012"}, {"body": "know thread fairly old closed solution thought may help anyone looking accomplish rewrite method create router force trailing slash option adding regex additionally would like route also case insensitive also place adding attribute return value javascript routetoregexp function route var namedparam wg var splatparam wg var escaperegexp g note method exact copy one default backbone library moved variables function", "d": "10/2012"}, {"body": "joshpangell support optional groups added following", "d": "10/2012"}, {"body": "would great core", "d": "10/2012"}, {"body": "response shesek comment actually better", "d": "10/2012"}, {"body": "zawaideh agree good solution except needs still return", "d": "10/2012"}, {"body": "like detect dead links either inside application external source application adds routes arbitrary times like callback route matches could event router listen", "d": "10/2012"}, {"body": "currently achiving adding following catchall route end routes router invalidroute showerrorpage", "d": "10/2012"}, {"body": "love clear time routes added might suffice workaround reset routes added spawn problems later much nicer would get callback route matches pretty please", "d": "10/2012"}, {"body": "also patch trigger whatever events like instance", "d": "10/2012"}, {"body": "um schrieb brad dunbar also patch trigger whatever events like instance good point thats probably still feel functionality supported framework monkeypatching reliable way regards martin", "d": "10/2012"}, {"body": "right altering ideal included could use custom history like following history api rather stable relying behavior fine idea write patch", "d": "10/2012"}, {"body": "added", "d": "10/2012"}, {"body": "since lot tiny backbone extension use big tripping point hash manipulating subview also changes original view backbone fails hard example original view helper means nt worry making function", "d": "10/2012"}, {"body": "would useful jashkenas backbone viewmodelcollection paradigm makes quick easy devs write complex stateful apps ends happening happened company new product time one discovers memory leaks abundance listeners attached model collection nested view ref parent view nt necessarily gced even parent view dom elements removed makes extremely difficult work solution builtin way track references even way track viewsmodelscollections added context view traverse array removing parent views listeners would spectacular", "d": "10/2012"}, {"body": "mjefferson view dispose recently added backbone think lays pretty good groundwork view disposal conventions check discussion topic disposing child views probably something backbone dictate easy enough provide semantics", "d": "10/2012"}, {"body": "think would happen output data backbone would output part site seoizable form idea", "d": "10/2012"}, {"body": "created service beta allows easily allow seo automatically generates sitemapxml backbonejs single page apps", "d": "10/2012"}, {"title": "accesing child view parent possible using handlebars", "body": "sorry ca nt reproduce full example tried jsfiddle hours could nt make anything work describing general issue view javascript emberviewextend template emberhandlebarscompile somehtml content null handlebars one somehtml var says ca nt find articleview articleview shows subclass emberview think expected behaviour would use variable view wondering crazy thing thing trying work ember requirejs want relative views something attached global variable thanks", "num": "1502", "d": "10/2012"}, {"title": "inner view class vs instance", "body": "hello trying create component holds parent main child nested views component related specific application seems like plugin ember interface component simple additem removeitem similar existing componentview want implement using original ember views keeping ember way implementation eg without explicit hacks overrides found lot examples ember documentation stackoverflow example based view documentation javascript var mainview emberviewextend template emberhandlebarscompile main view view innerview innerview emberviewextend template emberhandlebarscompile hello world mainviewcreate appendto body see innerview reference emberview class declaration run snippet everything works change line innerview emberviewextend innerview emberviewcreate code fails error error assertion failed must pass view class view helper innerview understand original flow parse handlebars template find references classes instantiate classes make binding contracts render want skip third step supply concrete view instance receive runtime config parameter component ca nt know class name reference component plugin agnostic environment big lack documentation operate objects runtime code samples documentation assumes application fully built handshakes design time thanks", "num": "1500", "d": "10/2012"}, {"title": "unsafe javascript attempt access frame url jsfiddle", "body": "using jsfiddle contributing guide error unsafe javascript attempt access frame url thrown multiple times emberjs irc channel said could safely ignored solution great errors running jsfiddle run chrome", "num": "1498", "d": "10/2012"}, {"title": "multiple emberapplication instances fail", "body": "hi built simple page two emberapplication instances results handlebar templates dom rendered incorrectly", "num": "1496", "d": "10/2012"}, {"title": "bindattr regular class attribute", "body": "mix match regular attribute given get expected", "num": "1495", "d": "10/2012"}, {"title": "exception removeobject clear array", "body": "sure bug something wrong trying remove object array calling removeobject get error line var chains thischains node chains key uncaught typeerror read property undefined also happens calling clear array populate collection like json data object looks like", "num": "1493", "d": "10/2012"}, {"title": "sorting property array objectcontroller update view", "body": "see problem like problem problem diferent check jsfiddle example alert first element array see array sorted view updated", "num": "1492", "d": "10/2012"}, {"title": "ember amp em available templates amd mode", "body": "using config options introduced remove dependency throughout ember amp accessed handlebars template following works property nt fails assertion probably check amp add exports question one takes president lookup amp exports name clash", "num": "1490", "d": "10/2012"}, {"title": "bug emberview context", "body": "lokking solution like solution wan na implement project ember pre dont work even lastest", "num": "1488", "d": "10/2012"}, {"title": "router url parameters", "body": "would helpful emberrouter supported url parameters primary use case make searching sorting filtering routable example wwwmyappcom users searchpointyhairedboss amp filtermanagers amp sortemail happy work like input approach little complex gobbled routes option available routes implicitly", "num": "1487", "d": "10/2012"}, {"title": "embersortablemixin nt remove reinsert items sort order nt change", "body": "", "num": "1486", "d": "10/2012"}, {"title": "childviews containerview connecting controller views", "body": "hey guys sure right place post containerview childviews childviews gets created applicationcontroller gets connected view respective controller fiddle problem design understanding containerview properly tnx", "num": "1485", "d": "10/2012"}, {"title": "handlebarsjs helpers nt work emberjs", "body": "creating handlebarsjs helper directly handlebarsjs helper works emberjs fails test helper simple helper creating links syntax demonstrated jsfiddle thanks time", "num": "1483", "d": "10/2012"}, {"title": "emview emobject hook like aftercreated instance created", "body": "want set created example want set property new instance called like said", "num": "1475", "d": "10/2012"}, {"title": "unable use volatile property property dependency", "body": "controller like two seconds load new element pushed contacts array proxy volatile call value remains one remove value even though volatile properties nt cached feel like still behave like regular properties ie propagate changes thoughts", "num": "1471", "d": "10/2012"}, {"title": "changed", "body": "upgrading app global find replace getpath setpath noticed app broken afterwards bit quick debugging revealed handlebars still getpath function renamed consistency figured would pose question", "num": "1469", "d": "10/2012"}, {"title": "default context action helper undefined", "body": "ca nt access context econtext event handle function default", "num": "1468", "d": "10/2012"}, {"title": "bindattr double colon syntax fails", "body": "syntax allows shorthand adding class property false bindattr class isenabled disabled work correctly", "num": "1461", "d": "10/2012"}, {"title": "event deferring needs capture listeners event names change events", "body": "example property foo changes add change listener changes new listener receive foo nt happen marked sent already based event name listeners notified", "num": "1458", "d": "10/2012"}, {"title": "ember package improvements", "body": "rakepipeline great tool select packages want build depending targetenvironment already commented nt use emberrouting could great emberapplication package would nt dependency emberrouting order package could skipped used also experienced similar situations emberhandlebars controls believe controls could separated different package", "num": "1455", "d": "10/2012"}, {"title": "would nice emberrouter support notfound page", "body": "would nice router supported page nt thought much mechanics implementation feels like common need doubt speak every case mine really need provide default stateroute entered specified route found edit removed term title description avoid confusion", "num": "1454", "d": "10/2012"}, {"title": "allow dynamic segment capture rest url", "body": "would great could capture rest url dynamic segment potentially capturing subsequent characters thinking route pattern like would yield context object like url", "num": "1451", "d": "10/2012"}, {"title": "emberselect ui displaying selected option", "body": "issue exists works expected ie issue select option emselect ui continues show prompt option case single space however bindings etc seem work expected select option ui shows expected looked diff two versions nothing immediately obvious new ember", "num": "1448", "d": "10/2012"}, {"title": "setting initial value emberselect", "body": "using emberselect view would like set initial selected value specific item looks like initial value set taken instead emberselect presents first item content list jsfiddle showing situation hacking found solution desired behaviour creating specific view using didinsertelement hook currently best available solution set initial selected value", "num": "1445", "d": "10/2012"}, {"title": "textsupport required attribute", "body": "would nice could use required attribute textfields fields matter example w embertextsupport", "num": "1444", "d": "10/2012"}, {"title": "collection view seems retain old observer elements even removed dom", "body": "collection view backed array controller initially populated three objects replace array new array containing object original array causes exception try change original object whose attribute observed collection view following jsfiddle demonstrates bug running click change click like get following exception happen emberjs", "num": "1441", "d": "10/2012"}, {"title": "unhelpful error message using array return objects", "body": "example see", "num": "1439", "d": "10/2012"}, {"title": "thissuper mixin willdestroy method calling resulting stack overflow", "body": "issue revealed bug welldemonstrated updated lukemelia original title mixins init destruction logic original issue initialize mixins individual methods corresponding destruction mechanism causes problems code readability maintainability often location mixing class directly deals mixins mixins require specific tear logic similar", "num": "1438", "d": "10/2012"}, {"title": "rename emberarrayproxy", "body": "hi everybody maybe wrong see right emberarrayproxy purpose arrays like emberobject objects totally confusing find emberarrayproxy emberarray embera emberarraycontroller embermutablearray nt would suggest rename emberarrayproxy emberarray emberarray something like emberarraymixin thanks", "num": "1437", "d": "10/2012"}, {"title": "handlebars blocks fail used outlet", "body": "hi guys set simple jsfiddle illustrating issue basically emberview rendered using routers outlet unless etc blocks handlebars template render value boolean provided rather toggling block see example seeing true see showme cheers w", "num": "1436", "d": "10/2012"}, {"title": "arrayproxy arrayproxy content forwards requests", "body": "arrayproxy content also arrayproxy requests forwarded javascript app emberapplicationcreate appparentproxy emberarrayproxyextend appchildproxy emberarrayproxyextend content null var onechildproxy appchildproxycreate var oneparentproxy appparentproxycreate content onechildproxy consolelog oneparentproxyget oneproperty gt undefined consolelog oneparentproxyget contentoneproperty gt oneproperty associated jsfiddle believe bug pretty important possible handle model relations arrayproxy use arraycontroller using emberdata also happens emberlatest also could wrong somewhere ca nt see", "num": "1435", "d": "10/2012"}, {"title": "nodenpm support", "body": "", "num": "1434", "d": "10/2012"}, {"title": "allow ember dev version work without handlebars compiler", "body": "requires us change works since currently requires present runtimeonly version handlebars emberprod embermin precompile template concern", "num": "1433", "d": "10/2012"}, {"title": "emberselect work complex types", "body": "according documentation value selected item set red property emberselect content populated objects see following jsfiddle expected behavior option nametom selected", "num": "1432", "d": "10/2012"}, {"title": "remove jsonstringify circular reference meta platforms nt support enumerable false", "body": "ca nt directly use get circular reference error ca nt meta object marked nonenumerable metasource links back object creating circular reference effect means safe generally use jsonstringify ember objects bad jsonstringify convenient debug marshalling etc even output nt perfect one relatively simple fix isdefinepropertysimulated snip results meta object appearing jsonstringify matches behavior chrome firefox etc", "num": "1431", "d": "10/2012"}, {"title": "initialization order affects observers", "body": "get run nt seems like unexpected behaviour windowapp emapplicationcreate applicationcontroller emcontrollerextend applicationview emviewextend router emrouterextend root emrouteextend barcontroller emcontrollerextend foodidchange function consolelog barcontroller gt foodidchange observes approuterfoocontroller foocontroller emcontrollerextend bazcontroller emcontrollerextend foodidchange function consolelog bazcontroller gt foodidchange observes approuterfoocontroller appinitialize", "num": "1430", "d": "10/2012"}, {"title": "nested computed values supported", "body": "example", "num": "1429", "d": "10/2012"}, {"title": "sorting content array arraycontroller update view", "body": "solution given issue nt work create view dynamically bind content controller could explain make work arrangement", "num": "1426", "d": "10/2012"}, {"body": "try", "d": "10/2012"}, {"body": "hello tchak thanks reply aware could access view way regardless nt work since content changes scope template think", "d": "10/2012"}, {"body": "hello tchak trying previews example nt work tried edit work regardless think articleview work well viewarticleview intuitive solution thanks", "d": "10/2012"}, {"body": "reneolivo well context different current view change context current view think accessing current view actually intuitive understand well relation context", "d": "10/2012"}, {"body": "predefined variable called view accesible handlebars script seems like patch intuitive solution keyword view also acts like sort predefined function include another view ie view someotherview scope using keyword view reference function also nt see reference view variable documentation see reference paths accesing parent scope using makes sense regardless available first example work sort bug tchak thanks kind help use quirky view reference mean time", "d": "10/2012"}, {"body": "reneolivo problem try go scope want variable keyword like keywords important depend scope affected property defined current view accessed via keyword scope usually case different quite sure docs looking", "d": "10/2012"}, {"body": "reneolivo", "d": "10/2012"}, {"body": "thanks tchak seems convenient use view variable though still think messy keyword different purposes regarding use want go scope right one uses somearray scope changes individual element array stuff like title title property element within array property view per se also someone point working startup jsfiddle ember could reproduce example must clearly bug", "d": "10/2012"}, {"body": "reneolivo possible bug behaviour describe clearly wrong refer witch parent context definitely defined current view", "d": "10/2012"}, {"body": "take look embercontainerview post question stackoverflow need additional help", "d": "10/2012"}, {"body": "big difference nested view created parent view nested view passed parent view need containerview could render regular view", "d": "10/2012"}, {"body": "great questions stackoverflow people future able better find whatever answer provided use github issues bugs feature requests", "d": "10/2012"}, {"body": "agreed posting nontricky solution exists containerview suffers issue accept instances view passed another view could acceptance view instance instead view class implemented feature thanks", "d": "10/2012"}, {"body": "demongloom array solution manage view instances runtime", "d": "10/2012"}, {"body": "suspect occurs attempting change url page router within iframe way around diagnose different root cause happy take look resolving unless adds unnecessary weight framework", "d": "10/2012"}, {"body": "yeah may unavoidable wanted record issue others encounter others add comments workarounds worth jsbin nt appear issue iframe", "d": "10/2012"}, {"body": "fiddle includes nt work latest ember github hours ago either", "d": "10/2012"}, {"body": "fail created fiddle router working fine", "d": "10/2012"}, {"body": "johncant nt allowed multiple anonymous inline templates longer see notes blog post", "d": "10/2012"}, {"body": "without router controller cheers wagenet solved", "d": "10/2012"}, {"body": "fao anyone else updating templates change update templates time none work", "d": "10/2012"}, {"body": "johncant seem little odd still anonymous templates", "d": "10/2012"}, {"body": "upgrading norm nt get round upgrading around months ago issue spent months particular project", "d": "10/2012"}, {"body": "johncant norm generally still one anonymous template nt hard give templates names handle way nt think something worried good luck", "d": "10/2012"}, {"body": "piece cake cheers", "d": "10/2012"}, {"body": "hello tipically question post stakoverflow minimal search would found solution", "d": "10/2012"}, {"body": "thanks nt googling problem reading ember documentation assumed complete enough", "d": "10/2012"}, {"body": "see additional information proposed syntax nt support", "d": "10/2012"}, {"body": "trek thanks understand situation better think describing behaviour documentation would valuable", "d": "10/2012"}, {"body": "already documenting", "d": "10/2012"}, {"body": "thank great trek glowacki notifications githubcom kirjoitti kello already documenting reply email directly view github", "d": "10/2012"}, {"body": "provide jsfiddle jsbin isolating issue", "d": "10/2012"}, {"body": "click delete item see error console", "d": "10/2012"}, {"body": "ok quite weird fixed code json objects coming c backend upper case properties converting lower case fixes problem deliberate", "d": "10/2012"}, {"body": "think using capitalize names handlebars makes search globals writing foobar think handlebars trying resolve namespace foo class property bar", "d": "10/2012"}, {"body": "sounds correct charlieridley sure simple fix short term might best sanitize data loading far ember concerned uppercase properties namespaces classes", "d": "10/2012"}, {"body": "wagenet yeah ok changed server output lower case properties thanks", "d": "10/2012"}, {"body": "charlieridley would consider issue sufficiently resolved feel free close always reopen think new insight", "d": "10/2012"}, {"body": "trek think fine require lower case perhaps validation throwing exception stating", "d": "10/2012"}, {"body": "probably using sortable mixin instead nt really work well observing system see let us know still problems", "d": "10/2012"}, {"body": "owilliams definitely nt seem good thanks catching", "d": "10/2012"}, {"body": "changing would solve template problem think may places check pr want", "d": "10/2012"}, {"body": "wycats nt namespaces lookup", "d": "10/2012"}, {"body": "kselden nt set seems like workaround owilliams would though admittedly pretty", "d": "10/2012"}, {"body": "said owilliams suggested patch probably good wycats thoughts since wrote", "d": "10/2012"}, {"body": "fan patch going lookup lookup exports think workaround intended sure complexity value", "d": "10/2012"}, {"body": "wagenet ca nt reference ember config like mentioned current workaround using var ember exports lookup app emberlookupem emberlookupember ember agree kselden though unless explicit reason complexity probably nt needed", "d": "10/2012"}, {"body": "workaround idea emberlookup", "d": "10/2012"}, {"body": "kselden concern always available manually specify seems redundant like boilerplate", "d": "10/2012"}, {"body": "idea break apart three concerns imports amd node modules modules future provided via explicit import mechanism imports object exports modules use explicit export mechanism cases exports object piggyback object necessarily lookup specifically modules may want extend lookup polluting original module export object bizarre errorprone way achieve goal lookup concept exist module systems naturally grates module systems trying particular lookup explicitly shared object across app modules ember project think right way achieve goals people amd wrapper explicitly add ember lookup javascript define ember exports app handlebars metamorph jquery function exports app handlebars metamorph jquery var imports handlebars handlebars metamorph metamorph jquery jquery define app function return define post app ember function app ember apppost emberobjectextend stuff", "d": "10/2012"}, {"body": "example app emberapplicationcreate would circular dependency ember maybe app module depend ember add emberlookupapp emberapplicationcreate", "d": "10/2012"}, {"body": "kselden yeah sorry mentioned currently app wycats ember could check set add would reduce boilerplate like wagenet mentioned", "d": "10/2012"}, {"body": "owilliams obvious every module wrapper ember would want behavior boilerplate real issue since provide canonical amd build ember correct semantics", "d": "10/2012"}, {"body": "clearlu bug see working fiddle", "d": "10/2012"}, {"body": "detailed blog post changed default view context", "d": "10/2012"}, {"body": "available history location hash one browser reload page", "d": "10/2012"}, {"body": "caligomentis seen used js router solutions past problem including additions ghempton routermanger old sproutcore statechartrouter port", "d": "10/2012"}, {"body": "maybe wrong playing around ember maybe trying place query string hash", "d": "10/2012"}, {"body": "confused nt pr fix", "d": "10/2012"}, {"body": "unfortunately nt solve issue performant way shouldnt copying array filter item sent iphone oct james croft notifications githubcom wrote confused nt pr reply email directly view github", "d": "10/2012"}, {"body": "way outlets work related", "d": "10/2012"}, {"body": "questions stack overflow tag good place ask", "d": "10/2012"}, {"body": "wagenet posted question seeing answer seems confirm answered", "d": "10/2012"}, {"body": "would nt expect work even issues since would bindings support see", "d": "10/2012"}, {"body": "zincli sort question belongs stackoverflow volunteers pretty good job getting answered said want perform something creating object overwrite method dealing views dom better ways however series lifecycle hooks likely want use specific example though sounds like logic belongs router nt much experience take look outlet guide", "d": "10/2012"}, {"body": "bradleypriest stackoverflow got thank much want init method could nt find read", "d": "10/2012"}, {"body": "mean setup chain property whose value new object every time get", "d": "10/2012"}, {"body": "means never cache value always recompute case means always get new array generated every time judging code exact opposite want suspect misunderstood method something want use", "d": "10/2012"}, {"body": "basically intent property got data remote service gets refreshed every time route displayed another property updates based value way trigger manual recalculation cached property", "d": "10/2012"}, {"body": "pharcosyle use tell property changed manually someproperty function fetching property connectoutlets function router routerget somecontroller notifypropertychange someproperty could set observer property set want refreshing someproperty function thisget needsrefresh fetching thisset needsrefresh false observes needsrefresh connectoutlets function router routerget somecontroller set needsrefresh true call refresh function controller router generally", "d": "10/2012"}, {"body": "cavalcade excellent solutions thank", "d": "10/2012"}, {"body": "offhand ca nt think reason changing", "d": "10/2012"}, {"body": "agreed", "d": "10/2012"}, {"body": "workmanw send pr", "d": "10/2012"}, {"body": "wagenet yeap got submit pr shortly", "d": "10/2012"}, {"body": "jsfiddle jsbin example", "d": "10/2012"}, {"body": "trek sorry newcomer ember jsfiddle thought jsfiddle provide emberjs version example jsfiddle", "d": "10/2012"}, {"body": "ah must coming earlier version ember default context removed could support multiple contextsthe relevant commit", "d": "10/2012"}, {"body": "trek great thanks", "d": "10/2012"}, {"body": "affects emberdata record materialization setproperties inverse associations", "d": "10/2012"}, {"body": "closing since failing spec rather track things one place", "d": "10/2012"}, {"body": "build ember locally get separate modules distmodules", "d": "10/2012"}, {"body": "perhaps nt explain correctly wanted point current dependencies force import unnecesary packagesmodules specific environments", "d": "10/2012"}, {"body": "ppcano true assume users want ember advanced make custom builds necessary probably document better", "d": "10/2012"}, {"body": "ppcano rereading see concern package dependency dependency nt trivial one look applicationjs lot code routing since strongly encourage every new ember application built router nt think big concern case could make custom build without make version nonrouter parts", "d": "10/2012"}, {"body": "something could method", "d": "10/2012"}, {"body": "yeap actually asked question stack overflow posting person answered suggested perfectly fine solution nt obvious would need extend router really seems like something users would want handle figured open issue generate discussion", "d": "10/2012"}, {"body": "trivial seems route exists associated record nt imagine route go posts nt exists expect see error router error needs handle asynchronous load objects", "d": "10/2012"}, {"body": "dmathieu would nt expect handle situations reasons stated entirely different worms would expect router handle cases user attempted navigate invalid route ie route path defined", "d": "10/2012"}, {"body": "support unfound routes also support failure state promises deserialized router rejected ie failure similar state promises resolved patches accepted", "d": "10/2012"}, {"body": "feature", "d": "10/2012"}, {"body": "also need badly", "d": "10/2012"}, {"body": "tell us bit use cases nt found single states multiple contexts come often usually patternsmell nt fully teased state machine", "d": "10/2012"}, {"body": "example file management app one url parameters path separated slashes", "d": "10/2012"}, {"body": "file management app path end url pretty much like github committree views urls", "d": "10/2012"}, {"body": "see unanswered question noirbizarre one", "d": "10/2012"}, {"body": "trek quite possible approaching problem wrong usecase suppose user allowed query products url want store things like color default price range default sort order default price sake example let say variables potentially could lot one option store standard dynamic segments default case would result url looked like allallbyprice find segments less userfriendly desired would prefer segment appear url value nondefault urls would handled route blue bymostpopular achieve url structure using character join url parts together however prefer use character", "d": "10/2012"}, {"body": "gavacho sure problem issue basically able embed slashes url parameter problem understand mixing url parameters order wrong beyond think achieve looking current brute force might quite scary using lot parameters thought", "d": "10/2012"}, {"body": "preferred implementation see simplest would require char contents dynamic segment think talking thing", "d": "10/2012"}, {"body": "really mandatory char dynamic segment gavacho something like search color color amp pricerange pricerange results something readable http standard", "d": "10/2012"}, {"body": "madchicken makes sense imho", "d": "10/2012"}, {"body": "madchicken ember router would nt amp characters need encoded could nt changing cause browser send new get request", "d": "10/2012"}, {"body": "gavacho think amp encoded since url query using resulting http uri telling router use hash storing path app resources parameters think able express parameters route trying dynamically handling pieces path instead represent state search state case", "d": "10/2012"}, {"body": "madchicken browser reload page whenever url changes except hash approach breaks singlepageapplication experience also results much less userfriendly urls still prefer ability character dynamic segments", "d": "10/2012"}, {"body": "gavacho using history ember location history old browsers always use hash", "d": "10/2012"}, {"body": "madchicken presumably one using one nt want rely pushstate say put query string hash entire query string would url encoded would result even less userfriendly url", "d": "10/2012"}, {"body": "gavacho right understand point view still think char used path separator parameters maybe using hash appropriate uri rfc states char pctencoded", "d": "10/2012"}, {"body": "madchicken character used reserved role case would still need encoded already suggesting dynamic segment wherein populate string encodes state right string looks like requesting ability use character string result", "d": "10/2012"}, {"body": "good use cases think wycats would entertain pr know retooling router api although internals remain nearly least put radar", "d": "10/2012"}, {"body": "closing since pr discussion happen", "d": "10/2012"}, {"body": "supply us two jsfiddles jsbins isolating issue issues test cases like tend get handled quickly", "d": "10/2012"}, {"body": "created fiddle demonstrate aberrant behavior rebuilt latest ember fiddle steps reproduce load fiddle select marketing dropdown see group label updated appropriately select box empty even showing original prompt expect select box display marketing select marketing displays correctly instead selecting marketing select research note time selected dropdown option select box group label updated expected ie correctly appears first time select dropdown option blank option appears using chrome version", "d": "10/2012"}, {"body": "fiddle behaving expected", "d": "10/2012"}, {"body": "confirm fixed master see", "d": "10/2012"}, {"body": "fiddle using version used fiddle demonstrating expected behavior issue referring seen look previous comment see steps reproduce", "d": "10/2012"}, {"body": "gasp sorry george", "d": "10/2012"}, {"body": "worries thanks jumping nonetheless", "d": "10/2012"}, {"body": "hum perhaps commit seems deal multiselect", "d": "10/2012"}, {"body": "ugh unable reproduce error test javascript test upon selection ui reflect selected option label function var view emberviewcreate collection embera name wes value w name gordon value g val null template emberhandlebarscompile view emberselect viewname select contentbinding collection optionlabelpath contentname optionvaluepath contentvalue prompt please wait valuebinding val emberrun function viewappendto qunitfixture var select viewget select selectel select equal selectelselectedindex precond dom reflects correct selection equal selectel find option selected text please wait precond ui reflects correct default option label emberrun function selectset value w equal selectget value w value properly set selection change equal selectelselectedindex dom reflects correct selection equal selectel find option selected text wes ui reflects correct option label selection expected equal add insult injury jshint complains quite green comes ember js testing nudges right direction would welcome short trying reproduce aberrant behavior demonstrated unit test thx", "d": "10/2012"}, {"body": "firefox mac also shows aberrant behavior except make first selection select box continues showing default prompt whereas chrome would change prompt blank safari behaves like chrome would expected changing prompt blank first selection made", "d": "10/2012"}, {"body": "george think jquery bug fiddle posted works expected change jquery version higher", "d": "10/2012"}, {"body": "confirmed nonissue jquery higher hjdivad thanks help ember vendors jquery see bumped given jquery current release considerations", "d": "10/2012"}, {"body": "george worries dependencies may question wagenet changing dependency working around jquery bug think painful without actually patching jquery", "d": "10/2012"}, {"body": "vendoring running tests benchmarks jquery contained distribution would ok bumping required jquery version however make change prs accepted", "d": "10/2012"}, {"body": "see kindly ignore bad commit", "d": "10/2012"}, {"body": "seen issue might duplicate sorry noise", "d": "10/2012"}, {"body": "hmm could check think bug fixed", "d": "10/2012"}, {"body": "indeed fixed master see swap ember resource", "d": "10/2012"}, {"body": "thanx sylvain", "d": "10/2012"}, {"body": "suggesting one default attributes provided ember personally nt think used enough warrant making default want globally app add javascript embertextsupportreopen attributebindings required", "d": "10/2012"}, {"body": "go back forth nt heard great reason html attributes form elements get included nt nt know want include since many valid attributes hardly anyone uses probably expand docs say attributebindings concatenated property see emberobject documentation information concatenated properties nt even documentation emberobject yet nicholaides want close issue open new one better documenting add element attributes", "d": "10/2012"}, {"body": "trek especially since view easily reopened part boot strap process probably better educate people ability rather continue adding attributes requested", "d": "10/2012"}, {"body": "agree worth discussion input ember come sane defaults maximize productivity trek serious cost simply adding docs expanded show add attributes attributes question autofocus readonly required pattern autocapitalize autocorrect multiple step missing attribute compatibility", "d": "10/2012"}, {"body": "stefanpenner one kind input yeah etc get used often nt add need test support moving future attributes might come unintended design side effects eg happens changed data backing text input make embertextfield need support reverting values prefer support minimum viable attributes likely used available browser support update docs include section adding additional attribute match use case nicholaides nt open new issue nt know important", "d": "10/2012"}, {"body": "trek moreover emberjs object model flexible enough include modification users bradleypriest suggest clean proper add custom html attributes must right way dealing", "d": "10/2012"}, {"body": "since want avoid proliferation possible properties going close doc changes bradleypriest help others", "d": "10/2012"}, {"body": "bug pre fixed master", "d": "10/2012"}, {"body": "try master", "d": "10/2012"}, {"body": "chaolam something relatively recent grab absolute latest clone github repo follow instructions readme build distribution versions emberjs closing please reopen find resolved master", "d": "10/2012"}, {"body": "issue noticed times since pity release fixing commit", "d": "10/2012"}, {"body": "teroparvinen check existence destruction time call clarify concern andor post jsfiddle", "d": "10/2012"}, {"body": "lukemelia sure", "d": "10/2012"}, {"body": "teroparvinen working fork address need", "d": "10/2012"}, {"body": "lukemelia mixing class mixins need able clean independently add method call get infinite loop see try omit one placing unnecessary hard track limitations order selection mixins use class", "d": "10/2012"}, {"body": "teroparvinen thanks example definitely bug ember result infinite loop", "d": "10/2012"}, {"body": "donaldpipowitch alogous check information", "d": "10/2012"}, {"body": "difference need emberobject get bindings observable properties javascript objects need need emberproxyarray get javascript arrays sorry nt think docs explain addition even emberarrayproxy right name emberarrayproxy functionality think emberarray properly name emberarray maybe naming convention would help distinguish classes created mixins eg use emberobjectcreate emberarraycreate think would helpful new emberjs developers see classnames", "d": "10/2012"}, {"body": "donaldpipowitch think look emberobject data structure still main data structures ember emberarrayproxy emberobjectproxy two proxy classes use manipulate data structures", "d": "10/2012"}, {"body": "donaldpipowitch arrays usually nt directly use emberarray simply creating emberarray instance emberjs extends javascript array prototype bindings observers", "d": "10/2012"}, {"body": "thanks explaining things nt knew emberobjectproxy better understanding emberarrayproxy understand classes names still little bit confusing clear every time need array object data structure additionally embersepecific logic would use emberproxyarray emberproxyobject emberobject nt used data structure adds additional logic every ember class seen little bit like native objectprototype adds tostring functions every javascript object nt take literealy illustrates understanding emberarray hand something completely different mixin comparable abstract class adds logic arraylike ember classes eg emberproxyarray think explanation right", "d": "10/2012"}, {"body": "willrjmarshall looked fiddle link provided nt see conditionals outlets mean provide another link", "d": "10/2012"}, {"body": "quote right got link wrong somehow try", "d": "10/2012"}, {"body": "interresting thing use connectoutlet convention works see seems bug edit bug relalize pass controller class instead instance see working think could assert though", "d": "10/2012"}, {"body": "true also assert pass resolves bitten usually fat fingered typo wagenet think close issue", "d": "10/2012"}, {"body": "trivial solution seems work make instead nt know good solution expect behaviour", "d": "10/2012"}, {"body": "lcoq change something call super inside childproxy init method", "d": "10/2012"}, {"body": "wrote test locally master fails solution described make test pass definitely right forgot call updated jsfiddle", "d": "10/2012"}, {"body": "reading code deeply nt think bug feature one code line could make work reason described default behaviour anyone agrees", "d": "10/2012"}, {"body": "proxies array methods since array method proxied want properties proxies use intended behavior far tell", "d": "10/2012"}, {"body": "think mainly solved make new tickets", "d": "10/2012"}, {"body": "emberselect uses maybe use render maybe compiled separately rake pipeline", "d": "10/2012"}, {"body": "rake pipeline compiles production looks really nasty inline precompiled template one thought maybe something like put something like", "d": "10/2012"}, {"body": "btw emberselect nt built collectionview subclass", "d": "10/2012"}, {"body": "caligomentis think", "d": "10/2012"}, {"body": "tchak think overriding array observer methods collectionview much complicated using template core want remove template", "d": "10/2012"}, {"body": "caligomentis definitely option like tackle pr consider changing", "d": "10/2012"}, {"body": "wagenet ok give couple days", "d": "10/2012"}, {"body": "also another solution besides extract controls separate package", "d": "10/2012"}, {"body": "caligomentis would nt necessarily help wanted use dev handlebars runtime", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "thanks comment aware selection property used according documentation value property also work case", "d": "10/2012"}, {"body": "anybody else needs workaround nt require patching emberjs use", "d": "10/2012"}, {"body": "tried get even nonempty ember objects see", "d": "10/2012"}, {"body": "mrpelle hack nt work emberjs look source see prototype get access order modify meta objects hack work see", "d": "10/2012"}, {"body": "snickell oh ok thanks nt even notice version referring edit seems work version", "d": "10/2012"}, {"body": "snickell submit pr", "d": "10/2012"}, {"body": "trek gitindocrinated yeah yeah todo high list working tarball release anyway provide universal diff help", "d": "10/2012"}, {"body": "sounds good open pr", "d": "10/2012"}, {"body": "snickell status", "d": "10/2012"}, {"body": "wagenet hi guys sorry got completely underwater mustfixes headed vacation submitted following untested pr messed git commit message missing suppress start could nt figure take back git changed substantially pre nt time reread relevant code test somebody else wants take mantle would awesome fix essentially longer single prototype inherit tojson added meta object created platforms simulated properties etc etc ass dragging place sorry", "d": "10/2012"}, {"body": "hi snickell git maybe needed", "d": "10/2012"}, {"body": "took time recover github account never log say thank information patch resolved issue", "d": "10/2012"}, {"body": "version emberjs", "d": "10/2012"}, {"body": "version last commit edit tried latest thing version last commit", "d": "10/2012"}, {"body": "correct wrong think actually working intended discussion issue kselden proposed init helper make problem easy current solution problem follows javascript bazcontroller emcontrollerextend init function thissuper thisfoodidchange", "d": "10/2012"}, {"body": "workmanw nt want trigger init", "d": "10/2012"}, {"body": "time want triggered foocontroller change foocontroller controller pass undefinednull defined controller", "d": "10/2012"}, {"body": "icholy mistake thought implying nt run controller created bindings flushed first case expect called nt", "d": "10/2012"}, {"body": "yes exactly expect observers triggered everything initialized know example define foocontroller two start lots controllers bindings place become painful", "d": "10/2012"}, {"body": "though something like", "d": "10/2012"}, {"body": "question best asked stack overflow", "d": "10/2012"}, {"body": "ca nt give yes regards original question", "d": "10/2012"}, {"body": "maedi nt know answers question first code work alphabet object instance emberobject see play replacement", "d": "10/2012"}, {"body": "thanks", "d": "10/2012"}, {"body": "update recent release able use could work want keep raw strings array content", "d": "10/2012"}, {"body": "nice feature know still solve problem array sorted view updated fiddle latest ember release seems view binding done right", "d": "10/2012"}, {"body": "almost done right rely controller underlying content since arraycontroller change ordering typically kind question ask stackoverflow think question dealing sorting", "d": "10/2012"}, {"body": "well lengthy research pointed issue anyway seem found solution like said rely controller instead binding appcontrollercontent need bind appcontroller like also shows make reusable views problem rerendering flickers page original embercopy solution nt flicker", "d": "10/2012"}, {"body": "nt see flickering screen yes perhaps huge array see manual sort fyi usefull post describing sortable mixin works", "d": "10/2012"}, {"body": "okay solution content view binded arrangedcontent controller thank help think ember documentation needs examples guide going api nt always give trivial answers unless using", "d": "10/2012"}, {"body": "clarify someone comes along later nt ever need bind directly arrayproxy bound value", "d": "10/2012"}, {"body": "experienced say bug", "d": "10/2012"}, {"body": "ca nt tell qualify bug per se think caused namespace collision happens start sharing controller believe view attribute gets set connectoutleted controller outlet name specified start sharing controller among subroutes one template uses unnamed outlet overwriting view property causing sorts breakness ca nt tell considered bug maybe inspired rethink design", "d": "10/2012"}, {"body": "machty also provide working version named template also would ideal nt use coffeescript fiddle", "d": "10/2012"}, {"body": "wagenet trick like said adding name outlet makes problem go away getting rid outlet entirely course", "d": "10/2012"}, {"body": "looks like helloview nt controller would connect outlet default think assumes parent controller applicationcontroller wrote would connectoutlets applicationview nameless outlet helloview nameless outlet time outlets applicationcontroller hence infinite loop said suppose error thrown trying connect outlet specify hellocontroller controller view problem goes away edit rereading comments see rather extra useless controller still nt understand would connectoutlets helloview outlet nt controller unless applicationview outlet named", "d": "10/2012"}, {"body": "dmzza right bug ca nt bind multiple outlets view instance controller nt useless provides view property outlet bind setting outlet name another way creating separate view instance outlet bind shorthand", "d": "10/2012"}, {"body": "agree bug think something said brevity achieved specify allows pattern controller reuse described fall place minimal amount code agree controller nt useless according current router design think readily available pattern vanilla fillintheblanksaccordingtothecurrentroute without codebloating controllers tossing random outlet names avoid stack overflows would little part help giant ember pill go little easily particular something challenging seemingly counterintuitive router well everyone know tried learn maybe solution would anonymous controllers instantiated tie data parent route controller rather null controller ushering default parentview context resolution makes pattern work according article also dmzza nt think specifying appwelcomecontroller view class controller works way expect somewhat accidentally resolve stack overflows nt think controller actually gets instantiated point template context would welcomecontroller class rather instance", "d": "10/2012"}, {"body": "think misunderstood original post indeed kris says bug", "d": "10/2012"}, {"body": "ok ember assert could sanely", "d": "10/2012"}, {"body": "zomg amazing power open source", "d": "10/2012"}, {"body": "awesome guys thank", "d": "10/2012"}, {"body": "workmanw happens also maintain old api well", "d": "10/2012"}, {"body": "actually make performance difference", "d": "10/2012"}, {"body": "gavacho make working jsfiddle jsbin demonstrates problem", "d": "10/2012"}, {"body": "gavacho link section docs view context changed may missed mention", "d": "10/2012"}, {"body": "also subsection templates default context compiled template view instance", "d": "10/2012"}, {"body": "wagenet issues assigned tend review morning totally lose track planned work noon", "d": "10/2012"}, {"body": "think behavior issue duplicate may also docs issue trek verify", "d": "10/2012"}, {"body": "guess applicationview necessary also tried binding keyup inside ready works said pretty ember way works perfectly closing issue", "d": "10/2012"}, {"body": "dmhaiduchonak using handlebars runtime gist", "d": "10/2012"}, {"body": "initial errorcausing attempt precompiling using handlebars nodebased binary shown dmhaiduchonak gist precompiling must done within ember using precompiled templates works still requires full handlebars library runtime throws errors ember still tries initializesetup handlebars compiler", "d": "10/2012"}, {"body": "commit help however still need use minified prod ember comment looking fix still issues let know", "d": "10/2012"}, {"body": "pretty sure issue covered rsaccon let know mistaken", "d": "10/2012"}, {"body": "seems like question probably best stack overflow", "d": "10/2012"}, {"body": "today solved problem didinsertelement working perfectly though test morethanks", "d": "10/2012"}, {"body": "experiencing behavior undefined context index leaf route got connectoutlets call company route rather get things serializing deserializing properly expect run issue jumping leaf leaf without hitting parent edit null context issue actually problem calling connectoutlets parent route misinterpreting null context phenomenon described problem root issue setting connectoutlets data fetching leaf route rather parent route eg causing views inserted reloading page leaf state deserializing well parent view never inserted fix replaced storefronts emrouteextend route storefronts connectoutlets router context gt routerget applicationcontroller connectoutlet storefronts appstorefindall appstorefront index emrouteextend route connectoutlets router gt routerget applicationcontroller connectoutlet storefronts storefront emrouteextend etcetera index emrouteextend etcetera edit emrouteextend etcetera even though context leaf route content property set parent controller parent route thus absence context content view inherits navigating directly leaf states seems working link rootstorefrontsstorefrontedit directly rootstorefrontsstorefrontindex inheriting context parent maybe still nt understand purpose connectoutlets call rootstorefrontsindex serves", "d": "10/2012"}, {"body": "future reference sorts questions best stack overflow", "d": "10/2012"}, {"body": "problem still present master", "d": "10/2012"}, {"body": "worth generally better provide operation jsfiddlejsbin instead pasting code", "d": "10/2012"}, {"body": "new github etiquette next time", "d": "10/2012"}, {"body": "sirzach chance jsfiddlejsbin would still appreciated", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "mattkime would certainly trick question whether would easy implement since think going close someone wants submit pr cases gladly review", "d": "10/2012"}, {"body": "odigity updates planning send docs pr", "d": "10/2012"}, {"body": "still exactly sure things actually work would nt feel comfortable updating docs perhaps months feel ready start contributing", "d": "10/2012"}, {"body": "odigity look tell missed", "d": "10/2012"}, {"body": "wagenet issue resolved closed", "d": "10/2012"}, {"body": "nt think high priority though prs accepted", "d": "10/2012"}, {"body": "would nt hurt documented also important prs still accepted", "d": "10/2012"}, {"body": "rodrigoalvesvieira reason changed probably leave aliases either indefinitely deprecation notices", "d": "10/2012"}, {"body": "see", "d": "10/2012"}, {"body": "closing since bug unverified inactive issue reproduced jsfiddlejsbin without use ember data please create new ticket", "d": "10/2012"}, {"body": "may", "d": "10/2012"}, {"body": "related found sometimes need access parent routes deserialized content deserialize nested route example post action need request server including project id post id nt access project within called ca nt access project nt setup yet app currently getting around setting content property parent child access feels rather wrong happening twice set", "d": "10/2012"}, {"body": "thought generally would expect parent route deserialized content available corresponding controller one form another access app necessarily expecting hold true apps guessing would", "d": "10/2012"}, {"body": "leepfrog kselden explain workmanw suggestion nt sufficient", "d": "10/2012"}, {"body": "also ran problem example two routes obtain model need know course something like instead quite right solution", "d": "10/2012"}, {"body": "trek shwoodard status", "d": "10/2012"}, {"body": "wagenet able get around issue pre baking content dom would select rendered view still work well target value binding loaded asynchronously", "d": "10/2012"}, {"body": "honestly nt understand issue initially set controller initially later simulate async array provided set logic determine newly added objects supposed html attribute neither marked selected remains null", "d": "10/2012"}, {"body": "trek think expectation would behave native regards adding options delay updated fiddle updated", "d": "10/2012"}, {"body": "gavacho nt really native behave default behavior experiencing behavior added jquery first looks like linked fiddle coerces return value element view source see although return value element nt actually one jquery central design patterns truthindom ember polar opposite design pattern truthinobjects behavior makes sense within context library patterns nt necessarily imposed library ember displayed html backed objects update objects changed way around nt update userpicked selected detects user interaction updates underlying object values update causes appropriate binding update lets us handle use cases changes single pattern userinteraction select programatic changes underlying object caused code executed elsewhere application", "d": "10/2012"}, {"body": "ps saying could nt support behavior someoned wanted submit pr nt think actually bug issue unlikely get attention existing contributors", "d": "10/2012"}, {"body": "shwoodard gavacho satisfied trek explanation", "d": "10/2012"}, {"body": "wagenet satisfying", "d": "10/2012"}, {"body": "shwoodard going go ahead close still concerns let know revisit", "d": "10/2012"}, {"body": "ebryn explain ember issue fix", "d": "10/2012"}, {"body": "definitely need work older versions ie", "d": "10/2012"}, {"body": "fordi able submit failing test pr", "d": "10/2012"}, {"body": "kselden status", "d": "10/2012"}, {"body": "wagenet kselden seeing fiddle think could closed", "d": "10/2012"}, {"body": "nt know need define adhoc routes breaking routes smaller components feels like right thing rails nt sucks sinatra took stab breaking router feels manageable sure ember way would tackle whatever would great", "d": "10/2012"}, {"body": "significant problem adding states state manager run time believe intent handle known states transition accordingly think find mutable state manager things get extremely complicated trying debug non concrete states believe rails nt choose implement routes way positive believe reopen router class saying also nothing says ca nt pass rails router implicit receiver another object handle routes way would weary something like hides common practice rails framework matter opinion though take leave p", "d": "10/2012"}, {"body": "working fairly large app routes broken separate classes wired together init along lines initjs approuter emrouterextend root appapplicationroutes applicationroutesjs appapplicationroutes emrouteextend home emrouteextend route blog appblogroutes members appmemberroutes accounts appaccountroutes membersroutesjs appmemberroutes emrouteextend blogroutesjs appblogroutes emrouteextend accountroutesjs appaccountroutes emrouteextend", "d": "10/2012"}, {"body": "rlivesey blamo like", "d": "10/2012"}, {"body": "since already working refactoring router api going close", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "given kselden says bug follow closing", "d": "10/2012"}, {"body": "trek insofar docs issue look", "d": "10/2012"}, {"body": "wagenet good place beef docs emberspecific handlebars behavior like", "d": "10/2012"}, {"body": "kselden updates", "d": "10/2012"}, {"body": "since nt think something integrate going close someone would like submit pr make option happy accept", "d": "10/2012"}, {"body": "closing since think ember data provides needed functionality", "d": "10/2012"}, {"body": "fixed", "d": "10/2012"}, {"body": "workmanw currently ok saying nt support template names want submit pr support definitely consider", "d": "10/2012"}, {"body": "closing ticket since unverified inactive problem demonstrated please open new ticket", "d": "10/2012"}, {"body": "ebryn make pr", "d": "10/2012"}, {"body": "ebryn kselden still issue", "d": "10/2012"}, {"body": "addressed proposed helper", "d": "10/2012"}, {"body": "trek smile", "d": "10/2012"}, {"body": "happy put something together mergedclosed like", "d": "10/2012"}, {"body": "wagenet confirm wait resolved", "d": "10/2012"}, {"body": "bradleypriest trek perhaps begin document could complete accepted", "d": "10/2012"}, {"body": "since added feature seems like trek bradleypriest could definitely get started parts hopefully get finalized asap though", "d": "10/2012"}, {"body": "think finalized added piece doc since clearly english writter definitively checked eyes", "d": "10/2012"}, {"body": "wait stroke came back document see already docs damn good docs wrote think one origina request came never closed issue documentation want proof additions custom sorting pr", "d": "10/2012"}, {"body": "wagenet unless docs like issue closed", "d": "10/2012"}, {"body": "trek added description return value orderby pr one closed people confortable using sortable mixin doc improved later", "d": "10/2012"}, {"body": "looks like yuicompressor deprecated still need consider rhino", "d": "10/2012"}, {"body": "wagenet someone demonstrate problems browser reconsider supporting extremely old nonbrowser environments uptodate modern javascript good enough reason imho", "d": "10/2012"}, {"body": "wycats sounds good", "d": "10/2012"}, {"body": "wagenet work previously worked fix write tests catch future regressions", "d": "10/2012"}, {"body": "closing find another solution docs", "d": "10/2012"}, {"body": "seems useful low priority unfortunately nt think add standard property even sure possible us make work without breaking existing behavior muddying waters happy pr", "d": "10/2012"}, {"body": "kselden fixed", "d": "10/2012"}, {"body": "kselden status", "d": "10/2012"}, {"body": "jamesarosen interested pr", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "tchak current thought", "d": "10/2012"}, {"body": "currently using sort triage router rerout events sub event managers write proposal enough interest", "d": "10/2012"}, {"body": "tchak feel like something definitely would useful though want think carefully without confusing users", "d": "10/2012"}, {"body": "kselden current thought", "d": "10/2012"}, {"body": "onkelborg use set view controller want use nothing singleton also take look source code", "d": "10/2012"}, {"body": "nt think going change anything onkelborg hopefully stas suggestion useful", "d": "10/2012"}, {"body": "oh one important thing order leverage existing routes nt forget initialize attribute current router instance", "d": "10/2012"}, {"body": "bradleypriest still issue", "d": "10/2012"}, {"body": "yes lot obvious new action context still places need use fix nt actually fix issue infinite loop thrown called warning issued two options fix warning actually check objectproxy content get content set", "d": "10/2012"}, {"body": "closing due inactivity", "d": "10/2012"}, {"body": "closing due inactivity", "d": "10/2012"}, {"body": "ebryn thoughts", "d": "10/2012"}, {"body": "changed way initialization works also give control desired set application call whenever want let know still able get desired result", "d": "10/2012"}, {"body": "upon consideration ca nt think ideas happy accept pr", "d": "10/2012"}, {"body": "also use", "d": "10/2012"}, {"body": "kselden status master", "d": "10/2012"}, {"body": "closing favor trek reopen solution really need support", "d": "10/2012"}, {"body": "closing tracking doc improvements elsewhere", "d": "10/2012"}, {"body": "going close get issues list bit focused however intend continue improving api docs already new api docs improve situation though nt include search yet", "d": "10/2012"}, {"body": "still bug master", "d": "10/2012"}, {"body": "tchak still think need right", "d": "10/2012"}, {"body": "really would induce much complexity would prefer go way objections close", "d": "10/2012"}, {"body": "sounds good", "d": "10/2012"}, {"body": "resolved well enough", "d": "10/2012"}, {"body": "prs gladly accepted also plan improve docs release", "d": "10/2012"}, {"body": "wagenet kingkoen right", "d": "10/2012"}, {"body": "yes", "d": "10/2012"}, {"body": "closing since solution nt much activity anyone wants submit pr either make behavior easier use improve docs happy accept", "d": "10/2012"}, {"body": "closing favor", "d": "10/2012"}, {"body": "closing since generally inactive really list priorities gladly accept prs plugin projects", "d": "10/2012"}, {"body": "would really love see", "d": "10/2012"}, {"body": "mspisars nt want block things difficult fix nonessential", "d": "10/2012"}, {"body": "seems relatively unimportant new router setup leave open", "d": "10/2012"}, {"body": "also bootstrap anything really need use data attributes maybe want makes sense fact make sense interoperate libraries depend data dom seamlessly", "d": "10/2012"}, {"body": "reopen", "d": "10/2012"}, {"body": "closing since pr", "d": "10/2012"}, {"body": "working performance stuff upcoming support make big difference", "d": "10/2012"}, {"body": "something review release anyway", "d": "10/2012"}]