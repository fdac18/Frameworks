[{"title": "validation occur calling modelsave attrs wait true", "body": "using wait true saving model invoke validation due internal behavior save using silent achieve wait semantics modifying validate validation properly occurs using wait", "num": "1057", "d": "2/2012"}, {"title": "routernavigate could support pushstate title changing property", "body": "usually want use pushstate applications using backbone would like change page title well page url surprise found pushstate actually supports page title attribute declared workarounds changing title prior navigate method call feels awkward would really nice router api supported title changing natively", "num": "1056", "d": "2/2012"}, {"title": "error documentation", "body": "maybe reading wrong something english first language case sorry issue comparator function defined either sortby pass function takes single argument sort pass comparator function expects two arguments sort comparator functions take model return numeric string value model ordered relative others sortby comparator functions take two models think second paragraph sort actually sortby sortby sort", "num": "1055", "d": "2/2012"}, {"title": "modelvalidate accept attrs param ignores", "body": "comments state validate true yet first thing obliterate passed extending attrs include every single attribute model object ca nt say whether good thing bad thing would expect happen looking method signature documentation validating everything time regardless whether changed seems bit wasteful makes unit testing validations difficult need ca nt simply spy assert success callback nt called setting invalid value approach success callback may actually called dozens times one bad attribute actually wanted validate bombs", "num": "1053", "d": "2/2012"}, {"title": "support urls historynavigate", "body": "would nice relative urls supported even root path passed calling instead calling full parent path often comfortable interface handles kinds relative paths beginning correctly differentiate real relative paths like usual semirelative paths get root prefix backbone could check first character dot", "num": "1051", "d": "2/2012"}, {"title": "ca nt override silent true create", "body": "trying force validation model creation bootstrapping data models page loads cut xhr traffic speed interface backend good time checking input data means invalid data stored database got validation framework set works model validated try pass creating new object validation nt occur seems line matter options create set always receives means ca nt validation create creates oddities using perform validation example javascript var testmodel backbonemodelextend validators title minlength istype string initialize function thison error thislog log function model error consolelog error unable set bad titles var new testmodel title work tget title work tset title false expected false type string title tget title work create silent true var new testmodel title false title false true title good title well title good title well title false expected false type string title title good title well still create silent false var new testmodel title false silent false title false true title good title well title good title well title false expected false type string title title good title well design see change logs forcing validation new objects reverted able override hard coded missing something really obvious force validation create help appreciated", "num": "1049", "d": "2/2012"}, {"title": "backbone hijacks sms urls", "body": "text gets turned instead mobile prompt user send text message works backbone disabled", "num": "1047", "d": "2/2012"}, {"title": "modelsave nt call parse setting returned data", "body": "modelfetch calls parse returned data modelsave complex model collections members using parse turn json arrays collections call save server returns new copy model changes server processing made model arrays collections lack parse save oversight wrong", "num": "1045", "d": "2/2012"}, {"title": "official example application superseded", "body": "official backbonejs page intro section link example application second paragraph top source code example application superseded newest version source code located addy todomvc repository architectureexamplesbackbone newer version superior couple things refactored optimized therefore would make sense use source code official example cool could update directory newest version source code", "num": "1044", "d": "2/2012"}, {"title": "custom getterssetters backbonemodel", "body": "people requested ability easily define getters setters attributes handy problem creating setter settitle functions like fetch call created plugin allows adding getterssetters selectively declarative way calls get set routed getterssetters functions available kind solution fit backbone without need plugin", "num": "1043", "d": "2/2012"}, {"title": "someelement nt work", "body": "somewhere backbone changed definition delegator return selector thisel return elfind selector jquery site says selector context implemented find method therefore liitemii find li equivalent li liitemii change perfectly safe right well jquery gt b selector string however try var model new backbonemodelextend somefunc function var elem documentgetelementbyid foo var elem elem jquery wo nt work find nt expecting take element would try find something already similarly backbone makes sense elem easily elem latter works sometimes might variable could string could element might legacy code former pain change solved well two ways see add line backbone documentation says something effect backbone works versions jquery jquery greater recommended using earlier versions jquery may cause problems certain corner cases add quick type check delegate function use old style selector nt string function selector typeof selector string return selector el return elfind selector", "num": "1038", "d": "2/2012"}, {"title": "backbone history nt work safari roots encoded characters", "body": "underlying issue safari issue appears windowlocationpathname returned decoded confuse backbone example backbonehistorystart checks windowlocationpathname compares root checks fail due root encoded characters windowlocationpathname returning decoded characters", "num": "1037", "d": "2/2012"}, {"title": "weird behaviour copying collection thismodels", "body": "nt know bug dumb misusing stuff", "num": "1036", "d": "2/2012"}, {"title": "pushstate change empty fragment provided", "body": "url set html calling routernavigate fragment correctly append fragment however navigating root app fragment calling windowhistorypushstate empty string change state proposed fix routernavigate", "num": "1035", "d": "2/2012"}, {"title": "backbone faq encourages approach vulnerable script injection", "body": "heads advice bad simple json encode leaves open javascript injection attacks data contains eg injected code actually json encode replace lt lt least html rules xhtml may different read unfortunately seems good name kind encoding maybe related sgml kinda hard find information topic", "num": "1034", "d": "2/2012"}, {"title": "calling wait true results incorrect final attributes success callback called sync", "body": "might call success callback immediately saving local storage example current code assumes call sync asynchronous success callback happen immediately setting old attributes back model test fails sorry intentional might fixed changing standard success callback unset optionswait might ideal tests still pass however", "num": "1030", "d": "2/2012"}, {"title": "incorrectly nested attributes", "body": "issue modelsave first second attempts save model case localstorage using backbonelocalstorgejs attributes model replaced reference model tracked back line backbonejs seems output modelparse replaced original model attribues call save made saveproject method model essentially happens first time add todo project save works however saving attributes get overwritten described add second todo try save project modeltojson call fails tries convert circular reference json without meaningful error message may add something wrong issue backbone", "num": "1028", "d": "2/2012"}, {"title": "collection preparemodel recursively setting attributes within attributes", "body": "issue described corresponding pull request", "num": "1027", "d": "2/2012"}, {"title": "expose extend function", "body": "using extend function custom classes could useful would harm exposing accessed backboneextend", "num": "1026", "d": "2/2012"}, {"title": "undelegate events specific element", "body": "ran issue wanted undelegate events set events hash specific selectors jeremy would find useful submitted pull request implemented", "num": "1025", "d": "2/2012"}, {"title": "underscore throttle debounce options declaring view events", "body": "love underscore throttle debounce capabilities would also love able automatically hook behaviors declaring events backbone views rather manually handling plumbing events initialize function sure exactly synax would look maybe something like events resize window throttle windowresizefunc keydown mytext debounce repositionelementsfunc maybe elegant syntax express open suggestions could see handy anyone handles voluminous event types like mouse move window resize etc sure already discussed exhuming old conversation apologies", "num": "1020", "d": "2/2012"}, {"title": "modelparse needs compliment modelserialize", "body": "backbone great function parsing data preexisting apis something suitable backbone model half equation also need serialize data back format required server right making use modelparse basically also write custom method entirely bad could much simpler backbone included method model called default backbonesync method basically would mean changing line backbonesync updating backbonemodel include new noop method like", "num": "1019", "d": "2/2012"}, {"title": "would better merge routing params single hash instead separate params", "body": "would single hash param could also automatically add querystring params think", "num": "1017", "d": "2/2012"}, {"title": "set url starting history", "body": "app needs aware whether user logged depending state need redirect user page anything else causes extra reload uses way change url prior calling myapploggedin amp amp windowlocationhrefindexof login windowlocation login return backbonehistorystart pushstate true", "num": "1015", "d": "2/2012"}, {"title": "normal adminusers adminusers routes considered backone different", "body": "normal adminusers adminusers routes considered backone different", "num": "1013", "d": "2/2012"}, {"title": "collection add event include index", "body": "model added backbonecollection instance either via add reset even dispatching contain index model added particularly helpful times important obtain provide examples cases need", "num": "1012", "d": "2/2012"}, {"title": "nonelementscope jquery function view", "body": "backboneview contains function scopes find requests domlibrary element view useful writing unit tests isolated form dom allows provide mock stub implementation domlibrary local view object however cases view needs unscoped finds view also expose method allows delegating funds domlibrary eliminating need rely globals improving overall testability backboneview exists today function selector return elfind selector suggested addition function selector return selector example usage view initialize function var el jobstatustemplate thistemplate template elhtml", "num": "1009", "d": "2/2012"}, {"title": "route helper functions", "body": "backbone provide route helper functions akin ones provided rails like able call function like rather manually write needs updated later change route hash map", "num": "1007", "d": "2/2012"}, {"title": "discussion jabber", "body": "jashkenas hi sorry wrong place hearing talk javascript jabber podcast topic backbonemodelbinding backbonemarionette got brought offered go never got chance got ta say really want hear think especially compare layoutmanager modelbinding knockback synapses important majority use compare ember", "num": "1005", "d": "2/2012"}, {"title": "resets hash backbonehistorystart", "body": "page loaded initial hash value historystart follows route router resets hash afterwards browsers keep hash created jsfiddle reproduces error", "num": "1003", "d": "2/2012"}, {"title": "change attr event fires attributes set", "body": "setting multiple attributes change fires every attribute changed model attributes changed means inside change attr handler one access halfchanged model confusing example coffeescript model new backbonemodel name maria age modelbind change name gt consolelog name get name age get age modelset name john age prints name john age wrong could elaborate design decision bug", "num": "1000", "d": "2/2012"}, {"title": "collectionadd event callbacks trigger models added instead serially like", "body": "something code broke recent update believe traced difference collectionadd works add event fired collection state collection last model collection one passed add put another way add callback collection length accurate sync model added make sense code like var l modelslength lt l thisadd models options add callback say hits viewer listening add length collection would increment add callback code decoupled collection fully populated add events triggered spliceapply thismodels index concat models thiscomparator thissort silent true optionssilent return length thismodelslength lt length cids model thismodels cid continue optionsindex modeltrigger add model options seems like strange behavior meaning add callbacks nt really callbacks per add rather batch models added thoughts", "num": "998", "d": "2/2012"}, {"title": "problem handling change events fired another change event", "body": "say model var mymodel backbonemodelextend initialize function thisbind change thisbind change function alert function called changed thishaschanged function thisset issue var new mymodel alerts false obviously error issue var new mymodel alerts true everything ok nothing happens setting value doesns right ok function sets already firing change event error get another false alert nothing happens setting value doesns right ok", "num": "997", "d": "2/2012"}, {"title": "router calls wrong method", "body": "perhaps something wrong think found bug way handles uri routing appears behaviour backbone handles uri changes enter uri browser compared manually force uri invoking accessing works well browser triggering manually fails instead calls route method assigned uri loadcontact code myappcontactrouter backbonerouterextend failing based unit test method opens contactsnew function", "num": "996", "d": "2/2012"}, {"title": "encourage examples include links source code writeups", "body": "backbone obviously leaves lot developer partially makes list examples documentation site wiki page encouraging people figured ca nt still tough frustrating see app solved problem facing nearly impossible understand due minified source would awesome people contributing examples entry examples section encouraged provide link either source code available writeup explaining entry able get around particular problem faced realize practical expect source open encouraging folks writeup also encourages knowledge shared helps everyone could even point pride reason someone included examples page could based quality writeup well thoughts silly", "num": "995", "d": "2/2012"}, {"title": "override router routes methods", "body": "cool unit test router invokes view may may change dom redirect user make unit test go bananas needed test whether uri would call appropriate router method therefore trying make way unit test routers uri handling whilst decoupling eventual logic may contain thought would good idea access property use create mockversion router containing nothing routes alone still register backbone scope way could get working extracting routes without first invoking var mockrouter backbonerouterextend var myrouter new myrouter myrouterroutes function func route mockrouterroute func route function", "num": "993", "d": "2/2012"}, {"title": "view new view error", "body": "getting error creating new view models amp collections work fine mainjs error using underscore backbone", "num": "990", "d": "2/2012"}, {"title": "binding events directly top level backboneview element", "body": "maybe missing something ca nt find way bind click event ca nt make entire element clickable need add empty div marginpadding conform backbone words instead like possible", "num": "989", "d": "2/2012"}, {"title": "haschanged deep attribute comparison", "body": "often find attributes nt first level json like checked haschanged state currently function supports checking first level object used little hack like would much nicer something along lines official release allow easily follow future version", "num": "988", "d": "2/2012"}, {"title": "double event firing new el subelement old", "body": "ran problem redefining el view problem event button example scoped dom element redefine el new el subelement old one contains button question via setelement event fire twice click button bug nt happen insert redefining el", "num": "986", "d": "2/2012"}, {"title": "incorrectly swopped collectioncomparator docs", "body": "swopped around collecitoncomparator documents sort comparator functions take model return numeric string value model ordered relative others sortby comparator functions take two models return first model come second rank first model come takes one argument takes two", "num": "984", "d": "2/2012"}, {"title": "idea build events", "body": "think would nice add right initialize call backboneview constructor would make easy respond initialization eg could something like oninitialize function make much easier views listen react view initialized along line thought default functions could well thought curious whether reasons cheers", "num": "983", "d": "2/2012"}, {"title": "event nt triggered success callback provided", "body": "around line like bind well accept callback behavior intentional curious ps thanks amazing framework love amp use variety documentcloud projects artsy", "num": "977", "d": "2/2012"}, {"title": "duplicate model exception caught", "body": "addition unreadable following conditional halt script execution event tests positive nt seem caught block certainly problem ever hits really prefer nt crash entire application result", "num": "976", "d": "2/2012"}, {"title": "internet explorer standards mode invokes hashed route backbone twice refresh", "body": "easily reproducible code pasted stack overflow problem url hash hash eg navigated refreshed internet explorer invokes catchall route url proceeds remove hash reinvoke route second time works intended webkit firefox opera etc intended route triggering refresh tested latest backbone underscore jquery libs locally remotely", "num": "975", "d": "2/2012"}, {"title": "setting value model property twice causes error", "body": "calling code twice raise exception myobjectset x exception undefined function evaluating fhas b e", "num": "974", "d": "2/2012"}, {"title": "hideous conditional full assignments sideeffects", "body": "got readable way", "num": "972", "d": "2/2012"}, {"title": "problems link jqm", "body": "using jquery mobile combination url noticed strange behavior router like class router extends backbonerouter template snippet like works perfectly router picks url match showing actual page change class router extends backbonerouter router matched even failing request made might backbone issue jqm wanted post somebody may know going", "num": "970", "d": "2/2012"}, {"title": "using backbonemodelset silent option nt clear previous attributes", "body": "documentation appears design gives odd behavior example var foo backbonemodelextend var instance new foo instancebind change function model value consolelog modelchangedattributes instanceset bar silent true instanceset baz get bar baz logged expect baz think staging change since really want change model property trigger change events also trigger change events future recommended way without creating new model instance", "num": "969", "d": "2/2012"}, {"title": "navigate appending current path instead replacing routestripper issue", "body": "routernavigate thread mathfloor mathrandom routernavigate thread mathfloor mathrandom result calling either thesemethods multiple times time time time etc expected result time time time solved problem end using navigate function leading slash ie thread number removing routestripper regex backbonejs source also expected routernavigate routernavigate set url root instead url nt change bug misusing navigate method", "num": "966", "d": "2/2012"}, {"title": "collectionget id inconsistent return value null undefined nan", "body": "hi wonder behavior design nt always return either non existing ids", "num": "964", "d": "2/2012"}, {"title": "unrelated change attr events triggered", "body": "example code javascript windowonload function var test backbonemodelextend defaults testvalue fairly certain correct behaviour changed fifty attributes silently set one normally would expect fire attributes output", "num": "963", "d": "2/2012"}, {"title": "models available collectioninitialize", "body": "collection constructor used set models calling however models get set existing code relies models existing order run aggregate calculations broken change additionally called set models done silently ca nt even listen reset event perform calculations", "num": "962", "d": "2/2012"}, {"title": "add thisdollar thisel backboneview", "body": "often find needing particularly view multiple instances operate dom class someview extends backboneview initialize gt dollar el views new someview views new someview view dollaraddclass active would adding bad idea also think caching jqueryzepto object manner could help making faster apps", "num": "961", "d": "2/2012"}, {"title": "change event produce infinite loop", "body": "last version faced defect produce infinite loop function change model begins redraw view need set value one properties model function set option suppress additional event perfectly worked version broken defect design application error backbone", "num": "959", "d": "2/2012"}, {"title": "backboneview backboneevents", "body": "read closed issue question means binding events instance class view extends backboneview tock gt consolelog tock view new view viewon tick viewtock viewtrigger tick binding events constuctor class view extends backboneview initialize gt tick tock tock gt consolelog tock view new view viewtrigger tick rather possible using builtin events hash class view extends backboneview events tick tock tock gt consolelog tock view new view viewtrigger tick gives feeling backboneview backboneevents good friend backboneevents looks sad lonely", "num": "958", "d": "2/2012"}, {"title": "duplicate events instantiating view twice", "body": "define view via backboneviewextend instantiate twice via new event happens ivies object fired twice short example", "num": "957", "d": "2/2012"}, {"title": "render function nt extend", "body": "want use multiple views one model extend main view first create show somehow leaving de render function de second view stops events view running duplicate render function de new view whereas te difference template app render function little complicated shown bit shame duplicate something wrong way javascript itemv backboneviewextend invitev itemvextend", "num": "956", "d": "2/2012"}, {"title": "collection fetch updates existing model instances vs replacing", "body": "create new model call fetch update model attributes create collection models call fetch wo nt update existing models replace new instances painful cache references collection model instances references become invalid fetch occurs instead cache references collection collection get every time want access model maybe acceptable seems reasonable collection able perform fetchupdate without invalidating existing model instances", "num": "955", "d": "2/2012"}, {"title": "using results typeerror converting circular structure json trying instantiate view", "body": "see stopped loading error went away following instructions backbonejs homepage adding", "num": "953", "d": "2/2012"}, {"title": "model haschanged bug", "body": "seems like haschanged evaluated false problem model property change false bugs present event change prop haschange prop ex thison change spellcheck function model color alert spellcheck change wo nt show thisset spellcheck false everything fires correctly set true num str", "num": "952", "d": "2/2012"}, {"title": "reverse lookup router routes urlfor", "body": "bit introduction generate lot views javascript forced write urls handlebars templates would rather important ask app url viewing thing hacked function router javascript urlfor function route function wraparray obj return isarray obj obj array obj contrived implementation suits application error handling example interest something like backbone proper work real patch tests", "num": "951", "d": "2/2012"}, {"title": "change event fired unset attribute previously set silently", "body": "following code fails fire change event unset would expect change event triggered expected backbone aware backbone made triggering change events stricter previous versions seems like changing attribute always trigger change event passed method way attribute previously set affect whether current method call triggers change event", "num": "949", "d": "2/2012"}, {"title": "change event nt happen cases", "body": "new version backbone nt detect change something changed back default changed silently javascript windowonload function var test backbonemodelextend defaults testvalue expecting believe case test cases failing calling set trigger change event silent set true however set something silently change back default value call change attr even change believe bug happen previous versions framework case backbone tested today", "num": "946", "d": "2/2012"}, {"title": "backbonehistorycheckurl uri malformed error", "body": "similar issue issue reproduce go url search qfoo notice url encoded used encodeuri encodeuricomponent backbone successfully handles url go another url eg search qbar js error uncaught urierror uri malformed checkurl understanding thisfragment stores current url retrieved using function getfragment function makes use decodeuricomponent therefore hitting url search qfoo expected page loads fine hit url search qbar function checkurl compares new url old one thisfragment notice decodeuricomponent thisfragment throwing urierror uri malformed error thisfragment already decoded believe fix chexov submitted resolve request pulled onto main branch", "num": "945", "d": "2/2012"}, {"title": "like set silent true add force true option", "body": "current project running situation value set value identical previous value makes chain events come halt happens example calling server second search query also zero results first time zero results could trigger user feedback second time wo nt work course possible set value twice passing random value first silent parameter second time real results way force event would much elegant line silent true functionality thank feedback", "num": "944", "d": "2/2012"}, {"title": "model prototype missing clone combination bindall", "body": "model prototype something like missing backbone used conjunction prototype library platform windows chrome firefox example", "num": "943", "d": "2/2012"}, {"title": "save error handler receiving model", "body": "error handlers passed response twice instead model response selfcontained example cs class thing extends backbonemodel url thing thing new thing thingsave error thing response gt consolelog thing response thing response consolelog thing jsonstringify thing handler would receive model response receiving two references response", "num": "939", "d": "2/2012"}, {"title": "ca nt use dom manipulation library defined window", "body": "would convenient able use backbone multiple versions jquery libraries used dom manipulation currently backbone supports libraries defined window jquery zepto ember time backbonejs loaded ability explicitly override library used runtime", "num": "938", "d": "2/2012"}, {"title": "submit event working prod version", "body": "currently working project using backbone want bind submit event form instead attaching event click submit button enter keypress submit form somefunction works perfect dev version switch prod version wo nt work however handle click keypress events works fine even prod version issue happening minified file", "num": "937", "d": "2/2012"}, {"title": "event nt fired collection model destroyed", "body": "good get event collection model removed collection synced server", "num": "935", "d": "2/2012"}, {"title": "setelement setting element", "body": "setting manually thisel popups doe snot work changelog use setelement test thissetelement dialogform also tried dialogform consolelog dialogform dialog div consolelog el old view element div hapenning render method", "num": "934", "d": "2/2012"}, {"title": "model prototype missing clone combination bindall", "body": "got case model prototype something like missing platform windows chrome firefox example javascript var backbonemodelextend initialize function bindall hello function consolelog hello world var b aextend initialize function bindall typeerror object object object method hello new b clone hello one nt b problem goes away writing report feel messes replacing specific seems solution still maybe still fixed", "num": "931", "d": "2/2012"}, {"title": "exception thrown calling modelfetch second time", "body": "description fetching simple backbone model second time error thrown issue since example sebackbonemodelsaccount backbonemodelextend url apiaccount var account new sebackbonemodelsaccount accountfetch accountfetch errors google chrome stacktrace uncaught typeerror object function obj return new wrapper obj method firefox error function", "num": "930", "d": "2/2012"}, {"title": "modelsave seems broken used option waittrue", "body": "model correctly calls instead calls original gets saved expected maybe intended behavior seems like need clone", "num": "928", "d": "2/2012"}, {"title": "change event fired consistently setting value previously set silently", "body": "set property model value change event fires set property different value using silent true change event set property value step change event lt expected definitely change since since navigation longer works relied change event firing consistently matter previous value however even suppress change events set value existing value would still consider bug since step indeed changing value something different currently set", "num": "927", "d": "2/2012"}, {"title": "need guidance nested models localstorage", "body": "know many issues forum threads issue already need little guidance seem variety approaches keep hitting roadblocks one nt found yet complete example uses nested models collections along localstorage trying create simple app project models task models project one task one project additionally eventually need tasks potentially contain tasks leave aside anyone provide full working simple example approaches would go long way helping newbs like approaches like example faq backbonerelational rely point collection embedded model way set url collection retrieve right models nt seem play nicely localstorage additionally faq example something like javascript var mailbox backbonemodelextend initialize function thismessages new messages thismessagesurl mailbox thisid messages thismessageson reset thisupdatecounts var inbox new mailbox inbox opened inboxmessagesfetch instead setting collection url initially tried create new store custom name like taskstoreprojectid mirrors example sets collection url something thisid first trouble figuring could create collection store model initialize function would need pass id collection initialize function create store next discovered model initialize function thisid still undefined think example mailbox created var inbox new mailbox app mailbox equivalent project created mailbox project collections create function nt know new backbone know heck nt even know work create store way even gave random string plus relishing idea giant list stores like seems horribly unnormalized backbonerelational approach seems good also hinges setting url parameter meant return proper models issue faq goes list approaches like mirror sql database structure structure nosql database use models arrays foreign key ids join top level collections ala tables associations numerous use range ids instead explicit list avoid ids use direct references creating partial object graph representing data set lazily load joined models server lazily deserialize nested models json documents sound good sound pretty similar none good examples love see bullet points fleshed guess ideally like something allowed use two stores one projects one tasks performant way easily get tasks project still able leverage collections bring know could work around setting project id task model like foreign key approach going cause issues backboney enough anyway thanks letting vent bit help appreciated", "num": "926", "d": "2/2012"}, {"title": "previous attributes behaviour confusing incorrect", "body": "sure asdesigned behaviour seems confusing given nodejs application would expect haschanged true previousattributes tracing code could see haschanged returning false artefact transition client serverside previousattributes nt make much sense see gets set modelchange change events fired sets previousattributes current attributes client server seems previousattributes always previous attributes set would update state whole way code right previousattributes save small window change events always current attributes nt previous attributes last attributeset always", "num": "924", "d": "2/2012"}, {"title": "view constructor optionsel support jquery object", "body": "instance end thisel el jquery objects handle native dom elements jqueryzepto objects set properly viewsetelement another interesting sideeffect setting thisel jquery object silently work using native dom methods might even feature makes el unnecessary used consistently note backbone use native dom methods thisel", "num": "923", "d": "2/2012"}, {"title": "spinejs within windows environment", "body": "hi running windows xp machine successfully installed nodejs spine spineapp hem havin called spine app myapp received following error spine controllers spine models thanks regards galdo", "num": "921", "d": "2/2012"}, {"title": "model forgets changed passing silent true", "body": "happening backbone imagine model boolean property set false change true change event fires correct change false silent true change event nt fire also correct however change back true change event fire seems like bug", "num": "919", "d": "2/2012"}, {"body": "still called checks options halts found validate", "d": "2/2012"}, {"body": "pushstate api supports title hashchange api since backbone normalizes two nt add api features exist one instead set title correctly router actions probably easier passing calling first place", "d": "2/2012"}, {"body": "seems reasonable thanks prompt answer", "d": "2/2012"}, {"body": "right mistake documentation thanks letting us know addressed live next release", "d": "2/2012"}, {"body": "thanks updated comment change validate made folks using wanted stateless method ensured model valid state given upcoming snapshot attributes would become whole", "d": "2/2012"}, {"body": "pushstate api might handle hashes certainly nt arbitrary regexes backbone allows route afraid pass complete url intend navigate", "d": "2/2012"}, {"body": "indeed correct following line code even attrs invalid variable contain valid book model reference line code run unless willing allow exceptions need create valid models accomplish looking use", "d": "2/2012"}, {"body": "excellent work around implemented system wanted know missing something obvious thanks", "d": "2/2012"}, {"body": "hold may bug backbone dig close valid", "d": "2/2012"}, {"body": "ok backbone selector vague", "d": "2/2012"}, {"body": "understanding incorrect ignore", "d": "2/2012"}, {"body": "diff changes original addyosmani version curious take look merging changes", "d": "2/2012"}, {"body": "get diff evening", "d": "2/2012"}, {"body": "hm sure diff still nt figured github two things bothered changed custom classes assigned local variables longer global properties handler longer bound manually appropriately moved events hash also noticed added mark done functionality", "d": "2/2012"}, {"body": "figured might well submit pr would also give us diff", "d": "2/2012"}, {"body": "model attributes nt strange settertransformed version serverside attributes unless case need", "d": "2/2012"}, {"body": "equivalent running selector thisel also bitten change docs definitely updated since longer true item upgrade notes would nice well quick write", "d": "2/2012"}, {"body": "thanks pointing addressed", "d": "2/2012"}, {"body": "think would covered", "d": "2/2012"}, {"body": "seems creating copy invocation log console behavior expect see", "d": "2/2012"}, {"body": "chromium following output firefox basically copy nt happen expected please tell nt hallucinations", "d": "2/2012"}, {"body": "oh strange ca nt imagine behavior would differ browsers", "d": "2/2012"}, {"body": "consolelog async reference evaluated lot end whole script try node synced", "d": "2/2012"}, {"body": "whew thanks sanity check nevermind", "d": "2/2012"}, {"body": "fun open console", "d": "2/2012"}, {"body": "pfff thanks info guess wo nt trust console ever sorry false alert bug tried printing nt believe seeing thought must sideeffect backbone magic", "d": "2/2012"}, {"body": "agree type escaping important gave great excuse reread post mathias bynens sure details within scope faq maybe could mention briefly", "d": "2/2012"}, {"body": "thanks heads unfortunately little less sensitive topics backbone projects nt take untrusted user data gfxmonk suggested simple revision faq example", "d": "2/2012"}, {"body": "suggest replacing current snippets slightly unsightly modeltojsongsub include link beneath along lines gsub important going etago link brad posted confused wanting info thanks link brad nt seen appropriate good standard ruby function gsub nt know record stuff still break site trusted content smells like html tags probably insecure way broken broken", "d": "2/2012"}, {"body": "might related issue", "d": "2/2012"}, {"body": "believe intentional see test test want get old attr model test pass need change line", "d": "2/2012"}, {"body": "disagree line tests testing immediately calling models attributes correspond original attributes makes sense waiting attributes returned server updating waiting callback fire line emulates callback fired line tests attributes updated issue callback called method call would happen using local storage example model ends incorrect original attributes see commit crude solution unsets standard success callback line nt reset attributes back old ones tests pass code feel crude obtuse think someone better job hence nt raise pull request", "d": "2/2012"}, {"body": "seems error function backbonelocalstoragejs", "d": "2/2012"}, {"body": "thanks input nt hardcoding todoscollection param localstorage plugin going break update transactions nt include todoscollection", "d": "2/2012"}, {"body": "maybe try putting todoscollection projectmodelattributes", "d": "2/2012"}, {"body": "thanks converting todoscollection json saving output attribute see line projectmodel", "d": "2/2012"}, {"body": "", "d": "2/2012"}, {"body": "although already exposed etc find strange use something completely unrelated models", "d": "2/2012"}, {"body": "nt think point declarative events instead imperative events always available times want imperative use regular better yet ignore callback instead removing dom", "d": "2/2012"}, {"body": "interesting thought could mistaken values functions reason could nt adding additional functionality key parsing seems overkill opinion", "d": "2/2012"}, {"body": "hi merrick tried doesnt seem work resize throttle testfunc throws js error backbone uncaught typeerror call method apply undefined first line stack trace throttle function line funcapply context args", "d": "2/2012"}, {"body": "maybe failing events list parsed view constructed therefore function named testfunc nt exist view yet entirely sure backbone internals seems like likely cause", "d": "2/2012"}, {"body": "cute think going stay away string programming general define function throttled debounced", "d": "2/2012"}, {"body": "backbonejsorg front page bookon change title change author also events written format event selector callback callback may either name method view direct function body nt instances string programming already exist backbone merely proposing possibility maybe could helpful along lines event selector modifier callback", "d": "2/2012"}, {"body": "anyone wants use currently implemented function pass data model serialize method sync var sync backbonesync backbonesync function method model options var tojson modeltojson modeltojson bind modelserialize model modeltojson sync method model options modeltojson tojson", "d": "2/2012"}, {"body": "might well throw example use case parse raw ticket data server parse function data unwrap attrs dataticket set following true current user notification list attrsnotificationlist attrsnotificationlistsplit attrsfollowing include attrsnotificationlist datacurrentuserid return attrs serialize ticket attributes sending server serialize function attrs add remove user notification list depending following status attrsfollowing attrsnotificationlist uniq attrsnotificationlistpush datacurrentuserid join else attrsnotificationlist without attrsnotificationlist datacurrentuserid delete attrsfollowing remove disallowed attributes delete attrsid delete attrsreporterid wrap return ticket attrs course control server kind serialization serverside whole point function backbonemodel facilitate cases need prefer handle clientside right backbone facilitates direction makes sense facilitate direction", "d": "2/2012"}, {"body": "also override problem want use feed template function return canonical json representation model return warped representation server requires", "d": "2/2012"}, {"body": "ah backwards use return representation server side add new method extract view attributes interested simple enough change required explicit already complement", "d": "2/2012"}, {"body": "thanks lot makes sense really reason ca nt pass object directly template function reads object nt change", "d": "2/2012"}, {"body": "go done", "d": "2/2012"}, {"body": "params return unparsed querystring handle right", "d": "2/2012"}, {"body": "correct see info", "d": "2/2012"}, {"body": "could always see fetch current user state use jquery error callback long server framework returns relevant http error code", "d": "2/2012"}, {"body": "manually nt think start history first know run routes nt valid logged", "d": "2/2012"}, {"body": "yes two different routes see eg information", "d": "2/2012"}, {"body": "see thanks", "d": "2/2012"}, {"body": "backbone event provide index model added code yield", "d": "2/2012"}, {"body": "use index successfully add views cases trying understand using index attribute returned eventhandlers let thought experiment javascript var model backbonemodelextend initialize function options thison change function model options consolelog model change model options thison change title function model newtitle options consolelog model change title model newtitle options thison add function model collection options consolelog model add model collection options optionsindex thison remove function model collection options consolelog model remove model collection options optionsindex var collection backbonecollectionextend var collection new collection collectionadd id title added index collectionadd id title added index collectionadd id title added index collectionremove run eventhandlers bound events respective model collection fire return attribute fire reset event ca nt index resetting collection let forget reset return eventhandler collection sorted according current comparator function short right order nt need index would need get index reset eventhandler could use get", "d": "2/2012"}, {"body": "thank going code latest release seeing among many features bug fixes added", "d": "2/2012"}, {"body": "unit testing stub global well actually handy backbone tests stub ajax reason", "d": "2/2012"}, {"body": "braddunbar got one right stub like", "d": "2/2012"}, {"body": "advantage locally scoped function delegates also run tests server side node globals nt work way client vs server feb pm jeremy ashkenas wrote braddunbar got one right stub like whatever reply email directly view github jeffrey lage adams st apt hoboken nj email jefflage mecom iphone", "d": "2/2012"}, {"body": "jefflage tests need dom anyway sounds like use something like grunt run tests stubbed dom via phantomjs also certainly define method base view class nt seem like something majority backbone users need", "d": "2/2012"}, {"body": "nt actually need dom ever interacting dom via jquery fact even behind jquery test point view kinda irrelevant could define method would cleaner delegated domlibrary provided called setdomlibrary feb pm brad dunbar wrote jefflage tests need dom anyway sounds like use something like grunt run tests stubbed dom via phantomjs also certainly define method base view class nt seem like something majority backbone users need reply email directly view github jeffrey lage adams st apt hoboken nj email jefflage mecom iphone", "d": "2/2012"}, {"body": "purposefully ideally urls never change although code might access generate addition backbone supports routing arbitrary regexes ca nt reversed fashion", "d": "2/2012"}, {"body": "thanks quick response explanation jashkenas", "d": "2/2012"}, {"body": "yes wrong place discussion supposed occur feature requests bugs", "d": "2/2012"}, {"body": "google group however fantastic place discuss taken liberty posting topic appear shortly approved", "d": "2/2012"}, {"body": "topic posted", "d": "2/2012"}, {"body": "using backbone get changed since version version using", "d": "2/2012"}, {"body": "yes right using checked seems work fine", "d": "2/2012"}, {"body": "see compare optionsindex collectionlength still feel like state connection add event collection", "d": "2/2012"}, {"body": "would mind providing specifics nature problem correct semantics changed several concerns well way states reasons change think good hopefully address sides issue", "d": "2/2012"}, {"body": "effectively need optionsindex anyhow situation collection view collection collection reads list items add server adds bunch sync call bound add events function looked length models array determine whether set last element collection selected state something view add callback collectionlength incrementing add resulting total length collection feels wrong inasmuch serial callback add bulk callback one added easy enough fix intuitive feeling", "d": "2/2012"}, {"body": "taking closer look several bugs nested events instance adding removing another model events cause models skipped index range errors sure reconcile type problem seems reporting index adding one sort operation odds", "d": "2/2012"}, {"body": "backbonejs underscorejs", "d": "2/2012"}, {"body": "believe issue similar though identical believe problems addressed", "d": "2/2012"}, {"body": "braddunbar think making faq tag issues like likely keep coming", "d": "2/2012"}, {"body": "thank much braddunbar commit solved whole problem", "d": "2/2012"}, {"body": "wookiehangover sure great deal complaints heard regarding originate dependence undocumented behavior eg setting attribute original value silent set fires think notes upgrade notes likely appropriate however assuming actually bugs change documented behavior rather stricter enforcement existing behavior", "d": "2/2012"}, {"body": "behavior correct allowed override general routes specific ones take priority reverse order add good go", "d": "2/2012"}, {"body": "hi jashkenas yep realized tested reversing order writing still ca nt get working regardless route order something spooky going", "d": "2/2012"}, {"body": "nothing spooky may reverse order expect correct specific routes go top handers array first one matches wins", "d": "2/2012"}, {"body": "hi ok fact works great browser regardless route order manually invoke using occurs amp", "d": "2/2012"}, {"body": "huh let try add test case test suite reopening bug", "d": "2/2012"}, {"body": "jashkenas added test coverage let know looks like looking ignore first commit one look theindustry seems like way make test case fail reorder routes lessspecific route first like perhaps issue binding route events like test case", "d": "2/2012"}, {"body": "seems like way make test case fail reorder routes lessspecific route first case bug supposed work", "d": "2/2012"}, {"body": "jashkenas yep seems work expected worth pull req additional coverage", "d": "2/2012"}, {"body": "like testing iterating array order iterates array order", "d": "2/2012"}, {"body": "testing iterating array order iterates array order true gt lt think useful coverage future changes route precedence demonstration test suite route order intended work", "d": "2/2012"}, {"body": "great example sites use jammit unminified js source also available gather links", "d": "2/2012"}, {"body": "used jammit nt realize flag existed aside brute force think practical way start", "d": "2/2012"}, {"body": "nope", "d": "2/2012"}, {"body": "theindustry fwiw might want take look route testing discussion", "d": "2/2012"}, {"body": "hi already seen unfortunately nt make much sense still think way important able test certain routes decoupling assigned method seems hard extract routes noninvoked router tried override routing methods instead var self thisrouter new approutersmyrouter would say would appropriate really need overwrite routing methods allow testing", "d": "2/2012"}, {"body": "brainstormed clearly doens nt work way stubmock router methods prevent invoking logic performing unit testing", "d": "2/2012"}, {"body": "think would work javascript var myrouter backbonerouterextend routes foo function var mystub myrouterextend foo function nothing set stub data use testing", "d": "2/2012"}, {"body": "definitely simple solution looking many thanks help guys", "d": "2/2012"}, {"body": "closing", "d": "2/2012"}, {"body": "well since using minified backbone really clue error might however kind error yesterday mentioning forgot include jquery backbone", "d": "2/2012"}, {"body": "sure problem seems working", "d": "2/2012"}, {"body": "hi kenn assume since using pattern already tags defined somewhere solution fairly simple giving tags attribute setting attribute create view fits javascript var new windowsomeview el var new windowsomeview el though solution nt scale tens upon hundreds lists code becomes management nightmare might recommend taking another approach make solving problem tad simpler consider views collection view view individual list item collection view attribute individual view seeing going admit tested following code written top head heavily reoccurring pattern backbone applications coffeescript class windowlistitemview extends backboneview tagname li classname tab events click child activate initialize options gt modelon change render render gt elempty html viewrender el class windowlistview extends backboneview tagname ul classname tabs initialize options gt collectionon reset onaddall collectionon add onaddone onaddall collection options gt collectioneach onaddone collection options onaddone model collection options gt view new listitemview model model elappend viewrender el basically delegating list view manages list items update collection update whole view update individual model views also automatically rerender thanks backbone evented structure hope helps", "d": "2/2012"}, {"body": "actually wanted list items clickable wrapped content child div hack would nice feature though", "d": "2/2012"}, {"body": "looks like misunderstood work read code delegateevents method show possible", "d": "2/2012"}, {"body": "ah thank guys worked pattern vincentbriglia presented gives impression could get backbone liking", "d": "2/2012"}, {"body": "see previous tickets deep objects discussion backbone intended work shallow attributes semantics deep equality identity well defined javascript traditional databases contain flat lists attributes going beyond point would require us invent jsonpath notation like dots direction backbone nt head", "d": "2/2012"}, {"body": "good catch addressed", "d": "2/2012"}, {"body": "duplicate", "d": "2/2012"}, {"body": "backbone tries minimal amount events fires default performance reasons although unlistened events quite lightweight avoid cluttering api like fire event models feel free fire one add models extending backbone", "d": "2/2012"}, {"body": "curious well ca nt seem find discussion fired success callback provided also reason implement promise returned", "d": "2/2012"}, {"body": "behavior intentional idea use specific success callback override default evented behavior always trigger event within callback like reverse true said certainly change yall think compelling use cases way around finally artsy launches general public hope submit backbone homepage", "d": "2/2012"}, {"body": "cool cool makes enough sense someone else reopen feel strongly enough way around also happy submit artsy backbone homepage open general public", "d": "2/2012"}, {"body": "think always triggering event would less confusing nt event orthogonal success callback perhaps silent property options argument could used suppress event required", "d": "2/2012"}, {"body": "hi khiltd reason error nt caught executed try block deferred request complete several options making work override check data override check data", "d": "2/2012"}, {"body": "makes perfect sense technically argue great design choice forces error checking extremely unnatural location one going remember two weeks later ca nt simply refrain inserting bothersome object better yet invoke error callback", "d": "2/2012"}, {"body": "controversy desired behavior case starters check amp", "d": "2/2012"}, {"body": "ran thing adding array models like collections unique problematic adding items without overriding add method anyway unique collections nice failed silently duplicate", "d": "2/2012"}, {"body": "believe fixed would mind checking latest master make sure", "d": "2/2012"}, {"body": "using latest version underscorejs added function backbone depends", "d": "2/2012"}, {"body": "thanks braddunbar problem", "d": "2/2012"}, {"body": "sure broken line two reality fine", "d": "2/2012"}, {"body": "reality would fine want make sure never work", "d": "2/2012"}, {"body": "well works better solution post", "d": "2/2012"}, {"body": "khiltd thanks pointing certainly could use work come better solution please submit pull request would love", "d": "2/2012"}, {"body": "hi fact run issue issue jquery mobile considers navigation embedded page use technique monkey patch jquery mobile following way jsjquerymobilenavigationjs jquery mobile checks embedded page like removing second condition checking embedded page allow backbone handle page transition nt gotten around submitting patch jquery mobile hopefully soon though hope helps note clear disallow jquery mobile embedded pages", "d": "2/2012"}, {"body": "thanks sharing probaby isembeddedpage checks something like inside href", "d": "2/2012"}, {"body": "something like yes", "d": "2/2012"}, {"body": "ok thanks reference created issue", "d": "2/2012"}, {"body": "note tried instead works", "d": "2/2012"}, {"body": "every set event default trigger event model would need silent every set unset example get perhaps could extend backbonemodel model base class following takes option parameter new model instantiated determine whether silent always true hijack backbonemodelset function new base class check instantiation option potentially always set silent true set unset calling super bonus option hijacked backbonemodelset function unset attributes first since title issue implies looking thoughts", "d": "2/2012"}, {"body": "bialecki see every issue raised past two weeks information repurposed silent option completely different functionality really like idea compat model compatibility project uses old form silent functionality actually works way previous way module would updated along backbone rather whole extra fork", "d": "2/2012"}, {"body": "contains pull request simple replication old way silent used work well gist extended model version suggested", "d": "2/2012"}, {"body": "bialecki really use methods suggested change documentation manually trigger change event change attribute event attribute changed passing silent true set function order aggregate rapid changes model want call modelchange finished behavior mention design new backbone model attributes meant fire events changed nt want notified events nt observe", "d": "2/2012"}, {"body": "thanks feedback guys know intentional behavior turns issue issue resolved think used behavior mentioned js frameworks yui comes mind passing model setter caused value set nt notify listeners obviously backbone may good reason go different direction nt know request belongs nothing docs want use option hard time thinking situation want use use cases demonstrating use somewhere", "d": "2/2012"}, {"body": "bialecki right believe bit loaded term backbone clarification documentation probably order docs change hint nt really explain reasons using", "d": "2/2012"}, {"body": "test backbone tell us still seeing issue", "d": "2/2012"}, {"body": "issue reported experienced", "d": "2/2012"}, {"body": "bug think line since call loadurl frag expects fragment rootfragment strip root prepend also keep using indexof make sure keep mind indexof returns string found indexof evaluates string starts", "d": "2/2012"}, {"body": "sure relevant defining history backbonehistorystart pushstate true root realize setting root nt necessary app structure changed since reporting bug sure fixes original issue defining empty root seems effect routes possibly related indexof", "d": "2/2012"}, {"body": "seems reasonable addressed", "d": "2/2012"}, {"body": "expecting handler never called value called next invocation expected result think skipping change handler altogether greatly reduces utility", "d": "2/2012"}, {"body": "expecting first handler never fires change value attribute set silently", "d": "2/2012"}, {"body": "believe read another ticket silent true nt many people expect thought silent true would change value fire event read ticket silent true like set value let even model think anything changed value property different model nt think actually changed set nonsilently difference testvalue noticed therefore change event fires well see find ticket", "d": "2/2012"}, {"body": "basically silent absolutely nothing since latest changes backbone hope emulate previous way things implemented use custom triggers use change events got", "d": "2/2012"}, {"body": "change made collection dynamically set attribute others initialization models created although use cases ways change deemed correct collection fully initialized receives first model hopefully fix code writing", "d": "2/2012"}, {"body": "would open adding new ready event collection fully initialized models calculations outside collection initialize quirky collection longer selfsufficient", "d": "2/2012"}, {"body": "would open adding new ready event collection fully initialized models firstly evented thing control create collection twoliner nt float boat create method", "d": "2/2012"}, {"body": "yeah right thinking eventworthy situation ugh ok suppose write whole extra line code trigger calculations thanks quick response", "d": "2/2012"}, {"body": "since version view property changelog two new properties views el cached jquery zepto reference view element setelement used instead manually setting view el set viewel view el correctly well redelegating events new dom element", "d": "2/2012"}, {"body": "ah nt know thanks clarification", "d": "2/2012"}, {"body": "thanks bug report correct bug addressing today update issue finished", "d": "2/2012"}, {"body": "also confirmed pinpointed fixed add tests asap", "d": "2/2012"}, {"body": "fyi bug result issue", "d": "2/2012"}, {"body": "braddunbar tomasztunik fix look", "d": "2/2012"}, {"body": "jashkenas fix immediate issue event fire subsequent changes either", "d": "2/2012"}, {"body": "line causing method silencing change maybe fix delaying changes change event propagation next browser event loop change event would nt delete silenced changes happened current change event question silenced changes happen given change event propagation taken account current change event deferred next tick shall fix pull work like add tests braddunbar case", "d": "2/2012"}, {"body": "ideally want avoid possible maintain synchronous logic", "d": "2/2012"}, {"body": "tried example braddunbar version mirrors behavior fix want modify behavior change w setting attributes silently edit fix example", "d": "2/2012"}, {"body": "hmm damn tricky since use without always trigger change end silenced inside change x would end trigger change anyway would check changed attributes without using modelchange point changed would empty case like issue started discussion could still stop infinite loop setting attr silent true end whole change propagation would called would break silent behavior way employ new role stoppropagation submitting new patch move triggering change attribute morechanges loop avoid change silenced attribute wiped", "d": "2/2012"}, {"body": "actually something nt pointed basically unsilenced set acts change well triggers change attr silenced attributes way multiple changes attribute one change propagation trigger change attribute final value", "d": "2/2012"}, {"body": "hswolff right behavior however think utility event greatly decreased called consistently use getting notified changes", "d": "2/2012"}, {"body": "braddunbar someone wants set attribute silently want included set changed attributes later point nt know answer question putting forward another question attribute set silently behave directly modifying attributes object maintain setter magic case example magic retained", "d": "2/2012"}, {"body": "someone wants set attribute silently want included set changed attributes later point nt know answer question putting forward yes primary use case silent changes", "d": "2/2012"}, {"body": "jashkenas guess question apply well events think yes great deal thinking nested changes still unsure outcome cases instance attribute set set silently change event another change event last prevent", "d": "2/2012"}, {"body": "yes nested strange nt think way go nested terribly consequential long consistent think example give would leaving model state later called get", "d": "2/2012"}, {"body": "going along nested change issue noticed interesting behavior set attribute b silent change event another attribute try set attributes b silent false b still set silent true", "d": "2/2012"}, {"body": "stinkycheeseman thanks think addressed also great username stinky cheese man one favorite books kid", "d": "2/2012"}, {"body": "braddunbar haha thanks let know find anything else still favorite book p", "d": "2/2012"}, {"body": "two approaches mention actually accomplishing two different things mutually exclusive first two code examples bind event handler event handling whether construction nt really make difference case last example uses events hash uses bind dom events triggered example never called however could trigger like note reference coffeescript class view extends backboneview events tick tock tock gt consolelog tock new view eltrigger tick documentation better job explaining though definitely check let us know unclear", "d": "2/2012"}, {"body": "curiosity instantiating twice mobile view something first instance viewport replaced another view user comes back first view getting double bindings", "d": "2/2012"}, {"body": "something like home view call different endpoints user logged event bindings login logout buttons views instantiated one rendered time login logout switch view different mode hope clear enough", "d": "2/2012"}, {"body": "still entirely clear views instantiated time bind preexisting element dom means double events nt really bug way events specifically event delegation works instantiate view preexisting element need specifically unbind events persist element node removed dom", "d": "2/2012"}, {"body": "well seemed like good idea instantiate views initialization bind root element dom render one according login mode replace elements rendering guess better way though comments", "d": "2/2012"}, {"body": "would instantiate views need view nt used need around taking memory potentially introducing side effects like seeing", "d": "2/2012"}, {"body": "tend use pattern javascript var view backboneviewextend el test events click test onclick onclick function event view new view viewrender instead tend use pattern exactly avoid zombie views result duplication events javascript var view backboneviewextend events click test onclick onclick function event view new view target append viewrender el location would use first pattern application chrome view instantiates gui javascript var application backboneviewextend el wrapper initialize function options thisrender document ready function windowapplication new application", "d": "2/2012"}, {"body": "ditto vincentbriglia said defining letting view generate element time well however want define clean events removing define method every corresponding every event example var myview backboneviewextend initialize function thismodelon change thisrender render function return destroy function thisremove thismodeloff change thisrender", "d": "2/2012"}, {"body": "thanks malandrew vincentbriglia really helps", "d": "2/2012"}, {"body": "event nt binding click el gt choose event model change gt render event", "d": "2/2012"}, {"body": "model change gt render event nt execute", "d": "2/2012"}, {"body": "nt look like choose method updates attributes model current view bound basic exercise change looking closer code might perhaps listening wrong event wrong object choose event updates choice collection nothing current views model assumption proper backbone pattern would recommend adding method collection like want get list currently highlighted table rows nt forget listen bind method collection change event might get bit without really knowing structured views much calculated guess", "d": "2/2012"}, {"body": "updating choice attribute list model also updates free attribute old choice item model new choice item model item chosen limited amount users hence free attribute causes item model change event execute added part list model problem although render functions item invite models exactly invite view nt rerender item model change executed work duplicate render method javascript windowlistm backbonemodelextend", "d": "2/2012"}, {"body": "ah get mean think following snippet give need note super property backbone exposes child parents prototype javascript invitev itemvextend template template invitetemplate html initialize function initializefn thisconstructorsuperinitializeapply arguments render function elhtml thistemplate thismodeltojson return", "d": "2/2012"}, {"body": "could see option created default behavior still remain imo", "d": "2/2012"}, {"body": "would want handle add events collection updating model would want change event fire instead see situations would valid behaviors throwaway views vs carefully managed views etc think flag would pretty swell", "d": "2/2012"}, {"body": "yes implemented something like addingremoving necessary instead replacing call soft reset nt support updating models certainly could handy", "d": "2/2012"}, {"body": "used custom extension exactly wunderkit well us one yes option rather default behavior edit hm wondering could implement kind sync behavior example fetch returns collection models gone changed added check vs models already exist also check models nt removed get removed collection well something think", "d": "2/2012"}, {"body": "used pull request checked whether snippet works backbone get track", "d": "2/2012"}, {"body": "dalyons pr awesome feature works like charm", "d": "2/2012"}, {"body": "sorry version", "d": "2/2012"}, {"body": "hi nicholasf tried reproduce error seeing nt able observe results would mind posting code using glad debug", "d": "2/2012"}, {"body": "hi braddunbar try bit busy dig right perhaps ticket help someone else hits error", "d": "2/2012"}, {"body": "sounds like describing version backbone using", "d": "2/2012"}, {"body": "version", "d": "2/2012"}, {"body": "ok would mind posting reproducible test case", "d": "2/2012"}, {"body": "model thisspellcheck true thison change spellcheck function model color alert spellcheck change wo nt show thisset spellcheck false thisset spellcheck false goes silent", "d": "2/2012"}, {"body": "think want properties model eg tracked backbone fire change events following code appears work fine console", "d": "2/2012"}, {"body": "thanks braddunbar", "d": "2/2012"}, {"body": "great idea said foca need improvements eg happens urls mapped route method", "d": "2/2012"}, {"body": "besides problem multiple routes one url also problem reconstructing dynamic urls leads believe nt general solution problem could become backbonejs feature besides get impression tying parts app back hrefs corresponding router methods antipattern feel really dirty leads believe something best kept minimum facilitating probably hurt help", "d": "2/2012"}, {"body": "malandrew valid point however referring urls continue happen long keep using reference stuff applications nt follow traditional model though ie ruby frameworks something along lines urlfor controller action end day since reference may also change going put example expressjs found kind funny since says supported two methods applookup appmatch sound quite interesting work way around proposed urlfor though may get something jashkenas tbranyen addyosmani derickbailey think think worth", "d": "2/2012"}, {"body": "tend agree w malandrew problems difficulty would create doubt solution could flexible would fit backbone philosophy least without becoming performance drain fwiw seems benefit fraction runtime performance penalty using simple objects cache strings string replace functions js var personroutes list persons show persons id edit persons idedit var getroute function obj route routedefinitions return routedefinitions route replace id objid var person new model id var route getroute person edit personroutes gt top head something simple would work less overhead proposed ticket originally would also flexible could specify arbitrary number routes want given object type could take add additional bits replace optimize regex etc", "d": "2/2012"}, {"body": "urls ca nt really go away though apps users may want bookmark certain states application need coherent urls example means need pass around urls way point need change something happiest moment need grep around source urls change one one centralized point refer urls important imho implementation certainly contrived current needs never even thought multiple urls given route yet one solution keep names urls apart routes would complicate syntax nt like still maybe something like javascript app backbonerouterextend routes search q search search q filter search filteredsearch var app new app appurlfor search blah gt searchblah appurlfor filteredsearch blah gt thoughts", "d": "2/2012"}, {"body": "nt think necessarily lose bookmarks visit route still add bookmark page way backbone currently works lose ability right click link choose add bookmark link would bet bookmark occurs viewing actual state right clicking link may lost without urls ability app crawled google another search engine typically use tags something meant crawledlinkable however may still generate bookmarkable state resource application state want bookmarkable may try putting function model returns url state displays object time may even require extra work since url view likely mirror restful resource gt question ask implementing links used humans machines nt think attributes dynamic pages like search params really desirable bookmarkable navigatorlocation search params really link since meant crawled like derickbailey approach", "d": "2/2012"}, {"body": "said bookmarkable thinking copy paste current url paste chat something rightclick add bookmark though bad said definitely dig derickbailey approach", "d": "2/2012"}, {"body": "add bit discussion split url path part everything left search part everything right reserve path address specific resource put state search part router methods take care serving correct resource use params search part set application state cases resource one object intersection two objects example two different resources intersection math john many cases also used display resource intersection john math john math homework test scores attendance etc one resources lie intersection could url necessary may want consider getting path part url resource model collection applicable application state search part separately", "d": "2/2012"}, {"body": "afraid ca nt possibly add feature simple reason support routing arbitrary regexes obvious way given data reverse string regex could matched nice pattern include urls urltemplates api json example another nice pattern models functions easily tell appropriate url different representations model example", "d": "2/2012"}, {"body": "trigger change perspective model start value end value change occurred yes change", "d": "2/2012"}, {"body": "hi jeffwatts thanks reporting since new value undefined event fired information also update upgrade notes backbonejsorg help sorry inconvenience", "d": "2/2012"}, {"body": "seems little strange undefined beginning end clearly point time undefined call anything else queries state model perspective model equal value undefined change state model different state model still change nt like saying silent changes alter state model seems clearly untrue seems like saying state model tied firing change event rather actual state model attributes reasoning behind first glance seems backwards", "d": "2/2012"}, {"body": "guess view always simply means notify listeners perspective means something much broader find inconsistent little strange seems like model attributes define model state whether notification sent listeners understand firing change fundamental keeping model internal state consistent probably work around", "d": "2/2012"}, {"body": "point want model consider changed nt use changes silent changes way fiddling model state perhaps need temporarily perhaps changing things rapidly without firing change events means perspective rest app state change occurred go back start changes need change app thought silent changes started", "d": "2/2012"}, {"body": "correct behavior see", "d": "2/2012"}, {"body": "behaviour least mentioned change log upgrading notes clearly fundamental logic change nt mentioned whatsoever", "d": "2/2012"}, {"body": "robinduckett right intended think correct behavior obviously underestimated impact change submit patch documentation update shortly thanks taking time let us know", "d": "2/2012"}, {"body": "thanks fix code", "d": "2/2012"}, {"body": "would possible submit failing test case patch pull request afraid current extra decodeuricomponent necessary browsers serious bugs checking documentlocation return predecoded url fragment browsers nt make sure fix works firefox webkit sending", "d": "2/2012"}, {"body": "sent pull request fix", "d": "2/2012"}, {"body": "tested safari chrome firefox", "d": "2/2012"}, {"body": "thanks closing issue favor pull request test documentcloud get chance", "d": "2/2012"}, {"body": "trying fix need extra testing", "d": "2/2012"}, {"body": "yep certainly way force event model describing definitely nt change event perhaps want firing search event instead", "d": "2/2012"}, {"body": "exact request see closed wondering trigger really want means flow would nt think nice much looking much better nt right change event really change set event maybe every set always trigger set someproperty event trigger change someproperty event something really changed force property would really good addition point view therefore suggest reopening feature request", "d": "2/2012"}, {"body": "thanks extra information problem prototype replacing version causes underscore believe incorrectly version native version prototype version handle operator way underscore causing problem fix including underscore prototype patching prototype implementation deal operator recommend former", "d": "2/2012"}, {"body": "hi davisre thanks report believe addressed please let us know still issues backbone", "d": "2/2012"}, {"body": "ah see patches great thanks", "d": "2/2012"}, {"body": "pull request adds functionality", "d": "2/2012"}, {"body": "repeat without concrete use case going wontfix previous ticket allows set backbone use object dom library switching dependency runtime middle app lifecycle break views routers afraid nt see point", "d": "2/2012"}, {"body": "context said want whichever pull request ends driven someone real project real library mind otherwise usually end implementation nt actually work sure got assumption nt real project mind clarity three real projects currently maintain modified version backbonejs issue pull request works nt like implementation break views routers done middle lifecycle work using right beginning lifecycle nt problem see middle would problematic nt interest behavior fine real use case", "d": "2/2012"}, {"body": "great love hear version jquery want use nt value ca nt set load backbone", "d": "2/2012"}, {"body": "excellent apologies explicit enough earlier use case two versions jquery page one want use backbone older version jquery code using without scoping set loading backbonejs need careful setting back loading rest code easier modify vendored backbonejs version use rather careful load orders would easier able set library dynamically application code begins use backbone rather load time", "d": "2/2012"}, {"body": "hey thanks explaining realworld use case almost always ever looking patch merged make", "d": "2/2012"}, {"body": "real world case amd convince ya hehe", "d": "2/2012"}, {"body": "ha ha actually exactly quote ever infallible wycats pm wycats amd large unnecessary dependency pm wycats nt need asynchronous loading level complexity ever pm wycats amd people admit tell use builder pm wycats cut middleman nt add complexity projects going use builder pm wycats oh shit think probably started something", "d": "2/2012"}, {"body": "shame two best mvc libraries take stance makes lot assumptions level complexity users applications well users would like share code across projects etc know beating dead horse bow thank backbone unlike emberjs reasonably patchable amd seems using patched version forever", "d": "2/2012"}, {"body": "thanks jashkenas", "d": "2/2012"}, {"body": "afraid internet explorer bugs allow delegate events ie use regular jquery bind instead", "d": "2/2012"}, {"body": "thought got attention actually works ie development version", "d": "2/2012"}, {"body": "sorry way events designed remove event already fired model destroyed model removed collection collection longer receives events model want get event destroy listen model instead", "d": "2/2012"}, {"body": "handy listen models instead collection little strange collection synchronization goes without event ok learn live thanks", "d": "2/2012"}, {"body": "posabsolute function invoke dom node using parens like", "d": "2/2012"}, {"body": "lol im idiot removed el put setelement sorry polluted issue tracker yet coffee morning", "d": "2/2012"}, {"body": "impractical change perhaps warning appropriate chapter", "d": "2/2012"}, {"body": "hi reinierkip thanks taking time write able reproduce issue seeing fiddle things seem working intended extended modified backbone way version backbone underscore using", "d": "2/2012"}, {"body": "pasted example console backbonejsorg worked fine printing still problem please open ticket reproducible test case", "d": "2/2012"}, {"body": "could provide test case something similar unable reproduce", "d": "2/2012"}, {"body": "confirm using latest version underscore method added", "d": "2/2012"}, {"body": "thanks lot bad", "d": "2/2012"}, {"body": "right different definitely intended behavior see context step value may changed current value changed value since last fired", "d": "2/2012"}, {"body": "generally combination implementation abstraction library like amplifyjs handle basic mechanics persisting local storage unfortunately wo nt ever see simple nested model implementation anywhere thing get basic getset logic working happy realize want observers able register change notifications top level object avoid ridiculously tight coupling spend ton time event proxying system relays messages child objects way chain turning everything tree good luck fighting cyclical references parent objects notice nt work anymore strange way implemented rewrite want generic validator handle child objects fight encounter bunch crazy bugs first time try something nt work backbone actively prevents even trying use purpose oh yeah shallow copies end big mess references think going save eventually override end full special cases want scream start lord help like change notification reliably inform specific fields actually changed nt validatetransmit save time done replaced every line backbone code come hold terribly cynical belief people tell silly realizing easy adding nested model support framework probably opinions colored fact never gone far beyond first step making getset work call liar still refuse produce simple example exists fairy tales legends", "d": "2/2012"}, {"body": "well thoroughly depressed amplifyjs advantages backbonelocalstoragejs using moment seems number live applications using backbone must possible problem must solved different groups set aside request eventually supporting tasks within tasks limit example one level nesting many projects contain many tasks task one project ca nt complicated course many live backbone apps backed online storage localstorage must possible make localstorage mimic sql db whatever live apps backed frustrating part app working fine albeit persistance proof concept ui design trying add basic persistance absolutely killing using jquery data command keep required references like array children tasks link given tasks parent etc getting messy keeping info dom working thought make much easier actual mvc pattern could keep objects model layer get advantages separation model code view code automatic binding model view persistance truthfully losing hair fast pace right broken perfectly working app demoing client get persistance ways much easier stuff old fashioned way model logic php layer server nt case issues exist different layer tried simple example faq see use collections throwing verified example work model create id initialized way create nested collection messages id way associate url collection based id point sure would way around like waiting mailbox model save first going create collection written proposal nt work suppose one perils asynchronous design wish though since framework already dependent events written example use events show one would initialize child collection successful save parent object would helpful", "d": "2/2012"}, {"body": "hey fellas fun meecect looking get immediate help particular app better luck irc freenode documentcloud mailing list still let leave ticket open place folks vent", "d": "2/2012"}, {"body": "even weirder pass silent true set behaves like would expect", "d": "2/2012"}, {"body": "hi douglasj main distinction tracks previous attributes change see gist passing setting handler event observe behavior desire help", "d": "2/2012"}, {"body": "hmmm guess source issue custom sync maps update database hoping issue update table set fieldnewvalue values actually changed rather blasting whole state database silent true indeed make backbone behave like would expect use case seems easy forget adding new code forget sync function sees cells changed nt update anything thanks clearing currently designed behaviour think slightly offnonintuitive server maybe crazy specific case following changed true update changed fields nothing flagged changed print log remind team something might amiss check silent true update whole row thanks", "d": "2/2012"}, {"body": "think still get behavior want without think", "d": "2/2012"}, {"body": "yes would possible implementation removes save logic backbonesync places handlers server code places new model fetch set save flow couldwould exist requiring place would nt work codebaseimplementation imagine could work well users though already tested implementation last comment pretty happy log message enough stop forgetful devs included including silent thanks time", "d": "2/2012"}, {"body": "hey salomvary check discusses issue great detail feel like api seesaw remain dom node change access cached jquery object noticed change behavior suit needs simply setting property hand", "d": "2/2012"}, {"body": "nope perspective model state started still change occurred", "d": "2/2012"}, {"body": "yes guess right weird corner case previous logic worked well record tt documented bug", "d": "2/2012"}, {"body": "braddunbar nt think error handler needed model creation stating validation running automatically creation error thrown nt sufficient think evidence validation happen welldefined points controllable programmer", "d": "2/2012"}, {"body": "opinion broken maybe previous behavior nt ideal nt see problem approach taken release minimum would like see rollback validation strategy thought little better", "d": "2/2012"}, {"body": "sorry keep jumping thought something else validate function supposedly ensures entire model valid set single attribute time ca nt build information model one piece time validate validates whole model every set", "d": "2/2012"}, {"body": "workaround would transfer actual validate validateall could call validate like javascript validateall function thisvalidate thisattributes clone use validate attribute change validation framework expecting", "d": "2/2012"}, {"body": "would nt say opinion broken plainly ridiculous feature improves nothing anyone much like caseinsensitive filesystem innovations even want like validation shoved throat matter fired way early well even populated ed collection sure sounds neat paper validation method needs inspect value another attribute make decision whether something valid sol object nt even built yet way possibly bypass validation unsetting resetting object validation method stupid stupid stupid", "d": "2/2012"}, {"body": "agree change may force us look methods validation", "d": "2/2012"}, {"body": "agreed validation completely broken ca nt event create new model form passing bunch invalid attributes collection create method along error handler one would expect error callback gets thrown nope get ca nt create invalid model error validation gets invalid arguments first time called tells backbone nt valid backbone decides throw error instead triggering callback missing something", "d": "2/2012"}, {"body": "case someone thinks concerns esoteric edge cases nt worth worrying concrete example backbone makes flatout impossible model none fields blank must match order valid enough save request object backend backend makes sane choice providing plain text password comes back blank never stored database never populated backbone wo nt let succeed required fields blank compromise force backend spit irrelevant nonsense work around requirement still screwed validation needs call yet populated method nt even invoked yet choice rename something else like pull fast one like make sure validation never runs model initialized stupid wanted front end frameworks nt charge maintaining referential integrity make wiring things easier", "d": "2/2012"}, {"body": "reverted behavior commit also adding function checking models whose attributes set silently note docs used assert things attribute want invariants", "d": "2/2012"}, {"body": "throwing error invalid model created considered silent update", "d": "2/2012"}, {"body": "silent update set", "d": "2/2012"}, {"body": "thanks j", "d": "2/2012"}, {"body": "thanks terryroe figuring stuff", "d": "2/2012"}, {"body": "one problem terryroe backbone fires validation even remaining ones might expected workaround call awkward opinion", "d": "2/2012"}, {"body": "vkovalskiy attrs undefined though correct also find operation reason nt work", "d": "2/2012"}, {"body": "braddunbar yes making call function got check validity backbone validation mechanics really good needed point library right find vague use box actually stuck writing custom validator functions fancy silent true time jashkenas probably could settle collaborative resolution clear validation rules could suit time", "d": "2/2012"}, {"body": "vkovalskiy thanks thanks pointing observed behavior wanted reverted jashkenas man gives us goodness", "d": "2/2012"}, {"body": "use catch importantly adding model collection twice indicates error application logic early error", "d": "2/2012"}, {"body": "trycatch never caught error wherever put believe error happened ajax request meaning error happens inside backbonecollection fetch code inside code ca nt really catch afaik also error happens special conditions multiple places app loading models time way catch would server keep track models sent clients recently guess keep error commented", "d": "2/2012"}, {"body": "common mistake event easy know fired validation ajax call think standarized carefully probably use use something similar unified way could great also mention issue awesome pluggable storage system imagine define plugin simultaneously one model model saved places plugins websockets custom servers etc think", "d": "2/2012"}, {"body": "thanks tomas merged fix", "d": "2/2012"}, {"body": "want extend jquery create specific backbone views feel free extend jquery create specific backbone views really change backbone proposed far make", "d": "2/2012"}, {"body": "sorry nt phrase clearly proposing backbone views automaticallyoptionally attached jquery available backbone implements glue code plugin definition part make work transparently found views nice way write jquery plugins want provide familiar api using adapter guess eg compare following javascript without glue code navtabs function options optionsel new tabs options glue code navtabs tabs options could done simple way attaching widgetbridge complex stuff", "d": "2/2012"}, {"body": "seems like still failing even encodeduri uri fat checkurl call segment calling thisgetfragment returns decoded uri trying decode checkurl call causing urierror uri malformed error reserved charaters pull requests check failing test fix", "d": "2/2012"}, {"body": "ping let know something wrong help way", "d": "2/2012"}, {"body": "use case requires opposite change worked around thought would share initializing collection wanted iterate models call method model method would use standard modelget access model properties method also bound add change events basically check get first access properties appropriate way", "d": "2/2012"}, {"body": "thank extremely useful us core application backbone works well pushstate hashchange special pages example signing want nice urls like domaincomsignup browser nonpushstate browser initial url trigger route slightly adapt case setting submit pullrequest opinion allowing optin pushstate optingout hashchange logical patch might sideeffects nt thought", "d": "2/2012"}, {"body": "use case namespaced events appear necessary using applicationwide events example something working use event aggregator object listening applicationwide events base class class gcbbaseview extends backboneview notifier extend backboneevents concrete class class gcbobjectview extends gcbbaseview initialize bindto model change coords coordschanged bindto model change scale scalechanged bindto model change display toggledisplay bindto model destroy close notifier event aggregator available view views extend baseview case app many instances objectview delete one single objectview every instance objectview ends losing chart touchstart event listening ideally able namespace event valid use case btw temp measure done work around problem class gcbobjectview extends gcbbaseview initialize nt think ideal though property every objectview rather objectview prototype", "d": "2/2012"}, {"body": "already binding objectview instance context unbinding passing context", "d": "2/2012"}, {"body": "thanks jeremy course right nt realised context parameter unbindoff reason thoughtassumed similar signature jquery unbind passing context parameter give flexibility probably need namespaced events reasons suggesting anyway cheers", "d": "2/2012"}, {"body": "danroberts nt seem possible moment force trigger route hash nt changed tried routernavigate route trigger true nt work quick hack simply call", "d": "2/2012"}, {"body": "olalonde using wookiehangover method good results wrote custom function checks route trying go current hash calls either routernavigate historyloadurl seems reasonable could part options array something like refresh true want trigger route regardless also maybe update documentation seems order since trigger true logically going trigger route", "d": "2/2012"}, {"body": "tested works awesome thanks jashkenas", "d": "2/2012"}, {"body": "way globally disable breaking change many cases treated classic functionality impossible without lot code editing far tell please correct wrong creates hurdle wanting upgrade get features fixes functionality feel default things already allows people upgrade easily still providing new functionality alternatively setting could add would close second solution", "d": "2/2012"}, {"body": "fearphage definitely breaking change documented think important backbone helps make interface responsive possible default always monkey patch reverse", "d": "2/2012"}, {"body": "braddunbar read understood section breaking change mixed new cool stuff guess nt called prominently expected clarity sake applies correct documentation mentions creation destruction really wish enableable feature instead feature workaround get back things used work curiosity people using handle errors remakereadd component back ui remove falsely adding", "d": "2/2012"}, {"body": "proposed global return classic functionality javascript function prototype slice create destroy save function name function method prototype name function var args slicecall arguments options argslength amp amp args argslength backbonemodelprototype slice untested may miss cases road head also sample code believe wanted undefined working interested", "d": "2/2012"}, {"body": "curiosity people using handle errors remakereadd component back ui remove falsely adding think best thing case failed request notify user retry stepping frequency successive attempt clarity sake applies destroy create save correct documentation mentions creation destruction yes also takes option also sample code believe wanted options arguments arguments undefined meant handle keyvalue arguments eg case third argument", "d": "2/2012"}, {"body": "think best thing case failed request notify user retry stepping frequency successive attempt nt account unrecoverable errors although inconvenient feels like poor default read hack make ui misrepresent happening back end feels like hack improve perceived performance missing something simplifying feels like treating symptom opinion yes collectioncreate also takes wait option thank meant handle keyvalue arguments save eg modelsave foo bar case options third argument understand", "d": "2/2012"}, {"body": "fearphage situation requests may expected fail frequently means change calls pass give desired behavior explicitly", "d": "2/2012"}, {"body": "changed name seemed best jashkenas think", "d": "2/2012"}, {"body": "ok fair enough fixes issue created functionality interested seeing", "d": "2/2012"}, {"body": "certainly looked problem using see return removed element ala pop end wish used would much nicer inline js missing something please feel free point direction way would cleaner fashion", "d": "2/2012"}, {"body": "seem easy enough implement fairly well defined however defined likely expect well things might get bit slippery", "d": "2/2012"}, {"body": "pop push shift unshift ended ticket looking", "d": "2/2012"}, {"body": "adding", "d": "2/2012"}, {"body": "added thanks nudge", "d": "2/2012"}, {"body": "quick cheers jeremy", "d": "2/2012"}, {"body": "thanks jeremy", "d": "2/2012"}, {"body": "nt models collections nonjson object attribute model see new tag line already backbonejs want sophisticated object framework ca nt actually handle objects within objects seriously though mention anywhere could find backbone documentation attributes says attributes property internal hash containing model state model state include models b final resolution ticket closed fix seems hard believe backbone models submodels json impossible", "d": "2/2012"}, {"body": "machineghost impossible nice keep clean separate model objects database row values stuff hash together instead", "d": "2/2012"}, {"body": "thanks link despite going backbone docs hundreds times somehow managed always miss faq days ago even specifically looking list events included however understand backbone devs wanting put effort include direct support nested models still nt see ca nt prevent tojson exploding nested models put another way preventing nested models working enabling nested models posters showed would require lines code ca nt see would interfere number good patterns modeling structured data client side backbone provide foundation reason given faq supporting nesting", "d": "2/2012"}, {"body": "however understand backbone devs wanting put effort include direct support nested models still nt see ca nt prevent tojson exploding nested models supporting halfbaked solution worse supporting first place made default implementation dramatically slower folks want true nested model support still wo nt able use better override right thing app elements would needed serious patchtake ability handle array object attribute models collections values logic vivifying nested arrays objects models collections time way querying nested models collection etc etc", "d": "2/2012"}, {"body": "nt realize full scope issue fair enough", "d": "2/2012"}, {"body": "ps thanks jashkenas explanation", "d": "2/2012"}, {"body": "ran well events supposed triggered param", "d": "2/2012"}, {"body": "faced issue looks like snippet demonstrate thanks wookiehangover", "d": "2/2012"}, {"body": "missed add parameter", "d": "2/2012"}, {"body": "seems something funny consolelog going changed alerts fired model collection view total alerts", "d": "2/2012"}, {"body": "thanks answer hm see point performance concerns however usecase overwrite method santize data precise implemented method way first looked internal object find data value available triggered search resources gather information though know could handled otherwise backbone interesting use internal object cache way ran problems returned different results", "d": "2/2012"}, {"body": "rather making everyone use functions defaults propose different solution hopefully get ticket reopened backbone uses special var extend function protoprops classprops var child inherits protoprops classprops childextend thisextend return child handle subclassing simply add method extends defaults rather replacing something like var extend function protoprops classprops var child inherits protoprops classprops typeof thisdefaults function amp amp typeof protopropsdefaults function childdefaults extend thisdefaults protopropsdefaults childextend thisextend return child productionready code hopefully get idea implemented everyone could subclass heart content get use objects defaults var backbonemodelextend defaults foo bar var b aextend defaults bar baz assert new b get foo bar assert new b get bar baz", "d": "2/2012"}, {"body": "machineghost function used altering allow functionality would also change classes also using much flexible instance nt want extend parent rather replace want two specific properties ignore rest", "d": "2/2012"}, {"body": "well want something fancy clearly functions way go seems time complete bs figure someone wants default inheritance want simple inheritance ie keep values come parent parent parent unless define different value assuming oop prototypal inheritance works delete values parent class subclass dares define single value even completely different value set parent something unfamiliar anyone familiar inheritance functionality would also change classes talking five lines right five lines imagine nt change often making new modelextend copy existing function would add neither significant weight would maintainability problem change extend year change line twice year extend even change year hear saying got great simple extension mechanism less simple change way propose given getting problematically less simple given would give users kind inheritance expect inheritance framework nt worth", "d": "2/2012"}, {"body": "try show matters defaults inheritance done using two different approaches proposed form var backbonemodelextend defaults var b aextend defaults current form var backbonemodelextend defaults function return var b aextend defaults function return extend thisconstructorsuperdefaults imagine new backbone user probably nt even know defaults function b even know probably nt know thisconstructor thisconstructorsuper c even know still put together extend something easy user familiar extending stuff everyone likely nt even know need warning sign documentation defaults says hey stuff nt inherit lack inheritance bites likely keep using object form defaults expecting work issue keeping special extend function dry nt repeat forking two functions really worth causing confusion", "d": "2/2012"}, {"body": "someone wants default inheritance want simple inheritance ie keep values come parent parent parent unless define different value exactly happening value parent prototype kept unless redefined", "d": "2/2012"}, {"body": "value defaults parent prototype kept unless redefined totally one way think defaults one property implementation standpoint exactly right way think defaults literally single js property ignores backbone actually worksis used nt foomodelget foomodelget bar words attributes nt one property backbone encourages think rightly attribute property model fooget bar fooget baz even though fooattributes fooattributes argue backbone nt work directly attributes getseta bunch methods treat attribute property defaults attributes thought way single defaults property foodefault bardefault etc think way makes absolutely sense setting foodefault would effect whatsoever bardefault", "d": "2/2012"}, {"body": "might related problem changed function problem went away nt dug problem determine root cause defined object function base class extended base class instantiated several instances extended model added properties attribute var new extended new extended messages doit message consolelog messages doit message problem reference object expected making function fixed guessing deep copy defaults object done", "d": "2/2012"}, {"body": "tauren right copying defaults done nonprimitive value set used instances type using function creates new defaults object every call sidesteps issue", "d": "2/2012"}, {"body": "braddunbar yep fact docs mention need reread docs last time went quite ago remember javascript objects passed reference include object default value shared among instances", "d": "2/2012"}, {"body": "biggest pitfall see developers switching classical inheritance language prototypical inheritance javascript case backbone actually call defaults really getting cloned every time extend model view etc simple method something like", "d": "2/2012"}, {"body": "shared reference issue totally valid one stop cloning backbone easily provide actual inheritance defaults remember clone nothing wrapper around extend instead base clone extend backbone could default foo class would nt erased setting default bar class b subclasses", "d": "2/2012"}, {"body": "would possible set flag popstate event unset flag navigate called directly could test router handler whether user pressed browser back button think would work modern browsers history support better nothing", "d": "2/2012"}, {"body": "came across issue solved way events keyup subdomain checksubdomain initialize function thisgetsubdomain debounce thisgetsubdomain checksubdomain function e called every seconds consolelog subdomain defining events events object method already bound proper context seems working fine far", "d": "2/2012"}, {"body": "jashkenas hoping clear confusion thought events ca nt delegated inserted dom case thanks", "d": "2/2012"}, {"body": "large part point using declarative events backbone views delegated time regardless view happens dom", "d": "2/2012"}, {"body": "ah thanks response definitely would make sense know reason declarative events would get stripped delegated view inserted dom part event callback example model view inserts dom none declarative events subviews bound yet running firebug works perfectly events set another observation call individually subviews view object code block firebug callback run events get set originally thought issue views yet inserted dom", "d": "2/2012"}, {"body": "darbyw think issue likely due repetitively calling element replacing content jquery cleans html replaced includes removing event handlers likely handlers removed jsfiddle illustrating issue prevent using detach", "d": "2/2012"}, {"body": "braddunbar many thanks problem many different places", "d": "2/2012"}, {"body": "post issue well", "d": "2/2012"}, {"body": "sometimes two requests valid first returned", "d": "2/2012"}, {"body": "great point buys often perhaps key options parameter mike phone feb jeremy ashkenas reply replygithubcom wrote sometimes two requests valid first returned reply email directly view github", "d": "2/2012"}, {"body": "kkaefer thanks solved problem", "d": "2/2012"}, {"body": "looking also got confused wonder jashkenas thinks nt need override take example customer model contains attributes firstname lastname added fullname method want use fullname inside template called like fullname accessable think use different approach pass customer object like template instead", "d": "2/2012"}]