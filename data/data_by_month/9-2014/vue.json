[{"title": "issue data components computed values", "body": "created component data computed value computed value depended data set depended values parent everything works ok nt computed value never rechecked think case depended values set data object component self depended value passed parent used component hard explain problem easily seen example", "num": "449", "d": "9/2014"}, {"title": "vattr", "body": "hi testing new release problems vattr checkbox disableenable input least thats worked previous version stays disabled also writing vattr disabled true false nt changes actually attribute nt even get reflected html", "num": "448", "d": "9/2014"}, {"title": "wrong context computed getters", "body": "sure preference regards submitting issues release candidate hope nt mind filing bug illustrated context ed vm computed property defined using rather context method incorrect specific case follows given array two elements render elements using combined computed getter using object format context getter incorrect second element array vm element looking stack trace noticed double ing method starting look vue code familiarize future hope offer fix addition bug report thanks great library", "num": "447", "d": "9/2014"}, {"title": "use extend get custom class names", "body": "building custom vuecomponents logging instances console satisfying actually different components besides last one sort root get clue class purpose course bad name elements properly get telling would pleasing think want stringify inspect properties would love see gets second parameter better solution course know lot console cosmetic also take things account", "num": "446", "d": "9/2014"}, {"title": "question event view updated", "body": "sorry ask js code requires initialization elements time added like html every time add something collection items need run javascript init new item eg way watch event happen view completely updated tried seems trigger viewdom completely updated thanks", "num": "445", "d": "9/2014"}, {"title": "customised directive template implemented", "body": "eg template nt implemented directive thisparsedirective compilerjs return undefined makes sense however causes error getting directiveslength wonder way handle plugin may disabled nt want change templates", "num": "444", "d": "9/2014"}, {"title": "\u5173\u4e8ecomponent\u7684\u95ee\u9898", "body": "componenta \u4f9d\u8d56 componentb \u4f9d\u8d56 componentc \u8fd8\u5e0c\u671b\u80fd\u7c7b\u4f3c\u8fd9\u6837\u7528", "num": "443", "d": "9/2014"}, {"title": "value attribute input bound correctly internet explorer", "body": "using vue populate value attribute input template value undefined null empty string internet explorer leaves mustache template value see", "num": "442", "d": "9/2014"}, {"title": "slow performance vrepeat semilarge data sets", "body": "using version using vrepeat iterate element array performance quite slow compared raw javascript jsfiddle live code click vuejs use vuejs raw js use raw javascript open js console see performance timings machine chrome safari vuejs takes approximately js takes approximately ie js times faster vue", "num": "441", "d": "9/2014"}, {"title": "object trigger view update child array changed", "body": "array object mutated object holding array get view updated html myobjmyarrinobj myobjmyarrinobj myobj myobj myarr myarr", "num": "440", "d": "9/2014"}, {"title": "vue throttle debounce feature", "body": "", "num": "439", "d": "9/2014"}, {"title": "von seems able bind events names containing periods", "body": "bootstrap fires events names like vue complains error parsing expression encountering something like", "num": "438", "d": "9/2014"}, {"title": "vue uncaught typeerror read property vue null", "body": "getting error computed dependencies adding removing rows table incremented grid example search pagination debugger points method", "num": "437", "d": "9/2014"}, {"title": "api manually determining computed dependencies", "body": "", "num": "436", "d": "9/2014"}, {"title": "vrepeat accept integer parameter", "body": "would render three times content", "num": "435", "d": "9/2014"}, {"title": "grid example work vue", "body": "", "num": "434", "d": "9/2014"}, {"title": "changes bubble anymore", "body": "simple example illustrate issue js new vue el documentgetelementbyid somediv data function return pos x ready function", "num": "433", "d": "9/2014"}, {"title": "computed", "body": "", "num": "432", "d": "9/2014"}, {"title": "vue next created compiled ready events losing context", "body": "use component view initial load works normally navigate another page thus another component come back first logic inside created compiled ready events delegating another function socketio loses context error uncaught typeerror set property someproperty null example", "num": "431", "d": "9/2014"}, {"title": "confused vue workflow singlepage apps", "body": "using simple components views like indexhtml emailanonymous id last visit purchases id lastvisit purchases visitors visitors property belongs root vm updates based socketio answer part working nt update component html root visitor changes", "num": "430", "d": "9/2014"}, {"title": "use new keepalive feature", "body": "", "num": "429", "d": "9/2014"}, {"title": "vue next clashes use", "body": "charts break vue next due", "num": "428", "d": "9/2014"}, {"title": "replacing prototype setting objects", "body": "found weird behaviour vue version gt object prototype get replaced", "num": "427", "d": "9/2014"}, {"title": "event vrepeat rendering", "body": "could apply thirdparty lib rendered collection", "num": "426", "d": "9/2014"}, {"title": "persistent vview", "body": "would nice single page apps option persistent vview would recreated every time go route", "num": "425", "d": "9/2014"}, {"title": "components inheriting root data", "body": "something like component used vview would expect anytime parentvisitors changes component visitors array would change nt would right way", "num": "424", "d": "9/2014"}, {"title": "anyone success using vue datatables", "body": "initial rendering works try use datatables search pagination shows table row uncompiled repeat directive", "num": "423", "d": "9/2014"}, {"title": "npm next distribution tag", "body": "release several api breaking changes rewrite may published npm convenience opt kicking tires", "num": "421", "d": "9/2014"}, {"title": "repaint transitions affecting performance", "body": "im seeing quite noticeable performance degradation transitions switching forced full tree layout happening frame transitions think try debugging tonight although looks using transition animation refactor see get back", "num": "420", "d": "9/2014"}, {"title": "allow single token using", "body": "attribute multiple tokens far parser concerned use delimiter example work token two", "num": "419", "d": "9/2014"}, {"title": "reactlike inheritance model", "body": "using react enjoyed inheritance model times want write parts components similar would ideally like share things two components ex maybe share data members functions amp behaviors thought would make sense something like vue already written code handle vue simple function extends input dictionary vue takes input supports simple inheritance model direct functions none methods computed example usage thoughts would happy contribute code", "num": "418", "d": "9/2014"}, {"title": "parse error android", "body": "using vuejs phonegap get error eweb console syntaxerror parse error file file error srcmainjs line code extendedvmsuper parentvm guess error related keywords reserved js case super change line extendedvm super parentvm works recomendation change super another synonymous like parent want change code make pull request think", "num": "416", "d": "9/2014"}, {"title": "input updating watch", "body": "hey sure making small mistake sorry throwing issues nt know else ask got input field representing pin field get characters currently wanting see input empty end goal write something verifies pin either redirects user another page invalid shake pin field empty input codepen trying get input empty hit characters add tag output value like display emptied value input nt updating idea wrong", "num": "415", "d": "9/2014"}, {"title": "enforce hyphenated component name requirement", "body": "problem registered component names flat lead collisions large applications way hack around prepending names components category html html requesting officially supported component namespacing feature secondarily looks like break way currently create views dynamically would appreciate suggestion remedy", "num": "414", "d": "9/2014"}, {"body": "thanks bug compilation logic fixed", "d": "9/2014"}, {"body": "issue use overwriting component initial parent object nt want overwrite entire need pass individual properties using also longer necessary manually list dependencies computed properties", "d": "9/2014"}, {"body": "ok thank", "d": "9/2014"}, {"body": "thanks catching fixed", "d": "9/2014"}, {"body": "thanks catching bug computed property setup procedure mutating original option object causing pollute instances fixed", "d": "9/2014"}, {"body": "thing bugging well made work like edit changed option make less confusing js var mycomponent vueextend name mycomponent options vuecomponent mycomponent options constructor name logged console", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "use inside callback trigger next batch rendering also item vuecomponent use hook", "d": "9/2014"}, {"body": "thanks seems worked", "d": "9/2014"}, {"body": "prints warning using nonminified version longer throws error", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u6700\u540e\u90a3\u6bb5\u4ee3\u7801\u770b\u4e0d\u592a\u61c2\u4f60\u60f3\u505a\u4ec0\u4e48", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u554a", "d": "9/2014"}, {"body": "\u5c31\u662f\u8bf4\u5df2\u7ecf\u6709\u89c6\u56fe \u7528vueextend \u51fa\u6765\u7684component\u600e\u4e48\u6837\u548c a\u5173\u8054\u8d77\u6765", "d": "9/2014"}, {"body": "\u548c vue", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "resolved one thing note using mustache binding attribute nt create twoway binding sets initial value use twoway bindings", "d": "9/2014"}, {"body": "thanks although nt need two way binding particular instance work correctly using vmodel looking forward release thanks effort", "d": "9/2014"}, {"body": "way evan want say thanks great job framework quite enjoyable far compared angularjs", "d": "9/2014"}, {"body": "tested vue see performance improvement strangely trying use onetime interpolation feature working example", "d": "9/2014"}, {"body": "oh actually messed result jsfiddle still using even slower onetime interpolation nt help much", "d": "9/2014"}, {"body": "well obviously going slow meant complex markup creating vue instance every repeated item setting data binding essentially paying upfront cost make consequent updates faster let say complex list takes render raw js takes modify one item array update takes like single data binding update raw rendering feel janky imagine typing filtering list perf largely cssbound raw rendering jank build every keystroke become much noticeable making tradeoff take longer render initially faster update later argue applications opposed contentcentric websites like news media instant feedback user input much important initial rendering hand almost every databinding library super slow test case compared raw rendering vue already among fastest although could still improved slower particular case repeated markup simple repeated lists complex templatedata general faster", "d": "9/2014"}, {"body": "reason markup simple boiled app slow performance test case basically swapping hundreds thousands objects user changes levels state app switching level level level level reload state objects causing noticeable delay click vuejs link jsfiddle multiple times see delay alternatively way turn data binding vrepeat array basically constant triggering view updates based array changes necessary", "d": "9/2014"}, {"body": "static rendering think simply example", "d": "9/2014"}, {"body": "right way disable binding like making custom emitter custom function data", "d": "9/2014"}, {"body": "hmm think easiest thing write custom directive bind array manually assemble markup directive update function", "d": "9/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "know probably related angular debounce feature unlike angular vue nt digest whole scope single update single update really single update vue synchronous changes batched anyway really necessary debouncethrottle anything", "d": "9/2014"}, {"body": "nt want trigger property updating every keypress event throttle every like search feature grid jsfiddle", "d": "9/2014"}, {"body": "feel belongs userland something needed usecase project really vue general", "d": "9/2014"}, {"body": "ayamflow agree plugin though", "d": "9/2014"}, {"body": "something like vueplugin hello function name consolelog hello name var sayhello vueuse hello sayhello bob", "d": "9/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "weird theoretically nodes always comment ref node end need details setup", "d": "9/2014"}, {"body": "closing could nt reproduce", "d": "9/2014"}, {"body": "would need", "d": "9/2014"}, {"body": "take look enhanced grid example search feature fired lot times type something", "d": "9/2014"}, {"body": "oh way nt know vue bug try filter search param sort nothing happens", "d": "9/2014"}, {"body": "adding set function computed property filtered data see triggers change inside get function nt update new value sorted clicking header", "d": "9/2014"}, {"body": "observations accessing well note every time access computed property calling evaluation function search param returning new array every access longer works sorting returned copy longer need list possible dependencies computed property functions", "d": "9/2014"}, {"body": "maybe vue computed properties way peek value without triggering dependencies avoid behavior sort latest array data nice", "d": "9/2014"}, {"body": "ok finally understood rewrote grid component issue invalid gon na close watcher serves well manually determine dependencies", "d": "9/2014"}, {"body": "would benefit something like currently done lameo hack creates array n empty elements purpose repeating", "d": "9/2014"}, {"body": "yeah would handy feature include", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "found behavior changed pass something like component nt merge existing data properties replaces", "d": "9/2014"}, {"body": "cool revisit examples finish testing currently close", "d": "9/2014"}, {"body": "yup due internal changes default shallow watch made updates force deep watch", "d": "9/2014"}, {"body": "thought true end force initial callback give try maybe something like angulars watchgroup watchcollection would solution way quick responder many thanks affort really like work", "d": "9/2014"}, {"body": "thanks api still slightly flux release feel deep watching frequent use case immediate callback invocation third argument deep watching fourth immediate callback", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u4f60\u5bf9 computed computed \u662f\u4e00\u4e2a get", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u7248\u672c\u91cc\u9762 computed \u4f60\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u91cc\u9762\u5728 computed component \u7684 ready", "d": "9/2014"}, {"body": "use view destroyed switch another view switch back two socket handlers old one referencing already destroyed instance set null using want clean socket handlers view hook", "d": "9/2014"}, {"body": "keepalive works", "d": "9/2014"}, {"body": "event view components keepalive navigated", "d": "9/2014"}, {"body": "use attached wed sep pm alisson cavalcante agiani lt notifications githubcom wrote event view components keepalive navigated reply email directly view github", "d": "9/2014"}, {"body": "worked way detect inside view component active one", "d": "9/2014"}, {"body": "well currently always check", "d": "9/2014"}, {"body": "way since spa tested many routing libs one best", "d": "9/2014"}, {"body": "nice api looks pretty clean feels like express", "d": "9/2014"}, {"body": "directives fully tested yet things break stage probably try production stuff", "d": "9/2014"}, {"body": "actually thanks raising issue found pretty stupid bug observer implementation fixed", "d": "9/2014"}, {"body": "cool", "d": "9/2014"}, {"body": "html simple", "d": "9/2014"}, {"body": "ok replaced every source code related vue augmenting objects behavior nt happen", "d": "9/2014"}, {"body": "show usage example", "d": "9/2014"}, {"body": "vue next js somewhere could use fiddle", "d": "9/2014"}, {"body": "finally simulated mouseover chart see console", "d": "9/2014"}, {"body": "behavior nt happen nt assign chart thischart", "d": "9/2014"}, {"body": "set work surprised works though since underlying object augmentation mechanism largely", "d": "9/2014"}, {"body": "disadvantages setting flag false", "d": "9/2014"}, {"body": "slightly slower object observation practice going produce noticeable perf issues unless data structure huge like objects", "d": "9/2014"}, {"body": "one thing note providing default data set observed nt see need observe chart object remove default data also work", "d": "9/2014"}, {"body": "vue swaps observed data object property faster method augmentations turn behavior", "d": "9/2014"}, {"body": "turn behavior would nice thanks clarification", "d": "9/2014"}, {"body": "apply lib hooks", "d": "9/2014"}, {"body": "angular used check custom directive event could probably something better fiddle", "d": "9/2014"}, {"body": "nt work", "d": "9/2014"}, {"body": "could provide example using vuenexttick", "d": "9/2014"}, {"body": "thelinuxlich", "d": "9/2014"}, {"body": "thanks", "d": "9/2014"}, {"body": "yes checkout vcomponent keepalive changes fri sep pm alisson cavalcante agiani lt notifications githubcom wrote would nice single page apps option persistent vview would recreated every time go route reply email directly view github", "d": "9/2014"}, {"body": "great gon na close issue", "d": "9/2014"}, {"body": "looks like really want use vwith set visitors visitors bind parent data view data specified pm alisson cavalcante agiani wrote something like component used vview ready function thisvisitors parentvisitors would expect anytime parentvisitors changes component visitors array would change nt would right way reply email directly view github", "d": "9/2014"}, {"body": "since using vview apparently nt work together vwith would hard components wants different property root vm", "d": "9/2014"}, {"body": "gone work component eg html var root new vue el div data aaa b bbb view components template msg replace true b template msg replace true", "d": "9/2014"}, {"body": "also try hook instead", "d": "9/2014"}, {"body": "nt worked root vm updated component nt receive change", "d": "9/2014"}, {"body": "way possible access parent root properties inside component templates like", "d": "9/2014"}, {"body": "yes work obviously recommended", "d": "9/2014"}, {"body": "working", "d": "9/2014"}, {"body": "least vview", "d": "9/2014"}, {"body": "try without putting template", "d": "9/2014"}, {"body": "closing fixed", "d": "9/2014"}, {"body": "hard vue plugins like assume full control dom probably better use whole table let plugin handle everything", "d": "9/2014"}, {"body": "sad hear past datatables integration knockout easy", "d": "9/2014"}, {"body": "generally avoid using vue jquery plugins really depends plugin wants manipulate dom ca nt help without seeing code", "d": "9/2014"}, {"body": "still pretty unstable moment install directly github", "d": "9/2014"}, {"body": "hoping add much overhead thinking points development stable others wish cut made npm points simply using next branch crap shoot stability reason asking opportunity end users projects already using get codebases converted changed api", "d": "9/2014"}, {"body": "yeah problem without enough test coverage nt think current codebase ready tirekicking yet probably remaining bugs moment coverage gets decent probably release people try", "d": "9/2014"}, {"body": "thank precisely asking", "d": "9/2014"}, {"body": "hey thanks noticing trying changes transition systems seems due forcelayout called synchronously instead next frame likely revert change tue sep pm prater notifications githubcom wrote im seeing quite noticeable performance degradation transitions switching forced full tree layout happening frame transitions think try debugging tonight although looks using forcelayout transition animation refactor see get back reply email directly view github", "d": "9/2014"}, {"body": "would mind sharing usage scenario eg many elements transitioned css properties transitioned complex transitioned element", "d": "9/2014"}, {"body": "dynamic binding im triggering animations transition using classes transitioning transform using roughly elements fill viewport hth", "d": "9/2014"}, {"body": "single element reverted branch trigger transition next frame let know fixed issue", "d": "9/2014"}, {"body": "multiple elements inside transitioned element ensured behavior ones transitioned give change shot minutes sep evan notifications githubcom wrote single element reverted next branch trigger transition next frame let know fixed issue reply email directly view github", "d": "9/2014"}, {"body": "see commit next", "d": "9/2014"}, {"body": "commit use latest commit", "d": "9/2014"}, {"body": "seems bit better however think found another bottleneck element removed transition repaints whole tree happens addremove process removed element case still animating appropriate wait callback remove element need animation handler", "d": "9/2014"}, {"body": "venter sep pm evan notifications githubcom wrote sure understand correctly mean enter leave transitions different durations reply email directly view github", "d": "9/2014"}, {"body": "visibly affecting framerate think might better use css animations make sure animations duration simulate delay animations", "d": "9/2014"}, {"body": "hand ca nt seem reproduce visible difference comparison see still visible degradation commit", "d": "9/2014"}, {"body": "follow reason im using token class behavior change sectionname data would persist child component would transition two components possibly scope changes data value updated transition happening styles affected token fix", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "yes considered could probably option code actually already implemented need provide option utilize", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "spec reserved keyword used identifier eg identifiername eg latter valid error thrown android phonegap uses stock android browser webview container incorrectly implements reserved keyword parsing logic hand probably change something like old browser compatibility", "d": "9/2014"}, {"body": "ah perfect sorry know agree change something like super tested vue android excellent option create mobile hibrid apps memory usage better use ionic angular problem found issue", "d": "9/2014"}, {"body": "going hate haha found next branche another keywords issue keyword file srccompilecompilejs line var def optionsdirectiveswith", "d": "9/2014"}, {"body": "throw error android", "d": "9/2014"}, {"body": "yes hate android", "d": "9/2014"}, {"body": "oh well use bracket syntax keywords lol", "d": "9/2014"}, {"body": "test passed close issue", "d": "9/2014"}, {"body": "somewhat related highly recommend catching types things", "d": "9/2014"}, {"body": "cecchi thanks nt like code style enforced machine", "d": "9/2014"}, {"body": "somewhat shot dark handler inside method evaluates handler set latter would evaluate outdated value would also explain sample value set continue enter characters resumes previous value judging console messages asd asdf asdfj asdfjk asdfjkl asdfjklm asdfjklmn edit codepen additionally log value watch callback see despite ue passed watch callback still retains previous value supports theory looking model directive seems indicate updates handled asynchronously would explain see locking mechanism checked would lock calling within another call property seems like use case designed originally seems somewhat dangerous reupdate property watcher callback without structured update process something like angular would really useful discard pending callbacks outdated values tldr sure bug inherent tradeoff slim efficiency vue seems go might great idea synchronously update property property callback vue lacks explicit digest cycle directives handle updates asynchronously tried codepen wrapping behavior desire", "d": "9/2014"}, {"body": "watch callback fired callback handles syncing user input data overwritten user input typically use get around", "d": "9/2014"}, {"body": "gotcha thanks much help vue really awesome nice work", "d": "9/2014"}, {"body": "part reason component names must contain hyphen personally think works fine current usage work fine", "d": "9/2014"}, {"body": "interesting never picked hyphen requirement documentation perhaps warning console test usage get warning removed warning pulling static prefix inside html", "d": "9/2014"}, {"body": "found documentation avoid naming collisions native elements stay consistent custom elements specification component id must contain hyphen usable custom tag interpreted applicable since nt using custom tag syntax application", "d": "9/2014"}, {"body": "ahh trying already yeah recently reverted warning got work officially personally nt think namespaced components necessary idea could work interested hear", "d": "9/2014"}, {"body": "yes best stay ahead breaking changes branch application hoping future versions break one thing time hierarchy components purpose best practice thing changed name issue making hyphenation hard requirement feature enforcement via warning making documentation explicit necessary", "d": "9/2014"}, {"body": "reason nt think namespacing necessary larger applications want avoid registering components globally instead use module system require needed components defining application component eg way component encapsulates components needs name whatever like without worrying conflicting names", "d": "9/2014"}, {"body": "application mixture truly global components views registered front components specific one view registered within local modules earlier comment thought intent components require hyphenated names exporting component configuration module registering globallylocally hyphenatedplain easy change done case case basis hyphen merely optional initially believed documentation close issue", "d": "9/2014"}, {"body": "hyphen required wish use component form pseudo custom elements eg", "d": "9/2014"}, {"body": "great docs already read thank engaging clarifying", "d": "9/2014"}, {"body": "hi still availabledoable also another project ill develop vuejs comes", "d": "9/2014"}, {"body": "take look using next branch get idea ko example differentiation folder item new example using approach", "d": "9/2014"}, {"body": "thanks evan", "d": "9/2014"}, {"body": "thanks reporting issue behaves differently fires events event fixed", "d": "9/2014"}, {"body": "nt close issue", "d": "9/2014"}, {"body": "closing inactivity", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "good commit reference thanks addition", "d": "9/2014"}, {"body": "oops nt know pasted wrong commit lol", "d": "9/2014"}, {"body": "hi thinking combine server side client side rendering bindings inject additional processing jade slm simple template template function produce parts rendered html injected marks html comments special format index binding indicated binding next sibling dom element array serialized bindings data used render view client process look like find marks find needed nodes marks attach bindings nodes trigger events needed since vue supports finding marks use treewalker js function getcommentnodes containernode var treewalker documentcreatetreewalker containernode nodefiltershowcomment null false var comments treewalkernextnode commentspush treewalkercurrentnode return comments consolelog getcommentnodes documentbody reduce parsing time find markers simple format content show page loaded question doable side start implementing side examples html index parentmsg childmsg", "d": "9/2014"}, {"body": "interesting idea thoughts would work text bindings right vue still walk whole tree directives text parsing actually relatively cheap part vue rendering procedure ideally want reuse template server client concept marking bindings comment nodes definitely idea worth exploring", "d": "9/2014"}, {"body": "would work text bindings right vue still walk whole tree directives provide simple example text binding illustrate idea complex like ifs repeats even components possible yes ca nt dom operations server side bindings work html ast binding require dom delayed processed client main idea try produce full valid terms content html attach bindings provide dynamic behavior nt research vue internals yet know bindings complex give example could try illustrate binding could work text parsing actually relatively cheap part vue rendering procedure constructing dom slow part right ideally want reuse template server client slm compile template functions require small runtime helpers escaping attributes merging unzipped yes templates reused server client also slm quite small unzipped compile templates client side yet working", "d": "9/2014"}, {"body": "hi problem released", "d": "9/2014"}, {"body": "join issue planning release new version", "d": "9/2014"}, {"body": "closing still think ing array proper way handle watcher created hook always fire dom updated reflecting array change", "d": "9/2014"}, {"body": "less useless include well give idea html want avoid adding svg tags take least following graphics elements structural elements see important groups firstclasscompanion", "d": "9/2014"}, {"body": "ah thanks indus nt really worked lowlevel svg much mostly libs really helpful", "d": "9/2014"}, {"body": "well probably late reply missing comma first line p", "d": "9/2014"}, {"body": "solution coming point", "d": "9/2014"}, {"body": "see vmodel select param sat sep pm rangermauve notifications githubcom wrote solution coming point reply email directly view github", "d": "9/2014"}, {"body": "cool reference docs", "d": "9/2014"}, {"body": "one problem options attribute nt separate value displayed screen use content tag localized string representing actual value option far understand new feature takes array options gets used value content", "d": "9/2014"}, {"body": "hmm yeah think improved give example desired markup", "d": "9/2014"}, {"body": "practice array items gets changed based localization items objects contain code might look like expected behavior items array might changed runtime language preferences changed retain correct value despite displaying different string structure might best allowing distinction well current behavior would useful", "d": "9/2014"}, {"body": "rangermauve check", "d": "9/2014"}, {"body": "perfect", "d": "9/2014"}, {"body": "following tested working html value vals value var vm new vue el demo data keys foo bar vals created function lt thiskeyslength var k thiskeys thisvals add k test", "d": "9/2014"}, {"body": "closing due inactivity check currently proof concept", "d": "9/2014"}, {"body": "changing data within ready callback help case", "d": "9/2014"}, {"body": "working also side note actually reference group without data working inside vm actually set", "d": "9/2014"}, {"body": "nt know thanks", "d": "9/2014"}, {"body": "uping ca nt make work implemented get nan fiddle", "d": "9/2014"}, {"body": "reason interpreted minus calculation seems use case still broken work intended though", "d": "9/2014"}, {"body": "oh nice catch yeah nt work either fiddle workaround use manually set child vm", "d": "9/2014"}, {"body": "closing discussion ifelse scenario still perfectly resolved think deal breaker", "d": "9/2014"}, {"body": "vue data method computed propeties nt namespace data method name refer directives", "d": "9/2014"}, {"body": "data methods name think properties object", "d": "9/2014"}, {"body": "appear vue flat method tree function nested inside json object wo nt accepted expecting nested tree way rivetjs data controller way organize data model amp controller similar structure avoid hassle setting separate component small projects", "d": "9/2014"}, {"body": "main reason flat structure guaranteed called owner vue instance context want nest functions called different contexts", "d": "9/2014"}, {"body": "significant blocker us using vuejs privileged environment firefoxos apps sandbox workaround still really sucks personally love see cspcompliance implemented guessing blocker projects", "d": "9/2014"}, {"body": "usecase package vue manually javascript parser needed modifying couple places vue uses stringtofunction conversion prettiest implementation check", "d": "9/2014"}, {"body": "cecchi thanks awesome chance consider merging implementation using", "d": "9/2014"}, {"body": "jtremback working vueresource", "d": "9/2014"}, {"body": "want select component used listitem considering one properties type stringproperty component name registered seems work possible types list would would ok think types like changed therfore translatedmapped computed valid componentnames", "d": "9/2014"}, {"body": "indus use filter eg however might work", "d": "9/2014"}]