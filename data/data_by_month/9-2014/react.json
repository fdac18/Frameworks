[{"title": "generate xml compatible markup", "body": "take alternative approach discussed think take advantage selfclosing information already reactdom make use reactdomcomponent cc audreyt case interested taking stab", "num": "2278", "d": "9/2014"}, {"title": "add better guard nested renderings", "body": "issue demonstrate problem see cases handled way vs actually encountered case quite difficult see problem real life application warning message helpful possible handle consistantly least include component name available", "num": "2277", "d": "9/2014"}, {"title": "method create batching context react tree", "body": "noticed calls occur dom handler get batched render calling outside handler cause multiple renders method call tree tell enter batching state", "num": "2275", "d": "9/2014"}, {"title": "thisismounted true componentwillmount", "body": "imagine intended valid perhaps need renaming", "num": "2274", "d": "9/2014"}, {"title": "replace setinnerhtml createnodesfrommarkupgetmarkupwrap", "body": "found calls solve largely problem includes fixes submitting issue reminder information", "num": "2273", "d": "9/2014"}, {"title": "feature request warn thisstate touched directly rather setstate", "body": "stumbled across code written touches thisstate directly forces update danger pattern appears work still leaves code vulnerable callers setstate right thing queued overwriting handtouched state understanding red box correctly chance least dev version thisstate could guarded js setter would print warning", "num": "2272", "d": "9/2014"}, {"title": "markup disappears due bad markup", "body": "without thinking much semantics sorts odd effects application seemingly random ui components went missing presumably lt p gt lt gt combination nt valid like markup plain bad got error message react nothing browser application misbehaviour seemed mostly random nt really expect react fix wanted post googling lead nowhere would nice understand things exploding", "num": "2270", "d": "9/2014"}, {"title": "firefox report deadkeydeadkey single combined event", "body": "pressing followed deadkeys reported etc rather immediately followed browsers probably worth normalizing putting posterity", "num": "2269", "d": "9/2014"}, {"title": "gzip builds fbme", "body": "reason nt gzipped", "num": "2264", "d": "9/2014"}, {"title": "reactmount length gc optimization", "body": "doubtful whether claim actually valid testing memory efficiency objects vs arrays found reducing length setting actually increased memory usage significantly reason browsers", "num": "2260", "d": "9/2014"}, {"title": "document justification dangerouslysetinnerhtml html", "body": "", "num": "2256", "d": "9/2014"}, {"title": "allow internal components used browser version", "body": "using flux need reactlibcopyproperties easy browserify requirejs possible uses bower version nt contain copyproperties fn would nice like maybe include lib components possible thanks", "num": "2251", "d": "9/2014"}, {"title": "better svg support namespaced attributes", "body": "trying use react svg document facing problems namespaced attributes instance element cant constructed react cant build jsx xmlns xlink attribute way solve", "num": "2250", "d": "9/2014"}, {"title": "minified version broken", "body": "line setinnerhtml minified reactminjs reactwithaddonsminjs exception thrown line repro modified basic example js", "num": "2247", "d": "9/2014"}, {"title": "api change reactcomponentmountunmount", "body": "currently way verbose considering instance methods component nt take arguments relating component related different might make sense change even think internal methods huge deal cc jordwalke leebyron sebmarkbage note interested working talk us first probably caveats edge cases consider jumping right", "num": "2245", "d": "9/2014"}, {"title": "onchange firing virtual keyboard", "body": "hey writing kiosk type app linux touch device needed virtual keyboard found great chrome extension extension works fine react onchange nt recognize extension jsbased dispatches keydown keyup keypress change events naturally updates element value would nt work thanks", "num": "2244", "d": "9/2014"}, {"title": "ca nt call prototype method mixin", "body": "mixin factory creating mixins many helper methods vary single attribute wanted create mixin prototype save memory seems ca nt call prototypal methods check sample returns appropriate result possible implement", "num": "2243", "d": "9/2014"}, {"title": "support array objects style property", "body": "proposed react future would nice support list style objects style property objects would automatically merged order last object overriding previous one var boxstyle padding background hotpink var bixboxstyle margin width", "num": "2239", "d": "9/2014"}, {"title": "introduce createfactory", "body": "fairly advanced class system integrated react managed make work using stock build refactoring descriptors longer possible know react part public api chance perhaps hidden important us unwrapped version reference method", "num": "2235", "d": "9/2014"}, {"title": "released version", "body": "release important cause know introduce reactcomponents classes support please let know release", "num": "2232", "d": "9/2014"}, {"title": "marginbottom gets dropped sometimes", "body": "product currently developing case value gets dropped react sometimes unfortunately could nt manage reproduce issue attempts reduced test case ca nt post link unreleased product yet thought report anyway case someone additional information go basically case application components whose style value set object something like values dependant screen size listened updated something like however noticed resizing screen often components end vertical margin know caused react tried logging value assigned sound actually even called hit behavior something makes problem go away setting style instead application running tried still reproducible", "num": "2231", "d": "9/2014"}, {"title": "remove flux docs", "body": "basically keeping copies documentation sync failing point maybe make permalinks site redirect link offsite also look links docs pointing pages update", "num": "2229", "d": "9/2014"}, {"title": "csstransitiongroup enter transitions work safari chrome", "body": "best explained demo hit go times new numbered boxes fly left old numbers boxes fly right leave transitions working fine enter transitions activated new numbers simply appear place affects chrome safari ipad air iphone css animations whole look work fine", "num": "2227", "d": "9/2014"}, {"title": "jsx quiet flag built module messages", "body": "would nice way make stop printing stderr nt helpful message clogs build logs", "num": "2222", "d": "9/2014"}, {"title": "use named functions object methods", "body": "currently jsx converts following however debugging especially concatenated stuff cli would nice see stack trace method caused exception could achieved easily jsx converted snippet instead", "num": "2216", "d": "9/2014"}, {"title": "warn component passed props nt need", "body": "would cool able get warnings typoed otherwise extraneous props passed component similar warns pass meant could probably even ensure deep validity passed data would useful finding bugs also optimizing hot components making sure shapes aligned obviously would need sort optin like proptypes", "num": "2215", "d": "9/2014"}, {"title": "proptypes range", "body": "think adding feature would allow people specify range number proptypes something like range type would take string represents numerical range inclusive range means last element excluded would similar feel proptype", "num": "2214", "d": "9/2014"}, {"title": "throw warning undefined passed event callback", "body": "maybe valid use case something like yelled would easier debug", "num": "2210", "d": "9/2014"}, {"title": "inifinite recursion caused lifecycle methods trigger rerender", "body": "lifecycle methods cause rerenders potentially end infinite recursion seen happen somewhere bigger application difficult find sure anything react could prevent cases though two reduced examples", "num": "2207", "d": "9/2014"}, {"title": "add proptypesobjectwith", "body": "created personal project works great thought would nice add core want make sure like work pr implementation utils right javascript var utils proptypes objectwith function options return objectwithfn options false utilsproptypesobjectwithisrequired function options return objectwithfn options true moduleexports utils function objectwithfn options isrequired return function props propname componentname var componentprop props propname var errormessage isrequired amp amp componentprop return else isrequired amp amp componentprop errormessage required prop specified else var errors missing extra var prop options var shouldbepresent options prop var hasprop componentprophasownproperty prop shouldbepresent amp amp hasprop errorsextrapush prop else shouldbepresent amp amp hasprop errorsmissingpush prop var missingsome errorsmissinglength var badextras errorsextralength missingsome badextras errormessage prop invalid properties errorsmissinglength errormessage jsonstringify errorsmissing missingsome amp amp badextras errormessage errorsextralength errormessage jsonstringify errorsextra errormessage return new error errormessage tests using mocha chaijs javascript var expect require chai expect var utils require utils describeonly utils function utilsspec describe proptypes function var propname myprop var componentname mycomponent var props empty valid myprop foo present baz present present invalidmissing myprop missing props invalidextra myprop bar foobar either invalidboth myprop bar foobar either missing props let know something like core try create pr also considered making possible specify proptype property rather truefalse thought would acceptable", "num": "2206", "d": "9/2014"}, {"title": "testutils simulateclick used multiple spec files causes test failures using jasmine", "body": "two spec files successfully run execute separately one call simulateclick execute simulateclick click command essentially ignored seconds spec file runs spec file simulateclick calls two different tests works fine removed everything except spec files simplified karmaconf verify issue simulateclick using first spec file runs jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe button component function var button second spec file runs jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe calendar function var calendar var moment output run together nodemoduleskarmabinkarma start karmaconfjs log button begin log button end log calendar begin log calendar end chrome mac os x calendar display october next clicked failed expected equal error expected equal object lt log calendar begin log calendar end chrome mac os x calendar display august previous clicked failed expected equal error expected equal object lt chrome mac os x executed failed secs secs comment simulateclick first test everything passes jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe button component function var button tests pass nodemoduleskarmabinkarma start karmaconfjs log button begin log button end log calendar begin log calendar end log calendar begin log calendar end chrome mac os x executed success secs secs", "num": "2205", "d": "9/2014"}, {"title": "input typenumber nt work empty value", "body": "sample value input always empty works number values type numeric values appear", "num": "2203", "d": "9/2014"}, {"title": "proper react minification", "body": "wondering best way minify react production builds guide christianalfoni wrote comprehensive used boilerplate however adding envify uglify uglifyify build bigger standard reactminjs uglifyify nt seem anything guessing problem since many moving parts hard pin exactly going wrong kind boilerplate would great gulp task looks like mainjs looks like", "num": "2200", "d": "9/2014"}, {"title": "tapeventplugin sending tap wrong element chrome android", "body": "using open drawer tap icon tap icon covered scrim close drawer tap separately chromebook pixel touchscreen iphone works splendidly nexus icon getting touchtap finger still touching lift finger sends another tap scrim closes drawer sample repo demonstrates bug see isolate root cause send pr likely related", "num": "2199", "d": "9/2014"}, {"title": "add striptypes option jsxtransformer", "body": "cf", "num": "2197", "d": "9/2014"}, {"title": "nt rely dom window", "body": "largely dom agnostic couldshould moved folder everything folder unaware dom could running web worker", "num": "2194", "d": "9/2014"}, {"title": "geteventkey implementation inconsistent spec firefox implementation", "body": "inconsistencies keyboard event spec well firefox implemented property correctly set printable characters events works properly firefox interpretation standard firefox behaviour correct spec key generates printable character exists appropriate unicode code point keyboardeventkey attribute must string consisting char value character enter key fires keydown firefox fires keydown keypress chrome consistent across browsers capslock key fires keydown toggled caps lock toggled keydown event fired may browser limitation chrome repro test page firefox compare result chrome", "num": "2193", "d": "9/2014"}, {"title": "components children without dom representation", "body": "need component nt dom representation use render function returns however recently component without dom representation also children want mounted lifecycle methods trigger correctly unfortunately nestable thus return ideal solution way thing without using know plans replace solution null component plans null component mount children", "num": "2191", "d": "9/2014"}, {"title": "hide datareactid dom", "body": "mean generated prop cases may use ids like uuid mongodb quite long putting dom properties look quite ugly messy chance becomes invisible elements panel debugging", "num": "2190", "d": "9/2014"}, {"title": "backbonejquery style alternative notation setstatesetprops", "body": "able changing single item would make things little readable opinion thoughts title says backbonejquery style notation referring alternative jquery alternative backbone", "num": "2189", "d": "9/2014"}, {"title": "onmouseout behave expected nested elements", "body": "given following mouse smaller square within bigger square onmouseout bigger square gets called despite mouse still contained within", "num": "2188", "d": "9/2014"}, {"title": "expose ontransitionend event react components", "body": "event components normalized across browsers supporting transitions fake nt using currently react uses internally however useful cases addingremoving view", "num": "2187", "d": "9/2014"}, {"title": "endash causes onchange fire render", "body": "nt know issue react input initially contains endash fires change event jsfiddle", "num": "2185", "d": "9/2014"}, {"title": "flow diagram component lifecycle", "body": "new developers understanding exactly component functions called confusing read many times failed piece together coherent image detailed reference perhaps contains diagrams would great thing meantime could read source think would benefit others thanks", "num": "2184", "d": "9/2014"}, {"title": "improper context createclass", "body": "react able decorate render method static render returns promise opposed react callback implementation javascript mixinrender function spec var statics specstatics statics specstatics spot weld static render method staticsrender staticsrender staticrenderfactorycall spec return spec function staticrenderfactory spec return function staticrender model node var promisified promisepromisify reactrendercomponent react semidecoration worked well enough purposes returns caller descriptor would expect javascript createclass function spec var constructor function constructorprototype new reactcompositecomponentbase constructorprototypeconstructor constructor however following pattern gives error internal createclass call digging around codebase looks like forgotten context bind", "num": "2183", "d": "9/2014"}, {"title": "video component doesnt support media events", "body": "media events good place might media events particular events like oncanplay oncanplaythrough ondurationchange", "num": "2182", "d": "9/2014"}, {"title": "docs mycomponent create component instance", "body": "hi docs says component classes created reactcreateclass return instances reactcomponent called turns reactrendercomponent actually creates component instance least one work think docs reflect", "num": "2179", "d": "9/2014"}, {"title": "reactlink checkedlink", "body": "supported default file meant file support attributes moved addon ask goal allowing addon provide linking attribute sure possible currently edit reworded last sentence", "num": "2176", "d": "9/2014"}, {"title": "expose api preprocess vdom tree diffing", "body": "one really positive feature react ability proper logic layout eg grids scale ways take account screen size content size however reusability solutions often quite optimal solutions gss allow define things like reusable manner usually supported recent browsers would easier solve reactbased solutions since virtual dom nt depend browser also hooking possible changes tree tedious hard get right without sacrificing performance allowing usercode preprocess virtual dom tree diffing would open doors whole new world styling engines born reading virtual dom tree fast well making changes implications vary styling languages able define custom values apply css aspect ratio hack inject extra dom elements make things centered based element keeping usercode intentoriented clear abstracting away common pains css realize simple change adding hook somewhere instead means exposing vast amount api surface currently considered implementation details also even problematic cases involved however think would potential revolutionize deal styling web pages say worth thinking least", "num": "2174", "d": "9/2014"}, {"title": "implement traceur pass jsx", "body": "nt know google traceur transpiler extras proposed active project plan continue implement proposed javascript changes future think jsx transformation pass traceur would great win two reasons jsx inprogress specification recommended inclusion transpilers one traceur goals experiment new javascript proposals seems natural want jsx since jsx syntactical extension difficult compose jsx transpiler transpilers cool current tool implements features afaik nt implement really hard hitting features like generators definitely nt implement proposals like asyncawait jsx traceur know play whatever new features come without drop xml syntax vice versa ps personal experience asyncawait awesome use conjunction react suppose one blocker issue status jsx proposal anyone idea long take stabilize", "num": "2173", "d": "9/2014"}, {"title": "react tutorial refers outofdate reactlibmerge", "body": "recent checkout react file nt present", "num": "2171", "d": "9/2014"}, {"title": "inner required fields shaped props reported properly", "body": "see example console report barhello probably report whole path inner field", "num": "2168", "d": "9/2014"}, {"title": "null props considered differently getdefaultprops vs isrequired", "body": "case argument passed property marked get proper warning console namehello though probably prop null prop specified anyway hand default value used prop explicitly wanted behavior probably make documentation explicit giving entire responsibility component callers safeguarding", "num": "2166", "d": "9/2014"}, {"title": "setstate callback componentwillmount get called", "body": "spicyj know", "num": "2164", "d": "9/2014"}, {"title": "react nt work android", "body": "saw nt seem related problem use fails load example wo nt execute android", "num": "2163", "d": "9/2014"}, {"title": "unmount component rendered child", "body": "ran scenario prefer code fildde parent contains several children children remove make parent noticed know way unmount node pass container node however case child rendered directly dom node unmount child", "num": "2162", "d": "9/2014"}, {"title": "jsxtransformer nt handle element content", "body": "expected three work actual last one works two throw different errors jsxtransformertransform jsx reactdom error parse error line unexpected token gt jsxtransformertransform jsx reactdom referenceerror invalid lefthand side assignment jsxtransformertransform jsx reactdom object code jsx reactdom reactdomspan classname extra object sourcemap sourcemapgenerator sourcemapfilename sourcejs", "num": "2160", "d": "9/2014"}, {"title": "add additional html tag reactdom", "body": "would like use tag foreignobject inside react need tag inserting html tags like input textarea inside svg elements plan officially support tag future add self", "num": "2157", "d": "9/2014"}, {"title": "create benchmark suite", "body": "create new benchmark suite patterns relevant react write test four different target audiences js engine lowlevel microbenchmarks important language features like objectassign dom engine lowlevel microbenchmarks documentcreateelement innerhtml clonenode updating setting style property etc react core engine lowlevel real worlds tests react algorithm dom layer integration benchmarks real world dom tests benchmarks whole thing need figure format use benchmarks easy incorporate engines benchmark suites also set stable ci environment track regressions one noisy", "num": "2154", "d": "9/2014"}, {"title": "reactcsstransitiongroup jumbles ui", "body": "using react router toplevel render code like words one toplevel item rendered dependant url use reactcsstransitiongroup end situation several components rendered slot one item possibly live happens stock nexus amp ipad seems work fine desktop browser example trigger bug use navigate usersphones use back times framework example code", "num": "2150", "d": "9/2014"}, {"title": "going big react video set private", "body": "nice get back hoping watch really available anymore removed docs", "num": "2145", "d": "9/2014"}, {"title": "incorrect handling sequenceexpression inside xjsexpressioncontainer", "body": "consider following examples javascript reactrendercomponent mountnode translates reactrendercomponent hellomessage name dosmth syntax error ingvar mountnode javascript reactrendercomponent dosmth ingvar mountnode translates reactrendercomponent hellomessage null wrong output dosmth ingvar mountnode sequence expressions used often still believe possible errors fixed possible fix would treat xjsexpressioncontainer parenthesized expression simply add around inner expression output", "num": "2143", "d": "9/2014"}, {"title": "warning rangedetach noop per dom", "body": "hi getting following warning using ctrls shortcut save app state cursor caret selection contenteditable happens chrome raul", "num": "2142", "d": "9/2014"}, {"title": "scrollleftscrolltop exist", "body": "specified htmldompropertyconfig understand probably usecase nt make sense let users setupdate manually dom nodes asking currently emit invalid attributes also nt set properties reusing servermarkup seem really really hacky right cc zpao spicyj yungsters", "num": "2140", "d": "9/2014"}, {"title": "child key taken account set render", "body": "get famous child array unique key warning set keys child items render method yes inspect dom keys set debug realized keys expected child items render method called optimal since want allow child items manage keys js jsx reactdom var seed var listitem reactcreateclass displayname listitem render function var key key seed return var list reactcreateclass displayname list render function var var len thispropslen reactrendercomponent documentbody see jsbin see action child keys taken account really think fixed would allow much greater flexibility support usecases", "num": "2138", "d": "9/2014"}, {"title": "ship", "body": "think want get take ridealongs new elements properties nonbreaking bug fixes list x x x x needs jstransform amp esprima bumps slightly risky needed tooling", "num": "2137", "d": "9/2014"}, {"title": "whitespace option element property variable triggers invariant violation", "body": "minimal example triggers error removing whitespace makes work attach couple screenshots contents whitespace triggers error without whitespace works fine", "num": "2136", "d": "9/2014"}, {"title": "rename dangerouslysetinnerhtml", "body": "thoughts something else prefer sound also makes sense add word use elsewhere could useful contenteditables avoid hacks etc cc sebmarkbage zpao", "num": "2134", "d": "9/2014"}, {"title": "doubleclicking repeatedly fires event", "body": "using ondoubleclick event doubleclicking repeatedly fires event throttling quite generous sequence doubleclick short pause doubleclick produces unexpected effect second doubleclick triggering created demo well quick example nonthrottled doubleclick", "num": "2132", "d": "9/2014"}, {"title": "adding ability add stack", "body": "found many times get errors smart widget trying unmount retrieving information server render errors prevent would execute another using callback setstate inform parents unmount tedious", "num": "2130", "d": "9/2014"}, {"title": "incorrect comment docs key ordering", "body": "dynamic children practice browsers preserve property order except properties parsed unsigned integers numeric properties ordered sequentially properties happens react render components order avoided adding string prefix key nt true react explicitly refactored code way back shortened ids prevent behavior introduced expect workaround dropped future", "num": "2129", "d": "9/2014"}, {"title": "define better way add missing jsx tags react nodes", "body": "svg tags like standard tags nt find way react request provide simple api add existing standard tag", "num": "2128", "d": "9/2014"}, {"title": "add fragment api allow returning multiple components render", "body": "note maintainers know issue know exactly set problem solved want hard problem current architecture additional comments expressing desire feature helpful feel free subscribe issue button right hand column comment unless adding value discussion valuable use cases already written comments eg know ca nt put elements consider following js var managepost reactcreateclass render function var posts thispropsposts remove get following error adjacent xjs elements must wrapped enclosing tag nt till readd surrounding rather pointless divs compiles issue running addressed adds extra imo useless pointless html page harming nothing looks messy unprofessional maybe something wrong please enlighten", "num": "2127", "d": "9/2014"}, {"title": "many rerendering break reactcsstransitiongroup", "body": "prepared fiddle reproduce bug try grabbing range input slide fast left right certain point list breaks dom nodes left forgotten dom never removed also noticed magic number bug case reduce max value less elements bug nt happen", "num": "2126", "d": "9/2014"}, {"title": "onchange handler triggered safari auto fill", "body": "trouble controlled react component handles sign forms user input controlled state posted ajax request submitting form state username password updated event input fields using safari autofill functionality event triggered example typing clicking auto fill suggestion value updated input field correct suggestion state updated added proof concept try steps reproduce go safari fill form username password click sign button safari ask want save login details click save password go type trigger safari autofill click first suggestion input field contain correct sign details state updated", "num": "2125", "d": "9/2014"}, {"title": "wanted blessed access owner", "body": "reactrouter project would really really like blessed way access component bottom render stack time another rendered currently reference owner component using looks like going removed currently trying understand reasons wanting get rid find way satisfy concerns still preserve access component owner way lots places dom api go back tree including parentnode ownerdocument parent ownernode able essentially thing react component api would incredibly useful", "num": "2123", "d": "9/2014"}, {"body": "suppose mine also drops trailing commas might useful", "d": "9/2014"}, {"body": "ah yea let leave alone", "d": "9/2014"}, {"body": "hi thanks creating ticket rainbow use case workaround sufficient noticeable performance impact maintain local patch time agree generating xhtmlcompatible markup elegant correct solution probably would nt cycles work closedumbrella", "d": "9/2014"}, {"body": "explore actually needed throwing end selfclosing tags", "d": "9/2014"}, {"body": "boolean attributes need like sure anything else", "d": "9/2014"}, {"body": "added batchedupdates method addons think", "d": "9/2014"}, {"body": "woot thanks spicyj timeline release", "d": "9/2014"}, {"body": "cc zpao sebmarkbage know reason done otherwise go ahead draft pr", "d": "9/2014"}, {"body": "transformed browsers due invalid nesting would try update contents component invalid nesting react would throw invariant violation exclaiming dom mutated unusable invalid nesting known problematic behavior fixed improvements alerting user problems", "d": "9/2014"}, {"body": "also related try mutate content inside invalid nesting get error pr", "d": "9/2014"}, {"body": "going close dupe essentially issue", "d": "9/2014"}, {"body": "fbme nt real cdn also redirects much site really suggest people self host use real cdn like cdnjs jsdelivr", "d": "9/2014"}, {"body": "ok make link cdnjs prominent", "d": "9/2014"}, {"body": "reusing global array nvm", "d": "9/2014"}, {"body": "would affect minification internal api subject change time want function use copy say ps also use webpack instead requirejs", "d": "9/2014"}, {"body": "browserify npm use nt coherent bower ca nt use maybe internal api would enough even changes know functions minified version export somehow", "d": "9/2014"}, {"body": "two different things publicly exposed reaching accessing internal modules react offers guarantees", "d": "9/2014"}, {"body": "syranide look flux example giving benefits npm version hiding bower version would better would structure way someone goes npm bowser version nt change stuff provide tutorial uses internal stuff say internal used think internals also prepended least understood internals seems public decision whenever add decide nt add please notice flux guys make tutorial api modules instead internal ones say like nt context use require reactlibkeymirror nt use internal api", "d": "9/2014"}, {"body": "official dev decision imagine simply intent keeping meat examples simple rather link different implementations react purpose rather arbitrary exposed nt helpers useful react users also exposed library x also expose one use react longer needs react suddenly requires specific semantic implementation think idea react expose helper methods flawed anything probably way around react depend shared modules depend module dependency requirements compatible would share implementation team react decision", "d": "9/2014"}, {"body": "yes seems better approach also thought problem react doest need lib anymore", "d": "9/2014"}, {"body": "exception raised try put namespaced attributes error namespace attributes supported reactjsx xml", "d": "9/2014"}, {"body": "already faced issue image element opened issue meanwhile using following html fill stroke stylecursor pointer xlink href thispropsimage bruno ledesma notifications githubcom exception raised try put namespaced attributes error namespace attributes supported reactjsx xml reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "9/2014"}, {"body": "encoding serving html guess add work correctly though maybe use ascii chars minified builds", "d": "9/2014"}, {"body": "never mind see character actually missing maybe bug uglifyjs", "d": "9/2014"}, {"body": "spicyj encoded charset irrelevant unless uglifyjs decodes zerowidthinvisible imagine would look like nothing really seems like nothing weird", "d": "9/2014"}, {"body": "apparently culprit nt seem like perhaps uglifyjs decodes strings first strips reason", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "hmm interesting problem surfaces doubleuglify source perhaps something wrong buildprocess", "d": "9/2014"}, {"body": "pr", "d": "9/2014"}, {"body": "cascadian add priority simply replace replace source work", "d": "9/2014"}, {"body": "problem surfaces doubleuglify source perhaps something wrong buildprocess yes double uglify remove dead requires tree see", "d": "9/2014"}, {"body": "maybe receivedescriptor anyway", "d": "9/2014"}, {"body": "highpri since think likely refactored something like spicyj said anyway also hoping wo nt instance methods regular functions think internals move oo fp", "d": "9/2014"}, {"body": "spicyj mean", "d": "9/2014"}, {"body": "chrome react expects hear event maybe could listen others well though nt think really necessary", "d": "9/2014"}, {"body": "thanks reply updated dispatch input event worked beautifully owe hug", "d": "9/2014"}, {"body": "closing seems resolved issue plugin", "d": "9/2014"}, {"body": "duplicate", "d": "9/2014"}, {"body": "cc sebmarkbage", "d": "9/2014"}, {"body": "important create wrapper calls createelement important wait jump", "d": "9/2014"}, {"body": "important create wrapper calls createelement use hence create wrapper need reimplement possible stock react private thing important wait jump could nt find information released couple months away problem somehow exposed would really helpful fwiw exposed would also awesome", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "correct wrong simply returns whereas asking expose completely different beast", "d": "9/2014"}, {"body": "less couple months away", "d": "9/2014"}, {"body": "oh see want way create reactelement without passing factory something immediately support without consideration use case exactly working towards ca nt really fast track without incremental upgrade path wo nt know final try upgrading sep pm yury selivanov notifications githubcom wrote correct wrong reactcreateelement type props children simply returns type props children whereas asking expose reactdescriptorcreatefactory completely different beast reply email directly view github", "d": "9/2014"}, {"body": "understand maybe possible hide perhaps leading far away", "d": "9/2014"}, {"body": "reason asking even current see expose wrapped helper function use straightforwardly really prefer unwrapped", "d": "9/2014"}, {"body": "make custom react build exposes modulesfunctions though wo nt able help run trouble", "d": "9/2014"}, {"body": "spicyj yeah always option way however wo nt able load reactjs facebook cdn etc", "d": "9/2014"}, {"body": "functions nt part supported api intentionally exposed also part supported api nt exist currently used react devtools confidence maintain devtools update accordance breaking react changes use modules designed used individually change release release without notice", "d": "9/2014"}, {"body": "good feedback though essentially saying pretty sure going moving fast enough get think fair feedback certainly trying figure solve problem exposing features early true might change going upgrade path shows problematic would nt want expose features yet finalized", "d": "9/2014"}, {"body": "soon wo nt introducing components classes apologies projects page date", "d": "9/2014"}, {"body": "introduced classes support thx answer", "d": "9/2014"}, {"body": "ready going plan preliminary support might really want stay tuned", "d": "9/2014"}, {"body": "ok thx", "d": "9/2014"}, {"body": "overlapping styles currently supported react see would nice support runtime performance affected tricky subject although offline transforms definitely idea", "d": "9/2014"}, {"body": "ah see thanks makes sense closing", "d": "9/2014"}, {"body": "actually think would nt terrible make work betting reason nt expand shortcut properties set individual property eg gets expanded probably screw key order nt technically guaranteed anyway would perf tradeoffs make work technically nt hard sure worth good points", "d": "9/2014"}, {"body": "cc fisherwebdev", "d": "9/2014"}, {"body": "also cc vjeux", "d": "9/2014"}, {"body": "definitively agreed link traffic dedicated website see complementary section flux website", "d": "9/2014"}, {"body": "newest safari osx enter transitions broken one real fix would suggest taking deadlyicon pr", "d": "9/2014"}, {"body": "also confirm broken safari osx another test case entry animations affected edit seems cody deadlyicon suggestion works moving transition declaration fixes entry animation seen", "d": "9/2014"}, {"body": "agreed build top commoner need fix go open issue repo let move discussion", "d": "9/2014"}, {"body": "afair currently used also modern engine generates stack trace explicit function names also property names assigned lot information", "d": "9/2014"}, {"body": "sure biggest pains debugging least nonmodern engines nt smart", "d": "9/2014"}, {"body": "transform actually picked jstransform filed issue add going close discuss", "d": "9/2014"}, {"body": "zpao thanks", "d": "9/2014"}, {"body": "case would nt able pass custom attributes dom names custom components", "d": "9/2014"}, {"body": "rreverser like said would need sort optin would used components take freeform props", "d": "9/2014"}, {"body": "jussikalliokoski case think implemented external mixin base class need", "d": "9/2014"}, {"body": "adhere simple rules could easily solved staticallyautomatically future instead way everyone would benefit regardless whether specify proptypes definitely saying nt done though would focus effort would", "d": "9/2014"}, {"body": "rreverser case think implemented external mixin base class need done still missing shape validation probably add later syranide adhere simple rules ones could easily solved staticallyautomatically future instead would perfect case would give fastest feedback however would focus effort would since static analysis exactly fort\u00e9 waiting flow whose annotations already started using btw since feel happier reading code whose public functions typeannotated something similar solve problem among others made mixin temporary solution", "d": "9/2014"}, {"body": "probably statically typable sebmarkbage", "d": "9/2014"}, {"body": "sounds like assertterritory proptypes always demand complex constraints proptypes type value assert sufficient capable end would think nt discredit idea overlooked mathematical notion inclusiveexclusive somewhat important also nt use strings numbers work fine would far preferable ps yes sebmarkbage whoever certainly final say", "d": "9/2014"}, {"body": "also remember possible anyone create custom validation method case someone searches falls issue see example section reusable components docs", "d": "9/2014"}, {"body": "specifically asking behavior sure else would want happen specifically triggering callbacks lifecycle methods trigger rerender sounds like flaw end react components views sounds like much nonview logic components", "d": "9/2014"}, {"body": "mixin prevent", "d": "9/2014"}, {"body": "throwing setstateforceupdate call would better debugging see causing", "d": "9/2014"}, {"body": "small example pretty easy see problem ran infinite recursion large react app got difficult debug infinite stack error showing multisecond browser freeze sure something could thinking could add invariant preventing nested updates", "d": "9/2014"}, {"body": "nt reactproptypesshape", "d": "9/2014"}, {"body": "oh man must missed one thanks spicyj least know good idea", "d": "9/2014"}, {"body": "looking bootstrap react components able get around issue simply switching mocha little code changes issue stemmed add jasmine done callback button test", "d": "9/2014"}, {"body": "workaround could try using space value", "d": "9/2014"}, {"body": "number input contains nonnumeric values always simply browsers browsers afaik nothing done abandon thing iirc trigger numeric keyboard regular inputs", "d": "9/2014"}, {"body": "syranide problem value bug gui controlled component value show nothing type something number text gets shown made new fiddle since one uses old react version", "d": "9/2014"}, {"body": "cody nothing", "d": "9/2014"}, {"body": "syranide great way testing learned something today smiley react nonnumeric input stays gui value set", "d": "9/2014"}, {"body": "cody react poll dom set value input nt bother setting supposed changed makes react fast even would force outcome would equally poor type would become", "d": "9/2014"}, {"body": "syranide makes sense thank", "d": "9/2014"}, {"body": "zpao sebmarkbage closing quite confident nothing yell think otherwise", "d": "9/2014"}, {"body": "since already include uglifyify transform repeated call uglify wo nt much iirc browserify nt minfy file paths calls production using webpack basically config testing purposes vendor file includes react output file sure exact difference build nt include license header example", "d": "9/2014"}, {"body": "bet transforms run order probably needs reversed envify transform one make sure actually dead code paths specifically dead require code paths uglifyify removes", "d": "9/2014"}, {"body": "nt really issue react going close feel free keep discussing though future might better question stack overflow mailing list", "d": "9/2014"}, {"body": "thanks tips guys take uglifyify", "d": "9/2014"}, {"body": "nt think anything take uglifyify nt know code dead yet ca nt remove run envify", "d": "9/2014"}, {"body": "made jsfiddle source demo test behaves vanilla javascript across android ios cases place something user finger listener get triad new element seems browser bug platforms nt yet tested safari see seems behaving correctly android", "d": "9/2014"}, {"body": "spec user agent intreprets sequence touch events click dispatch mousemove mousedown mouseup click events order location touchend event corresponding touch input contents document changed processing touch events user agent may dispatch mouse events different target touch events \u0ca0\u0ca0", "d": "9/2014"}, {"body": "frustrating sideeffect fix likely fix well closing issue", "d": "9/2014"}, {"body": "already fixed way determine caps lock state unless something suggest otherwise sure definitely unavoidable browser limitation", "d": "9/2014"}, {"body": "quite sure meant mean comment really clear mean varies depending keyboard layout case nt want include printable characters property consistently across browsers normalising event appropriate moment firefox chrome differing behaviour", "d": "9/2014"}, {"body": "refers virtual key code ie id key keyboard technically useless unless know keyboard layout thankfully keyboards likely encounter agree function keys way determine keyboard layout including caps lock state etc literally nothing polyfill printable keys nt agree holding back support according browsers target gain nothing reporting browsers native support report character values complete set keys said current native support mess somewhat broken explicitly ignoring native broken browsers merit nt think game really want play nt think demand justify devcost", "d": "9/2014"}, {"body": "gain nothing reporting unidentified browsers native support report character values complete set keys disagree think gain baseline expected behaviour safely relied upon moment someone could using printable keys even realise works firefox whole reason people use javascript libraries like jquery mootools smooth browser incompatibilities provide good baseline functionality write jquery event handling code mostly sure work way crossbrowser react event system thing providing equal crossbrowser support", "d": "9/2014"}, {"body": "ca nt least large warning help explaining flaky relied upon except function keys", "d": "9/2014"}, {"body": "discussed see example think iswas react roadmap", "d": "9/2014"}, {"body": "sounds great thank", "d": "9/2014"}, {"body": "need component nt dom representation use render function returns return internally translate however recently component without dom representation also children want mounted lifecycle methods trigger correctly sure really undersand composite classes classes definition nt dom representation asking seems ability return multiple components see likely going happen sometime future might hint reading comment pr convinced generally good idea solution probably refactorrethink instead", "d": "9/2014"}, {"body": "want able return something would work similar way return null noscript practically dom representation would accept children mount", "d": "9/2014"}, {"body": "freiksenet asking still return multiple components genuinely nt want mounted dom using react components much like oop good idea react concerned views", "d": "9/2014"}, {"body": "making library using react components nodes scenegraph canvas renderer scenegraph nodes children want return children somehow render mounted react lifecycle methods trigger correctly insert scenegraph see currently return null terminal nodes wrap children spans", "d": "9/2014"}, {"body": "ah yes see point nt think react master branch wellsuited moment look reactart branch react works svg canvas instead dev probably definitive answer", "d": "9/2014"}, {"body": "seen tried model approach first problem bases everything reactcomponent lacks lots features reactcompositecomponent would nice propcontext validation context lifecycle methods lifecycle invariants unfortunately compositecomponent nt separate parts well even compositemixin private exported", "d": "9/2014"}, {"body": "yeah best solution would hacks using dom requires composite component decoupled dom whose lifecycle validation functionality moved mixins", "d": "9/2014"}, {"body": "think sebmarkbage work decoupling mountcomponent related methods might help issue", "d": "9/2014"}, {"body": "likely coming soon", "d": "9/2014"}, {"body": "need dom nodes though may get removed future going close try keep conversation pr much possible", "d": "9/2014"}, {"body": "actually think makes less readable need ask see something like without problematic naming example also prefer use backbone jquery writing", "d": "9/2014"}, {"body": "old issue come believe better left way got one way things concise shorthand somewhat related immutable collections probably time would mean new state nothing situation nt make much sense anymore", "d": "9/2014"}, {"body": "thanks finding chenglou also somebody made work think point going wontfix understand desire also think explicitly consistently typed api readable usable long term something polymorphic like direction tried move code think stick nt strong need really people making transition backbone even asked add think want api reuse like", "d": "9/2014"}, {"body": "different events outside react probably want onmouseleave", "d": "9/2014"}, {"body": "ah oops thanks", "d": "9/2014"}, {"body": "even plugin would helpful", "d": "9/2014"}, {"body": "ca nt reproduce outside react ca nt find related code assuming culprit", "d": "9/2014"}, {"body": "syranide yeah tried looking code limited experience internals react could nt find anything would caused specific thing adding endash although nt looked characters cause well plus nt happen browser thus specific issue seems event type triggered change variety beforeinput event something along lines", "d": "9/2014"}, {"body": "browniefed sorry forgetting indeed correct affects inputs char range appears dispatched easily featuretested necessary positive result received current tick however see obviously bestneat solution could test char way set flag node event received discarded flag set flag cleared could also use clearing flag requires featuretesting potentially fragile could store initial value way node event received discarded current value equals initial value stored value always cleared event received could also use clear stored value use featuretesting seems robust simple unless noop events sets flag cleared super simple robust legitimate event somehow dispatched tick immediately creation lost ca nt imagine howwhy would happen though use featuretesting missed something obvious related cc zpao yungsters", "d": "9/2014"}, {"body": "syranide problem ended comparing event value returning simple workaround exactly crucial thing somewhat annoying", "d": "9/2014"}, {"body": "cc salier", "d": "9/2014"}, {"body": "diagram zpao", "d": "9/2014"}, {"body": "chenglou diagram could shared put online docs page think lot people would appreciate attempt optimisations components", "d": "9/2014"}, {"body": "chenglou zpao news diagram location", "d": "9/2014"}, {"body": "chenglou find good place put", "d": "9/2014"}, {"body": "maybe even tip lol", "d": "9/2014"}, {"body": "different wrapping around constructor probably need adjust hacking system unsupported ways nt think intention supporting case directly cc sebmarkbage case anything add wants reopen think things", "d": "9/2014"}, {"body": "guess real question create component programmatically outside react world anyone might look future point solution javascript var descriptor reactcreateclasscall react spec mixinrender spec descriptor function mixinrender spec descriptor objectdefineproperty descriptor render etc value function staticrender model node var ctor model var component reactrendercomponent ctor node return promiseresolve component spotwelds render onto descriptor function expects receive propschildren call allowed call component instance resolved rendered returned promise api", "d": "9/2014"}, {"body": "basically replace line note called called", "d": "9/2014"}, {"body": "note seems media events dont bubble", "d": "9/2014"}, {"body": "kind related", "d": "9/2014"}, {"body": "good catch updated lot places evolved api obviously missed least one let us know see", "d": "9/2014"}, {"body": "infact nt even need use unhelpful helper imho api simply", "d": "9/2014"}, {"body": "closing nt think anything actionable feel free object", "d": "9/2014"}, {"body": "petehunt recently released repo gss", "d": "9/2014"}, {"body": "exposing hook seem preferable making anything global implications user customizable generally good idea browniefed linked seems preferable simply dissect recreate functionality react imagine would quite possible thing react lose bulk", "d": "9/2014"}, {"body": "browniefed nice nt seen thanks syranide yeah figured necessarily change anyone wants make playing around idea wanted see anyone feedback related ideas plausible ways achieve result thanks", "d": "9/2014"}, {"body": "worth already work generators jsx support asyncawait near future", "d": "9/2014"}, {"body": "think would support somebody else nt vested interest also adding features come perhaps exact pace revamping lot transform stack making easier write new ones aligning regenerator transform work others write easily also possible write pretty simple script jsx transform hands output traceur rest want", "d": "9/2014"}, {"body": "think would support somebody else nt vested interest fair enough thought check case close issue also possible write pretty simple script jsx transform hands output traceur rest want considering traceur parse xml literals jsx parse async functions would surprised simple script mean scanning file xmllooking constructs extracting running jsx injecting content back file running traceur would useful general purpose tool composing jsx arbitrary transpilers could avoid transforming xmllooking things inside strings think immediate needs solved fbesprima merges parsing async functions edit happened minutes ago nice timing", "d": "9/2014"}, {"body": "think immediate needs solved fbesprima merges parsing async functions merged minutes ago", "d": "9/2014"}, {"body": "jsx parse async functions sorry totally right meant general sense considering parts ca nt even parse", "d": "9/2014"}, {"body": "bad nodemodules mixup", "d": "9/2014"}, {"body": "think petehunt inprogress effort make better nt heard anything definitely good idea", "d": "9/2014"}, {"body": "yes intentionally treat differently js basically reading spec definitions explanation undefined value primitive value used variable assigned value null value primitive value represents intentional absence object value think proptypes warning bit confusing seems like allow since intention however equivalent saying type nonnullable means nt really way saying defined value includes maybe nt really know express cc sebmarkbage talks time types could surely form opinion nt already one", "d": "9/2014"}, {"body": "agreed semantically intentional opposition think make sense guard well though nonnullable types eg hack avoid boilerplate could kind guess changing behavior would much breaking change", "d": "9/2014"}, {"body": "true check way possible explicitly allow value valid value could important union type would open confusing scenarios eg renderable required renderable would still allow already allows equally confusing", "d": "9/2014"}, {"body": "logs could help us first assumption always going missing polyfills ca nt say certainty without knowing console says", "d": "9/2014"}, {"body": "errors nt exist use works maybe would good idea include pollyfils section fact needed android lt anyway thanks", "d": "9/2014"}, {"body": "listed polyfills page regexp one functionprototypebind nt exist call also feature detection react script loaded browser warn missing anything nt think much", "d": "9/2014"}, {"body": "reacthandled components want change render output accordingly case want child requests parent remove pass function child called back operations parent edit ugh worked example forgot save jsfiddle nt autosaves like jsbin let know need clarification redo example morning", "d": "9/2014"}, {"body": "thanks reply kimagure know mean children case directly rendered parent children instead building children parent state props parent render method", "d": "9/2014"}, {"body": "render null child effectively removing still exist virtual hierarchy memory retained lifecycle methods still fire etc truly unmount like hoping condition nt want item exist may want restructure data hierarchy parent decide render typically suggest going close since really issue let try keep discussions slightly appropriate platforms mailing list stack overflow", "d": "9/2014"}, {"body": "thank zpao letting know trick sorry nt think issue since sometimes want blind parent nt care holding references children props like mixin strongly inferencing children render method anyway guess conform react design principles thanks lot", "d": "9/2014"}, {"body": "already closed redirected esprima", "d": "9/2014"}, {"body": "see discussion future svg react going close track", "d": "9/2014"}, {"body": "integration benchmarks incredibly hard pull meaningfully single number think imagine would great task benchmarked separately tradeoffs could properly considered animation fluiditystutter etc rather simply seeing sum costly operations ps also letting browsers breathe benchmarks many benchmarks end benchmarking mostly gc enormous pressure rather something meaningful", "d": "9/2014"}, {"body": "kyleamathews back smile", "d": "9/2014"}, {"body": "thumbsup", "d": "9/2014"}, {"body": "thanks sep pm paul shannessy notifications githubcom wrote closed reply email directly view github", "d": "9/2014"}, {"body": "considered feature instead rather close facebookjsx could turn quite useful sequence expressions nt make sense inside allowed sideeffects render sequence expressions useful sideeffects", "d": "9/2014"}, {"body": "sure correct change meaning way js expressions executed based purely views would useful someone wanted emit concatenated content one would use also handling cases differently based context would bring additional unnecessary checks transpiler logic think better add parenthesizes inside", "d": "9/2014"}, {"body": "rreverser saying disagree obviously equal however users could also always access parenthesis would arguably prefer good practice immediately obvious edit intuition", "d": "9/2014"}, {"body": "syranide saying disagree obviously equal js assumption making operators behave equally concatenate output nt feel right changing basic meaning operators users could also always access parenthesis would arguably prefer good practice probably good practice always still good practice reason change language semantics operator meanings everyone wants still use parenthesis inside braces say spec strictly follow spec parse contents inside one possible subclasses", "d": "9/2014"}, {"body": "js assumption making operators behave equally concatenate output nt feel right changing basic meaning operators hmm meaning even necessarily result nt agree changing basic meaning operators something entirely jsxspecific meaning inside define like functions nt see ca nt work way going stand way useless rather unintuitive somewhat intuitive quite possibly useful perhaps preferable opinion even might preferable takes guesswork equation", "d": "9/2014"}, {"body": "hmm maybe anyway created simple straightforward solution parenthesis discussions whether introduce error", "d": "9/2014"}, {"body": "strictly follow spec parse contents inside assignmentexpression sequenceexpression one possible subclasses pretty sure sequence known simply expression es spec included assignmentexpression fact expression exactly sequence assignmentexpressions intentionally chose assignmentexpression instead expression since knew nt supported want support let open task jsx spec discussion interested parties follow along rationale leaving bug open chose either solution decide fix spec correct fix throw syntax error", "d": "9/2014"}, {"body": "pretty sure sequence known simply expression es spec included assignmentexpression right bad sorry want support let open task jsx spec discussion interested parties follow along rationale makes sense created issue tracking facebookjsx personally prefer allow expression inside braces throwing error easily personally throwing error parse expression easily nt feel right prefer less errorprone way would interesting hear thoughts parties though", "d": "9/2014"}, {"body": "cc salier joshduck", "d": "9/2014"}, {"body": "yep remove callsites", "d": "9/2014"}, {"body": "idea", "d": "9/2014"}, {"body": "looking back pre open source history blames yungsters created property whitelist ca nt see good reason added perhaps legacy reason made sense time ca nt find consumers dom components composite components think fine remove", "d": "9/2014"}, {"body": "come across potential use case want update scroll position element want happen conjunction bunch dom writes course set manually dom render update much harder keep unwanted reads happening actually appears work basic level easily gets sync actual scroll position changed user", "d": "9/2014"}, {"body": "lojjic properties set dom node nt expose proper setting done directly node getting sync good reason", "d": "9/2014"}, {"body": "closing favor pr", "d": "9/2014"}, {"body": "seems assume applies reactdomcomponents applies components local relevant parent putting keyed component child nonkeyed parent component put nonkeyed parent component array thus nonkeyed parent components keyed children irrelevant design bug use need attach afterwards", "d": "9/2014"}, {"body": "thanks answer assume reactdomcomponents components come builtin react create saying put keyed component inside nonkeyed parent component put nonkeyed inside component well yes quite understand please correct wrong look dom renders renders dom node component created dom node set outermost component returned method assume normal key outermost tagcomponent rendered listitem also dom node returned wrapping parent pick keys children array example simplified use case hit algorithm best solution child components compute keys really think difficult implement fact think react already expands render method child components parent render method probably something like hood really would difficult pick child keys waiting feedback", "d": "9/2014"}, {"body": "radubrehar concatenated reactids react bases reconciliation works follows view shows final expanded hierarchy returned isolated component instance reusedreordered else old instance unmounted new instance mounted", "d": "9/2014"}, {"body": "radubrehar closing reopen feel incorrect", "d": "9/2014"}, {"body": "descriptor still release allow people switch using appropriate futurelooking code sebmarkbage", "d": "9/2014"}, {"body": "createfactory trying preemptively start fixing ka code upgrading react easier instead synchronously upgrade", "d": "9/2014"}, {"body": "please increase minor version adding something api see issue immutablejs", "d": "9/2014"}, {"body": "thought already createfactory sep ben alpert notifications githubcom wrote createfactory trying preemptively start fixing ka code upgrading react easier instead synchronously upgrade reply email directly view github", "d": "9/2014"}, {"body": "nt seem", "d": "9/2014"}, {"body": "nt need intermediate release keyref greppable probably find uses using grep figured would ok play hardball one always introduced breaking change releases without deprecating first foresee trouble upgrading ka sep ben alpert notifications githubcom wrote key ref descriptor still props release allow people switch using key appropriate futurelooking code sebmarkbage reply email directly view github", "d": "9/2014"}, {"body": "nt big deal", "d": "9/2014"}, {"body": "ping sebmarkbage rush side reminder", "d": "9/2014"}, {"body": "kossnocorp wo nt bumping minor version even add couple small things right patch really minor major version zero initial development anything may change time public api considered stable semver totally understand argument though trying rude letting know taking advantage fuck rules rule api additions transitional purposes updating codebase wo nt break change existing apis though trying interop semver possible sticking slowermoving schedule practical us bump versions rate say browserify get plan much strict real rules", "d": "9/2014"}, {"body": "issue commit related start getting familiar upcoming change", "d": "9/2014"}, {"body": "see", "d": "9/2014"}, {"body": "currently createdescriptor calls function passed involvedversatile", "d": "9/2014"}, {"body": "syranide mentioned nt think take branch want reminding sebmarkbage many places possible", "d": "9/2014"}, {"body": "zpao reminder push ahead", "d": "9/2014"}, {"body": "jsx change work core proposal stateless functions", "d": "9/2014"}, {"body": "cdnjs jsdelivr set pick changes npmbower automatically think folks", "d": "9/2014"}, {"body": "cc syranide jeffmo nt know whitespace parsing jsx works day", "d": "9/2014"}, {"body": "try put span inside option nt work", "d": "9/2014"}, {"body": "bikesheds", "d": "9/2014"}, {"body": "nt mind options listed prefer", "d": "9/2014"}, {"body": "react stops trying scare developers api valid safe reasons use plus already use rails", "d": "9/2014"}, {"body": "rymohr reason scare people actually thinking carefully using afaik dangerous use dangerous exclude safe useful html way invalid risk breaking entire app html also contains anything usersupplied likely enabled serious security issue personally think means justified also justification", "d": "9/2014"}, {"body": "dangerous though passing html user generated markup generated sanitizer first sanitizer wrote sanitizes html makes sure well formed understand operation could dangerous better warn developer way nt make library awkward use log warning message console time used development mode instead", "d": "9/2014"}, {"body": "pretty sure browsers implement reactspecific partly inclined agree implementation well doubleclick represent two consecutive clicks doubleclick action gesture could tripleclick quadrupleclick etc click times fast quadrupleclick doubleclick semantics require specific semantic interpretation safe bet probably implement", "d": "9/2014"}, {"body": "correct browsers fire dblclick first two clicks rapid series nonreact example showing behavior", "d": "9/2014"}, {"body": "slightly surprised makes sense follow native behaviour straightforward enough patch necessary close", "d": "9/2014"}, {"body": "comment specifically sentences also key children passing object object keys used key value", "d": "9/2014"}, {"body": "yep bad", "d": "9/2014"}, {"body": "nt put wrapper desugars nt make syntactical sense jsx compiler page might help need visual mapping said possible desugar instead hard somewhat controversial wo nt implemented near future", "d": "9/2014"}, {"body": "nt think particularly controversial add code complexity nt done yet", "d": "9/2014"}, {"body": "iirc syranide comments", "d": "9/2014"}, {"body": "chenglou hehe brief chat chenglou little ago nt really lean one way moment see lot hidden dangers allowing composite components return multiple components breaks lot intuitive assumptions nt know right good practice usecases would obviously benefit simplicity returning one component means easy reason see could actually render number rows way knowing inspecting whatever composite components returns feel like able return multiple components moves responsibility wrapping components necessary composite component whatever renders composite component component renders composite component rarely knowledge whether wrap composite components whereas children likely knowledge parents perhaps simply case developer responsibility may good usecases look past inevitable misuse sebmarkbage probably comments", "d": "9/2014"}, {"body": "probably never allow syntax implicitly would need wrapper like however even nt work often probably best confusing consuming components child might expand multiple elements really reason nt support right hard implement hopefully able support sometime future probably short term sorry", "d": "9/2014"}, {"body": "affect things like jquery libraries target specific elements something like following html would selected case understand properly", "d": "9/2014"}, {"body": "might help", "d": "9/2014"}, {"body": "thanks filing unfortunately safari nt seem fire events bit info stackoverflow link think call dupe", "d": "9/2014"}, {"body": "asking parent owner case passing components around different consider return b return thispropschildren c owner mounted div div parent b suppose concrete use cases would helpful nt look like uses owner reactrouter right", "d": "9/2014"}, {"body": "thing like access owner always get parent element using combination dom methods nt currently use anywhere branch makes use help find owned use case reactrouter need know whether active order need check see path matches current url client nt big deal since ever one url keep active state fluxstyle store works fine server rendering components serverside may many urls server processes multiple requests concurrently thus keeping active state store nt work solution using activeroutes branch keep active state component instead typical store need able traverse hierarchy find rendered otherwise need pass arg state object around", "d": "9/2014"}, {"body": "sounds like parent hierarchy would work well routes component still top probably best solved contexts still undocumented currently ownerbased soon parentbased per may also worth encouraging use server rendering execution environments completely isolated reactpage", "d": "9/2014"}, {"body": "parent tree give access component instance dom node", "d": "9/2014"}, {"body": "nt proposing particular api could give access instance", "d": "9/2014"}, {"body": "case yes could work react put properties context default derived solely object user provides descriptor edit wondering might use traverse currently owner hierarchy", "d": "9/2014"}, {"body": "idea could routes component return getchildcontext method whatever info link needs link could access thiscontextrouteinfoblah whatever commit message tests gives general idea api withcontext probably going away use getchildcontext instead", "d": "9/2014"}, {"body": "spicyj thank much contexts work beautifully use case closing tada", "d": "9/2014"}, {"body": "big would really make much easier design complex components react", "d": "9/2014"}, {"body": "would add extra attribute data ensure comments unique identities use could use index comment array key rendering dependent order size array", "d": "9/2014"}, {"body": "something pretty broken transitiongroup stuck trying transition two pages first tried csstransitiongroup nt work tried transitiongroup lower level api even first switch page page b none designated functions fire switch back page b page suddenly functions fire twice enter leave functions fire pages kind like original events got saved later got stacked sure anyone else seen bug fairly new nt think happened last point release react", "d": "9/2014"}, {"body": "feels like browser bug ran issue able reproduce issue without react similar setup broken red box travel axis workaround notice transition css rule workaround transitions broken state occurs initial class addition summary workaround would something needs fixed react seems like getting called transition class added looking code makes sense enter transition called lifecycle workaround however pretty straightforward user use lot people probably running issue example docs though update noticed workaround nt work safari credence notion browser issue", "d": "9/2014"}, {"body": "nt think browser bug definitely bug javascript mentioned trying use lower level transitiongroup addon csstransitiongroup requires four callback functions child element enter enter leave leave put four callbacks put thre required code make work used settimeout call callback functions dom firing events nt loop also put consolelog method track functions called well switch b none consolelogs fire change back instead consolelogs get ones first transition ones second transition functions even start order get two sets transitions firing time domain javascript additionally problem identical safari chrome firefox latest stable", "d": "9/2014"}, {"body": "obviously possible multiple issues responding op whose exact symptoms debug might easier see issues related code sample", "d": "9/2014"}, {"body": "add code sample currently issue big project put one jsbin something also mentioning error using csstransitiongroup similar problems think issues lower level transitiongroup", "d": "9/2014"}, {"body": "original error reported howtomakeaturn lack polyfills error actually pointing call invariant repro easily fix simple misuba sure case assume hitting actually running code loading file made test case using invariant module works cases could think could create minimal repro react maybe output value see perhaps used invariant incorrectly", "d": "9/2014"}, {"body": "misuba though using minified build nt even hit line code undefined", "d": "9/2014"}, {"body": "zpao aha problem minifying dev build rather using prebaked one unlikely get time repro week try pick value", "d": "9/2014"}, {"body": "since tapeventplugin nt made publicly available would feel making repo exposing fork tapeventplugin doubletapevent fix publishing", "d": "9/2014"}, {"body": "took liberty separating changes rest react", "d": "9/2014"}, {"body": "appsforartists thanks pull request take look merge soon possible", "d": "9/2014"}, {"body": "middle debugging issue chrome android getting second different element first dispatched particular case second event closing modal first event opened looks user like nothing happens tap logs chrome macos safari ios chrome android interestingly unable replicate issue chromeos touchscreen androidspecific unfortunately nt chromebook handy log extractevents function topleveltype topleveltarget topleveltargetid nativeevent consolelog arguments consolelog event chrome macbook topmousedown img mouseevent callee caller null topmouseup img mouseevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent mouseevent type mouseup target safari ios toptouchstart touchevent null toptouchend touchevent syntheticuievent chrome android toptouchstart img touchevent callee caller null toptouchend img touchevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent touchevent type touchend target topmousedown divscrim mouseevent callee caller null topmouseup divscrim mouseevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent mouseevent type mouseup target button user trying tap element appears first tap give user way go back covers entire screen behind modal soon button tapped", "d": "9/2014"}, {"body": "wrote reduction issue noticed one talking suspect", "d": "9/2014"}, {"body": "appsforartists great job extracting fix separate package anyone interested npm", "d": "9/2014"}, {"body": "appsforartists unit testing using working", "d": "9/2014"}, {"body": "unit testing stuckouttongueclosedeyes less snarkfully using prototype nt tried automated testing", "d": "9/2014"}, {"body": "realistically nt think anything react canshould closing reopen disagree", "d": "9/2014"}, {"body": "chenglou seems track closing reopen disagree", "d": "9/2014"}, {"body": "syranide nt see close issues pr open nt go particular implementation may still want make fix", "d": "9/2014"}, {"body": "spicyj fair enough", "d": "9/2014"}, {"body": "ran recently hacked around using nativeeventexplicitoriginaltarget ff erelatedtarget null though feels pretty fragile would make sense normalize relatedtarget across browsers", "d": "9/2014"}, {"body": "nbergseng interested knowing used solution ran problem today well hacked around using alongside timer sigh", "d": "9/2014"}, {"body": "nbergseng pretty sure correct solution use unless specific usecase", "d": "9/2014"}, {"body": "syranide yes correct solution leoasis stated events nt supported firefox anyway ended taking capture approach seems working well far", "d": "9/2014"}, {"body": "ezequiel kind bubbles ff regardless normalized react nt remember nt right nt normalize", "d": "9/2014"}, {"body": "merged closing", "d": "9/2014"}, {"body": "merged closing", "d": "9/2014"}, {"body": "generate trailing whitespaces good idea", "d": "9/2014"}, {"body": "well means jsxtransformed files nt play nicely jscs rules check whitespace rules", "d": "9/2014"}, {"body": "merged closing issue thanks", "d": "9/2014"}, {"body": "thanks pr marianoguerra spicyj thought issue pr encountering problem rendering svg component svgelement container except chrome spec stating create nodes according context node chromeblink already implemented firefox webkit open bugs think couldshould fixed react better wait implementation every browser", "d": "9/2014"}, {"body": "probably something fix react", "d": "9/2014"}, {"body": "really like unitless values also understand problem something like would make sense maybe could even specify unit like", "d": "9/2014"}, {"body": "jacobrask since would actual ties core could entirely", "d": "9/2014"}, {"body": "npmbower goto source afaik probably preferable maintaining list", "d": "9/2014"}, {"body": "closing nothing actionable moment", "d": "9/2014"}, {"body": "mentioned pr somewhere else perhaps best solution drop instead use special flag properties throws unless want start throwing warningsinvariants instead invalid values could quite nice", "d": "9/2014"}, {"body": "syranide could use string concatenation instead array string concatenation gotten much faster browsers ie faster ie well according string concat vs array join jsperf browser string concat implementation research stack overflow js function cx classnames typeof classnames object var clsnm else return arrayprototypejoincall arguments", "d": "9/2014"}, {"body": "would also love see builtin support focus issue current workaround coffeescript solution solves problem leaves feeling hack otherwise elegant react component thanks react wonderful tool love work", "d": "9/2014"}, {"body": "also use case trying maintain focus single input interact child elements dropdown selct widget given trying manage focus state led confusing bugs browsers really hard understand order execution ended using timeout widget triggered among places onbluronfocus timeout also helps manage focus moves within parent component also need state addingremoving classnames leaving whole thing pretty wonky easy get sync sure best implementation issue setting initial focus maintaining correct input input feel like ended autofocus option agree might weird thing react generalize", "d": "9/2014"}, {"body": "zpao feel like nt actionable without throwing big net agree", "d": "9/2014"}, {"body": "never seen problem hope bug head", "d": "9/2014"}, {"body": "would appear still bug behaviour changed since bug opened callback called soon state changed callback never called", "d": "9/2014"}, {"body": "petehunt thanks explaining case helps others mozilla htmllabelelement page documents dom attribute name corresponds html attribute", "d": "9/2014"}, {"body": "swivelgames way old android stock browsers issues reserved words properties objects much weird sounds android refer reserved word make js engine fail ca nt say specific guess", "d": "9/2014"}, {"body": "var iframe thisrefsiframegetdomnode iframeattachevent iframeattachevent onload function alert local iframe loaded ie else iframeonload function alert local iframe loaded nonie works", "d": "9/2014"}, {"body": "probably apply fix well", "d": "9/2014"}, {"body": "chenglou updates", "d": "9/2014"}, {"body": "encountered issue victorhomyakov found workaround", "d": "9/2014"}, {"body": "manual patching places classes addedremoved helped extent completely algorithm addon rewritten avoid using event observers timeouts simultaneously requires amount time taking account issues easier use addon", "d": "9/2014"}, {"body": "also encountered issue multiple dom objects listening fast sequence changes", "d": "9/2014"}, {"body": "loss ca nt even get testutils load according addons documentation using npm package load react testutils however undefined addons present ended get testutils", "d": "9/2014"}, {"body": "testutils available development mode ie nodeenv production", "d": "9/2014"}, {"body": "wasted bunch time working around trying clear text input box wonder documentation could updated highlight behaviour maybe adding clear button todo app getting start part docs", "d": "9/2014"}, {"body": "reading pretty sure technically correct behavior keep value like association set input uncontrolled simply mutate value regardless consider sequence makes sense technically value would start finish component goes controlled uncontrolled stops controlled resetremount intuitively could make sense become would mean input would figuratively resetremount transitioning controlled uncontrolled ps think mixed controlled uncontrolled probably flaw use one least never transition kind related", "d": "9/2014"}, {"body": "autoclosing reopening update esprima copy via jstransform", "d": "9/2014"}, {"body": "also want use progress bar", "d": "9/2014"}, {"body": "missing working", "d": "9/2014"}, {"body": "perhaps someone willpower trawl get attributes properties might better url purpose sure", "d": "9/2014"}, {"body": "another help would know change sourcecode tests easyer make commit react", "d": "9/2014"}, {"body": "fwiw attributes still applied using style attribute", "d": "9/2014"}, {"body": "syranide mostly automated would madness manually see previous comment merged already thomasdeutsch see previous svg related pull requests said rather figure plan add one one direct previous comment", "d": "9/2014"}, {"body": "textpath need project currently working right hacking nasty solution happy contribute implementation react svg plugin pack", "d": "9/2014"}, {"body": "full svg addon estimates would ship", "d": "9/2014"}, {"body": "already use map return null undefined elements nt want display useful tip added docs", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "moving issue since htmltojsx converter lives entirely project", "d": "9/2014"}, {"body": "coulde also usefull svg namespaced attributes instance xmlns xlink facing problems gt error namespace attributes supported reactjsx xml", "d": "9/2014"}, {"body": "yungsters zpao feel thinking makeover seems many names flagged despite working equally well properties additionally pretty confidently say vs whether property exists used performance purposes sebmarkbage ie nonstandard attributes nonstandard attributes standard attributes possibly also similar possibly would implemented used handful names performance nt concern future agree cost detection negligible simply apply behavior wholesale remove flags", "d": "9/2014"}, {"body": "update", "d": "9/2014"}, {"body": "go bug zpao want faster", "d": "9/2014"}, {"body": "thanks quick fix", "d": "9/2014"}, {"body": "ran issue indeed caused invalid nesting eg", "d": "9/2014"}, {"body": "love perhaps", "d": "9/2014"}, {"body": "going around quite bit failing see issue ios seems following semantics element triggers action right ca nt solve", "d": "9/2014"}, {"body": "merging", "d": "9/2014"}, {"body": "spicyj hero today", "d": "9/2014"}, {"body": "going close may place may want loop back complete investigation initiative", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "moving htmltojsx issues repository", "d": "9/2014"}, {"body": "need issue actually exist wo nt forget switch domain point probably move github pages rush", "d": "9/2014"}, {"body": "done split htmljsxlib reactmagic project get tool npm although nt done much testing nodejs version compared webbased version", "d": "9/2014"}, {"body": "tried fixing related issue flux chat example feedback would appreciated", "d": "9/2014"}, {"body": "test objectfreeze probably actually remove repo nt use also tests could updated use objectisfrozen instead depending throwing happens strict mode supports freezing strict mode fails", "d": "9/2014"}, {"body": "petehunt correct wrong layer approach work dropdown layer would need sit behind dropdown cover every element page issue dropdown exists inside stacking context root document simply wo nt work", "d": "9/2014"}, {"body": "willdady nt explanation code right complex made us reusable selfcontained dropdown component react anchored place dynamically positioned js react direct dom access works intended anywhere within app including popups closes click outside eats click dropdown works browsers react supports unless something would break component seems nt problem", "d": "9/2014"}, {"body": "syranide able solve simply attaching click handler document inside fires simply closes dropdown simply attach handler dropdown element calls", "d": "9/2014"}, {"body": "realistically going get looked might applicable anymore anyway going close", "d": "9/2014"}, {"body": "see comments tests issues", "d": "9/2014"}, {"body": "realistically going get looked might applicable anymore anyway going close", "d": "9/2014"}, {"body": "many longer valid many actually due bad tests making assumptions use strict objectfreeze could rewritten realistically nt going happen going close", "d": "9/2014"}, {"body": "meantime copied reacttouchlib pointed statements right files edit better yet use injecttapeventplugin", "d": "9/2014"}, {"body": "pretty sure never going make happen moving towards static world proptypes using nt really make sense", "d": "9/2014"}, {"body": "couple additional data points demo mentions drop react events document listeners mouse movements got small module put together handing hotkeys reaches bunch react internals order produce synthetic keyboard events document key events providing neat toplevel listener subscribed forcing components manage subscriptions lifecycle seems like reasonable tradeoff", "d": "9/2014"}, {"body": "api hook events component events like glenjamin described produce synthetic events would nice thing thiseventsfromevent events components dom representatoin thiseventsfromeventtarget events targets like document would recommend look baconjs wrappers maybe fromcallback binder would great needs useable declaratively like events inside component render function return outside component think could registered think basically nickthompson syranide saying", "d": "9/2014"}, {"body": "react support level events etc keyboard shortcuts", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "low desire way make work going close", "d": "9/2014"}, {"body": "petehunt know old comment reactanimations repo", "d": "9/2014"}, {"body": "wickynilliams pete removed still find commits", "d": "9/2014"}, {"body": "chenglou thanks", "d": "9/2014"}, {"body": "problem azoerb current hack update directly call later break something", "d": "9/2014"}, {"body": "bypass", "d": "9/2014"}, {"body": "could queuing function like takes closure queued closure returns changed state merged closure could even passed current state argument possibly", "d": "9/2014"}, {"body": "workaround move state react flux stores long keep state react nt problem", "d": "9/2014"}, {"body": "one reasons able get jsx transformed files didnt close terminal window first time installation closed terminal window reopened able transform jsx file located anywhere disk folder possible solution", "d": "9/2014"}]