[{"title": "generate xml compatible markup", "body": "take alternative approach discussed think take advantage selfclosing information already reactdom make use reactdomcomponent cc audreyt case interested taking stab", "num": "2278", "d": "9/2014"}, {"title": "add better guard nested renderings", "body": "issue demonstrate problem see cases handled way vs actually encountered case quite difficult see problem real life application warning message helpful possible handle consistantly least include component name available", "num": "2277", "d": "9/2014"}, {"title": "method create batching context react tree", "body": "noticed calls occur dom handler get batched render calling outside handler cause multiple renders method call tree tell enter batching state", "num": "2275", "d": "9/2014"}, {"title": "thisismounted true componentwillmount", "body": "imagine intended valid perhaps need renaming", "num": "2274", "d": "9/2014"}, {"title": "replace setinnerhtml createnodesfrommarkupgetmarkupwrap", "body": "found calls solve largely problem includes fixes submitting issue reminder information", "num": "2273", "d": "9/2014"}, {"title": "feature request warn thisstate touched directly rather setstate", "body": "stumbled across code written touches thisstate directly forces update danger pattern appears work still leaves code vulnerable callers setstate right thing queued overwriting handtouched state understanding red box correctly chance least dev version thisstate could guarded js setter would print warning", "num": "2272", "d": "9/2014"}, {"title": "markup disappears due bad markup", "body": "without thinking much semantics sorts odd effects application seemingly random ui components went missing presumably lt p gt lt gt combination nt valid like markup plain bad got error message react nothing browser application misbehaviour seemed mostly random nt really expect react fix wanted post googling lead nowhere would nice understand things exploding", "num": "2270", "d": "9/2014"}, {"title": "firefox report deadkeydeadkey single combined event", "body": "pressing followed deadkeys reported etc rather immediately followed browsers probably worth normalizing putting posterity", "num": "2269", "d": "9/2014"}, {"title": "gzip builds fbme", "body": "reason nt gzipped", "num": "2264", "d": "9/2014"}, {"title": "reactmount length gc optimization", "body": "doubtful whether claim actually valid testing memory efficiency objects vs arrays found reducing length setting actually increased memory usage significantly reason browsers", "num": "2260", "d": "9/2014"}, {"title": "document justification dangerouslysetinnerhtml html", "body": "", "num": "2256", "d": "9/2014"}, {"title": "allow internal components used browser version", "body": "using flux need reactlibcopyproperties easy browserify requirejs possible uses bower version nt contain copyproperties fn would nice like maybe include lib components possible thanks", "num": "2251", "d": "9/2014"}, {"title": "better svg support namespaced attributes", "body": "trying use react svg document facing problems namespaced attributes instance element cant constructed react cant build jsx xmlns xlink attribute way solve", "num": "2250", "d": "9/2014"}, {"title": "minified version broken", "body": "line setinnerhtml minified reactminjs reactwithaddonsminjs exception thrown line repro modified basic example js", "num": "2247", "d": "9/2014"}, {"title": "api change reactcomponentmountunmount", "body": "currently way verbose considering instance methods component nt take arguments relating component related different might make sense change even think internal methods huge deal cc jordwalke leebyron sebmarkbage note interested working talk us first probably caveats edge cases consider jumping right", "num": "2245", "d": "9/2014"}, {"title": "onchange firing virtual keyboard", "body": "hey writing kiosk type app linux touch device needed virtual keyboard found great chrome extension extension works fine react onchange nt recognize extension jsbased dispatches keydown keyup keypress change events naturally updates element value would nt work thanks", "num": "2244", "d": "9/2014"}, {"title": "ca nt call prototype method mixin", "body": "mixin factory creating mixins many helper methods vary single attribute wanted create mixin prototype save memory seems ca nt call prototypal methods check sample returns appropriate result possible implement", "num": "2243", "d": "9/2014"}, {"title": "support array objects style property", "body": "proposed react future would nice support list style objects style property objects would automatically merged order last object overriding previous one var boxstyle padding background hotpink var bixboxstyle margin width", "num": "2239", "d": "9/2014"}, {"title": "introduce createfactory", "body": "fairly advanced class system integrated react managed make work using stock build refactoring descriptors longer possible know react part public api chance perhaps hidden important us unwrapped version reference method", "num": "2235", "d": "9/2014"}, {"title": "released version", "body": "release important cause know introduce reactcomponents classes support please let know release", "num": "2232", "d": "9/2014"}, {"title": "marginbottom gets dropped sometimes", "body": "product currently developing case value gets dropped react sometimes unfortunately could nt manage reproduce issue attempts reduced test case ca nt post link unreleased product yet thought report anyway case someone additional information go basically case application components whose style value set object something like values dependant screen size listened updated something like however noticed resizing screen often components end vertical margin know caused react tried logging value assigned sound actually even called hit behavior something makes problem go away setting style instead application running tried still reproducible", "num": "2231", "d": "9/2014"}, {"title": "remove flux docs", "body": "basically keeping copies documentation sync failing point maybe make permalinks site redirect link offsite also look links docs pointing pages update", "num": "2229", "d": "9/2014"}, {"title": "csstransitiongroup enter transitions work safari chrome", "body": "best explained demo hit go times new numbered boxes fly left old numbers boxes fly right leave transitions working fine enter transitions activated new numbers simply appear place affects chrome safari ipad air iphone css animations whole look work fine", "num": "2227", "d": "9/2014"}, {"title": "jsx quiet flag built module messages", "body": "would nice way make stop printing stderr nt helpful message clogs build logs", "num": "2222", "d": "9/2014"}, {"title": "use named functions object methods", "body": "currently jsx converts following however debugging especially concatenated stuff cli would nice see stack trace method caused exception could achieved easily jsx converted snippet instead", "num": "2216", "d": "9/2014"}, {"title": "warn component passed props nt need", "body": "would cool able get warnings typoed otherwise extraneous props passed component similar warns pass meant could probably even ensure deep validity passed data would useful finding bugs also optimizing hot components making sure shapes aligned obviously would need sort optin like proptypes", "num": "2215", "d": "9/2014"}, {"title": "proptypes range", "body": "think adding feature would allow people specify range number proptypes something like range type would take string represents numerical range inclusive range means last element excluded would similar feel proptype", "num": "2214", "d": "9/2014"}, {"title": "throw warning undefined passed event callback", "body": "maybe valid use case something like yelled would easier debug", "num": "2210", "d": "9/2014"}, {"title": "inifinite recursion caused lifecycle methods trigger rerender", "body": "lifecycle methods cause rerenders potentially end infinite recursion seen happen somewhere bigger application difficult find sure anything react could prevent cases though two reduced examples", "num": "2207", "d": "9/2014"}, {"title": "add proptypesobjectwith", "body": "created personal project works great thought would nice add core want make sure like work pr implementation utils right javascript var utils proptypes objectwith function options return objectwithfn options false utilsproptypesobjectwithisrequired function options return objectwithfn options true moduleexports utils function objectwithfn options isrequired return function props propname componentname var componentprop props propname var errormessage isrequired amp amp componentprop return else isrequired amp amp componentprop errormessage required prop specified else var errors missing extra var prop options var shouldbepresent options prop var hasprop componentprophasownproperty prop shouldbepresent amp amp hasprop errorsextrapush prop else shouldbepresent amp amp hasprop errorsmissingpush prop var missingsome errorsmissinglength var badextras errorsextralength missingsome badextras errormessage prop invalid properties errorsmissinglength errormessage jsonstringify errorsmissing missingsome amp amp badextras errormessage errorsextralength errormessage jsonstringify errorsextra errormessage return new error errormessage tests using mocha chaijs javascript var expect require chai expect var utils require utils describeonly utils function utilsspec describe proptypes function var propname myprop var componentname mycomponent var props empty valid myprop foo present baz present present invalidmissing myprop missing props invalidextra myprop bar foobar either invalidboth myprop bar foobar either missing props let know something like core try create pr also considered making possible specify proptype property rather truefalse thought would acceptable", "num": "2206", "d": "9/2014"}, {"title": "testutils simulateclick used multiple spec files causes test failures using jasmine", "body": "two spec files successfully run execute separately one call simulateclick execute simulateclick click command essentially ignored seconds spec file runs spec file simulateclick calls two different tests works fine removed everything except spec files simplified karmaconf verify issue simulateclick using first spec file runs jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe button component function var button second spec file runs jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe calendar function var calendar var moment output run together nodemoduleskarmabinkarma start karmaconfjs log button begin log button end log calendar begin log calendar end chrome mac os x calendar display october next clicked failed expected equal error expected equal object lt log calendar begin log calendar end chrome mac os x calendar display august previous clicked failed expected equal error expected equal object lt chrome mac os x executed failed secs secs comment simulateclick first test everything passes jsx reactdom var react require reactaddons var testutils require reactlibreacttestutils describe button component function var button tests pass nodemoduleskarmabinkarma start karmaconfjs log button begin log button end log calendar begin log calendar end log calendar begin log calendar end chrome mac os x executed success secs secs", "num": "2205", "d": "9/2014"}, {"title": "input typenumber nt work empty value", "body": "sample value input always empty works number values type numeric values appear", "num": "2203", "d": "9/2014"}, {"title": "proper react minification", "body": "wondering best way minify react production builds guide christianalfoni wrote comprehensive used boilerplate however adding envify uglify uglifyify build bigger standard reactminjs uglifyify nt seem anything guessing problem since many moving parts hard pin exactly going wrong kind boilerplate would great gulp task looks like mainjs looks like", "num": "2200", "d": "9/2014"}, {"title": "tapeventplugin sending tap wrong element chrome android", "body": "using open drawer tap icon tap icon covered scrim close drawer tap separately chromebook pixel touchscreen iphone works splendidly nexus icon getting touchtap finger still touching lift finger sends another tap scrim closes drawer sample repo demonstrates bug see isolate root cause send pr likely related", "num": "2199", "d": "9/2014"}, {"title": "add striptypes option jsxtransformer", "body": "cf", "num": "2197", "d": "9/2014"}, {"title": "nt rely dom window", "body": "largely dom agnostic couldshould moved folder everything folder unaware dom could running web worker", "num": "2194", "d": "9/2014"}, {"title": "geteventkey implementation inconsistent spec firefox implementation", "body": "inconsistencies keyboard event spec well firefox implemented property correctly set printable characters events works properly firefox interpretation standard firefox behaviour correct spec key generates printable character exists appropriate unicode code point keyboardeventkey attribute must string consisting char value character enter key fires keydown firefox fires keydown keypress chrome consistent across browsers capslock key fires keydown toggled caps lock toggled keydown event fired may browser limitation chrome repro test page firefox compare result chrome", "num": "2193", "d": "9/2014"}, {"title": "components children without dom representation", "body": "need component nt dom representation use render function returns however recently component without dom representation also children want mounted lifecycle methods trigger correctly unfortunately nestable thus return ideal solution way thing without using know plans replace solution null component plans null component mount children", "num": "2191", "d": "9/2014"}, {"title": "hide datareactid dom", "body": "mean generated prop cases may use ids like uuid mongodb quite long putting dom properties look quite ugly messy chance becomes invisible elements panel debugging", "num": "2190", "d": "9/2014"}, {"title": "backbonejquery style alternative notation setstatesetprops", "body": "able changing single item would make things little readable opinion thoughts title says backbonejquery style notation referring alternative jquery alternative backbone", "num": "2189", "d": "9/2014"}, {"title": "onmouseout behave expected nested elements", "body": "given following mouse smaller square within bigger square onmouseout bigger square gets called despite mouse still contained within", "num": "2188", "d": "9/2014"}, {"title": "expose ontransitionend event react components", "body": "event components normalized across browsers supporting transitions fake nt using currently react uses internally however useful cases addingremoving view", "num": "2187", "d": "9/2014"}, {"title": "endash causes onchange fire render", "body": "nt know issue react input initially contains endash fires change event jsfiddle", "num": "2185", "d": "9/2014"}, {"title": "flow diagram component lifecycle", "body": "new developers understanding exactly component functions called confusing read many times failed piece together coherent image detailed reference perhaps contains diagrams would great thing meantime could read source think would benefit others thanks", "num": "2184", "d": "9/2014"}, {"title": "improper context createclass", "body": "react able decorate render method static render returns promise opposed react callback implementation javascript mixinrender function spec var statics specstatics statics specstatics spot weld static render method staticsrender staticsrender staticrenderfactorycall spec return spec function staticrenderfactory spec return function staticrender model node var promisified promisepromisify reactrendercomponent react semidecoration worked well enough purposes returns caller descriptor would expect javascript createclass function spec var constructor function constructorprototype new reactcompositecomponentbase constructorprototypeconstructor constructor however following pattern gives error internal createclass call digging around codebase looks like forgotten context bind", "num": "2183", "d": "9/2014"}, {"title": "video component doesnt support media events", "body": "media events good place might media events particular events like oncanplay oncanplaythrough ondurationchange", "num": "2182", "d": "9/2014"}, {"title": "docs mycomponent create component instance", "body": "hi docs says component classes created reactcreateclass return instances reactcomponent called turns reactrendercomponent actually creates component instance least one work think docs reflect", "num": "2179", "d": "9/2014"}, {"title": "reactlink checkedlink", "body": "supported default file meant file support attributes moved addon ask goal allowing addon provide linking attribute sure possible currently edit reworded last sentence", "num": "2176", "d": "9/2014"}, {"title": "expose api preprocess vdom tree diffing", "body": "one really positive feature react ability proper logic layout eg grids scale ways take account screen size content size however reusability solutions often quite optimal solutions gss allow define things like reusable manner usually supported recent browsers would easier solve reactbased solutions since virtual dom nt depend browser also hooking possible changes tree tedious hard get right without sacrificing performance allowing usercode preprocess virtual dom tree diffing would open doors whole new world styling engines born reading virtual dom tree fast well making changes implications vary styling languages able define custom values apply css aspect ratio hack inject extra dom elements make things centered based element keeping usercode intentoriented clear abstracting away common pains css realize simple change adding hook somewhere instead means exposing vast amount api surface currently considered implementation details also even problematic cases involved however think would potential revolutionize deal styling web pages say worth thinking least", "num": "2174", "d": "9/2014"}, {"title": "implement traceur pass jsx", "body": "nt know google traceur transpiler extras proposed active project plan continue implement proposed javascript changes future think jsx transformation pass traceur would great win two reasons jsx inprogress specification recommended inclusion transpilers one traceur goals experiment new javascript proposals seems natural want jsx since jsx syntactical extension difficult compose jsx transpiler transpilers cool current tool implements features afaik nt implement really hard hitting features like generators definitely nt implement proposals like asyncawait jsx traceur know play whatever new features come without drop xml syntax vice versa ps personal experience asyncawait awesome use conjunction react suppose one blocker issue status jsx proposal anyone idea long take stabilize", "num": "2173", "d": "9/2014"}, {"title": "react tutorial refers outofdate reactlibmerge", "body": "recent checkout react file nt present", "num": "2171", "d": "9/2014"}, {"title": "inner required fields shaped props reported properly", "body": "see example console report barhello probably report whole path inner field", "num": "2168", "d": "9/2014"}, {"title": "null props considered differently getdefaultprops vs isrequired", "body": "case argument passed property marked get proper warning console namehello though probably prop null prop specified anyway hand default value used prop explicitly wanted behavior probably make documentation explicit giving entire responsibility component callers safeguarding", "num": "2166", "d": "9/2014"}, {"title": "setstate callback componentwillmount get called", "body": "spicyj know", "num": "2164", "d": "9/2014"}, {"title": "react nt work android", "body": "saw nt seem related problem use fails load example wo nt execute android", "num": "2163", "d": "9/2014"}, {"title": "unmount component rendered child", "body": "ran scenario prefer code fildde parent contains several children children remove make parent noticed know way unmount node pass container node however case child rendered directly dom node unmount child", "num": "2162", "d": "9/2014"}, {"title": "jsxtransformer nt handle element content", "body": "expected three work actual last one works two throw different errors jsxtransformertransform jsx reactdom error parse error line unexpected token gt jsxtransformertransform jsx reactdom referenceerror invalid lefthand side assignment jsxtransformertransform jsx reactdom object code jsx reactdom reactdomspan classname extra object sourcemap sourcemapgenerator sourcemapfilename sourcejs", "num": "2160", "d": "9/2014"}, {"title": "add additional html tag reactdom", "body": "would like use tag foreignobject inside react need tag inserting html tags like input textarea inside svg elements plan officially support tag future add self", "num": "2157", "d": "9/2014"}, {"title": "create benchmark suite", "body": "create new benchmark suite patterns relevant react write test four different target audiences js engine lowlevel microbenchmarks important language features like objectassign dom engine lowlevel microbenchmarks documentcreateelement innerhtml clonenode updating setting style property etc react core engine lowlevel real worlds tests react algorithm dom layer integration benchmarks real world dom tests benchmarks whole thing need figure format use benchmarks easy incorporate engines benchmark suites also set stable ci environment track regressions one noisy", "num": "2154", "d": "9/2014"}, {"title": "reactcsstransitiongroup jumbles ui", "body": "using react router toplevel render code like words one toplevel item rendered dependant url use reactcsstransitiongroup end situation several components rendered slot one item possibly live happens stock nexus amp ipad seems work fine desktop browser example trigger bug use navigate usersphones use back times framework example code", "num": "2150", "d": "9/2014"}, {"title": "going big react video set private", "body": "nice get back hoping watch really available anymore removed docs", "num": "2145", "d": "9/2014"}, {"title": "incorrect handling sequenceexpression inside xjsexpressioncontainer", "body": "consider following examples javascript reactrendercomponent mountnode translates reactrendercomponent hellomessage name dosmth syntax error ingvar mountnode javascript reactrendercomponent dosmth ingvar mountnode translates reactrendercomponent hellomessage null wrong output dosmth ingvar mountnode sequence expressions used often still believe possible errors fixed possible fix would treat xjsexpressioncontainer parenthesized expression simply add around inner expression output", "num": "2143", "d": "9/2014"}, {"title": "warning rangedetach noop per dom", "body": "hi getting following warning using ctrls shortcut save app state cursor caret selection contenteditable happens chrome raul", "num": "2142", "d": "9/2014"}, {"title": "scrollleftscrolltop exist", "body": "specified htmldompropertyconfig understand probably usecase nt make sense let users setupdate manually dom nodes asking currently emit invalid attributes also nt set properties reusing servermarkup seem really really hacky right cc zpao spicyj yungsters", "num": "2140", "d": "9/2014"}, {"title": "child key taken account set render", "body": "get famous child array unique key warning set keys child items render method yes inspect dom keys set debug realized keys expected child items render method called optimal since want allow child items manage keys js jsx reactdom var seed var listitem reactcreateclass displayname listitem render function var key key seed return var list reactcreateclass displayname list render function var var len thispropslen reactrendercomponent documentbody see jsbin see action child keys taken account really think fixed would allow much greater flexibility support usecases", "num": "2138", "d": "9/2014"}, {"title": "ship", "body": "think want get take ridealongs new elements properties nonbreaking bug fixes list x x x x needs jstransform amp esprima bumps slightly risky needed tooling", "num": "2137", "d": "9/2014"}, {"title": "whitespace option element property variable triggers invariant violation", "body": "minimal example triggers error removing whitespace makes work attach couple screenshots contents whitespace triggers error without whitespace works fine", "num": "2136", "d": "9/2014"}, {"title": "rename dangerouslysetinnerhtml", "body": "thoughts something else prefer sound also makes sense add word use elsewhere could useful contenteditables avoid hacks etc cc sebmarkbage zpao", "num": "2134", "d": "9/2014"}, {"title": "doubleclicking repeatedly fires event", "body": "using ondoubleclick event doubleclicking repeatedly fires event throttling quite generous sequence doubleclick short pause doubleclick produces unexpected effect second doubleclick triggering created demo well quick example nonthrottled doubleclick", "num": "2132", "d": "9/2014"}, {"title": "adding ability add stack", "body": "found many times get errors smart widget trying unmount retrieving information server render errors prevent would execute another using callback setstate inform parents unmount tedious", "num": "2130", "d": "9/2014"}, {"title": "incorrect comment docs key ordering", "body": "dynamic children practice browsers preserve property order except properties parsed unsigned integers numeric properties ordered sequentially properties happens react render components order avoided adding string prefix key nt true react explicitly refactored code way back shortened ids prevent behavior introduced expect workaround dropped future", "num": "2129", "d": "9/2014"}, {"title": "define better way add missing jsx tags react nodes", "body": "svg tags like standard tags nt find way react request provide simple api add existing standard tag", "num": "2128", "d": "9/2014"}, {"title": "add fragment api allow returning multiple components render", "body": "note maintainers know issue know exactly set problem solved want hard problem current architecture additional comments expressing desire feature helpful feel free subscribe issue button right hand column comment unless adding value discussion valuable use cases already written comments eg know ca nt put elements consider following js var managepost reactcreateclass render function var posts thispropsposts remove get following error adjacent xjs elements must wrapped enclosing tag nt till readd surrounding rather pointless divs compiles issue running addressed adds extra imo useless pointless html page harming nothing looks messy unprofessional maybe something wrong please enlighten", "num": "2127", "d": "9/2014"}, {"title": "many rerendering break reactcsstransitiongroup", "body": "prepared fiddle reproduce bug try grabbing range input slide fast left right certain point list breaks dom nodes left forgotten dom never removed also noticed magic number bug case reduce max value less elements bug nt happen", "num": "2126", "d": "9/2014"}, {"title": "onchange handler triggered safari auto fill", "body": "trouble controlled react component handles sign forms user input controlled state posted ajax request submitting form state username password updated event input fields using safari autofill functionality event triggered example typing clicking auto fill suggestion value updated input field correct suggestion state updated added proof concept try steps reproduce go safari fill form username password click sign button safari ask want save login details click save password go type trigger safari autofill click first suggestion input field contain correct sign details state updated", "num": "2125", "d": "9/2014"}, {"title": "wanted blessed access owner", "body": "reactrouter project would really really like blessed way access component bottom render stack time another rendered currently reference owner component using looks like going removed currently trying understand reasons wanting get rid find way satisfy concerns still preserve access component owner way lots places dom api go back tree including parentnode ownerdocument parent ownernode able essentially thing react component api would incredibly useful", "num": "2123", "d": "9/2014"}, {"body": "suppose mine also drops trailing commas might useful", "d": "9/2014"}, {"body": "ah yea let leave alone", "d": "9/2014"}, {"body": "hi thanks creating ticket rainbow use case workaround sufficient noticeable performance impact maintain local patch time agree generating xhtmlcompatible markup elegant correct solution probably would nt cycles work closedumbrella", "d": "9/2014"}, {"body": "explore actually needed throwing end selfclosing tags", "d": "9/2014"}, {"body": "boolean attributes need like sure anything else", "d": "9/2014"}, {"body": "added batchedupdates method addons think", "d": "9/2014"}, {"body": "woot thanks spicyj timeline release", "d": "9/2014"}, {"body": "cc zpao sebmarkbage know reason done otherwise go ahead draft pr", "d": "9/2014"}, {"body": "transformed browsers due invalid nesting would try update contents component invalid nesting react would throw invariant violation exclaiming dom mutated unusable invalid nesting known problematic behavior fixed improvements alerting user problems", "d": "9/2014"}, {"body": "also related try mutate content inside invalid nesting get error pr", "d": "9/2014"}, {"body": "going close dupe essentially issue", "d": "9/2014"}, {"body": "fbme nt real cdn also redirects much site really suggest people self host use real cdn like cdnjs jsdelivr", "d": "9/2014"}, {"body": "ok make link cdnjs prominent", "d": "9/2014"}, {"body": "reusing global array nvm", "d": "9/2014"}, {"body": "would affect minification internal api subject change time want function use copy say ps also use webpack instead requirejs", "d": "9/2014"}, {"body": "browserify npm use nt coherent bower ca nt use maybe internal api would enough even changes know functions minified version export somehow", "d": "9/2014"}, {"body": "two different things publicly exposed reaching accessing internal modules react offers guarantees", "d": "9/2014"}, {"body": "syranide look flux example giving benefits npm version hiding bower version would better would structure way someone goes npm bowser version nt change stuff provide tutorial uses internal stuff say internal used think internals also prepended least understood internals seems public decision whenever add decide nt add please notice flux guys make tutorial api modules instead internal ones say like nt context use require reactlibkeymirror nt use internal api", "d": "9/2014"}, {"body": "official dev decision imagine simply intent keeping meat examples simple rather link different implementations react purpose rather arbitrary exposed nt helpers useful react users also exposed library x also expose one use react longer needs react suddenly requires specific semantic implementation think idea react expose helper methods flawed anything probably way around react depend shared modules depend module dependency requirements compatible would share implementation team react decision", "d": "9/2014"}, {"body": "yes seems better approach also thought problem react doest need lib anymore", "d": "9/2014"}, {"body": "exception raised try put namespaced attributes error namespace attributes supported reactjsx xml", "d": "9/2014"}, {"body": "already faced issue image element opened issue meanwhile using following html fill stroke stylecursor pointer xlink href thispropsimage bruno ledesma notifications githubcom exception raised try put namespaced attributes error namespace attributes supported reactjsx xml reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "9/2014"}, {"body": "encoding serving html guess add work correctly though maybe use ascii chars minified builds", "d": "9/2014"}, {"body": "never mind see character actually missing maybe bug uglifyjs", "d": "9/2014"}, {"body": "spicyj encoded charset irrelevant unless uglifyjs decodes zerowidthinvisible imagine would look like nothing really seems like nothing weird", "d": "9/2014"}, {"body": "apparently culprit nt seem like perhaps uglifyjs decodes strings first strips reason", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "hmm interesting problem surfaces doubleuglify source perhaps something wrong buildprocess", "d": "9/2014"}, {"body": "pr", "d": "9/2014"}, {"body": "cascadian add priority simply replace replace source work", "d": "9/2014"}, {"body": "problem surfaces doubleuglify source perhaps something wrong buildprocess yes double uglify remove dead requires tree see", "d": "9/2014"}, {"body": "maybe receivedescriptor anyway", "d": "9/2014"}, {"body": "highpri since think likely refactored something like spicyj said anyway also hoping wo nt instance methods regular functions think internals move oo fp", "d": "9/2014"}, {"body": "spicyj mean", "d": "9/2014"}, {"body": "chrome react expects hear event maybe could listen others well though nt think really necessary", "d": "9/2014"}, {"body": "thanks reply updated dispatch input event worked beautifully owe hug", "d": "9/2014"}, {"body": "closing seems resolved issue plugin", "d": "9/2014"}, {"body": "duplicate", "d": "9/2014"}, {"body": "cc sebmarkbage", "d": "9/2014"}, {"body": "important create wrapper calls createelement important wait jump", "d": "9/2014"}, {"body": "important create wrapper calls createelement use hence create wrapper need reimplement possible stock react private thing important wait jump could nt find information released couple months away problem somehow exposed would really helpful fwiw exposed would also awesome", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "correct wrong simply returns whereas asking expose completely different beast", "d": "9/2014"}, {"body": "less couple months away", "d": "9/2014"}, {"body": "oh see want way create reactelement without passing factory something immediately support without consideration use case exactly working towards ca nt really fast track without incremental upgrade path wo nt know final try upgrading sep pm yury selivanov notifications githubcom wrote correct wrong reactcreateelement type props children simply returns type props children whereas asking expose reactdescriptorcreatefactory completely different beast reply email directly view github", "d": "9/2014"}, {"body": "understand maybe possible hide perhaps leading far away", "d": "9/2014"}, {"body": "reason asking even current see expose wrapped helper function use straightforwardly really prefer unwrapped", "d": "9/2014"}, {"body": "make custom react build exposes modulesfunctions though wo nt able help run trouble", "d": "9/2014"}, {"body": "spicyj yeah always option way however wo nt able load reactjs facebook cdn etc", "d": "9/2014"}, {"body": "functions nt part supported api intentionally exposed also part supported api nt exist currently used react devtools confidence maintain devtools update accordance breaking react changes use modules designed used individually change release release without notice", "d": "9/2014"}, {"body": "good feedback though essentially saying pretty sure going moving fast enough get think fair feedback certainly trying figure solve problem exposing features early true might change going upgrade path shows problematic would nt want expose features yet finalized", "d": "9/2014"}, {"body": "soon wo nt introducing components classes apologies projects page date", "d": "9/2014"}, {"body": "introduced classes support thx answer", "d": "9/2014"}, {"body": "ready going plan preliminary support might really want stay tuned", "d": "9/2014"}, {"body": "ok thx", "d": "9/2014"}, {"body": "overlapping styles currently supported react see would nice support runtime performance affected tricky subject although offline transforms definitely idea", "d": "9/2014"}, {"body": "ah see thanks makes sense closing", "d": "9/2014"}, {"body": "actually think would nt terrible make work betting reason nt expand shortcut properties set individual property eg gets expanded probably screw key order nt technically guaranteed anyway would perf tradeoffs make work technically nt hard sure worth good points", "d": "9/2014"}, {"body": "cc fisherwebdev", "d": "9/2014"}, {"body": "also cc vjeux", "d": "9/2014"}, {"body": "definitively agreed link traffic dedicated website see complementary section flux website", "d": "9/2014"}, {"body": "newest safari osx enter transitions broken one real fix would suggest taking deadlyicon pr", "d": "9/2014"}, {"body": "also confirm broken safari osx another test case entry animations affected edit seems cody deadlyicon suggestion works moving transition declaration fixes entry animation seen", "d": "9/2014"}, {"body": "agreed build top commoner need fix go open issue repo let move discussion", "d": "9/2014"}, {"body": "afair currently used also modern engine generates stack trace explicit function names also property names assigned lot information", "d": "9/2014"}, {"body": "sure biggest pains debugging least nonmodern engines nt smart", "d": "9/2014"}, {"body": "transform actually picked jstransform filed issue add going close discuss", "d": "9/2014"}, {"body": "zpao thanks", "d": "9/2014"}, {"body": "case would nt able pass custom attributes dom names custom components", "d": "9/2014"}, {"body": "rreverser like said would need sort optin would used components take freeform props", "d": "9/2014"}, {"body": "jussikalliokoski case think implemented external mixin base class need", "d": "9/2014"}, {"body": "adhere simple rules could easily solved staticallyautomatically future instead way everyone would benefit regardless whether specify proptypes definitely saying nt done though would focus effort would", "d": "9/2014"}, {"body": "rreverser case think implemented external mixin base class need done still missing shape validation probably add later syranide adhere simple rules ones could easily solved staticallyautomatically future instead would perfect case would give fastest feedback however would focus effort would since static analysis exactly fort\u00e9 waiting flow whose annotations already started using btw since feel happier reading code whose public functions typeannotated something similar solve problem among others made mixin temporary solution", "d": "9/2014"}, {"body": "probably statically typable sebmarkbage", "d": "9/2014"}, {"body": "sounds like assertterritory proptypes always demand complex constraints proptypes type value assert sufficient capable end would think nt discredit idea overlooked mathematical notion inclusiveexclusive somewhat important also nt use strings numbers work fine would far preferable ps yes sebmarkbage whoever certainly final say", "d": "9/2014"}, {"body": "also remember possible anyone create custom validation method case someone searches falls issue see example section reusable components docs", "d": "9/2014"}, {"body": "specifically asking behavior sure else would want happen specifically triggering callbacks lifecycle methods trigger rerender sounds like flaw end react components views sounds like much nonview logic components", "d": "9/2014"}, {"body": "mixin prevent", "d": "9/2014"}, {"body": "throwing setstateforceupdate call would better debugging see causing", "d": "9/2014"}, {"body": "small example pretty easy see problem ran infinite recursion large react app got difficult debug infinite stack error showing multisecond browser freeze sure something could thinking could add invariant preventing nested updates", "d": "9/2014"}, {"body": "nt reactproptypesshape", "d": "9/2014"}, {"body": "oh man must missed one thanks spicyj least know good idea", "d": "9/2014"}, {"body": "looking bootstrap react components able get around issue simply switching mocha little code changes issue stemmed add jasmine done callback button test", "d": "9/2014"}, {"body": "workaround could try using space value", "d": "9/2014"}, {"body": "number input contains nonnumeric values always simply browsers browsers afaik nothing done abandon thing iirc trigger numeric keyboard regular inputs", "d": "9/2014"}, {"body": "syranide problem value bug gui controlled component value show nothing type something number text gets shown made new fiddle since one uses old react version", "d": "9/2014"}, {"body": "cody nothing", "d": "9/2014"}, {"body": "syranide great way testing learned something today smiley react nonnumeric input stays gui value set", "d": "9/2014"}, {"body": "cody react poll dom set value input nt bother setting supposed changed makes react fast even would force outcome would equally poor type would become", "d": "9/2014"}, {"body": "syranide makes sense thank", "d": "9/2014"}, {"body": "zpao sebmarkbage closing quite confident nothing yell think otherwise", "d": "9/2014"}, {"body": "since already include uglifyify transform repeated call uglify wo nt much iirc browserify nt minfy file paths calls production using webpack basically config testing purposes vendor file includes react output file sure exact difference build nt include license header example", "d": "9/2014"}, {"body": "bet transforms run order probably needs reversed envify transform one make sure actually dead code paths specifically dead require code paths uglifyify removes", "d": "9/2014"}, {"body": "nt really issue react going close feel free keep discussing though future might better question stack overflow mailing list", "d": "9/2014"}, {"body": "thanks tips guys take uglifyify", "d": "9/2014"}, {"body": "nt think anything take uglifyify nt know code dead yet ca nt remove run envify", "d": "9/2014"}, {"body": "made jsfiddle source demo test behaves vanilla javascript across android ios cases place something user finger listener get triad new element seems browser bug platforms nt yet tested safari see seems behaving correctly android", "d": "9/2014"}, {"body": "spec user agent intreprets sequence touch events click dispatch mousemove mousedown mouseup click events order location touchend event corresponding touch input contents document changed processing touch events user agent may dispatch mouse events different target touch events \u0ca0\u0ca0", "d": "9/2014"}, {"body": "frustrating sideeffect fix likely fix well closing issue", "d": "9/2014"}, {"body": "already fixed way determine caps lock state unless something suggest otherwise sure definitely unavoidable browser limitation", "d": "9/2014"}, {"body": "quite sure meant mean comment really clear mean varies depending keyboard layout case nt want include printable characters property consistently across browsers normalising event appropriate moment firefox chrome differing behaviour", "d": "9/2014"}, {"body": "refers virtual key code ie id key keyboard technically useless unless know keyboard layout thankfully keyboards likely encounter agree function keys way determine keyboard layout including caps lock state etc literally nothing polyfill printable keys nt agree holding back support according browsers target gain nothing reporting browsers native support report character values complete set keys said current native support mess somewhat broken explicitly ignoring native broken browsers merit nt think game really want play nt think demand justify devcost", "d": "9/2014"}, {"body": "gain nothing reporting unidentified browsers native support report character values complete set keys disagree think gain baseline expected behaviour safely relied upon moment someone could using printable keys even realise works firefox whole reason people use javascript libraries like jquery mootools smooth browser incompatibilities provide good baseline functionality write jquery event handling code mostly sure work way crossbrowser react event system thing providing equal crossbrowser support", "d": "9/2014"}, {"body": "ca nt least large warning help explaining flaky relied upon except function keys", "d": "9/2014"}, {"body": "discussed see example think iswas react roadmap", "d": "9/2014"}, {"body": "sounds great thank", "d": "9/2014"}, {"body": "need component nt dom representation use render function returns return internally translate however recently component without dom representation also children want mounted lifecycle methods trigger correctly sure really undersand composite classes classes definition nt dom representation asking seems ability return multiple components see likely going happen sometime future might hint reading comment pr convinced generally good idea solution probably refactorrethink instead", "d": "9/2014"}, {"body": "want able return something would work similar way return null noscript practically dom representation would accept children mount", "d": "9/2014"}, {"body": "freiksenet asking still return multiple components genuinely nt want mounted dom using react components much like oop good idea react concerned views", "d": "9/2014"}, {"body": "making library using react components nodes scenegraph canvas renderer scenegraph nodes children want return children somehow render mounted react lifecycle methods trigger correctly insert scenegraph see currently return null terminal nodes wrap children spans", "d": "9/2014"}, {"body": "ah yes see point nt think react master branch wellsuited moment look reactart branch react works svg canvas instead dev probably definitive answer", "d": "9/2014"}, {"body": "seen tried model approach first problem bases everything reactcomponent lacks lots features reactcompositecomponent would nice propcontext validation context lifecycle methods lifecycle invariants unfortunately compositecomponent nt separate parts well even compositemixin private exported", "d": "9/2014"}, {"body": "yeah best solution would hacks using dom requires composite component decoupled dom whose lifecycle validation functionality moved mixins", "d": "9/2014"}, {"body": "think sebmarkbage work decoupling mountcomponent related methods might help issue", "d": "9/2014"}, {"body": "likely coming soon", "d": "9/2014"}, {"body": "need dom nodes though may get removed future going close try keep conversation pr much possible", "d": "9/2014"}, {"body": "actually think makes less readable need ask see something like without problematic naming example also prefer use backbone jquery writing", "d": "9/2014"}, {"body": "old issue come believe better left way got one way things concise shorthand somewhat related immutable collections probably time would mean new state nothing situation nt make much sense anymore", "d": "9/2014"}, {"body": "thanks finding chenglou also somebody made work think point going wontfix understand desire also think explicitly consistently typed api readable usable long term something polymorphic like direction tried move code think stick nt strong need really people making transition backbone even asked add think want api reuse like", "d": "9/2014"}, {"body": "different events outside react probably want onmouseleave", "d": "9/2014"}, {"body": "ah oops thanks", "d": "9/2014"}, {"body": "even plugin would helpful", "d": "9/2014"}, {"body": "ca nt reproduce outside react ca nt find related code assuming culprit", "d": "9/2014"}, {"body": "syranide yeah tried looking code limited experience internals react could nt find anything would caused specific thing adding endash although nt looked characters cause well plus nt happen browser thus specific issue seems event type triggered change variety beforeinput event something along lines", "d": "9/2014"}, {"body": "browniefed sorry forgetting indeed correct affects inputs char range appears dispatched easily featuretested necessary positive result received current tick however see obviously bestneat solution could test char way set flag node event received discarded flag set flag cleared could also use clearing flag requires featuretesting potentially fragile could store initial value way node event received discarded current value equals initial value stored value always cleared event received could also use clear stored value use featuretesting seems robust simple unless noop events sets flag cleared super simple robust legitimate event somehow dispatched tick immediately creation lost ca nt imagine howwhy would happen though use featuretesting missed something obvious related cc zpao yungsters", "d": "9/2014"}, {"body": "syranide problem ended comparing event value returning simple workaround exactly crucial thing somewhat annoying", "d": "9/2014"}, {"body": "cc salier", "d": "9/2014"}, {"body": "diagram zpao", "d": "9/2014"}, {"body": "chenglou diagram could shared put online docs page think lot people would appreciate attempt optimisations components", "d": "9/2014"}, {"body": "chenglou zpao news diagram location", "d": "9/2014"}, {"body": "chenglou find good place put", "d": "9/2014"}, {"body": "maybe even tip lol", "d": "9/2014"}, {"body": "different wrapping around constructor probably need adjust hacking system unsupported ways nt think intention supporting case directly cc sebmarkbage case anything add wants reopen think things", "d": "9/2014"}, {"body": "guess real question create component programmatically outside react world anyone might look future point solution javascript var descriptor reactcreateclasscall react spec mixinrender spec descriptor function mixinrender spec descriptor objectdefineproperty descriptor render etc value function staticrender model node var ctor model var component reactrendercomponent ctor node return promiseresolve component spotwelds render onto descriptor function expects receive propschildren call allowed call component instance resolved rendered returned promise api", "d": "9/2014"}, {"body": "basically replace line note called called", "d": "9/2014"}, {"body": "note seems media events dont bubble", "d": "9/2014"}, {"body": "kind related", "d": "9/2014"}, {"body": "good catch updated lot places evolved api obviously missed least one let us know see", "d": "9/2014"}, {"body": "infact nt even need use unhelpful helper imho api simply", "d": "9/2014"}, {"body": "closing nt think anything actionable feel free object", "d": "9/2014"}, {"body": "petehunt recently released repo gss", "d": "9/2014"}, {"body": "exposing hook seem preferable making anything global implications user customizable generally good idea browniefed linked seems preferable simply dissect recreate functionality react imagine would quite possible thing react lose bulk", "d": "9/2014"}, {"body": "browniefed nice nt seen thanks syranide yeah figured necessarily change anyone wants make playing around idea wanted see anyone feedback related ideas plausible ways achieve result thanks", "d": "9/2014"}, {"body": "worth already work generators jsx support asyncawait near future", "d": "9/2014"}, {"body": "think would support somebody else nt vested interest also adding features come perhaps exact pace revamping lot transform stack making easier write new ones aligning regenerator transform work others write easily also possible write pretty simple script jsx transform hands output traceur rest want", "d": "9/2014"}, {"body": "think would support somebody else nt vested interest fair enough thought check case close issue also possible write pretty simple script jsx transform hands output traceur rest want considering traceur parse xml literals jsx parse async functions would surprised simple script mean scanning file xmllooking constructs extracting running jsx injecting content back file running traceur would useful general purpose tool composing jsx arbitrary transpilers could avoid transforming xmllooking things inside strings think immediate needs solved fbesprima merges parsing async functions edit happened minutes ago nice timing", "d": "9/2014"}, {"body": "think immediate needs solved fbesprima merges parsing async functions merged minutes ago", "d": "9/2014"}, {"body": "jsx parse async functions sorry totally right meant general sense considering parts ca nt even parse", "d": "9/2014"}, {"body": "bad nodemodules mixup", "d": "9/2014"}, {"body": "think petehunt inprogress effort make better nt heard anything definitely good idea", "d": "9/2014"}, {"body": "yes intentionally treat differently js basically reading spec definitions explanation undefined value primitive value used variable assigned value null value primitive value represents intentional absence object value think proptypes warning bit confusing seems like allow since intention however equivalent saying type nonnullable means nt really way saying defined value includes maybe nt really know express cc sebmarkbage talks time types could surely form opinion nt already one", "d": "9/2014"}, {"body": "agreed semantically intentional opposition think make sense guard well though nonnullable types eg hack avoid boilerplate could kind guess changing behavior would much breaking change", "d": "9/2014"}, {"body": "true check way possible explicitly allow value valid value could important union type would open confusing scenarios eg renderable required renderable would still allow already allows equally confusing", "d": "9/2014"}, {"body": "logs could help us first assumption always going missing polyfills ca nt say certainty without knowing console says", "d": "9/2014"}, {"body": "errors nt exist use works maybe would good idea include pollyfils section fact needed android lt anyway thanks", "d": "9/2014"}, {"body": "listed polyfills page regexp one functionprototypebind nt exist call also feature detection react script loaded browser warn missing anything nt think much", "d": "9/2014"}, {"body": "reacthandled components want change render output accordingly case want child requests parent remove pass function child called back operations parent edit ugh worked example forgot save jsfiddle nt autosaves like jsbin let know need clarification redo example morning", "d": "9/2014"}, {"body": "thanks reply kimagure know mean children case directly rendered parent children instead building children parent state props parent render method", "d": "9/2014"}, {"body": "render null child effectively removing still exist virtual hierarchy memory retained lifecycle methods still fire etc truly unmount like hoping condition nt want item exist may want restructure data hierarchy parent decide render typically suggest going close since really issue let try keep discussions slightly appropriate platforms mailing list stack overflow", "d": "9/2014"}, {"body": "thank zpao letting know trick sorry nt think issue since sometimes want blind parent nt care holding references children props like mixin strongly inferencing children render method anyway guess conform react design principles thanks lot", "d": "9/2014"}, {"body": "already closed redirected esprima", "d": "9/2014"}, {"body": "see discussion future svg react going close track", "d": "9/2014"}, {"body": "integration benchmarks incredibly hard pull meaningfully single number think imagine would great task benchmarked separately tradeoffs could properly considered animation fluiditystutter etc rather simply seeing sum costly operations ps also letting browsers breathe benchmarks many benchmarks end benchmarking mostly gc enormous pressure rather something meaningful", "d": "9/2014"}, {"body": "kyleamathews back smile", "d": "9/2014"}, {"body": "thumbsup", "d": "9/2014"}, {"body": "thanks sep pm paul shannessy notifications githubcom wrote closed reply email directly view github", "d": "9/2014"}, {"body": "considered feature instead rather close facebookjsx could turn quite useful sequence expressions nt make sense inside allowed sideeffects render sequence expressions useful sideeffects", "d": "9/2014"}, {"body": "sure correct change meaning way js expressions executed based purely views would useful someone wanted emit concatenated content one would use also handling cases differently based context would bring additional unnecessary checks transpiler logic think better add parenthesizes inside", "d": "9/2014"}, {"body": "rreverser saying disagree obviously equal however users could also always access parenthesis would arguably prefer good practice immediately obvious edit intuition", "d": "9/2014"}, {"body": "syranide saying disagree obviously equal js assumption making operators behave equally concatenate output nt feel right changing basic meaning operators users could also always access parenthesis would arguably prefer good practice probably good practice always still good practice reason change language semantics operator meanings everyone wants still use parenthesis inside braces say spec strictly follow spec parse contents inside one possible subclasses", "d": "9/2014"}, {"body": "js assumption making operators behave equally concatenate output nt feel right changing basic meaning operators hmm meaning even necessarily result nt agree changing basic meaning operators something entirely jsxspecific meaning inside define like functions nt see ca nt work way going stand way useless rather unintuitive somewhat intuitive quite possibly useful perhaps preferable opinion even might preferable takes guesswork equation", "d": "9/2014"}, {"body": "hmm maybe anyway created simple straightforward solution parenthesis discussions whether introduce error", "d": "9/2014"}, {"body": "strictly follow spec parse contents inside assignmentexpression sequenceexpression one possible subclasses pretty sure sequence known simply expression es spec included assignmentexpression fact expression exactly sequence assignmentexpressions intentionally chose assignmentexpression instead expression since knew nt supported want support let open task jsx spec discussion interested parties follow along rationale leaving bug open chose either solution decide fix spec correct fix throw syntax error", "d": "9/2014"}, {"body": "pretty sure sequence known simply expression es spec included assignmentexpression right bad sorry want support let open task jsx spec discussion interested parties follow along rationale makes sense created issue tracking facebookjsx personally prefer allow expression inside braces throwing error easily personally throwing error parse expression easily nt feel right prefer less errorprone way would interesting hear thoughts parties though", "d": "9/2014"}, {"body": "cc salier joshduck", "d": "9/2014"}, {"body": "yep remove callsites", "d": "9/2014"}, {"body": "idea", "d": "9/2014"}, {"body": "looking back pre open source history blames yungsters created property whitelist ca nt see good reason added perhaps legacy reason made sense time ca nt find consumers dom components composite components think fine remove", "d": "9/2014"}, {"body": "come across potential use case want update scroll position element want happen conjunction bunch dom writes course set manually dom render update much harder keep unwanted reads happening actually appears work basic level easily gets sync actual scroll position changed user", "d": "9/2014"}, {"body": "lojjic properties set dom node nt expose proper setting done directly node getting sync good reason", "d": "9/2014"}, {"body": "closing favor pr", "d": "9/2014"}, {"body": "seems assume applies reactdomcomponents applies components local relevant parent putting keyed component child nonkeyed parent component put nonkeyed parent component array thus nonkeyed parent components keyed children irrelevant design bug use need attach afterwards", "d": "9/2014"}, {"body": "thanks answer assume reactdomcomponents components come builtin react create saying put keyed component inside nonkeyed parent component put nonkeyed inside component well yes quite understand please correct wrong look dom renders renders dom node component created dom node set outermost component returned method assume normal key outermost tagcomponent rendered listitem also dom node returned wrapping parent pick keys children array example simplified use case hit algorithm best solution child components compute keys really think difficult implement fact think react already expands render method child components parent render method probably something like hood really would difficult pick child keys waiting feedback", "d": "9/2014"}, {"body": "radubrehar concatenated reactids react bases reconciliation works follows view shows final expanded hierarchy returned isolated component instance reusedreordered else old instance unmounted new instance mounted", "d": "9/2014"}, {"body": "radubrehar closing reopen feel incorrect", "d": "9/2014"}, {"body": "descriptor still release allow people switch using appropriate futurelooking code sebmarkbage", "d": "9/2014"}, {"body": "createfactory trying preemptively start fixing ka code upgrading react easier instead synchronously upgrade", "d": "9/2014"}, {"body": "please increase minor version adding something api see issue immutablejs", "d": "9/2014"}, {"body": "thought already createfactory sep ben alpert notifications githubcom wrote createfactory trying preemptively start fixing ka code upgrading react easier instead synchronously upgrade reply email directly view github", "d": "9/2014"}, {"body": "nt seem", "d": "9/2014"}, {"body": "nt need intermediate release keyref greppable probably find uses using grep figured would ok play hardball one always introduced breaking change releases without deprecating first foresee trouble upgrading ka sep ben alpert notifications githubcom wrote key ref descriptor still props release allow people switch using key appropriate futurelooking code sebmarkbage reply email directly view github", "d": "9/2014"}, {"body": "nt big deal", "d": "9/2014"}, {"body": "ping sebmarkbage rush side reminder", "d": "9/2014"}, {"body": "kossnocorp wo nt bumping minor version even add couple small things right patch really minor major version zero initial development anything may change time public api considered stable semver totally understand argument though trying rude letting know taking advantage fuck rules rule api additions transitional purposes updating codebase wo nt break change existing apis though trying interop semver possible sticking slowermoving schedule practical us bump versions rate say browserify get plan much strict real rules", "d": "9/2014"}, {"body": "issue commit related start getting familiar upcoming change", "d": "9/2014"}, {"body": "see", "d": "9/2014"}, {"body": "currently createdescriptor calls function passed involvedversatile", "d": "9/2014"}, {"body": "syranide mentioned nt think take branch want reminding sebmarkbage many places possible", "d": "9/2014"}, {"body": "zpao reminder push ahead", "d": "9/2014"}, {"body": "jsx change work core proposal stateless functions", "d": "9/2014"}, {"body": "cdnjs jsdelivr set pick changes npmbower automatically think folks", "d": "9/2014"}, {"body": "cc syranide jeffmo nt know whitespace parsing jsx works day", "d": "9/2014"}, {"body": "try put span inside option nt work", "d": "9/2014"}, {"body": "bikesheds", "d": "9/2014"}, {"body": "nt mind options listed prefer", "d": "9/2014"}, {"body": "react stops trying scare developers api valid safe reasons use plus already use rails", "d": "9/2014"}, {"body": "rymohr reason scare people actually thinking carefully using afaik dangerous use dangerous exclude safe useful html way invalid risk breaking entire app html also contains anything usersupplied likely enabled serious security issue personally think means justified also justification", "d": "9/2014"}, {"body": "dangerous though passing html user generated markup generated sanitizer first sanitizer wrote sanitizes html makes sure well formed understand operation could dangerous better warn developer way nt make library awkward use log warning message console time used development mode instead", "d": "9/2014"}, {"body": "pretty sure browsers implement reactspecific partly inclined agree implementation well doubleclick represent two consecutive clicks doubleclick action gesture could tripleclick quadrupleclick etc click times fast quadrupleclick doubleclick semantics require specific semantic interpretation safe bet probably implement", "d": "9/2014"}, {"body": "correct browsers fire dblclick first two clicks rapid series nonreact example showing behavior", "d": "9/2014"}, {"body": "slightly surprised makes sense follow native behaviour straightforward enough patch necessary close", "d": "9/2014"}, {"body": "comment specifically sentences also key children passing object object keys used key value", "d": "9/2014"}, {"body": "yep bad", "d": "9/2014"}, {"body": "nt put wrapper desugars nt make syntactical sense jsx compiler page might help need visual mapping said possible desugar instead hard somewhat controversial wo nt implemented near future", "d": "9/2014"}, {"body": "nt think particularly controversial add code complexity nt done yet", "d": "9/2014"}, {"body": "iirc syranide comments", "d": "9/2014"}, {"body": "chenglou hehe brief chat chenglou little ago nt really lean one way moment see lot hidden dangers allowing composite components return multiple components breaks lot intuitive assumptions nt know right good practice usecases would obviously benefit simplicity returning one component means easy reason see could actually render number rows way knowing inspecting whatever composite components returns feel like able return multiple components moves responsibility wrapping components necessary composite component whatever renders composite component component renders composite component rarely knowledge whether wrap composite components whereas children likely knowledge parents perhaps simply case developer responsibility may good usecases look past inevitable misuse sebmarkbage probably comments", "d": "9/2014"}, {"body": "probably never allow syntax implicitly would need wrapper like however even nt work often probably best confusing consuming components child might expand multiple elements really reason nt support right hard implement hopefully able support sometime future probably short term sorry", "d": "9/2014"}, {"body": "affect things like jquery libraries target specific elements something like following html would selected case understand properly", "d": "9/2014"}, {"body": "might help", "d": "9/2014"}, {"body": "thanks filing unfortunately safari nt seem fire events bit info stackoverflow link think call dupe", "d": "9/2014"}, {"body": "asking parent owner case passing components around different consider return b return thispropschildren c owner mounted div div parent b suppose concrete use cases would helpful nt look like uses owner reactrouter right", "d": "9/2014"}, {"body": "thing like access owner always get parent element using combination dom methods nt currently use anywhere branch makes use help find owned use case reactrouter need know whether active order need check see path matches current url client nt big deal since ever one url keep active state fluxstyle store works fine server rendering components serverside may many urls server processes multiple requests concurrently thus keeping active state store nt work solution using activeroutes branch keep active state component instead typical store need able traverse hierarchy find rendered otherwise need pass arg state object around", "d": "9/2014"}, {"body": "sounds like parent hierarchy would work well routes component still top probably best solved contexts still undocumented currently ownerbased soon parentbased per may also worth encouraging use server rendering execution environments completely isolated reactpage", "d": "9/2014"}, {"body": "parent tree give access component instance dom node", "d": "9/2014"}, {"body": "nt proposing particular api could give access instance", "d": "9/2014"}, {"body": "case yes could work react put properties context default derived solely object user provides descriptor edit wondering might use traverse currently owner hierarchy", "d": "9/2014"}, {"body": "idea could routes component return getchildcontext method whatever info link needs link could access thiscontextrouteinfoblah whatever commit message tests gives general idea api withcontext probably going away use getchildcontext instead", "d": "9/2014"}, {"body": "spicyj thank much contexts work beautifully use case closing tada", "d": "9/2014"}, {"body": "big would really make much easier design complex components react", "d": "9/2014"}, {"body": "would add extra attribute data ensure comments unique identities use could use index comment array key rendering dependent order size array", "d": "9/2014"}, {"body": "something pretty broken transitiongroup stuck trying transition two pages first tried csstransitiongroup nt work tried transitiongroup lower level api even first switch page page b none designated functions fire switch back page b page suddenly functions fire twice enter leave functions fire pages kind like original events got saved later got stacked sure anyone else seen bug fairly new nt think happened last point release react", "d": "9/2014"}, {"body": "feels like browser bug ran issue able reproduce issue without react similar setup broken red box travel axis workaround notice transition css rule workaround transitions broken state occurs initial class addition summary workaround would something needs fixed react seems like getting called transition class added looking code makes sense enter transition called lifecycle workaround however pretty straightforward user use lot people probably running issue example docs though update noticed workaround nt work safari credence notion browser issue", "d": "9/2014"}, {"body": "nt think browser bug definitely bug javascript mentioned trying use lower level transitiongroup addon csstransitiongroup requires four callback functions child element enter enter leave leave put four callbacks put thre required code make work used settimeout call callback functions dom firing events nt loop also put consolelog method track functions called well switch b none consolelogs fire change back instead consolelogs get ones first transition ones second transition functions even start order get two sets transitions firing time domain javascript additionally problem identical safari chrome firefox latest stable", "d": "9/2014"}, {"body": "obviously possible multiple issues responding op whose exact symptoms debug might easier see issues related code sample", "d": "9/2014"}, {"body": "add code sample currently issue big project put one jsbin something also mentioning error using csstransitiongroup similar problems think issues lower level transitiongroup", "d": "9/2014"}, {"body": "original error reported howtomakeaturn lack polyfills error actually pointing call invariant repro easily fix simple misuba sure case assume hitting actually running code loading file made test case using invariant module works cases could think could create minimal repro react maybe output value see perhaps used invariant incorrectly", "d": "9/2014"}, {"body": "misuba though using minified build nt even hit line code undefined", "d": "9/2014"}, {"body": "zpao aha problem minifying dev build rather using prebaked one unlikely get time repro week try pick value", "d": "9/2014"}, {"body": "since tapeventplugin nt made publicly available would feel making repo exposing fork tapeventplugin doubletapevent fix publishing", "d": "9/2014"}, {"body": "took liberty separating changes rest react", "d": "9/2014"}, {"body": "appsforartists thanks pull request take look merge soon possible", "d": "9/2014"}, {"body": "middle debugging issue chrome android getting second different element first dispatched particular case second event closing modal first event opened looks user like nothing happens tap logs chrome macos safari ios chrome android interestingly unable replicate issue chromeos touchscreen androidspecific unfortunately nt chromebook handy log extractevents function topleveltype topleveltarget topleveltargetid nativeevent consolelog arguments consolelog event chrome macbook topmousedown img mouseevent callee caller null topmouseup img mouseevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent mouseevent type mouseup target safari ios toptouchstart touchevent null toptouchend touchevent syntheticuievent chrome android toptouchstart img touchevent callee caller null toptouchend img touchevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent touchevent type touchend target topmousedown divscrim mouseevent callee caller null topmouseup divscrim mouseevent callee caller syntheticuievent dispatchconfig object dispatchmarker nativeevent mouseevent type mouseup target button user trying tap element appears first tap give user way go back covers entire screen behind modal soon button tapped", "d": "9/2014"}, {"body": "wrote reduction issue noticed one talking suspect", "d": "9/2014"}, {"body": "appsforartists great job extracting fix separate package anyone interested npm", "d": "9/2014"}, {"body": "appsforartists unit testing using working", "d": "9/2014"}, {"body": "unit testing stuckouttongueclosedeyes less snarkfully using prototype nt tried automated testing", "d": "9/2014"}, {"body": "realistically nt think anything react canshould closing reopen disagree", "d": "9/2014"}, {"body": "chenglou seems track closing reopen disagree", "d": "9/2014"}, {"body": "syranide nt see close issues pr open nt go particular implementation may still want make fix", "d": "9/2014"}, {"body": "spicyj fair enough", "d": "9/2014"}, {"body": "ran recently hacked around using nativeeventexplicitoriginaltarget ff erelatedtarget null though feels pretty fragile would make sense normalize relatedtarget across browsers", "d": "9/2014"}, {"body": "nbergseng interested knowing used solution ran problem today well hacked around using alongside timer sigh", "d": "9/2014"}, {"body": "nbergseng pretty sure correct solution use unless specific usecase", "d": "9/2014"}, {"body": "syranide yes correct solution leoasis stated events nt supported firefox anyway ended taking capture approach seems working well far", "d": "9/2014"}, {"body": "ezequiel kind bubbles ff regardless normalized react nt remember nt right nt normalize", "d": "9/2014"}, {"body": "merged closing", "d": "9/2014"}, {"body": "merged closing", "d": "9/2014"}, {"body": "generate trailing whitespaces good idea", "d": "9/2014"}, {"body": "well means jsxtransformed files nt play nicely jscs rules check whitespace rules", "d": "9/2014"}, {"body": "merged closing issue thanks", "d": "9/2014"}, {"body": "thanks pr marianoguerra spicyj thought issue pr encountering problem rendering svg component svgelement container except chrome spec stating create nodes according context node chromeblink already implemented firefox webkit open bugs think couldshould fixed react better wait implementation every browser", "d": "9/2014"}, {"body": "probably something fix react", "d": "9/2014"}, {"body": "really like unitless values also understand problem something like would make sense maybe could even specify unit like", "d": "9/2014"}, {"body": "jacobrask since would actual ties core could entirely", "d": "9/2014"}, {"body": "npmbower goto source afaik probably preferable maintaining list", "d": "9/2014"}, {"body": "closing nothing actionable moment", "d": "9/2014"}, {"body": "mentioned pr somewhere else perhaps best solution drop instead use special flag properties throws unless want start throwing warningsinvariants instead invalid values could quite nice", "d": "9/2014"}, {"body": "syranide could use string concatenation instead array string concatenation gotten much faster browsers ie faster ie well according string concat vs array join jsperf browser string concat implementation research stack overflow js function cx classnames typeof classnames object var clsnm else return arrayprototypejoincall arguments", "d": "9/2014"}, {"body": "would also love see builtin support focus issue current workaround coffeescript solution solves problem leaves feeling hack otherwise elegant react component thanks react wonderful tool love work", "d": "9/2014"}, {"body": "also use case trying maintain focus single input interact child elements dropdown selct widget given trying manage focus state led confusing bugs browsers really hard understand order execution ended using timeout widget triggered among places onbluronfocus timeout also helps manage focus moves within parent component also need state addingremoving classnames leaving whole thing pretty wonky easy get sync sure best implementation issue setting initial focus maintaining correct input input feel like ended autofocus option agree might weird thing react generalize", "d": "9/2014"}, {"body": "zpao feel like nt actionable without throwing big net agree", "d": "9/2014"}, {"body": "never seen problem hope bug head", "d": "9/2014"}, {"body": "would appear still bug behaviour changed since bug opened callback called soon state changed callback never called", "d": "9/2014"}, {"body": "petehunt thanks explaining case helps others mozilla htmllabelelement page documents dom attribute name corresponds html attribute", "d": "9/2014"}, {"body": "swivelgames way old android stock browsers issues reserved words properties objects much weird sounds android refer reserved word make js engine fail ca nt say specific guess", "d": "9/2014"}, {"body": "var iframe thisrefsiframegetdomnode iframeattachevent iframeattachevent onload function alert local iframe loaded ie else iframeonload function alert local iframe loaded nonie works", "d": "9/2014"}, {"body": "probably apply fix well", "d": "9/2014"}, {"body": "chenglou updates", "d": "9/2014"}, {"body": "encountered issue victorhomyakov found workaround", "d": "9/2014"}, {"body": "manual patching places classes addedremoved helped extent completely algorithm addon rewritten avoid using event observers timeouts simultaneously requires amount time taking account issues easier use addon", "d": "9/2014"}, {"body": "also encountered issue multiple dom objects listening fast sequence changes", "d": "9/2014"}, {"body": "loss ca nt even get testutils load according addons documentation using npm package load react testutils however undefined addons present ended get testutils", "d": "9/2014"}, {"body": "testutils available development mode ie nodeenv production", "d": "9/2014"}, {"body": "wasted bunch time working around trying clear text input box wonder documentation could updated highlight behaviour maybe adding clear button todo app getting start part docs", "d": "9/2014"}, {"body": "reading pretty sure technically correct behavior keep value like association set input uncontrolled simply mutate value regardless consider sequence makes sense technically value would start finish component goes controlled uncontrolled stops controlled resetremount intuitively could make sense become would mean input would figuratively resetremount transitioning controlled uncontrolled ps think mixed controlled uncontrolled probably flaw use one least never transition kind related", "d": "9/2014"}, {"body": "autoclosing reopening update esprima copy via jstransform", "d": "9/2014"}, {"body": "also want use progress bar", "d": "9/2014"}, {"body": "missing working", "d": "9/2014"}, {"body": "perhaps someone willpower trawl get attributes properties might better url purpose sure", "d": "9/2014"}, {"body": "another help would know change sourcecode tests easyer make commit react", "d": "9/2014"}, {"body": "fwiw attributes still applied using style attribute", "d": "9/2014"}, {"body": "syranide mostly automated would madness manually see previous comment merged already thomasdeutsch see previous svg related pull requests said rather figure plan add one one direct previous comment", "d": "9/2014"}, {"body": "textpath need project currently working right hacking nasty solution happy contribute implementation react svg plugin pack", "d": "9/2014"}, {"body": "full svg addon estimates would ship", "d": "9/2014"}, {"body": "already use map return null undefined elements nt want display useful tip added docs", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "moving issue since htmltojsx converter lives entirely project", "d": "9/2014"}, {"body": "coulde also usefull svg namespaced attributes instance xmlns xlink facing problems gt error namespace attributes supported reactjsx xml", "d": "9/2014"}, {"body": "yungsters zpao feel thinking makeover seems many names flagged despite working equally well properties additionally pretty confidently say vs whether property exists used performance purposes sebmarkbage ie nonstandard attributes nonstandard attributes standard attributes possibly also similar possibly would implemented used handful names performance nt concern future agree cost detection negligible simply apply behavior wholesale remove flags", "d": "9/2014"}, {"body": "update", "d": "9/2014"}, {"body": "go bug zpao want faster", "d": "9/2014"}, {"body": "thanks quick fix", "d": "9/2014"}, {"body": "ran issue indeed caused invalid nesting eg", "d": "9/2014"}, {"body": "love perhaps", "d": "9/2014"}, {"body": "going around quite bit failing see issue ios seems following semantics element triggers action right ca nt solve", "d": "9/2014"}, {"body": "merging", "d": "9/2014"}, {"body": "spicyj hero today", "d": "9/2014"}, {"body": "going close may place may want loop back complete investigation initiative", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "moving htmltojsx issues repository", "d": "9/2014"}, {"body": "need issue actually exist wo nt forget switch domain point probably move github pages rush", "d": "9/2014"}, {"body": "done split htmljsxlib reactmagic project get tool npm although nt done much testing nodejs version compared webbased version", "d": "9/2014"}, {"body": "tried fixing related issue flux chat example feedback would appreciated", "d": "9/2014"}, {"body": "test objectfreeze probably actually remove repo nt use also tests could updated use objectisfrozen instead depending throwing happens strict mode supports freezing strict mode fails", "d": "9/2014"}, {"body": "petehunt correct wrong layer approach work dropdown layer would need sit behind dropdown cover every element page issue dropdown exists inside stacking context root document simply wo nt work", "d": "9/2014"}, {"body": "willdady nt explanation code right complex made us reusable selfcontained dropdown component react anchored place dynamically positioned js react direct dom access works intended anywhere within app including popups closes click outside eats click dropdown works browsers react supports unless something would break component seems nt problem", "d": "9/2014"}, {"body": "syranide able solve simply attaching click handler document inside fires simply closes dropdown simply attach handler dropdown element calls", "d": "9/2014"}, {"body": "realistically going get looked might applicable anymore anyway going close", "d": "9/2014"}, {"body": "see comments tests issues", "d": "9/2014"}, {"body": "realistically going get looked might applicable anymore anyway going close", "d": "9/2014"}, {"body": "many longer valid many actually due bad tests making assumptions use strict objectfreeze could rewritten realistically nt going happen going close", "d": "9/2014"}, {"body": "meantime copied reacttouchlib pointed statements right files edit better yet use injecttapeventplugin", "d": "9/2014"}, {"body": "pretty sure never going make happen moving towards static world proptypes using nt really make sense", "d": "9/2014"}, {"body": "couple additional data points demo mentions drop react events document listeners mouse movements got small module put together handing hotkeys reaches bunch react internals order produce synthetic keyboard events document key events providing neat toplevel listener subscribed forcing components manage subscriptions lifecycle seems like reasonable tradeoff", "d": "9/2014"}, {"body": "api hook events component events like glenjamin described produce synthetic events would nice thing thiseventsfromevent events components dom representatoin thiseventsfromeventtarget events targets like document would recommend look baconjs wrappers maybe fromcallback binder would great needs useable declaratively like events inside component render function return outside component think could registered think basically nickthompson syranide saying", "d": "9/2014"}, {"body": "react support level events etc keyboard shortcuts", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "low desire way make work going close", "d": "9/2014"}, {"body": "petehunt know old comment reactanimations repo", "d": "9/2014"}, {"body": "wickynilliams pete removed still find commits", "d": "9/2014"}, {"body": "chenglou thanks", "d": "9/2014"}, {"body": "problem azoerb current hack update directly call later break something", "d": "9/2014"}, {"body": "bypass", "d": "9/2014"}, {"body": "could queuing function like takes closure queued closure returns changed state merged closure could even passed current state argument possibly", "d": "9/2014"}, {"body": "workaround move state react flux stores long keep state react nt problem", "d": "9/2014"}, {"body": "one reasons able get jsx transformed files didnt close terminal window first time installation closed terminal window reopened able transform jsx file located anywhere disk folder possible solution", "d": "9/2014"}, {"title": "support rexporting dependencies", "body": "translated dart", "num": "41", "d": "9/2014"}, {"title": "run dartanalyzer files including tests", "body": "currently dartanalyzer run test files runs separately module generate single file references files across modules run dartanalyzer generated file export export export export", "num": "40", "d": "9/2014"}, {"title": "bare bones change detection", "body": "would like implement bare bones change detection unblock parts system work parallel would love get simple change detection going watch simple properties ie anything sort able implement without need parser class person var age var person new person var pwg new protowatchgroup pwgwatch age var wg pwginstantiate wgsetcontext person var cd new changedetection wg cddetectchanges make test pass", "num": "39", "d": "9/2014"}, {"title": "transpiler handle named parameters", "body": "compile named params last argument map function function f b c return b c compile map keys quoted function function f return b", "num": "38", "d": "9/2014"}, {"title": "support primitive type int", "body": "int code translate int dart code code could number", "num": "37", "d": "9/2014"}, {"title": "travis test platforms", "body": "testing browsers ie safari firefox chrome working testing angulardart platforms saucelabs ref", "num": "35", "d": "9/2014"}, {"title": "performance tests di", "body": "", "num": "34", "d": "9/2014"}, {"title": "port di implementation js", "body": "see js implementation", "num": "33", "d": "9/2014"}, {"title": "migrate parser test suite angulardart angular", "body": "starting revisit whether need full test suite benchmark proof concept may need break subtasks", "num": "32", "d": "9/2014"}, {"title": "implement change detection simple use case", "body": "implement change detection properties needed allow work html compiler proceed", "num": "31", "d": "9/2014"}, {"title": "transpiler add unit tests", "body": "", "num": "30", "d": "9/2014"}, {"title": "implement expression parser", "body": "use angulardart parserlexer starting point minimum able parse simple abc expression eval expression", "num": "29", "d": "9/2014"}, {"title": "transpiler fat arrow functions become", "body": "fat arrow functions js need transpiled dart eg js var fn gt var dart var fn var fail var fn gt var", "num": "28", "d": "9/2014"}, {"title": "transpiler error assertion return value nested functions", "body": "eg method traceur says return value true match arrayofdirectiveclass seems check return value nested function return type method", "num": "27", "d": "9/2014"}, {"title": "transpiler cyclic imports working", "body": "ajs import b b export class constructor new b bjs import export class b", "num": "26", "d": "9/2014"}, {"title": "transpiler improve transpiler tests", "body": "today test transpiler running spec js dart good start room improvement asserting code snippets fail given error message could also really help improving test suite example could generation const constructor dart constructor could body initializer list asserting case fails comprehensible error message would really helpful", "num": "25", "d": "9/2014"}, {"title": "transpiler refactor transpiler", "body": "closed related question today one dartclasstransformerjs transformations compliant original traceur code would probably makes sense darttransformer would main entry point every single transformation defined separate class amp file files hosted codegeneration folder sure gh best place discuss kind thing create room flowdock could easily allow running existing transformers required example hoisting handled today transformer hoistvariabletransformer exists used", "num": "24", "d": "9/2014"}, {"title": "transpiler run transpiler tests", "body": "tbosch last email tests written jasmineguinness executed via karma including tests transpiler find way run transpiler spec latest master generate dart files requiring file main missing correct way post ng mailing list create issue", "num": "23", "d": "9/2014"}, {"title": "transpiler forward declarations seem work", "body": "export class foo foo return new bar export class bar", "num": "22", "d": "9/2014"}, {"title": "transpiler reexport facades", "body": "often times useful able reexport facade types requires support rexporting", "num": "21", "d": "9/2014"}, {"title": "transpiler add sourcemaps", "body": "exception reported stack trace transpiled file code source file need generate source maps debug code need rewrite stack trace original line numbers", "num": "20", "d": "9/2014"}, {"title": "build add travisci", "body": "run following automatically runs get early errors via static type system dart run basic tests ensure js modules loading correct dependencies needs download dart environment", "num": "19", "d": "9/2014"}, {"title": "transpiler support", "body": "", "num": "15", "d": "9/2014"}, {"title": "transpiler support let dart", "body": "let work javascript let dart var needed apply semantically correct transpilation", "num": "14", "d": "9/2014"}, {"title": "build add dartanalyzer build", "body": "", "num": "13", "d": "9/2014"}, {"title": "add library every dart file", "body": "file add header", "num": "12", "d": "9/2014"}, {"title": "transpiler constructor typed field semantics", "body": "allow assignments fields constructor translate assignment constructor initializers make field declaration explicit annotation make dart annotation example class annotation field final name string field final age int const constructor name string age int thisname hello name thisage age annotation usage class foo needs transpile class annotation final string name final int age const annotation string name int age name hello name age age annotation usage class foo", "num": "11", "d": "9/2014"}, {"title": "transpiler force types members variables", "body": "helps rewriting method names built ins like arrays", "num": "10", "d": "9/2014"}, {"title": "transpiler types destructuring arguments", "body": "eg", "num": "9", "d": "9/2014"}, {"title": "transpiler add support generics traceur type", "body": "var x array runtime would call arrayof subtype", "num": "8", "d": "9/2014"}, {"title": "transpiler allow change type names method calls dart transpile", "body": "tbd example", "num": "7", "d": "9/2014"}, {"title": "transpiler support default parameters types", "body": "eg compile component type element element null gt compile type component element element null", "num": "6", "d": "9/2014"}, {"title": "run pubget dartanalyzer build", "body": "pubget buildspecyaml changes dartanalyzer whenever source file changes", "num": "5", "d": "9/2014"}, {"title": "transpiler setup karma run js dart parallel", "body": "", "num": "4", "d": "9/2014"}, {"title": "make todo example work autobootstrap", "body": "", "num": "3", "d": "9/2014"}, {"title": "integrate dartanalyzer build", "body": "implies need angulardart file looks something like library angulardommain export annotationsdirectivedart export annotationscomponentdart export annotationspropertydart export annotationstemplatedart export annotationseventdart export directiveinjectorannotationsdart export directiveinjectordirectiveinjectordart export directiveinjectorquerydart export viewviewdart export viewviewrefdart export viewviewfactorydart export viewviewportdart export viewviewportrefdart nt generate need something like public api", "num": "2", "d": "9/2014"}, {"title": "transpiler show line numbers errors", "body": "eg error writing", "num": "1", "d": "9/2014"}, {"body": "also handle default values named parameters", "d": "9/2014"}, {"body": "assignment force smi mode", "d": "9/2014"}, {"body": "int type right", "d": "9/2014"}, {"body": "language sometimes useful force vm treat value integer", "d": "9/2014"}, {"body": "meant int currently supported traceur original issue imply adding int support traceur also", "d": "9/2014"}, {"body": "exactly would traceur support nt really exist concepttype hood vm bit complicated may see advantages sort microoptimization say declaring type ensure assignments convert smi representation", "d": "9/2014"}, {"body": "hard say whether would hurt would help could interesting want typenames", "d": "9/2014"}, {"body": "section right link ecmascript language types undefined null boolean string symbol number object think traceur could complain asserttypes option enabled x int would interpreted x instance class int", "d": "9/2014"}, {"body": "mean class implementing class would probably problematicnot helpful asserting type int traceur would probably look like certainly doable node nt great ultimately sure assertion super helpful jsland", "d": "9/2014"}, {"body": "support int number assert much need", "d": "9/2014"}, {"body": "would make sense bring mobile browsers early benchmarks pressure", "d": "9/2014"}, {"body": "would certainly vote think emphasizing mobile community want keep honest probably start testing front tue sep caitlin potter notifications githubcom wrote would make sense bring mobile browsers early benchmarks pressure reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "9/2014"}, {"body": "sure much changed since expressionist repo port angulardart expression parser tests work number months ago though may date maybe leverage", "d": "9/2014"}, {"body": "reusing existing", "d": "9/2014"}, {"body": "vicb transforms regular function like think transpiler include keep arrow functions dart writer output instead", "d": "9/2014"}, {"body": "vojtajina think right extent positive include original renames required dart however dart functions could composed single statement always implicit think way go create new transformer based transform concise body", "d": "9/2014"}, {"body": "details arrow functions implicit return defined function body whereas arrow functions dart composed single statement amp always implicit return done fat arrow functions js need transpiled dart original issue convertconcisebody", "d": "9/2014"}, {"body": "see", "d": "9/2014"}, {"body": "need review arv", "d": "9/2014"}, {"body": "lot refactoring needs done saying makes totally sense x separate transformers classes create two compiler classes dart", "d": "9/2014"}, {"body": "selfassigned ticket sure get mean two compiler classes currently single class generate dart according option would purpose different classes", "d": "9/2014"}, {"body": "vojtajina closed issue pushing refactoring fix master think great master build upon probably create new issue refactoring needed thanks", "d": "9/2014"}, {"body": "new architecture way generate dart files however dart sources could inspected via debug button karma specs executed karma thanks tbosch tip", "d": "9/2014"}, {"body": "closed via", "d": "9/2014"}, {"body": "first implementation working needs clean", "d": "9/2014"}, {"body": "vicb please let us know start working", "d": "9/2014"}, {"body": "new syntax agreed class foo final bar name age const constructor age number name string thisbar boolean true thisname string hello name thisage age get transpiled class foo final int age final string name final bool bar const foo int age string name bar true age age name hello name note final fields hoisted initializer colon", "d": "9/2014"}, {"body": "would purpose fields constant constructor could useful nonconst ctor force members second step modifier could probably added automatically visiting class agree probably evaluate effort writing transfomer complex skip intermediate think side notes age probably see think const ctor could body dart transpiled code previous post valid initializer list", "d": "9/2014"}, {"body": "mhevery want fix start working issue probably later today tomorrow", "d": "9/2014"}, {"body": "making fields default constructor sidenotes yes yes", "d": "9/2014"}, {"body": "changed parser eat generics change ast yet see", "d": "9/2014"}, {"body": "made parser aware keyword without adding sth ast yet see better solution could subclass scanner traceur recognize keyword well", "d": "9/2014"}, {"body": "talked mhevery better approach following remove additional syntax make js side run directly without wrappers use sources names types js create configuration file compiler transpiling dart allows following configuration types like rename type change method names another name replace method calls short dart snippet ie inlining done transpiler probably nt need change field readswrites", "d": "9/2014"}, {"body": "change parser mentioned removed", "d": "9/2014"}, {"body": "karma js running see", "d": "9/2014"}, {"title": "vcomponent warning", "body": "use vcomponent vue like nt throw warning warning wrongbad usage vcomponent", "num": "450", "d": "9/2014"}, {"title": "issue data components computed values", "body": "created component data computed value computed value depended data set depended values parent everything works ok nt computed value never rechecked think case depended values set data object component self depended value passed parent used component hard explain problem easily seen example", "num": "449", "d": "9/2014"}, {"title": "vattr", "body": "hi testing new release problems vattr checkbox disableenable input least thats worked previous version stays disabled also writing vattr disabled true false nt changes actually attribute nt even get reflected html", "num": "448", "d": "9/2014"}, {"title": "wrong context computed getters", "body": "sure preference regards submitting issues release candidate hope nt mind filing bug illustrated context ed vm computed property defined using rather context method incorrect specific case follows given array two elements render elements using combined computed getter using object format context getter incorrect second element array vm element looking stack trace noticed double ing method starting look vue code familiarize future hope offer fix addition bug report thanks great library", "num": "447", "d": "9/2014"}, {"title": "use extend get custom class names", "body": "building custom vuecomponents logging instances console satisfying actually different components besides last one sort root get clue class purpose course bad name elements properly get telling would pleasing think want stringify inspect properties would love see gets second parameter better solution course know lot console cosmetic also take things account", "num": "446", "d": "9/2014"}, {"title": "question event view updated", "body": "sorry ask js code requires initialization elements time added like html every time add something collection items need run javascript init new item eg way watch event happen view completely updated tried seems trigger viewdom completely updated thanks", "num": "445", "d": "9/2014"}, {"title": "customised directive template implemented", "body": "eg template nt implemented directive thisparsedirective compilerjs return undefined makes sense however causes error getting directiveslength wonder way handle plugin may disabled nt want change templates", "num": "444", "d": "9/2014"}, {"title": "\u5173\u4e8ecomponent\u7684\u95ee\u9898", "body": "componenta \u4f9d\u8d56 componentb \u4f9d\u8d56 componentc \u8fd8\u5e0c\u671b\u80fd\u7c7b\u4f3c\u8fd9\u6837\u7528", "num": "443", "d": "9/2014"}, {"title": "value attribute input bound correctly internet explorer", "body": "using vue populate value attribute input template value undefined null empty string internet explorer leaves mustache template value see", "num": "442", "d": "9/2014"}, {"title": "slow performance vrepeat semilarge data sets", "body": "using version using vrepeat iterate element array performance quite slow compared raw javascript jsfiddle live code click vuejs use vuejs raw js use raw javascript open js console see performance timings machine chrome safari vuejs takes approximately js takes approximately ie js times faster vue", "num": "441", "d": "9/2014"}, {"title": "object trigger view update child array changed", "body": "array object mutated object holding array get view updated html myobjmyarrinobj myobjmyarrinobj myobj myobj myarr myarr", "num": "440", "d": "9/2014"}, {"title": "vue throttle debounce feature", "body": "", "num": "439", "d": "9/2014"}, {"title": "von seems able bind events names containing periods", "body": "bootstrap fires events names like vue complains error parsing expression encountering something like", "num": "438", "d": "9/2014"}, {"title": "vue uncaught typeerror read property vue null", "body": "getting error computed dependencies adding removing rows table incremented grid example search pagination debugger points method", "num": "437", "d": "9/2014"}, {"title": "api manually determining computed dependencies", "body": "", "num": "436", "d": "9/2014"}, {"title": "vrepeat accept integer parameter", "body": "would render three times content", "num": "435", "d": "9/2014"}, {"title": "grid example work vue", "body": "", "num": "434", "d": "9/2014"}, {"title": "changes bubble anymore", "body": "simple example illustrate issue js new vue el documentgetelementbyid somediv data function return pos x ready function", "num": "433", "d": "9/2014"}, {"title": "computed", "body": "", "num": "432", "d": "9/2014"}, {"title": "vue next created compiled ready events losing context", "body": "use component view initial load works normally navigate another page thus another component come back first logic inside created compiled ready events delegating another function socketio loses context error uncaught typeerror set property someproperty null example", "num": "431", "d": "9/2014"}, {"title": "confused vue workflow singlepage apps", "body": "using simple components views like indexhtml emailanonymous id last visit purchases id lastvisit purchases visitors visitors property belongs root vm updates based socketio answer part working nt update component html root visitor changes", "num": "430", "d": "9/2014"}, {"title": "use new keepalive feature", "body": "", "num": "429", "d": "9/2014"}, {"title": "vue next clashes use", "body": "charts break vue next due", "num": "428", "d": "9/2014"}, {"title": "replacing prototype setting objects", "body": "found weird behaviour vue version gt object prototype get replaced", "num": "427", "d": "9/2014"}, {"title": "event vrepeat rendering", "body": "could apply thirdparty lib rendered collection", "num": "426", "d": "9/2014"}, {"title": "persistent vview", "body": "would nice single page apps option persistent vview would recreated every time go route", "num": "425", "d": "9/2014"}, {"title": "components inheriting root data", "body": "something like component used vview would expect anytime parentvisitors changes component visitors array would change nt would right way", "num": "424", "d": "9/2014"}, {"title": "anyone success using vue datatables", "body": "initial rendering works try use datatables search pagination shows table row uncompiled repeat directive", "num": "423", "d": "9/2014"}, {"title": "npm next distribution tag", "body": "release several api breaking changes rewrite may published npm convenience opt kicking tires", "num": "421", "d": "9/2014"}, {"title": "repaint transitions affecting performance", "body": "im seeing quite noticeable performance degradation transitions switching forced full tree layout happening frame transitions think try debugging tonight although looks using transition animation refactor see get back", "num": "420", "d": "9/2014"}, {"title": "allow single token using", "body": "attribute multiple tokens far parser concerned use delimiter example work token two", "num": "419", "d": "9/2014"}, {"title": "reactlike inheritance model", "body": "using react enjoyed inheritance model times want write parts components similar would ideally like share things two components ex maybe share data members functions amp behaviors thought would make sense something like vue already written code handle vue simple function extends input dictionary vue takes input supports simple inheritance model direct functions none methods computed example usage thoughts would happy contribute code", "num": "418", "d": "9/2014"}, {"title": "parse error android", "body": "using vuejs phonegap get error eweb console syntaxerror parse error file file error srcmainjs line code extendedvmsuper parentvm guess error related keywords reserved js case super change line extendedvm super parentvm works recomendation change super another synonymous like parent want change code make pull request think", "num": "416", "d": "9/2014"}, {"title": "input updating watch", "body": "hey sure making small mistake sorry throwing issues nt know else ask got input field representing pin field get characters currently wanting see input empty end goal write something verifies pin either redirects user another page invalid shake pin field empty input codepen trying get input empty hit characters add tag output value like display emptied value input nt updating idea wrong", "num": "415", "d": "9/2014"}, {"title": "enforce hyphenated component name requirement", "body": "problem registered component names flat lead collisions large applications way hack around prepending names components category html html requesting officially supported component namespacing feature secondarily looks like break way currently create views dynamically would appreciate suggestion remedy", "num": "414", "d": "9/2014"}, {"body": "thanks bug compilation logic fixed", "d": "9/2014"}, {"body": "issue use overwriting component initial parent object nt want overwrite entire need pass individual properties using also longer necessary manually list dependencies computed properties", "d": "9/2014"}, {"body": "ok thank", "d": "9/2014"}, {"body": "thanks catching fixed", "d": "9/2014"}, {"body": "thanks catching bug computed property setup procedure mutating original option object causing pollute instances fixed", "d": "9/2014"}, {"body": "thing bugging well made work like edit changed option make less confusing js var mycomponent vueextend name mycomponent options vuecomponent mycomponent options constructor name logged console", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "use inside callback trigger next batch rendering also item vuecomponent use hook", "d": "9/2014"}, {"body": "thanks seems worked", "d": "9/2014"}, {"body": "prints warning using nonminified version longer throws error", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u6700\u540e\u90a3\u6bb5\u4ee3\u7801\u770b\u4e0d\u592a\u61c2\u4f60\u60f3\u505a\u4ec0\u4e48", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u554a", "d": "9/2014"}, {"body": "\u5c31\u662f\u8bf4\u5df2\u7ecf\u6709\u89c6\u56fe \u7528vueextend \u51fa\u6765\u7684component\u600e\u4e48\u6837\u548c a\u5173\u8054\u8d77\u6765", "d": "9/2014"}, {"body": "\u548c vue", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "resolved one thing note using mustache binding attribute nt create twoway binding sets initial value use twoway bindings", "d": "9/2014"}, {"body": "thanks although nt need two way binding particular instance work correctly using vmodel looking forward release thanks effort", "d": "9/2014"}, {"body": "way evan want say thanks great job framework quite enjoyable far compared angularjs", "d": "9/2014"}, {"body": "tested vue see performance improvement strangely trying use onetime interpolation feature working example", "d": "9/2014"}, {"body": "oh actually messed result jsfiddle still using even slower onetime interpolation nt help much", "d": "9/2014"}, {"body": "well obviously going slow meant complex markup creating vue instance every repeated item setting data binding essentially paying upfront cost make consequent updates faster let say complex list takes render raw js takes modify one item array update takes like single data binding update raw rendering feel janky imagine typing filtering list perf largely cssbound raw rendering jank build every keystroke become much noticeable making tradeoff take longer render initially faster update later argue applications opposed contentcentric websites like news media instant feedback user input much important initial rendering hand almost every databinding library super slow test case compared raw rendering vue already among fastest although could still improved slower particular case repeated markup simple repeated lists complex templatedata general faster", "d": "9/2014"}, {"body": "reason markup simple boiled app slow performance test case basically swapping hundreds thousands objects user changes levels state app switching level level level level reload state objects causing noticeable delay click vuejs link jsfiddle multiple times see delay alternatively way turn data binding vrepeat array basically constant triggering view updates based array changes necessary", "d": "9/2014"}, {"body": "static rendering think simply example", "d": "9/2014"}, {"body": "right way disable binding like making custom emitter custom function data", "d": "9/2014"}, {"body": "hmm think easiest thing write custom directive bind array manually assemble markup directive update function", "d": "9/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "know probably related angular debounce feature unlike angular vue nt digest whole scope single update single update really single update vue synchronous changes batched anyway really necessary debouncethrottle anything", "d": "9/2014"}, {"body": "nt want trigger property updating every keypress event throttle every like search feature grid jsfiddle", "d": "9/2014"}, {"body": "feel belongs userland something needed usecase project really vue general", "d": "9/2014"}, {"body": "ayamflow agree plugin though", "d": "9/2014"}, {"body": "something like vueplugin hello function name consolelog hello name var sayhello vueuse hello sayhello bob", "d": "9/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "weird theoretically nodes always comment ref node end need details setup", "d": "9/2014"}, {"body": "closing could nt reproduce", "d": "9/2014"}, {"body": "would need", "d": "9/2014"}, {"body": "take look enhanced grid example search feature fired lot times type something", "d": "9/2014"}, {"body": "oh way nt know vue bug try filter search param sort nothing happens", "d": "9/2014"}, {"body": "adding set function computed property filtered data see triggers change inside get function nt update new value sorted clicking header", "d": "9/2014"}, {"body": "observations accessing well note every time access computed property calling evaluation function search param returning new array every access longer works sorting returned copy longer need list possible dependencies computed property functions", "d": "9/2014"}, {"body": "maybe vue computed properties way peek value without triggering dependencies avoid behavior sort latest array data nice", "d": "9/2014"}, {"body": "ok finally understood rewrote grid component issue invalid gon na close watcher serves well manually determine dependencies", "d": "9/2014"}, {"body": "would benefit something like currently done lameo hack creates array n empty elements purpose repeating", "d": "9/2014"}, {"body": "yeah would handy feature include", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "found behavior changed pass something like component nt merge existing data properties replaces", "d": "9/2014"}, {"body": "cool revisit examples finish testing currently close", "d": "9/2014"}, {"body": "yup due internal changes default shallow watch made updates force deep watch", "d": "9/2014"}, {"body": "thought true end force initial callback give try maybe something like angulars watchgroup watchcollection would solution way quick responder many thanks affort really like work", "d": "9/2014"}, {"body": "thanks api still slightly flux release feel deep watching frequent use case immediate callback invocation third argument deep watching fourth immediate callback", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u4f60\u5bf9 computed computed \u662f\u4e00\u4e2a get", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u7248\u672c\u91cc\u9762 computed \u4f60\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u91cc\u9762\u5728 computed component \u7684 ready", "d": "9/2014"}, {"body": "use view destroyed switch another view switch back two socket handlers old one referencing already destroyed instance set null using want clean socket handlers view hook", "d": "9/2014"}, {"body": "keepalive works", "d": "9/2014"}, {"body": "event view components keepalive navigated", "d": "9/2014"}, {"body": "use attached wed sep pm alisson cavalcante agiani lt notifications githubcom wrote event view components keepalive navigated reply email directly view github", "d": "9/2014"}, {"body": "worked way detect inside view component active one", "d": "9/2014"}, {"body": "well currently always check", "d": "9/2014"}, {"body": "way since spa tested many routing libs one best", "d": "9/2014"}, {"body": "nice api looks pretty clean feels like express", "d": "9/2014"}, {"body": "directives fully tested yet things break stage probably try production stuff", "d": "9/2014"}, {"body": "actually thanks raising issue found pretty stupid bug observer implementation fixed", "d": "9/2014"}, {"body": "cool", "d": "9/2014"}, {"body": "html simple", "d": "9/2014"}, {"body": "ok replaced every source code related vue augmenting objects behavior nt happen", "d": "9/2014"}, {"body": "show usage example", "d": "9/2014"}, {"body": "vue next js somewhere could use fiddle", "d": "9/2014"}, {"body": "finally simulated mouseover chart see console", "d": "9/2014"}, {"body": "behavior nt happen nt assign chart thischart", "d": "9/2014"}, {"body": "set work surprised works though since underlying object augmentation mechanism largely", "d": "9/2014"}, {"body": "disadvantages setting flag false", "d": "9/2014"}, {"body": "slightly slower object observation practice going produce noticeable perf issues unless data structure huge like objects", "d": "9/2014"}, {"body": "one thing note providing default data set observed nt see need observe chart object remove default data also work", "d": "9/2014"}, {"body": "vue swaps observed data object property faster method augmentations turn behavior", "d": "9/2014"}, {"body": "turn behavior would nice thanks clarification", "d": "9/2014"}, {"body": "apply lib hooks", "d": "9/2014"}, {"body": "angular used check custom directive event could probably something better fiddle", "d": "9/2014"}, {"body": "nt work", "d": "9/2014"}, {"body": "could provide example using vuenexttick", "d": "9/2014"}, {"body": "thelinuxlich", "d": "9/2014"}, {"body": "thanks", "d": "9/2014"}, {"body": "yes checkout vcomponent keepalive changes fri sep pm alisson cavalcante agiani lt notifications githubcom wrote would nice single page apps option persistent vview would recreated every time go route reply email directly view github", "d": "9/2014"}, {"body": "great gon na close issue", "d": "9/2014"}, {"body": "looks like really want use vwith set visitors visitors bind parent data view data specified pm alisson cavalcante agiani wrote something like component used vview ready function thisvisitors parentvisitors would expect anytime parentvisitors changes component visitors array would change nt would right way reply email directly view github", "d": "9/2014"}, {"body": "since using vview apparently nt work together vwith would hard components wants different property root vm", "d": "9/2014"}, {"body": "gone work component eg html var root new vue el div data aaa b bbb view components template msg replace true b template msg replace true", "d": "9/2014"}, {"body": "also try hook instead", "d": "9/2014"}, {"body": "nt worked root vm updated component nt receive change", "d": "9/2014"}, {"body": "way possible access parent root properties inside component templates like", "d": "9/2014"}, {"body": "yes work obviously recommended", "d": "9/2014"}, {"body": "working", "d": "9/2014"}, {"body": "least vview", "d": "9/2014"}, {"body": "try without putting template", "d": "9/2014"}, {"body": "closing fixed", "d": "9/2014"}, {"body": "hard vue plugins like assume full control dom probably better use whole table let plugin handle everything", "d": "9/2014"}, {"body": "sad hear past datatables integration knockout easy", "d": "9/2014"}, {"body": "generally avoid using vue jquery plugins really depends plugin wants manipulate dom ca nt help without seeing code", "d": "9/2014"}, {"body": "still pretty unstable moment install directly github", "d": "9/2014"}, {"body": "hoping add much overhead thinking points development stable others wish cut made npm points simply using next branch crap shoot stability reason asking opportunity end users projects already using get codebases converted changed api", "d": "9/2014"}, {"body": "yeah problem without enough test coverage nt think current codebase ready tirekicking yet probably remaining bugs moment coverage gets decent probably release people try", "d": "9/2014"}, {"body": "thank precisely asking", "d": "9/2014"}, {"body": "hey thanks noticing trying changes transition systems seems due forcelayout called synchronously instead next frame likely revert change tue sep pm prater notifications githubcom wrote im seeing quite noticeable performance degradation transitions switching forced full tree layout happening frame transitions think try debugging tonight although looks using forcelayout transition animation refactor see get back reply email directly view github", "d": "9/2014"}, {"body": "would mind sharing usage scenario eg many elements transitioned css properties transitioned complex transitioned element", "d": "9/2014"}, {"body": "dynamic binding im triggering animations transition using classes transitioning transform using roughly elements fill viewport hth", "d": "9/2014"}, {"body": "single element reverted branch trigger transition next frame let know fixed issue", "d": "9/2014"}, {"body": "multiple elements inside transitioned element ensured behavior ones transitioned give change shot minutes sep evan notifications githubcom wrote single element reverted next branch trigger transition next frame let know fixed issue reply email directly view github", "d": "9/2014"}, {"body": "see commit next", "d": "9/2014"}, {"body": "commit use latest commit", "d": "9/2014"}, {"body": "seems bit better however think found another bottleneck element removed transition repaints whole tree happens addremove process removed element case still animating appropriate wait callback remove element need animation handler", "d": "9/2014"}, {"body": "venter sep pm evan notifications githubcom wrote sure understand correctly mean enter leave transitions different durations reply email directly view github", "d": "9/2014"}, {"body": "visibly affecting framerate think might better use css animations make sure animations duration simulate delay animations", "d": "9/2014"}, {"body": "hand ca nt seem reproduce visible difference comparison see still visible degradation commit", "d": "9/2014"}, {"body": "follow reason im using token class behavior change sectionname data would persist child component would transition two components possibly scope changes data value updated transition happening styles affected token fix", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "yes considered could probably option code actually already implemented need provide option utilize", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "spec reserved keyword used identifier eg identifiername eg latter valid error thrown android phonegap uses stock android browser webview container incorrectly implements reserved keyword parsing logic hand probably change something like old browser compatibility", "d": "9/2014"}, {"body": "ah perfect sorry know agree change something like super tested vue android excellent option create mobile hibrid apps memory usage better use ionic angular problem found issue", "d": "9/2014"}, {"body": "going hate haha found next branche another keywords issue keyword file srccompilecompilejs line var def optionsdirectiveswith", "d": "9/2014"}, {"body": "throw error android", "d": "9/2014"}, {"body": "yes hate android", "d": "9/2014"}, {"body": "oh well use bracket syntax keywords lol", "d": "9/2014"}, {"body": "test passed close issue", "d": "9/2014"}, {"body": "somewhat related highly recommend catching types things", "d": "9/2014"}, {"body": "cecchi thanks nt like code style enforced machine", "d": "9/2014"}, {"body": "somewhat shot dark handler inside method evaluates handler set latter would evaluate outdated value would also explain sample value set continue enter characters resumes previous value judging console messages asd asdf asdfj asdfjk asdfjkl asdfjklm asdfjklmn edit codepen additionally log value watch callback see despite ue passed watch callback still retains previous value supports theory looking model directive seems indicate updates handled asynchronously would explain see locking mechanism checked would lock calling within another call property seems like use case designed originally seems somewhat dangerous reupdate property watcher callback without structured update process something like angular would really useful discard pending callbacks outdated values tldr sure bug inherent tradeoff slim efficiency vue seems go might great idea synchronously update property property callback vue lacks explicit digest cycle directives handle updates asynchronously tried codepen wrapping behavior desire", "d": "9/2014"}, {"body": "watch callback fired callback handles syncing user input data overwritten user input typically use get around", "d": "9/2014"}, {"body": "gotcha thanks much help vue really awesome nice work", "d": "9/2014"}, {"body": "part reason component names must contain hyphen personally think works fine current usage work fine", "d": "9/2014"}, {"body": "interesting never picked hyphen requirement documentation perhaps warning console test usage get warning removed warning pulling static prefix inside html", "d": "9/2014"}, {"body": "found documentation avoid naming collisions native elements stay consistent custom elements specification component id must contain hyphen usable custom tag interpreted applicable since nt using custom tag syntax application", "d": "9/2014"}, {"body": "ahh trying already yeah recently reverted warning got work officially personally nt think namespaced components necessary idea could work interested hear", "d": "9/2014"}, {"body": "yes best stay ahead breaking changes branch application hoping future versions break one thing time hierarchy components purpose best practice thing changed name issue making hyphenation hard requirement feature enforcement via warning making documentation explicit necessary", "d": "9/2014"}, {"body": "reason nt think namespacing necessary larger applications want avoid registering components globally instead use module system require needed components defining application component eg way component encapsulates components needs name whatever like without worrying conflicting names", "d": "9/2014"}, {"body": "application mixture truly global components views registered front components specific one view registered within local modules earlier comment thought intent components require hyphenated names exporting component configuration module registering globallylocally hyphenatedplain easy change done case case basis hyphen merely optional initially believed documentation close issue", "d": "9/2014"}, {"body": "hyphen required wish use component form pseudo custom elements eg", "d": "9/2014"}, {"body": "great docs already read thank engaging clarifying", "d": "9/2014"}, {"body": "hi still availabledoable also another project ill develop vuejs comes", "d": "9/2014"}, {"body": "take look using next branch get idea ko example differentiation folder item new example using approach", "d": "9/2014"}, {"body": "thanks evan", "d": "9/2014"}, {"body": "thanks reporting issue behaves differently fires events event fixed", "d": "9/2014"}, {"body": "nt close issue", "d": "9/2014"}, {"body": "closing inactivity", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "good commit reference thanks addition", "d": "9/2014"}, {"body": "oops nt know pasted wrong commit lol", "d": "9/2014"}, {"body": "hi thinking combine server side client side rendering bindings inject additional processing jade slm simple template template function produce parts rendered html injected marks html comments special format index binding indicated binding next sibling dom element array serialized bindings data used render view client process look like find marks find needed nodes marks attach bindings nodes trigger events needed since vue supports finding marks use treewalker js function getcommentnodes containernode var treewalker documentcreatetreewalker containernode nodefiltershowcomment null false var comments treewalkernextnode commentspush treewalkercurrentnode return comments consolelog getcommentnodes documentbody reduce parsing time find markers simple format content show page loaded question doable side start implementing side examples html index parentmsg childmsg", "d": "9/2014"}, {"body": "interesting idea thoughts would work text bindings right vue still walk whole tree directives text parsing actually relatively cheap part vue rendering procedure ideally want reuse template server client concept marking bindings comment nodes definitely idea worth exploring", "d": "9/2014"}, {"body": "would work text bindings right vue still walk whole tree directives provide simple example text binding illustrate idea complex like ifs repeats even components possible yes ca nt dom operations server side bindings work html ast binding require dom delayed processed client main idea try produce full valid terms content html attach bindings provide dynamic behavior nt research vue internals yet know bindings complex give example could try illustrate binding could work text parsing actually relatively cheap part vue rendering procedure constructing dom slow part right ideally want reuse template server client slm compile template functions require small runtime helpers escaping attributes merging unzipped yes templates reused server client also slm quite small unzipped compile templates client side yet working", "d": "9/2014"}, {"body": "hi problem released", "d": "9/2014"}, {"body": "join issue planning release new version", "d": "9/2014"}, {"body": "closing still think ing array proper way handle watcher created hook always fire dom updated reflecting array change", "d": "9/2014"}, {"body": "less useless include well give idea html want avoid adding svg tags take least following graphics elements structural elements see important groups firstclasscompanion", "d": "9/2014"}, {"body": "ah thanks indus nt really worked lowlevel svg much mostly libs really helpful", "d": "9/2014"}, {"body": "well probably late reply missing comma first line p", "d": "9/2014"}, {"body": "solution coming point", "d": "9/2014"}, {"body": "see vmodel select param sat sep pm rangermauve notifications githubcom wrote solution coming point reply email directly view github", "d": "9/2014"}, {"body": "cool reference docs", "d": "9/2014"}, {"body": "one problem options attribute nt separate value displayed screen use content tag localized string representing actual value option far understand new feature takes array options gets used value content", "d": "9/2014"}, {"body": "hmm yeah think improved give example desired markup", "d": "9/2014"}, {"body": "practice array items gets changed based localization items objects contain code might look like expected behavior items array might changed runtime language preferences changed retain correct value despite displaying different string structure might best allowing distinction well current behavior would useful", "d": "9/2014"}, {"body": "rangermauve check", "d": "9/2014"}, {"body": "perfect", "d": "9/2014"}, {"body": "following tested working html value vals value var vm new vue el demo data keys foo bar vals created function lt thiskeyslength var k thiskeys thisvals add k test", "d": "9/2014"}, {"body": "closing due inactivity check currently proof concept", "d": "9/2014"}, {"body": "changing data within ready callback help case", "d": "9/2014"}, {"body": "working also side note actually reference group without data working inside vm actually set", "d": "9/2014"}, {"body": "nt know thanks", "d": "9/2014"}, {"body": "uping ca nt make work implemented get nan fiddle", "d": "9/2014"}, {"body": "reason interpreted minus calculation seems use case still broken work intended though", "d": "9/2014"}, {"body": "oh nice catch yeah nt work either fiddle workaround use manually set child vm", "d": "9/2014"}, {"body": "closing discussion ifelse scenario still perfectly resolved think deal breaker", "d": "9/2014"}, {"body": "vue data method computed propeties nt namespace data method name refer directives", "d": "9/2014"}, {"body": "data methods name think properties object", "d": "9/2014"}, {"body": "appear vue flat method tree function nested inside json object wo nt accepted expecting nested tree way rivetjs data controller way organize data model amp controller similar structure avoid hassle setting separate component small projects", "d": "9/2014"}, {"body": "main reason flat structure guaranteed called owner vue instance context want nest functions called different contexts", "d": "9/2014"}, {"body": "significant blocker us using vuejs privileged environment firefoxos apps sandbox workaround still really sucks personally love see cspcompliance implemented guessing blocker projects", "d": "9/2014"}, {"body": "usecase package vue manually javascript parser needed modifying couple places vue uses stringtofunction conversion prettiest implementation check", "d": "9/2014"}, {"body": "cecchi thanks awesome chance consider merging implementation using", "d": "9/2014"}, {"body": "jtremback working vueresource", "d": "9/2014"}, {"body": "want select component used listitem considering one properties type stringproperty component name registered seems work possible types list would would ok think types like changed therfore translatedmapped computed valid componentnames", "d": "9/2014"}, {"body": "indus use filter eg however might work", "d": "9/2014"}, {"title": "asynchronous validation", "body": "would usefull able validate models asynchronously model needs serverside validation asynchronous validations validation ca nt use backbone validate method anymore would useful asynchronous validation", "num": "3323", "d": "9/2014"}, {"title": "bump bower minor version", "body": "backbone bower version nt bumped months missing rather important code contributions like one wasted two hours working creating work arounds realize old backbone code", "num": "3322", "d": "9/2014"}, {"title": "project still alive", "body": "many issues getting ignored nothing new seems getting done recently project still alive invested lot time learning framework seems receiving much attention developers lately maybe considering prs little less cynicism could bring life cheers", "num": "3321", "d": "9/2014"}, {"title": "collection sync", "body": "trouble understanding utility collection sync firstly give params else throws redherring errors like need specify url give params first method nt make sense want save collection method needs create update depending model new yet documentation states uses backbonesync persist state collection server also would nice model save documentation stated work unless server responds updated record response appear enough wo nt", "num": "3320", "d": "9/2014"}, {"title": "incorrect documentation collectionremove", "body": "documentation collection remove method says remove model array models collection returns implying removed models returned actual code returns reference collection removed models", "num": "3317", "d": "9/2014"}, {"title": "backbone prototype inheritance", "body": "correct way inheritance want single template method views nt defined way know default extend makes copy object would ancestor method even would add new method ancestor extend would method child right rewritting backboneview method extended yeah knew write lib inherit custom view method backbone doese nt suport prototype inheritance nt wastage memory every single copy actually nt got yet code example", "num": "3315", "d": "9/2014"}, {"title": "enable sourcegraph", "body": "want use sourcegraph code search code review backbone project maintainer needs enable set webhook code uptodate could please enable backbone sourcegraph going clicking settings take seconds thank", "num": "3314", "d": "9/2014"}, {"title": "parse collection reset", "body": "hello parse method model create collection model fetch server collection internaly invokes method works fine use reset pass bootstrapped collection models collection create parse called bug missed something", "num": "3313", "d": "9/2014"}, {"title": "suggestion collection adds event", "body": "near end sending events sending event allows listener receive single bulk event full array models added collection", "num": "3312", "d": "9/2014"}, {"title": "selendroid unable proceed login application", "body": "using selendroid mobile android automationi able login appafter click sign going application server status status value supportedapps appid mainactivity ioselendroidandroiddriverwebviewactivity basepackage ioselendroidandroiddriver appid mainactivity comcropexappslivealertsactivitiessigninactivity basepackage comcropexappslivealerts os arch name windows version build browsername selendroid version supporteddevices screensize platformversion model emulator false code test public void selendroidtest throws exception selendroidcapabilities capa new selendroidcapabilities capasetplatformversion capasetemulator false driver new selendroiddriver capa threadsleep wait new webdriverwait driver driverfindelement byid username sendkeys shivaram threadsleep new actions driver sendkeys selendroidkeysback perform driverfindelement byid password sendkeys threadsleep new actions driver sendkeys selendroidkeysback perform driverfindelement byid signin click threadsleep driverfindelement byid logout click driverquit", "num": "3311", "d": "9/2014"}, {"title": "pushstate working parameters", "body": "problem pushstate enabled go nothing works get load errors console use url hashtag ie url fine forgetting something console get errors saying uncaught syntaxerror unexpected token lt line one", "num": "3310", "d": "9/2014"}, {"title": "add version minified script", "body": "makes easier take inventory minified local scripts", "num": "3309", "d": "9/2014"}, {"title": "arguments view events", "body": "reason view events hash nt allow passing arguments recently working code found creating several callbacks events similar googling dry found others problem common response make one event callback large switch statement checking etarget handling response appropriately seems clumsy solution would much easier way pass arguments callbacks defining events hash would possible define one function different events call different arguments", "num": "3308", "d": "9/2014"}, {"title": "collectionreset modifiescorrupts input options", "body": "collection reset options options since going modify options object inspect options options clone options currently options object become corrupted handlers also responding reset event handlers also passing options another collectionreset call", "num": "3306", "d": "9/2014"}, {"title": "event parameters", "body": "hello trying write backbone react mixin bit eccentric want full control whole lifecycle order able implement shouldcomponentupdate proper way problem backbone sends reference collection add event triggered one example might events similar problems since references byref event synchronous get valid representation collection instead get collection items added given time add goes faster triggering events ie fetch list items get following back listener would breaking principles asking copy collection instead reference kind regards martin", "num": "3305", "d": "9/2014"}, {"title": "swift interface", "body": "hi everybody new meaning idea belongs please tell something wrong ok question program interface swift mean know drag buttons stuff interface connect button code wrote mean let say put one slidebuttons interface connect button boolean variable hope someone answer way way complicated post could post email chat explain least something like", "num": "3304", "d": "9/2014"}, {"title": "listento nt work includes fix", "body": "listento get undefined error jquery looking listento line line objimplementation however according jquery documentation overriden methods none matching call reference events selector data handler events selector data believe correct way calling method follows objimplementation listento began working", "num": "3303", "d": "9/2014"}, {"title": "backbone maintained", "body": "backbone really maintained core developers worked future backbone", "num": "3302", "d": "9/2014"}, {"title": "jquery deps", "body": "hey jquery hard deps bb", "num": "3300", "d": "9/2014"}, {"title": "uncaught typeerror read property match undefined", "body": "hey guys getting lot errors soon page loads uncaught typeerror read property match undefined line inside method backbone underscore marionette jquery google chrome mac also using browserify help ideas incompatible versions let know information provide thanks", "num": "3299", "d": "9/2014"}, {"title": "new help ask repository downloaded", "body": "hi please give bad english question bad shape new downloaded repository link question ask question repo fork nt form ask question leave comment help please great thanks best regards raha", "num": "3298", "d": "9/2014"}, {"title": "nested set change event triggers last event incorrect value listener", "body": "situation two listeners backbone model property first listener changes listened property triggered would expect final event triggered callbacks latest value model argument second listener final callback triggered original value though example fiddle look logs final callback second listener triggers value callback argument actual final value problem seems like may related issue options passed correctly nested change events", "num": "3296", "d": "9/2014"}, {"title": "collection fetch data query option passing actual request call", "body": "code pretty simple collection fetching collection date argument code works run backbonejs console result app wo nt allow pass date argument give warning error result query attached upgraded underscore backbone local environment result blocking fetch method collection pass query parameters tried ajax method working data options url different using couchdbbackbone connector", "num": "3295", "d": "9/2014"}, {"title": "adding option removing model collection", "body": "feature request add option possible remove model specified index think could looks like following basically first argument null options want remove model specified index thoughts", "num": "3294", "d": "9/2014"}, {"title": "backbone events synchronous asynchronous", "body": "realize browser javascript runs single thread nevertheless ask var new backbonemodel mon change function consolelog callback mon change function consolelog callback mon change function consolelog callback mset foo bar order callbacks garaunteed something rely looking triggerevents believe case like confirmation thank", "num": "3293", "d": "9/2014"}, {"title": "model parse needs know called collection", "body": "hi tried time find related issue without much luck relates bit specially said another good option passing flag testing existence property determine context collection model model parse method agree problem unless mistaken default reason documentation model parse says parse called whenever model data returned server fetch save function passed raw response object well correct server real content inside data key response body need override parse model set parse works model getting data server collection hands parsed data model need check something know whether reading data handed server model fetch handed collection collection fetch parsing different first glance thought got covered saw options reference collection problem second call fetch without reset reference fixed adding flag sync reimplementation peeking url tell apart think least documentation adjusted explain one expect options ideally flag would better avoid override yet another function thank", "num": "3292", "d": "9/2014"}, {"title": "tying backbone marionette jquery browserify", "body": "trying get backbone marionette jquery working browserify know really hot topic jquery dependency saw samccone shim example keep hitting code marionette even define tell go marionnette repo like issue however think issue backbone since undefined went back see backbone coming marionette side looks like grabing new instance backbone one added earlier defined knowing dive backbonejs find js function root backbone initial setup backbone purposes jquery zepto ender library kidding owns variable backbone defined undefined add like jquery prerequired backbone global scope work since defined second init backbone jquery defined projects stay similar getting something wrong sorry bring subject sure handle properly thanks bowtie", "num": "3291", "d": "9/2014"}, {"title": "feature request mergeoptions", "body": "removing move better think removing made evident really concise way specify additional properties merge directly class find pretty basic feature extending class almost certainly action whenever make new class let consider case make new view say accepts number additional options top backboneview accepts let look options getting additional options onto prototype verbose form manually attach additional option view js var editorview backboneviewextend constructor function options thisstyle optionsstyle thisstyle thiscolor optionscolor thiscolor thisreadonly optionsreadonly thisreadonly thismenu optionsmenu thismenu thispreview optionspreview thispreview backboneviewconstructorapply arguments set defaults thisstyle tall primary problem approach verbose nobody would ever want write new line code additional option pass let take look improve drawing inspiration backbone source js var editoroptions style color readonly menu preview var editorview backboneviewextend constructor function options extend pick options editoroptions backboneviewconstructorapply arguments big improvement think need add new values array merged things substantially dry still like something even dry app grows number classes extend grows eventually might find tens hundreds classes one must write within constructor far worst line code ever seems bit much need include every class consider additional properties fundamental part extending object common enough warrant additional convenience array prototype chain would automatically concatenated parent array within extend method would provide us following api js var editorview backboneviewextend mergeoptions style color readonly menu preview var supereditorview editorviewextend mergeoptions superproperty allows one declaratively specify additional properties merged directly instance would really clean code supporting would involve adding something effect extend method see pretty controversial change figured propose go overwrite extend projects ps yes understand nt actually classes javascript tough argue utility describing backbone objects word", "num": "3290", "d": "9/2014"}, {"title": "feature request return options passed back router", "body": "right calling nt allow one access later within router sent away backbonehistory never seen consequently like add options must modify router also backbonehistory seems like lot small backwardscompatible change users easily expand navigation options without touching backbonehistory object trying make powerful router one features ability developer declaratively specify data objects specific route basically matched url data fetched first time navigate route gets cached subsequent visits reset cache like support new option maybe something like might options add later modify behavior happens route matched like copy paste two methods backbonehistory addition internal regular expressions used one methods first modify pass options loadurl method need override loadurl roughly lines code total add two additional arguments callbacks addition changes backbonehistory need override router route method really want something options get back change look like passing second parameter aforementioned methods backbonehistory line line need modify process additional option makes things less fragile possible counterargument nt using options expand functionality routing callbacks case might go instead without getting history object", "num": "3288", "d": "9/2014"}, {"body": "already passing option model save model destroy collection create", "d": "9/2014"}, {"body": "backbonejs use validate method model validation think simple use plugin like backbnevalidation customize validation method even call server see example", "d": "9/2014"}, {"body": "indeed correct answer", "d": "9/2014"}, {"body": "unless mistaken version bower latest release comes bower get anywhere else", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "project obviously alive follow give even life", "d": "9/2014"}, {"body": "alive also fairly stable specific example something new think needs get done propose open source right", "d": "9/2014"}, {"body": "really question stackoverflow irc channel mailing list try reading source though think little clearer purpose collection sync model save key line server response empty object still work makes sense pass back full representation want sync", "d": "9/2014"}, {"body": "nope since version commit collections return models passed see changelog", "d": "9/2014"}, {"body": "sure enough sorry false alarm", "d": "9/2014"}, {"body": "wery obvious broke prototype chain rewritten backboneview extend method correct way seems seen old wrong documentation saying extend actually supporting prototype ps add example prototype reference list access prototype edit methods object", "d": "9/2014"}, {"body": "done", "d": "9/2014"}, {"body": "pass creating collection", "d": "9/2014"}, {"body": "great works unfortunately documented", "d": "9/2014"}, {"body": "duplicate others", "d": "9/2014"}, {"body": "please try stackoverflow mailing list questions github issues maintaing framework", "d": "9/2014"}, {"body": "read documentation enable pushstate backbonejs router add backbonehistorystart pushstate true handle routes server find article web explain", "d": "9/2014"}, {"body": "available backboneversion kind thing using file names even better package manager anyway", "d": "9/2014"}, {"body": "let tag em close em", "d": "9/2014"}, {"body": "check underscore partial method might help sometimes simplify kind code", "d": "9/2014"}, {"body": "yes good suggestion aka currying", "d": "9/2014"}, {"body": "place event handlers could modify options object removereference call creates new object extending concerned addition optionspreviousmodels write pull request failing test case good see behavior breaks", "d": "9/2014"}, {"body": "sorry quite adept writing pull request use case breaks listening reset event collection reset hdlr handler receives event event including options object pass options object call another collection options reset function overwrite previousmodels property options object call options object corrupted corrupted listeners responding original event", "d": "9/2014"}, {"body": "aside throughout backbone code anytime incoming options object modified options object always cloned collectionreset inconsistent practice", "d": "9/2014"}, {"body": "nt follow removereference neither removereference addreference use input options argument answer question sorry ignored yes adding optionspreviousmodels corrupts incoming options object", "d": "9/2014"}, {"body": "pass options object call another collection options ca nt clone object passing reset seems like odd edge case", "d": "9/2014"}, {"body": "kidplug right consistent modifying object nt create", "d": "9/2014"}, {"body": "sure categorically agree find often useful take advantage objects passed reference needed later", "d": "9/2014"}, {"body": "cloning options event handler passing handler going pass options argument another function unmodified think presume next function might corrupt therefore function clone could make argument event handler reset event handler think always cloning options would lead way much unnecessary cloning object creation clone already consistently top profiler time spent", "d": "9/2014"}, {"body": "since references byref event synchronous event absolutely synchronous triggered model added collection try stackoverflow mailing list questions github issues maintaing framework", "d": "9/2014"}, {"body": "badly described issue syncasync issue actually experiencing collection already pushed models fires events added models wants event happen model added collection nt seem wrong instead models added", "d": "9/2014"}, {"body": "ah react code debounce event listener call component one nice things virtual dom performance still good matter often call update", "d": "9/2014"}, {"body": "also pretty sure requests past issuesearch foo failing moment however", "d": "9/2014"}, {"body": "thank jridgewell deciphering issue reason chose point synchronous issue believe best explains going items adding collection already added listeners actually callbacks executed getting copy exact representation list events would feel correct actually less confusing using foreceupdate debouncing mixins today although react really fast handle overhead cases need know exact state object time rendering also issues android javascript execution could benefit us able render absolutely needed reference collection fine likely needed least index item added could slice array using index order get state collection point triggering event would great alternatively second collection deep copy collection actual event triggered", "d": "9/2014"}, {"body": "could perhaps override add behavior need still clear need deep copy collection could try", "d": "9/2014"}, {"body": "reason want correct representation collection need inform react via different methods react usually needs either currentsought next state order figure force render also render also would nt mind knowing general make system lot predictable assume event receiving sync collection added validation debugging possibly things look see could help use case thank keeping dialog alive", "d": "9/2014"}, {"body": "wrong repo bub", "d": "9/2014"}, {"body": "backbone events nt use jquery error code", "d": "9/2014"}, {"body": "backbone absolutely actively maintained also quite stable good thing", "d": "9/2014"}, {"body": "backbone hard dependency underscorejs gt restful persistence history support via backbonerouter dom manipulation backboneview include jquery older internet explorer support mimics underscore jquery apis lodash zepto also tend work varying degrees compatibility", "d": "9/2014"}, {"body": "looks like device emulation settings forgotten chrome", "d": "9/2014"}, {"body": "try asking question stack overflow appropriate place", "d": "9/2014"}, {"body": "seen many day ago many people ask answer topic ca nt find ask question asked lot question stack overflow forum none answered found answer nt forum answer question sooner stack", "d": "9/2014"}, {"body": "congratulation design really nice beauty design", "d": "9/2014"}, {"body": "problem backbone backbonecouchdb connector overwrites request get query parameters added db object", "d": "9/2014"}, {"body": "wrong using", "d": "9/2014"}, {"body": "using twice looks ugly", "d": "9/2014"}, {"body": "\u53d1\u81ea\u6211\u7684 iphone \u5728 notifications githubcom using col twice looks ugly reply email directly view github", "d": "9/2014"}, {"body": "using col twice looks ugly argue uglier passing option much flexible useful app feel free mix base collection", "d": "9/2014"}, {"body": "synchronous result always assuming exists environment", "d": "9/2014"}, {"body": "could also duck type response", "d": "9/2014"}, {"body": "yes thought probably work reasonably well many applications general enough nt model supposed data attribute could improve happens object see pattern provide heuristics given already options parameter happens collection cases ensure happens first fetch next ones unless resetted first collection option set preparemodel called existing branch collection set would possible set earlier", "d": "9/2014"}, {"body": "one reasons good nt need generallyapplicable work specific context app course designed want go flaginoptions route keep mind passed cloned passed individual models could modify options argument reference like js collection backbonecollectionextend parse function resp options optionsparsecalled true return respdata model backbonemodelextend parse function resp options return optionsparsecalled respdata resp", "d": "9/2014"}, {"body": "ok flagging sync function simpler try submit patch docs think docs least incompletemisleading regard model parse called data response server", "d": "9/2014"}, {"body": "needed versions build js gulptask browserify function return browserify appscriptsapplicationjs external jquery external lodash external backbone external backbonemarionette bundle error function error consolelog error add pipe end pipe source applicationminjs pipe gulpdest tmpscripts pipe livereload lr pipe notify message browserify task complete gulptask vendor function return browserify require backbonemarionette require backbone require lodash require jquery bundle pipe source vendorjs pipe gulpdest tmpscripts", "d": "9/2014"}, {"body": "try something like", "d": "9/2014"}, {"body": "dannytranlx working example also come join us need help close", "d": "9/2014"}, {"body": "yup suy solution best one need externalize dependencies manually require build step include line marionette loaded fine", "d": "9/2014"}, {"body": "nt work somehow samccone check example thanks", "d": "9/2014"}, {"body": "update follow samccone example hit error however downgraded browserify version working line something going newer versions browserify issue marionnette thanks time guys smile", "d": "9/2014"}, {"body": "ah strange indeed perhaps open issue browserify see resolution please share find", "d": "9/2014"}, {"body": "comes time example think party line kind utility functionality responsibility backbone surprised attempt got others fwiw tried well tried different reasoning outcome", "d": "9/2014"}, {"body": "mmk makes sense tomhicks done research posting given outcome previous attempts going go ahead close issue anyone backbone team wants comment anything feel free future visitors might want check marionette likely create support feature cause seems pretty basic", "d": "9/2014"}, {"body": "check backboneviewoptions pretty much exact syntax described little sugar coat", "d": "9/2014"}, {"body": "try stackoverflow mailing list types questions github issues maintaining framework", "d": "9/2014"}, {"body": "though nt right place question safely use models collections without jquery javascript environment", "d": "9/2014"}, {"body": "nt think workaround general solution specific problem nt want tie closely jquery api folks using different ajax library plug bit easier", "d": "9/2014"}, {"body": "fortify detecting issue following hp thanks", "d": "9/2014"}, {"body": "calling work case way wo nt extend current attributes instead replaced also supports silent option nt want trigger two change events model", "d": "9/2014"}, {"body": "dts issue maintaining filtered subcollection based first collection adding models one time subcollection crushing performance subcollection sorted collection modified backbone collection send adds event add events pass array models added way subcollection receive new models one event bulk add one sort thing removes mostly consistency", "d": "9/2014"}, {"body": "way started tonight hopefully continuing throughout week minimal changes far proofofconcepts nothing working yet either still passes tests unfortunately tests starting show reliance things similar variablesmethods necessary make long process force conditionalities would like alias everything kind thing lol backwards compatible say already standard feel free critic see fit update fork something substantial enough pull keep mind still learning full codebase lowlevel job falling asleep probably deleted useful code accident always open input thanks", "d": "9/2014"}, {"body": "wondering behavior browser implementation dependent yep keys object hash implementationdependent practice typically stored order added hash safety treat objects unordered collection properties would making routes array safer potentially given reliance current system complaints received would great change make stage used catchall route last key routes hash without problems past", "d": "9/2014"}, {"body": "thanks response", "d": "9/2014"}, {"body": "think problem using mix cid id line cid added line id used instead use id", "d": "9/2014"}, {"body": "might cleanup bit otherwise ca nt really see realworld use would use practice", "d": "9/2014"}, {"body": "like match single model set conditions", "d": "9/2014"}, {"body": "give example", "d": "9/2014"}, {"body": "used past implement dynamic collection filters via similar example could used irl code coffee dynamically set collection view based object conditions la trigger sort param object conditions object properties match eg return void setfilter conditions collectionview getcollectionviews conditions collectionviewitemfilter model index every conditions value key val modelget key isarray val amp amp vallength value isarray value value else value isequal value intersection val value else val value else false else delete collectionviewitemfilter collectiontrigger sort", "d": "9/2014"}, {"body": "dig wan na open pull", "d": "9/2014"}, {"body": "thing", "d": "9/2014"}, {"body": "smileycat", "d": "9/2014"}, {"body": "one year reexamine position please", "d": "9/2014"}, {"body": "hello team sure loadurl works expected url like wwwexamplecom using backboneroutenotfound internally calls loadurl found glitch hit url like wwwexamplecom page page instead fragment loadurl surprisingly returns true hit returns false probably issue code line handlerroutetest fragment please let know something wrong thanks", "d": "9/2014"}, {"body": "logic router determines whether logged user allowed view requested route user logs like able reload current route runs router logic checks logged user still allowed view page", "d": "9/2014"}, {"body": "user logs like able reload current route runs router logic checks logged user still allowed view page user logs call function checks user still allowed view page really opinions end day backbone opinions one nt stuff useful reusable logic onlyactivatedbyaurl callback ca nt easily call places use function", "d": "9/2014"}, {"body": "jashkenas agree ideally able call isolated function checks user still allowed view page instead recalling entire route logic unfortunately method intertwined logic makes suggestion infeasible unfortunately nt time refactor part app work suggested imo allowing backbone rerender current route fairly innocuous change would case reduce need significant refactor backbone opinions one nt stuff useful reusable logic onlyactivatedbyaurl callback ca nt easily call places use function familiar inner workings backbone completely agree methodology unfortunately dont rely routes execute logic opinion nt expressed clearly backbone docs perhaps add best practices section docs outlines ways backbone opinionated help developers avoid learning gotchas hard way", "d": "9/2014"}, {"body": "way documented backbone docs least defining route method router object truly unable refactor allowed view check function something find bit difficult believe ca nt least call method router directly", "d": "9/2014"}, {"body": "jashkenas nt good idea alternative using trigger url change associated route logic still confused antipattern code smell suggested would instead version", "d": "9/2014"}, {"body": "would", "d": "9/2014"}, {"body": "pattern scale would results extremely convoluted router file ton methods like onlogin oncheckout onpaymentreceived onviewsettingspage probably lot people prefer approach", "d": "9/2014"}, {"body": "question one solutions suggested using nt clear also clear making difficult use missing", "d": "9/2014"}, {"body": "using solution two problems attributes may used setup url function like fetch fail keep empty model loosing data implementing option fetch would keep current behavior backwards compatible add ability reset model server state valid use case backbone currently primitives handle", "d": "9/2014"}, {"body": "ericbdr said makes sense", "d": "9/2014"}, {"body": "problem ror app solution worked thanks omenking antonlitvinenko", "d": "9/2014"}, {"body": "even better always explicitly add extension urls let browser cache json page html nt mind ie instead overwriting cache entry url otherwise miss benefits browser caching nice right", "d": "9/2014"}, {"body": "sija right changed explicit json test received problem json overwrite page idea wrong hehe tks", "d": "9/2014"}, {"title": "ca nt find way specify itemview js docs", "body": "docs nt let know set itemview itemcontroller arraycontroller setting itemcontroller works well staying dry guides instance itemview see docs itemviewclass nt seem context using arraycontroller itemcontroller able bind viewitem handlebars end kind inline virtual view includes actual itemview want performance whole thing atrocious especially mouseenter mouseleave events rerenders buttons hover see screenshot question issue question stack overflow nt docs issue performance fact views per item", "num": "5669", "d": "9/2014"}, {"title": "update runlater docs return value function string", "body": "currently documented returning string backburner returns function processes fn docs updated reflect personally kind wish actually return string easier compare value returned one value returned another sure issue worth raising", "num": "5667", "d": "9/2014"}, {"title": "ember testing method fillin fires change event input fields events like keyup fire", "body": "keyup added fired fillin method find better way make totally dynamic firing event associated input field", "num": "5665", "d": "9/2014"}, {"title": "jshint complains unused variable building windows", "body": "tried building ember windows jshint complained following variable unused emberjs packages emberhandlebars lib controls selectjs looks like following regex supposed take care normally nt match windows rn line endings emberjs lib broccoliemberinlinetemplateprecompilerjs anything done changed regex able build errors", "num": "5662", "d": "9/2014"}, {"title": "classnamebindings nt work view rendered using render helper", "body": "line ember app stopped working updated problem neither css class added window view div tried reproduce simple jsbin example failed could nt reproduce bisecting however showed problem visible debug code changed tomorrow case obvious going", "num": "5660", "d": "9/2014"}, {"title": "typeerror embera mapby function", "body": "upgrading ember whole application breaks get error route point code flushpendingfetchfortype function type recordresolverpairs var store var adapter storeadapterfor type var shouldcoalesce adapterfindmany amp amp adaptercoalescefindrequests var records embera recordresolverpairs mapby record exact var resolvers embera recordresolverpairs mapby resolver cause miss upgrading notes got idea reproduce bug", "num": "5657", "d": "9/2014"}, {"title": "seems like ember broken hasmany async even ember data", "body": "hope behaviour best illustrated really simple example using jsbin simple working example using hasmany ember jsbin example working ember jsbin using ember gives error read property async undefined typeerror read property async undefined jsbin examples use version ember data apologies nt bug nt able find information elsewhere", "num": "5656", "d": "9/2014"}, {"title": "mapforeach swapped keyvalue callback", "body": "calling foreach map keyvalue swapped compared pre pre working example notworking example", "num": "5651", "d": "9/2014"}, {"title": "reduce computed macros nt get delta callbacks aliased dks", "body": "macros utilize delta callbacks callbacks triggered dk alias array", "num": "5650", "d": "9/2014"}, {"title": "unable bind type input component inside another component", "body": "see cc raycohen", "num": "5642", "d": "9/2014"}, {"title": "nextsuper ennumerable sort ember objects", "body": "posted discuss figured happening emberjs basically property showing enumerating ember object even though property descriptor says idea happening would love learn answer run jsbins watch console output", "num": "5638", "d": "9/2014"}, {"title": "schedule afterrender view rerender", "body": "using following code seems destroying mode undefined event triggered serenader didinsertelement nt seem triggered rerender ember", "num": "5637", "d": "9/2014"}, {"title": "emberisempty localstorage returns true", "body": "emberisempty localstorage returns true records localstorage emberisempty returns false bug thanks", "num": "5636", "d": "9/2014"}, {"title": "deprecation warning quoteless actions warn given single quotes", "body": "deprecation specified quoteless path action helper changebrand resolve actionname perhaps meant use quoted actionname eg action changebrand objecttregisteredactions anonymous function handler", "num": "5633", "d": "9/2014"}, {"title": "nested view didinsertelement ordering change", "body": "order didinsertelement called nested views changed wrt earlier old versions order see canary", "num": "5631", "d": "9/2014"}, {"title": "embercompare compare objects", "body": "embercompare obj obj always returns documentation tells us pass objects compare function code compares objects", "num": "5626", "d": "9/2014"}, {"title": "controllercontentmodelaliasdeprecation conflicts objectproxy content setunknownproperty assertion", "body": "stump people unfamiliar aliased object controller even relevant deprecation warnings using versus feel error delegate set model property object proxy model undefined within context objectcontroller happy send pr someone confirms bug", "num": "5624", "d": "9/2014"}, {"title": "ember observer embercomputedalias throws associated records loaded error", "body": "models appfoo dsmodelextend bars dshasmany bars inverse bar type dsattr string appbar dsmodelextend foo dsbelongsto bar inverse foos throws following error data sideloaded part bigger request something chain objects comment defaultvaluefortype everything works ember inspector shows foo loaded expected nt happening canary june upgraded ember emberdata fix another issue figured fudge workaround instead trying observe andor nt make difference error", "num": "5623", "d": "9/2014"}, {"title": "top level errorroute failed handle error nested routes", "body": "jsbin following routes assume error showroute model navigate showroute error supposed bubble errorroute however get following message nt errorroute supposed handle errors whole application missing something bug", "num": "5620", "d": "9/2014"}, {"title": "set readonly property errors object server error", "body": "see details", "num": "5617", "d": "9/2014"}, {"title": "text support mixin nt send event object argument triggered action", "body": "sendaction method triggers action method supplied nt send event object causes inflexibility trying make custom text area one would need detect mutiple keycodes eg textarea tag support support", "num": "5615", "d": "9/2014"}, {"title": "emberdata testing model circular relationship fails", "body": "using slightly modified version example guide app app emberapplicationcreate appplayer dsmodelextend level dsattr number defaultvalue levelname dsattr string defaultvalue noob tags dshasmany tag levelup function var newlevel thisincrementproperty level newlevel thisset levelname professional apptag dsmodelextend players dshasmany player tests emqglobalize appsetupfortesting appinjecttesthelpers setresolver emberdefaultresolvercreate namespace app approotelement embertesting moduleformodel player player model test levelup function var player thissubject level emberrun function playerlevelup equal playerget level equal playerget levelname professional jsbin relationship circular player many tags tag many players model relationship seems work fine testing", "num": "5614", "d": "9/2014"}, {"title": "route hook synchronous redirection", "body": "hook lets child route synchronously redirect ancestor routes resolve promises want redirect use redirection stateful navigation highlevel area application think toplevel tabs index route determine user already tab redirect finergrained child route used last synchronously asynchronous redirects eager url loading pollute history intermediate routes breaking back button would help mitigation would better redirect setting url ancestor routes resolving promises stateful navigation go arbitrarily deep case equivalent two levels possible historybased redirects redirects lastused person redirects lastused document route resolves promise person record redirect never fire synchronously smallest api change would fix would adding new route hook fires routes start resolving things beforemodelmodelaftermodel interest put together pr would also interested radical api change think route fire parallel without waiting ancestors resolve instead methods like return promises routes wait parents actually need wait parents could performance benefits letting many models load parallel bigger breaking change mostly want way solve immediate problem", "num": "5613", "d": "9/2014"}, {"title": "use objecthasownpropertycall", "body": "", "num": "5607", "d": "9/2014"}, {"title": "nested", "body": "nested loops handlebars render safari ios cause white screen death nothing renders returns error console typeerror attempted assign readonly property tried ember beta example", "num": "5606", "d": "9/2014"}, {"title": "removing controller emberselect triggers error", "body": "backing controller removed error triggered emberselect inadvertently tries setting value property see jsbin", "num": "5605", "d": "9/2014"}, {"title": "rendering outlet error action handler fails", "body": "error handler tries render application views error outlet however fails application view nt yet setup seems similar issue closed unconfirmed performing hard refresh nested route promise reject action handler tries render outlet main application view however returns array empty point results attempt call trying initiate render emberrunnext help", "num": "5603", "d": "9/2014"}, {"title": "inconsistent behaviour calling helpers another helper", "body": "first call view helper behaves expected successive calls render appear observe passed options demonstrated tested ember canary handlebars", "num": "5602", "d": "9/2014"}, {"title": "tostring check givemethod super needs conditional based device limitations", "body": "", "num": "5601", "d": "9/2014"}, {"title": "changing query param default value amp appcontrollercurrentroutename", "body": "nested routes controller query param default value route invoked changes changing query param value route gets refreshed observing changes correct value ie changing query param value back original value changes happens returning back default query param value defined initially controller machty thoughts", "num": "5598", "d": "9/2014"}, {"title": "typeerror embercomputedsort dependentarraysobserverprototypedependentarraywillchange", "body": "using ember issue dependentarraysobserverprototypedependentarraywillchange line typeerror raised observercontexts sliceindex undefined jsbin click clear problem seems occur specific case sortabletable views even though independent least second embercomputedsort computed property sortproperties set nonempty array noticed exception raised line line called inside trackremove trackedarray undefined dependentarray still points underlying data case changing solves problem", "num": "5596", "d": "9/2014"}, {"title": "moduleforhelper metalviews", "body": "testing handlebars helpers moduleforhelper never merged emberqunit pr worked fine includes metalview refactorings helper stops working created jsbin demonstrates problem idea changed solution could reporting make sure unknown bug introduced metalview refactorings ping krisselden rwjblue", "num": "5595", "d": "9/2014"}, {"title": "behavior odd case one dynamic token eg tacoid", "body": "issue basically taco route linkto would expect result serialize chicken beef dorito examples correct tacoid instead undefined one dynamic token lookup tacoid object works cc machty", "num": "5594", "d": "9/2014"}, {"title": "production build includes debug messages", "body": "application configuration includes logresolver logtransitions produce messages production build logresolver uses function turn uses logtransitions uses included debugstatements therefore stripped build process", "num": "5593", "d": "9/2014"}, {"title": "js error transitioning template component", "body": "strange error ca nt figure app dashboard nested routes try navigate away dashboard routes get error notificationread property component template using try navigate say homepage settings page nt get error try moving dashboard page routes using generate links different pages property ember saying undefined component called vehicleindex template confused error transition say settings ember trying parse component nt settings template environment console messages error happens along part call stack error happens", "num": "5592", "d": "9/2014"}, {"title": "container documentation controller page", "body": "api controller class documentation container class mixed guessing way yuidoc parses classes", "num": "5590", "d": "9/2014"}, {"title": "fast track transitionabort promise rejection", "body": "method tell transition aborted busy fetching model similar promise wo nt reject fetching complete later would expect behavior actually works fine time eg transition aborted start another transition aborted begins fetching model however becomes problematic visual loading indicator want enable user abort slow loading routes pressing escape key standard browser behavior case immediate hook notify transition aborted allow cancel indicator see ways fix issue either follow suggestion somehow reject promise immediately add additional hook like", "num": "5589", "d": "9/2014"}, {"title": "modelfor checking casesensitive model names active transition", "body": "nt know put heading right way found little issue ember modelfor function ember modelfor function name var route thiscontainerlookup route name transition thisrouter thisrouterrouteractivetransition null midtransition want try look resolved parent contexts current transitionevent transition var modellookupname route amp amp routeroutename name transitionresolvedmodelshasownproperty modellookupname return transitionresolvedmodels modellookupname return route amp amp routecurrentmodel part bold seems problem let say two routes let also say user route model resolved immediately model function called promises noticed ember stores model property casesensitive manner ie lower caps needed user route model get posts route model write posts route model function reasons know probably page still transition field returns undefined hence code part bold fails searches casesensitive fields obviously javascript casesensitive ember case stored user model user field user field returns null every time maybe setting supposed make ensure returns correct route name case error nt exist would nt know observed", "num": "5588", "d": "9/2014"}, {"title": "auto updating cdnjscom version", "body": "ca nt still use cdnjscloudflarecom asked cdnjscom update replied author must update could guys please update cdnjscom version enable auto update next version updates thank best", "num": "5587", "d": "9/2014"}, {"title": "route activate hook called model route changes", "body": "docs state activate hook executed model route changes however ember case activate hook always called model changes route occur ember", "num": "5584", "d": "9/2014"}, {"title": "view name lookup clashes contextual property names", "body": "call handlebars helper view name matches property context expected appnoteview rendered content property equal note property handlebars context actual jsbin", "num": "5579", "d": "9/2014"}, {"title": "computedproperty component updates first time watched property set given value property model property updates every time watched property property component", "body": "notice first bin message next select control updated first time given value selected second bin updated every time selected value changed difference two first bin storing watching second bin storing watching", "num": "5578", "d": "9/2014"}, {"title": "formaturl called using replacewith", "body": "app registered implementation location hashbang event change routes things work expect using use url goes back using hash typical transition function called class use replacewith nt called see routes better outside iframe note click button go route two history properly replaced route also changes back using lastly per contribution guidlines fiddle uses ember latest build along new function problem appears", "num": "5576", "d": "9/2014"}, {"title": "modelfactoryinjections breaks inheritance", "body": "seeing ember data errors application nt attached minimal test", "num": "5573", "d": "9/2014"}, {"title": "read property undefined error chainsjs caused model capitalized attributes", "body": "ember fails transition routes tries clean objects capitalized object properties plnk shows work code capital letters model object properties would consider bug guarantee model wo nt capitalized properties ember able clean models capitalized properties objects", "num": "5570", "d": "9/2014"}, {"title": "content rendered case custom autofocused text field", "body": "maybe quite edge case used work see using canary behavior using release note wrapping inside makes working least behavior seems right get see last note scheduling focus afterrender queue workaround use", "num": "5568", "d": "9/2014"}, {"title": "transitionaborted performing full route transition changed query params", "body": "transitionaborted error get thrown performing full route transition changing query params working optin full transition via refresh example provided bottom query parameters ember guide change made log errors updated js bin click change button see transitionaborted error thrown console trying upgrade ember app time many qunit tests fail run together tests fine run isolation suspect transitionaborted errors may causing test failures however sure transitionaborted exceptions normal performing full transitions anyone confirm one way would helpful getting root cause problems whatever might", "num": "5566", "d": "9/2014"}, {"title": "metalviews silently fails bootstrap tablestriped", "body": "earlier complains missing however nt complain expected css work see", "num": "5565", "d": "9/2014"}, {"title": "mal", "body": "", "num": "5564", "d": "9/2014"}, {"title": "polymorphic relationship child element", "body": "consider scenario model polymorphic one parent model eg consider model polymorphic relationship child models say suppose polymorphic relationship childs say belongsto two parent models ember data", "num": "5563", "d": "9/2014"}, {"title": "odd behavior using input helper", "body": "use input helper loop nt use syntax simply refer input looses focus change events updates text using syntax nt loose focus item update", "num": "5560", "d": "9/2014"}, {"title": "arraycomputed bug sorting fields affecting dependent computedfilterby", "body": "checkuncheck kris seldon click vanish nt things get really weird subsequent clicks example simple silly imagine realistic example emberselect instead boolean field issue appears embercomputedfilter embercomputedfilterby observes acts property embercomputedsort looking property run situations property items longer property", "num": "5558", "d": "9/2014"}, {"title": "components called bound handlebars helper fail render beta", "body": "using handlebars helper calls component based parameter see working jsbin beta beta page throws failing jsbin looks like parent view render buffer nt set yet pretty unfamiliar rendering lifecycle point regression wrong first place", "num": "5556", "d": "9/2014"}, {"title": "observer dsmodel attribute fires even attribute used template", "body": "written array controller pagination function switch another pages first time problem reviist page visited observer attribute used template triggered case remove template observer nt triggered anymore revisit page already visited nt think done weird thing controllers pagination button clicked simply changes controllers written observer model class test whether issue limited property observer also behaves like observer issue nt seem limited property using ember ember data handlebars jquery tried beta canary version ember issue remains added test action controller calling action causes observers fire route muteadminindexroute emberrouteextend model function params transition queryparams var search paramssearch var page paramspage setupcontroller function controller model controllerset model model var willpaginatemeta modelget metawillpaginate controller muteadminindexcontroller emberarraycontrollerextend muteadminmodelable queryparams page search page totalpages null pagechanged function thisstorefind thisget articlemodelclassname search thisget search page thisget page function model thisset model model observes page actions dosearch function thisstorefind thisget articlemodelclassname search thisget search page function model thisset model model template model observers muteadminarticle dsmodelextend title dsattr string body dsattr string category dsbelongsto category author dsbelongsto user viewcount dsattr number published dsattr boolean defaultvalue true publishscheduled dsattr boolean defaultvalue false publishscheduletime dsattr date publishedchanged function thisget published true thisset publishscheduled false consolelog published changed thistostring observes published", "num": "5553", "d": "9/2014"}, {"title": "ember get context properly trying get parentcontroller", "body": "hi team recently upgraded ember noticing one behavior breaking app ember could answer answers itemcontroller questiondisplayitem log parentcontroller longer works instead would answer answers itemcontroller questiondisplayitem log controllerparentcontroller log answerparentcontroller answers itemcontroller questiondisplayitem log parentcontroller sure bug intentional change thanks", "num": "5552", "d": "9/2014"}, {"title": "observer fires nothing changed model", "body": "set observer function model attribute controller fires soon enter route controller intended behavior using ember data model route muteadminnewroute emberrouteextend model function return thisstorecreaterecord thisget articlemodelclassname setupcontroller function controller model controllerset model model deactivate function thiscontrollerget isdirty thiscontrollerget model deleterecord controller muteadminnewcontroller emberobjectcontrollerextend muteadminmodelable publicchanged function consolelog printed entering route observes public actions submit function var currentuser thisget currentuser var article thisget model", "num": "5550", "d": "9/2014"}, {"title": "observer fires nothing changed model", "body": "set observer function model attribute controller fires soon enter route controller route muteadminnewroute emberrouteextend model function return thisstorecreaterecord thisget articlemodelclassname setupcontroller function controller model controllerset model model thisstorefind thisget categorymodelclassname function categories controllerset categories categories bind deactivate function thiscontrollerget isdirty thiscontrollerget model deleterecord", "num": "5549", "d": "9/2014"}, {"title": "ember inspector chrome issue", "body": "sure best place report issues ember inspector link chrome store bug reports recently chrome evergreen update intermittently ever since ember inspector allow inspect controller get issue uncaught typeerror read property foreach null function propertiesformixin mixin var seen properties", "num": "5546", "d": "9/2014"}, {"title": "modelfactoryinjections application object rather ember namespace", "body": "want turn flag currently initializers run instead affect namespace directly would nt make sense part application object way flag exists application level rather modify code ember namespace submit pr fix wanted discuss right approach went made necessary changes", "num": "5544", "d": "9/2014"}, {"title": "emberisempty returns false", "body": "currently returns false pass empty object would expect return true feels like gap functionality taras suggested using certainly works nt feel intuitive available trivial implement glad submit pr agreed indeed gap", "num": "5543", "d": "9/2014"}, {"title": "rendering ancestor template navigating back raises exception", "body": "nested resource try render ancestor higher parent navigate back browser ember raises seems something routerouterlookupactiveview called try find view nt actually active see jsbin minimal example", "num": "5542", "d": "9/2014"}, {"title": "support registering plain objects", "body": "need container register app settings plain object currently feature supported factory must define function see different workarounds inject app settings wondering intentional reason registering plain object supported", "num": "5540", "d": "9/2014"}, {"title": "missing documentation emberrsvp", "body": "intentional drop documentation emberrsvp leads", "num": "5539", "d": "9/2014"}, {"title": "working examples ember", "body": "new ember hard time finding working example ember tried couple things copypaste code routing example ember js mail app got javascript undefined variable error tried embercli example apps get one issue ember seems really nice framework developing webapplication however would nice working prototypes site", "num": "5536", "d": "9/2014"}, {"title": "bufferstring nt work", "body": "appending view renders buffer string one access string directly example failure related forum post", "num": "5534", "d": "9/2014"}, {"title": "currentroutename return previous route name didtransition hook", "body": "following code return route previous route instead current route due routerupdatepaths called didtransition hook name hook didtransition indicate route transition completed return previous route name currentroutename property seem confusing", "num": "5533", "d": "9/2014"}, {"title": "ember longer binds input typetype", "body": "jsbin example see difference switching version ember binding attribute input helper appears longer work migrating password field toggles based checkbox user wants show password previously computed property attribute would switch two ember longer thanks", "num": "5530", "d": "9/2014"}, {"title": "linkto wwo queryparams point resolved link", "body": "hello please check jsbin problem occurs two linkto route one querystring params another one eventually user clicks one querystring parameter suddenly link queryparam changes link last linkto querystring param something wrong thanks advance", "num": "5527", "d": "9/2014"}, {"title": "replacewith loses queryparams", "body": "seems like nt respect redirecting one subroute another using queryparams parent route gets lost jsbin example minimal code reproduce app emberapplicationcreate approutermap gt resource lesson gt resource slide applessonindexroute emberrouteextend redirect gt replacewith slide applessoncontroller embercontrollerextend queryparams course indexhbs slidehbs", "num": "5526", "d": "9/2014"}, {"title": "", "body": "watching", "num": "5525", "d": "9/2014"}, {"title": "emberjs causes testing case wrong", "body": "hi lobby index route test case test redirect dashboard function emberrun function route appcontainerlookup route lobbyindex test case works fine emberjs upgraded emberjs fails fail reason typeerror undefined function evaluating gethandler name btw try emberjs test case pass emberjs fail", "num": "5524", "d": "9/2014"}, {"body": "yes lets fix docs return function use uniqueness check internally", "d": "9/2014"}, {"body": "abousamra think less trivial would like use fire event character string passed fire key codes shift caps letter believe keeping helper simpler better direction recommended documented pattern firing events document guides", "d": "9/2014"}, {"body": "seems good submit pr change", "d": "9/2014"}, {"body": "done", "d": "9/2014"}, {"body": "looks ok could provide jsbin cc twokul", "d": "9/2014"}, {"body": "took time able come simple jsbin steps verify window view example contains css class html window line disable notice window view looks like html window", "d": "9/2014"}, {"body": "locally bisected difference", "d": "9/2014"}, {"body": "sounds like lack tests scenario able add ease fix", "d": "9/2014"}, {"body": "looking", "d": "9/2014"}, {"body": "twokul thanks bro", "d": "9/2014"}, {"body": "found issue writing test right", "d": "9/2014"}, {"body": "stumbled upon bug nice know already worked", "d": "9/2014"}, {"body": "thanks twokul quickly finding culprit downgraded temporary fix noticed bug yesterday tried blame libsass little bit", "d": "9/2014"}, {"body": "aortbals regarding bugs releases affected causing sometimes fire course affected another backburner bug fixed cause progressive slowdowns", "d": "9/2014"}, {"body": "confirm trying update ember data new map stuff emberatostring says subclass dsmodel trying dig", "d": "9/2014"}, {"body": "fixed", "d": "9/2014"}, {"body": "think due closing duplicate try get fixed sometime today ember data way least use canary build ember thanks much using betas giving us feedback", "d": "9/2014"}, {"body": "also related closed favor", "d": "9/2014"}, {"body": "fivetanley would best approach fix ed anything please let know eager update project latest ember master holds back since heavily rely ed", "d": "9/2014"}, {"body": "commented ed issue feature detect checking arity branch accordingly", "d": "9/2014"}, {"body": "fivetanley canary would fine thanks much work sorry ca nt contribute", "d": "9/2014"}, {"body": "confirm using ember amp ember data canary works", "d": "9/2014"}, {"body": "accordance map note map marked private", "d": "9/2014"}, {"body": "totally cool following standard breaking change used external library ember data", "d": "9/2014"}, {"body": "yes stumbled upon issue today worked well ember nt ember data work correctly change swap back open issue repository", "d": "9/2014"}, {"body": "cc stefanpenner", "d": "9/2014"}, {"body": "emberdata must fixed likely need detect version map use accordingly", "d": "9/2014"}, {"body": "please reopen issue emberdata", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "surprising bc would expect aliased dk indistinguishable underlying value", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "suspect identified root cause many others", "d": "9/2014"}, {"body": "actually sure experiencing think legitimately broken need extract failure case", "d": "9/2014"}, {"body": "clear jsbin demonstrating", "d": "9/2014"}, {"body": "binding input type broken fixed master beta release channels", "d": "9/2014"}, {"body": "fixed", "d": "9/2014"}, {"body": "jsbin demonstrate failure maybe trying describe different scenario", "d": "9/2014"}, {"body": "ahh true read title happy reopen get reproduction error", "d": "9/2014"}, {"body": "looks like nt verify link put issue correct believe rwjblue correct issue seen failed check newer ember sorry shortcomings cry", "d": "9/2014"}, {"body": "raycohen awesome thanks clarification", "d": "9/2014"}, {"body": "mattmarcum seems related", "d": "9/2014"}, {"body": "yup closing", "d": "9/2014"}, {"body": "work properly", "d": "9/2014"}, {"body": "likely problem following passes anonymous function means time called get different anonymous function ness lost another thing note might problem data changes may scenario rerender triggered afterrender queue flushed view torn absolutely legitimate reasons unfortunately fortunately since needed information scheduling future jobs important ensure run entity question still state need since views actually state machines check via ultimately provide jsbin reproducing problem see previous essay suggests potential scenarios triggered quite high without understanding specific scenario likely provide useful helpfeedbackbugfixes", "d": "9/2014"}, {"body": "noticed spot another thing note might problem data changes may scenario rerender triggered afterrender queue flushed view torn absolutely legitimate reasons happens rerender function triggered view rerender function use schedule use jquery scrollto current view need pass context schedule current view actually step destroyed rerender problem event triggered rerender hence impossible something view rerender", "d": "9/2014"}, {"body": "returns browser using version ember", "d": "9/2014"}, {"body": "sorry long answer chrome ember", "d": "9/2014"}, {"body": "works properly later versions ember least think closed", "d": "9/2014"}, {"body": "never mind working correctly thank", "d": "9/2014"}, {"body": "thanks report behavior looks intended bug fix krisselden", "d": "9/2014"}, {"body": "gethinw think pretty nice thing example using container collection view wanted make code children elements parent view put afterrender queue right didinsertelement parentview mean complete subtree available nt write code afterrender queue mmun right", "d": "9/2014"}, {"body": "would actually agree though since order really guaranteed probably still safer use perhaps worth mentioning release notes bound trip people", "d": "9/2014"}, {"body": "workmanw krisselden plans retain didinserts till views inserted replay ordered manner goal mitigate need afterrender queue work cases also suspect also address orderings", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "stefanpenner correct rendering subtree didinserts last thing happen order didinsertelement hooks simple logic array depthfirst order eg", "d": "9/2014"}, {"body": "mmun thanks sure clear case didinsertelement hooks called order totally crappy wrongly think array traversed reverse order", "d": "9/2014"}, {"body": "correct array traversed reverse", "d": "9/2014"}, {"body": "thanks explanations agree seems sensible opposite order also agree workmanw changes like need documented really helps making upgrades less painful things known advance", "d": "9/2014"}, {"body": "gethinw workmanw would gladly accept pr adding changelog wording would helped yall potentially updated docs hook describe things work", "d": "9/2014"}, {"body": "simple compare objects", "d": "9/2014"}, {"body": "discussing recently stefanpenner crufty area ember either removed rewritten think original intent assist sorting functionality looking happens objects mixin comparable still flaws", "d": "9/2014"}, {"body": "lukemelia example meant raw js objects type", "d": "9/2014"}, {"body": "andrewfan would propose embercompare compare raw js objects seems like returning zero reasonable result", "d": "9/2014"}, {"body": "lukemelia recursive comparison properties documentation says returns values equal", "d": "9/2014"}, {"body": "andrewfan recursive comparison objects incredibly expensive overly naive idea author better custom deep equality operator one semantically meaningful application performant", "d": "9/2014"}, {"body": "mixonic know recursive comparison expensive operation occur developer pass native object function wont break idea add additional functionality think", "d": "9/2014"}, {"body": "andrewfan lack marking properties nonenumerable older browser incredibly uncertain great way different behavior different browsers pretty unexpected behavior also work prototypical inheritance value compare value another simple object also recursive compare recursively risk cycles would prefer need functionality implement custom helper believe embercompare venture path", "d": "9/2014"}, {"body": "duplicate", "d": "9/2014"}, {"body": "believe manifestation regression alias descriptor began fixing quickly realized involved since time work mmun krisselden", "d": "9/2014"}, {"body": "know problem create explicit error route", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "sry ipad keyboard issue", "d": "9/2014"}, {"body": "problem emberdata objects plain ember objects could provide jsbin showing error", "d": "9/2014"}, {"body": "think leaking event action creates leaking abstraction action logical things domain dom event lower level browser api keeping apart seems good also create event listener want catching tricky since characters usually two events shift may want simply check value input field instead", "d": "9/2014"}, {"body": "think missing thing declare need model test resolves issue could close please", "d": "9/2014"}, {"body": "actually distilled version adding seem solve problem example still problem app worth models loaded fixtures setup embercli think anything", "d": "9/2014"}, {"body": "nt appear emberjs issue likely emberqunit issue emberdata issue please reopen appropriate repo cross link future users follow along", "d": "9/2014"}, {"body": "seems related rwjblueemberqunit continued discussion rwjblueemberqunit turns really emberqunit issue circular relationship error solved calling properly setup ember testing", "d": "9/2014"}, {"body": "sure solve problem maybe looking", "d": "9/2014"}, {"body": "solves pretty different problem used route redirecting would fail resolve models would still get replaced original transition finishes resolving plus still actually place could call early enough synchronous", "d": "9/2014"}, {"body": "use replace redirecting nt want add new history entry could also use gototab action determine route transition", "d": "9/2014"}, {"body": "thanks krisselden earlier ruled thinking nt work right case comment made check unrelated bug breaking job", "d": "9/2014"}, {"body": "really use instead x hasownprop", "d": "9/2014"}, {"body": "wondering make helper utilsjs kind iteration since seem lot helper uses keys loop vs foreach", "d": "9/2014"}, {"body": "submitted fix specific instance", "d": "9/2014"}, {"body": "would good place create demo issue", "d": "9/2014"}, {"body": "thanks stefanpenner link work new using jsbin", "d": "9/2014"}, {"body": "sometimes click run times refresh sure links nt work sometimes jsbin", "d": "9/2014"}, {"body": "thanks fivetanley posted link instead confirm replicate issue ios works fine browsers far aware including chrome ios", "d": "9/2014"}, {"body": "update seems timing issue ios safari way assets loaded devices confirmed iphone works fine iphone original comment getting error message ember complaining line inside mixincreate typeerror attempted assign readonly property", "d": "9/2014"}, {"body": "narkeeso thanks found workaround issue possible fix ember app completely broken ios", "d": "9/2014"}, {"body": "take look shortly finally free time", "d": "9/2014"}, {"body": "thanks stefanpenner case helps closest discussion able find", "d": "9/2014"}, {"body": "happening app leaving unusable iphone ios simulator real phone pretty rough post back figure workaround", "d": "9/2014"}, {"body": "ah went installed yosemite p forgot believe free time evening dig sorry leaving one hanging", "d": "9/2014"}, {"body": "thanks stefanpenner let know goes need info help way", "d": "9/2014"}, {"body": "jcohlmeyer hey looking unfortunately unless missing something jibs works fine ios safari double check issues still maybe also share device info possible", "d": "9/2014"}, {"body": "reading hear might device specific problem note devices x iphone ios works x ipad retina mini ios works iphone ios failse iphone work tomorrow x iphone danmcclain works going try simulators dinner x ios simulator works x iphone simulator fails iphone ios nt work nt one handy", "d": "9/2014"}, {"body": "work ios iphone", "d": "9/2014"}, {"body": "normal iphone ios work simulator real live phone choose iphone simulator works iphone simulator go even though ios", "d": "9/2014"}, {"body": "chrisvariety awesome simulator pointed work digging", "d": "9/2014"}, {"body": "broken ios works ios plus errors backburner somewhere method typeerror attempted assign readonly property", "d": "9/2014"}, {"body": "unfortunately error misleading tracked", "d": "9/2014"}, {"body": "going try dig inspirationideas exploration", "d": "9/2014"}, {"body": "running ember error tracking pointing", "d": "9/2014"}, {"body": "johanneswuerbach suspect coincidence", "d": "9/2014"}, {"body": "johanneswuerbach device", "d": "9/2014"}, {"body": "error tracking recorded lot errors nt ios gm update gm final build", "d": "9/2014"}, {"body": "similar issues error one solved good info maybe", "d": "9/2014"}, {"body": "johanneswuerbach appears device specific issue", "d": "9/2014"}, {"body": "chrisvariety first glance related dom elements far tell property configurable writable dom object correct wrong", "d": "9/2014"}, {"body": "johanneswuerbach line pointed error actually within function call unsure safari reports way", "d": "9/2014"}, {"body": "even confusion ember works production environment development environment theory something wrongdifferent ios webkit asset loading", "d": "9/2014"}, {"body": "apple going notice set retfoo retprotofoo set leads believe objectcreate broken likely opt similar bug found maymarch", "d": "9/2014"}, {"body": "unfortunately workaround used old bug use polyfil nt seem matter", "d": "9/2014"}, {"body": "believe found workaround running ember tests", "d": "9/2014"}, {"body": "examples provided fail every time fails consistently easy reproduce scenario", "d": "9/2014"}, {"body": "thanks stefanpenner hard work apple acknowledged issue", "d": "9/2014"}, {"body": "jcohlmeyer hoping find isolated reproduction evening time hopefully see new bug remanifestation existing one people reported pretty sure different issue due happening select hardware devices suspect devices bundled broken jsc ftllvm jit producing invalid platform specific code non devices something else", "d": "9/2014"}, {"body": "someone test released working test later tonight", "d": "9/2014"}, {"body": "jsbin link still broken iphone", "d": "9/2014"}, {"body": "updating iphone test side note ipad model also seems affected update looks like apple pulled update install iphone show via itunes update ipad", "d": "9/2014"}, {"body": "update looks like apple pulled update install iphone show via itunes update ipad jcohlmeyer crazy", "d": "9/2014"}, {"body": "ipad model confirming core ug far tell bit ones affected atleast showing symptons", "d": "9/2014"}, {"body": "would handy provided workaround build guys evening", "d": "9/2014"}, {"body": "stefanpenner workaround would help lot think ipad sure find thanks hard work", "d": "9/2014"}, {"body": "ipad ipad broken devices ipad wo nt work ipad ipad ipad ipad mini gen", "d": "9/2014"}, {"body": "mirror patch", "d": "9/2014"}, {"body": "vincentheet ios even run devices", "d": "9/2014"}, {"body": "stefanpenner ipad everything ok since nt run ios ca nt upgraded", "d": "9/2014"}, {"body": "stefanpenner thanks patch eta going included official release would rather include alpha version project near release thanks work", "d": "9/2014"}, {"body": "someone test day test late tonight", "d": "9/2014"}, {"body": "stefanpenner downloading", "d": "9/2014"}, {"body": "downloaded last night iphone jsbin still fails white screen death", "d": "9/2014"}, {"body": "jcohlmeyer chrisvariety thanks guys thats bummer sorry extremely busy week time reduce bug submit bugreport yet maybe someone else time", "d": "9/2014"}, {"body": "stefanpenner chrisvariety sorry report bad news confirm ios fix error fix works safari iphone work safari stand alone mode see works soon add home screen longer works shows error console", "d": "9/2014"}, {"body": "jcohlmeyer fml suspect weekend unfortunately client work right wo nt time till late eveningtomorrow continue dig", "d": "9/2014"}, {"body": "jcohlmeyer good news nt standalone mode still works", "d": "9/2014"}, {"body": "jcohlmeyer try non minified build", "d": "9/2014"}, {"body": "stefanpenner tried luck", "d": "9/2014"}, {"body": "jcohlmeyer thanks without investigating bug safari different place ember dig thoroughly weekend", "d": "9/2014"}, {"body": "sorry guys", "d": "9/2014"}, {"body": "jcohlmeyer try jsbin see works", "d": "9/2014"}, {"body": "twokul sure works perfectly iphone ios safari browser stand alone mode could please share changed get work stefanpenner", "d": "9/2014"}, {"body": "jcohlmeyer grief nt know exactly happening guess something basically piece code function reassigns descriptors nt work wrap starts work although still throws exception assigning read property javascript try newretdescs ocreate retdescs catch e newretwatching ocreate retwatching newretcache newretcachemeta newretsource obj also returns continue poke stick stay tuned", "d": "9/2014"}, {"body": "twokul sure read thread already discovered hack works around version merely breaks ember descs cloned children leak parents failure case u look closely resets parents descs new descs ultimately hopefully noop likely valuable understand work around works safari bookmarked suspect lead us valuable information also suspect point another place like actionsfor use ocreate hotspot another approach revert hack try force jsc optimize tracing path suspect statement eval statement may sufficient maybe using polyfil ocreate placing eval inside even inlining polyfil ends brain dump", "d": "9/2014"}, {"body": "stefanpenner removing module fixes modes jsbin", "d": "9/2014"}, {"body": "twokul wow interesting krisselden actually suggested try", "d": "9/2014"}, {"body": "stefanpenner isolated example nt work works without", "d": "9/2014"}, {"body": "twokul slight different related breaks browsers issue break think overlap issues hence confusion", "d": "9/2014"}, {"body": "need repo reproduces scenario devices fail", "d": "9/2014"}, {"body": "interestingly scenario involve native primitive use strict binding primitive object create", "d": "9/2014"}, {"body": "perfect storm bugs", "d": "9/2014"}, {"body": "seems related jsbin reproduce", "d": "9/2014"}, {"body": "twokul related yes likely good info investigation manifests even desktop safari scenario unique specific architectures", "d": "9/2014"}, {"body": "jnovatnack nt seem bug property explicitly specified controller proxied content nullify emselect tries set value prop content hence blows either define prop explicitly controller reset model empty object", "d": "9/2014"}, {"body": "think bit iffy strike funny setting content causes handle update value also try set value causes error input views trigger error case", "d": "9/2014"}, {"body": "jnovatnack maybe yet another emberselect weirdness perhaps one also concerned", "d": "9/2014"}, {"body": "maybe something lump", "d": "9/2014"}, {"body": "jnovatnack bad would link issue", "d": "9/2014"}, {"body": "ahacking could provide failing code", "d": "9/2014"}, {"body": "closing lack response reopen jsbin find still issue", "d": "9/2014"}, {"body": "cloning options passing view calls help indeed helps sure treated like bug", "d": "9/2014"}, {"body": "drogus view helper nt modifying options build props view create", "d": "9/2014"}, {"body": "drogus indeed help agree krisselden ideal solution", "d": "9/2014"}, {"body": "able reproduce emberjs tests master take closer look see happening exactly", "d": "9/2014"}, {"body": "krisselden view helper nt modify options example think would doable remove state changes would require bit refactoring option would always clone object method javascript nt native deep clone would either rely jquery extend write something emberjs", "d": "9/2014"}, {"body": "updated jsbin removed call tests passing sure change caused issue also sure helper reregistered restored setup teardown moduleforhelper assume nt really necessary", "d": "9/2014"}, {"body": "manuelmeurer ton code coupled logic narrow bug specific issue would help us address quickly", "d": "9/2014"}, {"body": "meant manuelmitasch right smile", "d": "9/2014"}, {"body": "seems like emberqunit bug ember proper", "d": "9/2014"}, {"body": "manuelmeurer haha yes sorry", "d": "9/2014"}, {"body": "mixonic quite mysterious bug solution used hours dig stacktraces involved libraries ember qunit emberqunit handlebars quite complex tried narrow succeed come adding removing also confused frist place anything else effect thanks matthiasleitner able make move metal views yeah", "d": "9/2014"}, {"body": "correct behavior including flags explicitly said want logging enabled want enabled production include flags booting application", "d": "9/2014"}, {"body": "provide jsbin example app demonstrates issue please", "d": "9/2014"}, {"body": "go click settings link homepage good click dashboard link ca nt go pages", "d": "9/2014"}, {"body": "mturnwall make lowercase works changed two characters working jsbin totally sure case though", "d": "9/2014"}, {"body": "seeing currently link us particular methodprop", "d": "9/2014"}, {"body": "resolution issue might help", "d": "9/2014"}, {"body": "create jsbin demonstrating", "d": "9/2014"}, {"body": "submitted pr time releases rejected pr", "d": "9/2014"}, {"body": "think issue closed yet also contains cdnjscom auto update request cdnjs nt allow manual updates anymore means emberjs follow way auto updates using emberjs project great thing using cdn provider terrific thing also found could please reopen issue", "d": "9/2014"}, {"body": "happy publish cdnjs done every version since changed policies get things updated provided details needed proceed ember issue cdnjs one", "d": "9/2014"}, {"body": "provide jsbin even better failing test", "d": "9/2014"}, {"body": "almost certainly caused bug fixed pr update shortly", "d": "9/2014"}, {"body": "jsbin requested rwjblue yeah looks like thanks", "d": "9/2014"}, {"body": "tildeiorouterjs merged resolve", "d": "9/2014"}, {"body": "actually still pinned older version submitted update", "d": "9/2014"}, {"body": "review", "d": "9/2014"}, {"body": "timevans containerresolve model manager instanceof containerresolve model person true containerlookupfactory model manager used create treat", "d": "9/2014"}, {"body": "cc stefanpenner", "d": "9/2014"}, {"body": "nt break inheritance infact uses inheritance please sure grab collaborators via service locator container dependency injection framework problem also make code resilient future framework level improvements planned area", "d": "9/2014"}, {"body": "stefanpenner happens using embercli use case eg personjs javascript import ds emberdata var hasmany dshasmany export default dsmodelextend emailaddresses hasmany emailaddress managerjs javascript import person person export default personextend emailaddressjs javascript import ds emberdata var belongsto dsbelongsto var attr dsattr export default dsmodelextend person belongsto person address attr string controllersemailaddressjs javascript import ember ember var oneway emberoneway var get emberget export default emberarraycontrollerextend needs person person oneway controllersperson actions createemailaddress function address thisstorecreaterecord emailaddress person get person address address", "d": "9/2014"}, {"body": "think good point definetime class inheritance sure support though could skip container mixin something pain", "d": "9/2014"}, {"body": "version ember happening looks like using", "d": "9/2014"}, {"body": "mmun still issue though sure duplicate another issue yes pr fix issue", "d": "9/2014"}, {"body": "plnkr written also happens version used project", "d": "9/2014"}, {"body": "sure seen issue ca nt find leave open", "d": "9/2014"}, {"body": "wagenet duplicate many opened issues issue thisinitcapitalproppaths path observer chain normalizes differently path metawatching", "d": "9/2014"}, {"body": "thanks krisselden could please include issue currently tracking know go follow issue workaround suggested", "d": "9/2014"}, {"body": "first problem called nested run loop see causing nested calls bad algorithm uses shared memory intended called recursively also makes tricky check another underlying issue one fixed perhaps work better sync events like cc stefanpenner", "d": "9/2014"}, {"body": "jquery event triggering raises hell", "d": "9/2014"}, {"body": "mmun would work nested buy sequential describe problem nested would fix problem initial thoughts let get krisselden sanity check", "d": "9/2014"}, {"body": "reason wanted runjoin first place definitely", "d": "9/2014"}, {"body": "machty thoughts", "d": "9/2014"}, {"body": "problem", "d": "9/2014"}, {"body": "wanted mention include htmlbars includes mostly internal refactor view layer calling metalviews try review jsbin detail bit later", "d": "9/2014"}, {"body": "css behavior expecting nt see table striping provided jsbin first third following rule applied ff custom css targets rather may fail due empty text nodes adds guessing nt tested", "d": "9/2014"}, {"body": "chrome first one stripe second one using", "d": "9/2014"}, {"body": "metalviews currently handle contextual elements worked need add tbody mean time", "d": "9/2014"}, {"body": "ryanto still broken see first row striped chrome", "d": "9/2014"}, {"body": "first table striped striped bootstrap css selector requires sure generated", "d": "9/2014"}, {"body": "bantic earlier post missed fact two tables jsbin table arrow styling however playing see bootstrap specifically targets tbody used style nt added seems like css issue", "d": "9/2014"}, {"body": "jerel mmun gotcha html spec actually says tbody optional start tag crazy next element tr browsers correctly implement html spec html dom generated html actually include element start end tag omitted makes sense bootstrap css selector includes see console reason first table jsbin tbody added bug think internally using jquery generating trs getting appended table ie building dom browser builtin html parser getting bypassed guess reason jquery nt correctly catch parsing html handlebars still script tags morphs string moment rtagname regex jquery thus gets confused nt notice needs wrap tr tags tbody thus possible make table wrong way trs tbody building dom hand console think happening first table jsbin thus reason tbody dom css nt applied", "d": "9/2014"}, {"body": "problem compounded example handlebars foos bars generate two tbodys one none suspect autogenerate tbodys leave user manually specify wrapped", "d": "9/2014"}, {"body": "well according html spec would generate one tbody assuming interiors resulting html dom template would single tbody around two trs html parsed dom seems like proper result valid html multiple sidebyside though place user would required specify would wanted according html spec pure html anyway want multiple something like foos bars", "d": "9/2014"}, {"body": "assessment correct metalviews typically adding content appendchild rather innerhtml used triple curlies tbodys inserted browsers parsing appendchild parsing seems complex implement semantics parsing metalviews htmlbars", "d": "9/2014"}, {"body": "imo plausible htmlbars would exceedingly difficult metalviews significant regression sure sure plausible fix htmlbars lands report back", "d": "9/2014"}, {"body": "nt think htmlbars bearing difficulty problem issue new metalviews renderer metalviews renderer would need aware tree construction quirks defined spec", "d": "9/2014"}, {"body": "discussion notes exception regarding edge case metamorphs really related bootstrap though fact bootstrap expects tbody added relevant metalviews renderer make best effort add optionally omitted start tags tbody colgroup tags add tbody least surprising thing fwiw htmlbars need support adding tbody raw handled htmlbars though", "d": "9/2014"}, {"body": "seems like stackoverflow question also emberdata repository exists", "d": "9/2014"}, {"body": "stefanpenner ya stackoverflow question post question emberdata", "d": "9/2014"}, {"body": "maheshiv posted question nt open issue specifically bugs questions", "d": "9/2014"}, {"body": "stefanpenner sorry", "d": "9/2014"}, {"body": "duplicate problem bindings context non object helpers inside use strict module transpiler", "d": "9/2014"}, {"body": "worth noting throws uncaught error index range seen error writing array computed helper thought bug side nt time debug think still failing test isolated ie one arraycomputed function case somewhere look later today", "d": "9/2014"}, {"body": "run sorts weirdness difficult track stacking arraycomputed properties together try narrow simplest examples things make us go wtf work worth looking well", "d": "9/2014"}, {"body": "investigated seems problem lays timing calling issue reduced following script javascript var obj emobjectextend collection firstname kris lastname selden isrouterman false firstname luke lastname melia isrouterman false firstname formerly alex lastname matchneer isrouterman true mortalssort isrouterman unsortedmortals emcomputedfilterby collection isrouterman false mortals emcomputedsort unsortedmortals mortalssort create var kris objget mortalsfirstobject var anotherobj emberobjectcreate kris kris isroutermanbinding krisisrouterman would work krisset isrouterman true anotherobjset isrouterman true property set object directly works correctly set binding fail yet sure exactly happens binding case callback called null object value property used binary search fails find proper item particular case items filtered array binary search returns index try narrow even fix help appreciated trying get better understanding embermetal emberruntime", "d": "9/2014"}, {"body": "able narrow think fix although sure correct nt break tests starting understand going emberjs internals basically problem creates object without passing previous properties values results problem binary search explained previous comment code fixes javascript diff git apackagesemberruntimelibcomputedreducecomputedjs bpackagesemberruntimelibcomputedreducecomputedjs index apackagesemberruntimelibcomputedreducecomputedjs bpackagesemberruntimelibcomputedreducecomputedjs dependentarraysobserverprototype thissuspended return var changemeta var changemeta changeditem previousvalues var guid guidfor dependentarray var dependentkey thisdependentkeysbyguid guid var itempropertykeys thiscpitempropertykeys dependentkey dependentarraysobserverprototype changemeta new changemeta dependentarray item itemindex thisinstancemetapropertyname thiscp normalizedremovecount changeditem thischangeditems guidfor item previousvalues changeditempreviousvalues changemeta new changemeta dependentarray item itemindex thisinstancemetapropertyname thiscp normalizedremovecount previousvalues thissetvalue removeditemcall thisinstancemetacontext thisgetvalue item changemeta thisinstancemetasugarmeta work proper pr tomorrow getting late unless someone sees problem proposed change", "d": "9/2014"}, {"body": "examples problems stacked properties patch fixes case provided original jsfiddle really curious fixes also bugs requires changes latter case happy work", "d": "9/2014"}, {"body": "make helpers process simple bindings formatting helper creates view nt support children ca nt currently call another helper adds view prior beta sort worked though edge cases continuing improve consistency unquoted paths meaning bound property hopefully work soon likely add ongoing work make helpers consistent hopefully land beta also use private helper api kind complex moment redo htmlbars lands", "d": "9/2014"}, {"body": "thanks explanation going close issue since problem falls somewhat wrong category check forum see anyone patterns polymorphicish component rendering", "d": "9/2014"}, {"body": "synthresin much easier us verify resolve issue provide standalone simplified case jsbin jsfiddle", "d": "9/2014"}, {"body": "made pagination system api mocking problem happen anymore weird", "d": "9/2014"}, {"body": "someone made jsbin issue going foo path returning index path observer function fires intended behavior since results merging preexisting records store causing model invalidate", "d": "9/2014"}, {"body": "synthresin believe may issue please open ticket emberdata behavior ember objects glance would agree change events firing published property", "d": "9/2014"}, {"body": "context blocks changed wrapped item clearly incorrect corrected specifically using context preserving version caused context still switched incorrectly please take look details blog post believe current behavior correct", "d": "9/2014"}, {"body": "answer still observing proxies property nt defined directly set hook triggers observer", "d": "9/2014"}, {"body": "sets model controller ran entering route see list route hooks order try keep issues related bugs ember seems like stack overflow question feel free crosspost issue post", "d": "9/2014"}, {"body": "issue posted accident full issue posted", "d": "9/2014"}, {"body": "charliemitchell probably", "d": "9/2014"}, {"body": "want remove need flag suspect making changes nt really important", "d": "9/2014"}, {"body": "awesome stefanpenner imply plan enabled default edit spoke stefan offline indicated enabled default", "d": "9/2014"}, {"body": "stefanpenner close", "d": "9/2014"}, {"body": "could added emisempty testing objects", "d": "9/2014"}, {"body": "think distinction looking null checking use completely misread sorry", "d": "9/2014"}, {"body": "workmanw usecase nt null checking passing object need remove specific property object present check see object properties empty javascript typeof queryprocedure undefined var proc queryprocedure var get delete queryprocedure check see additional query params currently emberisempty query always return false even query additional properties emberisempty query post returns false correct object nt null empty", "d": "9/2014"}, {"body": "isempty meant check empty objects", "d": "9/2014"}, {"body": "decided could nt guarentee results across browsers browsers concept user defined non enumerable methods point time drop could revisit", "d": "9/2014"}, {"body": "thanks stefanpenner close use taras suggested method", "d": "9/2014"}, {"body": "think idea improve also ran worked around first need improve error helpful assertion likely need come good number test cases see far solutions get believe scenarios may stay impossible case hopefully assert accordingly", "d": "9/2014"}, {"body": "believe exact issue supported imagine ever supported improve error message though legitimate scenarios able make work add better error message", "d": "9/2014"}, {"body": "thanks looking stefanpenner bad work around pulling nested resource outside parent lose benefit able call child route repeat parent full path child path defining routes fact surprised nt people wanting something like run several situations resource logically child another one requires data parent render appropriately nt want display parent template route", "d": "9/2014"}, {"body": "wycats machty tomdale guys review", "d": "9/2014"}, {"body": "interestingly demonstrate failure returning parent route maybe something intend support try find time investigate", "d": "9/2014"}, {"body": "rendering ancestors supported specific rules around take look example get chance", "d": "9/2014"}, {"body": "mziwisky need understand little default render template default set last template rendered main outlet thus list item resource navigated away need also explicitly set render middle template since clobbering child also affecting default rendering application main outlet need override defaults routes render application", "d": "9/2014"}, {"body": "thanks following making example", "d": "9/2014"}, {"body": "thanks input krisselden could please clarify meant main outlet unnamed outlet application route also jsbin example nt quite accomplish wanted set listindexroute render application really wanted render list make change issue appears admit nt picked apart implementation really understand going seems whenever jump route whether clicking linkto typing url navigation bar going back browser view hierarchy constructed every time perhaps using param way intended test stefanpenner refers posts would suggest otherwise", "d": "9/2014"}, {"body": "ppcano register", "d": "9/2014"}, {"body": "mistake fixed please follow", "d": "9/2014"}, {"body": "ah sorry nt crawl throug issues emberjswebsite", "d": "9/2014"}, {"body": "worries get fixed soon", "d": "9/2014"}, {"body": "complete getting started guide", "d": "9/2014"}, {"body": "yes got confused examples main site autoupdating handlebars templates components loading data server routing use hbs files different approach described getting started guide got impression hbs file approach new routing example tried merge hbs files single js file run got blank page javascript error", "d": "9/2014"}, {"body": "would say belongs stack overflow discussemberjscom except strongly agree existing documentation confusing beginners nt experience building frontend applications using build tools common problem ember advanced frontend project longer true need know little htmlcssjs accomplish lot hbs files nt new approach typically need build tools use nt use build tools individual template needs wrapped script tag appropriate name placed html file like gotten feet little wetter look learning learning regards build tools organized code workflow environment", "d": "9/2014"}, {"body": "runspired great comments would definitely supportive someone making ember frontend beginners guide", "d": "9/2014"}, {"body": "error correct ca nt manually render view like outside rendering process probably nt want ember template helpers ember provides expect view present via optionsdataview order setup observers bindings theory could try template name fred data buffer somebuffer use somebufferstring instead recommend compiling templates handlebarscompile emberhandlebarscompile better suited want", "d": "9/2014"}, {"body": "ah ok sorry trouble", "d": "9/2014"}, {"body": "trouble", "d": "9/2014"}, {"body": "mmun would reasonable emberview public function would allow template rendered string using unbound properties given context third party libraries need string html seem inevitable happily sharing view templates", "d": "9/2014"}, {"body": "aceofspades sounds reasonable could explain use case want use ember handlebars template rather vanilla handlebars template using standard way well string serialization", "d": "9/2014"}, {"body": "assume vanilla would fine adapting example bombs triagemustache calling expects container way fetch raw template markup missing handlebars could used directly", "d": "9/2014"}, {"body": "vanilla handlebarscompiled templates nt use buffer construct unique ember handlebars compiler ember view layer example meant vanilla template", "d": "9/2014"}, {"body": "even better missing fetch raw markup template missing something blatantly obvious", "d": "9/2014"}, {"body": "aceofspades sure mean output string html", "d": "9/2014"}, {"body": "mmun input problem ie getting source templatehbs maybe embercli thing precompiles templates front", "d": "9/2014"}, {"body": "template source accessible yes need set embercli precompile handlebarsprecompile vs emberhandlebarsprecompile nt think addon exists", "d": "9/2014"}, {"body": "ah yes think confusion comes work embercli kindly one assumes precompiled emberhandlebarstemplates would useable nonember stuff particular use case", "d": "9/2014"}, {"body": "seems feature loss listed breaking change precompiled template rendered string outside context dom maybe stated accurately someone familiar internals several posts discourse elsewhere show render string longer work seems like important feature certainly breaks app mmun thanks taking time comment", "d": "9/2014"}, {"body": "use case integrate emberselectize integration ember selectize selectize accepts render functions render options items etc functions return strings would great could handlebars templates customize rendering basically need render template context get string give selectize got covered part getting string understand problem using bindings template ca nt expect bindings work string would possible render ember template without bindings using current context later properties changed could trigger rerender selectize make call render function guess feature may important integrate libraries like seen typeaheadjs related issue", "d": "9/2014"}, {"body": "one assumes precompiled emberhandlebarstemplates would useable nonember stuff lt true never suggested aceofspades still unsure referring ask ember buffer string general ember supposed manage rendering templates dom usecase something different miguelcobain kind behavior would want see provided interoperable web components easiest components speak dom since universal ui language web selectize expects string html make challenging use ember templates using likely close would also need change avoid ember outputting dom fwiw selectize expects strings could open ticket add support optionally returning dom instead string also fwiw selectize supports api family programmatically setting values would strings another option consider authoring helper instead view would bit lowerlevel allow bypass ember views data binding htmlbars need get outerhtml innerhtml helper block since inner block would return dom handlebars raw string would available end day regardless well support strings ember going dom based rendering engine internally stringbased rendering engine far slow viable longterm using dom also enable bunch fantastic new syntaxes make authoring templates easier urge keep mind although supporting strings html still something existing apis consider avoiding string html code reasons", "d": "9/2014"}, {"body": "mixonic informative also contributor emberleaflet problem trying use ember views marker popups map things worked great leaflet accepts dom elements aware selectize expects strings problem open ticket maybe try implement nt know difficult might first thought selectize took dom element function take string continue would nt work know ideal approach would make actually use dom element could possibly outline flow kind things work thanks", "d": "9/2014"}, {"body": "mixonic posts github discourse core members shown render view string procedure longer works saying breaking change confused would opposed nt tons libraries work html strings reasons might want leverage template render something browser dom ember nt cripple developers expect every library accommodate ember better way reinvent wheel rewrite already proven code current pain point also selectize render hooks used generate markup used elsewhere app display common metaphor really prefer able keep one template render manually needed make plugin happy concentrate business logic personally nt think selectize problem open tickets anyway", "d": "9/2014"}, {"body": "aceofspades using emberselectize try encapsulate whatever outcome repo ember always encouraged best practices since using html strings nt one surprised nt easy ember would love solution", "d": "9/2014"}, {"body": "mixonic posts github discourse core members shown render view string procedure longer works saying breaking change yup agree renderbuffer public public things getting conflated agree statement let us focus jsbin original comment looks like valid usage think explained encourage strings last comment better way goal definitely cripple developers let keep emotions steady", "d": "9/2014"}, {"body": "fwiw jsbin looks correct rendering string nt seem", "d": "9/2014"}, {"body": "get jsbin disconnected render buffer behavior working", "d": "9/2014"}, {"body": "agreed ember things better way within scope need escape hatch leverage code cloned jsbin working", "d": "9/2014"}, {"body": "machty thoughts", "d": "9/2014"}, {"body": "fixed included things fixed", "d": "9/2014"}, {"body": "get current stable build bower via download files", "d": "9/2014"}, {"body": "thumbsup thanks", "d": "9/2014"}, {"body": "rwjblue word expected fix", "d": "9/2014"}, {"body": "never mind nt read query param values ember sticky part documentation srry close", "d": "9/2014"}, {"body": "preserves query parameters used workaround", "d": "9/2014"}, {"body": "machty bug", "d": "9/2014"}, {"body": "likely always watching", "d": "9/2014"}, {"body": "could error related different objects", "d": "9/2014"}, {"body": "object wrap testing cases like function application applicationlobbyindexroute emberrouteextend redirect function thisreplacewith lobbydashboard app", "d": "9/2014"}, {"body": "weichienhung full stack trace better yet way make simplified version app someone actually take look see error action", "d": "9/2014"}, {"body": "wagenet add simplified test case see exception redirect console output put test case emberjs see redirect ok console output", "d": "9/2014"}, {"body": "looks like discussion happening issue repo going close let know reopen", "d": "9/2014"}, {"body": "please reopen changed embersplitview code use attribute bindings works great ember changes pushed master rendering problems shown also fixed ember still problem using ember appears property set parent view child view property observer child view fired result child split views properly initialized sash views moved trace output run ember two key lines trace trace output run ember notice last call splitchildupdatechildsplitview update width height change seen splitviewstyle", "d": "9/2014"}, {"body": "traces vertical composite example", "d": "9/2014"}, {"body": "bryanhunt update comment things rendering problems shown also fixed ember issue two console logs comment say", "d": "9/2014"}, {"body": "updated comment indicate second trace output ember better describe resulting problem", "d": "9/2014"}, {"body": "problem fixed ember", "d": "9/2014"}, {"body": "bryanhunt yay", "d": "9/2014"}, {"body": "dbashford could try using using almond bash terminal npm install g derequire derequire f define defi emberjs gt embermodifiedjs", "d": "9/2014"}, {"body": "quick conversation dump irc", "d": "9/2014"}, {"body": "possible rjs detect require nested within scope loader require extra book keeping scope tracking", "d": "9/2014"}, {"body": "stefanpenner current plan add build thing like defeatureify", "d": "9/2014"}, {"body": "seems like good plan", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "dbashford using work need know since plan using production builds helps", "d": "9/2014"}, {"body": "running rjs result seems desired effect", "d": "9/2014"}, {"body": "thanks confirming work updating build next days", "d": "9/2014"}, {"body": "update", "d": "9/2014"}, {"body": "fwiw one project stuck requirejs ca nt upgrade specific bug gets fixed problem resolved solution latest requirejs believe works without changing anything else adding extra requirejs config works still problem needs shimming regardless many folks may find upgrading requirejsrjs solution problem", "d": "9/2014"}, {"body": "machty thoughts", "d": "9/2014"}, {"body": "workmanw seems like proposal belong forums ping us individually especially machty need feedback thanks", "d": "9/2014"}, {"body": "better yet make rfc", "d": "9/2014"}, {"body": "aexmachina suggesting add new event type", "d": "9/2014"}, {"body": "would good textfield emit event find unexpected provided", "d": "9/2014"}, {"body": "think event triggered keeps normal behaviour text inputs avoids additional code think quite useful user input validation stuff", "d": "9/2014"}, {"body": "reason event triggered", "d": "9/2014"}, {"body": "admit monkey patching textfields textareas emit change event one first things ember projects seem like strange omission", "d": "9/2014"}, {"body": "regards second part thisget parentviewcontroller reliable way access data interested", "d": "9/2014"}, {"body": "kempchee yes fact roughly ember internally binds", "d": "9/2014"}, {"body": "tracking", "d": "9/2014"}, {"body": "issue appears manually binding array classnamesbinding think classnames property defined concatenatedproperties therefore binding array breaks results emberview class attach view event handling work", "d": "9/2014"}, {"body": "opsb get chance look", "d": "9/2014"}, {"body": "wagenet back project currently wading dependency hell stupidly nt lock versions bower trying find good configuration bower lockfiles", "d": "9/2014"}, {"body": "krisselden think line people use use hook", "d": "9/2014"}, {"body": "think rwjblue right though see could confusion going close please let know ideas fixing ways warn people", "d": "9/2014"}, {"body": "closing favor mixonic pr", "d": "9/2014"}, {"body": "many ways cycle could appear could try adding assert simplest case namely way caught development stripped prod build prs welcome dancer", "d": "9/2014"}, {"body": "think stumbled upon related issue sure needs separate ticket github works cases besides bootup throws fixed using though feels wrong jsbins without emberrunnext throws error emberrunnext prints redered console", "d": "9/2014"}, {"body": "running exact issue modal wrapping emberrunnext fixes feels wrong well", "d": "9/2014"}, {"body": "didinsertelement hook firing case observes cssinfo goal alias change behave identical observes controllercssinfo herom observers views nt check property changes view actually dom view element returns undefined yes change alias idea alias mirror behavior target property laziness cp problem cp computed observed alias alias would nt also computed stefanpenner behavior wo nt fixed target alias nt lazy alias adding laziness idea ensure getsetobserves identical behavior alias target particular change intentional change worked observers view update dom guard dom always fragile thing", "d": "9/2014"}, {"body": "krisselden thanks explanation meanwhile came around issue wrapping code run loop works pretty well case", "d": "9/2014"}, {"body": "might related base tag gradient url resolution involves document base tag", "d": "9/2014"}, {"body": "jsbin red herring nt work iframe jsbin cloned renders great outside iframe believe source incompatibility regardless ember specific issue issue specific rendering svg dynamically inside iframe thanks salzhrani", "d": "9/2014"}, {"body": "jayphelps using workaround gave second jsbin using binding default value read controller prototype controller instance initialized data begin flow query param value computed property", "d": "9/2014"}, {"body": "bug application pageusers pagepage", "d": "9/2014"}, {"body": "got bitten consider bug", "d": "9/2014"}, {"body": "put together hope valid pr", "d": "9/2014"}, {"body": "recalculation mmun mentions happens seems could removed compound dependent keys mentioned implemented", "d": "9/2014"}, {"body": "would like work compound dependent keys green light work done area asking consider part todo list item ie sure still relevant wanted change", "d": "9/2014"}, {"body": "reference another issue relationships select component treat promise async relationship another object", "d": "9/2014"}, {"body": "fixes issue select element seems like theres major rewrite needed might time nt sure issue means new element going created instead one going keep fixing issues existing element", "d": "9/2014"}, {"body": "described guide", "d": "9/2014"}, {"body": "concluded issue likely requiring sorted members change one time", "d": "9/2014"}, {"body": "flyswatter seeing similar problem cps tests teardown appdestroy called store torn setdiff attempts recompute array depends longer exists seems like cps torn store reopen issue cc raycohen stefanpenner", "d": "9/2014"}, {"body": "denisnazarov please provide jsbin demonstrating would like see actual scenario fail reason exact scenario", "d": "9/2014"}, {"body": "rwjblue ping", "d": "9/2014"}, {"body": "recently updated also found components built stopped working rare needed access component within yield happen advantageous could convert existing components views lose ability specify specific actions actions within view without extending ability onto view one example used file upload component took care uploading file within component overview seen block format still allow access component call actions component work solution meantime implement alternative would nice way access component within yield handlebars updated allow block statements", "d": "9/2014"}, {"body": "fixed", "d": "9/2014"}, {"body": "krisselden perhaps missing something merged", "d": "9/2014"}, {"body": "saw closed assumed merged sorry", "d": "9/2014"}, {"body": "machty thanks one started using upgrading dasherizedqueryparams ocd check", "d": "9/2014"}, {"body": "created pr firing events additional current hooks regarding event discussed think handled action proposed", "d": "9/2014"}, {"body": "need resolution ember nice generic enumerable mixin trying put work get speed large ordered collections ideally would rewritten work entirely api many performance implications generic handlebars helper iterate would excellent compromise", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "thumbsup", "d": "9/2014"}, {"body": "pretty nasty bug especially considering fact almost every web app needs render sorted lists bitten literally every project ever worked ember edit got around bug taking nmk comment heart ensuring updates array subject happen one item time instead replacing entire array go addremove items one time ensuring wrap process anything like would cause updates happen en masse rather individually alternatively use fix nmk js bin avoids using altogether", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "great creating dynamic templates", "d": "9/2014"}, {"body": "jakecraige wanted add approach need enclose context variable quotes instead one might expect held thought others might issue", "d": "9/2014"}, {"body": "searls gave thing try today started writing failing test fact nt fail could take look see anything different setup javascript qunitmodule arraycomputed compound dependent keys setup function callbackitems run function obj emberobjectcreatewithmixins items embera emberobjectcreate n one two itemsnm arraycomputed items n addeditem function array item changemeta instancemeta callbackitemspush added get item n get item removeditem function array item changemeta instancemeta callbackitemspush removed get item n get item teardown function run function objdestroy test compound keys used addeditem removeditem callbacks called change function var expected items items get obj items run function objget itemsnm run function set itemsget firstobject n two set itemsget firstobject one expected added one two removed two two added two two removed two one added two one deepequal callbackitems expected changemeta includes previous values", "d": "9/2014"}, {"body": "ssot branch merged bet fixed tue sep pm piotr sarnacki notifications githubcom wrote searls gave thing try today started writing failing test fact nt fail could take look see anything different setup reply email directly view github", "d": "9/2014"}, {"body": "sure related link issue referenced specifically initialization give reference something makes path observer object finishes path observers finishes paths rooted stored metachains instead path observers referenced stored metachainwatchers", "d": "9/2014"}, {"body": "updated jsbin", "d": "9/2014"}, {"body": "issue thiscaptialletterbindingtopathobserver normalizetuple deprecated support assuming capitalletter means global nothing router", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "seems like rendering issue well see variation original jsbin handlebars render array", "d": "9/2014"}, {"body": "iirc fix handles problem well", "d": "9/2014"}, {"body": "also exist future uglify would awesome", "d": "9/2014"}, {"body": "also exist future uglify would awesome", "d": "9/2014"}, {"body": "thumbsup running issue well narrowed embercomputedsort model inside arraycontroller", "d": "9/2014"}, {"body": "might nice clarify docs page says value returned setter cached property value might reasonably lead people believe bug", "d": "9/2014"}, {"body": "want get shit finished everyone please hold accountable bug nt pr soon", "d": "9/2014"}, {"body": "jayphelps done yet", "d": "9/2014"}, {"body": "davidpett trollface", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "news workarounds", "d": "9/2014"}, {"body": "jwahdatehagh ca nt confirm whether fluke actually workaround tried today instead pointing call point computed property case computed property happens filter controller content nt know strictly necessary maybe luck way", "d": "9/2014"}, {"body": "thanks opted using standard sortproperties option model weird workaround sorting properties different directions everything seems work far", "d": "9/2014"}, {"body": "fixed", "d": "9/2014"}, {"body": "rwjblue example longer works still possible thanks", "d": "9/2014"}, {"body": "thank help full", "d": "9/2014"}, {"body": "please note mobiletouch support may also need edit thanks tr", "d": "9/2014"}, {"body": "lastobelus ran problem well attempting transition nested route via hard browser refresh promise failure lead problem error action handler tries render outlet main application view returns array empty point lookup view called returns code proceeds try call help case unfortunately nt found solution yet please reopen", "d": "9/2014"}, {"body": "well old issue getting error using embercli", "d": "9/2014"}, {"body": "lightblade using production version ember wo nt add handlebars embercli use prodjs version handlebars use", "d": "9/2014"}, {"body": "hmok reason doc mention alternatives need", "d": "9/2014"}, {"body": "theeeen", "d": "9/2014"}, {"body": "canvas controller current route actions tostring appcanvascontroller appkitscontroller appkitscontroller appcanvascontroller sad true upd sorry solved problem correctly understand render helper", "d": "9/2014"}, {"body": "changing tag seems help style button look like button", "d": "9/2014"}, {"body": "lightblade ensure clickable entity nothing ember touch devices triggersimulate click events", "d": "9/2014"}, {"body": "add new computed property contains nested object trying observe works correctly use next method javascript alltickets function var sections thisget sections ember tickets property checkedcount function custom logic return something property alltickets eachischecked instead", "d": "9/2014"}, {"body": "closed anyone solution problem ubiquitous design pattern web design first andor last element list given special styling right good crossbrowser read ie way easily ember", "d": "9/2014"}, {"body": "seanroberts ember wont script tags anymore feel free test", "d": "9/2014"}, {"body": "stefanpenner oh awesome thank", "d": "9/2014"}, {"title": "parse element", "body": "using get back collection single attributes eg returns empty collection think happens first case goes second falls parser", "num": "1670", "d": "9/2014"}, {"title": "error", "body": "rrrrrrr function method verified parameters eg", "num": "1669", "d": "9/2014"}, {"body": "jquery version browser version google chrome", "d": "9/2014"}, {"body": "passing complex html browsers may generate dom exactly replicates html source provided mentioned jquery uses browser innerhtml property parse passed html insert current document process browsers filter certain elements elements result elements inserted may representative original string passed", "d": "9/2014"}, {"body": "seems bit strange could argue elements instead parsed wrapping something correctly transformed dom elements see guess special cases like also special strategy parsed", "d": "9/2014"}, {"body": "idea fix please share happy consider proper pr", "d": "9/2014"}, {"body": "mjesun keep mind though need create full html document starting element pretty rare cases pointed currently fix rare attempts fixing bulletproof usually sufficient really need create full document take look domimplementationcreatehtmldocument", "d": "9/2014"}, {"body": "documented accept array object arguments anything else undefined behaviour domain", "d": "9/2014"}]