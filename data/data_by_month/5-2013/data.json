[{"title": "make valid npm release", "body": "please make requireable npm release already fixed new version npm needed developed source transform jsx browserify reactify nt work properly", "num": "26", "d": "5/2013"}, {"title": "fix docs rake updateversion command strip trailing spaces", "body": "looks like mostly problem ruby yaml vs yaml one strips trailing space leaves also issue reordering least nt rewrite configyml version", "num": "24", "d": "5/2013"}, {"title": "small update bower command", "body": "could preferable use installation automatically saved", "num": "21", "d": "5/2013"}, {"title": "must adding comments jsx", "body": "must added following comments another way jsx reactdom", "num": "16", "d": "5/2013"}, {"title": "write tests reacttools module", "body": "least broken require", "num": "12", "d": "5/2013"}, {"title": "ca nt require reacttools module", "body": "trying programatically invoke jsx transformer using version npm registry running something like throws error comment lines requireuse module loads fine transformer runs correctly", "num": "10", "d": "5/2013"}, {"body": "run reactrequirejs instagram check repo run build bunch commonjs modules requirejs use via tool answer question", "d": "5/2013"}, {"body": "petehunt said work though exposes need might lead information overload look reactjs gets exposed shipping file hoping umd wrapper around reactjs would work decided maybe neither work definitely try make work box without custom build", "d": "5/2013"}, {"body": "thanks guys single react would sweet imho thu may pm paul shannessy notifications githubcomwrote petehunt said work though exposes need might lead information overload look reactjs gets exposed shipping file hoping umd wrapper around reactjs would work decided require react maybe require react neither work definitely try make work box without custom build reply email directly view github", "d": "5/2013"}, {"body": "pushed npm", "d": "5/2013"}, {"body": "good call updating", "d": "5/2013"}, {"body": "understood single comment pragma top file ps also nt like placing pragmas source code built reactify source transform browserify transforms jsx files extension js code though nt work yet npm due fixed needs released npm", "d": "5/2013"}, {"body": "unfortunate side effect releasing parts fbinstagram infrastructure internally nt enough time clean get rid high list things launched andreypopp nice cool see happening push npm update shortly", "d": "5/2013"}, {"body": "zpao get react gorgeous", "d": "5/2013"}, {"body": "bah changed build filenames last minute nt properly test module thanks finding guess write tests node module phantomjs tests short term able change fix problem benjamn guess time figure want npm versions vs library versions bump time", "d": "5/2013"}, {"body": "nope alone wo nt even packaging totally screwed node module fix soon", "d": "5/2013"}, {"body": "yeah nt look like even directory", "d": "5/2013"}, {"title": "options longer accessible views", "body": "recently upgraded seems version options object view longer existing code within view tries access thisoptionsproperty always fails thisoptions always undefined using underscore also tried difference rolling back backbone makes everything work", "num": "2580", "d": "5/2013"}, {"title": "collectionfetch url option inconsistent", "body": "hello done upgrade application upgrade could use collectionfetch url anurl change url collection request url request always good side effect url attribute models created request equals option url fetch future requests models false even urlroot defined model comportment normal customize url request thanks advance", "num": "2578", "d": "5/2013"}, {"title": "modelset method", "body": "nt know recursively nested give example looking forward help", "num": "2577", "d": "5/2013"}, {"title": "backbonejs fetches values pass asyc false parameter fetch method", "body": "usernames populated use usersfetch async false use usersfetch get empty array document ready function var bookingmodel backbonemodelextend json bookingid bookingsourceid online bookingtime noofpeople reservedate restid timingid bookingid bookingtime noofpeople reservedate restid timingid bookingid bookingtime noofpeople reservedate restid timingid bookingid bookingtime noofpeople reservedate restid timingid bookingid bookingtime noofpeople reservedate restid timingid bookingid bookingsourceid online bookingtime noofpeople reservedate restid timingid bookinguser hareesh bookingphoneno bookingemail makamhareesh gmailcom", "num": "2575", "d": "5/2013"}, {"title": "fault", "body": "see question need help", "num": "2574", "d": "5/2013"}, {"title": "add valid event triggered form goes invalid valid state", "body": "currently invalid event would nice also valid event triggered forms goes valid state invalid without event easy notified models entered valid state use case building form handy listen invalid event show errors valid clear changes required see unshifted line code think", "num": "2571", "d": "5/2013"}, {"title": "ie form elements name variable name", "body": "template ie form element name name variable variable affect normal", "num": "2570", "d": "5/2013"}, {"title": "add repository field packagejson", "body": "npm complains repository field set packagejson", "num": "2569", "d": "5/2013"}, {"title": "add new model id equals existing cid collection", "body": "javascript create collection var col new backbonecollection create first model application coladd id x consolelog col first model created application new model cid trying add new model collection id coladd id x consolelog col fail first model updated instead add new one coladd updates first model instead create new one new model id first model cid collection", "num": "2568", "d": "5/2013"}, {"title": "inconsistent fragment coding across browsers", "body": "using backbone firefox latest stable version plenty related issues related issues decided backbone handle fragment coding inconstantly causing fundamentally different code execution across browsers fathom example app search term typed chrome opera ios etc search path executed reexecute firefox however first spacebar pressed every single character afterwards causes reexecution route causing app entire layout rerendered time search looses focus keystroke decided encode firefox decode every browser understand code execution across browsers achieved adding back odd function removed also comment explains exact opposite issue firefox firefox space character encoded thus needs decoded create consistency browsers someone able explain done thanks", "num": "2566", "d": "5/2013"}, {"title": "allow events object bind elements outside views root element", "body": "hi often find situations event occurs outside elements boundaries relevance backbone view especially complex operations mouse let give example want toolbar appear shake mouse appear shake mouse anywhere document get work properly need make bindings initialize function correct dom object would love ability bind events event object occur elements outside views el suggest using keyword document allowing use css selectors specific", "num": "2564", "d": "5/2013"}, {"title": "elheight always return", "body": "hi backbone view try retrieve height el element applying view template like result always thanks advance", "num": "2563", "d": "5/2013"}, {"title": "error result objectlistento nullundefined difficult debug", "body": "accidentally pass nullundefined reference eventslistento method get error point future unfortunately gives little work tracking actual cause would great could improved little example either throw error ignore calls listento nullundefined alternatively throw little info error state detected thoughts", "num": "2562", "d": "5/2013"}, {"title": "add use super documentation", "body": "article found super documentation say anything brief aside super javascript provide simple way call super function name defined higher prototype chain override core function like set save want invoke parent object implementation explicitly call along lines mention added docs would nice could objectsuper method built backbone like one article cited", "num": "2561", "d": "5/2013"}, {"title": "listening custom events work", "body": "thought used work nt seem set custom event like thought would trigger listeners bound either namespace case bug code example trigger session loginsuccess two specific events fire namespace one", "num": "2558", "d": "5/2013"}, {"title": "contribute docs", "body": "like add things docs brought trouble lack examples details method parameters specifically example found collectionremove work like like like take ids models attribute hashes", "num": "2556", "d": "5/2013"}, {"title": "backbone mess locationhash even asked", "body": "want stop backbone automatically redirecting using pushstate true want use hashes unrelated backbone purposes way pushstate true hashchange false nt work", "num": "2555", "d": "5/2013"}, {"title": "order routes", "body": "found important difference define routes using routes hash manually adding using route method using hash routes seem checked order entered hash even though far know javascript makes assumption order properties hash add using route method seem checked iverse order last entered routes checked first clear code using hash equivalent calling routeroute method note order course wonder design decision anomally bug would correct way handle route method tempted create addroute method temporary hash reverse add addallroutes method", "num": "2554", "d": "5/2013"}, {"title": "strange issue replacing objecton objectlistento", "body": "trying replace every call objecton objectlistento faced strange issue event listened detailed issue stackoverflow far nobody could give hint", "num": "2553", "d": "5/2013"}, {"title": "sync event triggered collectionsync", "body": "created method collection looks like get event starts nt get event finished event per documentation getting looked source places see sync triggered model fetchsavedestroy collection fetch documentation incorrect could something wrong", "num": "2552", "d": "5/2013"}, {"title": "validationattr", "body": "like cause may want know attr occurs error", "num": "2549", "d": "5/2013"}, {"title": "allow one route declared routerroute", "body": "hi find fetch available routes db think would great routerroute method could handle dictionary exactly constructor router route parameter would route every route dictionary code javascript dictwithroutes routerroute dictwithroutes think enhancement", "num": "2548", "d": "5/2013"}, {"title": "views listen model use contenteditable elements", "body": "case two views listening editing data model sure right way use backbone please close views listening changes update self view element well view respose change made would dead loop tried using find editing saw limitations one tried later passed name view editing verify method see produce self fake code like coffee class viewa events blur data update render model value options gt options optionstriggerby isnt data val modelget data update event gt data something got contenteditable view modelset title data triggerby class viewb events blur data update render model value options gt options optionstriggerby isnt b data val modelget data update event gt data something got contenteditable view modelset title data triggerby b comes another problem events triggered without attribute example events triggered ajax recognized even idea adding mute event available solution either case solution backbone way", "num": "2546", "d": "5/2013"}, {"title": "backbonejs adding result model", "body": "model json data say userdata name myname userid newusername address newaddress perform modelsave webservice call supposed return success following form result operation success adds response original json model json data model becomes userdata name myname userid newusername address newaddress result operation success think nt case right solutions", "num": "2545", "d": "5/2013"}, {"title": "backbone restful events http method details", "body": "something seems strange backbone restful events result event every http method could results forced override backbone method emulate sort thing past thanks lot", "num": "2544", "d": "5/2013"}, {"title": "backbonejs basicauth ie", "body": "basicauth backbonejs added js file backbonebasicauthjs order able use basicauth chrome firefox safari call works fine first backbone sending options request method get request method getting response need ie options request method get request method request heders authorization basic using js libraries xdrjs make work ie result know cors support ie causing problem web application works fine ie api server php anyone kind problem ie", "num": "2543", "d": "5/2013"}, {"title": "cors sync sends options request instead post", "body": "trying use modelsave rest service another subdomain got following request headers far expectations fix ofc rest server responds found options call avoid unwanted questions server ok handles rest calls cors calls well tested ajax rest interface tester application", "num": "2542", "d": "5/2013"}, {"title": "checkurl race condition url conversion", "body": "conditions win xp reproduced often router user enters url index action called items behaviour user enters url url replaced index action executed url converts items action executed investigation found checkurl method history called url conversion pushstateenabled format hash based look historystart method first oldie insert iframe navigate current fragment causes url transform oldie need hash change starting checkurl timer interval converting pushstateenabled format hash based determine need change base url pushstate link opened nonpushstate browser thisfragment fragment var loc thislocation var atroot locpathnamereplace amp thisroot started route enabled browser currently browser nt support thiswantshashchange amp amp thiswantspushstate amp amp thishaspushstate amp amp atroot thisfragment thisgetfragment null true thislocationreplace thisroot thislocationsearch thisfragment return immediately browser redirect new url return true started hashbased route currently browser could based instead checkurl sometimes executed url convertion may possible fix convert url hash based format starting checkurl timer", "num": "2541", "d": "5/2013"}, {"title": "lost input focus view rerender", "body": "form several input fields changing values inputs view form rerendering piece backboneview code coffee initialize gt modelon change render events change input change change event gt ctrl eventcurrenttarget modelset ctrldata name ctrlval render gt elhtml template modeltojson rerendering occurs also press tab key set focus next input focus lost possible solve problem little portion code", "num": "2540", "d": "5/2013"}, {"title": "suggestion extend function", "body": "think many people want use extend function backbone classes classes great work therefore suggest add extend function public interface backbone add class anybody extend example", "num": "2537", "d": "5/2013"}, {"title": "modelset attrs instance model", "body": "hello process upgrading project working noticed difference documented specifically conditional behavior appear present later sure removal line thus removal ability pass model set method intended please update change log reflect could find issues documentation apologize already addressed thanks help", "num": "2535", "d": "5/2013"}, {"title": "multiple fetch generating inconsistant behavior", "body": "hello trying fetch static collections initial loading page bootstrap data static data coming remote rest api server refresh multiple time browser noticed content collections messed example content placed fix issue loading step tried without async flag always get behaviour example one model collection contacttype model javascript define contacttypes collection javascript define models collections following pattern thanks advance help", "num": "2534", "d": "5/2013"}, {"title": "url option overrides", "body": "calling url option passed passes option model overrides extension model url string value pass fetch situation follows class coll extends backbonecollection fetch opts gt unless optsoption opts clone opts optsurl url url super class mod extends backbonemodel url gt specific way calculate url unfortunately fetch parent collection override model url method model constructor following good thing cases except nt want fetch options passed model nt make sense easy fix add constructor calls change document users library writing really sure bug certainly feels like one perhaps omitting collection fetch success method would fix problem really sure universal solution would surprised behavior", "num": "2533", "d": "5/2013"}, {"title": "router query parameters ignored using pushstate using hashchange", "body": "since backbone router ignores query parameters sent somethingsomething using pushstate mode using hashchange mode pushstate incompatible browsers ie query strings ignored sent wo nt match route eg route booksbackbone url booksbackbone utmsourcetwitter url match route query strings", "num": "2532", "d": "5/2013"}, {"title": "different behaviour haschanged version", "body": "hi using backbonejs set attribute change event listener fired collection problem till call method haschanged attribute element collection inside event handler multiple time haschanged return true also elements already fired basically forget changed state example view example version nt problem change latest work", "num": "2531", "d": "5/2013"}, {"title": "models instantiated collection creation faulty url properties", "body": "seems collection constructors receiving array models property options overwrite models property string options contrast initializing collection empty model array option adding models seems work expected passing instead seems work correctly set directly model undocumented behavior", "num": "2530", "d": "5/2013"}, {"title": "fetchsave error event", "body": "hi guys already event implementing event catching request errors need time create links request object put callbacks event would best solution case hope", "num": "2529", "d": "5/2013"}, {"title": "modelget returns reference", "body": "problem using property object direct reference returned means changing properties object also changes data model course javascript works however means model values changed without calling nt seem like behaviour would expected dealing public methods access private data javascript var mymodel new backbonemodel myobject valueone one valuetwo two var byreference mymodelget myobject alert byreference object valueone one valuetwo two byreference valueone zero byreference valuetwo zero alert byreference object valueone zero valuetwo zero alert mymodelget myobject object valueone zero valuetwo zero question return value instead underscore could used understand could affect speed", "num": "2528", "d": "5/2013"}, {"title": "add link super class", "body": "add special link method super class example thissuper need call super class method simply var note backbonemodelextend set function attributes options thissuperapply arguments instead backbonemodelprototypesetapply arguments", "num": "2527", "d": "5/2013"}, {"title": "provide state mixin", "body": "often find wanting basic functionality model setting getting attributes object notified changes via events without server component functionality useful part app stores things need persisted beyond life page think would useful expose separate util like events example usage coffeescript class tinywidget extends backboneview extend prototype backboneproperties widget new tinywidget widgeton change something gt alert changed widgetset prop value picked properties mirror events nt really care named something support willing contribute patch", "num": "2526", "d": "5/2013"}, {"title": "ca nt bind listener multiple event event hash", "body": "want bind listener multiple event via events hash view nt work looks like backbone treat second event type part selector lead binding failed", "num": "2524", "d": "5/2013"}, {"title": "hash single quote firefox always sees current fragment new fragment different", "body": "hash contains single quote character firefox version ubuntu encode string windowlocationhref variable provides value current function checkurl run however value thisfragment compared got whatever passed backbonerouternavigate encode hash passed function encodeuricomponent even encodeuri even firefox encode single quote variables thisfragment current always different solution backbone decode uri components comparing propose lt current thisfragment amp amp thisiframe lt current thisfragment return false", "num": "2523", "d": "5/2013"}, {"title": "performance problem stoplistening", "body": "big performance problem big table created thousands views cell view complex behaviour need object view cell listento listen events big array event events less events callbacks know events listened cells directly model easier quicker view stoplistening method try find event view event nt exist deleted performance problem method loop events events context find delete loop find nothing event already deleted way loop events event loop callback loop context loops efficiently case loop context context nt exist nothing finish problem callback context nt deleted unless event one context one callback see code loop search event callback context different nt happen delete event context callback nt delete anything think must delete context callback find delete event event empty want fork improve things would like know opinion think issue", "num": "2522", "d": "5/2013"}, {"title": "rangeerror exception throw many models added collection", "body": "see", "num": "2520", "d": "5/2013"}, {"title": "eventstoplistening delete objlistenerid", "body": "since removing listener delete corresponding listener id attached time seems reason let hang around", "num": "2519", "d": "5/2013"}, {"title": "automatically call viewremove viewel removed dom", "body": "guessing called removal dom nt seem case every view disposed manually supposed call mean every view keep reference children remove cascade nt simpler way thanks lot", "num": "2518", "d": "5/2013"}, {"title": "backbone killing zurb foundation", "body": "hi backbone router kills foundation plugins including mobile navbar menu icon activated remove backbone works fine javascript errors console", "num": "2517", "d": "5/2013"}, {"title": "reaching backbone view server side", "body": "reach backbone view external third party website handle real time payment process website using backbonejs", "num": "2515", "d": "5/2013"}, {"title": "fetch first add event fired collection fully populated", "body": "application depends sequential order add events fired call fetch empty collection unfortunately collection seems fully populated first add event fired expected behavior first output expected", "num": "2513", "d": "5/2013"}, {"title": "discuss patch", "body": "originally patch sending partial representation data server subset attributes may ideal example way mark attribute deletion apart setting null discuss steveklabnik mnot resources", "num": "2512", "d": "5/2013"}, {"title": "collection set methods implementing nonuiblocking iteration", "body": "given collection fetch decent amount items returning list processing done item list model quite extensive cause browser freeze throw warnings user set method well methods use nonuiblocking iteration order prevent wherever possible", "num": "2511", "d": "5/2013"}, {"title": "modelsave options keyval", "body": "using backbone able figure call modelsave pass options success error skip keyval logic done override modelsave changing following line key null typeof key object key null typeof key object allows call save modelsave undefined undefined succes mysuccess error myerror options wiped parameter logic save maybe another way around unable find", "num": "2510", "d": "5/2013"}, {"body": "note experiencing issue using version github repo use version backbonejsorg works", "d": "5/2013"}, {"body": "tysonnero yep looks like upgraded edge version release see bit info", "d": "5/2013"}, {"body": "awesomethanks quick response also sorry duplicate search reason nt see bug", "d": "5/2013"}, {"body": "problem sometimes tough find", "d": "5/2013"}, {"body": "hi fixed changes included next backbone release meantime try code current master", "d": "5/2013"}, {"body": "yep yep thanks pointing pierreduchesne", "d": "5/2013"}, {"body": "thanks help", "d": "5/2013"}, {"body": "hi qiangtou careful nested changes easy cause infinite loop also probably get better response type question mailing list irc", "d": "5/2013"}, {"body": "async need successerror handler use promise jqxhr", "d": "5/2013"}, {"body": "please see link leave questions stackoverflow", "d": "5/2013"}, {"body": "remembered thank u", "d": "5/2013"}, {"body": "agree people answered question see statckovewflow link think close point", "d": "5/2013"}, {"body": "yep answer correct", "d": "5/2013"}, {"body": "afraid give us little information want help first try mailing list irc channel", "d": "5/2013"}, {"body": "fixed thanks jdost", "d": "5/2013"}, {"body": "correct actually problem ran application looking implementation models actually serverside ids", "d": "5/2013"}, {"body": "worry client side solved problem actually application grid collection boxes model board game like chess battleship generated grid everything fine many bugs happened honest understand rare case found quick fix application replaced problem solved spent hours realise bug even rare wanted sure ever noticed", "d": "5/2013"}, {"body": "ah gotcha unfortunate pick different prefix like keeping readability end using dom", "d": "5/2013"}, {"body": "ok read code understood case failing nt know add model collection model reference duplicate collectionbyid map mean id cid solve problem backbonecollection map collectionbyid collectionbycid instead one references totally agree rare bug wo nt need fix lot work maybe lower performance thanks", "d": "5/2013"}, {"body": "franckernewein used case combined one object simplicity", "d": "5/2013"}, {"body": "caseywebdev okay nt know thanks", "d": "5/2013"}, {"body": "good mornin ferahl tried reproduce issue locally nt able would mind providing sample code illustrates problem", "d": "5/2013"}, {"body": "core issue getfragment claims return crossbrowser normalized url returns different values firefox chrome call returns chrome firefox sees different url fires", "d": "5/2013"}, {"body": "example", "d": "5/2013"}, {"body": "debugging appears firefox triggers two events one one continue debugging later suspect easily solved without fix firefox", "d": "5/2013"}, {"body": "completeness nt issue spaces characters get uri encoded quite common add catch path route would immediately navigate soon special character entered hash firefox feel worth mentioning prepare example well required", "d": "5/2013"}, {"body": "ran issue tried implement drag amp drop functionality backbone view events table looked something like happened situation sometimes pointer escaped bounding box el position updated resulting mousemove beeing fired el parent els another solution could syntax like", "d": "5/2013"}, {"body": "use case solid simply use jquery events need event events hash nothing delegation involved", "d": "5/2013"}, {"body": "common pattern use layoutmanager looks like javascript backboneviewextend bind event outside view afterrender function thishandlerreference bind thishandlemousemove backbone document mousemove thishandlerreference ensure view properly cleaned cleanup function backbone document mousemove thishandlerreference delete thishandlerreference using handler reference probably safest way go typically nt got ta live dangerous somehow", "d": "5/2013"}, {"body": "like idea combining events event hash makes code readablepredictable perhaps document wide hash could introduced events viewel document events defined hash think would suitable plugin", "d": "5/2013"}, {"body": "templates usually functions nt", "d": "5/2013"}, {"body": "nt height element inserted dom try", "d": "5/2013"}, {"body": "code dom soon hits method problem view inserted document height calculated basically may work may unintended side consequences depending happening abovethehood getting full scope firstdeveloper code looks like hooks lm simulate defining method view triggering code inserts view document later", "d": "5/2013"}, {"body": "tgriesser right try works fine case however tbranyen said also interesting think change previous implementation hewas mentioning guys rock", "d": "5/2013"}, {"body": "found many methods backbone check passed parameter may cause error info matterless true root causeit unfriendly developer", "d": "5/2013"}, {"body": "ifishing generally agree stack trace generated scenario particularly frustrating provides little context actual issue", "d": "5/2013"}, {"body": "seems describing passing first argument accident case get error right away case think leave", "d": "5/2013"}, {"body": "use discouraged nt mentioned docs call usual javascript way", "d": "5/2013"}, {"body": "thanks reply jeremy nt aware fact finished updating classes use super advantage see super shortcut later change parent class nt go class methods fixing references reason usual js way prefered avoid adding custom extensions js", "d": "5/2013"}, {"body": "bunch tickets explain reasoning search super come ip", "d": "5/2013"}, {"body": "searched curios one link", "d": "5/2013"}, {"body": "namespaces nt real backbone events reason change works like automatically triggered hood simply trigger session well", "d": "5/2013"}, {"body": "cool understand nt actually namespaces think parsing custom event strings manually triggering namespace something bb used recall working past answer stackoverflow also seems think used misremembering", "d": "5/2013"}, {"body": "docs repository", "d": "5/2013"}, {"body": "manually edit html sorry p seriously way beyond time limits see writing markup render proper html maybe", "d": "5/2013"}, {"body": "lol favorite ticket month", "d": "5/2013"}, {"body": "tried", "d": "5/2013"}, {"body": "also duplicate though sounds like caseywebdev suggestion could trick", "d": "5/2013"}, {"body": "great support guys closing issues without even looking makes regret picked backbone spine caseywebdev matter fact first route wo nt fire would lead app working stare blank page tgriesser even try assume would work know people say assume much nt good day good luck", "d": "5/2013"}, {"body": "suprmax understand frustration think probably address issue opening duplicate ticket probably best way go though let discuss back", "d": "5/2013"}, {"body": "believe design though agree feels bit odd every routing syntax rails express etc prioritizing top bottom think idea override old routes whenever want way said never override route practice", "d": "5/2013"}, {"body": "think idea override old routes whenever want way explain", "d": "5/2013"}, {"body": "putting recently added routes top priority list give precedence previously defined ones initially routes would map callback route redefined routes map callback", "d": "5/2013"}, {"body": "probably good idea though", "d": "5/2013"}, {"body": "hence never override route practice would like see ordering reversed current functionality using like opensas", "d": "5/2013"}, {"body": "thanks may pm opensas notifications githubcom wrote found important difference define routes using routes hash manually adding using route method using hash routes seem checked order entered hash even though far know javascript makes assumption order properties hash add using route method seem checked iverse order last entered routes checked first clear code using hash equivalent calling routeroute method note order course wonder design decision anomally bug would correct way handle route method tempted create addroute method temporary hash reverse add addallroutes method reply email directly view github", "d": "5/2013"}, {"body": "think behavior clearly stated documentation perhaps would wise add another parameter telling new route added even better differnte method think routerpush route name callback would clearly show route would added end hence would evaluated last saludos sas", "d": "5/2013"}, {"body": "topdown fact ca nt imagine would ever want overwrite route asking trouble", "d": "5/2013"}, {"body": "issue raised pointed comment explaining behavior added similar note documentation", "d": "5/2013"}, {"body": "think bug please reproduce reduced case codepenjsfiddleetc investigate code example looks correct problem need see whole case", "d": "5/2013"}, {"body": "thank alot reply already migrated every call objecton listento think must hitting pretty strange case see reproduce jsfiddle hint think help debug", "d": "5/2013"}, {"body": "hint think help debug nothing example really stands would try using edge version bb see makes difference", "d": "5/2013"}, {"body": "hi casey good look problem discovered nasty bug code close ticket thanks lot time", "d": "5/2013"}, {"body": "problem glad resolved", "d": "5/2013"}, {"body": "event actually handled modelcollection methods rather inside block little reasoning see method also need define success handler similar handles response trigger event", "d": "5/2013"}, {"body": "documentation incorrect docs state whenever model collection begins sync server request event emitted request completes successfully get sync event error event trigger sync error event upon completion suggestion handle manually gets triggered model collection documentation updated reflect", "d": "5/2013"}, {"body": "well nt supported seems expected need implement functionality maybe quick note docs though braddunbar thoughts", "d": "5/2013"}, {"body": "would nice based current wording docs expect call trigger event upon completion", "d": "5/2013"}, {"body": "think pass attr maybe", "d": "5/2013"}, {"body": "hi mystist actually contains last return could truthy value information need contained created method", "d": "5/2013"}, {"body": "return want know attrname invalid contain return string", "d": "5/2013"}, {"body": "nt string return object attributes corresponding errors like", "d": "5/2013"}, {"body": "mean nt string really wonderful thank", "d": "5/2013"}, {"body": "problem check code details", "d": "5/2013"}, {"body": "checked code really works awesome", "d": "5/2013"}, {"body": "always lovely someone gets excited feature", "d": "5/2013"}, {"body": "backbone assumes server api responds proper http status code model state body case treated model attribute appears merged backbone better rely rest agreements due expected system behavior", "d": "5/2013"}, {"body": "ahhh see thanks response thought issue backbone", "d": "5/2013"}, {"body": "hi problem sounds application specific would better suited google group documentcloud irc github issues strictly issuesfeatures dealing backbone thanks", "d": "5/2013"}, {"body": "look cors works expected preflight request", "d": "5/2013"}, {"body": "avoid reflight request", "d": "5/2013"}, {"body": "sending simple request defined", "d": "5/2013"}, {"body": "tried server side handle preflight calls work browser send another request preflight say possible backbonesync bug think", "d": "5/2013"}, {"body": "regardless nt backbone issue suggest asking stackoverflow irc", "d": "5/2013"}, {"body": "explain backbone issue", "d": "5/2013"}, {"body": "read source backbonesync see backbone simply passes everything ajax", "d": "5/2013"}, {"body": "try one nt backbone issue", "d": "5/2013"}, {"body": "original headers without php think server well configured tried headers gave work simple ajax calls work well example load json files service define function require exports module var require jquery tried request method responded well collectionfetch works well problems modelsave tried way maybe something wrong got attributes error console check kind error", "d": "5/2013"}, {"body": "right thanks added server config allow contenttype works firebug best chrome console printed contenttype allowed", "d": "5/2013"}, {"body": "many tanks", "d": "5/2013"}, {"body": "requests requires quite different headers api server uses authentication server header course need make xhr request clientside api server uses header basicauth request nt need instead need include case like ah seems solved issue writing", "d": "5/2013"}, {"body": "ye thanks anyway helped lot", "d": "5/2013"}, {"body": "might want try rerendering view change nt seem like need", "d": "5/2013"}, {"body": "grab source already cleaner version would help", "d": "5/2013"}, {"body": "would really helpful", "d": "5/2013"}, {"body": "mornin thanks issue one already discussed number times sure check conversations gist backbone intentionally stayed away exposing generic class library since main purpose", "d": "5/2013"}, {"body": "slightly offtopic regard example would recommend defining namespace extending version backbone classes using version application code personally alias namespace like would alias enclosing function would add classes relevant application namespace extend plugins including say something like typeahead bootstrap namespace need modify well use instead etc little bit cleaner since add functionality still leverage original implementation bootstrap less hassle chance interfering miniapplications plugins using bootstrap since changes also shorter edit gist backbone intentionally stayed away exposing generic class library since main purpose would argue going logic function code rely library provide since obviously essential backbone work nt awkward providing people use library use class like constructs since scope library essentially saying backbone bits extendable nt really make sense also say functionality provided external library backbone still provide alias referencing within application customizing ie", "d": "5/2013"}, {"body": "seems go completely backbone philosophy making everything configurable currently want overwrite wrap app enhance inheritance capabilities backbone classes get reference function one classes eg manually overwrite method every class contrast implementation allows easily override single global method used app automatically seems like much powerful approach see reason use especially already also used also core backbone functionality issue think general rule stay howtodoobjectorientationinjavascript debate backbone might one day expose generic class object nt surely exposing therefore making cleanly overwritable exactly opposite make difficult people use different implementations class functionality", "d": "5/2013"}, {"body": "yep intended change braddunbar pointed reasoning one keep open reminded update change log", "d": "5/2013"}, {"body": "fwiw screws deferreds therefore jquery docs jquery use async false jqxhr deferred deprecated must use successerrorcomplete callback options instead corresponding methods jqxhr object jqxhrdone deprecated jqxhrsuccess", "d": "5/2013"}, {"body": "wookiehangover thanks make loading collection make sure loaded going next step", "d": "5/2013"}, {"body": "support questions like much better suited documentcloud channel freenode irc closing issue test case reproducible isolate bug", "d": "5/2013"}, {"body": "hi crisfole fixed master via grab copy use next release", "d": "5/2013"}, {"body": "man", "d": "5/2013"}, {"body": "reference discussed consequences explained", "d": "5/2013"}, {"body": "hi juliansantaana query parameters fact ignored url contain hash fragment looks like use url instead think better results hope helps", "d": "5/2013"}, {"body": "braddunbar oh get mean way using query parameters backbone particular reason ignored", "d": "5/2013"}, {"body": "quite reasons outlined thread also includes solutions using fragment instead", "d": "5/2013"}, {"body": "braddunbar thanks helped lot ended using parameters sending query string pretty urls question regarding know way creating linking url parameters way thing need change url fly depending date range selected example url calendar changed need change url routernavigate way replace date parameter built backbone", "d": "5/2013"}, {"body": "juliansantaana nothing particular generally generate url based ui parameters", "d": "5/2013"}, {"body": "braddunbar thanks used regexp replace date param backbonehistoryfragment new date param turned pretty consistent solution", "d": "5/2013"}, {"body": "seeing issue problematic using haschanged attribute model collection enforce example user selection single member", "d": "5/2013"}, {"body": "fixed master release coming soon", "d": "5/2013"}, {"body": "ok thanks", "d": "5/2013"}, {"body": "sorry bad already added", "d": "5/2013"}, {"body": "example putting properties directly object something want able fault bypass altering object something prevented future version javascript nt touch attributes", "d": "5/2013"}, {"body": "course nt seem like expected behaviour dealing publicprivate date setup catch guard data gets changed downtheline pulled attribute object modified intention able bypass manner ok", "d": "5/2013"}, {"body": "yep definitely intention convenience getting things", "d": "5/2013"}, {"body": "bypass set altering attributes object something prevented future version javascript tbranyen point info might able prevented future js versions thx", "d": "5/2013"}, {"body": "dgbeck check setter functions", "d": "5/2013"}, {"body": "mornin shikolay thanks issue one already discussed times check details", "d": "5/2013"}, {"body": "hey matthewwithanm nt think much drawback using plain old model functionality also allows share state object multiple views", "d": "5/2013"}, {"body": "thanks mponizil using model okay result pretty clunky interface really want bindable properties either saddled unwanted layer indirection write boilerplate delegating also appreciate uniform method gettingsetting properties alone que sera", "d": "5/2013"}, {"body": "hi matthewwithanm nt quite understand mean part using model clunky could provide example", "d": "5/2013"}, {"body": "clunky comment referring extra layer indirection extra model object boilerplate required hide want simple descriptor bindable property example ca nt put model nt shared would normally store view course nt apply views object hosts properties many cases extend model clutters object methods nt want fetch sync etc", "d": "5/2013"}, {"body": "fair enough see mean sure backbone split attributes models though", "d": "5/2013"}, {"body": "nt know sounds like could actually kind neat provide mixin sometimes feel like hack models nt really models observables also nt take much model methods say matthewwithanm want give shot see people think could make neat plugin", "d": "5/2013"}, {"body": "jashkenas put kibosh pr going close issue", "d": "5/2013"}, {"body": "events written format", "d": "5/2013"}, {"body": "zyzniewski case want bind listener multiple events element jquery need backbone write way acceptable elegant opinion possible hope format support multiple events comma separated like code", "d": "5/2013"}, {"body": "keshin called elegant one looks lot easier read", "d": "5/2013"}, {"body": "srcspider fine events case nt think still easier read events even probability small possible", "d": "5/2013"}, {"body": "keshin personally maintaininginspecting code almost always prefer explicit less explicit need eye parsing decipher meaning easier commentnote way comma separated list cryptic especially comma invalid selector character also easier changerefactor code layed compared code canned single line agree sometimes favorable compact code since lot less code easier scan though nt believe case case think sort magic allowed hooked part default distribution cents", "d": "5/2013"}, {"body": "thanks comments srcspider find way hook customized events hash correct wrong javascript var multipleeventview backboneviewextend delegateevents function events var parsedevents clone events parse multiple events binding", "d": "5/2013"}, {"body": "hi ravirajani thanks pointing however gone road nt turn well particular decoding fragment comparing makes impossible tell whether slash encoded original fragment firefox several long standing bugs detailed prevent us solving problem effectively would greatly appreciate express concern mine nt gotten us anywhere", "d": "5/2013"}, {"body": "hi braddunbar thanks responding quickly understand issue slash suppose use locationhref instead locationhash firefox decodes getter locationhash ca nt distinguish hash containing encoded slash hash containing genuine slash although opinion simply checking hash changed unlikely changed replacement slashes decoded slashes vice versa much likely someone hit bug happens hash contains single quote nt changed", "d": "5/2013"}, {"body": "well problem nt checking whether url changed knowing parameters afterwards example take fragment pattern decoding get way know slashes originally encoded ie separators", "d": "5/2013"}, {"body": "yes understand suggesting using decoded values testing change use encoded values processing parameters afterwards currently patch suggested wo nt affect logic way avoid bug firefox single quote hash", "d": "5/2013"}, {"body": "whoops last comment buried bottom inbox reason ca nt use decoded version comparing reason ca nt use processing look like fragment decoded fact quite different", "d": "5/2013"}, {"body": "point made two comments ago would unlikely hash would changed suppose matter opinion thanks comments anyway", "d": "5/2013"}, {"body": "morning josejamart thanks posting glad review patch increases performance start reducing number events views thousands views tens thousands events gon na put stress browser regardless reduce number elements start one look thousands views lazy load would look reducing number listeners", "d": "5/2013"}, {"body": "josejamart reduce number viewslisteners might also best case replaced avoid altogether instead manually tracking needs ed performance rather using", "d": "5/2013"}, {"body": "think early close issue say solution reduce view maybe question browser needs seven seconds create paint view needs minutes delete memory created view think api implementation problem reduce views always need time delete memory create nt understand hand must review method two context listening one event launch context method finish context nt deleted help want think method nt well defined trying implement single page application need hight control memory test chrome profiler cases memory event releasing tgriesser need replace remove stoplistening defined simple applications nt better well implementation think nt difficult happen backbone changes add new functionality methods need change hundred js files adapt", "d": "5/2013"}, {"body": "sorry direct english bad nt know expressing well want help questions make think complain sorry", "d": "5/2013"}, {"body": "reference passes fails", "d": "5/2013"}, {"body": "back issue expensive existence checking life would much easier could count id create temp model", "d": "5/2013"}, {"body": "let fix", "d": "5/2013"}, {"body": "way see fixing lay law say may take argument relevant model id rule place remove need temporary models speed things considerably obviously breaking nonbreaking way around", "d": "5/2013"}, {"body": "refresh memory make sure nt miss anything accidentally use case would breaking exactly", "d": "5/2013"}, {"body": "right everything works hunky dory collection model level methods break would introduce would occur would nt creating model modellevel parse instead rely naked object determine existence circumvented parsing collection level wo nt get use model context sure common requirement either", "d": "5/2013"}, {"body": "circumvented parsing collection level backbone used work relatively recently nt think would asking much go back behavior especially pretty easily use permodel parse function within general collection parse like iirc braddunbar good reasons changing current behavior", "d": "5/2013"}, {"body": "know brad fan factory model functions would case would differentiate model level unfortunately nt think modellevel parse avoid temp models something got ta give", "d": "5/2013"}, {"body": "factory functions still work without modellevel parsing used successfully backbone however turns rather idiomatic backbone code bit nastier since model parsing logic needs duplicated collection parsing also like examine premise considering change adding models collection causes stack overflow much clarity willing sacrifice use case", "d": "5/2013"}, {"body": "well regardless whether reasonable amount models add collection creating temporary models better everyone possible", "d": "5/2013"}, {"body": "coodoo thanks opening issue could make pull request change take discussion realm theory place look implementation easily", "d": "5/2013"}, {"body": "regenerated next time called consume another nt think change desirable", "d": "5/2013"}, {"body": "second thought testing caseywebdev said make sense need delete please close issue thanks", "d": "5/2013"}, {"body": "hey yamsellem talking bit whole child view reference handling gist yes get rid view need call turn calls removing dom way around jashkenas points views nt need explicitly removed unless maintain references objects outlive eg event listeners models collections object pubsub objects live die view nt need removed however often nt case helps bit outlive view yes need implement mechanism trackingcleaning orphaned child views seems tripping point many minimal solution come backbonenested feel free chime ticket thoughtsquestions cases discussing", "d": "5/2013"}, {"body": "foundation plugins use hashurls state obviously router using hashurls state recently pushstate gets rid hashes way routing frontend really file issue foundation use hashes plugins instead", "d": "5/2013"}, {"body": "make note would nice way tell backbone consume hashurls push state turned website wants support ie way backbone solely use push state anchor tags among things would still work", "d": "5/2013"}, {"body": "mehcode looking option", "d": "5/2013"}, {"body": "information using pushstate unless mistaken plus foundation mobile navbar menu icon unless mistaken using hash url link catch click verified test hashchange false option tonight see fixes things", "d": "5/2013"}, {"body": "tgriesser get trying check github phone fully woken thanks information", "d": "5/2013"}, {"body": "closing one reopen something identifies exactly bug might fault", "d": "5/2013"}, {"body": "right made test foundation totally removed seems work strange tried reproduce foundation could done menu link worked sorry false alarm add keep hashchange false option even sure purpose thanks", "d": "5/2013"}, {"body": "yes conscious design choice fire events models added collection sorted use case trouble", "d": "5/2013"}, {"body": "code question looks something like since events fired right order sorted inside collection happens model view find precursor", "d": "5/2013"}, {"body": "way mark attribute deletion apart setting null always fine use cases", "d": "5/2013"}, {"body": "never thought deleting data partially common use case", "d": "5/2013"}, {"body": "btw steveklabnik oh jashkenas fixed typo p", "d": "5/2013"}, {"body": "deletion also updating patch needs diff type sending applicationjson violation spec backbone hope rails early opportunity educate users patch works opportunity right early sent mailbox iphone wed may pm ted han notifications githubcom wrote btw steveklabnik reply email directly view github", "d": "5/2013"}, {"body": "hrm using tastypie updating pretty straightforward nt know spec edit checked ietf yeah look rather naive since implementation simple", "d": "5/2013"}, {"body": "benefit everyone else discussion wed may pm tim branyen gt wrote hrm using tastypie updating pretty straightforward resourceuris nt know spec reply email directly view github", "d": "5/2013"}, {"body": "worth reading spec nt lead believe requires different type spec explicitly prescribe particular patch format would reasonable servers support patch requests usual merge semantics fancier use cases either way think would quite stretch us send jsonpatch requests given nothing else implements include jsonpatch jsonpointer libraries implementation nt relevant us concerns arbitrary manipulations arbitrarily nested json objects really care flat lists values endpoint serving relational db", "d": "5/2013"}, {"body": "jashkenas right backbone already nt manage nested values attributes since backbone would generating jsonpatch expressions actually nothing stopping us generating patch operations top level attributes track anyway deeply nested objects folks set things manage rather putting onus backbone figure deep diffing predicated assumption value key operations take arbitrary object er value also regarding object transmission document oriented stores", "d": "5/2013"}, {"body": "json patch rfc implementations test suite think probably happen current rails behaviour needs get assigned media type anyone talk rails folks biggest breakage people assuming applicationjson patch semantics support applicationjsonpatchjson next step", "d": "5/2013"}, {"body": "think role considered would nt try send json patch server nt indicate accepts yeah nt see reading spec mandates particular format seems leave things pretty openended imo use case fixedshape objects current format works great usually places falls json patch steps see deletion properties changing object shape modifying arrays advanced semantics like conditional updates whose semantics ca nt captured etags via json patch sure many backbone could capture without significant user intervention maybe first two", "d": "5/2013"}, {"body": "jashkenas see errata wrote patch nt make explicit thought obvious rolls eyes errata filed saw rails done", "d": "5/2013"}, {"body": "eek unfortunate wanted speccompliant nt want implement jsonpatch jsonpointer change backbone api send post model url stop sending patch entirely correct", "d": "5/2013"}, {"body": "probably really nt benefit using patch post patch format nt selfdescribing rails accept different media type patch format different thing", "d": "5/2013"}, {"body": "steveklabnik rails going ship intentionally contraspec implementation patch happens nt set stone cool http apis nt change", "d": "5/2013"}, {"body": "create new media type instead semantics send fields overwrite current ones like current backbone rails implementations rails rails add support switch incoming media type either overwrite processing json patch processing edited use correct syntax media types", "d": "5/2013"}, {"body": "recently implemented backbone rails json patch support gist might ideal definitely nt think necessary create whole new mimetype rails pieces getting proper jsonpatch support going capacity backbone side things main issue try call backbone ca nt preajax nt expect array set attributes manually building patch array sure best handle okay core feature backbone seems like would least need way disable presave postsuccess use wait nt try call nothing near tell seems like could crazy unexpected behavior", "d": "5/2013"}, {"body": "reference backbone specific part gist coffee patch attrs default set save fail build patch set attrs", "d": "5/2013"}, {"body": "question patch rails today media type applicationjson", "d": "5/2013"}, {"body": "general believe happens case exactly thing happens postpatchput anything media type first tries turn media type generic hash parameters lets controller whatever wants hash convention generally partial update via think changed http method used match controller action hacks probably would raise argument error expecting params specific format think need add check return proper code", "d": "5/2013"}, {"body": "fought endlessly endlessly basically got tl dr rails put patch routed update exact thing backbone really default controller scaffold works adstagedavid mentions except rails always pretty good support different media types nt played around works http patch tenderlove implementation jsonpatch nt actually played around yet", "d": "5/2013"}, {"body": "steveklabnik curious think idea provide something easy use case like rails backbone already also allow future extensibility full support violate spec errata barking wrong tree", "d": "5/2013"}, {"body": "nt fully thought one bit weirdness rails nt send json default sends html forms certain sense rails ca nt support patch via certain type since going getting generally speaking couldshould support right thing well override like supports sending actual http requests right verb requests", "d": "5/2013"}, {"body": "cool http apis nt change oh jashkenas snarky comment last night forgot post cool uris nt change church bernerslee church fielding let return real discussion nt want entirely derail thread", "d": "5/2013"}, {"body": "rails always pretty good support different media types nt played around works http patch tenderlove implementation jsonpatch nt actually played around yet tenderlove nt released rfc compatible json patch implementation yet one sticking points lay gist form support handling right block standard updates patch versions work side side kind ugly would nt work rails trying pretend form patch definitely wrinkle process idea could properly handled think support html form updates rails would need standard update method takes post patch method actual patch requests sent backbone hopefully could treated separately", "d": "5/2013"}, {"body": "talking patch bit mnot afternoon couple thoughts conclusions full semantics jsonpatch jsonpointer go beyond backbone rails need api backed relational database instead json store soon rails node via express support start accepting patch default cat bag major rest apis beginning use patch fashion ensure becomes defacto standard better worse nt see real fundamental problem saying semantics sending patch defined particular api talking interpret list attributes properties set top level resource perhaps go perform deep merges json fact patch might interpreted slightly differently two different applications nt feel like dealbreaker especially already true effect post put given unlikely able get post put patch format aesthetically pleasing interface web application expose need fancier operations always use jsonpatch nt think backbone rails needs change current behavior defaults controversially nt think makes much sense rails support jsonpatch long using activerecord relational database operations adding would errors ca nt move structure within value column ca nt delete attribute schema set another way saying would nice theory ca nt imagine anyone nt using document store wanting turn", "d": "5/2013"}, {"body": "took something quite different away conversation rails still use media type define semantics overloading applicationjson mean rails accepts json patch going cause interop problems nt friendly push rails folks really nice could support said rails important thing dispatches media type request coming nt introducing new patch formats future going harder", "d": "5/2013"}, {"body": "rails behave patch support nested attributes currently", "d": "5/2013"}, {"body": "interested", "d": "5/2013"}, {"body": "jashkenas would nt still good support users want patch actual jsonpatch would feel changing something like javascript save method patch options thisbuildpatchoptions attrs options save method buildpatchoptions function attrs options optionsattrs attrs return options nt mean functionality change backbone core gives easy hooks allow backbone plugins implement patch jsonpatch users want override buildpatchoptions set right content type build patch array", "d": "5/2013"}, {"body": "adstagedavid fairly sure already via option right", "d": "5/2013"}, {"body": "yes think correct braddunbar definitely missed trying hack implementation jsonpatch give shot see works", "d": "5/2013"}, {"body": "yeah definitely works behavior documented anywhere looking could missed would nt expect backbone would prefer data option attributes provided syncing maybe update documentation backbonesync order", "d": "5/2013"}, {"body": "proxy passes options give default using options custom behavior encouraged idiomatic thought fact documented ca nt seem find glad accept patch adds though", "d": "5/2013"}, {"body": "one option think might closer semantics want", "d": "5/2013"}, {"body": "loesak big talking loaded pretty big collections nt gotten point freezing browser probably indicator trying load way much collection something else going tried rather", "d": "5/2013"}, {"body": "big ok sounds like processing needs optimized either way backbone nt asynchronously default certainly process asynchronously like implement function whatever", "d": "5/2013"}, {"body": "tgriesser currently talking possibly soon yes looking improving performance code feel issue fundamental look backbones source see reset option actually versions behind problem exists add method collection noticed moved set method newest build", "d": "5/2013"}, {"body": "jashkenas okay first closing defect even hearing counter argument nt understand people really implies two things nt care hear opinion already decided mind issue nt care hear opinions users also may experiencing issue closing defect effectively taking list open defects people review counter argument backbone framework real control people use provides hooks use framework perform additional processing certain stages models lifecycle could improve performance code written gets executed processing model sure really pushes problem road code performant point dealing larger larger datasets brings us problem outside realm using framework maybe maybe maybe people situations working significantly large datasets coming data sources nt provide simple features like querying pagination fact matter backbone control people using framework given would interest backbone performant without blocking ui javascript web workers fully supported one thread ui thread matter performant code executing code blocking ui real game play world long blocking ui even tricky developers nt control browser going start throwing script responding errors users problem typically first seen looping large arrays hashes performing complex operations item actually operations nt even need complex large enough dataset fact willing bet given simplest representation model given enough without additional model processing backbone would cause browser throw snr developer someone told code would call bug start looking various options resolving commonly solved problem think two approaches moment time supply code changes first technique easily found searching javascript nonuiblocking looping javascript iteration nt process items collection created rather process items requested collection jquerydatatables offers something similar also akin andorid arraylistadapters yes suggestion could continue overwrite internal functions backbone get work way need practically done every function already figured would point issue listen thoughts apparently care hopefully fame thinking works future go mv js frameworks look suggestions point still remains issue code fundamental issue javascript coding backbone taking account", "d": "5/2013"}, {"body": "background information average models currently take milliseconds execute parse method would consider slow currently attempting iterate records hardly call large dataset edit correction records", "d": "5/2013"}, {"body": "hey loesak agree completely good idea look data processing main ui thread exploring matchbox inc dataintensive application however working within realms collections opting instead model contains dataset crossfilter representation something within collection period collections nature create model representations wrap actual input creates double objects memory fine small datasets powerful proxied methods crossfilter dumb force work way want works well indexes double amount objects memory use right tool job man", "d": "5/2013"}, {"body": "tbranyen thank reply would interested knowing crossfilter yet heard targeted information share eg links something easily google edit guessing look thank", "d": "5/2013"}, {"body": "loesak yes", "d": "5/2013"}, {"body": "cfator reason saving rather latter work fine", "d": "5/2013"}, {"body": "bit shorter", "d": "5/2013"}, {"body": "yup magic looking find parameters modelsave parameter switching behavior bit cryptic know get back business thanks guys", "d": "5/2013"}, {"body": "braddunbar right course", "d": "5/2013"}, {"body": "closing duplicate", "d": "5/2013"}, {"body": "mentioned issue changes need noted upgrading", "d": "5/2013"}, {"body": "caseywebdev well actually using conjuction qjs good know reason changes thanks", "d": "5/2013"}, {"body": "think supposed using method trying accomplish secondly call child case would result behavior expecting", "d": "5/2013"}, {"body": "true method something became aware recently got ta refactor eventually case want single endpoint save nested models wrestled idea multiple endpoints vs single one team decided single endpoint calling single nested model may work point nested model parent model case multiple nested models direction gets messy nested models want update realize big problem probably big specific backbone address however thought present issue start dialogue hopefully get kind solution nt require actual code changes backbone", "d": "5/2013"}, {"body": "rstankov like follow comment share way handle nested views backboneview already inherits events add mix methods views know nestedparents dispose function thistrigger dispose thiscid thisremove register function thisoptionsparent thislistento thisoptionsparent dispose thisdispose else consolelog tried register child view parent whenever instantiate child view inside another view pass parent argument child view initialize function call method hash anything every child view holds reference parent listens dispose event parent view gets child views well", "d": "5/2013"}, {"body": "catching thread cases parent call fnempty rerender subviews subview render method dom events redelegated wyuenho dom events delegated views initialized rendered loose dom events subviews simply rerender subviews parent rerendered work around detach reattach dom take approach discussed reinitializing views parent rendered loose state data subviews know easy work around agree keeping references subviews within parent deal breaker long subviews removed called parent jashkenas seems pretty low cost already requirement people call order views properly garbaged collected also nt see giving extra events going help obvious way construct view hierarchy backbone backbone events also nt bubble like dom try backbonecourier like promise rstankov good point needing event remove subviews parent applies case think case subviews almost never removed one could rerender parent parent could drop old references removed subviews acstll approach described works go keeping explicit references parent view child view generally good idea recap two common cases subviews used splitting view smaller regions organization view reuse rendering collection models sure including section documentation managing subviews best route cases significant complexities average backbone users nt need understand imo solution might able hashed together polished enough included backbone core case would provide lot value case think definitely needs left plugins thanks tgriesser starting thread", "d": "5/2013"}, {"body": "well typically go hand hand splitting view smaller components different modelscollections organizationcode reuse illustrate classic example incorrect implementation going nested modelscollections example backbone docs think backbone could provide little bit guidance whatever may coffee class mailboxview extends backboneview initialize gt listento model change render render gt elhtml jstsometemplate someclass append new listview collection modelmessages render el class listview extends backboneview initialize gt listento collection add additem listento collection reset render additem gt elprepend new messageview model render el render gt collectioneach gt elappend new messageview model render el class messageview extends backboneview initialize gt listento model change render listento model destroy remove render gt elhtml jstsometemplate imagine mailbox model changes maybe changed lastfetched attribute collection remains intact property model thus collection associated models outlive views wo nt make huge difference much going child views render ends issue lot cases leads frustration nt understand would easily solved adding top level render function wrapping child view constructor nt write docs yet wanted hear bit discussion plugin thinking handle good bit confusion really two simple functions though still think something could considered addition backbone directly also looking back thread braddunbar comment leaving unimplemented allows creativity solving hard problems working backbone instead around opinion boilerplate situation nt see needs hard problem b solved creatively plugin differently time needs done creatively nothing forcing implementation think backbone could provide something case ps dgbeck nice stackoverflow link asked year half ago nt immediately obvious view relationships handled getting started answer nt really answer probably brought", "d": "5/2013"}, {"body": "dgbeck tgriesser thanks glad posting aproach demonstrates us things wrong long agree needs done creatively nothing forcing implementation think backbone could provide something case", "d": "5/2013"}, {"body": "dom events delegated views initialized rendered loose dom events subviews simply rerender subviews parent rerendered work around detach reattach dom take approach discussed reinitializing views parent rendered loose state data subviews know easy work around dgbeck know mean rerender parent view usually something like course works subviews inherit view superclass implements way communication goes view hierarchy always make sure share collectionmodel simply trigger custom namespaced events shared collectionmodel like interested parties listen events act accordingly sense collectionmodel reverseddom never found need set event chain among views abuse actual dom propagate backbone events agree tgriesser cases typically go hand hand happen working two projects use nested views quite heavily two custom view classes one similar tgriesser backbonenested uses hash array keep track subviews another one offers jqueryfree mode compatible existing view digress might open source plugins file prs weekend", "d": "5/2013"}, {"body": "btw jashkenas policy project sets path merge good plugins definition good core policy plugin always plugin", "d": "5/2013"}, {"body": "like think policies least formulated plugin good idea core merge nuff said", "d": "5/2013"}, {"body": "tgriesser thanks repo definitely helps make discussion concrete two problems code would prevent us using even simpler case splitting view smaller subviews first find useful name subviews mailbox example mailboxview wants listen event listview wants tell listbox view collapse messages collapse button mailboxview clicked case useful able reference name problem solved easily storing subviews hash fork code one incarnation change fork people want supply keys subviews keys supplied behavior fall back using numbered indexes hash keys second views state information ca nt loose information parent view rerendered seem efficient reinitialize subviews time parent view rerendered ones store state information views instance using example listview might contain state information message selected storing information attribute messages seem appropriate persisted server shared among different users mind kind temporary view state information belongs view layer models second problem harder solve simply maybe could left plugins could find way distill solution backbonesubviews however hash version backbonenested integrated core could rewrite backbonesubviews plugin top thanks repo efforts helping people common issue", "d": "5/2013"}, {"body": "address two points agree named views good many cases nt need returns view added easily attach subview parent view like opinion feels bit cleaner vs still maintains necessary cleanup needed case since dependent views maintaining state probably would nt want let parent view rerender really use structure provide keep child views siblings let rerender independently nt worry", "d": "5/2013"}, {"body": "also prefer opposed references subviews two places feel quite right reminiscent redundancy options attached view viewoptions arguably worse object references need cleaned longer used double references longer guarantees subviews garbage collected many cases may big deal seems little moreover cases people may want customize keys used store subviews example second case rendering collection models might want subviews indexed model object way easily find view corresponds particular model limit people options disadvantage using hash opposed array call ideal maybe better way give subview unique index think makes sense solve problem backbonesubviews approach use case least fact could build approach top hashbased nestedview plugin eliminate code seems like testament nestedview versatility", "d": "5/2013"}, {"body": "mostly ensuring cascaded prevent latent effects leftover event listeners keeping reference subview going chain nt really big issue eventually gets gced parent view dereferenced reference manually overwrittendeleted need reference name probably going keeping around bit anyway probably least view goes away case fine finding one would nt difficult array either thought needing reference name thinking need first place views theory maintaining state independently nt need referenced parent views often arrays faster", "d": "5/2013"}, {"body": "yep allowing lookups cids sufficient need provide explicit name push nestableview please take look design rationale readme source code comments", "d": "5/2013"}, {"body": "mailboxview wants listen event listview wants tell listbox view collapse messages collapse button mailboxview clicked dgbeck entirely possible views example listen mailboxviewmodelmessages events communicate sending listening events shared collectionmodel find views start binding events directly exactly inflexible tightly coupled spagetti code evident need reorder view hierarchy sudden dismantle entire event chain data model rarely change dramatically may extra field maybe extra events add lines andor sprinkle views listen new events large views lot likely change data model insert remove reorder view hierarchy data need given problem always going", "d": "5/2013"}, {"body": "second views state information ca nt loose information parent view rerendered seem efficient reinitialize subviews time parent view rerendered ones store state information views store state info views time keep methods idempotent rerendering given view state result exact look behavior reintializing subviews necessary keep method idempotent also use template instead deeply nested views desirable nothing tgriesser implementation mine prevents happening", "d": "5/2013"}, {"body": "jashkenas bit discussion sounds like definitely real world issue faces lot folks building rich ui plenty good cases want view listen object bit longer lived hell advertised global event bus views may subscribe need explicitly removed issue nt much gc preventing latent effects zombie event listeners inturn helps gc pointed maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners think truth quite opposite beginners nt realize need keep track views listen objects outside life cycle see long removing every subview goes chain top level view removal nt manual removal also would optin feature view modelscollections live die together nothing forcing use method using minimal overhead line compared dom manipulation go humble opinion would nt complex addition would quite helpful explaining might need well providing minimal way go think would well received addition great", "d": "5/2013"}, {"body": "finding model cid would nt difficult array either yes easy hash trading lookups n lookups quickly erase performance edge arrays hashes interesting stack overflow thought needing reference name thinking need first place views theory maintaining state independently nt need referenced parent views often damn world would follow theories also think mistaken beginning thread saying array appropriate view data structure case rendering collection models even backbonecollectionview uses backbonebabysitter internally manage views views stored hash order determined model collection sufficient speak experience seen lots different approaches issue wyuenho thanks sharing plugin integrated core arraybased implementation would end working around top implemented hash could use case splitting one view fixed number subviews might also able use case rendering collection clean small seems like solid foundation majority cases", "d": "5/2013"}, {"body": "summary far necessary removing subviews automatically inside good idea tbd support adding removing list views provide minimal boilerplate render subviews parent view like nestableview use hash array combination hashes arrays internal storage provide help facilitate view communication via events subviews get reference parent views related provide way lookup views indexkeycid preferences yes leaning yes unless choice internal storage adt makes slow yes people nt care subviews continue override continue work people choose override something else like implementation hash fast lookups lookups key possibly view need way retain insertion order encourage sharing collectionmodel within view hierarchy use custom namespaced events triggered collectionmodel seems easiest without using extra plugins trying coerce dom propagate backbone events nt found necessary experience causes trouble worth left users maybe minimum document various ways set crossview communication preference point really depends choice data structure thoughts", "d": "5/2013"}, {"body": "hi quite long thread nt able read sorry nevertheless wanted give two cents mater project work made implementation solve problem call fatherview implementation shares lot aspects things said key points child views stored plain object child views named explicit name defined calling equivalent add view name already exists old view removed helps lot implement simple idempotent renders adding getting views done via method called works like jquery propattr pass one argument works getter pass two works setter instantiation left implementations view keeps track references cleans necessary method called remove child views called saying best correct way objective explain use case maybe feedback approach improved", "d": "5/2013"}, {"body": "addsubview removesubview necessary nt think deemed necessary yet definitely possible get along without everyone bit different take something think could helpful building robust modelcollection structures bootstrapping nested modelscollections grabbingdumping individual modelsviews times things change lfacpt thanks sharing sounds bit closer something opinionated like layout manager swapping views etc sounds like shares similar features approaches mentioned namely parent stores child views ability remove one way another", "d": "5/2013"}, {"body": "necessary casual single view usage necessary move discussion forward seriously look like trying reimplement backbonelayoutmanager tho", "d": "5/2013"}, {"body": "well say reason opted fatherview instead backbonelayoutmanager something similar locs little abstraction easy understand yet allows us keep code clean simple one reasons use backbone abstractions simple easy understand yet powerful imho plugin nested views also follow philosophy", "d": "5/2013"}, {"body": "ok actually jsdoc requirejs boilerplate almost p", "d": "5/2013"}, {"body": "think tgriesser nailed beginning nt think better terms utility per character think hash better choice grounds ease use performance versatility wyuenho idea using hash keys perfect default guaranteeing unique keys people could also option supply keys lookup subviews name whatever works best case tim original code hash tweak gets vote best candidate core integration still partial solution least use cases solid building block sophisticated solutions presented thread could built top undershooting rather overshooting seems fit well rest backbone relatively small amount code provides lot helpful structure", "d": "5/2013"}, {"body": "suggest use view instead subview terminology talking nested views think sub prefix introduces unneeded verbosity", "d": "5/2013"}, {"body": "andreypopp action names add remove could also argued naming seems important backbone could good examples remember reading somewhere around jashkenas explaining logic adding could also use nt know", "d": "5/2013"}, {"body": "dgbeck fact js hash nt retain insertion order really concerns ordering subview matter lots application lots applications ca nt guarantee irrelevance subview ordering using hash adt storage insufficient least backgridjs would really really prefer store subviews array preserve insertion order hash fast lookups necessary acstll agree probably succinct names else adding call", "d": "5/2013"}, {"body": "acstll agree add remove probably succinct names else adding call view add could easily confused adding objects models data points chart nonview dom elements etc nt forget views used sorts creative ways right", "d": "5/2013"}, {"body": "philfreo could argue collection methods never existed would confused still anything want change", "d": "5/2013"}, {"body": "collection specifically meant hold models subview management per se pointing view add nt completely obvious without possibility confusion due fact primary purpose view nt hold views", "d": "5/2013"}, {"body": "see fine either way actually", "d": "5/2013"}, {"body": "pointing view add nt completely obvious without possibility confusion due fact primary purpose view nt hold views wyuenho philfreo exactly also adding could lead beginners think rendering even dom case keeping reference hash wanted point nothing else", "d": "5/2013"}, {"body": "wyuenho acstll philfreo asked dropping suffix ok instead", "d": "5/2013"}, {"body": "wyuenho bummer order need keep views splitting view fixed number subviews rendering collection", "d": "5/2013"}, {"body": "dgbeck wyuenho think need use cases see take issue view subclass subviews stored hash collectionview subclasses backboneviewxview also stores subviews array", "d": "5/2013"}, {"body": "dgbeck wyuenho collectionview scope discussion examples provide proof view subviews stored hash suitable building block abstractions like collectionview", "d": "5/2013"}, {"body": "asked dropping sub suffix ok addview removeview instead addsubview removesubview agree fine addressing philfreo point may provide sufficient information exactly adding redundant adding view view new view implicitly subview andreypopp dgbeck sure talking collectionview scope discussion mainly use subviews render collection elements nt many occasions split large views smaller views suppose could happen quite often also biased second example backgrid could easily built using top level view still would nt keep components inside hash attach filter grid paginator inside instance vars set inside constructor suppose keeping inside hash explicit name minimize name collisions however unlikely maybe heh feel like backtracking previous position using hash backing store split large view subviews name subcomponents using instance vars convey purposes think choice data structure really comes would want render subviews case splitting view dgbeck termed would use term heterogeneous subviews hash convenient want able get individually render attach well defined points inside template sufficiently smart solution willcan keep ids template names subviews loop hash case rendering collection homogeneous subviews array natural easily loop append rendered subviews names nt important individually subview case collectively collection subviews may need named class list class classify subview use cases way seem like mutually exclusive circumstances would require", "d": "5/2013"}, {"body": "actually homogeneous subview case hash would also fine keep ordering keys would model cids inside collection attached parent would nice default render implementation render cases automatically people still override even flexible implementation course make use nested models well whole story", "d": "5/2013"}, {"body": "agree wyuenho earlier point storing subviews array hash would desirable worked several projects maintaining order subviews vital hash alone would nt work mostly subsections need processed particular order chaplin take overload accessor setter also expose hash array view instance chaplin concept allows specifing arbitrary key hash mostly found keying work better javascript var parentview new parentview var childview new childview set parentviewsubview childview passed view stores retrieve parentviewsubview complete thiscloseform passed string retrieves cid iterating parentviewsubviews function v vtrigger complete remove parentviewremovesubview parentviewremovesubview childview equivalent pass either view instance key", "d": "5/2013"}, {"body": "worked several projects maintaining order subviews vital hash alone would nt work mostly subsections need processed particular order sounds like fixed number heterogeneous subviews case elaborate order subviews needed iterated", "d": "5/2013"}, {"body": "commented far far still love better section docs afraid still nt think baking patch backbone core fundamentally basically bit code around array asking programmer keep list views array hash much ask probably going get far building app first place going add patch backbone core make removal subviews automatic probably merely look something like view would handle arrays hashes could optionally registering subviews whatever way see fit said still think including line backbone would starting lead folks unfortunate path manually removing subviews event listeners views great way seriously hurt performance decently complex ui said alternative going flow structuring object lifecycles topmost view needs perhaps collection needs whole swatch views models simply gc eich nature intended pleasing path", "d": "5/2013"}, {"body": "asking programmer keep list views array hash much ask probably going get far building app first place jashkenas think problem like beginners wo nt even start thinking array hash really tired creating dom subtrees attaching events old way jquery inside start wondering chose use backbone first place may competent ui dev nt think stupid try times get point could say mmm really need array hash loops manage views happened love feel designed devs small shops churn small pagers mostly static marketing content happen occasionally localize messy jquery code inside couple methods serve prep area call jquery plugins manually removing subviews event listeners views great way seriously hurt performance decently complex ui think gc tiny subproblem much bigger problem enough basic help provided anyone uses sooner later try nest views ca nt expect sufficient foundation large complex dashboard console ui judging numerous code sample people submitted far thread common theme already starting emerge instead everyone else solve problems using numerous incompatible way try make decisions bake core nt purpose library provide solutions common problems apps built top keep code dry alternative going flow structuring object lifecycles topmost view needs removed perhaps collection needs reset whole swatch views models simply gc eich nature intended pleasing path say much pleasant way code modern complex web ui instead mostly jquery", "d": "5/2013"}, {"body": "mmm really need array hash loops manage views happened nt need hash loop properly including events manage subviews way would implement wanted automate process reduce subview needing lines code initialize render remove line code addsubview backboneview designed devs small shops churn small pagers mostly static marketing content fact backboneview opened ended precisely people need simple stuff", "d": "5/2013"}, {"body": "perhaps rephrase positive light would proponents ticket think adding single line leaving documentation", "d": "5/2013"}, {"body": "jashkenas adding oneliner", "d": "5/2013"}, {"body": "jashkenas exactly handle subviews think strange backbone magically know view property without providing way add display subviews seems like subview management going left custom implementations plugins leave pluginscustom code simply patch view remove necessary", "d": "5/2013"}, {"body": "jashkenas adding seems like partial implementation clear saving line typing could help implementors fully featured subview management routines personally including code core totally choosing official plugin nested heterogenous andor homogenous views", "d": "5/2013"}, {"body": "nt need hash loop properly including events manage subviews way would implement wanted automate process reduce subview needing lines code initialize render remove line code addsubview point point provide better structure current provides little fact backboneview opened ended precisely people need simple stuff philfreo solving problem solve problems jashkenas like see would document subview issue preference would change code nt anything substantial outsourced responsibility", "d": "5/2013"}, {"body": "eh point whatever everyone else thinks nt think one liner nt quite enough feels bit like implementation little back much better solved really trying see could provide optional best practice minimal implementation part library address pain point heard mentioned lot people learning stuff works seems opened pandora box potential implementations fine docs", "d": "5/2013"}, {"body": "seems opened pandora box good reasons eek let wait see doc looks like", "d": "5/2013"}, {"body": "one liner tried ways among others letting views gc eich nature intended far simpler easier maintain nt think discourage either approach certainly nt nudge users toward complex two", "d": "5/2013"}, {"body": "awesome reassuring hear brad closing ticket bit quiet anyone wants send pr nice docs section merits noreference vs arrayreference vs namedreference cheered", "d": "5/2013"}, {"body": "good call issue nothing nt implement something wo nt help others already done better maybe link popular projects newcomers look documentation amazed many tweets see people complaining never heard marionette chaplin layoutmanager etc", "d": "5/2013"}, {"body": "totally hear arguments jashkenas removing whole swatch views nature way pretty advanced stuff easy get wrong seems like cases would need take approach due performance pretty far cases whoever calling shots call instead root view said maybe cases common supposing sure expensive really lots views one added benefit integrating something like tim code besides little important added structure would standardize place put subviews plugins mixins could leverage standard location right fragmentation popular frameworks makes messy build crossframework mixins related subviews one liner pretty damn slick also agree seems incomplete still curious explore array vs hash question find compelling case array necessary cases found would something work otherwise nt got much", "d": "5/2013"}, {"body": "noob struggling right maybe competition see redo todo app nested views maybe phone book multiple emailtelephone numbers per contact", "d": "5/2013"}, {"body": "erichbschulz todo list subtasks", "d": "5/2013"}, {"body": "erichbschulz raneksi tastejs hopefully provide example need subviews management plus many topics", "d": "5/2013"}, {"body": "confirm patch working normal mode tried tag master today", "d": "5/2013"}, {"body": "specifically something like get following typeerror object nt support property method publish full nodejs example like though seems pretty much patch attempt modelsave", "d": "5/2013"}, {"body": "jdalton suggested fix worked pull request combinations ie browser modes chrome passed test suite", "d": "5/2013"}, {"body": "unfortunately necessary evil moment without merging defaults would break", "d": "5/2013"}, {"body": "ugh old idea caused gone whatever thanks help", "d": "5/2013"}, {"body": "people might find modify events object method like js var myview backboneviewextend events click foo handleclickfoo initialize function options get called initialize events hash dynamically changed fiddling method", "d": "5/2013"}, {"body": "stumbled across discussion trying figure instance testing gets handled nodejs dependencies know bit late think balupton misunderstood issue stripped package gets submitted npm registry exports constructor package gets submitted npm registry requires utility functions creating instances app requires install via therefore two separate package directories exact version version get installed one one create instance app using way checking instance instance even though app requiring exact version package available node sees two constructors prototypes different come different modules different filesystem paths hope helps someone else going bit crazy trying figure downside nodejs system avoid versioning hell resolving dependencies ca nt reliably test instances across modules way python come languages", "d": "5/2013"}, {"body": "thanks chiming turns one foobarnodemodulesthing one foobarnodemodulesthingutilsnodemodulesthing inside foobar copy thing thingutils use assist thingutils specifies thing inside rather inside also add thing inside development etc originally issue posted nt thing however unfortunate thing approach nt work npm linking reason requite wo nt follow chain properly follows chain original location location inside foobar enounter issue perhaps though chaining problem actually bug node module code would awesome fixed far keeping things mind able get around issue need duck typing however fixes use cases sure least use cases able get around far hope helps", "d": "5/2013"}, {"body": "ran problem fetch entire collection pass reset true chance could reset true option added calling fetch individual model would give behavior requested", "d": "5/2013"}, {"body": "able hack behavior adding following parse function model type question parse function resp keys thisattributes foreach function key resp key undefined resp key undefined return resp basically response server lacks attribute local model explicitly adds key response undefined value causes fetch behave correctly least deem correct behavior remove model", "d": "5/2013"}, {"body": "well since navigate api determines use pushstate based browser support could use title case pushstate using hashchange", "d": "5/2013"}, {"body": "may stumble across created gist provides way accommodate overriding tojson method models amp collections also hoping something like would supported natively sure reasons nt issue also apply mongodb ran", "d": "5/2013"}, {"body": "use javascript code find convenient referencing extended constructor prototype definitely appreciated docs figured looking source code think current content quite misleading looks like explicitly reference base class kind example would appreciated ie explain attribute refers parent prototype need use ensure right value parent method invoked seem couple advantages form expresses intent better eg easier reader distinguish call method extended constructor vs call method totally unrelated constructor change base class even name nt worry explicit references method overloads issues missing suppose counterpoint change name change references guess understand wanting couple backbone documented features coffeescript even things change eg coffeescript stops looking think could still set backbone another alternative set property equivalent use javascript code maybe something without underscores try avoid problem side note make docs might also worth mentioning use ca nt clever tried looks like many people since breaks levels super calls thanks", "d": "5/2013"}, {"title": "controller dependency check implementation bug", "body": "fiddles different attribute controller fails message console nonexistent resource name used works keeps silence nt work speaknoevil would like offer pull request totally lost sources also think naming convention discussed looks like something totally new introduced like resource naming convention doesnt work like controller naming convention keeps silence fils even like template naming convention cource fails version works totally unexpected think work like dependency check implemented using", "num": "2776", "d": "5/2013"}, {"title": "needs api issue nested resources", "body": "seems like needs api nt work need child controller parent jsfiddle example", "num": "2774", "d": "5/2013"}, {"title": "emview extending views wrapping tag", "body": "might wrong nt logical rendered ie change nesting would gave flexible way extend views jsfiddle want wrap", "num": "2773", "d": "5/2013"}, {"title": "router setcontext handler context raises embermandatorysetterfunction exception", "body": "using current master post problem existed since think transitioning two representations route custom serialize method using helper line router raises exception route looks like defined like article category part url representation meaning defined routerresource changed function emberrouter everything works fine interestingly happens already articleroute entering first time works fine things meant actual issue ember", "num": "2772", "d": "5/2013"}, {"title": "regression sending events within emroute broken", "body": "event defined hash route object used able call getting following error simple demo tip working", "num": "2771", "d": "5/2013"}, {"title": "acessing external api", "body": "hi guys sorry post please advise following web application written emberjs rails backend going port application phonegap ios thing struggling set api endpoint working iphone thanks help", "num": "2768", "d": "5/2013"}, {"title": "adds lag route transitions use css animations", "body": "today updated project emberjs together emberdata handlebars unfortunately noticed heavy lagging transitioning one route another parent animating views via css transitions try click back button two sites running probably delay url changes immediately higher level sidebar slides view press back another time result debugging chrome profiles long yellow bar probably problem referenced line applicationjs would amazing able sort problem soon even though uploaded nonminified resources provide details project necessary best stefan", "num": "2767", "d": "5/2013"}, {"title": "eachview collectionview freezes browser removing items", "body": "helpers extremely slow freezes chrome seconds content changed new array array contains moderate number items need updated items appears time spent recursively destroying children collection view understandably little faster view much think use case fair let say list ordered items settings data whatever makes sense let someone pick something list display time changes list views elements would updated working around problem manually generating appending html page able add items see delay items view delay dramatically reduced introduction lazy block rendering blink demo ember", "num": "2764", "d": "5/2013"}, {"title": "emberselect initialize properly value", "body": "fiddle reproducing issue using combination returns select show first item content correct one solve problem constructor like", "num": "2763", "d": "5/2013"}, {"title": "content property sorting", "body": "hello wonder controllercontent nt sorted controller sorted happening lt nt sorted controller view content lt sorted controller view wo content", "num": "2762", "d": "5/2013"}, {"title": "sortablemixin duplicating records items added asynchronously pushobject", "body": "jsbin using add items arrayproxy ends lot duplicated items seems easiest reproduce items added asynchronously also seen pushing lot objects quickly actual issue something correctly", "num": "2760", "d": "5/2013"}, {"title": "use getter accessing collectionviewitemviewclass collection helper", "body": "could itemviewclass defined property uses extend itemviewclass parent maybe design decision keep things static however using allows know parent class", "num": "2758", "d": "5/2013"}, {"title": "automatic loading route causes exception first route transition promise model", "body": "steps reproduce create emberjs application add default route returns promise add loading route run app way default route loaded first expected see loading template promise resolves actual exception rendering loading template seemingly due route parent route see jsbin working example", "num": "2756", "d": "5/2013"}, {"title": "compatible jquerymobile", "body": "wondering ember compatible jquery mobile working ember personal project would like used jquery mobile thanks", "num": "2753", "d": "5/2013"}, {"title": "slow transitions related backburnerjs", "body": "upgrade morning discovered immediately app making slow transitions cases takes nearly transition little bit poking around discovered problem seemed outlet views completely destructed synchronously new outlet views inserted app spending seconds destroying cleaning views ended using track problem commit seems commit immediately prior delays destruction views previously mentioned commit causes happen immediately sure help solve problem nt spent anytime looking backburnerjs help help", "num": "2750", "d": "5/2013"}, {"title": "race condition arraycontroller observers", "body": "encountered corner case bug observer array controller triggering early causing property model invalidated fiddle bug current workaround", "num": "2749", "d": "5/2013"}, {"title": "ability customize routestemplates", "body": "using ember rails asset pipeline sprockets filename special collides embers use routes special meaning would possible set custom name used ember example principal main base work around right using filenames nt match name controllerviewtemplate thoughts would desirable thing able configure quick look source code turn one two hits hopefully addition would pretty straightforward", "num": "2743", "d": "5/2013"}, {"title": "possibility proxy embertemplates", "body": "hello discussion luke melia stackoverflowcom possibility proxy template cache able load precompiled templates demand webserver via ajax requests concrete implementation would web application huge size internationalization files around entries per file template files around even possibleapplicable load files within one huge file web app responsive also available mobile devices would efficient opinion load things user taking quick view uses app thought proxy template cache able load needed precompiled handlebars template files webserver demand hope description use case clear enough anybody follow missed something something unclear please tell try deliver proper description edit meanwhile extending apply implementation template resolver via synchronous request see possibility load needed precompiled templates", "num": "2742", "d": "5/2013"}, {"title": "router applicationcontroller objectcontroller currentpath proxied content", "body": "", "num": "2737", "d": "5/2013"}, {"title": "jquery version check support new jquery", "body": "", "num": "2735", "d": "5/2013"}, {"title": "lazy load models routes controllers authentication", "body": "hello searched lot finding solutions theoretical problem like hide much unauthenticated users means perfect solution would userssessionsroutemodelcontroller load everything else need application log found solutions nt really fit provide one nonemberlogin seems okay application authenticated see advanced right system real emberway love write one app extend b provide model data restrict api yeah course real application also like hide application knowledge unprivileged user ideas solved register amp inject de amp encryption one way go thx input", "num": "2732", "d": "5/2013"}, {"title": "alt meta allowedkeys broken chrome", "body": "ctrl shift work fine alt meta nt seem work correctly chrome version running ubuntu symptons holding alt prevents clicking even alt specified allowedkeys holding meta allows clicking reguardless specified allowedkeys eventmetakey always false thanks", "num": "2729", "d": "5/2013"}, {"title": "handlebars dependency", "body": "latest emberjs version says implementation checks latest handlebars version different compilerrevision exactly result latest emberjs works nt work newer versions states possible solution assert compiler revision check", "num": "2728", "d": "5/2013"}, {"title": "emberhandlebarssafestring causing uncaught error notfounderror dom exception", "body": "following helper app originally converting markdown reduced smallest possible use case transition betwee two routes use helper get tried older version ember master stacktraces rev tracked place tries find nonexistent metamorph tag begin exists end nt ends calling master tried stacktrace seems smaller seems error hidden tried reproduce jsbin without luck", "num": "2726", "d": "5/2013"}, {"title": "routers render undefined known route", "body": "important bug testing application debugging template linking route wasis supposed inside variable time debugging nt variable appeared undefined undefined reason generated href link ended buggy part url considered valid route ember router means going nt redirects default route defined one existing valid route route rendered url nt correspond route defined router course non handled url goes correctly defined route", "num": "2725", "d": "5/2013"}, {"title": "render helper looking controllers properly", "body": "blog post announcing specifically states regard render helper want use alternative namespace use separated path render blogposts render blogposts template controller blogpostscontroller incorrect render helper still using old dot notation specifically line responsible causing lookup fail commenting fixes problem", "num": "2723", "d": "5/2013"}, {"title": "source code building app video", "body": "please link source code github repo video thanks", "num": "2721", "d": "5/2013"}, {"title": "click waits doubleclick defined", "body": "object event defined would great automatically waits potential second click happens within timeout single click fires caveats people want something fire click well anyways often usecase happen vs double click taking different action effect would performance", "num": "2720", "d": "5/2013"}, {"title": "sort properties itemcontroller within arraycontroller", "body": "see jsbin demonstrating issue specify property property defined controller specified collection sort since itemcontrollers supposed decorate delegate model makes sense able sort basically treat standin model otherwise end decorator properties two places directly model sorting itemcontroller needed view thoughts", "num": "2717", "d": "5/2013"}, {"title": "proposal inverse binding bindattr attributes", "body": "following view requires controller like make work expected appmycontroller emarraycontrollerextend query cansearch gt get query length gt property query cannotsearch embercomputednot cansearch think could improved something like would mean one less controller property previous issue requested something like classes already supported syntax think supporting relatively straight forward detect bang wrap bindattr property something others would want happy create pull request", "num": "2714", "d": "5/2013"}, {"title": "feature request observe triggers events", "body": "like see sort way observing arbitrary triggers view view controller reason change value something observing nice change something else order observer fire would nice could observe triggers", "num": "2713", "d": "5/2013"}, {"title": "route context change creates orphan view", "body": "whenever context change processed route end additional view sits around prerender looks like view created upstream connectoutlet containerlookup nt get destroyed hasequivalentview guard activated viewdestroy returning might needed", "num": "2712", "d": "5/2013"}, {"title": "applicationhandlebars template nt rendered default", "body": "goal simple js mvc appliction using padrino trying add emberjs also switched asset pipeline project simplicity problem rendering default applicationhandlebars template nt rendered know content rendered default start server nt see anything templatesapplicationhandlebars html raffler applicationjs javascript require libjquery require libjqueryujs require libhandlebars require libember requireself require raffler raffler emberapplicationcreate raflerjs controllersapplicationcontrollercoffee routesapplicationroutescoffee routercoffee js files compiled one know assetsapplicationjs could", "num": "2699", "d": "5/2013"}, {"title": "emhandlebarsregisterboundhelper receiving unbound options hash", "body": "helper like template like get", "num": "2696", "d": "5/2013"}, {"title": "computedproperty squashed set descriptor meta left behind", "body": "makes debugging confusing", "num": "2691", "d": "5/2013"}, {"title": "emberlinkview documentation needs regenerated", "body": "appears page last generated missing backquote block text looking current code backquote assuming page needs regenerated", "num": "2686", "d": "5/2013"}, {"title": "crosslink documentation nt rendered properly", "body": "instead seem left inline", "num": "2684", "d": "5/2013"}, {"title": "proposal containerview relative helpers", "body": "recent release new helper colliding helper library believe helper names correct cases would nice could wrap entire element containerview calls helpers within context would first look helper within containerview exist go chain thoughts", "num": "2683", "d": "5/2013"}, {"title": "ember production warning causes console undefined error internet explorer", "body": "testing production internet explorer user presented script error appears line", "num": "2679", "d": "5/2013"}, {"title": "uncaught referenceerror start defined", "body": "run test get error uncaught referenceerror start defined", "num": "2675", "d": "5/2013"}, {"title": "item grouping", "body": "ruby rails currently use groupby method group results based single attribute models instance let say making library application list book checkouts checkout date might make sense us group list checkouts day day heading could table checkouts day making data intuitive easier digest contemplating switching ember would major consideration might accomplish ember editing date attribute checkout inline would ensure stays listed correct grouping angular seems functionality grouping section supported ember would best way go implementing difficult would", "num": "2671", "d": "5/2013"}, {"title": "uncaught error notfounderror dom exception", "body": "hi created simplest example could clicking link get notfounderror dom exception error", "num": "2669", "d": "5/2013"}, {"title": "change rest model state without using set", "body": "model custom attribute array objects need commit data pushing changes property javascript appadapterregistertransform images serialize function value var ret valueforeach function img retpushobject imgget uuid retget length return retjoin else return false deserialize function value ret typeof value undefined uuids valuesplit var lt uuidslength var id uuids retpushobject appimagecreate uuid id return ret appitem dsmodelextend images dsattr images controller uploadimage function var self", "num": "2667", "d": "5/2013"}, {"title": "issue introduced", "body": "kselden discussing try get failing test soon cc", "num": "2666", "d": "5/2013"}, {"title": "ember mingzip distribution size grows continuously kb month", "body": "ember kb mingzip right nt think unacceptably large certainly blocker last year around time kb went sleuthing plotted mingzip size developed time script looks like single commit caused jump ember file size rather death thousand paper cuts ember seems continuously growing rate around kb per month guess bunch approaches deal anything remove slim anything extract optional library try slow continuous growth bit slowing continuous growth probably trickiest problem since nt want stall development either jquery seems aggressive file size perhaps maybe still learn", "num": "2664", "d": "5/2013"}, {"title": "extremely odd behavior nested helpers", "body": "discovered really bizarre issue today using nested helpers common condition seems two helpers different conditions common nested condition causes unexpected rendering example assume three conditions true true value hello hello however hello hello see fiddle might thinking uh wtf completely blow mind add carriage return newline nested statements works expected see fiddle app currently problem exists fiddle unfortunately ca nt say sure long problem noticed today cc jkoehl", "num": "2663", "d": "5/2013"}, {"title": "attribute bindings embertextfield", "body": "uses layout tag variaty possible attributes right possible values listed think good idea add list really good idea make pull request", "num": "2657", "d": "5/2013"}, {"title": "textfield scope issue used inside handlebars helper", "body": "believe found bug textfield nt use context handlebars helper created simple jsbin show issue works grabbed handlebars site jsbin start typing textfields bound value whatever app came across issue happen textfields show blank", "num": "2655", "d": "5/2013"}, {"title": "set properties destroyed controller route exit using appreset", "body": "app regularly use hooks provided route set unset state controller worked fine combination however trying upgrade longer works throws following error look ember source looks like objects container destroyed routing restarted jsbin demonstrating problem run web developer tools open could guard destroyed objects app code prefer avoid suggestions avoiding getting started patch ak", "num": "2649", "d": "5/2013"}, {"title": "error could resolve itemcontroller undefined", "body": "get error transition one route new route loads arraycontroller specified itemcontroller property loading route without transition works fine error occurs thislookupitemcontroller objectatcontent called figured far wanted open get additional thoughts looking intoreproducing incredibly familiar code yet post find maybe related", "num": "2647", "d": "5/2013"}, {"title": "block views sharing first block", "body": "sure understand purpose block declared views ie views scripting markup markers experiencing bug created fiddle shows problem created number block declared views different blocks markers view inherits base class block first view gets repeated view declared would thought could put different markup scripting assumption wrong wrong treat views like", "num": "2646", "d": "5/2013"}, {"title": "computed property macros", "body": "use slew computed property macros zendesk happy either add pullrequest repository create separate addon please let know would prefer examples javascript emberobjectcreate user emberrequired embercomputedoneway like oneway bindings username embercomputedoneway username embercomputednotnull embercomputedprototypenotnull use given value property would return commentcount embercomputednotnull username others include iff computed value loosely equals given value iff computed value strictly equals given value iff computed value loosely equal given value iff computed value strictly equal given value take computed value interpolate given string use given value property would return", "num": "2645", "d": "5/2013"}, {"title": "action toggleproperty propertyname tries trigger action router", "body": "try use action helper template getting error start happening commit merged error fires embercontrollermixin send method send function actionname var args slicecall arguments target bubble true fiddle", "num": "2636", "d": "5/2013"}, {"title": "problem arraycontroller dynamic segments routing", "body": "hi got problem arraycontroller dynamic segments routing jsfiddle thanks linn htun", "num": "2634", "d": "5/2013"}, {"title": "calling find instance dsmodel always isloaded set true", "body": "appcurrentuser dsmodelextend email dsattr string phone dsattr string name dsattr string appcurrentuserfind get isloaded true appcurrentuserfind foo bar get isloaded false", "num": "2632", "d": "5/2013"}, {"title": "api docs error around statemanager", "body": "moving states section emberstatemanager docs code snippet exists turns initialstate function method since dynamic properties deprecated instead read something like", "num": "2631", "d": "5/2013"}, {"title": "best way use ajax loading model dynamic segments router", "body": "hi facing problem dynamic segments router link js model method route nt calling linkto transitionto clearly stated ember doc case really need point load data ajax request route thanks linn", "num": "2625", "d": "5/2013"}, {"title": "action fires double click event updating", "body": "hello everyone updating ember version experi\u00ebncing issues actions handlebarjs template div renders button clicked two click events instead one function openfilter called twice tried different versions issue present guys idea might cause", "num": "2624", "d": "5/2013"}, {"title": "getting typeerror approuter undefined building emberjs", "body": "hello would like build emberjs using ubuntu cloned official github project cd project described readme file bundle install rake dist error shown screen result get directory shown image would like use ember emberdata include emberjs emberdatadepsjs files test project problem getting typeerror approuter undefined using clientjs file init ember thisapp emberapplicationcreate approutermap function thisroute contributors thisroute contributor path contributors contributorid something wrong build process include js files project thank advanced", "num": "2623", "d": "5/2013"}, {"title": "strange behavior space put view", "body": "hi experiencing weird problems cases notably update still found guess one reported sure known issue basically happens simple set views inside characters put view sometimes code belonging totally different part file shown page code hidden belonging another example issue fixed put empty char use case editor strips empty spaces character changes wrong behavior good one known issue build example jsfiddle let know", "num": "2622", "d": "5/2013"}, {"title": "outlet bound statemanager nt rerender changing state twice", "body": "using statemanger track auth status user login first time outlet correctly rendered however log back outlet render time filed post w jsfiddle far nobody able fix problem completely although one solution working requires call transitiontoroute prefer avoid", "num": "2617", "d": "5/2013"}, {"title": "new official way get controller value instance variable one controller", "body": "new way get controller value instance variable controller instance using using approuterget applicationcontrollerisloopingenabled access value approuterset applicationcontrollerisloopingenabled set value isloopingenabled variable playbarcontroller instance want know best practice right ember experiencing lot problems upgrade preversion", "num": "2608", "d": "5/2013"}, {"title": "nested routes active state", "body": "hey issue nested routes believe bug emberjs please tell wrong scenario index route list links displayed sliders sliders route list links displayed sliders slider route list links displayed sliders details slider clicking one links list index url url changes right one slider displayed however link classed active clicking one links list sliders url url changes right one slider displayed link classed active going directly one sliders via url slider displayed however link classed active finally illustrated issue repository github relevant files indexhtml jsappjs", "num": "2605", "d": "5/2013"}, {"title": "checkbox checked value update different depending browser", "body": "implement checkbox view access checkbox value get different values depending browser see jsfiddle", "num": "2604", "d": "5/2013"}, {"body": "needs array template using playerplay instead playerplay woking fiddle", "d": "5/2013"}, {"body": "intuitivepixel emm need array want needs api handle dependencies real application need access child controller parent", "d": "5/2013"}, {"body": "needs array strings define dependencies check fiddle see working side note ask kind questions", "d": "5/2013"}, {"body": "intuitivepixel oh sorry inattentive reading comment well seems like following naming convention throws away part cuz also works fine quite unexpected thought something like inside side note ask kind questions sure bug still sure docs code", "d": "5/2013"}, {"body": "hmm actually bug fails contains name nonexistent controller ie resource name seems like dependency check implementation differ real dependency resolve implementation prepare clear issue", "d": "5/2013"}, {"body": "discussion amp certainly usecases kinds nestings wrapping input great example wonder counterpart alternative nesting", "d": "5/2013"}, {"body": "adding would semantic hope confusing resulting render would like template contents think like handelbars template", "d": "5/2013"}, {"body": "anything like observe property computed property depends one routes anything else sounds similar", "d": "5/2013"}, {"body": "istefo possible jsbin jsfiddle demonstrating would awesome", "d": "5/2013"}, {"body": "seems likely caused change basically route functions get called route gets pushed list currently active routes behavior definitely changed case certain whether considered buggy behavior internal router code depends whether returns false determine whether routing abortedredirected redirect route arguably considered one currently active routes time firing event nt know whether case said though pretty major facelift routing api getting shortly probably almost certainly fix problem wantneed fix probably put something earlier sure crucial issue", "d": "5/2013"}, {"body": "say entering app send event handling event start upward since leafier routes nt loaded yet seems weird even facelifted api certain supporting use case let know missing something obvious", "d": "5/2013"}, {"body": "hey valmilkevich unfortunately github issues poor venue sorts discussions qa sessions much better venue would ask stackoverflow make sure tag question", "d": "5/2013"}, {"body": "regression fixed grab master good please confirm release next days", "d": "5/2013"}, {"body": "confirmed using latest buildsemberjscom transitions rocknroll awesome thanks", "d": "5/2013"}, {"body": "istefo also nice name", "d": "5/2013"}, {"body": "yeap already fixed master see", "d": "5/2013"}, {"body": "oh silly noticing thanks bunch", "d": "5/2013"}, {"body": "freedompeace hehe problem reason caught noticed upgrading cheers", "d": "5/2013"}, {"body": "looking arrangedcontent proxy original uhm content ember uses changed content sorting filtering without touching original however usually nt need access either directly part want target proxy controller since want something bit semantic use x form helper say case blog something along lines however slightly slower plain prepend every property inside update simply use since pull request implies mean context controller last thing kind question may want ask stack overflow nt already exist opening issue use emberjs tag question also previously answered", "d": "5/2013"}, {"body": "minusfive thank explanation closing issue", "d": "5/2013"}, {"body": "minusfive explanation great think u time update official api docs", "d": "5/2013"}, {"body": "stefanpenner thanks", "d": "5/2013"}, {"body": "minusfive awesome", "d": "5/2013"}, {"body": "fixes issue definitely seems like hack elegant way fix issue", "d": "5/2013"}, {"body": "encountered", "d": "5/2013"}, {"body": "believe block", "d": "5/2013"}, {"body": "stefanpenner agree fix fixed shortly", "d": "5/2013"}, {"body": "juanjardim stackoverflowcom tagged emberjs discussemberjscom would much better venue ask questions notice issue regarding jquery mobile ember would good venue", "d": "5/2013"}, {"body": "workmanw seems bad high level stuff help could also open issue link back one quick jsbin jsfiddle showcasing issue ping ebryn kselden specific ideas debugging suggestions", "d": "5/2013"}, {"body": "stefanpenner yea sure thing way jsconf presently flight nt wifi try get much possible radio silent hours fiddles notice click views less views time takes transition toggle views less views several times fiddles seems linear problem increase view count noticeable presently believe long transition due fact views appear destructed synchronously could wrong fiddle w demonstrates problem fiddle w works fine ebryn kselden help", "d": "5/2013"}, {"body": "workmanw fantastic", "d": "5/2013"}, {"body": "fixed interestingly slow chrome safariwebkit nightlies", "d": "5/2013"}, {"body": "ebryn nice quick response workmanw confirm helps", "d": "5/2013"}, {"body": "ebryn awesome confirm land looks like theory sync destruction way base thanks", "d": "5/2013"}, {"body": "updated fiddle emberlatestjs pretty easy see fixed", "d": "5/2013"}, {"body": "ebryn stefanpenner confirmed fixed thanks guys team work", "d": "5/2013"}, {"body": "sandstrom quickfix inline index view template name point somewhere else", "d": "5/2013"}, {"body": "stefanpenner thanks good suggestion far named files slightly different eg would neat could customized", "d": "5/2013"}, {"body": "think way customize", "d": "5/2013"}, {"body": "sandstrom using", "d": "5/2013"}, {"body": "wagenet atm", "d": "5/2013"}, {"body": "sandstrom reason", "d": "5/2013"}, {"body": "particular reason although use ember nonrails deployments mobile apps think need another build system anyway solve problem special treatment sprockets", "d": "5/2013"}, {"body": "sandstrom issues think may ca nt say sure however", "d": "5/2013"}, {"body": "herom lukemelia think customizing resolver correct way", "d": "5/2013"}, {"body": "kselden skeptical making resolver async maybe chime tuesday may pm peter wagenet wrote herom lukemelia think customizing resolver correct way reply email directly view github", "d": "5/2013"}, {"body": "believe ideal scenario async code loading entering route requires would benefit making resolver async would opening pandoras app developer benefit routes loading state navigate route requires unknown graph promises fulfilled user comments code templatelibet al user enters visual loading async operations kicked include loading code async fulfills rejects user exits visual loading enjoys new portion app allows us resolve load code dependencies executing code may may exist totally see path resolver async deep lazy code resolving would like defer long possible hopefullylikely avoid together", "d": "5/2013"}, {"body": "stefanpenner see point also avoid async loading would imply load bigger portions templates let say whole templates single point entry construct would possibly consist templates together keep loading templates whole application prepared user navigates another section downside likely show spinner another element user navigates new section templates sync loaded likely result bad user experience app perhaps would lesser two evils one call like async loading template portions would imply single point entry exist user able step application point wagenet meantime customized resolverresolvetemplate method implement sync loading need get templates server time everything looks like loading really fast guess problems show mobile device slow network connection tries access application", "d": "5/2013"}, {"body": "definitely looking something similar production also immediate quick dev purposes without need recompilewatch files solution dev mode sounds identical herom synchronously loading inside combined synchrofied version minispade made massive ember projects much pleasant anyone working solution may take crack", "d": "5/2013"}, {"body": "jayphelps would solution guess synchronous loading applicable form lazy loading templates wagenet stefanpenner would possible interface mixin asking would something like going call different classes dispatching done class one would check property variable could safely rely value template also decent developer would able create custom class replaces default one would possible keep code organized way likes used", "d": "5/2013"}, {"body": "great support asynchronous loading application theoretically possible sure would rough edges would need updates ember work think right workarounds mind b honest starting project would choose one workarounds benefit ideal path seems small amount effort would likely required going close feel free continue conversation thread", "d": "5/2013"}, {"body": "tested chrome seems working fine although click event nt work firefox seems example issue related ember", "d": "5/2013"}, {"body": "ok maybe old chrome issue", "d": "5/2013"}, {"body": "assuming fixed let us know problems future", "d": "5/2013"}, {"body": "ok thanks looking guys", "d": "5/2013"}, {"body": "dupe", "d": "5/2013"}, {"body": "issue jquery version version jquery work fine ember handlebars using jquery ok receiving following error revert handlbars version uncaught typeerror undefined function", "d": "5/2013"}, {"body": "fixed master source", "d": "5/2013"}, {"body": "seems work missing something", "d": "5/2013"}, {"body": "controller nt namespace think actually still issue think something like work exactly sure create new namespace", "d": "5/2013"}, {"body": "still issue tell jsbin shows correctly pulls template nt run proper controller shows talking", "d": "5/2013"}, {"body": "change controller name work question supposed resolve controller namespace either", "d": "5/2013"}, {"body": "according ember blog lookup blogindexcontroller render blogposts template controller blogpostscontroller", "d": "5/2013"}, {"body": "wagenet assigning simply author feel free reassign", "d": "5/2013"}, {"body": "pretty sure commit added namespaces decided treat slashes dot notation ease use namespaces longer behavior want risk removing people relying slash notation dot notation behavior maybe someone could put error handler namespace nt exist tells people might want try dot notation", "d": "5/2013"}, {"body": "sen\u00f5r tomdale ping", "d": "5/2013"}, {"body": "via emberjs freenode", "d": "5/2013"}, {"body": "srirangan actually open website issue likely include link code video", "d": "5/2013"}, {"body": "", "d": "5/2013"}, {"body": "would effect ui feeling lessresponsive amount time allowed second click may may bad personally would want ember suggesting workaround use schedule method run delay cancel", "d": "5/2013"}, {"body": "go lukemelia suggestion though something really set always write pr consider actual implementation guarantees merge course", "d": "5/2013"}, {"body": "alright check run later thanks folks", "d": "5/2013"}, {"body": "happens used returns objects already sorted sure fix could look like seems would need change way works arrays ie implement better way add mixins arrays", "d": "5/2013"}, {"body": "drogus exactly use case sorting sortablemixin aware itemcontroller plays underlying items probably needs deep refactoring array mixins cc hjdivad", "d": "5/2013"}, {"body": "could arrayproxy provide objectlookup callback default returns item straight content array arraycontroller wraps itemcontroller one specified wed may sylvain mina notifications githubcomwrote drogus exactly use case sorting sortablemixin aware itemcontroller plays underlying items probably needs deep refactoring array mixins cc hjdivad reply email directly view github", "d": "5/2013"}, {"body": "joefiorini may interest believe would solve issue albeit indirectly adds support computed properties depend arrays oneatatime semantics quite deep refactoring array mixins approach one computed properties rather mixins think underlying primitive reasonably well baked although even merged would nt surprised sugar functions altered somewhat caveat think could something like following nt time test item controllers yet though manage test fiddle pr please let know goes", "d": "5/2013"}, {"body": "think resist temptation add microsyntax ember handlebars helpers whole philosophy handlebars avoid logic templates much possible experience always seems kind annoying add controller property always seems clean way", "d": "5/2013"}, {"body": "lukemelia right unlikely add reasons mentioned", "d": "5/2013"}, {"body": "personally nt think adding operator bindattr logic said suppose use case suggesting primarily useful fact attribute inversely named instance would nt problem", "d": "5/2013"}, {"body": "ilovett think provides functionality need view controller", "d": "5/2013"}, {"body": "duplicate", "d": "5/2013"}, {"body": "ah course already done thanks sorry feature request may pm bradley priest notifications githubcom wrote ilovett think propertydidchange provides functionality need renderawesome function something observes controllerawesomecomplete awesomefunction function ton stuff thispropertydidchange awesomecomplete reply email directly view github", "d": "5/2013"}, {"body": "worries something want plan add", "d": "5/2013"}, {"body": "bradleypriest would like make events first class hack", "d": "5/2013"}, {"body": "kselden awesome magic hammer time glad hear something specific roadmap", "d": "5/2013"}, {"body": "following pattern app manually call adding function prototype helper would awesome", "d": "5/2013"}, {"body": "want take look", "d": "5/2013"}, {"body": "think known issue patch need totally make sure gets cleaned", "d": "5/2013"}, {"body": "kselden might also thoughts since merged pr", "d": "5/2013"}, {"body": "think explicit need evening road may pm peter wagenet notifications githubcom wrote kselden might also thoughts since merged pr reply email directly view github", "d": "5/2013"}, {"body": "hey droneloops actually better question stackoverflow much better venue q amp said aims improve logging around give dev better perspective actually going pr land within next days another thing confirm embertemplates object contains application template named appropriately finally provide failing interactive example jsbinjsfiddle deploying example heroku would make much easier help debug", "d": "5/2013"}, {"body": "version handlebarsember using works", "d": "5/2013"}, {"body": "bradleypriest sorry user error", "d": "5/2013"}, {"body": "upcoming release fix", "d": "5/2013"}, {"body": "seems bad said may githubcomemberjswebsite issue", "d": "5/2013"}, {"body": "due us using actual yuidoc renderer probably remove tags", "d": "5/2013"}, {"body": "registering helpers container changing containers need might solution", "d": "5/2013"}, {"body": "stefanpenner would nt call order access", "d": "5/2013"}, {"body": "hopefully fix please let know", "d": "5/2013"}, {"body": "using mocha embertesting currently supports qunit pending pr support testing frameworks either use embertesting build pr", "d": "5/2013"}, {"body": "ok thanks", "d": "5/2013"}, {"body": "seems like suggestions would help merged", "d": "5/2013"}, {"body": "sort question belongs stackoverflow rather issue tracker lot people happy answer ember questions places check basically achieve sorts enumerable management overriding property", "d": "5/2013"}, {"body": "closing favour", "d": "5/2013"}, {"body": "outlets template nt make sense works", "d": "5/2013"}, {"body": "teddyzeenny containerview assert currentview set nt already parent lower level replace containerview check added views parented already right nt find put view outlets try change outlet", "d": "5/2013"}, {"body": "kselden mind ps well acquainted inner workings emberviews", "d": "5/2013"}, {"body": "sorry emberdata", "d": "5/2013"}, {"body": "blia exact reason want support hasharrayobject format attributes handling dirty state case fare trivial would suggest use computed property would set string property use real association", "d": "5/2013"}, {"body": "tchak ok right im understand write computed property presentation write setter", "d": "5/2013"}, {"body": "think simples way would javascript appitem dsmodelextend images dsattr string", "d": "5/2013"}, {"body": "thans appitemscontroller difference", "d": "5/2013"}, {"body": "blia seems good", "d": "5/2013"}, {"body": "ebryn based conversation today ok close", "d": "5/2013"}, {"body": "think need discuss explain change people", "d": "5/2013"}, {"body": "following blog post improvement made router may affect code previously views torn rebuilt route transition views longer torn rebuilt transition path route eg moving instead controller model merely swapped performance improvement keeping ember philosophy however code relies view lifecycle events like called kind transition happens need update code bind observe view", "d": "5/2013"}, {"body": "could move emberstates emberdata package used", "d": "5/2013"}, {"body": "currently ship embertesting prod builds seems bad", "d": "5/2013"}, {"body": "total newb also package called name like stands potentially deleteable", "d": "5/2013"}, {"body": "would nt terribly worried growth said aware something keep mind one thing would benefit system distributing packages help prevent kitchensink effect tchak shipping ember testing prod builds seem bad also think statemanager important part ember said think new router use likely get substantial refactoring gilesbowkett oldrouter needs custom build adding prod build", "d": "5/2013"}, {"body": "one thing would benefit system distributing packages working browser compilation library broccoli written node like said embercamp would finally asset compilation kind orthogonal package distribution think needs solving distributing makes sense distribute compilable packages top npm whatever want broccoli mostly vaporware right first usable alpha two three weeks maybe another month two till good enough actually build stuff definitely take another months though get stable mature enough rely distribution opposed private build tool", "d": "5/2013"}, {"body": "moving emberstates emberdata standalone package many people use nothing core requires functionality used duplicated new router main things seem root case growth size additional functionality added framework additional functionality added every app need edgecase bug fixing integration code required make ember work newly extracted microlibs performance improvements sometimes comes size tradeoff address harder additional functionality added framework already custom builds exclude userfacing apis ember year ago nt think anyone wants trade router better array proxy behavior shave additional functionality added every app need visionmedia pinged us twitter using ember separated ember would allow people build parts need parts think extractable various form element views associated handlebars convenience helpers part package possibly existing cp macros new ones like jamesarosen suggests could added without increasing everyone build size mixins useful used internally ca nt think offhand look routerless build people nt like router mandated application structure part though surface facing apis rely lower level apis little kbwise provided framework nt used internally edgecase bug fixing performance improvements much done library ca nt punt stuff leaving developer save size integration code required make ember newly extracted microlibs think extracting smaller libs excellent forcing function better modular design framework library integration code end slightly larger functionality embedded added contribute kb said amount flack got monolith even nt really true sufficient nt think anyone would argue back microlib strategy gilesbowkett main ember build nt include special build people need", "d": "5/2013"}, {"body": "said think inflection point soon want start adding functionality useful large nonmajority number people nt need core build system component grunt broccoli whateverbased would allow us provide official additions optional part test support structure importantly would allow people build share higherorder plugins without recreating functionality hate total app size bloat authentication plugin file upload plugin pagination plugin recreate similar cp macros could sharing lack easy ways probably biggest frustration browser ecosystem", "d": "5/2013"}, {"body": "vote putting emberstates inside emberdata since strong use cases nt use emberdata strong feelings keeping inside ember extracting addon happy embercpmacros addon pretty small might make good experiment", "d": "5/2013"}, {"body": "agree jamesarosen emberstates stay ember reevaluate great package management solution put place", "d": "5/2013"}, {"body": "emberstates simplified old router dropped", "d": "5/2013"}, {"body": "great package management solution put place yes moonbased homes fly spacecar", "d": "5/2013"}, {"body": "trek lt", "d": "5/2013"}, {"body": "unsure metric issue closed transition discussion discourse close issue keep discussion open keep issue open forever", "d": "5/2013"}, {"body": "assuming interested parties seen closing sounds fine feel free reopen anybody wants use issue tracking whatever discussion either discourse sounds fine discourse leave link please", "d": "5/2013"}, {"body": "joliss thanks bringing attention totally nt want explode size cautious", "d": "5/2013"}, {"body": "think handlebars bug recently fixed try latest handlebars reopen fix problem", "d": "5/2013"}, {"body": "yea love test confirm seems revision changed fixed emberlatest currently supports compiler revision advice actually test", "d": "5/2013"}, {"body": "workmanw ideally could add failing test case update compilerrevision pull new handlebars verify fixes problem submit pr changes", "d": "5/2013"}, {"body": "come multitude times think best discussion default ember provides ones gives easy way add rest", "d": "5/2013"}, {"body": "dug fiddle happening connected case helper works fine implemented becomes expected context case additional view added hierarchy resolves top level view result binds suspect currently expected work properly blocks tests type usage however also documented one way recommendation would one paths document supported blocks enable block form instantiating metamorph view around block content preferably would done automatically possible could document", "d": "5/2013"}, {"body": "discussed kselden uses support children document helpers nt support block usage add assertion match", "d": "5/2013"}, {"body": "thanks information lukemelia think support future", "d": "5/2013"}, {"body": "ryanjm probably via perhaps making extensible tell use case", "d": "5/2013"}, {"body": "use case creating helper oddeven classes table thankfully could css also seems like really useful thing able blocks thanks", "d": "5/2013"}, {"body": "issue still occurs using instead jsbin", "d": "5/2013"}, {"body": "pivotalmedici fyi private methods merely delegate public api said issue would occur using methods recommended fix looks good small comments made resolved good merge", "d": "5/2013"}, {"body": "reproduced jsbin click archive posts boom refresh posts notice works fine going try write failing test", "d": "5/2013"}, {"body": "joefiorini seeing errors", "d": "5/2013"}, {"body": "close misusing lookupitemcontroller thanks wagenet", "d": "5/2013"}, {"body": "would expect work would love try fiddle wo nt run update use buildsemberjscomemberlatestjs external scripts served allowable mime types", "d": "5/2013"}, {"body": "seems like duplicate handlebars issue fixed handlebars maybe retry fiddle newer version handlebars", "d": "5/2013"}, {"body": "thanks turns bug handlebars upgrading latest handlebars fixes issue lukemelia strange view fiddle suggest reference latest emberdata resorted pasting gists referencing", "d": "5/2013"}, {"body": "use serve mime type allows embedding latest browsers", "d": "5/2013"}, {"body": "extract extensions separate project bower component", "d": "5/2013"}, {"body": "yes option meant said create separate addon moving away bower lately ember community uses general certainly", "d": "5/2013"}, {"body": "return true toggling false property therefore causing action propagate order events bubble need make sure return value action currently solve creating action calls nt return anything", "d": "5/2013"}, {"body": "teddyzeenny writing proxy function best solution override toggleproperty function controller anyway think check target actionname method", "d": "5/2013"}, {"body": "andrewfan anyway think check target actionname method would tough since target ultimately resolves router know router respond involves walking route path way root", "d": "5/2013"}, {"body": "imo using toggleproperty action megahax", "d": "5/2013"}, {"body": "andrewfan confirm using coffeescript", "d": "5/2013"}, {"body": "tomdale think represents api regression", "d": "5/2013"}, {"body": "ebryn got documentation machty", "d": "5/2013"}, {"body": "think revert controller bubbling less important analogue routerjs bubbling definitely need", "d": "5/2013"}, {"body": "fixed mark closed", "d": "5/2013"}, {"body": "machty nt mind explicit bubbling controller via anyways closing", "d": "5/2013"}, {"body": "andrewfan thanks reporting treating api regression rolling back see expected behavior", "d": "5/2013"}, {"body": "kind question ask stackoverflow github reserved bugs please pollute questions anyway expected behavior context passing route entering route via context passed set route controllers context array please ask question stackoverflow want detailed answer", "d": "5/2013"}, {"body": "yes kind requesting feature like old router instead directly assigning model hook pass param router sorry bad english", "d": "5/2013"}, {"body": "linnhtun think understand want discussed sort thing may add future releases though nt expect soon", "d": "5/2013"}, {"body": "could reopened feature request also workaround nt able find limitation preventing really moving forward ember", "d": "5/2013"}, {"body": "jshirley open feature request wo nt really help speed forward try tickets open necessary", "d": "5/2013"}, {"body": "yes recent regression emberdata emberjsdata", "d": "5/2013"}, {"body": "actually think different issue think design directly returns records found store considered always even creation lot confusion surrounding maybe reconsider behaves", "d": "5/2013"}, {"body": "teddyzeenny oh right bad yes design already talked lot particularly favor changing one understand working way consistent avoid confusions simple change discuss bigger plan", "d": "5/2013"}, {"body": "tchak teddyzeenny thanks clarifications", "d": "5/2013"}, {"body": "issue still issue likely belongs", "d": "5/2013"}, {"body": "good catch could interest creating pull request fix documentation", "d": "5/2013"}, {"body": "added pull request", "d": "5/2013"}, {"body": "howto questions get attention stackoverflow discourse try limit issues bugs new feature discussions", "d": "5/2013"}, {"body": "anything chance", "d": "5/2013"}, {"body": "assuming downloaded website nt think committed create jsbin jsfiddle demonstrate", "d": "5/2013"}, {"body": "cant create jsfiddle reproducing bug going stick thank responses", "d": "5/2013"}, {"body": "without reproduction steps going go ahead close would really valuable able reproduce test case troubleshoot please reopen", "d": "5/2013"}, {"body": "hi would mind please moving question stackoverflow link back happy help", "d": "5/2013"}, {"body": "maxsap emberdata package located please note although emberdata used including still would consider experimental experiencing lots churn solidify", "d": "5/2013"}, {"body": "stefanpenner thank heads aware would like test one reasons would like able compile ember source bradleypriest stackoverflow thread requested thank quick responses best regards maximos", "d": "5/2013"}, {"body": "maxsap possibly acceptable answer", "d": "5/2013"}, {"body": "nt know known ran issue recently code second rendered first context different", "d": "5/2013"}, {"body": "strange cross browser demonstrate jsfiddle jsbin help debug", "d": "5/2013"}, {"body": "sure consider right bug difference first added spaces surround", "d": "5/2013"}, {"body": "problem limited couple view put subsequent line also happens example put unless middle like need space something block helper work", "d": "5/2013"}, {"body": "sorry answer question replicated chrome safari amp firefox latest stable releases", "d": "5/2013"}, {"body": "flaviocopes believe also opened issue", "d": "5/2013"}, {"body": "handlebars solves bug", "d": "5/2013"}, {"body": "benmonro referenced filddle nt seem work", "d": "5/2013"}, {"body": "bad referencing emberlatestjs hardcoded release", "d": "5/2013"}, {"body": "questions like one better suited stackoverflow use github issues bugs discussion new features thanks", "d": "5/2013"}, {"body": "hi ayrton experiencing issue app creating multiple copies sliderlist slider objects linkto relies object equality set active class correctly emberdata data libraries use identity map created jsbin app small change made one sliderlist ever created works desired future probably better question stackoverflow", "d": "5/2013"}, {"body": "thank sorry inconvenience way appreciate helping", "d": "5/2013"}, {"body": "workaround implement using jquery \u00ecs checked consistent behavior across chrome firefox", "d": "5/2013"}, {"body": "chrome osx firefox osx", "d": "5/2013"}, {"body": "tl dr nt think bug happen think could event firing event firefox look ember source see showing event changing property happens forked fiddle got consistent results browsers changing handler handler make sense", "d": "5/2013"}, {"body": "suspect fivetanley correct reported firefox issue", "d": "5/2013"}, {"body": "right thanks guys", "d": "5/2013"}, {"body": "thank missed method", "d": "5/2013"}, {"body": "stefanpenner nt understand arrange code order use appmodalview embercontainerviewextend childviews modalheaderview modalbodyview error thrown undefined container", "d": "5/2013"}, {"body": "dogawaf master error deprecation warning dogawaf tried replicate issue unable continue jsbin demonstrate issue ping back thread help sort", "d": "5/2013"}, {"body": "hi stefanpenner updated jsbin got deprecation warning assertion failure see modal rendered nt know relevant", "d": "5/2013"}, {"body": "dogawaf fix issue please confirm", "d": "5/2013"}, {"body": "yes thanks lot", "d": "5/2013"}, {"body": "appears outstanding issues ticket resolved", "d": "5/2013"}, {"body": "wanted discourage use global lookups like since objects need access router access instance property use debugging purposes", "d": "5/2013"}, {"body": "fixed", "d": "5/2013"}, {"body": "various distributions release min production builds asserts warnings removed plus comments stripped minified code lives want read see packages build contains build contains subset framework necessary test emberdata remains library still", "d": "5/2013"}, {"body": "looks like resolved based post", "d": "5/2013"}, {"body": "alexzielenski able make jsfiddle jsbin", "d": "5/2013"}, {"body": "rilvsey getting error open dev console", "d": "5/2013"}, {"body": "fivetanley rsvp expect function parameter resolve reject rlivsey update jsfiddle", "d": "5/2013"}, {"body": "updated fiddle", "d": "5/2013"}, {"body": "machty issue closed", "d": "5/2013"}, {"body": "certain nt seem related", "d": "5/2013"}, {"body": "machty please see updated jsfiddle", "d": "5/2013"}, {"body": "seems cd", "d": "5/2013"}, {"body": "thanks jsbin karlguillotte concur wagenet uncertain desired behavior rarely personally find use cases apps would interested hearing people using use behavior would expect subclassing", "d": "5/2013"}, {"body": "seems like actually issue path forward improved documentation around aliasmethod likely additional example coupled nice short explanation someone wants fantastic", "d": "5/2013"}, {"body": "still looks like issue template still get assertion failed attempted register view id already use mapcontainer another page starting page error always view never renders plus workaround effect set modified still nt work", "d": "5/2013"}, {"body": "knownasilya bug report specific elementid mark use upon view creation marked use dom insertion released dom removal still one elementid dom given time", "d": "5/2013"}, {"body": "kselden creating one instance view elements present seems issue although outputting sure changes anything looks like inserts two nested elements html", "d": "5/2013"}, {"body": "fiddle looks like rendering view template also matches view render use", "d": "5/2013"}, {"body": "try removing template", "d": "5/2013"}, {"body": "kselden awesome fixed right away reason skipped mind views templates linked name glad longer issue", "d": "5/2013"}, {"body": "close one cc wagenet", "d": "5/2013"}, {"body": "going close one think drogus explained", "d": "5/2013"}, {"body": "make failing jsfiddle jsbin would help us greatly solving issue", "d": "5/2013"}, {"body": "better document cc wagenet", "d": "5/2013"}, {"body": "methods nt thing equivalent alternate form", "d": "5/2013"}, {"body": "handled", "d": "5/2013"}, {"body": "", "d": "5/2013"}, {"body": "", "d": "5/2013"}, {"body": "took first stab summary noting citations like zendesk techcrunch article license better resource emberjs logos", "d": "5/2013"}, {"body": "nice shot elegant introduction", "d": "5/2013"}, {"body": "cool thanks", "d": "5/2013"}, {"body": "still face issue using handlebars ember noticed assertion failed evaluating whereas value version handlebars mentioned nt know parameter may issue", "d": "5/2013"}, {"body": "codii would seem template compiler still compiling older handlebars describe stack bit maybe help shed light", "d": "5/2013"}, {"body": "using last versions jquery handlebars emberjs", "d": "5/2013"}, {"body": "problem also using latest jquery handlebars ember files intuitivepixel stefanpenner solution", "d": "5/2013"}, {"body": "installing bower get latest version handlebars means ember crashes compiler nt supported assert message needs updated", "d": "5/2013"}, {"body": "fixed master source", "d": "5/2013"}, {"body": "want extend little usecase want build ui widget changes visual representation considerable depending device rendered e g physical screen size would great observe certain parameters like screen width rerender menu certain breakpoint reached might say hey ember duty use responsive css chose word goes far beyond possible css make point clear think something like useful", "d": "5/2013"}, {"body": "allowing dev choose", "d": "5/2013"}, {"body": "error using method display keyvalue pairs", "d": "5/2013"}, {"body": "wagenet think issue reopened", "d": "5/2013"}, {"body": "used bound helpers without problem update expected issues seems like probably edge case still convinced bug please open new ticket include jsfiddle demonstrates issue", "d": "5/2013"}, {"body": "wagenet bound block helpers", "d": "5/2013"}, {"body": "discussion kselden turns designed support blocks simple helper intended deal things like formatting etc want complex support make custom view class register helper creates instance view", "d": "5/2013"}, {"body": "nt think making view lifecycle events async good approach animation one thing means framework guarantee remove view eg app code never fires callback major implications trying remove hierarchy views containerviews outlets particular probably best areas manage animation since manage view lifecyle trigger animation trigger view destruction complete definitely work done support animation animated transitions well ember nt think right path", "d": "5/2013"}, {"body": "turns never issue anyone heard closing", "d": "5/2013"}, {"body": "pretty annoying bug encountered set fiddles demonstrate bug hack make work nt really want add chained observers every single time property changes fiddle hacky fix oops looks like new bug", "d": "5/2013"}, {"body": "issue", "d": "5/2013"}, {"body": "concerning redirection model load returns current records store immediately therefore always resolved promise router way finding whether loaded starts loaded directly returns current records store want router wait model hook need use something returns unresolved promise example concerning wrong rendering route nested inside route redirect feels like cause infinite recursion since going make pass anyway feel better practice transition", "d": "5/2013"}, {"body": "teddyzeenny say need use something returns unresolved promise little confused return later call controller router", "d": "5/2013"}, {"body": "benmonro mean replace return records except first one sometimes faster cached creating record automatically added second one always make request server populated makes state trackable router want", "d": "5/2013"}, {"body": "ahhh good know may pm teddy zeenny notifications githubcom wrote benmonro mean replace apppostfind apppostfind return records except first one sometimes faster cached creating record automatically added second one always make request server populated makes isloadedstate trackable router want reply email directly view github", "d": "5/2013"}, {"body": "workaround far", "d": "5/2013"}, {"body": "news one", "d": "5/2013"}, {"body": "please cat", "d": "5/2013"}, {"body": "jf yes proxy content changeable without causing lots breakage", "d": "5/2013"}, {"body": "ok got thanks clarification", "d": "5/2013"}, {"body": "see also", "d": "5/2013"}, {"body": "agree drogus think pr closed", "d": "5/2013"}, {"body": "fixed", "d": "5/2013"}, {"body": "anything new really frustrates since developing app need long semantic links like need nested routes nested templates question", "d": "5/2013"}, {"body": "looks like discussed considered resolved", "d": "5/2013"}, {"body": "kselden status", "d": "5/2013"}, {"body": "branch passing need documentation hoping get apps yapp master could try work gotchas ping lukemelia derive blog post", "d": "5/2013"}, {"body": "medici master week old let know help trying way", "d": "5/2013"}, {"body": "ping stefanpenner get shit together", "d": "5/2013"}, {"body": "stefanpenner zap", "d": "5/2013"}, {"body": "see also", "d": "5/2013"}, {"body": "discussed members core team part determined want provide hook provides enough easy access controllers", "d": "5/2013"}, {"body": "elaborate tomdale asked use cases said sharing instance controller routes talking realized accomplish overriding rendertemplates calling render overriding controller also register class routes via container share instance share code share model also share instance controller controllers via needs well tomdale concerned people would would created container receive injected dependencies solution think alleviates concern route controllername property used instead moving hook", "d": "5/2013"}, {"body": "happy approach taken agree adequate smile", "d": "5/2013"}, {"body": "done yay", "d": "5/2013"}, {"body": "updated fiddle pointing emberlatest behavior still kselden weigh whether something change documented", "d": "5/2013"}, {"body": "posted question display spinner models get populated", "d": "5/2013"}, {"body": "seems fixed see", "d": "5/2013"}, {"body": "joefiorini something still find unaddressed", "d": "5/2013"}, {"body": "nt believe anything added map route resources objects namespaces know many improvements resolvers might allow easily added play close issue reasonably easy", "d": "5/2013"}, {"body": "show first record dataset index default pretty common pattern bug ca nt use router redirect", "d": "5/2013"}, {"body": "scardine problem application need show first record index template embarrassed nt easy way implement ember solution nt hesitate", "d": "5/2013"}, {"body": "utnas unfortunately best solution found porting app angularjs spent couple days pick boy looking back downs angular docs pedantic academical bit lacking nt cute mascot pros namespace clashes ever made model attribute called ember intuitive almost everything works way think great resources awesome ember great ideas could borrow lessons pola angular guys", "d": "5/2013"}, {"body": "utnas one solution return object model instead array object contain array something like resultset pattern slated fixed bothering wycats last weekend however open long time really hope someone gets soon sadly outside realm knowledge ember internals", "d": "5/2013"}, {"body": "utnas unfortunately best solution found porting app angularjs sadly solution dig lot ember may come take another look next project spending time ember code right", "d": "5/2013"}, {"body": "hi anyone bitten issue take look almost ready general blessing ember core please comment critique", "d": "5/2013"}, {"body": "machty heart heart heart", "d": "5/2013"}, {"body": "kselden thoughts stefanpenner comment", "d": "5/2013"}, {"body": "ebryn since done lot work testing thoughts", "d": "5/2013"}, {"body": "snickell discourse probably good place discuss things discussemberjscom also still general performance improvements help going close ticket", "d": "5/2013"}, {"body": "discourse available great thanks wednesday may peter wagenet wrote snickell discourse thats probably good place discuss things discussemberjscom also still general performance improvements help im going close ticket reply email directly view github", "d": "5/2013"}, {"body": "ebryn thought", "d": "5/2013"}, {"body": "ebryn something still want", "d": "5/2013"}, {"body": "issue embergenerated table described exactly like one perfectly valid html fixes problem validated markup using validator warnings came back metamorph tags within table works fine chrome one row looks like extra column swear still trying reproduce jsbin trying hour far luck whenif reproduce jsbin open new issue jsbin working thoughts", "d": "5/2013"}, {"body": "joefiorini lets try get test coverage next cross browser sweep catch", "d": "5/2013"}, {"body": "far say testing app code since unable reproduce jsbin thus far directly inside view inside nested remove either conditionals nt get rendering issue soon add back issue returns definitely related nested ifs idea hard reproduce", "d": "5/2013"}, {"body": "managed reproduce intermittent load keep refreshing eventually see table blow one column affects one row exact behavior seeing application big question", "d": "5/2013"}, {"body": "sounds similar issue except dev tools nt showing extra td like op saw post hrm", "d": "5/2013"}, {"body": "outdented jsbin line see references post refreshed bunch times could get break real making unfortunately fix working app sure actually fixed", "d": "5/2013"}, {"body": "vote close pretty convinced ie issue problem ember someone else runs realizes metamorph tags please comment go stefanpenner sorry would idea begin testing one nt render markup differently normal anyone else running issue hack used fix insert jquery code mentioned view callback like refreshed times since seems okay see", "d": "5/2013"}, {"body": "ebryn kselden thoughts", "d": "5/2013"}, {"body": "closing since one decided important enough address", "d": "5/2013"}, {"body": "", "d": "5/2013"}, {"body": "problem extending applypartial used done designing object needs validate requires creates object prototype nt know missing something nt going mixin later", "d": "5/2013"}, {"body": "needs validate requires creates object prototype right probably without killing performance still need strip production build right think support stripping singleline emberassert statements right", "d": "5/2013"}, {"body": "joliss good idea yes current functions assert deprecate warn debug think creating private function executing would work ex instead stripping multi lines", "d": "5/2013"}, {"body": "joliss yes strip single lines avoid complex syntax parsing", "d": "5/2013"}, {"body": "progress issue readability maintainability app gradually becoming worse since forced replace bindings workarounds like observers computed properties due problems especially problem twoway bindings referencing twoway bindings nt know replace computed properties", "d": "5/2013"}, {"body": "lmeijvogel help", "d": "5/2013"}, {"body": "stefanpenner thanks solves removes lot workarounds recommended way bindings instead creating somepropertybindingattributes objects", "d": "5/2013"}, {"body": "lmeijvogel uses exist practice tend opt someone guidedocblog post cp bindings cc kselden could use one talks foundation", "d": "5/2013"}, {"body": "ping", "d": "5/2013"}, {"body": "found wonderful fix mistake testing chrome deploying androidios via phonegap opted jquery mobile touch implementation using custom build touch enabled seemed little simple implement embertouch used following avoid unwanted doubleclick behavior due tap click events registering registers tap click click nothing doubleclick nonsense encountering using tap events longer issue added advantage working standard action helper well platforms using someone might want give shot see works tapend touchend worry perfect implementation far originally response", "d": "5/2013"}, {"body": "issue using jquery function together ember unfortunately uses iterate arrays tomdale simplest solution seems marking ember prototype extensions nonenumerable seems supported modern browsers", "d": "5/2013"}, {"body": "mirkokiefer likely good idea us mark nonenumerable big gotcha old browsers remain", "d": "5/2013"}, {"body": "stefanpenner sure true support ie older developers ignore currently forced write lots boilerplate get ember working popular libraries like jquery", "d": "5/2013"}, {"body": "updates trying use web app used major hotel chain none workarounds seem work workable solution point redesign part interface make simpler shame information would greatly appreciated thanks great work", "d": "5/2013"}, {"body": "surprisingly hard problem part issue even implemented worked around updating dependent array seems common use case would take time big problem even fairly small datasets get n need smarter array primitives compose dependent arrays work peter others people definitely interested pushing forward would nt hold breath related recommend generating dependent arrays server basically computed relationships", "d": "5/2013"}, {"body": "another fiddle demonstrating issue", "d": "5/2013"}, {"body": "sorry obvious missing something problem wondering last year anything came", "d": "5/2013"}]