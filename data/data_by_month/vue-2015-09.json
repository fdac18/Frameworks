[{"title": "chinese document error", "body": "\u5728\u4e2d\u6587\u7684\u6559\u7a0b\u91cc \u5728\u4e8b\u4ef6\u76d1\u542c gt \u6267\u884c\u8868\u8fbe\u5f0f\u8fd9\u91cc text \u53d1\u73b0li\u7684\u6587\u672c\u663e\u793a\u4e0d\u51fa\u6765 \u662f\u4e0d\u662f\u5e94\u8be5\u6539\u6210\u5982\u4e0b\u6240\u793a itemtext \u5728\u8fd9\u91cc\u6539\u52a8", "num": "1377", "d": "9/2015"}, {"title": "vue events emitted get listeners events property", "body": "emitting listeners nt work declared inside events property component", "num": "1376", "d": "9/2015"}, {"title": "component access methods use content insertion", "body": "component indexjs templatehtml using like getting error bug", "num": "1375", "d": "9/2015"}, {"title": "documentation grammar mistake", "body": "provide one static default option addition dyanmically", "num": "1374", "d": "9/2015"}, {"title": "get clean data form vue", "body": "get data server put vm data get getset methods inset want get clean data use vuefilter json get error", "num": "1373", "d": "9/2015"}, {"title": "pass partialscomponents strict mode default", "body": "generic grid pass partialscomponents rendering custom column contentmarkup past could reference component located parent name strict mode ca nt anymore parent data function return gridcolumns grid column definitions name name part optionspartialstest partials test partial child grid sadly fails idea dynamically pass componentspartials vuejs could probably call vm interpolate partials likely quite slow", "num": "1371", "d": "9/2015"}, {"title": "object updating correctly object mutated via", "body": "ref", "num": "1370", "d": "9/2015"}, {"title": "add preventdefault event filter", "body": "find pretty cumbersome add event parameter write every single method components would nice add filter automatically would used like js looks better method nt really know original event triggered call template", "num": "1369", "d": "9/2015"}, {"title": "typo examplesmodalmodalcss", "body": "visiblity toggled visibility", "num": "1368", "d": "9/2015"}, {"title": "filterby working vfor", "body": "hi upgrading newest vuejs version introduces switching markup markup following error data looks like fact remove every thing working filtered called triggers error mistake thanks", "num": "1367", "d": "9/2015"}, {"title": "vuewebpack reference global vue component", "body": "enviroment project cloning module refrence global object module thanks", "num": "1366", "d": "9/2015"}, {"title": "vrepeat underscore", "body": "hi got issue today nt know bug check fetching data mongodb data object list resources resource item mongo document use way showing data id nt work undefined use works think kind connected underscore", "num": "1365", "d": "9/2015"}, {"title": "second example bug", "body": "", "num": "1364", "d": "9/2015"}, {"title": "migrate using partial inside loop", "body": "trouble migrating following code use migration path vue setup vfor version throws warnings error believe bug", "num": "1363", "d": "9/2015"}, {"title": "createclass unsafe eval atom editor prevents use vue", "body": "developing atom editor package could nt proceed due atoms content policy nt allow usnafe eval issue vues case originates createclass function js function returns subclass constructor given name gives us much nicer output logging instances console param string name return function function createclass name return new function return function classify name options thisinit options trying decent pull request failed knowledge repo still little limited breaking quite lot tests many places however idea use babeljs implementation inheriting class generate one js use strict var createclass function function defineproperties target props var lt propslength var descriptor props descriptorenumerable descriptorenumerable false descriptorconfigurable true value descriptor descriptorwritable true objectdefineproperty target descriptorkey descriptor return function constructor protoprops staticprops protoprops defineproperties constructorprototype protoprops staticprops defineproperties constructor staticprops return constructor var get function get x var true function var object x property receiver desc parent getter undefined false object null object functionprototype var desc objectgetownpropertydescriptor object property desc undefined var parent objectgetprototypeof object parent null return undefined else x parent property receiver true continue function else value desc return descvalue else var getter descget getter undefined return undefined return gettercall receiver function classcallcheck instance constructor instance instanceof constructor throw new typeerror call class function function inherits subclass superclass typeof superclass function amp amp superclass null throw new typeerror super expression must either null function typeof superclass subclassprototype objectcreate superclass amp amp superclassprototype constructor value subclass enumerable false writable true configurable true superclass objectsetprototypeof objectsetprototypeof subclass superclass subclassproto superclass function createclass options var aclass function eventemitter inherits aclass eventemitter eventemitter return new aclass options maybe abandoning calling method could also ease makes sense land please let know try making pr", "num": "1362", "d": "9/2015"}, {"title": "factory function registering component inline via optionscomponents browserify", "body": "tried compile browserify example current beta unable register components inline quick fix vuejsvuebrowserifyexample assume wanted behaviour", "num": "1361", "d": "9/2015"}, {"title": "assigning computed property code nt invoke setter", "body": "binding template list items listed expected tags problem computed property selected setter property triggered checkbox clicked however property set code setter nt called start selection button hit checkboxes visible item user clicks checkbox setter computed selected property invoked however press select button sets selected property true checkboxes visible duly checked setter selected property nt triggered unexpected nt working either missing something bug vuejs link fiddle things try run gt click start selection gt tick checkboxes setter triggered gt message div remove remove selected items run gt click select checked gt press remove gt unexpected error div nothing remove nt happen help appreciated", "num": "1360", "d": "9/2015"}, {"title": "allow component templates loaded asynchronously", "body": "currently components must provide templates javascript strings embedding multiline string javascript something personally strong dislike would much rather template file however would require vue request template server put cache somewhere compile component similar angular things curious people dealing currently seems like huge roadblock using vue something large missing something", "num": "1359", "d": "9/2015"}, {"title": "make computed properties accessible proxy", "body": "convenience consistency use case want use computed property method without things computed property function", "num": "1358", "d": "9/2015"}, {"title": "vif attribute added page load", "body": "something like colorvalue colorcolor instanse every color formatted like working good issue nt show attributes set start colors show true page loads working idea override", "num": "1357", "d": "9/2015"}, {"title": "\u5173\u4e8evon \u6307\u4ee4\u7684\u4e00\u4e2a\u5c0f\u95ee\u9898", "body": "ngclick search", "num": "1356", "d": "9/2015"}, {"title": "keep inherit true component options", "body": "inherit option deprecated alway pass data child components via props consider use case since impossible know advance data used nothing predefined seems solution", "num": "1354", "d": "9/2015"}, {"title": "check current value object", "body": "object would like trigger function depending status person get value status new vue el foo data foo name jane status true name john status false", "num": "1353", "d": "9/2015"}, {"title": "updating list options", "body": "love example directive helps integration vue set four dropdowns dependent time one dropdown changes list available options succeeding dropdowns affected implementation options dropdown never change possible vue", "num": "1352", "d": "9/2015"}, {"title": "\u5173\u4e8e\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u4f5c\u7528\u53ca\u8868\u73b0", "body": "\u5c1d\u8bd5\u4e86\u4e0b\u52a0\u5165", "num": "1351", "d": "9/2015"}, {"title": "output data twig template", "body": "hi please could help issue using twig template trying output data var list hotels jsonencode raw consolelog list vm set hotels list datajson consolelog list vmhotels console viewmodel var vm new vue el filterhotels data test ahahah setting vmhotels seems working properly vmhotels console properly output object set vm set datajson nt output nothing try use twig verbatim endverbatim tag result html source looks like data json errors shown console chrome vueminjs", "num": "1350", "d": "9/2015"}, {"title": "bind vue model multiple snippets html", "body": "eg something like html content content var model vue el data content thing bound could bind something like", "num": "1349", "d": "9/2015"}, {"title": "\u5173\u4e8e\u8ba1\u7b97\u5c5e\u6027\u7f13\u5b58\u751f\u6548", "body": "", "num": "1348", "d": "9/2015"}, {"title": "new vbind class nt support filters", "body": "works working", "num": "1347", "d": "9/2015"}, {"title": "cnvuejsorg \u793a\u4f8b\u4ee3\u7801\u4fee\u6b63", "body": "\u4e2d\u6587\u6587\u6863\u4e2d\u7684 \u4e8b\u4ef6\u76d1\u542c \u4e00\u8282 \u7684 \u6267\u884c\u8868\u8fbe\u5f0f text itemtext", "num": "1346", "d": "9/2015"}, {"title": "type check fail string prop looks like number", "body": "set value string prop success current behavior throwing warning prop gets value", "num": "1345", "d": "9/2015"}, {"title": "\u8054\u52a8\u7684select\u9009\u9879\u66f4\u65b0\u5931\u6548", "body": "provinceid \u7701 provinceid", "num": "1344", "d": "9/2015"}, {"title": "\u5728 vstyle \u4e2d\u4f7f\u7528 backgroundimage \u4ea7\u751f\u7684 \u95ee\u9898", "body": "html \u4e3a \u5728\u63d2\u5165", "num": "1343", "d": "9/2015"}, {"title": "feature request provide attribute tag", "body": "minor problem selects multiple child tag component result html contain whitespace child tag fine cases buttons whitespace button tags space buttons page add extra attribute tag solve", "num": "1342", "d": "9/2015"}, {"title": "dateinputfocus trigger native date picker android", "body": "think input focused focus css styles applys native date picker show click focused date input using finger trigger native date picker sure vue issue try make simple demo later", "num": "1341", "d": "9/2015"}, {"title": "feature animate element event trigger eg vanimateon dataloaded", "body": "hi already using production say really happy one feature would really help us ability trigger control transition system via event system right using hacky tricks achieve animations adding removing elements dom vif trying implement feature custom directive wanted use builtin transition system sadly exposed api wrong would glad contribute pull request please tell ways implement would really useful thank", "num": "1340", "d": "9/2015"}, {"title": "proper way let parent bind children data", "body": "consider example gets rendered need child component data display numbers numbers fetched api data twoway binded proper way get using props callbacks needs define prop inside child component using directives wo nt get data binded way think setting watches inside child component dispatchs new value upwards", "num": "1339", "d": "9/2015"}, {"title": "\u53ef\u5426\u5bf9unsafeeval\u505a\u4e0b\u517c\u5bb9\u5904\u7406", "body": "\u6211\u6700\u8fd1\u5728\u5f00\u53d1\u4e00\u6b3echrome\u63d2\u4ef6 \u5728devtool\u9762\u677f\u4e2d\u4f7f\u7528\u4e86\u60a8\u7684vue \u4f46\u662f\u9047\u5230\u4e00\u70b9\u95ee\u9898 \u800c\u60a8\u7684\u4ee3\u7801\u4e2d\u8bb8\u591a\u5173\u952e\u4f4d\u7f6e\u4f7f\u7528\u4e86new \u611f\u8c22", "num": "1338", "d": "9/2015"}, {"title": "\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u53cc\u5411\u7ed1\u5b9a\u5931\u6548", "body": "", "num": "1337", "d": "9/2015"}, {"title": "suggestions inlinetemplate directive", "body": "directive option present use html content replace insertion point instead replacing whole template least provide option behavior add component options nt use every time use component", "num": "1336", "d": "9/2015"}, {"title": "directives defined within component resolved", "body": "described guide specified docs components private assets wo nt work see fiddle please", "num": "1335", "d": "9/2015"}, {"title": "programmatically apply filter", "body": "", "num": "1334", "d": "9/2015"}, {"title": "observe bindings inside directive", "body": "example vuejs nt work options dynamically set loading observe options array avoid", "num": "1333", "d": "9/2015"}, {"title": "\u4e0b\u4f7f\u7528 webpack \u6253\u5305\u751f\u6210 \u6811\u72b6\u89c6\u56fe\u53ea\u80fd\u6e32\u67d3\u51fa\u7b2c\u4e00\u7ea7\u8282\u70b9", "body": "", "num": "1332", "d": "9/2015"}, {"title": "vue detecting autofill changes", "body": "previously discussed spa login submit button disabled browser autofills userpass submit markup focusing textboxes causes log button enabled google chrome", "num": "1331", "d": "9/2015"}, {"title": "using triple mustaches html symbol codes work", "body": "hello please look following jsfiddle triple mustache insert content html first top example doesnt perform begins work real tag added second bottom example looks like validates content really contain html echoes content html case catch html symbol codes decimal hexadecimal thank", "num": "1330", "d": "9/2015"}, {"title": "happened access index inside component", "body": "want call method inside component explicitly pass access know works done nt know going literally works components others even though built exactly fiddle clicking buttons log remains undefined", "num": "1329", "d": "9/2015"}, {"title": "custom component transcluded", "body": "example works fine contents inserted plain tags replace custom component tags seems able select first child", "num": "1328", "d": "9/2015"}, {"title": "lazy\u60f0\u6027\u66f4\u65b0\u7684\u4e2d\u6587\u652f\u6301", "body": "", "num": "1327", "d": "9/2015"}, {"title": "\u5728vrepeat\u7684\u5143\u7d20\u81ea\u5df1\u8eab\u4e0a\u52a0vif\u65e0\u6548", "body": "version mine edge jsfiddle demo", "num": "1326", "d": "9/2015"}, {"title": "binding syntax latest reference", "body": "quick reference first time read detailed changes first html detailed changes directive arguments concept multiple clauses multiple directives separated comma attribute deprecated directive arguments moved attribute name html using real directives example html literal directives longer literal directives implementation perspective directives reactive default makes easy know whether attribute value expression literal string wish pass directive literal string use following syntax html ending called binding modifier forces directive bound literal mode see concept used prop binding types well literal mode directive function called literal string argument attribute bindings mustache tags appear inside native attributes dynamically bind custom attribute prop use directive replaces html vue raise warning whenever mustaches used nonnative attributes enhancements particular since deprecated bindings dedicated enhancements pass javascript object array literals html props previously props use mustaches indicate reactivity must use html binding type indicators replaced explicit binding modifiers html shorthands may noticed using quite lot provide optional shorthand syntax two directives shortened single colon shortened single symbol html using vue enhancement existing html pages may want stick prefixed versions shorthand designed make template succinct building large spas vue manages everything nt worry looking like valid html browsers parse fine vue removes special stuff rendered html anyway child component also listen custom vue events emitted via used child component idea props events constitute public api component props passing data events handling actions typical component would look like shorthand modifiers leverage key modifier replaces old filter use old aliases usable key filter use direct keycode html addition use modifiers calling new syntax previously literal directives need give argument also make things explicit html refschildmsg caveat camelcase names converted lowercase html parsed gets rendered thus necessary use dashcase lt camelcase mapping refs similar props", "num": "1325", "d": "9/2015"}, {"title": "doubts", "body": "javascript title content moduleexports data title todos todos done true content learn javascript done false content learn vuejs put codes child component doest work changed moduleexportsdata", "num": "1324", "d": "9/2015"}, {"title": "ca nt use footer vuecomponent name", "body": "title says found set footer component name like throw error uncaught rangeerror maximum call stack size exceeded wonder mistake made", "num": "1323", "d": "9/2015"}, {"title": "toplevel elements vtransition display none fragment instance wo nt removed switching views", "body": "js venter vleave transition vuecomponent home template go vuecomponent template go home var app new vue el html data currentview home switch home several times many left dom tree", "num": "1322", "d": "9/2015"}, {"title": "options special parameter nt accept array numbers", "body": "something like nt render correctly", "num": "1321", "d": "9/2015"}, {"title": "question trying understand", "body": "looked observer code tests trying use outside vue try figure works looked object properties get converted setters getters trigger notify function dependency however try update property observed object nt call notify function js var observer windowobserver var obj var ob observercreate obj var dep obdep depnotify function alert object updated bind dep nt notify function called obja live example observer bundled via browserify also trouble understanding lines update property test specifically would appreciate help thanks bunch", "num": "1320", "d": "9/2015"}, {"title": "", "body": "hi modified quick example using iterator protocol great work version environments useful links", "num": "1319", "d": "9/2015"}, {"title": "preserve async component element loaded", "body": "example element removed component factory function may want loading text within element async component loaded classes element show loading animation", "num": "1318", "d": "9/2015"}, {"title": "value reactive", "body": "", "num": "1317", "d": "9/2015"}, {"title": "allow von also work custom events used child component", "body": "problem currently common practice parentchild communication passing method callback requires child declare function prop calling method communicate parent intuitive lot times nicer loose coupling real events previously directive serves exact purpose removed favor callbackprop pattern partly felt event system problematic due issues outlined problem somewhat mitigated solution proposed stop propagation default reconsider event pattern bring back new directive syntax would look like bad since already using native attributes props use native custom events proposal allow listen vue custom events used child component particular props events constitute public api component props passing data events handling actions typical component would look like shorthand", "num": "1315", "d": "9/2015"}, {"title": "issue changing component template created event", "body": "hi seems issue dynamically changing component template fiddle see fields component field child component different layouts depending field type input checkbox line js template change happening see nt work change line one starts working seems limited accept one template iteration let know details required", "num": "1314", "d": "9/2015"}, {"title": "legal way get repeater index inside component", "body": "hi say see good exists disappointed expanding see consequently could write private thanks", "num": "1313", "d": "9/2015"}, {"title": "vue \u4f55\u5982\u7ed1\u5b9a input type date \u7c7b\u578b", "body": "\u60f3\u7ed1\u5b9ainput \u4f46\u662f\u65e0\u6cd5\u6309\u7167\u9884\u671f\u5b9e\u73b0 birthday \u4e00\u76f4\u4e3a\u7a7a", "num": "1312", "d": "9/2015"}, {"title": "", "body": "\u5df2\u89e3\u51b3", "num": "1311", "d": "9/2015"}, {"title": "form value initialisation leads blank value blur", "body": "enter update text field form value value reverted upon blur issue seems begin following simple fiddlejs shows behaviour uncomment dog null thiscatname ginger issue disappears however uncommenting thiscat cat alone nt fix uncommenting thiscat cat thiscatname ginger causes issue persist seems odd btw thankful vuejs", "num": "1310", "d": "9/2015"}, {"title": "way shared global var function parent child components", "body": "way shared global var function parent child components example want define general output error function log catch error import output error function helperjs components page system huge hard maintain want define global var method parent child components use temporary solution user webpackstream gulp package helperjs main file way vue manage global var function component symtem", "num": "1309", "d": "9/2015"}, {"title": "binding syntax discussion thread", "body": "note post may contain outdated content latest reference maintained yet another long post new binding syntax know gone lot changes alpha phase please bear want make sure land something good enough called something consistent explicit importantly stable going strictly follow semver post nt want release months thinking discussion consistent feel new syntax may indeed bit different justifications additional prefixes based fact angular aurelia introducing custom syntax bindings realize vue angular aurelia two fullstack frameworks vue aims flexible many use cases possible let take step back think original problems set solve new syntax evaluate far confusion expressions vs literals directives example expression literal string way tell literal except looking directive documentation current solution explicit syntax literal directives also simplifies implementation custom directives think good change confusion mustaches allowed example html general rule mustaches allowed literal strings expressions mustaches make people think string template mindset assume work everywhere addition mustaches inside attributes subtle gotchas example used causes error used causes ie ignore current solution mustaches inside attribute values attribute bindings use special prefix someone pointed introduces additional prefix nt distinctive consistent also warts mostly related arguments multiple clauses microsyntax discuss details directive microsyntax example problem looks like object also becomes awkward format different indentation syntax highlight lot handlersattributes current solution think breaking binding single attribute definitely right move also introduced yet another prefix notsogood prop syntax example first looks like normal attribute bindings second noted mustache bindings indicates evaluates literal string however prop syntax ambiguous aspect passes actual object try concatenate abc object resulting abc object object binding indicator also confusing current solution getting rid mustaches move binding type indicator attribute name think solved issues relies extra prefix recap think current syntax addressed original issues also introduced new ones negative feedback concerned fact three prefixes instead one event handlers attribute bindings really deserive special prefix original intention would allow us get rid microsyntax issue mentioned also agree toplevel prefixes also introduce additional cognitive overhead update attempts address issue html instead currently html would write html little verbose consistent vuespecific maps concepts better using vue alone build spa prefix may important anymore still possible provide optional concise sugar top html probably would prefer shorthand component props well changing twoway indicator instead", "num": "1308", "d": "9/2015"}, {"title": "insert el target uncaught typeerror read property parentnode null", "body": "issue component repeated seven times outputing list day week using drag drop library users drag one list next mostly works users rearrange list use underscore update order data object problems solved however list items cleared completed deleted tasks new item addeddragged list see error uncaught typeerror read property parentnode null console points insert el target param element el param element target exportsbefore function el target targetparentnodeinsertbefore el target target null vue version working repo however idea may cause given info", "num": "1307", "d": "9/2015"}, {"title": "transitionmode outin causing issue directive", "body": "set demo issue sure posted basically use outin directive nt seem wait apply way transition modes sure issue approach directives applied early either way seems inconsistent light issue technique would awesome", "num": "1306", "d": "9/2015"}, {"title": "even destroyed vm mounted", "body": "destroyed vm mounted desired bug desired action clean remount", "num": "1305", "d": "9/2015"}, {"title": "ca nt access root data using browserify", "body": "running little issue using browserify trying set data component root like working fine nt use browserify use browserify get ca nt seem get data element everything accessible data seems goes file using pretty much replica jsbin link screen shot nt know issue browserify vuerouter", "num": "1303", "d": "9/2015"}, {"title": "call watch callback even value set current value", "body": "noticed callback watch function called value set current value would nice option callback called even though value fiddle demonstrating behavior open console see callback called value set value twice row", "num": "1302", "d": "9/2015"}, {"title": "vmodel write filters", "body": "hi vmodels write filter write value input changed like older version every input event examples working version working version inputs allow numbers", "num": "1300", "d": "9/2015"}, {"title": "uncaught typeerror read property get undefined", "body": "", "num": "1298", "d": "9/2015"}, {"title": "allow children inherit components registered parents", "body": "think feature removed intentionally cases useful put thing back probably making optional", "num": "1297", "d": "9/2015"}, {"title": "transition partial causes error", "body": "component displays text based number factorthis uses partials help expected output however try use transition partial get error take partial directly template component works expected", "num": "1295", "d": "9/2015"}, {"title": "duplicate objects", "body": "html lt div vrepeat items trackby id gt title lt div gt", "num": "1294", "d": "9/2015"}, {"title": "usage change binding syntax update", "body": "originally raised problem special builtin feature allow register child component dom node parent component really directives presented literal directives previous versions making literal directives explicit also makes writing little verbose example addition user needs consult doc remember registers registers explicit map well directive names proposal rename explicit properties use arguments new binding syntax mark ref id html refschildmsg caveats camelcase names converted lowercase html parsed gets rendered thus necessary use dashcase lt camelcase mapping refs similar props", "num": "1292", "d": "9/2015"}, {"title": "components nt get attached transcluded vif", "body": "issue vuejs fiddle illustrate", "num": "1291", "d": "9/2015"}, {"title": "suggestion velse", "body": "hello spotted thing remembered wanted badly sometimes hope implement", "num": "1290", "d": "9/2015"}, {"title": "checkboxes checked", "body": "trying implement check checkbox working expected checkboxes checked changed separately fiddle demonstrating issue reproduce steps check uncheck checkbox check david check uncheck checkbox nothing happens case os x google chrome version workarounds suggenstions", "num": "1289", "d": "9/2015"}, {"title": "", "body": "", "num": "1288", "d": "9/2015"}, {"title": "", "body": "", "num": "1287", "d": "9/2015"}, {"title": "use property specification autocasting literal properties", "body": "instead always autocasting leads confusing behavior like could use property specification type determine autocasting occur example hope impossible extend type like would work like current autocasting would autocasted number boolean would never autocasted type specified could default either purposes autocasting sure one would better case explicitly specify type avoid autocasting", "num": "1284", "d": "9/2015"}, {"title": "repeated component alias set property late", "body": "looping component vrepeat property child component set late trigger lot warnings console property required break every computed properties depending jsfiddle illustrate look debugger", "num": "1283", "d": "9/2015"}, {"title": "error scope fallback content slot", "body": "compiling transcluded slot content fallback content different scope however current compiled properly two compiled vm means value followed resolved outside world vm html something", "num": "1282", "d": "9/2015"}, {"title": "remove slot attribute", "body": "removing slot attribute makes hard apply css rules", "num": "1281", "d": "9/2015"}, {"title": "vfor push items child vue component scope", "body": "please refer expected output", "num": "1280", "d": "9/2015"}, {"title": "disable recursive component lookup", "body": "find component name defined set implicit component name template lead max call size exceeded way disable behavior expect rename component name others", "num": "1279", "d": "9/2015"}, {"title": "deprecate favor", "body": "problem previously necessary deal table element components html works literal directive nt go well new binding syntax directives expect bound expressions could use new literal syntax bit verbose proposal since already using attribute dynamic components ca nt use fact real custom element syntax possible issue page also happens reigster real custom element name unlikely real custom elements must namespaced hyphen vue components expect external real custom elements page", "num": "1278", "d": "9/2015"}, {"title": "new attr binding syntax problem", "body": "new attr binding syntax work filters produces vue warning please note missing curly brace typo missing warning message", "num": "1277", "d": "9/2015"}, {"title": "vrepeat inverse safari", "body": "jsfiddle expected output output mac safari windows safari", "num": "1276", "d": "9/2015"}, {"title": "", "body": "", "num": "1275", "d": "9/2015"}, {"title": "twoway filter writes blur", "body": "twoway filter writes blur even input value nt changed expected behavior suppose value technically changed originally filter applied eg added console logs currency example focus blur input several times see method called time", "num": "1274", "d": "9/2015"}, {"title": "unobservable objects data know mode", "body": "disallowing unobservable objects data makes sense sometimes really need pass example different kinds dragndrop implementations course avoided fluxlike architecture know nothing like say luxjs vue offer add option allow unobservable objects certain props explicitly like objects observed passed least allow access data without hacks", "num": "1273", "d": "9/2015"}, {"title": "listitems removed html changed scripts", "body": "hello render list divs based array items use sortablejs sorting function drag drop works well moved div another position sortablejs add things div show oh see comments anymore remove item data array remove deleted entry html entry changed html trigger function resort render entire list scatch", "num": "1272", "d": "9/2015"}, {"title": "suggestion using component options passing plugin configuration", "body": "would nice able pass plugin configuration using component options therefore plugin needs way register eventcallback called component instance created lifecycle events would allow plugin apply configuration values example create instance properties accordingly basically native options like already would great offer flexibility plugins well", "num": "1271", "d": "9/2015"}, {"title": "many warning", "body": "version updated warning shows trace call stack find error comes help", "num": "1270", "d": "9/2015"}, {"title": "improvement consistent filter behavior custom components", "body": "next code works fine one fails message function recognise complex binding expressions filters custom components worked around intuitive requires lots boilerplate code especially taking account work standard html elements", "num": "1269", "d": "9/2015"}, {"title": "error scope component slot", "body": "compiling example followed console print error raised directive called content linker function html itemvalue", "num": "1268", "d": "9/2015"}, {"title": "vuejs vuerouter two way databinding", "body": "hi evan trying use framework one question use vuerouter twoway binding data component parent parent components simple example three pages one page users second cards third main scheme simple main know cards users users know cards cards know nothing users main hope understand administration page could already understand please help important thanks", "num": "1267", "d": "9/2015"}, {"title": "initialize vue object dynamic dom creation", "body": "hi guys simple vue object page input div link opens modal window modal window takes contents element page case modal fires takes copy html containing vue object places modal body html title open modal pops contain following html title modal vue modal gets disconnected updating input nt change contents div title anyway rebind together thanks advance", "num": "1266", "d": "9/2015"}, {"title": "filters changing arrays objects break vrepeat", "body": "filters process arrays return hash eg grafting operation like lead evaluated expected workaround use method semantically correct cf fiddle", "num": "1265", "d": "9/2015"}, {"title": "custom filter access methods vm", "body": "", "num": "1263", "d": "9/2015"}, {"title": "prop validation occurring vif", "body": "component set requires prop type object yet also vif property prop validation fails value set null nt feel case vif caught falsey value renderedremoved component thus validation take place jsbin demonstrating mean", "num": "1262", "d": "9/2015"}, {"title": "write code better", "body": "\u60f3\u8981\u505a\u5230\u5207\u6362 classname", "num": "1260", "d": "9/2015"}, {"title": "handle methods differently user mobile", "body": "trouble setting vue components handle methods differently user mobile instance navigation drop user clicks link want prevent going location instead drop drop whereas desktop want go click drop hover need many aspects project main vue instance js var main new vue el body export default main components something like js import main main var navlink vuecomponent navlink template navlinktemplate return default value matter resolution ready methods seem run main ready method also feels like wrong setup thanks insight", "num": "1259", "d": "9/2015"}, {"title": "components keep tag wrapping", "body": "currently component tags replaced template gets rendered html custom component however way let rendered like keeping tag around template result infinite recursion option keep wrapping tags useful say want implement component tags like angular material want write something like html gets rendered obviously reasonable keep tag otherwise something like verbose", "num": "1258", "d": "9/2015"}, {"title": "component wo nt work registered vue bootstraping", "body": "took one hour figure work vue bootstrapped component registration migrating angularjs really seems weird used bootstrap framework first let register directives afterwards intended behavior least mentioned guide nt see anything covering important information", "num": "1257", "d": "9/2015"}, {"title": "warnings using xradovuevalidator plugin", "body": "idea happening", "num": "1256", "d": "9/2015"}, {"title": "ie nt register data style attribute", "body": "ie grabbing data inside style attribute style attribute wo nt display variables instance component template html caption registers classname index image alt caption registering data inside style attributes better way go chrome registers fine ie wo nt thumb component looks like js var sliderthumb vuecomponent sliderthumb template require templatesthumbhtml default height would think would show value components developing chrome working great forget check ie components somewhat broken thanks advice different way go setting heightwidthcoloretc elements would go style tag instead using data variable use developing jquery plugins use seems weird vue might though", "num": "1255", "d": "9/2015"}, {"title": "pass global javascript variable component", "body": "hello define global javascript variable like var relatedbooks relatedbooksjsonencode raw note use twig template engine pass variable property component tried following nt work", "num": "1254", "d": "9/2015"}, {"title": "vrepeat", "body": "html edittext", "num": "1253", "d": "9/2015"}, {"title": "read props component uses vrepeat", "body": "trying setup slideshow far html course expecting loop images backend code using laravel put brackets far javascript js var slider vuecomponent slider template var sliderthumb vuecomponent sliderthumb template var sliderslide vuecomponent sliderslide template however try get prop thumbnail sliderthumb component says undefined shows slideindex put spit variable spitting right number ca nt select props passed component uses vrepeat anyway around", "num": "1252", "d": "9/2015"}, {"title": "include computed properties", "body": "ref", "num": "1251", "d": "9/2015"}, {"title": "von click keyup", "body": "gallery next previous buttons previous next want work options clicking link clicking leftright arrows keyboard tried nt work possible vuejs", "num": "1250", "d": "9/2015"}, {"title": "uncaught typeerror read property vfrag null", "body": "update reproduction occurring dragging list item one unordered list another case using rubaxasortable manage lists appears caused location comment node items moved according comments typeerror read property vue null similar issue closed could reproduced billiam later provided details well jsfiddle example uses vfor instead vrepeat generates error read property vfrag null", "num": "1249", "d": "9/2015"}, {"title": "performance degradation since", "body": "displaying large list c rows vuejs noticed since performance degraded extremely nice fast simple fiddle exact press next previous see excruciatingly slow filter function become since also tested latest issue persists edit wrongly wrote meant", "num": "1248", "d": "9/2015"}, {"title": "snake case props support", "body": "somewhat related think probably global vue config option replace camel case snake case working vue props coffee script nt consistent variable naming convention making global option nt add visible performance overhead would great thing make vue coffee compatible introducing props concept", "num": "1247", "d": "9/2015"}, {"title": "leave transition hook called twice css false inout mode", "body": "ran trying suggestion", "num": "1244", "d": "9/2015"}, {"title": "filterby components", "body": "hi trying using error occurs uncaught typeerror read property push undefined", "num": "1243", "d": "9/2015"}, {"title": "support array objects", "body": "used work cfont ctextalign computed functions cfont ctextalign return object multiple values however bindstyle last one used eg text aligned colouredstyled reverse colouredstyled aligned", "num": "1242", "d": "9/2015"}, {"title": "triggering transitionend event enter transition done inout mode causes error", "body": "happens inout mode css transition triggers transitionend event entirely unrelated component transition example uses js callbacks already finished time transitionend event called uncaught typeerror read property parentnode null caused child el null", "num": "1241", "d": "9/2015"}, {"title": "von enhancement", "body": "proposal directive accept event instance html component vm emit hello", "num": "1240", "d": "9/2015"}, {"title": "svg tree view examples nt work mac", "body": "following examples nt work mbp chrome safari windows chrome", "num": "1239", "d": "9/2015"}, {"title": "expose fragment factory api", "body": "find features easier ever implemented using fragment factory expose let user create advance directive", "num": "1238", "d": "9/2015"}, {"title": "support filters inside prop expressions", "body": "thank reading developing tododemo trying use vue version update subcompnents props use prefix got invalid expression error want use filter computed property filter todo types vue config javascript let filters todos gt todosfilter todo gt todoisdelete false active todos gt todosfilter todo gt todoisfinished false amp amp todoisdelete false finished todos gt todosfilter todo gt todoisfinished true amp amp todoisdelete false let vm new vue data gt todos content hello world todos localstorage filter query todo content filter computed filteredtodos return filtersthisfilter components todolist comptodolist filters ordertodos todos return todossort gt return new date gettime new date gettime return return component using webpack package file file open browser get error developer tools call vue instance method pass string parameter get correct result thx", "num": "1237", "d": "9/2015"}, {"title": "\u600e\u4e48\u7ed9\u7ec4\u4ef6\u4f20\u4e00\u4e2adata\u4ee3\u66ff\u9ed8\u8ba4\u7684", "body": "\u6211\u770b\u6587\u6863\u4e0a\u6709\u5199 \u66b4\u9732 data \u4f5c\u4e3a prop data \u5bf9\u8c61 somedata", "num": "1236", "d": "9/2015"}, {"title": "allow setter instantiation data properties", "body": "often using vuejs framework handy kind private properties like theses beginning typical cases storing canvas context super useful vue adding getter setter properties however like boring always declare property inside hook set properly inside hook afterwards question possible allow setter private properties beginning component instantiate order setup component properly vs", "num": "1235", "d": "9/2015"}, {"title": "vfor filters", "body": "updated projekt rename vrepeat vfor problem filter receive undefined property filter function", "num": "1234", "d": "9/2015"}, {"title": "extract functionality separate npm modules", "body": "hey think would beneficial extract parts vue repos observable nexttick cache perhaps others could live inside github repos vuejs organization would open something like edit case like idea nt time would glad help", "num": "1233", "d": "9/2015"}, {"title": "vue slower", "body": "switched alpha app slow even rewrote things remove warnings known issue", "num": "1232", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "\u4e2d\u6587\u6587\u6863\u7684 issue", "d": "9/2015"}, {"body": "repro note triggers event listeners instance", "d": "9/2015"}, {"body": "design template passed via evaluated different context parent vue instance context see", "d": "9/2015"}, {"body": "design see", "d": "9/2015"}, {"body": "please report doc issues docs repo better yet submit pr fixes", "d": "9/2015"}, {"body": "please post questions forum", "d": "9/2015"}, {"body": "use content insertion", "d": "9/2015"}, {"body": "btw please submit questions forum issues bugs", "d": "9/2015"}, {"body": "asking something related nonstrict mode deprecated guess right way generate component first party extend override assets third party js var grid require grid note third party component note first party component function gridfactory partials return template partials cell partialscell var cell note partial new vue el components gridone gridfactory cell cell gridtwo gridextend partials cell cell think worth discussing forum", "d": "9/2015"}, {"body": "tried implementing content insertion sadly unable access local scope deal breaker try way simplesmiler thanks", "d": "9/2015"}, {"body": "thanks prompt fix", "d": "9/2015"}, {"body": "yep moment use custom directive like", "d": "9/2015"}, {"body": "seofood sharing directive stuckouttongue", "d": "9/2015"}, {"body": "sure javascript moduleexports bind function thiseladdeventlistener click function e epreventdefault", "d": "9/2015"}, {"body": "would useful project seofood tried adding unbind clause code cleanup case stops working use combination vif directive sure even necessary unbind", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "created complete version automatically handles button anchor form elements find gist", "d": "9/2015"}, {"body": "could please put everything single reproduction next time use would make much easier debug", "d": "9/2015"}, {"body": "original usage wrong correct version note quotes around makes path search aka searching original code evaluating expression results also filter instead", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "finico required mainjs several time ok package init", "d": "9/2015"}, {"body": "honghe totally ok webpack inline calls module anywhere need instantiated", "d": "9/2015"}, {"body": "simplesmiler thank one question use replace packs code ca nt find definition", "d": "9/2015"}, {"body": "honghe nt think answer really depends implemented webpack update future please post questions forum tracker bugs", "d": "9/2015"}, {"body": "properties start underscore proxied vm instance may conflict vue internal private properties access template", "d": "9/2015"}, {"body": "got thanks reply good luck release", "d": "9/2015"}, {"body": "homepage css issue vue bug", "d": "9/2015"}, {"body": "sorry necro seems issue deeper cf html editor key editor key outer loop changed input lose value blur", "d": "9/2015"}, {"body": "actually separate issue opening new one", "d": "9/2015"}, {"body": "eljefedelrodeodeljefe cspcompliant build", "d": "9/2015"}, {"body": "thanks noting examples updated accordingly beta", "d": "9/2015"}, {"body": "many problems fiddle computed properties exposed component instance original data fiddle setting true raw data object actual component instances need use list access component instances nt know calling parent please read section carefully make sure understand method also pass number assume index remove item index need use native methods like removal getter check rather fixed fiddle", "d": "9/2015"}, {"body": "thanks evan reply seems misunderstood components well following suggestion code worked like charm first using methods since nt work somehow used methods methods working original code thank guiding right direction ritesh", "d": "9/2015"}, {"body": "retrieving multiple templates async results many http requests general bad production recommended approach use build tool like browserify webpack gives file modularity development ability bundle like production see vue treats components basic building block better load components asynchronously rather templates achieve webpack auto bundlesplitting vue async component feature", "d": "9/2015"}, {"body": "needs cost templates loads almost never consideration webpack adds significant level complexity nt feel need browserify hand used projects would play rather nicely babel direction leaning aside async component support actually really interesting little test case electron app wrote small component loader loads html disk approach could used anyone wishing load html templates threw gist case anyone interested", "d": "9/2015"}, {"body": "exposed", "d": "9/2015"}, {"body": "vue detect changes add afterwards set show variable data object also use method look", "d": "9/2015"}, {"body": "vue statement \u5fc5\u987b\u5728 js", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u4f60\u53ef\u4ee5\u8fd9\u6837", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "expect use case evaluated topmost scope work", "d": "9/2015"}, {"body": "yes misunderstood scoping rules everything working fine without thanks", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "please move questions forum", "d": "9/2015"}, {"body": "sorry new", "d": "9/2015"}, {"body": "see workaround", "d": "9/2015"}, {"body": "thanks much thelinuxlich went sure proper approach works far", "d": "9/2015"}, {"body": "glad worked", "d": "9/2015"}, {"body": "nt work filters however", "d": "9/2015"}, {"body": "yeah suggest use computed property", "d": "9/2015"}, {"body": "thanks works great", "d": "9/2015"}, {"body": "issue \u53ea\u5904\u7406 bug \u548c feature", "d": "9/2015"}, {"body": "thanks anyway share problem right place later using english best ability way forum url mentioned correct may right thanks solving problem", "d": "9/2015"}, {"body": "common parent parent instead child", "d": "9/2015"}, {"body": "simplesmiler use mvvm frameworks like angular avalon directive scope anywhere html document ca nt really done vue", "d": "9/2015"}, {"body": "kxxoling angular avalon simply scan whole page vue nt finer control part page put vue control want whole page", "d": "9/2015"}, {"body": "manage data one vue model vue supports nested scope decide use router lately worrying vue whole document get side effects btw use chinese make better explanation good english communication", "d": "9/2015"}, {"body": "kxxoling vue supports custom components instance component viewmodel ability pass data instance hierarchy via props think component elementdirectives angular", "d": "9/2015"}, {"body": "simplesmiler case little data shared need one attribute model whereas main interactive part easy way share data rather using hook manually change data", "d": "9/2015"}, {"body": "kxxoling instances may share data reference would recommend makes dependency implicit js var commondata var new vue el data commondata var new vue el data commondata", "d": "9/2015"}, {"body": "kxxoling look docs component props", "d": "9/2015"}, {"body": "simplesmiler works thanks lot nope thought would higher class functions nt get started study yet using", "d": "9/2015"}, {"body": "kxxoling component core vue recommend read guide get idea", "d": "9/2015"}, {"body": "thought feature thanks", "d": "9/2015"}, {"body": "javascript example", "d": "9/2015"}, {"body": "pretty sure never meant work way point filtering boolean", "d": "9/2015"}, {"body": "directives takes single javascript expression object literal use filter syntax inside javascript expressions add filters end directive filter would need process object instead string also recommended use computed properties binding value gets complicated", "d": "9/2015"}, {"body": "add use methods achieve something similar desired syntax", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "yeah known issue autocasting current prop syntax longer case using new prop syntax", "d": "9/2015"}, {"body": "\u7a81\u7136\u60f3\u5230\u8bbe\u7f6e vueconfigasync provinceid \u611f\u89c9\u5f02\u6b65\u6a21\u5f0f \u4e0b\u7684select", "d": "9/2015"}, {"body": "\u8bf7\u7528 jsfiddle \u7ed9\u4e2a\u91cd\u73b0", "d": "9/2015"}, {"body": "put rule english github", "d": "9/2015"}, {"body": "allanfreitas recommended use english would nt make required chinese users nt feel comfortable simply ca nt accurately describe issue english", "d": "9/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "\u5982\u679c\u4f60\u77e5\u9053", "d": "9/2015"}, {"body": "ca nt use styles", "d": "9/2015"}, {"body": "good practice rely default whitespace use css instead", "d": "9/2015"}, {"body": "far know mobile os disallows programmatically triggering input behaviors eg raise keyboard trigger date picker works user triggered input nothing vue", "d": "9/2015"}, {"body": "ask use case nt mind mean usage general transitions would work element changes state might misunderstanding would trigger transition without changing element state", "d": "9/2015"}, {"body": "yes course jfiddle trying show painful animate element transition system thought handle leaving entering dom trying trigger animation place without removing element like page could useful also plenty stuff like trigger shake form validation fail etc clear thanks", "d": "9/2015"}, {"body": "internal transition system provided handles tricky parts around insertingremoving elements together css transitions insertingremoving stuff need internal transition system trigger css transition setting css style toggling css classes use external animation library anything want example", "d": "9/2015"}, {"body": "according contribution guide questions vuejsdiscussion", "d": "9/2015"}, {"body": "sorry moved", "d": "9/2015"}, {"body": "\u7528 csp csp", "d": "9/2015"}, {"body": "\u9488\u5bf9csp\u505a\u4e86\u517c\u5bb9\u5904\u7406\u7684", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u611f\u8c22\u4f5c\u8005 esprima\u6da8\u59ff\u52bf\u4e86", "d": "9/2015"}, {"body": "\u4f60\u662f\u7ed9 set \u6765\u5efa\u5c5e\u6027", "d": "9/2015"}, {"body": "really annoying see issues chinese traduction nt always reliable nt making effort one handle question ps english nt native language either", "d": "9/2015"}, {"body": "fnlctrl \u8bd5\u8fc7 set \u4e86 \u4e5f\u4e0d\u884c", "d": "9/2015"}, {"body": "posva sorry boss chinese mine native language easy known use chinese raise issue en version question mustache bindings model view disabled detail app runs well local server mock data run real server real data one sections view update model data get server async sever response data updated view keep image attached data consoled looks set get function missed need finish data operate vue instantiation try set function also make effort thanks", "d": "9/2015"}, {"body": "disabled actually probably never set read section make sure provide reproduction \u91cd\u73b0 describing issue almost never helps", "d": "9/2015"}, {"body": "recommend posting different language english chinese find hard express posva look positive side learned new word today \u91cd\u73b0 reproduction smile", "d": "9/2015"}, {"body": "azamatsharapov use word sexual reproduction reproduction saying aftrer looking single meaning character", "d": "9/2015"}, {"body": "posva \u91cd\u73b0 literally means recurrence chinese \u91cd chong \u73b0 xian appearanceoccurence offtopic", "d": "9/2015"}, {"body": "indeed offtopic kinda fun smile", "d": "9/2015"}, {"body": "posva idea saying fnlctrl made clear think anyways let see \u91cd\u73b0 issue", "d": "9/2015"}, {"body": "thanks issue fixed init data vue instantiation \u5b9e\u4f8b\u5316", "d": "9/2015"}, {"body": "use case component switching tabs similar angular material tabs looks like rendered component problems without directive wo nt work option ignored wo nt appear decide live solve problem add every time use annoying", "d": "9/2015"}, {"body": "sensible api without need using directive component created dispatches event parent register", "d": "9/2015"}, {"body": "wo nt work define within even see fiddle sorry typo works fine thanks", "d": "9/2015"}, {"body": "still needs work fiddle", "d": "9/2015"}, {"body": "nt think private component import together parent component", "d": "9/2015"}, {"body": "conceptually really private component never used elsewhere outside nothing capture dispatched events developers importing suffice usage intuitive otherwise needs documented every single ui component peer dependency", "d": "9/2015"}, {"body": "developer needs aware private sat sep pm fnlctrl notifications githubcom wrote conceptually tab really private component tabs tab dependency tabs peer dependency tab never used elsewhere outside tabs nothing capture dispatched events developers importing tabs suffice usage intuitive otherwise needs documented every ui component peer dependency reply email directly view github", "d": "9/2015"}, {"body": "ok private would better relationship dependency explicitly specified something like option injected parent vm case componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist", "d": "9/2015"}, {"body": "nt think really bad like composition rather dependency sat sep pm fnlctrl notifications githubcom wrote ok private would better relationship dependency explicitly specified something like dependency option injected parent vm case body componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist reply email directly view github", "d": "9/2015"}, {"body": "ok guess live thanks", "d": "9/2015"}, {"body": "read section component scope works using inside child component template", "d": "9/2015"}, {"body": "record use inlinetemplate component get directive working", "d": "9/2015"}, {"body": "read component scope communication instances still could nt figure clean way currently implementing tabs component would look like gets rendered directive intended dispatch event component registering current element content tab angular approach work used inside template tried adding still wo nt work directive function points instead understand reason compiled scope ca nt use pass current element tl dr actually need something added attribute directive prop whatever child elementcomponent execute function like dispatching event passing argument demonstrated guide without need manually defined child component definition would kindly give advice", "d": "9/2015"}, {"body": "thoughts think need directive uses scope component attached without defined component option like angularjs", "d": "9/2015"}, {"body": "ok found solution inside directive bind function use access scope component attached maybe provide public property accessing prefixed private properties nt look like quite right thing", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "oops sorry", "d": "9/2015"}, {"body": "use handle update", "d": "9/2015"}, {"body": "options array replaced nt work", "d": "9/2015"}, {"body": "idea seems like problem", "d": "9/2015"}, {"body": "got working ugly hack consider something similar example", "d": "9/2015"}, {"body": "html new vue el app components comp require path comp data let index return function createnode const node data index childnodes const l mathfloor mathrandom let lt l nodechildnodes createnode see pen bokvvo texvnars terencez codepen", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "vuejs", "d": "9/2015"}, {"body": "indexcoffee templatehtml html nodeareaname", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "\u662f\u5728 webpack progress colors watch", "d": "9/2015"}, {"body": "applies autofill login pages", "d": "9/2015"}, {"body": "tried autofillevent polyfill original angular thread polyfill correctly fires change event vue able catch", "d": "9/2015"}, {"body": "meh polyfill works jqueryangular guess need even generic polyfill", "d": "9/2015"}, {"body": "autocomplete seems work fine case browser autofills page load", "d": "9/2015"}, {"body": "actually issues initial page load later autofill separate form polyfill also nt appear work even though jquery loading", "d": "9/2015"}, {"body": "try vue instance hook following", "d": "9/2015"}, {"body": "nt fix sadly added notice everything autofilled except password input click anywhere dom login button gets enabled perhaps security feature", "d": "9/2015"}, {"body": "saying email data updated password", "d": "9/2015"}, {"body": "email appears loaded even without polyfill perhaps related", "d": "9/2015"}, {"body": "sounds like browser autofill implementation issue btw version vue using", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "update vue autofills fine firefox sure chrome password manager nt work anyway thanks looking issue", "d": "9/2015"}, {"body": "theoretically always wait short period page load force trigger events input fields unless chrome security limitations approach", "d": "9/2015"}, {"body": "great thank", "d": "9/2015"}, {"body": "note method context always bound instance declared matter called examples method called parent instance repeat instance better pass method instead", "d": "9/2015"}, {"body": "bad webpack failed changes loaded", "d": "9/2015"}, {"body": "quickfix use", "d": "9/2015"}, {"body": "posva yeah right bug report", "d": "9/2015"}, {"body": "see warning console telling nt use together ok still recommended use instead", "d": "9/2015"}, {"body": "update syntax updated according comment implemented", "d": "9/2015"}, {"body": "update sep implemented", "d": "9/2015"}, {"body": "put demo childvue component data needs function object", "d": "9/2015"}, {"body": "thanks see", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yes ca nt use standard html tag names component names", "d": "9/2015"}, {"body": "thx lot", "d": "9/2015"}, {"body": "warning common elements future basically use inside like selfrecursive call never ends vue needs support selfrecursive components eg file tree components", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "suggestion break vue concept able", "d": "9/2015"}, {"body": "like see convincing use case supporting involves nontrivial addition observation mechanism", "d": "9/2015"}, {"body": "involves nontrivial addition observation mechanism maybe helps js var var set new set symboliterator set var arrayfrom set consolelog consolelog false like see convincing use case supporting new general thing js think support", "d": "9/2015"}, {"body": "nervgh use cases angular supporting cool scenario requires ui state set map", "d": "9/2015"}, {"body": "good point doable", "d": "9/2015"}, {"body": "also meet question solation make timer listen check dom height value get dom height value means dom render code \u7b80\u5355\u5224\u65ad\u5143\u7d20\u6e32\u67d3\u5b8c\u6210\u540e\u6267\u884c\u67d0\u64cd\u4f5c render function call var handle argv", "d": "9/2015"}, {"body": "ways solation ca nt check dom ist display dos ca nt get value height width", "d": "9/2015"}, {"body": "niluanxy think consider repo listen resize element writing component case however vue update size hook rewrite adding event bus trigger event like let know update size info needed way rewrite import vuesrctransition explicit possible export transition plugin use know", "d": "9/2015"}, {"body": "using model link input data", "d": "9/2015"}, {"body": "hoping would nt add property data object logic contained template usage kind like html one place add thing submit disabled textbox value empty another place add thing array works nt used able vel vref became reactive except binding button disabled property input element value use vmodel add property data object make value reactive would seem add little bit cruft also sync value two separate input boxes nt want", "d": "9/2015"}, {"body": "well nothing vue observe react simple input component using callback maybe wrong wait master turn", "d": "9/2015"}, {"body": "wo nt work vue reactivity requires source truth javascript dom vue observe change dom element property simple rule thumb need reactivity needs", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "nice", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "finally", "d": "9/2015"}, {"body": "like clear separation dataflow warning madness ahead currently two types directives first accept expressions similar props second accept statements similar props quite parallel props directives directives actually kind unbound props injected component instance modify instance behavior bit like adhoc mixins applied component component consumer look closely props directives make sense crazy", "d": "9/2015"}, {"body": "simplesmiler mind mentioned dropping v altogether make everything custom attributes saw happened", "d": "9/2015"}, {"body": "guess issue names start clash wonder solved unified call syntax proposal c went googling", "d": "9/2015"}, {"body": "would emit custom event child assuming bind parent syntax instance", "d": "9/2015"}, {"body": "thelucre", "d": "9/2015"}, {"body": "short answer supposed template compilations cached modifying runtime makes optimizations impossible use dynamic partials", "d": "9/2015"}, {"body": "know right", "d": "9/2015"}, {"body": "pass prop", "d": "9/2015"}, {"body": "wow thanks fast zap still one question pass component write correct behaviour", "d": "9/2015"}, {"body": "nt work scopes since going deprecated", "d": "9/2015"}, {"body": "ok miss smile", "d": "9/2015"}, {"body": "fiddle blank", "d": "9/2015"}, {"body": "sorry updated link", "d": "9/2015"}, {"body": "property observed declare set nondeclared property becomes nonobserved property convert observable property however set notice property nt exist therefore create observable property best practice always declare want observed", "d": "9/2015"}, {"body": "thanks evan mostly confused thiscatname ginger fixes issue thiscat cat nt would setting thiscatname created method mean thisdog becomes observed would setting thiscat cat prevent thisdog observed", "d": "9/2015"}, {"body": "simply causes error vm nt even finish initialization", "d": "9/2015"}, {"body": "ah yes see thanks sorry bother", "d": "9/2015"}, {"body": "several ways like import need actually recommended approach although repetitive clearly shows method comes add example instances better yet group global helpers mixin know look maintain make separate global like fine scope small put everything namespace object", "d": "9/2015"}, {"body": "thanks answer directive syntax best smirk component syntax yjeroen changing literaldynamictwowayonetime towards vue javascript instead template suggested option pretty good yum", "d": "9/2015"}, {"body": "looks good like possibility v prefix shorthand option also like prefix affix maybe consistency full notation shorthand example html sure improvement maybe makes harder think another maybe stupid question expressions amp literals use quotes literals leave quotes expressions something like html", "d": "9/2015"}, {"body": "really like latest proposal clear two major groups vue users us mostly backend developers using vue frontend library really wish keep consistent syntax others developing fullstack spa apps would prefer shorter concise syntax latest proposal caters well groups ca nt speak everyone came vue really disliked verbose frontend frameworks got angular good example introducing ton new syntax confusing backender like simple rule like would mean lot would make templates clear readable", "d": "9/2015"}, {"body": "new vue user use angular almost year one public angular modules placed sorry ad create long list like vue blush", "d": "9/2015"}, {"body": "dennisver full syntax denotes arguments best keep consistent nonquoted attribute values work value nt contain spaces impractical", "d": "9/2015"}, {"body": "agree thanks tried vue first time one first things clear whether use quotes coming ember nt really tried angular always associated quotes literal strings could also explain downside using mustaches expressions", "d": "9/2015"}, {"body": "dennisver ember templates parsed strings actually nonvalid html eg would work vue use real dom template vue templates must also valid html real html write attribute without quotes space encountered parsing nonquoted attribute value treated end value would actually parsed short always quote attribtues vue", "d": "9/2015"}, {"body": "like new proposal prefer events instead although clashes twoway syntax literal dynamic twoway onetime shortcuts think enforced prop definition instead dynamic props would standard literal could reuse shortcut twoway onetime component prop schema", "d": "9/2015"}, {"body": "thelinuxlich yeah like better especially trying real templates much easier spot also think might make sense use twoway bindings dynamic props default would imo confusing nothing differentiate normal attributes directives prefix also think beneficial able tell whether child component mutate parent state without look implementation details binding type indicator", "d": "9/2015"}, {"body": "another symbol twoway binding avoid misunderstanding maybe like ember mut var", "d": "9/2015"}, {"body": "clashes twoway syntax yeap literal dynamic twoway onetime shortcuts think enforced prop definition instead ie javascript think component like function js definition param number param object b param array c function foo b c code using foo need know work deal", "d": "9/2015"}, {"body": "correct analogy like", "d": "9/2015"}, {"body": "topic made sleepless came next problem first main goals changes see two make learning curve low possible avoid confusions make syntax flexible possible captain obvious yep opinion next things confusing three types directives literal nonliteral terminate ca nt find good reasons feels wrong complicated work well good design always dead simple see lots questions gitter github issues regarding vs nt always see code several types binding expressions remember combined acceptable proposal step let replace terminal directives controlflow tags never felt good nt see code time nt create indentation whatsoever stand vue also tags make one step extract control flow directives separate tags vue much readable imo feel intuitive people familiar template engine step make directive expressions uniform literal nonliteral directives let get rid term directive call expressions need types expressions direct value assignment simple work fine literal string number boolean assign evaluated expression work fine case expression freeform javascript expression evaluated vue instance context property path like valid js expression optional valid js expression last two cases expressions assignable nature gives us item onetime assignments use first syntax looks better follows concept everything double quotes expression twoway assignments expression writable avoid confusion working directive use next syntax evaluated twoway current vue instance context event handling new ideas vonclick etc sounds good consistency expression take current instance property bind event possible problems solution see room errors vue errors caught automatically directive code appropriate warnings displayed example let doodle little bit build shopping cart sketch vue moduleexports data function items name iphone quantity price validation errors object name value format validationerrors checkoutform name email methods validateform function validation code filters nameformatter read function value return value write function value return value component name email field error freeform markup compiled", "d": "9/2015"}, {"body": "karevn appreciate ideas concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough plus already like everywhere prefer binding type concept specifically designed component props component first class concept props mechanism data flow components directives different mixing binding type indicator normal directives nt sound like good idea using curlies indicate expressions sounds unnecessary already clearly defined expressions may appear attributes shorthand notations finally please note trying fix issues changes possible toned original proposal one want natural progression clear upgrade path trying reinvent syntax mistake made original proposal", "d": "9/2015"}, {"body": "tech standpoint works less fine conceptual readability standpoints feels illogical languages statements container control blocks attributes offered straightforward syntax universal native html tags components closer contemporary frameworks polymer react lower learning curve existing solution examples curlies used tell expressions vs literal values nt particularly like curlies may confused mustache bindings elegant option basically thougts breaks existing code relies vue rewriting dependent code inevitable already good time polish syntax revisit future nt experience angular came backbone directly took look first time impression hell going syntax polymer react syntax look much elegant natural taking account angular hype react polymer taking may sign everything good syntax vue learn lesson", "d": "9/2015"}, {"body": "karevn would argue latest proposal migration process drastically simplified certainly true breaks existing code changes view layer required sure actual logic furthermore current syntax proven popular lot developers due simplicity clarity judging learning curve already low compared frameworks like react never able fully comprehend", "d": "9/2015"}, {"body": "karevn syntax pretty much proposed polymer offers almost syntax terms logic except requires use wrapper element whereas vue optional use directly element reactjsx javascript expression completely different construct nt see proposal closer others nt see offering substantial improvement catering personal preference less trying force polymer expressions always mustaches mindset vue vue basic rule expressions always prefixed attributes one better subjective nt see convincing reason suddenly jump ship nt break anything seamlessly upgrade app following deprecation warnings would ideal process simpler people", "d": "9/2015"}, {"body": "think misunderstood proposal key points move control logic custom tags improve readability simple oversee currently implication think vue core code become cleaner change yes thinking minus specific symbol choice would equally happy whatever works best really think better vanything systems work polymer react even windows presentation foundation natural reinvent wheel works well frameworks also think vue internal directive code straightforward case sure acasar let describe worked switched days ago webpack recompiled everything refreshed page seen hundred warnings references line numbers code vue warnings show stacktraces vuejs code also js errors vue core code caused syntax incompatibility spent whole two days replacing syntax redebugging code even simple syntax change forces review templates use regexbased global replacement pray regex good enough forget replace forget explicitly declare variables use words even end world decent work simple yet manual mostly acasar totally right react syntax nightmare sometimes offering steal best properties simple attr binding syntax worst ones like mixing html js syntax", "d": "9/2015"}, {"body": "karevn said already always using everywhere almost exactly polymer said subjective natural nt necessarily mean natural personally find curlies expression wrapper symbols noisy annoying type make vue templates look like string templates fact html attribute annotations systems work valid argument argue polymer far far away taking inprogress versions unstable definitely nt represent best experience possible final ship together version focuses ensuring smooth upgrade experience latest proposal experience already improved would nt make sense make experience worse introducing even bigger syntax changes arguable improvements want make clear syntax change current syntax sucks fact working well many us trying fix small issues within current syntax let move something completely new sounds like goal maybe vue", "d": "9/2015"}, {"body": "karevn regarding upgrade experience upgraded medium sized app took hours ca nt say went completely smoothly frustrations along way overall anything drastic still bigger app waiting upgrade going hold finished proposals afraid upgrade process would even harder also personally big fan syntax proposed acknowledge come different backgrounds probably seems lot natural", "d": "9/2015"}, {"body": "make learning curve low possible avoid confusions closer contemporary frameworks polymer react lower learning curve existing solution nt fix broken took minutes memorize new changes thougth good memory mean general learning curve still think vue api makes perfect sense learnable day two funny comparing vue libraries mentioning learning curve new api bring sense explicity think makes easier learn compared libraries api", "d": "9/2015"}, {"body": "azamatsharapov calm please discussion", "d": "9/2015"}, {"body": "sorry forgot insert smiley smile", "d": "9/2015"}, {"body": "acasar two accounts azamatsharapov nt seem get point changes nt think current syntax worths efforts laziness learning anything spending time efficiently changes inevitable would like best syntax possible release keep referring libraries like newbies background see syntax feel familiar beginning increases vue chances succeed succeed library nice architecture pretty stable code vue good points unquestionably look familiar based experience people imagine went ruby rails backbone wpf world see attr src something hmm colon mean read docs make sure background see hmmm looks like assign ruby hash js object think got", "d": "9/2015"}, {"body": "read docs make sure personally took like days read vue docs first wo nt annoying public simple questions first js library yeah also backbone past probably much think mandatory learn docs first vue docs seem easy understand yeah understand mean people different backgrounds colon thing optional like ifelse vs ternary use sure miss something personally would nt use shortsyntax better type vbindvon later read html like plain english", "d": "9/2015"}, {"body": "karven posted company account mistake seems nt get unnoticed add one comment familiarity came angular felt right home vue even felt much easier intuitive use judging popular angular still many feel seems changing syntax completely nt end well well guess jury still azamatsharapov also prefer longer syntax see harm offering concise shorter one seems valid usecases understand optional", "d": "9/2015"}, {"body": "azamatsharapov indicates like people take look vue gitter thread see question would appear people read docs acasar think new syntax problem angular fact syntax changed people nt trust angular anymore", "d": "9/2015"}, {"body": "karevn yeah active used shout like hey read docs dude maintainer trying please people providing short syntax removes leaves easy read syntax people may say verbose", "d": "9/2015"}, {"body": "azamatsharapov always good idea remember human psychology designing technical system meeting peoples expectations key success", "d": "9/2015"}, {"body": "karevn right problem expectations necessarily represent vue users", "d": "9/2015"}, {"body": "sure thing neither best gather statistics vs vs proposal things work question preferred users", "d": "9/2015"}, {"body": "karevn note proposal based vue current syntax around quite time used many positive feedbacks blunt nt think opinions hold weight mine trying best address concerns changes really obligation accept suggestions think fine line suggestions like better put framework", "d": "9/2015"}, {"body": "think vue simple enough learned represented syntaxes nt see problem newbies learning make syntax logical anyone could get hold days rather focus code maintainability extensibility large ammounts code easily understandable supportable right see", "d": "9/2015"}, {"body": "taking account opinion one seriously differs less consistent always good idea give alternative ideas consideration sometimes change mind sometimes make sure original idea best engineering", "d": "9/2015"}, {"body": "karevn given fair consideration explained multiple times nt think would work may work designing brand new library context acknowledging constraints working also important part engineering", "d": "9/2015"}, {"body": "need blood hocho laughing american english british english talk russian english omg satisfied correct analogy like analogy correct example good comparison think completed directive syntax component syntax left hand right hand voting yjeroen thelinuxlich understand votes already blush", "d": "9/2015"}, {"body": "nervgh syntax particular sure link follow", "d": "9/2015"}, {"body": "javascript definition said thelinuxlich problem component props syntax propose something like need think js definition syntax", "d": "9/2015"}, {"body": "sure thing neither question preferred users funny evan bdfl gets votes rest us get mon sep pm evan notifications githubcom wrote nervgh syntax particular sure link follow reply email directly view github", "d": "9/2015"}, {"body": "markhahn actually others makebelieve democracy works nowadays", "d": "9/2015"}, {"body": "nervgh regarding prop binding types still believe declared template level possible enhancement would also offer verbose syntax since twoway oneway nt much meaning sake consistency readability may possible something like html", "d": "9/2015"}, {"body": "acasar latest comment twoway onetime modifiers declared templates readability mostly depend directive logic component logic think javascript moduleexports props propname twoway true declaration tells property requires twoway access using oneway template expression generate warning set false twoway access still available depending template onetime true property evaluated one time regardless template syntax request looks like good idea sure considering options", "d": "9/2015"}, {"body": "trust totally making end decision like latest proposal top feel post confusing shorthand von different thought component different binding shorthands since shorthands beginning attribute name maybe place beginning well instead end attribute name", "d": "9/2015"}, {"body": "acasar looks tempting one side smirk another side encapsulation way amount sides three abstraction encapsulation polymorphism dizzyface", "d": "9/2015"}, {"body": "acasar last comment looks reads well using wording rather twoway onetime bindings great idea personally pretty obvious shorthand maps words directly end sure make best decision library knows already gotten awesome library far", "d": "9/2015"}, {"body": "lucky bdfl look vue stands seen many shitty suggestions suggested people ca nt see big picture", "d": "9/2015"}, {"body": "acasar think helps attrprop bindings start prefix know belong category colon nonnative attribute tells prop binding type special symbol placed equal sign tells prop handles value differently different prefixes especially using shorthand makes less straightforward prop potentially start three different prefixes remember moved prefixes back one prefix", "d": "9/2015"}, {"body": "agree probably keep uniform prefix shorthand syntax across binding types problem originally trying address lack meaning shorthand symbols events bindings think quite good amp nt mean anything confusing since binding types common always check docs get right maybe could something like maybe even filter suggestions even keep bad expressive maybe bit confusing beginners", "d": "9/2015"}, {"body": "syntax eg looks like invalid xml basically way syntax could even work acasar proposal feels valid", "d": "9/2015"}, {"body": "problem current alpha syntax work without syntax work nt guys think second one preferrable related things grouped together avoiding confusion less code repeating would even cleaner", "d": "9/2015"}, {"body": "step let replace terminal directives controlflow tags concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough work webdev many examples directives like placing anywhere element html templates difficult reading looks like game directive directive think proposal make directives like elements bad comparison brings unification case single right way directives listed important propagate influence child elements", "d": "9/2015"}, {"body": "mentioned many times use control directives tag get exact result keeping code style consistent nothing library library force opinion form like brings unnecessary verbosity template punished meet someone expectations", "d": "9/2015"}, {"body": "simplesmiler deal people may put attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes", "d": "9/2015"}, {"body": "syntax already use tue sep nikolay karev notifications githubcom wrote simplesmiler deal people may put vif attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes reply email directly view github", "d": "9/2015"}, {"body": "simplesmiler punished meet someone expectations punished punished someone else judge expressed opinion proposal karevn believe could find compromise could find intuitive", "d": "9/2015"}, {"body": "nervgh sorry going happen nt see offers substantial benefits substantial enough warrant yet another breaking change", "d": "9/2015"}, {"body": "supporting etc avoid bc breaks let ppl choose happy problems except fact stuff build maintain", "d": "9/2015"}, {"body": "two ways something unless shorthand double docs users would need learn two ways", "d": "9/2015"}, {"body": "yjeroen consider shorthand ca nt difference note fact actually", "d": "9/2015"}, {"body": "actual discussion drifted away quite bit original post new syntax works mostly intuitive enough utilise go without consulting docs last vue project something thing struggling difference binding types hard grasp difference syntax rest looks easy enough accept move smiley positive statement", "d": "9/2015"}, {"body": "agree yjeroen two ways something even pain big project someone definitely something similar different way people go wtf every time see would even try search special meaning story method every single new developer beginning believe special meaning regular thought triggers special listeners something problem adding property component ofc", "d": "9/2015"}, {"body": "arrilot need attribute condition expression becomes nt better plus added new api makes people happy end different ways thing", "d": "9/2015"}, {"body": "nirazul binding type indicator assume people somewhat used possible provide verbose version special symbols shorthands maybe get rid could also apply literal directives", "d": "9/2015"}, {"body": "karevn implied control structures independent tags intuitive using attributes languages statements container control blocks attributes simple counter argument case css want show hide particular element would normally apply remove class element html stuff would nt wrap element another one purpose hiding html stuff also comparing vue languages even frameworks probably fallacy one insists compare directive angular used attribute intents purposes identical", "d": "9/2015"}, {"body": "use instead dots von uses syntax html suggestion would html", "d": "9/2015"}, {"body": "yjeroen actually think makes sense use modifier colon already double meaning arguments bind shorthand html think look pretty consistent although introducing sort another concept super easy read understand maybe drop use", "d": "9/2015"}, {"body": "although nice concise semantic benefits outweigh former", "d": "9/2015"}, {"body": "shorthand could twoway binding considered default dot modifier supplied would equivalent", "d": "9/2015"}, {"body": "youngsteveo currently consensus among major frameworks component dataflow topdown default twoway bindings allow child component mutate parent state makes sideeffects harder reason want explicit indicators", "d": "9/2015"}, {"body": "okay makes sense could one way considered default dot modifier supplied", "d": "9/2015"}, {"body": "youngsteveo yes current semantics props", "d": "9/2015"}, {"body": "aha good idea nt argument similar modifier problem see bind shorthand consistency issues see well shortened replaced shortened colon replaced well vs cases vxxx colon thought using colons argumentmodifier although colon way prettier decision drop semantic benefits", "d": "9/2015"}, {"body": "yjeroen think postfix html double duty colon tiny issue think ok ambiguity leading colon denotes shorthand colon directive name denotes argument consistent imo arg optional part full directive syntax theory keeping everything consistent also able", "d": "9/2015"}, {"body": "yes right see better rereading post actually reading code instead looking character differences clear read", "d": "9/2015"}, {"body": "quite like direction going favouring expressiveness short type opinion better way go expressive syntax always strong advantage vue however two questionsremarks prefer verbose wording onetime twoway binding types instead sync clear synonym onetime sync sync child property back parent shorter type without dash look seamless completely understand need introduce modifiers since mind needlessly add complexity structure much prefer multiple arguments separated colon explanation way almost think directives normal functions default argument values von event key expression gt function von event key expression vbind property binding expression gt function vbind property binding oneway expression", "d": "9/2015"}, {"body": "acasar sounds good describing original indicator types reasons using modifiers prevents ambiguity colon usage especially shorthand vs colon nt make sense literal modifier would look like argument proposal literal directive syntax still demands special concept semantically modifier already concept buried cryptic syntax arguments pretend", "d": "9/2015"}, {"body": "thanks reply makes sense noticed one thing explained original post proposal aims eliminate micro syntax expressions bind multiple classes single element currently like", "d": "9/2015"}, {"body": "special char like acceptable consider original syntax like", "d": "9/2015"}, {"body": "sync", "d": "9/2015"}, {"body": "acasar use object literal", "d": "9/2015"}, {"body": "hax considering nt compose well modifier syntax discussing", "d": "9/2015"}, {"body": "seems use indicate twoway binding sure strong use case binding anyway use bind event symbols indicate twoway binding interesting idea example use use twoway binding dolls", "d": "9/2015"}, {"body": "guess something like since seems really verbose common use case could nt make simpler making consistent event syntax could true style since special attribute besides class", "d": "9/2015"}, {"body": "hax personally nt like decision using indicating twoway overloads semantics listening events triggers digest cycle vue nt need digest cycle semantic mismatch also sure good idea copy syntax something works", "d": "9/2015"}, {"body": "acasar two braces even shorter reason like keep single attribute native counterparts also single attributes", "d": "9/2015"}, {"body": "something similar symbols makes really easy read template personally big fan symbols html", "d": "9/2015"}, {"body": "sure dotnotation definitely good decision drop cryptic notations totally thing exchange easy wrap mind around acasar start worrying complicated syntax arguments maybe right time outsource object javascript", "d": "9/2015"}, {"body": "azamatsharapov think symbol better longterm angular add symbol sugar though symbols angular chosen may fit vue", "d": "9/2015"}, {"body": "hax longterm hmm think actually using symbols better longterm read template time reading plain english easier symbols", "d": "9/2015"}, {"body": "azamatsharapov symbols may little learning curves suit common concept use operators write plain english please understand nonenglish users like plain english plain smile", "d": "9/2015"}, {"body": "hax funny concept though math symbols people get lower grade school seen many people nt know meaning", "d": "9/2015"}, {"body": "hax use operators study math school find easy spot means id html number real life vue using plain english almost everywhere look api docs yeah ca nt argue nationality may find easy memorize symbollike api", "d": "9/2015"}, {"body": "sorry good examples maybe better examples jquery even better example anyway know different thought example coffeescript replace many symbols plain english read coffeescript code without syntax highlighting find terribly kill eyes could read section readable think", "d": "9/2015"}, {"body": "decided main latest syntax reference separate discussion thread avoid confusions outdated proposalsreferences always refer thread latest proposal", "d": "9/2015"}, {"body": "latest proposal binding type indicators shorthand syntax omission dropped short syntax binding type indicators mind asking clarification", "d": "9/2015"}, {"body": "latest proposal dream coming true", "d": "9/2015"}, {"body": "considering latest syntax something like possible", "d": "9/2015"}, {"body": "latest proposal nice question warning raised people use camelcase reference instead using dash foresee people forgetting", "d": "9/2015"}, {"body": "yjeroen even possible thought browsers get rid case also like proposal going syntax getting really consistant", "d": "9/2015"}, {"body": "fairly large app written lurking interest waiting dust settles think converting looks coming together nicely wonder though spirit keep vobvious worth deprecating vel vref great like bindings treating simply shorthand element reference would make obvious easier explain well catering like readabilityverbosity think", "d": "9/2015"}, {"body": "small consistency improvement prevent anyone misunderstanding dotnotation suggest following change html", "d": "9/2015"}, {"body": "could explicit", "d": "9/2015"}, {"body": "fullfs yes", "d": "9/2015"}, {"body": "josephsilber tentatively dropping short syntax type indicators since explicit yjeroen seems impossible moment definitely looking solution looks like thing still seem bit unresolved replacement still keep eye", "d": "9/2015"}, {"body": "nice need", "d": "9/2015"}, {"body": "fullfs gone far say", "d": "9/2015"}, {"body": "fullfs simplesmiler nt decided whether remove yet bit verbose exact thing", "d": "9/2015"}, {"body": "tentatively dropping short syntax type indicators since explicit mean", "d": "9/2015"}, {"body": "could maybe add changelog next time change nt think see timestamp edit last time", "d": "9/2015"}, {"body": "thought still rooting make adding class condition little easier right code bad still tiny downgrade length readability object literals still form microsyntax understand natively single attribute every event attribute still add multiple handlers single element think would pretty much way also possible define multiple event handlers using object literals exclusive", "d": "9/2015"}, {"body": "acasar would nt call object literal microsyntax javascript expression know write javascript know write object literal point removing microsyntax always safely assume directive takes single expression event handlers use multiple attributes handle different events native syntax eg fact allow key modifier native syntax would force key detection javascript strict improvement hand nt see offers readability improvement object literal problem allows split classmanipulation logic multiple attributes mismatch native counterpart think two ways thing clear benefit example vs shorthand alternative syntax nt offer specific benefits removed considering removing altogether use", "d": "9/2015"}, {"body": "since curly braces used mustache expressions seeing single braces used object literals bit jarring even though nt allow mustaches attributes anymore always safely assume directive takes single expression mean would nt directive get object", "d": "9/2015"}, {"body": "josephsilber object literal valid javascript expression", "d": "9/2015"}, {"body": "latest syntax wonderful reads really well intuitively respect", "d": "9/2015"}, {"body": "thanks latest alpha release really like syntax think could find even concise wording modifier like example since essentially passing raw value nt parsed", "d": "9/2015"}, {"body": "acasar like since literals used place probably literal makes sense shorten name sure though vm variables raw literal strings", "d": "9/2015"}, {"body": "maybe string", "d": "9/2015"}, {"body": "thought shortening much less selfexplanatory", "d": "9/2015"}, {"body": "josephsilber like really short since passing raw value somehow appropriate options like expressive end fine using quotes probably work anyway since valid expression", "d": "9/2015"}, {"body": "another viable option", "d": "9/2015"}, {"body": "think precise semantic name use value literally interpolate aside nt even know directive binding debate mentioned official vue docs anywhere finally found vuerouter use grapnel routing apps propsbindings literal", "d": "9/2015"}, {"body": "simplesmiler laughed would open possibilities like validation future mean", "d": "9/2015"}, {"body": "shorter explains intent even better would mistake knowing value would string number", "d": "9/2015"}, {"body": "prefer reference type validation anything else related type value example parsing prefer etc", "d": "9/2015"}, {"body": "extra letters really hard deal imo semantically accurate important concise especially letters difference", "d": "9/2015"}, {"body": "looks bit long compared others makes different among", "d": "9/2015"}, {"body": "noticed change beta going way mean previously directive option like directive special syntax something simple name potentially overlapping almost anything", "d": "9/2015"}, {"body": "fullfs vue components already modeled web components custom elements contentslot api web components use normal elements indicate turn another element already using dynamic components", "d": "9/2015"}, {"body": "regarding vs something shorter personally nt mind extra characters however thelinuxlich brings good point vlink get string number technically literals case made using well explains intention pass value directive without parsing expression confusion parsing problem solved sufficient documentation felt worth drawing attention felt really good point might missed", "d": "9/2015"}, {"body": "morgul nt think evaluate syntax based make sense without docs impractical rather think evaluate syntax make sense enough need read docs may better reflect end result value bound string better reflects intent directive either reactive literal reactive directives take expressions literal directives take strings directive reactive default modifier makes literal reflect underlying difference", "d": "9/2015"}, {"body": "said agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "alright agree completely onboard", "d": "9/2015"}, {"body": "reactivenonreactive maybe something", "d": "9/2015"}, {"body": "might little messier nice shorthands must use colon vdirective besides though important rails users would feel bit inconvenient handle attributes contains colons use rails code generate html least hope syntax would remain release way directives alias basic directives like ok needed include attr name vue would framework project xd", "d": "9/2015"}, {"body": "cicholgricenchos colon necessary directive names contain hyphens know directive called", "d": "9/2015"}, {"body": "closing issue specific concerns please post forum instead", "d": "9/2015"}, {"body": "really depends drag drop lib using render mechanism may conflict party lib trying", "d": "9/2015"}, {"body": "closing repro", "d": "9/2015"}, {"body": "masonry relies element already inserted read width height wait vm attached masonry directive", "d": "9/2015"}, {"body": "thanks lot triggering window resize actual component attached get around issue feels better also helps keep unbind directive happening quickly getting weird right transition component comes", "d": "9/2015"}, {"body": "intended destroyed vm used want reuse component js var app vueextend template mount empty div append app instead mounting var app new app mount appendto app destroy old one app destroy true create new instance mount app new new app mount appendto app however sounds like rare use case want destroy remount instead resetting state app", "d": "9/2015"}, {"body": "thanks use way yes think abnormal usage smile trying reuse vuecomponent within meteor blaze template", "d": "9/2015"}, {"body": "dammit", "d": "9/2015"}, {"body": "use case fri sep pm jonas laursen notifications githubcom wrote noticed callback watch function called value set current value would nice option callback called even though value fiddle demonstrating behavior open console see callback called value set value twice row reply email directly view github", "d": "9/2015"}, {"body": "point api triggers value actually changed vue also buffers multiple changes event loop callback trigger latest value making trigger every set defeats purpose sure better way achieve want closing feel free continue discussion maybe start new thread trying vuejsdiscussion instead", "d": "9/2015"}, {"body": "case plot new value graph every time changes updating value changed graph represents wrong image change time", "d": "9/2015"}, {"body": "would need update graph value changed", "d": "9/2015"}, {"body": "trend change time imagine value changed times value changed times graph flat line followed small increment updating value changes graph turns continuously rising line instead obviously make event fire get new data trigger graph update may big issue", "d": "9/2015"}, {"body": "always rerender setinterval rather inside watch callback", "d": "9/2015"}, {"body": "ever better idea thanks", "d": "9/2015"}, {"body": "another thing store latest value list n latest values n number points drawn yet another one store alongside actual value increment callback watch callback draw graph", "d": "9/2015"}, {"body": "intended change old behavior formatting value user type results awkward ux scenarios found much natural useful let user type whatever want format later twoway filters originally designed want limit typed input add listener update input value", "d": "9/2015"}, {"body": "\u628a", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "real world use case", "d": "9/2015"}, {"body": "small use cases register everything globally large apps much maintainable component explicitly depend needs maybe useful situations benefits comes global tradeoff idea behind something marginally useful negative implications maintainability let remove", "d": "9/2015"}, {"body": "yep application popup window complex structure custom editor elements elements combined levels hierarchy making inefficient declare explicitly parent element parent types declared elements lines repeating code also good register globally never appear parts application love loaded locally", "d": "9/2015"}, {"body": "importing explicitly worthwhile repetition allows look component hierarchy alone understand dependencies come implicit fallback wo nt remember imported components hierarchy months later", "d": "9/2015"}, {"body": "good memory thanks remember app consists two different pieces registering welldefined set components specific would prefer choice load assets suspect thing happened custom directives filters let share impression worked went well minus minor learning curve things minimalistic clean api syntax reliable code became worse better code repetition features use removed making rewrite code starting think made mistake choosing vue react sure breaking changes waste time future", "d": "9/2015"}, {"body": "karevn much helpful actually list specific things made dev experience worse addition issue prereleases means api stability guarantee first place value stability stick wait stable also final migration release using prerelease means agreed deal constant breaking changes even released probably good idea use nonreleased workinprogress branch designing api based experience feedback entire community entitled whatever think feel free switch frameworks changes direction like fact react also import everything explicitly repeat even stuff", "d": "9/2015"}, {"body": "reading discussion almost agree really nt see point removing existing code provided feature instead making default tastes differ people prefer fallback approach intuitive sometimes especially components loaded dynamically worked around mixins factories etc takes precious time sure thing always balance ideal architecture cost changes case lines code namely would hurt anyone left cost significant time use unstable version really need readwrite binding filters feature probably backported see question api prefer prefer vue period question rely vue api long term reliability handsomeness changes breaking serious reason case new binding syntax broke code okay let readable forces better code structure case nope change might nonbreaking set default", "d": "9/2015"}, {"body": "yes upgrading always come pain refactoring chance vue break free legacy config options strictly semver nothing break want last long possible reliability issue talked regarding strict mode surely costs refactoring time heavily relied ideally new users pick vue nt even need know thing existed api surface small possible global structuring pattern consistent possible making possible disable strict mode essentially encourages two different styles structuring vue apps imagine people working one app uses moving another project uses creates fragmentation developer experience want get rid possibility reasonable place kind unlucky caught middle transition appreciate feedback needs done done", "d": "9/2015"}, {"body": "please provide reproduction", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ids must unique point", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "totally agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "tried syntax find browser transform camelcase lowercase means write somecomp transform somecomp destroys benefits easy discover", "d": "9/2015"}, {"body": "terencez thanks pointing think solved adding warning suggests using dashcase auto converts camelcase like props", "d": "9/2015"}, {"body": "oh actually gets converted browser parsing really way detect guess make clear docs", "d": "9/2015"}, {"body": "alternatively html", "d": "9/2015"}, {"body": "actually something node intuitive esp new users clues guess wat stands even experienced users also make mistake using", "d": "9/2015"}, {"body": "ya also think alternative notation intuitive confused esp new users uses dot notation js equation template later seems assign imo although old notation let user remember transform nonintuitive confused", "d": "9/2015"}, {"body": "disagree argument notation intuitive even chrome devtools browser devtools selector syntax quite together ubiquitous jquery syntax many developers clear means select store variable", "d": "9/2015"}, {"body": "terencez nirazul agree", "d": "9/2015"}, {"body": "\u8fd8\u662fvref", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "zhongxingdou english please", "d": "9/2015"}, {"body": "people complaining intuitive could change instance properties instead html", "d": "9/2015"}, {"body": "thelinuxlich", "d": "9/2015"}, {"body": "thelinuxlich hmm looks like prop component though prop ref modifier say something like html let rename", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "agreed", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ok maybe plaintext would nt hurt comprehension still love aliases use html", "d": "9/2015"}, {"body": "nirazul necessary shorthand something short nt think", "d": "9/2015"}, {"body": "seems necessary vbind von nt get difference shorness ease use", "d": "9/2015"}, {"body": "nirazul makes easier except used old syntax explicit easier remember new users", "d": "9/2015"}, {"body": "totally agree main syntax reason like decision drop really accustomed dollar syntax name dom references leading since forever syntax appealed nt want see go without least trying convince nevermind changes look promsing", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "wow ca nt believe finally lol", "d": "9/2015"}, {"body": "fiddle uses sure want ran working fine", "d": "9/2015"}, {"body": "simplesmiler oh thank swift response closing issue", "d": "9/2015"}, {"body": "ie \u4e0d\u652f\u6301\u539f\u751f template tag \u6240\u4ee5 template table tr \u4e0a vrepeat \u5373\u53ef", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u53ef\u4ee5 tue sep pm hbshun notifications githubcom wrote reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "bug report \u548c feature request \u63d0\u95ee\u53ef\u4ee5\u5230", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "started working send pr soon", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "close let continue discussion pr thread", "d": "9/2015"}, {"body": "scoping issue require explicitly passing props type checks work expected disable type checking component", "d": "9/2015"}, {"body": "good point", "d": "9/2015"}, {"body": "read scoping difference", "d": "9/2015"}, {"body": "btw probably need update mustachetype props bindings replaced syntax anyone faced problem done", "d": "9/2015"}, {"body": "nav native element nt using component first place wed sep terencez notifications githubcom wrote find component name defined set optionscomponents implicit component name nav template lead max call size exceeded way disable behavior expect rename component name nav others reply email directly view github", "d": "9/2015"}, {"body": "think source vue checked tag name native html registering component might mistaking though", "d": "9/2015"}, {"body": "azamatsharapov missed new ones", "d": "9/2015"}, {"body": "closing think renaming obvious thing good idea avoid ambiguity native element vs recursive calls", "d": "9/2015"}, {"body": "copypaste typo examples opening different tag closing", "d": "9/2015"}, {"body": "youngsteveo oops fixed", "d": "9/2015"}, {"body": "would mean would work html element still workaround", "d": "9/2015"}, {"body": "youngsteveo would work anything", "d": "9/2015"}, {"body": "think mixing syntax vuecomponents syntax web components bad idea", "d": "9/2015"}, {"body": "question stay similar would become stay", "d": "9/2015"}, {"body": "nervgh vue components modeled web components already uses custom elements slot api yjeroen stay part component special vocabulary", "d": "9/2015"}, {"body": "new syntax javascript object literal ca nt mix filters pipe whole object filter cases probably want bind style computed property inlining filters multiple properties messy", "d": "9/2015"}, {"body": "makes sense think readable warning compatibility reasons", "d": "9/2015"}, {"body": "object repeat guarantee order javascript specified spec thus enginedependent need order guarantee use array use filter", "d": "9/2015"}, {"body": "upcoming", "d": "9/2015"}, {"body": "hbrls yes", "d": "9/2015"}, {"body": "\u53ef\u4ee5\u7528\u81ea\u5b9a\u4e49 filter key filter", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "writing blur necessary ensure correct twoway filter behavior write function must called order determine wether model value changed wo nt anything value remains current model value", "d": "9/2015"}, {"body": "hmm think warning may aggressive consider remove unobservable object warning", "d": "9/2015"}, {"body": "feeling warning unobservable objects fully ignored try put together example", "d": "9/2015"}, {"body": "vue convert keys nonnative objects replacing still reactive eg ca nt expect reactive", "d": "9/2015"}, {"body": "sure thing feeling confirmed formal tests completely ignored passed props gives field", "d": "9/2015"}, {"body": "nah works expected nt show jsonstringifiable", "d": "9/2015"}, {"body": "hmm makes sense bit confusing nt know jsonstringifiable nt think placeholder indicate object would great", "d": "9/2015"}, {"body": "yeah could use improvement future priority moment", "d": "9/2015"}, {"body": "trying pass result service call contains array dates route data hook throwing warnings turn debug mode able see useful logs spamming console", "d": "9/2015"}, {"body": "cheapsteak warning going removed next release", "d": "9/2015"}, {"body": "short screencast see problem", "d": "9/2015"}, {"body": "fixed small hack", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yeah currently possible adhoc good standardize api", "d": "9/2015"}, {"body": "looks want actually way inject global mixin achieve like extend default vue instances behavior applied every single vue instance created however undocumented moment could make something like js apply global mixin vuemixin created function optionsmycustomoption consolelog optionsmycustomoption new vue mycustomoption gt one advanced use case may need special handling merging custom option values example hook special merge strategy merges multiple hook functions array called default strategy simple overwrite need custom merge strategy need register", "d": "9/2015"}, {"body": "sounds good mixin plugin hook every event merge strategies make also sense since might differ depending plugin option", "d": "9/2015"}, {"body": "issue occured vuevalidator maybe could solve issue try fix issue vuevalidator thanks", "d": "9/2015"}, {"body": "trace call stack tried switch debug mode", "d": "9/2015"}, {"body": "remove warning next version", "d": "9/2015"}, {"body": "azamatsharapov impact thing warnings warn trace data", "d": "9/2015"}, {"body": "yeah nt notice getting warning thought error wants see trace", "d": "9/2015"}, {"body": "probably related", "d": "9/2015"}, {"body": "supported current already support read filters twoway filters", "d": "9/2015"}, {"body": "questions posted vuejsdiscussion instead main repo", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "order make array filters like work array object repeats preconverts values arrays piping filters thus avoid returning nonarray values inside filters case better convert array another array rather object use method workaround future versions raise warning return nonarray values filter", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "answers question well", "d": "9/2015"}, {"body": "\u4ee5\u540e\u95ee\u9898\u8bf7\u53d1\u5230", "d": "9/2015"}, {"body": "\u989d", "d": "9/2015"}, {"body": "mouseup select index select index \u5728 notifications project \u53ea\u80fd parentlist set reply email directly view github", "d": "9/2015"}, {"body": "tcdona", "d": "9/2015"}, {"body": "sinoon hi function return \u73b0\u5728\u4e3b\u8981\u662f\u60f3\u5355\u72ec\u64cd\u4f5c project \u53ea\u80fd vmprojectlist set \u91cd\u5199\u6240\u6709\u7684\u6570\u636e\u7684\u65b9\u5f0f\u89c9\u5f97\u5f88\u4e0d\u4f18\u96c5 \u4ee5\u4e0a\u6211\u90fd\u6574\u7406\u5230 vuejsdiscussion", "d": "9/2015"}, {"body": "sinoon", "d": "9/2015"}, {"body": "\u4e0d\u884c\u662f\u56e0\u4e3a\u4f60\u7684\u521d\u59cb\u6570\u636e\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709 vue \u5bf9\u8c61\u4e5f\u53ef\u4ee5\u76f4\u63a5 \u6570\u7ec4\u7684 \u4e0d\u63a5\u53d7 sinoon", "d": "9/2015"}, {"body": "vue", "d": "9/2015"}, {"body": "think need listen resize event window update mobile field handler", "d": "9/2015"}, {"body": "every single component seems repetitive trying avoid already know could get working like hate every single one main vue instance components fire main vue instance always default value", "d": "9/2015"}, {"body": "store check screenwidth method expensive use mixin btw type questions posted vuejsdiscussion instead", "d": "9/2015"}, {"body": "options", "d": "9/2015"}, {"body": "thanks problem solved try add guide later section guide wrong nt option still gets rendered tags around intended components implicitly get replace false option template", "d": "9/2015"}, {"body": "option used default changed guess guide slightly date needs updating", "d": "9/2015"}, {"body": "guide updated", "d": "9/2015"}, {"body": "mistake nt read guide carefully use registered component parent instance template make sure component registered instantiate root vue instance", "d": "9/2015"}, {"body": "looks like plugin creating nonobserved fields fly recommended practice still work though", "d": "9/2015"}, {"body": "edit explicit", "d": "9/2015"}, {"body": "nicee nt know looked directives obviously close enough sorry posting silly question variable passed data object like read documentation sure fully understanding got working documentation says use style object like elementstyleheight access like elementstyles appropriate behavior", "d": "9/2015"}, {"body": "yes like usually make computed property though", "d": "9/2015"}, {"body": "nt computed properties typically concatenation sort heavy logic replacing value key though", "d": "9/2015"}, {"body": "plus move computed properties tag ca nt read js data function return current current slide speed speed animation slide count many slides slider object thumbnailheight height thumbnails slidewidth style width height marginleft margin left entire slider container flip slides computed function return styles width function return thisstylewidth px height function return thisstyleheight px marginleft function return thisstylemarginleft px ca nt access thisstyles component vstyle styles wo nt work anymore read data method computed would like use computed automatically add thisstyleheight px getter instead typing px everywhere", "d": "9/2015"}, {"body": "ie throwing away mustache tags inside attributes longknown issue using vstyle preferred compatibility last comment using wrong syntax computed", "d": "9/2015"}, {"body": "see computed properties things inferred existing data styles fall description would", "d": "9/2015"}, {"body": "oh thank", "d": "9/2015"}, {"body": "need connect global vm option becomes available data binding", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "scope gotcha use component root node compiled parent scope actually sends parent scope nt instead automatically available inside component see note replaced different scoping behavior works way expected", "d": "9/2015"}, {"body": "ah figured anyway achieve read guide would like pass prop index value", "d": "9/2015"}, {"body": "nt need access inside component template already", "d": "9/2015"}, {"body": "want access component though template wanted pass prop inside vue component wanted access prop component code know slide thumbnail refers", "d": "9/2015"}, {"body": "inside component", "d": "9/2015"}, {"body": "oh wow thanks nt realize easy", "d": "9/2015"}, {"body": "way get inside template upd decided problem", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "global keypress events dispatched elements better handle global keypress events separately eg attach listeners component event", "d": "9/2015"}, {"body": "sorry novice example code", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "provide repro using", "d": "9/2015"}, {"body": "sure thing repro created", "d": "9/2015"}, {"body": "spent time nt think due comment issue affected looks like comment nodes output dom vue using vfor far tell issue caused something else ca nt seem resolve", "d": "9/2015"}, {"body": "ok anchor nodes empty textnode normal mode comment node debug mode code hacks around comment nodes also check empty textnodes", "d": "9/2015"}, {"body": "thanks info however nt resolve issue walk reproduction steps updated fiddle read property error still appears note happens dragging two lists like example dragging within list appears ok ideas", "d": "9/2015"}, {"body": "guess meant indeed performs superior fiddle", "d": "9/2015"}, {"body": "yes right thanks correction updated issue correct versions", "d": "9/2015"}, {"body": "actually situation seems complicated fix indeed improve performance still major performance regression using sufficiently complex large array items filtering slicing itemsit fine nearly unusable unfortunately nt time moment dig deeper set new fiddle demonstrates filtering works fine setting value js terribly slow inputting values vmodel input form reverted back", "d": "9/2015"}, {"body": "also situaton user input extremely slow ended implementing custom filter case", "d": "9/2015"}, {"body": "duebbert filtering computed property using array specify specific key filter like", "d": "9/2015"}, {"body": "regression filtering large arrays fixed duebbert would appreciate try", "d": "9/2015"}, {"body": "earliest monday sep evan notifications githubcom wrote regression filtering large arrays fixed duebbert would appreciate try reply email directly view github", "d": "9/2015"}, {"body": "tested seems fixed excellent work many thanks", "d": "9/2015"}, {"body": "still use snakecase declaring props options templates use camelcase refer parsed minus operation", "d": "9/2015"}, {"body": "actually meant something like fact coffee somecomponent vueextend props somevalue props somevalue type string html html somevalue underscore perfectly aligned coffeescript conventions declaring props html markup using totally acceptable difference vue would parse html attribute variable instead based optional config option", "d": "9/2015"}, {"body": "ca nt use html", "d": "9/2015"}, {"body": "right somehow nt thought looks like quite nice workaround issue anyway hand nt aligned html conventions least bit uncommon still think would nice feature vue solution makes happy smile thanks lot", "d": "9/2015"}, {"body": "close", "d": "9/2015"}, {"body": "thought related", "d": "9/2015"}, {"body": "nt fix bug unfortunately", "d": "9/2015"}, {"body": "please describe steps reproduce error", "d": "9/2015"}, {"body": "hi see link developer toolsfirebug open explain app list component working vrepeat ok need add search field searching list item change de vrepeat add letter filtering list remove letter clear search term occurs error thank", "d": "9/2015"}, {"body": "vuevalidator bug please open issue vuevalidator repo instead", "d": "9/2015"}, {"body": "hi sorry mistake thk", "d": "9/2015"}, {"body": "multiple clause longer supported make support array objects probably use one single computed property instead", "d": "9/2015"}, {"body": "bindstyle taking array good save lots additional computed properties achieve thing", "d": "9/2015"}, {"body": "add transition see red tip end section", "d": "9/2015"}, {"body": "specifically dom events tied dom dispatched user interactions therefore handled dom vue events often app internal logic emitted javascript handled javascript mixing two would likely cause confusion want simple write custom directive listen vue events though", "d": "9/2015"}, {"body": "likely due jsdelivr cdn errors version upgrade work fine", "d": "9/2015"}, {"body": "filters currently supported inside prop expressions probably", "d": "9/2015"}, {"body": "ok thx reading receiving", "d": "9/2015"}, {"body": "implemented", "d": "9/2015"}, {"body": "nt declare property wo nt observed two examples listed actually equivalent setting want unless fully understanding use case maybe option simply attaches nonobserved properties instance", "d": "9/2015"}, {"body": "moment first code block actually dealing problem event declare property starting hook hook maybe option statics simply attaches nonobserved properties instance mean statics keyword proposal add statics options vue", "d": "9/2015"}, {"body": "swannknani ah see problem vue private properties ca nt proxy prefixed properties found data maybe relaxed checking property already exists proxying", "d": "9/2015"}, {"body": "ok thanks understand maybe option statics simply attaches nonobserved properties instance ok implement something like order deal cases maybe pointed check property already exists proxying otherwise throw warning something like", "d": "9/2015"}, {"body": "swannknani thought probably bad idea may need add new private properties vue prototype future weird prefixed worked upgrade starts throw warning original use case using vector data binding expect reactive need declare data yes prefix", "d": "9/2015"}, {"body": "original use case using vector data binding expect reactive need declare data yes prefix nt need property reactive stop wrong declare straight component way access", "d": "9/2015"}, {"body": "nt need reactive nt declare still attach plain property vm eg", "d": "9/2015"}, {"body": "btw beneficial mean would documentation tests issue tracker used people without require vue directly would also make vue source code bit easier read since fewer files", "d": "9/2015"}, {"body": "see comment evan reply", "d": "9/2015"}, {"body": "thanks azamatsharapov missed thread guess close one extract", "d": "9/2015"}, {"body": "azamatsharapov thanks point thread", "d": "9/2015"}, {"body": "probably track exactly slow like people otherwise may hard help", "d": "9/2015"}, {"body": "info refers cpu profile cpu profile", "d": "9/2015"}, {"body": "questions lot complex computed properties tried building using production settings", "d": "9/2015"}, {"body": "tried building using production settings computed object", "d": "9/2015"}, {"body": "see understand turned default caching computed properties seems cached default nt want manually set cache false every computed properties like", "d": "9/2015"}, {"body": "add computed properties perf issue go away alpha default", "d": "9/2015"}, {"body": "yes works thanks good work", "d": "9/2015"}, {"body": "guess going back default", "d": "9/2015"}, {"body": "youngsteveo yep memory cost seems trivial compared situations like", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "refactored code removing two complex mindate maxdate set single method method manually called needed ajax calls less magic performant even cache set true", "d": "9/2015"}, {"body": "support atom somehow normal release trying get atom use vue would problem could option use strict mon aug pm evan notifications githubcom wrote closed reply email directly view github", "d": "9/2015"}, {"body": "markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place", "d": "9/2015"}, {"body": "understand pester atom team using strict tue sep evan notifications githubcom wrote markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place reply email directly view github", "d": "9/2015"}, {"body": "markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size nt matter anyway", "d": "9/2015"}, {"body": "size nt matter atom either already gigantic use one copy npm module packages make csp version available npm tue sep evan notifications githubcom wrote markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size doesnt matter anyway reply email directly view github", "d": "9/2015"}, {"body": "markhahn already", "d": "9/2015"}, {"body": "npm name tue sep evan notifications githubcom wrote markhahn already reply email directly view github", "d": "9/2015"}, {"body": "tag", "d": "9/2015"}, {"body": "yes vue csp works ok", "d": "9/2015"}, {"body": "thanks never seen syntax like thought versions tue sep pm notifications githubcom wrote yes vue csp works ok reply email directly view github", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish sure probably way include js file", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish please post issue atomapm thu sep pm notifications githubcom wrote hmm seems vue csp nt work apm publish sure probably way include js file reply email directly view github", "d": "9/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "great first see options think voptions", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "use like", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "actually problem sorry nt see already issue opened", "d": "9/2015"}, {"body": "closing repro available", "d": "9/2015"}, {"body": "reference", "d": "9/2015"}, {"body": "would overridable globally andor per component per computed property", "d": "9/2015"}, {"body": "simplesmiler probably per property global override nt seem like good idea cases time disable caching know want access getter contains nonreactive dependencies eg datenow dom sizes", "d": "9/2015"}, {"body": "package manager bower vs package ready install via npm bower duo leverage favorite eco system", "d": "9/2015"}, {"body": "ok interesting thanks sep pm adam patarino notifications githubcom wrote practice dynamic components passing data children currently something like new spec would like reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case", "d": "9/2015"}, {"body": "number case vif nt work vshow never took trouble find going think vshow cleaner anyway nt change dom structure mon aug pm evan notifications githubcom wrote holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case reply email directly view github", "d": "9/2015"}, {"body": "never faster improve overall performance application removing dom elements nt need right things like modals dropdown menus", "d": "9/2015"}, {"body": "call method binding expression eg", "d": "9/2015"}, {"body": "holic toggling css element display noneblock vs compiling inserting new dom nodes think pretty obvious markhahn ive got edge case vif moment need look complete upgrade something along lines simplesmiler drop menus sure would vshow case unless dynamically generated", "d": "9/2015"}, {"body": "separate prefix use properties prefix becomes literal string also torn losing mustaches makes sense would nice still able bar baz value foo mycomponent string mean value foo always string always oneway binding way works actually means pass string pass number would break bc change changed string templating would consistent difference would subtle confusing would make sense think also taking logical extreme would mean bind variable whose name starts ends value", "d": "9/2015"}, {"body": "nkovacs attributes props different things means dynamically binding plain html attribute specifically data passing components original syntax basically guess something prop normal attribute also considering preserving mustaches normal attribute bindings mustaches inside never happen", "d": "9/2015"}, {"body": "well components basically custom elements nt really see much difference attributes properties would nice able able use mustaches literal strings properties instead side note would nt also make sense already works one way yes need special code handle twoway binding looks logical template reinforces properties attributes different", "d": "9/2015"}, {"body": "nkovacs idealistic view makes sense polymer vue vue components custom elements even real elements attributes properties different bad idea pretend explained proposal purpose prefix know follows always expression nt make sense mustaches inside expressions mustaches string interpolations appear inside plain strings vue templates string templates real html plus binding syntax want make explicit", "d": "9/2015"}, {"body": "sorry made mistake example tooltip property prefix", "d": "9/2015"}, {"body": "considering new binding syntax way bind clicks right sometimes use constructions like useful extending components", "d": "9/2015"}, {"body": "sep thoughts like get feedback one remaining problem new syntax literal directives previously reactive literal directives share prefix ideal see prefixed directive template remember whether literal order read understand value new syntax prefixed directives supposed reactive lose ability create custom literal directives sometimes actually useful example directive used vuerouter time want literal string value following reactivity rule need wrap inside quotes bit awkward thinking start ask really necessary keep prefix directives simply custom attributes example register directive named longer appears instead similar normal attributes also use prefix indicate reactivity core directives would become html indicates attribute values expressions simulate literal directive simply omit prefix suppose rename use follows html downside lose familiar prefix explicitly tells us something directive may also much conceptual shift current api find less disruptive way solve literal directive problem would great", "d": "9/2015"}, {"body": "fullfs maybe something like currently clean", "d": "9/2015"}, {"body": "ok like ability pass arguments functions ca nt imagine something like rejecting prefix actually thing vuerelated attributes", "d": "9/2015"}, {"body": "current v syntax readable mixing bind stuff would throw away useful visual information make less readable wed sep pm andrey notifications githubcom wrote onclick event event ok like ability pass arguments functions ca nt imagine something likeonclick event event sep thoughts rejecting v prefix actually thing vuerelated attributes reply email directly view github", "d": "9/2015"}, {"body": "also like prefix immediately recognize properties something vue process fixing app work see warning props declared child component one use case always trigger warning understood warning correctly page uses dynamic components components tabs utilizes different props end component looking like would advice case also transitions work plain element css transitions fails suspect may transition applied noncomponent nt time verify somewhat offtopic unobservable objects also giving headaches used able store variable display current time update timer every x seconds throws warning walker goes object stumbles date object inside complains seem fail nested component works fine top level simply switching back solves problem deprecation warning displayed", "d": "9/2015"}, {"body": "lot things normal html attributes component props directives expressed way html attributes one way make everything consistent would normal html attributes prefixed props prefixed directives prefixed everything attributes props directives literal default prefix something achieve reactivity downside verbose almost case except instead prefix used mustaches props prefixed directives implicitly reactive without mustaches another thing go using special symbols attribute names prefix suffix literal prefix oneway reactive prefix twoway reactive prefix onetime computed", "d": "9/2015"}, {"body": "alchen components stick certain probably implement single interface read set props", "d": "9/2015"}, {"body": "new approach like approach remove special cases little confusing makes consistent dynamic binding tag attributes special vue related directives would definitely like see prefix allows see related vue sure event syntax seems fine almost equal readability sure nt use much looking familiar without prefix agree accept expression default therefor ca nt without prefix maybe also reduce amount different variations still doubts looking cleanclear mustache way looks nicer performance without mustache better simplesmiler making everything literal default nt seems good way mostly use dynamic reactive binding vm properties instead passing plain string values think code became much bloated special symbols either best way makes code alien stuff first look person familiar enough vue", "d": "9/2015"}, {"body": "agree fullfs von expression based event handlers vprop prop expressions vbind expression based directives attributes v literal directives plain literal attributes nothing vue clean would nice likely impossible trying cram multiple namespaces single existing one element attributes", "d": "9/2015"}, {"body": "davidkhess suggestion looks quite nice", "d": "9/2015"}, {"body": "really appreciate feedback everyone updated proposal directives flow control amp form handling html handlers also used component props used like html literal directives add colon end directive name indicate literal html also eliminates need custom directive declare literal simply provide function used literal directive plain string passed function used dynamically value expression passed instead call changes note reason choosing colon practice nonalphabetic easilytypable chars allowed attributes names colon looks natural used assignment operator many languages", "d": "9/2015"}, {"body": "perfect", "d": "9/2015"}, {"body": "looks pretty good", "d": "9/2015"}, {"body": "looks nice much remember evaluated expected quite natural events ordinary attributes without prefixes always literal expected literal directives evaluated default also expected due prefix behavior could changed advanced usecase need worry really need", "d": "9/2015"}, {"body": "really like dropping prop simpler better still kind like vbind von otherwise think latest really good compromise competing design issues really like hack attribute name nice use xml namespace syntax", "d": "9/2015"}, {"body": "feels unique inverting logic suffix nosuffix rule simple nosuffix literal suffix reactive html update mnemonics write literal value assign variable", "d": "9/2015"}, {"body": "simplesmiler actually looks great makes rule simple get feeling event handlers look like colon hyphen longer necessary feels much cleaner hyphen html click double colon looks bit weird maybe colon used single purpose", "d": "9/2015"}, {"body": "clap", "d": "9/2015"}, {"body": "simplesmiler really looks even simple remember kind long type verbose read", "d": "9/2015"}, {"body": "seems little trouble syntax jade users", "d": "9/2015"}, {"body": "byodkm afaik jade handle fine valid attribute names", "d": "9/2015"}, {"body": "sorry tested mixin element needs care", "d": "9/2015"}, {"body": "think implemented fallback thus making syntax colon shorthand", "d": "9/2015"}, {"body": "simplesmiler nice", "d": "9/2015"}, {"body": "whether directive twoway bound decided directive props decided calling syntax default oneway twoway onetime would make sense apply rules directives directives special enough directive may require twoway syntax via declaration show warning called oneway syntax may performance benefit oneway directive called onetime syntax literal custom directives looks bit wordy explicitly says may modify value explicit oneway onetime may performance benefit well got complicated thought", "d": "9/2015"}, {"body": "agree nosuffix literal suffix reactive v directives nt need nt literal case", "d": "9/2015"}, {"body": "simplesmiler point twoway binding explicit enough imo however probably make sense something like sounds unnecessary best practice avoid mutating alias reference vue also handles special case use alias pointing primitive value negligible performance implications jfliu change core directives reactive still possible create literal custom directives eg vuerouter also important keep rule consistent whenever see know expression plain string", "d": "9/2015"}, {"body": "way plain text templating would still strings mean nice variables attributes plain text use syntax would seem different", "d": "9/2015"}, {"body": "fullfs still considering whether keep mustaches attributes problem slippery slope allow attributes people would think able use anywhere eg ok somewhat solved syntax rule mustaches allowed inside expressions still nt like two ways thing latter bit harder type keeps things consistent", "d": "9/2015"}, {"body": "practice dynamic components passing data children currently something like new spec would like", "d": "9/2015"}, {"body": "adampatarino still flux see comments simplified syntax would look like", "d": "9/2015"}, {"body": "ah yup like better definitely current consistency", "d": "9/2015"}, {"body": "see well synstax nice clear ps way okay actually mean sometimes nice dynamic", "d": "9/2015"}, {"body": "fair enough directives able replace many cases radio buttons textarea also files work either yet textarea would work lack value attribute radio buttons wo nt work bind guess possible hijack semantics attribute need anyway feels wrong say better stick warn binding another option would make special case directive radio buttons textarea", "d": "9/2015"}, {"body": "wow unfortunately seems ie handle attributes end colon fine stupid", "d": "9/2015"}, {"body": "unfortunate specifically colon angular deal angular templates full special symbols", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "simplesmiler afaik longer directly write real html templates angular everything parsed engine materialized dom specifically ie discards attributes ends colon thinks namespace followed empty string attribute name empty also weird situation attribute names like parsed browser try call name results error", "d": "9/2015"}, {"body": "guess revert syntax looks verbose compared ugghh hate ie much", "d": "9/2015"}, {"body": "oh actually ie handle attribute names start colon looks weird html also ie treats invalid leading char", "d": "9/2015"}, {"body": "feels lispy maybe edit hand probably worth", "d": "9/2015"}, {"body": "simplesmiler much different issue makes core directives verbose html", "d": "9/2015"}, {"body": "following bad people hate drop technical reason keep prefix maybe missed", "d": "9/2015"}, {"body": "moment verbose less expressive", "d": "9/2015"}, {"body": "would argue prefix easier spot rather easier miss suffix see following examples", "d": "9/2015"}, {"body": "arguments prefixing vuerelated properties give vue nice namespace work within avoids clashing frameworks eg one set could reactive another could literal", "d": "9/2015"}, {"body": "holic reactive indicator work props nt make sense prefixes", "d": "9/2015"}, {"body": "maybe edit nt look beautiful though", "d": "9/2015"}, {"body": "simplesmiler considered invalid spec unfortunately", "d": "9/2015"}, {"body": "since always treated expressions syntax could look something like trouble deal literal vs reactive always reactive prefix prefix treated regular directiveprop directives need prefix denote compiled differently regular directives", "d": "9/2015"}, {"body": "following option nt like want hear opinion need support ie run templates automatic tool turn growing", "d": "9/2015"}, {"body": "holic personally fine dropping prefix altogether instead think directives custom attributes instead prefixed attributes conceptual shift though people seem care lot knowing something vue specific html colon prefix read lispy think actually cool", "d": "9/2015"}, {"body": "use without prefix native attribute personally nt like dropping prefixes directives start clash normal attributes component properties regarding prefixes fine use unprefixed versions custom elements would work would still required least shenanigans props may clash normal attributes", "d": "9/2015"}, {"body": "rewrote todomvc colon prefix syntax holic pointed really easier spot", "d": "9/2015"}, {"body": "maybe overthinking get rid concept literal directives prefixes always means expressions colon prefix essentially syntax sugar directives like simply need quotes seems like okay tradeoff considering cost differentiating literal reactive html", "d": "9/2015"}, {"body": "like simple clear custom directives prefix remain", "d": "9/2015"}, {"body": "finico prefix remain custom directives", "d": "9/2015"}, {"body": "directives like simply need quotes ugh directives reactive literal", "d": "9/2015"}, {"body": "josephsilber", "d": "9/2015"}, {"body": "yeah could work guess ie ok quacks colon", "d": "9/2015"}, {"body": "yep found implemented colon syntax sat sep pm joseph silber notifications githubcom wrote yeah could work guess ie ok quacks colon reply email directly view github", "d": "9/2015"}, {"body": "vuejs user may add two cents much prefer expressive syntax instead messy yes takes milisecond longer write reads well looks good far important mind also liked much vue properties prefixed really important visual clue thrown window easily actually prefer see something like html", "d": "9/2015"}, {"body": "think better since used separating words property names coud make shorthand syntax developer choose one use", "d": "9/2015"}, {"body": "maybe suffix could optional shortened think consistent would provided defaults", "d": "9/2015"}, {"body": "acasar think prefix overrated also pretty obvious spot vue already uses custom elements custom attributes directive params nt look vue specific vocabulary library get used another reason dropping semantically different directives event handling different data binding means make whatever attribute follows reactive makes applicable normal attributes component props using props feels semantically wrong finally shortening creates confusion", "d": "9/2015"}, {"body": "latest proposal updated original post without literal directive special case yet", "d": "9/2015"}, {"body": "sure like fact colon used two different contexts start attribute name indicates reactivity middle attribute name separates name filter might little confusing", "d": "9/2015"}, {"body": "josephsilber also thought kind confuse colon syntax optional shorthand could fine", "d": "9/2015"}, {"body": "latest proposal great agree everything love shorthand syntax people would like everything v prefix cmon directives", "d": "9/2015"}, {"body": "bemoaning lack directive though", "d": "9/2015"}, {"body": "josephsilber still renamed", "d": "9/2015"}, {"body": "something like hold hats folks late little loopy html leave hyphens wordseparators leave colons separating vue stuff stuff attribute names doublecolon binding switch second colon denote twowayonetime bindings valid attribute name according attention grabbing", "d": "9/2015"}, {"body": "sethlopezme looks confusing tbh especially directives seed vue colonel smile", "d": "9/2015"}, {"body": "hmm looking latest proposal would like point would many different styles nt bindattr bind attr makes sense optionally drop bind happened v bind styles binding", "d": "9/2015"}, {"body": "yjeroen colon shorthand optional nt use binding attributes consist alphanumeric chars hyphens consistent nt make sense together less confusing use colon one purpose using first char literal literal already means take literal string bindings one special char followed expression api since different syntaxes different types bindings directives event handlers attributeprop bindings prefixing everything prefix nt make complexity go away want explicitness previously three types mixed umbrella directives microsyntax using arguments multiple clauses giving event handlers attribute bindings syntax makes directives much simpler time makes binding types explicit realize binding types lowered number core directives complete gotten rid directive arguments multiple clauses", "d": "9/2015"}, {"body": "would mind point something directives syntax lately facing issue vmodel filters got components representing fields abstract form fields could used multiple times template different data templates contains example inputs vmodel filter something like issue filter nice fields filters form config represented simple js object question way make filter name variable could controlled components data hope get feature ps felt like could related deciding directives syntax", "d": "9/2015"}, {"body": "fullfs nvm nt notice yeah currently impossible dynamically apply filters sounds like could solved designing components differently would need details though", "d": "9/2015"}, {"body": "still renamed different directives", "d": "9/2015"}, {"body": "josephsilber previous literal directives attributes literal default able", "d": "9/2015"}, {"body": "info regarding stylesclasses missing latest spec info", "d": "9/2015"}, {"body": "matmoo thanks added", "d": "9/2015"}, {"body": "think vue directive start v attributes nt prefix may mistaken attributes libs specially people begininng vue recently", "d": "9/2015"}, {"body": "renanvaz happening current proposal directives start v event handlers attribute bindings directives", "d": "9/2015"}, {"body": "renanvaz agree vue directives start important visual cue helps namespace vue without prefix feels like vue polluting global namespace", "d": "9/2015"}, {"body": "thelinuxlich believe attributes vue resources part lib prefix something essential identify resources part package regardless function see attribute begin v know know look", "d": "9/2015"}, {"body": "zfedoran sense global namespace false assumption likely never using two dombased databinding solutions together already using custom elements everywhere polymer aurelia amp angular use tons nonprefixed custom attributes well technically nt really matter mostly mindset issue use vue html managed vue anything native html attribute likely vuespecific frameworks dombased templating plus like long list three prefixes really hard remember pointed thelinuxlich explained comment event handlers attribute bindings different semantics directives", "d": "9/2015"}, {"body": "like see counter argument people developing huge single page apps anything helps code sanity welcome", "d": "9/2015"}, {"body": "thelinuxlich matters even less huge spas building spa framework means fully adopt framework idioms tolerance api intrusiveness higher think people advocating prefix mostly use vue enhancement existing html thus keeping vue easily spottable important understandable use case vue believe new syntax worthwhile tradeoff", "d": "9/2015"}, {"body": "dare repeat point prefixes without prefixes custom directives may clash component properties", "d": "9/2015"}, {"body": "simplesmiler keeping directives people arguing everything vue related", "d": "9/2015"}, {"body": "evan got question gone deal related shenanigans", "d": "9/2015"}, {"body": "suggestion make prefixes configurable us would really prefer vue attributes easily spottable change von bind vbind everyone happy", "d": "9/2015"}, {"body": "comments based development experience big small systems concern growth vue community startups focus one product focus specific tools believe detail use influence lot decision really would write cleanest syntax web producrs agencies large flow projects variety used libraries bigger detail makes much easier identify part package example someone trying maintain small project made vue undocumented resources help identify attributes part library used also seen cases systems part legacyold one area system reformulated used different lib case could also problems id package", "d": "9/2015"}, {"body": "renanvaz sure appreciate comment anyone picks project would still need learn vue btw need capitalize every character first prefix nt magically tell vue works learned know vuespeicific nt really make much difference practice", "d": "9/2015"}, {"body": "simplesmiler good question open new issue", "d": "9/2015"}, {"body": "people willing make much costlier sacrifices adopting framework like react feel like counterarguments lack substance kind rant disappears year p", "d": "9/2015"}, {"body": "think newbie html vue", "d": "9/2015"}, {"body": "rather learn upfront v bind knowing exactly feature get confused middle learning curve api seems inconsistent", "d": "9/2015"}, {"body": "honest like keep prefix useful seeing code tells like functionattribute something maybe something else prefix like see something special vuerelated attributes colon good one example going used literal directives right looks crazy also feeling first meeting directives options like wtf nt even right sometimes problem ca nt spot attribute ca nt detect something functional could take minutes understand going", "d": "9/2015"}, {"body": "agree fullfs new syntax learning curve much steeper remember almost everything prefixed vue used custom prefixes quite lot working wordpress environment control possible conflicts third party things worked without conflicts native html attributes clever modifiers minimalistic clear tons new syntax remember reason code clarity nt fix broken", "d": "9/2015"}, {"body": "broken horribly whole point way know template whether attribute value literal expression becomes confusing fast angular made mistake fixing angular aurelia also special syntax differentiate two behooves us remake mistakes others already rectified", "d": "9/2015"}, {"body": "josephsilber point still angular directiveswhatever something special syntax variables directives bindings ca nt see functional attributes looking like common attribute still opinion angular syntax mess glad see vuejs syntax nice clear compared angular", "d": "9/2015"}, {"body": "people complaining readability nt easier read sure super easy read anyone basic english knowledge think also saves time see everything may find looking api docs often speaks", "d": "9/2015"}, {"body": "azamatsharapov well nt bad worries talking readability important thing teammates chosen vuejs project simplicity short time required starting write really awesome work directive easy understand remember ps synonyms first used function bind events using", "d": "9/2015"}, {"body": "ps bind synonyms first used function bind events using sounds like ing much think evan mentioned somewhere would like remove thing better use said kind agree used times written projects vue already team use also prop like", "d": "9/2015"}, {"body": "like disagree terms using relied heavily two projects vuejs far perfect replacement messy classhooks pollute class namespaces cleaned dom initialisation gets used supposed used js automated really really great easy use", "d": "9/2015"}, {"body": "azamatsharapov places used project reliable", "d": "9/2015"}, {"body": "hmm interesting nt select elements js code much css yeah people code different", "d": "9/2015"}, {"body": "like thank everyone contributed discussion far think still issues disagree let recap stay would best syntax denote literal directive visually obvious without verbose awkward still question happy syntax either unprefixed special attributes agree less obvious vuespecific directives prefix nt make sense also need distinguish several types special attributes component props easily identifiable appear custom element components using component know props expects directive params eg attributes appear alongside directive uses similar components using directive know params accepts works multiple directives still appear alongside either component flowcontrol directive appear alongside components special case problematic people plain attribute linked directive component makes obvious vuespecific scanning template possible solutions find better syntax literal directives make literal directive moment feels bit awkward find different obvious syntax case accept special case one single attribute like find syntax clean explicit impossible bad idea try please everyone please make sure comments backed technical reasoning rather personal preference", "d": "9/2015"}, {"body": "thoughts expression bindings literal html", "d": "9/2015"}, {"body": "latest proposal btw extend syntax binding types sake consistency html also filters", "d": "9/2015"}, {"body": "fan far natural read fact current syntax works well ok maybe tweak another complete change", "d": "9/2015"}, {"body": "matmoo another option drop colon shorthand use reactive bindings literal bindings colon looks different plain attributes fact benefits stands providing visual clue lot people want always indicates reactivity", "d": "9/2015"}, {"body": "karevn normal attributes html primitive exception set strings dictionary maybe svg attributes like ordered list points commands", "d": "9/2015"}, {"body": "simplesmiler props future attributes may", "d": "9/2015"}, {"body": "latest proposal literal component property stands different html also since shorthand shorthand literal leading dash html think technically valid attribute", "d": "9/2015"}, {"body": "karevn pass expression prop attributes like basically special cases among native attributes attributes plain strings expect nt even make sense also future attributes may demand different ways handle value eg quite complex microsyntax impossible generalize mapping objectarrays final string unknown future attributes", "d": "9/2015"}, {"body": "another option drop colon shorthand use v reactive bindings v v literal bindings looks really consistent v clearly shows vue related things case matter habit already used old syntax new one looks weird sometimes", "d": "9/2015"}, {"body": "actually possible result binding expression passed attributespecific function future", "d": "9/2015"}, {"body": "variations comparison use dot instead colon indicate reactivity benefits looks cleaner shorthand actually reads quite naturally componentprop something html", "d": "9/2015"}, {"body": "karevn write function already right", "d": "9/2015"}, {"body": "would leading work ie", "d": "9/2015"}, {"body": "simplesmiler quite funny ie parse fine ca nt call leading luckily latter avoided work ie ie drops attributes ending even parsing phase", "d": "9/2015"}, {"body": "ca nt wait reverse binding filters support notation look good probably people confuse class definitions", "d": "9/2015"}, {"body": "karevn dot denotes class css nt see confusion comes", "d": "9/2015"}, {"body": "stylistically leading colon looks much better leading dot", "d": "9/2015"}, {"body": "css background may think method call outstanding coder mean others nt make learning curve steeper", "d": "9/2015"}, {"body": "karevn unfamiliar syntax steep learning curve learning curve api handles inherent complexity dot colon nt make difference complex things", "d": "9/2015"}, {"body": "favor syntax also josephsilber said reads much better leading syntax though thought hyphenated attribute w filter looked weird could perhaps something like also prop syntax way put attribute name always felt odd part value attribute perhaps something like edit actually nevermind last part nt valid apparently", "d": "9/2015"}, {"body": "dot colon notations look good also satisfied elref got back actually everything wanted also came idea dots colons could used onewaytwoway notations oneway one dot twoway two dots", "d": "9/2015"}, {"body": "really like discussion going everyone think best readable styles syntaxes looks quite messy use everywhere imho either", "d": "9/2015"}, {"body": "yjeroen yeah seems using literal introduces least amount change current html", "d": "9/2015"}, {"body": "btw new syntax think makes sense deprecate global config", "d": "9/2015"}, {"body": "testing internal changes actually expand characters usable attribute names still feel different prefixes reactiveliteral directives look stylistically weird consistently denoting directive whether literal looks weird using chars verbose really something special really directives leverage special chars like html finally move binding type indicator component prop value", "d": "9/2015"}, {"body": "last change binding type indicator nice rest ugly dollar sign directive name looks like", "d": "9/2015"}, {"body": "sorry dislike everything last comment excluding last one disappointed happen think looks waaay better ugh", "d": "9/2015"}, {"body": "definitely favor binding type indicators new syntax still sure though looks even odd using denote literal", "d": "9/2015"}, {"body": "note really sorta like thinking loud form said everyone different stylistic taste comments technically bad idea welcome nt like ughh really constructive", "d": "9/2015"}, {"body": "nt really much discuss technically besides ie quirks anything goes thought stylistic preferences", "d": "9/2015"}, {"body": "syntax consistency semantic correctness readability somewhat subjective everything stylistic preference wed sep pm joseph silber notifications githubcom wrote nt really much discuss technically besides ie quirks anything goes thought stylistic preferences reply email directly view github", "d": "9/2015"}, {"body": "going explicitness road like emberjs example mut keyword", "d": "9/2015"}, {"body": "thelinuxlich good point aurelia also uses syntax template going quite verbose think special char less tradeoff easier type succinct templates vs able understand going without reading docs although value latter quickly diminishes become familiar framework assuming keep binding indicators think idea indicating literal directive also adding special symbol makes sense keeps idea directives start consistent consistent prop binding type indicators special char use largely stylistic preference list everything already taken html super explicit", "d": "9/2015"}, {"body": "support syntax feel like much easier type also nt look weird might used correct", "d": "9/2015"}, {"body": "kinda interesting go along special syntax html childmsg ugly maybe maps surprisingly well javascript", "d": "9/2015"}, {"body": "nt think ugly like", "d": "9/2015"}, {"body": "think syntax used often intuitiveness ease typing also quite important easier type requires shift key", "d": "9/2015"}, {"body": "oh easy type define objects like instead hard type also requires shift key need type often", "d": "9/2015"}, {"body": "important make code readable otherwise understand wrote year ago", "d": "9/2015"}, {"body": "oevgeny come requires key must use special keyboard", "d": "9/2015"}, {"body": "ok got agree karevn code readability utmost importance", "d": "9/2015"}, {"body": "greennyreborn mistake would anything else ok typing much vue karevn expressed idea better", "d": "9/2015"}, {"body": "agree code readability important nt forget html standard syntax javascript code html template", "d": "9/2015"}, {"body": "way really step make things intuitive imho user need remember refel need know define component access via inside component found confused accessing refel via wrong shortcut couple times syntax make clear", "d": "9/2015"}, {"body": "ijackua alternative syntax great", "d": "9/2015"}, {"body": "renanvaz stable specification html templates official one mess mozilla google apple nt settle common ground yet anything goes", "d": "9/2015"}, {"body": "also like syntax looks less obvious also let think comment", "d": "9/2015"}, {"body": "renanvaz restrictions character sets attribute names largely legacy sgmlxml longer make much sense html context chars valid serialized html ie parsed browser restrictions dom methods standards body working relax restrictions dom methods well really fine ref see twitter thread", "d": "9/2015"}, {"body": "really love sytax proposal name name name name happy concernig directives bindings prefer colon syntax", "d": "9/2015"}, {"body": "try value expression except maybe change better", "d": "9/2015"}, {"body": "one thing syntax style classes often contain dashes pretty tiresome write code like html also really easy forget single quote somewhere making optional like html match json format seems pretty much intuitive", "d": "9/2015"}, {"body": "karevn use camelcase", "d": "9/2015"}, {"body": "booyah", "d": "9/2015"}, {"body": "opinion overhead unified clean syntax component html overhead etc unified like syntax html etc vattr enough cases could add specific directives like smile vue api could concise expressive like gulp api great relax vue relaxed", "d": "9/2015"}, {"body": "overall big fan react design philosophy one issue react jsx render function often involves lot logic ends looking like piece program fact rather visual representation interface developers bonus designerdeveloper hybrids like template makes much easier think visually design css jsx mixed javascript logic breaks visual model need map code design contrast vuejs pays cost lightweight dsl directives visually scannable template logic encapsulated directives filters believe v prefix overrated makes easy visually scan code vue specific attributes kind visual representation interface vs piece program stated one differences vue react one advantages vue imo goes well libraries dropping v prefix makes template kind piece program work libraries besides nt see downside keeping vprefix", "d": "9/2015"}, {"body": "nervgh missing points binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like also overhead imo worse upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use also overhead amp explained nt see proposal expressive concise", "d": "9/2015"}, {"body": "nervgh sorry going tangent gulp simple thing well much complexity complexity showed plugins modules even gulp suffers simplicity things like caching arbitrary file lookup transformations failure management play well streams", "d": "9/2015"}, {"body": "dennisver really correct analogy difference jsx vs templates completely different single prefix vs prefixes dropping prefix simply breaking prefixes explicitly defined functionality semantics realized simply calling everything directives nt hide inherent complexity different types data bindings people worry makes harder work libraries without giving real examples library specific would break used vue honestly sounds like fud see real example new syntax breaks compatibility another lib", "d": "9/2015"}, {"body": "v prefix stands vue hold attributes related vue framework used directives still use prefix v directive letter v nt mean directive give feeling used vue related attributes think everyone gives vue try first time feeling whether correct nt worry libraries break worry lot harder scan html vue related attributes let take bootstrap example button trigger modal vclass vbindclass bindclass attribute nt tell vue related whereas vclass", "d": "9/2015"}, {"body": "except know anything data nowadays javascript framework dsl", "d": "9/2015"}, {"body": "anything data nowadays javascript framework dsl technically anything data valid html everyone ignores rules though sat sep pm alisson cavalcante agiani lt notifications githubcom wrote except know anything data nowadays javascript framework dsl reply email directly view github", "d": "9/2015"}, {"body": "dennisver people may think vue related always meant directives day register custom directive gets prefix point new api feels different current impression new api make sense also nt make much difference putting multiple attributes line honest equally bad personally multiple attributes really worry making look visually different use colon shorthand", "d": "9/2015"}, {"body": "installed rewrited directive new syntax looks confusing binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like vhref vsrc vstyle also overhead imo worse bind upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use vattr also overhead right new syntax according proposal moment already directives different hidden behaviour think directive component may behavior naturally ps anyway thanks vue", "d": "9/2015"}, {"body": "nervgh honestly nt understand confusing colon means dynamic prop star means one time every special symbol clear purpose ambiguity comparison think confusing something string expression way tell would component mutate parent state way tell nt know props twoway way answer find implementation child component compare template way way bigger overhead props directives", "d": "9/2015"}, {"body": "big thank everyone participated conversation far feedback appreciated thread gone bit longer expected like reset conversation based current syntax let continue discussion", "d": "9/2015"}, {"body": "changing literaldynamictwowayonetime towards vue javascript instead template taking example vue component template wrote head sure right way sorry nt fun mind exercise", "d": "9/2015"}, {"body": "implement component hierarchy two components assetcomponent", "d": "9/2015"}, {"body": "indus explicitly depend assetcomponent components", "d": "9/2015"}, {"body": "sorry revive old thread couple helper filters example lets shorthand found handy drop anywhere debugging mean register filters every component wish use alternative", "d": "9/2015"}, {"body": "jasonvarga register globally", "d": "9/2015"}, {"body": "root vue instance gives deprecation warnings use inside component", "d": "9/2015"}, {"body": "vuefilter pre", "d": "9/2015"}, {"body": "oh right wonderful thanks", "d": "9/2015"}, {"body": "activate hook called using", "d": "9/2015"}, {"body": "alexandrebonaventure used dynamic component switching", "d": "9/2015"}, {"body": "guess way right call resolve promise instance loading remote data also wondering way reference child vm refs using", "d": "9/2015"}, {"body": "alexandrebonaventure yes since using lowerlevel imperative api responsible managing timing fo refs using latest alphabeta pass private option creating child", "d": "9/2015"}, {"body": "thanks asking questions using vue wisiwyg software called hype need mount child components separate wrappers way found maybe helpful know usage development", "d": "9/2015"}, {"body": "alexandrebonaventure cool looks really interesting", "d": "9/2015"}, {"body": "thanks interest link latest project using vue hype workflow gives us ability prototype design quickly keeping stable structure logic javascript vue", "d": "9/2015"}, {"body": "note fix reverted reason users care computed properties getters called definition computed property getter pure side effects behavior demonstrated vue internal async update queue works vue relies async update queue ensure correct behavior actually matters example amp", "d": "9/2015"}, {"body": "although top two examples result new data still performance problem modified new result old data wait old data wait unnecessary calculation new data wait spend time sync true reduce performance problem caused computed properties reevaluated case javascript vueconfigdebug true vue new vue el demo data content old data methods readcontent function var self", "d": "9/2015"}, {"body": "performance problem actually slows app simple computed properties fast evaluate extra calls ok tradeoff ensure correctness system real case behavior cause noticeable performance issue consider fixing", "d": "9/2015"}, {"body": "able", "d": "9/2015"}, {"body": "also problem line vue chrome client browser version works fine chrome", "d": "9/2015"}, {"body": "configurable separately implemented branch", "d": "9/2015"}, {"body": "knownasilya hi found solution attaching vue infowindow regards", "d": "9/2015"}, {"body": "pavelpolyakov see comment", "d": "9/2015"}, {"body": "knownasilya thought found another solution well anyhow think looks better", "d": "9/2015"}, {"body": "update released vuesuper ran case well written pretty simple plugin provides super property access parent methods sure pitfalls would make sense formalize vue best left plugin javascript vuesuperjs export default function install vue objectdefineproperties vueprototype super get function const methods thisconstructorsuperoptionsmethods windowvue windowvueuse install", "d": "9/2015"}, {"body": "code trying use int filter hotelstarscode consolelog val outputs typeof object try parseint values get string value hotelstarscode defined example returns nan check return zero int vrepeat get error even return int problem vuejs nt int filter vrepeat ca nt get value solve help please sorry english", "d": "9/2015"}, {"body": "lensgolda returning array filter", "d": "9/2015"}, {"body": "oh thanks", "d": "9/2015"}, {"body": "vif multiple expressions seem supported tried worked expected", "d": "9/2015"}]