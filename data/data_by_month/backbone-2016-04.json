[{"title": "access play download video dailymotion android", "body": "want show list video daily motion android app also show download button download specific video", "num": "4023", "d": "4/2016"}, {"title": "latest progress backbone", "body": "latest progress backbone", "num": "4022", "d": "4/2016"}, {"title": "reception spi using processing language raspberrypi", "body": "trying transmit receive data spi using processing language raspberrypi able transfer messages able find correct commands execute reception also able find documentation example code available site please help issue", "num": "4021", "d": "4/2016"}, {"title": "eslint stuck version", "body": "eslint still version would like upgrade also forgive selfpromotion written eslint plugin platinumazureeslintpluginqunit help detect potentially bad patterns qunit tests interested write pull request showing could work obviously minor things compared enduserfacing bugfixes enhancements features always useful able enforce code quality automatically less time needs invested quality per pull request happy write prs one needed let know", "num": "4017", "d": "4/2016"}, {"title": "collectionprototypechain nt proxy requests modelattributes", "body": "far tell looks like underscore methods attached collections proxied call act models object great lets us things like unfortunately seems like breaks call obviously example nt useful want one operation collection ca nt use shortcuts things like etc need use iterator functions much less clean", "num": "4016", "d": "4/2016"}, {"title": "colletcionget cid undefined", "body": "model class muppet item var muppetmodel backbonemodelextend defaults id null name null occupation null collection class muppets list endpoint var muppetcollection backbonecollectionextend model muppetmodel url muppets parse function data return datamuppets view class displaying muppet list item var muppetslistitemview backboneviewextend tagname li classname muppet template template muppetitemtmpl html initialize function thislistento thismodel destroy thisremove thislistento thismodel sync change thisrender render function var html thistemplate thismodeltojson elhtml html return events click remove onremove onremove function thismodeldestroy success function model response view class rendering list muppets var muppetslistview backboneviewextend el muppetsapp tempcid initialize function thislistento thiscollection sync thisrender render function var list ulmuppetslist empty thiscollectioneach function model var item new muppetslistitemview model model listappend itemrender el return events click create oncreate oncreate function var name muppetname var job muppetjob nameval var kermit new muppetmodel kermitset name nameval occupation jobval thistempcidkermitcid thiscollectioncreate kermit wait true consolelog get cid model thistempcid consolelog thiscollection thiscollectionmodels function consolelog ocid consolelog thiscollectionget thistempcid nameval jobval create new list collection list view fetch list data var muppetslist new muppetcollection var muppetsview new muppetslistview collection muppetslist muppetslistfetch chomre debbuger get cid model child models array byid object listenid events object modes array child id null cid proto backbonemodel child cid id null proto backbonemodel child cid id null proto backbonemodel code use print thiscollectionmodelsbut write nt print thiscollectionmodels function consolelog ocid beasuce probelm thiscollectionget undefinebut thiscollectionmodels alread find cid", "num": "4015", "d": "4/2016"}, {"title": "revert change issue regarding options nested change events", "body": "recently stumbled change introduced version caused issue version could nested changes options without regarding listeners change event could use options concrete change attribute callbacks nt get options callbacks change event causes issue since version options hash side effects options hash final change event depends last call set method done listenercallback model view never sure options hash change callback replaced one inner change notice problem sure cases problem really think second case causes much new problems solves really implemented side effect accidentally destroy options hash another listener may set different module application hurts principle encapsulation modularization example happens currently javascript file thislistento anymodel change function model options options options hash always empty optionsfooflag flag never exist dosomething file b thislistento anymodel change anattribute function model newval modelset anotherattribute passing options gt accidentally overwrites hash change event file c anymodelset anattribute fooflag true want file b setting another attribute regard listener file example break therefor must check listeners using options always pass around options hash inner changes even add overwrite flags final options hash change event use options change attribute event example may think kind disabling flag javascript file thislistento anymodel change function model options options options always contains disablesomething flag optionsdisablesomething never true expected true default options dosomething file b thislistento anymodel change anattribute function model newval modelset anotherattribute disablesomething true nt want call dosomething second time use silent flag file c anymodelset anattribute kind proposal opinion current behavior obvious default case firstold one version intentionally whatever reason want options hash inner change final change event two possibilities kind new flag set method force using inner hash options using reference nature options hash set additional flags options hash inside change callback simultaneously set original hash passed reference javascript file thislistento anymodel change function model options options options hash contains fooflag myownoption optionsfooflag dosomething file b thislistento anymodel change anattribute function model newval options options options hash contains fooflag optionsmyownoption modelset anotherattribute options file c anymodelset anattribute fooflag true side note finally really want stress explicitly mention changes changelog look changelog version point performance finetuning backbone events anything surely change causing different behavior backbone models team search hours find problem caused change till found backbone something different", "num": "4014", "d": "4/2016"}, {"title": "backbone old underscore dependency", "body": "installing backbone using npm installs underscore dependency instead latest reason getting error trying define view example function", "num": "4013", "d": "4/2016"}, {"title": "use new array model properties", "body": "want use new array model properties different model get single array like", "num": "4010", "d": "4/2016"}, {"title": "backbone security", "body": "hi offering write new module security module based backbone framework separated beginning enough provide realization security main features module easy configure overwrite based class include routers models collection witch use provider provider created manage token session expired time token succeed authorization provider adding authorization header values witch got authorization course provider provide logout function think idea", "num": "4005", "d": "4/2016"}, {"title": "hash change causes page refreshes special cases ie", "body": "bug caused bug ie versions since backbone router supports ie versions affected feel like bug covered backbone library see fix turns simple however nt time test effects across browsers", "num": "4003", "d": "4/2016"}, {"body": "check milestones", "d": "4/2016"}, {"body": "nt really use milestones part take look open issues see questions particular directed gitter channel mailing list stackoverflow", "d": "4/2016"}, {"body": "thank answer", "d": "4/2016"}, {"body": "sure posted right project", "d": "4/2016"}, {"body": "yes sure idea works", "d": "4/2016"}, {"body": "come conclusion right project post see link nt anything raspberry pi receive surprisingly large number open issues new users people looking projects please tell us", "d": "4/2016"}, {"body": "spam bot kind git profile joined apr maybe someone use aka github bots get answer asap randomly use github public api find projects huge amount stars co smile", "d": "4/2016"}, {"body": "huh really interesting like spammy google results world", "d": "4/2016"}, {"body": "yep people ca nt start spent time learn sometimes think write bots", "d": "4/2016"}, {"body": "nt think spam bot original poster ended posting question repository seems ontopic", "d": "4/2016"}, {"body": "go would great see pull separate pulls please thanks", "d": "4/2016"}, {"body": "want pulls attached issue slash issues since closed issue used writing commits fixclose issues backbone operates differently totally fine making sure", "d": "4/2016"}, {"body": "tend use open issues way saying issue resolution undecided welcome comment community otherwise even open issues stuck sort limbo state case next step known great open pull request concrete changes actually comment", "d": "4/2016"}, {"body": "ref issue write pr issue ref apr pm adam krebs notifications githubcom wrote tend use open issues way saying issue resolution undecided welcome comment community otherwise wed even open issues stuck sort limbo state case next step known great open pull request concrete changes actually comment receiving authored thread reply email directly view github", "d": "4/2016"}, {"body": "yup ref issue completeness sake", "d": "4/2016"}, {"body": "got prs next days thanks help", "d": "4/2016"}, {"body": "awesome thanks", "d": "4/2016"}, {"body": "thanks platinumazure", "d": "4/2016"}, {"body": "special cased unfortunate side effect way chaining works underscore backbone better solution", "d": "4/2016"}, {"body": "seems could specialcased chain object chained methods could detect next call longer returning backbone models basically become normal underscore chain context object point course could get ugly factoring methods take method refs eg invoke could honestly go either way one way could handled augment underscore chain object method something like basically goes back collectionaware chain mode method would regarded use risk example assume collection contains models address attribute another model honestly looking pretty ugly even wanted throw hopes inspire discussion ultimately workable solution", "d": "4/2016"}, {"body": "suspect viable way without duplicating logic handles whether provide model attributes chain default", "d": "4/2016"}, {"body": "nt able come clean solution really workaround far always follow either lets filtermanipulate objects like unfortunately lose instances process method benefit working backbonemutator properties method keeps references original objects maybe good bad thing since could modify perhaps one option would track methods called chain simply filtered collection eg etc case could cleanup operation happens output chain looking models whose attributes matched output swaping attribute objects model instances alternatively models id could match way would probably much faster since index would basically look like automatically calling gets trickier methods rearrange collection eg partition etc maybe methods cause cleanup happen immediately", "d": "4/2016"}, {"body": "accepts", "d": "4/2016"}, {"body": "bbrui provide jsfiddle think problem nt set model collection creation think help erosb accepts id cid model param thanks", "d": "4/2016"}, {"body": "test bbrui say run rightcode follow still problem issue send var listnew muppetcollection var entitynew muppetmodel id name test occupation listadd entity consolelog consolelog listget entitycid id", "d": "4/2016"}, {"body": "find thiscollectioncreate kermit wait false changethiscollectioncreate kermit wait false model add collection time nt wait server reponse server reponse add model collections", "d": "4/2016"}, {"body": "bbrui kind questions please use stackoverflow gitter channel thanks", "d": "4/2016"}, {"body": "nt possible likely problem local npm modules try full reinstall", "d": "4/2016"}, {"body": "per defaults hash function also nt forum try next time grin", "d": "4/2016"}, {"body": "thanks rafde", "d": "4/2016"}, {"body": "cool idea go ahead backbone plugins always welcome", "d": "4/2016"}, {"body": "yup sounds like great plugin looking forward see", "d": "4/2016"}, {"body": "circumstances would occur", "d": "4/2016"}, {"body": "someone define hehe maybe think", "d": "4/2016"}, {"body": "collectioncomparator sort link line still points dead link mdn docs", "d": "4/2016"}, {"body": "feel free open pull request merge thanks", "d": "4/2016"}, {"body": "fixed version thanks", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "updates", "d": "4/2016"}, {"body": "nt plans finish others want pick left go otherwise closed", "d": "4/2016"}, {"body": "love new backbone might give try though u leave", "d": "4/2016"}, {"body": "yup", "d": "4/2016"}, {"body": "well thing class properties still stage ecmascript proposal stage system idea since seems like gim terms user gets course idea sort things might break hood syntactically terms reference implementations", "d": "4/2016"}, {"body": "trying get solution well would like routes look like opposed cant figure", "d": "4/2016"}, {"body": "braddunbar working backbone using change url submitting search form case could something like max m\u00fcller encode maxm bcller within backbones navigate function searchquery beeing decoded back max m\u00fcller returned like end url gets changed myrootcom qmax m\u00fcller valid url instead like myrootcom qmaxm bcller missing something standard behavior way achieve beside modifying backbones core", "d": "4/2016"}, {"body": "problem think control sending data via patch method example server accepts data namespaced object need able use namespace sending data server time need original nonnamespaced data store local model", "d": "4/2016"}, {"body": "reset true option modelfetch", "d": "4/2016"}]