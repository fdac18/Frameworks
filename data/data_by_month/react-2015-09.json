[{"title": "warn input value null", "body": "passing indicates user tried specify value eg database nt notice value null seems like warning normally treat null undefined case passing null indicates error therefore discouraged user decide want uncontrolled component case pass undefined want empty controlled component case pass empty string spicyj said would fine warning andor treating null empty string making errorwarning advantage easy upgrade path fix warning without us introducing subtle changes behavior break people apps", "num": "5013", "d": "9/2015"}, {"title": "make reacttransitionchildmapping flattenchildren public api", "body": "created pr issue able use long time using fork course relies looks like kind approach longer possible deeply intertwined lot react internals possible use internals people could create innovative new components example long wanted create variation automatically staggers child entry even children added time classic staggered animation effect would quite useful", "num": "5012", "d": "9/2015"}, {"title": "still seeing original setstate warning mounted component missing component name", "body": "using install warning shows call one alt stores really confused commented component listening store still see warning improved error message could help", "num": "5011", "d": "9/2015"}, {"title": "standard mixin substitute classes", "body": "well used reactonclickoutside mixin detecting mouse clicks outside react component used classes proposed wrapper functionhigherorder componentdecorator pr pomaxreactonclickoutside author pomax asked check find whether aligns might become official approach realizing mixinlike functionality classes merges seems becoming de facto standard couple larger libraries following approach including yahoo fluxible connecttostores material ui themedecorator relay syntax also appears similar intended use documented changes pr mentioned", "num": "5010", "d": "9/2015"}, {"title": "testutilssimulatekeydown trigger onchange event", "body": "hi guys testing react component js class numericinput extends reactcomponent js beforeeach gt onchange jasminecreatespy onchange numericinput rewire numericinput renderednumericinput testutilsrenderintodocument inputnode reactfinddomnode testutilsfindrendereddomcomponentwithtag renderednumericinput input call onchange user press enter key gt testutilssimulatekeydown inputnode keycode expect onchangecallscount toequal default view type onkeydown triggered onchange unit test trigger onchange", "num": "5006", "d": "9/2015"}, {"title": "strange optimization production mode", "body": "version brings performance optimisations unfortunately behave differently react compiled development production mode confusing code works one mode still work development mode fiddle logs react behavior production mode fiddle logs optimization seems trigger component reference nt change fiddle uses production build child component always new instance works expected production mode workaround", "num": "5005", "d": "9/2015"}, {"title": "findcomponentroot unable find element error thrown reactdomfinddomnode called componentwillmount new renders", "body": "recently ran error updating pile hunting thinking might related changes made nt test component right update made major changes even discarding experiment thought fault finally realized error called call made inside valid alphas change nt documented context error message would appreciated current wording mislead developers looking bugs wrong places since calling nothing mutating dom changes dom setup", "num": "4999", "d": "9/2015"}, {"title": "react nt follows semver", "body": "almost every release introduces breaking changes would easier maintain react bumped first digit version every time breaking change", "num": "4998", "d": "9/2015"}, {"title": "react videoaudio support", "body": "", "num": "4997", "d": "9/2015"}, {"title": "make traverseallchildren object invariant nicer passing probablyoldreactelement type props typeof", "body": "", "num": "4996", "d": "9/2015"}, {"title": "prefixed order css style get px appended", "body": "explained doc style one appended safari work need specify get appended even coerce integer string", "num": "4994", "d": "9/2015"}, {"title": "find performant way update without building whole element tree", "body": "scroll animations react components found state passing via props terribly slow wo nt help change instead using refs let new scroll position trickle via works well one big downside declarative anymore need keep things sync manually bummer opening issue discuss ways could drastically improve animations react could also benefit modules reactmotion basically know nothing internals react apiuser perspective imagine following allow percomponent opt separation react elements property new react element maybe sth like styleless plain find name allow warns debug mode new component similar component accepts props maybe state also requires parent component method returns plain object style keyvalue rerendering style diffed previous changes applied parent component node style component updated independent parent gives performance boost move fastchanging props like away actual component stylecomponent boom thoughts top end simple demo make point screenshot looks like toggle based animation refs based approach animated items believe separating property rest result similar performance gains still declarative single source truth allowing clean separation", "num": "4992", "d": "9/2015"}, {"title": "reactchildrenmap return fragment", "body": "found issue today would like talk seems like issue relies fact possible transform another object passed mostly works thinks single opaque child time cases someone would like something else result ie get element index iterate problem unlikely authors write legit workaround issue one replicate approach children exactly found internal methods implementation allow something like fills essentially map tackle issue authors would need implement method hand rely fact nt change approach nt return array nt seem break backward compatibility nt another returns array", "num": "4991", "d": "9/2015"}, {"title": "warning component react component classes must extend reactcomponent", "body": "transpiled babeljs observed modern browsers js class example extends reactcomponent render return null reactdomrender reactcreateelement example documentbody warning component react component classes must extend reactcomponent possible actually issue babeljs really sure cc spicyj", "num": "4990", "d": "9/2015"}, {"title": "provide arguments render function", "body": "since would convenient transition statefull ones minimal changes", "num": "4989", "d": "9/2015"}, {"title": "question following guide reactnative native modules android throws error", "body": "hi devs process creating native modules android following mentioned get error app compilation error anexamplereactpackage abstract override abstract method createviewmanagers reactapplicationcontext reactpackage thanks", "num": "4986", "d": "9/2015"}, {"title": "context documented", "body": "gamechanger incredibly useful piece functionality saves adding extra complexity app using fluxreduxetc curious documented", "num": "4984", "d": "9/2015"}, {"title": "throwing components difficult debug", "body": "ran similar situation couple times component throws reason got weird prop got upset stack trace however nt tell anything nt even point nonreact frames one outermost component throwing component would great situation like easier debug particular seeing state parent component would help lot", "num": "4982", "d": "9/2015"}, {"title": "htmldompropertyconfig include integrity sri", "body": "subresource integrity defines integrity attribute attribute defined htmldompropertyconfig included html rendered server", "num": "4979", "d": "9/2015"}, {"title": "docswebsite request performance statistics", "body": "would valuable react performance stats documented mean whole page petehunt content would great callouts details around performance", "num": "4974", "d": "9/2015"}, {"title": "better test facilities stateless components", "body": "originally left comment felt might better separate issue completely agree rationale behind backing instances refs stateless components want use pure stateless components much possible however running instances testing stateless components gets tricky part using shallow renderer render stateless component fine make assertions expected props children reduce duplication abstract shallow renderer process helper function want test events though take different route component takes prop wrap class component access dom node simulate click event nt huge deal abstract wraprender process helper function bring feel would nice better facilities stateless components nt think answer allowing work stateless components opens abuse normal application code open allowing extra functions simplify process testing stateless components creating code smell testing happy create pr think helper functions stateless components would beneficial", "num": "4972", "d": "9/2015"}, {"title": "testing scrolling events scrolltop scrollheight", "body": "ca nt seem set scrolltop even simulate scroll component within unit tests example debugging seems scrolltop set still scroll handler get called scrolltop still returns scrollheight also returns normally thats cant scroll elements seem right height smaller contained object height etc render function elements html", "num": "4971", "d": "9/2015"}, {"title": "style working newly constructed component", "body": "trying pass higher order component wraps another component want construct new div one new properties injected especially interested style property styles apply react treats like another properties proper behavior", "num": "4970", "d": "9/2015"}, {"title": "release version update semver", "body": "react proven stable technology amazing thriving community around think update semver", "num": "4969", "d": "9/2015"}, {"title": "click events swallowed svg elements ie", "body": "managed replicate edge lt chrome firefox created demo issue jsbin using common svg element linking common svg icons linking icons tag inside anchor click events icon bubble onclick handlers anchor example common svg element icon make link containing icon nt supported react yet use click svg onclick handlers anchor run temporary workaround setting svg element inside anchor might dupe", "num": "4963", "d": "9/2015"}, {"title": "reuse", "body": "look code want reuse invoked every time means totally new could one explain behaviour thanks import react react class indexcomponent extends reactcomponent constructor props context super props context consolelog constructor called called many times class detailcomponent extends reactcomponent render return detail back index let indexelement let detailelement let let app reactcreateclass reactrender documentgetelementbyid mountdom", "num": "4962", "d": "9/2015"}, {"title": "expected flush transaction stored dirtycomponents length match dirtycomponents array length", "body": "seen error handful times production since switching idea causing point", "num": "4958", "d": "9/2015"}, {"title": "invariant violation reactowner refs", "body": "get error whenever try use plugin references yuanyanboron casesandbergreactbounds since others nt complaining issue repos bound think might something setup someone help resolve issue", "num": "4957", "d": "9/2015"}, {"title": "reacttransitiongroup consume prop", "body": "given prop pass prop passing factory component also uses prop similar fashion result warning legitimate use consuming prop doubles problem since causes warning requires component child must also make sure component prop nt equal whoops forgot exists", "num": "4954", "d": "9/2015"}, {"title": "scryrendereddomcomponentswithclass multiple class names", "body": "tests failing accept multiple class names anymore eg testing node multiple classes giving result change api necessary test kind nodes", "num": "4952", "d": "9/2015"}, {"title": "eventcurrenttarget ca nt specified testutilssimulate", "body": "element listener uses currenttarget stuff test saw using simulate trigger event matter specify currenttarget always original element dumb example click log target tagname currenttarget tagname expecting listener checked currenttargettagname would get current get actual element target got think right value target name instead element", "num": "4950", "d": "9/2015"}, {"title": "csstransitiongroup animation nt occur one operated", "body": "demo say wan na remove first item list transition occurred last item instead first one could confusing since users might think remove wrong one miss something suggest would appreciated", "num": "4949", "d": "9/2015"}, {"title": "reactaddonstestutils invariant violation body tag", "body": "latest react trying render component body tag get simple component var instance testutilsrenderintodocument reactcreateelement testcomponent null var elements testutilsscryrendereddomcomponentswithtag instance button consolelog elements returns error replace body tags something else everything works", "num": "4948", "d": "9/2015"}, {"title": "warn ref attached stateless component", "body": "warn ref attached stateless component background see", "num": "4939", "d": "9/2015"}, {"title": "reactjs requires reactdomjs", "body": "means custom react implementations use reactdependent libraries reactrouter without preventing reactdefaultinjectioninject running also results fair amount bloat unnecessary domrelated files included build understand react core reactdom separate prevent issue would react core transitively require reactdom would nt also prevent someone using reactrouter reactnative cc mjackson ryanflorence case missing obvious solution thanks", "num": "4938", "d": "9/2015"}, {"title": "classes nt bring anything table", "body": "see advantages disadvantages implemented already hate bind dealing constructors foo extends bar extends extends baz extends base mixins nice way mixin traitlike objects nt deal constructors messing things huge step backwards backbone era brainwashing another generations prejava noobs think side effect sputtering class hierarchies somehow better rant", "num": "4937", "d": "9/2015"}, {"title": "refs nt work stateless components", "body": "realize extent intended behavior stateless components public instance could nt find much way conversation around behavior chosen right good way parent component even know ref going work component rational behind allowing dom access stateless component seems like instance expose proper behavior would return dom node whatever underlying thing directly like dom components current behavior surprising seems inverted component never going reasonably able know parent needs access dom node parent way knowing components stateless know wrap right need wait something silently nt work least stateless component ref throw though would last resort concession mind", "num": "4936", "d": "9/2015"}, {"title": "refs child inside function", "body": "using ref inside child function refs set inside result function undefined owner normal js class container extends component render return thispropschildren class demo extends reactcomponent componentdidmount consolelog thisrefsinner undefined render return gt gt", "num": "4934", "d": "9/2015"}, {"title": "classname prop working custom dom elements", "body": "prop appear get mapped correctly applied custom dom elements jsfiddle", "num": "4933", "d": "9/2015"}, {"title": "controlled radio button component update", "body": "running across issue one components used showing group radio buttons radio button elements controlled using checked defaultchecked use callback prop change state parent component determines one selected first click radio button works second subsequent clicks update radio button show checked example code exhibits issue thought might related key element using radio button value key element unique help appreciated", "num": "4930", "d": "9/2015"}, {"title": "remove eventpath synthetic events", "body": "nt meant stick around disabled pathbased bubbling", "num": "4929", "d": "9/2015"}, {"title": "whitespace preceding inline comment table", "body": "put inline comment jsx document table cell first time renders everything looks fine rerenders hits error cant find dom node happening space turned additional whitespace child browser throws unintuitive thing comment nt line trailing whitespace whitespace would instead stripped understand jsx transformer contentunaware totally makes sense happening bit gotcha coming programmingmarkup languages figured would report see come solution maybe tablerelated components could smarter filtering whitespace children since invalid far know obviously work around butting comment cell", "num": "4928", "d": "9/2015"}, {"title": "switch entirely gulp", "body": "build process sort resembles frankenstein monster point bad nt shell gulp grunt move utils zertosh already working", "num": "4927", "d": "9/2015"}, {"title": "invalid checksum textarea redux form", "body": "hi guys error quite new react helps much appreciated thanks", "num": "4926", "d": "9/2015"}, {"title": "trigger unmount action tests render returned null", "body": "hey way found unmount component tests render component return method also returns able unmount component workarounds ps talking", "num": "4925", "d": "9/2015"}, {"title": "guide implement new rendering option", "body": "hi want know whether guide implement new rendering option react like way react native say use features react render new kind objects instead html dom found session find detail", "num": "4924", "d": "9/2015"}, {"title": "opensource textarea editor build react", "body": "good opensource textarea editor build react need function like make header like italic introduce thank", "num": "4923", "d": "9/2015"}, {"title": "css hover state sticks removing dom elements", "body": "got bunch tags using click tag remove hover state maintained see screencap mac os chrome", "num": "4922", "d": "9/2015"}, {"title": "proposal alternative reactcreateelement api jsx output", "body": "problem current reactcreateelement api quite limiting regards control flow statements consider following example happily transformed soon try wrap jsx statement component ex div blows javascript condition hello world would transformed invalid js reactcreateelement set workarounds course workaround issue using ternary expression usable trivial bodies javascript condition hello null temporary variable body complicated javascript var conditionresult condition conditionresult hello conditionresult splitting html hurts readability quite lot eyes worse forced splitting choice least proposed solution change overload reactcreateelement signature list childrens single append function appendfn approach work let explain examples javascript simple jsx hello world current js output reactcreateelement div id msg hello reactcreateelement b null world proposed js output using new signature reactcreateelement div id msg append gt append hello append reactcreateelement b null world append nothing happens children old signature anyway appends component big difference function body instead limiting parameter list gt big win examples control flow statements javascript example hello condition world current js output valid reactcreateelement div id msg hello condition reactcreateelement b null world proposed js output valid reactcreateelement div id msg append gt append hello condition append reactcreateelement b null world javascript switch example hello switch value case foo foooo break case bar baaar break default world current js output valid proposed js output reactcreateelement div id msg append gt append hello switch value case foo append reactcreateelement b null foooo break case bar append reactcreateelement b null baaar break default append reactcreateelement b null world javascript example hello var person persons personname current js output valid proposed js output use native js loops instead depending arraymap reactcreateelement div id msg append gt append hello var person persons append reactcreateelement b null personname background roots web developer lie razor template syntax allows mix c html much like jsx js html felt strong connection towards react right first day mixing programming language html already felt natural gap left feel flexible back old days razor issue try address post hope consider approach make react even awesome already", "num": "4920", "d": "9/2015"}, {"title": "support full component lifecycle shallow rendering", "body": "extracted separate issue put together sidebyside comparison lifecycle support normal rendering shallow rendering output using normal rendering output using shallow rendering happy look pr although sure quite start would done shallow renderer pushed custom transaction mentioned", "num": "4919", "d": "9/2015"}, {"title": "support symbols proptype", "body": "would open support symbols proptype moment testing custom proptype functions", "num": "4917", "d": "9/2015"}, {"title": "displayname set minifiying stateless function components via webpack", "body": "given component defined minified webpack uglifyjsplugin get components displayname react browser tools", "num": "4915", "d": "9/2015"}, {"title": "document reactrender may return null component nt instancestate", "body": "assuming keep behavior worth noting documentation reactrender may return null cases component nt instance state", "num": "4913", "d": "9/2015"}, {"title": "reacttestutils scryrendereddomcomponentswithclassfindrendereddomcomponentwithclass handle svg classnames", "body": "svg classnames raw strings reacttestutils handle format svg elements classname ie", "num": "4912", "d": "9/2015"}, {"title": "instances reactperf correlate", "body": "issues trying figure reference reactperf refer amount times component created refer amount children components component created something else entirely thanks", "num": "4911", "d": "9/2015"}, {"title": "confusing stack traces exceptions render", "body": "put inside render function got stacktrace none code wrote none points component failed using classes instead reactcreateclass may may relevant", "num": "4910", "d": "9/2015"}, {"title": "reactaddonscreatefragment warning message", "body": "got message warning use keyed object wrapped reactaddonscreatefragment object passed child wondering easy would add sort stack trace could see offending code", "num": "4909", "d": "9/2015"}, {"title": "xmlns xlink svg namespaced attrs supported", "body": "moment try use element get following error namespace tags supported reactjsx xml namespaces required effective use svg design decision allow namespaced tags feature needs implementing", "num": "4908", "d": "9/2015"}, {"title": "csstransitiongroup remove dom elements reliably inc video example", "body": "started playing around csstransitiongroup encountering intermittent bug appears result race condition bug results classes added causing warning appear console issue appears trigging many updates csstransitiongroup relatively quick succession using latest version chrome ubuntu created video demoing bug", "num": "4907", "d": "9/2015"}, {"title": "schema tags different client server", "body": "hi guys getting annoying error currently following giving following warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client tdetails itemscope itemtype schema server tdetails itemscope itemtype sche", "num": "4906", "d": "9/2015"}, {"title": "video fire onend event video end", "body": "used react test video noticed onend event fired video end fiddle", "num": "4905", "d": "9/2015"}, {"title": "invalid property access rendering serverside babel optimisationreactinlineelements enabled", "body": "trying render page serverside get error like using babel transformer manually fixing however using transformer client code runs fine browser even complex componentspages complete list babel options server might help track fact worked browser leads believe babel issue though currently using build react master branch thirty minutes ago", "num": "4902", "d": "9/2015"}, {"title": "broad defensive termination clause patents", "body": "current defensive termination clause far broader defensive original apache license makes difficult use enterprise covering actions part facebook previous apache license covers project nt know address issue eg could nt find contact created issue please forward issue facebook legal opensource team patent related part license related", "num": "4900", "d": "9/2015"}, {"title": "ca nt disable transitions elements initial load", "body": "hello following along docs adding transitions via everything working great problem transition fires even mount component despite docs say nothing turn component wrong", "num": "4898", "d": "9/2015"}, {"title": "error performing device", "body": "get following error nodeawesomeproject reactnative runandroid js server already running building installing app device cd android amp amp gradlew installdebug failure build failed exception went wrong problem occurred configuring project app could resolve dependencies configuration app debugcompile could find comandroidsupport searched following locations file file required awesomeproject app unspecified could find comandroidsupport searched following locations file file required awesomeproject app unspecified gt comfacebookreact could find comandroidsupport searched following locations file file required awesomeproject app unspecified gt comfacebookreact gt comfacebookfresco gt comfacebookfresco awesomeproject app unspecified gt comfacebookreact gt comfacebookfresco gt comfacebookfresco try run stacktrace option get stack trace run info debug option get log output build failed total time mins secs could install app device see error", "num": "4897", "d": "9/2015"}, {"title": "reactaddonscsstransitiongroup nt remove element dom", "body": "problem component use react babel incriminated piece code listenter opacity listentergamelistenteractive opacity transition opacity easein listleave opacity listleaveexampleleaveactive opacity transition opacity easein entering animation works false component remains dom works without animations obviously without reactcsstransitiongroup wrapper", "num": "4896", "d": "9/2015"}, {"title": "reactdom wrong package npm", "body": "hi executed reactdom package version downloaded seems right package watching packagejson pointing something wrong something going wrong best regards", "num": "4895", "d": "9/2015"}, {"title": "anchors onclick executed anchor url present", "body": "spent significant time checking onclick events anchors triggered contacted parties whose packages use point basic react functionality idea onclick triggered triggered triggered triggered idea problem thanks", "num": "4894", "d": "9/2015"}, {"title": "unmountcomponentatnode nt unbind inflight listeners throws opaque error", "body": "react app triggering following error navigation events error occurring function failed find component event callback app happening would navigate blur event call rendering order refresh page docs say remove mounted react component dom clean event handlers state however seem case refresh page reactbound callbacks still react queue event leading error docs intuition seem imply clear callbacks since knows components longer exist handle", "num": "4892", "d": "9/2015"}, {"title": "reactisvalidelement validate elementpropschildren single reactelement", "body": "produces even though regular happening", "num": "4890", "d": "9/2015"}, {"title": "reactchildrencount throws invariant error", "body": "throws uncaught error invariant violation objects valid react child found object keys type key ref owner props store meant render collection children use array instead wrap object using reactaddonscreatefragment object invariant traverseallchildrenimpl traverseallchildrenimpl traverseallchildren countchildren linkclass render reactcompositecomponentmixinrendervalidatedcomponentwithoutownerorcontext reactcompositecomponentmixinrendervalidatedcomponent reactperfmeasurewrapper reactcompositecomponentmixinmountcomponent reactperfmeasurewrapper reactreconcilermountcomponent reactmultichildmixinmountchildren reactdomcomponentmixincreatecontentmarkup reactdomcomponentmixinmountcomponent reactreconcilermountcomponent reactcompositecomponentmixinmountcomponent reactperfmeasurewrapper reactreconcilermountcomponent mountcomponentintonode mixinperform batchedmountcomponentintonode mixinperform reactdefaultbatchingstrategybatchedupdates batchedupdates reactmountrendernewrootcomponent reactperfmeasurewrapper reactmountrendersubtreeintocontainer reactmountrender reactperfmeasurewrapper moduleexportscar webpackrequire bootstrap moduleexports bootstrap webpackrequire bootstrap anonymous function bootstrap anonymous function bootstrap equal", "num": "4889", "d": "9/2015"}, {"title": "chrome extension error", "body": "rc reactrouter getting error changing routes sure problem extension react reactrouter hotloader narrow extension disabled eg incognito error nt happen error cause render fail view nt update", "num": "4886", "d": "9/2015"}, {"title": "creating logiconly components", "body": "developing app want dynamically load content application using flux fairly defined pipeline getting managing data want something like currently get around using rendered component nt work well lazy load table chome probably browsers push loading div outside table force browser inject corrected html react lose root since dom gets modified without react consent way something similar realize pass react component loader tell wrap content component think quite messy tl dr want component logic current component implementation without rendering still rendering children", "num": "4885", "d": "9/2015"}, {"title": "incorrect warning link", "body": "short url redirect error src incorrect page redirects", "num": "4883", "d": "9/2015"}, {"title": "reacttestutilsiscompositecomponent called scry throws stateless components", "body": "example js const gt foo class extends reactcomponent render return foo const instance reacttestutilsrenderintodocument const div reacttestutilsfindrendereddomcomponentwithtag instance div expect div toexist works", "num": "4882", "d": "9/2015"}, {"title": "warn calling reactdomrender without global document etc available", "body": "basically every time called rerender happens get error created bare repo recreate issue component test suite small copypaste javascript import react component reactaddons import jsdomify jsdomify import expect unexpected class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt leaks document window global jsdomifycreate render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw idea happening anything", "num": "4881", "d": "9/2015"}, {"title": "react ui like ios navigation bar", "body": "anyone share react ui like ios navigation bar thanks lot", "num": "4879", "d": "9/2015"}, {"title": "react component classes must extend reactcomponent", "body": "ends exposed instances reactswf correct way set inheritance thought missing something", "num": "4878", "d": "9/2015"}, {"title": "invalid mutating deprecated warning", "body": "get following warning warning passed style object previously mutated mutating deprecated consider cloning beforehand check previous style color backgroundcolor fontsize null fontweight mutated style color backgroundcolor fontsize null fontweight confused warning appears previous style mutated style look exactly reproduce issue open browser type font size field blur field see warning console warning displayed could fix", "num": "4877", "d": "9/2015"}, {"title": "csstransitiongroup throws warnings component unmounted", "body": "using get following errors component unmounted animation done transitionentertimeout transitionleavetimeout set uncaught typeerror read property componentdidenter undefined reactcreateclasshandledoneentering reactcreateclasstransitionendlistener uncaught typeerror read property componentdidleave undefined reactcreateclasshandledoneleaving reactcreateclasstransitionendlistener", "num": "4876", "d": "9/2015"}, {"title": "revamp tutorial", "body": "huge number issues come tutorial repo inconsistencies confusing parts especially sort works fine without server initially requires half way talked maybe rewriting entirely maybe mean time clean make easier people learn react without getting tripped ideas welcome especially people front lines mailing list irc slack stack overflow github couple ideas provide running api server people use probably randomly generated api key make sure people clean environment require local server beginning done remove bit paginate steps separated better", "num": "4875", "d": "9/2015"}, {"title": "setstate fails callback via componentwillmount server", "body": "need render react components server seo component fetches data based query parameters server node fails request callback error reproduced simpler code example found numerous discussion web relating complications react serverside rendering working two workaround approaches removing ajax requests server instead rendering result request directly global variable embedded firstserve html moving ajax request prior initialization react components server request would still live client version please let know alternative recommended approach instead nb reason chose react say angular ensure search engines index page bit bother right var react require react reproduced react var reactdomserver require reactdomserver var reactcreateclass componentwillmount function var example ajax call fetch data based request parameters settimeout function err res state set based results thissetstate render function return reactcreateelement div null reactdomserverrendertostring reactcreateelement null node indexjs return documentbody referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform", "num": "4873", "d": "9/2015"}, {"title": "npm install save reactdom installs", "body": "think resolved rc meantime confusing since readme says", "num": "4872", "d": "9/2015"}, {"title": "please use symbols fields values", "body": "react special symbol uset mark instances unfortunately symbol used value field rather name would really great way round like js symbol used tag reactelement type native symbol polyfill plain number used performance var isreactelement typeof symbol function amp amp symbolfor amp amp symbolfor reactelement var reactelement function type key ref self source owner props var element tag allow us uniquely identify react element isreactelement true would allow instances implement multiple interfaces vs exclusive matter would great fields also symbols", "num": "4871", "d": "9/2015"}, {"title": "memory leak reactdominput server rendering", "body": "react seen massive memory leak appears entire app retained time profiler narrowed reactdominput radio input app removing entirely source fixes leak diagnose added log statements javascript mountwrapper function inst props linkedvalueutilscheckproptypes input props instcurrentelementowner unmountwrapper function inst consolelog unmounted input id instrootnodeid delete instancesbyreactid instrootnodeid ran app notice unmount never logs instances stay forever simply rendering using", "num": "4870", "d": "9/2015"}, {"title": "children filter null values map function", "body": "currently implementing component something like jsx return childrenmap children thisrenderchild autobind renderchild element index return cloneelement element key elementkey index selected thispropsselected onclick thisclickhandler business requirement put situation created list item component jsx using map array return array rendermenuitem key key whatever checking return return use case could give error propose remove filtering time values whenever situation understand think best implementation end change function alright", "num": "4867", "d": "9/2015"}, {"title": "unexpected detached subtree found possible regression", "body": "since upgrading seen error times production nt able trace source yet though cc spicyj", "num": "4865", "d": "9/2015"}, {"title": "convert react class class error use context", "body": "class created createclass transform class caught err original class code var reactcreateclass childcontexttypes name reactproptypesstring getchildcontext function return name jonas render function return class class extends reactcomponent childcontexttypes name reactproptypesstring getchildcontext return name jonas render return may something wrong childcontexttypes defining method", "num": "4864", "d": "9/2015"}, {"title": "reactdom example nt work", "body": "js var react require react var reactdomserver require reactdomserver class mycomponent extends reactcomponent render return hello world reactdomserverrendertostring yields", "num": "4863", "d": "9/2015"}, {"title": "npm update breaks", "body": "working project utilizing react reactdom reactaddonscsstransitiongroup reactaddonstransitiongroup project works fine install packages command line like installed listing packagejson entering given following error even first install packages separately terminal run project breaks", "num": "4862", "d": "9/2015"}, {"title": "warning rendered unknown unknown using key", "body": "following message mean exactly warning rendered unknown unknown using key place currently means nt preserve state behavior rare considering deprecating please contact react team explain use case take consideration", "num": "4860", "d": "9/2015"}, {"title": "stateless function components work native arrow functions", "body": "blacklist babel following stop working get error uncaught typeerror constructor js import react react import reactdom reactdom const app gt hello world reactdomrender documentgetelementbyid root", "num": "4856", "d": "9/2015"}, {"title": "pressing spacebar checked radio button fires click browsers", "body": "focus textbox press shifttab move focus radio button group press spacebar check radio button observe click event console press spacebar redundantly check radio button chrome osx observe additional click event console firefox osx observe additional click event console entirely browsers fault since react synthetic event system trying fully normalize inconsistencies like obscure one list least prefer firefox behavior expect real clicks synthetic keyboardoriginated clicks conditions firing incidentally feels like might accident chrome rather explicit decision place file bug feel like pretty pieinthesky though p", "num": "4854", "d": "9/2015"}, {"title": "longer possible blank using selectedindex", "body": "change noticed essentially component something like componentdidmount thispropsvalue thisrefs select getdomnode selectedindex render return yes meant blank value provided select would display nothing setting however added effectively kills behavior think understand changed since better matches browser shows default trying figure way still able blank select element without adding extra blank option element", "num": "4852", "d": "9/2015"}, {"title": "incomplete key escape", "body": "expected result html b actual result html environment win chrome example first following react elements rendered div app html next causes following rendered html b however element returns causes uncaught error", "num": "4850", "d": "9/2015"}, {"title": "input value state still update onchange", "body": "came across intriguing problem trying set value input state want input get value state connected store also want update onchange value store action updateinputfield type e actiontostore type etargetvalue store trigger modification type variable state huge problem approach presents input get slow typing new characters due fact requires new render component started implementing onblur method drop onchange got warning saying component read nt onchange method also looked two way binding handles setting state updating value component got laggish result also another big problem whenever set state new value ie type new characters typing cursor reset end text input try edit inside current text get enter one character cursor moves end better official approach problems known problem set solved react next versions", "num": "4848", "d": "9/2015"}, {"title": "possible use symbol component key", "body": "last time tried still wo nt work reason thanks", "num": "4847", "d": "9/2015"}, {"title": "nt componentwillmount called getinitialstate", "body": "noticed cleaning older code one components cleaning needs happen loads originally placed within getinitialstate works fine really nt feel like right place put componentwillmount sounds like better alternative seems thought called later lifecycle fact hook getinitialstate realise might bit edge case feels like two hooks either reordered different hook added", "num": "4844", "d": "9/2015"}, {"title": "info error message react component classes must extend reactcomponent", "body": "hard find component throwing error improve message somehow", "num": "4843", "d": "9/2015"}, {"title": "warn using dev build minified", "body": "want sebmarkbage mentioned forgot morning", "num": "4842", "d": "9/2015"}, {"title": "reactdom builds live reactdomdist reactdist", "body": "", "num": "4841", "d": "9/2015"}, {"title": "createfragment warning rendering date", "body": "new date looks hitting typeof object check sure cast string toisostring error", "num": "4840", "d": "9/2015"}, {"title": "finddomnode statelesscomponent work testutilsrenderintodocument", "body": "unsure also impacts browser wrote example wrote two components one test case identical class component test passes function component test fails javascript import react react class component extends reactcomponent render var onclick text thisprops return componentproptypes onclick reactproptypesfuncisrequired text reactproptypesstringisrequired export default component javascript import react react var component onclick text gt componentproptypes onclick reactproptypesfuncisrequired text reactproptypesstringisrequired export default component output failure due interactions jest also exists another project using jest although still using jsdom", "num": "4839", "d": "9/2015"}, {"title": "repo wiki full spam", "body": "repo wiki full pages created last hour spammy titles like service ariston cempaka putih also top google result sites using react missing wiki page github asking fill guessing wiki permissions incorrectly opened public", "num": "4838", "d": "9/2015"}, {"title": "question foreachaccumulated docs", "body": "hi checking file definition foreachaccumulated saw documentation entry vague case nt call function used basically events queues probably expected value maybe would nice comment function expects objects think would leave change docs ensure item object cheers", "num": "4837", "d": "9/2015"}, {"title": "warning react component classes must extend reactcomponent", "body": "", "num": "4836", "d": "9/2015"}, {"title": "allow reactshallowrenderer expose jsx test debugging", "body": "hi making use reactshallowrenderer testing really like mention docs would appreciate react community feedback evolve suggestion one problem comes investigating failing tests first little digression using vanilla jasmine testing comes deep objects matching using custom matcher wrote called import jsondiffpatch jsondiffpatch const jdp jsondiffpatchcreate arrays detectmove true const custommatchers toequalasobject util customequalitytesters return compare actual expected const result pass utilequals actual expected customequalitytesters expected jsonstringify expected null actual jsonstringify actual null difference jsonstringify delta null difference format info found export default custommatchers matcher builds jsondiffpatch help isolate difference objects lie really useful general testing nt help particularly comes jsx testing like reason subtle difference jsx result fairly different objects constructed comparing massively revealing investigation take time suggestion would really handy could extract jsx representation object renderer output imagining ability something like would would produce string like would allow writing custom matcher used comparing jsx would upon failure use report helpful error message spent time would like digging differences object structure investigating failing tests think feature like could real win think", "num": "4835", "d": "9/2015"}, {"title": "modding reacttransitiongroup work wrapped component", "body": "sure right repo ask question figured start somewhere working app uses reactrouter redux using library called reactredux exposes decorator wrap component pass data store props component gets passed reacttransitiongroup actually class called connect property called wrappedcomponent actual component lives since reacttransitiongroup lifecycle methods inplemented wrappedcomponent reacttransitiongroup finding tired extending reacttransitiongroup overriding perform handle methods also look lifecycle methods wrappedcomponent get following error gist extended class created anyone could point right direction would appreciate thanks", "num": "4831", "d": "9/2015"}, {"title": "seems something wrong using important inline style", "body": "code still removed code like everything goes well miss something", "num": "4830", "d": "9/2015"}, {"title": "reactrender reloads iframes rendering new component", "body": "run issue integrating live reloading toolchain example obviously convoluted tries capture setup also illustrate issue problem swap modules end new sets react component definitions even though keys render output equal iframe still seem get reloaded js var thunk function props context reactcomponentcall props context thunkfor function view key var reactcomponent function props context thunkcall props context reactcomponentprototype objectcreate thunkprototype reactcomponentdisplayname keysplit return reactcomponent thunkprototype objectcreate reactcomponentprototype thunkprototypeshouldcomponentupdate function props thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt let component viewreactcomponent viewreactcomponent thunkfor view key return reactcreateelement component key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src reactrender render main redframe src documentbody settimeout function reactrender render main blueframe src documentbody ps also tried keep root component keep identical attributes across calls iframes still reload edit updated example props used note stored property class seemed cause confusion", "num": "4826", "d": "9/2015"}, {"title": "reactdomrender reactdom throws invariant error using refs", "body": "error minimal example repository using webpack steps reproduce spin http server point indexhtml error mitigated using deprecated method instead", "num": "4822", "d": "9/2015"}, {"title": "parent vs owner context", "body": "sorry bring cause lot changes codebase notice context switched parentbased context beta lot libraries especially reactrouter depends context lot components usually render children body instead inside current component beta get context router breaks wonder syntax get inherited context render element example maybe file issue directly reactrouter", "num": "4819", "d": "9/2015"}, {"title": "chrome ff performs code old ie", "body": "hi customer reported bugs react found problem dont know happened must say bugs appear pc go customers office try machines machines work fine following code reactjs set isinputeventsupported variable false chrome firefox fix temporarily work allright really dont know newest chrome v performed code old ie something wrong condition depending new chromeff", "num": "4812", "d": "9/2015"}, {"title": "proptype function argument type checking", "body": "really like able define type arguments prop function called think last missing piece need really define react component interface might one feel need comment signatures way programmatically would much better first attempt tried create new proptypes able wrapping function given prop working receiving pretty straightforward warning message yeh mutating prop nice way way found without modifying react core", "num": "4811", "d": "9/2015"}, {"title": "dynamically require bundle", "body": "react bundle code single js file used view apps multiple views using single combined file multiple static build file tend low efficient hope way build multiple bundle something like able dynamically require running build code", "num": "4810", "d": "9/2015"}, {"title": "best practice debug project based react", "body": "hi everyone planing rebuild project using react tried use translate jsx gulp pack js files problems using watchify gulp change code take seconds repack feeling terrible need using breakpoints js file used gulp file chrome able split packed js file raw files developer tools sources tab case something wrong raw files breakpoints work seriously error info developer tools console tab obvious marked wrong line also tried find proper config please share idea debug project based react thanks lot", "num": "4809", "d": "9/2015"}, {"title": "handle empty model", "body": "jsx something like statecurrentusername whereas user already loaded ajax get uncaught typeerror read property name undefined handle properly good practices would horrible trash jsx tons checking like statecurrentuser null statecurrentusername", "num": "4808", "d": "9/2015"}, {"title": "add search documentation", "body": "hey folks algolia use react projects internally found searching react documentation could improved considering sending pr adds search documentation saw website using jekyll actually jekyll plugin nt known algolia saas provider offering hosted search engine accessible rest api pushing data api easy see live demo similar currently pending pr bootstrap documentation already provided free accounts popular opensource projects love use laravel hackernews fontawesome cdnjs example wanted check first something would interested react documentation start coding anything start hacking something like could move forward together would course give full access unlimited free account ask small powered algolia logo hit reply questions really happy make happen", "num": "4807", "d": "9/2015"}, {"title": "passing props via super props extending another component working", "body": "sure real issue behavior unexpected react version two components shape circle shape general concept circle special case shape using class syntax define components trying override shape defaultprops passing props circle constructor using nt working see following code jsbin js import react react class shape extends reactcomponent constructor props point propsshapetype circle circle component used super props shapedefaultprops shapetype null class circle extends shape constructor props let propscopy objectassign props propscopyshapetype circle super propscopy reactrender documentqueryselector body", "num": "4806", "d": "9/2015"}, {"title": "reactjs involuntary executable command problem", "body": "hello executable command written curly brackets normal possibility creating vulnerability thank react js sandbox bypass var mycomponent reactcreateclass render function return lt gt hello function constructor alert ptsx lt gt lt p gt reactrender lt mycomponent name handsome gt documentgetelementbyid mydiv", "num": "4805", "d": "9/2015"}, {"title": "csstransitiongroup work appropriately classname modified", "body": "entering element modified transition enter enteractive gets deleted likely kill transition cause problems element sync keep added appropriately example click add item multiple items transition ends var reactcsstransitiongroup reactaddonscsstransitiongroup var c var todolist reactcreateclass getinitialstate function return items hello world click handleadd function var newitems thisstateitemsconcat abc c thissetstate items newitems handleremove function var newitems thisstateitems newitemssplice thissetstate items newitems render function var r mathrandom var items thisstateitemsmap function item return bind", "num": "4804", "d": "9/2015"}, {"title": "formal grammar jsx", "body": "information exactly es grammar changed", "num": "4803", "d": "9/2015"}, {"title": "seems react nt allow render script tag inline code", "body": "sometimes useful far know way render inline javascript script dangerouslysetinnerhtml innerhtml evaluate script solution", "num": "4801", "d": "9/2015"}, {"title": "react flush batch work", "body": "read source code understand react flush batch work", "num": "4800", "d": "9/2015"}, {"title": "warning use keyed object wrapped", "body": "hi help understand following giving warning warning use keyed object wrapped reactaddonscreatefragment object passed child setup babelcore react babelloader code handler consolelog thissetstate body thispropsdata render return thisstatebody", "num": "4799", "d": "9/2015"}, {"title": "use typescript ts tests", "body": "get past anyway use jsx tests simplify little bit", "num": "4795", "d": "9/2015"}, {"title": "proptypes outside react independent type checks module", "body": "using react proptypes awesome help catching errors early stage sometimes application pretty large always flow data structures big size like web email client application type passed place multiple components accept props solution usually creating type file eg js typesmessagejs import react react export default reactproptypesshape id reactproptypesstringisrequired subject reactproptypesstring isrequired reusing type components get messages props js import messagetype typesmessage messagepreviewproptypes message messagetype sometimes data flows components elements example flux stores action creators usually requires duplication types using immutablejs records similar would really nice could use type checks parts application example js storesmessagejs import messagetype typesmessage import checktypes reactchecktypes param array payloadmessages array message objects received api ondatareceived payload gt payloadmessagesforeach message gt checktypes message messagetype addtostore message good guess architectually means making proptypesjs independent creating adapter propcontext validating", "num": "4794", "d": "9/2015"}, {"title": "large number render performance", "body": "seeing issue large numbers take long time render almost nt believe happening seems worsethanlinear increase render time add digits numbers formatting string first seems fix problem tried build fiddle exemplify issue think exacerbated pretty far dom tree nt seem matter app numbers nt formatted get digits takes seconds render finish let know ca nt reproduce try carve example app try setting component real app something like seems enough slow", "num": "4792", "d": "9/2015"}, {"title": "refactor away opaque uncaught typeerror typetouppercase function messages jsx misused", "body": "appears nt mapped everything developer bungles jsx syntax using jsx sigils jsx compiler nt expect jsx sigils error message likely unhelpful opaque uncaught typeerror typetouppercase function developer written post culprit cases user given jsxlike syntax context expected could useful descriptive error message preferably probable line number jsx compiler encounters jsx syntax addons expected", "num": "4791", "d": "9/2015"}, {"title": "suggestion increase performance providing initial virtualdom similar linux init ram image", "body": "suggestion really sure whether functionality already exists think yet also really sure whether proposed mechanism would indeed improve performance react according understanding virtualdom created reactjs application load applications large virtual dom creating consume time virtual dom could provided server already similar init ram images used linux init performance could possibly increased cases init dom image probably provided json would static might cases work would plenty options prepare server side indeed transmission virtual dom image would slower creating scratch client side make sense case depends network speed could also option client starts build dom abandons virtual dom creation process image received server case request would canceled hope makes sense user react conference discussion developers use react idea accepted propose", "num": "4790", "d": "9/2015"}, {"title": "support attribute", "body": "trying use gt capture attribute getting rendered nt look like supported list information capture", "num": "4784", "d": "9/2015"}, {"title": "onclick fires element button android", "body": "hope wasting folks time encountered situation web app work android chrome etc unless onclick attached button element li div etc fire onclick however using react tappable inside element event handler", "num": "4783", "d": "9/2015"}, {"title": "responsivegridlayout reset nt anything", "body": "layout nt get reset", "num": "4782", "d": "9/2015"}, {"title": "check babel inlining transform works", "body": "", "num": "4778", "d": "9/2015"}, {"title": "write changelog", "body": "", "num": "4777", "d": "9/2015"}, {"title": "iterable numbers breaks react", "body": "issue reproducible example full build contains nonstandard iterator theoretical added es future added already added another libraries take account possibility iterable numbers", "num": "4776", "d": "9/2015"}, {"title": "validatedomnesting message confusing using portals", "body": "js var foo reactcreateclass render function return var bar reactcreateclass render function return var baz reactcreateclass render function return null componentdidmount function reactrender reactchildrenonly thispropschildren documentcreateelement reactrender documentgetelementbyid container logs bit foo bar nt inside new tree", "num": "4775", "d": "9/2015"}, {"title": "tell firefox users get devtools", "body": "", "num": "4774", "d": "9/2015"}, {"title": "setting custom data attributes starting numbers removed", "body": "setting custom data attribute datatest works whereas would fail expected behaviour", "num": "4772", "d": "9/2015"}, {"title": "transform jsxtwig jstwig", "body": "using framework view part using reactjs since twig also uses use twig following try transform jsx js get error wherever used braces twig transform jsx code twig variables twig braces js", "num": "4771", "d": "9/2015"}, {"title": "instance stay instantiated componentwillunmount", "body": "destroy instance", "num": "4770", "d": "9/2015"}, {"title": "consider using providing fragment warning", "body": "updated started getting warning everywhere warning use keyed object wrapped passed child took realize using instances jsx wonder would acceptable apply first present legalize situation", "num": "4769", "d": "9/2015"}, {"title": "fire native listeners", "body": "surprised log anything hand dispatching events nt seem trigger react events general documentation expected work seems however like react event system parallel browser events nt really interact way", "num": "4766", "d": "9/2015"}, {"title": "rendering", "body": "react code reproduce problem javascript processenvnodeenv production class foo extends component render return foo reactrender documentgetelementbyid app run error thrown following callstack javascript function definewarningproperty object key objectdefineproperty object key invoked javascript var reactelement function type key ref owner context props builtin properties belong element thistype type thiskey key thisref ref see defined mode still addressed missing something", "num": "4765", "d": "9/2015"}, {"title": "react work reactart", "body": "opened issue reactart incompatibility reactart react", "num": "4758", "d": "9/2015"}, {"title": "allow x prefixed attributes", "body": "currently custom html attributes start x allowed test case allowing custom attributes would helpful example things like firefox os use provide hint keyboard contain digits", "num": "4757", "d": "9/2015"}, {"title": "allow disabling omitted close tags", "body": "similar elements like also called void elements react omits close tags xhtml produces invalid markup throw even break whole page prevent would nice disable omission close tags eg option like", "num": "4756", "d": "9/2015"}, {"title": "browser builds reactdom", "body": "", "num": "4754", "d": "9/2015"}, {"title": "make react reactdom codemod", "body": "already need add repo", "num": "4753", "d": "9/2015"}, {"title": "bug componentwillunmount calls called owning parent", "body": "details see basically seems component unmounted method needs called elements owns issue related probably addressed although part mixins ignored", "num": "4752", "d": "9/2015"}, {"title": "play nicely dom event system legacy anyway", "body": "currently react implements plugin system event bubbling rules important systems like responder system since dom event system incapable implementing proper event negotiation support however desktop nt really take full advantage custom event system polyfill mouseenterleave implement bubbling plenty things wrong dom instead patching maybe would better build new view system top dom integrates custom event system similarly react native handles things way lowest level could dom would however broken may question though handle things like onchange cc spicyj syranide since know always wanted", "num": "4751", "d": "9/2015"}, {"title": "context changing parent nt update child", "body": "component sets context child gets passed props supports context render context updates render component passes child call render update child example another example one works parent context one parent removes context", "num": "4749", "d": "9/2015"}, {"body": "see also clear treat null empty string eventually regardless warning makes sense preserve behavior release though", "d": "9/2015"}, {"body": "yep ok agree", "d": "9/2015"}, {"body": "used", "d": "9/2015"}, {"body": "fix landed sounds like something report alt", "d": "9/2015"}, {"body": "sorry", "d": "9/2015"}, {"body": "yup bug prod mode behavior correct dev mode nt bail contexts differ code secret validatedomnesting tracking hmmmmmmmm", "d": "9/2015"}, {"body": "feel like knew issue well documented time diff merged using context purposes nt good workaround time decided worry since renders deterministic sideeffect free influence rendered output sucked different path devprod life think going fixed stop using context hidden purposes right", "d": "9/2015"}, {"body": "bug render function sideeffect free prints something", "d": "9/2015"}, {"body": "jimfb nt know issue anyone make comment effect diff nt see notes", "d": "9/2015"}, {"body": "spicyj", "d": "9/2015"}, {"body": "alexgalays surface ie notice change kind behavior change slower development mode", "d": "9/2015"}, {"body": "change nt documented nt think change intentional expect finddomnode return inside componentwillmount return", "d": "9/2015"}, {"body": "snip code broke js componentwillmount isbrowser jshint browser true var require jquery reactdom require reactdom case simply getting rendered node testing drag amp drop support setting state indicating whether dnd ui rendered", "d": "9/2015"}, {"body": "terms expectations seems like finddomnode throw invoked mounting nt component nt mounted yet would nt ever dom node would", "d": "9/2015"}, {"body": "perhaps previously worked error points wrong cause least message needs updating", "d": "9/2015"}, {"body": "yeah never object helpful error message wanted confirm though sample code indicates somehow using mounting seemed odd wanted confirm nt missing anything obvious task add new error message using finddomnode unmounted component probably goodfirstbug", "d": "9/2015"}, {"body": "previously worked dantman assure return dom node since none created yet", "d": "9/2015"}, {"body": "maybe circumstances around eg maybe something exact key properly cleared cache previous render simple case throws well", "d": "9/2015"}, {"body": "nt look like regression unmarking", "d": "9/2015"}, {"body": "perhaps would useful serverside rendering say mounting text input box possible user typed something react finished initializing maybe want check existing user input copy state", "d": "9/2015"}, {"body": "yes possible react event handlers nt attached componentdidmount called componentdidmount would better place check anyway case nt hammered exact details supporting use case responding events happened server rendering client mounting work", "d": "9/2015"}, {"body": "thinking userentered data would lost time reached componentdidmount component mounted would nt render already wiped input", "d": "9/2015"}, {"body": "react basically nt ever read dom server rendering leaves dom asis long checksum original generated markup matches might reconsider exactly works currently happens", "d": "9/2015"}, {"body": "okay really hole would checksum different less common still valuable case eg slightly different dom initially nonjs flow sidenote care nonjs help users recover continue partial loads mobile noscript users go away checksum different probably possible reliable form dom node references would nt know previous render map perhaps case drop id element query getinitialstate form elements checksums lined could handle part existing lifecycle fire onchange difference would give poor developer experience though worked time maybe something like serverid form elements indicate initial state pulled onchange serverrendered node sorry went completely offtopic", "d": "9/2015"}, {"body": "jarail spicyj issue gave suggestion think dealing implicitly autofilled data handled first bug jarail differences rendered server client idea far deal checksums server client boolean context client code rendering serverrendered dom first render set server sync server dom rerender set client add clientonly stuff realized actually worked zpao half right first render client render top dom previously rendered server node question already exist started getting error updated react updating added responsive layout code caused component get rerendered scratch page loaded regression still could use better error message since mistake thinking works getting error later development random quirk something reasonable byproduct using react serverrendering", "d": "9/2015"}, {"body": "technically following semver major version zero considered initial development anything allowed change time", "d": "9/2015"}, {"body": "versions minor version determines compatibility patch versions compatible npm uses meaning compatible default expands", "d": "9/2015"}, {"body": "comment based taking nodejs release example given state nodejs also brings plan longterm support lts regular release cycle release versioning follows semver expect increments minor patch version coming weeks fix bugs add features wo nt within branch adding breaking changes react separates render rest react nt totally breaking change bump major version", "d": "9/2015"}, {"body": "semver spec major version zero initial development anything may change time public api considered stable nt completely correct could break things patch versions still compliant like saiehe said", "d": "9/2015"}, {"body": "salehe correct anything allowed change still semver compliant going close bug since correctness issue regards semver compliance eventually release version greater today", "d": "9/2015"}, {"body": "nt make breaking changes patch versions think like", "d": "9/2015"}, {"body": "nt support features way react", "d": "9/2015"}, {"body": "need use correct prefixes see", "d": "9/2015"}, {"body": "react native featurelibrary called animated help problem know vjeux plans port web sure status though", "d": "9/2015"}, {"body": "looks interesting basically bypassed setstate suggested looking timebased animations nt kind looks need operates percomponent still pass state via props brings back problem creating unnecessary elements diffing want faster way update style general abstract level nt see animated library could used improve libraries currently use setstate updating style maybe underlying logic animated library could exposed allowing library authors create kinds things top explicitly lists something needs explored issue right place could point right direction discussion happening thanks", "d": "9/2015"}, {"body": "prinzhorn animation still relatively unsolved problem afaik current strategy whole bunch people iterate ideassolutions see sticks trying combine efforts prematurely may cut lines research would otherwise fruitful see several independent implementations rather single unified effort good thing ideas make better animations encourage pursue looking good place discuss things share ideasdesigns believe appropriate location", "d": "9/2015"}, {"body": "jimfb thanks", "d": "9/2015"}, {"body": "already also reactchildrentoarray method", "d": "9/2015"}, {"body": "spicyj nt get closed", "d": "9/2015"}, {"body": "yes thank", "d": "9/2015"}, {"body": "realized last week nt get chance test glad know entirely head figure fix", "d": "9/2015"}, {"body": "merging", "d": "9/2015"}, {"body": "spicyj merging self different issue intended link", "d": "9/2015"}, {"body": "thanks meant", "d": "9/2015"}, {"body": "syranide spicyj end issue babel react seeing warnings using ps putting issue question related scalajs", "d": "9/2015"}, {"body": "nt fixed updates happen", "d": "9/2015"}, {"body": "please see", "d": "9/2015"}, {"body": "yea pretty well covered previous discussions going close", "d": "9/2015"}, {"body": "issue opened rn repo", "d": "9/2015"}, {"body": "alright thanks closing", "d": "9/2015"}, {"body": "officially supported feature least yet please see", "d": "9/2015"}, {"body": "managed find throwing component stacktrace debug chrome devtools quite sure things done make easier debug managed get component stateprops enabled option devtools inspecting local scope suggestions make easier personally would prefer react nt anything exceptions otherwise might even harder find source exception", "d": "9/2015"}, {"body": "yes imagine components use happens throw sometimes idea one passed weird arguments", "d": "9/2015"}, {"body": "fwiw truly prop validation proptypes automatically show parent component name", "d": "9/2015"}, {"body": "discussed internally binding decisions made general consensus reasons performance benchmarks rarely tell whole story suppose measure cpu runtime library fastest make best maybe maybe amount memory library uses download size library whole host factors substantial impact overall quality website experience nt measured cpu runtime alone virtually impossible define reasonable benchmarks correctly incorporate variables correct importance coefficients indeed definition importance depends use case optimizing synthetic benchmarks actually detrimental overall performance optimize rerendering single node million times unless actually happens render site pro tip never benchmark measuring wrong thing optimizing benchmark actually encourage writing code performs worse real sites performance race assembler want choose right balance developer productivity code maintainability variables like performance react much simple templating comes cost performance believe providing higherlevel abstractions maintainable easier work worth tiny bit overhead introduced abstractions balance always better removing layers abstraction ultimately computer science controlling complexity eliminate abstractions end something like assembler asmjs great machines humans ca nt read going hard time building website ca nt read code competing performance would lead us eliminate abstractions believe worth cost comparing apples oranges frameworks everything react vice versa every framework benchmark fair comparing equivalent frameworks feature sets various frameworks varies widely virtually impossible find equivalent framework thus impossible create fair benchmark ultimately performance metric matters going easy build fast website react believe answer yes rapid growth across industry internally facebook seems imply others agree us course might change minds future thinking point going create page tries compare react performance frameworks believe react fast realworld use cases believe like try reopen issue thinking dramatically changes issue feel free continue discussion thread", "d": "9/2015"}, {"body": "one thing interesting suspect community general general react performance characteristics real devices time care quite little react versus ember angular would love see things like published react information", "d": "9/2015"}, {"body": "agree performance tricky thing benchmark seems try offer comparable data file size good proxy realworld performance think trying benchmark parse execution times minimal core framework vs full build bells whistles helpful especially measured real devices running ios android etc key runs smoothly desktop system hang many seconds less power android windows phone device fail boot altogether found even running fairly trivial todo app could take unacceptably long time download parse execute popular mvc frameworks sure ca nt directly compare two frameworks different feature sets goals think would helpful developers know framework x might suitable choice takes seconds boot minimal app incidentally nt update article charts add react data set quite speedy", "d": "9/2015"}, {"body": "testutilssimulate checked backing instance available created backing instance around stateless component handled feel like could handled internally team cool write code cc sebmarkbage", "d": "9/2015"}, {"body": "nt actually insert node document probably well named sorry exactly see nt actually append document positional properties wo nt useful case something like reason nt would nt able unmount reliably tests would tripping dom unmounting critical case nt actually attach dom let test framework cleanup documents done", "d": "9/2015"}, {"body": "zpao brilliant thank much clearing stumped ages", "d": "9/2015"}, {"body": "conceptually trying work got bugs code instance selfclosing jsx tag close bottom created fiddle demonstrates looks like might new react community welcome future reference try keep github issues tracking bugs general usage questions better answered stackoverflow going close issue let know missunderstood question reexamine issue", "d": "9/2015"}, {"body": "understood right thanks", "d": "9/2015"}, {"body": "thanks feedback update ready", "d": "9/2015"}, {"body": "work correctly outside react sounds like ie bug", "d": "9/2015"}, {"body": "looking jquery bug seems issue chrome earlier seems fixed chrome could replicate edge ies bug occurs using event delegation seeing way onclick react feel like needs fixed", "d": "9/2015"}, {"body": "stop rendering component gets destroyed want keep state around render css", "d": "9/2015"}, {"body": "nt suppose using flash call js nt ever seen otherwise", "d": "9/2015"}, {"body": "last events bug reports seemed like nt issue thanks hint dig around bit code see find", "d": "9/2015"}, {"body": "put settimeout around js flash executes crazy things interrupts running js code middle try call nt settimeout literally code needs reentrant threadsafe nt see reasonably work around react", "d": "9/2015"}, {"body": "yeah aware issues kind hard tell seems like introduced edgecases could problematic respect react put last ones behind shout reappears still doubt thanks help", "d": "9/2015"}, {"body": "share code looks like", "d": "9/2015"}, {"body": "var bounds require reactbounds class mycomponent extends reactcomponent render return usual stuff moduleexports boundswrap mycomponent part code works fine add require statement top boundswrap end", "d": "9/2015"}, {"body": "unable reproduce sample app could react used external dependency reactwithaddons script loaded directly dom every single jsx file nt need manually require would issue", "d": "9/2015"}, {"body": "ok got", "d": "9/2015"}, {"body": "happens react loaded separately dom ed directly script idea", "d": "9/2015"}, {"body": "happens react loaded separately dom require ed directly script maybe two different reacts play together case npm dependencies dragging npm react build also separate global react", "d": "9/2015"}, {"body": "yea multiple react versions seems likely culprit", "d": "9/2015"}, {"body": "yeah webpack entrypoint way rest components continue directly access windowreact wo nt cause issues", "d": "9/2015"}, {"body": "probably unintentional", "d": "9/2015"}, {"body": "nt best api would nt always work node another classname specified would nt work unfortunate suppose could make better could also revert spicyj pretty sure know feelings make work better since regression", "d": "9/2015"}, {"body": "wow nt know feelings guess would probably make actually work", "d": "9/2015"}, {"body": "nt able specify currenttarget get set automatically correspond event handler receiving event working probably bug", "d": "9/2015"}, {"body": "understand currenttarget set automatically regular events target thought point simulate dispatching events customise use testing component uses currenttarget listener want write unit test test ca nt specify currenttarget simulate never able test method certainly changing target option quite different things", "d": "9/2015"}, {"body": "renderintodocument creates div renders element dom almost certainly unhappy case moves things around resulting error using body tough since valid child documentelement think actually warn try render try fwiw issue new ultimately nt think much fighting dom", "d": "9/2015"}, {"body": "new actually making component tests library made absolutely problems issue nt matter really found interesting wasnt even sure worth creating issue tue sep paul shannessy notifications githubcom wrote renderintodocument creates div renders element dom almost certainly unhappy case moves things around resulting error using body tough since valid child documentelement think actually warn try render try fwiw issue new ultimately nt think much fighting dom reply email directly view github", "d": "9/2015"}, {"body": "looks like case already throws sorry newb looking totally wrong thing", "d": "9/2015"}, {"body": "case add ref inside stateless component add ref one outside", "d": "9/2015"}, {"body": "ah dig got", "d": "9/2015"}, {"body": "truly separate yet deprecating dom apis still gracefully think plan separate entirely following release react native still special overrides happening working getting working well probably issues using react router", "d": "9/2015"}, {"body": "see thanks zpao talk reactrouter guys previously discussed hook parameterizing reactrouter around react implementation couple months ago think expecting separation link back anything fruitful comes", "d": "9/2015"}, {"body": "cool going close meantime", "d": "9/2015"}, {"body": "least one reason reduce react api surface area defer standard js conventions possible ie react business providing class abstraction follows defining react components less opinionated allowing users use whatever langaugesugar like agreed manual binding annoying solved property initializers", "d": "9/2015"}, {"body": "inclined agree igl lot useful automagic disappears classes becomes tedious create classcompatible flavor mixin also implements shared lifecycle events like using new syntax internal project months toying idea going back way feels much better work requires less manual rigging", "d": "9/2015"}, {"body": "feel free continue using nt removed deprecated great topic discussion forums purely noise issue tracker please move like carry", "d": "9/2015"}, {"body": "component never going reasonably able know parent needs access dom node exactly point component able define internal structure opaque outer component nt mess around dom nodes fact may chose render null multiple dom nodes nested nodes change tags render custom element therefore general considered bad idea since breaks encapsulation component another use case refs course use call imperative methods class instance however nt make sense plain functions since imperative methods associated", "d": "9/2015"}, {"body": "haha internally facebook long discussions true find way highlight discussions externally really like idea refs stateless components throwwarn created issue correct root issue stateless components nt instances performance reasons may never instantiate component instance us return instance created sebmarkbage mentioned finddomnode breaks encapsulation really escape hatch need super careful anyway need get dom node always safely wrap component stateful stateless composite component attach refs composite component", "d": "9/2015"}, {"body": "technically could refs objects expose placeholder object passed however guess really going trying constrain discourage use flaws could nt kill immediately frequently used new surface like nt expose uses guess clear honest stress release nt message well", "d": "9/2015"}, {"body": "thanks quick responses folks another use case refs course use call imperative methods class instance however nt make sense plain functions since imperative methods associated certainly agree sebmarkbage mentioned finddomnode breaks encapsulation really escape hatch need super careful anyway think exactly point escape hatch necessary one react dom sitting top layer ca nt completely coerced declarative api time agree ideally something like finddomnode annoying reality necessary respect wanting push ppl towards good ideas assuming react reasonably cover everything think agree yet right lots component api depend access underlying dom node stuff like read offset absolutely position things focus management etc etc react offers real good story make ever single component may need measured implement sort interface would even wrap stateful component seems like sort thing react jsut", "d": "9/2015"}, {"body": "react offers real good story make ever single component may need measured implement sort interface would even story parent component wrap whatever component trying measureposition composite component ref attached wrapper return child get dom node calling finddomnode wrapper even expose functionsabstractions like isolate parent touching actual dom nodes expose actual dom nodes ultimately everything still completely within control parentowner even third party implemented component stateless", "d": "9/2015"}, {"body": "yea great story though full story finally release long due chose restrictive api easier go restrictive loose way around seems like good idea reevaluate huge problem like evaluate use cases though parent context allow us new ways communication help", "d": "9/2015"}, {"body": "easier go restrictive loose way around makes sense happy post use cases arise thanks thoughtful responses ya", "d": "9/2015"}, {"body": "edited moved comment new issue", "d": "9/2015"}, {"body": "workaround would use ref callback instead string ref prefer style string refs anyway js class container extends component render return thispropschildren class demo extends reactcomponent componentdidmount consolelog thisinner render return wrapper c gt gt inner c gt gt edit removed frozen assign instance instead", "d": "9/2015"}, {"body": "jide effectively creating children inside calling ref ends need use new ref style frederickfogerty shows ps sure way", "d": "9/2015"}, {"body": "frederickfogerty know thanks amazing syranide thinking today became obvious owner case container perfectly logical yes know somehow tricky let know use", "d": "9/2015"}, {"body": "frederickfogerty reference try get", "d": "9/2015"}, {"body": "okay seems affect refs custom object instead using thisrefs see", "d": "9/2015"}, {"body": "yes even", "d": "9/2015"}, {"body": "jide sorry confusion nt realise writeprotected react use", "d": "9/2015"}, {"body": "works set instead cc jimfb perhaps related assume", "d": "9/2015"}, {"body": "syranide think right commit introduced issue custom element match check skip dom property operations struggling understand usecase surely attributes work custom elements standard dom elements", "d": "9/2015"}, {"body": "struggling understand usecase surely attributes work custom elements standard dom elements familiar difference custom tags web components web components much like react components nt visible nodes list dom attributes nt inherently apply like makes little sense passing dom properties react components whereas custom tags translate unstyled dom nodes assume previously valid introduction web components longer true limited understanding anyway nt take word", "d": "9/2015"}, {"body": "cc jimfb", "d": "9/2015"}, {"body": "syranide correct difference dom nodes webcomponents much like react components standard dom nodes know priori attribute commandeer namespace purposes web components guarantee ca nt steal namespace fact web component authors may prefer reasons stole standard dom components remain compatible need pass unmolested another way thinking standard dom nodes conceptually reactcomponent defined node happens take happen take uncontrolled form elements happen use camel case attributes happen follow consistent naming conventions frameworkprovided components fact markup transformations framework level instead inside reactcomponent definitions implementation detail web component authors free follow conventions need pass without transformations confuse web components tldr custom elements work react must use instead custom element spec requires allow users specify attribute need preserve functionality custom elements", "d": "9/2015"}, {"body": "agree distinction custom elements web components custom elements one building blocks web components spec right use case creating semantically meaningful custom elements nt extend default dom behaviour would nt consistent approach treat elements within react allow either users escape attributes somehow alternatively option dangerouslysetinnerhtml indeed using web components need operate outside react scope", "d": "9/2015"}, {"body": "hellosmithy using component dash escape per specification node dash may arbitrary attributes defined", "d": "9/2015"}, {"body": "jimfb sure safe assumption make understanding custom element must dash custom elements used web components element dash necessarily web component part web components also used", "d": "9/2015"}, {"body": "semantics custom element subset web component specification use term web component loosely believe statement holds replace web component custom element namely custom element may define arbitrary attributes process attributes using arbitrary rules", "d": "9/2015"}, {"body": "jimfb think little semantics either way change prevents custom elements interoperable core dom elements surely options escaping special case attributes etc cases people need thus create breaking change unless another way use custom elements purely custom elements still use react props", "d": "9/2015"}, {"body": "special caseescape whole ton attributes including every possible camelcase attribute could ever past present future occur native dom component mention dealing event handlers complexities would simple escaping couple specialcased attributes rules would complex confusing certainly current attribute whitelisting ca nt see way thing way better currently pass attributes straight", "d": "9/2015"}, {"body": "suggesting discussion best way escaping may one way would escape pattern convention eg straw man example also wondering want create web components outside react scope surely case using would thought default behaviour interoperability otherwise way apply react attributes custom elements seems odd inconsistent restriction hand ways pass web component attributes cases might want cases surely explicitly saying nt want react default behaviour instance rather automatically making assumption looking jsx code seems right expect behave consistently", "d": "9/2015"}, {"body": "jimfb zpao thought read thread see direction taken think raises inconsistencies make code harder reason really think escaping consistent flexible option forces code explicit breaking react convention would interested hear thoughts", "d": "9/2015"}, {"body": "hellosmithy ca nt see make work way better currently escaping solution like propose happy take look constraints must allow people specify possible attributes case sensitive way users must able specify combination zero one users must also able specify combination zero one custom elements impose arbitrary processing rules attributes case sensitivity matters must intuitive users ideally first thing people try work nt work users must obvious next step try fix code ie happens attribute wanted use gets rewritten get useful error message intuitively know try next must allow us basic sanity checks like preventingmitigating xss attacks way minimizes impact performance require modifications jsx syntax already becoming defacto standard languageseditorsidesparsers understand implement syntax changes would break read specification play nice futureproof us maintaining evergrowing whitelist browsers add new elementsattributes", "d": "9/2015"}, {"body": "dug like half hour could nt figure weird cc zpao syranide", "d": "9/2015"}, {"body": "uhm getting errors console clicking could explain lot seeing since happens render react starts throwing internal point explain rest", "d": "9/2015"}, {"body": "syranide sorry trying get jsbin working apparently saved incomplete change made reverted original case doesnt work js errors", "d": "9/2015"}, {"body": "handler actually hijack event make work radios checkboxes downside come times actually prevents browser updating state see prior discussions nt actually need call actually seen lot people blindly calling without actually knowing would recommend spot check handlers seeing actually needed throughout", "d": "9/2015"}, {"body": "zpao thanks", "d": "9/2015"}, {"body": "zpao thanks much explanation definitely calling blindly case certainly necessary somewhere react docs could perhaps added caveat perhaps tips section eventpreventdefault breaks checkboxesradio buttons controlled input section submit pr think worth adding opinion would hard debug run issue would worth pointing official docs", "d": "9/2015"}, {"body": "see someone add docs sure pr ever created", "d": "9/2015"}, {"body": "pr", "d": "9/2015"}, {"body": "cc spicyj perhaps routine validating dom nesting could consider text nodes", "d": "9/2015"}, {"body": "obviously work around butting comment cell regardless never pass invalid children text node tr react warn something wrong hide mistake ps important consider code interms transforms rather html vs first wrong intended", "d": "9/2015"}, {"body": "believe already get warning", "d": "9/2015"}, {"body": "right understand transforms way necessary elements preserve whitespace mainly hoping informative errorswarningssanity checks already warning perfect thanks", "d": "9/2015"}, {"body": "nt mind asking curious influenced decision go", "d": "9/2015"}, {"body": "ca nt speak zpao motivations personal preference find gulp easier work gulp programmatic stream api easier reason bunch grunt json abstractions gulp api minimal nothing task runner basic vinyl support mean less works outofthebox however found works end end using thing need directly instead assumptionladen plugin", "d": "9/2015"}, {"body": "wrapped head around found gulp easier work streams match better way thinking process likely lose couple nice things like task easy configure throw survive couple things also probably make sense explicit npm scripts see goal align open source tooling others interested using gulp helped force us look great tools hopefully make sense us", "d": "9/2015"}, {"body": "great thank helpful", "d": "9/2015"}, {"body": "hmm whitespace text spicyj syranide anything newlines thing text areas little ago red herring", "d": "9/2015"}, {"body": "sorry error message newline instead spaces screen shot error anyway fix fyi initialising textarea empty string", "d": "9/2015"}, {"body": "zpao content generated client server nt see could would rather assume albertdatui running different versions react clientserver easiest way exclude red herring render textarea see persists really simplest approach moment would say", "d": "9/2015"}, {"body": "case probably nt want use convenience method testing covers people usually need nt think going change trivial implement exactly hold reference new node", "d": "9/2015"}, {"body": "guide point still working details story going close since nothing really actionable point definitely put something ready", "d": "9/2015"}, {"body": "definitely issue could recommend medium editor clone thorough discussion suggest go stackoverflow something", "d": "9/2015"}, {"body": "every dynamic child unique key distinguished brothers", "d": "9/2015"}, {"body": "ahh mistake used notsogreat key", "d": "9/2015"}, {"body": "bit complex example taken react todomvc current syntax forced split javascript var footer var main var todos thispropsmodeltodos var showntodos todosfilter function todo switch thisstatenowshowing case appactivetodos return todocompleted case appcompletedtodos return todocompleted default return true var todoitems showntodosmap function todo return var activetodocount todosreduce function accum todo return todocompleted accum accum var completedcount todoslength activetodocount activetodocount completedcount footer todoslength main todoitems return todos main footer proposed syntax split choice javascript var todos thispropsmodeltodos var showntodos todosfilter function todo switch thisstatenowshowing case appactivetodos return todocompleted case appcompletedtodos return todocompleted default return true var activetodocount todosreduce function accum todo return todocompleted accum accum var completedcount todoslength activetodocount return todos todoslength todo showntodos activetodocount completedcount one like course debate first one feels like reading backwards look things second one feels natural read one flow end decision developer approach finds appealing forced use either way like", "d": "9/2015"}, {"body": "accomplish want without extending core api also important note api design deceptively bad idea react due implicit keys work using appendstyle api largely requires provide explicit keys failure cause unintended remounts really really bad following already works today js gt condition return hello js condition return hello syntax nt nice illustrates better way dealing problems nt introduce problematic sideeffects syntax separate problem talks switching implicit doexpressions nt know discussions though", "d": "9/2015"}, {"body": "know dosyntax get work jsx compiler see proposed appendstyle api would mess implicit keys would really bad therefore take solution gon na work need write something natural like javascript hello condition world still stake please note nonexistent return statement inside ifbody developer feels strangeinconsistent something ex ifstatement works root scope anymore nested", "d": "9/2015"}, {"body": "know dosyntax get work jsx compiler jsx compiler deprecated favor babeljs iirc babeljs supports feature developer feels strangeinconsistent something ex ifstatement works root scope anymore nested really imho ca nt put ifstatement inside expression js eg inside function call ca nt put ifstatement inside expression jsx element would personally agree inconvenient times necessarily problem jsx fix everything comes cost discussions", "d": "9/2015"}, {"body": "thanks info happy see discussions see doexpressions even implicit return nice almost looks like implicit doexpressions would job far concerned close issue", "d": "9/2015"}, {"body": "going close favor tracking via issues syranide linked thanks", "d": "9/2015"}, {"body": "use sure right approach componentname expected property propname symbol actual type typeof prop symbolisrequired function props propname componentname return props propname symbol props propname componentname new error export default symbol", "d": "9/2015"}, {"body": "generally said lot custom proptypes checks one feels like probably ok theory line change however nt applying symbol transform changes checks something similar type already place old browsers hard little bit work thoughts sebmarkbage spicyj", "d": "9/2015"}, {"body": "yea seems reasonable constructor symbol fallback ok ideal since nt work crossrealm use whatever standard practice among popular polyfills", "d": "9/2015"}, {"body": "react component use function name component displayname displayname set component displayname since minified js code think react taken correct function name displayname", "d": "9/2015"}, {"body": "problem minification react keep variables names", "d": "9/2015"}, {"body": "uglify may culprit react one suffers minifying code nt really good answer tried setting reported component names thought maybe need babel transform adds whatever needed", "d": "9/2015"}, {"body": "jimbolla need uglify development mode suggest disable uglify dev mode enable production mode", "d": "9/2015"}, {"body": "react nt transformation feel free file issue babel something react needs differently reopen", "d": "9/2015"}, {"body": "nt minify development mode anyway", "d": "9/2015"}, {"body": "removing good first bug since would best done somebody knowledge react", "d": "9/2015"}, {"body": "yes number times component created", "d": "9/2015"}, {"body": "showing stracktrace weird ultimately something react even manipulate afaik error rethrown either sometimes messes stack traces everything ever internals really uninteresting debugging perspective browser also else fails enable pause exception browser usually points problem even stack trace nt", "d": "9/2015"}, {"body": "error threw second error gets thrown later react currently nt gracefully handle thrown errors seeing first error something else catching error probably promises getting see dupe several others", "d": "9/2015"}, {"body": "get component name also hard error break app would good us planning another release sorry", "d": "9/2015"}, {"body": "found issue seems solve", "d": "9/2015"}, {"body": "changed specify duration", "d": "9/2015"}, {"body": "error message right context provides incorrect", "d": "9/2015"}, {"body": "please investigate case message somewhat unreliable pinpointing problem likely elsewhere app", "d": "9/2015"}, {"body": "fired though chrome ie since react mirrors native videoaudio events simply mirroring browser behavior assume unless actually observe native listeners would nt surprised actually intended behavior reason someone needs dissect standard sure", "d": "9/2015"}, {"body": "mistake code nt exist change code logging fine firefox chrome", "d": "9/2015"}, {"body": "wow thank big mistake", "d": "9/2015"}, {"body": "think seen setting runtime chance", "d": "9/2015"}, {"body": "aware might though start process react files even loaded", "d": "9/2015"}, {"body": "forcing readonly state startup script confirm change javascript const nodeenv processenvnodeenv objectdefineproperty processenv nodeenv value nodeenv configurable false enumerable true writable false edit unless counts change happens way react scripts loaded executed nt see would affect", "d": "9/2015"}, {"body": "ah thinking something else case transform nt compatible dev version react running default server force prod mode going close point also brought issue slated fix goes final", "d": "9/2015"}, {"body": "ah thank much indeed work fine production yielding nice speedup pages depending upon complexity nice", "d": "9/2015"}, {"body": "please contact concerns wo nt patent discussions fwiw note patent grant updated language refined topic", "d": "9/2015"}, {"body": "thanks quick response although change must made legal team think important open discussion matter one good way facebook get community feedback would nice another meta channel facebook opensource project apparently nt please lock issue btw put wrong label link patents actuallys comes", "d": "9/2015"}, {"body": "checked android sdk manager android support library installed system build process requiring", "d": "9/2015"}, {"body": "following android setup instructions installed android support library instead android support repository installing fixed issue able build install build device", "d": "9/2015"}, {"body": "issues react native future please file issues repository thanks good luck building apps", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "using almost definitely fixed", "d": "9/2015"}, {"body": "please post repro case debug", "d": "9/2015"}, {"body": "fixed thank il giorno gio set ben alpert notifications githubcom ha scritto please post repro case debug reply email directly view github", "d": "9/2015"}, {"body": "treating prerelease even though stable nt removed old version package still gets install since stable added deprecation notice npm see future npm warn deprecated reactdom old reactdom package deprecated react officially released please installed reactdom npm install reactdom latest run", "d": "9/2015"}, {"body": "guess standard browser functionality experiencing latter two examples trigger browser navigation first example unless call handler", "d": "9/2015"}, {"body": "iamdustan said handler getting called nt prevent default behavior browser navigating nt really matter", "d": "9/2015"}, {"body": "heh prevent default browser behavior onclick entry point handler called method enter dumb", "d": "9/2015"}, {"body": "interested see test case showing onclick getting called ca nt reproduce issue reporting", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "happening using", "d": "9/2015"}, {"body": "replicate anymore reopen replicate causing", "d": "9/2015"}, {"body": "dev tools separate repository anyway bug dev tools fixed weird seeing", "d": "9/2015"}, {"body": "restarted computer ca nt reproduce maybe chrome restart dev tools extensions update", "d": "9/2015"}, {"body": "want modify function nt perfect means one thing trycatch blocks slow path probably closest come without returning multiple elements handle single element best effort multiple elements closing duplicate feel free continue discussion", "d": "9/2015"}, {"body": "well nt quite duplicate want render portion effect component transparent pass logical processing change render pipeline data loaded loading", "d": "9/2015"}, {"body": "right straight duplicate making work would allow want root describing return items render think covered thing experience effectively said container components must single child way work use relay makes extensive use idea see reactstaticcontainer example nt work table example trickier case would probably say make whole table standalone component wrapped container", "d": "9/2015"}, {"body": "good catch point fix little bit", "d": "9/2015"}, {"body": "fixed thanks heads", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "stateless components public instance return value wrap another stateful composite could use instance relevant discussion point think going keep behavior created issue document", "d": "9/2015"}, {"body": "jimfb issue nt understand wrapping approach suggesting tried javascript const statelesscomponent gt foo const wrap class wrap extends reactcomponent render return calling produce error return typeof instrender function amp amp typeof instsetstate function typeerror read property render null objectreacttestutilsiscompositecomponent misunderstood wrap another stateful composite means thanks", "d": "9/2015"}, {"body": "happypoulp might different issue open separately", "d": "9/2015"}, {"body": "actually never mind use one", "d": "9/2015"}, {"body": "probably import react setup jsdom see", "d": "9/2015"}, {"body": "complaining missing document import react first test pass without issues", "d": "9/2015"}, {"body": "code working javascript import expect unexpected require jsdomify create var react require reactaddons var component react class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt jsdomifycreate render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw", "d": "9/2015"}, {"body": "interesting also works nt although guess suspect hoisting might problem case working solutions feels brittle", "d": "9/2015"}, {"body": "still real scenario still error even suggestion implemented try reproduce reduce test example", "d": "9/2015"}, {"body": "updated example clear note hook javascript import react component reactaddons import jsdomify jsdomify import expect unexpected class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt jsdomifycreate require reactlibexecutionenvironment canusedom true render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw", "d": "9/2015"}, {"body": "anyway kind duplicate already tracked maybe write note telling need globally available importing react", "d": "9/2015"}, {"body": "yeah perhaps add warning fix", "d": "9/2015"}, {"body": "please evolve question little bit looking library set ui components use project source code ios navigation bar component something else", "d": "9/2015"}, {"body": "sure exactly got quick proof concept lying around mocks ios shell app complete navigation bar poc dont think functionality ios bar like tracking route app etc etc touchstone might better examples", "d": "9/2015"}, {"body": "really discussion belongs react issue tracker", "d": "9/2015"}, {"body": "please us venues like discussions like", "d": "9/2015"}, {"body": "inheritance also includes static properties ie properties constructor", "d": "9/2015"}, {"body": "try first", "d": "9/2015"}, {"body": "sebmarkbage makes sense perhaps something mentioned release notes afaik standard practice javascript inheritance", "d": "9/2015"}, {"body": "reason methods get inherited using classes prototype subclass superclass something similar much cleaner needs js function aprototypeprotomethod function return protomethod astaticprop staticprop function b bprototype objectcreate protomethod value function call super return aprototypeprotomethod enumerable true configurable true writable true var instance new b consolelog instancestaticprop consolelog instanceprotomethod", "d": "9/2015"}, {"body": "troutowicz problem though", "d": "9/2015"}, {"body": "syranide yeah wrote little carelessly actually completely wrong made static property accessible instance way see provides expected result alter internal prototype property decrease perf", "d": "9/2015"}, {"body": "looks like fontsize getting set nan value wo nt get warning probably shallowequal treat two nans", "d": "9/2015"}, {"body": "warning message says yep think makes sense consider two", "d": "9/2015"}, {"body": "willing bet spicyj debugging right", "d": "9/2015"}, {"body": "zpao saying fontsize getting expect see warning message", "d": "9/2015"}, {"body": "sure saying language nt make easy us nt representation json could sub stringifying trade one lie another maybe bad still lie since value nt string either", "d": "9/2015"}, {"body": "zpao prefer lie rather lie would give clues debug potential issue", "d": "9/2015"}, {"body": "probably shallowequal treat two nans use comparison say", "d": "9/2015"}, {"body": "yes issue know previous fix sort thing check element mounted using dont think consumer end would somewhere around gathered key longer exist oh probably mention delay transitioning element sure makes difference", "d": "9/2015"}, {"body": "additionally also issue components change inside transition group timeout completed case see following errors ref old item longer exists time fired dies trying use undefined component", "d": "9/2015"}, {"body": "issue exception throws transition completes", "d": "9/2015"}, {"body": "sure fix marking milestone remember investigate", "d": "9/2015"}, {"body": "far tell none regressions fix point release post repro cases errors difficult anyone look fixing otherwise", "d": "9/2015"}, {"body": "creating isolated reproducible case tricky something get started javascript var reactcsstransitiongroup reactaddonscsstransitiongroup var render reactdomrender var container reactcreateclass getinitialstate function return show true render function return onclick function thissetstate show thisstateshow var reactcreateclass componentdidmount setinterval thisanimate render documentgetelementbyid app spam click button times see errors console", "d": "9/2015"}, {"body": "would building something similar possibility", "d": "9/2015"}, {"body": "would probably require bit effort yea think something like could really cool", "d": "9/2015"}, {"body": "definite thumbs paginating tutorial probably looks pretty daunting newcomer brought usually hear people refer docs ask get started react people thoughts dropping favor windowfetch removing one big library lot favor one specific thing actually need way ensure people nt feel requirement way shape form know note already docs jquery nt required including probably little misleading also give people option total skip tutorial get code running pointing tutorial repo repo nt explain anywhere jquery sake ajax requests think moving tutorial directory within actual react codebase easy two repos get sync happened many times keeping code one place less likely things get sync downside people entire react repo source nt think bad thing anything might make likely curious actual implementation things another idea one tutorial start could three tutorials absolute beginner one one touches advanced aspects react final one brings everything together addresses testing react components", "d": "9/2015"}, {"body": "think official recommendation point topdown data flow rather components manage data requests say data component utilizes passed parent said acknowledge sideways data loading hammer want provide duplicate", "d": "9/2015"}, {"body": "builtin solution usually want data layer using library like alt flummox redux hydrate data rendering react components example see", "d": "9/2015"}, {"body": "ok thank advice", "d": "9/2015"}, {"body": "added deprecation notice npm mean time run", "d": "9/2015"}, {"body": "note simulates es value types proposal would allow hope able make value types therefore overloaded interfaces ideal additionally overloaded interfaces good vm optimizations since current vms optimize heterogeneous function signatures poorly fact considered using symbol name eg different proposing still better however perf nt one several examples rest twitter", "d": "9/2015"}, {"body": "note simulates es value types proposal would allow var symbol typeof element hope able make value types therefore overloaded interfaces ideal got makes sense although case value field could react component class additionally overloaded interfaces good vm optimizations since current vms optimize heterogeneous function signatures poorly mostly interesting implementing virtual elements implement interface several virtualdom implementations seems generic enough fear conflicts guess real issues making libraries agree comment interface instead fact considered using symbol typeof name eg typeofsymbol reactelementsymbol different proposing still better however perf nt oh wow expect thanks pointing may sill suggest something like", "d": "9/2015"}, {"body": "hoping becomes canonical name polyfill value types like objects similarly used polyfill iterator hook multiple yes hoping able find agreement common interface quite yet working hard removing react specific pieces interface piece piece hope eventually able unify", "d": "9/2015"}, {"body": "difference appears adding node happened never fires server javascript componentdidmount function var id reactmountgetid thisgetdomnode consolelog mounting id instancesbyreactid id componentwillunmount function var rootnode thisgetdomnode var id reactmountgetid rootnode consolelog unmounting id delete instancesbyreactid id console quiet running app log statements", "d": "9/2015"}, {"body": "cc spicyj", "d": "9/2015"}, {"body": "zpao plan pointers team wants handle server rendering architecturally mount code like nt fire happy pr definitely blocker testnet servers crash every", "d": "9/2015"}, {"body": "nt decided best fix see already marked milestone though", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "soft related", "d": "9/2015"}, {"body": "reasonable situations users might want nulls mapping elements seems bad map skip elements implementing filter mentioned would better solution thing filter set issues mentioned bug specifically effects reconciliation performance closing duplicate since solves use case tracking use case", "d": "9/2015"}, {"body": "jimfb put example user want people used lot value render nothing function base condition values nt add value render domreact element nt see problem removing default like try render value", "d": "9/2015"}, {"body": "new toarray removes nulls btw", "d": "9/2015"}, {"body": "yordis see syranide comment basically preserving nulls array preserve implicit keys react uses track instance identity ensures state stateful components gets properly preserved items addedremoved list fairly advanced topic valid use case fact nulls nt removed map means accidentally works often people nt familiar implicit keys work", "d": "9/2015"}, {"body": "jimfb real concern since things get rekeyed reactchildrenmap", "d": "9/2015"}, {"body": "spicyj thanks lot solutions good know even still without get nt pointing comment rendering elements closed think better implementation use filter agree nt know asking behavior react render pass array values", "d": "9/2015"}, {"body": "spicyj since reactchildrenmap rekeys want reopen intuition retain nulls since arraymap works nt see adding nullcheck burdensome close understanding retaining nulls advantageous reconciliation apparently necessary fine reopening think something might", "d": "9/2015"}, {"body": "sure hard imagine could break guess would kind weird component like ab could null", "d": "9/2015"}, {"body": "spicyj situation cloned children values ca nt example check element alright weird stuff nt see problem react pass values nothing common se something like js thisrenderitem could benull element renderitem anycheckingistrue return great js map give null undefined values let list thisfilters list class test extends component render return childrenmap thispropschildren thisrenderitems renderitems element index", "d": "9/2015"}, {"body": "unmounting root keyboard event caused happen think always problem perhaps lucky leaving open sure edit could make sense something along lines allowing schedule things occur soon current transaction ends", "d": "9/2015"}, {"body": "invariant new release also hit one case fb nt yet investigated probably need change something final release", "d": "9/2015"}, {"body": "seen ca nt find sequence actions repeat", "d": "9/2015"}, {"body": "running issue well conditionally rendering based state sure boil simple reproducible bug report yet", "d": "9/2015"}, {"body": "issue happens leveraging fastclick nt happen", "d": "9/2015"}, {"body": "found events handled different order fastclick batching gets weird", "d": "9/2015"}, {"body": "eg click gets fired touchend click handler setstate remove subtree react tries something touch end perhaps", "d": "9/2015"}, {"body": "correct way class extends reactcomponent getchildcontext return name jonas render return achildcontexttypes name reactproptypesstring note removed comma method moved declare attribute component class", "d": "9/2015"}, {"body": "andreypopp thank way better way", "d": "9/2015"}, {"body": "iostalk using babel option take advantage static class property initializers class extends reactcomponent static childcontexttypes name reactproptypesstring getchildcontext return name jonas render return", "d": "9/2015"}, {"body": "andreypopp thank much", "d": "9/2015"}, {"body": "thanks andreypopp", "d": "9/2015"}, {"body": "version reactreactdom running standard npm install instead explicitly installing release candidate probably wo nt work", "d": "9/2015"}, {"body": "yes thanks", "d": "9/2015"}, {"body": "also worked thanks", "d": "9/2015"}, {"body": "command update packages listed latest version specified tag config respecting semver npm disttag ls react latest lt latest stable version next nt install prerelease versions effectively rolled back got duplicate react problem", "d": "9/2015"}, {"body": "ah gotcha thanks gaearon", "d": "9/2015"}, {"body": "problem fingers crossed release soon wink", "d": "9/2015"}, {"body": "getting component called swapper rendering like jsx export default class login extends node render let currentscreen thisdatacurrentscreen return swapper renders jsx class swapper extends node render let children thispropschildren instanceof array thispropschildren thispropschildren let offscreeny thisisfirstrender offscreendistance thisrenderedchildren map children child index gt", "d": "9/2015"}, {"body": "reason wondering react creating new instances children passed swapper instead reusing nt desire instances house famous engine nodes like keep alive might able", "d": "9/2015"}, {"body": "move logic swapper component currently rendering swapper want problem keep instances alive get update hooks called instead mount unmount case using listing children directly although want support case well", "d": "9/2015"}, {"body": "example trigger warning update seems nt issue version", "d": "9/2015"}, {"body": "towry ca nt repro example trusktr use instead handle abstractions arrays try dropping inside map could screwing things nt think need", "d": "9/2015"}, {"body": "towry zpao tried removing property thing happens except instead saying rendered unknown unknown using key says rendered unknown unknown using key null nt understand actually means without reading react source", "d": "9/2015"}, {"body": "preserve state warning message sortof implies", "d": "9/2015"}, {"body": "hmm nt sounds good falling back assuming stateless component maybe check ing reactcompositecomponent mountcomponent cc sebmarkbage spicyj", "d": "9/2015"}, {"body": "babel nt polyfill check extends reactcomponent newing ca nt yet nt warn extending sep pm paul shannessy notifications githubcom wrote hmm nt sounds good new falling back assuming stateless component maybe check componentprototype undefined newing reactcompositecomponent mountcomponent cc sebmarkbage spicyj reply email directly view github", "d": "9/2015"}, {"body": "guess checking undefined would reasonable intermediate step", "d": "9/2015"}, {"body": "thinking bit realized correct also use implementing also set selectedindex necessary seems get behavior looking sorry noise", "d": "9/2015"}, {"body": "would add empty option everything work without extra work", "d": "9/2015"}, {"body": "yea looks bug looks like could get away escaping least firefox os x probably safer escape well escaping traverseallchildren worked nt written test yet though anybody wants jump spicyj nt regression take fix", "d": "9/2015"}, {"body": "also needs escaping nt seem characters unescaped", "d": "9/2015"}, {"body": "yea looks bug looks like could get away escaping r least firefox os x probably safer escape n well certainly also wonder browsers would mess char values lt served html would nt surprise unicode privateuse characters noncharacters etc treated differently various browsers server software could another thing look", "d": "9/2015"}, {"body": "fullvlad post jsbin code example might much render method getting laggy due called result onchange run problem cursor reset caused flux library using executing action syncronously waiting nexttick problematic actions connect stores controlled inputs via onchange handlers", "d": "9/2015"}, {"body": "started implementing onblur method drop onchange got warning saying component read nt onchange method work need use instead work correctly also note current value input longer respond external updates without manually accessing node setting ie value set input created huge problem approach presents input get slow typing new characters due fact requires new render component problem unless triggers rerendering huge amounts components like say root something want avoid done correctly approach works fine using also another big problem whenever set state new value ie type new characters typing cursor reset end text input try edit inside current text get enter one character cursor moves end happens defer update textfield value becomes indistinguishable updating arbitrary value since string lacks selection information impossible maintain correct selection must defer setting new value", "d": "9/2015"}, {"body": "benglass indeed rendering many components update laggy syranide nt option value nt available first render would nt display anything workaround problem adding updating value thanks answers though smile", "d": "9/2015"}, {"body": "partly one asked wo nt possible could next release", "d": "9/2015"}, {"body": "perfect looking forward", "d": "9/2015"}, {"body": "provide info componentwillmount nt work", "d": "9/2015"}, {"body": "spicyj problem call order componentwillmount get called getinitialstate means want type initialisation component state set need put getinitialstate counter intuitive", "d": "9/2015"}, {"body": "need data put state counterintuitive preparing initial state component", "d": "9/2015"}, {"body": "ok lets start component load cycle getinitialstate componentwillmount expected cycle componentwillmount getinitialstate reason expected cases want code running app initialisation initial state set getinitialstate nt feel like right place", "d": "9/2015"}, {"body": "knew meant still nt agree", "d": "9/2015"}, {"body": "changing order nonstarter right render right call cwm generally said initialization happens usually fetching data places might synchronous setstate affects initial render clear code cleanup little hard understand use case trying solve one option use classes make use constructor anything else addition setting initial state", "d": "9/2015"}, {"body": "closing hear want discuss code sample would help", "d": "9/2015"}, {"body": "includes display name case looks index nt know anything better", "d": "9/2015"}, {"body": "oh ok problem happens using reactcreateclass without display name thanks info", "d": "9/2015"}, {"body": "babel transformer enabled default add displayname automatically components", "d": "9/2015"}, {"body": "suspect click arrow next message get stack trace see component causing issue somewhere", "d": "9/2015"}, {"body": "iamdustan nope bunch internal react methods", "d": "9/2015"}, {"body": "added pr add displayname specific lib", "d": "9/2015"}, {"body": "would nice nt blocking make", "d": "9/2015"}, {"body": "yes case rendering object keys deprecating stringify case nt want actually use could see warning bit misleading ca nt typechecks special case date could types etc maybe add something like convert primitive warning", "d": "9/2015"}, {"body": "one engineers stuck ages error examples show different scenarios perhaps include objtostring warning nt object object similar heuristic alternatively warning everything else got coerced string", "d": "9/2015"}, {"body": "improve error little bit", "d": "9/2015"}, {"body": "doubt going start coercing eg would nt allowed check nt good enough another helpful step debugging turn pausing caught exceptions throw catch error warning help specifically case information warning probably best thing", "d": "9/2015"}, {"body": "actually popped adding unit tests component full stack trace convert warnings thrown exceptions one downsides separate declarerender phases stack trace rarely points relevant line render errors like figured things suggest inspecting exactly value caused react decide trigger warning think suggests including representation erroring value might best addition warning", "d": "9/2015"}, {"body": "test save couple clicks js render function var react require react var finddomnode require reactdom finddomnode var statelesscomponent require stateless var testutils require reactlibreacttestutils would also expect cc spicyj", "d": "9/2015"}, {"body": "almost copied everything thanks zpao", "d": "9/2015"}, {"body": "hit issues stateless components shallow renderer yet", "d": "9/2015"}, {"body": "stateless components public instance wrap another stateful composite could call finddomnode component cc sebmarkbage verification", "d": "9/2015"}, {"body": "moved stateless currently failing approach wrap test utils get testing want bit awkward better way unaware way going", "d": "9/2015"}, {"body": "use shallow testing avoid needing reach dom", "d": "9/2015"}, {"body": "test event handling shallow renderer eg eg stateless components also compatible standard components tell refs always null stateless component", "d": "9/2015"}, {"body": "thanks heads clean luckily git actually wiki set public intentionally people add sites without us handle", "d": "9/2015"}, {"body": "fixed reported email address responsible", "d": "9/2015"}, {"body": "sure possible considering markdown nature page way add generated tags would least make less desirable spam target", "d": "9/2015"}, {"body": "possible end", "d": "9/2015"}, {"body": "internal functions nt support using except exist codebase care change would probably make sense check instead", "d": "9/2015"}, {"body": "getting also getting invalid proptypes children passing jsx nodes get error might checking open separate issue", "d": "9/2015"}, {"body": "tonyhb would unrelated file new issue code reproduce", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "problem using lib well thoughts", "d": "9/2015"}, {"body": "spicyj thoughts one", "d": "9/2015"}, {"body": "luisrudge guessing reactpivot copy react try rm rf", "d": "9/2015"}, {"body": "using flattened", "d": "9/2015"}, {"body": "context", "d": "9/2015"}, {"body": "need investigate behaves static properties anyone thread ie using scalajs please file separate issues repro steps", "d": "9/2015"}, {"body": "dupe", "d": "9/2015"}, {"body": "also posting example illustrates issue cases keys used js var thunk function props context reactcomponentcall props context thunkfor function view key var reactcomponent function props context thunkcall props context reactcomponentprototype objectcreate thunkprototype reactcomponentdisplayname keysplit return reactcomponent thunkprototype objectcreate reactcomponentprototype thunkprototypeshouldcomponentupdate function props return thispropsview propsview thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt let component viewreactcomponent viewreactcomponent thunkfor view key return reactcreateelement component key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src let app model gt reactdomdiv null reactdomdiv null reactdominput value modelsrc render frame frame model frame redframe reactrender render main app src documentbody settimeout function frame blueframe reactrender render main app src documentbody edit updated example props used note stored property class seemed cause confusion", "d": "9/2015"}, {"body": "two things determine whether component reused type key either changes component unmounted remounted see since value different two cases component gets remounted", "d": "9/2015"}, {"body": "two things determine whether component reused type key either changes component unmounted remounted see spicyj thanks pointer explanation guess going well since viewreactcomponent value different two cases component gets remounted spicyj question way could make less destructive fact would like node unmounted sense like clean listeners etc ideally node would remain tree also primary reason generate component per view function vs reusing component used react devtools property better yet method component could reused component spicyj html already prerendered server would react still throw away preexisting nodes would patch later way could trigger code path avoid remounting", "d": "9/2015"}, {"body": "way currently separate unmounting process actual dom manipulation code looks like different key cache ones created far would work adopting server rendering special case initial render way get behavior update", "d": "9/2015"}, {"body": "posting relevant discussion irc petehunt gozala yea would mapping key reactcomponent fill miss lt look bit later sorry enaqx joined enaqx lt basically memoize thunkfor pass view via props creates component caches storing passed function way function end component also updated examples use believe original code caused confusion reason reason reused views way would end views app ideal could probably map workaround end growing map never clearing entries ideal although maybe could use hooks increment decrement number users remove entry reaches still primary issue though js code reloaded definition would also new unless map stored somewhere globally might able workaround way cause react render vs mounting would best option", "d": "9/2015"}, {"body": "managed resolve issue following suggestions made posting update original snippet reference reactcomponent thunks alias cache table locally create new table designated namespace alias var thunksbydisplayname reactcomponent thunks reactcomponent thunks objectcreate null var thunk function props context reactcomponentcall props context thunkwithdisplayname function displayname const namedthunk function props context thunkcall props context namedthunkdisplayname displayname namedthunkmounts namedthunkprototype objectcreate thunkprototype constructor value namedthunk namedthunkprototyperender thunkprototyperender return namedthunk thunkprototype objectcreate reactcomponentprototype constructor value thunk thunkprototypecomponentwillmount function increase number mounts thunk type thisconstructormounts thunkprototypecomponentwillunmount function decrement number mounts thunk type mounts left remove cache map thisconstructormounts delete thunksbydisplayname thisconstructordisplayname thunkprototypeshouldcomponentupdate function props return thispropsview propsview thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt const name keysplit const namedthunk thunksbydisplayname name thunksbydisplayname name thunkwithdisplayname name return reactcreateelement namedthunk key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src reactrender render main redframe src documentbody settimeout function reactrender render main blueframe src documentbody", "d": "9/2015"}, {"body": "said fully covered use case primarily using similar one example still handful plain react components workaround limitations basically end wrapping order always use component pass actual component type prop little worried robustness solution welcome comments spicyj petehunt moments spare look", "d": "9/2015"}, {"body": "try using version react reactdom see one react ie underneath reactdom", "d": "9/2015"}, {"body": "makes sense kinda thanks", "d": "9/2015"}, {"body": "beta blog post please use version react reactdom apps avoid versioning problems plan remove requirement later", "d": "9/2015"}, {"body": "dumb npm install save", "d": "9/2015"}, {"body": "posterity delete example repository problem downloading react npm reactdom aligning beta versions makes everything groovy", "d": "9/2015"}, {"body": "hit checked dupe react loaded ended removing reinstall everything trick hfh", "d": "9/2015"}, {"body": "interesting question also wonder use new context portals return manual", "d": "9/2015"}, {"body": "work", "d": "9/2015"}, {"body": "documentation", "d": "9/2015"}, {"body": "yet context whole still undocumented remain stable enough us support", "d": "9/2015"}, {"body": "issuepr discussed also would", "d": "9/2015"}, {"body": "least basics works makes parent virtual tree", "d": "9/2015"}, {"body": "right passes context unclear expanded include anything else future", "d": "9/2015"}, {"body": "nt reports works correctly copy chrome far know perhaps debug see part condition returning true differs machines", "d": "9/2015"}, {"body": "would assume result nonstandard shimpolyfill used", "d": "9/2015"}, {"body": "wo nt work actually freeze props object leave open case want discuss sebmarkbage probably scope react would appropriate general js type checker perhaps one could integrate flow", "d": "9/2015"}, {"body": "use webpack benefit code splitting functionality", "d": "9/2015"}, {"body": "configure browserify webpack exclude external libraries bundle document", "d": "9/2015"}, {"body": "suggestions good nt reactspecific issue closing bug", "d": "9/2015"}, {"body": "start looking boilerplates", "d": "9/2015"}, {"body": "also appropriate place questions", "d": "9/2015"}, {"body": "would prefer issues related development related issues please put general questions stackoverflow", "d": "9/2015"}, {"body": "discussreactjsorg appropriate codelevel debugging questions", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "checked bootstrap example looks really cool useful think improve docs lot probably many others finds hard find specific areas documentation cc zpao", "d": "9/2015"}, {"body": "would nice indeed", "d": "9/2015"}, {"body": "probably would nt algolia logo certainly every page could link acknowledgements page let know would work would also likely pretty low priority us plan revamp website eventually though", "d": "9/2015"}, {"body": "developer early stages learning react would find search one even useful features docs would imagine addressing lack thereof would crucial step encouraging framework adoption using google specific term method gets page appropriate position page creating frustrating user experience imagine ideal amp ucd friendly internal search would able link specific id found ahashlink near heading page", "d": "9/2015"}, {"body": "hey worked bit search test live relevant code search pages website except blog index pagination pages browser locale set chinese japanese korean also search translations navigate results dropdown using keyboard directly send relevant part page reindex data display done library currently using zepto dependency bit css tell think question implementation oh totally ok link acknowledgements page ping need credentials access account", "d": "9/2015"}, {"body": "tested bit works brilliantly user end suggestion would make dropdown elements tad bit bigger mobile ease use hope makes way eventually", "d": "9/2015"}, {"body": "hey bshally thanks feedback suggestions really invest much time mobile side moment reactjs website seem mobilefriendly something could definitely added", "d": "9/2015"}, {"body": "hey pixelastic thanks getting started bunch things going still pretty low priority us moment would nt spend much time chance circle back take look", "d": "9/2015"}, {"body": "understood leave like moment feel free ping time update", "d": "9/2015"}, {"body": "make code working intended circle defined way intended code originally pasted work", "d": "9/2015"}, {"body": "use inheritance build react components try", "d": "9/2015"}, {"body": "yes intended essential feature vulnerability", "d": "9/2015"}, {"body": "dupe best bet probably add wrapping element whose classes nt change", "d": "9/2015"}, {"body": "unfortunate trying mix bootstrap colmdpushx x computed would nt able wrapping need specific class name element animation", "d": "9/2015"}, {"body": "guess work around would wrapping use appear class instead entering case would want use thing", "d": "9/2015"}, {"body": "jsx spec available mean", "d": "9/2015"}, {"body": "edvinerikson yep exactly", "d": "9/2015"}, {"body": "steida correct mentioned handling simply browsers work setting react makes attempt change behavior specific serverside rendering magic afaik never need would also detrimental due parsing overhead", "d": "9/2015"}, {"body": "ok thank answer", "d": "9/2015"}, {"body": "react batches everything automatically react events lifecycle methods batched operations applied soon execution returns toplevel batching started deferred way", "d": "9/2015"}, {"body": "syranide use jquery remove node setstate rerender component node rendered", "d": "9/2015"}, {"body": "ckrad allowed nt touch nodes rendered react possibly adding children empty nodes effectively stop using react point", "d": "9/2015"}, {"body": "syranide virtual dom always momey record node reactid", "d": "9/2015"}, {"body": "believe long term plan phase proptypes favor flow anyways", "d": "9/2015"}, {"body": "hope would remove huge introspection win react want see props react component supports types proptypes ca nt flow programmatically", "d": "9/2015"}, {"body": "abritinthebay elaborate sorts things like introspect", "d": "9/2015"}, {"body": "lets use example ui component library devsproduct know one facebook seen great use case specifically actually say looking creating one awesome interactive searchable component libraries want able autodocument perhaps autotestvalidate well props component inspect default props helpful nt cover optional props either proptypes actually explicit prop type declaration inside component ie declarative also specifies required awesome great inspect check proptypes used validate internally react build programatic model component declarative interface including prop required optional case automatically documenting component almost trivial loop really valuable", "d": "9/2015"}, {"body": "fwiw use facebook going build part react perhaps something like flow optional runtime typechecks eventually could incorporate functionality", "d": "9/2015"}, {"body": "hmmm interesting alternative thanks", "d": "9/2015"}, {"body": "one thing note looks like removing proptypes would also break tool might want think", "d": "9/2015"}, {"body": "work closely people maintaining get point already worked get things shape", "d": "9/2015"}, {"body": "good point look forward seeing overall solution quite important team bleacher report moving forward", "d": "9/2015"}, {"body": "nevermind consequence full build pulled script tag realize came number iterator", "d": "9/2015"}, {"body": "warning error already clearer master", "d": "9/2015"}, {"body": "download build acquire updated reactwithaddonsjs clearer warning error download fresh getting touppercase warning without indicating line number code", "d": "9/2015"}, {"body": "hopefully soon", "d": "9/2015"}, {"body": "may imagining virtual dom large data structure gets materialized client updates result second virtual tree created two diffed second step know initial interpretation upon reading documentation conceptually true actually internals work nt really virtual dom image certainly serializable one anyway could provided server least current implementation however good news ability run code server react supports rendering markup server react mount markup reusing markup created server means initial http payload sent client contain fully rendered html also great seo makes page lookfeel super fast react jump action client soon dependent javascript loaded information would recommend googling react isomorphic side note bit different describing related discussion topic inline elements shortterm roadmap one things looking better support future", "d": "9/2015"}, {"body": "version react using support testing really quickly kept capture attribute rendered element read information link provided see expects accept attribute input element perhaps issue experiencing", "d": "9/2015"}, {"body": "right missing docs tho submitted resolve", "d": "9/2015"}, {"body": "added react play beta final release coming soon", "d": "9/2015"}, {"body": "anyway get right need desperately", "d": "9/2015"}, {"body": "milesj sorry release soon rc week probably simply access dom node ref set attribute manually", "d": "9/2015"}, {"body": "probably fixed master still repro let know reopen", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "react issue", "d": "9/2015"}, {"body": "works master", "d": "9/2015"}, {"body": "plan test perf improvements fb codebase would interesting learn", "d": "9/2015"}, {"body": "yes hopefully sure metrics able share would like test", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "well good news already enough pages introducing iterable numbers may web compatible anyway think dev code unfortunately lot pages incorrectly uses dev build react", "d": "9/2015"}, {"body": "good news", "d": "9/2015"}, {"body": "fyi noticed edge users told get", "d": "9/2015"}, {"body": "currently expected behavior code regexp going say nt actually work nt valid according spec think would wrong looks like would whole must xmlcompatible part applies hopefully good reason like lack support nt remember top head knew discussed lot around capital letters decided support intentionally syranide remember ever talked numbers", "d": "9/2015"}, {"body": "zpao yes guys rejected significant reason think keeping afaik completely safe cc chenglou", "d": "9/2015"}, {"body": "think like twig question see fullfeatured template languages like provides noparse sections", "d": "9/2015"}, {"body": "nt jsx compilers complain want make sure whatever transform js transforming converts valid jsx nt something responsible going close probably better luck asking question twig forum stack overflow", "d": "9/2015"}, {"body": "give information mean", "d": "9/2015"}, {"body": "spicyj know instance component fe thing get using inside component get destroyed componentwillunmount methods called stay alive reused", "d": "9/2015"}, {"body": "mean destroyed javascript objects garbage collected references", "d": "9/2015"}, {"body": "course assume react lets go reference calling componentwillunmount jsut wanted plan way keep objects alive across instantiations news react components guess make external singletons", "d": "9/2015"}, {"body": "yes react never reuses instance unmounted", "d": "9/2015"}, {"body": "using number objects instead numbers", "d": "9/2015"}, {"body": "fair question case moving backbone code react use function convert incoming json immutablejs map maps fields types like class inherits things relevant money constructor expects string server used everywhere throughout application preferable continue using function like able use without getting warning note actually problem rendering value warning raised warning slightly misleading instance since insofar understand would nt appropriate worth probably would nt chosen subclass task starting scratch", "d": "9/2015"}, {"body": "nt think going support sorry use hopefully nt inconvenient note actually problem rendering value warning raised usually warn things break future versions particular pattern break hard", "d": "9/2015"}, {"body": "fair enough thanks explanation", "d": "9/2015"}, {"body": "testutilssimulate uses react internal event system touch actual dom ca nt use dom event handlers happy take pull request improving docs make clearer", "d": "9/2015"}, {"body": "understand explains code nt work calling nt call react events react event listeners attached higher hierarchy actual node like ancestor node group delegate right node", "d": "9/2015"}, {"body": "yes listeners document level", "d": "9/2015"}, {"body": "react initialization based environment requireimport react environment point never change nt handle changing case likely never suggested way make use nodeenv via environment variable possible ensuring asap app requireimport", "d": "9/2015"}, {"body": "cool thanks", "d": "9/2015"}, {"body": "follow", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "good news thanks syranide closing", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "consolelogging inside methods components indeed see calls happen preorder imho happen postorder nt verified reasoned makes sense mounting reverse unmounting preorder", "d": "9/2015"}, {"body": "intentional componentdidmount parent gets called componentdidmount children know children fully initialized using likewise componentwillunmount called children reverse componentdidmount chance reverse anything might done componentdidmount reactfamous probably alternate rendering backend appropriate like reactart reactcanvas reactnative nt yet good supported way unlike lifecycle method would allow actual unmounting order prefer solution removing children parent sounds pretty reasonable though", "d": "9/2015"}, {"body": "entirely sure suggesting familiar reactnative see two versions reactdom one barebones asis dom implementation expose dom play nice external events sure users realistically fix broken aspects dom event system model though perhaps nt really matter much reimagined implementation dom managed inline styles etc would map dom events events longer bubble like callbacks nt receive generic event object instead provided values immediate interest ie value perhaps selection etc etc expose events way makes sense isolated react apps largely hide dom details quirks merits second sounding community project perhaps made sense suggesting though", "d": "9/2015"}, {"body": "someone struggling integrating nonstandard dom events react app would like share humble opinion subject find really unfortunate react attempts normalize dom event system comes cost limiting events hook sure could add listeners remove far ideal specially components otherwise pure functions regard find hooks abstraction used virtualdom lot composable also becomes difficult normalize events different way think would lot better react exposed dom events also provided custom event system separate could dealt simply choosing different naming convention event handlers imo would even better employ similar hooks abstraction virtualdom makes really easy define amp share custom hooks like without wrapping container components", "d": "9/2015"}, {"body": "problem think dom events custom event system never integrate well already see frameworks since jquery days also see dom events nt cooperate iframes whole boxes steal events nt bubble example example responder event system need conditionally block certain events occurring elsewhere think good custom event system eventually going mutually exclusive integrating well dom event system basically mixing two boxwindowframe probably going lead bad time regardless likely going supported easy say virtualdom right thing offloads problem someone else solve start trying solve interaction problem gets messy custom hooks global namespaces becomes compatibility nightmare name used slightly different versions slightly different packages great write components great trying cooperate ecosystem large company could potentially make scoped extensions somehow seems better wrap commonly used components opting using instead nt big price pay compatibility", "d": "9/2015"}, {"body": "problem think dom events custom event system never integrate well already see frameworks since jquery days also see dom events nt cooperate iframes whole boxes steal events nt bubble example necessarily suggesting integrating rather providing two levels users hook common cases higher level custom event system work fine also prefer use possible something react team added support yet pretty much impossible hook higher level tire easy say virtualdom right thing offloads problem someone else solve start trying solve interaction problem gets messy meant say provides good low level foundation build say custom event system top ship integrated solution also allows custom additions system sure get messy try integrate hooks nt work argue better way extend custom hooks global namespaces becomes compatibility nightmare name used slightly different versions slightly different packages great write components great trying cooperate ecosystem large company nt follow refer say global namespace hooks nt reserve names box prop values hooks naming conflicts identity rather name maybe misunderstood said though could potentially make scoped extensions somehow seems better wrap commonly used components opting using instead nt big price pay compatibility always easy afraid example use bunch non standard dom swipe events see examples allow interaction various ui entities single container makes sense across board ui entities used boxing event hooks special component quite work well also cases use custom events swipes either add yet another container start mixing non great solution end day end implementing poor mans version hooks top react works sort number limitations make less ideal happy share code illustrating interest", "d": "9/2015"}, {"body": "necessarily suggesting integrating rather providing two levels users hook gozala yea basically issue meant address would two different view systems one passthrough dom one abstraction layer builtin richer event system hooks nt reserve names box prop values hooks naming conflicts identity rather name global name mean namespace property names props html elements share namespace globally meant claim name events page add custom logic someone else tries way scope differently could potentially whitelist things nt get special logic eg simpleeventplugin allowed way possible two different component systems collide terms logic either however might need break versions able intercept event system events special logic around special synthetic events single container makes sense across board ui entities used boxing event hooks special component use mixins reuse logic base components also component wraps bubbled events inside base components eg like facebooknetflixyahoo etc build abstractions top dom easy end bottom layer primitives build everything else however like mozillapolymer build abstractions dom bit pain wrap every time add new abstraction facebooknetflixyahoos world ca nt build abstractions dom ca nt wait new crossbrowser event plays nicely rest dom event system eg apple touch would need integration dom events like ca nt pass straight however seems fair decouple event system become easier use domheavy abstractions", "d": "9/2015"}, {"body": "global name mean namespace property names props html elements share namespace globally meant claim name mozswipegesturestart events page add custom logic someone else tries way scope differently think understand saying think misunderstanding hooks actually work though prop name irrelevant system relevant hook property value boxed example fact could two different event handlers event well add terms react jsx see tricky transition api without old one though one thing possibly jsx could desugar could js foo onclickid onclick handler assuming hooks use id symbols namespaces strings able avoid conflicts elm actually uses lists instead maps avoid naming conflicts together could potentially whitelist things nt get special logic eg simpleeventplugin allowed way possible two different component systems collide terms logic either however might need break versions able intercept event system events special logic around special synthetic events clear suggesting hooks low level api could build higher level event system top suspect higher level api likely still naming conflicts issue unless want completely rework api use mixins reuse logic base components also component wraps bubbled events inside base components eg return less find really cumbersome see two options may work associated element dom makes styling job complex causes handler one container others contained element make component returns child back use hooks register listeners child mounted standard events would need set child still ideal things actually little worth us also use custom elements attributes need set node tree otherwise nt work combination issues makes really difficult pull like facebooknetflixyahoo etc build abstractions top dom easy end bottom layer primitives build everything else however like mozillapolymer build abstractions dom bit pain wrap every time add new abstraction facebooknetflixyahoos world ca nt build abstractions dom ca nt wait new crossbrowser event plays nicely rest dom event system eg apple touch would need integration dom events like mousedown ca nt pass straight however seems fair decouple event system become easier use domheavy abstractions reason want better hooks dom fact least one team mozilla would like could higher level abstractions expose apis standard dom really difficult today given api hand suspect facebook netflix yahoo nt run problems less likely experimenting custom dom apis nt implemented anywhere yet anyway implied react virtualdom library mostly trying say yes please two layered event architecture could add support events react", "d": "9/2015"}, {"body": "gozala thanks lot great feedback slightly different take thoroughly thought heard considered special element register event listeners nt actually contribute dom wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components", "d": "9/2015"}, {"body": "gozala thanks lot great feedback slightly different take thoroughly thought heard glad could help considered special element register event listeners nt actually contribute dom wanting would trivial us add since custom event bubbling without tricky would really great actually tried version would attempt pass handlers child could quite figure clear way since deprecated one problems web components another alternative could something along lines use workaround whitelist custom event attribute properties basically function takes map custom may also remind earlier mentioned hooks react component render creates element given invokes custom props hooks lifetime methods looks use api major limitation still struggle part gecko limitation attributes properties need set node injected document end end using maybe react could expose something along lines note would avoid name collision props scoped custom defined elements unless custom prop already collides name taken react also handles custom anything problem events attributes composition ideal little better plain containers cause custom props implementations could reused see ps vjeux mentioned thinking stuff struggling personally trying move app code webworker keep renderer main thread happy chat good venue", "d": "9/2015"}, {"body": "wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components seems like generic approach especially consider overhead components also seems kind breaks nontrivial cases nt seem nice also breaks component isolation way nt reach inside opaque components attach event handlers without permission would nt make sense approach along lines way generic components could instead pass events along wherever go say button decorative frame decorative frame nt respond events proposed solution nt seem way around", "d": "9/2015"}, {"body": "problem event bubbling general nt make worse hassle add listeners every little node may may capturing something use pointerevents none make nonhit target surfaces like border think problem goes much deeper dom model ideally would render hit targets completely separately rendering imo sep andreas svensson notifications githubcom wrote wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components seems like generic approach especially consider overhead components also seems kind breaks nontrivial cases nt seem nice also breaks component isolation way nt reach inside opaque components attach event handlers without permission would nt make sense approach along lines way generic components could instead pass events along wherever go say button decorative frame decorative frame nt respond events proposed solution nt seem way around reply email directly view github", "d": "9/2015"}, {"body": "event system nt specific dom would also help non dom renderers easily add events react brought", "d": "9/2015"}, {"body": "known less dupe", "d": "9/2015"}, {"body": "click plus button check console output", "d": "9/2015"}, {"body": "bug occurs click target glyph instead button original browser mouse event target correctly set synthetic event target set reproducible", "d": "9/2015"}, {"body": "looks like bug undefined fix span element probably nt want want get button already works correctly", "d": "9/2015"}, {"body": "wait correctly button span testing want button definitely want", "d": "9/2015"}, {"body": "spicyj changed beforeeach require react declaring document window objects global scope follows js beforeeach function globaldocument jsdomjsdom globalwindow globaldocumentdefaultview globalelement globalwindowelement globalnavigator useragent nodejs react require reactaddons reacttestutils reactaddonstestutils started giving another error error invariant violation createnodesfrommarkup dummy initialized idea going", "d": "9/2015"}, {"body": "ok finally figured problem issue jasmine interleaving multiple tests sure moving test cases one suit fixed issue documented someone facing similar issue wants solution", "d": "9/2015"}, {"body": "spicyj discovering numerous versions error updating codebase would test say clicking something class div updated hide inside one components something nt testing", "d": "9/2015"}, {"body": "benhughes paste sample test see mean", "d": "9/2015"}, {"body": "benhughes come across started accessing though dom nodes seeing answer example would jasmine", "d": "9/2015"}, {"body": "sheepsteak sounds like different warning glad got work", "d": "9/2015"}, {"body": "right searching two problems answer relates warning render", "d": "9/2015"}, {"body": "recommend taking inspiration battletested special event api jquery allowed devs normalize events across browsers wheel events example support new kind events triple click saying one good idea", "d": "9/2015"}, {"body": "chance get kind feedback", "d": "9/2015"}, {"body": "may related", "d": "9/2015"}, {"body": "asked many times see discussion might make sense allow function pass become simple event plugin default way whitelist necessarily would make breaking change ever added custom logic particular event likely however stance already taking attributes general", "d": "9/2015"}, {"body": "might make sense allow function pass become simple event plugin default way whitelist necessarily would make breaking change ever added custom logic particular event likely however stance already taking attributes general could require specific simple event plugin avoid breaking changes could simple complex robust", "d": "9/2015"}, {"body": "proof concept showing exceptions swallowed", "d": "9/2015"}, {"body": "finally got around solved without automated codemod see patterns find wild might reconsider think usually indication something obscure way leave developer fix class running codemod pick whether want put something prototype inline constructor use class properties would require better static analysis tools infer whether function call nonsimple function declaration side effects etc", "d": "9/2015"}, {"body": "opened address", "d": "9/2015"}, {"body": "spicyj thoughts", "d": "9/2015"}, {"body": "sebmck plans giving arrow functions concise methods babel basically working around fact ca nt distinguish plain function ambivalent regard constructable would go far saying function expressiondeclarations considered deprecated best practice use forms creation function", "d": "9/2015"}, {"body": "sebmarkbage plans giving arrow functions concise methods babel really although recently leaning towards correctness performance eg babel going tdz default bunch cases could statically analyse omit assignment iife might worth adding would go far saying function expressiondeclarations considered deprecated best practice use forms creation function probably would nt go far already feel pitchforks raised stuckouttongue", "d": "9/2015"}, {"body": "get excited redux timetravel debugging eventually creating test cases dispatched actions really like components encapsulate state trying create place redux state component instance cumbersome pretty ridiculous component already place state also turns component state state timetravel debugging useful state keep redux boring state nt put redux nt get timetravel feels weird love redux middleware create tools around app state sure api trillion holes prime conversation stuff like js reactrender el let tree reactgetstatetreeatnode el reactonstatetreechangeatnode el fn reactrenderwithstatetree tree el would enough build timetravel debugging tools yeah", "d": "9/2015"}, {"body": "yes key issue dev mode debugging tool also production api strongly informs implementation api limits short cuts take sep ryan florence notifications githubcom wrote get excited redux timetravel debugging eventually creating test cases dispatched actions really like components encapsulate state trying create place redux state component instance cumbersome pretty ridiculous component already place state also turns component state state timetravel debugging useful state keep redux boring state nt put redux nt get timetravel feels weird love redux middleware create tools around app state sure api trillion holes prime conversation stuff like reactrender el let tree reactgetstatetreeatnode el reactonstatetreechangeatnode el fn reactrenderwithstatetree tree el would enough build timetravel debugging tools yeah reply email directly view github", "d": "9/2015"}, {"body": "ran across thread glad see around past months working something friend direct area though approach touches things general idea added global state store behind react also works component local state also stores backed global store behind scenes result view system simple write reducers complex concepts still upside stores logging serializable timetravel inspectable easily optimized immutable libraries next step ended writing compiler power gives us new things namely compiler track views rely stores free user useknow actions really another abstraction really want change variable views update automatically finally probably topic went ahead created view macro lets use normal variables inside views backed global store getting benefits requiring users learn classes reactspecific abstractions example would js view header let books title dune const addbook gt bookspush title book booktitle books backed framework addbook would log added book change view backed store though new macro actually much closer normal coding use variables functions result still work progress incredibly fun use almost ready beta interested feel free reach sum definitely support idea talking", "d": "9/2015"}, {"body": "really want change variable views update automatically cases complex cases like action occurred execute business logic new state possibly update n components jimfb documentationgists explaining state hoisting", "d": "9/2015"}, {"body": "echoing ryanflorence like way react encapsulates state component use react fairly heavily myntraflipkart keep bumping problem server side rendering oversimplify consider following relations view \u0192 state state \u0192 props user time server access props nt need user inputs generate first rendered html however react nt run lifecyclestate methods server either componentwillmount setstate etc meaning effect time component discarded server makes component lifecycle methods fairly useless anything nonbrowser specific network requests async business logic etc etc ideal hence frameworks pull state signals react components run inmemory pass props react component represents snapshot tree given set props flux frameowrks etc etc really like server side rendering something like js import asyncapp app expressjs boilerplate appuse app req res gt var browser new browser lightweight browser nt dom events xhr etc var el assumption adding listeners like onclick etc noops lifecycle methods like componentwillmount etc etc called would reduce reliance redux etc managing state would elegantly handled inside component thoughts", "d": "9/2015"}, {"body": "threepointone fyi componentwillmount called invoking reactrendertostring use componentwillmount baobab immutablelike library replaced need component state async fetching server client would great react could something like builtin could use components project", "d": "9/2015"}, {"body": "briandipalma comment pattern wellknown team one nt talked much docs basic ideatldr hoist state child component child component defines sort blackbox data type child optionally accepts parent child component stores internal state object every component entire state tree effectively bubbled root node gives parent component full control state subtree parents reset children passing newempty state objects snapshot child saving copy state object reparent clone child restoringreusing state object etc basically allows components finegrained control children internal state without breaking abstractions example top issue defined view shows three child views eg tab view child views arbitrarily complex retain internal state even user changes tabs goes back first tab pattern already allows users pull state state tree avoids introducing new apis imho pattern woefully underutilized largely never documented downside state effectively managed userland rather managed react naturalunavoidable outcome externalizing state tree", "d": "9/2015"}, {"body": "jimfb model fit rerendering components state changed", "d": "9/2015"}, {"body": "dantman restoring serializedcopied state allows rerender prior state time reusing current state object allows rerender component currentlatest state child components trigger rerender calling friends like empty updating current state object sure completely understand question let know nt answer", "d": "9/2015"}, {"body": "jimfb got talking components rerendered change state like happens call though sure like idea calling dummy calls whenever component state changes feels like dirty hack", "d": "9/2015"}, {"body": "dantman well hack wouldcould solved whole discussion p regardless exists trigger update state nt tracked react", "d": "9/2015"}, {"body": "like able separate rest library well overkill need include react libraries dump reactcompatible virtual dom nodes", "d": "9/2015"}, {"body": "overkill need include react libraries mean include react library exports commonjs module specify user install mean browser build need include react make sure library works similar defined nt work good way ensure make umd builds webpack define react external either way react never included component libraries", "d": "9/2015"}, {"body": "thanks response gaearon spent lot time evaluating redux weekend mean include react sorry comment bit vague instead think able something like think people talking say inlining elements nt dug deep enough issues yet really like see react elements provide standard interface virtual dom nodes case making ui library could really use react virtual elements diff patch operations nt need rest component lifecycle functionality comes react", "d": "9/2015"}, {"body": "guess link toward repo subject gaearon close issue", "d": "9/2015"}, {"body": "gurpreetsran fix move properties classes see", "d": "9/2015"}, {"body": "landed closing much better", "d": "9/2015"}, {"body": "eta released", "d": "9/2015"}, {"body": "fix rc released couple weeks ago final release soon", "d": "9/2015"}, {"body": "posting future readers", "d": "9/2015"}, {"body": "jsx transform used nt recommend confusing ever try pass prop components would nt expect access different name", "d": "9/2015"}, {"body": "arrowup correct amp valid adding flava flave thread", "d": "9/2015"}, {"body": "fwiw hit file issue seemed pretty broken speaknoevil heart code straightforward seems correct far documentation concerned treating opaque using manipulate nice pattern look specific optional children make sure one certain type siblings order way throws error one element array hence issue hankey code looks worse relying underlying implementation lines yet works fine error note replacement beers happy put patch consensus something done even", "d": "9/2015"}, {"body": "could note readme installation", "d": "9/2015"}, {"body": "dupe fixed", "d": "9/2015"}, {"body": "jimfb zpao thoughts accepting pr", "d": "9/2015"}, {"body": "defer zpao objections", "d": "9/2015"}, {"body": "closing unless hear", "d": "9/2015"}, {"body": "yes come back still problem currently nt time try agaiin migration", "d": "9/2015"}, {"body": "already fixed pr closed", "d": "9/2015"}, {"body": "looks like fixed think closed", "d": "9/2015"}, {"body": "submitted fresh pr review changes small straightforward", "d": "9/2015"}, {"body": "status updates burn", "d": "9/2015"}, {"body": "looking nt issues updating docs", "d": "9/2015"}, {"body": "zpao issue double", "d": "9/2015"}, {"body": "description less big picture like longer tail work", "d": "9/2015"}, {"body": "facepalm sorry thanks", "d": "9/2015"}, {"body": "per probably dropping valuelink controlled components linkedstate mixin really nt used much even less people moving towards classes also replies thread indicates lack interest topic since linkedstate appears way guess wo nt invest lot effort enhancing mixin mostly legacy point find useful feel free create linkedstate mixin apps andor publish others use", "d": "9/2015"}, {"body": "put together sidebyside comparison lifecycle support normal rendering shallow rendering exposing would allow lifecycle methods called perhaps would better fix make shallow rendering engine call methods output using normal rendering output using shallow rendering heavy shallow rendering users current project work using provide helper functions including adding allow us test full lifecycle scenarios able contribute pr get steer best way proceed", "d": "9/2015"}, {"body": "worth creating new issue specifically ensuring shallow rendered components progressed full lifecycle eg leaving", "d": "9/2015"}, {"body": "jsdf yea seems reasonable addressed separately seems reasonably simple though pull request would welcome", "d": "9/2015"}, {"body": "spicyj custom transaction shallow rendering eventually get rid transactions completely", "d": "9/2015"}, {"body": "blainekasten still seeing", "d": "9/2015"}, {"body": "company code sure still issue would say probably close see someone else runs suspect issue getting wrong version react", "d": "9/2015"}, {"body": "thanks update", "d": "9/2015"}, {"body": "right thing shipping list", "d": "9/2015"}, {"body": "sure problem issue", "d": "9/2015"}, {"body": "example works rc", "d": "9/2015"}, {"body": "syranide caveat since rendering separate dom node nt work server actually experimented recently tried getting around server limitation messy setup render node react server client drop rerender dom node relocated unfortunately ran issues react stumbling modified dom scrap experiment", "d": "9/2015"}, {"body": "also influences dialectic characters typed latin languages example os x inserting fail using international keyboard even long press use variant failing sorry seems related apologies", "d": "9/2015"}, {"body": "update suffering issue", "d": "9/2015"}, {"body": "none currently high priority us right happy look pull request anyone dives fixing", "d": "9/2015"}, {"body": "progress using webpack babel react nodeenvproduction set still see message console reactdevtools installed since production mode", "d": "9/2015"}, {"body": "appshore using nodeenv enough compilation need actually define code one way use defineplugin webpack", "d": "9/2015"}, {"body": "gaearon thank tip works fine", "d": "9/2015"}, {"body": "please note use nodeenvproduction development silences many helpful warnings", "d": "9/2015"}, {"body": "zpao would open pr allows disabling", "d": "9/2015"}, {"body": "going close favor since discussion taking place like solution arrived thread", "d": "9/2015"}, {"body": "thanks jimfb", "d": "9/2015"}, {"body": "hi want work bug please direct build instructions react want set workbench regards tapesh mandal", "d": "9/2015"}, {"body": "see readme", "d": "9/2015"}, {"body": "hit well nt figure error quite sometime perhaps make sense sort configuration option nt accept objects children case rendering object purely accidental", "d": "9/2015"}, {"body": "going stop supporting objects children nt going make configurable see causes confusing issues also stops us making advancements going close seems like ca nt make part warning better see related discussion making warning better different way", "d": "9/2015"}, {"body": "spicyj idea handle svg elements likes tried something like works run code chrome debugger however running nt couple edge cases well noscript tags web components breaks tests well nt quite gotten around fixing simple ugly fixes", "d": "9/2015"}, {"body": "hmm svg makes little trickier ideally know whether svg container need handful stuff nt right may wait thanks looking kastermester", "d": "9/2015"}, {"body": "davidleverage made day form id subjectupdate put right track", "d": "9/2015"}, {"body": "installed still got issue get return documentbody referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate articlereactcomponentsetstate article requestselfcallback emittwo requestemit request emitone requestemit incomingmessage emitnone incomingmessageemit endreadablent processtickcallback", "d": "9/2015"}, {"body": "zenwolf still need use experimental function binding operator", "d": "9/2015"}, {"body": "myboon component constructor bound function component instance handler still never called", "d": "9/2015"}, {"body": "error confused difficult trace error", "d": "9/2015"}, {"body": "folks already made error message better please stop commenting", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "infolock thank much sure help someone future another way get error uncaught typeerror typetouppercase function referencing component nt added module exports terrible error message", "d": "9/2015"}, {"body": "could anybody please confirm following context passed ownerownee relationship parentchild relationship whenever comes changed context passed parentchild relationship ownerownee relationship tree subset parentchild relationship tree true would great anybody could shed little light", "d": "9/2015"}, {"body": "correct usually always true possible owner odd things elements creates like render somewhere child also order elementscontextassignments may different ownerownee vs parentchild relationship important components override context variable value first order approximation correct say ownerownee subset parentchild strictly true corner cases also context supported feature", "d": "9/2015"}, {"body": "thanks jimfb helps could give point example might true tried picture one based description gave could nt see clearly", "d": "9/2015"}, {"body": "dupe fixed", "d": "9/2015"}, {"body": "promisereturning function would great help convinced live inside react even addons implementing userland seems like best choice could benefit promise libraries like bluebird actually implement cancelable promises", "d": "9/2015"}, {"body": "wanted let know also causing trouble autogenerated etags like connectexpress since reactids different every request etag different well big deal though since custom etags way get around cost anyway", "d": "9/2015"}, {"body": "qwtel interesting point reason random avoid conflicts multiple serverside renders page perhaps devs object api bloat able provide custom react root id would make sense future likely go away altogether", "d": "9/2015"}, {"body": "check reactelementvalidator causing exceptions using new optimisation", "d": "9/2015"}, {"body": "strml iirc seen using inline elements transform dev build react cc spicyj", "d": "9/2015"}, {"body": "yeah", "d": "9/2015"}, {"body": "meant fix check guess missed yes use prod build react using inlined elements", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "iammerrick", "d": "9/2015"}, {"body": "want able respond new props event shouldcomponentupdate returns false case ca nt use componentdidupdate use", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "helps dry code simplifying logic would open componentdidreceiveprops called initial setup make example starting thread single function", "d": "9/2015"}, {"body": "thoughts think", "d": "9/2015"}, {"body": "jquense jongbeau love get look example exists", "d": "9/2015"}, {"body": "quick workaround forceupdate trigger rerender work latest state simply grabbing store", "d": "9/2015"}, {"body": "sebmarkbage updates issue", "d": "9/2015"}, {"body": "proposal need revised include field per", "d": "9/2015"}, {"body": "sebmarkbage shh working pr sebmck beat", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "sebmarkbage updates issue", "d": "9/2015"}, {"body": "babel supports conjunction react enable transform production eg minifying code", "d": "9/2015"}, {"body": "may suggest notes include detail lifecycle methods especially wo nt work functionsascomponents final release example provided react kind equality use cheers", "d": "9/2015"}, {"body": "stateless component functions shouldcomponentupdate shouldcomponentupdate always returns true", "d": "9/2015"}, {"body": "spicyj thanks clarification smart component render depending vs traditional preferred way go modules work well", "d": "9/2015"}, {"body": "checked stuff closing zpao created separate also looking milestone github", "d": "9/2015"}, {"body": "already fixed see pr closed", "d": "9/2015"}, {"body": "chrome could work around firefox nt cause form submit described simulating click react nt cause form submit either browser", "d": "9/2015"}, {"body": "believe also prevents changing focus render example", "d": "9/2015"}, {"body": "given contested correct behavior autofocus rather abandon browsers agree upon usage rather able something like since syntax probably doable maybe something like", "d": "9/2015"}, {"body": "fwiw able get working using probably better way also perhaps usecase multiple ref support example", "d": "9/2015"}, {"body": "way want within parent well might reactchildrenmap clonewithprops refs nt recommend option given says however cases still might necessary beneficial seem agree cases useful combine common pattern react wrap component abstraction problem absolutely agree edge cases usually propsstate need given example currently possible create abstract component focuses child use case scrollbased animations simply ca nt use never even get close components agreed api implement method everything working really nice moment see scrolling action one components needs refactoring would love drop abstract component mix cleans current top level component ca nt possible call currently looping top level component ideas", "d": "9/2015"}, {"body": "ran problem way constrain ie certain component type", "d": "9/2015"}, {"body": "think something like would discussion maybe sure lot room confusion really nt pair well specialized components", "d": "9/2015"}, {"body": "map always returns array", "d": "9/2015"}, {"body": "sebmarkbage maybe fix", "d": "9/2015"}, {"body": "go error trying add zendesk widget", "d": "9/2015"}, {"body": "nt know feasible nice able full error messages production without performance measurements things slow app", "d": "9/2015"}, {"body": "wordnewscomment", "d": "9/2015"}, {"body": "want chime mention least behavior consistent across input fields textarea textarea treated differently", "d": "9/2015"}, {"body": "uptownhr far know behavior across inputtextarea misunderstanding", "d": "9/2015"}, {"body": "spicyj see", "d": "9/2015"}, {"body": "spicyj better example", "d": "9/2015"}, {"body": "given issue open around months people discussing since verdict seems pretty straight forward input fields least needs adhere one standard treats move forward fix propose changing textarea adhere input fields behave removes text value turns think core issue", "d": "9/2015"}, {"body": "first thing need decide idealcorrect behavior since matter behavioral change one option null clears input element makes uncontrolled another makes input element uncontrolled without resetting value another return defaultvalue another keep current semantics forestall change semantics text areas input fields behave differently avoids introducing subtle changes behavior break people apps decide desired behavior move forward fix cc spicyj sebmarkbage thoughts", "d": "9/2015"}, {"body": "syranide running tabindex issue mean used corresponding dom node component tabindex prop set later removed tabindex attribute set setting unique key component nt seem change anything", "d": "9/2015"}, {"body": "loganfuller something like", "d": "9/2015"}, {"body": "syranide ah see force creation new dom element would work integrate thirdparty library mount would expensive reinitialize time associated dom component changed add extra wrapper static key handle integration would nt performant manually dom element component updates rather forcing creation new one", "d": "9/2015"}, {"body": "loganfuller try thirdparty library maybe helps", "d": "9/2015"}, {"body": "add extra wrapper static key handle integration would nt performant manually removeattribute dom element component updates rather forcing creation new one requires bit manual work best workaround yes", "d": "9/2015"}, {"body": "nt actionable asis still trouble please post minimal repro", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "counting got one looking everywhere sneaky react twin luck nt show duplicates possibilities read doubleloading react script webpack doublebundling reactaddons causing trouble working insidious", "d": "9/2015"}, {"body": "ameensol hopefully set packagejson correctly simply remove reinstall everything usually fixes unless incorrectly configured module", "d": "9/2015"}, {"body": "syranide tried git clone repo reinstall nt issue eventually noticed error happening first navigation similar issue started taking apart navigation menu turns reason putting reactrouter inside reactboostrap causing react go nuts posted findings stack overflow", "d": "9/2015"}, {"body": "think also might something using generated reactrouter root component hierarchy wrapping higher levelcomponent accepts flux instance passes context isolating issue repo gave following error", "d": "9/2015"}, {"body": "nested links thing due invalid html new warning", "d": "9/2015"}, {"body": "nested links thing due invalid html new warning way got new warning days ago beautiful great work", "d": "9/2015"}, {"body": "getting error using npm link require module working ca nt sure caused multiple versions react error go away paste npm module directly app instead using via npm link nt get error using npm module normal way react dev dependency nt think gets installed node modules anyone else run issue come fix thanks", "d": "9/2015"}, {"body": "got error running together", "d": "9/2015"}, {"body": "please report random problems issue file new issues", "d": "9/2015"}, {"body": "trying use shallow rendering mostly working thing left figure recommended way mock events get events pass attempted use method directly test seems way say something could post stack overflow little luck finding good information shallow rendering online anyone experience shallow rendering give help hero source code", "d": "9/2015"}, {"body": "issue shallow rendering create new issue post", "d": "9/2015"}, {"body": "new issue please", "d": "9/2015"}, {"body": "trevordmiller might find helps providing higherlevel assertions sort thing particular case would avoid asserting event handler anchor test different test would want call test handler", "d": "9/2015"}, {"body": "davidgilbertson super late reply scry fancy word find sure nt use find maybe avoid confusion plural singular forms whose names would otherwise differ one", "d": "9/2015"}, {"body": "scry legacy internal fb apis reason", "d": "9/2015"}, {"body": "like trevordmiller keenly lookout way correctly unit test event handling react code documentation anyone could point looked nt seem something scratches particular itch scenario cut const shallowrenderer testutilscreaterenderer shallowrendererrender problem looks like class problem extends reactcomponent constructor props super props thisonclick thisonclickbind render const alert thisprops const cssclass cellstatetocssclass alertcellstate return onclick thiscontextroutertransitionto thispropsalertroutename thispropsalertrouteparams like able assert wired component loss", "d": "9/2015"}, {"body": "actually want assert clicking interacts router pass fake context router mock try simon call apologies brevity phone", "d": "9/2015"}, {"body": "hi glenjamin thanks responding clear mock successfully comes context digging source came onclick triggers transitionto work progress gt const alerts stubsummarystoregetstatewithcompanyconnectionstoreerrorsthenwarnings const alert alerts const shallowrenderer testutilscreaterenderer const transitiontospy jasminecreatespy transitionto const mockcontext router transitionto transitiontospy shallowrendererrender mockcontext however dies death test failed failed tests summaryproblem onclick triggers transitionto work progress phantomjs windows typeerror undefined object evaluating thiscontextroutertransitionto onclick c lt e c lt e makes think getting context mocking wrong know successfully mock context using jasmine probably guessed feeling close", "d": "9/2015"}, {"body": "using react probably hitting difference parent amp owner context skin deep wrapper helps context example test suite short answer wrap render another function call let skin deep set context problem go away", "d": "9/2015"}, {"body": "using react yes port issue resolve might give crack case rc", "d": "9/2015"}, {"body": "problems upgrade raised issue return later think", "d": "9/2015"}, {"body": "updates thx workaround hope work fixed", "d": "9/2015"}, {"body": "see svg fragment identifiers work different technic lennart hildebrandt notifications githubcom show example using nonreactsvgstuff used react able set href attribute image tags reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "9/2015"}, {"body": "branch managed get namespaced attributes work using camelcase renders", "d": "9/2015"}, {"body": "also get proper namespace attribute namespace", "d": "9/2015"}, {"body": "quite sure understand mean give explanationexample", "d": "9/2015"}, {"body": "able get links working also need attribute namespace react handle example", "d": "9/2015"}, {"body": "pass dom node", "d": "9/2015"}, {"body": "lennerd understanding xmlns xlink required html", "d": "9/2015"}, {"body": "looking svg config tests seems like namespace passed dom node method svgdompropertyconfigjs dompropertyoperationstestjs", "d": "9/2015"}, {"body": "sounds promising would great remove dependency", "d": "9/2015"}, {"body": "yes work upcoming release", "d": "9/2015"}, {"body": "hi benchmark react core engine building framework like reactnative find wasted time major bottleneck nodes sandybridge made sure culprit broken render implementation gc", "d": "9/2015"}, {"body": "notice transition enteractive css rule enter thank moving class fixed", "d": "9/2015"}, {"body": "curious issue closed seems legit issue", "d": "9/2015"}, {"body": "part html works specific react", "d": "9/2015"}, {"body": "know old closed issue wanted chime simple solution people run happens mutate value dom representation different state value set simple solution add ref mutate ref value manipulated one update state quite clean solves problems", "d": "9/2015"}, {"body": "maybe help", "d": "9/2015"}, {"body": "relatedtarget works focusout blur", "d": "9/2015"}, {"body": "one issue related isomorphic apps context setstate component mount comes mind rather one mess said good practice try call instead immediate avoids triggering rerender necessary using doublerender context pattern render server client client rerender really nt problem component rendered clientonly eg using subsequent requests nt even hit server next page visit client rendering reasonable clientonly stuff two methods example initialization based browser features state immediate stuff timeouts ajax dom using pattern run component context says rendered server target clientonly runs component thinks server client stuff first load first run server target actions may trigger checksum errors nt know target switches client even defer browser target still issue needed avoid doublerender rendered client", "d": "9/2015"}, {"body": "exactly issue zendesk widget thanks suggesting trick worked nt able make work react hot loader requires beginning inject production", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "chenglou syranide happy make pr weekend wanted possible detect cases return object although latter two may challenge make separate prs command either latter two start look slow messy", "d": "9/2015"}, {"body": "thanks helpful would great warning showed offending line code console comes reference warningjs nt helpful", "d": "9/2015"}, {"body": "side note instead", "d": "9/2015"}, {"body": "milesj set attribute using using generate warningerror", "d": "9/2015"}, {"body": "aware language construct simply wrap attribute quotes", "d": "9/2015"}, {"body": "milesj wondered guess reactjs developers good reason", "d": "9/2015"}, {"body": "please read discussions links reasoning covered", "d": "9/2015"}, {"body": "syranide dhruvbhatia created sample based syranide suggestion would love hear comments im pretty new react", "d": "9/2015"}, {"body": "per current plan pull linking controlled components discussed easy create wrappers expose behavior including undefinednull reset behavior described issue find behavior useful would encourage publish npm module git repository provides functionality wrapper component people use since something plan supporting core going go ahead close issue", "d": "9/2015"}, {"body": "addon actually react process split core react dom reactdom guessing reactsvg finally come", "d": "9/2015"}, {"body": "filter", "d": "9/2015"}, {"body": "phantom bump trying lot svg work react lot issues like please support svg attribute would great able define without fork change react let know help make reality", "d": "9/2015"}, {"body": "spicyj nt got explain whole point keymirror", "d": "9/2015"}, {"body": "nt got explain whole point keymirror google closure compiler advanced mode powerful uglifyjs compress code like crazy advanced mode property names define crushed unless defining strings code like closure compiler advanced mode compress break code two options use string property name opt crushing works miss nice optimization opportunity b use helper makes sure keys values match", "d": "9/2015"}, {"body": "random usage nt really supported moved react closing", "d": "9/2015"}, {"body": "nice gajus concerned performance cost yes deactivating production mode would nice", "d": "9/2015"}, {"body": "yes right easily disable production", "d": "9/2015"}, {"body": "worth running saw code relied firing even checkbox already checked wanted know whether intentional stable behavior sounds like thanks yall", "d": "9/2015"}, {"body": "vague thoughts solution exists supports changing radio button api feels dangerous might apps depend passing prop radio solution exists would nt break apps seems lead statebased solution already written etaig paranoid concern statebased solution whether way universe could possibly get sync guess click events way change checked state aside direct programmatic changes though feel like rest react nt defend programmatic changes might okay ignore concerns", "d": "9/2015"}, {"body": "guess get sync bad use stored state decide whether click event really change wo nt like deadlock checkbox make ignore inputs worstcase scenario someone screws state underneath us miss bad fire redundant one bad p gut says apps recover even think programmatic changes fire events one happens could try catch update stored state accordingly", "d": "9/2015"}, {"body": "matchu nt write pr yet though tried versions see possible write weekend post maybe make pr one", "d": "9/2015"}, {"body": "sweet thanks etaig incidentally today discovered new issue synthetic events radio buttons might interesting followup project since already explored react radio button event system might tired fine p app gon na patch time anyway", "d": "9/2015"}, {"body": "getting error using reactbootstrap ui components descriptive allowed show much code added two reactbootstrapbuttons text dynamically change something looks like modal two select boxes select box supposed representing button change first select change update first button text change second select update second button text notice modal child render function shown wrapper contains modal table element make sure state changes modal element makes callback parent function setstate based select drop downs modal popup happens click first button popup shows dropdowns displayed change dropdown button text change change dropdown button doesnt change click gives uncaught error invariant violation reactmount two valid unequal nodes refesh page repeat steps second button opens modal second drop work first drop doesnt close modal try open button error occurs uncaught error invariant violation reactmount two valid unequal nodes believe happens involve states dynamic ui interactivity something gets mounted state value pass make dynamic change mounted value remain react nt believe element needs changed rerender makes another copy top id different value garbage collection needs handled properly rerender case typical childtoparent communication", "d": "9/2015"}, {"body": "able fix changed made regular html yes something children nodes depth component case react component children", "d": "9/2015"}, {"body": "might also want checkout velocitytransitiongroup uses velocityjs instead css transitions though made minor addition component fork allows specify transitiontype stay set another transitionname set later seems like adapted version used", "d": "9/2015"}, {"body": "rc asked specify durations fixed", "d": "9/2015"}, {"body": "progress issue sure rootcause pages rendered react scrolling extremely slow firefox mobile android eg react website", "d": "9/2015"}, {"body": "site try commenting logic refreshscrollvalues see makes difference happy prioritize syranide try get", "d": "9/2015"}, {"body": "spicyj site example react amp fluxible page see exactly issues scrolling firefox mobile applied changes manually solves problem issue might unrelated problem investigate thanks considering prioritize much appreciated", "d": "9/2015"}, {"body": "doctype fullpage server rendering", "d": "9/2015"}, {"body": "usecase use react render emails using would nice add conditionnal comments outlook", "d": "9/2015"}, {"body": "react rendering tag least test utils raises invariant violation sure mentioning make new issue figured applies", "d": "9/2015"}, {"body": "zackify unrelated please file new issue steps repro", "d": "9/2015"}, {"body": "happened also apparently adblocker culprit", "d": "9/2015"}, {"body": "rendered version easy setstatedeep might guess best get", "d": "9/2015"}, {"body": "impossible read mobile pity reading docs task anywhere width covers hard font size tiny", "d": "9/2015"}, {"body": "flowtypeorg responsive steal", "d": "9/2015"}, {"body": "kind workaround works", "d": "9/2015"}, {"body": "titobouzout nav bar screwed otherwise looks ok", "d": "9/2015"}, {"body": "revisit next redesign website", "d": "9/2015"}, {"body": "already using babel serverside code say via add inline env transformer get around problem", "d": "9/2015"}, {"body": "update one", "d": "9/2015"}, {"body": "original issue fixed relanded gregorym likely experiencing different issue perhaps", "d": "9/2015"}, {"body": "anyone interested released module conditional rendering feedback welcome", "d": "9/2015"}, {"body": "stoeffel looks like great solution thanks sharing", "d": "9/2015"}, {"body": "would like bump maybe undocumented purpose people using still using quite painful especially trying upgrade react nt sure contexts feature changed libraries breaking reasons documented purpose least put warnings people using saying either nt using officially supported careful using likely change also change would nice able see worked older versions case need work old project", "d": "9/2015"}, {"body": "react warned context usage would essentially impossible use nobody wants use library causing react output junk warnings", "d": "9/2015"}, {"body": "ericwooley nt documented think pretty consistent telling people supported feature used yet try add warnings change context breaking way undocumented intentionally ca nt add global warning gaearon said would cause libraries like reactrouter start emitting warnings everyone projects", "d": "9/2015"}, {"body": "would essentially impossible bad thing", "d": "9/2015"}, {"body": "react warned context usage would essentially impossible use nobody wants use library causing react output junk warnings imo would perfect hopefully package maintainers figure way accomplish things without depending unsupported undocumented features weather officially supported people using major packages lack documentation hindrance warnings would discourage usage packages see would nt desirable several large packages use brings back full circle contexts needing documentation documenting supported nt make sense put big warning documentation supported document works point time", "d": "9/2015"}, {"body": "oh god please oh please oh please keep feature react saving hide bigtime project allowing easily let components communicate without passing props place without add complexity app adding something like flux redux issue noticed using use context preserved using works read somewhere properly handle passing context downward", "d": "9/2015"}, {"body": "bad thing better way implement something like lt react router lt react redux without resorting singletons please tell much like drop context usage ca nt find way implement server rendering independent requests keeping sane component api", "d": "9/2015"}, {"body": "much like drop context usage please nt ruin lives building saas meteor cleansimple way include fluxlike architecture meteor moment", "d": "9/2015"}, {"body": "please nt free use code saying troubles halfbaked would gladly avoid knew imo would perfect hopefully package maintainers figure way accomplish things without depending unsupported undocumented features package maintainer assure many people talked eg react router folks would nt touch context ten foot pole possible figure way accomplish important things mostly related server rendering sideway data without unfortunately best knowledge context solution important use cases right", "d": "9/2015"}, {"body": "love jump redux problem right meteor use something like browserify webpack include nicely packaged meteor package redux meteor run issues getting browserify npm container working curious find halfbaked context far smooth sailing annoying thing run maintain duplicates context items top level one define type one link", "d": "9/2015"}, {"body": "nicely packaged meteor package redux helps umd build cdnjs topic like discuss redux better issues instead curious find halfbaked context example", "d": "9/2015"}, {"body": "example bit beyond comprehension afraid somewhat new react going forward beyond think would cool react sort builtin easy way components quite far apart child greatgreatgreatgrandparent context polished something else replaces", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "worth created work around component worked core", "d": "9/2015"}, {"body": "understand correctly simulate event firstclass pointer event support react correct looked source code issue impressed sophistication react event system news pointerevent support yet though", "d": "9/2015"}, {"body": "meteor coffeescript react jade", "d": "9/2015"}, {"body": "really digging keymaster componentdidmount function key esc thisonclose", "d": "9/2015"}, {"body": "super rad use decorators declaritive way like js class component globalevent click onglobalclick e handle window click render render", "d": "9/2015"}, {"body": "nt allow attribute impossible follow wcag spec enhance accessibility non focusable elements default like simple", "d": "9/2015"}, {"body": "almirfilho work fine", "d": "9/2015"}, {"body": "syranide thanks tip", "d": "9/2015"}, {"body": "chromakode thx works project", "d": "9/2015"}, {"body": "without attribute onclick event navigation working across kinds browsers ios platform test ios put styling bypass ios restriction press hold copy paste text mechanics", "d": "9/2015"}, {"body": "problem event overlay suppose dismiss menu clicked tapped changing style like shuson said worked nt required", "d": "9/2015"}, {"body": "said fixed released soon", "d": "9/2015"}]