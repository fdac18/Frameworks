[{"title": "catch ca nt add model collection twice error collectionfetch", "body": "building app models lazy load related models needed upgrading today run problem multiple models loading models models loaded twice triggers error question catch commented error", "num": "916", "d": "1/2012"}, {"title": "passing attributes instead delta validate really good option", "body": "according commit method receives computed new state attrs delta means longer way knowing attributes changed performing validation nt missed something problem validating form input user filling form usually want validate form elements changed yet notify user errors elements changed maybe jashkenas comment", "num": "914", "d": "1/2012"}, {"title": "deleting reinserting viewel dom", "body": "element event bindings insert dom insertion delete parent element dom later reinsert element dom event bindings lost use thisdelegateevents get back expected events bound would still hold even element removed dom misunderstanding thanks", "num": "913", "d": "1/2012"}, {"title": "silent true overloaded set", "body": "change change event detected set function setting property silent true setting property back original value without silent true trigger change event silent true previousattributes object changed set checks object code jsfiddle javascript var model backbonemodelextend initialize function thisbind change name thischange change function model name consolelog model consolelog name consolelog changed name thisprevious name thisget name var model new model name modelset name silent true modelset name", "num": "912", "d": "1/2012"}, {"title": "backbonehistorystart documentation", "body": "docs backbonehistorystart application served root url domain sure tell history root really option backbonehistorystart pushstate true root publicsearch root set publicsearch leading leading seemed work older versions backbone upgraded today stopped working thanks jeff", "num": "905", "d": "1/2012"}, {"title": "modelsave longer passes model error callback", "body": "given error callback callback receiving model arguments instead receives response object twice appears broken combination presumably needs passed callback instead joneath could nt figure good way test though test suite overwriting way never actually calls error callback", "num": "904", "d": "1/2012"}, {"title": "bind multiple actions one route", "body": "backbone registers routes calls last handler fixed override backbonehistoryprototypeloadurl method backbonehistoryprototypeloadurl function fragment thisfragment thisgetfragment fragment", "num": "900", "d": "1/2012"}, {"title": "initial page load route triggered", "body": "trying get grip backbone one thing confuses routes following code var router backbonerouterextend routes indexhtml hello var router new router backbonehistorystart pushstate true root app nt hello function get triggered go something wrong", "num": "899", "d": "1/2012"}, {"title": "include viewsetelement documentation", "body": "currently set programmatically event delegation work properly take example following code works acting ca nt seen without digging little bit code either documentation specify also needs set addition indicate used", "num": "895", "d": "1/2012"}, {"title": "plan new tagged release", "body": "long time since using production things piling master branch like use plan new release anytime soon ca nt find anything roadmap anywhere people running master branch production anyway edit hope nt sound ungrateful excited use latest greatest", "num": "894", "d": "1/2012"}, {"title": "query parameters confusing router", "body": "currently possible use google analytics backbone controlled routes backbone router understand query parameters routes try route profile route fires username passed rather saw discussion nt need query parameter support per se would nice backbone could told ignore query parameters done code", "num": "891", "d": "1/2012"}, {"title": "l variable remove method global scope", "body": "l variable remove method line declared var keyword therefore global scope causes problems triggering remove events causes calls remove method", "num": "890", "d": "1/2012"}, {"title": "enhance way reference view subelement", "body": "proposal common situation working backbone project common access views subelements many times put simple example javascript var myview backboneviewextend el mydiv hidebutton function mybutton hide showbutton function mybutton show works fine button id changes future change id places view real project demand even changes always end something like javascript var myview backboneviewextend el mydiv initializeelements function thiselements mybutton mybutton initialize function thisinitializeelements hidebutton function thiselementsmybuttonhide showbutton function thiselementsmybuttonshow approach fine nt like manually initialize every view every single time store jquery reference view subelements also easy forget think best approach would backbone view object works similar way object eg javascript var myview backboneviewextend el mydiv elements mybutton mybutton hidebutton function thiselementsmybuttonhide showbutton function thiselementsmybuttonshow function called backboneview constructor replace value key jquery object request pull request soon would love hear comments please note would useful cases html elements existed view instantiation", "num": "889", "d": "1/2012"}, {"title": "removal add remove", "body": "like discuss removal realize methods part public api course quite useful nonetheless methods exposed functionality otherwise available backbone therefore useful hook points extensions least backbonerelational took single snippet data either model object might contain somewhere return model operated upon since simply return complete collection used determine especially passing json sortofworking workaround backbonerelational using adding calling using afterwards iterating diff quite performance penalty compared current situation especially considering many people use relational exactly automates handling large amount models whole process repeated every single addition chance two could reinstated", "num": "888", "d": "1/2012"}, {"title": "configurable window history management", "body": "thirdparty javascriptproviders useful load javascript sandboxed iframe example lightningjs however breaks history management assume running window started branch support making take optional argument nt tested old ies yet zeptotodo approach seems okay fix ready pullrequest", "num": "885", "d": "1/2012"}, {"title": "made kindle edition web documentation", "body": "frontend docs bundle hope useful cheers dan", "num": "884", "d": "1/2012"}, {"title": "take another run emberjs", "body": "release since last time took dive sproutcoreamberemberdatajs anything worth borrowing let sure take another run personal favorite feature think would benefit backbone thread would ideal place mention", "num": "882", "d": "1/2012"}, {"title": "lost model data one model keys named attributes", "body": "using fetch populate model response json contains attributes key backbone internal attributes key overwritten causes keys json response get stored model observed modelfetch lt ajax response returns attributes consolelog modelattributes yields expected either line snippet yield attributes exception thrown error produced citing naming collision", "num": "880", "d": "1/2012"}, {"title": "play buttons appear tutorial", "body": "repro steps launch tutorial scroll playable snippet eg first one backbonevents expected play button appears clicking plays demo observed play button appears note setting page mode resolves issue", "num": "878", "d": "1/2012"}, {"title": "create backbone views jquery syntax", "body": "following snippet lets create backbone views jquery syntax eg could something like rolled backbone example coffeescript coffeescript class windowslideshow extends backboneview initialize options consolelog slideshow initialize consolelog el plugin definition fnslideshow options options slideshow data slideshow slideshow idx el optionsel el el data slideshow new slideshow options gist", "num": "877", "d": "1/2012"}, {"title": "missing docs internal usage viewcollection viewmodel", "body": "learning backbone found options handled special ways views information available special means may ask someone give info found supposed initialize view reference rendering like internal usage models anything collections thanks answers", "num": "876", "d": "1/2012"}, {"title": "routerinitializeroute", "body": "want implement backbonejs authentication expected see function like would allow write code like nt found backboneway submit pull request", "num": "874", "d": "1/2012"}, {"title": "setmethod backbonemodel fails response objects attributes property", "body": "fix looks like javascript backbonemodelprototypeset function attrs options extract attributes options options options attrs return", "num": "871", "d": "1/2012"}, {"title": "modelset validate silent false", "body": "hello modelset want change model want events triggered call modelset silenttrue validate function called thanks alot wolfgang current backbonejs source code set function key value options run validation optionssilent amp amp thisvalidate amp amp thisperformvalidation attrs options return false", "num": "870", "d": "1/2012"}, {"title": "backbonehistorycheckurl uri malformed error", "body": "uri special symbol checkurl throws urierror exception reproduce hook backbone router search qfat change url got uncaught urierror uri malformed checkurl", "num": "868", "d": "1/2012"}, {"title": "isnew use thisidattribute instead thisid", "body": "starting backbone noticed thisidattribute wondering isnew check thisidattribute currently hardcoded check thisid", "num": "864", "d": "1/2012"}, {"title": "failure collection adding models pass validation", "body": "hello seems check collectionadd method case preparemodel returns false happens call modelon raises error however nt know expected behavior silently ignored terminate", "num": "861", "d": "1/2012"}, {"title": "performvalidation public", "body": "nice able manually invoke validation model without actually set values example binding blur event textbox like trigger validation associated attribute model without call model obviously call method feel though hack prefixed underscore", "num": "860", "d": "1/2012"}, {"title": "modeldestroy nt send id request header", "body": "use default behavior rest php server defined url model everything right create update delete method id send header like others methods source code find dont include delete method", "num": "855", "d": "1/2012"}, {"title": "routing issues created merged pull request", "body": "copying comments issue breaks old routes needs documented somewhere breaks router current release currently available release public github pages site documentcloudgithubcombackbone calling match route change causes matched route leading slash support correct action break every site routing used leading slash discovered using pushstate routing paths gave path nice structure leading fragment slash issue preventing rerouting fragment complication introduced backbone longer knows trying route page previously tried route page router would never receive request routes", "num": "849", "d": "1/2012"}, {"title": "routing agnostic leading trailing slashes", "body": "currently defining routes equal also equal backbone consider routes equal routing agnostic leading trailing slashes", "num": "848", "d": "1/2012"}, {"title": "size empty collection", "body": "using length size due fact models attribute already contains model models assigned", "num": "844", "d": "1/2012"}, {"title": "error documentation views behave models updated", "body": "hi relatively new backbone actually turning docs lot whenever ui action causes attribute model change model triggers change event views display model data notified event causing rerender nt write glue code looks dom find element specific id update html manually model changes views simply update think part needs work whenever ui action causes attribute model change model triggers change event correct views display model data notified event causing rerender nt write glue code looks dom find element specific id update html manually model changes views simply update think understand backbone correctly achieving would require something like perhaps view initialize method note actually appreciate loose eventbased coupling documentation suggests magic defaults something find anywhere code", "num": "843", "d": "1/2012"}, {"title": "documentation errorbug backboneviewmake", "body": "documentation states following code example regarding viewmake javascript var view new backboneview var el viewmake b classname bold bold makedemo append el however classname incorrect state class example source code comments correct matter javascript small amounts dom elements fullblown template isnt needed use make manufacture elements one time var el thismake li class row thismodelescape title using code sample suggested documentation produce invalid markup", "num": "841", "d": "1/2012"}, {"title": "overriding default methods", "body": "overriding methods native model set save get according documentation overriding require return statement order code work must return otherwise code bombs", "num": "839", "d": "1/2012"}, {"title": "removing duplicate list cause return", "body": "specifically hacking removing addingremoving duplicate items list causes problem something funky got improperly return nonrandomly going steps reproduce collection call list give method takes date range calculates items list within range saves makes ajax request items within range using extra parameters importantly passing query range question removes items list prevents duplicates gets rid items deleted server within range note however time fires data already parsed added collection precalculated also note ranges overlap partially completely exactly whatever use method twice ensuring overlap testing purposes consider three groups items fall first range second ranges see funky behavior last case happens well etc collection return items want collection ids result happens items already collection removed ajax request basically would seem add item collection twice remove one breaks tested general case yet within situation also fairly straightforward work around using directly manner never duplicate objects note first posted comment", "num": "836", "d": "1/2012"}, {"body": "agree simple use case could init blank invalid model write something like enable disable ui would handle javascript render function set initial state selftogglestate false toggle error triggered otherwise ie model validate thismodelbind function ev selftogglestate ev error", "d": "1/2012"}, {"body": "agree throwing error ideal way handle invalid user input data source likely cause invalid model error usual state affairs handled without throwing however difficult handle constructing model since one unable bind error handler model without reference throwing error better solution think also always handle using untrusted data construct model", "d": "1/2012"}, {"body": "work need initialize object valid hash always want javascript var mymodel backbonemodelextend validate function attributes attributesname return give name var model new mymodel game", "d": "1/2012"}, {"body": "pgherveou good point nt think", "d": "1/2012"}, {"body": "like check current state model available case nt really best suited validating html forms best suited validating state model like validate form think simple function would easier", "d": "1/2012"}, {"body": "thing using form validation works pretty good using backbonemodelbinding backbonevalidation plugins change pretty much makes impossible would definitely like specify validation twice", "d": "1/2012"}, {"body": "btw since validate effectively prevents invalid values set model nt see need validate attributes every time attributes changed always valid", "d": "1/2012"}, {"body": "depends method use remove element dom use remove bindings lost however using detach remove bindings backbone provides remove easily add method detach", "d": "1/2012"}, {"body": "correct exactly supposed work temporarily set value silently change back original value perspective app change occurred", "d": "1/2012"}, {"body": "yes definitely bug either docs new release issue", "d": "1/2012"}, {"body": "think complex initially thought removing leading root fix problem seems break navigation routes get appended url box browser rather replaced right either normal navigation work initial page load work removing leading root path", "d": "1/2012"}, {"body": "thanks fix confirmed working case", "d": "1/2012"}, {"body": "wrapping head around figure reason change wraperror behavior far tell jquery zepto always returning xhr object first argument failed find code else wraperror used outside ajax response context could alter behavior leftover changes got removed means could pretty much revert method delete remove model function params", "d": "1/2012"}, {"body": "nope correct every route single action nt want multiple functions called potentially undefined order url loaded", "d": "1/2012"}, {"body": "disagree example one screen one active router time", "d": "1/2012"}, {"body": "yes probably usually nt routes actual html pages would served server need help try irc channel quick responses mailing list slow ones", "d": "1/2012"}, {"body": "seems like new feature documented part next release", "d": "1/2012"}, {"body": "yes correct upgrade instructions describe exactly", "d": "1/2012"}, {"body": "thanks clarification nt able find commit added el", "d": "1/2012"}, {"body": "wondering", "d": "1/2012"}, {"body": "jashkenas mentioned plans version next backbone version", "d": "1/2012"}, {"body": "hoping tag push release week want upgrade documentcloudorg first production ensure unexpected wrinkles", "d": "1/2012"}, {"body": "hm could query params always passed last paramter route expected could handled user callback route wunderkitrouter instance listening route event somewhere else would always added well considered capturing named params splats", "d": "1/2012"}, {"body": "well yes would nice query parameters passed separate parameter route functions much issue trying decided separated plugin would nice though even backbone nt include param parsing code", "d": "1/2012"}, {"body": "aye would nt go far parsing anything though believe good idea break routing something like google analytics used mentioned maybe common one page apps imagine uses apart landing pages would also nice nt lost case part url wanted something would nt drop plugin imagine situation project production servers running nice nice campaign points landing pageview app suddenly nothing works adding tracking params nice would likely super annoying debug good entry least case someone stumbled problem future googling wrong hehe", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "interesting tempted add query parameters additional argument route function suggested end think backbone apps definitely query params app urls serverside url convention nt much useful place clientside routing nt supporting default want behavior easy enough implement hey presto", "d": "1/2012"}, {"body": "jashkenas shareable urls share state without query params putting everything url convenient hard handle optional params", "d": "1/2012"}, {"body": "usually want share state relevant content page initial example certainly even sharing heavily optional state think search queries often nicer share url based clean search syntax translate query params", "d": "1/2012"}, {"body": "fixed thanks reporting", "d": "1/2012"}, {"body": "nt think baked methods need extra call could one could something like javascript var multielementview backboneviewextend constructor function var someotherview multielementviewextend elements b b var v new someotherview el foo consolelog velements b jquery objects", "d": "1/2012"}, {"body": "means time create new jquery object make sizzle dom search call usually using templating woudl nt even access dom view rendered need make much smarter cache jquery object first search anyways nt think nt part backbone need quick references elements define render initialize method imo", "d": "1/2012"}, {"body": "something similar thecloudlesssky suggested right created base view converts jquery selectors jquery objects extend views one spinejs something like think pretty useful thanks comments", "d": "1/2012"}, {"body": "one thing thecloudlesssky suggestion possible refer jquery reference object method since calling constructor constructor invokes wont contain jquery references yet", "d": "1/2012"}, {"body": "duplicate previous tickets take look see conversation subject nt something builtin backbone", "d": "1/2012"}, {"body": "afraid ca nt part point new change able optimize slicing list models single operation breaking individual functions previous would revert improvement hopefully better override able come perhaps wrap record ids models added removed beforehand proceed", "d": "1/2012"}, {"body": "ca nt well sounds dramatic enough alright optimization probably possible going quite tricky since far uncommon adding stuff nt yet nt even yet plain object afterwards", "d": "1/2012"}, {"body": "another idea override know new models coming finishes run recorded new ones", "d": "1/2012"}, {"body": "pauluithol able work around overriding calling object passed essentially renders call noop gives list added models let know solution nt work interested reasons", "d": "1/2012"}, {"body": "overlooked one look plays extensions backbone two major things basing hooking backbone handle either use default backbone behavior take control adding action let know surprised nt throw errors testing wunderkit vs master", "d": "1/2012"}, {"body": "thanks yes looking bit reluctant relying internal method danger eliminated give try looks like work pretty well", "d": "1/2012"}, {"body": "whoa fancy loading js main window iframe applying main window would desirable", "d": "1/2012"}, {"body": "short iframe sure code unaffected whatever happens window loads code whether conflicting versions jslibraries libraries crazy stuff like messing prototypes builtins especially desirable third party javascript providers covered depth lightningjs readme", "d": "1/2012"}, {"body": "looks like fairly invasive patch something still hard time finding use third party javascript one thing think would probably never want use loaded third party script advertisements widgets business monkeying url bar given want use probably thirdparty sure change making feel free course patch copy", "d": "1/2012"}, {"body": "neat love could add link documentation backbone wiki long planning keeping date also consider posting mailing list", "d": "1/2012"}, {"body": "ca nt guarantee date yet write automated build process updates ebooks sources periodically implemented eventually", "d": "1/2012"}, {"body": "looks like folks nt favorite features suggest take run source docs", "d": "1/2012"}, {"body": "looked emberjs docs ultimately found one feature thought might worthwhile discuss including backbone computed properties may nice addition desired occasional ability ride setter getter property perform calculation aside found basic philosophical approach emberjs backbone differed significantly making ember features incompatible backbone way things", "d": "1/2012"}, {"body": "yes computed properties great think best functions magic fauxvalues need additional fanciness nt really want deal caching invalidation want put logic directly function perhaps section documentation describes simple computed properties", "d": "1/2012"}, {"body": "think section docs detail backbone way common practices would helpful lot things done backbone nt immediately obvious first glance particularly issues opened could addressed common practices section detailing suggested backbone way feature", "d": "1/2012"}, {"body": "simple imagine using kvo plugin computed field interesting updating view either firstname lastname changed however change event automatically propagate custom field already requires extra code take care ember believe declare dependencies computed fields said think ember approach incorrect well believe computed fields view logic put view model instead keeping model model pure", "d": "1/2012"}, {"body": "simple make simple often simple simply listening view fine computed property otherwise listen work well", "d": "1/2012"}, {"body": "great rolling kvo however two plugings use backbonemodelbinding synapse", "d": "1/2012"}, {"body": "sorry fo intromission proposed thing pr time rejected suited plugin feature repeat said pr could bring light big spectrum actual plugins want code api proposal included like see feature analyzed stressed thrown away could big step forward ps sure verbs wrong please sorry eventually bad use english", "d": "1/2012"}, {"body": "nwhittaker thanks reporting believe addressed nt cause issues want patch current version backbone", "d": "1/2012"}, {"body": "fix apparently currently master go backbonejsorg next release", "d": "1/2012"}, {"body": "hi nagyv documentation backboneview constructor several special options passed attached directly view model collection el id classname tagname thing special passing options directly attached view ease access interested relevant source modelcollection completely observe events use data iterate models etc answer question", "d": "1/2012"}, {"body": "nagyv also docs happens initialization hope helps", "d": "1/2012"}, {"body": "yes thanks", "d": "1/2012"}, {"body": "also manipulations nogo called route initializing", "d": "1/2012"}, {"body": "seems pretty straightforward thanks krebbl", "d": "1/2012"}, {"body": "found bug clone method related issue solution", "d": "1/2012"}, {"body": "krebbl good catch addressed", "d": "1/2012"}, {"body": "point silent changes allowed twiddle internal state model temporarily without actually making change later attribute actually changes validation runs events emitted would nt make sense emit event making silent change", "d": "1/2012"}, {"body": "yes indeed malformed url responsible correctly encoding urls passing router", "d": "1/2012"}, {"body": "thought early submitted pull request thisid thisidattribute normalized hood", "d": "1/2012"}, {"body": "hm interesting would willing elaborate link discussion somewhere sheds light thanks quick answer tbranyen", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "unfortunately believe raising error made error message clear thanks ticket", "d": "1/2012"}, {"body": "call method", "d": "1/2012"}, {"body": "going say nt trigger error however thought trying realized nt really want trigger error model error case really belongs view", "d": "1/2012"}, {"body": "yes delete requests body url contain id model deleted", "d": "1/2012"}, {"body": "thanks reply understand works urlroot url ca nt call destroy method model collection mycollectionget id destroy nt work id url mycollectionget id save name newname works thanks", "d": "1/2012"}, {"body": "id url unless overridden function prevent", "d": "1/2012"}, {"body": "thanks lot undestrand know logic sorry mistake", "d": "1/2012"}, {"body": "yes need addressed patch reverted preferably", "d": "1/2012"}, {"body": "whew scared saying issue nt case router still correctly fires route actually changes documenting change leading slashes bad idea yes documented next version backbone released", "d": "1/2012"}, {"body": "jashkenas looking test nt break examples giving breaks passing multiple times note leading slash whatever defined router rooturl", "d": "1/2012"}, {"body": "right never use leading slashes described could always strip way guess", "d": "1/2012"}, {"body": "backbone prescriptive like developer wants url structure would make url look like without using leading slash somehow supported newer rooturl feature", "d": "1/2012"}, {"body": "backbone prescriptive leading slashes wo nt play well pushstate", "d": "1/2012"}, {"body": "opinion thing even though modern frameworks like django make mistake allowing people redirect latter former relative paths calculated current path path must start trailing slash absolute", "d": "1/2012"}, {"body": "becomes bigger problem different frameworks different servers choose strip trailing slashes", "d": "1/2012"}, {"body": "jscheel suggest example might play bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing", "d": "1/2012"}, {"body": "jayred bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing web servers treat differently unless url routing used front rails django example forces implicit normalise url says web server look index file inside directory similar whereas says look file named definitely different things map directly file system google note", "d": "1/2012"}, {"body": "bradleywright server standpoint absolutely right user perspective user visits site typing expect get page preferred format right create two routes backbone accomplish", "d": "1/2012"}, {"body": "resource served two different urls bad practice wrong one redirecting canonical one whichever preference point user fine implementation detail whatever using route requests application server imo backbone nt make assumptions things like feel route put backbone canonical one mix two", "d": "1/2012"}, {"body": "yep afraid terms backbone routes nt clientside trailing slash indeed significant route looks like certainly nt making default record never using leading slashes backbone routes trailing characters business", "d": "1/2012"}, {"body": "know issue closed really ask problem leading slashes gmail twitter personally think indexhtml login much attractive indexhtml login realize may personal preference reason preventing behavior notice done", "d": "1/2012"}, {"body": "think actually forcing", "d": "1/2012"}, {"body": "seeing c new backbonecollection backbonecollection clength", "d": "1/2012"}, {"body": "problem wanted initialize collection empty set models options used something like c new backbonecollection options instead c new backbonecollection options", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "yes documentation intended imply way backbone apps behave written clarify", "d": "1/2012"}, {"body": "great much clear", "d": "1/2012"}, {"body": "nope works fine new backboneview make b classname bold bold", "d": "1/2012"}, {"body": "tried got wrote bug jquery version using tried w sent ipod jan jeremy ashkenasreply replygithubcom wrote nope works fine new backboneview make b classname bold bold reply email directly view github", "d": "1/2012"}, {"body": "thanks reporting recent versions jquery regression prevents old behavior", "d": "1/2012"}, {"body": "problem thanks quick response", "d": "1/2012"}, {"body": "way code bomb provide test case something like", "d": "1/2012"}, {"body": "code stops working fails return code works make large scale application work work works", "d": "1/2012"}, {"body": "general documentation nt say one way another supposed return overriding particular method recommend reading source method overriding overriding", "d": "1/2012"}, {"body": "dont understand know method saying documentation say need return however order code work must stackoverflow someone said way got override work", "d": "1/2012"}, {"body": "sounds like trying chain set without providing return value logic flaw functions need return values want use return value imo need documented", "d": "1/2012"}, {"body": "always document would document understand people know never assume one line documentation clarify something simple took like minutes figure dont understand adding one sentence documentation says must return object order method chaining work understand like feature requesting sentence documentation dont understand difficult coming company embraced backbonejs really invested using read almost documentation think clarification could nt hurt simple fix", "d": "1/2012"}, {"body": "understand get set something returned example var note backbonemodelextend set function attributes options backbonemodelprototypesetcall attributes options line underneath says must return method chaining work easy fix get duh return value set return might come logically developers return hard seems logical doesnt mean logical people", "d": "1/2012"}, {"body": "documentation bug code bug", "d": "1/2012"}, {"body": "update indexhtml documentation andor docbackbonehtml documentation also anyone suggestions format callback signatures", "d": "1/2012"}, {"body": "indexhtml please try keep light closing ticket favor impending pull request", "d": "1/2012"}, {"body": "commit exposes request nt think need overriding undocumented api feel free use like", "d": "1/2012"}, {"body": "original reason initialize function could work initial set models think right able fully initialize collection first model added better", "d": "1/2012"}, {"body": "thanks lot putting", "d": "1/2012"}, {"body": "take yes", "d": "1/2012"}, {"body": "looks like knob turn make search categories part respective routes definitely right thing ca nt multiple roots single page inherent contradiction user visits url url needs resolved terms root root pick since page one url time one url root time", "d": "1/2012"}, {"body": "commit implement looking pass also speculative commit please take time grab latest master test love hear works", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "back button behavior inside iframes always something unreliable recommend avoiding entirely planning iframe nt use router case much backbone", "d": "1/2012"}, {"body": "use case issue causing problems working legacy code adds indexof lastindexof functions arrayprototype nt already present eg using hasownproperty loops causes errors thrown multiple parts code agree nt extend objectprototype ever advice feel like use case cause issue reexamined", "d": "1/2012"}, {"body": "jacobharding extending arrayprototype cause problems extending objectprototype", "d": "1/2012"}, {"body": "legacy code working extending arrayprototype diving bit deeper looks like error part working backbone order undelegate events call delegateevents method pass empty array seems like proper way would pass empty object", "d": "1/2012"}, {"body": "thanks dude wrote issue working client project imma integrate diaspora better lt", "d": "1/2012"}, {"body": "damn try use destroy method nt work like save try var categorie thiscategoriecollectionget catid categoriedestroy success function model response trace destroy confirmed error function model response alert error nothing send http request header", "d": "1/2012"}, {"body": "ok think solution model attributs url rooturl rooturl see id delete request header like id infortunately save method nt work nt understand works use custom function url attribut model always pass id get clean url function return servicesscriptphp id thisget id", "d": "1/2012"}, {"body": "experiencing issue", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "spent futzing answer simple calling navigate leading slash never pushed commit strips leading slashes route definitions calls jsfiddle works correctly even incorrect navigate call", "d": "1/2012"}, {"body": "makes sense thanks maybe note backbone documentation", "d": "1/2012"}, {"body": "many ways handle bulk operations rest none particular specified make special request ids things want destroy client side create new bulk resourcemodel sort thing url make shit load small requests", "d": "1/2012"}, {"body": "yeah project knockout full control models still give backbone try heavy project", "d": "1/2012"}, {"body": "yes validation run collection reset like validate nt validate like validate middle set flag collection model function check", "d": "1/2012"}, {"body": "thanks fixed making assignment earlier suggested", "d": "1/2012"}, {"body": "running issue well look byid property collection key item want actually undefined somehow", "d": "1/2012"}, {"body": "thanks legwork describe alanhogan unintended consequence earlier change allowing two different model objects id added collection without erroring situation shows mistake goes back previous behavior get early warnings adding duplicate models app", "d": "1/2012"}, {"body": "thanks jashkenas glad could help small way", "d": "1/2012"}, {"body": "ditto thanks jashkenas", "d": "1/2012"}, {"body": "want test routes real set windowlocationhash watch routes called", "d": "1/2012"}, {"body": "yes never leading slash either routes navigate calls said commit master forcefully strips leading slashes longer lead buggy behavior finally yes router ever fire route actually changed", "d": "1/2012"}, {"body": "would like chime explict call routernavigate route true trigger route even route changed hash", "d": "1/2012"}, {"body": "added master", "d": "1/2012"}, {"body": "yes add events triggered models land collection", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "change committed total win method names longer work verbs callback model remember done versus bindunbind think sweetness probably worth", "d": "1/2012"}, {"body": "documentation probably use attach detach nomenclature jquery documentation perhaps something like attach event handler via might also useful call dom event dom event handler teaching backbone devs found clearly distinguishing dom events backbone events prevents lot confusion", "d": "1/2012"}, {"body": "inclined let sleeping dogs lie unless get complaints think folks developing javascriptheavy web applications targeting far", "d": "1/2012"}, {"body": "jashkenas agreed issue worth noting important enough provide fix", "d": "1/2012"}, {"body": "thanks reporting behavior changed since documentation originally written", "d": "1/2012"}, {"body": "yes generic event dispatchers totally great documented bit better commit nt think anything extra codewise backbone needs", "d": "1/2012"}, {"body": "afraid file generated source hopefully hard tab back play around console", "d": "1/2012"}, {"body": "intended nest collections models fashion instead simply", "d": "1/2012"}, {"body": "would fantastic exploration fork think going wait bit serverside support adding backbone core", "d": "1/2012"}, {"body": "seems fixed master last jsfiddle works fine", "d": "1/2012"}, {"body": "change code still seeing issue remove parameter justok mentions backbonejs unbinds work using jquery code like unbind using javascript events keydown mypopuptext keystroketextarea keypress mypopuptext keystroketextarea click mypopuptext clicktextarea click btnsubmit submitfunc click close closepopup closepopup function consolelog closing popup mypopuptext unbind keydown mypopuptext unbind keypress mypopuptext unbind click close unbind click btnsubmit unbind click mypopupholder fadeout", "d": "1/2012"}, {"body": "commit make fix give spin let know working", "d": "1/2012"}, {"body": "fallback exists initial page load even pushstateenabled browser sent link someone hashchange enabled browser history begin work correctly provide failing test case still sure exactly failing case nt supposed route matches", "d": "1/2012"}, {"body": "closing ticket reopen test case provided", "d": "1/2012"}, {"body": "fixed copying argument models still removed correct order", "d": "1/2012"}, {"body": "see previous tickets bulk operations", "d": "1/2012"}, {"body": "exactly thing patching bb dont want global jquery object nodejs", "d": "1/2012"}, {"body": "scoop backbone wants optimistic renders default situation validate clientside sure errors impossible infrequent gain whole new class responsive user interface rendering optimistically always going cases need wait server respond proceeding previously accomplished using model save finished fine nicer simply say", "d": "1/2012"}, {"body": "hmm interesting solution test official new release thanks", "d": "1/2012"}, {"body": "yes need router else backbonehistory supposed raise error", "d": "1/2012"}, {"body": "afraid change event designed triggers state changes like fire event different purpose like every time tagged clicked fire event", "d": "1/2012"}, {"body": "good idea changed request", "d": "1/2012"}, {"body": "model fire event attributes change adding event would entirely redundant hopefully simply use events achieve effect", "d": "1/2012"}, {"body": "backbone also works ender remember correctly", "d": "1/2012"}, {"body": "jashkenas nt think initial issue specific ember", "d": "1/2012"}, {"body": "yes big believer something lightweightsmall backbone adding level abstraction make mapping jquery ember zepto easier already incredibly easy abstraction looking already exists jquery api libraries choosing adopt someone could make object mootools behaves like jquery able drop directly backbone well", "d": "1/2012"}, {"body": "think example like object mootools actually argument api using different libraries made mootools wrapper behaves like order use backbone would either put request added line backbone assigned wait new version including change modify local version backbonejs library added line assign object windowjquery zepto ember loading backbonejs none options nice explicitly telling backbone object ish library opinion said flexibility simply line backbone goals terms simplicity get think would nice feature us would use completely transparent would", "d": "1/2012"}, {"body": "want way tell backbone use dom manipulation ajax object would great pull request send definitely line backbone goals", "d": "1/2012"}, {"body": "jashkenas nt twobitfool pull request get reopened another reason nt like could address different way", "d": "1/2012"}, {"body": "yep want whichever pull request ends driven someone real project real library mind otherwise usually end implementation nt actually work", "d": "1/2012"}, {"body": "fair enough definitely provide incoming shortly question good name would twobitfool options would", "d": "1/2012"}, {"body": "let make function value", "d": "1/2012"}, {"body": "like personally", "d": "1/2012"}, {"body": "ok", "d": "1/2012"}, {"body": "want sounds incredibly confusing imo", "d": "1/2012"}, {"body": "tbranyen sorry nt seen reply wrote mine nt meaning ignore ok seems little generic instance backbone also uses underscore internally also library could injected though seems less use suggesting unfortunately nt better idea maybe", "d": "1/2012"}, {"body": "backbone ca nt load without underscore ca nt method change", "d": "1/2012"}, {"body": "well agree tbranyen name confusing let hash merging went ahead made pull request look change name need", "d": "1/2012"}, {"body": "tbranyen recognize underscore different case still think begs question set library", "d": "1/2012"}, {"body": "like", "d": "1/2012"}, {"body": "current master next release made change make easier simply set view within", "d": "1/2012"}, {"body": "yes collections ordered arrays maps indexed feel free use whatever keys like models", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "like el null fix find using tagname get around", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "large part advantage using backbone views fact element available times regardless whether template rendered many views multiple templates regardless wether view present dom allows create add views dom rendering later sure events bound correctly delegated come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates", "d": "1/2012"}, {"body": "enhancement close call push pop shift unshift nice already accomplish multiple models generally let close ticket folks asking really good use cases need let", "d": "1/2012"}, {"body": "pull request merged hopefully handles", "d": "1/2012"}, {"body": "event fires whenever model successfully synced server hopefully handles case looking", "d": "1/2012"}, {"body": "using serverrelated nt solve problem wondering pluggable system persistent save systems idea add save plugin may add one trigger event every plugin magic think thanks", "d": "1/2012"}, {"body": "ran would also like know error", "d": "1/2012"}, {"body": "using localstorage browser nt", "d": "1/2012"}, {"body": "chrome", "d": "1/2012"}, {"body": "backbone master supports semantics accomplish", "d": "1/2012"}, {"body": "awesome", "d": "1/2012"}, {"body": "believe pass complete response object wraperror able access everything need", "d": "1/2012"}, {"body": "glad entertain patch changes need motivated serious use case want override semantics instead using different method performance concerns going indirection every value lookup", "d": "1/2012"}, {"body": "backbone provides event fires model finished synced server able case starting spinner turning returns", "d": "1/2012"}, {"body": "yep like use etc define member properties functions instead", "d": "1/2012"}, {"body": "link working correctly current line alerts representation artist demonstrating works", "d": "1/2012"}, {"body": "hmm seems like simple misreading documentation think id documentation pretty clear function building model url id used generate model urls default", "d": "1/2012"}, {"body": "pass context backbone events master", "d": "1/2012"}, {"body": "sounds like neat trick", "d": "1/2012"}, {"body": "nt see real need support polymorphic model collection relationships happy reconsider someone could provide practical realworld use case pattern acceptable solution common problem pretty skeptical", "d": "1/2012"}, {"body": "well finally found using intermediate models list widget backbone collections best approach able wrap model sort model filter model write custom modem rely several collections opposed modelcollection anymore see useful checked code place used loc including libraries hack got find time rewrite anyone explain useful edit ok close issue discussion usage backbone", "d": "1/2012"}, {"body": "model reference collection allows model compute url based collection happens vs example current behavior allow model added multiple collections last collection model added one use compute url think behavior desirable still freely add model multiple collection override wish", "d": "1/2012"}, {"body": "yep model nt valid things wo nt continue make sure actually validating want validating", "d": "1/2012"}, {"body": "add remove events functions attribute options passed good go", "d": "1/2012"}, {"body": "good news first bit surprised solution chose issue somebody reported potential troubles options modified suppose optionsindex used parameter ok hacked backbonejs way got troubles", "d": "1/2012"}, {"body": "yay", "d": "1/2012"}, {"body": "backboneview option property behaves like covered", "d": "1/2012"}, {"body": "yes use override entirely model exists outside collection", "d": "1/2012"}, {"body": "bingo", "d": "1/2012"}, {"body": "unless entire collection either use callbacks debounced version pretty easily", "d": "1/2012"}, {"body": "huge fan hello backbone anyone wants send pull request tutorial repo feel free otherwise linking stuff wiki great", "d": "1/2012"}, {"body": "currently model owned last collection add hope makes easier track multiple collections nt persist nt think extra layer inheritance hierarchy necessary make work", "d": "1/2012"}, {"body": "string values maybe convert date problem solved", "d": "1/2012"}, {"body": "works dates converted numbers prefix arbitrary strings want sort alphabetically", "d": "1/2012"}, {"body": "course right assumed still talking dates like op date convertible string mistake", "d": "1/2012"}, {"body": "next version backbone current master support orderings comparators instead able define usual way", "d": "1/2012"}, {"body": "alright addressed", "d": "1/2012"}, {"body": "great ends npmed node would post version well", "d": "1/2012"}, {"body": "missing something like jquery ready event models sometimes stuff needed done model loaded also trigger event listener attached model got ready thoughts", "d": "1/2012"}, {"body": "event emitted whenever model successfully server think used easily implement features discussed", "d": "1/2012"}, {"body": "mentioned pull request backbone nt intend support nested associations directly", "d": "1/2012"}, {"body": "able clear delegated events shared dom element calling view", "d": "1/2012"}, {"body": "jashkenas easier fix would disallow binding event element multiple times expected events created destroyed together view new view started scratch without events bound helps little still goes expectations", "d": "1/2012"}, {"body": "necessarily event perfectly legal two different views applied element different sets functions keyed event targets really giving trouble recommend suggested backbone thing never assigning directly ensuring view unique alwaysavailable element delegate really makes life much simpler", "d": "1/2012"}, {"body": "jashkenas thanks", "d": "1/2012"}, {"body": "yes totally large part backbone good", "d": "1/2012"}, {"body": "yep deep cloning nt well supported often desirable js backbone attributes intentionally shallow using reflect database columns rows things line nicely", "d": "1/2012"}, {"body": "looks like present master passed json body reference xhr request", "d": "1/2012"}, {"body": "ide really like feature implemented default dalyons solution seems great", "d": "1/2012"}, {"body": "great feature make easy implement app backbone nt builtin default", "d": "1/2012"}, {"body": "available events tell collection added removed model located given returns index model reference proposed feature gets bit messy light fact model multiple collections inclined leave unless specific use cases raised", "d": "1/2012"}, {"body": "one sitting long enough think quite ready close nt see anything would continue compatible permodel events someone good pull request concrete suggestion removing favor something comfy glad reopen see new ticket", "d": "1/2012"}, {"body": "commit changes backbone resort collections fire change events models list added makes impossible us report indices directly event think folks need simply use find", "d": "1/2012"}, {"body": "overhauled master validations get complete new state instead delta", "d": "1/2012"}, {"body": "docs changed rchampourlier suggested spent good portion afternoon trying figure nt saving subset", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "ticket oldie goodie pushed commit master allow specify comparator either semantics", "d": "1/2012"}]