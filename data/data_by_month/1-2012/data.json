[{"title": "catch ca nt add model collection twice error collectionfetch", "body": "building app models lazy load related models needed upgrading today run problem multiple models loading models models loaded twice triggers error question catch commented error", "num": "916", "d": "1/2012"}, {"title": "passing attributes instead delta validate really good option", "body": "according commit method receives computed new state attrs delta means longer way knowing attributes changed performing validation nt missed something problem validating form input user filling form usually want validate form elements changed yet notify user errors elements changed maybe jashkenas comment", "num": "914", "d": "1/2012"}, {"title": "deleting reinserting viewel dom", "body": "element event bindings insert dom insertion delete parent element dom later reinsert element dom event bindings lost use thisdelegateevents get back expected events bound would still hold even element removed dom misunderstanding thanks", "num": "913", "d": "1/2012"}, {"title": "silent true overloaded set", "body": "change change event detected set function setting property silent true setting property back original value without silent true trigger change event silent true previousattributes object changed set checks object code jsfiddle javascript var model backbonemodelextend initialize function thisbind change name thischange change function model name consolelog model consolelog name consolelog changed name thisprevious name thisget name var model new model name modelset name silent true modelset name", "num": "912", "d": "1/2012"}, {"title": "backbonehistorystart documentation", "body": "docs backbonehistorystart application served root url domain sure tell history root really option backbonehistorystart pushstate true root publicsearch root set publicsearch leading leading seemed work older versions backbone upgraded today stopped working thanks jeff", "num": "905", "d": "1/2012"}, {"title": "modelsave longer passes model error callback", "body": "given error callback callback receiving model arguments instead receives response object twice appears broken combination presumably needs passed callback instead joneath could nt figure good way test though test suite overwriting way never actually calls error callback", "num": "904", "d": "1/2012"}, {"title": "bind multiple actions one route", "body": "backbone registers routes calls last handler fixed override backbonehistoryprototypeloadurl method backbonehistoryprototypeloadurl function fragment thisfragment thisgetfragment fragment", "num": "900", "d": "1/2012"}, {"title": "initial page load route triggered", "body": "trying get grip backbone one thing confuses routes following code var router backbonerouterextend routes indexhtml hello var router new router backbonehistorystart pushstate true root app nt hello function get triggered go something wrong", "num": "899", "d": "1/2012"}, {"title": "include viewsetelement documentation", "body": "currently set programmatically event delegation work properly take example following code works acting ca nt seen without digging little bit code either documentation specify also needs set addition indicate used", "num": "895", "d": "1/2012"}, {"title": "plan new tagged release", "body": "long time since using production things piling master branch like use plan new release anytime soon ca nt find anything roadmap anywhere people running master branch production anyway edit hope nt sound ungrateful excited use latest greatest", "num": "894", "d": "1/2012"}, {"title": "query parameters confusing router", "body": "currently possible use google analytics backbone controlled routes backbone router understand query parameters routes try route profile route fires username passed rather saw discussion nt need query parameter support per se would nice backbone could told ignore query parameters done code", "num": "891", "d": "1/2012"}, {"title": "l variable remove method global scope", "body": "l variable remove method line declared var keyword therefore global scope causes problems triggering remove events causes calls remove method", "num": "890", "d": "1/2012"}, {"title": "enhance way reference view subelement", "body": "proposal common situation working backbone project common access views subelements many times put simple example javascript var myview backboneviewextend el mydiv hidebutton function mybutton hide showbutton function mybutton show works fine button id changes future change id places view real project demand even changes always end something like javascript var myview backboneviewextend el mydiv initializeelements function thiselements mybutton mybutton initialize function thisinitializeelements hidebutton function thiselementsmybuttonhide showbutton function thiselementsmybuttonshow approach fine nt like manually initialize every view every single time store jquery reference view subelements also easy forget think best approach would backbone view object works similar way object eg javascript var myview backboneviewextend el mydiv elements mybutton mybutton hidebutton function thiselementsmybuttonhide showbutton function thiselementsmybuttonshow function called backboneview constructor replace value key jquery object request pull request soon would love hear comments please note would useful cases html elements existed view instantiation", "num": "889", "d": "1/2012"}, {"title": "removal add remove", "body": "like discuss removal realize methods part public api course quite useful nonetheless methods exposed functionality otherwise available backbone therefore useful hook points extensions least backbonerelational took single snippet data either model object might contain somewhere return model operated upon since simply return complete collection used determine especially passing json sortofworking workaround backbonerelational using adding calling using afterwards iterating diff quite performance penalty compared current situation especially considering many people use relational exactly automates handling large amount models whole process repeated every single addition chance two could reinstated", "num": "888", "d": "1/2012"}, {"title": "configurable window history management", "body": "thirdparty javascriptproviders useful load javascript sandboxed iframe example lightningjs however breaks history management assume running window started branch support making take optional argument nt tested old ies yet zeptotodo approach seems okay fix ready pullrequest", "num": "885", "d": "1/2012"}, {"title": "made kindle edition web documentation", "body": "frontend docs bundle hope useful cheers dan", "num": "884", "d": "1/2012"}, {"title": "take another run emberjs", "body": "release since last time took dive sproutcoreamberemberdatajs anything worth borrowing let sure take another run personal favorite feature think would benefit backbone thread would ideal place mention", "num": "882", "d": "1/2012"}, {"title": "lost model data one model keys named attributes", "body": "using fetch populate model response json contains attributes key backbone internal attributes key overwritten causes keys json response get stored model observed modelfetch lt ajax response returns attributes consolelog modelattributes yields expected either line snippet yield attributes exception thrown error produced citing naming collision", "num": "880", "d": "1/2012"}, {"title": "play buttons appear tutorial", "body": "repro steps launch tutorial scroll playable snippet eg first one backbonevents expected play button appears clicking plays demo observed play button appears note setting page mode resolves issue", "num": "878", "d": "1/2012"}, {"title": "create backbone views jquery syntax", "body": "following snippet lets create backbone views jquery syntax eg could something like rolled backbone example coffeescript coffeescript class windowslideshow extends backboneview initialize options consolelog slideshow initialize consolelog el plugin definition fnslideshow options options slideshow data slideshow slideshow idx el optionsel el el data slideshow new slideshow options gist", "num": "877", "d": "1/2012"}, {"title": "missing docs internal usage viewcollection viewmodel", "body": "learning backbone found options handled special ways views information available special means may ask someone give info found supposed initialize view reference rendering like internal usage models anything collections thanks answers", "num": "876", "d": "1/2012"}, {"title": "routerinitializeroute", "body": "want implement backbonejs authentication expected see function like would allow write code like nt found backboneway submit pull request", "num": "874", "d": "1/2012"}, {"title": "setmethod backbonemodel fails response objects attributes property", "body": "fix looks like javascript backbonemodelprototypeset function attrs options extract attributes options options options attrs return", "num": "871", "d": "1/2012"}, {"title": "modelset validate silent false", "body": "hello modelset want change model want events triggered call modelset silenttrue validate function called thanks alot wolfgang current backbonejs source code set function key value options run validation optionssilent amp amp thisvalidate amp amp thisperformvalidation attrs options return false", "num": "870", "d": "1/2012"}, {"title": "backbonehistorycheckurl uri malformed error", "body": "uri special symbol checkurl throws urierror exception reproduce hook backbone router search qfat change url got uncaught urierror uri malformed checkurl", "num": "868", "d": "1/2012"}, {"title": "isnew use thisidattribute instead thisid", "body": "starting backbone noticed thisidattribute wondering isnew check thisidattribute currently hardcoded check thisid", "num": "864", "d": "1/2012"}, {"title": "failure collection adding models pass validation", "body": "hello seems check collectionadd method case preparemodel returns false happens call modelon raises error however nt know expected behavior silently ignored terminate", "num": "861", "d": "1/2012"}, {"title": "performvalidation public", "body": "nice able manually invoke validation model without actually set values example binding blur event textbox like trigger validation associated attribute model without call model obviously call method feel though hack prefixed underscore", "num": "860", "d": "1/2012"}, {"title": "modeldestroy nt send id request header", "body": "use default behavior rest php server defined url model everything right create update delete method id send header like others methods source code find dont include delete method", "num": "855", "d": "1/2012"}, {"title": "routing issues created merged pull request", "body": "copying comments issue breaks old routes needs documented somewhere breaks router current release currently available release public github pages site documentcloudgithubcombackbone calling match route change causes matched route leading slash support correct action break every site routing used leading slash discovered using pushstate routing paths gave path nice structure leading fragment slash issue preventing rerouting fragment complication introduced backbone longer knows trying route page previously tried route page router would never receive request routes", "num": "849", "d": "1/2012"}, {"title": "routing agnostic leading trailing slashes", "body": "currently defining routes equal also equal backbone consider routes equal routing agnostic leading trailing slashes", "num": "848", "d": "1/2012"}, {"title": "size empty collection", "body": "using length size due fact models attribute already contains model models assigned", "num": "844", "d": "1/2012"}, {"title": "error documentation views behave models updated", "body": "hi relatively new backbone actually turning docs lot whenever ui action causes attribute model change model triggers change event views display model data notified event causing rerender nt write glue code looks dom find element specific id update html manually model changes views simply update think part needs work whenever ui action causes attribute model change model triggers change event correct views display model data notified event causing rerender nt write glue code looks dom find element specific id update html manually model changes views simply update think understand backbone correctly achieving would require something like perhaps view initialize method note actually appreciate loose eventbased coupling documentation suggests magic defaults something find anywhere code", "num": "843", "d": "1/2012"}, {"title": "documentation errorbug backboneviewmake", "body": "documentation states following code example regarding viewmake javascript var view new backboneview var el viewmake b classname bold bold makedemo append el however classname incorrect state class example source code comments correct matter javascript small amounts dom elements fullblown template isnt needed use make manufacture elements one time var el thismake li class row thismodelescape title using code sample suggested documentation produce invalid markup", "num": "841", "d": "1/2012"}, {"title": "overriding default methods", "body": "overriding methods native model set save get according documentation overriding require return statement order code work must return otherwise code bombs", "num": "839", "d": "1/2012"}, {"title": "removing duplicate list cause return", "body": "specifically hacking removing addingremoving duplicate items list causes problem something funky got improperly return nonrandomly going steps reproduce collection call list give method takes date range calculates items list within range saves makes ajax request items within range using extra parameters importantly passing query range question removes items list prevents duplicates gets rid items deleted server within range note however time fires data already parsed added collection precalculated also note ranges overlap partially completely exactly whatever use method twice ensuring overlap testing purposes consider three groups items fall first range second ranges see funky behavior last case happens well etc collection return items want collection ids result happens items already collection removed ajax request basically would seem add item collection twice remove one breaks tested general case yet within situation also fairly straightforward work around using directly manner never duplicate objects note first posted comment", "num": "836", "d": "1/2012"}, {"body": "agree simple use case could init blank invalid model write something like enable disable ui would handle javascript render function set initial state selftogglestate false toggle error triggered otherwise ie model validate thismodelbind function ev selftogglestate ev error", "d": "1/2012"}, {"body": "agree throwing error ideal way handle invalid user input data source likely cause invalid model error usual state affairs handled without throwing however difficult handle constructing model since one unable bind error handler model without reference throwing error better solution think also always handle using untrusted data construct model", "d": "1/2012"}, {"body": "work need initialize object valid hash always want javascript var mymodel backbonemodelextend validate function attributes attributesname return give name var model new mymodel game", "d": "1/2012"}, {"body": "pgherveou good point nt think", "d": "1/2012"}, {"body": "like check current state model available case nt really best suited validating html forms best suited validating state model like validate form think simple function would easier", "d": "1/2012"}, {"body": "thing using form validation works pretty good using backbonemodelbinding backbonevalidation plugins change pretty much makes impossible would definitely like specify validation twice", "d": "1/2012"}, {"body": "btw since validate effectively prevents invalid values set model nt see need validate attributes every time attributes changed always valid", "d": "1/2012"}, {"body": "depends method use remove element dom use remove bindings lost however using detach remove bindings backbone provides remove easily add method detach", "d": "1/2012"}, {"body": "correct exactly supposed work temporarily set value silently change back original value perspective app change occurred", "d": "1/2012"}, {"body": "yes definitely bug either docs new release issue", "d": "1/2012"}, {"body": "think complex initially thought removing leading root fix problem seems break navigation routes get appended url box browser rather replaced right either normal navigation work initial page load work removing leading root path", "d": "1/2012"}, {"body": "thanks fix confirmed working case", "d": "1/2012"}, {"body": "wrapping head around figure reason change wraperror behavior far tell jquery zepto always returning xhr object first argument failed find code else wraperror used outside ajax response context could alter behavior leftover changes got removed means could pretty much revert method delete remove model function params", "d": "1/2012"}, {"body": "nope correct every route single action nt want multiple functions called potentially undefined order url loaded", "d": "1/2012"}, {"body": "disagree example one screen one active router time", "d": "1/2012"}, {"body": "yes probably usually nt routes actual html pages would served server need help try irc channel quick responses mailing list slow ones", "d": "1/2012"}, {"body": "seems like new feature documented part next release", "d": "1/2012"}, {"body": "yes correct upgrade instructions describe exactly", "d": "1/2012"}, {"body": "thanks clarification nt able find commit added el", "d": "1/2012"}, {"body": "wondering", "d": "1/2012"}, {"body": "jashkenas mentioned plans version next backbone version", "d": "1/2012"}, {"body": "hoping tag push release week want upgrade documentcloudorg first production ensure unexpected wrinkles", "d": "1/2012"}, {"body": "hm could query params always passed last paramter route expected could handled user callback route wunderkitrouter instance listening route event somewhere else would always added well considered capturing named params splats", "d": "1/2012"}, {"body": "well yes would nice query parameters passed separate parameter route functions much issue trying decided separated plugin would nice though even backbone nt include param parsing code", "d": "1/2012"}, {"body": "aye would nt go far parsing anything though believe good idea break routing something like google analytics used mentioned maybe common one page apps imagine uses apart landing pages would also nice nt lost case part url wanted something would nt drop plugin imagine situation project production servers running nice nice campaign points landing pageview app suddenly nothing works adding tracking params nice would likely super annoying debug good entry least case someone stumbled problem future googling wrong hehe", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "interesting tempted add query parameters additional argument route function suggested end think backbone apps definitely query params app urls serverside url convention nt much useful place clientside routing nt supporting default want behavior easy enough implement hey presto", "d": "1/2012"}, {"body": "jashkenas shareable urls share state without query params putting everything url convenient hard handle optional params", "d": "1/2012"}, {"body": "usually want share state relevant content page initial example certainly even sharing heavily optional state think search queries often nicer share url based clean search syntax translate query params", "d": "1/2012"}, {"body": "fixed thanks reporting", "d": "1/2012"}, {"body": "nt think baked methods need extra call could one could something like javascript var multielementview backboneviewextend constructor function var someotherview multielementviewextend elements b b var v new someotherview el foo consolelog velements b jquery objects", "d": "1/2012"}, {"body": "means time create new jquery object make sizzle dom search call usually using templating woudl nt even access dom view rendered need make much smarter cache jquery object first search anyways nt think nt part backbone need quick references elements define render initialize method imo", "d": "1/2012"}, {"body": "something similar thecloudlesssky suggested right created base view converts jquery selectors jquery objects extend views one spinejs something like think pretty useful thanks comments", "d": "1/2012"}, {"body": "one thing thecloudlesssky suggestion possible refer jquery reference object method since calling constructor constructor invokes wont contain jquery references yet", "d": "1/2012"}, {"body": "duplicate previous tickets take look see conversation subject nt something builtin backbone", "d": "1/2012"}, {"body": "afraid ca nt part point new change able optimize slicing list models single operation breaking individual functions previous would revert improvement hopefully better override able come perhaps wrap record ids models added removed beforehand proceed", "d": "1/2012"}, {"body": "ca nt well sounds dramatic enough alright optimization probably possible going quite tricky since far uncommon adding stuff nt yet nt even yet plain object afterwards", "d": "1/2012"}, {"body": "another idea override know new models coming finishes run recorded new ones", "d": "1/2012"}, {"body": "pauluithol able work around overriding calling object passed essentially renders call noop gives list added models let know solution nt work interested reasons", "d": "1/2012"}, {"body": "overlooked one look plays extensions backbone two major things basing hooking backbone handle either use default backbone behavior take control adding action let know surprised nt throw errors testing wunderkit vs master", "d": "1/2012"}, {"body": "thanks yes looking bit reluctant relying internal method danger eliminated give try looks like work pretty well", "d": "1/2012"}, {"body": "whoa fancy loading js main window iframe applying main window would desirable", "d": "1/2012"}, {"body": "short iframe sure code unaffected whatever happens window loads code whether conflicting versions jslibraries libraries crazy stuff like messing prototypes builtins especially desirable third party javascript providers covered depth lightningjs readme", "d": "1/2012"}, {"body": "looks like fairly invasive patch something still hard time finding use third party javascript one thing think would probably never want use loaded third party script advertisements widgets business monkeying url bar given want use probably thirdparty sure change making feel free course patch copy", "d": "1/2012"}, {"body": "neat love could add link documentation backbone wiki long planning keeping date also consider posting mailing list", "d": "1/2012"}, {"body": "ca nt guarantee date yet write automated build process updates ebooks sources periodically implemented eventually", "d": "1/2012"}, {"body": "looks like folks nt favorite features suggest take run source docs", "d": "1/2012"}, {"body": "looked emberjs docs ultimately found one feature thought might worthwhile discuss including backbone computed properties may nice addition desired occasional ability ride setter getter property perform calculation aside found basic philosophical approach emberjs backbone differed significantly making ember features incompatible backbone way things", "d": "1/2012"}, {"body": "yes computed properties great think best functions magic fauxvalues need additional fanciness nt really want deal caching invalidation want put logic directly function perhaps section documentation describes simple computed properties", "d": "1/2012"}, {"body": "think section docs detail backbone way common practices would helpful lot things done backbone nt immediately obvious first glance particularly issues opened could addressed common practices section detailing suggested backbone way feature", "d": "1/2012"}, {"body": "simple imagine using kvo plugin computed field interesting updating view either firstname lastname changed however change event automatically propagate custom field already requires extra code take care ember believe declare dependencies computed fields said think ember approach incorrect well believe computed fields view logic put view model instead keeping model model pure", "d": "1/2012"}, {"body": "simple make simple often simple simply listening view fine computed property otherwise listen work well", "d": "1/2012"}, {"body": "great rolling kvo however two plugings use backbonemodelbinding synapse", "d": "1/2012"}, {"body": "sorry fo intromission proposed thing pr time rejected suited plugin feature repeat said pr could bring light big spectrum actual plugins want code api proposal included like see feature analyzed stressed thrown away could big step forward ps sure verbs wrong please sorry eventually bad use english", "d": "1/2012"}, {"body": "nwhittaker thanks reporting believe addressed nt cause issues want patch current version backbone", "d": "1/2012"}, {"body": "fix apparently currently master go backbonejsorg next release", "d": "1/2012"}, {"body": "hi nagyv documentation backboneview constructor several special options passed attached directly view model collection el id classname tagname thing special passing options directly attached view ease access interested relevant source modelcollection completely observe events use data iterate models etc answer question", "d": "1/2012"}, {"body": "nagyv also docs happens initialization hope helps", "d": "1/2012"}, {"body": "yes thanks", "d": "1/2012"}, {"body": "also manipulations nogo called route initializing", "d": "1/2012"}, {"body": "seems pretty straightforward thanks krebbl", "d": "1/2012"}, {"body": "found bug clone method related issue solution", "d": "1/2012"}, {"body": "krebbl good catch addressed", "d": "1/2012"}, {"body": "point silent changes allowed twiddle internal state model temporarily without actually making change later attribute actually changes validation runs events emitted would nt make sense emit event making silent change", "d": "1/2012"}, {"body": "yes indeed malformed url responsible correctly encoding urls passing router", "d": "1/2012"}, {"body": "thought early submitted pull request thisid thisidattribute normalized hood", "d": "1/2012"}, {"body": "hm interesting would willing elaborate link discussion somewhere sheds light thanks quick answer tbranyen", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "unfortunately believe raising error made error message clear thanks ticket", "d": "1/2012"}, {"body": "call method", "d": "1/2012"}, {"body": "going say nt trigger error however thought trying realized nt really want trigger error model error case really belongs view", "d": "1/2012"}, {"body": "yes delete requests body url contain id model deleted", "d": "1/2012"}, {"body": "thanks reply understand works urlroot url ca nt call destroy method model collection mycollectionget id destroy nt work id url mycollectionget id save name newname works thanks", "d": "1/2012"}, {"body": "id url unless overridden function prevent", "d": "1/2012"}, {"body": "thanks lot undestrand know logic sorry mistake", "d": "1/2012"}, {"body": "yes need addressed patch reverted preferably", "d": "1/2012"}, {"body": "whew scared saying issue nt case router still correctly fires route actually changes documenting change leading slashes bad idea yes documented next version backbone released", "d": "1/2012"}, {"body": "jashkenas looking test nt break examples giving breaks passing multiple times note leading slash whatever defined router rooturl", "d": "1/2012"}, {"body": "right never use leading slashes described could always strip way guess", "d": "1/2012"}, {"body": "backbone prescriptive like developer wants url structure would make url look like without using leading slash somehow supported newer rooturl feature", "d": "1/2012"}, {"body": "backbone prescriptive leading slashes wo nt play well pushstate", "d": "1/2012"}, {"body": "opinion thing even though modern frameworks like django make mistake allowing people redirect latter former relative paths calculated current path path must start trailing slash absolute", "d": "1/2012"}, {"body": "becomes bigger problem different frameworks different servers choose strip trailing slashes", "d": "1/2012"}, {"body": "jscheel suggest example might play bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing", "d": "1/2012"}, {"body": "jayred bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing web servers treat differently unless url routing used front rails django example forces implicit normalise url says web server look index file inside directory similar whereas says look file named definitely different things map directly file system google note", "d": "1/2012"}, {"body": "bradleywright server standpoint absolutely right user perspective user visits site typing expect get page preferred format right create two routes backbone accomplish", "d": "1/2012"}, {"body": "resource served two different urls bad practice wrong one redirecting canonical one whichever preference point user fine implementation detail whatever using route requests application server imo backbone nt make assumptions things like feel route put backbone canonical one mix two", "d": "1/2012"}, {"body": "yep afraid terms backbone routes nt clientside trailing slash indeed significant route looks like certainly nt making default record never using leading slashes backbone routes trailing characters business", "d": "1/2012"}, {"body": "know issue closed really ask problem leading slashes gmail twitter personally think indexhtml login much attractive indexhtml login realize may personal preference reason preventing behavior notice done", "d": "1/2012"}, {"body": "think actually forcing", "d": "1/2012"}, {"body": "seeing c new backbonecollection backbonecollection clength", "d": "1/2012"}, {"body": "problem wanted initialize collection empty set models options used something like c new backbonecollection options instead c new backbonecollection options", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "yes documentation intended imply way backbone apps behave written clarify", "d": "1/2012"}, {"body": "great much clear", "d": "1/2012"}, {"body": "nope works fine new backboneview make b classname bold bold", "d": "1/2012"}, {"body": "tried got wrote bug jquery version using tried w sent ipod jan jeremy ashkenasreply replygithubcom wrote nope works fine new backboneview make b classname bold bold reply email directly view github", "d": "1/2012"}, {"body": "thanks reporting recent versions jquery regression prevents old behavior", "d": "1/2012"}, {"body": "problem thanks quick response", "d": "1/2012"}, {"body": "way code bomb provide test case something like", "d": "1/2012"}, {"body": "code stops working fails return code works make large scale application work work works", "d": "1/2012"}, {"body": "general documentation nt say one way another supposed return overriding particular method recommend reading source method overriding overriding", "d": "1/2012"}, {"body": "dont understand know method saying documentation say need return however order code work must stackoverflow someone said way got override work", "d": "1/2012"}, {"body": "sounds like trying chain set without providing return value logic flaw functions need return values want use return value imo need documented", "d": "1/2012"}, {"body": "always document would document understand people know never assume one line documentation clarify something simple took like minutes figure dont understand adding one sentence documentation says must return object order method chaining work understand like feature requesting sentence documentation dont understand difficult coming company embraced backbonejs really invested using read almost documentation think clarification could nt hurt simple fix", "d": "1/2012"}, {"body": "understand get set something returned example var note backbonemodelextend set function attributes options backbonemodelprototypesetcall attributes options line underneath says must return method chaining work easy fix get duh return value set return might come logically developers return hard seems logical doesnt mean logical people", "d": "1/2012"}, {"body": "documentation bug code bug", "d": "1/2012"}, {"body": "update indexhtml documentation andor docbackbonehtml documentation also anyone suggestions format callback signatures", "d": "1/2012"}, {"body": "indexhtml please try keep light closing ticket favor impending pull request", "d": "1/2012"}, {"body": "commit exposes request nt think need overriding undocumented api feel free use like", "d": "1/2012"}, {"body": "original reason initialize function could work initial set models think right able fully initialize collection first model added better", "d": "1/2012"}, {"body": "thanks lot putting", "d": "1/2012"}, {"body": "take yes", "d": "1/2012"}, {"body": "looks like knob turn make search categories part respective routes definitely right thing ca nt multiple roots single page inherent contradiction user visits url url needs resolved terms root root pick since page one url time one url root time", "d": "1/2012"}, {"body": "commit implement looking pass also speculative commit please take time grab latest master test love hear works", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "back button behavior inside iframes always something unreliable recommend avoiding entirely planning iframe nt use router case much backbone", "d": "1/2012"}, {"body": "use case issue causing problems working legacy code adds indexof lastindexof functions arrayprototype nt already present eg using hasownproperty loops causes errors thrown multiple parts code agree nt extend objectprototype ever advice feel like use case cause issue reexamined", "d": "1/2012"}, {"body": "jacobharding extending arrayprototype cause problems extending objectprototype", "d": "1/2012"}, {"body": "legacy code working extending arrayprototype diving bit deeper looks like error part working backbone order undelegate events call delegateevents method pass empty array seems like proper way would pass empty object", "d": "1/2012"}, {"body": "thanks dude wrote issue working client project imma integrate diaspora better lt", "d": "1/2012"}, {"body": "damn try use destroy method nt work like save try var categorie thiscategoriecollectionget catid categoriedestroy success function model response trace destroy confirmed error function model response alert error nothing send http request header", "d": "1/2012"}, {"body": "ok think solution model attributs url rooturl rooturl see id delete request header like id infortunately save method nt work nt understand works use custom function url attribut model always pass id get clean url function return servicesscriptphp id thisget id", "d": "1/2012"}, {"body": "experiencing issue", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "spent futzing answer simple calling navigate leading slash never pushed commit strips leading slashes route definitions calls jsfiddle works correctly even incorrect navigate call", "d": "1/2012"}, {"body": "makes sense thanks maybe note backbone documentation", "d": "1/2012"}, {"body": "many ways handle bulk operations rest none particular specified make special request ids things want destroy client side create new bulk resourcemodel sort thing url make shit load small requests", "d": "1/2012"}, {"body": "yeah project knockout full control models still give backbone try heavy project", "d": "1/2012"}, {"body": "yes validation run collection reset like validate nt validate like validate middle set flag collection model function check", "d": "1/2012"}, {"body": "thanks fixed making assignment earlier suggested", "d": "1/2012"}, {"body": "running issue well look byid property collection key item want actually undefined somehow", "d": "1/2012"}, {"body": "thanks legwork describe alanhogan unintended consequence earlier change allowing two different model objects id added collection without erroring situation shows mistake goes back previous behavior get early warnings adding duplicate models app", "d": "1/2012"}, {"body": "thanks jashkenas glad could help small way", "d": "1/2012"}, {"body": "ditto thanks jashkenas", "d": "1/2012"}, {"body": "want test routes real set windowlocationhash watch routes called", "d": "1/2012"}, {"body": "yes never leading slash either routes navigate calls said commit master forcefully strips leading slashes longer lead buggy behavior finally yes router ever fire route actually changed", "d": "1/2012"}, {"body": "would like chime explict call routernavigate route true trigger route even route changed hash", "d": "1/2012"}, {"body": "added master", "d": "1/2012"}, {"body": "yes add events triggered models land collection", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "change committed total win method names longer work verbs callback model remember done versus bindunbind think sweetness probably worth", "d": "1/2012"}, {"body": "documentation probably use attach detach nomenclature jquery documentation perhaps something like attach event handler via might also useful call dom event dom event handler teaching backbone devs found clearly distinguishing dom events backbone events prevents lot confusion", "d": "1/2012"}, {"body": "inclined let sleeping dogs lie unless get complaints think folks developing javascriptheavy web applications targeting far", "d": "1/2012"}, {"body": "jashkenas agreed issue worth noting important enough provide fix", "d": "1/2012"}, {"body": "thanks reporting behavior changed since documentation originally written", "d": "1/2012"}, {"body": "yes generic event dispatchers totally great documented bit better commit nt think anything extra codewise backbone needs", "d": "1/2012"}, {"body": "afraid file generated source hopefully hard tab back play around console", "d": "1/2012"}, {"body": "intended nest collections models fashion instead simply", "d": "1/2012"}, {"body": "would fantastic exploration fork think going wait bit serverside support adding backbone core", "d": "1/2012"}, {"body": "seems fixed master last jsfiddle works fine", "d": "1/2012"}, {"body": "change code still seeing issue remove parameter justok mentions backbonejs unbinds work using jquery code like unbind using javascript events keydown mypopuptext keystroketextarea keypress mypopuptext keystroketextarea click mypopuptext clicktextarea click btnsubmit submitfunc click close closepopup closepopup function consolelog closing popup mypopuptext unbind keydown mypopuptext unbind keypress mypopuptext unbind click close unbind click btnsubmit unbind click mypopupholder fadeout", "d": "1/2012"}, {"body": "commit make fix give spin let know working", "d": "1/2012"}, {"body": "fallback exists initial page load even pushstateenabled browser sent link someone hashchange enabled browser history begin work correctly provide failing test case still sure exactly failing case nt supposed route matches", "d": "1/2012"}, {"body": "closing ticket reopen test case provided", "d": "1/2012"}, {"body": "fixed copying argument models still removed correct order", "d": "1/2012"}, {"body": "see previous tickets bulk operations", "d": "1/2012"}, {"body": "exactly thing patching bb dont want global jquery object nodejs", "d": "1/2012"}, {"body": "scoop backbone wants optimistic renders default situation validate clientside sure errors impossible infrequent gain whole new class responsive user interface rendering optimistically always going cases need wait server respond proceeding previously accomplished using model save finished fine nicer simply say", "d": "1/2012"}, {"body": "hmm interesting solution test official new release thanks", "d": "1/2012"}, {"body": "yes need router else backbonehistory supposed raise error", "d": "1/2012"}, {"body": "afraid change event designed triggers state changes like fire event different purpose like every time tagged clicked fire event", "d": "1/2012"}, {"body": "good idea changed request", "d": "1/2012"}, {"body": "model fire event attributes change adding event would entirely redundant hopefully simply use events achieve effect", "d": "1/2012"}, {"body": "backbone also works ender remember correctly", "d": "1/2012"}, {"body": "jashkenas nt think initial issue specific ember", "d": "1/2012"}, {"body": "yes big believer something lightweightsmall backbone adding level abstraction make mapping jquery ember zepto easier already incredibly easy abstraction looking already exists jquery api libraries choosing adopt someone could make object mootools behaves like jquery able drop directly backbone well", "d": "1/2012"}, {"body": "think example like object mootools actually argument api using different libraries made mootools wrapper behaves like order use backbone would either put request added line backbone assigned wait new version including change modify local version backbonejs library added line assign object windowjquery zepto ember loading backbonejs none options nice explicitly telling backbone object ish library opinion said flexibility simply line backbone goals terms simplicity get think would nice feature us would use completely transparent would", "d": "1/2012"}, {"body": "want way tell backbone use dom manipulation ajax object would great pull request send definitely line backbone goals", "d": "1/2012"}, {"body": "jashkenas nt twobitfool pull request get reopened another reason nt like could address different way", "d": "1/2012"}, {"body": "yep want whichever pull request ends driven someone real project real library mind otherwise usually end implementation nt actually work", "d": "1/2012"}, {"body": "fair enough definitely provide incoming shortly question good name would twobitfool options would", "d": "1/2012"}, {"body": "let make function value", "d": "1/2012"}, {"body": "like personally", "d": "1/2012"}, {"body": "ok", "d": "1/2012"}, {"body": "want sounds incredibly confusing imo", "d": "1/2012"}, {"body": "tbranyen sorry nt seen reply wrote mine nt meaning ignore ok seems little generic instance backbone also uses underscore internally also library could injected though seems less use suggesting unfortunately nt better idea maybe", "d": "1/2012"}, {"body": "backbone ca nt load without underscore ca nt method change", "d": "1/2012"}, {"body": "well agree tbranyen name confusing let hash merging went ahead made pull request look change name need", "d": "1/2012"}, {"body": "tbranyen recognize underscore different case still think begs question set library", "d": "1/2012"}, {"body": "like", "d": "1/2012"}, {"body": "current master next release made change make easier simply set view within", "d": "1/2012"}, {"body": "yes collections ordered arrays maps indexed feel free use whatever keys like models", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "like el null fix find using tagname get around", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "large part advantage using backbone views fact element available times regardless whether template rendered many views multiple templates regardless wether view present dom allows create add views dom rendering later sure events bound correctly delegated come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates", "d": "1/2012"}, {"body": "enhancement close call push pop shift unshift nice already accomplish multiple models generally let close ticket folks asking really good use cases need let", "d": "1/2012"}, {"body": "pull request merged hopefully handles", "d": "1/2012"}, {"body": "event fires whenever model successfully synced server hopefully handles case looking", "d": "1/2012"}, {"body": "using serverrelated nt solve problem wondering pluggable system persistent save systems idea add save plugin may add one trigger event every plugin magic think thanks", "d": "1/2012"}, {"body": "ran would also like know error", "d": "1/2012"}, {"body": "using localstorage browser nt", "d": "1/2012"}, {"body": "chrome", "d": "1/2012"}, {"body": "backbone master supports semantics accomplish", "d": "1/2012"}, {"body": "awesome", "d": "1/2012"}, {"body": "believe pass complete response object wraperror able access everything need", "d": "1/2012"}, {"body": "glad entertain patch changes need motivated serious use case want override semantics instead using different method performance concerns going indirection every value lookup", "d": "1/2012"}, {"body": "backbone provides event fires model finished synced server able case starting spinner turning returns", "d": "1/2012"}, {"body": "yep like use etc define member properties functions instead", "d": "1/2012"}, {"body": "link working correctly current line alerts representation artist demonstrating works", "d": "1/2012"}, {"body": "hmm seems like simple misreading documentation think id documentation pretty clear function building model url id used generate model urls default", "d": "1/2012"}, {"body": "pass context backbone events master", "d": "1/2012"}, {"body": "sounds like neat trick", "d": "1/2012"}, {"body": "nt see real need support polymorphic model collection relationships happy reconsider someone could provide practical realworld use case pattern acceptable solution common problem pretty skeptical", "d": "1/2012"}, {"body": "well finally found using intermediate models list widget backbone collections best approach able wrap model sort model filter model write custom modem rely several collections opposed modelcollection anymore see useful checked code place used loc including libraries hack got find time rewrite anyone explain useful edit ok close issue discussion usage backbone", "d": "1/2012"}, {"body": "model reference collection allows model compute url based collection happens vs example current behavior allow model added multiple collections last collection model added one use compute url think behavior desirable still freely add model multiple collection override wish", "d": "1/2012"}, {"body": "yep model nt valid things wo nt continue make sure actually validating want validating", "d": "1/2012"}, {"body": "add remove events functions attribute options passed good go", "d": "1/2012"}, {"body": "good news first bit surprised solution chose issue somebody reported potential troubles options modified suppose optionsindex used parameter ok hacked backbonejs way got troubles", "d": "1/2012"}, {"body": "yay", "d": "1/2012"}, {"body": "backboneview option property behaves like covered", "d": "1/2012"}, {"body": "yes use override entirely model exists outside collection", "d": "1/2012"}, {"body": "bingo", "d": "1/2012"}, {"body": "unless entire collection either use callbacks debounced version pretty easily", "d": "1/2012"}, {"body": "huge fan hello backbone anyone wants send pull request tutorial repo feel free otherwise linking stuff wiki great", "d": "1/2012"}, {"body": "currently model owned last collection add hope makes easier track multiple collections nt persist nt think extra layer inheritance hierarchy necessary make work", "d": "1/2012"}, {"body": "string values maybe convert date problem solved", "d": "1/2012"}, {"body": "works dates converted numbers prefix arbitrary strings want sort alphabetically", "d": "1/2012"}, {"body": "course right assumed still talking dates like op date convertible string mistake", "d": "1/2012"}, {"body": "next version backbone current master support orderings comparators instead able define usual way", "d": "1/2012"}, {"body": "alright addressed", "d": "1/2012"}, {"body": "great ends npmed node would post version well", "d": "1/2012"}, {"body": "missing something like jquery ready event models sometimes stuff needed done model loaded also trigger event listener attached model got ready thoughts", "d": "1/2012"}, {"body": "event emitted whenever model successfully server think used easily implement features discussed", "d": "1/2012"}, {"body": "mentioned pull request backbone nt intend support nested associations directly", "d": "1/2012"}, {"body": "able clear delegated events shared dom element calling view", "d": "1/2012"}, {"body": "jashkenas easier fix would disallow binding event element multiple times expected events created destroyed together view new view started scratch without events bound helps little still goes expectations", "d": "1/2012"}, {"body": "necessarily event perfectly legal two different views applied element different sets functions keyed event targets really giving trouble recommend suggested backbone thing never assigning directly ensuring view unique alwaysavailable element delegate really makes life much simpler", "d": "1/2012"}, {"body": "jashkenas thanks", "d": "1/2012"}, {"body": "yes totally large part backbone good", "d": "1/2012"}, {"body": "yep deep cloning nt well supported often desirable js backbone attributes intentionally shallow using reflect database columns rows things line nicely", "d": "1/2012"}, {"body": "looks like present master passed json body reference xhr request", "d": "1/2012"}, {"body": "ide really like feature implemented default dalyons solution seems great", "d": "1/2012"}, {"body": "great feature make easy implement app backbone nt builtin default", "d": "1/2012"}, {"body": "available events tell collection added removed model located given returns index model reference proposed feature gets bit messy light fact model multiple collections inclined leave unless specific use cases raised", "d": "1/2012"}, {"body": "one sitting long enough think quite ready close nt see anything would continue compatible permodel events someone good pull request concrete suggestion removing favor something comfy glad reopen see new ticket", "d": "1/2012"}, {"body": "commit changes backbone resort collections fire change events models list added makes impossible us report indices directly event think folks need simply use find", "d": "1/2012"}, {"body": "overhauled master validations get complete new state instead delta", "d": "1/2012"}, {"body": "docs changed rchampourlier suggested spent good portion afternoon trying figure nt saving subset", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "ticket oldie goodie pushed commit master allow specify comparator either semantics", "d": "1/2012"}, {"title": "views race condition appears coffeescript used", "body": "define emberjs controllers coffeescript compiled fly notice views sometimes fail load appears race condition inspect content see items collection iterates appear empty remain empty even add items using arrayproxyaddobject method code example coffee thislui lui emberapplicationcreate luicanonicaltopic emberobjectextend name default terms color selected luitopiccontrollerget selected thisget name property luitopiccontroller emberarrayproxycreate content null selected example luitopiccontrolleraddtopic name example color view code html lt gt topics lt gt collection contentbinding luitopiccontroller tagname ul itemclassbinding contentselected class unstyled selectable item contentname collection lt ul gt precompiling coffeescript js file standard way running coffeescript makes problem disappear could problem coffeescript think likely revealing race condition ember evaluation page load expects", "num": "464", "d": "1/2012"}, {"title": "infinite loop basic computed property", "body": "basic situation using helper iterate computed property results infinite loop missing something obvious", "num": "463", "d": "1/2012"}, {"title": "objects class definitions shared across instances", "body": "example demonstrates unexpected behavior creating new object arrayproxy subclass namely content nt set default value seems like reusing content previous instance behavior observed arraycontroller", "num": "462", "d": "1/2012"}, {"title": "swapping child views dynamically", "body": "trying grapple best way swap child views dynamically instance consider following template corresponding view header want able append view div runtime could something like following problem parentview would state appendto work could observe parent state call code feels hackish alternatively could modify template something like following header view emcontainerview contentbinding contentviews update contentviews property parent want swap child view also feels overly complex swapping single view looking however feel urge write something like following header yield runtime something like following variation logic actually works parentview still buffer fails obvious reasons indom anyone general advicebest practice situation feel like missing something would truly accomodate situation", "num": "461", "d": "1/2012"}, {"title": "two way transform bindings trigger often due object equality", "body": "due way object equality works javascript seems way two way transform nonprimitive values without excessive binding propagation results situations observers fired times expected take following jsfiddle example two ember objects one two way binding property another transform date value one end controller string value view date set controller value propagated view transformed string value considered changed view binding pushes value back controller goes back via transform converts string back date resulting new date object object always different transformed back date unless dates cached issues way override type js binding consider new value date controller trigger observer fire binding back view converting string date string view considered binding settle nt bad eventually settle bit work hope observer date property fired twice instead expected behaviour nt written test imagine nt primitive somewhere mix binding would go forever one possible way overcoming could optionally allow objectequals implemented objects need compared via form equality would come small price wset though maybe better way also possible get around case case basis case comparing values observer would nice observers passed previous value make easier leave three weeks case anyone comments copied keithpitt discovered pairing last week", "num": "460", "d": "1/2012"}, {"title": "rerendering view respect changes sources", "body": "look fiddle width changed map div updates reflect new width loses changes divs inline styles set google maps api position relative overflowx hidden overflowy hidden result map tiles take page ember respect changes element rerendering element different way", "num": "459", "d": "1/2012"}, {"title": "state exit methods called reverse order", "body": "right looks states exited order entered design behavior desire states exited reverse order entered eg like stack", "num": "454", "d": "1/2012"}, {"title": "compatibility prototype", "body": "app uses prototype js like start converting ember ember appears use without checking see jquery jquery libraries allow jquery compatibility modes think would make sense ember sameis reason ember incompatible prototype", "num": "453", "d": "1/2012"}, {"title": "test suite exists code failures", "body": "fyi test suite exits code failures leads travisciorg believe build successful", "num": "452", "d": "1/2012"}, {"title": "make collectionview faster batching dom updates", "body": "currently initial render embercollectionview makes individual dom manipulations mirror changes content array example add elements underlying content array dom appends occur would much faster single dom call instead", "num": "450", "d": "1/2012"}, {"title": "adding removing collections broken ie", "body": "adding things nt add end list removing weird things happen everything working expected chrome safari firefox nt know ie versionsthe errors occur contacts example emberjscom site", "num": "449", "d": "1/2012"}, {"title": "scobject setunkownproperty nt get called properties bound", "body": "subclass scobject define setunkownproperty get called setting properties however setup binding one properties set setunkownproperty never gets called creating issue ember data dsmodel setunkownproperty getting called bound properties prevents data hash turn updated", "num": "448", "d": "1/2012"}, {"title": "uncaught error perform operations metamorph dom", "body": "getting error changing binding view simplest version code reproduce error view template appset loading true show loading screen appset loading false hide loading screen throw uncaught error perform operations metamorph dom stacktrace versions chrome", "num": "447", "d": "1/2012"}, {"title": "metamorph breaks css pseudoselectors", "body": "firstchild lastchild etc nt useful anymore dealing collection view perhaps way identify binding using data attribute binding nt inline content", "num": "446", "d": "1/2012"}, {"title": "difference reopenclass direct assignment", "body": "curious difference former way set bunch properties class actually something interesting", "num": "445", "d": "1/2012"}, {"title": "add unbound block helper", "body": "ebryn wycats discussions overall improvements view layer make easier large unbound quasibound sections open possibilities unbound blocks would render initially never update group blocks would render initially rerender entirely child property changes blocks may exposed might used internally heuristics would justify ie try determine whether individual updating better group updating choose right answer might also exposed optimization would group several simple properties would become single grouped property updated needed would definitely implemented optimization probably compiletime would exposed planning meeting next week hash basic plan post", "num": "444", "d": "1/2012"}, {"title": "viewstate nt always remove view exit", "body": "", "num": "443", "d": "1/2012"}, {"title": "ember removes script elements intended use js code", "body": "trying slowly port jquery mustachejs application ember order feasible pages ember legacy adhoc code need coexist page legacy code stores templates elements like js code fires ember initializes get errors element found understanding texthtml supported ember legacy reasons suggest making offbydefault option nt bust code", "num": "441", "d": "1/2012"}, {"title": "best practices using emberobject object controller", "body": "stack overflow question matter object controllers answer use emberobject object controller object proxy best practice properties view bound appexampleobjectcontrollercontentpropertyname need use star notation appexampleobjectcontrollercontentpropertyname appexampleobjectcontrollercontentpropertyname since content change emberjscom sample shows appuserview bindings appusercontrollercontentfirstname etc continue work content swapped", "num": "440", "d": "1/2012"}, {"title": "getpath warns global access overzealously", "body": "fine exists undefined call logs warning test case", "num": "439", "d": "1/2012"}, {"title": "targetactionsupport targetobject obey changes target", "body": "pass path path changes update reflect changes realworld usage test case wants cache lookup needs add observer path watch changes invalidate cache", "num": "438", "d": "1/2012"}, {"title": "kill emberbutton", "body": "controversial one figured open discussion helper less need hover states handled css well seeing big need keep around however love hear arguments favor", "num": "436", "d": "1/2012"}, {"title": "emberselect define default selected value", "body": "use emberselect could define default selected value populate view code setup property contentbinding object", "num": "435", "d": "1/2012"}, {"title": "flush view time bind new values", "body": "creating drop list provide selection value time change selected value go return json back web service bind json view could add result could setup flush view first rebind new values guess two way bind would magic code etselectedemailtypescontroller emberobjectcreate emailtype null ischanged function thisemailtype null loadetbyappyearettypeid etselectedappyearcontrollerappyeartext thisemailtypeemailtemplatetypeid observes emailtype thoughts thanks", "num": "434", "d": "1/2012"}, {"title": "way flush views", "body": "trying build ember app behaves bit like spreadsheet columns rows right taking seconds render quick test nt know speed code looks like button action nextpage next page button lt div class table gt lt div class header gt appresultscontrollercolumns lt div gt name lt div gt lt div gt appresultscontrollersortedcontacts view appcontactlistview contentbinding lt div gt contentfirstname lt div gt lt div gt contentlastname lt div gt lt div gt lt ul gt contentphonenumbers lt li gt number lt li gt lt ul gt lt div gt contenttotaldonated lt div gt contenttotaldonated lt div gt view lt div gt appears ember building one massive string appending entire results dom way flush results dom every iteration loop without writing loop adding views manually related note good docs right related getting good performance ember working large doms", "num": "433", "d": "1/2012"}, {"title": "regularize event propagation views", "body": "right support disabling propagation whereas views nt anything special built also textsupport keyup handler nt return value impossible control propagation", "num": "432", "d": "1/2012"}, {"title": "view emberselect event binding", "body": "using view emberselect way wire selectionbinding call anther event handler say view emberselect contentbinding apppeoplecontroller selectionbinding appselectedpersoncontrollerperson optionlabelpath contentfullname optionvaluepath contentid appselectedpersoncontrollerperson object way setup function within object example saw button trigger another event", "num": "430", "d": "1/2012"}, {"title": "checkboxes broken ie prior", "body": "ie nt fire events happens addition also observe", "num": "428", "d": "1/2012"}, {"title": "failing unit tests", "body": "ie probably emberview handlebars integration work precompiled templates ca nt find templatespec template redrawing binding able update bound property updates missing space output errors related ie eating due bugs important opera embercheckbox changing checkbox causes view value get updated update date", "num": "427", "d": "1/2012"}, {"title": "dynamic assignment view elementid breaks eventdispatcher", "body": "scenario follows view dynamic elementid generated automatically want child view element id suffix accomplish use following code javascript var template view emberview elementidbinding boundviewid view emberviewcreate template emberhandlebarscompile template boundviewid templateviewtestboundid seems work dom id generated child view correct events view fired turns view added emberviewviews default generated guid elementid changed rendering dispatcher ca nt find view emviewviews anymore result destroy view tries delete new elementid emviewviews illustrate problem use following test javascript var template view emberview elementidbinding boundviewid view emberviewcreate template emberhandlebarscompile template boundviewid templateviewtestboundid viewappend var childview nthchild view var id childview id equals id templateviewtestboundid precond id childview set correctly equals emberviewviews id childview childview passed id via elementidbinding registered emberviewviews properly receive events rootresponder one fails even supported think", "num": "425", "d": "1/2012"}, {"title": "broken binding examples", "body": "documentation emberjs example nt seem work line returns later similar example also broken logging results also sure documentation implementation issue making examples executable could help find issues earlier working docs someone reading", "num": "423", "d": "1/2012"}, {"title": "emberset regression", "body": "observing works emberlatest observing work either fiddle fiddle latest", "num": "420", "d": "1/2012"}, {"title": "binding paths", "body": "bindings handle exactly two paths reason handle", "num": "416", "d": "1/2012"}, {"title": "emberbutton stops working appready defined", "body": "strange one trying track today unable far reduce failing unit test case html simple open following browser get button triggers alert clicked uncomment commented line try action triggered tested chrome firefox get behaviour write code unit test passes someone test confirm stupid html", "num": "414", "d": "1/2012"}, {"title": "emberview property isvisible true unappended views", "body": "ember view isvisible property defaults null view appended dom call get isvisible returns true expect return null indicate view rendered", "num": "412", "d": "1/2012"}, {"title": "ability multiple mixins didinsertelement", "body": "clobbered view didinsertelement way achieve use case views draganddrop functionality windowscroll functionality etc use multiple views would like break somehow", "num": "411", "d": "1/2012"}, {"title": "move tabs embercontrols", "body": "general rule thumb controls outlined wycats keep controls core move controls new embercontrols repo think tab controls fall latter category", "num": "409", "d": "1/2012"}, {"title": "stop embertextfield clearing value torn", "body": "currently embertextfield removed clears value see causing trouble wagenet came fix see sets embertextsupport mixin elementvaluedidchange method javascript elementvaluedidchange function var val val textfield textarea never value unless removed", "num": "407", "d": "1/2012"}, {"title": "support concurrent substates emberstate", "body": "example page three panes one menu list last document handle states running time", "num": "406", "d": "1/2012"}, {"title": "performance issue get windowember", "body": "calls quite often time returns takes time resolve using timing module found following asis iterations take adding quickabort case iterations take", "num": "405", "d": "1/2012"}, {"title": "ensure bindings properly handle globals", "body": "bindings always look global style paths capitals global context want look local object prepend path probably works already confirm indeed behavior also see", "num": "403", "d": "1/2012"}, {"title": "fall back global", "body": "tests pass somewhat surprising get relative paths fallback globals nt break apps provide deprecation warning global fallback occurs instead immediately removing behavior", "num": "402", "d": "1/2012"}, {"title": "improve", "body": "better support tags would probably include adding show attributes applicable", "num": "401", "d": "1/2012"}, {"title": "bindings self global object nt work", "body": "see", "num": "400", "d": "1/2012"}, {"title": "way determine view rendered", "body": "tl dr want add show hide rendered view class let know would take building wizard multiple views allows person go back forth steps determine show render view currently using code like indication views rendered state lose state things like select boxes remove view dom think would quite handy something like built emberview get pull request together take something thats advisable like hint craig mcnamara", "num": "398", "d": "1/2012"}, {"title": "problems bindings example website documentation", "body": "hi trying bindings code example jsfiddle javascript windowmyapp emberapplicationcreate myapppresident emberobjectcreate name barack obama myappcountry emberobjectcreate ending property binding tells ember create binding presidentname property presidentnamebinding myapppresidentname consolelog myappcountryget presidentname undefined consolelog myapppresidentget name barack obama returns", "num": "397", "d": "1/2012"}, {"title": "provide handlebars runtimeonly build", "body": "using precompiled handlebars templates would nice able ship build ember handlebars runtime vm see", "num": "396", "d": "1/2012"}, {"title": "classbinding vs classnamebindings view helper", "body": "difference documented emberjscom easy missforget however works used view helper use one value documented view classbinding redtext works view classbinding redtext boldtext works using classnamebindings instead classbinding view classnamebindings redtext works view classnamebindings redtext boldtext work action would make sense support lists coming view helper perhaps assert used helper message pointing user", "num": "393", "d": "1/2012"}, {"title": "views could notified children inserted dom", "body": "found feature useful creating uis target multiple platform following gist gives scrollview example view must know current size children views issue could solved patch shown gist similar purpose following pull request writting", "num": "391", "d": "1/2012"}, {"title": "else handlebars helper work expected case else", "body": "else block works expected initial content empty later emptying content garbage gets binded view seem example", "num": "389", "d": "1/2012"}, {"title": "certain bindingspaths nt respect handlebars bindingcontext", "body": "instance apparently", "num": "388", "d": "1/2012"}, {"title": "parentview binding working handlebars view helper", "body": "hi master branch parentview binding handlebars template work anymore quick file compare noticed deleted line code line take place line put back binding start working find useful bind properties parentview build complex template using subview example built select input view like reused many purposes idea removed thanks jeff", "num": "387", "d": "1/2012"}, {"title": "automatic dependency recognition", "body": "automatic recognizing first run body function dependencies uses see example docs create firstname null lastname null fullname embercomputed function var firstname thisget firstname var lastname thisget lastname property firstname lastname idea reprogram method automatically add dependencies executed context code would become shorter coffeescript friendly create firstname null lastname null fullname embercomputed function var firstname thisget firstname var lastname thisget lastname oh use method would disable behavior code would backwardcompatible customizable needed think", "num": "386", "d": "1/2012"}, {"title": "support extra params statemanager gotostate", "body": "would really handy could pass additional parameters gotostate method statemanager right takes state name sproutcorestatechart already supports something like thanks", "num": "385", "d": "1/2012"}, {"title": "create embercontrols", "body": "follow discuccion wagenet need optional embercontrols package built separately core would say move content emberhandelbarscontrols add candidates things add selectoption simple modal spirit tabs form validation support", "num": "384", "d": "1/2012"}, {"title": "rerender automatically using templatenamebinding", "body": "changing templatename manually", "num": "380", "d": "1/2012"}, {"title": "views could assigned application context", "body": "developement touch devices would like know whether could possible view assigned application think currently feature implemented need create managers ex animation touch managers control applicationglobal event state sure exactly managers created think related application could suitable place case managers would govern based application contexton case view triggers event could really easy call specific managerany recommendationindications wellcome", "num": "375", "d": "1/2012"}, {"title": "jqueryinarray indexof", "body": "found method implement extendprototypes nt influence nt know expected user anyway always presented prototype array nt need use jqueryinarray ember indexof implementation", "num": "372", "d": "1/2012"}, {"title": "embergetbyid getting view instantiated objects", "body": "would kie suggest feature think would nice ability get instantiated view object programatically example html view emberview id propertya text view would able access instance change propertya example code illustrate works think unsafe use id like propagating id way dom maybe another metadata id would used cases getbyid function maybe future could extquery equivalent", "num": "366", "d": "1/2012"}, {"title": "provide way schedule code run immediately current run loop committed", "body": "may already way achieve nothing see satisfies particular requirements want able run code current event loop immediately current run loop ended guarantees bindings propagated things tried far include using emberrunnext works smell cases code defer next event loop opposed run loop consequences undesirable situations particularly unit testing deferring code next event loop cause sorts unexpected behaviour explicitly handled within test adding custom queue emberrunqueues seemed like obvious place found nt guarantee code run bindings synchronised surprised thought part reason queues existing make sure rendering happened bindings settled either misunderstood bug could anyone confirm created following mechanism achieving want app feel like sort thing baked ember already coffeescript aftercommitqueue functions scheduled commit run order put onto queue immediately current run loop ended different scrunnext functions run current event loop instead future one functions executed aftercommitqueue run single run loop emberrunscheduleaftercommit fn gt aftercommitqueuepush fn originalrunloopend emberrunend emberrunend gt originalrunloopend aftercommitqueuelength emberrun gt aftercommitqueuelength fn aftercommitqueueshift fncall fn", "num": "364", "d": "1/2012"}, {"title": "add tests emberobject detect", "body": "seems tests method defined want write reminder", "num": "360", "d": "1/2012"}, {"title": "capture mouseover mouseout", "body": "minor probably nt even count issue find mouseover mouseout events useful style reasons possible add two lines eventdispatcher setup function mouseover mouseover mouseout mouseout", "num": "359", "d": "1/2012"}, {"title": "attributebindings nt work textarea", "body": "textfield implementation attributesbindings used bind value typo also embertextfield emberviewextend embertextsupport scope embertextfieldprototype classnames embertextfield tagname input attributebindings type value type text textarea implementation code used embertextarea emberviewextend embertextsupport scope embertextareaprototype classnames embertextarea tagname textarea private didinsertelement function thisupdateelementvalue updateelementvalue emberobserver function val get value value depend textarea tag", "num": "357", "d": "1/2012"}, {"title": "iterate global objects", "body": "see view globallistcontroller produce output html globallistcontroller applistcontroller javascript app emberapplicationcreate globallistcontroller emberarrayproxycreate content applistcontroller emberarrayproxycreate content", "num": "354", "d": "1/2012"}, {"title": "setproperties use changeproperties", "body": "answering question stack overflow noticed implementation setproperties emberobservable nt ensure call endpropertychanges javascript set multiple properties call setproperties hash param hash hash hash keys values set returns emberobservable setproperties function hash emberbeginpropertychanges var prop hash hashhasownproperty prop set prop hash prop emberendpropertychanges return expectation opening code going use emberchangeproperties calls endpropertychanges finally block javascript emberchangeproperties function cb emberbeginpropertychanges try cb finally emberendpropertychanges reason use changeproperties setproperties implementation get make pull request", "num": "352", "d": "1/2012"}, {"title": "mailing list", "body": "good reasons nt user mailing list stackoverflow works great questions nt work others especially new users probably post already posted questions nt really fit scheme get closed already opened discussion meta got pointed old discussion worth read use stack overflow official support site opensource project like secondary level support system willing continue answer questions would strongly recommend also user mailing list", "num": "351", "d": "1/2012"}, {"title": "bindings properly connected referring property defined binding", "body": "order key definition object literal pass seems matter bindings created jsfiddle example", "num": "347", "d": "1/2012"}, {"title": "applyattributebindings function missing", "body": "hi made update bpm dependencies getting following error uncaught typeerror object emberview method applyattributebindings compare bpm folder old one thanks timemachine find source error ok error line bindingjs thanks jeff", "num": "346", "d": "1/2012"}, {"title": "add emberjs travisciorg", "body": "travisci continuous integration platform open source projects thinking adding emberjs travisci every new commit merge master branch would trigger test run would also nice added downloads latest build emberjs goodness think", "num": "345", "d": "1/2012"}, {"title": "jqueryextend ie extended prototypes infinite loop", "body": "cases get stuck infinite loop due ember meta objects added native classes array problem appears present ie fixed turning extended prototypes however would nice fix without turn extended prototypes quick way reproduce", "num": "344", "d": "1/2012"}, {"title": "remove emberhandlebarsformat", "body": "used bpm moved repo even used", "num": "342", "d": "1/2012"}, {"title": "ember identifynamespaces tries read values windowglobalstorage ff causing security exception", "body": "rummaging attributes ember identifynamespaces causes security exception thrown firefox seems stem trying read value windowglobalstorage like based tries read globalstorage host curiously calling causes security exception thrown old new firefox", "num": "341", "d": "1/2012"}, {"title": "enumerable sortproperty documented missing", "body": "website talks ca nt find anything code defines references", "num": "335", "d": "1/2012"}, {"title": "fix unbound helper used", "body": "see ca nt reopened since pull request", "num": "332", "d": "1/2012"}, {"title": "emberassert correct version jquery used", "body": "cut people experiencing unexpected behavior using version jquery ember nt tested", "num": "331", "d": "1/2012"}, {"title": "emberbutton bug release click outside button", "body": "reproduce mousedown button class isactive drag mouse button without release click class release click outside button hover button class isactive", "num": "330", "d": "1/2012"}, {"title": "new inserted every helper update", "body": "html apppeople name example without every time updated helper insert new dom element", "num": "326", "d": "1/2012"}, {"title": "classnamebindings appear work view emberbutton", "body": "jsfiddle demonstrating behavior impression classnamebindings would attach class name either string returned binding hyphenized name property boolean however nt appear function view case working varient todo example goal make button disappear completed tasks seems best way accomplish", "num": "322", "d": "1/2012"}, {"body": "rspeer put together jsfiddle demonstrates problem", "d": "1/2012"}, {"body": "jsfiddle nt support coffeescript afaik tried tinkerbincom timing different race condition nt occur running machine often load correctly long period time load incorrectly long period time done press reload button", "d": "1/2012"}, {"body": "okay horriblelooking jsfiddle reproduce issue reliable way reproduce everything local computer hit reload four times quick succession", "d": "1/2012"}, {"body": "unfortunately unable reproduce jsfiddle nt know test fix come reliable way reproduce problem let know reopen ticket", "d": "1/2012"}, {"body": "exact setup reproduces failure put indexhtml put staticinterfacecoffee coffee thislui lui emberapplicationcreate luicanonicaltopic emberobjectextend name default terms color selected luitopiccontrollerget selected thisget name property luitopiccontroller emberarrayproxycreate content null selected example luitopiccontrolleraddtopic name example color fill staticlibs appropriate libraries coffeescriptjs serve directory containing indexhtml web server port use python simplehttpserver testing load chromium hit ctrlr reload four times quickly result example item disappears list even update new items added using js debugger", "d": "1/2012"}, {"body": "generally bad idea return object uncached computed property ask wycats information case see discussion making caching default", "d": "1/2012"}, {"body": "understand makes sense use cacheable required", "d": "1/2012"}, {"body": "moment way cycles detected bindings ing property way back checking whether value unfortunately means properties nt semantic equivalents instance foo foo even calculated second time ambiguous us whether object whether property changed meantime requires new making property cacheable fixes problem subsequent nt retrigger computed property returns identical object ultimately want smarts binding avoid pingponging run loop nt gotten", "d": "1/2012"}, {"body": "nt strictly bug though may area improve creating instance pass along value defined class literal problem object ends shared across instances sharing could problem depending case one solution write method along lines may possible setup things objects cloned would difficult tell proper way clone object since vary type", "d": "1/2012"}, {"body": "ghempton take look perhaps fits purpose also created custom navigationview manages childviews array", "d": "1/2012"}, {"body": "would nt give benefit briefly talked wycats yesterday best way would something along lines dynamically swappable yield statement", "d": "1/2012"}, {"body": "think correct solution set observer triggers method", "d": "1/2012"}, {"body": "sorry really sure would help need rerender element styles set div google js lost would triggering rerender method observer help", "d": "1/2012"}, {"body": "sorry guess misunderstood recommend taking question stack overflow tag emberjs nt think bugs changes made ember sounds like question best implement app good place go sorts questions", "d": "1/2012"}, {"body": "really question best implement app question embers approach dealing situations likely crop third party javascript libraries google maps one example summary question ember rendered element javascript modifies attributes element changes kept element rerendered", "d": "1/2012"}, {"body": "looked little carefully case rerender nt even coming play actually setting style override value google maps provided ember exactly told nt want completely override would nt set style attributebinding instead would set observers width height jquery update styles", "d": "1/2012"}, {"body": "ah ok see whats happening thanks", "d": "1/2012"}, {"body": "reproduced", "d": "1/2012"}, {"body": "seem legitimate", "d": "1/2012"}, {"body": "closing issue favor pull request", "d": "1/2012"}, {"body": "internally ember using instead global seeing usage", "d": "1/2012"}, {"body": "clarify points directly jquery global nt internal references global fine overwriting whatever want one reference found fixed since already work closing ticket mistaken find spot ember uses global please let know", "d": "1/2012"}, {"body": "loaded ember loading prototype stack trace get correct searched nt notice however something still trying call prototypejs function assumed errant issue looks like something bit nefarious idea going", "d": "1/2012"}, {"body": "zilkey get us small test case breaking jsfiddle look stack trace see coming", "d": "1/2012"}, {"body": "prototypejs modify could cause", "d": "1/2012"}, {"body": "ember uses internally appears prototype sets alias suspect cause sure ember fault seems like prototype one playing nice however may possible fix", "d": "1/2012"}, {"body": "thanks looking quickly prototype tends misbehave making transition away could ember use jquery map function instead native one", "d": "1/2012"}, {"body": "prefer use native defined browser much optimized maybe try overwriting prototype implementation forcibly redefining map code would get run prototype nt already defined map copy force", "d": "1/2012"}, {"body": "would probably fine us define emberforeach embermap etc use internally kind shame prototype bludgeoning native array implementations", "d": "1/2012"}, {"body": "wycats think technically supposed incompatible feeling like ending incomplete integration something like prototype weird stuff", "d": "1/2012"}, {"body": "seems bad michaelklishin joewest suggestions", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "ebryn also find case could closed concern regarding class updated content example n items method fired removed item n times trigger n times behavior happen inserted n items method fired realized working pull request need case way containerview notified childviews ended updated notification must fired", "d": "1/2012"}, {"body": "thanks cortland put reduced test case jsfiddle us play", "d": "1/2012"}, {"body": "observe consolelog gets called beta unbound alpha bound never gets called", "d": "1/2012"}, {"body": "watching property calls emdefineproperty setup watched property descriptor", "d": "1/2012"}, {"body": "unknownproperty logic probably needs moved setter code instead inside descriptors", "d": "1/2012"}, {"body": "make jsfiddle shows issue", "d": "1/2012"}, {"body": "unable reproduce setup jsfiddle use template", "d": "1/2012"}, {"body": "sorry missed something important constantly changing dom many pages get rendered dom based actions user takes looks like loading existed older template ember trying update however longer dom cleared new page rendered", "d": "1/2012"}, {"body": "js fiddle show", "d": "1/2012"}, {"body": "think calling seems removing metamorph script tags uses target content perhaps specific clearing use different method remove line problem goes away", "d": "1/2012"}, {"body": "keithpitt exactly right want get rid original view call latter nt plan reinsert view nt clear html jquery", "d": "1/2012"}, {"body": "add specific tag name selector wo nt match script tags", "d": "1/2012"}, {"body": "firstchild lastchild nt allow tag type specified apparently less supported firstoftype selector get around", "d": "1/2012"}, {"body": "even though specifying tag name prevents script tags matched nt account fact element surrounded script tags never first last parents children", "d": "1/2012"}, {"body": "using firstoftype ghempton suggested work chrome least unfortunately simple way around problem one limitations metamorph would like discuss please open ticket", "d": "1/2012"}, {"body": "still think creates substantial amount design friction emberjs due unsupported nature oftype selectors reopened could alternatively solved access index inside helper", "d": "1/2012"}, {"body": "ghempton would access index help problem", "d": "1/2012"}, {"body": "maybe missing right way ubiquitous design pattern web design first andor last element list given special styling right good crossbrowser read ie way easily ember way think manually assign index property underlying data pita access index would reduce boilerplate around index used give first last element special class name", "d": "1/2012"}, {"body": "fair enough would nice able improve helper bit maybe find way work", "d": "1/2012"}, {"body": "also hitting issue looks like fix index could help could else write relevant css instead", "d": "1/2012"}, {"body": "pixelcort suspect metamorph never switched comments performance big concern", "d": "1/2012"}, {"body": "using allow property survive subclasses therefore also accessible instance subclass", "d": "1/2012"}, {"body": "nt seem work properly returns however return returning however properly returns expected behavior one needs use reopenclass subclassing bug", "d": "1/2012"}, {"body": "pixelcort raycohen saying subclasses nt receive properties defined via made bit clear seems like expecting modify subclasses call parent subclasses defined behavior would expect also first example ca nt see would return tests nt think able demonstrate different defining directly confirmed bug behavior result closing", "d": "1/2012"}, {"body": "wagenet specifically said properly returns never expecting return also understood raycohen see intended purpose reopenclass used subclassing would closed issue apparently already closed", "d": "1/2012"}, {"body": "pixelcort sorry guess misunderstood glad got sorted though", "d": "1/2012"}, {"body": "include buffering large collection changes updating rendered collection view list schedules item insertion dom slow compared rerender rendered empty collection view got result ajax call slow render phone switched rendering collection view ajax call came back sort spoils whole data binding magic", "d": "1/2012"}, {"body": "kselden created separate issue optimization", "d": "1/2012"}, {"body": "looks like runloop issue wrap call works expected", "d": "1/2012"}, {"body": "also generally good practice call gotostate externally see discussion", "d": "1/2012"}, {"body": "figured something along lines nt statemanager internally certain operations need manually wrapped", "d": "1/2012"}, {"body": "normally nt worry runloops joewest commented may calling unexpected way", "d": "1/2012"}, {"body": "joewest aware trying show simplified example", "d": "1/2012"}, {"body": "still get result", "d": "1/2012"}, {"body": "seems like two page comes using states perhaps one could take time create rough draft", "d": "1/2012"}, {"body": "understanding nested viewstates supported definitely documentation issue focus fix wycats tomdale correct close ticket", "d": "1/2012"}, {"body": "nzkoz thanks catching definitely fix", "d": "1/2012"}, {"body": "tested ember looks like binding appexampleobjectcontrollercontentpropertyname work later appexampleobjectcontrollerset content newcontentthatalsohaspropertyname leave open see good way", "d": "1/2012"}, {"body": "thing tried also appears work bind appexamplecontrollerpropertyname literally call appset examplecontroller newcontentobject", "d": "1/2012"}, {"body": "planning probably release reintroduce objectcontroller way objectproxy binding controllercontentfooproperty work without star notation", "d": "1/2012"}, {"body": "okay sounds good thanks tom", "d": "1/2012"}, {"body": "try using", "d": "1/2012"}, {"body": "course declares dependency invalidate cache", "d": "1/2012"}, {"body": "think stay consistency views every basic form element etc one buttons well opinion removing would somewhat break api buttons would different add application compared controls really want cleanup ember core controls extracted embercontrols similar package well furthermore adds event handling touch mouse keyboard events added behavior useful buttons think use cases hover styles tooltips sort live preview", "d": "1/2012"}, {"body": "nowhere near enough insight offer opinion wondering someone could point resources blogs github posts js fiddles relevant commits would show one would use action helper instead emberbuttons pros cons two trying piece together looking various discussions pull requests quite convoluted seems like major issue moment like understand changes bit better thanks", "d": "1/2012"}, {"body": "remove definitely update documentation include helper", "d": "1/2012"}, {"body": "agree removal added also agree beforeif removed helper added docs handle one else started created replacement cases case replaced standard element submitting form handling formbased view instead using additional key handling needed within form elements submit form case replaced standard element action helper case replaced standard element action helper opinion weakest use case buttonspecific event handlers properties nt even apply tags agree benedikt good use cases touch mouse keyboard events currently however think belong separate lib libs outside core events nt apply devices may wanted apps may want use keyboard events buttons touch devices touch events nontouch devices terms goes core nt understanding basic form elements allow bindings appropriate wycats mentioned another issue reasoning bindings difficult reproduce without view rule nt qualify nt use bindings tab views also nt qualify since nt map directly element think exported keep core lean possible", "d": "1/2012"}, {"body": "lot emberbuttons generated directly via js therefore ca nt easily substituted action helper based construct course create custom view equivalent functionality end probably look somehow similar current ember button wanted illustrate use case emberbutton gets killed easily live even appreciate forces use something cleaner isactive stuff targeted custom touch implementation generally less overhead", "d": "1/2012"}, {"body": "dgeb asked ebryn like write docs nt think able anything yet probably fine took", "d": "1/2012"}, {"body": "wagenet done heavy lifting action docs least try get later today", "d": "1/2012"}, {"body": "wagenet see action docs", "d": "1/2012"}, {"body": "whatever value selectionbinding default value also add prompt example", "d": "1/2012"}, {"body": "hi ebryn example show questions put question marks comments could see happening thanks", "d": "1/2012"}, {"body": "please ask questions like stackoverflow issues tracker used reporting bugs", "d": "1/2012"}, {"body": "want speed initial render could add objects sortedcontacts stages rather large list one project wait user scroll adding objects list tied collection view even though objects loaded server much earlier", "d": "1/2012"}, {"body": "raycohen add new objects collectionview pushobjects would nt adding objects content array rerender entire view love see code done work used different strategy sound nicer assume manually set height ever scrolling aswell", "d": "1/2012"}, {"body": "exactly thought nt time test want play around app pushed sample app", "d": "1/2012"}, {"body": "ember draws new dom elements necessary pushobjects onto list bound collection view object list tied itemview allows inserted updated separately scrolling using logic adapted one infinite scroll jquery plugins figure height list step figuring much hidden window", "d": "1/2012"}, {"body": "controller binding selection observe changes selection trigger additional behavior also subclass emberbutton observe selection", "d": "1/2012"}, {"body": "appselectedpersoncontroller emberobjectcreate person function return apppersonget firstname write way call could provide example thanks", "d": "1/2012"}, {"body": "example observe person changing within controller", "d": "1/2012"}, {"body": "thanks lot works understand structure ember works new ember two days", "d": "1/2012"}, {"body": "know reference ember build objects say emberbutton emberselect ember documentation", "d": "1/2012"}, {"body": "princa look source code currently", "d": "1/2012"}, {"body": "issue example bit contrived bindings nt sync immediately normally app would nt issue proper architecture post issue thanks", "d": "1/2012"}, {"body": "obeservers disabled seems like maybe still work", "d": "1/2012"}, {"body": "wycats thoughts", "d": "1/2012"}, {"body": "comments set still suggest using", "d": "1/2012"}, {"body": "ok looks like changed", "d": "1/2012"}, {"body": "getting complicated two properties probably make computed property instead", "d": "1/2012"}, {"body": "disagree binding would super helpful", "d": "1/2012"}, {"body": "seems like would nicer sugar able", "d": "1/2012"}, {"body": "doubts reopen", "d": "1/2012"}, {"body": "thanks actually looking right made allnone bindings sc ended completely changing way apps pretty amazing", "d": "1/2012"}, {"body": "wrote ember bindingjs", "d": "1/2012"}, {"body": "devinus judging charles tom yehuda minor things erik", "d": "1/2012"}, {"body": "looking internals bindings support maximum two paths main path operand path properly implement would require significant rework internals going close ticket however pull requests definitely welcome", "d": "1/2012"}, {"body": "need define within call ready method", "d": "1/2012"}, {"body": "great thanks following instructions prob worth making note need", "d": "1/2012"}, {"body": "like make internals use different method ready avoid issue", "d": "1/2012"}, {"body": "wycats tomdale guys wrote code sound like bug", "d": "1/2012"}, {"body": "craigmcnamara unable reproduce provide test case jsfiddle gladly reopen", "d": "1/2012"}, {"body": "raycohen tried calling one pretty sure mixins play nice", "d": "1/2012"}, {"body": "yes thanks", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "clarify proposed fix replace function one", "d": "1/2012"}, {"body": "trying generate simple failing test case qunit hard get one figured however wycats ok think make change since", "d": "1/2012"}, {"body": "fixes problem", "d": "1/2012"}, {"body": "merged", "d": "1/2012"}, {"body": "sure think require also feature panes pane different substates would like able move different panes moved back pane substate try see done currently solved problem creating multiple statemanagers", "d": "1/2012"}, {"body": "azer get right", "d": "1/2012"}, {"body": "jamesarosen method referring", "d": "1/2012"}, {"body": "jamesarosen also call stack information clue looking", "d": "1/2012"}, {"body": "fail probably look included picture sorry", "d": "1/2012"}, {"body": "hmm noticed based sproutcore code probably quite date still happen master update corresponding information", "d": "1/2012"}, {"body": "azer rerun ember head", "d": "1/2012"}, {"body": "hi jamesarosen wagenet sorry noticed issue tried master version seems fixed quite faster thanks azer", "d": "1/2012"}, {"body": "azer great close", "d": "1/2012"}, {"body": "indeed works confirmed", "d": "1/2012"}, {"body": "disagree direction favor using tags event handlers attribute bindings nt apply tags furthermore tags unique attributes perhaps combining elementspecific handlers logic one view lead extra processing memory think unneeded event handlers table links last least consider would clear new ember developer please reconsider inclusion glad tidy discussed", "d": "1/2012"}, {"body": "dgeb discussing addition helper think reduces need link view hacked together example might work think", "d": "1/2012"}, {"body": "vote increasing intag helpers might even look remove favor finding nice way express thing helper", "d": "1/2012"}, {"body": "lot important use cases attribute helpers think could better especially related specifying css classes nt want create view instances everything imo creating view tag overkill", "d": "1/2012"}, {"body": "agree ebryn tag operating semantically containing view requiring whole new view unnecessary idea action helper came large number reallife cases made sense create simple html element whose default action conceptually executed operation current view", "d": "1/2012"}, {"body": "concerns every intag helper functionality must also achievable view intag helpers generally require different syntax achieve functionality view two apis thing see vs intag helpers ca nt share attribute hook knowledge render time proliferate intag helpers might eventually end something like seems like risks becoming mess could use whole way", "d": "1/2012"}, {"body": "trying use three attributeintag helpers like using view", "d": "1/2012"}, {"body": "ebryn yes clearly wonder nt use view beginning makes particular intag helpers worth breaking presumably could break almost everything view helpers tell people hit two three switch view nt little odd", "d": "1/2012"}, {"body": "hard generalize say one way always better another discussion specifically simple links think takes foresight developer know draw line opinion using one attributeintag helper use view simple example personally find cleaner", "d": "1/2012"}, {"body": "need target nt", "d": "1/2012"}, {"body": "case view would need something like nt know target special property ca nt nt try set default basic idea button link operating conceptually current view large amount immediately obvious boilerplate needed say something rather simple", "d": "1/2012"}, {"body": "discussing two approaches htmlhelpers elementsasviews existence controls like absence helper core currently advocates elementsasviews approach led propose views logical extensions core currently exists sure would use either instead simpler helper point question whether controls belong core proposed control views could broken separate package keep core leaner less opinionated view libraries could written ember favor either helperbased approach elementsasviews approach combination two", "d": "1/2012"}, {"body": "dgeb controls needed twoway bindings desired order implement twoway bindings text field instance need something like also listen important events propagate data back source implementation text controls pretty straight forward almost entirely dedicated listening events right thing see embertextsupport mixin powers embertextfield embertextarea since desire bind text fields common think bundling rather simple views core makes sense case link button eventdriven twoway bindings required works pretty nicely", "d": "1/2012"}, {"body": "wycats thanks reply preference helper gets added gets removed altogether", "d": "1/2012"}, {"body": "think core since gives us object mix example targetaction used really think making smarter tags right approach take core", "d": "1/2012"}, {"body": "ebryn solution", "d": "1/2012"}, {"body": "instead helpers single helper created examples el href onclick edit edit el el button onclick edit edit el el div classbinding isurgent urgent el advantages similar syntax view easy change one lighter weight view takes attributes actions bindings nt make sense outside tag forces issue single id created inserted element uses less markup gt action actions could default using current view target stems proliferation unnecessary custom views bringing issue instead new one concerns everyone raised led proposal rather discuss coding", "d": "1/2012"}, {"body": "dgeb think point starting miss purpose handlebars idea try able much html possible views mixed proposing neither handlebars views interesting inclined pursue option", "d": "1/2012"}, {"body": "considering last two commits fixed problem ebryn action support come new commitpr soon", "d": "1/2012"}, {"body": "interestingly work nt include namespace", "d": "1/2012"}, {"body": "nt include namespace property", "d": "1/2012"}, {"body": "frodsan good catch nt notice", "d": "1/2012"}, {"body": "description bug accurate nt binding global namespace fails namespace defined binding connected bug global bindings work meta setup correctly case seems like chain setup drops app app self listeners setup app still observers listen appcontrollerslength change controllerslength change gets sent looks like code change appcontrollerslength controllerslength app self nt work way", "d": "1/2012"}, {"body": "kselden title updated thanks", "d": "1/2012"}, {"body": "view dom including childviews gets called answers question suficiently thing close issue show hide property", "d": "1/2012"}, {"body": "recommend use instead using allows use callbacks view well use jquery directly toggle visibility ember wo nt know changes", "d": "1/2012"}, {"body": "given assuming thick ticket resolved incorrect let know reopen", "d": "1/2012"}, {"body": "thanks", "d": "1/2012"}, {"body": "ok using isvisible property gets around jquery hacks still issue determining view rendered isvisible property defaults null call get isvisible view appended returns true instead null seems like bug still see need hasrendered property something", "d": "1/2012"}, {"body": "craigmcnamara also check property see", "d": "1/2012"}, {"body": "said maybe file appended bug sure intentional discussion would nt hurt", "d": "1/2012"}, {"body": "thanks open bug isvisible behavior reading code definetly expect give null take look using state mean time kill last jquery hack", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "frod problem runloop nt synced bindings yet force sync work see", "d": "1/2012"}, {"body": "oh see thanks pd nicer explanation website documentation", "d": "1/2012"}, {"body": "would useful use case", "d": "1/2012"}, {"body": "covered", "d": "1/2012"}, {"body": "covered described pull request let know need clarify anything", "d": "1/2012"}, {"body": "may misunderstood problem works expected jsfiddle tho never see else controller never empty controllercontent", "d": "1/2012"}, {"body": "guilhermeaiolfi wrong link jsfiddle opened issue referring one please chech updates link see else seconds later one two else unfortunately end get undefined", "d": "1/2012"}, {"body": "verify issue view getting rendered reason invalid", "d": "1/2012"}, {"body": "ok tracked problem nt fix yet steps follows collectionview updates childviews ends call source calls special metamorph one source prepend attempts get however metamorphview rendered source", "d": "1/2012"}, {"body": "jfgirard look removed however default handlebars properties parent context almost always example removing paths likely work", "d": "1/2012"}, {"body": "change", "d": "1/2012"}, {"body": "inclined think change correct though may break apps find still unable trying let know", "d": "1/2012"}, {"body": "wagenet ok didnt know context set parent view sub view declaration found classbinding using current view context example working version add setting classbinding regular property binding parentview context class property binding currentview context documentation", "d": "1/2012"}, {"body": "mean", "d": "1/2012"}, {"body": "well template definition use thing classnamebinding working check last part", "d": "1/2012"}, {"body": "show template like see use", "d": "1/2012"}, {"body": "template embertextfield want set binding property parentview simply working create local property takes inputclass property parentview bind inputclass property current view works fine like figured", "d": "1/2012"}, {"body": "seems interesting however feel like would probably pretty fragile prone breaking instance something like fullname embercomputed function var self var firstname selfget firstname var lastname selfget lastname return firstname lastname know bit contrived imagine many similar situations", "d": "1/2012"}, {"body": "currently think two solutions passing shimmed proxy using global like nt think removing method would nice feature faster development simple methods even enabled option anyways glad someone find elegant solution", "d": "1/2012"}, {"body": "nt see anything wagenet example would break automatic detection knockoutjs already whenever computed observable evaluated pushes dependencies array onto stack observables evaluated time added works javascript singlethreaded", "d": "1/2012"}, {"body": "exogen ah good point thinking wrong way open someone attempting pull request prefer explicit declaration could probably half decent job guessing still imagine problems things like content null never called wo nt list dependencies cases people could specify explicitly", "d": "1/2012"}, {"body": "wagenet knockout handles case dependency list nt determined updated whenever observable reevaluated", "d": "1/2012"}, {"body": "biggest problem approach requires executing computed properties boot determine dependencies would extremely expensive conceptually problematic computed properties may rely state set bootstrapping phase potentially fragile unexpected ways obvious multiple conditionals inside computed property could conspire together hide changeable dependencies automatic detector suspect executing computed properties new objects would prohibitively expensive open someone demonstrate true", "d": "1/2012"}, {"body": "offer knockout already solved concerns including multiple complex conditionals although ca nt speak expensive part option defer evaluation computed properties really need determine dependencies boot vs first evaluation", "d": "1/2012"}, {"body": "exogen definitely need determine dependencies advance otherwise wo nt able trigger change notifications done one evaluation", "d": "1/2012"}, {"body": "appstatemanagergotostate name ctx enter function ctx", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "closing favor", "d": "1/2012"}, {"body": "thing maskinput would good candidate done port relevant part meiomask jquery plugin ember class works needs tests bit love could useful starting point", "d": "1/2012"}, {"body": "really nice addon think way complex embercontrols talking validations example thinking structure validators attached fields relation betvin form fields maybe example common validators email number length tabs great example simple versatile juste structure like rest ember juste opinion", "d": "1/2012"}, {"body": "forgot two important ones progress range given poor browsers support maybe implement fall back", "d": "1/2012"}, {"body": "puzzling whether belonged core seemed fit pattern controls already agree breaking controls separate project good idea also agree major gaps fill would glad help fill might good time bring broad questions apply controls inputs always update bound properties focus lost case would better delay updates parent form submitted former approach work even form using bound object duplicate created editing form submitted changes get applied main object otherwise changes discarded see latter approach seems lighter weight since nt involve creation bound object editing nt well supported current controls inputs bound properties aware validations set model might involve working together emberdata define validations fields goal library work well ui libraries jqueryui jquerymobile embercontrols start get pretty opinionated including controls tabs corresponding html elements implemented many different ways may preferable extract tabs another separate lib", "d": "1/2012"}, {"body": "scoping updates form interesting idea may good solution problem anyway would go idea validations think would prefer sc approach validatable mixin field views tabs versus native controls yes different beasts may belong different packages tabs could go modal simple ui components first half pleased tabs addition must say implementation little assumptions markup made peace code played lot jqueryui integration ember first sight tempting found pain help end would really like see tabs like code separate package structural abstractions top minimal markup assumptions possible", "d": "1/2012"}, {"body": "validatable mixin approach makes sense someone wanted could take step emberdata integration nt make sense force issue default nt tried integrating ember jqueryui jquerymobile see messy could get maybe answer separate emberui package describe structural abstractions top minimal markup assumptions possible age infinite devices would make sense make package responsive work varying resolutions touch input etc course easier said done", "d": "1/2012"}, {"body": "upon consideration seems reasonable keep views elements core however nt mean nt make new embercontrols repopackage future", "d": "1/2012"}, {"body": "created embercontrols repo", "d": "1/2012"}, {"body": "ebryn would tabs good candidate move new repo", "d": "1/2012"}, {"body": "fwiw done lot jqueryui integrated ember messy require bit sourcelevel understanding nicely nt think going one standard solution works everybody probably nt belong standard control set example make extensive use jqueryuitabs wrapped nice tabview class works well tightly integrated application routing architecture want tab associated separate windowlocationhash probably best thing right would us publish examples since many ways", "d": "1/2012"}, {"body": "since ebryn created repo seems like close ticket way dgeb agree tabs might good candidate", "d": "1/2012"}, {"body": "property computed property dependent upon however automatically get called changes would expected", "d": "1/2012"}, {"body": "hi seems solution simple addied following method viewjs works fine far know binding sync start rendering template value new templatename start rendering", "d": "1/2012"}, {"body": "yup solution would use like make sure wycats tomdale nt specific reasons way", "d": "1/2012"}, {"body": "seems good think nt initially nt rerender yet", "d": "1/2012"}, {"body": "whoops realized nt quite would would recommend observing would allow cases defined manually defined manually already recalculated changes would also work", "d": "1/2012"}, {"body": "hi wagenet right need use template templatename", "d": "1/2012"}, {"body": "closing favor moving discussion", "d": "1/2012"}, {"body": "unfortunately really sure asking give bit detail maybe provide example code would use proposing", "d": "1/2012"}, {"body": "hope following gist give hint trying want create managers handle interactions based specific context thought context could provided application", "d": "1/2012"}, {"body": "wagenet definitely interested one mane use case normalize across ember places defineuse hardcoded hardcoded default would like view viewstate default append application rootelement make sens missing something however sure associate view application especially inserted maybe simple answer", "d": "1/2012"}, {"body": "familiar think answer use appendto theory could allow take use could", "d": "1/2012"}, {"body": "looks like looks ref however ca nt find documentation usage", "d": "1/2012"}, {"body": "exactly idea centralise setting use case example test environment switch body test back topic issue view link application last insertion", "d": "1/2012"}, {"body": "perhaps question answer reason behind create multiple applications case thinking something like application context view context case let developers create complex use cases view management interactionsgestures could done applicationview context example feature gesture simultaneously recognizer properly configured views nt allow view gestures recognized time would applicationview context feature could managed based context let way create better ux perhaps case view context require anyway wanted provide feedback open discussion", "d": "1/2012"}, {"body": "looks like emberapplication handle custom events maybe trigger custom events gestures", "d": "1/2012"}, {"body": "success triggering custom jquery events using target touchmove event register custom event emberapplication route views simple example app cancels active state button long tap timer scroll starts touch moving button javascript inside app eventspecialscrollstart windowapp emapplicationcreate customevents scrollstart scrollstart inside appscrollview function handletouchmove e code omitted determines touchmove scrollstart scrollstart event scrollstart scrollstartoriginalevent e etarget trigger scrollstart inside interested view function handlecancelevent e thisset isactive false thislongtouchtimer null scruncancel thislongtouchtimer delete thislongtouchtimer appbutton scmixincreate scrollstart handlecancelevent", "d": "1/2012"}, {"body": "yeah probably adding array prototypes require consideration make sure handled properly", "d": "1/2012"}, {"body": "discussing wycats concerned extending prototype essentially adding features already check exist wo nt accidentally overwrite anything looks like use test probably change urgent", "d": "1/2012"}, {"body": "guilhermeaiolfi provide use case seems like normally nt referencing views globally", "d": "1/2012"}, {"body": "wagenet nothing specific right let see imagine button somewhere clicked changed current view dock layout button form would close window view toolbar button would set selected item list another color toolbar button would remove selected item gallery view many cases would use feature could list much cases hope get idea would interested know currently", "d": "1/2012"}, {"body": "think done bindings event handlers may mistaken see specific case convinced", "d": "1/2012"}, {"body": "seen jsfiddle based simple simple custom view willing get value one properties show alert call jsfiddle updated show better would without using emberviewviews messing ember ids", "d": "1/2012"}, {"body": "jsfiddle bind known value update value instead attempting update view directly example", "d": "1/2012"}, {"body": "closing since nt think proposed solution right way handle scenario another example let know consider reopening", "d": "1/2012"}, {"body": "seems complex mean controller binding simply get view property lets think another scenario cases methods need called view binding would nt work example imagine view represents status app would show every operation goes wrong show user feels necessary view method statusviewaddmessage icon message options ajax request goes wrong statusaddmessage called inside store adapter another operation throw error statusaddmessage called etc sorry insistent think need kind power web developers without sproutcore background used create apps getelementbyid id etc maybe ember way feel free close issue think idea worth", "d": "1/2012"}, {"body": "statuscontroller could array messages bound view use controllers addmessage update view right think starting get idea views controllers always right issue closed sorry noise thank wagenet time", "d": "1/2012"}, {"body": "disappointed nt easy way pull view object chrome inspector use case", "d": "1/2012"}, {"body": "benatkin", "d": "1/2012"}, {"body": "thanks makes sense jan pm peter wagenet lt reply replygithubcom wrote benatkin reply email directly view github", "d": "1/2012"}, {"body": "turns despite initial searching actually method exactly emberrunsync tidy", "d": "1/2012"}, {"body": "false alarm found", "d": "1/2012"}, {"body": "although different package method tested detecttestjs embermetal package method defined seems original issue legitimate", "d": "1/2012"}, {"body": "created pull request", "d": "1/2012"}, {"body": "btw good talk", "d": "1/2012"}, {"body": "btw good talk agree", "d": "1/2012"}, {"body": "handle sufficient", "d": "1/2012"}, {"body": "problem nt bubble ideally like following appordersview emberviewextend templatename orders mouseover function e etarget addclass hover mouseout function e etarget removeclass hover apporders lt div classorder gt reference lt div gt event bubble child order divs emberview container handled view functions", "d": "1/2012"}, {"body": "ah ok good point", "d": "1/2012"}, {"body": "problem may handlebars view helper adds beginning path giving wrong problem solution check globals append case", "d": "1/2012"}, {"body": "also worth mentioning probably nt proper way set app may ok fix issue", "d": "1/2012"}, {"body": "also worth mentioning probably nt proper way set app may ok fix issue usage global objects totally agree good practice something nt done specific way bad practice imply nt supported sure cents", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "think concern performance clarified issue concern emberbeginpropertychanges take args definitely make pull request", "d": "1/2012"}, {"body": "distinct", "d": "1/2012"}, {"body": "two different purposes lets pass callback guarantees called callback allows pass hash property keys values iterates hash calling", "d": "1/2012"}, {"body": "make good point regarding potential confusion function names though", "d": "1/2012"}, {"body": "ah see lazy nt read code well agree probably use", "d": "1/2012"}, {"body": "assume closed associated pull request pulled please reopen case", "d": "1/2012"}, {"body": "mailing list would definitely help questions suitable", "d": "1/2012"}, {"body": "official place ask questions think would help build stronger community around project", "d": "1/2012"}, {"body": "currently home metalevel questions direction framework roadmap etc", "d": "1/2012"}, {"body": "hey guys problems mailing list solve also solved using something like github issues pull requests discussionsmetadiscussions personally system much easier want focus emberjs mailing lists tend get lost flood inbox", "d": "1/2012"}, {"body": "least partial agreement tomdale one unfortunately mailing lists tend get pretty onesided people ask lot questions nobody answers able keep questions course seem like would good place ask meta questions entirely sure github right place questions anyone ideas place maintain discussions ideas keep mailing list manageable would welcome", "d": "1/2012"}, {"body": "could worse things noisy mailing list p personally would like contribute ember hard get sense going project questions like someone working feature x make sense support nested state managers nt really home right", "d": "1/2012"}, {"body": "wagenet tomdale totally agree sometimes mailing list pretty onesided nt see solution want attract new users somebody starting emberjs development ask questions questions fit well q amp format new users want send special code snippets somewhere ask help get stuck also likely irc channel sure form contribution emberjs additional work one think investment building community someday maybe new users also contribute ember would love mailing list defined rules keep kind faq maybe github wiki editable everybody experiencedlong time users necessarily core team point new users exisiting answers wiki early possible allow discussion personal specific problems communicate philosophy maybe name people kind moderation think could least give try somebody already answered couple questions would volunteer kind moderation mailing list although one person opinion perfect support scheme would provide firstlevel user support mailing list answers general questionsrepeating pitfalls stackoverflow allowed actively post answer ourself feel need active help programming problems irc issues concerning ember directly raised discussed github known people actively point users resources best suite users questionproblems maybe situation never achieved think give try", "d": "1/2012"}, {"body": "ghempton said questions like someone working feature x make sense support nested state managers nt really home right actually exactly questions go github want suggest work new feature make ticket discuss merits idea notify anyone working also suggested mailing list would good ask things like roadmap case probably get blog going post sorts things blog stefri said somebody starting emberjs development ask questions questions fit well q amp format new users want send special code snippets somewhere ask help get stuck right new users however anything like sproutcore mailing list vast majority questions go unanswered getting enough people keep respond questions trivial task also suggested irc place sorts questions actually see irc quite regularly prefer irc answering questions allows immediate backandforth important new users nt even asking right questions irc also makes likely someone latch question address maybe still missing benefit mailing list nt deny may main concern whether mailing list would actually effective place people ask questions often go unanswered seems like could actually harm good well defined area would addressed mailing list multiple people qualified able supporting goal mailing list might work however nt yet see case", "d": "1/2012"}, {"body": "wagenet right irc great someone around able answer questions must confess nt use often ember work hours europe time irc channel quiet gets worse people living east cases slow medium like mailing list advantage post problem maybe get answer next day get answer maybe got different experience mailing lists sproutcore mailing list certainly one best examples use quite mailing list akka spray sbt nearly question answered pointed right places documentation guess area web frameworks different maybe much people playing around stuff spamming list low quality questions", "d": "1/2012"}, {"body": "stefri good point different timezones problem mailing list lowvolume think could work well afraid would end like sc lot lowquality confusing questions hard filter suspect lot people poking around ember nt really know lot writing quality apps list would important someone aggressively responding questions redirecting better forums appropriate", "d": "1/2012"}, {"body": "wagenet already said would love help moderation list like already try provide support makes sense opinion one important factor success moderated list publish somewhere maybe website expect type questions question consider inappropriate low quality mailing list example rules could look like posting coding problem mailing list please provide code jsfiddle gist point us public github project repository case want report problem concerning core libraries please raise issue github general questions best use ember solve certain problems ember best asked stackoverflow tagged emberjs list would help direct people right resources make post better question improve mails nt know work would great could least give try", "d": "1/2012"}, {"body": "solution delay creating bindings properties defined", "d": "1/2012"}, {"body": "took quick look solution straightforward since extracted bindings coreobject coreobject mixins take place technically nt know bindings", "d": "1/2012"}, {"body": "binding wired correctly would work notified page property changed page property came existence problem observers well binding initialization outside loop would help ordering problem would notify property changed applying mixin later property watched defined notify property changed", "d": "1/2012"}, {"body": "end loop", "d": "1/2012"}, {"body": "kselden ah could work well good call would awesome could make pull request test case though responsibility", "d": "1/2012"}, {"body": "last example fails tests following passes tests fixes still nt parity nt behave way orders think would better method finished adding chainwatchers nt actually fire change events would make order independent make sure chains completed property came existence would actually fire change event submit pull request test get chance", "d": "1/2012"}, {"body": "fixed example using build", "d": "1/2012"}, {"body": "assume ticket closed due acceptance pull request case please let know", "d": "1/2012"}, {"body": "provide information really sure exact problem", "d": "1/2012"}, {"body": "line bindingjs method applyattributebindings emberview expected defined least version emberview bpm rebuild trace using fetched package ember using fetched package emberstatechart using fetched package emberdatastore using fetched package spade using fetched package uglifyjs using fetched package emberruntime using fetched package emberviews using fetched package emberstates using fetched package emberhandlebars using fetched package emberhandlebarsformat using fetched package emberutils using fetched package emberdatetime using fetched package emberindexset using fetched package embermetal using fetched package jquery using fetched package handlebarsedge using fetched package metamorph building applibjs gzipped size kb building authlibjs gzipped size kb building bpmlibsjs gzipped size kb building bpmstylescss gzipped size bytes building corelibjs gzipped size kb building homelibjs gzipped size kb building loginlibjs gzipped size kb building maplibjs gzipped size kb building sandboxlibjs gzipped size kb building sandboxstylescss gzipped size kb building signuplibjs gzipped size kb building templateslibjs gzipped size bytes need info", "d": "1/2012"}, {"body": "sure bindingjs referring whole path would helpful also really like error backtrace without knowing error originates ca nt really fix easily", "d": "1/2012"}, {"body": "ok go chrome error stack trace uncaught typeerror object emberview method applyattributebindings observer invoke invokeoncetimer invoke iter runloopflush runloopend emberrunend emberrunrun embereventdispatcheremberobjectextendbubbleevent embereventdispatcheremberobjectextendsetuphandler livehandler jqueryeventhandle jqueryeventaddelemdatahandleeventhandle bpmlibsjs built following dependencies dependencies ember emberstatechart emberdatastore spade file bindingjs talking line method observer emberviewapplyattributebindings elem attr result method applyattributebindings missing emberview thanks", "d": "1/2012"}, {"body": "well check master function missing think version problem bpm bpm get version emberhandlebars module still use emberview obviously versions nt compatible fix create bug bpm project", "d": "1/2012"}, {"body": "nt actively supporting bpm anymore someone else uploaded ember packages suggest vendoring ember repo instead using one getbpmorg", "d": "1/2012"}, {"body": "yep works fine putting ember packages vendor folder thanks tip", "d": "1/2012"}, {"body": "adressed", "d": "1/2012"}, {"body": "ran issue fixed purly hack get around issue pass object get ember jquery function call stripmetaproperties removes pesky object causes infinite loop sure even fixable extended prototypes turned", "d": "1/2012"}, {"body": "usecase using jqueryextend ember object add properties include bindings computed properties observers use reopen set bunch properties use setproperties", "d": "1/2012"}, {"body": "mixin arrayprototype adds ember meta arrays separate issue happened jqueryui", "d": "1/2012"}, {"body": "kselden adds meta arrays used inside ember case caused array used inside ember get passed jquery ui think remember similar case involving ace want get handle interop actually happening", "d": "1/2012"}, {"body": "wycats bug description nt even reference jquery ui claim interferes standard array prototype reported error blow extended prototypes jquery ui", "d": "1/2012"}, {"body": "example meta could function returns meta stored closure run issues nt use extended prototypes advocating either remembered prior issue answering question never bitten might cleaner closure", "d": "1/2012"}, {"body": "wycats jquery internals use jqueryextend add objects ajax call memory thats blowing", "d": "1/2012"}, {"body": "thought bpm using", "d": "1/2012"}, {"body": "process handlebars files", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "wonder part sproutcore dropped confusion", "d": "1/2012"}, {"body": "looks like part sproutcore removed ember seems worth adding back feature remove docs meantime", "d": "1/2012"}, {"body": "see pull request", "d": "1/2012"}, {"body": "talked wycats tomdale said nt want put core though support addon definitely remove website", "d": "1/2012"}, {"body": "pull website removing website meaning could closed commit gets website", "d": "1/2012"}, {"body": "merged changes website closing", "d": "1/2012"}, {"body": "see pull request", "d": "1/2012"}, {"body": "pulled", "d": "1/2012"}, {"body": "kind bug drag mouse outside button mouseup button b action button b triggered trigger action imho", "d": "1/2012"}, {"body": "behavior already covered test see problem event never fired button event happen button think issue related", "d": "1/2012"}, {"body": "interesting problem right fix think register global mouseup handler let button know mouse released anywhere moving outside button", "d": "1/2012"}, {"body": "problem continuous user mousedown button moves releases mouse enters button right question remains would", "d": "1/2012"}, {"body": "nt think problem would remain right issue mousedown move outside button way telling mouseup assumes mouse still global handler mouseup could let button know mouse nt anymore", "d": "1/2012"}, {"body": "yeah right", "d": "1/2012"}, {"body": "inclination remove special enterleavemousedownmouseup code favor simple click event let people use browser provides us", "d": "1/2012"}, {"body": "say action support remove", "d": "1/2012"}, {"body": "getting issue latest chrome firefox using build current master still occur might related specific ember version browser whatcha using", "d": "1/2012"}, {"body": "something like tested using build current master problem", "d": "1/2012"}, {"body": "believe know causing try wrapping apppeople name", "d": "1/2012"}, {"body": "yes done works great nt change fact tbody one inserted every time", "d": "1/2012"}, {"body": "understood suggesting fix code submitted", "d": "1/2012"}, {"body": "summarize future helper inside less correctly render initially correctly update dom collection contents changed result two table collection replaced js template apppeople name result jon collection change result jon carl result amy tempalte contains collection change replacement work without inserting second", "d": "1/2012"}, {"body": "guilhermeaiolfi browser experiencing", "d": "1/2012"}, {"body": "chrome devm", "d": "1/2012"}, {"body": "guilhermeaiolfi os odd trek nt seeing issues chrome", "d": "1/2012"}, {"body": "nevermind see", "d": "1/2012"}, {"body": "updated jsfiddle make behavior easier see wycats seems like probably metamorph bug think", "d": "1/2012"}, {"body": "discussion failing test basically suspected inserting elements nt trigger browser oh shit want tbody feature inserting tablerelated elements initial render example jason zack jason zack second example first two placeholders inserted tablerelated elements start getting inserted gets put first screws order placeholders ranges entire collection replaced metamorphs removed snips opening browser corrects adding opening tag back node contains writing table directly added trini kimberly interestingly inserted different expected see three options change nothing tell people must use templates suppose approved b check whether metamorph going child table insert tbody correct position c use function like although case fixing start rather end metamorph thoughts", "d": "1/2012"}, {"body": "nt case fixparentage trying fix ie maybe move browsers", "d": "1/2012"}, {"body": "solution similar identical throws auto ing sure state dom chrome safari indicating parentage nt quite think however part callback fixes issue", "d": "1/2012"}, {"body": "add see undefined example need instance todosbuttonview bind", "d": "1/2012"}, {"body": "dang messed jsfiddle actual environment probably misunderstanding view binding todos example view todosstatsview id stats view scbutton classbinding isactive target todostodoscontroller action clearcompletedtodos clear completed todos view remainingstring remaining view want classnamebindings scbutton might misunderstanding context binding assumed would instance statsview also tried adding class property todostodoscontroller relative path nt work switch global path able get function close issue since works get pathing right anyone point towards documentation would help understand context classnamebindings scbutton view would work", "d": "1/2012"}, {"body": "fiddle illustrates class bindings view well path relative emberapplication whats happening creating instance instance used context inside template finding binding", "d": "1/2012"}, {"body": "raycohen thanks nt know blind going correct way appreciate push right direction", "d": "1/2012"}, {"body": "looks like solves misunderstanding please reopen", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "handled", "d": "1/2012"}, {"body": "well discussed briefly devinus said think version check check probably gets stripped production devinus sounds ok close ticket open new one adding version check", "d": "1/2012"}, {"body": "done", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "closing favor discussion", "d": "1/2012"}, {"body": "observe uiviewcontroller emobjectextend view null viewisinsertedbinding embindingoneway viewstate transforme function value value indom thisdidinsertelement return true return false didinsertelement emk", "d": "1/2012"}, {"body": "closing favor tchak solution", "d": "1/2012"}, {"body": "nt think ever actual bug ppcano offering use case seen collection view whose template immediate child view suggesting ember detected state could use view item view template instead requiring nifty idea sure worth added complexity view rendering", "d": "1/2012"}, {"body": "essentially corollary larger need generated documentation closing make sure documentation looks correct generate docs", "d": "1/2012"}, {"body": "would help case", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "could create issue specifically referencing underlying cause probably close ticket would good get permanent fix ember possible", "d": "1/2012"}, {"body": "closed favor", "d": "1/2012"}, {"body": "came across issue closed still happens", "d": "1/2012"}, {"body": "please say issuepr included fix", "d": "1/2012"}, {"body": "test uses noticed germany suspect german locale affecting comparison quick google search also discovered way locale determined differs browsers suspect cause problems ultimately code correct test valid english locales sure fix tests moment ideas let know gladly reopen ticket", "d": "1/2012"}, {"body": "unable create noticeable delays tests tried chrome firefox yr old macbook wycats said profiled chrome could find delay much less seconds looking version emberjscom website somewhere else performance definitely high priority us since unable duplicate issue closing ticket provide useful information would glad reopen", "d": "1/2012"}, {"body": "looking offical version emberjs mean exactly type new todoitem hit enter delay enter key press todoitem appears noticeable definitely much unbearable notice sort like difference really snappy application one runs ok profile things moment enterkeypress item appeared results show javascript running time ff side note way attach images github without uploading external hoster like imgur think chrome much faster profiler shows around well firebug profile profiler", "d": "1/2012"}, {"body": "nt seems pretty snappy beta unfortunately really expecting stellar performance though useable continue work improving seeing specific things standing profiles think hard make quick fix cases hopefully incrementally improve things throughout ember internals see improvements cases well", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "important missing part emberjs app size", "d": "1/2012"}, {"body": "think im ditching emberjs realized less culprints sproutcore want plain html behavior code separated nt feel like web code views", "d": "1/2012"}, {"body": "andriijas understand nt like use handlebars helper every html control something would change like batmanjs using plain html data attrs", "d": "1/2012"}, {"body": "yeah love things nt like batman", "d": "1/2012"}, {"body": "hi andriljas one wants bidirectional updating values js html going write glue code somewhere ember let ignore realities html something sproutcore tried dealing html time ember ember provides standard approach think great allows larger consistent engineering efforts", "d": "1/2012"}, {"body": "sure even cons emberjs still betting", "d": "1/2012"}, {"body": "see interested bring", "d": "1/2012"}, {"body": "andriijas definitely want premade ember views element would benefit includes tag joubertnel points impossible glue code places definitely committed reduce need glue code happy listen suggestions may", "d": "1/2012"}, {"body": "ebryn state", "d": "1/2012"}, {"body": "happy announce builtin select view included next release grab latest build downloads section", "d": "1/2012"}, {"body": "follow development", "d": "1/2012"}, {"body": "never seen happen one report closing", "d": "1/2012"}, {"body": "wycats think going", "d": "1/2012"}, {"body": "wagenet time thought knew issue realized nt actually closing ticket unless get information", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "yes embermetal depends window existing created new branch nodecompat ember fork added support server environments nt window defined see commit emacsen also indented existing code corejs hence bigger expected diff relevant section", "d": "1/2012"}, {"body": "hello ben use build system buildjs build embermetal emberruntime buildjs rebuilt using latest master branch ember resulting embermetal emberruntime still work posted files buildjsjson files make builds metal runtime include metal runtime like require embermetal require emberruntime use ember node joubert jan benjamin kampmann wrote took make project compile metal runtime distributable file even branch joubertnel importing node get lt lt var em require ember typeerror read property proto undefined objectdefineproperty users makector users object users modulecompile objectjs moduleload functionload modulerequire require idea might ben atm hackish share though reply email directly view github", "d": "1/2012"}, {"body": "yeah realised later install working version thise two libs npm directly npm install embermetal emberruntime using require include get around thing modules nt export ember common nodejs way instead put global namespace works pretty good deleted comment thanks feedback ben january joubert nel reply replygithubcom wrote hello ben use build system buildjs build embermetal emberruntime buildjs rebuilt using latest master branch ember resulting embermetal emberruntime still work posted files buildjsjson files make builds metal runtime include metal runtime like require embermetal require emberruntime use ember node joubert jan benjamin kampmann wrote took make project compile metal runtime distributable file even branch joubertnel importing node get lt lt var em require ember typeerror read property proto undefined objectdefineproperty users makector users object users modulecompile objectjs moduleload functionload modulerequire require idea might ben atm hackish share though reply email directly view github reply email directly view github", "d": "1/2012"}, {"body": "another option anyone wants use ember nondom environment use one line patch ember rakefile causes build additional distribution target build usual get alongside usual etc using within via therubyracer interact ember models rails server", "d": "1/2012"}, {"body": "added emberruntime target rakefile closing ticket distribute emberruntimejs release new versions ember", "d": "1/2012"}, {"body": "added package", "d": "1/2012"}, {"body": "ticket nt really distinct endpoint closing", "d": "1/2012"}, {"body": "think removed", "d": "1/2012"}, {"body": "give code leads collectionview", "d": "1/2012"}, {"body": "manko seeing higher level code would definitely help", "d": "1/2012"}, {"body": "right solution probably check whether view removed interim append note sort thing personally shy away asynchronous view code possible case necessary", "d": "1/2012"}, {"body": "another option check scheduled inserted cancel", "d": "1/2012"}, {"body": "right use ember queueing machinery schedule change nt allow cancellation cancellation normally done via separate flag checked inside callback necessary", "d": "1/2012"}, {"body": "surprised one commented nt already correct behavior documentation properties begin capitals global behavior overridden prefixing property path eg second example would become", "d": "1/2012"}, {"body": "discussed wycats said look globals first look relative global", "d": "1/2012"}, {"body": "think opposite relative first global intuitive opinion global paths bad avoided even advanced feature would traverse childview scope chain backwards starting relative path traversing back global window", "d": "1/2012"}, {"body": "reason quirk internal consistency getpath bindings bindings internally use getpath look things said previously discussed creating new internal method bindings use improve getpath behavior worth looking", "d": "1/2012"}, {"body": "wycats exactly proposed behavior", "d": "1/2012"}, {"body": "discussed wycats yesterday decided look locals first fall back globals eventually remove global fallback see", "d": "1/2012"}, {"body": "great think right way go", "d": "1/2012"}, {"body": "think fix", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "agree ticket principle closing overall churn targetaction discussion see discussions emberlink emberform emberbutton helper", "d": "1/2012"}, {"body": "huge feature trying avoid global bindings together reduce coupling allowed bind current context way restrictive pain work scenario", "d": "1/2012"}, {"body": "path watched cleaned connected object destroyed object provides context listening maintaining binding could done probably using guid place property global root chains could cleaned connected object destroyed would nice use case bind prop object obj b set obj b property obj bind chain property hiding dependency making property nt mean decoupled still avoids use global example using bindings without global path", "d": "1/2012"}, {"body": "hi kselden appreciate solution way simple would like tell performance benefit adding global prefer stick solution case would like gain clarity thanks", "d": "1/2012"}, {"body": "closing ticket request alter overall architecture ember binding system relatively simple workarounds exist without taking drastic step find cases simple workarounds sufficient please reopen ticket", "d": "1/2012"}, {"body": "implementation would require separating document fragment generation insertion javascript htmlfunc function html outertoo get range current metamorph object var range rangefor outertoo delete contents range nodes starting ending placeholder rangedeletecontents create new document fragment html var fragment rangecreatecontextualfragment html insert fragment range rangeinsertnode fragment method called manipulation methods invoked inside example javascript replace function var view get view var morph getpath viewmorph viewtransitionto prerender viewclearrenderedchildren var buffer viewrendertobuffer emberrunschedule render function get view isdestroyed return viewnotifywillinsertelement morphreplacewith bufferstring viewtransitionto indom viewnotifydidinsertelement would want something like immediately clear done dom manipulation methods nice thing fragments nodes work", "d": "1/2012"}, {"body": "bspaulding surprised actually slows time likely something nt getting garbage collected properly causing execution take longer", "d": "1/2012"}, {"body": "removed second conditional template switched updated ember longer see noticeable slow suspicion still may related second helper unlikely change since uses collections behind scenes also ran original tests ember still saw slow downs leaves us template", "d": "1/2012"}, {"body": "wagenet apologies nt clear memory leak seeing", "d": "1/2012"}, {"body": "guess fixed need retest", "d": "1/2012"}, {"body": "kselden tests still showing memory leak though may slower guess still areas covered", "d": "1/2012"}, {"body": "using chrome profiler find comparison view snapshots reference paths leak objects aware memory leaks jquery related html parsing versions leaks strings fragements versions leak detached dom nodes safefragment closure variable", "d": "1/2012"}, {"body": "kselden using chrome memory timeline jsfiddle master build ember nt detailed examination cause", "d": "1/2012"}, {"body": "ok take detailed look conditional view already done thorough profile simple bound template view simple classes bindings observers another look get chance complex template conditional helper jquery version link version fiddle master build", "d": "1/2012"}, {"body": "nt link based nt change jquery version looks like", "d": "1/2012"}, {"body": "trek ppcano thoughts question nt get response close ticket", "d": "1/2012"}, {"body": "classnamebindings exactly helper bindclasshelper described gist advantage helper applied handlebars helper instead using collectionview using classnamebinding itemviewclass nowadays usually using collectionview time requiring helper case need future use anyway wanted share specific cases provide feedback agree close ticket", "d": "1/2012"}, {"body": "general end using collections complex situation probably right choice", "d": "1/2012"}, {"body": "closed issue misunderstood reopened", "d": "1/2012"}, {"body": "lukemelia would interested making pull request", "d": "1/2012"}, {"body": "wagenet changed way approaching leave emberapplication class untouched let initialize normally documentready phonegap wait initialize bulk app documentready deviceready events fired unless anyone else thinks emberapplication needs improved api fine stands", "d": "1/2012"}, {"body": "johnagan looked site runs fine chrome guys still errors give master try also consider turning extended prototypes ember", "d": "1/2012"}, {"body": "ie bug chrome", "d": "1/2012"}, {"body": "still seeing master", "d": "1/2012"}, {"body": "wrote beta sc try master", "d": "1/2012"}, {"body": "closing favor", "d": "1/2012"}, {"body": "wagenet nt think closed issue referenced last comment also closed", "d": "1/2012"}, {"body": "keithpitt open status top right", "d": "1/2012"}, {"body": "oh right bad fail githubs", "d": "1/2012"}, {"body": "actually illegal mutate child views init regular emberview contract views regular child views modified via general regular allowed mixed htmlview content direct manipulation child views nt provide us enough information know exactly insert view relative mixed content semantics designed specifically templated views definition include mixed content child views modified outside including therefore problem describing also support shorthand syntax allows creation view hierarchy directly slice array init allow subclasses inherit list child views using shorthand syntax exactly sure could provide better error information mistake still supporting shorthand syntax approach think right assert compares slicing think", "d": "1/2012"}, {"body": "see mutating childviews regular emberview nt make sense originally encountered bug containerview agree user likely hit issue nt understand right place deal kind inheritance issue looks like belongs inheritance infrastructure needed already support still needed always get sliced real constructor gets invoked would dry array slicing also makes wonder nt get sliced right bug open solution could try take look performance impact nt think would matter since slices would happen either case around time safely reach user", "d": "1/2012"}, {"body": "guess open performance question whether checking existence constructor classes nt use would noticeable impact", "d": "1/2012"}, {"body": "ah nt considered case likely arise due concatenated properties agree concatenated properties slice inheritance would note issue could still arise normal properties default array values", "d": "1/2012"}, {"body": "true enough really dealing two distinct sets properties concatenated copied properties talking fall sets actually concatenated probably subset copied since ca nt imagine wanting concatenated property copied proposing add analogy object constructor would automatically copy invoking concatenatedproperties would also automatically treated copiedproperties", "d": "1/2012"}, {"body": "would mind opening new issue proposed changes seems like original issue somewhat resolved", "d": "1/2012"}, {"body": "see changes made discussion moot run original jsfiddle latest ember problem nt really see pressing need proposed feature", "d": "1/2012"}, {"body": "sproutcoredatetime longer part ember", "d": "1/2012"}, {"body": "trek something could", "d": "1/2012"}, {"body": "believe wycats got already", "d": "1/2012"}, {"body": "assuming fixed", "d": "1/2012"}, {"body": "since closed closing well anyone problems please provide specific use case reopen", "d": "1/2012"}, {"body": "going close issue since practice seen requested developers believe might better suited something operating level abstraction something like sproutcoretouch", "d": "1/2012"}, {"body": "tomdale anything ever happen", "d": "1/2012"}, {"body": "work top level objects well seems issue see view produce output html globallistcontroller applistcontroller javascript app emberapplicationcreate globallistcontroller emberarrayproxycreate content applistcontroller emberarrayproxycreate content", "d": "1/2012"}, {"body": "support global objects bad practice use go opinion", "d": "1/2012"}, {"body": "tchak clarify think putting certain methods instance bad else intend call", "d": "1/2012"}, {"body": "seems like basic question cents wycats tomdale ebryn", "d": "1/2012"}, {"body": "think bad practice also bad fail instead stashing random methods namespace make controller receives actions comfortable fix though think fix getpath correctly support case", "d": "1/2012"}, {"body": "took look tests getpath seems global objects already supported see already intended behavior needs fix handlebars package wrong", "d": "1/2012"}, {"body": "global paths work root global paths app try", "d": "1/2012"}, {"body": "found another use case problem consider following code snippet see working example html app version appversion outputs expected", "d": "1/2012"}, {"body": "seems like legitimate issue lets fix", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "wycats commit already tests", "d": "1/2012"}, {"body": "wycats sure fixed ca nt find relevant commit", "d": "1/2012"}, {"body": "commit thinking", "d": "1/2012"}, {"body": "checked current master branch ran test case fails looks like commit nt fix problem", "d": "1/2012"}, {"body": "yeah confused well", "d": "1/2012"}, {"body": "pangratz issue different issue think file separately", "d": "1/2012"}, {"body": "wagenet sure see", "d": "1/2012"}, {"body": "related", "d": "1/2012"}, {"body": "upon examination think something fix targetactionsupport devinus think issue unrelated definitely seems like bug opened issue", "d": "1/2012"}, {"body": "wagenet fix implemented", "d": "1/2012"}, {"body": "pangratz forgot still trying figure best solution straightforward hoped definitely keep fixes mind though", "d": "1/2012"}, {"body": "fixed", "d": "1/2012"}, {"body": "fixed use click", "d": "1/2012"}, {"body": "making cacheable default pretty much time nt include forget", "d": "1/2012"}, {"body": "well people still need know difference cases want turned think needs left developer computed properties cacheable imo thus default", "d": "1/2012"}, {"body": "yes definitely make cacheable default far common case sticking preamble onto projects count real uses real projects cacheable things far common mostly swayed fact common case brief less convinced helping new users argument neither expectation obviously correct potentially frustrating subtleties either way needed new users good docs responsive community", "d": "1/2012"}, {"body": "making cacheable default well simple much needed change", "d": "1/2012"}, {"body": "seems like sensible default definitely rule rather exception us", "d": "1/2012"}, {"body": "wycats tomdale would good get input probably adjust helper take param turn caching", "d": "1/2012"}, {"body": "biggest concern would breaking change apps might want also provide env variable change default make easier old users maintain previous behavior though think eventually want remove option get everyone page", "d": "1/2012"}, {"body": "ember still young enough breaking changes appropriate going get harder later seriously doubt app written first fork sproutcore would run without adaptation current ember already plenty breaking changes entirely appropriate better make", "d": "1/2012"}, {"body": "idea making cacheable default imho properties dependencies dependencies make non cacheable property think common sense", "d": "1/2012"}, {"body": "favor making cacheability vary depending whether dependencies one thing complicated remember another dependencyless properties often cacheable either static explicitly expired elsewhere jan lt reply replygithubcom wrote idea making cacheable default imho properties dependencies dependencies make non cacheable property think common sense reply email directly view github", "d": "1/2012"}, {"body": "similar note feel way bindingoneway find rare need bindings way", "d": "1/2012"}, {"body": "kselden disagree oneway bindings think bindings nature imply two way updating default even bit less performant however like discuss please open new ticket nt hijack discussion", "d": "1/2012"}, {"body": "circling back around think plausible idea somewhat worried unexpected consequences would like someone try write patch adds behavior fixing internal cases would break would likely require something similar exercise would give us better insight cases cacheable default would cause problems patch done personally volunteer try use ember projects see exactly fails give us insight general agree time ever going closing ticket anticipation pull request implements feature nt think possible discussion topic information form code", "d": "1/2012"}]