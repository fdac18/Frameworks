[{"title": "react component got lost attached html node angular uirouter changed state", "body": "first time angular uirouter runs default uiview react component working fine state changed react component lost dom clues greatly appreciated", "num": "5572", "d": "11/2015"}, {"title": "replace scry less fancy word", "body": "think scryrendereddomcomponentswithclass methods starting scry deprecated favor obvious names like findrendereddomcomponentswithclass", "num": "5571", "d": "11/2015"}, {"title": "reactnative bundle server process multi request got errors create reactpackager step", "body": "created reactpackager error error error unable find file path null fastfsreadfile moduleread cacheget modulegetdependencies collect trycallone flush see logs socketclienthandlemessage bunserbuf emitone bunserbufemit bunserbufprocess processtickcallback slove", "num": "5566", "d": "11/2015"}, {"title": "arrow function event callback invoked target element removed", "body": "results invariant violation example app lines reproduces issue reproduce start app select user radio button list call stack time invariant violation looks like react batching click events guess time batch processed target element removed dom click handler arrow function removed event processing queue tried testing variations example setting state using bound method instead arrow function define event handler cases invariant violation occur", "num": "5563", "d": "11/2015"}, {"title": "way error props passed nt proptypes", "body": "found accidentally specifying components props nt used components would nice way runtime check reactproptypes nt allow additional props passed", "num": "5562", "d": "11/2015"}, {"title": "serverside rendering style attribute always causes invalid checksum", "body": "working serverside rendering react app using nashorn going ok got basic skeleton app running however getting warning lot warning react attempted reuse markup container checksum invalid find strange cases problem seems revolve around attribute instead figure markup generated different client server client scrollspacerbefore style da server scrollspacerbefore datareactid fragment missing serverrendered piece remove setting style prop issue always resolved gives warning fixes notice commented two style props intended behavior", "num": "5560", "d": "11/2015"}, {"title": "singleton react component", "body": "hey guys application writing component called help section basically box shows predefined texts component user messing want able tell help section component component show help using flux actions store nt bad works quite nicely however quite large setup files defined specifically cause also number issues experienced help section actions dispatching actions raises dispatch middle dispatch error however could define help section singleton could done since get instance help section expose method sets properties want change call know breaks react unidirectional data flow component changing another component maybe worth sometimes way think sort combination store actions component one object lot components get instantiated run time maybe quite useful cases could nt find reference web jsfiddle seems work nicely bit unclear imo good way quite novice javascript react might missing obvious points hopefully think thanks reading ps sorry ambiguousness english native language smile", "num": "5558", "d": "11/2015"}, {"title": "testutilsfindrenderedcomponentwithtype nt work functional stateless component", "body": "changed component one tests failing ca nt find instance component one line code gives error guessing function importing test file ie one used create component actual code place imports function gets instance means types never match according testutils must worked classes unique somehow always import thing expected behaviour using functional components something missing", "num": "5555", "d": "11/2015"}, {"title": "inputs deselected firing callback onchange", "body": "issue text based inputs react react dom event fired input input deselected looks like ui example jsbin components toplevel component describes fields form component also holds state form component extends field form child child form also one component clicked fire function state form exception components stateless functional components components controlled get value top level form component state properly updated top level event would expect things typically work controlled form state passed via props input trying figure could possibly cause weird deselection issue nt made progress ideas thanks", "num": "5554", "d": "11/2015"}, {"title": "extract addons real remove warning", "body": "upgrading react comes warning among others says addons requires reactaddons instead required package first would like point think good change put addons separate packages however also noticed addons fact really put separate packages link implementation still existing within react package brings trouble build browserify addon currently using transition group bundle include react causes error running app alternative us import gets rid error leaves us red warnings consider non option think important leave number warningserrors mentioned think step right direction extract addons also think wrong require user update import change actually made could reconsidered", "num": "5553", "d": "11/2015"}, {"title": "component tag span text without tag tag within span", "body": "", "num": "5552", "d": "11/2015"}, {"title": "component test test child component already functionbind prop", "body": "hi guys got case class pagination extends reactcomponent onpageselect event selectedevent test let shallowrenderer testutilscreaterenderer result instance expect bootstrappaginationpropsonselect toequal instanceonpageselect using thisonpageselectbind ca nt expect true react automatically bind render nt need use bind", "num": "5551", "d": "11/2015"}, {"title": "hard catch errors", "body": "related essentially wrap render call try catch works first time seems like called second time update case work seems async updating existing component tree may missing something seems like leaves way developers catch errors rendering children components jsbin demoing issue", "num": "5549", "d": "11/2015"}, {"title": "reactdefaultperfprintwasted nt work", "body": "calling results page internally facebook assume fairly recent react version", "num": "5548", "d": "11/2015"}, {"title": "disable specific warning", "body": "explain issue briefly instead extending reactcomponent class gets state getinitialstate function exists using component looks like triggers warning react warning getinitialstate defined somecomponent plain javascript class supported classes created using reactcreateclass mean define state property instead question way disable warning happening cheers", "num": "5545", "d": "11/2015"}, {"title": "change state always fire function render", "body": "example use page var applist var reactrender containera second update found values inputs ca nt change according state pass second time also want know ui operation happened two calls render possible react reserve users refresh whole component according state", "num": "5544", "d": "11/2015"}, {"title": "react updates dom diff ignore state detail change", "body": "came across problem using react change state array nt change dom based array component nt updates suggest dom diff algrithom way update details dom", "num": "5542", "d": "11/2015"}, {"title": "reactchildrentoarray changes elementkey", "body": "reactchildrentoarray changing childrens key property ex sometimes dont know exactly event without got even weirder keys parsing children ex foo gt foo foo nt found mention things yet documented somewhere get original key somehow", "num": "5541", "d": "11/2015"}, {"title": "missing css pointer events", "body": "pointerevents working", "num": "5540", "d": "11/2015"}, {"title": "uncaught error invariant violation addcomponentasrefto reactowner refs might adding ref component created inside component method multiple copies react loaded details", "body": "talked answer nt run two copies react got thing running two copies react building react component npm module installed larger project within module including react peer dependency marked external webpackconfigjs actually working fine time one exception components refs gone far use documentqueryselector yikes get rid error message better way opening issue though want use reactwidgets package uses refs breaking project ca nt react smart enough associate refs running copy react missing something thanks ben", "num": "5538", "d": "11/2015"}, {"title": "infinite loop number input", "body": "internal thread debugging issue ie react could go infinite loop thus hanging main thread observed ie chrome firefox minimal reproducible fiddle ie press back space number input override current number anything else select press key observe ie main thread hangs immediately issue seems caused setting nan type number input nt fully figured avoiding setting nonnumeric string value mitigate issue speculation due ie raises propertychange event whenever input value set js set nonnumerical value number input value reset empty string upon retrieval enter loop retrieving empty string parseint setting nan propertychange retrieving empty string setting nan nan", "num": "5537", "d": "11/2015"}, {"title": "checksum invalid entity", "body": "using react render server client client getting error message besides checksum present server rendered html rendered html exactly client server visual issue rendering still rendered server client react doco says html entities literal text work fine removing html entity makes checksum error message go away something wrong bug using react rendered express viewed chrome", "num": "5535", "d": "11/2015"}, {"title": "autofocus attribute triggered render", "body": "hello autofocus attribute triggered render therefor impossible change focus attribute multiple fields currently way change focus give input ref change componentdidupdate componentdidupdate thispropsisautofocus true thisrefs input thispropsline focus autofocus attribute work initial render", "num": "5534", "d": "11/2015"}, {"title": "componentdidmount ca nt throw error", "body": "type code componentdidmount defined ca nt see error throw use try catch like componentdidmount console printed", "num": "5532", "d": "11/2015"}, {"title": "onmouseup triggered right click context menu", "body": "explanation codepen click link counter increment onmousedown onmousedown onmouseup event logged try clicking right mouse button open context menu link onmousedown triggered counter incremented onmouseup skipped entirely found old webkit bug resolved helps", "num": "5531", "d": "11/2015"}, {"title": "reactproptypesnode accept stateless component function", "body": "replaced react components defined using classes getting warnings react stateless component fuction reactnode validating components using need use seems bit long say anything rendered component supposed cover right doc maybe added reason nt handle well", "num": "5527", "d": "11/2015"}, {"title": "react functional components", "body": "hello possible use reacts lifecycle methods reacts new functional components", "num": "5525", "d": "11/2015"}, {"title": "allow use class style string", "body": "nt like fact react nt allow use asinlinestring attributes fork hard modify react support reason nt like manually rename without inline styles string ca nt use webstorm feature really nice developing new styles", "num": "5522", "d": "11/2015"}, {"title": "creating new element key null creates element key null", "body": "sure intentional run resulting inner div set resulting dom string remove key result used key result latter", "num": "5519", "d": "11/2015"}, {"title": "reactchildisnull ability check component rendered null", "body": "suppose want component concatenates children together using separator prop javascript import react react import lodash class concatenate extends reactcomponent render var children reactchildrentoarray thispropschildren var separated childrenreduce previous current index gt previouspush current index childrenlength previouspush thispropsseparator index return previous concatenatedefaultprops separator key gt return export default concatenate would like choose render separator corresponding child decides render null possible reactchildisnull functionality", "num": "5517", "d": "11/2015"}, {"title": "separate website release", "body": "working issue react native found react also issue website mkonicek people often send pull requests update code docs makes sense however pr merged docs go live immediately code released weeks means docs inconsistent apis cli commands people get using react native", "num": "5516", "d": "11/2015"}, {"title": "randering large amount elements slowly", "body": "recently using react project rendering elements list always elements becomes sluggish ca nt find solution help", "num": "5515", "d": "11/2015"}, {"title": "input defaultvalue always evaluated", "body": "rerender two similar views contain input regardless type defaultvalue evaluated happens element tree structure samesimilar input even inputs two different types see simple example new old views inputs inside div", "num": "5509", "d": "11/2015"}, {"title": "thispropschildren nt always inherit context parent", "body": "assumed would always inherit context parent always case works expected change parent use context transferred children anymore also created simple jsfiddle demonstrate would assume inside parent inherit context meant way change context second example would also work", "num": "5507", "d": "11/2015"}, {"title": "validatedomnesting generates warnings components return null inside tbody", "body": "according doc render ok components return nothing needs rendered causes warning used inside tbody javascript var component reactcreateclass render function return null var table reactcreateclass render function return reactdomrender documentgetelementbyid container gives us following warning", "num": "5506", "d": "11/2015"}, {"title": "htmlaudioelement partially supported confusing", "body": "attempting render tag element rendered attribute understand correctly pr introduced lots different attributes rejected however presently react violates principle least surprise agreeing render rendering attributes included work planned media tags react willing render part attributes would nt better drop support completely", "num": "5505", "d": "11/2015"}, {"title": "reactcsstransitiongroup throws error using timeout element removed", "body": "using react render method exception thrown becomes elapsed exception occurs tries find component empty guessing exit early components gone", "num": "5499", "d": "11/2015"}, {"title": "transform jsx browser", "body": "babel removed react documentation using babelcore plan supporting jsx transformer browser deprecated thanks", "num": "5497", "d": "11/2015"}, {"title": "dom elements switched order", "body": "component among many things includes two components following order thispropsowner boolean problem react prints componentsnewlistbox element componentslistsmenu dom see dom looks div class newlist printed ul class lists reactids show order way around change thispropsowner true print element expected position dom missing something basic pretty weird issue", "num": "5494", "d": "11/2015"}, {"title": "way create pure stateless components", "body": "discovered stateless components nt pure works well long parent component rerendered often enough think publishing unpure stateless components lost good opportunity teach community write fast pure components many talks mentioned cool powerful principles immutable data must say dissapointed keep adding functionality react allows people write think sloppy code looks like stateless components still undocumented feature official place find infromation release article blog could possible change behaviour stateless components make pure later release would really like another way write pure stateless functions probably something like", "num": "5492", "d": "11/2015"}, {"title": "npm install peerdependencies fail update fails reactdom", "body": "updated react latest build order use library hard dependency get errors versioning seems though pass corresponding versioning logic uninstalled reinstalled nodemodules make sure latest versions nothing working npm err peerinvalid package react satisfy siblings peerdependencies requirements npm err peerinvalid peer marty wants react npm err peerinvalid peer reactleaflet wants react npm err peerinvalid peer reactsparklines wants react gt npm err peerinvalid peer reactdom wants react", "num": "5491", "d": "11/2015"}, {"title": "reactdomserver available globals", "body": "recently code moved react reactdom get idea behind move server side rendering use neatly available global object use problem afaik object available global scope nt access function problematic serverside code nashorn currently still working upgrade newest react version scoured whole internet react source code found way gain access without possible function available maybe add property get global object", "num": "5490", "d": "11/2015"}, {"title": "issue simulateclick invoking function spying", "body": "lots trouble testing whether clicking rendered button element invoking onclick handler code component tested use strict library dependencies const react require react const categoryclearbutton reactcreateclass render return clearallselectedcategories thispropshandleclick moduleexports categoryclearbutton test case using jasmine use strict const react require react const reactdom require reactdom const testutils require reactaddonstestutils const categoryclearbutton require categoryclearbuttonjsx const actions require actionsdashboardactions let element describe categoryclearbutton gt beforeeach gt element testutilsrenderintodocument call clearallselectedcategories method clicked gt let renderedbutton testutilsfindrendereddomcomponentwithtag element button spyon element clearallselectedcategories testutilssimulateclick renderedbutton expect elementclearallselectedcategories tohavebeencalled error message getting console phantomjs mac os x categoryclearbutton call clearallselectedcategories method clicked failed typeerror undefined funtion phantomjs mac os x executed failed secs secs pretty sure issue simulate click event firing make test pass following leads believe spy job anybuddy give newbie guidance thanks andrew", "num": "5487", "d": "11/2015"}, {"title": "warn tag rendered component", "body": "example warn rendered good reason edit server rendering react seems cause click handlers placed inside fauxbody get called", "num": "5484", "d": "11/2015"}, {"title": "shouldcomponentupdate child components", "body": "couple wrapper components dynamically calculate size position need normally works performs great soon add children inside components longer use method return false wrapper needing update children never get updated example jsx good way around idea add new method shouldupdatechildren like question detailed", "num": "5483", "d": "11/2015"}, {"title": "recursion dispatchevent", "body": "using dispatchevent trigger react event handler causes recursion created repository code checkboxes event handlers attached clicking select trigger mentioned causes recursion javascript javascript const boxname testname var cb reactcreateclass oncheckclick function el consolelog clicked el var nav reactcreateclass handlecheckclick function consolelog select reactdomrender documentgetelementbyid container", "num": "5482", "d": "11/2015"}, {"title": "dangerouslysetinnerhtml reconciling p tags likely due nested p tags", "body": "noticed trying use dangerouslysetinnerhtml p tag tutorial app building weird behaviour content changed able get desired behaviour using div span instead using react might similar view check branch steps repro run app add post click edit icon next new post edit text hit update post see old post text still displayed along newly updated text", "num": "5479", "d": "11/2015"}, {"title": "potential inconsistency docs regarding", "body": "docs dispatcher example note absence callback elsewhere docs note specified implementation dispatcher includes cb promise return could made consistent single canonical example dispatcher dependency work", "num": "5478", "d": "11/2015"}, {"title": "reactdomserverrendertostring presence onclick handler causes errors async update", "body": "code javascript class comp extends reactcomponent componentwillmount settimeout gt thissetstate render return reactdomserverrendertostring produces errors warning react ca nt find root component node datareactid value seeing message probably means loaded two copies react page time single copy react loaded time uncaught typeerror read property firstchild undefined remove handler errors go away see demo", "num": "5473", "d": "11/2015"}, {"title": "include flow type definitions", "body": "per comments samwgoldman following issue flow builtin react type definitions lagging behind recommendation definitions included maintained react repo flow maintainers excellent job implementing new js syntaxfeatures would great also need maintain file one could course also relegate definition yet another repo", "num": "5472", "d": "11/2015"}, {"title": "ondoubleclick event invalid set onmousedown event", "body": "help", "num": "5471", "d": "11/2015"}, {"title": "component getting rendered name nt get started capital letter", "body": "hi small react code var newprop reactcreateclass render function return hello reactrender documentgetelementbyid container works expected moment changes change variable name refresh page nothing get displayed dom warnings console change name places code looks like var newprop reactcreateclass render function return hello reactrender documentgetelementbyid container expect display however nt show anything error message console tested code even master branch thanks", "num": "5469", "d": "11/2015"}, {"title": "validate proptype definitions sooner", "body": "right validate proptype definitions nt surface issue component class consumed instead validate warnings class created means call results immediate warning logged relatively contained bit code would good candidate somebody looking start contributing react", "num": "5468", "d": "11/2015"}, {"title": "keymirror exposed", "body": "keymirror utils could exposed reactutilskeymirror way want many people include package separated could optimized", "num": "5467", "d": "11/2015"}, {"title": "react rewrite dom component changes", "body": "hard search wondering intended behavior root component call nt change anything render yet chrome seems flicker dom node get break subtree changes intended something strange", "num": "5466", "d": "11/2015"}, {"title": "deprecate", "body": "already unavailable classes already warning saying might remove nt actually github issue deprecate per discussions today basically agreed going start moving away deprecate still need figure good stories around promises related use cases issue track progress toward goal background please read", "num": "5465", "d": "11/2015"}, {"title": "available default", "body": "happy move question elsewhere point right direction get error nt call initial render error goes away simply call empty object nt part core react component api would nt present default", "num": "5464", "d": "11/2015"}, {"title": "componentdidmount fired ismounted false release mouse button released", "body": "context drag drop tree components dragging siblings items example works fine avoiding bugs need access dragged item dimensions offsetwidthheight works mounted works fine items parent dragging item one container list one element gets successively removed list added root component added list even see componentdidmount fired console ismounted returns false continuing drag list strange switching still works less userfriendly releasing drag dragging inside list work well ismounted true point ondragend fired parent drag changes code nothing particular could explain sudddenly works releasing button simply sets dragged component global state everything happens", "num": "5463", "d": "11/2015"}, {"title": "please add source url reactaddons npm packages", "body": "please add repository property react addons like reactaddonsperf required import jars webjarsorg", "num": "5461", "d": "11/2015"}, {"title": "exceptionally deep react stack traces", "body": "looking cpu profile react app chrome get layers deep react without ever reaching code every layer lose little bit performance deep call stacks also make difficult debug parts code need work expected behavior debug build react nt see anything different production version call stacks deep names functions mangled possible inline function calls production react ca nt say whether genuinely performance issue certainly makes debugging performance issues unpleasant react", "num": "5460", "d": "11/2015"}, {"title": "setstate passed component state provided callback", "body": "apologize discussed however unable dig anything proposing following javascript var parent reactcreateclass onupdate state state passed function called setstate component consolelog state clicked true render return var child reactcreateclass onclick thissetstate clicked true thispropsonupdate render return concrete example came following pr reactrouter prop passed router component invoke ever updates new route state instead forwarding along state callback provided must intentionally provided like happy firm investigated see would look like add react seems like part trouble nt great way enqueued callbacks specific parameters queue callbacks managed component property may totally wrong still learning quite bit queued updates happen rate thought might good conversation around", "num": "5459", "d": "11/2015"}, {"title": "inline style interferes reactcsstransitiongroup css", "body": "", "num": "5457", "d": "11/2015"}, {"title": "reactdomrender returns null pure functions", "body": "thrown behavior figured warranted issue js function component return var result reactdomrender el result null attempting result", "num": "5455", "d": "11/2015"}, {"title": "testutilrenderintodocument issue refs", "body": "quite unsure error coming using coffeescript tests written coffeescript tried jsx error matter anyways component ref test using jasmine karma phantomjs coffee testutils require reactaddonstestutils dollarinput reactcreatefactory require userportalsrcscriptsuidollarinput describe react dollar input gt dollarinput testutilsrenderintodocument dollarinput ideas error comes trouble shooting says maybe may two instances react loaded well using bower adding proper files karma configuration nt believe includes another version react wouldnt imagine karma loading react either nt believe adding ref outside component render function either remove ref dont get error component wont work properly", "num": "5453", "d": "11/2015"}, {"title": "expose component functions", "body": "running issue react regards exposing component functions perhaps something wrong unless stale piece documentation earlier version react react component exposes piece state function eg coffeescript selectionscontroller reactcreateclass proptypes values array getinitialstate selections getselections stateselections render rendervalue value handlechangecurry value checked gt checked setstate selections union stateselections value else setstate selections without stateselections value create instance component later try fetch selections via coffeescript controller reactcreateelement selectionscontroller values one two three user event handler consolelog controllergetselections console log line results error uncaught typeerror controllergetselections function something wrong", "num": "5452", "d": "11/2015"}, {"title": "undocumented change instances components rerendered anymore", "body": "noticed undocumented change least nt find react react nt rerender component exactly instance ie save variable look react react even using reactrender components nt state neither props try rerender instance forceupdate setstate example rendering skipped look react react could nt find react update changelog maybe falls clear work components instantiates new children render method like react", "num": "5450", "d": "11/2015"}, {"title": "react invariant violation findcomponentroot state update", "body": "code works first load state updated following error console remove reference inside prop works normally sure actual issue react could understand first time works second time fails help appreciated", "num": "5448", "d": "11/2015"}, {"title": "componentdidupdate fires references triggered associated", "body": "feel like componentdidupdate references executing wrong order background working situation list input fields blank row fields bottom press enter field moves focus next one talking register keeps track fields positions shiftenter goes reverse well press enter final field kicks flux like action results next blank field rendered want move focus row set callback fire next componentdidupdate knowing happens access new field registers componentwillmount works fine access component fine however want use method direct focus dom element within early make use references references yet bound even though componentdidmountupdate stage lifecycle seems indicate reference binding happens synchronously could easily get around using reactdomfinddomnode using queryselector find target nt clean way go solving issue believe based know api references boundexecuted componentdidupdatemount fires occur design mistake incompatibility goals", "num": "5447", "d": "11/2015"}, {"title": "adapting docs reactrb", "body": "apologize best place ask getting ready document ruby reactjs adapter reactrb would like take current reactjs docs starting point change examples etc use ruby dsl syntax believe within docs creativecommons license correct", "num": "5446", "d": "11/2015"}, {"title": "use controlled components tutorial", "body": "based discussions outside github going move away use refs tutorial use controlled components instead reacty way done tutorial avoids escape hatch refs", "num": "5443", "d": "11/2015"}, {"title": "warn duplicate copy react", "body": "looks like lost duplicatereact warning due merging contained", "num": "5441", "d": "11/2015"}, {"title": "input element focus edit", "body": "hi guys get problem write react component render virtual selector body bootstrap modal edit input focus online example", "num": "5440", "d": "11/2015"}, {"title": "reactdom apple tv", "body": "playing lately getting react work building clientserver apps new apple tv opening thread start conversation around issue case people also looking unfamiliar subject sdk new apple tv lets build javascript applications get loaded server evaluated js context device building interfaces came dom implementation flavour xml called tvml bridges native ui components apis much like react native way also small javascript api called tvjs creating documents making http calls etc way building apps alternative traditional ios development also apple tv swiftobjc uikit frameworks interesting thing default apple tv apps like music tv shows etc built js clientserver apps browserify handlebars templates first try react kind works platform might need shim available start getting details realise limitations atv dom model example noticed idl attributes working might problem elements conflicting html elements name issue property names conclusion think custom react renderer apple tv would solution strange thing would still dom renderer like configured atv elements attributes patched dom implementation quirks guys think feasible", "num": "5439", "d": "11/2015"}, {"title": "onchange text input placeholder fires without modifications internet explorer", "body": "using ie one component attribute handler onchange handler called clicking input without typing anything clicking made reproducible case codepen one opens ie look console clicks input placeholder see event handler seems known issue microsoft unwilling fix however one react goals normalize onchange event documentation implies needs workaround one possible solution would check input triggered event focused moment", "num": "5438", "d": "11/2015"}, {"title": "issues autocorrect attribute set property", "body": "hey far see attribute set html property give issues input elements check chrome documentcreateelement input false safari documentcreateelement input false mobile safari ios simulator documentcreateelement input true identical issues browsers well tested ios", "num": "5436", "d": "11/2015"}, {"title": "react testutils phantomjs error invariant violation valid reactcomponent must returned", "body": "use chrome driver everything works use phantomjs get error error invariant violation userverificationrender valid reactcomponent must returned may returned undefined array invalid object lt lt reactcompositecomponentrendervalidatedcomponent lt lt reactcompositecomponentmountcomponent lt lt lt reactcompositecomponentmountcomponent lt lt mountcomponentintonode lt lt batchedmountcomponentintonode lt lt lt batchedupdates lt lt reactmountrendernewrootcomponent lt lt lt reactrender lt lt lt test js let showerror clearerror oncomplete uv renderer beforeeach function showerror jasminecreatespy showerror clearerror jasminecreatespy clearerror oncomplete jasminecreatespy oncomplete initiateverification type function testutilssimulatechange testutilsfindrendereddomcomponentwithtag uv select target value license expect apiinitiateverification tohavebeencalledwith license", "num": "5435", "d": "11/2015"}, {"title": "allow attribute scriptstyle tags", "body": "nonce attribute helpful increasing coverage pages content security policy allowing script tags evaluated inline without enabling entire page right believe way create script tag nonce attribute use parent element", "num": "5432", "d": "11/2015"}, {"title": "force react update dom class renders", "body": "problem using reactrouter going rerendering trees use external lib api produces video mark totally hands modify dom problem comes routing changes rerenders tree wipes custom dom put third party api tried things like returning false always using blank string hoping react would internally diff nothing seems work anything stop", "num": "5429", "d": "11/2015"}, {"title": "test child props without triggering access props dom node", "body": "component whose job add certain properties child javascript const parent reactcreateclass dostuff render const child reactcloneelement thispropschildren dostuff thisdostuff return child could test like way testing ps test behavior elsewhere also need ensure given child gets reference method", "num": "5428", "d": "11/2015"}, {"title": "update tutorial use callback refs", "body": "page refs components documentation stated react also supports using string instead callback ref prop component although approach mostly legacy point yet tutorial uses stringbased refs comment box inputs since tutorial aimed newcomers may good idea explain stringbased refs considered legacy andor b use another approach", "num": "5427", "d": "11/2015"}, {"title": "license file included react reactdom npm packages", "body": "please add files full license text npm distribution packages unfortunately legal standpoint simply specifying name license enough unclear get exact legally binding text license major roadblock way using module seriously thanks lot great code thanks advance fixing blocker", "num": "5426", "d": "11/2015"}, {"title": "calling class instance argument thisstate became plain object", "body": "react component getinitialstate method returns class instance everything works fine thisstate render mthod right type call class instance argument thisstate becomes plain object javascript class state constructor text thistext text get value return thistext var main reactcreateclass getinitialstate return new state handleclick var state new state react thissetstate state bad case emerged render consolelog return thisstatevalue reactdomrender documentgetelementbyid reactwrap react gulpbabel", "num": "5425", "d": "11/2015"}, {"title": "change element css loop result", "body": "recently developed using react found ca nt change element css value certain fields class name loop result example js const data thisprops map data result index gt resultname x want remove element via change class name like change produce animation effects way help solve expecting answer", "num": "5423", "d": "11/2015"}, {"title": "links docs changelog working", "body": "especially bad links concerning migrate example changelog page breaking changes link helper points exist link section suffers fate possibly others", "num": "5421", "d": "11/2015"}, {"title": "jsx add", "body": "currently jsx supports following syntax works analogously proposing extend syntax write shorthand think analogous syntax jsx would handy shorthand also furthermore allowing following would even better shorthand", "num": "5419", "d": "11/2015"}, {"title": "onupdateonchangeoninput working input type range ie windows", "body": "onchange working chrome though following working chrome ie react version react", "num": "5415", "d": "11/2015"}, {"title": "add jsx support reversed attribute", "body": "wanted used attribute tags seems like jsx compiler nt support could supported use would make easier creating list numbers thanks", "num": "5414", "d": "11/2015"}, {"title": "reactdom separate file cdn", "body": "loading react cdn need include two separate files html given primary use react via cdn browsers nt bundle together would ever load via cdn without loading", "num": "5413", "d": "11/2015"}, {"title": "trigger eventlistener registered outside react component", "body": "trigger eventlistener registered outside react component", "num": "5410", "d": "11/2015"}, {"title": "nt exist", "body": "page mentions run installing new version reactnative says option upgrade unrecognized usage reactnative commands start starts webserver install installs npm react components bundle builds javascript bundle offline use newlibrary generates native library bridge android generates android project app confused", "num": "5409", "d": "11/2015"}, {"title": "internet explorer import syntax returns invalid component", "body": "hey broke keyboard two bug seems using babel syntax declare app way js import component react class app extends component render return app ie throws whereas instead previous works using react loaded page shimmed browserify could come well know bugfeature causing world pain inside app pretty big app lot components higher order components thanks", "num": "5407", "d": "11/2015"}, {"title": "nicer docs site", "body": "using react awhile loving front end developer would like contribute back react community would like ask react core team guys open simple reskinning prettifying docs page ideas mind make sidebar items collapsible mobile friendly vibrant color theme changes drastic mostly playing css example past work skinning site let know thoughts make pr address issues smile", "num": "5404", "d": "11/2015"}, {"title": "api reference useful", "body": "due lot text explicit explanation way search stuff api makes library extremely hard use hard someone read much rather stuff done", "num": "5402", "d": "11/2015"}, {"title": "inconsistent error messages test utilities functions", "body": "noticed returns error message find exactly one match found class classname returns error message find exactly one match tag tagname would preferrable consistent errror messages would personally prefer first format number matches reported parantheses", "num": "5401", "d": "11/2015"}, {"title": "client side usage api", "body": "hi process migrating codebase react encountered problem fact client side uses render react components passing results around strings know ideal given codebase previously sadly needed us cases however given understanding structural changes packages tell supposed simply call api accessible package use webpack yet moment using appropriate supported way calling browser using prebuilt packages", "num": "5400", "d": "11/2015"}, {"title": "document context stateless functional components", "body": "set functional component second argument function parent context undocumented unsupported unstable behavior missing documentation far tell", "num": "5399", "d": "11/2015"}, {"title": "use instead setting css properties individually", "body": "based discussion currently diff css properties imperatively set individual properties value differs previous render long claimed performance reason benchmarks nt seem support claim instance consider ben perf test realistically cases one technique faster vice versa probably wash using several advantages current approach notably solves correctness issues related various css shorthand properties noted also cleanly solves vendor prefixing variety edge cases plus added bonus means react core less work therefore simplercleanermoremaintainable", "num": "5397", "d": "11/2015"}, {"title": "changelog", "body": "npm says see sign github changelog would help understand whether upgrade later", "num": "5393", "d": "11/2015"}, {"title": "reactaddonstestutils generates warning warning", "body": "specified documentation however following warning generated due fact module exports", "num": "5392", "d": "11/2015"}, {"title": "add addons", "body": "followup reactaddons packages entry files", "num": "5388", "d": "11/2015"}, {"title": "async value updates inputs reset cursor position", "body": "hello strikes bug certainly annoying difficult workaround control input set value asynchronously say settimeout example cursor position reset end input jsfiddle try typing middle input text cursor reset end line addendum see native inputs exhibit behavior say use jquery setinterval tho still behavior want since controlled input scenario know value actually changing", "num": "5386", "d": "11/2015"}, {"title": "requestupdate setstate use deep merge", "body": "currently think common case deferred rendering way render period time see renders immediately issue lets say wanted update two css properties render course could use however since uses shallow merging updating states would cause overwriting previous state example next render render resolved state would order solve could circumvent object create second object contains computed styles render requests could happen call function like course ignoring state using another object manage style would create side effect state contained two objects nice end deep merge state would best however obviously huge change may create large performance drawbacks", "num": "5384", "d": "11/2015"}, {"title": "serverside rendertostring component claims ismounted", "body": "keep reference lifecycle method component rendered later documentation however claims serverside components nt really mounted since never called think behavior changed react might wrong", "num": "5383", "d": "11/2015"}, {"title": "componentwillreceiveprops nt detect object prop mutated", "body": "passing object owner child like nt detect change looks like taking reference passed object works nt tried using non object react intended behavior", "num": "5382", "d": "11/2015"}, {"title": "support attribute tag", "body": "implementing solution allows label act behalf checkbox ca nt add jsx", "num": "5380", "d": "11/2015"}, {"title": "docs changing rendering backend", "body": "reactfamous worked creating invisible dom structure using componentdidmount related lifecycle methods create famous scene graph another tree structure mirroring structure hidden dom bit unnecessary extra dom read somewhere alternate rendering backends place read make alternate rendering backend would completely ignore dom case scene graph example suppose like make scene graph threejs purely webgl dom wo nt come play", "num": "5379", "d": "11/2015"}, {"title": "documentation issues reactaddonsshallowcompare package", "body": "previously using method reactlib implementation used following way updating migrated using npm package reactaddonsshallowcompare assumed shallowcompare worked way anything passed shallowcompare returning true low level testing even following returning true using chrome dev tools able discover method signature expected think need better document method somewhere either npm package page addons page help others wanting make transition", "num": "5378", "d": "11/2015"}, {"title": "examplebasicjsxprecompile babel examplejs outdirbuild failed", "body": "babel version babelcore", "num": "5377", "d": "11/2015"}, {"title": "react freezing chrome task manager reports cpu tab memory increase per second", "body": "sorry vauge description ca nt think provide except source trace stack rather flummoxed edited source convey gist issue originates w onclick handler inside jsx import react component proptypes react import radium radium let row storename deals dateselected isopen toggleopen updatedateselected gt daysmap day gt row radium row import connect reactredux import updatedateselected actionsconfigactions connect null updatedateselected export default class rowcontainer extends component static proptypes updatedateselected proptypesfunc constructor super thisstate isopen false toggleopen thissetstate isopen thisstateisopen render return triggering page immediately freezes statement allows investigation calls redux reducer manages middleware called component contains rerendered w correctly updated props jsx import react component proptypes react import row viewsconfigconfigdealsrow const configdeals deals stores daterangestart dateselected gt storesmap store gt import connect reactredux connect state gt dateselected stateconfigdealsdateselected deals statecollectionsdealsentities stores statemetastores export default class configdealscontainer extends component static proptypes deals proptypesarray stores proptypesarray dateselected proptypesnumber render const deals stores dateselected thisprops return point expect react stop stuff keeps going stepping forwards w debugger yields trace stack particular function call seems trip everything comment seemed pertinent unsure large ammounts computationmutation could", "num": "5375", "d": "11/2015"}, {"title": "react objects invalid children", "body": "functions children objects react router multiple route components cases instead get makes building abstractions much easier always know find components functions objects", "num": "5371", "d": "11/2015"}, {"title": "proptypes nesting", "body": "hey using redux putting actions thispropsactions unfortunately makes hard use proptypes lacking ability nest proptypes something like solution feature upcoming", "num": "5365", "d": "11/2015"}, {"title": "onclick tag working update", "body": "none onclick handlers working development mode updating using reverting code changed reacterrorutilsjs get onclick handler working", "num": "5364", "d": "11/2015"}, {"title": "event handlers amp shadow dom", "body": "hello react currently trying make events work react components rendered within shadow dom find putting back commented lines work way enable outside library right using kind injection ones performed reactdom instance", "num": "5363", "d": "11/2015"}, {"title": "reactnative init error", "body": "use reactnative init problem githubcom errnooperation timed node version ping githubcom successful installing reactnative package npm npm err git clone templateusersguodsnpmgitremotestemplates mirror git githubcomfacebookreactgit cloning bare repository npm err git clone templateusersguodsnpmgitremotestemplates mirror git githubcomfacebookreactgit fatal unable connect githubcom npm err git clone templateusersguodsnpmgitremotestemplates mirror git githubcomfacebookreactgit githubcom errnooperation timed npm err darwin npm err argv install save reactnative npm err node npm err npm npm err code npm err command failed git clone templateusersguodsnpmgitremotestemplates mirror git githubcomfacebookreactgit npm err cloning bare repository npm err fatal unable connect githubcom npm err githubcom errnooperation timed npm err npm err npm err npm err need help may report error npm err npm err please include following file support request npm err usersguodsprojecttestreactnpmdebuglog ping githubcom ping githubcom data bytes bytes ms bytes ms bytes ms", "num": "5359", "d": "11/2015"}, {"title": "reason stateless function return null", "body": "return null stateless function receive error message would like know reason stateless function return null sample code thank", "num": "5355", "d": "11/2015"}, {"title": "syntaxerror trying compile mainjs described tutorial", "body": "read sudo npm install g browserify npm install save react reactdom npm install save babelify touch mainjs mainjs var react require react var reactdom require reactdom reactdomrender hello world documentgetelementbyid example next call browserify babelify mainjs bundlejs got syntaxerror nik fedora tut browserify babelify mainjs bundlejs syntaxerror unexpected token reactdomrender hello world documentgetelementbyid example parserppraise parserppunexpected parserppparseexpratom parserppparseexprsubscripts parserppparsemaybeunary parserppparseexprops parserppparsemaybeconditional parserppparsemaybeassign parserppparseexprlistitem parserppparsecallexpressionarguments", "num": "5354", "d": "11/2015"}, {"body": "looks like first second snippets resulting parse errors least drop react component babel repl nt tested anything else perhaps babel behaves slightly differently though nt think supposed maybe using something else parse unfortunately one areas jsx gets weird since bit made edge cases behavior maybe define things bit better walk though try explain parse errors last one works parse errors reason boils knowing piece jsx put comments inside braces point parser nt switched treating block jsx nt encountered something believes opening tag thinks object parsed stepping past see jsx nt matter ultimately looks like going parse error extension except empty objects one opening indicates parser start treating something besides objects drop expression blocks removed decided would make sense introduced comments drop literal instead sorry hit one cases jsx breaks hopefully clears nt much really nt really tooling anymore unfortunately since building top js parse sees something indicate jsx assume still js", "d": "11/2015"}, {"body": "try keep github reserved bug tracking much possible please use places eg stack overflow usage questions reopen diagnose think uncovered bug react", "d": "11/2015"}, {"body": "duplicate", "d": "11/2015"}, {"body": "please file react native issues repo", "d": "11/2015"}, {"body": "come times going point towards canonical issue close", "d": "11/2015"}, {"body": "see discussions best guess hitting enumeration order issue think supported warning message see beginning going close point followup discussions sure great resolution yet might need ensure polyfills date might need make change code", "d": "11/2015"}, {"body": "zpao ok see lot discussion construct see code sample using fact never able render attribute serverside spit anything add component immediately get warning looking code reactdomserver difficulty find relevant bits sure separate issue mentioned serverside rendering java nashorn scripting engine chance somewhere reactdom reactdomserver dependency node causes best guess hitting enumeration order issue think supported warning message see beginning datareactid using anything depends enumeration order last normal right end looks like nashorn style always skipped somehow", "d": "11/2015"}, {"body": "debugging nt see attribute markup rendered serverside order attributes missing attibute", "d": "11/2015"}, {"body": "created minimal app attempts render single div attribute work also double checked whether ordering problem real app attribute rendered using root node looks like jsx using spread still nt get could related style attribute swallowed suspicious tips look debugging bit lost honest", "d": "11/2015"}, {"body": "debugging nt see attribute markup rendered serverside well sounds like problem created minimal app attempts render single div attribute work working far less inclined blame react really nt enough go going say maybe something initial state results nashorn treating value differently said adding component results warning except minimal app makes want blame app way something else app code would something like radium inline styles library missing client never seen something like reported really hesitant blame react possible would suggest taking things stop seeing trying build reduced test case repro share otherwise sure much go", "d": "11/2015"}, {"body": "working far less inclined blame react yes problem probably react reactrouter trying create small app reproduces problem far able reproduce issue reactrouter mix said adding style component results warning may jumped gun seems add components still nt see pattern pretty sure something reactrouter react wo nt bug anymore", "d": "11/2015"}, {"body": "alright well let us know regardless curious amp ee like knowledge tricky diagnose issues even nt react react router wildly popular likely get crosscutting issues like", "d": "11/2015"}, {"body": "zpao ok weirdest bug ever reactrouter either nashorn lack understanding nashorn created sample project demonstrates issue think know work around issue tomorrow gist callback passed react router function accepts three arguments bundled together single object returned method inspect java side property set indicates valid route call render passing however somewhere roundtrip nashorn java nashorn object changes shape way triggers issue js code routing rendering added simpler variation well found note logging object returning passed render java code calls script functions first render two steps determine route valid render single step hardcoded render route logging output get combined logging java js code loading script reactjs loading script reactdomjs loading script reactdomserverjs loading script historyjs loading script reactrouterjs loading script bundlejs got twosteprenderer object object object determining route path props routes object object object object props params object object props location object object props components function app classcallcheck app props history object object determinined route path props object object render props routes object array props params object object props location object object props components object array props history object object serverside generated markup using twosteprenderer style rendered simple render match result errornull redirectnull props object object serverside generated markup using simplerenderer style rendered notice difference two props objects nt dug much changing shape dramatically must something wrong little docs nashorn yet idea wrong able work around good thank interest sorry bothered would thought could get kind weird differences rendering", "d": "11/2015"}, {"body": "hmm guess never posted initial theory nashorn amp somehow getting null undefined mixed since would nt render anything nt make sense styles nt say maybe something like actually happening though reference javaland losing state casting odd either way glad sort figured though good luck", "d": "11/2015"}, {"body": "looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow regards question personal recommendation avoid singletons", "d": "11/2015"}, {"body": "thanks reply already way create react components singletons aware trust jsfiddle evaluated one seniors please share could nt find anything docs communicate components doc page communication two components nt parentchild relationship set global event system flux pattern one possible ways arrange see singletons nt mentioned stackoverflow link gave lot people actually said using singletons useful cases second answer singletons solve one one problem resource contention resource single instance need manage single instance need singleton sounds like usecase quite react world believe still relevant issue github seems like relevant way use components think docs contain reference", "d": "11/2015"}, {"body": "react component instances internal state needed know inside tree instance ca nt instance rendered multiple places therefore idea singleton instances nt make sense react world shown fiddle really would call singleton mostly single instance argument like module state instance rendered uses enclosed really global state cheating storing reference mounted instance global state forcing update mounted instance nothing actually stopping rendering would result first one updated could easily something similar support rendering us making reference docs wo nt lots patterns could achieved react going talk", "d": "11/2015"}, {"body": "thanks taking time reply james firstly completely understand points appreciate fact taken look jsfiddle let make final statement meant singleton instance react component renders throughout app starting point therefore problem mentioned first one updated rendering relevant know contaminating global namespace frowned upon codingapproach place usages using flux sort thing problematic variety reasons struggled good day even solution came good component chooses props store using singleton way described make lot easier think benefits outweigh cons know regard docs using react months secret docs lacking severely points learning use react hard confusing docs currently contain sentences communication components family relationship understand variety patterns available sort thing obvious encountered flux far beginners rely heavily docs maybe listing possible patterns available solve sorts problems exact thing learn patterns indepth learning tool right task hard part want make things hard easier think matter lines could help beginners future always end writing huge comments thanks sticking reading smile", "d": "11/2015"}, {"body": "causes every render different random value key different react reuse old component lose focus input got replaced", "d": "11/2015"}, {"body": "ah right would make sense bad mistake thanks", "d": "11/2015"}, {"body": "addons removed package eventually reason separate packages currently requires able support ways separated could elaborate separate addon packages requiring causes trouble", "d": "11/2015"}, {"body": "could nt find notes docs explains react wraps floating text nodes span tag sure limitation still around", "d": "11/2015"}, {"body": "answer still holds true", "d": "11/2015"}, {"body": "nt check function binded instead test behavior instance javascript bootstrappaginationpropsonselect result shallowrenderergetrenderoutput expect result toequal", "d": "11/2015"}, {"body": "yeah laskos solution probably best", "d": "11/2015"}, {"body": "workaround use different name like get initial state reserved function name emits warning order avoid confusion component lifecycle function defined react classes looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "using defaultvalue set value input first time subsequent changes default value value input wo nt updated directly use prop instead read controlled noncontrolled inputs", "d": "11/2015"}, {"body": "well said seekshiva", "d": "11/2015"}, {"body": "think better ask stack overflow matters like nt seem bug please provide code repro bug", "d": "11/2015"}, {"body": "nt want use one ref val datavar val", "d": "11/2015"}, {"body": "thanks answer liesislukas nt looking workarounds one question forgot elementkey react internal nt even read", "d": "11/2015"}, {"body": "yes key used signal react identity object reactchildrentoarray changes key identity semantics preserved example jsx itemsmap item gt item okay wo nt mixed first element keys scoped array flatten item gets key prefixed preserve behavior want read key back unchanged read within component please use another property name", "d": "11/2015"}, {"body": "okay thanks spicyj", "d": "11/2015"}, {"body": "works fine version using", "d": "11/2015"}, {"body": "maybe old version works", "d": "11/2015"}, {"body": "update issue gone away sure solved problem think may thanks upgrading npm node andor using npm link", "d": "11/2015"}, {"body": "ok let close ever find went wrong provide steps reproduce reinvestigate", "d": "11/2015"}, {"body": "fairly certain problem though trouble producing one two modules experiencing error may compounding factors related outdated nodenpm versions consider module relies peerdependency uses refs project requires installed via error displayed tested moment ago run inside install remote git repository error goes away", "d": "11/2015"}, {"body": "jimfb confirm definitely issue git installation worked fine older versions npmnode eta maybe maybe related issue fixed may also fault react", "d": "11/2015"}, {"body": "reproduce nt set charset document unfortunately page actually decent still reproduce done", "d": "11/2015"}, {"body": "doh thanks jsx converting entity unicode character", "d": "11/2015"}, {"body": "kept reading methods displaying entities dynamically right sorry disappointed", "d": "11/2015"}, {"body": "omuryolcu past something else page stealing focus questions like stackoverflow etc functionality likely broken", "d": "11/2015"}, {"body": "yaycmyk hey evan well question bug report imho nt work could make work like guys would prove wrong would delighted however strongly convinced bug would unfair report", "d": "11/2015"}, {"body": "know sorry misread initial post intended behavior move focus first render consistent html spec bug workaround one possibilities want remain constantly focused", "d": "11/2015"}, {"body": "hey evan yaycmyk problem maybe react something also move focus render maybe would eliminate use ref nt know struggled much give maybe use somebody thank", "d": "11/2015"}, {"body": "mentioned seems like line spec may inconsistencies think fake focus one things really tricky declaratively part shared global state unrelated components declare focused single render pass right give hooks manage state wo nt sorry cause troubles", "d": "11/2015"}, {"body": "hey paul zpao ok wanted mention case something wrong btw last one activating focus would good choice react could complain warning user thank much attention", "d": "11/2015"}, {"body": "found maybe reactrouter cause problem", "d": "11/2015"}, {"body": "works demonstrated pen open console look", "d": "11/2015"}, {"body": "appears working expected", "d": "11/2015"}, {"body": "expected behaviour vanilla dom version behaves", "d": "11/2015"}, {"body": "doublechecked works fine firefox fine chrome seems like purely chromerelated issue maybe reasonable workaround makes sense mention gotcha docs", "d": "11/2015"}, {"body": "looks like behaves way safari maybe see open issue tracking", "d": "11/2015"}, {"body": "adding new proptype validator something like component would form something similar opinion quite dangerous let people pass functions sure make better validation reading seems like gigantic hack would work minification option aware", "d": "11/2015"}, {"body": "show using nt think component classes valid either supposed accept anything rendered classes ca nt rendered directly would pass element type set", "d": "11/2015"}, {"body": "oh god right feel stupid guess validating something bad way sorry noise", "d": "11/2015"}, {"body": "believe lifecycle methods require instance function components", "d": "11/2015"}, {"body": "could use lifecycle hooks smart parent component use functional component dump component whose responsibility render answer question", "d": "11/2015"}, {"body": "okay thank much feedback berkeleytrue iamdustan", "d": "11/2015"}, {"body": "iamdustan berkeleytrue could create functions within stateless component calls smart components function", "d": "11/2015"}, {"body": "nt currently plans change welcome maintain fork would like", "d": "11/2015"}, {"body": "intentional intentional value whereas lack specified value", "d": "11/2015"}, {"body": "zpao case imho escape properly treated equally react trivial translating whatever although personally sure ever makes sense key warning", "d": "11/2015"}, {"body": "unfortunately wo nt possible proptypes done early elements nt access rendered result", "d": "11/2015"}, {"body": "worries appreciate courteous reply thanks react", "d": "11/2015"}, {"body": "publish latest branch documentation changes land cherrypick stable branch built avoids docs code changes since get cherrypick code change stable release care less longlived docs version nt well set sure enough value thanks cherrypicking last published markdown always available version eg wanted see api docs easily personally think pretty good process cherrypicking annoying allows docs pretty stable still receive updates", "d": "11/2015"}, {"body": "great question stack overflow try keep github focused bugs issues react keep usage questions elsewhere said may gain insights", "d": "11/2015"}, {"body": "feel like expected behavior albeit perhaps slightly confusing class parents changing attribute instance nt change would evaluated change ancestor component class eg instance thrown away new input instance created thus gets evaluated expected behavior given way react keys work cc spicyj zpao", "d": "11/2015"}, {"body": "yes work around changing attribute input gets recreated", "d": "11/2015"}, {"body": "think react diffingreconciling engine thing changed type end user developer much type technically thing changing whole new input use case developer end user standpoint says want keep exact input change type essentially person consider behavior expected guy wrote reconciliation algorithm", "d": "11/2015"}, {"body": "designbyonyx yeah argument could made whole ton things changing one attribute eg video component could imply attributes eg component playscrubber position also changereset someone could make argument one changes rules result wackamole game become complicated anyone understand better simple set rules change tag type results new instance attribute changes honored everywhere fwiw keep mind problems evaporate use controlled components reacty way", "d": "11/2015"}, {"body": "thanks quick responses makes sense behaving way wat moment morning coffee switching controlled components seems like better solution using keys", "d": "11/2015"}, {"body": "jimfb get point although video src example best kind like saying every time change tv channel someone might expect new tv appear place new channel set brightness hue set back however type tv changes crt plasma completely reasonable expect new tv place get point nonetheless overall issue developer completely different views happens implement tree structure arbitrary random imo input gets reused despite fact intent trying think another case would expect attribute change completely reset element ca nt inputtype scenario seems pretty unique deserving scrupulous investigation another thing consider fact defaultvalue property value attribute follow example paste console", "d": "11/2015"}, {"body": "closing updated react worked expected find issue upgrade react", "d": "11/2015"}, {"body": "well spotted", "d": "11/2015"}, {"body": "looks like going make actually render comment nodes become nonissue future", "d": "11/2015"}, {"body": "electricmonk attribute far tell edit property exists controlled javascript control manually using node", "d": "11/2015"}, {"body": "wonder makes sense react expose attribute also seems reasonable suggest since ca nt think reason nt attribute", "d": "11/2015"}, {"body": "jimfb usercontrolled best initial value user last developers arbitrary judgement would think", "d": "11/2015"}, {"body": "ah yeah unless developer intends providing volume control yeah makes sense sounds like close issue unless someone sees reason keep open", "d": "11/2015"}, {"body": "hmm stand corrected", "d": "11/2015"}, {"body": "ah yeah unless developer intends providing volume control yeah makes sense jimfb react deals attributes inpart serverrendering would say personally think best react stays things anyway trivially implemented userland via wrapper component", "d": "11/2015"}, {"body": "encountering similar issue error getting simple solution would check existence exit mentioned op", "d": "11/2015"}, {"body": "andersekdahl jimfb tried debug problem find already fixed pull request relevant anymore", "d": "11/2015"}, {"body": "yup seems like thanks", "d": "11/2015"}, {"body": "guess could reinstate jsxtransformer nt really want sebmck whyyyyyyyyyyyyyy", "d": "11/2015"}, {"body": "zpao something want support", "d": "11/2015"}, {"body": "sebmck missing something obvious inbrowser transformation fairly critical new users getting started used sample code give people first taste jsx used fiddles debuggingtestingdemoing used lot places even used reactjs homepage seems like fairly critical feature", "d": "11/2015"}, {"body": "sebmck feel free point elsewhere discussion main reason want keep simple starting react load script use typetextbabel work nice story eases people need serverside transformation would also pretty bad require build pipeline hello world want people focus react initially tooling could compile get story yep though maybe wo nt ship anywhere time site examples jsfiddle nice say owning p", "d": "11/2015"}, {"body": "way could reduce runnable test case gut cases like usually something keys nt necessary", "d": "11/2015"}, {"body": "also version react using", "d": "11/2015"}, {"body": "react", "d": "11/2015"}, {"body": "sure make runnable test case issue branch clone see maybe need dummy items db see ul falls div though le know help help", "d": "11/2015"}, {"body": "okay list steps reproduce including clone repo items add take look", "d": "11/2015"}, {"body": "git clone branch joan dunno get branch git checkout joan npm install create mysql database called listlogs hmm maybe give email send dump import schema npm run server start api npm run dev start webpack dev server sign whatever want left second icon says add new list add one new item appear menu item appear new list error reproduces appear maybe use irc skype fb something case find issue setting", "d": "11/2015"}, {"body": "nt mysql possible make smaller example try deleting parts code nt necessary make issue appear nt require database", "d": "11/2015"}, {"body": "hmm let think go", "d": "11/2015"}, {"body": "problem condition ternary expression ruins behaviour actually checking user logged change let say true works", "d": "11/2015"}, {"body": "funnily value thispropsowner true", "d": "11/2015"}, {"body": "ok cuttlas created branch nt require backend steps npm install npm run dev start webpack dev server log whatever want signin menu dummy lists left second appears however refresh page second goes two lists hope helps", "d": "11/2015"}, {"body": "sure reproducing correctly see warning change menujsx use inside listlogslogo inside link instead think error goes away confirm could made clearer see error see ignore", "d": "11/2015"}, {"body": "warning validatedomnesting appear descendant see menu gt link gt gt gt changing nested anchor anything else seems fix problem react ca nt help create invalid markup browser moves nodes around", "d": "11/2015"}, {"body": "well embarrassing work thanks bunch warnings solving evening left one later thinking absolutely relation sure make clearer guess fact worked value true confused us bit thanks though cheers", "d": "11/2015"}, {"body": "propose force purity impure language", "d": "11/2015"}, {"body": "going close point initial pr functional components good discussion around ideas make pure", "d": "11/2015"}, {"body": "stateless component almost equal would really prefer work like give enormous performance boost cases since rerender props changed see performance optimization done stateless components nt know since nt behave like components enabled still possible gain performance personal opinion behaviour purerendermixin default components well long nt implement another behaviour method might wrong think forces write reasonable performant code", "d": "11/2015"}, {"body": "thanks zpao tried search similar issues nt search pull requests apparently months late", "d": "11/2015"}, {"body": "always find confusing hell announcing compatible react probably source problem", "d": "11/2015"}, {"body": "thanks responding looks like issue though see release", "d": "11/2015"}, {"body": "trying install though possibly locked dependency", "d": "11/2015"}, {"body": "syranide good spot strange given caret maybe solve one errors installing reactdom separate npm package also helped resolve reactdom error", "d": "11/2015"}, {"body": "special", "d": "11/2015"}, {"body": "closing since react issue feel free continue working", "d": "11/2015"}, {"body": "zpao keeps coming come legit solution go buildpackage", "d": "11/2015"}, {"body": "going close since mentioned nashorn point another issue topic perhaps something", "d": "11/2015"}, {"body": "sorry nt want whine anything explain closing react reactdom support use globals point nashorn specific topic nt issue platforms support effect platforms node js guys planning expose reactdomserver via path global case expose react reactdom honest ran issue thought oversight seems conscious design decision currently fixing calling still works reachable global undoubtedly removed next release sounds like walking deadend street", "d": "11/2015"}, {"body": "also closed see quitte people issues one line code solve end end implement polyfill commonjs module loader target platform get access reactdomserver object need make difficult call bug prebuilt bundle contains code effectively unreachable available would use prebuilt bundle see nt want pollute global scope would exposing via already global scope", "d": "11/2015"}, {"body": "sure going exactly issue probably going issue references using spyon reference original function even spying replace property new function beyond pretty hard tell perhaps standlone test repo gist could ed", "d": "11/2015"}, {"body": "andrewheppner spying private function kind weird using jasmine kind thing team maybe fix problem function rendercategoryclearbutton const clearallselectedcategoriesspy jasminecreatespy clearallselectedcategoriesspy const output testutilsrenderintodocument return output clearallselectedcategoriesspy call clearallselectedcategories clicked gt const output clearallselectedcategoriesspy rendercategoryclearbutton const renderedbutton testutilsfindrendereddomcomponentwithtag output button testutilssimulateclick renderedbutton expect clearallselectedcategoriesspy tohavebeencalled", "d": "11/2015"}, {"body": "thanks jadekler give shot reason using spy thought test whether click button successfully calling clearallselectedcategories function use underscore infront function names signify custom function one react lifecycle functions component ie componentwillupdate etc better way test whether button click calls function", "d": "11/2015"}, {"body": "per think supported ssr fpr maybe could warn ever happens via createelement path", "d": "11/2015"}, {"body": "looks like usage question rather bug react core usage questions better answered sites like discussreactjsorg stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move one previously mentioned sites", "d": "11/2015"}, {"body": "came across similar issues profiling react based app component way rerendered lot thing passed element render visible prop named overlay element anchors around propschilren recommended way compare previous next children hopefully even overlay prop find whether component props therefore render necessary", "d": "11/2015"}, {"body": "seems problem affecting dev build react well recursion caused", "d": "11/2015"}, {"body": "simple solution trigger events different event loop eg settimeout loop even better communicate differently achieved state triggering events said clear triggers much recursion though", "d": "11/2015"}, {"body": "thanks zpao wrapping loop settimeout trick functionality simple component like nav simplest way trigger open reactish solution", "d": "11/2015"}, {"body": "followed repro steps could see bug wired maybe bug fixed one npm packages could try deleting nodemodules folder get fresh install", "d": "11/2015"}, {"body": "tried different machine also deleting nodemodules running npm install still seeing behaviour screenshot describing adding post content test post editing say test post updated seeing thing chrome firefox win win machine sure checked right branch bugbrokeneditwithmarkedandptag got working master using div instead p tag", "d": "11/2015"}, {"body": "thinking result using marked inner html wrapping content p tags resulting nested p tags according nt standards compliant close issue doubt react strives handle noncompliant markup", "d": "11/2015"}, {"body": "right used wrong branch see problem guess react ca nt help browser alters html make valid react ca nt even warn properly since used", "d": "11/2015"}, {"body": "yes thoughts well fine thanks looking", "d": "11/2015"}, {"body": "assuming filed", "d": "11/2015"}, {"body": "line tries get node mounted", "d": "11/2015"}, {"body": "cc spicyj syranide events actually calling setstate ssr might legalvalid", "d": "11/2015"}, {"body": "yeah suppose setstate warn nothing expect would happen though", "d": "11/2015"}, {"body": "triggers error example also produces expect asynchronous updates ignored warning components rendered using", "d": "11/2015"}, {"body": "flow open source find something wrong date sure would appriciate pr fix feel free submit one flow repository intuition file remain repositorydirectory least along flow libs changing location file wo nt fundamentally change anything maintaining file still require exactly amount work ran nearly identical issue typescript ultimately concluding request change would need come directly project maintainers along appropriate update testing infrastructure per", "d": "11/2015"}, {"body": "thanks jimfb sorry comment came official position definitely nt insight factors inform decisions definitely things flow side make versioning less top head granular flowlib control imports would help nodebrowser split well", "d": "11/2015"}, {"body": "think ultimately one belong react repo gone back forth big difference typescript primary contributors fb using flow extensively far greater chance know something compatible typedefs better move flow long term libraries included core node dom etc fine nt libraries going reopen since whole flow issue definitely issue cutting across multiple projects cc sebmarkbage since thinking bunch lately", "d": "11/2015"}, {"body": "context flow team sits one desk react team facebook report resource allocation seamless repo nt make break collaboration flow team build prioritize features based requirements react api core frameworks feature able maintain add new features deploy lot context typed configured currently looking flow types deployed npm packages point might make sense react definitions deployed react release ultimately nt maintainability deploys releases made", "d": "11/2015"}, {"body": "thank comments seems though plenty thought given issue meantime uptodate type definition file react use fb would mind sharing", "d": "11/2015"}, {"body": "tested jsfiddle least test case seems work maybe make minimal repro bug jsfiddle jsbin", "d": "11/2015"}, {"body": "per cody jsfiddle appear work create simple jsfiddle demonstrates issue", "d": "11/2015"}, {"body": "yeah fault per cody jsfiddle appear workin masking div changed show state mousedown event dblclick handler nt", "d": "11/2015"}, {"body": "render react component create local variable starts uppercase letter", "d": "11/2015"}, {"body": "beginner would like warnings console", "d": "11/2015"}, {"body": "warnings tracked", "d": "11/2015"}, {"body": "bit clarity want warnings console jsx compile time want file whatever using transform probably babel", "d": "11/2015"}, {"body": "zpao warning would require transform support want file babel instead react", "d": "11/2015"}, {"body": "yes said exception would something would want write additional babel plugin", "d": "11/2015"}, {"body": "zpao correct already done right already checking mode pointing actually calls function nt quite get issue probably nt get words properly text nt surface issue component class consumed", "d": "11/2015"}, {"body": "antoaravinth code linked validates proptypes element creation assuming test case like want warn right away written invalid proptype must take array current behavior instead wo nt know component defined proptypes improperly mean class consumed poor phrasing part", "d": "11/2015"}, {"body": "zpao got meant anyways looks like rppc given pr thanks reply", "d": "11/2015"}, {"body": "code intended internal react part publicsupported api implementation detail reserve right make changes time considered unstable thus reason nt export duplicate", "d": "11/2015"}, {"body": "fyi key mirror shipped fbjs react facebook projects consume available top level apis require fbjslibkeymirror package rest jim said holds", "d": "11/2015"}, {"body": "little surprised seeing flicker nothing changing nt happen guess something changing way without simple example demonstrates issue nt much investigate going close issue actionable current state guess bug somewhere code rather bug react core create simple example jsfiddle demonstrates bug react core happy reopen investigate", "d": "11/2015"}, {"body": "let keep open close ca nt get test case together find nothing nt enough info confidently close", "d": "11/2015"}, {"body": "zpao thanks actually nt certain maybe special case root node perhaps calling setstate outside element somehow triggered ca nt extract simple test case part bigger system may step venture getting bad state quickly good one least set breakpoint see could move stack find state point see trying render", "d": "11/2015"}, {"body": "able set breakpoint inside render component see calling setstate outside element nt think matters gut reaction nt expose method calls setstate maybe recommendation really consider state private", "d": "11/2015"}, {"body": "nt run today going close almost certainly bug run set break changes see find", "d": "11/2015"}, {"body": "nt agree promises particular reliably cancelled removing way check component mounted setstate another action opening way lot hard trace async bugs", "d": "11/2015"}, {"body": "yaycmyk thus line still need figure good stories around promises related use cases please read background issues listed particular", "d": "11/2015"}, {"body": "read comments find issues intractable", "d": "11/2015"}, {"body": "promises cant reliable cancelled sourcesproofsexamples monday november evan jacobs notifications githubcom wrote nt agree promises particular reliably cancelled componentwillunmount removing way check component mounted setstate another action opening way lot hard trace async bugs", "d": "11/2015"}, {"body": "nvartolomei look promise spec", "d": "11/2015"}, {"body": "longer term goal something happening immediately want track planning discussions single place across comments every issue comes aware problem promises currently uncancellable major reason nt already done", "d": "11/2015"}, {"body": "yaycmyk oversimplify complex issue comments saying using avoid unmounted components nt actually solve problem warning trying indicate fact hides problem also calling result promise bit antipattern anyway since cause race conditions wo nt necessarily show testing thus want get rid figure best practice recommendation using promises react agree issues bit inscrutable largely complex issue still figuring nt yet canned response", "d": "11/2015"}, {"body": "calling setstate result promise bit antipattern anyway since cause race conditions wo nt necessarily show testing agree disagree one times content fetched asynchronously nt want go fullscale rerender pop content resolved use specifically infinite table view implementation full virtual rerender would unnecessary", "d": "11/2015"}, {"body": "might able cancel promise make dereference component unmount like javascript const somecomponent reactcreateclass componentdidmount thisprotect protectfromunmount important distinction called callbacks get dereferenced meaning component gets dereferenced promise completes calls noop prevent memory leaks related promises references unmounted components source protectfromunmount", "d": "11/2015"}, {"body": "simple method used add cancel promise javascript const makecancelable promise gt let hascanceled false const wrappedpromise new promise resolve reject gt promisethen val gt hascanceled reject iscanceled true resolve val promisecatch error gt hascanceled reject iscanceled true reject error return promise wrappedpromise cancel hascanceled true edit updated correctnesscompleteness use javascript const somepromise new promise r gt settimeout r const cancelable makecancelable somepromise cancelable promise gt consolelog resolved catch iscanceled error gt consolelog iscanceled iscanceled cancel promise cancelablecancel", "d": "11/2015"}, {"body": "listing ways supup promises make cancellable besides point intent provide solution works spec rather trying work around spec", "d": "11/2015"}, {"body": "agree instead simply checking component still mounted receive promise result resort kinds magic unbind promise component supposed set result clearly fighting way promises designed feels like overengineering solution simple test easiest way take care", "d": "11/2015"}, {"body": "keep simple checking javascript reactcreateclass function componentdidmount function thisismounted true handleresponse function response thisismounted return protection componentwillunmount function thisismounted false", "d": "11/2015"}, {"body": "course opinion seems async data loading promise inside react component common scenario covered react instead write boilerplate code", "d": "11/2015"}, {"body": "problem fallow true mount state must add listener react finish dom mount process component attach componentdidmount defined affect perf nt need fallow everywhere component dont listen dom mount ready default since componentdidmount undefined", "d": "11/2015"}, {"body": "see", "d": "11/2015"}, {"body": "thanks fkling closing favor also see somewhat related discussion colllin future reference usage questions best addressed stackoverflow know somewhat bug like nt bad place something consider try keep github tracking bugs core", "d": "11/2015"}, {"body": "thank fkling", "d": "11/2015"}, {"body": "already done next publish update currently way update npm metadata without new version timeline looks like things put perhaps soon", "d": "11/2015"}, {"body": "ok good unsure repository facebookreact sufficient prefixed github", "d": "11/2015"}, {"body": "npm treats github", "d": "11/2015"}, {"body": "would definitely nice heard someone rxjs team say last month managed refactor less allocations shorter stack traces saw huge performance improvements linearly reduced allocations version sure problems nt exactly least example similar problem fixed worth look", "d": "11/2015"}, {"body": "danvk exclude react stuff via blackboxing chrome dev tools help lot", "d": "11/2015"}, {"body": "gon na try put words thoughts around wish luck function listed like cousin state mean called get new props function called get new state parallel react calls receive props way get info find parent state changed essentially case state parent nt actually able manipulate state method feels unnecessary besides unnecessary style programming actually lead kinds unpredictable behavior method essentially observing component state running arbitrary code response state change unless extremely careful situation end sorts problems including cascading updates race conditions see pretty clearly ember observable docs list several major caveats observables implementation obvious going happen anymore change state sorry bit vague programming paradigm learned avoid router specifically supposed get state changes new props route components hook get router state feels like opens possibility users harm good", "d": "11/2015"}, {"body": "thank fantastic response makes lot sense", "d": "11/2015"}, {"body": "thanks mjackson agree fantastic answer going close issue answered feel free continue discussion thread guys desire reopen thinking topic changes dramatically find anything actionable react end", "d": "11/2015"}, {"body": "nt think agree lifecyclewise parallel lot parallel something like except invoked update triggered operation certainly possible shoot oneself foot using get situations infinite loops nevertheless quite lot easy write without using something like hooks including checking centralized way updates actually happened going back updating dom well one place imagine general reading state callback operation might something like seems legitimate since nt necessarily know value set new element said nt see beneficial prescriptive signature update hook way data already available via seems easier use proxy", "d": "11/2015"}, {"body": "thanks posting stackoverflow much better place usage questions original question able reduce simplified test case demonstrates bug react core please let us know", "d": "11/2015"}, {"body": "documented several places render reactelement dom supplied container return reference component returns null stateless components well mentioned big red boxes note stateless functions nt backing instance ca nt attach ref stateless function component normally nt issue since stateless functions provide imperative api without imperative api nt much could instance anyway however user wants find dom node stateless function component must wrap component stateful component eg class component attach ref stateful wrapper component duplicate", "d": "11/2015"}, {"body": "lot code might helpful try simplify example asking provide simplified example demonstrates bug react core reinvestigate also nt already nt forget check looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "done create element rendered instance component elements lightweight objects react uses render basically looks like order instance work need render returned value instance docs linked nt need updated working refs another way access rendered components within another component", "d": "11/2015"}, {"body": "ahh gotcha working middleman component extracts away rendering actually gets instantiated thanks", "d": "11/2015"}, {"body": "first example gave expected one small performance updates know force update sounds like bug", "d": "11/2015"}, {"body": "cc sebmarkbage spicyj sounds like something came long ago nt recall resolution root element gets passed one previously rendered presumably made decision skip fine things pure confusing breaking using nondeterministic method calls render", "d": "11/2015"}, {"body": "mentioned changelog sorry call forceupdate component rerender method returns false nt think plan make changes hope hard update code", "d": "11/2015"}, {"body": "spicyj hard time find change cause", "d": "11/2015"}, {"body": "allows text node child putting becomes rendered text node thus found react must instead caution either current due react internals ps really familiar parts html tags even valid inside body cc spicyj update validatedomnesting", "d": "11/2015"}, {"body": "thanks help familiar well believe valid inside inline svgs", "d": "11/2015"}, {"body": "well works fine inside svg inside div check fiddle anyways nt think using construction confused cases works cases", "d": "11/2015"}, {"body": "initial render currently innerhtml tag body document actually results child node text regardless markup nt actually node react tries find node datareactid assigned ca nt find thus error syranide explained though leaving initial render part important explain first render worked without warning inside svg valid child works differently html seems valid child nodes even ignored", "d": "11/2015"}, {"body": "upon thinking may fact mismatch occurs trying access components maybe expecting react lifecycle reconcile quickly case seems events yet bound component either leave open discussion would nt mind clarification isis nt meant done time componentdidmountupdate fires perhaps ordering issue set stone", "d": "11/2015"}, {"body": "remember spicyj sebmarkbage lot thinkingdiscussing topic nt remember details recall decision pretty intentional reason going label question regarding reasoning", "d": "11/2015"}, {"body": "refs child components resolved parent componentdidmountdidupdate happens refs parent resolved example child mount ref child resolved child b mount ref child b resolved parent mount ref parent resolved order ensures component fully initialized receive ref use children initialization avoid accessing siblings ancestors componentdidmount often mounted yet", "d": "11/2015"}, {"body": "ah yes thanks spicyj", "d": "11/2015"}, {"body": "yep makes sense cheers", "d": "11/2015"}, {"body": "legal reasons official answer questions like could come lawyer lawyer question best posed company legal team know ask nt much team nonlawyers contribute discussion going close issue cc jamesgpearce may able give authoritative answer", "d": "11/2015"}, {"body": "cc allows modification redistribution documentation licensed give license read make sure comply also looking using design sure falls scope things happy check legal team clarify needed", "d": "11/2015"}, {"body": "zpao yeah get things rolling also people could easily cross compare really react ruby syntax planning keeping close current design different logo might change color scheme", "d": "11/2015"}, {"body": "attempt rewriting using controlled components sure good idea wanted save separate methods field approach fine make pr update tutorial code repository suggestions jimfb zpao", "d": "11/2015"}, {"body": "agree think might try avoid bind purposes tutorial explicit handlers", "d": "11/2015"}, {"body": "great make pr smile", "d": "11/2015"}, {"body": "awesome going require code change want make sure concept adequately explained well looking forward", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "great thanks", "d": "11/2015"}, {"body": "yes warning triggered case null never codepath gone ca nt throw errors new codepath problematic feel free add new warning", "d": "11/2015"}, {"body": "spicyj still code paths right events listeners instance", "d": "11/2015"}, {"body": "know cause problems feasible react detect please add warnings nt know exist", "d": "11/2015"}, {"body": "suspect cases suppose create new issue one pops", "d": "11/2015"}, {"body": "copy static html code work use react render component work focus edit bug", "d": "11/2015"}, {"body": "entirely sure question asking sounds like usage question nt see actionable bug moment suspect bug react core please provide simplified case demonstrates issue reinvestigate since looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "sorry english good", "d": "11/2015"}, {"body": "yes totally feasible reason split reactdom reactcore allow custom renderers like written easily best approach probably fork reactdom build top description sounds like would good place start making changes sounds like usage question rather bug react core going close since use github issues track bugs react core usage questions better addressed sites like stackoverflow feel free continue discussion thread", "d": "11/2015"}, {"body": "thanks jimfb started working fork good starting point looking looks like lot code related html tags css attributes browser differences etc wo nt needed fork probably would good remove parts think cause problems later pulling changes upstream", "d": "11/2015"}, {"body": "nickdima recommendation always remain close original possible forking project always push changes make sense upstream otherwise likely fall behind said ultimately need make whatever changes required rendering target", "d": "11/2015"}, {"body": "think would make sense part mean target still dom implementation end looking best solution sure renderer could useful", "d": "11/2015"}, {"body": "nt know enough differences opinion suspect bunch issues may solved actually might solve nearly everything nt enough context make educated statement tvml", "d": "11/2015"}, {"body": "nickdima seen reacttvml", "d": "11/2015"}, {"body": "yeah saw couple days ago implementing less thing unfortunately possible solution elegant lot code reactdom needs replicated could difficult keeping synced original code", "d": "11/2015"}, {"body": "spicyj syranide know intentionally dontca nt normalize everything something care normalizing", "d": "11/2015"}, {"body": "jimfb think makes sense normalize unless solve problems seems kind fruitless last checked solving entirely event system nt seem realistic leaves solving inside wrappercomponent trivial would leave dom bubbling relying bad idea imho people trivial safe implement wrappercomponent nt seem high priority seems like least", "d": "11/2015"}, {"body": "ok sounds like probably wo nt invest time solving moment edmellum wants file pull request would considered", "d": "11/2015"}, {"body": "fixed react", "d": "11/2015"}, {"body": "yeah dropped support phantomjs ago see phantomjs old real browser even shims", "d": "11/2015"}, {"body": "adding attribute would helpful reasons", "d": "11/2015"}, {"body": "link spec something attribute nt see referenced", "d": "11/2015"}, {"body": "oh whoops looks like nt hash attribute browser checks block see hash matches provided match", "d": "11/2015"}, {"body": "related", "d": "11/2015"}, {"body": "rpominov nt think related blainekasten think want render function produce empty div set html callback ref following untested roughly idea looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "jimfb nt think related right maybe thought component incapsulates custom dom manipulations want reparent instance component preserving custom dom created state", "d": "11/2015"}, {"body": "rpominov ah right problem comes routing changes rerenders tree wipes custom dom put third party api look like reparenting request duplicate thanks", "d": "11/2015"}, {"body": "think reparenting request work arounds pulling reparenting jimfb tried approach seems happen rerenders ref function argument null seems weird really working hack around dive react internal instance get dom node set innerhtml working either", "d": "11/2015"}, {"body": "trying reparent markup nt generated react think going need manually using javascript probably remove child node tree save somewhere flux store whatever reinsert node empty div new component renders positive would work think approach try next", "d": "11/2015"}, {"body": "instead using span child could create child component expects prop set child renders fails test prop nt set properly usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "jimfb thank quick response aware issue bug maybe shows documentation could improved posted copy regarding suggestion yes could create custom component component could test function see way test function expect", "d": "11/2015"}, {"body": "looks like already pulling get function expect make sure parentelement defined current scope prior defining child class using testing", "d": "11/2015"}, {"body": "jimfb thank help put right direction record works unit test javascript const testchild gt const testcontainer reactcreateclass getparent return thisrefsparent getchild return thisrefstestchild render return const renderintodocument findrendereddomcomponentwithclass testutils const testcontainer renderintodocument const parent testcontainergetparent const child testcontainergetchild expect childpropsdostuff toequal parentdostuff custom component otherwise returns dom node instead component instance", "d": "11/2015"}, {"body": "use callback refs tutorial", "d": "11/2015"}, {"body": "thinking going keep tutorial use string refs nt deprecated yet one less thing learn right away improve wording refs page though make current support status clearer string refs still valuable much easier use cases especially context forms", "d": "11/2015"}, {"body": "follow issue discussion resulted decision instead", "d": "11/2015"}, {"body": "duplicate", "d": "11/2015"}, {"body": "takes object shallow merge properties object completely replace current state state pass see docs looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "11/2015"}, {"body": "seems like need dynamic elements use classnames module handle easily", "d": "11/2015"}, {"body": "yangshun thought nt know monitor change state data read props call external api local state easily data dynamic", "d": "11/2015"}, {"body": "yes willing try anything thank", "d": "11/2015"}, {"body": "joveyzheng transitiongroup react component made sort thing nonbugs really kept stackoverflow though", "d": "11/2015"}, {"body": "yaycmyk discussion best stack overflow", "d": "11/2015"}, {"body": "thx note", "d": "11/2015"}, {"body": "probably best submitted discussed", "d": "11/2015"}, {"body": "sorry looks like dup", "d": "11/2015"}, {"body": "version date please update retry older version possibly related updating still believe bug react core please provide simple testcase demonstrates issue reinvestigate", "d": "11/2015"}, {"body": "likely related", "d": "11/2015"}, {"body": "looked events input typerange msdn using onmousemove works expected fixed issue", "d": "11/2015"}, {"body": "wanted keep usage similar node possible package npm package nontrivial number people global replacement builds webpack replaces actually good idea keep objects aligned also works towards eventual goal able swap renderers may quite yet somebody wanted build alternate renderer would drop use", "d": "11/2015"}, {"body": "nontrivial number people global replacement builds webpack replaces var whatever require react var whatever react actually good idea keep objects aligned sure providing two globals nt mean need two totally separate javascript files since loading common case right would nt beneficial provide one js file say reactfulljs something like", "d": "11/2015"}, {"body": "trigger eventlistener registered outside react component sure question asking sounds like usage question better addressed sites use github issues track bugs react core since bug going close feel free continue discussion", "d": "11/2015"}, {"body": "try", "d": "11/2015"}, {"body": "first thought ran still got problem returns", "d": "11/2015"}, {"body": "oops realized opened bad", "d": "11/2015"}, {"body": "surface seems like code nt running anywhere jsx desugars reactcreateelement becomes generally need scope nt get react scope issue fine everywhere else version babel might helpful gist minimal repro config multiplefile gists good npm install repro locally honestly seems like mostly likely somewhere combination babel browserify shims maybe combination something making worse", "d": "11/2015"}, {"body": "zpao thank solving dumb problem fact scope problem react included scope therefore jsx desugared reactcreateelement thrown error wasnt throwing react global scope ps working every browsers reasons closing issue problem exotic browserify setup react", "d": "11/2015"}, {"body": "joecritch also interested want keep least semblance similarity different facebook project sites concerned improving content organization docs color scheme also nt think much value making sidebar collapsible mobile styles would probably okay", "d": "11/2015"}, {"body": "also stuff unclear like put event listeners", "d": "11/2015"}, {"body": "also allow use string encapsulation render function clear", "d": "11/2015"}, {"body": "rest documentation written way provides context api reference reference tutorial good thing start teach lot core concepts need know use react also allow use string encapsulation render function clear nt know mean clarify", "d": "11/2015"}, {"body": "use example render like quotes encapsulate html", "d": "11/2015"}, {"body": "call nt want use jsx", "d": "11/2015"}, {"body": "thanks", "d": "11/2015"}, {"body": "seems like duplicate", "d": "11/2015"}, {"body": "gaearon less yes find crude search opening issue thanks finding close", "d": "11/2015"}, {"body": "probably overlooked writing context docs add note context page", "d": "11/2015"}, {"body": "realized accepts third argument defined think nt documented documented", "d": "11/2015"}, {"body": "yes probably", "d": "11/2015"}, {"body": "fixed via", "d": "11/2015"}, {"body": "gut feeling going wrong direction makes sense serialize css reparsed browser moving innerhtml createelement become even true css values become structured dom plans really seems better really opposed think least people relying fact nt reset inline styles nt specify react eg animations", "d": "11/2015"}, {"body": "change log copy master branch", "d": "11/2015"}, {"body": "synced date", "d": "11/2015"}, {"body": "bad", "d": "11/2015"}, {"body": "unsolvable problem without explicitly setting selection setting value asynchronously practically equivalent setting arbitrary value string selection information generic transformation selection makes sense behavior unavoidable option manage set selection something want also beware setting asynchronously implies multiple timeouts may scheduled simultaneously unintended results", "d": "11/2015"}, {"body": "general case seems fine specific nt react sort sometimes throw asynchrony setstate parent may async rendering new subtree well something special cases react handles correctly others problem general reactdominput handle restoring selection flushed value changes handled app", "d": "11/2015"}, {"body": "general case seems fine specific nt react sort sometimes throw asynchrony setstate parent may async rendering new subtree well something special cases react handles correctly others loosely speaking asynchronous within current transaction still executed react surrenders execution back dom still appears synchronous input loosely speaking problem general reactdominput handle restoring selection flushed value changes handled app react surrenders execution back browser longer meaningful string implicitly associated selection would say could still done really stretching definition sane mentioned starts becoming really muddledfragile multiple events occur simultaneously even would possible deferring user input degrades user experience opens worms personally would argue even current way selection implicitly tied new string hack simplifies vast majority usecases makes practical sense wanted write component exposes selection nt entirely gotten around yet makes sense", "d": "11/2015"}, {"body": "entirely sure asking following solve deep merging multiple batchedqueued called event achieve behavior outside events wrapping however nt generally needed design components single call setstate end deep merge state would best however obviously huge change may create large performance drawbacks might make sense special usecases definitely desirable default behavior managing like needs done", "d": "11/2015"}, {"body": "hmmm ran simple test nt seem batched queued issue lets say want transfer props component styles instance lets say prop could set x likely would two functions look like function parsex var newstyle merge thisstatestyle newstyleleft thispropx thissetstate style newstyle function parsey var newstyle merge thisstatestyle newstyletop thispropy thissetstate style newstyle case merging way suggested however one execution frame functions would run would end shallow merging end", "d": "11/2015"}, {"body": "lets say want transfer props component styles instance lets say prop could set x likely would two functions look like definitely arguable certainly depends context would generally recommend different approach way perform batching may also find benefits anyway somewhat irrelevant problem may still called multiple times various reasons case merging way suggested however one execution frame functions would run setstate would end shallow merging end need use callbackmethod showed receives current state object mutated last multiple pending safe", "d": "11/2015"}, {"body": "yeah def hard issue solve react people easily continue wrong without proper education maybe solvable react point thanks input", "d": "11/2015"}, {"body": "mikkoh nt misunderstanding callback solve problems still want avoid multiple calls batch performance reasons affect behavior", "d": "11/2015"}, {"body": "closing since nt think anything actionable react setstate function style give control need", "d": "11/2015"}, {"body": "little curious ran yeah looks like bug", "d": "11/2015"}, {"body": "noticed working reacttransmit universal components started spit warnings serverside rendering components call setstate clientside started server since upgrading react traced behavior found ismounted returns true server", "d": "11/2015"}, {"body": "note componentdidmount still called current workaround keep track mounted state manually", "d": "11/2015"}, {"body": "unlikely good first bug", "d": "11/2015"}, {"body": "start fixing nt understand something allow call return false cleanest way mark component unmounted simply unmount call options custom mount mark component mounted call simply unmount component render call best way imo another hack break previous tests", "d": "11/2015"}, {"body": "spicyj", "d": "11/2015"}, {"body": "laskos called server therefore component never really mounted server big difference two distinct lifecycle methods spicyj referring suggested fixes change behavior invoked lifecycle method calls would mean breaking existing components example calling andor components attempt run clientside code specifically put skippedontheserver lifecycle methods imho nt indepth knowledge react core worth fix small regression like overhauling component lifecycle affecting examples tests documentation et cetera", "d": "11/2015"}, {"body": "rickwong correct certainly nt want call server lifecycle component mount component yet mounted false server side", "d": "11/2015"}, {"body": "yes intended yes react nt deep copy props every component would prohibitively slow want behavior copy simply mutate first place", "d": "11/2015"}, {"body": "please use mention documentation", "d": "11/2015"}, {"body": "babel supports configuration jsx pragma", "d": "11/2015"}, {"body": "adrianrossouw cool want replace react entirely react bunch stuff built already like diffing abilities would nt want rewrite basically things like hey data changed let see objects need destroy create already modify tree based lifecycle methods think really powerful reimplementing something like far question right time wise interestwise someone wants infamous project open think react binding data tree structure good enough long nt rely animating values transforms since sloooow rely determining structure scene graph", "d": "11/2015"}, {"body": "trusktr sounds like looking explainer design pattern integration points interested well", "d": "11/2015"}, {"body": "guess", "d": "11/2015"}, {"body": "nt supported way yet look reactnative reactart apis still frequently changing nt support nt documented stabilized sure publicize broadly", "d": "11/2015"}, {"body": "would interested writing documentation website let reference previous existence since never part public api", "d": "11/2015"}, {"body": "sure would start", "d": "11/2015"}, {"body": "awesome documentation website live repo bulk docs pages addons docs want make new markdown file around readme root docs describing running server jekyll test changes locally", "d": "11/2015"}, {"body": "vim babelrc plugins syntaxjsx npm install babelpluginsyntaxjsx", "d": "11/2015"}, {"body": "little difficult follow everything going create simple jsfiddle demonstrates issue", "d": "11/2015"}, {"body": "nt actionable us asis going close post repro case happy take look seeing infinite loop first guess would inside code causing infinite rerenders nt heard reports similar least widespread problem", "d": "11/2015"}, {"body": "isolated amp fixed issue accidentally attempting render component every day instead days actually selected", "d": "11/2015"}, {"body": "could react create warning trying render array w components aid debugging", "d": "11/2015"}, {"body": "ashtonwar treat warnings errors little hard know draw line terms render limit easy imagine component syntax highlighting bunch source code token source file would component needs different colorstyle would mean rendering potentially tens thousands components obviously would perfectly legitimate use case suppose could print useful information little red flags eg large arrays slow render functinos etc cases renders took greater x seconds logic could start get complicated would still setting pretty arbitrary thresholds seems like would better could provide good devtools provide insight going react umbrella issue new devtools api open path better tooling", "d": "11/2015"}, {"body": "sure mean post code sample", "d": "11/2015"}, {"body": "ryanflorence possible pass objects like javascript var parent reactcreateclass render function return foo bar var child reactcreateclass componentdidmount function consolelog thispropschildrenfoo bar render return", "d": "11/2015"}, {"body": "closing unless hear back", "d": "11/2015"}, {"body": "shape", "d": "11/2015"}, {"body": "thanks answer jimbolla", "d": "11/2015"}, {"body": "aha thank", "d": "11/2015"}, {"body": "issue exemple wokrs well chrome nothing append since ok", "d": "11/2015"}, {"body": "likely duplicate fixed shipped react", "d": "11/2015"}, {"body": "ok sorry tried search nt find one", "d": "11/2015"}, {"body": "thumbsup worries", "d": "11/2015"}, {"body": "nt support currently spec still flux nt much demand", "d": "11/2015"}, {"body": "thanks answer spicyj", "d": "11/2015"}, {"body": "provide context using shadow dom enable css encapsulation aim build interface enabling user easily prototype react components need use stylecss encapsulated would spill given interface", "d": "11/2015"}, {"body": "reproduce may want file issue reactnative directly involved process", "d": "11/2015"}, {"body": "think table remove support inheritless classes enables null return values plain functions", "d": "11/2015"}, {"body": "awesome return thanks", "d": "11/2015"}, {"body": "hnordt react currently uses return", "d": "11/2015"}, {"body": "yeah currently limitation react constructs every class return nonobject get instance class back instead added requirement every class extend reactcomponent solve issue deprecates old behavior nt change outright solve sure another tracking issue though use one", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "sudo npm install g babel babelpresetreact nik fedora tut babel presets react watch src outdir lib cli moved package npm install g babelcli nik fedora tut babelcli presets react watch src outdir lib bash babelcli command found nik fedora tut sudo npm install g babelcli npm warn optional dep failed continuing fsevents npm err refusing delete usrbinbabel usrlibnodemodulesbabelcli file exists usrbinbabel move away try npm err system linux npm err command usrbinnode binnpm install g babelcli npm err cwd npm err node v npm err npm v npm err path usrbinbabel npm err code eexist npm err error rolling back error refusing delete usrbinbabel usrlibnodemodulesbabelcli npm err error rolling back clobberfail npm err error rolling back next npm err error rolling back npm err error rolling back objectoncomplete evalmachine npm err error rolling back error refusing delete usrbinbabel usrlibnodemodulesbabelcli code eexist path usrbinbabel npm err ok code nik fedora tut", "d": "11/2015"}, {"body": "see moved contain executable file package depends", "d": "11/2015"}, {"body": "thanks already done error thought something wrong sudo npm uninstall g babel sudo npm install g babelcli babelpresetreact", "d": "11/2015"}, {"body": "also experiencing precise issue", "d": "11/2015"}, {"body": "nikitcpp maybe wrong need review code detail msmicker could u pls show", "d": "11/2015"}, {"body": "babel came docs need updated reflect finish getting updated today minimal bits need assuming code needs transformed anybody specific issues using babel right place file issues likely issue need bring project", "d": "11/2015"}, {"body": "thanks helped man", "d": "11/2015"}, {"body": "zpao thanks help fixed issues however shoehorn browserify equation require statements top code need pass browserify order resolve dependencies appears nt working ideas", "d": "11/2015"}, {"body": "wpcarro idea browserify supposed solve", "d": "11/2015"}, {"body": "shot dark since nt know errors getting try", "d": "11/2015"}, {"body": "zpao trying follow facebook documentation work nt know insights thank response nonetheless ggalansmithee seems throws error encounters js syntax errors flow think begin babel filter browserify future users wrote simple shell script quickly automate transpiling browserifying", "d": "11/2015"}, {"body": "installed npm install savedev babelify following command began work browserify mainjs bundlejs babelify presets react", "d": "11/2015"}, {"body": "finally commands place sudo npm install g babelcli sudo npm install g browserify npm install react reactdom babelify babelpresetreact browserify srcmainjs bundlejs babelify presets react", "d": "11/2015"}, {"body": "mentioned browser bundle uses umd work multiple environments would recommend either bundling version react build npm detecting environment page wo nt changing build works", "d": "11/2015"}, {"body": "keep mind community currently uses fairly sparingly largely aggressively made comments feature unsupportedunstable facebook use react pretty heavily terms number components number programmers number users also use features like context long rolled public release publicly documented sometimes see usabilityscalability issues outside world say confidence context difficult reason props least part reason decided make contexttypes required usability nt advantage contexttypes allowing core make optimizations based knowledge component use also key factor decision anyway trying explain reasoning making context types required thinking matter changes substantially future large number people agree confusinginconsistent always reconsider", "d": "11/2015"}, {"body": "jimfb thanks reply understand reasoning appreciate elaborating internal use personally think small scale apps makes sense allow contexttypes optional leave open see public opinion favour thanks", "d": "11/2015"}, {"body": "see also current api nt fixed stone", "d": "11/2015"}, {"body": "gotten around extending implementing method perhaps thing could done core implementation", "d": "11/2015"}, {"body": "yaycmyk use componentwillmount else different", "d": "11/2015"}, {"body": "sebmarkbage ergonomics point view way seems better retains continuity stuff done side things", "d": "11/2015"}, {"body": "confused calling possible side things", "d": "11/2015"}, {"body": "sebmarkbage implemented function call within constructor extended basically emulating happens", "d": "11/2015"}, {"body": "zpao jimfb seems general issue chrome open url send file check example fails open google page fine related problem stackoverflow", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "makes app difficult test windows confirm switching production mode resolve us", "d": "11/2015"}, {"body": "yea sorry issues shipping tomorrow fixed", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "related anchor tags elements well seen applying onclick div elements well anchors", "d": "11/2015"}, {"body": "elements", "d": "11/2015"}, {"body": "believe closed", "d": "11/2015"}, {"body": "thanks tip write fixes commit message issue gets closed automatically pr merged", "d": "11/2015"}, {"body": "polyfill nashorn module loader something like jvmnpm", "d": "11/2015"}, {"body": "browser use browserify create bundle nashorn understand", "d": "11/2015"}, {"body": "polyfill nashorn module loader easier build bundle compile time browser use browserify create bundle nashorn understand think approach taking reactjsnet currently still using ignoring deprecation error super janky", "d": "11/2015"}, {"body": "anything actionable left sounds like design debug code detect bad environments could updated check existence required globals", "d": "11/2015"}, {"body": "jarail sure mean nothing actionable", "d": "11/2015"}, {"body": "mean guard make misconfigure easier debug thanks ben", "d": "11/2015"}, {"body": "react nt use require internally nt think would make much sense hopeful people write call immediately see nt work realize need module loader", "d": "11/2015"}, {"body": "would proposed solution handling nashorn java environment", "d": "11/2015"}, {"body": "use module bundler like browserify make single bundle load much like people using react npm sending result browser sounds like something like jvmnpm might work", "d": "11/2015"}, {"body": "polyfill nashorn module loader theory jvmnpm project aims however tried failed getting work easier build bundle compile time maybe depends loading react reactdom cdn bundle js contain makes bundle changes every couple minutes development every week production lot smaller faster update including react reactdom bundle nashorn get work server well used work via approach going stop working option disappears hard time following reasoning guys take problem simple adding right place reactdom code turn user library polyfill commonjs modules target platform get reference mean grab bundled version reactdom reactdomserver already exposed silly actually nt bundle contains code never used hoping guys able come elegant solution us java devs", "d": "11/2015"}, {"body": "download nt knowledge address everything said directly two things jump nt using cdn serverside code worst downloaded cdn deploy applicationservice relying caching would poor way justify really want put react webpack along everything else serverside bundle browser absolutely fine use cdn little surprised caused issues dev builds nashorn nt hot reloading get webpackdevserver watchbuild still pretty quick even write extra mb js watch build keeps memory takes fraction second write mb disk also even nt include react bundle still want available bundler perform much static analysis really nt javanashorn dev vs browsernode dev issue lot longterm thinking goes modules broken lot code gets included backwards compatibility removed future nt think reactdom contain everything required reactdomserver future huge fan nashorn project long way go also invested seeing succeed also great see new js engine built unique perspective lot potential nt exist node said new lightly supported nashorn community needs accept certain extent lot existing patterns still need followed want support node modules", "d": "11/2015"}, {"body": "specific nashorn exact advice applicable javascript engine lot uses nt nodejs php c ruby etc requires type thinking since javascript engine nt support commonjs requires outofthebox perhaps one day get point modules supported natively js engines could load", "d": "11/2015"}, {"body": "people using react targeting browser also nt support natively highly recommend using commonjs system like browserifywebpacketc manage assets regardless platform targeting mean grab bundled version reactdom reactdomserver already exposed silly actually nt bundle contains code never used true current release true future versions", "d": "11/2015"}, {"body": "nt using cdn serverside code using cdn browser bundle contain react reactdom build extra bundle specifically server extra work nashorn community needs accept certain extent lot existing patterns still need followed want support node modules since react node module must used get api new till previous release everthing reachable global still interested hearing simply adding right place reactdom code would solve require nashorn users polyfill commonjs modules believe guys want build best possible system nashorn nt important target react still surely good reason make us jump hoops", "d": "11/2015"}, {"body": "mmmm love see seems guys going address thank", "d": "11/2015"}, {"body": "probably refer issue gaearon also want events know something bad happen display big fat red message developers fix bug usually nt look much console ship softwares consoleerror messages", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "enough nt need", "d": "11/2015"}, {"body": "fair enough though somewhat beside point original question related handling keyediterables ideas", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "biggest gripe w react community nodecentric cjsfirst instead build frontend apps everybody using frontend apps wink react first came module system nt clientside js bundlers like webpack browserify supported commonjs react examples currently use nt anything node per se", "d": "11/2015"}, {"body": "anuragramdasan dude gave update saying bad needed pull correct dependency good", "d": "11/2015"}, {"body": "gaearon fault sounded like scumbag troll totally venting experiences w react honest last month experience totally different stated good", "d": "11/2015"}, {"body": "im sorry could clearer hoping get response could clearer guess", "d": "11/2015"}, {"body": "anuragramdasan ah yes point lets keep issue open almost forgot took nearly full month get response anyone", "d": "11/2015"}, {"body": "month response closing", "d": "11/2015"}, {"body": "agree merri still cases client side rendering static html required instance case trying pass along html created react component party lib leafletjs opensource js map solution popups maps take html display whenever popup get clicked bind popup marker call sending static html popup options used accomplish using guessing work feels wrong use tool designated server side client side know", "d": "11/2015"}, {"body": "unfortunately addons use internals react nt exposed browser build nt really possible us recommend consuming addons npm control exactly gets bundled sounds doable though", "d": "11/2015"}, {"body": "oooh webjars pretty fancy", "d": "11/2015"}, {"body": "also seeing glad someone found reproducable case", "d": "11/2015"}, {"body": "think fixed", "d": "11/2015"}, {"body": "spicyj rough estimate would see published release fix sadly blocker us upgrading breaks lot places due lot animations", "d": "11/2015"}, {"body": "sure planning regression nt realize", "d": "11/2015"}, {"body": "afraid definitely popped upgrading nov ben alpert notifications githubcom wrote sure planning regression nt realize reply email directly view github", "d": "11/2015"}, {"body": "also seeing particularly unit testing many components page animate time", "d": "11/2015"}, {"body": "ditto", "d": "11/2015"}, {"body": "upgraded appears fixed", "d": "11/2015"}, {"body": "fixed animation react fork react base fiddle jsx", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "kind resolution using npm jest trying mock reactbootstrap test fails either typeerror syntaxerror added modules suggested comments unmockedmodulepathpatterns packagejson also followed dependencies reactbootstrap unmocked test upgrade node support jest installed npm", "d": "11/2015"}, {"body": "justinwyllie personally suggest either unmocking everything downgrading unfortunately nt time play whackamole", "d": "11/2015"}, {"body": "fixed jest towards end year clear solution mind need make sure work fine", "d": "11/2015"}, {"body": "recommend adding modules unmock patterns", "d": "11/2015"}, {"body": "spicyj thought fix issue validations line thought changing roughly tested manually browser works expected message getting displayed even text adds kindly let know approach taken correct go give pr", "d": "11/2015"}, {"body": "spicyj ping", "d": "11/2015"}, {"body": "change signature validatedomnesting also check whitespace nt right refer whitespace text whitespace whitespace character", "d": "11/2015"}, {"body": "also issue trying use react render tag nt rendered react unfortunately specific situation makes problematic react render element mentioned workaround nt helping", "d": "11/2015"}, {"body": "moving towards use would sidestep issue meantime nt think much sorry wanted get fancy could something hacky updates svg otherwise renders something theory something like caveat nt run support js function renderreactintosvg element node var mynode documentcreateelement div reactdomrender mynode svgreparenter reactcreateclass reparent function assume single child node would map expectations subbing code reactrender thispropsintoreplacechild thispropsintofirstchild thisrefsrootfirstchildclonenode true componentdidupdate function thisreparent componentdidmount function thisreparent componentwillunmount function cleanup thispropsintoremovechild thispropsintofirstchild render function todo maybe use callback refs return thispropschildren", "d": "11/2015"}, {"body": "zpao could related take care creating svgelements inside right namespace mostly least", "d": "11/2015"}, {"body": "yea would solve effectively effectively wrote think moving away innerhtml hopefully next release", "d": "11/2015"}, {"body": "merged docs using web components within react docs combined posts issue roughly say topic moment unless questions think close issue", "d": "11/2015"}, {"body": "background shorthand backgroundcolor backgroundimage backgroundrepeat backgroundattachment backgroundposition background shorthand backgroundsize", "d": "11/2015"}, {"body": "zpao spicyj syranide could solve correctness issuesconcerns use instead setting properties individually understanding always claimed diffing css faster letting browser ben perf test chrome seems indicate nt actually slower fact maybe faster diffing think would solve concerns one fix thoughts", "d": "11/2015"}, {"body": "zpao spicyj syranide could solve correctness issuesconcerns use csstext instead setting properties individually yes performancewise near identical setting property individual like except cheaply skip unchanged properties definitely want reason could proven wrong last remember messing around", "d": "11/2015"}, {"body": "right performance nearly identical correctness easier since punt browser seems like pure win could still cheaply skip properties unchanged covers common case based reading seems performance difference vs properties tossup sometimes one wins times wins depends specifics microbenchmark overall tight race however bunch measurable disadvantages manually diffingsetting css properties things like correctness issues vendor prefixes unnecessary codecruft core etc guess intuition performance nearly identical factors taken account making seem like pretty clear win anyway maybe debate another threadissue sounds like answer initial question yes would fix correctness issueconcern", "d": "11/2015"}, {"body": "right performance nearly identical correctness easier since punt browser seems like pure win could still cheaply skip properties unchanged covers common case skip properties properties must present string problem", "d": "11/2015"}, {"body": "csstext skip properties properties must present string problem yeah true might loose pathological case wins cases argument wash overall clear one technique faster nt think performance argument holds water maybe wrong nt numbers already updating css property element ie repainting element anyway suspect additional cost parsing couple additional properties really nt big deal especially cost offset perf wins cases fact wash argue better simplicity perspective nt trying failing simulate behaviors browsers already implementedoptimized", "d": "11/2015"}, {"body": "please move discussion new issue helpful buried comments another issue already closed", "d": "11/2015"}, {"body": "yeah would love could add refs stateless components worked testing feasible stateless components javascript beautiful tests really ugly", "d": "11/2015"}, {"body": "work reacttesttree might interest stateless components hit us hard since original premise testtree built walkable tree refs stateless components obviously mess discussion impression got jimfb sebmarkbage saying refs really serve specific purpose right many things abuse reality used purely react api yet provide official alternative look react testutils nowhere even talk mention using refs testing seems like reality refs became unintentional convenience testing given abandoned using refs reacttesttree implementing new system using custom props looks bit like jsx var mycomponent reactcreateclass render function return foobar var reactcreateclass render function return var tree testtree treeget foo click treeget bar length treeget bar innertext foobar treegetin baz boz click believe creates much clearer distinction regular refs testing refs also hoping write babel transform strip testing props production working version branch anyone wants try", "d": "11/2015"}, {"body": "awesome really good idea talk coworkers", "d": "11/2015"}, {"body": "oliverwoodings would love react officially supported something similar team created way assurance longevity support tool like", "d": "11/2015"}, {"body": "chapinka yeah understand concern would love something like end react ca nt see happening quickly assure maintaining testtree long possible many internal projects use also nt affect production code reason testtree stop updated would need adjust tests", "d": "11/2015"}, {"body": "ngerritsen realy helpful", "d": "11/2015"}, {"body": "react warn component tries render tag legit reason right saw case component rendering redundant tags worked still rendered click handlers inside nt firing", "d": "11/2015"}, {"body": "graue sometimes ssr fpr people want render body tag generally discourage semicommon use case supported iirc", "d": "11/2015"}, {"body": "maybe warn rendered real dom anyway realized issue test utils issue filed instead", "d": "11/2015"}, {"body": "one place comes using containers like relay relay containers try attach wrapped component means ca nt use stateless components annoying time ref irrelevant nt allow anything seems like nice sometimes able use stateless component right ca nt", "d": "11/2015"}, {"body": "perhaps duplicate", "d": "11/2015"}, {"body": "p thu nov joe lencioni notifications githubcom wrote perhaps duplicate reply email directly view github", "d": "11/2015"}, {"body": "guess still using old devtool beta", "d": "11/2015"}, {"body": "fixed react", "d": "11/2015"}, {"body": "since merged released", "d": "11/2015"}, {"body": "came wondering stateless components take look", "d": "11/2015"}, {"body": "caused trouble tests see people mentioned ticket problem using nested calls selector functions find components interested looks like longer possible nt really see alternative test utils functionally equivalent", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "fontstyle would nice saw patch hope makes master", "d": "11/2015"}, {"body": "happy take pull request passes defaultvalue dom looks like linked directly attribute probably best way change code treated attribute using instead property config equivalent setting reactdominput manually set instead going dompropertyoperations open suggestions", "d": "11/2015"}, {"body": "dylanpiercey could agree", "d": "11/2015"}, {"body": "facing issue news server generate client", "d": "11/2015"}, {"body": "spyseth issue unrelated make sure charset nt resolve please work elsewhere file issue pinpoint bug react", "d": "11/2015"}, {"body": "page already interpreted really see difference issue mine", "d": "11/2015"}, {"body": "zpao could caused server side server locales generated posix ones", "d": "11/2015"}, {"body": "spyseth read rest issue said entity piece probably red herring original reporter never responded rest discussion ordering attributes discussion issue actually encoding please file new issue complete example reproduce otherwise impossible help", "d": "11/2015"}, {"body": "spicyj mridgway outcome need make change", "d": "11/2015"}, {"body": "issue turned issue package switching using returns keys wrong order object key become large see version moved away using chrome also issue using polyfill server chrome native client hit checksum issue polyfills checking enumeration order overriding native version fails see objectassign corejs used babel polyfill", "d": "11/2015"}, {"body": "good read", "d": "11/2015"}, {"body": "skidding think dirty deal component local state thats approach took recent project sure like much jimfb nice article met richard last week actually elm meetup highly suggest reading elm architecture tutorial discusses interesting pattern similar redux generically played around implemented elm pattern coffeescript definitely led insights", "d": "11/2015"}, {"body": "certain whether done way nt impact performance thought mention worth really nice able debug production react application angular setting something refreshing browser angular keys add necessary debug information way something similar without impacting performance nondebug mode would cool", "d": "11/2015"}, {"body": "interested solved problem", "d": "11/2015"}, {"body": "alright since multiple people asked webpack config testing add additional code way requiring get bundle errors however believe addons distributed separately probably needed anymore", "d": "11/2015"}, {"body": "issue", "d": "11/2015"}, {"body": "ran", "d": "11/2015"}, {"body": "update see released kind tests still failing", "d": "11/2015"}, {"body": "mihaialexe think add test pull request merged get around yet", "d": "11/2015"}, {"body": "also experimenting solution results found repo reactkeepstate", "d": "11/2015"}, {"body": "think two solution different perspectives still havent come conclusion like use cursors amannn solution similar clojurescript interesting powerful good encapsulation use elm architecture involves little extra work amazing powers abstraction redux tries align pattern", "d": "11/2015"}, {"body": "spicyj would handle situation child component find dom node stream instance simply clone props obviously immutable", "d": "11/2015"}, {"body": "months none us tell seems like something best suited stack overflow hopefully got worked sorry", "d": "11/2015"}, {"body": "going close nt seen come recently definitely plan clearer job explaining usage like revamp docs", "d": "11/2015"}, {"body": "blairanderson fwiw recently found sneaky regressions migrating app lot headache realized someone mutating child props like hard pinpoint since error nt really point particular direction however easily fixed found replacing hopefully someone find helpful moving forward", "d": "11/2015"}, {"body": "jordancardwell gotten warning dev mode react try warn previous version whenever making breaking changes fix warnings migration next version go smoothly", "d": "11/2015"}, {"body": "jimfb yeah actually something react really good made migrating new versions pretty pleasant part definitely missed deep dark corner app clearing warnings update said cases happens specificdescriptive error could really helpful maybe optionally logging dump describing unexpected variation dev mode anything prevent dev iterating rounds commenting components chunks render methods pinpoint bad thing happened flavor bad thing case directly mutating child props familiar react internals probably better idea feasible", "d": "11/2015"}, {"body": "jordancardwell exactly example text error message warning nt set react component instead specify correct value initially creating element use reactcloneelement make new element updated props", "d": "11/2015"}, {"body": "jimfb right familiar warning messages deprecations breaking changes future versions react stated previous comment definitely missed deep dark corner app clearing warnings update missed particular warning one area app updating corrected rest warnings thrown referring error message something app causes invariant violation current version whatever may time contextual information point right direction would pretty valuable anyone finding situation react always extremely helpful error messages documentation around common errors comment feasibility providing information around invariant violations help situation unwittingly done something stupid cause failed update something migration", "d": "11/2015"}, {"body": "supposed point clearly feasible would make sense leave descriptive messages people shoot footguns dev mode though still breaking change dev get helpful info", "d": "11/2015"}, {"body": "jordancardwell nt freeze props dev browsers get error stack trace like", "d": "11/2015"}, {"body": "mixins antipattern realworld composition classes", "d": "11/2015"}, {"body": "mixins antipattern realworld composition classes agreed even decorators still decide base class decorator still get tied constructor keyword stamps nt problems see reactstamp react components", "d": "11/2015"}, {"body": "pure functional solve composition problem class mixins keep things immutable stateless react hopes people implement stateless render meanwhile encourages using stateful oo class frustrates", "d": "11/2015"}, {"body": "jimfb jamesmanning wanted chime developer native english speaker mental model scry confusing stackoverflow post explaining confusion upvotes suggest alone admit even thorough explanation slightly clearer", "d": "11/2015"}, {"body": "able make extension work requiring react gulpfile sure would work webpack file var react require react", "d": "11/2015"}, {"body": "noticed thread kinda quiet please redirect discussion moved elsewhere quite like idea introducing subtle side effects nt seem appropriate breaks pretty important contract component sometimes usually dictate output move tracking logic source could simply call response tracked changes keep function nice simple code sample var users new reactivecollection class component extends reactcomponent new lifecycle method gets wrapped trackerautorun returned object simply gets passed setstate trackedstate return users usersfind fetch behind scenes base class something along lines class reactcomponent componentdidmount thiscomputation trackerautorun gt thissetstate thistrackedstate", "d": "11/2015"}, {"body": "oztune worth noting side effects internal react core semantically equivalent returning tuple containing jsx elements objectsread reason tracking within nt antipattern iff react responsible tracking reads moving logic separate function work discussed semantically equivalent function leads duplication logic specifying first method going read actually read second method totally unnecessary error prone two methods ever get sync lead pretty subtle bugs simple components relatively easy keep sync long nt forget component starts getting complex becomes exponentially difficult keep sync whole point combining avoid unnecessary duplication logic make sure whatyoureadiswhatyouuse", "d": "11/2015"}, {"body": "jimfb thanks thorough answer questions specifying first method going read actually read second method totally unnecessary error prone specifying reading read within throwing results method nt read original data source anymore accessing two methods ever get sync lead pretty subtle bugs different way things data coming tracker conceptually different piece state seem like everything flowing established channels could lead less confusion line", "d": "11/2015"}, {"body": "small example illustrate point say model library completely synchronous would model react component use b nt b react way understand method touch least amount globals possible fine example first post pretty much global nt method supposed rely data within scope component much possible nt separation created first place", "d": "11/2015"}, {"body": "oztune neither options bad applications written react probably going want sort data management architecture like flux relay responsible managing application data probably would nt want store application data internal state component root application proposal data remains data layer fluxreduxrelaywhatever components subscribe data reading data data changes appropriate components rerender like suggested copystore data prior rendering issues duplication state source truth confusing since two copies data details similar antipattern see fetching first function fails copyreturn one data elements needed render render function crash least return wrong result totally avoidable data need datastore nt copy fetching rather reasoning data needed easy fetch everything instead trying figure minimal set need wasteful performance perspective results deathbyathousandpapercuts component slightly wasteful result whole application slow react apps often fast intentionally make difficult fall antipatterns three issues evaporate definition use based actually used render additionally copy data manually means managing subscriptions manually need know data changes error prone super easy forget unsubscribe one data sources component unmounts oh manual subscriptions super sideeffectfull", "d": "11/2015"}, {"body": "jimfb thanks saying better read data fluxreduxwhatever library directly right within instead putting state reading makes sense remember reading opposite somewhere looked one official examples flux site nt copying flux store state using right within render still recommended approach another thing noticed bunch places react source warns users messages like nt approach break contract misunderstand something thanks bearing really appreciate thorough answers starting implement side loading apps want know react team recommends", "d": "11/2015"}, {"body": "yeah thinking flux example creates shadow copy state shadow copies bad tend think reflects negatively example however example redeeming qualities namely commonly used pattern especially context data transformationmemoization also render function clearly pure record example shows component manually subscribingunsubscribing datastore exactly opposite would want perfect world whole reason issues discussing sideways data loading say example good bad simplistic still learning best practices continue improve libraries documentation time yes components pure function props state however implement flux state may datastore rather components primary point sentence communicate fact components never imperatively mutate dataui see allow paste remainder sentence first search result linked function pure meaning modify component state returns result time invoked read write dom otherwise interact browser eg using", "d": "11/2015"}, {"body": "jimfb thanks clearing thanks work react real pleasure use looking forward seeing best practices community brings forward time", "d": "11/2015"}, {"body": "ezequiel feel following deprecate create new method called uses functionality create new methods actually renders dom child cleans given child component running problems trying test dimensions component ie", "d": "11/2015"}, {"body": "could even make take method automatically cleanup us eg", "d": "11/2015"}, {"body": "looks like got fixed point sure passing test since merged yay", "d": "11/2015"}, {"body": "posting mostly nt loose link people inevitably ask good article state hosting", "d": "11/2015"}, {"body": "spicyj solution worked question similar way example say place template want put react class like set dom elements like case class run inside dom element function put question check type variable depending render differently thanks", "d": "11/2015"}, {"body": "render div also pass return inside", "d": "11/2015"}, {"body": "attempted solve pr based spicyj recommendations", "d": "11/2015"}, {"body": "mridgway bumped problem react end try using react peer dependency subcomponents nt work", "d": "11/2015"}, {"body": "jimfb seems like pretty big statement pretty significant part value proposition developer happiness react poses team least would great could expand information decision somewhere suggesting using flow seems like pretty big leap incredibly low friction quickly provide completely new tool workflow ha seems like odd choice thanks lt", "d": "11/2015"}, {"body": "plasticine framework define notion proptypes scalable approach switched classes similar reason framework define notion classes mixins etc scalable community generalized tools become available frameworkspecific hacks fade away pretty consistent messaging point", "d": "11/2015"}, {"body": "jimfb fair enough thanks clarification", "d": "11/2015"}, {"body": "currently using similar approach jimbolla fulfillment handler wrapped proxy function passes arguments onto original callback unless canceled case proxy becomes noop proxy canceled unmount", "d": "11/2015"}, {"body": "sebmarkbage jimfb following thread alt thread months curious core team reached consensus problem least general direction", "d": "11/2015"}, {"body": "oztune updates focused priorities post one threads update topic", "d": "11/2015"}, {"body": "final solution issue problem tried window mystringval however fails somehow firefox following code posted spicyj seems address problem child unknown code written wondering react support variable string name component name var allmycomponents var child reactcreateclass allmycomponents child child var component allmycomponents name", "d": "11/2015"}, {"body": "perhaps duplicate", "d": "11/2015"}, {"body": "please issue pass props around every method component class ugly nah good better solutions", "d": "11/2015"}, {"body": "limitation current ref function often use pattern using ref sort external controller helps implementing behaviors component example takes change callback parameter exposes refs functions control dropdown open closed javascript class mycomponent extends reactcomponent state open false ddc dropdowncontroller open gt thisonchange open onchange open thissetstate open render return thisstateopen amp amp controller manually creates event handlers dropdown closed click event happen outside dropdown working fine sometimes would like use refs multiple elements also trigger dropdown opening triggering dropdown closing unfortunately wo nt able clean events handler correctly since nt pass instance component unmounted ref detached one solution could ref function invoqued first parameter also instance unmounted component second parameter monkey patched working fine would prefer able avoid monkey patch", "d": "11/2015"}, {"body": "hm currently working view recycling allow us efficient use resources long lists tabs share similar behaviors one interesting qualities problem instances longer necessarily tied state component sure means particular problem yet suspect relying instance identity might problematic maybe though", "d": "11/2015"}, {"body": "always proxy dom workers emits messages dom main thread trivial render elements handling events require work proofofconcept rendering found", "d": "11/2015"}, {"body": "fyi end creating npmimapicheck could use work hundreds developers benefiting via npmimangularformly", "d": "11/2015"}, {"body": "looking forward", "d": "11/2015"}, {"body": "like op impression contained instances components name seems misleading intended behavior", "d": "11/2015"}, {"body": "docs unclear point improve", "d": "11/2015"}, {"body": "current thinking rolled devtools via new devtools api instead core closing", "d": "11/2015"}, {"body": "got situation mridgway asked question stack overflow", "d": "11/2015"}, {"body": "suggestion use instead nt mess", "d": "11/2015"}, {"body": "upgraded react noticed add arbitrary attributes custom elements nt work guessing closed", "d": "11/2015"}, {"body": "hacked solution replaced checks environment variable worked pretty well pullrequest similar approach would right direction accepted thinking replace checks something like could set production build error reporting enabled still allow minifiers optimize unused code best way approach", "d": "11/2015"}, {"body": "tried schovi add support animating multiple classes without breaking current api sure approach case provided pass one css class without providing straightforward behaviour generating class options leave behaviour generates class like nt want append anything active class leave user instead backwardscompatible detect one class provided animation type append one class leave empty solution choose sure solution would like open discussion preview third version", "d": "11/2015"}, {"body": "allowing multiple class names like animate bounce would perfect", "d": "11/2015"}, {"body": "seeing logged sometimes well helpful stack trace little context unable get property firstchild undefined null reference reactlibreactmountjs jfindcomponentroot line firstchildren deepestancestorfirstchild reactlibreactmountjs jfindreactnodebyid line return reactmountfindcomponentroot reactroot id reactlibreactmountjs event line return nodecache id reactlibeventpluginutilsjs executedispatch line eventcurrenttarget injectionmountgetnode domid reactlibeventpluginutilsjs eventpluginutils line executedispatch event simulated dispatchlisteners dispatchids reactlibeventpluginhubjs u line eventpluginutilsexecutedispatchesinorder event simulated reactlibeventpluginhubjs arr line return executedispatchesandrelease e false reactlibforeachaccumulatedjs foreachaccumulated line arrforeach cb scope reactlibeventpluginhubjs eventpluginhub line foreachaccumulated processingeventqueue executedispatchesandreleasetoplevel reactlibreacteventemittermixinjs eventpluginhub line eventpluginhubprocesseventqueue false", "d": "11/2015"}, {"body": "seemingly similar stack trace also noticed undefined reactlibreactmountjs reactmount line firstchildren deepestancestorfirstchild reactlibreactmountjs reactmount line return reactmountfindcomponentroot reactroot id reactlibreactmountjs injection line nodecache id reactmountfindreactnodebyid id reactlibeventpluginutilsjs executedispatch line eventcurrenttarget injectionmountgetnode domid reactlibeventpluginutilsjs eventpluginutils line executedispatch event simulated dispatchlisteners dispatchids reactlibeventpluginhubjs executedispatchesandrelease line eventpluginutilsexecutedispatchesinorder event simulated reactlibeventpluginhubjs arr line return executedispatchesandrelease e false reactlibforeachaccumulatedjs foreachaccumulated line arrforeach cb scope reactlibeventpluginhubjs eventpluginhub line foreachaccumulated processingeventqueue executedispatchesandreleasetoplevel reactlibreacteventemittermixinjs runeventqueueinbatch line eventpluginhubprocesseventqueue false reactlibreacteventemittermixinjs reacteventlistener line runeventqueueinbatch events reactlibreacteventlistenerjs handletoplevelwithoutpath line reacteventlistenerhandletoplevel bookkeepingtopleveltype topleveltarget topleveltargetid bookkeepingnativeevent geteventtarget b snip reactlibreacteventlistenerjs method line handletoplevelwithoutpath bookkeeping reactlibtransactionjs transaction line ret methodcall scope b c e f reactlibreactdefaultbatchingstrategyjs batchingstrategy line transactionperform callback null b c e reactlibreactupdatesjs reactupdates line batchingstrategybatchedupdates callback b c e reactlibreacteventlistenerjs reactupdates line reactupdatesbatchedupdates handletoplevelimpl bookkeeping", "d": "11/2015"}, {"body": "jiyinyiyong browniefed meant two copies react discusseddescribed sure actually problem worth checking", "d": "11/2015"}, {"body": "lencioni since jumping thread months later stack trace assuming stack trace correspond code right looks like bug clear repro based gsantome response looks like running going close issue reopen incorrect open new issue get consistent repro indicates bug react", "d": "11/2015"}, {"body": "assuming stack trace correspond code right correct arrived via searching posted stack traces case helpful", "d": "11/2015"}, {"body": "investigate shallow rendering little surprised find jest dependencies react test utils please either document dependency much preferred please nt depend jest believe still cases shallow rendering nt appropriate great guidance best mock components case react testing page would clear place explain", "d": "11/2015"}, {"body": "hi first test case first post works within certain app context working test case already mounted component throw second render pass leaves react inconsistent state breaking code thought approaches catching render error string instead component might good render empty good log thrown error console invariant however sure correct way handle feedback working pr atm", "d": "11/2015"}, {"body": "would huge improvement", "d": "11/2015"}, {"body": "seriously taken days figure random error scrollbarjs unmounting mousemovetracker twice fixeddatatable caused two reacts good bug seemingly ca nt fixed react put version number window object never add already better hours hours wasted many people", "d": "11/2015"}, {"body": "aphillipo thought fixed displaying warning", "d": "11/2015"}, {"body": "yep upgraded everywhere including inside module somehow deleting react nodemodulesreactdatatablenodemodules fixed bug see maybe something wrong webpack config weird fixed two identical version included subtle variant bug", "d": "11/2015"}, {"body": "aphillipo part problem reactdatatable nonpeer dependency cc pieterv cause npm fetch separate react installation module", "d": "11/2015"}, {"body": "okay thanks syranide try adding peer dep however want run build module developing datatable within main project best way accomplish without issues", "d": "11/2015"}, {"body": "aphillipo might try upgrading improvements handles dependencies better avoiding multiple instances given package since installs flat structure instead nesting dependencies within packages along moving library writing solved similar problems", "d": "11/2015"}, {"body": "would amazing", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "isrequiredornull similar using custom validator want ensure prop specified nt care null", "d": "11/2015"}, {"body": "hitting problem well workarounds time could nt get work suggested", "d": "11/2015"}, {"body": "none ones already mentioned", "d": "11/2015"}, {"body": "long stale closing", "d": "11/2015"}, {"body": "combining methods argument means less repetition anyone needs separation check arg", "d": "11/2015"}, {"body": "either truefalse either truefalse state updated becomes false", "d": "11/2015"}, {"body": "hey old thread recently moved react warnings consolewarn consoleerror wondering possible trigger callback everytime react detects problem understand may want throw bad proptypes could lead different app behaviors devprod mode would really nice hability plug code something bad happens let explain sometimes developers watch console notice react errors logged could plug would ship much less kind bugs also would activate failfast alerting production subset users like company members possible", "d": "11/2015"}, {"body": "slorber meantime using little hack unit test setup fail tests cause warnings const consoleerror consoleerror consoleerror function firstmessage rest firstmessagestartswith warning throw new error processonce unhandledrejection error gt consoleerror processexit", "d": "11/2015"}, {"body": "used something similar past nt like proxy consoleerror messes stacktrace shown chome console", "d": "11/2015"}, {"body": "slorber take look", "d": "11/2015"}, {"body": "hi around years passed plan issue several cases team need prevent event bubbling inner components workaround us painful drill target element adding stop propagation care clean remove listener unmount", "d": "11/2015"}, {"body": "really unfortunately nt good model events nested trees interact synthetic events native events two different concepts example native event could result synthetic event call event prevent dispatch native event render tree form synthetic events separately tree right probably need change fix properly afraid shortterm solution would patch solves cases makes code harder reason probably need holistic rethinking problem make good solution something encounter much much focused react single render tree", "d": "11/2015"}, {"body": "separate complete reactsvg loving working svg react far incompleteness support makes go semicomplex application", "d": "11/2015"}, {"body": "spicyj plan eliminate need separate config need keep updating hopefully complete soon mean time please hold tight", "d": "11/2015"}, {"body": "animatetransform", "d": "11/2015"}, {"body": "dominatebaseline", "d": "11/2015"}, {"body": "like zpao said going fix good soon attributes used locking issue", "d": "11/2015"}, {"body": "hello probably sound redundant using react bower package trying use keymirror inside reactjs exposed global object use without import another keymirror package", "d": "11/2015"}, {"body": "ca nt", "d": "11/2015"}, {"body": "dupe", "d": "11/2015"}, {"body": "seems already fixed longer exist current codebase original implementation instead exposed directly see", "d": "11/2015"}, {"body": "yeah rewrote", "d": "11/2015"}, {"body": "mattweb", "d": "11/2015"}, {"body": "anyone searching like works smile", "d": "11/2015"}, {"body": "simple counter componentspecific string works fine jsx import react component react let count class inputui extends component constructor props super props export default inputui scenario wo nt work", "d": "11/2015"}, {"body": "davidgilbertson serverrendering work trivial setups everything beyond cause become outofsync client server cause markup mismatch", "d": "11/2015"}, {"body": "thought might case got components hundred instances nested levels deep would consider nontrivial works fine specific scenario comes mind initial clientside markup rendered wo nt match markup generated webpack hot swapping make sync nt care", "d": "11/2015"}, {"body": "update", "d": "11/2015"}, {"body": "update", "d": "11/2015"}, {"body": "tsheaff find solution end also onchange formatting text field", "d": "11/2015"}, {"body": "tsheaff mikeljames problem react nt enough information something intelligent assuming represents cursor suppose input looks like type momentarily input looks like immediately returns cursor go even human looking unclear could go space figuring programmatically seems impossible general case even content return either hard imagine algorithm might work reliably let know missing something impossible requires knowledge specific problem space react nt attempt anything intelligent cursor set selectionstartselectionend manually appropriate domain case filtering characters would possible write general solution think may still better left thirdparty component", "d": "11/2015"}, {"body": "yes mikeljames impossible general spicyj explains almost certainly better jumping end specific case formatting using simple heuristic nt make sense react burn extra cycles attempting general eg formatting could additive subtractive perhaps linking issue related discussion could helpful official docs imagine formatting phone numbers credit cards ssns quite common", "d": "11/2015"}, {"body": "related issue iframes needs different fix component using twitter api embed tweet works great component rearranged react part list key happens iframe becomes completely empty ca nt reload src twitter api javascript magic directly iframe would need clean iframe load new one using api happens problem component way knowing happened lifecycle method telling dom manipulation sth like since component also uses purerendermixin literally nothing happens gets moved dom nt seem possible fix outside react edit found workaround particular usecase least chance reload tweet iframe fire event reloaded even though twitter generated iframe nt", "d": "11/2015"}, {"body": "apologies opening thread please see download stats attached npm page linkedstatemixin seems quite popular still planning deprecating mixin", "d": "11/2015"}, {"body": "yes think hard build component behavior sure explain ease migration", "d": "11/2015"}, {"body": "used velocityreact solved indirectly", "d": "11/2015"}, {"body": "check react motion", "d": "11/2015"}, {"body": "also prints warning render server annoying", "d": "11/2015"}, {"body": "odd would nt expect code run using server rendering", "d": "11/2015"}, {"body": "see warning chance disable", "d": "11/2015"}, {"body": "nt tried yet could interest", "d": "11/2015"}]