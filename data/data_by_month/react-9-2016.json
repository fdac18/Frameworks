[{"title": "group radio button requires defaultchecked attribute work properly firefox", "body": "", "num": "7838", "d": "9/2016"}, {"title": "input nt fire focus event focused programmatically", "body": "assign callback call method actual element react wo nt fire event related callback wo nt called problem react dom method fire event version update called support firing events design think", "num": "7835", "d": "9/2016"}, {"title": "mobile friendly docs", "body": "like contribute make react docs mobile friendly cry every time need look something phone attempt time ago pr apparently abandoned author like wait sending pr accept navigation design reset pretty straightforward guess pretty much would see removed downloads tab phone place case little gif almost identical react native docs would kind consistency rather like avoid sticky header takes much space cc lacker gaearon advised contact one", "num": "7833", "d": "9/2016"}, {"title": "unexpected interleaving subtreeparent lifecycle methods", "body": "repro example click handler subtree queues update subtree parent components following ordering lifecycle methods parent update child update subtree update child update parent update subtree update parent component unmounts subtree cause subtree unmounted time method called parent update child update subtree update child update parent update unmount subtree subtree unmount subtree update expected behavior probably parent update child update subtree update child update subtree update parent update", "num": "7827", "d": "9/2016"}, {"title": "dangerouslysetinnerhtml working properly simple example", "body": "using react latest tried goes wrong works nt description property normal string html content however rendered string html reason suggestions", "num": "7825", "d": "9/2016"}, {"title": "react fails update textnode", "body": "want request feature report bug bug current behavior react fails update text nodes current behavior bug please provide steps reproduce possible minimal demo problem via similar template close could get reproduction think jsfiddle nt work though masking real problem see expected behavior dom updatesdoes nt throw error versions react browser os affected issue work previous versions react react internet explorer sure ever worked feeling nt submitting pr shortly know nt actively supporting actually pretty simple fix hope outlined issue well enough", "num": "7824", "d": "9/2016"}, {"title": "always empty object", "body": "trying set context react app somehow ca nt acces context childrens parent class javascript import react react import menubar menubarjs export default class app extends reactcomponent static childcontexttypes prop reactproptypesbool getchildcontext return prop true render return children class javascript import react component react export default class menubar extends component constructor props context super props context consolelog thiscontext consolelog context render consolelog thiscontext return menubar consolelog return empty object something wrong", "num": "7823", "d": "9/2016"}, {"title": "nt trigger warnings prop null", "body": "want request feature report bug bug current behavior unexpected prop component prop meant generated html dom set null react triggers warning actual use case reusable component called either actual code html output activeclassname attribute second case nt react warning example reproducing reproduced issue simple example expected behavior nt warn prop defined null therefore never generated dom versions react browser os affected issue work previous versions react react version os ubuntu mac os x chromium google chrome", "num": "7820", "d": "9/2016"}, {"title": "tests errors compiling linux", "body": "want request feature report bug bug probably still unsupported arch current behavior trying compile react linux get two tests errors fail srcrendererssharedhookstestsreactcomponenttreehooktestjs reactcomponenttreehook stack addenda gets created expected constructor unknown jasminebuildexpectationresult objecteval tryontimeout timerlistontimeout fail srcisomorphicclassicelementtestsreactelementvalidatortestjs reactelementvalidator warns keys arrays owner parent info expected warning child array iterator unique key prop check toplevel render call using see information div warning child array iterator unique key prop see information div jasminebuildexpectationresult current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior pass tests versions react browser os affected issue work previous versions react linux react version", "num": "7816", "d": "9/2016"}, {"title": "shape validation recognize deconstructed props attributes", "body": "bug shape validation recognize deconstructed props attribute failing example deconstructed props const foo bar gt barbaz fooproptypes bar reactproptypesshape baz reactproptypesstring working example non deconstructed props const foo props gt propsbarbaz fooproptypes bar reactproptypesshape baz reactproptypesstring", "num": "7815", "d": "9/2016"}, {"title": "warned manually calling reactpropttypes validation function", "body": "nt think though component import react react export class timeline extends reactcomponent static proptypes cls reactproptypesstring timelinetitle reactproptypesstringisrequired timelinebyline reactproptypesstring timelineevents reactproptypesarray get warning every proptype defined component", "num": "7810", "d": "9/2016"}, {"title": "pass inline css variables", "body": "tried get warnings nt think react support yet", "num": "7808", "d": "9/2016"}, {"title": "using proptypes", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7807", "d": "9/2016"}, {"title": "reactchildrenmap nt work function child components", "body": "create component accepts functions children able use map returns nothing instead use throws error one child js bin illustrating issue sure bug intended functionality recommended build components way js bin example using react experiencing well", "num": "7806", "d": "9/2016"}, {"title": "enter leave timeout csstranstiongroup", "body": "want request feature report bug bug current behavior everything works warning console current behavior bug please provide steps reproduce possible minimal demo problem via similar template using csstransitiongroup appear animation enter leave expected behavior need provide timeouts appear suffice", "num": "7805", "d": "9/2016"}, {"title": "upgrading react causes development build crash", "body": "application crashes upgrade react works fine earlier versions diff looks like gif crash recorded using browserstack start recording google loaded dev tools open navigated apps url see crashes hard nothing logged console browsers load app fine seems crash guys drop support ideas might causing", "num": "7803", "d": "9/2016"}, {"title": "jsx spread tag proposal", "body": "feature request common request developers allow returning multiple elements inline expressions jsx use case would pseudocode would react generate either depending value flag stands would work two consecutive tags would transpile single expression several approaches problem wrap elements kind parent tag always acceptable use arrays would make react complain elements second array unique property adding property would take extra effort use keyed fragments requires using addons assigning arbitrary keys fragments syntax quite cumbersome use directly making benefit spread syntax straightforward way would equivalent either jsx anymore proposal make use latter solution jsx extending jsx spread tag tag could used nontop element jsx tree could contain single js expression curly braces must evaluate array way original problem could solved writing would transpile follows almost simple naive solution top produces exact effect developers variable number arguments need create keys wrap elements dummy tags", "num": "7801", "d": "9/2016"}, {"title": "problems changing value uncontrolled number input chrome", "body": "want request feature report bug bug current behavior jsfiddle try edit default value something else like soon insert dot cursor stars jump input versions react browser os affected issue work previous versions react working chrome react also try go far back tried old jsbin react worked firefox correctly working", "num": "7799", "d": "9/2016"}, {"title": "manipulating dom componentdidupdate", "body": "hi like question like open discussion regarding dom manipulation creating react plugin dom calculations css powerful enough cover everything plugin needs problem need adjust css properties depending return value getboundingclientrect dom element rendered component technically options calculate calling calculated values afraid infinite loop could happen certain cases would nt go one like play bit seems complex readable lot questions pop dependent certain use case update dom componentdidupdate solution decided go works simple stable works intended however feel edge wanted double check ok way things ok manipulate dom called everytime done ok throwing away changes next modify dom part code componentdidmount thisrecalculateindent componentdidupdate thisrecalculateindent recalculateindent calculate indent based getboundingclientrect dom reference thistextarearefstyletextindent render return", "num": "7797", "d": "9/2016"}, {"title": "receive outside events without leaving react system", "body": "feature request right way respond outside world events leave react event system add native dom listener bad since require mental overhead work need think event listener receiving native event react synthetic event also simply possible computed eg also makes hard react events handlers interrupt dom handlers consider following example intuitive react listener stop propagation spoiler react also listens use js var example reactcreateclass render function return documentaddeventlistener keydown function alert still fire reactdomrender documentgetelementbyid react example want deal outside events simple drawing tool must listen stop drawing process solve problem propose new public api something like behave like regular dom node callbacks receive get called triggering two phase dispatch respects order well everything expect listening example replace new event root correctly applied", "num": "7795", "d": "9/2016"}, {"title": "documentation inconsistencies around parentchild vs ownerownee", "body": "want request feature report bug bug looking documentation describes difference parentchild relationship compared ownerownee relationship tutorial talks parentchild relationship ownerownee relationship ownerownee terminology commonly used feel like time read tutorials read parentchild relationships even parent passing props child would ownerownee relationship happy make whatever changes need made documentation tagging lacker gaearon", "num": "7794", "d": "9/2016"}, {"title": "svg switch tag", "body": "feature request plans make sense add svg tag see example usage use case following script thanks reactdom renders svg server side image context foreignobject rendered switch tag could useful", "num": "7792", "d": "9/2016"}, {"title": "onchange events ca nt stoppropagation amp", "body": "want request feature report bug bug current behavior onchange events ca nt stoppropagation throw error trigger change events current behavior bug please provide steps reproduce possible minimal demo problem via js var hello reactcreateclass render function return log function e consolelog change stop function e estoppropagation reactdomrender documentgetelementbyid container expected behavior span trigger onchange events type input amp versions react browser os affected issue work previous versions react amp", "num": "7791", "d": "9/2016"}, {"title": "flickering ui scrolling react app", "body": "want request feature report bug bug current behavior built react web app using react redux rendered webview long paginated list rendered shows flickering kind behaviour loading ui scroll page scroll fast takes second two render ui properly also problem found android webview browser current behavior bug please provide steps reproduce possible minimal demo problem via similar template link screencast recorded expected behavior nt flickering scrolling webview browser versions react browser os affected issue work previous versions react react redux android webview", "num": "7787", "d": "9/2016"}, {"title": "onblur nt work tag clicked", "body": "want request feature report bug bug current behavior textarea onblur nt work headertag one children clicked current behavior bug please provide steps reproduce possible minimal demo expected behavior blur event triggered focus gone textarea whatever element click versions react browser os affected issue work previous versions react chrome windows nt work also", "num": "7786", "d": "9/2016"}, {"title": "api suggestion extend reactcomponentprototype", "body": "component library author constantly use cases want every single component one properties polymer handles exposing polymerbase likely become static method examples themesstyles props behaviors know recommended best practice use hoc wrapping even decorating every single component gets tedious implicit library consumers much like context merging props messy always reliable depending use case know one would benefit something like search react discuss forums", "num": "7785", "d": "9/2016"}, {"title": "support slot attribute shadowdom dom elements", "body": "want request feature report bug feature guess current behavior react nt support attribute comes shadowdom throw error web component nt working code rendered html error current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior support new dom attribute standard versions react browser os affected issue work previous versions react react chrome osx el capitan", "num": "7784", "d": "9/2016"}, {"title": "jsfiddle official website working", "body": "want request feature report bug bug current behavior work code executed two files loaded facebook servers return error current behavior bug please provide steps reproduce possible minimal demo problem via similar template go click link bottom go click link jsfiddle text expected behavior generated output result pane versions react browser os affected issue work previous versions react chrome latest stable mac os safari mac os", "num": "7782", "d": "9/2016"}, {"title": "deleting decimal values number inputs", "body": "already chimed problems another issue type number start deleting delete cursor jobs way left think problem fact considered valid number sure came react browser specified value valid number value must match following regular expression dddd ee", "num": "7781", "d": "9/2016"}, {"title": "proper pattern controlled input type number blank initialization", "body": "say building controlled react element returns proper way initialize want start blank value equivalent anything think pass throws errors antipattern nt want hack text input like take advantage builtin min max step functionality passing warning failed prop type invalid prop value type string supplied numinput expected number passing warning value prop input null consider using empty string clear component undefined uncontrolled components passing warning numinput changing uncontrolled input type number controlled input elements switch uncontrolled controlled vice versa decide using controlled uncontrolled input element lifetime component", "num": "7779", "d": "9/2016"}, {"title": "bug react onchange synthetic proxy events recycled issue handler debounced", "body": "current behavior confirmed also happens today js class foo extends reactcomponent render const handlechange debounce thispropsonchange return reactdomrender documentqueryselector div expect get get without debounce works expected possibly related", "num": "7778", "d": "9/2016"}, {"title": "notification index please ignore issue", "body": "refer dom element within jsx props without using ref class mycomponent extends component constructor props thisstate selectedoption getclassname e return etargettextconent thisstateselectedoption selected onnodeselected e thissetstate selectedoption etargetcontexttext return still much tempted pass refer current dom element update answer ca nt use always stands current component matter use correct approach pass explicitly eg know refer pass value directly without using keyword", "num": "7776", "d": "9/2016"}, {"title": "safari error navigatoruseragentindexof function", "body": "typeerror navigatoruseragentindexof function navigatoruseragentindexof chrome navigatoruseragentindexof undefined", "num": "7775", "d": "9/2016"}, {"title": "react throws warning concerning unique key prop collection one element", "body": "want request feature report bug bug current behavior create list elements contains one element element key undefined render list properly react throws warning current behavior bug please provide steps reproduce possible minimal demo problem via similar template example expected behavior expected behavior list contains one element therefore key unique warning nt displayed versions react browser os affected issue work previous versions react appeared following versions react reactdom worked previous version react reactdom", "num": "7774", "d": "9/2016"}, {"title": "redux realworld", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7772", "d": "9/2016"}, {"title": "ship", "body": "might little ways going start process definitely want run rc push react native want people play big packaging change potential issues", "num": "7770", "d": "9/2016"}, {"title": "input autofocus causes focus emitted ref", "body": "reproduce chrome", "num": "7769", "d": "9/2016"}, {"title": "add date created docs", "body": "docs request could dates added docs version writtenintroduced instance could include date written introduced ecosystem", "num": "7768", "d": "9/2016"}, {"title": "input elements switch uncontrolled controlled disabled readonly", "body": "want request feature report bug bug current behavior input elements readonly disabled updated value inital render produce warning child changing uncontrolled input type text controlled input elements switch uncontrolled controlled vice versa decide using controlled uncontrolled input element lifetime component current behavior bug please provide steps reproduce possible minimal demo problem expected behavior warnings versions react browser os affected issue work previous versions react browser related behaving correctly got warning dev console", "num": "7767", "d": "9/2016"}, {"title": "ca nt isomorphically check proptypes reactdomstream ssr without warnings react", "body": "helpfully checks rendering static html stream course react warns case user warning manually calling reactproptypes validation function head prop html deprecated work next major version may seeing warning due thirdparty proptypes library see details page link advises party libraries use external libraries wo nt work case trying call user put components rather providing helpers like party libraries author page seems considering eg prevent errors user would remove components replace usages code library using party components declare would luck intended solution conflict unanticipated", "num": "7765", "d": "9/2016"}, {"title": "forceupdate defaultvalue", "body": "throwing reading way update saw one idea using wanted use key input working nt change key input looks like run program type input box get thing update rerender atleast think rerendering typed values actually applied rerender toggle update later debugged problem made still called function btw better solution appreciate", "num": "7764", "d": "9/2016"}, {"title": "react github page localization issue", "body": "hello im korean im helped react korea page page sidebar translated english sidebar elements moved us clicked korean issue japanese hope issue solved thanks", "num": "7763", "d": "9/2016"}, {"title": "problem element", "body": "bug safari nt know react problem reactrouter problem could reproduce repo beginning website two links home select click select change value select element anything change select new one click home select page still see select open problem ios", "num": "7762", "d": "9/2016"}, {"title": "react call children components render calls parent component render", "body": "spicyj implementing wizard framework basic design like wizard container contains previousnext buttons several wizard pages wizard container maintains ref current wizard page next button clicked wizard container submit current wizard page invoked thru ref sample code wizard page problem see using objectassign set new state current wizard page see every time click next button wizard container alert box pops saying current wizard page rerendered however child component wizard page alert box businessinfoform render function well understand child component businessinfoform since passed prop remains prestine boolean true need rerender behaviour kind makes sense however parent component gets rerendered nt children component get destroyed reconstructed seems like children components cached rerendered needed know may call forceupdate force children components rerender simply pass new object instead boolean interested react framework designed finding solution yeah know debug source code nt want go far cheers", "num": "7761", "d": "9/2016"}, {"title": "feature request allow stateless components render plain string", "body": "occasion would cleaner stateless functional component render plain string perhaps type satisfies without needing wrap element imagine lending well leaf components less sure would possible solve plain nodes root though sorry discussed could nt find existing issues looked related", "num": "7760", "d": "9/2016"}, {"title": "rfc idea forcedeepupdate forcedeepupdatewithscope scope", "body": "going put feedback motivation subscription management comes cost eats wins async rendering since needs managed synchronously managing direct subscriptions managing dynamic dependency graph invalidated meanwhile subscriptions used data never update least apps pure loss use case connecting third party systems nt easily connected top level data tree proposal use case reading global mutable state reason use bypass entire subtree basically rerender everything combined fiber lowpriority update bad things change lot things good example would changing locale regardless read global mutable locale like airbnb context locale like yahoo lets change need without needing manage subscriptions cases nt need would traverse subtree start rendering returns arbitrary argument allows bit targeted update convenience overhead additionally react would cache pair responded number scopes back new component gets mounted might check cache see need add cache effectively creates lazy subscriptions use case something like typing input field updates global store immediately displays completely different place page first character might bit slower still responsive levels subsequent characters fast update caveat major downside proposal relies mutation know react nt really like mutation many reasons effect fiber example component gets higher priority update start using new value components rely mutable state effectively become upprioritized good temporarily show inconsistent data point making kind update lower priority likely large larger updates stall page take priority higher priority updates thereby defeating benefits fiber anyway like try come variant api nt rely mutation", "num": "7759", "d": "9/2016"}, {"title": "improve tutuorial remove remarkable", "body": "using remarkable helpful big portion reader hurts clarity simplicity tutorial request remove", "num": "7758", "d": "9/2016"}, {"title": "use camelcase event type name", "body": "want request feature report bug feature current behavior returns original lowercase event type name description library component author would nice receive event type camelcase way react requires name camelcase passing prop would allow authors pass props easier allow people still hook events example usage etype totally doable right would require third party addon function keep track new events added react would nice react provided camelcase name us", "num": "7755", "d": "9/2016"}, {"title": "upgrade react warning", "body": "since upgrade react always reported information", "num": "7754", "d": "9/2016"}, {"title": "docs request examples guidance toplevel api methods", "body": "would handy simple examples guidance use thanks", "num": "7752", "d": "9/2016"}, {"title": "rename lifecycle methods", "body": "feature request consider renaming byzantine lifecycle method names mean come componentdidupdate componentwillreceiveprops shouldcomponentupdate react declarative huh concise method names easy reason react claims rendered updated sometimes think react team invented rest instead get post clientwillretrievedata clientwilltransmitdatawithparameters lifecycle implies passage time method names succinctly indicate things within cycle method names useful developers building applications compound portmanteau words reflect internal engineering complexity", "num": "7751", "d": "9/2016"}, {"title": "ship", "body": "shipped safe go straight final wanted get published first case nt get tonight remind ship final need write changelog", "num": "7749", "d": "9/2016"}, {"title": "note used classes docs", "body": "currently docs getinitialstate mention method used class syntax could use note like one replacestate method available classes caused least little confusion stackoverflow question react", "num": "7746", "d": "9/2016"}, {"title": "receiving userentered input", "body": "want request feature report bug feature current behavior serving controlled inputs serverside reactdom user might entered data already clientside react executed case data user entered gets overwritten initial value current behavior bug please provide steps reproduce possible minimal demo problem expected behavior mechanisms available available capture input one natural solution imagine way capture user entered text could hack together manually plucking content dom interested know reacty solution possible default discarding user input unlikely desired developer user versions react browser os affected issue work previous versions react observed working previous versions react see chrome mac os x react", "num": "7745", "d": "9/2016"}, {"title": "bug shallow rendering work properly react stateless function components", "body": "bug react stateless functions cause cyclic rendering shallow rendered javascript import react react const component gt return describe test case gt let shallowrenderer beforeeach gt shallowrenderer reactaddonstestutilscreaterenderer describe render gt render properly gt shallowrendererrender const output shallowrenderergetrenderoutput expect output toequal error test case failed expected test case pass", "num": "7743", "d": "9/2016"}, {"title": "refs", "body": "want request feature report bug bug current behavior possible test component use utilitiestesting refs always javascript flow import react react export default class foo extends reactcomponent future refs bar javascript import react react import renderer reacttestrenderer valide ref gt const foo renderercreate expected behavior ref usable versions react browser os affected issue work previous versions react tested versions", "num": "7740", "d": "9/2016"}, {"title": "fix flow issues introduced", "body": "missed flow nt run properly travis clear introduced bunch new flow failures nt bad like say break buy one aweary couple preexisting flow issues vjeux going fix mostly testrenderer issues", "num": "7735", "d": "9/2016"}, {"title": "blacklist opera developer plugin notice", "body": "opera sending chrome user agent nt plugin release opera need massage browser detection show warning relevant code", "num": "7734", "d": "9/2016"}, {"title": "event dispatch fails unmounting", "body": "current behavior repro click click fails react dom tree root always node reference expected behavior failure event dispatch stops versions react browser os affected issue work previous versions react chrome os x certain worked maybe related", "num": "7733", "d": "9/2016"}, {"title": "jsx alternative syntax passing jsx content props", "body": "silly succinct example today say proposal support alternative inspired xaml short element name contains first part parent element name second part prop name content becomes value passed prop nothing else changes merely alternative way specify prop value remains consistent xml allowed indeed xaml forced order xml dialect yet flexible properties specified objects jsx nt challenge nevertheless complex examples would lessen brain eyestrain keep structure tree obvious staying jsx syntax instead blocks stretching across many lines layers nesting alternating syntaxes enhancement say today say prop elements purpose attributes optionally specify valueless attributes become parameter names function function passed prop maps exactly previous example attributes specified nothing variable content depend hence simple value rather function returning value found prior issue seemed asking something similar nt precisely mapped existing concepts talking anything changes model way staying jsx reducing mental overload switching syntaxes writingreading trees", "num": "7732", "d": "9/2016"}, {"title": "prop type invalid must function", "body": "hi declaring prop types component one props definition react gives confusing error component rendered link reproduce hit run button console", "num": "7728", "d": "9/2016"}, {"title": "skip comparing known constant props reconciliation", "body": "want request feature report bug feature current behavior currently whether prop expected change passed props way us developers mark prop fixed never change lifecycle component expected behavior would static properties ie change instance instance created initial render never change original ideally though sure implementation would also always original perhaps something like advantages allowing props explicitly marked fixed shouldcomponentupdate would better lot certain props automatically nt ca nt change allow errors warnings prop marked fixed changed initial render possible compiler render optimizations knowing particular props never change course multiple renders particular component fixed props including children know render output fixed inline output parent render output one possible api would allow separate fixedprops category maintain signature jsx one mediocre idea would something like another would separate prop called fixed something similar would critical would merged component actually created would always contain props functional components still get one arg thus nobody rewrite render component", "num": "7720", "d": "9/2016"}, {"title": "state prop collecting geoloacation data even component mounted", "body": "ok problem map component gets someones current location every x seconds stores data array launch app home scene option opening map new scene using navigator select button route coordinates seem collecting even rendered map view component mount javascript componentdidmount thissetstate routecoordinates console log routcoordinates beginning componentdidmount give empty array problem seems secretly rendering even navigated map component console logged routecoords immediately render navigate map component output gives latitude longitude latitude gettersetter longitude gettersetter latitude longitude latitude gettersetter longitude gettersetter latitude gettersetter longitude gettersetter latitude longitude latitude gettersetter longitude gettersetter latitude gettersetter longitude gettersetter latitude gettersetter longitude gettersetter latitude longitude want start fresh every time mount component setstate irrelevant set start collecting data even componentdidmount gets run", "num": "7719", "d": "9/2016"}, {"title": "bug false positive plain object warning", "body": "bug logic determining plain object bug results false positive flooding console hundreds instances warning expected props argument plain object properties defined prototype chain ignored code failing reactelementjs line branch line number probably different master configproto null configproto objectprototype fails props object created one iframe uses instance react another frame browser windowtabframe instance object constructor instance always results check demo shows falsepositive warning message", "num": "7718", "d": "9/2016"}, {"title": "log warning development mode", "body": "want request feature report bug feature ref tweet dan currently easy use react mode production little warning library happening takes fair bit googling know tucked away advanced performance docs nt include directions webpackbrowserify start recommend react always log message console development mode something like running development mode use production mode flags speed code stands hope prevent misses", "num": "7713", "d": "9/2016"}, {"title": "attach react component already rendered dom rendered react server", "body": "like keep traditional server side rendering react rendering node attach client side code believe following statement might help achieve wonder work done help guide mix server rendered content via server side template react moment would greatly appreciated states reactdomrender modify container node modifies children container future may possible insert component existing dom node without overwriting existing children", "num": "7712", "d": "9/2016"}, {"title": "bug click disabled click", "body": "bug following jsx const component gt click clicking trigger whereas clicking red trigger demo thanks react incredibly well designed tool", "num": "7711", "d": "9/2016"}, {"title": "class name manipulation native", "body": "page currently suggests external dependency npm provided react instead include lines code react eliminate external dependency", "num": "7709", "d": "9/2016"}, {"title": "search box website wrong font", "body": "nt match rest text think right place stylesheet fix", "num": "7706", "d": "9/2016"}, {"title": "anyway retrieve field meta object externally", "body": "hi hoping retrieve field meta attribute field rendered know field error actually wrapping field pop edited later want know whether field error use allowed continue example finding reference meta object access meta object customcomponent field anyway without storing variables access meta input objects reference field", "num": "7705", "d": "9/2016"}, {"title": "unable transform const layout rest props via babel", "body": "ran error ran react code warning unknown prop tag remove prop element details see jump link replaced code first good example listed page pass babel transpiling error syntaxerror jsxtttjsx unexpected token function mydiv props const layout rest props layout horizontal return else babelrc file like miss something react doc needs modified want request feature report bug report bug something wrong doc current behavior babel transform code posted react official site current behavior bug please provide steps reproduce possible minimal demo problem via similar template copy following code running babel transpile transpiling stuck spread operator expected behavior pass transpiling versions react browser os affected issue work previous versions react babel babelpresetreact", "num": "7703", "d": "9/2016"}, {"title": "react thinks input readonly", "body": "want report bug input value set thisstate value manipulated using onkeydown event console next error warning failed form proptype provided prop form field without handler render readonly field field mutable use otherwise set either check render method input readonly gets edited means error nonexistent reproduce could add value handler handler something like class myinput extends reactcomponent onkeydown e thissetstate inputvalue thisstateinputvalue render return expected behavior would without console error component works exactly expect react", "num": "7700", "d": "9/2016"}, {"title": "reactcloneelement thispropschildren thisprops copies children thispropschildren children", "body": "please run js fiddle given copies children propschildren child child also renders children using method infinite loop established browser maximum call stack size exceeded ideally cloning children property props child left untouched", "num": "7692", "d": "9/2016"}, {"title": "issue input formatting value state", "body": "want request feature report bug want report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template case trying format value input thousand separator javascript formatnumber ev typing number everything well number exceeds value state becomes setting original target value using setstate loggin formatted value works expected javascript formatnumber ev codepen problem expected behavior using intlnumberformat svse values following works works work work versions react browser os affected issue work previous versions react unaware worked previous version react using react reactdom tested latest version chrome firefox", "num": "7688", "d": "9/2016"}, {"title": "reactchildrencount incorrect false value", "body": "want request feature report bug think bug current behavior try use children contains child value result one example function root return false function hello children return count reactchildrencount children toarray length reactchildrentoarray children length render replace count fiddle demonstrates issue expected behavior count nt include nodes versions react browser os affected issue work previous versions react repro firefox chrome nt know worked previous versions react", "num": "7685", "d": "9/2016"}, {"title": "edge file input inside label keeps reopening file explorer window", "body": "want request feature report bug want report bug current behavior using inside ms edge file explorer window keeps reopening happens way close edge killing process current behavior bug please provide steps reproduce possible minimal demo problem via similar template place inside like expected behavior file explorer window closed either selecting file cancelling file explorer window closed remain closed versions react browser os affected issue work previous versions react react version browser ms edge os windows nt test previous react versions", "num": "7683", "d": "9/2016"}, {"title": "umbrella new lifecycles ideas", "body": "use gather ideas new lifecycle methods help avoid existing problematic cases using fiber async rendering solutions gets called entire tree rendered server useful aborting buffered renders logging got idea could possibly replace similar happens asynchronously spare cycles component already appeared screen way triggering things like io nt block component rendering screen dropping frames since synchronous appropriate use flux store subscriptions since may missing events way however use lazy subscriptions alternative solution similar would happen spare cycles clean purposes clean synchronously needed may needed separate lifecycles since possibly make async would fiber specific thing unlike current actually happens children called right sideeffects committed dom use case reading current scroll position reset later nt work async rendering scroll could possibly replace", "num": "7678", "d": "9/2016"}, {"title": "use babili instead uglify browser builds", "body": "idea actually viable point figured open issue track determine best way forward pretty likely end unless find reason couple things consider currently browserify already compiled modules might need babili would browserify resolve correctly maybe start dropping transforms npm package aggressively rely native support things still compile browser risk falling sync basically dual pipelines somebody interested investigating feel free say something let hold prs time unless convincing results nt foresee immediately doable would rather collect info one place instead splitting discussion", "num": "7677", "d": "9/2016"}, {"title": "bug missing warnings unknown props unknown dom properties", "body": "actual missing warnings unknown domproperties development missing warnings unknown props development expected unknown domproperties log warnings unknown props log warnings affected versions software version test react seems work intended runtime node link affected browsers chrome tested link", "num": "7674", "d": "9/2016"}, {"title": "mouseenter events triggered disabled form element", "body": "want request feature report bug bug current behavior mouse enter disabled form element trigger events trigger mouse leave element current behavior bug please provide steps reproduce possible minimal demo problem via similar template first button rendered react expected behavior nt trigger events form elements disabled versions react browser os affected issue work previous versions react yes", "num": "7673", "d": "9/2016"}, {"title": "deprecate componentwillmount maybe", "body": "let use thread discuss use cases componentwillmount alternative solutions problems generally solution simply use componentdidmount two pass rendering necessary several problems global sideeffects componentwill phase includes starting network requests subscribing flux stores etc confusing used error boundaries currently called without ever called false promise children successfully completed currently applies error boundaries used probably want revert decision simply call fiber experiment nt really good way call new render gets aborted higher priority update interrupted similarly sister project componentkit reconciliation threads safe perform sideeffects yet callbacks update parent components completely unsupported lead strange order dependent race conditions already know want deprecate pattern reconciliation order children easily dependent upon perform global sideeffects already fully guaranteed updates cause unexpected reconciliation orders relying order also limits future use cases async streaming rendering parallelized rendering legit use case call even never really need since initialize initial state whatever really kept around specific use case callback used synchronously asynchronously convenient avoid extra rerender data already available solution split api synchronous version asynchronous version guarantees sideeffect happens component successfully mounts async sideeffect needed twopass rendering needed regardless argue much boilerplate since need anyway hidden inside higherorder component global sideeffects also bad since guaranteed complete due aborts errors prefer possible however likely remain form even use case constrained also nearly bad since still get invoked cleanup", "num": "7671", "d": "9/2016"}, {"title": "unwanted focus event triggered blur", "body": "want request feature report bug bug current behavior blur event triggered componentwillupdate unwanted focus event triggered render current behavior bug please provide steps reproduce possible minimal demo problem via similar expected behavior input box focused key pressed input box blur nt versions react browser os affected issue work previous versions react", "num": "7665", "d": "9/2016"}, {"title": "incorrect shallow rendering incase children key", "body": "want request feature report bug bug current behavior let say component recieve array renders list let say passed following array since id duplicate react render one item throws following warning demo however using reacttestutils shallow render list returns items instead testcase demonstration purpose describe gt render correct number items gt current behavior bug please provide steps reproduce possible minimal demo problem see expected behavior shallow renderer behave like browser case return children instead versions react browser os affected issue work previous versions react", "num": "7664", "d": "9/2016"}, {"title": "improve warning message oneoftype validation fails", "body": "want request feature report bug enhancement current behavior var hello reactcreateclass displayname hello proptypes name reactproptypesoneoftype reactproptypesbool reactproptypesnumber isrequired render function return reactcreateelement null welcome react reactcreateelement div null hello thispropsname reactdomrender reactcreateelement hello name world documentgetelementbyid container running example results following warning desired behavior following improvement would nice adding type supplied bad value would amazing name checker functions though may involve changes createinstancetypechecker createprimitivetypechecker work ex know nt high priority like least add type would gladly work", "num": "7662", "d": "9/2016"}, {"title": "event handlers firing unmount", "body": "want request feature report bug reporting bug current behavior working project employs react view layer rather large tree components ran bug day event triggers click handler ultimately unmounts tree continues running rogue react dom thing unmounted triggers handlers simple workaround used avert future crises current behavior bug please provide steps reproduce possible minimal demo problem via similar template sure repro little luck enough components event management event handlers expected behavior event handlers triggerable unmounting versions react browser os affected issue work previous versions react browser chrome version os mac os x react version fiddle failed repro", "num": "7661", "d": "9/2016"}, {"title": "since testutils radios checkboxes unexpected behavior attributes", "body": "want request feature report bug bug current behavior using checkboxes jsx attribute value dom element using configuration result current behavior bug please provide steps reproduce possible minimal demo problem demo expected behavior expected behavior testutils would mimic actual dom fragment ie jsx property results versions react browser os affected issue work previous versions react worked stopped working gt", "num": "7660", "d": "9/2016"}, {"title": "numeric string value css property", "body": "want request feature report bug bug current behavior warning tag owner passed numeric string value css property value treated unitless number future version react current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior nt warn versions react browser os affected issue work previous versions react react aside ms ms case get warning", "num": "7657", "d": "9/2016"}, {"title": "ie edge required select boxes value set initial render failing validation submit", "body": "want request feature report bug bug current behavior ie edge rendering required select box initial value set trying submit form input fail validation saying must choose item list current behavior bug please provide steps reproduce possible minimal demo problem via similar template visit ie edge try submit form expected behavior form valid submit correctly versions react browser os affected issue work previous versions react browser ie edge testing react versions master works react notes believe might browser bug issue occur react perhaps using different apis related links", "num": "7655", "d": "9/2016"}, {"title": "string refs cause incorrect warning reacttestrenderer", "body": "attach element using string use get warning see returns requires instance nonnull warning invariant think either return simple instance instead use additional check see dealing first option seems reasonable given comment current code cc spicyj", "num": "7645", "d": "9/2016"}, {"title": "unable select disabled elements disabled psuedo selector css", "body": "want request feature report bug bug current behavior unable select disabled form elements css via disabled psuedo selector currently use disabled attribute selector creating disabled form element jsx current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior expect able select disabled elements via css disabled psuedo selector versions react browser os affected issue work previous versions react new react tested multiple versions issue verified nt work versions", "num": "7643", "d": "9/2016"}, {"title": "kou hello", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7640", "d": "9/2016"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7639", "d": "9/2016"}, {"title": "kou hello", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7638", "d": "9/2016"}, {"title": "tutorial commentsjson used file name address comments", "body": "want request feature report bug bug current behavior confusing current behavior bug please provide steps reproduce possible minimal demo problem via similar template link file named commentsjson code apicomments used expected behavior file name consistent versions react browser os affected issue work previous versions react versions", "num": "7637", "d": "9/2016"}, {"title": "click events triggered ios touch devices", "body": "possible bug created js fiddle desktop click anywhere components outside components get clicked alert expected mount registered click event component try thing ios touch device im using ipad mini model ios click events triggered touch react components touch outside components alert comes whats interesting add css components get triggered looks like sort regression around issue tried react versions issue", "num": "7635", "d": "9/2016"}, {"title": "component mounted twice rerender triggered componentwillunmount", "body": "react given js consoleclear class extends reactcomponent componentdidmount consolelog mounted componentwillunmount consolelog unmounted render return reactcreateelement div test class extends reactcomponent componentdidmount consolelog mounted componentwillunmount consolelog unmounted render return reactcreateelement div test const render vnode gt reactdomrender vnode documentqueryselector root const gt render reactcreateelement const gt render reactcreateelement settimeout gt expected console output actual console output problem seems calling render within suspect common ie dispatching redux actions unmount trigger synchronous render", "num": "7632", "d": "9/2016"}, {"title": "radio buttons correctly checked using multiple lists radio buttons", "body": "want request feature report bug bug current behavior two lists radio buttons conditionally shown correct radio button nt always checked provided jsfiddle created two lists put button toggle two lists see switching second list radio buttons none radio buttons checked even though second one checked based state expected behavior correct radio button checked following jsfiddle shows behaviour react still worked versions react browser os affected issue work previous versions react react works react broken", "num": "7630", "d": "9/2016"}, {"title": "reactrouter longer defaults history prop hash history please use singleton instead", "body": "reactrouter longer defaults history prop hash history please use singleton instead", "num": "7627", "d": "9/2016"}, {"body": "try setting directly via js videonode see happens looks like node throwing error react really nt throwing errors", "d": "9/2016"}, {"body": "threw together quick example seems working fine something else needed get result seeing create example showcasing issue", "d": "9/2016"}, {"body": "thanks example figured problem called solve issue moved call current stack using", "d": "9/2016"}, {"body": "mean one listening calls", "d": "9/2016"}, {"body": "think vision pretty cool definitely agree docs could nicer mobile also thinking altering details overall layout might little conflicty meeting monday see gon na work stuff report back issue", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "would seem unlikely either way react gets string react ca nt actually tell difference two examples demonstrate jsfiddle investigate", "d": "9/2016"}, {"body": "unescape html work react automatically unescape html since already calling dangerouslysetinnerhtml", "d": "9/2016"}, {"body": "sergiotapia escaped html perfectly valid html unescaping could allow xss attacks incorrect rendering", "d": "9/2016"}, {"body": "thought point though dangerouslysetinnerhtml right create div set html extract html good solution method tells react", "d": "9/2016"}, {"body": "sergiotapia renders visible text renders text expecting valid html second result expect nt storing escaped like first example wrong react working correctly stored representation unnecessarilyincorrectly escaped", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "sorry made mess everything think clean commit guess submit new pr", "d": "9/2016"}, {"body": "mnpenner fyi always reset branch start scratch without closing pr also yes commit looks fine", "d": "9/2016"}, {"body": "closed pr automatically hard reset guess commit got wiped reset nt want commit history right", "d": "9/2016"}, {"body": "mnpenner oh ok must new githubbehavior something", "d": "9/2016"}, {"body": "thought new pr would automatically link put issue commit guess new pr", "d": "9/2016"}, {"body": "react discontinued react dom support fiddle using react dom tried using older version like", "d": "9/2016"}, {"body": "brandonaaskov tried reproducing particular issue react everything else seems work though rather stick long fix make work", "d": "9/2016"}, {"body": "brandonaaskov mnpenner unofficially supported actively maintained unless breaks point longer worth added code complexity", "d": "9/2016"}, {"body": "specify context properties passed js class menubar extends reactcomponent missing static contexttypes foo reactproptypesbool constructor props context super props context consolelog thiscontext consolelog context render consolelog thiscontext return menubar see working example", "d": "9/2016"}, {"body": "omg thank", "d": "9/2016"}, {"body": "duplicate see discussion", "d": "9/2016"}, {"body": "really nt actual difference react setting prop wittingly suppose mean use prop accidentally prop set undefined", "d": "9/2016"}, {"body": "akronix anything setting prop null implies attribute exist value even worse setting prop undefined undefined prohibited per discussion linked null certainly prohibited yes difference values prohibited key exist props object tag see best practice solutions apply fix code", "d": "9/2016"}, {"body": "fixed master nt cut release commit yet could try building master branch instead", "d": "9/2016"}, {"body": "keyanzhang worked perfectly said checkout test passed thanks", "d": "9/2016"}, {"body": "issue hintingsoftware using specifically react plugin react", "d": "9/2016"}, {"body": "looks like using eslintpluginreact best bet direct question", "d": "9/2016"}, {"body": "bad thanks pointing", "d": "9/2016"}, {"body": "scratch tracked child module importing react correctly", "d": "9/2016"}, {"body": "caub thanks issue nt think react support yet correct nt supported moment issue open want track updatesconversion topic", "d": "9/2016"}, {"body": "functions valid react elements discarded", "d": "9/2016"}, {"body": "syranide sebmarkbage somehow feels like breaks abstraction children anything within body jsx tag get single child array get array feel like exactly intended fix fact structure children produced jsx opaque kinda feels like children perhaps nonnull children available via", "d": "9/2016"}, {"body": "nt top level also handling recursive case also retains keys properly scenario since ca nt properly retain keys terminals ca nt handled perhaps better warning case though", "d": "9/2016"}, {"body": "syranide sfcs also simple functions", "d": "9/2016"}, {"body": "syranide sebmarkbage makes sense use functions children handle opaque data structure thanks clarifying yaycmyk sfcs still represented react elements property set sfc functions children literally functions elements", "d": "9/2016"}, {"body": "support dropped far know unfortunately ca nt really help without idea code causing issue tried identifying part application causing issue share code believe causing", "d": "9/2016"}, {"body": "also tried latest version react still crashes tried identifying part application causing issue share code believe causing currently idea causing boots react earlier versions react crashes hard error information console logs etc use react later version hoping guys could point right direction change might interact badly", "d": "9/2016"}, {"body": "managed narrow little application crashes use react amp reactdom diff looks like get warnings run npm install guess expected correct saying commits must culprit taken merge pull request zpaocleanuppkg merge pull request added docs environment integration use changelog format post merge pull request possible narrow specific commit help would greatly appreciated", "d": "9/2016"}, {"body": "problem", "d": "9/2016"}, {"body": "paired application back minimal example reproduces issue", "d": "9/2016"}, {"body": "gaearon tried minimal example crashes", "d": "9/2016"}, {"body": "weird reproduce example even without iframe noticed umd builds seem work replace globals include scripts page crash", "d": "9/2016"}, {"body": "reference minimal bundle causing crash produced compiling webpack configuration", "d": "9/2016"}, {"body": "gaearon thank validating reproducing issue next steps guys prioritise types regressions", "d": "9/2016"}, {"body": "sure regression yet said umd builds seem fine something reproduce webpack build far even weirdly replacing line fixes merely act calling function even replaced identity function crashes strange think able fix way assuming sort script engine bug enough information happens make actionable could restructure code since umd builds work fine code problematic combination code webpack bundles triggers issue script engine afraid unless suggest solution recommend using umd builds problems easy work around script engine bug library suggestions happy listen", "d": "9/2016"}, {"body": "gaearon idea became problem also affecting alot people seems like affect everyone using webpack react gt", "d": "9/2016"}, {"body": "script engine bug really random could occur due code change anywhere else bundle nt know causes even know exact commit wo nt way fix without plausible theory happened sure nt affect people nt checked anything else could influence example nt know webpackdevserver injects code page also sure happens webpack versions", "d": "9/2016"}, {"body": "gaearon case helps know bumped webpack webpackdevserver still seeing crash convinced random script engine bug would really love proven wrong", "d": "9/2016"}, {"body": "workaround using umd builds help meantime", "d": "9/2016"}, {"body": "hi getting issue weirdly include webpackoptimizeuglifyjsplugin works fine well", "d": "9/2016"}, {"body": "gaearon afraid nt follow please explain would configure umd builds minimum example application posted", "d": "9/2016"}, {"body": "ccoffey configure webpack resolvealias option use umd bundles aka precompiled minified files react reactdom code use instead commonjs modules however bretthadley reported comment enabling seems enough solve issue something need production anyway might explain people seeing people develop ie js var webpack require webpack webpack config plugins new webpackoptimizeuglifyjsplugin", "d": "9/2016"}, {"body": "gaearon thank help verified enabling uglifyjsplugin development builds indeed fix issue bretthadley thank pointing funny enough already use uglifyjsplugin production builds would blocked issue good testing development fear tho experience change good testing procedures", "d": "9/2016"}, {"body": "exists addons anymore nt jsxsyntax yet nothing really decided yet people seem like uses well personally using hack wraps code replaces actual fragments runtime time sidenote using would accurate spread merge parent behaves much like array regard also jsxproposals go", "d": "9/2016"}, {"body": "closing since syranide said jsx proposals go jsx repo", "d": "9/2016"}, {"body": "noticed duplicate", "d": "9/2016"}, {"body": "solution component lifecycle method proper concrete situation dom manipulation wrong use state rerender component example last use case fixed header table virtual scrolling table body hope help understand correct flow component constructor initial state value bodyheight null like first render renders table header empty table body rows componentdidmount read header container dom height calculation setstate bodyheight rerender second render bodyheight table body rendered height parameter known set using style component prop rather dom manipulation add components rows additional event listener resize documentbrowser resize add componentdidmount remove componentwillunmount event handler thing like componentdidmount read new dom height values setstate dom manipulation hand react job", "d": "9/2016"}, {"body": "jvorcak using correct place manipulate dom manually render per docs use opportunity operate dom component updated also try use issue tracker solely feature requests bug reports usage questions directed elsewhere like discussreactjsorg stackoverflow thanks", "d": "9/2016"}, {"body": "thanks writeup philippspiess agree may utility providing api discussion past see would mind posting instead going close nt fragment discussion encourage check post proposal", "d": "9/2016"}, {"body": "think biggest issue ownerownee almost never matters awkward mention introductory text maybe figure incorrect use parentchild words text altogether preserving meaning avoiding introducing ownerownee either mrscobbler would like give try", "d": "9/2016"}, {"body": "yes work wording submit pull request", "d": "9/2016"}, {"body": "gaearon svg whitelist", "d": "9/2016"}, {"body": "fixed master sure released", "d": "9/2016"}, {"body": "span trigger onchange events type input bug though html dom works", "d": "9/2016"}, {"body": "nt see evidence react causing determine issue react", "d": "9/2016"}, {"body": "well react handling dom dynamics app", "d": "9/2016"}, {"body": "seem reactrelated issue unless app changing dom response scroll events seeing webview webview", "d": "9/2016"}, {"body": "closing react nothing unusual dom demonstrate happens react nt happen without happy reopen", "d": "9/2016"}, {"body": "see works fine fiddle however reproduce bug page close issue", "d": "9/2016"}, {"body": "show code example mean properties", "d": "9/2016"}, {"body": "simple presentational components like buttons simple forms components reliant api endpoints jsx etc", "d": "9/2016"}, {"body": "would base component class help show code mind would solve problem", "d": "9/2016"}, {"body": "well fair doable advised oop jsx class librarybasecomponent extends reactcomponent static proptypes theme reactproptypesoneof light dark blue red validationtrigger reactproptypesoneof change blur debouncedchange render etc class libraryinput extends librarybasecomponent etc chance react api define practice api safe manner", "d": "9/2016"}, {"body": "would api proposing differ standard inheritance", "d": "9/2016"}, {"body": "futureproof react moving away js classes", "d": "9/2016"}, {"body": "kevinsuttle look like complete example provide full example want share already js sharedproptypesjs export default theme reactproptypesoneof light dark blue red validationtrigger reactproptypesoneof change blur debouncedchange render libraryinputjs import sharedproptypes sharedproptypes function libraryinput props libraryinputproptypes sharedproptypes myownproptype reactproptypesstring librarybuttonjs import sharedproptypes sharedproptypes function librarybutton props librarybuttonproptypes sharedproptypes someotherproptype reactproptypesstring use case missed", "d": "9/2016"}, {"body": "guess merging props messy always reliable depending use case understand talking declarations show example messy", "d": "9/2016"}, {"body": "futureproof react moving away js classes want api extend component might class", "d": "9/2016"}, {"body": "gaearon full example current state things albeit flow syntax extend end merge proptypes aweary see context thread gaearon meaning take words context one easily googleable example", "d": "9/2016"}, {"body": "kevinsuttle honest see harm typing component types explicitly spreading proptypes encourages lazy design opinion unnecessary props props unnatural names exposed less lines code specify specific props component truly universal props like see appeal mixing proptypes seems fine sure want use inheritance exactly proposing", "d": "9/2016"}, {"body": "really api sugar point figure together balancing needsdesires component developers react team", "d": "9/2016"}, {"body": "sorry understand exactly suggesting first comment bit vague broad answered specific example example using spread clear issue gist propose fix react maybe could post examples", "d": "9/2016"}, {"body": "nt know else describe", "d": "9/2016"}, {"body": "complete example using api propose would help like", "d": "9/2016"}, {"body": "see many examples end thing", "d": "9/2016"}, {"body": "like mentioned lot info fb use", "d": "9/2016"}, {"body": "afraid discussion wo nt productive unless show code currently problems proposal mind could approach react side may obvious spent lot time thinking issue much less obvious ask help understand posting simplified code make point unfortunately links posted nt helping understand specifically asking code", "d": "9/2016"}, {"body": "hotell referring element", "d": "9/2016"}, {"body": "nope see attached source slot attribute used tell shadow dom slot projected", "d": "9/2016"}, {"body": "yeah slot attribute exist virtually element related", "d": "9/2016"}, {"body": "pretty old blogpost sure integration broke recommend look modern examples eg date", "d": "9/2016"}, {"body": "gaearon well blogpost still linked bottom came reading guide thought would get uptodate guide uptodate links", "d": "9/2016"}, {"body": "fixed new link appear blog post next time sync docs thanks", "d": "9/2016"}, {"body": "great thanks", "d": "9/2016"}, {"body": "thanks report ccorcos aware tracking", "d": "9/2016"}, {"body": "hey ccorcos working fixes issue listed quite cases would happy add new cases list quite annoying issue got things sorted uncontrolled inputs still outstanding issues figure controlled inputs gist value attribute assigned every value change nt compatible chrome number input would willing take look help brain storm", "d": "9/2016"}, {"body": "aweary ack sorry good timing", "d": "9/2016"}, {"body": "nhunzaker awesome commented pr", "d": "9/2016"}, {"body": "empty string correct value empty input even type could add guard inside allowing pass whatever want rendering component pass empty string element determine value empty", "d": "9/2016"}, {"body": "also going close since usage question really bug issue react usually recommend using stackoverflow platform usage questions try use github solely issue tracking", "d": "9/2016"}, {"body": "aweary bug react throws warning passing empty string input type number proper value error", "d": "9/2016"}, {"body": "jtulk warning nt coming react internal value validation coming proptypes notice warning references likely something like", "d": "9/2016"}, {"body": "aweary oh man sorry waste time slaps forehead", "d": "9/2016"}, {"body": "anybody looking workaround use eg", "d": "9/2016"}, {"body": "debounce works going use settimeout push call next event loop noted pooling means react already returned synthetic event back pool reset fields using debounce anything else requires event exist outside react event handler eg async code need persist design nothing right discussion potentially removing pooling make code work without explicit persisting", "d": "9/2016"}, {"body": "goes contrary principles react set solve around flow data immutability avoiding side effects passing object component snapshot used within event loop distrust gc users may inadvertently create leak whereas may good idea time us need support evergreen browsers capable adequate gc perhaps interim approach reconsidered flagenv var set switch pooling", "d": "9/2016"}, {"body": "ok figure one class mycomponent extends component constructor props thisstate selectedoption onnodeselected e thissetstate selectedoption etargetcontexttext return", "d": "9/2016"}, {"body": "understand correctly trying conditionally manipulate classnames explored classnames module", "d": "9/2016"}, {"body": "usage question use github track bugs react core rather usage questions appropriate place usage questions stackoverflow going close issue feel free continue conversation thread move discussion stackoverflow", "d": "9/2016"}, {"body": "nodejs event loop react render works child normally gets rerendered parent rererenders webpackbin etarget gt ecurrenttarget clickcallbacks react context shouldcomponentupdate nt call setstate within componentwillupdate controlled input refs nt work stateless components ref stateless component better way finddomnode children focus use ref example providecontroller open close focus ref replacement nt rerender store reacthotloader redux promise basics webpackbin sample reactfinddomnode vs thisrefsitem set error message general error page rerenderd router injecting inside jsx nt work neither redux dispatch twice rerender typescript fields javascript typescript value null undefined optional field nullables typings work evolution type definition typescript boolean type literal support type assertion pet pet swim jest mock named import mock component method relay classic relay deferred query relay deferred queryofficial relay send many node queries relay parent container override child variables", "d": "9/2016"}, {"body": "safari react", "d": "9/2016"}, {"body": "pengxueshan need information log value always string likely issue code overwriting value possibly extension using", "d": "9/2016"}, {"body": "aweary sorry code overwriting value navigatoruseragent thanks reply", "d": "9/2016"}, {"body": "pengxueshan good know thanks response", "d": "9/2016"}, {"body": "bug still key uniqueness maintaining correct behavior rerendering list grows elements wo nt able reuse existing instances elements properly keyed", "d": "9/2016"}, {"body": "message misleading keys unique key null undefined div one key defined run look console function validateexplicitkey element parenttype elementstore elementstorevalidated elementkey null return", "d": "9/2016"}, {"body": "means gon na close issue", "d": "9/2016"}, {"body": "propose add one warning nullundefined key extend actual message unique keys misleading situation", "d": "9/2016"}, {"body": "yeah going close since using key recommended requiring key arrays single items nt really see use case rendering array containing one item case see valid additional items might present array later case need use unique keys anyways", "d": "9/2016"}, {"body": "one concern people may inclined dismiss doc pages published long time ago even content still applies", "d": "9/2016"}, {"body": "aweary definitely point tried think converse time methods sunset content nt still apply thought mixins docs still without deprecated recommended flag gaearon blogged may complicated add time component docs time component recommended framework evolves new methods introduced thought rather date docs could note introduced recommended", "d": "9/2016"}, {"body": "colinmegill blog posts dates fwiw ideally docs would updated content longer applied docs reflect current apipatterns recommended core team blog posts little different often opinionated thought mixins docs still without deprecated recommended flag case think update docs even quick link blog post mentioned", "d": "9/2016"}, {"body": "maybe would helpful describe specific context thought came speaks treating docs reflection current patterns upgrading hit new error messages console led page op unsure whether apierror introduced latest version ie docs nt central source truth devs using multiple versions software production see lodash example best practices versioning docs think one docs central source truth docs versioned docs one big blob like kind flag denoting whether method active deprecated versions method amp error messages available appear", "d": "9/2016"}, {"body": "docs one big blob like kind flag denoting whether method active deprecated versions method applies right agree versioned doc system would ideal though prefer add deprecation notices applicable adding dates might wrongfully imply deprecation cases", "d": "9/2016"}, {"body": "cc lacker", "d": "9/2016"}, {"body": "think ideally sort selector lets pick different versions docs different versions library probably would nt catch react warnings pages separate sort system docs know version react introduced specific warning unknown props would useful one line add text nt know correct answer", "d": "9/2016"}, {"body": "cc jimfb", "d": "9/2016"}, {"body": "jimfb acceptable fix tests follow", "d": "9/2016"}, {"body": "higher level even convinced existing behavior wrong actually seems perfectly consistent fix fiddle adding initial state demonstrated controlledness component defined value prop using controlled components value prop specified lifetime component even value empty string understand user might conceptually feel like would ok set value disabled component since sense browser wo nt able modify therefore feels like nt controlled browser think want keep semantics simple defined value prop reason going close issue continue discussion thread reopen thinking changes", "d": "9/2016"}, {"body": "jimfb thought actually defined initially", "d": "9/2016"}, {"body": "warning false positive safely ignore occurs fork using defining components quite compatible solutions side update fork version react recent try cherrypick ignore warning going removed stay lt ships hope helps cool experiment officially provide support things might break somebody keep date", "d": "9/2016"}, {"body": "okay actually concerned would break entirely long remains possible call validators dev mode problem confused mean cherrypicking though expecting kind code change documentation change thanks", "d": "9/2016"}, {"body": "oops sorry meant", "d": "9/2016"}, {"body": "okay actually concerned react would break reactdomstream entirely long remains possible call validators dev mode problem warning exists make clear people call proptypes manually eg validate api responses obscure reasons work production warn development people see warnings almost nobody looks production warning logs proptypes keep working development sure even", "d": "9/2016"}, {"body": "binding", "d": "9/2016"}, {"body": "tryingtoimprove yup updated code", "d": "9/2016"}, {"body": "see probably mapping array called question array come passed component nt really understand use case problem way could make quick something outline problem expectedactual", "d": "9/2016"}, {"body": "sorry right nt really possible without ton work synchronization started attempt solve expose translated documentation better nt chance finish known issue though track", "d": "9/2016"}, {"body": "ok react problem safari problem problem", "d": "9/2016"}, {"body": "thanks report atorgfr also investigating going close since issue react", "d": "9/2016"}, {"body": "yes problem done le dimanche septembre brandon dail notifications githubcom \u00e9crit thanks report atorgfr investigating going close since issue react receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "called react many times destructive react compare return use choose mount unmount move alert see really gets mounted", "d": "9/2016"}, {"body": "thanks comments think got answer example since shouldcomponentupdate returned false subtree rooted react need generate new virtual dom therefore neither needed reconcile dom note react nt even invoke shouldcomponentupdate since shouldcomponentupdate returned false subtree rooted react need generate new virtual dom ie render wo nt get invoked", "d": "9/2016"}, {"body": "right even invoked generally okay unless performance problems testing production build react worry adding", "d": "9/2016"}, {"body": "close since appear issue", "d": "9/2016"}, {"body": "people reference class extends component constructor thisstate false onclick thissetstate true render return also think means render transformed version changed props eg state changed pass value causing rerender forward prop causing rerender well blindly render para render logic could even odd therefore scu vdomeq return true ie vdom compare returns true dom reconciliation required personally find kind discussion helpful help understand react works thanks dan", "d": "9/2016"}, {"body": "sebmarkbage sorry naive referring", "d": "9/2016"}, {"body": "developit kind user provided tuple anything implement equality check guess expect something like indicate scope locale change tuple store id classic flux patterns", "d": "9/2016"}, {"body": "need hot reloading", "d": "9/2016"}, {"body": "agree concept general localization good example scoping updates done immutable state new reference proper level everything pass props nt want add locale interfaces repeat assignment localization use global field windowcurrentculture language changed call deepclone lodash lib main state store forcing components refresh proud workaround situation curious deal", "d": "9/2016"}, {"body": "like try come variant api nt rely mutation intuitively would nt introduce new lifecycle method called next render called renamed component read store relevant global values state construction making rendering consistent new lifecycle method allows refresh state new data global variables ie rename would allow keep normal behavior rendering still work keeping performant end would ways passing data would basically exists axis explicitly passing props child props tunneling data parent children subtree context ish refreshing global data instances tree three strength weaknesses usecases best solution problem edit would go far say explicitly passing eg hierarchy prop counterproductive wrong solution technically wasteful practically cumbersome refactoring becomes nightmare end pass components regardless whether descendants actually need never know want want", "d": "9/2016"}, {"body": "syranide interesting idea put state thinking could also different api like updates kind like previous idea third thing gets field restored demand derived value would immutable", "d": "9/2016"}, {"body": "interesting idea put state thinking could also different api like getdata updates thisdata kind like previous observe idea sebmarkbage nt really think deeply state vs data mainly trying keep simple discussion yeah mean fundamentally props different way getting also lifecycle method like data allows precompute expensive stuff ever feel necessary like allow props probably best worlds yeah intuitively seems like better decision thought experiment data contexts merged props would single interface get props regardless source could override globals contexts contexts props practically would need specify bridges explicitly ie expose components type way tagging components would easy target groups components expect data however means totallyvirtually transparent descendants propsvssubtreesvsglobals becomes local decision rather explicit part components interface", "d": "9/2016"}, {"body": "cc lacker plans work docs think also wanted remove", "d": "9/2016"}, {"body": "yes outlining want probably replace tutorial different one entirely agree remarkable moreadvanced morespecialized thing would ideally tutorial", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "would breaking change anywhere people check event type cc gaearon spicyj intuition worth churn going break many things nt see good migration path", "d": "9/2016"}, {"body": "nt think sorry", "d": "9/2016"}, {"body": "react proffesionalist issue like even minutes honest opinion difficult accomplished think one last thing keeps away achieving result added new property syntheticevent object called camecasedtype pretty much okay examples except jquery one strange behaviour clicks precise every clickevent fired alright clicking outside created component throws error camelcasetype anyone could provide information find things charge behaviours would fix make pr edit done far changed pooling function fourarguments fivearguments pooledclass added proper arguments function calls syntheticevents eventplugins added proper property syntheticevent class proper deletion updated interface syntheticevent updated destructor updated shouldbereleasedproperties syntheticeventjs", "d": "9/2016"}, {"body": "sorry nt want make change nt want advantages camel case opinion solve original use case write similar component code", "d": "9/2016"}, {"body": "okay sounds fair wanted help", "d": "9/2016"}, {"body": "yup thank", "d": "9/2016"}, {"body": "tricky work issues nt know fix wanted often end wasting effort", "d": "9/2016"}, {"body": "warning react message looks like coming webpack might want ask support channels closing nothing actionable react really help especially without seeing code triggers", "d": "9/2016"}, {"body": "similar discussions words explicit purpose also lifecycle methods thus special regular methods sometimes think react team invented rest instead get post clientwillretrievedata clientwilltransmitdatawithparameters supposed bad thing clarity always trumps concise actual behavioral differences get post understood looking words without experience http whereas hypothetical longer names actually could understood people lifecycle implies passage time method names succinctly indicate things within cycle exactly imho etc called mounting sure obvious called says guess pretty well called hard make clearer method names useful developers building applications compound portmanteau words reflect internal engineering complexity seems like hyperbole better concise opinion less helpful nt hint fact interchangeable stand among regular functions large component called whatever would also probably bias lot people use context seems complex probably specialcase thing looks lot like easily seems official give meaningful reasonsargue think wrong current names come names objectively descriptivehelpful would helpful obvious wrong liking", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "ssorallen happy try handle seems simple enough", "d": "9/2016"}, {"body": "gilchenzion go", "d": "9/2016"}, {"body": "reproduce current branch extremely unlikely release bug fixes nt get warnings relatively straightforward upgrade", "d": "9/2016"}, {"body": "gaeron tried reproduce bug works perfectly fine given testcase", "d": "9/2016"}, {"body": "close since april encourage update get bugfixes trying patch likely introduce issues", "d": "9/2016"}, {"body": "thanks taking time file issue bug actually use browser jsdom real could give components crash expecting methods like workaround implemented part work like js import react react import renderer reacttestrenderer function createnodemock return anything function example return focus nothing valid ref gt const foo renderercreate createnodemock expect footojson tomatchsnapshot also accepts argument check return different mocks say hope helps close generally close issues fixed master think adequate solution", "d": "9/2016"}, {"body": "warning could added use component need refs", "d": "9/2016"}, {"body": "since test renderer renders deeply worried might end nonactionable warning soup think fixing case case basis mocks might work better", "d": "9/2016"}, {"body": "disable generation component give another try react thanks quick reply", "d": "9/2016"}, {"body": "issue flow travis nt actually get errors flow locally nuclide maybe something wrong end fix", "d": "9/2016"}, {"body": "first three introduced transaction missing annotation createnodemock element reactelement gt object reactelement application polymorphic type needs use inferrable ones function reacttestreconciletransaction testoptions parameter missing annotation others introduced looks like aweary let know need help fixing happy", "d": "9/2016"}, {"body": "aweary issue travis running flow locally show errors", "d": "9/2016"}, {"body": "seeing issue locally nuclide right possible nt due version mismatch sure integration works maybe global nt version using flowconfigpackagejson", "d": "9/2016"}, {"body": "zpao looks like version mismatch got globally either way make sure run flow terminal well future prs", "d": "9/2016"}, {"body": "actually nevermind looks like better solution p", "d": "9/2016"}, {"body": "cc spicyj sebmarkbage", "d": "9/2016"}, {"body": "dom would get events fired similarly defer dom operations later schedule also would happen think semantics would want super high priority fix though solution call inner handler", "d": "9/2016"}, {"body": "dupe guess", "d": "9/2016"}, {"body": "believe proposals like posted facebookjsx draft specification defined", "d": "9/2016"}, {"body": "also think looking", "d": "9/2016"}, {"body": "closing since nt react specific fwiw welcome use syntax already valid jsx need build knowledge components highly unlikely grammar jsx change support setting props way though", "d": "9/2016"}, {"body": "aweary thanks post jimfb nt specifically want conditionals example", "d": "9/2016"}, {"body": "zpao explain currently possible component get specific props set different child element content", "d": "9/2016"}, {"body": "props would nt get set possible read child props could note nt assume propschildren array use reactchildren helpers makes possible without changing grammar make set props jsx going lot work introduce new concept explain component namespacing actually maps parent prop setting might cool adds bunch complexity little actual value", "d": "9/2016"}, {"body": "nevermind native english speaker getting confused understood supplied argument function prop type", "d": "9/2016"}, {"body": "pass fixed props different way ones easily tag certain names fixed code print warnings change helper", "d": "9/2016"}, {"body": "hey kurtschlueter seem like component initially rendered empty array updated function registered called time position changes case seems happen times sure mean collecting data run initializing fwiw able define initial state instead adding another call", "d": "9/2016"}, {"body": "checked lodash function behaves expected objects created different frames fix issue could either import use lodash function copy isplainobject implementation react codebase", "d": "9/2016"}, {"body": "ugh think revert warning caused frustration many cases", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "fine ps sorry bizarre use case pretty hacky stuff isolate plugins inside iframe", "d": "9/2016"}, {"body": "okay let remove lines associated tests", "d": "9/2016"}, {"body": "spudly want submit pr", "d": "9/2016"}, {"body": "sure seems simple enough take care", "d": "9/2016"}, {"body": "submitted", "d": "9/2016"}, {"body": "recently discovered running one apps development mode console message like one suggested definitely help", "d": "9/2016"}, {"body": "disagreeing imagine lot people would really upset people nt like nonfixable messages console however thought already warning running development mode minified bundle", "d": "9/2016"}, {"body": "however thought already warning running development mode minified bundle good point forgot one seems like people read logs production logging warning development would serve educate different developmentproduction modes already warning devtools maybe could change wording also make clear dev version react always show", "d": "9/2016"}, {"body": "yes repurposing devtools message trick link docs page instructions bundler choice would awesome", "d": "9/2016"}, {"body": "people plenty annoyed devtools message though also hide devtools warning devtools installed something take account well", "d": "9/2016"}, {"body": "expanding copy devtools message reasonable middle ground targets users might familiar react development experience tools least nontrivial overlap users nt know production vs dev react plus least make devtools warning go away really want", "d": "9/2016"}, {"body": "currently support react component reusing nonreactgenerated markup next best bet would use server rendering static nonreact parts mount react components client side inside dom nodes", "d": "9/2016"}, {"body": "thanks report brillout great test case able reproduce using build current master branch", "d": "9/2016"}, {"body": "thanks issue graft used included react deprecated removed see discussion moving back codebase would likely confusing keeping monomorphic advantages going close unlikely want feel free ask clarifying questions", "d": "9/2016"}, {"body": "something lines mean hiding behind dependency bad idea like keep react focused react utilities like often change come go popularity experiment apis etc happy point one people seem like mean somehow best react mentioned aweary tried approach lead stagnation utilities use meaningfully drive design improve fix issues timely manner release granularity also match react best handled community link community package", "d": "9/2016"}, {"body": "pretty sure already", "d": "9/2016"}, {"body": "proxima nova body vs default sans system font san francisco screenshot", "d": "9/2016"}, {"body": "font indeed different fontfamily inherited without current", "d": "9/2016"}, {"body": "touch\u00e9 unchecked browserstyles box inspector point showed inheriting html oops proxima nova r sf r look similar enough fooled could probably make opposed targeting one already headers", "d": "9/2016"}, {"body": "zpao adjusted pr include", "d": "9/2016"}, {"body": "closed", "d": "9/2016"}, {"body": "react thing sounds like want file elsewhere speaking generically references rendered components may want look refs", "d": "9/2016"}, {"body": "need also use transformobjectrestspread plugin nt included react preset", "d": "9/2016"}, {"body": "replace want case", "d": "9/2016"}, {"body": "syranide component exactly want edit state depending key pressed allow keys change value also replace removed characters delete backspace pressed use eventtargetselectionstart eventtargetselectionend removing one character alsmost sure would possible onchange eventtargetvalue changed one would able access old selection range course could choose wrong route implement working onkeydown looked like right option", "d": "9/2016"}, {"body": "dyarmosh lots ways change value input without pressing keys also going modify behavior input extensively done would personally recommend using builtin controlled behavior implement instead", "d": "9/2016"}, {"body": "syranide sorry nt quite get meant implement suggest implement plain javascript instead react component using", "d": "9/2016"}, {"body": "dyarmosh simply use controlled logic react inputs ie use update value input using js way control exact behaviortiming", "d": "9/2016"}, {"body": "going close syranide mentioned using fully control value input breaks input like pasted text warning offer working alternative well using managing input value seems fine nt care pasted text types input nt want use always pass empty function stop warning though ymmv dyarmosh feel free continue asking clarifying questions though", "d": "9/2016"}, {"body": "looks like correct behavior part pass second argument see expect treated differently case since prop treated differently cases", "d": "9/2016"}, {"body": "maybe provide toggle blacklist props want merge scenarios scenario building application using mapped values methods props root component nested components application thanks order pass state dispatch methods props children use issue use statement child pass pass state dispatch methods props renders turn renders kicking infinite loop", "d": "9/2016"}, {"body": "understand specific use case rather bake react think solved userland plenty use cases want passed default less opinionated way opt clarify meant code example spread operator without object spread js const children thisprops const otherprops objectassign thisprops delete otherpropschildren const newchild reactcloneelement children otherprops", "d": "9/2016"}, {"body": "sounds good agree suggestion opinionated based case thanks", "d": "9/2016"}, {"body": "intl failing format value passing case call directly see thing want unformat trying reformat nt bug react good luck", "d": "9/2016"}, {"body": "update looks like count count count count", "d": "9/2016"}, {"body": "think goes deeper per api docs returns total number times callback passed would invoked defined terms correct iterate children behavior incorrect need addressed well", "d": "9/2016"}, {"body": "cc spicyj", "d": "9/2016"}, {"body": "intentionalknown count empty children mapforeachcount skip toarray could change older helpers could break stuff", "d": "9/2016"}, {"body": "intentionalknown nt appear documented count empty children mapforeachcount unless one child child though caveat seem documented least could change older helpers could break stuff ca nt imagine someone seriously depending behavior looking www looks like places either assume children ca nt etc check child null undefined often forgetting could also processing however could wrong someone might depending behavior need update docs contain note", "d": "9/2016"}, {"body": "fine changing want send pr land change www take care cleaning www code might break", "d": "9/2016"}, {"body": "thanks bsonntag able reproduce master well", "d": "9/2016"}, {"body": "strange nt anything close dialog oo try repro outside react ideally basic set operations see react documentcreateelement etc", "d": "9/2016"}, {"body": "zpao try reproducing without react nt able tried setting breakpoints edge look kept crashing maybe vm definitely strange", "d": "9/2016"}, {"body": "zpao realized test case incorrect able reproduce outside react seem issue edge react", "d": "9/2016"}, {"body": "try example uses html machine one works example seem issue edge", "d": "9/2016"}, {"body": "found edge issues", "d": "9/2016"}, {"body": "thanks finding bsonntag since react issue already reported going go ahead close", "d": "9/2016"}, {"body": "thanks hunting amp confirming edge bug", "d": "9/2016"}, {"body": "also like see always runs every render client server props changed including first render props went something conceptually would run constructor following", "d": "9/2016"}, {"body": "already problematic aborted therefore new props never fully rendered ideal place put sideeffects based new props like data fetching would mutated based new could various incorrect assumptions render could aborted never visible screen also nt know often get new props wo nt get every possible props could passed slightly better api would something like return new state without mutating worried making case easier since already possible avoid completely componentkit lived without fine using footguns regardless", "d": "9/2016"}, {"body": "said fiber currently call followed case first render aborted later resumed", "d": "9/2016"}, {"body": "specifically interested single nonconstructor method gets called first render client server case nt clear recommend", "d": "9/2016"}, {"body": "ljharb decide keep particular use case otherwise turns exotic use case recommend since functionally", "d": "9/2016"}, {"body": "nt make sense imo server render html rendering nothing supposed care component level amp believe need would create api surface confusion coming someone wants asynchronous calls events calling trick without adding new api also lets user choose appropriate async timer behaviour whether one nt really see use case might interesting make unmount unsubscriptions async although cases saw nt performance bottleneck afaik making async would tricky forced keep reference unmounted component order use properties idea might interesting concepts although scroll example rather like rendering phase read time need exact coordinates element order scroll", "d": "9/2016"}, {"body": "use cases componentdidserverrender outlined linked issue wasmounted cases user know best scheduling neither best since would conflict next frame rendering would block react also significant difference react still work synchronously walk tree invoke calls may bottleneck right nt fiber yet difference dropping frame sure mean scroll example mean rendering phase", "d": "9/2016"}, {"body": "ca nt fathom synchronous didmount method lots product code still relies reading dom set initial view", "d": "9/2016"}, {"body": "joshduck proposal deprecate didmount use less overusing problem existence primary synchronous use case reading layout rendering result said async layout document something hope eventually get", "d": "9/2016"}, {"body": "gotcha misread kinda stuck original componentdidmount name really declarative calling componentwilldisplay would make clear exclusively intended ui code", "d": "9/2016"}, {"body": "curious breaking existing code change get called server browser instead creating new lifecycle method", "d": "9/2016"}, {"body": "soupaj good question breaking existing code major factor upgrade path also existing components nt designed server rendering may accidentally work important benefit growing ecosystem example lots npm modules nt designed run browser happen work nt rely anything particular things like browserify webpack got much use think lots components rely clientspecific stuff work serverrendering replayed also need way differentiate server client branch might well make explicit branch early would also communicate certain operations valid", "d": "9/2016"}, {"body": "sebmarkbage mostly assumed wanted ask anyways good point able communicate certain operations would valid nt think", "d": "9/2016"}, {"body": "exactly things looking quite times coding views react also something used often wondering react always let prop change render result extra rerendering", "d": "9/2016"}, {"body": "think would confuse hell beginners least named like react already quite verbose adding even verbose calls semantic differences like covey message address specific usecases major impact behind scenes react would nt simple longer would nt possible simply allow lifecycle hooks already return promises functions deferred internal layer decide best functions could get postponed promises could get rejected canceled need arise element visible currently etc", "d": "9/2016"}, {"body": "drcmda think fair point intentionally named subtle semantic differences avoid coming new naming scheme also need leave existing ones long time make upgrading smooth however think existing ones become edge cases relegated legacy think probably need come new naming scheme highlights semantic differences new set preferred lifecycles perhaps keeping upgrade path", "d": "9/2016"}, {"body": "look", "d": "9/2016"}, {"body": "marionebl thanks issue warnings nt logged called made elements actually mounted see", "d": "9/2016"}, {"body": "aweary thanks fast response logging odd choice though really intended discussion", "d": "9/2016"}, {"body": "marionebl log warning issue actually rendering element actually try render element invalid attributes get warning", "d": "9/2016"}, {"body": "thanks report windygex something aware see going close duplicate feel free track updates issue", "d": "9/2016"}, {"body": "mostly use cwm perform setstate based initial props since cwrp nt fire initially could constructor try avoid extending method possible allergy super calls", "d": "9/2016"}, {"body": "yaycmyk could use field initializers would use instead something complicated", "d": "9/2016"}, {"body": "createclass cwm place constructor stuff since ca nt actually define constructor need grep code bases think couple use casesoptimizations use remembering", "d": "9/2016"}, {"body": "sebmarkbage use property intializers though become clumsy need nontrivial amount boolean logic fair cover use cases cwm rare sighting products", "d": "9/2016"}, {"body": "server rendering componentwillmount fires componentdidmount would replace browseronly nature componentdidmount adding expressions detect render mode componentdidmount seems dirty compared current lifecycle function approach", "d": "9/2016"}, {"body": "mars would still fire client use case mind server", "d": "9/2016"}, {"body": "use set data structures things like memoization class constructors reason anymore", "d": "9/2016"}, {"body": "looking back last app used serverrendering componentwillmount use case initial following sebmarkbage suggestion conditionally componentdidmount would fine way allow deprecation componentwillmount", "d": "9/2016"}, {"body": "issue probably recent hackery today given called actually trust mounted stuff like register descendants ancestor use information render another ancestor sort dom parallel form two inputs one button keydown text input causes form submit words presence nonpresence another ancestor changes behavior another ancestor element also radio groups saying keep componentwillmount great way create relationships ancestors context would nice either componentmountcancelled sounds unlikely call cdm server reason cwm first class api building kind relationship ancestors context like idea looks like usecase react router api js matches location descendant components context rendered beautiful nt reason matters server rendering thanks talks sebmarkbage got plan b little think might get flicker move cdm exciting pretty sure kenwheeler new employs technique also could probably move", "d": "9/2016"}, {"body": "ryanflorence extend constructor case though cdm really last resort since way less efficient needing second render pass", "d": "9/2016"}, {"body": "would ever case need compute data perform certain routine component mounts otherwise would nt able component constructor needed wanted fire redux action component mounts first time wanting attach event listener component mounts worried might niche use cases nt thinking ajwhite curious think", "d": "9/2016"}, {"body": "needed wanted fire redux action component mounts first time nickzuber coming mention work rails app uses reactrails server rendering collection smaller reactredux client apps pattern working well us dispatch actions populate reducers initial data way easily pass data app rails view layer using reactcomponent populate state rendering", "d": "9/2016"}, {"body": "ryanflorence response fiber implementing use case nt really need since use case server anyway also nt need technically still thing constructor even though frowned upon however think use case serversideonly might make sense would fire rendering still requires twopasses preserves capabilities", "d": "9/2016"}, {"body": "aflanagan use field initializer pattern constructor used initialize state props", "d": "9/2016"}, {"body": "sebmarkbage ah yes think could adopted strategy moved classes nt considered could start constructor", "d": "9/2016"}, {"body": "help tackle server use case new method like componentdidrender browser lifecycle come cdm idea jsx rendered compiled vdom yet mounted somewhere", "d": "9/2016"}, {"body": "one use case also use case know basically read global mutable state reset later children already rendered example children rendering causes scroll position page change technically thing constructor kind iffy impure constructors", "d": "9/2016"}, {"body": "wanted chime causes lot confusion serverrendering sideloading use cases seems like good option nt really work way expected since synchronous think use case would reconsidered deprecation still using nt convenient way add constructor", "d": "9/2016"}, {"body": "airbnb primary use cases seed global translation singleton phrases come props needed render path necessarily available construction time bootstrap alt stores props translations break former case lifecycle method deprecated since primarily handle phrases top level tree ordering nondeterminism concern us addition constructors never side effects provides us appropriate place put side effects basically happen per environment executes client server course would clientonly", "d": "9/2016"}, {"body": "thought github search might useful see use cases sorted recently indexed represents people actively using componentwillmount wild today note must logged search code across public repositories", "d": "9/2016"}, {"body": "ljharb basically lazy initialization global state lot lazy initialization methods since generally unobserved nt consider bad practice difference lazy dependent props guess assume props never change wo nt ever two different subtrees different phrases otherwise people normally use use case given already lot assumptions involved particular use case maybe bad constructor hack serverside assume context used single request time async rendering", "d": "9/2016"}, {"body": "strongly prefer something besides constructor hmm thought deprecated already p yes right whether async would reevaluated reconstructed new every request", "d": "9/2016"}, {"body": "something similar could sure run upon every new set props including firstinitial one prior render would suffice use cases think would probably solve robustly adding new lifecycle method question", "d": "9/2016"}, {"body": "adding consistent lifecycle method handle props would super useful many cases common fetch x thispropsxid benefit running render show loading indicator without requiring second render problem use cases want run server like ljharb fetching data want client cases edit maybe branch another issue", "d": "9/2016"}, {"body": "ever time browser context componentwillmount called immediately constructor far remember componentwillmount effectively constructor function served purpose classes adopted came constructors fact much earlier versions react componentwillmount always called construction iirc made server rendering painful changed componentwillmount called browser render context server render context getinitialstate effective constructor uses seen componentwillmount constructors expect run browser componentdidmount nt right place move code due double render moving class constructor check might adequate nt see reason concerned side effects react component constructor concerned within componentwillmount part component construction since user code never instantiates components directly library code typical reasons avoid side effect constructors nt apply react components sebastian maybe another option slightly change behavior componentwillmount rather remove making explicitly part construction avoid user code writing browser check preserve majority existing code would possible within fiber", "d": "9/2016"}, {"body": "nt think ever used anything else performing performed blocker would nt config field matter differences amp classbased apis see three possibilities deprecate api completely nt know planned foreseeable future introduce new field consistent class behaviour keep name change behaviour match ryanflorence example codepen pass extra argument function inject see reactcomponentjs access", "d": "9/2016"}, {"body": "alternative cwm use server rendering cwm deprecation seems fine something like componentwillserverrender said would great", "d": "9/2016"}, {"body": "leeb uses seen componentwillmount constructors expect run browser nt sound right componentwillmount unlike componentdidmount run server", "d": "9/2016"}, {"body": "sebmarkbage bloodyowl work constructor component never actually mounts still problem cwm nt chance unregister problem nt know render thing actually rendered nt get rendered way knowing got aborted", "d": "9/2016"}, {"body": "multiple inheritance levels componentwillmount execute object fully constructed", "d": "9/2016"}, {"body": "use components mobiletwittercom fetch data report page impressions initial anticipation fullpage ssr navigate alternative pages etc assumed render get feature switch values render depends set initial state based props looks like could done necessary", "d": "9/2016"}, {"body": "clarification createclass always happen time capabilities difference use others return initialize field meaning technically everything still however already good understanding practice nt sideeffects reason deprecate lot confusion works safely usually answer nothing lifecycle void return thing sideeffects common use things like subscriptions data fetching without realizing edge cases wo nt work well purpose would highly discourage sideeffects unforeseen consequences even though technically could constructor turn would help upgrading something like fiber without expecting lot race conditions break app subtle way", "d": "9/2016"}, {"body": "ryanflorence would feature test work server client use however explicit serveronly would better mstijak generally discourage deep inheritance design decision made due complications like one even use common practice rely superclasses calling back subclasses initialization purposes michalwerner would ok serverside alternative fire component tree rendered ie semantically works rely invoked early", "d": "9/2016"}, {"body": "sebmarkbage server sole purpose produce html things rendering seems pretty useless overall", "d": "9/2016"}, {"body": "ljharb use case ryanflorence throw away buffered html redirect render different response based rendered nt work streaming necessarily works well async parallelizeddistributed rendering another use case logging components rendered nt done html produced", "d": "9/2016"}, {"body": "using avoid annoying constructors verbose call super etc set initial state", "d": "9/2016"}, {"body": "sebmarkbage got two usecases know miss keep html use status throw away html redirect instead either case discussed privately two pass render", "d": "9/2016"}, {"body": "use case using avoid error constructor state depends props defined without calling state change code could reused parts btw like idea remove advantages provide lot questions differs", "d": "9/2016"}, {"body": "sebmarkbage think cases solved simply using context store whether component mount server would make extremely simple airbnb use case creating hoc defines init translations whatnot constructor would enough wrapped component always used store statics props alone enough bootstrapping ca nt think right something done constructor alone would probably start throwing warning next version deprecate bit later", "d": "9/2016"}, {"body": "using dependency library wraps components hoc load data dependencies client server works keeping track loaded dependencies using promises calling multiple times longer new dependencies load thinking necessary could simply use calling promises set state synchronously next call dependencies loaded client still use setting state think makes sense deprecate even point isomorphic applications also nt think necessary add method easily code logic constructor", "d": "9/2016"}, {"body": "alexgalays wrote using avoid annoying constructors verbose call super etc set initial state may important argument keeping important one", "d": "9/2016"}, {"body": "ca nt call thissetstate component mount component mount supposed setting listeners say ca nt thing componentdidmount main difference opinion setstate always works componentdidmount work componentwillmount componentwillmount componentwillunmount perfect explicit places setup tear listeners without cluttering componentdidmount often logic well cents", "d": "9/2016"}, {"body": "catmando alexgalays think would like discouraging use soft deprecation hard deprecation would take long time expect people would using field initializers prevalently also let avoid creating bloat constructors correct works avoids second pass render", "d": "9/2016"}, {"body": "sebmarkbage right stand corrected remember instances though would get error saying something like ca nt call setstate mounting component trying call setstate componentwillmount", "d": "9/2016"}, {"body": "anyway know component rendered server w fibers cdm constructor cwm ca nt trust current approach send object mutate check object see need second pass render use object second pass know render differently time far tell way know something nt render server", "d": "9/2016"}, {"body": "single projects never understood needed define static methods fetching data server side full control know exactly called", "d": "9/2016"}, {"body": "good time touch dom unless section fully nt case bit tricky since middle update process react nt finished work part work restoring focus blurring react restores focus done use blur work react finished updating going close say way want support otherwise dealing interrupting updates hope clears", "d": "9/2016"}, {"body": "faalsh thanks reporting well try look soon", "d": "9/2016"}, {"body": "realize pretty infeasible prepare pull request add type error message unless objections", "d": "9/2016"}, {"body": "sure repro little luck enough components event management event handlers sorry unfortunately helpful likely cause issue low priority backlog something working intended please try extract reproducing example app trim takes time really helps us find cause react version rather old version many bugs fixed since released mind reproducing recent version thanks", "d": "9/2016"}, {"body": "sounds suspiciously similar saw gaearon", "d": "9/2016"}, {"body": "pushed explanation given null activates uncontrolled mode inputs seeing behavior", "d": "9/2016"}, {"body": "nhunzaker thanks heads reading still clear seeing work toggling unless use seems inconsistent", "d": "9/2016"}, {"body": "brigand see list prefixes see working example without warning", "d": "9/2016"}, {"body": "thanks", "d": "9/2016"}, {"body": "looks like bug ieedge filed", "d": "9/2016"}, {"body": "temporary hack select component get around issue componentdidmount const selectedindex thiselementselectedindex thiselement amp amp selectedindex gt const options thiselementoptions const tempindex selectedindex optionslength", "d": "9/2016"}, {"body": "cc csuwildcat", "d": "9/2016"}, {"body": "slight update tappleby patch original nt work select contained single option code detects case temporarily adds additional option element runs option toggle fix edge bug remove transient option componentdidmount let selectedindex thisrefsselect selectedindex thisrefsselectselectedindex", "d": "9/2016"}, {"body": "proposal default return add way inject custom mock ie offer implementation returns things look like dom nodes anything would make test renderer way usable good test verify handle components defined", "d": "9/2016"}, {"body": "offer getmockdominstance implementation returns things look like dom nodes anything kind object would return something looks like users could return instance jsdom making really easy especially jest edit might ambitious actually seem better let return object implements ever api actually using calling return would work multiple refs", "d": "9/2016"}, {"body": "think object noop methods complete dom api might enough think worth making act realistic like jsdom always corner cases sure hard tell like actually ship version able iterate", "d": "9/2016"}, {"body": "agree api users could return something sparse full featured want supporting multiple refs would know instance type return", "d": "9/2016"}, {"body": "aweary think get relevant argument look wants", "d": "9/2016"}, {"body": "clarify talking internally api provides object noop methods complete dom api allowing user provide method like could return whatever object want", "d": "9/2016"}, {"body": "main thing worried returning real dom nodes people expect children full hierarchy rendered accurately wo nt case", "d": "9/2016"}, {"body": "clarify getmockdominstance talking internally api provides object noop methods complete dom api allowing user provide getmockdominstance method like getmockhostinstance could return whatever object want mean let user specify maybe option separately provide implementation returns something methods like dom node throw cases third party package first good enough people use might well ship make sense react native though want make default keeping separate also lets user add special cases js reacttestrenderercreate el getmockref el eltype input amp amp elprops datamyspecialsnowflake return getmyweirdinstance el", "d": "9/2016"}, {"body": "question nt provide method would return like meaning always user responsibility implement optionally use package default mock objects", "d": "9/2016"}, {"body": "think default slightly safer one ever expects refs nulls matters today maybe make future would solve issue warning", "d": "9/2016"}, {"body": "fix warning somehow first initial impression better null likely go little longer noticing methods missing likely confusing", "d": "9/2016"}, {"body": "good point agree", "d": "9/2016"}, {"body": "thanks issue chrismiceli actually expected behavior related react psuedoclass input elements check example behavior without react working example forked uses css sibling selector style adjacent sibling disabled", "d": "9/2016"}, {"body": "thanks tried opening issue counter intuitive expect", "d": "9/2016"}, {"body": "filename server api url accessing file check code links reactjsreacttutorialblobmasterserverjs", "d": "9/2016"}, {"body": "click event registered react event system using registering event handler completely separate react react normalizes delegates event handlers registered react components like getting normalization implemented react fix expected behavior ios see want capture click events anywhere page try rendering fills page attack handler", "d": "9/2016"}, {"body": "figured ideal full page use case parts page react", "d": "9/2016"}, {"body": "yeah want react normalize click event needs registered via react react uses toplevel listener delegate events components use react nt know event handler exists", "d": "9/2016"}, {"body": "going forward possible react provide api cater scenario maybe registers react events top document level somehow going react architectural principles", "d": "9/2016"}, {"body": "see discussion topic", "d": "9/2016"}, {"body": "calling nt seem like pattern want encourage honestly sure suspect common ie dispatching redux actions unmount trigger synchronous render nt really seen pattern anywhere usually recommend using stateful parent component hoc provides state via props like redux conditionally render small example using js class app extends reactcomponent constructor super thisstate mounted false componentdidmount thissetstate mounted true render thisstatemounted return else return reactdomrender documentqueryselector root", "d": "9/2016"}, {"body": "suspect bug react submit pr failing test", "d": "9/2016"}, {"body": "thanks report atimmer seem regression somewhere take look", "d": "9/2016"}, {"body": "done debugging prior reporting seems caused way radios updated radios react updated dom first updating attributes name id etc updating whether checked going list third radio checked list second one checked following happens first radio updated nothing note happens second radio updated second third radio checked different third radio updated updating attributes browser detects already radio name unchecks one second radio button third radio unchecked react state radio unchecked radios checked fourth radio updated nothing note happens", "d": "9/2016"}, {"body": "keying solves problem probably problem input realizing name changedhandling correctly", "d": "9/2016"}, {"body": "atimmer yupp seeing well verified occurs master keying probably best bet workaround going see exactly caused regression", "d": "9/2016"}, {"body": "reactrouter part react please direct issues better yet try posting question stackoverflow reactrouter tag since seems usage issue thanks", "d": "9/2016"}, {"body": "aweary mistake thank", "d": "9/2016"}, {"body": "jwietelmann probably less crude went flowtype used babel parse could clearly identify things like enums prop types generate metadata format want something similar repo could modify makeproptypeastjs generate metadata use test generator also looks nicer source code", "d": "9/2016"}, {"body": "basic problem jwietelmann bunch custom proptype validators tests end calling validator directly code nt public similar suggestions short moving flow typescript", "d": "9/2016"}, {"body": "heh realized warnings output via", "d": "9/2016"}, {"body": "busticated yep call test behavior spying need make sure displayname tested component random every test duplicate warnings nt get suppressed remove warning next major release forever either", "d": "9/2016"}, {"body": "gaearon heh yeah probably better approach supplying getting fired people say works fine", "d": "9/2016"}, {"body": "haha testing works make sure remove react wo nt need", "d": "9/2016"}, {"body": "gaearon make proptypes throw hard production work development would great solution", "d": "9/2016"}, {"body": "really solution throwing hard production reason warning added first place warning exists educate users breaking change react land breaking change remove warning necessary", "d": "9/2016"}, {"body": "understand meant would work check development anyway", "d": "9/2016"}, {"body": "gaearon aside lot initial worries stemmed fact error message said may work next version future changes make something stop working production without affecting development would good make error messages say may work production next version", "d": "9/2016"}, {"body": "fair enough wanted message seem strict learn faster use cases think relax take pr adds production warning would like make", "d": "9/2016"}, {"body": "sure", "d": "9/2016"}, {"body": "tested code got error script failed line", "d": "9/2016"}, {"body": "allowed append child nonparented node specifically problem children", "d": "9/2016"}, {"body": "select specific problem html tags work correctly", "d": "9/2016"}, {"body": "looks like select determined htmlelement", "d": "9/2016"}, {"body": "looks like found reason least solution helped fix issue smile", "d": "9/2016"}, {"body": "close nt look like something fix side workaround", "d": "9/2016"}, {"body": "yes thank reactjs issue smile", "d": "9/2016"}, {"body": "gaearon ran today javascript class baz extends reactcomponent render return baz class bar extends reactcomponent render const foo thisstate reference error return bar class foo extends reactcomponent constructor props super props thisstate loaded false componentdidmount promiseresolve gt thissetstate loaded true catch gt consolelog swallowed render const loaded thisstate return loaded reactdomrender documentgetelementbyid root example result swallowed errors wrapping settimeout results error swallowed javascript class baz extends reactcomponent render return baz class bar extends reactcomponent render const foo thisstate reference error return bar class foo extends reactcomponent constructor props super props thisstate loaded false componentdidmount promiseresolve gt settimeout gt thissetstate loaded true catch gt consolelog swallowed render const loaded thisstate return loaded reactdomrender documentgetelementbyid root ignorance promises viewing pleasure", "d": "9/2016"}, {"body": "example result swallowed errors yes swallowing handler going catch error thrown chain including one caused due call even nt use directly may problem code call uses example redux want catch errors resulting want catch network failures let imagine actually want use second argument instead case unless later chain error uncaught good promise polyfill native promises chrome maybe browsers displayed", "d": "9/2016"}, {"body": "closing since reproducible case reproduce react swallowing error please file issue case reproducing", "d": "9/2016"}, {"body": "awesome thank nt considered fact setstate resulted throwing therefore catch handling think even tweeted recently fri sep pm dan abramov notifications githubcom wrote closing since reproducible case reproduce reac swallowing error please file issue case reproducing receiving commented reply email directly view github mute thread", "d": "9/2016"}, {"body": "hard remember spend hours debugging worry", "d": "9/2016"}, {"body": "issue tested locally verified using works expected chrome test ios simulator also verified fullscreen icon appear likely either issue google slides something explicitly disallowed hard say either way may want direct question google product support platform going close nothing actionable us feel free ask clarifying questions", "d": "9/2016"}, {"body": "zpao thanks answer aweary thanks help yes ask google product support platform really appreciate answer", "d": "9/2016"}, {"body": "issue jest output pass testsintegrationspecjs console simplified repro js import react react import provider reactredux import renderer reacttestrenderer import applymiddleware createstore redux import thunk reduxthunk import app componentsapp import rootreducer reducers jestmock reactlibreactdefaultinjection const store createstore rootreducer applymiddleware thunk describe foo gt bar gt const component renderercreate expect componenttojson tomatchsnapshot", "d": "9/2016"}, {"body": "thanks tonygentilcore try reproduce mocking", "d": "9/2016"}, {"body": "seems suspicious nt suggested post gh issue workaround following remove test spits fail testsintegrationspecjs test suite failed run", "d": "9/2016"}, {"body": "tonygentilcore check expected behavior moment ca nt use reacttestrenderer another library uses reactdom try call resolved release able reproduce unknown prop warning without mocking test components use reactdom suggested post gh issue workaround following feeling likely causing issue know saw recommendation super interested knowing", "d": "9/2016"}, {"body": "xesued guys using workaround", "d": "9/2016"}, {"body": "yes use workaround came know recommendtations issue guess tolerate warning till", "d": "9/2016"}, {"body": "yes sep pm notifications githubcom wrote yes use workaround came know recommendtations issue facebookjest guess tolerate warning till receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "thanks guys going close since resolve root cause workaround isnt really recommended", "d": "9/2016"}, {"body": "aweary see new rc npm see branch sure fix already master please comment whether fix else available", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "yupp expected behavior react event system check detailed explanation", "d": "9/2016"}, {"body": "zdila ping interested hearing reproduce", "d": "9/2016"}, {"body": "trying hard reproduce succeeded set app ca nt reproduce must special conditions get never reproduced minimal code plunker regarding development mode meant using webpack babel compile app try later already spent hours", "d": "9/2016"}, {"body": "note able reproduce set ff debugger stop exceptions stopped inspected pathname real file", "d": "9/2016"}, {"body": "solution seems correct way handle nt think react automatically iterate completion generator function gets guarantee generator terminate think better keep intent explicit creating array generator first since thing infinite array introducing values potentially nonfinite react rendering algorithm would good decision opinion", "d": "9/2016"}, {"body": "ksmithbaylor something like could useful ifwhen react integrated layout component could render infinite scroll list like facebook news feed generator something similar react could render much required fill user screen otherwise component would nt know big array generate would need always overestimate thus wasting cpu memory", "d": "9/2016"}, {"body": "found ago hav nt time yet check issue transpiling actual bug", "d": "9/2016"}, {"body": "jimfb interesting use case nt thought", "d": "9/2016"}, {"body": "right require iterables yield children time iterate otherwise ca nt diffing etc properly nt think likely change soon likely react would internally basically arrayfrom call writing explicitly like suggested reasonable choice", "d": "9/2016"}, {"body": "shown seems like generally bad idea breaks reacts implicit indices result ever changes must sure key everything explicitly also fail see point thing react keep calling done generator nt really provide benefit far tell becomes equivalent slower less idiomatic point using generators show technically probably makes sense another form iteration", "d": "9/2016"}, {"body": "syranide point using generators show shorter example would shrink really slower know overhead regenerator couple years browser support good would still slower array breaks reacts implicit indices implicit indices even good thing mean nice prototyping ignore warnings slowness practice everything needs key anyway nt fact using generator would discourage using array index nt one usually ends bad choice elements shift array spicyj right require iterables yield children time iterate would yield children unless stateprops change nt fundamentally different arrays think ksmithbaylor decent point generators never terminate however react could handle better crash browser react could stop iterations x milliseconds throw error jimfb idea interesting imagine kind infinite list table would handled specific component anyway anyway respect core team decision syntax sugar", "d": "9/2016"}, {"body": "meant react already iterates iterable seems incompatible generators", "d": "9/2016"}, {"body": "shorter imho sure shorter syntax definitely preferable extent important ignore purpose behind functionality either generators special class functions ie resumable functions simple iterables similar really slower know overhead regenerator couple years browser support good would still slower array almost certainly always slower generator functions require stack must allocated stored heap rather stack involves restoring cpu registers every time called imaginable could optimized away circumstances ie nt use async considering complexity dynamic nature js seems unlikely implicit indices even good thing mean nice prototyping ignore warnings slowness practice everything needs key anyway nt fact using generator would discourage using array index nt one usually ends bad choice elements shift array implicit indices work perfectly everything dynamic lists generator functions may promote behavior people generate static content way like someone issue also primarily performance maintaining correct behavior statefulanimating components", "d": "9/2016"}, {"body": "tried checking chrome console debug", "d": "9/2016"}, {"body": "tengo una idea algo loca es porque desarrollar un cli propio de react en el que se controle toda la l\u00f3gica necesaria para empaquetar las aplicaciones desarrolladas en react js", "d": "9/2016"}, {"body": "another explicit recommendation since purpose staging simulate production closely set react js libraries check run production exponent set another env variable distinguish staging production necessary ex cdn config staging mishaps nt break prod generally want staging look production", "d": "9/2016"}, {"body": "problem every dev must learn doesnt mean production might well staging nt necessarily mean use production apis might appear small kind things add another small leap complexity madness imho", "d": "9/2016"}, {"body": "moesattler yes since staging environment supposed mirror production environment nt use work node modules code checks environment different env variable things different", "d": "9/2016"}, {"body": "moesattler dev nt know production staging configured means code checks run identically staging production good thing simulating production one main reasons staging environment default people unaware write code right thing staging means every dev must learn write includes devs team well authors npm packages use check well point setting staging fundamentally right thing purpose staging closely simulate production even devs unaware fact lead write code behaves staging production naturally fall pit success", "d": "9/2016"}, {"body": "things edge versions annoyingly confusing reasons seperate numbers edge app edgehtml difference chrome around browser url bar bookmark sync etc thats edge app thing actually renders code thats edgehtml blog post explanation basically latest release edge regression actually fixed latest builds depends yall want support zpao could super small feature detect fallback something like domparser setchildren olderbroken versions happy write anything create pr lem know would like", "d": "9/2016"}, {"body": "thanks getting back us patrickkettner totally get confusing versions gecko amp firefox versioning independent long taught things couple followup questions regression range include public versions nightlybeta builds fix make stable versions yet assuming regression stable version aggressive uptake new versions set people affected really small especially already fixed edge trying figure worth taking another line code really needs live month realistically still like said ability handle thanks browsers huge deal", "d": "9/2016"}, {"body": "try using work change", "d": "9/2016"}, {"body": "ping patrickkettner rush get chance could take look zpao follow questions thanks", "d": "9/2016"}, {"body": "super sorry zpao aweary last update got lost inbox would shipped public versions uptake great new releases since edge tied windows updates would order months almost certainly less year would affect edge users stable builds", "d": "9/2016"}, {"body": "got issue pilaas advice works expected thanks", "d": "9/2016"}, {"body": "worth still seeing react versions including", "d": "9/2016"}, {"body": "finally came back around tried things hit bit wall though sure progress might need umd bundle going get tedious main approach try solve bring back old umd shims bundling seems work fine still nt play nicely together using webpack main reason seems webpack detection alias using require inside specifically current umd ship reactdom single call require gets rewritten full browserify bundle new reactdom bundle nt get rewritten nt look webpack module registry find react instead looking distscoped registry try give time tomorrow since want ship might take drastic measures maybe resolve use webpack bundle dist files bite bullet write wrapper around bundle browserify generates could try thought gaearon", "d": "9/2016"}, {"body": "think problem probably gets worse throw derequire collapser back mix though nt tested see play declaring react external", "d": "9/2016"}, {"body": "maybe resolve use webpack bundle dist files might opinion would simpler bunch postprocessing plugins might wrong", "d": "9/2016"}, {"body": "sidebar proposed bind operator", "d": "9/2016"}, {"body": "meet problem reason thank", "d": "9/2016"}, {"body": "related", "d": "9/2016"}, {"body": "scheduled released", "d": "9/2016"}, {"body": "would expect ship within two weeks guess like see land release looks like happen provides way work around another annoying issue test renderer needs fixed regression break lot projects ship without fixing know zpao planned look think fixedmerged good go", "d": "9/2016"}, {"body": "thanks update", "d": "9/2016"}, {"body": "problem solved using callback described examples", "d": "9/2016"}, {"body": "gaearon sorry missed comment could give mock object looks like dom node actually anything would preference asserting children frame component", "d": "9/2016"}, {"body": "nt think providing mock dom node would best solution implement full dom node api actually used nt throw would better could optional integration jsdom whatever user chooses use use full implementation dom avoid implement maintain mock api", "d": "9/2016"}, {"body": "context experimental ca nt say sure happen asking back think going go ahead personally think would best placed rather nt think know anything context deals passing context parent child would duplicate logic across separation concerns part would look something like interim solution looks ok could move form higherlevel container componentfunction though move workaround presentational layer container takes context acts first parent pass context something like jsx reactdomrender wrapwithcontext mycomponent bob says hello reactdomrender", "d": "9/2016"}, {"body": "benjdlambert exactly correct context associated elements therefore createelement right place always create wrapper mentioned toplevel api please nt rely unstable function reserve right break time without notice", "d": "9/2016"}, {"body": "encountered errors well upgrading react big project main issue first render page reload error somewhere break initial rendering eg undefined used prop get error nothing also often leads cpu usage manually kill chrome process properly reload pain first reload working route navigate another route broken rendering properly get errors one actual one interested would thought would caught root render trycatch nt anyone encountered error swallowing behavior js const renderrootel nextroutes gt dev const redbox require redboxreact default eslintdisableline globalrequire else render rootel renderrootel routes", "d": "9/2016"}, {"body": "main issue first render page reload error somewhere break initial rendering eg undefined used prop get error nothing likely react fault try simplify setup see swallows real error might library using silent promise polyfill hot reloading tool catch promise catch code etc demonstrate react swallowing error please file issue example", "d": "9/2016"}, {"body": "gaearon also error using package ios working fine android keeps crashing ios ca nt ignore error since whole app stopping", "d": "9/2016"}, {"body": "fixed react working fine android keeps crashing ios ca nt ignore error since whole app stopping believe explained several times thread let reiterate warning entirely unrelated real errors possibly cause app crash warning error reason app crashes consequence warning used fire app code react throws error error component used get performance measurement code inconsistent state causing warning react see warning anymore however solve errors application code cause app crash reason see real error consider checking code swallows trycatch somewhere babel plugins wrap code unexpected trycatches libraries use wrap code trycatches promise polyfill native implementation swallows errors", "d": "9/2016"}, {"body": "gaearon error library thread", "d": "9/2016"}, {"body": "hope nt mind asking error appears application sporadically accompanied error suggests undefined refresh page error appear although mentioned error appears infrequently suggests timing issue could ask need wait populated var thing thispropsdatathingsfilter function obj return objid selfpropsthingid", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "jin made progress issue busy would love take stab", "d": "9/2016"}, {"body": "slruh yep progress midst addressing gaearon comments feel free suggest improvements", "d": "9/2016"}, {"body": "take look", "d": "9/2016"}, {"body": "similar problem select file twice called chrome twice firefox given file content may changed feel latter correct resort using", "d": "9/2016"}, {"body": "hey everyone thanks sharing thoughts still intend provide patent grant addition bsd license facebook open source projects including react however know legal wording may sound confusing worked legal team publish small faq addresses common misconceptions seen far find faq legal reasons able answer additional questions hope helps cheers", "d": "9/2016"}, {"body": "faq nt answer question copied additional permission granted patents understanding solo bsd license already grants essential claims react bsd license royalty free oss license approved osi requires oss licenses permissive without additional license consequently think permission granted patents additional bsd license hand faq says patents wo nt revoke copyright license bsd mean patents might revoke patent license granted bsd license possible even think longer bsd license appropriate use term bsd target prohibited lawsuit patents broad patents grants patent mentioned essential claims react contrast intends protect software react company facebook patent lawsuits licensees nt think onesided unfair course understand wishing think might legitimate option makes react difficult used big commercial companies hundreds products services tens thousand staffs tens affiliates mean companies almost impossible reach consensus licensing patents including ones obtain future freely long use react facebook users react result avoidance use react comparison similar license system aomedia grants necessary claims codecs prohibits patent lawsuits codecs things aomedia members case permitted rights placed obligations balanced think may said aomedia even antimpegpatent party nt offer aggressive antipatent license patents react goes apache license former license react way licensees licensees patent trolls patent trolls patent trolls nt practice real businesses patent business licensee potential competitor time issue would surface really put weight avoidance patent lawsuits licensees popularity react nt hope choice would like hear iaal person", "d": "9/2016"}, {"body": "could make immutable since react recreates whenever call exactly sebmarkbage keyanzhang less recursively deep freezing serializing state init diffing thereafter would theoretically need recreate", "d": "9/2016"}, {"body": "would suggest going one two ways treat like text input leave developer validate input format prevent invalid numbers etc created validators want everything works great text input nt get number pad mobile prevent invalid input let developer handle edge cases meanwhile allow multiple e enforce must always beginning effectively created logic text input", "d": "9/2016"}, {"body": "think different operations specifying complete object specifying partial object using terminology potential ts feature terms component state type type whereas would take", "d": "9/2016"}, {"body": "issue still present version pasting mouse work pasting keyboard ie seems affected chrome edge work fine", "d": "9/2016"}, {"body": "team also verified pasting mouse pasting keyboard works fine using instead others mentioned sure right thing option gets fixed", "d": "9/2016"}, {"body": "suggested approach meantime use oninput rather onchange interested know side effects using oninput anyone could point", "d": "9/2016"}, {"body": "checkout answer think helps resolve issue oninput onchnage together", "d": "9/2016"}, {"body": "guys think enabling shallow rendering support test renderer see", "d": "9/2016"}, {"body": "maybe make prettyprinter understand output render react element nt know else might add would helpful", "d": "9/2016"}, {"body": "ah interesting idea could allow people specify deep react components render would prefer shallow render api test renderer", "d": "9/2016"}, {"body": "nt think understand want test renderer deep renders gives json blob inspect shallow renderer api shallow renders gives react element tree inspect want something different", "d": "9/2016"}, {"body": "understanding shallow rendering renders one level deep separate renderer well wondering could use test renderer add api returns shallow rendered tree level deep makes sense sorry missing something", "d": "9/2016"}, {"body": "would advantage existing shallow renderer", "d": "9/2016"}, {"body": "sure date works render target use use shallow renderer reacttestrenderer", "d": "9/2016"}, {"body": "usage example docs technical implementation nt think would describe exactly separate renderer nt rely either reactdom reacttestrenderer able use time either", "d": "9/2016"}, {"body": "since already pretty printer react elements diff engine seems like snapshotting shallow render output work right", "d": "9/2016"}, {"body": "return value slightly different format react elements instead json meant adding support prettyprinting react elements", "d": "9/2016"}, {"body": "got yeah already prettyformat gaearon snuck", "d": "9/2016"}, {"body": "exactly problem facing well migrating big app react able use use root component page render dom well reactroots inside workaround compare inside event handler would still interesting behaviour considered bug react devs", "d": "9/2016"}, {"body": "may ask version released issue serious problem us", "d": "9/2016"}, {"body": "facing issue case ended replacing onchange oninput recommended react least works", "d": "9/2016"}, {"body": "nt know pertains problem facing moment rendering static content server basically lot text react component expects text provide prop component rendering client react expects content get point asking server send content essentially already client screen put content hidden div try populate prop deserializing send big file first render server rendered component static content content serialized hidden div something missing work around", "d": "9/2016"}, {"body": "fixed", "d": "9/2016"}, {"body": "jimfb seems fixed recently babel pr update dou another process keeping dependencies date", "d": "9/2016"}, {"body": "hannesj think paul usually updates dependencies batches yeah suspect pr would welcomed cc zpao", "d": "9/2016"}, {"body": "recently saw error production tried make minimal reproduction case nt good enough understand react internals recreate situation think happens error thrown reconciliation could nt figure right order array emptied element get left old next update considered stale", "d": "9/2016"}, {"body": "really support recovering user errors thrown reconciliation case seems expected", "d": "9/2016"}, {"body": "bug strange though happens move subcomponents custom dashboard components place another way nt make sense error get warning performupdateifnecessary unexpected batch number current pending printwarning anonymous function anonymous function using react redux axios ajax requests reduxthunk two months working project agency never seen anything like", "d": "9/2016"}, {"body": "issue pretty similar undefined stuff even though prop correctly initialized reducer suppose workaround would patching debugger little bit make developers realize error comes even better find way tunnel reducer initialization component first render il duncan finney notifications githubcom ha scritto jkomyno gaearon experienced issue well happening initialvalue pulling state undefined venueform reduxform form venue enablereinitialize true venueform venueform connect state props gt const venue find stateresourcesvenuesitems gt iid id return initialvalues venue venue changed one line const venue find stateresourcesvenuesitems gt iid id everything worked receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "try instead chrome seems casesensitive think goes html specs", "d": "9/2016"}, {"body": "zackify issue currently provideplugin app remove order get work", "d": "9/2016"}, {"body": "bradens meant polyfill included incorrectly think terrible memory lol", "d": "9/2016"}, {"body": "making like fixes forbeslindesay problem", "d": "9/2016"}, {"body": "error message perhaps amended say something like please check make sure party library manipulating dom manually nt found post completely lost", "d": "9/2016"}, {"body": "mnpenner plan warn time mutation even helpful reference interested taking stab pr perhaps work salehhindi get diff cleaned landed would good first bug help save someone else suffering problem faced", "d": "9/2016"}, {"body": "sounds like people cautiously positive optional overriding env var since toggling releaseoptimizedminified build debugdev build could maybe reflected name amp values var pattern used many overlapping ways across different languages ecosystems projects seems main source confusion would avoid copying pattern since actually express trying variable toggles release build react defaults nonrelease build set requirements would suggest something along lines maybe using strings boolean value problematic might expect handled hand using specific keywords easily devolves bikeshedding vs vs etc edit accidentally posted early revised text bit", "d": "9/2016"}, {"body": "found bug ideas work arounds", "d": "9/2016"}, {"body": "looks ok means uncontrolled input reason value", "d": "9/2016"}, {"body": "hi folks ran error using call js file file defined property html webpack plugin injects javascript bundle js file called twice pass plugin configuration object prevent behavior remove call template file solve error resulting function stems plugin screenshots clarify note explicit tag file note accepting default behavior html webpack plugin note two calls", "d": "9/2016"}, {"body": "agree good good solution auto prefixing multiple values could potentially allow letting pass array value let reopen hear others think hi gaearon zpao quote april year wondering half year update proposal new consideration come play may affect issue thank awesome work", "d": "9/2016"}, {"body": "also want handle arbitrary options already landed firefox nightly full list", "d": "9/2016"}, {"body": "fwiw facebook listens active wheel events block outer scrolling sidebars chat windows scrolled ca nt implement ui without still want support option problem space still incomplete might evolve alternative solutions problem nt involve passive event listeners still active design space", "d": "9/2016"}, {"body": "important keep active listeners add support passive ones desktop applications nt see difference mobile apps passive scroll listeners give great speed boost little suggestion", "d": "9/2016"}, {"body": "romulof yeah register events capture phase well imagine would proper api support passive events well side note tricky question would register passive events capture phase suppose possible nature passive events since even allowed call probably nonissue", "d": "9/2016"}, {"body": "radubrehar looks like whole bible camelcase", "d": "9/2016"}, {"body": "case since passive events capture phase", "d": "9/2016"}, {"body": "sure nt make sense wouldt count also types event binding another suggestion way react would detect whether event handler function normal binding object containing binding options handler function", "d": "9/2016"}, {"body": "started working deadsimple helper functions convert shorthand properties longform among things docs", "d": "9/2016"}, {"body": "published information contribute used uptodate new tips like test changes react locally codebase overview documents conventions walks codebase split organized let know think", "d": "9/2016"}, {"body": "hacktoberfest coming timing perfect thanks gaearon", "d": "9/2016"}, {"body": "ping code coverage completely rewritten jest remove almost complexity nt necessary recommend using see example collect coverage files even untested ones one might make look bad though coverage undoubtedly go give signal cc vjeux zpao wan na cc jdalton added coverage initially", "d": "9/2016"}, {"body": "related", "d": "9/2016"}, {"body": "back", "d": "9/2016"}, {"body": "following code cause error seems jquery met issue fixed see", "d": "9/2016"}, {"body": "hitting error call function js export default function openreactmodal componentfn modalprops let reactroot documentcreateelement div documentbodyappendchild reactroot const close gt reactroot null consolewarn shouldnt call close return ca nt unmount root component", "d": "9/2016"}, {"body": "since chrome safari removed tap delays mobile pages probably time stop using tapeventplugin use onclick event totally agree appsforartists however working fine meaning without delay modern ios safari work cordova anyone encountered issue know case", "d": "9/2016"}, {"body": "given one else chimed opinion warn like invalid nesting situations understanding please correct wrong current invalid nesting situations happen forget put inside something situations worst cause browser reflow great react rerender entire subtree great nt good bad behavior visible end user result makes sense warn hand nesting causes react emit invalid html severely mess site primarily splicing arbitrary closing tags noscript also course displaying noscripted content calls warning effect visible users yes html invalid treat nested elements react html component supposed atomic unit critical able drop without wondering whether break entire layout enabling local reasoning code trivial plain html code one place undecidable react components come anywhere embedded anywhere opinion react interpret component whose contents displayed javascript disabled requires properly handling case nested noscripts", "d": "9/2016"}, {"body": "html browser changes parse tree encounters certain types invalid nesting causes react get confused nodes wrong place sounds like precise mechanics noscript parsing works slightly different would effect messing hierarchy", "d": "9/2016"}, {"body": "spicyj makes sense parse tree changing confuses react react never emits nested suggesting nothing confused right gets confused page looks totally wrong", "d": "9/2016"}, {"body": "maybe could go either way could also surprising ask render tag one appear plus nt easy way code make happen right even wanted happy make validatedomnesting warn nested noscripts nt already send pr", "d": "9/2016"}, {"body": "sebmarkbage interested helping go ahead work someone already working fix", "d": "9/2016"}, {"body": "still issue closed", "d": "9/2016"}, {"body": "pranaygp looks like still outstanding issue opened add nt reviewed point would conflicts need resolved merged", "d": "9/2016"}, {"body": "aweary thanks look pr see help", "d": "9/2016"}, {"body": "uhh happens use explicitly set property property set undefined reset defaultprop left untouched keep value cloned element", "d": "9/2016"}, {"body": "thing reactcreateelement set property value defaultprops item list want look pr fixed fixed", "d": "9/2016"}, {"body": "never confirmed running issue various tests run prop passed name value definitely undefined getinitialstate use input control value input control shows correctly value however need able set input control state value updated using prop value directly nt let change control matter try assign prop value equivalent state variable ends undefined ca nt post example immediately application pretty involved take time figure isolate issue easily understandable format", "d": "9/2016"}, {"body": "share minimal test case reproducing issue investigate use starting point", "d": "9/2016"}, {"body": "agree elijen warning logged via consolewarn rather consoleerror would make filtering dev tools convenient", "d": "9/2016"}, {"body": "jest users declare react inside describe function work", "d": "9/2016"}, {"body": "toarray enough nt need tolist tojs costly operation agree jareware react build support really painful start normalize data store maps every time get warning log", "d": "9/2016"}, {"body": "use valueseq instead toarray", "d": "9/2016"}, {"body": "lifecycle method would interesting browsernative specific patches", "d": "9/2016"}, {"body": "someone correct understanding wrong ref essentially backing instance returned stateful component dom stateless component instance created stateless component", "d": "9/2016"}, {"body": "conceptually yes correct", "d": "9/2016"}, {"body": "aodev first throw warning line creating new style object new memory reference actually passing mutated object second passing object reference mutation fix second sure care though performance implications passing props like pure children always force render removing benefits pure components", "d": "9/2016"}, {"body": "rickhanlonii thanks realised later forgot commented", "d": "9/2016"}, {"body": "supports", "d": "9/2016"}, {"body": "seems fixed", "d": "9/2016"}, {"body": "anybody know workaround get scenario mentioned scottnonnenberg working unfortunately gaearon workaround applicable warnings still triggered custom proptype solution think test method separately feel though defeats purpose testing component going used", "d": "9/2016"}, {"body": "see also", "d": "9/2016"}, {"body": "hey guys still thing keep debugging long periods time errors react wo nt put consolelog recent example tried access thissetstate inside function bound called thissetstate inside function failed resulting whole component subsequent components fail rendering yet errors printed console figured error curiosity wrapped thissetstate try catch got typeerror thissetstate function smartviewstoregetdata eval smartviewstoreeval eval smartviewstoreeventemitteremit eval smartviewstoresetdata eval eval eval lib promise internal trycatch eval lib promise internal invokecallback eval eval eval mutationobserverlib promise asap flush eval way enable errors devmode without manually wrapping code trycatch blocks", "d": "9/2016"}, {"body": "hurrtz could share minimal test case reproducing issue use starting point", "d": "9/2016"}, {"body": "hurrtz likely nothing fix react react catching errors issue seeing likely due call setstate inside promise callback exception thrown catch handler might swallowing alternatively may possible nt catch handler promise rejection stays unhandled promise polyfill might log unhandled rejection case recommend changing promise polyfill sure problem react please help us providing case reproducing thanks", "d": "9/2016"}, {"body": "workaround suddenly broke chrome seems valid anymore changed order compositionend fired previously happened consequence wo nt fired aborted composition", "d": "9/2016"}, {"body": "maybe help someone", "d": "9/2016"}, {"body": "nt even use dreaded chrome browser seeing spammy advertising console please remove kthxbai", "d": "9/2016"}, {"body": "mvasilkov browser use", "d": "9/2016"}, {"body": "opera nt support installing chrome addons box yes know make work point nine hells even see ads developer console working project seriously need adblock js console silence type incredibly intrusive advertising facebook sorry guys love react putting permanent ads good idea btw tomorrow react next let beer", "d": "9/2016"}, {"body": "could also add reactdevtools opera catalog", "d": "9/2016"}, {"body": "accessing props define defaultprops considered antipattern class comp extends reactcomponent static proptypes num reactproptypesnumberisrequired action reactproptypesfunc static defaultprops action gt consolelog thispropsnum invalid static context render return log thispropsnum", "d": "9/2016"}, {"body": "quannt man thanks god met thank leaving solution works great thanks", "d": "9/2016"}, {"body": "ericclemmons got one using react start kit import react echart component ensurerequire component got error server side repo see error referenceerror document defined detect object modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload modulerequire add info import component top router error", "d": "9/2016"}, {"body": "props undefined constructor reason", "d": "9/2016"}, {"body": "waleedarshadvf please see comment", "d": "9/2016"}, {"body": "gaearon mean say prop undefined export default class messagebox extends reactcomponent constructor props consolelog props gt undefined coming particular class otherwise give atleast elsewhere super props consolelog thisprops", "d": "9/2016"}, {"body": "waleedarshadvf share code sample reproducing issue use base never far know likely something else going", "d": "9/2016"}, {"body": "aweary unable reproduced got undefined put debugger sure gone", "d": "9/2016"}, {"body": "bump supported", "d": "9/2016"}, {"body": "guys required feature workaround", "d": "9/2016"}, {"body": "intend drop whitelist pass attributes possibly react", "d": "9/2016"}, {"body": "meantime putting ref node calling", "d": "9/2016"}, {"body": "gaearon right dirty hack plus going prs noticed one suggests might getting warnings direct dom manipulations future worried", "d": "9/2016"}, {"body": "thanks gaearon update possible workaround", "d": "9/2016"}, {"body": "yeah nt like lines code", "d": "9/2016"}, {"body": "though course wait till react", "d": "9/2016"}, {"body": "setting html tag attributes nt always work example case something like componentdidmount thisrefsxdirectory true thisrefsxwebkitdirectory true solve componentdidmount thisrefsx thisrefsxdirectory true thisrefsxwebkitdirectory true guess every time triggers nt overhead think browser ignores already set", "d": "9/2016"}, {"body": "sassanh nt string refs deprecated like jsx render return componentdidmount thisinpnwdirectory true conditional could define empty object called constructor would nt anything ref nt exist result would property assignment unused object", "d": "9/2016"}, {"body": "string refs legacy deprecated yet although string refs deprecated considered legacy likely deprecated point future callback refs preferred refs components", "d": "9/2016"}, {"body": "aweary sorry missed long time since visited site anyhow since know wontfix close", "d": "9/2016"}, {"body": "actually like legacy string refs great simple usecases like nt force define another variable class sure usecases new function refs simple usecases like prefer string refs hope never get deprecated", "d": "9/2016"}, {"body": "right dirty hack plus going prs noticed one suggests might getting warnings direct dom manipulations future sure referring touching dom lifecycle hooks allowed long careful mess tree controlled react setting html tag attributes componentdidmount nt always work yes fix using callback refs instead work ref callback js adddirectory node node nodedirectory true nodewebkitdirectory true great simple usecases like nt force define another variable class sure usecases new function refs simple usecases like prefer string refs ironically exactly situation callback refs job better use define variable class work inside including adding attributes like showed hope never get deprecated", "d": "9/2016"}, {"body": "yeah good usecase refs usecase keep reference dom element simply manipulation later still prefer string refs storing variable class though hope nt need maybe react version someday nt feel need use", "d": "9/2016"}, {"body": "sassanh react version right confused", "d": "9/2016"}, {"body": "oh thought version searched react google went check went file right version bad", "d": "9/2016"}, {"body": "workaround need componentdidreceiveprops", "d": "9/2016"}, {"body": "made issue year ago using react daily since longer think use case componentdidreceiveprops justifies increasing api alexcppns trying", "d": "9/2016"}, {"body": "iammerrick actually alright misunderstood componentwillreceiveprops used", "d": "9/2016"}, {"body": "related discussion", "d": "9/2016"}, {"body": "revert fix reopening", "d": "9/2016"}, {"body": "moving discussion instead closed pr hkal aweary pretty confident still get warning without unintentional side affects go back predefining autofocus property aside attribute injection call producing warnings zpao properties like unable validate right inject values used validateproperty based whitelist hkal think providing autofocus default getpossiblestandardname decent solution imo ideally validating property would independent whitelist nt many cases like probably worth addressing since whitelist way", "d": "9/2016"}, {"body": "think inserting default comment explaining probably best way forward pretty sure one fwiw something similar events special case though needs done differently", "d": "9/2016"}, {"body": "hkal want get another pr open adding default explanation", "d": "9/2016"}, {"body": "since react supporting wayhackworkaround force attributes officially supported react", "d": "9/2016"}, {"body": "milesj helper function nice nt support", "d": "9/2016"}, {"body": "like add comment say transitionname using object easily broken providing one main names enter leave appear nt want add classes item appearing provide classname label also get uncaught invariant violation csscoreaddclass takes single class name object object appear contains multiple classes think classnames could made optional checking transitionname string object", "d": "9/2016"}, {"body": "thx least helped finding cause misleading error message", "d": "9/2016"}, {"body": "able use animatecss react look answer stack overflow", "d": "9/2016"}, {"body": "recent version could please point would behavior react let say want introduce widget including react host page older version possible workaround make work thanks", "d": "9/2016"}, {"body": "old versions react probably tripped datareactid ids dom nt generate clientside rendering widget datareactroot attribute datareactid nt conflict", "d": "9/2016"}, {"body": "prob get want simply", "d": "9/2016"}, {"body": "like proposals thread way freeze props way meantime", "d": "9/2016"}, {"body": "interested adding create react app meantime feedback welcome", "d": "9/2016"}, {"body": "almost isomorphic working except need way accomplish server side rendering data fetches component level without adding philosophical argument right long time successfully using vanilla react plus homegrown routing components fetching data componentdidmount really dislike idea maintaining redundant structure define component data dependencies already defined component tree somehow need perhaps multiple render passes incorporate data fetched asynchronously full component tree resolved right wanted second growing importance isomophic react imo try work solution meantime thanks", "d": "9/2016"}, {"body": "decodeman case interested relate done minimal react traverser get data dependencies components way get data dependencies fetch data react render string", "d": "9/2016"}, {"body": "decodeman fwiw using double render approach like allude successfully large production app inspired reduxsaga example general approach work well type async loading need move loading help keep manageable also higher order components take care common loading scenarios eg check prop load nil", "d": "9/2016"}, {"body": "thanxcamalcase works", "d": "9/2016"}, {"body": "hunting around net quite long time solution problem wondering lifecycles methods called addition default css class functionality definitely times need know component level whether entering exiting transition group really really hoping would nt expected reimplement class reasoning behind decision addons replaceddeprecated favor robust api near future", "d": "9/2016"}, {"body": "addons kind development indeed plan deprecate use much apis inherent problems eg hooks work stateless functional components anyway recommend looking react motion similar projects instead", "d": "9/2016"}, {"body": "update gaearon narrowed issue us sure recall issue page component home firing hooks note page component wrapped two compositions remove custom one wrote everything works fine could due gsap enhancer using module pushing envelope know react way simply passthrough things including key component jsx import react react import throttle lodashthrottle export var windowstate composedcomponent gt class extends reactcomponent constructor props context super props context thisstate window height width document height width componentwillmount thisonresize function thissetstate window height windowinnerheight width windowinnerwidth document height documentbodyclientheight width documentbodyclientwidth bind componentdidmount thisonresizethrottled throttle thisonresize windowaddeventlistener resize thisonresizethrottled componentwillunmount windowremoveeventlistener resize thisonresizethrottled render return ideas gsap able pass hooks component component first attempt writing hoc", "d": "9/2016"}, {"body": "problem also noticed former edgeie engineer justin rogers works yall facebook smiley react technique adding global listener defeats optimizations certain browsers notably safari edge implemented avoid jank needs occur inner elements entire document demonstrate put together little sample application based janks main thread milliseconds every milliseconds simulate active page lots js update bumped make obvious three versions app events react event inner scrollable div adds global event document regular dom event inner scrollable div cases listener firefox chrome difference however edge safari react technique adding global listener unfortunate sideeffect causing entire page jank scrolling rather scrolling inner div note optimization applies certain kinds scroll events like mousewheel scrolling necessarily twofinger touchpad scrolling clickinganddragging scrollbar keyboardscrolling may need use real mouse reproduce also may apply etc tested since others performance characteristics may impacted touchscreen devices worth investigating demo focused kind subtle issue also made quick video demonstration", "d": "9/2016"}, {"body": "update added demo well confirmed causes unnecessarily janky touchscrolling mobile browsers ios safari android chrome android firefox edge mobile compiled results table want see browserbybrowser breakdown", "d": "9/2016"}, {"body": "published code dive react event system thanks spicyj kentcdodds would helpful anyone like dig", "d": "9/2016"}, {"body": "think issue highlighted somewhere documentation following seems work well client server thanks people js import react react import reactdom reactdomserver export default function noscript props usage", "d": "9/2016"}, {"body": "babakmn good firstorder approximation use severe limitation nest see destroys local reasoning approach highlighted documentation either must either fixed documentation must warn aggressively", "d": "9/2016"}, {"body": "wchargin dug interesting agree squashing tags one better behaviour", "d": "9/2016"}, {"body": "issue", "d": "9/2016"}, {"body": "easga one find simple repro case jsbin jsfiddle please post dig", "d": "9/2016"}, {"body": "spicyj thanks ben customer seeing problem iphone realized could simulate device check logs realized production js problems due reason mentioned article made work sorry forgot update everything works great react", "d": "9/2016"}, {"body": "love see deterministic unique component identifier added react qa team needs consistent ids hooks automated ui testing currently adding ids everywhere manually suspect alone omerts solution looks promising built solution would likely perform better reliably", "d": "9/2016"}, {"body": "error message led incorrectly path thinking passed multiple children dug realized string instead could error message bit nuanced cases", "d": "9/2016"}, {"body": "actually already improved message", "d": "9/2016"}, {"body": "cool bit specific next step would nice actually detect message exactly invalid common cases", "d": "9/2016"}, {"body": "found bunch modules handle", "d": "9/2016"}, {"body": "know close thought would also let people know problem snuck point also dug source code find needed move property classes instead defined default default class element bug feel like one though moved angular react nganimate goes great detail avoid strange edge cases like one since library still young opinion getting bit neglected nt expect edge cases covered great addon nonetheless thanks react team", "d": "9/2016"}, {"body": "jayphelps spot real pain trying work shocker bug recently addition new put attribute already element play inline guess kind bug safari point view one use case cases adding elements element already inserted dom cause issues fixed using property element removes validation props blam", "d": "9/2016"}, {"body": "benjdlambert think meant someone else comment linking someone elses comment", "d": "9/2016"}, {"body": "jayphelps meant comment link comment", "d": "9/2016"}, {"body": "fwiw maintaining sort pr remove attribute whitelist nt speak react team hopefully decision made support custom attributes eliminating whitelist handles much legwork", "d": "9/2016"}, {"body": "still working cursor pointer see tried none happening website ipad laptop click ipad nothing ipad pc even seems triggered nothing displayed ipad", "d": "9/2016"}]