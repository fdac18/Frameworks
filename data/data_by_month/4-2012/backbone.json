[{"title": "unexpected behavior try treat backbone model instances classical oo fashion", "body": "see snippet would traditionally expect would contain values however contains surprisingly behavior one would expect", "num": "1262", "d": "4/2012"}, {"title": "collection inefficiency", "body": "upgraded noticed significant decrease speed application application handles many large collections adds large number models certain points anywhere models added time version sortedindex function used taking cpu version code became significantly slower sortby function taking cpu", "num": "1261", "d": "4/2012"}, {"title": "add router specs pushstate true", "body": "process addressing attempting write spec noticed specs pushstate true test suite probably enable pushstate current test suite get redirected file pathtotesthtml router pretty important part backbone definitely thoroughly tested seems like scenarios cause different behavior router pushstate true pushstate true pushstate unsupported browsers pushstate false current scenario say would caught scenario adding router specs scenarios mind may catch unknown issues could stub windowlocation prevent redirect file pathtotesthtml would love help way", "num": "1259", "d": "4/2012"}, {"title": "backbone history pushstate enabled incorrectly handles urls query params browsers support pushstate", "body": "repro enable pushstate add params backbone redirect redirect note backbone correctly redirects pushstate disabled jsbin work great demoing issue nonpush state supported browsers redirect still show issue javascript function var router backbonerouterextend routes anything anything anything function alert windowlocationsearch windowrouter new router backbonehistorystart pushstate true thanks chatting last night backbone meetup jashkenas hopefully fix spec coming weekend fixing may break earlier apps feelings issue", "num": "1252", "d": "4/2012"}, {"title": "add iterators collections", "body": "common pattern use backbone collections grabbing single model collection looking next model previous model collection proposed iterators similar see plan building standard way backbone", "num": "1251", "d": "4/2012"}, {"title": "backbone save success error callback issue", "body": "trying save backone model error success callbacks documentation says save accepts success error callbacks options hash passed model response arguments error callback also invoked model validate method validation fails serverside validation fails return http response code along error response text json server validation fails sending response error object still success callback called save function server works fine nt send error object response ie send response code using backbone", "num": "1249", "d": "4/2012"}, {"title": "collection execute reset operation model trigger destroy", "body": "example thismodelbind destroy thisdestroy viewinstancecollectionreset", "num": "1248", "d": "4/2012"}, {"title": "modelurl nt match documentation", "body": "according backbonejs documentation modelur generates urls form collectionurl id falling back urlroot id model part collection line code var base getvalue urlroot getvalue thiscollection url urlerror look like var base getvalue thiscollection url getvalue urlroot urlerror basically moment urlroot set model model never checks belong collection", "num": "1245", "d": "4/2012"}, {"title": "defaults nt propagate multiple levels inheritance", "body": "consider code extend existing model provide new defaults original defaults lost nt operate would intended could possibly fixed modifying extend perform basic merging member defaults parent child", "num": "1244", "d": "4/2012"}, {"title": "simplify fetching single models aka incremental collection fetching", "body": "somewhat related issue things changed since think worth another look finding bit clunkier like take partially populated collection fetch new model id add collection quite possible missing something something backbone expert two approaches found create new model instance specifying id constructor call fetch works problem initialize method already called model data loaded case initialize stuff like creating child collections populating attributes data work yet nt fetched considered using parse init work sequencing reversed two cases initialize called first creating model fetching parse called first collection fetching use collectionfetch add option set one close perfect simple way specify id model load particular using restful urls id part base url query string params sort kludged specifying url option call fetch building url manually concatenating collection url model id works seems clunky one solution would specify id collectionfetch maybe simple optionsid along add true would simple incremental collection loading maybe better solution single model fetching solves issue listed", "num": "1242", "d": "4/2012"}, {"title": "collectionget id return undefined", "body": "using happen find todo example creating new todo new created todo retrieved collectionget id method output diving todo example chrome var todosmodels consolelog todosmodels id ids collection var todosmodels consolelog todosget todosmodels id child child child ids retrieved via collectionget id think bug sure backbone todo example please help confirm thanks", "num": "1241", "d": "4/2012"}, {"title": "rapid rendering views multiple backbutton clicks", "body": "hi working project right testing happen click backforward lot test chain clicks app noticed hit back button forward matter rapidly cues several render events view waiting data server wanted throw idea render queue concept similar animation handled jquery queue would let renders happen serially user may expect otherwise jarring rendering see flashes content gets overwritten etc similar queue idea wonder would make sense stop renders happening except last render requested may may make complete sense think could value save excessive traffichits rest server getting collections nt need since would nt displayed thoughts", "num": "1240", "d": "4/2012"}, {"title": "custom view attributes shared different instances", "body": "please see fiddle creating instances itemview calling additem method add items itemview itemview items itemarray property instead share itemarray property items problem might backboneview resetting custom attributes constructor", "num": "1237", "d": "4/2012"}, {"title": "conflict plugin click events", "body": "hi trying use backbonejs jquery plugin easytabs seems backbone highjacking click event plugin thing try use jquery ui tabs errors anchor link url seems click event blocked someone already issue", "num": "1233", "d": "4/2012"}, {"title": "request support regexp route method", "body": "hello would like provide configurable regex value execution change routing methods could done creating regexp based whatever rules changed tried current backbone implementation nt appear work thanks", "num": "1231", "d": "4/2012"}, {"title": "big bug need default route router", "body": "code example jsfiddlle remove js code alert function route defaultroute function actions alert actions route nt work however remain alert actions work reallay weird need helps sincerely beginner backbone", "num": "1230", "d": "4/2012"}, {"title": "sync event triggered method call success callback", "body": "catalog events faq says yet event triggered createsavedestroy method call nt passed success callback options argument bit time ago bound view render method sync attempted use success error callbacks user notifications current behavior make certain amount sense maybe requires documentation update", "num": "1229", "d": "4/2012"}, {"title": "tagname able defined function ala classname", "body": "currently tagname must string ca nt result function expect behavior similar classname attributes etc webkit browsers show", "num": "1228", "d": "4/2012"}, {"title": "backbone routes fail using option", "body": "hi noticed following using option serving page something url hash tidy example navigating link changes url root push state browsers ex chrome hash change browsers ex ie clicking link reroutes instead detecting location might misreading light routes documentation demo source available real issue missing something reading code come patch tightens handling fragment resolves issues see commit fixes real issue yes commit without spec pointers howto would welcome would happy refactor making easier spec process thanks working find incredibly useful", "num": "1226", "d": "4/2012"}, {"title": "error callback model save nt parsejson response", "body": "hey guys something like rails back end instance backbone model error callback getting jquery ajax response object even though response header applicationjson workaround using function wrapper pass callback javascript jsonifyresponse function fn return function model response var json jsonparse responseresponsetext fn model json thisusersave null success thisregistered error jsonifyresponse thisregistererror nt really ideal intuitive nt mind writing patch wondering something else need get response parsejsond b reason guys dont want modify current behavior thinking would pretty simple check header wraperror applicationjson parsejson", "num": "1224", "d": "4/2012"}, {"title": "modelsave data wait true stores new attributes even bad response", "body": "x new backbonemodel xurl someurl xsave test wait true save fails http response xtojson test fields failed save exist model bad response argue nt made model attributes get reponse wait true passed", "num": "1223", "d": "4/2012"}, {"title": "modeltojson collectiontojson unused options argument", "body": "issue reading backbonejs found unused options argument two methods javascript backbonemodel backbonecollection intentional", "num": "1222", "d": "4/2012"}, {"title": "download site production missing view namespace", "body": "download production link backbone home page replicated following", "num": "1221", "d": "4/2012"}, {"title": "unintentional build", "body": "realized rebuild commit wondering intentional differs last changes", "num": "1218", "d": "4/2012"}, {"title": "difference objects returned collectionreset collectionadd", "body": "backbonecollectionreset backbonecollectionadd clearly used different things however similarities two one trigger reset add respectively take list models input documentation states reset could used bootstrap collection initial page load example really nt make sense though page loaded first time wo nt collection empty anyway fact much realistic use case would refresh entire collection page already loaded furthermore could easily use backbonecollectionadd bootstrap collection beginning however using reset appealing could technically use bootstrap initially refresh collection point runtime question around object returned two methods reset add reset method includes object multiple keys one models key points array models added reset method key really useful use pass template rendering likewise array also present add method behavior becomes different reset method triggers reset trigger passes back whatever function listening plus options scope reset method unless bound higher scope using bind technique nt look far reset trigger reset method differs add trigger add method instead passing variable listening functions passes instead models array think lot easier deal trigger passes models array instead passing context listening functions line optionssilent thistrigger reset options line modeltrigger add model options understand reset method throws reset trigger one time whereas add method throws add trigger model though usefulness returning context listening functions nt functions interested models array ultimately going get snagged passed render function anyway", "num": "1217", "d": "4/2012"}, {"title": "use nested id", "body": "example mongodb document id oid field", "num": "1215", "d": "4/2012"}, {"title": "add ability disable navigate url short circuit", "body": "navigate method router object following line thisfragment frag return target url current url navigate method nothing app want able execute routing code even url thinking extra field could passed options object navigate method force truefalse default set false set true navigate method would still run even current url target url discussed willing pull request change would accepted project thanks mark", "num": "1214", "d": "4/2012"}, {"title": "comparator work firefox safari chrome", "body": "issue try sort collection using comparator works firefox safari chrome someone already got issue thanks code var itemmenu backbonemodelextend sync localsync var itemsmenu backbonecollectionextend model itemmenu sync localsync comparator function itemmenu return itemmenuget lastname localstorage new store itemsmenu", "num": "1212", "d": "4/2012"}, {"title": "feature usable events functions contexts combination thereof", "body": "modified backbonejs branch wanted submit issue first get comments experienced backbonejs committers submit pull request made following commit allows backboneeventsoff usable events functions contexts combination thereof tested using without issues far development environment wanted see anyone else saw value patch useful could test let know working fine see value submitting pullrequest main branch", "num": "1210", "d": "4/2012"}, {"title": "force modelisnew return true", "body": "tables primary key autoincrement provided user calling save table like seems way backbone issue post request soon user specified primary key id longer null modelisnew always return false results put request every time need post happy submit pull request w unit test much basically done probably fairly obvious creating model setting modeloverrideisnew true cause model considered new every time results insert", "num": "1209", "d": "4/2012"}, {"title": "feature idea allow make use instead", "body": "fourth argument would make dealing escaping things much easier stands instead open ways make cleaner thanks", "num": "1208", "d": "4/2012"}, {"title": "double historynavigate fallback", "body": "assume backbone started following configuration also history left default value invoking router browser supporting pushstate causes page found error browser address bar shows without host caused double passed concatenated possible fix use already leading stripped instead use", "num": "1207", "d": "4/2012"}, {"title": "option save fetch destroy sync nt work errors server", "body": "function specified option methods called server returns status code described documentation function actually passed method specified function wrapped another function using problem function returned method nt compatible expects option takes attributes instead nt receive information expect thus fails pass right information userdefined option meaning using respond server errors nt work", "num": "1205", "d": "4/2012"}, {"title": "integration node eventemitter", "body": "hey guys thinking using backbonejs serverside using nodejs models however rest application written using node built eventemitter wondering guys thoughts whether already play nicely steps make play even nicer would love know thanks guys ben", "num": "1202", "d": "4/2012"}, {"title": "collectionsortedindex use collectioncomparator", "body": "use always returns", "num": "1198", "d": "4/2012"}, {"title": "backbonejs creator epic man", "body": "great sober difference someday", "num": "1197", "d": "4/2012"}, {"title": "united kingdom", "body": "united kingdom remain throne", "num": "1196", "d": "4/2012"}, {"title": "suck cock", "body": "dedicated spinejs forever us vs uk haha", "num": "1195", "d": "4/2012"}, {"title": "hate black males", "body": "hate black males really ban everything say black black power", "num": "1194", "d": "4/2012"}, {"title": "backbonejs nt allow", "body": "hell yes get give team alcohol", "num": "1193", "d": "4/2012"}, {"title": "backbonejs renamed cockjs", "body": "hell yeah nt drugs", "num": "1192", "d": "4/2012"}, {"title": "", "body": "suck cock", "num": "1191", "d": "4/2012"}, {"title": "backbonejs vs intoxicatedjs", "body": "hit something wrong tonight turned devil always turn devil intoxicated sorry cali ftw", "num": "1190", "d": "4/2012"}, {"title": "sad circus", "body": "", "num": "1189", "d": "4/2012"}, {"title": "backbonejs renamed freshjs due copyrights issues", "body": "note guys changing name next release changing freshjs due conflicts company called breakbone input new name appreciated", "num": "1188", "d": "4/2012"}, {"title": "backboneevents allow rebinding method twice", "body": "binding event function repeatedly bind event function meaning function run multiple times way around always unbind rebind method illustrate point real gotcha way events work valid use case binding function multiple times could ensure backboneeventson bind event twice perhaps overwrite old binding", "num": "1186", "d": "4/2012"}, {"title": "success error callbacks undefined", "body": "problem view passes options object literal model sync method error success methods stubbed function therefore extended extend params options pattern propose leaving methods undefined unless specifically declared way extending objects produces desired effect", "num": "1183", "d": "4/2012"}, {"title": "unbinding callbacks events", "body": "modeloff works stated documentation example modeloff documentation removes callbacks events objectoff null null context however call removes callbacks regardless context first argument null dn ones matter see backbonejs line function events callback context var ev calls node events delete thiscallbacks else calls thiscallbacks return", "num": "1182", "d": "4/2012"}, {"title": "discuss viewel initialized early", "body": "currently backboneviewel field initialized view construction time ensureelement particular reason initialization made early particular case use master views responsible retrieving html fragments via ajax call server master views composed nested views responsible sub fragments master html fragment example let say master fragment several tabs use nested view per tab master view constructs nested view initialize phase say html fragment rendered included dom problem since instantiate nested views early even declare el mytab nested view thisel always null time ensureelement called mytab yet present dom know workarounds instantiate nested view master html fragment appended dom wondering number instances nested views wo nt grow substantially every time reload html fragment manually call setelement nested view html fragments appended dom could avoid things manually thus forget would better discussion enhancement open minded like know things wrong", "num": "1180", "d": "4/2012"}, {"title": "modelisvalid working", "body": "hello using backbonejs backbonevalidationjs model set validation rules call modelisvalid gives error function isvalid function return thisvalidate thisattributes thisvalidate defined wrong", "num": "1179", "d": "4/2012"}, {"title": "get fragment using pushstate true hashchange false", "body": "hey guys issue using pushstate true hashchange false either use push state fall back page loads app serve page navigate however go something instead root ie options fragment sent router empty removing haschange false get something fragment gets used start history router initialize method means works correctly go page show right stuff expect ie url gets routed route thoughts something stupid still trying figure missing something using incorrectly possible bug", "num": "1177", "d": "4/2012"}, {"title": "lt bb object model", "body": "hi sometimes need create something like class extend method model router view collection perfect wanted know way best solution useful organize code thank opinion", "num": "1176", "d": "4/2012"}, {"title": "make backbonerouter case insensitive", "body": "currently backbonerouter run route functions unless route matches case url case defined router typical browser behaviour ignore case handling url", "num": "1175", "d": "4/2012"}, {"title": "model ids properly indexed collections creation", "body": "believe model ids properly indexed creation reproduce using backbone local storage todos demo use chrome developer tools set breakpoint line execute windowtodos todos javascript shell gives global reference todos collection go ahead enter todos app call map windowtodosmodels function x return windowtodosget xid get back child child child child undefined todos retrieved via fetch properly index get method works fine todos newly created properly index get returns undefined note newly created todos ids backbone local storage assigns ids indexed properly byid field collection", "num": "1173", "d": "4/2012"}, {"title": "nt navigate pushstate explicitly wanted", "body": "line current head pass eg browser use even broken", "num": "1171", "d": "4/2012"}, {"title": "option allow modelset run validations bail fail", "body": "really like able modelset run validations trigger error event callback bail validation fails want model attributes track exactly user entered also want receive events callbacks model transitions valid invalid accomplish first part using option validations nt run callbacks nt fired nt easily know model transitions valid invalid could alternately use default behavior model gets sync user entered issue example save button view hooked model user clicks save button natural way handle seems call misleadingly succeed invalid attribute value actually set model due validation failure perhaps thinking backwards would crazy add option would modify default behavior continuing update relevant attribute even validations fail still fire error events callbacks", "num": "1169", "d": "4/2012"}, {"title": "historynavigate return value loadurl", "body": "calling return value ie last line read", "num": "1168", "d": "4/2012"}, {"title": "gethash use last hash fragment", "body": "order allow app also pass hash parameters routing fragments suggest change regexp line order select last hash param url alternately splitting eg amp would acceptable may need also call line", "num": "1167", "d": "4/2012"}, {"title": "set fragment option historystart", "body": "would useful able specify starting fragment since app may want fragment derived loaded page propose adding eg already done something similar app following change required line current head", "num": "1166", "d": "4/2012"}, {"title": "unshift", "body": "hi guys minor issue noticed unshift insert single element beginning collection doc says takes options add either update doc delegate add option", "num": "1165", "d": "4/2012"}, {"title": "callable attrs collectionwhere", "body": "powerful filter models eg collectionwhere haschanged true", "num": "1164", "d": "4/2012"}, {"body": "nope working model attribute clearing fire event", "d": "4/2012"}, {"body": "javascript properties prototype shared reference like classlevel properties would shared way ruby like different hash instance define function documented", "d": "4/2012"}, {"body": "hi jdkanani thanks issue already discussed would mind directing comments thanks", "d": "4/2012"}, {"body": "interesting would mind telling us quick example test adding models single call using style comparator function takes one argument style function takes two former try latter", "d": "4/2012"}, {"body": "thanks much patch merged master specs yes would great problem hard single html page serverside support find way within qunit suite", "d": "4/2012"}, {"body": "considering model exist several different collections default feel free add methods models like", "d": "4/2012"}, {"body": "response object proper status code guess something going headers properly interpreted", "d": "4/2012"}, {"body": "afraid nt know answer question callback using jquery callback perhaps better debug example", "d": "4/2012"}, {"body": "feel something wrong", "d": "4/2012"}, {"body": "thanks issue deianvasilev already reported fixed", "d": "4/2012"}, {"body": "note parentextend extend methods also see declared backbone way note defaults declared function might need something like following inheriting multiple levels", "d": "4/2012"}, {"body": "workaround assign function defaults attribute extend javascript animal backbonemodelextend defaults eyes legs dinosaur animalextend defaults function return extend legs arms tooshort result dinosaursuper defaults var dog new animal consolelog dog dogget eyes eyes dogget legs legs var rex new dinosaur consolelog rex rexget eyes eyes rexget legs legs output", "d": "4/2012"}, {"body": "hi captncraig may work work like classical inheritance schemes certainly make behave similarly declaring function like sbrekken suggests discussed previously still discussed would mind directing discussion", "d": "4/2012"}, {"body": "think would probably use custom override something like strikes perhaps would nice passed way override necessary thoughts", "d": "4/2012"}, {"body": "big fan passing options fetch url needs changed properly lives function really highlighting fetching contents collection loading individual model really want something like right perhaps passing entire url", "d": "4/2012"}, {"body": "specifying id nt feel different specifying page number cases specifying subset collection load fact realized could even munge server side code check querystring id third approach also get coming intent collections bookfetch approach could work url handling seems bit tricky passing id may enough book could resource nested different parents would know url construct yeah seems like pass complete url maybe collection well id app generally nt used urlroot models models inherit url collection course construct whole url nt much difference original solution specify url collection fetch options", "d": "4/2012"}, {"body": "yep let leave combined fact fetch necessarily asynchronous means would nt reference complete model server came back point think well writing either listening using callback", "d": "4/2012"}, {"body": "big problem newfetch approach sequencing issue initialize parse two cases described original post sure fixed would also solve problem", "d": "4/2012"}, {"body": "hi xiaocong thanks issue also reproduce appears always get populated take closer look later", "d": "4/2012"}, {"body": "nt know relevant anymore looks like longer exposing variable globally example app", "d": "4/2012"}, {"body": "let guess rendering changereset also unloading viewsunbinding listeners add fetch calls stored array somewhere like namespaceappfetchcalls route somewhere else use jquery cancel xhr objects xhrabort array", "d": "4/2012"}, {"body": "hi tvpmb thanks issue think probably get better response type question mailing list taken liberty posting question behalf thanks", "d": "4/2012"}, {"body": "thanks brad list well kmiyashiro interesting thought correct pushing new view element route bad thing everything read people talked lot unbinding events zombies etc unbindingunloading", "d": "4/2012"}, {"body": "correct", "d": "4/2012"}, {"body": "ouch links resources could review figure fri apr kelly miyashiro lt reply replygithubcom wrote correct reply email directly view github", "d": "4/2012"}, {"body": "yes since property prototype shared instances want instances set constructor javascript var itemview backboneviewextend initialize function thisitemarray", "d": "4/2012"}, {"body": "fiddle described", "d": "4/2012"}, {"body": "hi braddunbar already used solution posted workaround yet seems like nt need quite confusing behavior nt think explain use prototype nt quite understand saying current implementation incorrect trying get clarification understand often specify view properties way spawnedc used fiddle clear properties view override initialize method aswell seems cumbersome example apps views properties specified exact way see todojs template variable specified manner course unchanging string never see sort problem correct way specify dynamic view properties surely case override init method", "d": "4/2012"}, {"body": "explain use prototype putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances correct way specify dynamic view properties surely case override init method yes set property mutable value instance classconstructor constructor case called constructor example backbone sets properties instance", "d": "4/2012"}, {"body": "braddunbar create new instance would expect properties reset brand new instance nt expected behaviour missing something", "d": "4/2012"}, {"body": "hi braddunbar putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening agree spawnedc last statement would nt expect properties shared instances sibling views", "d": "4/2012"}, {"body": "actually none properties reset unless reset constructor always prototype properties shared instances created constructor javascript var function var new var b function bprototype aconstructor b var new b var new b consolelog undefined consolelog undefined afoo consolelog consolelog consolelog true interested great explanation", "d": "4/2012"}, {"body": "nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening exactly recommend creating instead prototype property", "d": "4/2012"}, {"body": "braddunbar thanks explanation link still kind weird unexpected behavior one hand hand makes complete sense share properties views read javascript garden article sure become clear", "d": "4/2012"}, {"body": "hi mathvallee thanks issue judging description could many reasons click event nt firing provide us code look", "d": "4/2012"}, {"body": "sounds like eventstoppropagation missing event handler", "d": "4/2012"}, {"body": "ca nt really show code one line call plugin wookiehangover plugin event handler backbonejs", "d": "4/2012"}, {"body": "probably backbone problem feel free ask mailing list irc", "d": "4/2012"}, {"body": "closing issue incorrectly setting route", "d": "4/2012"}, {"body": "sorry nt realize root cause problembut got really bug problem used links document said link related route routes posts id somefun get param posts actually backbonerouter ca nt deal route name plz check remove route defined routes posts id somefun fine hope fixed asap tks", "d": "4/2012"}, {"body": "one link clicked twice seems action happened second time another bug designed way sorry silly questions", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions seems work intended without solve issue", "d": "4/2012"}, {"body": "overriding success stopping system knowing event successful thus nt raising sync event could potentially worked around wrapping success call passed sure best behavior think would better triggering event situation", "d": "4/2012"}, {"body": "backbone already wrapping success error callbacks overriding anything", "d": "4/2012"}, {"body": "fyi previous discussion topic", "d": "4/2012"}, {"body": "thanks oddly search sync issues bug nt show", "d": "4/2012"}, {"body": "seems reasonable pull request incoming", "d": "4/2012"}, {"body": "looks like superseded moving conversation", "d": "4/2012"}, {"body": "even request asks json response error necessarily json form nt want assume often error message", "d": "4/2012"}, {"body": "thinking checking jqxhrgetresponseheader contenttype response checking applicationjson nt principal open pull request", "d": "4/2012"}, {"body": "saying principle assumption want make", "d": "4/2012"}, {"body": "surely serverside fails catch erroneous format clientside early rather late using validate secondly assuming need trigger update ui definitely hook succes error option attributes rather change event assumption javascript xvalidate function attrs test return value may test xsave test wait true success function error function", "d": "4/2012"}, {"body": "vincentbriglia times verify server either case nt depend clientside verification mechanism sanitizing input server purpose wait true wait response back server setting attributes backbone regardless http response get back nt sound right", "d": "4/2012"}, {"body": "nt case backbone ed attributes onto model callback callback nt triggered server response attributes nt set like reopen ticket provide failing test case latest backbone master branch", "d": "4/2012"}, {"body": "jashkenas provided failing test case initial comment tried browser console backbone website got behavior", "d": "4/2012"}, {"body": "let start reasonable guess braddunbar looked part waitvalidatesave refactorings", "d": "4/2012"}, {"body": "looking closer causing attributes silently set server returns happening", "d": "4/2012"}, {"body": "uses get attributes means uses model current state attributes nt set model ignore looked part waitvalidatesave refactorings nt looked issue specifically", "d": "4/2012"}, {"body": "exactly got confused think reasoning behind sync uses tojson get set one way deal probably unset fields failure using previousattributes nt know cleanest", "d": "4/2012"}, {"body": "thanks reporting reverting previous attributes missed ones nt exist adding added pipeline flush", "d": "4/2012"}, {"body": "np thanks fix", "d": "4/2012"}, {"body": "handy want write tojson method see", "d": "4/2012"}, {"body": "thought purpose might although checked issues page tojson probably missed commits thanks", "d": "4/2012"}, {"body": "idiot nt underscore tell since actually setup backbone project scratch", "d": "4/2012"}, {"body": "thanks noticing", "d": "4/2012"}, {"body": "fixed reverting back min build", "d": "4/2012"}, {"body": "really sure looking answer may better luck finding live conversation irc mailing list event fundamental important difference reason exisistence former get one event model added latter get single event models added efficiency thing want completely blow away contents collection new set models", "d": "4/2012"}, {"body": "read entire post stop middle said end understand reset method throws reset trigger one time whereas add method throws add trigger model though usefulness returning context listening functions repeated know already want know useful return collection reset trigger opposed array models collection reset", "d": "4/2012"}, {"body": "chain call", "d": "4/2012"}, {"body": "something like javascript var model backbonemodelextend idattribute id parse function data var id data thisidattribute oid data thisidattribute id return data model new model id oid javadriver silly parse true", "d": "4/2012"}, {"body": "need something like may add functional", "d": "4/2012"}, {"body": "stated nested modelsids supported directly backbone type functionality provided plugin extension", "d": "4/2012"}, {"body": "exactly thank much", "d": "4/2012"}, {"body": "yep discussed bunch times instead calling simply call function wanted call first place fact option often code smell", "d": "4/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform", "d": "4/2012"}, {"body": "seems work fine chrome jsfiddle", "d": "4/2012"}, {"body": "code looks fine sure appropriate place post type issue probably get much better answers mailing list taken liberty posting question thanks", "d": "4/2012"}, {"body": "similar issues unable track able fix using newly introduced native sort rather underscoreje sort try comparator alternatively descending posted mailing list well", "d": "4/2012"}, {"body": "telling modelb undefined", "d": "4/2012"}, {"body": "upgraded backbone still nt work chrome weird cause works safari use webkit anyone else solution", "d": "4/2012"}, {"body": "issue solved thanks help guys", "d": "4/2012"}, {"body": "solve mathvallee use vincentbriglia suggestion", "d": "4/2012"}, {"body": "yeah also used sortby function", "d": "4/2012"}, {"body": "okay currently using issue closed though still working backbone", "d": "4/2012"}, {"body": "using chrome osx btw", "d": "4/2012"}, {"body": "problem nt comparator also way adding data array impossible correctly sort weird safari firefox working chrome real one", "d": "4/2012"}, {"body": "yes probably something adding data", "d": "4/2012"}, {"body": "timbrunsmo working backbone example ymichael seems work expected would mind posting code nt work", "d": "4/2012"}, {"body": "someone sanity also assess backbone posted comparators work using comparators production keep hearing nt work even though works read backbone sort method collection native javascript array sort", "d": "4/2012"}, {"body": "works expected", "d": "4/2012"}, {"body": "braddunbar time get snippet", "d": "4/2012"}, {"body": "timbrunsmo perfect thanks", "d": "4/2012"}, {"body": "braddunbar related chrome stable sorting whereas firefox safari browsers stable sorting internet explorer firefox safari browsers unstable sorting opera internet explorer arrayprototypesort chrome seems change sorting behavior depending array length array length smaller equal uses stable sort array larger uses unstable sort really issue sort collection attribute nt present models nt provide default idattribute rely orderofinsertion see stableunstable sorting action try different browsers", "d": "4/2012"}, {"body": "interesting nt know array sort nt necessarily stable sounds like nothing backbone differently though going leave one closed thanks vincentbriglia", "d": "4/2012"}, {"body": "interesting indeed saves trouble putting together snippet", "d": "4/2012"}, {"body": "hrm nt feature recently added", "d": "4/2012"}, {"body": "oops looks like fwiw version nt require null passed either eventname callback function want unbind context callback imho makes little bit cleaner others may think differently wrote like two months ago mentioned casually documentcloud submitting formally", "d": "4/2012"}, {"body": "believe tbranyen talking pull request adds similar functionality seems realistically motivate people really check play changes best bet always make pull request opinion even pr unlikely get merged always found others motivated interested code attached octocat also makes discussion around proposed changes easier also def going want upgrade master pr since testing old version nt much", "d": "4/2012"}, {"body": "damn nt refresh page realize already responded oops bowtie", "d": "4/2012"}, {"body": "yep feature added general want avoid sniffing arguments", "d": "4/2012"}, {"body": "aterris thanks advice jashkenas cool beans curiosity wrong typeof sniffing approach case someone tries use function returns event name function returns context instead providing string object", "d": "4/2012"}, {"body": "nothing wrong per se type sniffing usually means api poor instead type sniffing dynamic language without multimethods method take options object", "d": "4/2012"}, {"body": "seems like pretty edge case since primary key set user anyway think reason top head true although actually time override isnew reason remember right saying never something needed however see option called overrideisnew immediately feel like actually overriding isnew would avoid adding additional top level option backbonemodel used documented plus overriding isnew method means could override certain object set objects instead adding top level backbonemodel object initial thoughts sure commiters jump let us know thinking", "d": "4/2012"}, {"body": "thanks feedback current situation table medical codes primary key unique code entered user fact primary key ensures value entered user unique actually helpful adding extra autoincrement column table would course solve issue backbone creates meaningless unused id column well unused db index also may even allowed even make schema changes anyway particular situation moment sure may others agree magic property called overrideisnew probably terrible variable name amp nt really love another idea setter function model example yet another possibility parameter passed save method example actually prefer parameter approach nt touch model looking code could disruptive", "d": "4/2012"}, {"body": "would suggest custom models whose id generated client probably separate attribute added server check instance added server option create update put", "d": "4/2012"}, {"body": "already answered ticket reiterate right thing use actual put semantics work great way", "d": "4/2012"}, {"body": "thanks guys seems case clientgenerated primary key choice either modelisnew return accurate value else modelsave make appropriate request type ca nt scenario decided go correct semantics accept put server side rely modelisnew table think probably best approach", "d": "4/2012"}, {"body": "really internal helper function exposing regular backbone app probably nt use creating html templates sort instead nt think worth supporting version think tell use case using reopen", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions reason use instead", "d": "4/2012"}, {"body": "also believe duplicate would mind directing discussion thanks", "d": "4/2012"}, {"body": "thanks clarification mislead gets stripping treatment used pushstate hashchange cases plan next stable release fix included", "d": "4/2012"}, {"body": "never mind misunderstood meaning variable names selfclose", "d": "4/2012"}, {"body": "would hold back using", "d": "4/2012"}, {"body": "mean primary issue eventemitter backbone events different similar apis whereas backbonejs api nonstandard one nodejs projects issue nt want introduce nonstandard event system models rest application uses standard nodejs event system would fantastic could get work together somehow make apis compatible guess would aim trying gather feedback whether good idea anyone already attempted seems unlikely first one", "d": "4/2012"}, {"body": "could wrong node part use", "d": "4/2012"}, {"body": "note quite comparison backbonejs objecton event callback context alias bind objectoff event callback context alias unbind objecttrigger event args node eventemitter emitteraddlistener event listener alias emitteronce event listener emitterremovelistener event listener emitterremovealllisteners event emittersetmaxlisteners n emitterlisteners event emitteremit event besides new functions node eventemitter provides difference backbone argument seems logical step would override backbone functions node eventemitter shim context argument give go", "d": "4/2012"}, {"body": "sounds like good idea general feeling people using backbone server may first one encounter first one care context argument nt even necessary use anyway", "d": "4/2012"}, {"body": "interesting suggestion blocka keeping backbone specific node specific handlers may work quick attempt try tomorrow sometime coffee class backboneeventemitter extends eventemitter thanks", "d": "4/2012"}, {"body": "looks like nice approach glad working general nt think plans change backbone events api like node eventemitter anything aiming towards jquery events api case pretty comfortable writing app uses three pretty much pattern", "d": "4/2012"}, {"body": "nt actually use sortedindex yet nt use comparators often spent last minutes playing around console since sortedindex proxied underscore method writing essentially syntax sugar looks like actually expecting automatically pass comparator sortedindex methods simply proxied models passed first argument need pass final code ran backbone docs site console feels recreates issue shows get correct result c new backbonecollection ccomparator function model return modelget score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cpluck score csortedindex new backbonemodel score csortedindex new backbonemodel score ccomparator underscore method passed models never able figure order always return unless comparator kind passed knows sorting models even means actually correct behavior think makes sense keep every proxy method pretty sure addresses issue missed something way base talking lem know", "d": "4/2012"}, {"body": "say true thinking collections default using comparator since using method anymore many people actually use probably fine leave", "d": "4/2012"}, {"body": "cool octocat", "d": "4/2012"}, {"body": "uk hell yeah dudes", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "cool", "d": "4/2012"}, {"body": "brother love", "d": "4/2012"}, {"body": "god", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "diablo", "d": "4/2012"}, {"body": "devil", "d": "4/2012"}, {"body": "dj\u00e4vulen", "d": "4/2012"}, {"body": "obsessed", "d": "4/2012"}, {"body": "inflammatory closed", "d": "4/2012"}, {"body": "ok hero", "d": "4/2012"}, {"body": "way unoriginal troll reported github abuse kthanksbye", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "thanks opening another issue reported github abuse trollface", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "nt happen jquery well", "d": "4/2012"}, {"body": "hmm yes seem case nodejs eventemmiter", "d": "4/2012"}, {"body": "nt happen jquery well made quick dirty jsfiddle seems may disagree think behavior rather logic real usecase binding handler twice", "d": "4/2012"}, {"body": "yep way events supposed work like function run multiple times nt bind multiple times", "d": "4/2012"}, {"body": "sure mean callbacks ever defined used purpose please submit pull request failing test case proposed problem change", "d": "4/2012"}, {"body": "digging discovered backbonewraperror fallback error event process figuring utilize figure close ticket otherwise elaborate", "d": "4/2012"}, {"body": "looks like beat", "d": "4/2012"}, {"body": "hi thanks report sure using latest version backbone first version include behavior otherwise work code appears work paste console situation referring", "d": "4/2012"}, {"body": "sorry used see problem fixed thx", "d": "4/2012"}, {"body": "problem glad could help", "d": "4/2012"}, {"body": "thisel initialized early stage ensure events always bound wheter view rendered see last comment jashkenas explains far better", "d": "4/2012"}, {"body": "ok understand fact bother fact define el field descriptive way view know wo nt present time view initialized want give hints code reader hey view dealing section dom call thisel render function null since thisel found ensureelement gt thisel overwritten null thinking would love reloadelement method would reload thisel time reloadelement called sort setelement method based initial value el defined view overwirtten would imply thisel never overwritten null ensureelement initial value kept somewhere brought later order made available reloadelement wdyt", "d": "4/2012"}, {"body": "sure fully understand want achieve want give hints code reader nt declaring id attribute creating view el sufficient", "d": "4/2012"}, {"body": "mmm right solves first part equation construction view el field filled temporary element created occasion make call able handle events take back master nested views problematic problem nested view rendered like fact viewel reloaded existing dom element loaded master view problem nested view rendered thisel targets temporary element created ensureelement given id workaround call something like thissetelement thisid order update current thisel field newly added html fragment", "d": "4/2012"}, {"body": "fyi succeeded make something neat something like myview backboneviewextend initialize function options backboneviewprototypeinitializecall options note needs jquerylivequery plugin work detect tag addition dom", "d": "4/2012"}, {"body": "problems precisely reason views supposed manage allow backbone views create elements simply insert dom ready render wo nt loadorder isthiselementreadytorenderyet issues", "d": "4/2012"}, {"body": "problem nested view responsible create first element relies role master view element available time create nested view particular case encounter every nested views ca nt define el attribute workaround found thanks florianr use id code snippet added previously", "d": "4/2012"}, {"body": "hi thanks issue docs method left undefined encouraged override custom validation logic performed javascript custom logic decides whether given set attributes valid provide method model work correctly said areas ignore nt exist assume model valid seems consistency would suggest", "d": "4/2012"}, {"body": "fixed commit thanks report", "d": "4/2012"}, {"body": "tried latest version backbone", "d": "4/2012"}, {"body": "yep project running stepped around issue temporarily removing hashchange false letting hash change good enough need today honest really crappy issue report without much clarity information going close one time prolly thursday get together sample case recreate track see something accidentally end truly seems like issue backbone seem backbone issue create new ticket morebetter info", "d": "4/2012"}, {"body": "spirit thanks aterris", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "tombell quite thing extend notextend talking extend inherits used backbone classes need set inheritance something else model collection view router", "d": "4/2012"}, {"body": "simpler use constructor instead initialize var human kindextend tostring function consolelog hello", "d": "4/2012"}, {"body": "hello would give answer please direct comments thanks said use exactly way", "d": "4/2012"}, {"body": "oups sorry seen previous issues thanks response", "d": "4/2012"}, {"body": "nope urls case sensitive", "d": "4/2012"}, {"body": "confirmed loading page following reproduction steps adding todos returns array undefined elements however returns array two todo models alerts two ids proving exist", "d": "4/2012"}, {"body": "believe issue implementation get desired behavior change", "d": "4/2012"}, {"body": "looks like merged fix", "d": "4/2012"}, {"body": "nope true app configured also", "d": "4/2012"}, {"body": "think fine use case probably one worth tangling semantics additional option behavior instead add validation function call whenever model changes state nt valid trigger events need change semantics core backbone function easily add", "d": "4/2012"}, {"body": "torn half agrees might well return information since however half feels like adding ands additional thing needs documenting inconsistency return value returning undefined called", "d": "4/2012"}, {"body": "yeah trying work around monolithic structure example support browsers like ios safari haspushstate unfortunately nt work etc looks like due refactoring agree view specific item withdraw pr", "d": "4/2012"}, {"body": "backbonehistory compare historyjs regard putting aside inconsistencies devices poorly served backbonehistory either mode operation documented recommended practice crossbrowser support", "d": "4/2012"}, {"body": "good question possible next step test integrating historyjs backbone purposes able hack around backbone deficiencies support specific cases need ios without adding bulk historyjs supports eg html browsers nt need moment want integration find reference someone already done surface googling nt find much swell basically sniff ua enable safari ios even though supports reveals bug post second regarding specific feature returns result use case moment startup want insert another entry history chain root app eg user backs entry url get root home app backing wherever came often blank page hope makes sense done router simpler way love see", "d": "4/2012"}, {"body": "closing withdrawn", "d": "4/2012"}, {"body": "nt believe would correct first hash encountered url begins fragment identifier hashes intended used part url must encoded use appropriate places instead", "d": "4/2012"}, {"body": "afraid would nt correct point history start notified app page loaded want ignore information go right ahead set flag ignore", "d": "4/2012"}, {"body": "problem per related prs want push history onto queue routing fragment launched app necessarily ignore incoming fragment also adjust options according ua eg override pushstate although may available implementation looking pretty tangled point due refactoring look see make work eg calling earlier later", "d": "4/2012"}, {"body": "ok also adjust options according ua eg override pushstate although may available already possible check ua starting history want push history onto queue routing fragment launched app seems wrong nt simply break meaning back button history real pages navigated", "d": "4/2012"}, {"body": "abstact concept merely come link interior page want also home page history queue first back takes home exit app often blank tab ie history implicitly gets crumbs along route working already replacestate see make simpler", "d": "4/2012"}, {"body": "want also home page history queue first back takes home seems wrong hope reconsider would major annoyance users wish leave able wo nt ever go back site like problems using back button contrary ingrained mechanism nt overridden alone reason existence pushstate still ideologies aside think could achieved like hope nt alerts unload matter much better solution would prominent way go back home near requested content using cookie detect passing users would indicate force merit site easily get back home still manipulate hack history please make optin", "d": "4/2012"}, {"body": "zeno thanks basically already nt one evil sites popups sure want leave etc rather deeplink app referrer opening new tab anyway hitting back would get user blank page think useful give home page app really want blank page hit back", "d": "4/2012"}, {"body": "believe already delegates add fact inserts model beginning collection already documented add model beginning collection takes options add going close think request already satisfied please let know missed something", "d": "4/2012"}, {"body": "see one issue code though called object literal opposed instance return object literal return created model get around returning first model via fix certain good idea since current implementation correct regardless", "d": "4/2012"}, {"body": "right realized replying deleted post method changed confused doc thought could pass array", "d": "4/2012"}, {"body": "ok thanks", "d": "4/2012"}, {"body": "afraid would fudging semantics confusing way instead use", "d": "4/2012"}, {"body": "think people would also benefit caused naming collisions problems didnt know model instance holds reference collection owns", "d": "4/2012"}, {"body": "right got mixed point collection property oops behavior describe actually enabled code documented pull request confused usage said add model collection create etc collections preparemodel method uses collection option act reference noted pull request also used url method line going update pull request make documentation accurately reflect true usage actually agree maybe property collection since really feels like internal reference even still set manually optionscollection one else gets likely make pull request tomorrow changes make reality atleast spur discussion although wonder separate issue since really documentation agreement making collection property collection documentation assuming collection figured id ask", "d": "4/2012"}, {"body": "aterris think collection property suggestion pretty good", "d": "4/2012"}, {"body": "would still like access collection model though believe common usage", "d": "4/2012"}, {"body": "yeah guessing change might cause backwards compatibility problems also accessing modelcollection projects", "d": "4/2012"}, {"body": "yea backwards compatibility would issue want go route might start accessible modelcollection modelcollection preserve compatibility use modelcollection internally would set make breaking switch ever felt worth might mean leaving best option tho", "d": "4/2012"}, {"body": "question whether modelcollection considered private public question answered always confusion like think public beneficial convenient access collection model common assign properties collections accessed model", "d": "4/2012"}, {"body": "moving conversation pull request", "d": "4/2012"}, {"body": "amandoi could try using phantomjs", "d": "4/2012"}, {"body": "afraid intended return reference model want jqxhr add model hand instead semantics failure cases think valid may reference model unable added server way reference model unable saved server", "d": "4/2012"}, {"body": "fair enough agree ok reference model failed persist want know failed succeeded one use callbacks semantics differ slightly possible pass around piggyback", "d": "4/2012"}, {"body": "sure follow quite enough help may better luck asking mailing list irc general javascript reference prototype chain reference shared overwritten whatever", "d": "4/2012"}, {"body": "struggling across issue perhaps would beneficial update documentation explain slightly currently reads remember javascript objects passed reference include object default value shared among instances perhaps could change remember javascript objects passed reference include object default value shared among instances defaults containing objects passed reference defined using function wish share objects instances", "d": "4/2012"}, {"body": "benjen sounds reasonable care work pull request effect", "d": "4/2012"}, {"body": "binding sync event fetch also", "d": "4/2012"}, {"body": "love way backbone right add pretty easily need first place bloating framework hard remove also dont agree backbone inspired ruby philosophy especially since backbone encourages users implement things multiple ways stays slim focused", "d": "4/2012"}, {"body": "think braddunbar one nailed nose proposed proposed proposed probably antipattern event proposed nt something think belongs event model level given piece ui nt care whenever model starts sync editing piece ui instantiating change cares model starts sync ui cares model changes backbone wants provide right hooks possible hooks frameworks offer dozens hundred events box easily become far confusing need event inversion control something used abstraction justified", "d": "4/2012"}, {"body": "jashkenas disagree sync say part ui responsible initiating sync cares model starts sync quite assumption instance model may part many views combination events could fire sync whole idea behind events allow capture changes matter happened also nt get argument sync complete convenience event intended reduce code repetition error success blocks reason jquery complete callbacks ajax method really end requesting addition two new events allow complete handlings persistancecommunication events number requests feature clear one think better reason adds bloat required reject feature two independent lines code hardly gets way messes code yet amazing job keeping users code cleaner also nt completely appreciate closing ticket clearly resolution reached", "d": "4/2012"}, {"body": "wardrop two events requesting use use patch issues address later another request nt understand missing", "d": "4/2012"}, {"body": "concede sync error combo would negate need sync complete trigger patch like nt understand added core also suggest rename sync error namespaced sync success sync error think better describes triggers sync error ambiguous sync could mean anything sync start sync complete sync success etc error includes error events necessarily related sync errors may want handle errors sync errors errors kept catchall errors sync errors synconly errors ambiguous naming triggers always concerned thoughts", "d": "4/2012"}, {"body": "agree bit terse something generally like point somewhat moot renaming would break backward compatibility cause great deal confusion adding backbone usually trigger similar event view syncing model usually includes extra arguments specific view makes impractical inclusion originally asked use case easy enough implement one valid solution backbone probably stay indifferent done agree jashkenas generally view event model event said nt built support implement whichever way makes sense", "d": "4/2012"}, {"body": "compatible terse verb would would carry arguments would useful even views around would also flag prevent writing model sync still running agree namespaced events would better would also dictate powerful useful convention concur changing would painful also totally bought event name end world think every app subclasses customstrangereligious stuff end seems pretty innocuous popular addition already good set existing events", "d": "4/2012"}, {"body": "suggesting existing events removed yet think would safe deprecate existing events favor sync could remove change old sync error aliases later version mind thought whole idea release indicate backwards compatibility may break take extra precautions reading release notes anyone expecting seamlessly update library nt hit mistaken opinion", "d": "4/2012"}, {"body": "xiata would mind providing code snippet illustrating issue nt think quite understand describing seems though describing adding collection another collection instead model", "d": "4/2012"}, {"body": "app seemed logical first use collection inside models attributes might deal lot serverside oop time encountered problems methods clone tojson working events decided attach collection directly model anyway mentioned documentation even find way fix clone believe would many places collections attribute fail suggest try use anything sophisticated attributes even objects let backbone devs know mention documentation attributes limitations", "d": "4/2012"}, {"body": "added documentation brief yes model attributes work best plain flat data nested associated collections discussed faq", "d": "4/2012"}, {"body": "uhm javascript var javascript var said agree pretty common way embed callspecific data especially coming jquery background still clean use common handlers specific code using different architecture would probably better", "d": "4/2012"}, {"body": "braddunbar jashkenas silence mean agree last comment", "d": "4/2012"}, {"body": "maxlk issues fixed", "d": "4/2012"}, {"body": "thanks", "d": "4/2012"}, {"body": "jashkenas something want support incidental add tests effect", "d": "4/2012"}, {"body": "think probably something support", "d": "4/2012"}, {"body": "agreed seems correct used collections clear hand models however unable replace whole attributes would require api change sake correctness", "d": "4/2012"}, {"body": "trycatch nt work either following code demonstrates adding model collection twice indicates error application logic times nt feasible application logic never duplicated model would much better way silently ignore duplicates", "d": "4/2012"}, {"body": "abraham error nt thrown anymore", "d": "4/2012"}, {"body": "kyleamathews awesome thanks tip nt noticed yet", "d": "4/2012"}, {"body": "would much much rather able clean urls choice use pushstate forced routes using pushstate begin also breaks routes page major pita mention breaking links andor favorites already deployed site expose least optional hook use pushstate allow leading slashes even default opposite", "d": "4/2012"}, {"body": "way see want allow trailing slashes backbone app add duplicate routes place issue going closed wo nt fix think least legit comment explaining solve problem us philistines want allow trailing slashes awfully coded bad practice ridden app", "d": "4/2012"}, {"body": "would mirror chikamichi request change part change log breaking change legacy applications bit difficult track", "d": "4/2012"}, {"body": "still nt got solution let give example let say need render html backend indexing purposes google force backbone bind existing html elements views binded click events work already rendered html elements could think way would require render backend rerender frontside think inefficient anyone else faced issue", "d": "4/2012"}, {"body": "certainly attach backbone views existing html instance following code would work html snippet javascript var view backboneviewextend events click trash trash trash function var views html map function el return new view el el reason ca nt something like", "d": "4/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform fyi saw thread posted comment", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "braddunbar issue closed documentationonly change trying advocate actual fix would also fix events issue use behavior replacing rather extending", "d": "4/2012"}, {"body": "machineghost backbone already providing prototypal inheritance scheme like property extendedchangedmerged fashion think changing paradigm one two properties cause confusion around issue mention serious backward compatibility problems would cause", "d": "4/2012"}, {"body": "backbone already providing prototypal inheritance scheme prototypal inheritance systems equal thing nt prototypal inheritance vs classical two different views implement prototypal inheritance backbone basically comes look defaults events individual properties going look attributes individual property someone set foo bar behind scenes let attributes foo bar would obviously silly attributes nt property collection properties similarly events defaults nt individual properties really think continuing pretend going cause problems make framework weaker overall soon start treating way treat attributes suddenly issue goes away likewise issue objects defaults goes away plus think usecases functionbased defaults would go away implementationwise none hard use extend call day backwardscompatability backbone nt even yet perfect time fix design decisions made past ill effects could nt foreseen b plenty strategies handling sort thing one example make model collection class implements old behavior let say simpleinheritancemodel simpleinheritancecollection make model collection use extend defaults events missing similar properties really collections properties fix add method backbone called usesimpleinheritance called method would set backbonemodel simpleinheritancemodel backbonecollection simpleinheritancecollection go every new user gets proper inheritance events defaults works rest backbone ie attributes nt require warnings like remember javascript objects passed reference include object default value shared among instances warnings easily missed confuse new users existing backbone users likely welcome changes nt take word could always make poll asking people want simple inheritance extendbased inheritance nt ca nt afford fix issues might crop add single line backboneusesimpleinheritance add time increment version number file name none affects upgrade heck maybe people even continue using option performance reasons future probably think extendbased inheritance natural quickly forget defaultsevents ever anything differently basically everyone wins approach", "d": "4/2012"}, {"body": "machineghost", "d": "4/2012"}, {"body": "rather old curious know progress created quick version plugin based seems work even automagically expose members looking defaults object one exists uses hacks like wrapping backbonemodelextend looks like works pretty well tests feedback would appreciated", "d": "4/2012"}]