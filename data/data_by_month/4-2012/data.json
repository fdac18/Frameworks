[{"title": "unexpected behavior try treat backbone model instances classical oo fashion", "body": "see snippet would traditionally expect would contain values however contains surprisingly behavior one would expect", "num": "1262", "d": "4/2012"}, {"title": "collection inefficiency", "body": "upgraded noticed significant decrease speed application application handles many large collections adds large number models certain points anywhere models added time version sortedindex function used taking cpu version code became significantly slower sortby function taking cpu", "num": "1261", "d": "4/2012"}, {"title": "add router specs pushstate true", "body": "process addressing attempting write spec noticed specs pushstate true test suite probably enable pushstate current test suite get redirected file pathtotesthtml router pretty important part backbone definitely thoroughly tested seems like scenarios cause different behavior router pushstate true pushstate true pushstate unsupported browsers pushstate false current scenario say would caught scenario adding router specs scenarios mind may catch unknown issues could stub windowlocation prevent redirect file pathtotesthtml would love help way", "num": "1259", "d": "4/2012"}, {"title": "backbone history pushstate enabled incorrectly handles urls query params browsers support pushstate", "body": "repro enable pushstate add params backbone redirect redirect note backbone correctly redirects pushstate disabled jsbin work great demoing issue nonpush state supported browsers redirect still show issue javascript function var router backbonerouterextend routes anything anything anything function alert windowlocationsearch windowrouter new router backbonehistorystart pushstate true thanks chatting last night backbone meetup jashkenas hopefully fix spec coming weekend fixing may break earlier apps feelings issue", "num": "1252", "d": "4/2012"}, {"title": "add iterators collections", "body": "common pattern use backbone collections grabbing single model collection looking next model previous model collection proposed iterators similar see plan building standard way backbone", "num": "1251", "d": "4/2012"}, {"title": "backbone save success error callback issue", "body": "trying save backone model error success callbacks documentation says save accepts success error callbacks options hash passed model response arguments error callback also invoked model validate method validation fails serverside validation fails return http response code along error response text json server validation fails sending response error object still success callback called save function server works fine nt send error object response ie send response code using backbone", "num": "1249", "d": "4/2012"}, {"title": "collection execute reset operation model trigger destroy", "body": "example thismodelbind destroy thisdestroy viewinstancecollectionreset", "num": "1248", "d": "4/2012"}, {"title": "modelurl nt match documentation", "body": "according backbonejs documentation modelur generates urls form collectionurl id falling back urlroot id model part collection line code var base getvalue urlroot getvalue thiscollection url urlerror look like var base getvalue thiscollection url getvalue urlroot urlerror basically moment urlroot set model model never checks belong collection", "num": "1245", "d": "4/2012"}, {"title": "defaults nt propagate multiple levels inheritance", "body": "consider code extend existing model provide new defaults original defaults lost nt operate would intended could possibly fixed modifying extend perform basic merging member defaults parent child", "num": "1244", "d": "4/2012"}, {"title": "simplify fetching single models aka incremental collection fetching", "body": "somewhat related issue things changed since think worth another look finding bit clunkier like take partially populated collection fetch new model id add collection quite possible missing something something backbone expert two approaches found create new model instance specifying id constructor call fetch works problem initialize method already called model data loaded case initialize stuff like creating child collections populating attributes data work yet nt fetched considered using parse init work sequencing reversed two cases initialize called first creating model fetching parse called first collection fetching use collectionfetch add option set one close perfect simple way specify id model load particular using restful urls id part base url query string params sort kludged specifying url option call fetch building url manually concatenating collection url model id works seems clunky one solution would specify id collectionfetch maybe simple optionsid along add true would simple incremental collection loading maybe better solution single model fetching solves issue listed", "num": "1242", "d": "4/2012"}, {"title": "collectionget id return undefined", "body": "using happen find todo example creating new todo new created todo retrieved collectionget id method output diving todo example chrome var todosmodels consolelog todosmodels id ids collection var todosmodels consolelog todosget todosmodels id child child child ids retrieved via collectionget id think bug sure backbone todo example please help confirm thanks", "num": "1241", "d": "4/2012"}, {"title": "rapid rendering views multiple backbutton clicks", "body": "hi working project right testing happen click backforward lot test chain clicks app noticed hit back button forward matter rapidly cues several render events view waiting data server wanted throw idea render queue concept similar animation handled jquery queue would let renders happen serially user may expect otherwise jarring rendering see flashes content gets overwritten etc similar queue idea wonder would make sense stop renders happening except last render requested may may make complete sense think could value save excessive traffichits rest server getting collections nt need since would nt displayed thoughts", "num": "1240", "d": "4/2012"}, {"title": "custom view attributes shared different instances", "body": "please see fiddle creating instances itemview calling additem method add items itemview itemview items itemarray property instead share itemarray property items problem might backboneview resetting custom attributes constructor", "num": "1237", "d": "4/2012"}, {"title": "conflict plugin click events", "body": "hi trying use backbonejs jquery plugin easytabs seems backbone highjacking click event plugin thing try use jquery ui tabs errors anchor link url seems click event blocked someone already issue", "num": "1233", "d": "4/2012"}, {"title": "request support regexp route method", "body": "hello would like provide configurable regex value execution change routing methods could done creating regexp based whatever rules changed tried current backbone implementation nt appear work thanks", "num": "1231", "d": "4/2012"}, {"title": "big bug need default route router", "body": "code example jsfiddlle remove js code alert function route defaultroute function actions alert actions route nt work however remain alert actions work reallay weird need helps sincerely beginner backbone", "num": "1230", "d": "4/2012"}, {"title": "sync event triggered method call success callback", "body": "catalog events faq says yet event triggered createsavedestroy method call nt passed success callback options argument bit time ago bound view render method sync attempted use success error callbacks user notifications current behavior make certain amount sense maybe requires documentation update", "num": "1229", "d": "4/2012"}, {"title": "tagname able defined function ala classname", "body": "currently tagname must string ca nt result function expect behavior similar classname attributes etc webkit browsers show", "num": "1228", "d": "4/2012"}, {"title": "backbone routes fail using option", "body": "hi noticed following using option serving page something url hash tidy example navigating link changes url root push state browsers ex chrome hash change browsers ex ie clicking link reroutes instead detecting location might misreading light routes documentation demo source available real issue missing something reading code come patch tightens handling fragment resolves issues see commit fixes real issue yes commit without spec pointers howto would welcome would happy refactor making easier spec process thanks working find incredibly useful", "num": "1226", "d": "4/2012"}, {"title": "error callback model save nt parsejson response", "body": "hey guys something like rails back end instance backbone model error callback getting jquery ajax response object even though response header applicationjson workaround using function wrapper pass callback javascript jsonifyresponse function fn return function model response var json jsonparse responseresponsetext fn model json thisusersave null success thisregistered error jsonifyresponse thisregistererror nt really ideal intuitive nt mind writing patch wondering something else need get response parsejsond b reason guys dont want modify current behavior thinking would pretty simple check header wraperror applicationjson parsejson", "num": "1224", "d": "4/2012"}, {"title": "modelsave data wait true stores new attributes even bad response", "body": "x new backbonemodel xurl someurl xsave test wait true save fails http response xtojson test fields failed save exist model bad response argue nt made model attributes get reponse wait true passed", "num": "1223", "d": "4/2012"}, {"title": "modeltojson collectiontojson unused options argument", "body": "issue reading backbonejs found unused options argument two methods javascript backbonemodel backbonecollection intentional", "num": "1222", "d": "4/2012"}, {"title": "download site production missing view namespace", "body": "download production link backbone home page replicated following", "num": "1221", "d": "4/2012"}, {"title": "unintentional build", "body": "realized rebuild commit wondering intentional differs last changes", "num": "1218", "d": "4/2012"}, {"title": "difference objects returned collectionreset collectionadd", "body": "backbonecollectionreset backbonecollectionadd clearly used different things however similarities two one trigger reset add respectively take list models input documentation states reset could used bootstrap collection initial page load example really nt make sense though page loaded first time wo nt collection empty anyway fact much realistic use case would refresh entire collection page already loaded furthermore could easily use backbonecollectionadd bootstrap collection beginning however using reset appealing could technically use bootstrap initially refresh collection point runtime question around object returned two methods reset add reset method includes object multiple keys one models key points array models added reset method key really useful use pass template rendering likewise array also present add method behavior becomes different reset method triggers reset trigger passes back whatever function listening plus options scope reset method unless bound higher scope using bind technique nt look far reset trigger reset method differs add trigger add method instead passing variable listening functions passes instead models array think lot easier deal trigger passes models array instead passing context listening functions line optionssilent thistrigger reset options line modeltrigger add model options understand reset method throws reset trigger one time whereas add method throws add trigger model though usefulness returning context listening functions nt functions interested models array ultimately going get snagged passed render function anyway", "num": "1217", "d": "4/2012"}, {"title": "use nested id", "body": "example mongodb document id oid field", "num": "1215", "d": "4/2012"}, {"title": "add ability disable navigate url short circuit", "body": "navigate method router object following line thisfragment frag return target url current url navigate method nothing app want able execute routing code even url thinking extra field could passed options object navigate method force truefalse default set false set true navigate method would still run even current url target url discussed willing pull request change would accepted project thanks mark", "num": "1214", "d": "4/2012"}, {"title": "comparator work firefox safari chrome", "body": "issue try sort collection using comparator works firefox safari chrome someone already got issue thanks code var itemmenu backbonemodelextend sync localsync var itemsmenu backbonecollectionextend model itemmenu sync localsync comparator function itemmenu return itemmenuget lastname localstorage new store itemsmenu", "num": "1212", "d": "4/2012"}, {"title": "feature usable events functions contexts combination thereof", "body": "modified backbonejs branch wanted submit issue first get comments experienced backbonejs committers submit pull request made following commit allows backboneeventsoff usable events functions contexts combination thereof tested using without issues far development environment wanted see anyone else saw value patch useful could test let know working fine see value submitting pullrequest main branch", "num": "1210", "d": "4/2012"}, {"title": "force modelisnew return true", "body": "tables primary key autoincrement provided user calling save table like seems way backbone issue post request soon user specified primary key id longer null modelisnew always return false results put request every time need post happy submit pull request w unit test much basically done probably fairly obvious creating model setting modeloverrideisnew true cause model considered new every time results insert", "num": "1209", "d": "4/2012"}, {"title": "feature idea allow make use instead", "body": "fourth argument would make dealing escaping things much easier stands instead open ways make cleaner thanks", "num": "1208", "d": "4/2012"}, {"title": "double historynavigate fallback", "body": "assume backbone started following configuration also history left default value invoking router browser supporting pushstate causes page found error browser address bar shows without host caused double passed concatenated possible fix use already leading stripped instead use", "num": "1207", "d": "4/2012"}, {"title": "option save fetch destroy sync nt work errors server", "body": "function specified option methods called server returns status code described documentation function actually passed method specified function wrapped another function using problem function returned method nt compatible expects option takes attributes instead nt receive information expect thus fails pass right information userdefined option meaning using respond server errors nt work", "num": "1205", "d": "4/2012"}, {"title": "integration node eventemitter", "body": "hey guys thinking using backbonejs serverside using nodejs models however rest application written using node built eventemitter wondering guys thoughts whether already play nicely steps make play even nicer would love know thanks guys ben", "num": "1202", "d": "4/2012"}, {"title": "collectionsortedindex use collectioncomparator", "body": "use always returns", "num": "1198", "d": "4/2012"}, {"title": "backbonejs creator epic man", "body": "great sober difference someday", "num": "1197", "d": "4/2012"}, {"title": "united kingdom", "body": "united kingdom remain throne", "num": "1196", "d": "4/2012"}, {"title": "suck cock", "body": "dedicated spinejs forever us vs uk haha", "num": "1195", "d": "4/2012"}, {"title": "hate black males", "body": "hate black males really ban everything say black black power", "num": "1194", "d": "4/2012"}, {"title": "backbonejs nt allow", "body": "hell yes get give team alcohol", "num": "1193", "d": "4/2012"}, {"title": "backbonejs renamed cockjs", "body": "hell yeah nt drugs", "num": "1192", "d": "4/2012"}, {"title": "", "body": "suck cock", "num": "1191", "d": "4/2012"}, {"title": "backbonejs vs intoxicatedjs", "body": "hit something wrong tonight turned devil always turn devil intoxicated sorry cali ftw", "num": "1190", "d": "4/2012"}, {"title": "sad circus", "body": "", "num": "1189", "d": "4/2012"}, {"title": "backbonejs renamed freshjs due copyrights issues", "body": "note guys changing name next release changing freshjs due conflicts company called breakbone input new name appreciated", "num": "1188", "d": "4/2012"}, {"title": "backboneevents allow rebinding method twice", "body": "binding event function repeatedly bind event function meaning function run multiple times way around always unbind rebind method illustrate point real gotcha way events work valid use case binding function multiple times could ensure backboneeventson bind event twice perhaps overwrite old binding", "num": "1186", "d": "4/2012"}, {"title": "success error callbacks undefined", "body": "problem view passes options object literal model sync method error success methods stubbed function therefore extended extend params options pattern propose leaving methods undefined unless specifically declared way extending objects produces desired effect", "num": "1183", "d": "4/2012"}, {"title": "unbinding callbacks events", "body": "modeloff works stated documentation example modeloff documentation removes callbacks events objectoff null null context however call removes callbacks regardless context first argument null dn ones matter see backbonejs line function events callback context var ev calls node events delete thiscallbacks else calls thiscallbacks return", "num": "1182", "d": "4/2012"}, {"title": "discuss viewel initialized early", "body": "currently backboneviewel field initialized view construction time ensureelement particular reason initialization made early particular case use master views responsible retrieving html fragments via ajax call server master views composed nested views responsible sub fragments master html fragment example let say master fragment several tabs use nested view per tab master view constructs nested view initialize phase say html fragment rendered included dom problem since instantiate nested views early even declare el mytab nested view thisel always null time ensureelement called mytab yet present dom know workarounds instantiate nested view master html fragment appended dom wondering number instances nested views wo nt grow substantially every time reload html fragment manually call setelement nested view html fragments appended dom could avoid things manually thus forget would better discussion enhancement open minded like know things wrong", "num": "1180", "d": "4/2012"}, {"title": "modelisvalid working", "body": "hello using backbonejs backbonevalidationjs model set validation rules call modelisvalid gives error function isvalid function return thisvalidate thisattributes thisvalidate defined wrong", "num": "1179", "d": "4/2012"}, {"title": "get fragment using pushstate true hashchange false", "body": "hey guys issue using pushstate true hashchange false either use push state fall back page loads app serve page navigate however go something instead root ie options fragment sent router empty removing haschange false get something fragment gets used start history router initialize method means works correctly go page show right stuff expect ie url gets routed route thoughts something stupid still trying figure missing something using incorrectly possible bug", "num": "1177", "d": "4/2012"}, {"title": "lt bb object model", "body": "hi sometimes need create something like class extend method model router view collection perfect wanted know way best solution useful organize code thank opinion", "num": "1176", "d": "4/2012"}, {"title": "make backbonerouter case insensitive", "body": "currently backbonerouter run route functions unless route matches case url case defined router typical browser behaviour ignore case handling url", "num": "1175", "d": "4/2012"}, {"title": "model ids properly indexed collections creation", "body": "believe model ids properly indexed creation reproduce using backbone local storage todos demo use chrome developer tools set breakpoint line execute windowtodos todos javascript shell gives global reference todos collection go ahead enter todos app call map windowtodosmodels function x return windowtodosget xid get back child child child child undefined todos retrieved via fetch properly index get method works fine todos newly created properly index get returns undefined note newly created todos ids backbone local storage assigns ids indexed properly byid field collection", "num": "1173", "d": "4/2012"}, {"title": "nt navigate pushstate explicitly wanted", "body": "line current head pass eg browser use even broken", "num": "1171", "d": "4/2012"}, {"title": "option allow modelset run validations bail fail", "body": "really like able modelset run validations trigger error event callback bail validation fails want model attributes track exactly user entered also want receive events callbacks model transitions valid invalid accomplish first part using option validations nt run callbacks nt fired nt easily know model transitions valid invalid could alternately use default behavior model gets sync user entered issue example save button view hooked model user clicks save button natural way handle seems call misleadingly succeed invalid attribute value actually set model due validation failure perhaps thinking backwards would crazy add option would modify default behavior continuing update relevant attribute even validations fail still fire error events callbacks", "num": "1169", "d": "4/2012"}, {"title": "historynavigate return value loadurl", "body": "calling return value ie last line read", "num": "1168", "d": "4/2012"}, {"title": "gethash use last hash fragment", "body": "order allow app also pass hash parameters routing fragments suggest change regexp line order select last hash param url alternately splitting eg amp would acceptable may need also call line", "num": "1167", "d": "4/2012"}, {"title": "set fragment option historystart", "body": "would useful able specify starting fragment since app may want fragment derived loaded page propose adding eg already done something similar app following change required line current head", "num": "1166", "d": "4/2012"}, {"title": "unshift", "body": "hi guys minor issue noticed unshift insert single element beginning collection doc says takes options add either update doc delegate add option", "num": "1165", "d": "4/2012"}, {"title": "callable attrs collectionwhere", "body": "powerful filter models eg collectionwhere haschanged true", "num": "1164", "d": "4/2012"}, {"body": "nope working model attribute clearing fire event", "d": "4/2012"}, {"body": "javascript properties prototype shared reference like classlevel properties would shared way ruby like different hash instance define function documented", "d": "4/2012"}, {"body": "hi jdkanani thanks issue already discussed would mind directing comments thanks", "d": "4/2012"}, {"body": "interesting would mind telling us quick example test adding models single call using style comparator function takes one argument style function takes two former try latter", "d": "4/2012"}, {"body": "thanks much patch merged master specs yes would great problem hard single html page serverside support find way within qunit suite", "d": "4/2012"}, {"body": "considering model exist several different collections default feel free add methods models like", "d": "4/2012"}, {"body": "response object proper status code guess something going headers properly interpreted", "d": "4/2012"}, {"body": "afraid nt know answer question callback using jquery callback perhaps better debug example", "d": "4/2012"}, {"body": "feel something wrong", "d": "4/2012"}, {"body": "thanks issue deianvasilev already reported fixed", "d": "4/2012"}, {"body": "note parentextend extend methods also see declared backbone way note defaults declared function might need something like following inheriting multiple levels", "d": "4/2012"}, {"body": "workaround assign function defaults attribute extend javascript animal backbonemodelextend defaults eyes legs dinosaur animalextend defaults function return extend legs arms tooshort result dinosaursuper defaults var dog new animal consolelog dog dogget eyes eyes dogget legs legs var rex new dinosaur consolelog rex rexget eyes eyes rexget legs legs output", "d": "4/2012"}, {"body": "hi captncraig may work work like classical inheritance schemes certainly make behave similarly declaring function like sbrekken suggests discussed previously still discussed would mind directing discussion", "d": "4/2012"}, {"body": "think would probably use custom override something like strikes perhaps would nice passed way override necessary thoughts", "d": "4/2012"}, {"body": "big fan passing options fetch url needs changed properly lives function really highlighting fetching contents collection loading individual model really want something like right perhaps passing entire url", "d": "4/2012"}, {"body": "specifying id nt feel different specifying page number cases specifying subset collection load fact realized could even munge server side code check querystring id third approach also get coming intent collections bookfetch approach could work url handling seems bit tricky passing id may enough book could resource nested different parents would know url construct yeah seems like pass complete url maybe collection well id app generally nt used urlroot models models inherit url collection course construct whole url nt much difference original solution specify url collection fetch options", "d": "4/2012"}, {"body": "yep let leave combined fact fetch necessarily asynchronous means would nt reference complete model server came back point think well writing either listening using callback", "d": "4/2012"}, {"body": "big problem newfetch approach sequencing issue initialize parse two cases described original post sure fixed would also solve problem", "d": "4/2012"}, {"body": "hi xiaocong thanks issue also reproduce appears always get populated take closer look later", "d": "4/2012"}, {"body": "nt know relevant anymore looks like longer exposing variable globally example app", "d": "4/2012"}, {"body": "let guess rendering changereset also unloading viewsunbinding listeners add fetch calls stored array somewhere like namespaceappfetchcalls route somewhere else use jquery cancel xhr objects xhrabort array", "d": "4/2012"}, {"body": "hi tvpmb thanks issue think probably get better response type question mailing list taken liberty posting question behalf thanks", "d": "4/2012"}, {"body": "thanks brad list well kmiyashiro interesting thought correct pushing new view element route bad thing everything read people talked lot unbinding events zombies etc unbindingunloading", "d": "4/2012"}, {"body": "correct", "d": "4/2012"}, {"body": "ouch links resources could review figure fri apr kelly miyashiro lt reply replygithubcom wrote correct reply email directly view github", "d": "4/2012"}, {"body": "yes since property prototype shared instances want instances set constructor javascript var itemview backboneviewextend initialize function thisitemarray", "d": "4/2012"}, {"body": "fiddle described", "d": "4/2012"}, {"body": "hi braddunbar already used solution posted workaround yet seems like nt need quite confusing behavior nt think explain use prototype nt quite understand saying current implementation incorrect trying get clarification understand often specify view properties way spawnedc used fiddle clear properties view override initialize method aswell seems cumbersome example apps views properties specified exact way see todojs template variable specified manner course unchanging string never see sort problem correct way specify dynamic view properties surely case override init method", "d": "4/2012"}, {"body": "explain use prototype putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances correct way specify dynamic view properties surely case override init method yes set property mutable value instance classconstructor constructor case called constructor example backbone sets properties instance", "d": "4/2012"}, {"body": "braddunbar create new instance would expect properties reset brand new instance nt expected behaviour missing something", "d": "4/2012"}, {"body": "hi braddunbar putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening agree spawnedc last statement would nt expect properties shared instances sibling views", "d": "4/2012"}, {"body": "actually none properties reset unless reset constructor always prototype properties shared instances created constructor javascript var function var new var b function bprototype aconstructor b var new b var new b consolelog undefined consolelog undefined afoo consolelog consolelog consolelog true interested great explanation", "d": "4/2012"}, {"body": "nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening exactly recommend creating instead prototype property", "d": "4/2012"}, {"body": "braddunbar thanks explanation link still kind weird unexpected behavior one hand hand makes complete sense share properties views read javascript garden article sure become clear", "d": "4/2012"}, {"body": "hi mathvallee thanks issue judging description could many reasons click event nt firing provide us code look", "d": "4/2012"}, {"body": "sounds like eventstoppropagation missing event handler", "d": "4/2012"}, {"body": "ca nt really show code one line call plugin wookiehangover plugin event handler backbonejs", "d": "4/2012"}, {"body": "probably backbone problem feel free ask mailing list irc", "d": "4/2012"}, {"body": "closing issue incorrectly setting route", "d": "4/2012"}, {"body": "sorry nt realize root cause problembut got really bug problem used links document said link related route routes posts id somefun get param posts actually backbonerouter ca nt deal route name plz check remove route defined routes posts id somefun fine hope fixed asap tks", "d": "4/2012"}, {"body": "one link clicked twice seems action happened second time another bug designed way sorry silly questions", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions seems work intended without solve issue", "d": "4/2012"}, {"body": "overriding success stopping system knowing event successful thus nt raising sync event could potentially worked around wrapping success call passed sure best behavior think would better triggering event situation", "d": "4/2012"}, {"body": "backbone already wrapping success error callbacks overriding anything", "d": "4/2012"}, {"body": "fyi previous discussion topic", "d": "4/2012"}, {"body": "thanks oddly search sync issues bug nt show", "d": "4/2012"}, {"body": "seems reasonable pull request incoming", "d": "4/2012"}, {"body": "looks like superseded moving conversation", "d": "4/2012"}, {"body": "even request asks json response error necessarily json form nt want assume often error message", "d": "4/2012"}, {"body": "thinking checking jqxhrgetresponseheader contenttype response checking applicationjson nt principal open pull request", "d": "4/2012"}, {"body": "saying principle assumption want make", "d": "4/2012"}, {"body": "surely serverside fails catch erroneous format clientside early rather late using validate secondly assuming need trigger update ui definitely hook succes error option attributes rather change event assumption javascript xvalidate function attrs test return value may test xsave test wait true success function error function", "d": "4/2012"}, {"body": "vincentbriglia times verify server either case nt depend clientside verification mechanism sanitizing input server purpose wait true wait response back server setting attributes backbone regardless http response get back nt sound right", "d": "4/2012"}, {"body": "nt case backbone ed attributes onto model callback callback nt triggered server response attributes nt set like reopen ticket provide failing test case latest backbone master branch", "d": "4/2012"}, {"body": "jashkenas provided failing test case initial comment tried browser console backbone website got behavior", "d": "4/2012"}, {"body": "let start reasonable guess braddunbar looked part waitvalidatesave refactorings", "d": "4/2012"}, {"body": "looking closer causing attributes silently set server returns happening", "d": "4/2012"}, {"body": "uses get attributes means uses model current state attributes nt set model ignore looked part waitvalidatesave refactorings nt looked issue specifically", "d": "4/2012"}, {"body": "exactly got confused think reasoning behind sync uses tojson get set one way deal probably unset fields failure using previousattributes nt know cleanest", "d": "4/2012"}, {"body": "thanks reporting reverting previous attributes missed ones nt exist adding added pipeline flush", "d": "4/2012"}, {"body": "np thanks fix", "d": "4/2012"}, {"body": "handy want write tojson method see", "d": "4/2012"}, {"body": "thought purpose might although checked issues page tojson probably missed commits thanks", "d": "4/2012"}, {"body": "idiot nt underscore tell since actually setup backbone project scratch", "d": "4/2012"}, {"body": "thanks noticing", "d": "4/2012"}, {"body": "fixed reverting back min build", "d": "4/2012"}, {"body": "really sure looking answer may better luck finding live conversation irc mailing list event fundamental important difference reason exisistence former get one event model added latter get single event models added efficiency thing want completely blow away contents collection new set models", "d": "4/2012"}, {"body": "read entire post stop middle said end understand reset method throws reset trigger one time whereas add method throws add trigger model though usefulness returning context listening functions repeated know already want know useful return collection reset trigger opposed array models collection reset", "d": "4/2012"}, {"body": "chain call", "d": "4/2012"}, {"body": "something like javascript var model backbonemodelextend idattribute id parse function data var id data thisidattribute oid data thisidattribute id return data model new model id oid javadriver silly parse true", "d": "4/2012"}, {"body": "need something like may add functional", "d": "4/2012"}, {"body": "stated nested modelsids supported directly backbone type functionality provided plugin extension", "d": "4/2012"}, {"body": "exactly thank much", "d": "4/2012"}, {"body": "yep discussed bunch times instead calling simply call function wanted call first place fact option often code smell", "d": "4/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform", "d": "4/2012"}, {"body": "seems work fine chrome jsfiddle", "d": "4/2012"}, {"body": "code looks fine sure appropriate place post type issue probably get much better answers mailing list taken liberty posting question thanks", "d": "4/2012"}, {"body": "similar issues unable track able fix using newly introduced native sort rather underscoreje sort try comparator alternatively descending posted mailing list well", "d": "4/2012"}, {"body": "telling modelb undefined", "d": "4/2012"}, {"body": "upgraded backbone still nt work chrome weird cause works safari use webkit anyone else solution", "d": "4/2012"}, {"body": "issue solved thanks help guys", "d": "4/2012"}, {"body": "solve mathvallee use vincentbriglia suggestion", "d": "4/2012"}, {"body": "yeah also used sortby function", "d": "4/2012"}, {"body": "okay currently using issue closed though still working backbone", "d": "4/2012"}, {"body": "using chrome osx btw", "d": "4/2012"}, {"body": "problem nt comparator also way adding data array impossible correctly sort weird safari firefox working chrome real one", "d": "4/2012"}, {"body": "yes probably something adding data", "d": "4/2012"}, {"body": "timbrunsmo working backbone example ymichael seems work expected would mind posting code nt work", "d": "4/2012"}, {"body": "someone sanity also assess backbone posted comparators work using comparators production keep hearing nt work even though works read backbone sort method collection native javascript array sort", "d": "4/2012"}, {"body": "works expected", "d": "4/2012"}, {"body": "braddunbar time get snippet", "d": "4/2012"}, {"body": "timbrunsmo perfect thanks", "d": "4/2012"}, {"body": "braddunbar related chrome stable sorting whereas firefox safari browsers stable sorting internet explorer firefox safari browsers unstable sorting opera internet explorer arrayprototypesort chrome seems change sorting behavior depending array length array length smaller equal uses stable sort array larger uses unstable sort really issue sort collection attribute nt present models nt provide default idattribute rely orderofinsertion see stableunstable sorting action try different browsers", "d": "4/2012"}, {"body": "interesting nt know array sort nt necessarily stable sounds like nothing backbone differently though going leave one closed thanks vincentbriglia", "d": "4/2012"}, {"body": "interesting indeed saves trouble putting together snippet", "d": "4/2012"}, {"body": "hrm nt feature recently added", "d": "4/2012"}, {"body": "oops looks like fwiw version nt require null passed either eventname callback function want unbind context callback imho makes little bit cleaner others may think differently wrote like two months ago mentioned casually documentcloud submitting formally", "d": "4/2012"}, {"body": "believe tbranyen talking pull request adds similar functionality seems realistically motivate people really check play changes best bet always make pull request opinion even pr unlikely get merged always found others motivated interested code attached octocat also makes discussion around proposed changes easier also def going want upgrade master pr since testing old version nt much", "d": "4/2012"}, {"body": "damn nt refresh page realize already responded oops bowtie", "d": "4/2012"}, {"body": "yep feature added general want avoid sniffing arguments", "d": "4/2012"}, {"body": "aterris thanks advice jashkenas cool beans curiosity wrong typeof sniffing approach case someone tries use function returns event name function returns context instead providing string object", "d": "4/2012"}, {"body": "nothing wrong per se type sniffing usually means api poor instead type sniffing dynamic language without multimethods method take options object", "d": "4/2012"}, {"body": "seems like pretty edge case since primary key set user anyway think reason top head true although actually time override isnew reason remember right saying never something needed however see option called overrideisnew immediately feel like actually overriding isnew would avoid adding additional top level option backbonemodel used documented plus overriding isnew method means could override certain object set objects instead adding top level backbonemodel object initial thoughts sure commiters jump let us know thinking", "d": "4/2012"}, {"body": "thanks feedback current situation table medical codes primary key unique code entered user fact primary key ensures value entered user unique actually helpful adding extra autoincrement column table would course solve issue backbone creates meaningless unused id column well unused db index also may even allowed even make schema changes anyway particular situation moment sure may others agree magic property called overrideisnew probably terrible variable name amp nt really love another idea setter function model example yet another possibility parameter passed save method example actually prefer parameter approach nt touch model looking code could disruptive", "d": "4/2012"}, {"body": "would suggest custom models whose id generated client probably separate attribute added server check instance added server option create update put", "d": "4/2012"}, {"body": "already answered ticket reiterate right thing use actual put semantics work great way", "d": "4/2012"}, {"body": "thanks guys seems case clientgenerated primary key choice either modelisnew return accurate value else modelsave make appropriate request type ca nt scenario decided go correct semantics accept put server side rely modelisnew table think probably best approach", "d": "4/2012"}, {"body": "really internal helper function exposing regular backbone app probably nt use creating html templates sort instead nt think worth supporting version think tell use case using reopen", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions reason use instead", "d": "4/2012"}, {"body": "also believe duplicate would mind directing discussion thanks", "d": "4/2012"}, {"body": "thanks clarification mislead gets stripping treatment used pushstate hashchange cases plan next stable release fix included", "d": "4/2012"}, {"body": "never mind misunderstood meaning variable names selfclose", "d": "4/2012"}, {"body": "would hold back using", "d": "4/2012"}, {"body": "mean primary issue eventemitter backbone events different similar apis whereas backbonejs api nonstandard one nodejs projects issue nt want introduce nonstandard event system models rest application uses standard nodejs event system would fantastic could get work together somehow make apis compatible guess would aim trying gather feedback whether good idea anyone already attempted seems unlikely first one", "d": "4/2012"}, {"body": "could wrong node part use", "d": "4/2012"}, {"body": "note quite comparison backbonejs objecton event callback context alias bind objectoff event callback context alias unbind objecttrigger event args node eventemitter emitteraddlistener event listener alias emitteronce event listener emitterremovelistener event listener emitterremovealllisteners event emittersetmaxlisteners n emitterlisteners event emitteremit event besides new functions node eventemitter provides difference backbone argument seems logical step would override backbone functions node eventemitter shim context argument give go", "d": "4/2012"}, {"body": "sounds like good idea general feeling people using backbone server may first one encounter first one care context argument nt even necessary use anyway", "d": "4/2012"}, {"body": "interesting suggestion blocka keeping backbone specific node specific handlers may work quick attempt try tomorrow sometime coffee class backboneeventemitter extends eventemitter thanks", "d": "4/2012"}, {"body": "looks like nice approach glad working general nt think plans change backbone events api like node eventemitter anything aiming towards jquery events api case pretty comfortable writing app uses three pretty much pattern", "d": "4/2012"}, {"body": "nt actually use sortedindex yet nt use comparators often spent last minutes playing around console since sortedindex proxied underscore method writing essentially syntax sugar looks like actually expecting automatically pass comparator sortedindex methods simply proxied models passed first argument need pass final code ran backbone docs site console feels recreates issue shows get correct result c new backbonecollection ccomparator function model return modelget score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cpluck score csortedindex new backbonemodel score csortedindex new backbonemodel score ccomparator underscore method passed models never able figure order always return unless comparator kind passed knows sorting models even means actually correct behavior think makes sense keep every proxy method pretty sure addresses issue missed something way base talking lem know", "d": "4/2012"}, {"body": "say true thinking collections default using comparator since using method anymore many people actually use probably fine leave", "d": "4/2012"}, {"body": "cool octocat", "d": "4/2012"}, {"body": "uk hell yeah dudes", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "cool", "d": "4/2012"}, {"body": "brother love", "d": "4/2012"}, {"body": "god", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "diablo", "d": "4/2012"}, {"body": "devil", "d": "4/2012"}, {"body": "dj\u00e4vulen", "d": "4/2012"}, {"body": "obsessed", "d": "4/2012"}, {"body": "inflammatory closed", "d": "4/2012"}, {"body": "ok hero", "d": "4/2012"}, {"body": "way unoriginal troll reported github abuse kthanksbye", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "thanks opening another issue reported github abuse trollface", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "nt happen jquery well", "d": "4/2012"}, {"body": "hmm yes seem case nodejs eventemmiter", "d": "4/2012"}, {"body": "nt happen jquery well made quick dirty jsfiddle seems may disagree think behavior rather logic real usecase binding handler twice", "d": "4/2012"}, {"body": "yep way events supposed work like function run multiple times nt bind multiple times", "d": "4/2012"}, {"body": "sure mean callbacks ever defined used purpose please submit pull request failing test case proposed problem change", "d": "4/2012"}, {"body": "digging discovered backbonewraperror fallback error event process figuring utilize figure close ticket otherwise elaborate", "d": "4/2012"}, {"body": "looks like beat", "d": "4/2012"}, {"body": "hi thanks report sure using latest version backbone first version include behavior otherwise work code appears work paste console situation referring", "d": "4/2012"}, {"body": "sorry used see problem fixed thx", "d": "4/2012"}, {"body": "problem glad could help", "d": "4/2012"}, {"body": "thisel initialized early stage ensure events always bound wheter view rendered see last comment jashkenas explains far better", "d": "4/2012"}, {"body": "ok understand fact bother fact define el field descriptive way view know wo nt present time view initialized want give hints code reader hey view dealing section dom call thisel render function null since thisel found ensureelement gt thisel overwritten null thinking would love reloadelement method would reload thisel time reloadelement called sort setelement method based initial value el defined view overwirtten would imply thisel never overwritten null ensureelement initial value kept somewhere brought later order made available reloadelement wdyt", "d": "4/2012"}, {"body": "sure fully understand want achieve want give hints code reader nt declaring id attribute creating view el sufficient", "d": "4/2012"}, {"body": "mmm right solves first part equation construction view el field filled temporary element created occasion make call able handle events take back master nested views problematic problem nested view rendered like fact viewel reloaded existing dom element loaded master view problem nested view rendered thisel targets temporary element created ensureelement given id workaround call something like thissetelement thisid order update current thisel field newly added html fragment", "d": "4/2012"}, {"body": "fyi succeeded make something neat something like myview backboneviewextend initialize function options backboneviewprototypeinitializecall options note needs jquerylivequery plugin work detect tag addition dom", "d": "4/2012"}, {"body": "problems precisely reason views supposed manage allow backbone views create elements simply insert dom ready render wo nt loadorder isthiselementreadytorenderyet issues", "d": "4/2012"}, {"body": "problem nested view responsible create first element relies role master view element available time create nested view particular case encounter every nested views ca nt define el attribute workaround found thanks florianr use id code snippet added previously", "d": "4/2012"}, {"body": "hi thanks issue docs method left undefined encouraged override custom validation logic performed javascript custom logic decides whether given set attributes valid provide method model work correctly said areas ignore nt exist assume model valid seems consistency would suggest", "d": "4/2012"}, {"body": "fixed commit thanks report", "d": "4/2012"}, {"body": "tried latest version backbone", "d": "4/2012"}, {"body": "yep project running stepped around issue temporarily removing hashchange false letting hash change good enough need today honest really crappy issue report without much clarity information going close one time prolly thursday get together sample case recreate track see something accidentally end truly seems like issue backbone seem backbone issue create new ticket morebetter info", "d": "4/2012"}, {"body": "spirit thanks aterris", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "tombell quite thing extend notextend talking extend inherits used backbone classes need set inheritance something else model collection view router", "d": "4/2012"}, {"body": "simpler use constructor instead initialize var human kindextend tostring function consolelog hello", "d": "4/2012"}, {"body": "hello would give answer please direct comments thanks said use exactly way", "d": "4/2012"}, {"body": "oups sorry seen previous issues thanks response", "d": "4/2012"}, {"body": "nope urls case sensitive", "d": "4/2012"}, {"body": "confirmed loading page following reproduction steps adding todos returns array undefined elements however returns array two todo models alerts two ids proving exist", "d": "4/2012"}, {"body": "believe issue implementation get desired behavior change", "d": "4/2012"}, {"body": "looks like merged fix", "d": "4/2012"}, {"body": "nope true app configured also", "d": "4/2012"}, {"body": "think fine use case probably one worth tangling semantics additional option behavior instead add validation function call whenever model changes state nt valid trigger events need change semantics core backbone function easily add", "d": "4/2012"}, {"body": "torn half agrees might well return information since however half feels like adding ands additional thing needs documenting inconsistency return value returning undefined called", "d": "4/2012"}, {"body": "yeah trying work around monolithic structure example support browsers like ios safari haspushstate unfortunately nt work etc looks like due refactoring agree view specific item withdraw pr", "d": "4/2012"}, {"body": "backbonehistory compare historyjs regard putting aside inconsistencies devices poorly served backbonehistory either mode operation documented recommended practice crossbrowser support", "d": "4/2012"}, {"body": "good question possible next step test integrating historyjs backbone purposes able hack around backbone deficiencies support specific cases need ios without adding bulk historyjs supports eg html browsers nt need moment want integration find reference someone already done surface googling nt find much swell basically sniff ua enable safari ios even though supports reveals bug post second regarding specific feature returns result use case moment startup want insert another entry history chain root app eg user backs entry url get root home app backing wherever came often blank page hope makes sense done router simpler way love see", "d": "4/2012"}, {"body": "closing withdrawn", "d": "4/2012"}, {"body": "nt believe would correct first hash encountered url begins fragment identifier hashes intended used part url must encoded use appropriate places instead", "d": "4/2012"}, {"body": "afraid would nt correct point history start notified app page loaded want ignore information go right ahead set flag ignore", "d": "4/2012"}, {"body": "problem per related prs want push history onto queue routing fragment launched app necessarily ignore incoming fragment also adjust options according ua eg override pushstate although may available implementation looking pretty tangled point due refactoring look see make work eg calling earlier later", "d": "4/2012"}, {"body": "ok also adjust options according ua eg override pushstate although may available already possible check ua starting history want push history onto queue routing fragment launched app seems wrong nt simply break meaning back button history real pages navigated", "d": "4/2012"}, {"body": "abstact concept merely come link interior page want also home page history queue first back takes home exit app often blank tab ie history implicitly gets crumbs along route working already replacestate see make simpler", "d": "4/2012"}, {"body": "want also home page history queue first back takes home seems wrong hope reconsider would major annoyance users wish leave able wo nt ever go back site like problems using back button contrary ingrained mechanism nt overridden alone reason existence pushstate still ideologies aside think could achieved like hope nt alerts unload matter much better solution would prominent way go back home near requested content using cookie detect passing users would indicate force merit site easily get back home still manipulate hack history please make optin", "d": "4/2012"}, {"body": "zeno thanks basically already nt one evil sites popups sure want leave etc rather deeplink app referrer opening new tab anyway hitting back would get user blank page think useful give home page app really want blank page hit back", "d": "4/2012"}, {"body": "believe already delegates add fact inserts model beginning collection already documented add model beginning collection takes options add going close think request already satisfied please let know missed something", "d": "4/2012"}, {"body": "see one issue code though called object literal opposed instance return object literal return created model get around returning first model via fix certain good idea since current implementation correct regardless", "d": "4/2012"}, {"body": "right realized replying deleted post method changed confused doc thought could pass array", "d": "4/2012"}, {"body": "ok thanks", "d": "4/2012"}, {"body": "afraid would fudging semantics confusing way instead use", "d": "4/2012"}, {"body": "think people would also benefit caused naming collisions problems didnt know model instance holds reference collection owns", "d": "4/2012"}, {"body": "right got mixed point collection property oops behavior describe actually enabled code documented pull request confused usage said add model collection create etc collections preparemodel method uses collection option act reference noted pull request also used url method line going update pull request make documentation accurately reflect true usage actually agree maybe property collection since really feels like internal reference even still set manually optionscollection one else gets likely make pull request tomorrow changes make reality atleast spur discussion although wonder separate issue since really documentation agreement making collection property collection documentation assuming collection figured id ask", "d": "4/2012"}, {"body": "aterris think collection property suggestion pretty good", "d": "4/2012"}, {"body": "would still like access collection model though believe common usage", "d": "4/2012"}, {"body": "yeah guessing change might cause backwards compatibility problems also accessing modelcollection projects", "d": "4/2012"}, {"body": "yea backwards compatibility would issue want go route might start accessible modelcollection modelcollection preserve compatibility use modelcollection internally would set make breaking switch ever felt worth might mean leaving best option tho", "d": "4/2012"}, {"body": "question whether modelcollection considered private public question answered always confusion like think public beneficial convenient access collection model common assign properties collections accessed model", "d": "4/2012"}, {"body": "moving conversation pull request", "d": "4/2012"}, {"body": "amandoi could try using phantomjs", "d": "4/2012"}, {"body": "afraid intended return reference model want jqxhr add model hand instead semantics failure cases think valid may reference model unable added server way reference model unable saved server", "d": "4/2012"}, {"body": "fair enough agree ok reference model failed persist want know failed succeeded one use callbacks semantics differ slightly possible pass around piggyback", "d": "4/2012"}, {"body": "sure follow quite enough help may better luck asking mailing list irc general javascript reference prototype chain reference shared overwritten whatever", "d": "4/2012"}, {"body": "struggling across issue perhaps would beneficial update documentation explain slightly currently reads remember javascript objects passed reference include object default value shared among instances perhaps could change remember javascript objects passed reference include object default value shared among instances defaults containing objects passed reference defined using function wish share objects instances", "d": "4/2012"}, {"body": "benjen sounds reasonable care work pull request effect", "d": "4/2012"}, {"body": "binding sync event fetch also", "d": "4/2012"}, {"body": "love way backbone right add pretty easily need first place bloating framework hard remove also dont agree backbone inspired ruby philosophy especially since backbone encourages users implement things multiple ways stays slim focused", "d": "4/2012"}, {"body": "think braddunbar one nailed nose proposed proposed proposed probably antipattern event proposed nt something think belongs event model level given piece ui nt care whenever model starts sync editing piece ui instantiating change cares model starts sync ui cares model changes backbone wants provide right hooks possible hooks frameworks offer dozens hundred events box easily become far confusing need event inversion control something used abstraction justified", "d": "4/2012"}, {"body": "jashkenas disagree sync say part ui responsible initiating sync cares model starts sync quite assumption instance model may part many views combination events could fire sync whole idea behind events allow capture changes matter happened also nt get argument sync complete convenience event intended reduce code repetition error success blocks reason jquery complete callbacks ajax method really end requesting addition two new events allow complete handlings persistancecommunication events number requests feature clear one think better reason adds bloat required reject feature two independent lines code hardly gets way messes code yet amazing job keeping users code cleaner also nt completely appreciate closing ticket clearly resolution reached", "d": "4/2012"}, {"body": "wardrop two events requesting use use patch issues address later another request nt understand missing", "d": "4/2012"}, {"body": "concede sync error combo would negate need sync complete trigger patch like nt understand added core also suggest rename sync error namespaced sync success sync error think better describes triggers sync error ambiguous sync could mean anything sync start sync complete sync success etc error includes error events necessarily related sync errors may want handle errors sync errors errors kept catchall errors sync errors synconly errors ambiguous naming triggers always concerned thoughts", "d": "4/2012"}, {"body": "agree bit terse something generally like point somewhat moot renaming would break backward compatibility cause great deal confusion adding backbone usually trigger similar event view syncing model usually includes extra arguments specific view makes impractical inclusion originally asked use case easy enough implement one valid solution backbone probably stay indifferent done agree jashkenas generally view event model event said nt built support implement whichever way makes sense", "d": "4/2012"}, {"body": "compatible terse verb would would carry arguments would useful even views around would also flag prevent writing model sync still running agree namespaced events would better would also dictate powerful useful convention concur changing would painful also totally bought event name end world think every app subclasses customstrangereligious stuff end seems pretty innocuous popular addition already good set existing events", "d": "4/2012"}, {"body": "suggesting existing events removed yet think would safe deprecate existing events favor sync could remove change old sync error aliases later version mind thought whole idea release indicate backwards compatibility may break take extra precautions reading release notes anyone expecting seamlessly update library nt hit mistaken opinion", "d": "4/2012"}, {"body": "xiata would mind providing code snippet illustrating issue nt think quite understand describing seems though describing adding collection another collection instead model", "d": "4/2012"}, {"body": "app seemed logical first use collection inside models attributes might deal lot serverside oop time encountered problems methods clone tojson working events decided attach collection directly model anyway mentioned documentation even find way fix clone believe would many places collections attribute fail suggest try use anything sophisticated attributes even objects let backbone devs know mention documentation attributes limitations", "d": "4/2012"}, {"body": "added documentation brief yes model attributes work best plain flat data nested associated collections discussed faq", "d": "4/2012"}, {"body": "uhm javascript var javascript var said agree pretty common way embed callspecific data especially coming jquery background still clean use common handlers specific code using different architecture would probably better", "d": "4/2012"}, {"body": "braddunbar jashkenas silence mean agree last comment", "d": "4/2012"}, {"body": "maxlk issues fixed", "d": "4/2012"}, {"body": "thanks", "d": "4/2012"}, {"body": "jashkenas something want support incidental add tests effect", "d": "4/2012"}, {"body": "think probably something support", "d": "4/2012"}, {"body": "agreed seems correct used collections clear hand models however unable replace whole attributes would require api change sake correctness", "d": "4/2012"}, {"body": "trycatch nt work either following code demonstrates adding model collection twice indicates error application logic times nt feasible application logic never duplicated model would much better way silently ignore duplicates", "d": "4/2012"}, {"body": "abraham error nt thrown anymore", "d": "4/2012"}, {"body": "kyleamathews awesome thanks tip nt noticed yet", "d": "4/2012"}, {"body": "would much much rather able clean urls choice use pushstate forced routes using pushstate begin also breaks routes page major pita mention breaking links andor favorites already deployed site expose least optional hook use pushstate allow leading slashes even default opposite", "d": "4/2012"}, {"body": "way see want allow trailing slashes backbone app add duplicate routes place issue going closed wo nt fix think least legit comment explaining solve problem us philistines want allow trailing slashes awfully coded bad practice ridden app", "d": "4/2012"}, {"body": "would mirror chikamichi request change part change log breaking change legacy applications bit difficult track", "d": "4/2012"}, {"body": "still nt got solution let give example let say need render html backend indexing purposes google force backbone bind existing html elements views binded click events work already rendered html elements could think way would require render backend rerender frontside think inefficient anyone else faced issue", "d": "4/2012"}, {"body": "certainly attach backbone views existing html instance following code would work html snippet javascript var view backboneviewextend events click trash trash trash function var views html map function el return new view el el reason ca nt something like", "d": "4/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform fyi saw thread posted comment", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "braddunbar issue closed documentationonly change trying advocate actual fix would also fix events issue use behavior replacing rather extending", "d": "4/2012"}, {"body": "machineghost backbone already providing prototypal inheritance scheme like property extendedchangedmerged fashion think changing paradigm one two properties cause confusion around issue mention serious backward compatibility problems would cause", "d": "4/2012"}, {"body": "backbone already providing prototypal inheritance scheme prototypal inheritance systems equal thing nt prototypal inheritance vs classical two different views implement prototypal inheritance backbone basically comes look defaults events individual properties going look attributes individual property someone set foo bar behind scenes let attributes foo bar would obviously silly attributes nt property collection properties similarly events defaults nt individual properties really think continuing pretend going cause problems make framework weaker overall soon start treating way treat attributes suddenly issue goes away likewise issue objects defaults goes away plus think usecases functionbased defaults would go away implementationwise none hard use extend call day backwardscompatability backbone nt even yet perfect time fix design decisions made past ill effects could nt foreseen b plenty strategies handling sort thing one example make model collection class implements old behavior let say simpleinheritancemodel simpleinheritancecollection make model collection use extend defaults events missing similar properties really collections properties fix add method backbone called usesimpleinheritance called method would set backbonemodel simpleinheritancemodel backbonecollection simpleinheritancecollection go every new user gets proper inheritance events defaults works rest backbone ie attributes nt require warnings like remember javascript objects passed reference include object default value shared among instances warnings easily missed confuse new users existing backbone users likely welcome changes nt take word could always make poll asking people want simple inheritance extendbased inheritance nt ca nt afford fix issues might crop add single line backboneusesimpleinheritance add time increment version number file name none affects upgrade heck maybe people even continue using option performance reasons future probably think extendbased inheritance natural quickly forget defaultsevents ever anything differently basically everyone wins approach", "d": "4/2012"}, {"body": "machineghost", "d": "4/2012"}, {"body": "rather old curious know progress created quick version plugin based seems work even automagically expose members looking defaults object one exists uses hacks like wrapping backbonemodelextend looks like works pretty well tests feedback would appreciated", "d": "4/2012"}, {"title": "nt work simple example", "body": "ember awesome used embermetal emberruntime nodejs hooked ember browser using dnode anyway tried use block helper iterate emberarraycontroller failed application arraycontroller undefined time template rendered template rendered early nt binding argument bug made stupid mistake", "num": "762", "d": "4/2012"}, {"title": "full text search docs", "body": "would good full text search docs", "num": "761", "d": "4/2012"}, {"title": "perform operations metamorph dom", "body": "decided use emberjs fairly large app two months development started seeing error pop randomly perform operations metamorph dom extremely frustrating since whole development process jeopardy normally works go backandforth different parts app ember suddenly drops error everything breaks load render templates dynamically load ajax compile create view need render template element id target template rendered previously tracked views name appendto target inserting template target element everything looks normal element remains empty call normally back forth various pages rerender many times want fine would go pages come back would trow error using latest version emberjs", "num": "752", "d": "4/2012"}, {"title": "investigate using ember event system dom events", "body": "instance could support nt think would work right", "num": "751", "d": "4/2012"}, {"title": "findnamespaces slow", "body": "fairly small app using emberjs head noticeable delay ember app gets rendered initial page load prompted investigate chrome profiler turns findnamespaces function biggest single hog cpu time page load called times spending total across calls loop inside fairly unsurprising would performance bottleneck nt see obvious way make function faster perhaps change needed fix bottleneck", "num": "749", "d": "4/2012"}, {"title": "real helper", "body": "could greatly benefit logic comparison helper using current build code definitely cleaned guru example iff apppersonname bob emberiff emberobjectcreate emberhandlebarshelpersiff function b c var apath embergetpath var rnum mathfloor mathrandom b var tempname asplit join equal rnum var anext emberiff tempname value else b lt var tempname asplit join less rnum var anext emberiff tempname value else b var tempname asplit join greater rnum var anext emberiff tempname value else b var tempname asplit join notequal rnum var anext emberiff tempname value return emberhandlebarshelpersboundifcall dcontexts anext", "num": "748", "d": "4/2012"}, {"title": "foo bar", "body": "", "num": "746", "d": "4/2012"}, {"title": "allow canceling state transitions", "body": "related previous issue would useful prevent state transitions perhaps another flag object coffeescript statemanagergotostate nestedstate nestedstate emberstatecreate enter statemanager transition gt transitioncancel x think use case async operations somewhere totally unrelated code calls prevent transition async operation complete", "num": "745", "d": "4/2012"}, {"title": "selectionbinding emberselect respect contentbinding emberselect subclassed", "body": "subclass emberselect selection binding successfully set controller try inline template binding connect problem seen demo template selected resadminselectedrestaurantpricecategoryname code resadmin emberapplicationcreate resadminadmincontroller emberarrayproxycreate selection null content id name id name id name id name getobjectbyid function id return thisget content filterproperty id id get firstobject resadminselectedrestaurant emberobjectcreate pricecategorybinding resadminadmincontrollerselection resadminfoo emberselectextend contentbinding resadminadmincontroller selectionbinding contentselection optionlabelpath contentname optionvaluepath contentid var defaultitem resadminadmincontrollergetobjectbyid consolelog defaultitem resadminadmincontrollerset selection defaultitem work inlined code uses bug", "num": "744", "d": "4/2012"}, {"title": "allow state transition", "body": "working emberstatemanager nodejs lot callbacks trouble getting callbacks play nice emberstatemanager seems could easily add ability pass contexts method thoughts agree create pull request something like javascript gotostate function name context enterstate function exitstates enterstates state context var log thisenablelogging make sense way could stuff like coffeescript statemanagergotostate nestedstate callback consolelog someting nestedstate emberstatecreate enter statemanager transition someasyncthing transitioncontextcallback also think making dynamic object way nt pass could", "num": "743", "d": "4/2012"}, {"title": "infinite loop undefined namespaces", "body": "running issue adding itemview collection view ember seems get stuck infinite loop nt get maximum call stack type errors cpu gets pegged chrome firefox following image result chrome javascript cpu profile duration seconds minutes action taken page doublechecked properties also upgraded master set sure things doublechecking guidance start troubleshooting thanks chris", "num": "742", "d": "4/2012"}, {"title": "eachview flatten virtual views", "body": "instance embereachview created via helper getting array flatten virtual views flattening logic exists computed property embercontainerview eachview subclass array made equivalent probably consider adding behavior cause eachview override flatten make changes directly", "num": "741", "d": "4/2012"}, {"title": "embertextarea emberselect override didinsertelement", "body": "ran added didinsertelement method textarea surprised see textarea longer populated value creation textareadidinsertelement already defined textareajs used populate textarea creation first thought might accepted behavior mentioned irc wagenet said using event instead users able overwrite didinsertelement without remember call thissuper also found selectjs overrides method presumedly using event instead reasons textarea see", "num": "740", "d": "4/2012"}, {"title": "using unbound property argument helper template", "body": "handlebars helper takes number returns class name want run helper exists might exist initial attempt nt work metamorph inserts script tag placeholders helper second attempt also nt work foobar exist string passed know render value without binding thus without script tag placeholders maybe could solved something like", "num": "739", "d": "4/2012"}, {"title": "extra comma breaking ie", "body": "need remove comma end line", "num": "738", "d": "4/2012"}, {"title": "capitalized properties working", "body": "asked following question stackoverflow yesterday turned able loop objects capitalized nested initially thought another bug loop also shown loop object use properties view output undefined text element list see following examples see example correctly working version provided pangratz tried come solution internals far head", "num": "737", "d": "4/2012"}, {"title": "documentation blur event named focusout", "body": "good source go standard view events could nt figure nt getting called realized due called cheers", "num": "736", "d": "4/2012"}, {"title": "ember crossdomain iframe gives security error opera calling classtostring", "body": "running qunit tests thru testswarm testswarm testing page one domain actual ember app opens iframe different domain run qunit tests directly well inside iframe opera get uncaught exception referenceerror security error attempted read protected variable specifically inside findnamespaces line looping thru properties testing window wrapped entire inside method trycatch turns offending properties top parent several browserspecific tests start loop sure add opera gives security exception blows try check window parent crossdomain iframe prop top prop parent continue extend trycatch include get obj isnamespace block block blowing either one fixes unit tests inside iframe opera leave hopefully one experts able decide best solution", "num": "734", "d": "4/2012"}, {"title": "problem minified version ember", "body": "ember jisongenerated parser contains function performaction function anonymous yytext yyleng yylineno yy yystate minifies performaction function b c e f g function name matches name fourth parameter seems work cases eg browsers try precompile ember templates server using rhino get errors variable name resolves function rather argument would seem minification incorrect collision function argument name probably undesired", "num": "733", "d": "4/2012"}, {"title": "add history state emberstates", "body": "need en emberdata order support resume error state reference statechart implementation saying juste putting give ideas", "num": "731", "d": "4/2012"}, {"title": "add specific behavior", "body": "talked deprecating however still features missing finish moving features deprecate one obvious cases vs former clear also renders extra view every item since get view item latter renders one per item definitely preferable possible solution allow take", "num": "729", "d": "4/2012"}, {"title": "double insert create append", "body": "see one nt happen without tag", "num": "728", "d": "4/2012"}, {"title": "jquery ui sortable", "body": "able get jquery ui sortable working ember thanks ghempton suggestion use custom sortable helper seems sortable incompatible though jsfiddle jsfiddle happy investigate sure start looking thanks chris", "num": "727", "d": "4/2012"}, {"title": "emberjs documentation clarification", "body": "section reopening classes instances think typo text says nt need define class reopen class define new properties using reopen method personreopen isperson true personcreate get isperson true using reopen also override existing methods call thissuper personreopen override add end say function thing thissuper thing think lower case like nt need define class reopen class define new properties using reopen method personreopen isperson true personcreate get isperson true using reopen also override existing methods call thissuper personreopen override add end say function thing thissuper thing think nt get", "num": "726", "d": "4/2012"}, {"title": "perform code size audit", "body": "", "num": "722", "d": "4/2012"}, {"title": "make render faster simple cases", "body": "hopefully negate need", "num": "721", "d": "4/2012"}, {"title": "make cps smarter nt fire events one watching", "body": "wycats tomdale kselden mainly release tracking", "num": "720", "d": "4/2012"}, {"title": "change default handlebars context", "body": "wycats tomdale know release tracking", "num": "719", "d": "4/2012"}, {"title": "jslint errors reported", "body": "given change like diff diff git apackagesembermetallibaccessorsjs bpackagesembermetallibaccessorsjs index apackagesembermetallibaccessorsjs bpackagesembermetallibaccessorsjs require embermetalcore require embermetalplatform require embermetalutils var nosemicolonhere var useaccessors emberplatformhaspropertyaccessors amp amp emberenvuseaccessors emberuseaccessors useaccessors test suite failure assume happens jslint complains error messages test failures like js runtime errors reported ok", "num": "714", "d": "4/2012"}, {"title": "subviews didinsertelement", "body": "writing ember view turns tree structure menu need recursion use view template view helper recursively calls build nested structure need hook call jquery plugin turn structure menu call plugin didinsertelement event subviews nt rendered yet run code subviews finished rendering", "num": "710", "d": "4/2012"}, {"title": "automate website update new releases", "body": "update references website repo update lib examples repo deploy website generate new docs deploy docs", "num": "705", "d": "4/2012"}, {"title": "automate upload new releases", "body": "upload development minified versions well starterkit", "num": "704", "d": "4/2012"}, {"title": "collectionview support multiple itemviewclassessubclasses", "body": "would nice collectionview could use criterion content representing decide class view create item content right choose single itemviewclass somewhat restricting instance wanted collectionview vehicles might specify vehicleview itemviewclass would nt able use subclasses make vehicleview class carview spaceshipview rather everything ends getting rendered vehicleview lukemelia suggested one way get around choose subclass containerview itemviewclass depending content create manage single instance desired vehicleview subclass something little cleaner solution would desirable", "num": "703", "d": "4/2012"}, {"title": "could nt find unit tests", "body": "hi could nt find unit tests emberjs tests folder nt seem contain test cases someone point correct place thank stanly", "num": "701", "d": "4/2012"}, {"title": "viewhelpers create view set properties extend view", "body": "given instantiated via template would expect run setter instead extends amp thus bypasses computed properties name options passed handlbars helper expected behavior would first create view amp set relevant properties extend view tomdale confirmed irc", "num": "700", "d": "4/2012"}, {"title": "bound attributes nt get escaped properly", "body": "hi guys think found fairly serious bug bind model attribute handlebar template create corresponding model attribute value nt get escaped properly means string contains speech mark end current attribute worse allow someone start new attribute bound allow xss attacks somewhere escapes fine call set attribute js fiddle ps know text field view reality meant hidden field bug still applies general", "num": "699", "d": "4/2012"}, {"title": "setting value shown helper nt work", "body": "created fiddle show works essentially seems update value helper update work example remove dummy helper update works", "num": "698", "d": "4/2012"}, {"title": "npm publish", "body": "please publish embermetal emberruntime version", "num": "697", "d": "4/2012"}, {"title": "emberselect selection visible", "body": "hi issue emberselect problem chrome select option dropdown selected value visible select value value visible select new one visible strangely last value always visible firefox selecting new value stays initial select value instead selected value fiddle code ca nt reproduce fiddle sure wrong using aspnet web form makes difference also new ember improvement suggestion code would appreciated thanks", "num": "694", "d": "4/2012"}, {"title": "binding examples misleading", "body": "binding examples readme kind misleading since stated bindings synced runloop finished also discussed emberjswebsite stackoverflow", "num": "690", "d": "4/2012"}, {"title": "bindings working twoway", "body": "bindings seem work one way docs say sample work uncommented line update binding update husband lost app embernamespacecreate appwife emberobjectcreate householdincome apphusband emberobjectcreate householdincomebinding appwifehouseholdincome apphusbandset householdincome appwifeset householdincome", "num": "687", "d": "4/2012"}, {"title": "enhancement multiple property setter", "body": "currently create class say firstname lastname properties call instanceset firstname ember lastname js set multiple properties instead call would add undefined property passed object identifier object object think would nice feature", "num": "686", "d": "4/2012"}, {"title": "add name includes emberassert getset", "body": "ive bitten many times really would like notified get set something subtle error would make much easier spot solution always getpath get introduce getsimple edgecases might want", "num": "685", "d": "4/2012"}, {"title": "allow usage zepto instead jquery", "body": "zepto recently added support ember issue since ember explicitly tests jquery patch ember order able use zepto would like see ember supporting zepto box people think useful make happen", "num": "684", "d": "4/2012"}, {"title": "nested emnamespace nt work", "body": "creating emnamespace within another emnamespace nt work eg within emapplication code illustrates problem ember namespace test windowmyns emnamespacecreate mynsmydeepns emnamespacecreate nt work windowmyapp emapplicationcreate myappmyviewclass emviewextend myappmyns emnamespacecreate nt work consolelog mynstostring consolelog mynsmydeepnstostring nt work consolelog myapptostring consolelog myappmyviewclasstostring consolelog myappmynstostring nt work digging around source code nt able figure appropriate fix yet maybe someone versed ember knows wrong", "num": "683", "d": "4/2012"}, {"title": "ember requires jquery assertion restrictive", "body": "hi using jquery failing assertion promote relaxed slightly opened pull request change may good reason choose restrictive", "num": "678", "d": "4/2012"}, {"title": "problem adding deleting preceeding item collectionview", "body": "code schedules deferred action add view another view preceeding view becomes destroyed thus dom representation deferred action crash", "num": "676", "d": "4/2012"}, {"title": "view blank clicking button api changed", "body": "welcome emberapplicationcreate welcomebookcontroller emberarraycontrollercreate content loadbooks function get databooksjson function data welcomebookcontrollerpushobjects data consolelog data view emberbutton target welcomebookcontroller action loadbooks load books view collection contentbinding welcomebookcontroller tagname ul lt b gt contenttitle lt b gt contentauthor lt gt contentgenre lt gt collection title ready player one author ernest cline genre science fiction title starship troopers author robert heinlein genre science fiction title delivering happiness author tony hsieh genre business", "num": "675", "d": "4/2012"}, {"title": "broken link indexhtml", "body": "link seems broken indexhtml inside started kit pack", "num": "674", "d": "4/2012"}, {"title": "sample binding given run sth wrong needs configurations", "body": "code indexhtml script src gt script src gt appjs code document ready function var app emberapplicationcreate apppresidentemberobjectcreate name obama appcountryemberobjectcreate presidentnamebinding apppresidentname alert appcountryget presidentname undefined values shown dialog", "num": "673", "d": "4/2012"}, {"title": "sub superclass transformations fire", "body": "expect bindingtransformation defined subclass override bindingtransformation defined superclass transformations sub superclass seem fire see pressing button expect get messages subclass transformation get one transformation two subclass transformation bug design decision", "num": "672", "d": "4/2012"}, {"title": "action helper fires action action called", "body": "adding action named fires page loaded behavior present ember", "num": "671", "d": "4/2012"}, {"title": "bad link jquery starter kit", "body": "link jquery starter kit points instead", "num": "670", "d": "4/2012"}, {"title": "broken version ember starter kit", "body": "appears starter kit version file", "num": "669", "d": "4/2012"}, {"title": "emberview append appended application rootelement", "body": "creating application defining root element later adding view via appends body element instead app events view handled see jsfiddle could nt find get app rootelement within view possible considered bug think submit solution soon know get rootelement also think could kind difficult emberapplication instances dom different areas right maybe traversing dom view element class would also addressed", "num": "668", "d": "4/2012"}, {"title": "state bubbling", "body": "following global state object expected behavior calling state changed parent would return event parent however technically already parent state nested inside child simple way exit state return parent fwiw worked around creating state set parent initial state level child moving events calling within child", "num": "667", "d": "4/2012"}, {"title": "controller view nt walk parent hierarchy", "body": "child view inside parent explicit controller set nt use parent view controller following code nt work myappcontrollersitemscontrollerjs appitemscontroller emberarraycontrollerextend myappviewsscreenindexviewjs var screenindexview appscreenindexviewcreate controller appitemscontroller templatename myappscreenindex myapptemplatesscreenindexhandlebars view appchildview myapptemplateschildhandlebars controller title myappbootstrapjs appitemscontroller appitemscontrollercreate content appitemfind however explicitly controller child view work eg", "num": "666", "d": "4/2012"}, {"title": "calling page load initialstate set causes states shown", "body": "try use use statemanager page load states shown jsfiddle issue jsfiddle workaround since behavior issue never looks like use case think workaround nt necessary", "num": "665", "d": "4/2012"}, {"title": "everyproperty returns true empty lists", "body": "would expected return false", "num": "664", "d": "4/2012"}, {"title": "debugmode warnings common typos eg insertnewline io insertnewline", "body": "starting emberjs coming backbonejs first silently failing bug following example todos app might useful something like pardon coffeescript automatically generate warning like back learning emberjs months submit pull request", "num": "663", "d": "4/2012"}, {"title": "controller strategy garbage collection destroy", "body": "trying figure ember best practices app regarding models emberdata controllersviews use user example feel like want get user database wrap usercontroller set model content property view want bind controller functionality controllercontentfield modellevel data say model property like youfollow true controller something like view use say get list users back database feel like want wrap user models usercontroller make list usercontrollers available view done working nicely everytime reload list rewrap new model objects new controllers time controllers memory seem get larger larger base controller class logging calls destroy dont see happening view side know views getting destroyed every page redraw also using emberlayout emberroutemanager use statemanager underneath move code view know get destroyed recreated everytime dont feel like functionality like togglefollow supposed view thinking things correctly offbase models wrapped controllers could lots smaller controllers screen make sure garbage collected thinking controller actually view sort garabage collection strategy aware make sure emobjects cleaned hopefully makes sense", "num": "658", "d": "4/2012"}, {"title": "views template raise exception overriding handlebars markup", "body": "expected exception raised following overriding view known template nothing currently renders nothing view javascript editviewjs apppeopleeditview emberviewextend templatename peopleedit indexhandlebars code view apppeopleeditview view", "num": "657", "d": "4/2012"}, {"title": "starter kit downloaded ember front page missing", "body": "need file", "num": "656", "d": "4/2012"}, {"title": "jqueryrails method delete link stops working", "body": "got link works include ember breaks misses confirm popup treated get http request use ember", "num": "655", "d": "4/2012"}, {"title": "bindingnot firing observers", "body": "issue setting binding using bindingnot setting couple observers binding none notified observers get notified though use something like bindingbool recreated issue jsfiddle sure something wrong misinterpreting bindingnot meant", "num": "653", "d": "4/2012"}, {"title": "allow event manager catch method", "body": "eventdispatcherjs dispatchevent ignoring events registered callbacks within view event manager useful allow catch event handler debugging enable generic pattern matching events catchall event handler pass call eventname addition event view", "num": "652", "d": "4/2012"}, {"title": "binding transforms directly handlebars", "body": "possible use binding transforms directly handlebars nt discovered yet like example docs possible right handlebars something like giving much power templates going ember best practices giving much flexibility templates forces code go javascript classesobjects", "num": "651", "d": "4/2012"}, {"title": "uncaught exception ewot", "body": "exception see emberviewstatesinbufferempty happening sometimes dont know make simplified jsfiddle show happening parts app multiple nested views maybe knew throw ewot meant could debug", "num": "647", "d": "4/2012"}, {"title": "emberselect multipletrue sometimes fails sync selected", "body": "ebryn previous pull request two errors would result underlying select objects selection property wrong sometimes jquery selector converted array resulted jquery map invoked reversed signature index value objectsat simply wrong", "num": "645", "d": "4/2012"}, {"title": "rake upload broken", "body": "tried upload latest build emberjs via got following error message building ember done uploading repository pangratzemberjs uploading emberlatestjs rake aborted failed post file info tasks top gt upload nt work somebody else maybe related recent blog post github", "num": "644", "d": "4/2012"}, {"title": "attach new property arraycontroller content", "body": "fiddle arraycontroller full numbers property sum start removing objects array sum nt update content nt property however property length summation function sum updates automatically length changed get update reality going calculating total price checkout want able change individual prices add remove items total price change", "num": "640", "d": "4/2012"}, {"title": "packaged", "body": "", "num": "638", "d": "4/2012"}, {"title": "prototype subclass emberobject unexpectedly modified upon first instantiation subclass", "body": "probably misunderstanding part instead bug definitely run bit nonintuitiveunexpected behavior example referencing define class like c emberobjectextend foo bar immediately afterward evaluate expression cprototypefoo expression evaluates undefined create instance c ccreate evaluate expression cprototypefoo expression evaluates bar seems prototype class c modified instantiating first time behavior intended got bitten behavior tonight", "num": "637", "d": "4/2012"}, {"body": "namespaces supposed uppercase bindings templates search globally path starts uppercase", "d": "4/2012"}, {"body": "relative paths template uses relative paths adds little naming conventions organization good blog entry naming conventions", "d": "4/2012"}, {"body": "wagenet documentation issue", "d": "4/2012"}, {"body": "cheers kselden", "d": "4/2012"}, {"body": "kselden possible nt making casing rules clear", "d": "4/2012"}, {"body": "also like navigation method name handy utility functions namespace might find unless know go looking", "d": "4/2012"}, {"body": "things way definitely standard setup", "d": "4/2012"}, {"body": "pretty sure actually bug issues stem unusual unsupported architecture app however might make sense us provide better documentation clear front nt", "d": "4/2012"}, {"body": "something look whether target element appending parent nodes already managed another ember view case view destroyed remove element view appended peter said code provided unusual approach recommended curious hear came approach solve particular problem", "d": "4/2012"}, {"body": "appending replacing existing views explicitly disallowed", "d": "4/2012"}, {"body": "load every single template compile would take forever loading templates ajax needed right approved way", "d": "4/2012"}, {"body": "emberfail set templatename newtemplatename view rerender new template nt different view classes could leave one attached update template use complex scenarios use embercontainerview let manage childviews property programmatically want switch pages load template via ajax register embertemplates update childviews add new view using new template api docs containerview helpful understanding manage childviews", "d": "4/2012"}, {"body": "ok programmatically load views andor templates add view using method make parent view aware child view typically containerview push remove child views also extend view use addchild render use append methods root view", "d": "4/2012"}, {"body": "also precompile templates js load script", "d": "4/2012"}, {"body": "closing since added basic documentation warning incorrect use emberfail questions continue thread though might better luck stack overflow", "d": "4/2012"}, {"body": "lukemelia tried suggested nt work", "d": "4/2012"}, {"body": "trying call set subclass would need called instance", "d": "4/2012"}, {"body": "wagenet really need way switch view different templates containerview sortof achieves though means shuffle views array instead setting template", "d": "4/2012"}, {"body": "emberfail able set property view call ideally nt even call need see", "d": "4/2012"}, {"body": "simple example", "d": "4/2012"}, {"body": "fork kselden showing proper use append method", "d": "4/2012"}, {"body": "lukemelia example thissimpleview also subclass yet call set nt get works example nt work example posted way thanks helping really stressed looks like able relatively simple rewrite", "d": "4/2012"}, {"body": "thissimpleview actually subclass totally forgiven thinking containerview things let assign view subclass property names matching supply childviews turn view instances containerview instantiated nt used trick example worries help hope project gets back track", "d": "4/2012"}, {"body": "update fiddle without containerview property shortcuts", "d": "4/2012"}, {"body": "lukemelia makes sense one last question hopefully example set new template listed childviews valid better push goodbye array", "d": "4/2012"}, {"body": "getting view instances templates confused reusing view instance setting template name calling rerender", "d": "4/2012"}, {"body": "wanted replace existing view", "d": "4/2012"}, {"body": "getting confused view classes view instances emberjs documentation uses emberviewextend emberviewcreate interchangeably sure one use since like call rerender switched emberviewextend calls emberviewcreate immediately get strange errors coming depths ember", "d": "4/2012"}, {"body": "emberfail definitely used interchangeably creates instance class called creates subclass inherited class called part think typical classical objectoriented system inheriting instantiating places ember framework allows convenience pass either view class view instance beyond places two treated interchangeably", "d": "4/2012"}, {"body": "made simple app reflecting want issues basically lets swap views beginning nt work click events use emberviewcreate root view otherwise ca nt append use emberviewextend classes instances views ca nt call rerender change emberviewextend emberviewcreate child views get strange error somewhere inside ember works rootview child views clear add rootviewrerender works rerenders whole app instead views want update javascript showlanding live click function appcontentset view appcontentget viewlanding approotviewrerender showproduct live click function appcontentset view appcontentget viewproduct approotviewrerender", "d": "4/2012"}, {"body": "lukemelia totally understand one class another one instance clear one ember wants example posted wants instance rootview classes nested views makes little sense", "d": "4/2012"}, {"body": "extend creates subclasses create creates instances rerender append instance methods need view instance containerview childviews little overloaded instantiation expects childviews contain classes instances init turns classes instances creation expects instances pushed inserted childviews", "d": "4/2012"}, {"body": "working example fiddle tries illustrate concepts hope helps", "d": "4/2012"}, {"body": "perhaps memoization would good start", "d": "4/2012"}, {"body": "joliss noticeable surprised expressing concerns startup slow probably something else scan general new namespaces created seem consistent number namespace application elements", "d": "4/2012"}, {"body": "joliss may actually wrong often get called anyway ca nt see would cause noticeable slowdown suspect issue elsewhere", "d": "4/2012"}, {"body": "closing ticket let know mistaken reopen", "d": "4/2012"}, {"body": "okay let back step elaborate think important ember kindof slow look travis feels sluggish especially load time much cpu utilization ajax even supersimple mini ember app get something like cpu time load still tolerable terms user experience keep mind running chrome fast developer laptop shudder think regularpeoplelaptop slower browser would feel like let alone mobile device really think try make ember faster unfortunately single glaring performance bottleneck ember cpu time spread many functions fix minor performance issues onebyone looking startup cpu profile biggest consumer time seemed like good place start opened issue since iterates also seems like fairly lowhanging fruit terms optimization noticeable machine ever slightly people machines much importantly along optimizations firmly believe start add much noticeable", "d": "4/2012"}, {"body": "wagenet say agree joliss one testing iphone startup time pretty although app reasonably performing", "d": "4/2012"}, {"body": "function question btw reference", "d": "4/2012"}, {"body": "honestly ca nt think way make faster anyone ideas please let know reopen issue otherwise nt see", "d": "4/2012"}, {"body": "joliss jamesotron also benchmarking emberprodjs emberminjs strip unnecessary dev code version may slowing app also look precompiling handlebars templates well compilation load delay startup", "d": "4/2012"}, {"body": "weird use emberprodjs rails production environment findnamespaces seems go maybe something seriously wrong profiler ember different codepath production mode nt know nt believe single call would account difference", "d": "4/2012"}, {"body": "consider problem solved", "d": "4/2012"}, {"body": "emberassert messages use tostring ember classes objects tostring uses findnamespaces emberasserts removed prod min dist memoized recomputed create namespaces", "d": "4/2012"}, {"body": "explains memoized recomputed create namespaces reopen actually problem practice think extra ms development mode nt hurt bad imo", "d": "4/2012"}, {"body": "meant already look namespaceprocessed flag", "d": "4/2012"}, {"body": "something explicitly chosen support want keep logic handlebars templates minimum course always welcome write handlebars extensions", "d": "4/2012"}, {"body": "thanks peter", "d": "4/2012"}, {"body": "blindsamson code riddled memory leaks bro", "d": "4/2012"}, {"body": "suggestions welcome know league guys", "d": "4/2012"}, {"body": "going way also foo bar foo bar else bar", "d": "4/2012"}, {"body": "tchak nt think follows purpose allow us provide block nt change context nothing adding extra logic", "d": "4/2012"}, {"body": "wagenet youp sorry read afterward campfire log know true see helper think cool stuff playing arity helper functions", "d": "4/2012"}, {"body": "hacky proof concept", "d": "4/2012"}, {"body": "context bindings parent view view creating defined parent view nt work", "d": "4/2012"}, {"body": "yeah state machine design pattern feels like breaking async conditions example code towermodelpersistencecoffee coffeescript towermodelcreate callback runcallbacks create block gt complete callback block callback ends calling potentially several async functions could async call database node validates uniqueness callbacks could async actual mongodb save callbacks right code state machine nest callbacks code relatively clean every method final parameter fine though since accepted best practice async nodejs environment trying switch use statemachine pattern getting ever complicated say state structure method building emberdata say got transition context working could pass callbacks state state becomes already thick spaghetti code longer using callbacks way node nested callbacks instead setting variable say call async mongodb method somewhere state pass callback mongodb method pretty clean code seems right way would statemachine call donewithmongodb whatever emberdata would get original callback statemachine context execute sudden change mongodb code deal statemanager seems like would quickly become code smell agree also start introducing statemanager parts code pretty good chance tell statemachine action another async state may cause transition nt want say set property async callback causes model go state sudden start either conditionally cancelling preventing state transitions queuing pseudo state nested state active async callback overrides possible actions take statemanager nothing async states seems like another code smell question missing something see potential problems state machine design pattern async environments feel like probably much easier cleaner avoid state manager case think", "d": "4/2012"}, {"body": "supposed call directly instead declare events look done model implementation emberdata", "d": "4/2012"}, {"body": "viatropos tchak pointed call directly moment convinced something need change recommend asking stack overflow best practices", "d": "4/2012"}, {"body": "binding global never defined", "d": "4/2012"}, {"body": "chrisconley sounds like master problem exhibit older releases", "d": "4/2012"}, {"body": "wagenet yeah also seen issue able nail issue stemmed app something like removing fixes issue breaking looks like continually two items screenshot console see get jsfiddle going replicates issue", "d": "4/2012"}, {"body": "looks like kselden spot notice code example references formbuilder lowercase b app name formbuilder capital b jsfiddle demonstrates issue making reference case would expect ember raise exception encounters undefined namespace", "d": "4/2012"}, {"body": "bet formbuilder supposed formbuilder asked binding undefined global though thought would requeue try next run looks like scheduling another run waiting something defined never going defined typo", "d": "4/2012"}, {"body": "typing phone saw comment agree going retry least back fail", "d": "4/2012"}, {"body": "right observer global chain undefined schedules retry nothing ever calls flushpending false always rescheduled question reschedule wait next run loop reschedule every sec instead nt peg cpu would pickup globals reasonable amount time reschedule give x number attempts leaning toward globals namespaces namespaces setup time runend called think remove rescheduling wycats tomdale thoughts", "d": "4/2012"}, {"body": "kselden fine nt reschedule namespaces set beginning rare event set namespace boot seems fine ca nt reference set", "d": "4/2012"}, {"body": "tomdale bug improvement also affect things", "d": "4/2012"}, {"body": "bug never expose virtual views end users cause widespread fear confusion", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "nt want value class name want value class name handlebars helper generates class name", "d": "4/2012"}, {"body": "ok make myclass computed property content classofcontent emobjectextend foobar toto myclass function return thisget foobar yourvalue false content", "d": "4/2012"}, {"body": "tchak suggested still questions stack overflow probably get better answers", "d": "4/2012"}, {"body": "whoops looks like jshint set wrong missing fixed", "d": "4/2012"}, {"body": "problem using capitalization ca nt distinguish whether path global relative path use capitalization assume global path since global nt get data see information solution appears use feature mustache happens work nt explicitly support long story short exactly bug something easily fixable anything using lowercase property names using uppercase property names nt javascript like anyway one thing may help long term changes plan make around current context handlebars templates handled may make easier force uppercase path evaluate locally issue though nt much info moment", "d": "4/2012"}, {"body": "way noticed ticket said nt control json nothing stopping postprocessing pull server", "d": "4/2012"}, {"body": "true requesting processing json every second mind example small subset data actually receive making constant postprocessing obnoxious guess performance draining could elaborate solution edit read answer seems like postprocessing really option yikes would know way fast without much overhead undefined bug logical circumstances cases would want loop object show static text", "d": "4/2012"}, {"body": "doubt postprocessing would performance draining looping setting properties plain object pretty optimized path recommend making recursive script cases properly js alternatively could use something like ember data makes easier translate raw data server something manageable issue using mustache syntax handlebars supports backwards compatibility nt think something ever supported ember nt think something likely", "d": "4/2012"}, {"body": "wagenet would love use emberdata explicitly stated productionready yet also placed comment naming convention post record nt want clutter things unrelated information", "d": "4/2012"}, {"body": "ember data known bugs features gaps ok dealing things used production already people", "d": "4/2012"}, {"body": "already opened issue emberjswebsite", "d": "4/2012"}, {"body": "right list know source document somewhere", "d": "4/2012"}, {"body": "gotten request several times ember dom event names todo list thursday train ride", "d": "4/2012"}, {"body": "trek awesome", "d": "4/2012"}, {"body": "nickfranceschina nt extend wrap subsequent statement well take pr", "d": "4/2012"}, {"body": "maffoo either bug uglifyjs use minification rhino", "d": "4/2012"}, {"body": "wagenet tried piping uglifyjs offending parser function comes performaction function b c e f g h function name removed entirely would expect think still might issue way minified ember file produced may also case rhino bug handling functions whose argument names collide function name would still appear problem minification", "d": "4/2012"}, {"body": "specific line wagenet nt need nt understand syntax mean", "d": "4/2012"}, {"body": "eishay line generated jison something direct control", "d": "4/2012"}, {"body": "looks like uglifier bug fixed newer versions", "d": "4/2012"}, {"body": "great thanks quick fix", "d": "4/2012"}, {"body": "tass tag inline template creates anonymous view expected", "d": "4/2012"}, {"body": "curiosity tried", "d": "4/2012"}, {"body": "nah nt missed release p give shot", "d": "4/2012"}, {"body": "thanks", "d": "4/2012"}, {"body": "ok asked question stackoverflow answered typo clear documentation possible think would good explain three different uses personreopen adds code one instance personreopen adds code instances created reopen call personreopenclass adds code statically called instance", "d": "4/2012"}, {"body": "also see", "d": "4/2012"}, {"body": "done", "d": "4/2012"}, {"body": "confirm", "d": "4/2012"}, {"body": "bam", "d": "4/2012"}, {"body": "stack overflow usually better asking questions", "d": "4/2012"}, {"body": "allright close open one stack overflow although suspicion mr wagenet hands itching give aswer", "d": "4/2012"}, {"body": "suggested override createchildview function tests need think pretty clean make flexible possible", "d": "4/2012"}, {"body": "nt seem like particularly clean way things suggest clear either based discussions manko irc put together could called viewfactory collectionviews maybe might inspire ideas permanent solution", "d": "4/2012"}, {"body": "example overriding anyone else finds issue completely obvious flexible", "d": "4/2012"}, {"body": "tests package specific look", "d": "4/2012"}, {"body": "got thank sent iphone apr peter wagenetreply replygithubcom wrote tests package specific look reply email directly view github", "d": "4/2012"}, {"body": "hmm interesting point general works exception returns instance however see argument helper exception", "d": "4/2012"}, {"body": "tomdale straightforward instance set initialization", "d": "4/2012"}, {"body": "definitely straight forward got working simple cases broke crap load tests collectionviews seeing end rabbit hole right initial approach return class amp hash set instantiated class right returns return something like easy jerryrig make work simple cases ca nt figure modify collectionview stuff make whole enchilada work", "d": "4/2012"}, {"body": "also pretty sure would nt work setting bindings either", "d": "4/2012"}, {"body": "going go ahead say tomdale misspoke definitely trivial thing understand may annoying times think alternative worse", "d": "4/2012"}, {"body": "issue obviously impossible create computed properties view helper string properties case seems like support passing string properties view computed properties accomplished using initialization rather passing values hash agree nt trivial task seems reasonable properties respected initialization time made writeable initialization like", "d": "4/2012"}, {"body": "good catch seem fairly serious", "d": "4/2012"}, {"body": "tracked method properly escape may also present", "d": "4/2012"}, {"body": "fixes pushed sufficient however since serious issue like feedback make sure nt miss anything got finalized release", "d": "4/2012"}, {"body": "wow wagenet quick thankyou roughly think released worth forking merging individual commit", "d": "4/2012"}, {"body": "johncant hope release today someone else sanity check issue", "d": "4/2012"}, {"body": "clarification applies direct use allowing use input cases risk", "d": "4/2012"}, {"body": "fixed released", "d": "4/2012"}, {"body": "also note used internally ember controls using user data also upgrade", "d": "4/2012"}, {"body": "hi wagenet sorry nt fix issue jsfiddle ember fails direct output bindattr nt escaped also ok use handlebarsutilsescapeexpression pull request fixed cheers", "d": "4/2012"}, {"body": "another pull request nt introduced dependencies ember handlebars", "d": "4/2012"}, {"body": "johncant thanks following turns fix part bug still missed cases definitely fix guess rushed little much sorry", "d": "4/2012"}, {"body": "eviltrout helper binding aware see possible solution", "d": "4/2012"}, {"body": "also integrate deployment script possible", "d": "4/2012"}, {"body": "tomdale looks like one permission take care also anything special release package something could automate", "d": "4/2012"}, {"body": "need help let know also noticed places packages used could add something like top compiled package would solve", "d": "4/2012"}, {"body": "wagenet ping campfire get core contributors access npm package think account might fucked due whole npmusedcouchdbwithworldaccess fiasco think need recover", "d": "4/2012"}, {"body": "fyi started work", "d": "4/2012"}, {"body": "provide browser details seeing behavior describing safari firefox chrome latest versions", "d": "4/2012"}, {"body": "using chrome firefox one note changing selectiondidchange focusout resolves issue assume something event handler preferred use selectiondidchange", "d": "4/2012"}, {"body": "nhidao noticing things capital property names used classes namespaces see post subject main violation see never access properties use instead use specify dependent properties however many cases could used binding bind access global properties within class definition however since defining nested classes may alright made improvements since ca nt reproduce bug jsfiddle much get failing jsfiddle work closing ticket get failing happy reopen", "d": "4/2012"}, {"body": "added note bindings section readme takes time resolve bindings probably provide indepth explanation", "d": "4/2012"}, {"body": "see", "d": "4/2012"}, {"body": "showing result view post says work also tested calling emberrunsync nt help either something people try based documentation get bad experience would recommend changing documentation well least two experience", "d": "4/2012"}, {"body": "clarify rendering value husband wife neither change set husbands householdincome", "d": "4/2012"}, {"body": "absolutely right documentation needs updated hope gets fixed soon problem take look answer updating values see working example", "d": "4/2012"}, {"body": "read answer tried calling emberrunsync first option shows nt work second option sample sent seems work change inside emberrunlater move outside nt work would make however since set method still last called seems still update field see point might work alert right away runs loop template eventually get bound correctly right", "d": "4/2012"}, {"body": "hmm nt know exactly problem guess runloop triggered normally update view via events see", "d": "4/2012"}, {"body": "trying sorts ways think see happening timing always tricky business think something problem regular use agreed docs need explain better thanks help appreciate ember looks like good candidate need main concern size huge compared similar frameworks like approach takes though", "d": "4/2012"}, {"body": "dotnetnerd reproduce jsfiddle good starting point pangratz take stab fixing documentation least file new ticket", "d": "4/2012"}, {"body": "openend issue", "d": "4/2012"}, {"body": "sure illustrates puzzled even though runs asynchronously might updated right away think eventually updated apphusbandset householdincome call simply lost bindings nt sync time", "d": "4/2012"}, {"body": "dotnetnerd wrap creation end agree example bad example however ca nt think case actually something would matter actually set app fashion would almost certainly bad design example appears contrived try show point unfortunately fails even", "d": "4/2012"}, {"body": "nothing contrived creating binding using shown documentation simple bind set sample hardly says anything design ever ill loosing users action simple set operation depending timing nt give much faith libraries design though workaround user library something seems unneeded undocumented nt mean sample fails", "d": "4/2012"}, {"body": "set directions way binding one run queue flushed directions queued picks forward direction sync nt think ever want set directions binding one event handler trying make consistent choice", "d": "4/2012"}, {"body": "thats awful lot lowlevel detail concern user api ensure user writes actually happens reading code top bottom stating two way binding set values x reasoning expect value x troll anything seems api clear one couldshould expect following basic reasoning going documentation leads place experience method call set lost", "d": "4/2012"}, {"body": "dotnetnerd expecting bindings respect last change wins prioritization", "d": "4/2012"}, {"body": "dotnetnerd trying difficult really like see case would actually real app show real world case think would happy attempt fix however lowlevel changes like could definitely unexpected consequences areas something want change lightly definitely want ember easy use time nt want spend time working cases nt really happen practice", "d": "4/2012"}, {"body": "agreed pangratz beginning would ok well documented clear nt appreciate started talking bad design failed examples really followed documentation rationalized oppinion would fine solve better documentation naming methods since unresonable expect set method actually set value named way similar frameworks clear think would consequences providing clarity naming would enough two cents take leave however first time user puzzled since posts exist subject", "d": "4/2012"}, {"body": "dotnetnerd need fix documentation clear thank feedback", "d": "4/2012"}, {"body": "would expect lose bindings hold next set propertybinding naming pattern like saying property getthisvaluefrom path replace current value binding number throwing binding away setting new rule property could new binding simply number like case imo current behavior wrong docs change", "d": "4/2012"}, {"body": "problem thanks cutting chase building cool framework", "d": "4/2012"}, {"body": "dotnetnerd sorry nt intend imply fault docs definitely bad case pangratz opened address main concern whether actually bug needed fixed framework issue us directing people wrong direction bad documentation thanks bringing attention", "d": "4/2012"}, {"body": "think since ticket fixing documentation close issue dotnetnerd issues concerns please let us know", "d": "4/2012"}, {"body": "certainly comparisons ember others frameworks since discussing one use work would like feedback happy oblige", "d": "4/2012"}, {"body": "dotnetnerd feedback always welcome specific feature suggestions bugs please file github things ping us irc emberjs send email peterwagenet gmailcom", "d": "4/2012"}, {"body": "good suggestion already would consider filing pull request add documentation", "d": "4/2012"}, {"body": "like idea would definite win debug build would need benchmarked see impacted performance normal emberassert dev build", "d": "4/2012"}, {"body": "grosser reason nt reason separate hot code path nt want anything slow even checking presence period used would development mode even think slow would likely noticeable enough would nt even want", "d": "4/2012"}, {"body": "zepto support", "d": "4/2012"}, {"body": "let first outline concerns supporting zepto firstclass citizen lot people think zepto basically jquery without ie support illustrated issue linked significant often subtle differences jquery zepto work good description see pamela fox article moving zepto afraid subtle bugs likely crop using zepto users blame emberjs instead realizing bug zepto example handlebars unit tests nt test many edge cases possible binding attributes rely fact jquery methods handle additionally yehuda rely heavily many internal jquery features minimize amount code ship wire like thomas points undocumented maintainers framework nt want spend lot time making sure jquery zepto sync want limit lowest common denominator set features available two libraries need comfortable supporting zepto important milestone zepto pass jquery test suite happens happy advertise support zepto make modifications framework needed ca nt happen someone else would like make effort get emberjs unit tests passing zepto instead jquery consider pull requests improve compatibility long increase code size make code harder understand basically emberjs us developers expecting jquery believe zepto sufficiently compatible jquery make explicit line program says small bit friction reinforces fact saying two libraries compatible us guarantees form passing unit tests would happy reconsider compatibility stands though workaround alias load emberjs make explicit fact telling ember two functionally equivalent going close issue questions comments outlined please feel free add", "d": "4/2012"}, {"body": "thanks detailed answer totally understand point view wanted add enough since ember explicitly tests jquery version", "d": "4/2012"}, {"body": "fair enough run ember test suite zepto failures mainly originating test code zepto nt support jquery proprietary css selectors nt matter agree test suite pass inform people take walk wild side stub windowjquery stravid stub string", "d": "4/2012"}, {"body": "remove assert emberjs already removed minified build asserts development", "d": "4/2012"}, {"body": "thanks kselden information always use dev version rails rails minifaction packaging us hopefully help us integrate zepto app", "d": "4/2012"}, {"body": "would suggest use distemberprodjs build minified emberminjs asserts removed", "d": "4/2012"}, {"body": "names resolution namespaces expensive performance wise loot objects window nesting think induce considerable performance impact", "d": "4/2012"}, {"body": "processed new namespaces added would look deeper objects isnamespace true every property window please correct wrong", "d": "4/2012"}, {"body": "think processed call tostring time walk tree except already processed nodes add deep nesting look whole tree processed nodes sure something added deeper may wrong sims trivial", "d": "4/2012"}, {"body": "looks like processed new namespaces created", "d": "4/2012"}, {"body": "agree point going walk tree wrong need input wycats tomdale one probably", "d": "4/2012"}, {"body": "would like see method create nested namespaces performance issue would allow things like", "d": "4/2012"}, {"body": "agreed nested namespaces could used reflect position project file within subfolders thus enhance readability make easier organize ember project team working even decided ember namespaces organize projects many many source files current ember style ask fully satisfied current approach", "d": "4/2012"}, {"body": "would approach whole idea folder gt namespace find way verbose reminds java think really stay level one namespace", "d": "4/2012"}, {"body": "jepp totally right current approaches javalike namespaces javascript verbose java language feature also access classes simple name instead fully qualified one admit cache fully qualified namespaces beginning file like like javascript problem emberjs related one", "d": "4/2012"}, {"body": "nt think feature necessary let try explain sproutcoreember projects worked toplevel namespaces used talking giant projects icloudcom massive suite apps deal different classes instances needed solution experience break apps shared libraries namespace example shared framework might namespace contains like personally like naming convention verbose requires much deeper object hierarchies simply repeat information twice going close issue consider working correctly think need better job communicating idiomatic emberjs apps", "d": "4/2012"}, {"body": "thanks detailed answer giving different parts namespace something never thought", "d": "4/2012"}, {"body": "awesome thanks answer tom problem need come place fundamental concepts building real apps emberjs presented explained currently gather knowledge mostly source code tests many cases enough", "d": "4/2012"}, {"body": "closing favor", "d": "4/2012"}, {"body": "made jsfiddle code everything works see also think ask question stackoverflow tagged emberjs reasons although fine post questions mainly used qa questions get asked importantly answered second reason another user might similar problem search likely issues github", "d": "4/2012"}, {"body": "mean protocol see", "d": "4/2012"}, {"body": "bug pangratz noted", "d": "4/2012"}, {"body": "thnx", "d": "4/2012"}, {"body": "nt sync bindings immediately case contrived example call force bindings sync normal app development wo nt worry", "d": "4/2012"}, {"body": "see corresponding stackoverflow discussion", "d": "4/2012"}, {"body": "great tks love", "d": "4/2012"}, {"body": "jmiettinen know nt primary issue ca nt help wonder modifying array within transforms certainly intended used transforms modify anything external place things like convert strings integers modify content elsewhere app", "d": "4/2012"}, {"body": "jmiettinen look guess debugging probably app anyway curious actually app problem", "d": "4/2012"}, {"body": "appsuperclassprototypemixin supposed lazily applied appsuperclassprototype prior never caused lazily init appsuperclassprototype creating created appsubclass appsuperclassprototype would stay empty like appsubclasscreate appsuperclassprototypemixin problem causing", "d": "4/2012"}, {"body": "upon looking problem bindings prototypes observers listen changes instances modify prototype shared question shared prototype receive events instance property changes modify shared prototype response change one instance think bindings copied prototype connected create mixin concern chains without", "d": "4/2012"}, {"body": "indeed naughty array modifications debugging purposes actual problem widgets eg binding transformation defined superclass user uses widget redefines binding transformations fire clearly expectations expectations misguided", "d": "4/2012"}, {"body": "nt seem like bindings connected prototypes instances class binding separate object watching prop changes connected target target prototype still receives property change events instances targets prototype means connect new binding object instance interaction new binding binding shared instances property change events bubble nt make sense really since case instance property changed prototype way override binding would run problem created instance superclass creating subclass safe way making default binding currently could try connecting binding instance init nt binding setup determining binding setup kind tricky maybe could make defaultsmixin gets mixed instance create though called create defaultsmixin would let override property descriptors mixins create merge initializing things like bindings", "d": "4/2012"}, {"body": "change example computed property overrides better", "d": "4/2012"}, {"body": "yeah use computed properties instead transformations true computed property fits case better quite get explanation behavior describe expected would overridable bindings make sense", "d": "4/2012"}, {"body": "expect prototype receive property change event instance nt expect binding subclass prototype affect interact binding superclass prototype means bindings prototypes affect prototype instance changed affects instances change instance nt able affect instances javascript tricky inherit instance shared instances definitely problem bindings connecting shared instance computed properties function use get properties even though function shared prototype uses points instance still worry cp setup prototype might invalidate instances one instance changes need confirm bindings hold onto obj connected think problem going testing see makes sense likely think bindings initialized create connecting instance", "d": "4/2012"}, {"body": "going changed work bindings setup object estimate rc might land change bindings computed properties flamejs mean time", "d": "4/2012"}, {"body": "estimate rc yet however definitely possible may another release two three prior whether change computed properties make sense would nt hurt switch", "d": "4/2012"}, {"body": "pretty surprised kselden pointed chat bindings currently behaviour visavis prototypes would expect bindings remain inert instantiation binding connected instance fiddling prototype currently happening exorcised", "d": "4/2012"}, {"body": "got bit change current behavior", "d": "4/2012"}, {"body": "fixes issue bindings still subtle issues observers subclassing emberrewatch", "d": "4/2012"}, {"body": "mixin applied since naming events overriding methods mixin first two events fired example events chosen names actions cause problems rename works expected", "d": "4/2012"}, {"body": "another solution would override methods adding call event action helper see", "d": "4/2012"}, {"body": "workaround simply rename functions consider behavior bug informed however footnote documentation behavior would certainly improvement thanks pangratz help", "d": "4/2012"}, {"body": "mrhus glad could help", "d": "4/2012"}, {"body": "bad link allows work existing protocol either also starterkit repo tickets filed", "d": "4/2012"}, {"body": "starter kit repo please file tickets", "d": "4/2012"}, {"body": "pangratz interesting idea use sure super necessary seems nice getting view seems difficult though", "d": "4/2012"}, {"body": "want react events view kind forced use specify since events captured one possible solution think keep track created instances call application guess use case code view appended applications root otherwise youl specify application want view inserted", "d": "4/2012"}, {"body": "keeps list available namespaces one possible solution could along lines see javascript emberviewreopen append function app app emberassert must specify emberapplication instance emberapplicationdetectinstance app var rootelement appget rootelement return thisappendto rootelement else var applications embernamespacenamespacesfilter function item return emberapplicationdetectinstance item var firstapp applicationsget firstobject firstapp return thisappend firstapp default first application obviously cached somewhere circumvent filter every call", "d": "4/2012"}, {"body": "one default application use something similar done ds default store", "d": "4/2012"}, {"body": "tchak good hint thanks think open pr", "d": "4/2012"}, {"body": "pull request", "d": "4/2012"}, {"body": "closing favor pr", "d": "4/2012"}, {"body": "nt way states work also example go never actually left nt call", "d": "4/2012"}, {"body": "believe root issue caused swapping views inside template using containerview fixed", "d": "4/2012"}, {"body": "call directly instead use call within action", "d": "4/2012"}, {"body": "hmm nt call public function externally statemanager could provide example using reading source nt see anything interesting", "d": "4/2012"}, {"body": "semipublic called outside ie considered bad architecture call directly trigger within action looks method state matching name found looks parent states jsfiddle also incorrect attempted use attribute set template name instead correct furthermore would never change state immediately creating want start different state set different updated jsfiddle used emulate normal delay user input working version", "d": "4/2012"}, {"body": "interesting without settimeout error go ahead call user error still present jsfiddle even using nt fix figure way variably set initialstate pass defer still think issue possible states sure bigger fish fry thanks help wagenet", "d": "4/2012"}, {"body": "reason present without nt finished entering initial state yet call nt know action yet unfortunately states well documented something know issue working improve", "d": "4/2012"}, {"body": "well strict logical sens true guess", "d": "4/2012"}, {"body": "corresponding test", "d": "4/2012"}, {"body": "guess make sense dont send second parameter undefined infact true objects thanks guys", "d": "4/2012"}, {"body": "think ask question stackoverflow tagged emberjs reasons although fine post questions mainly used qa questions get asked importantly answered second reason another user might similar problem search likely issues github", "d": "4/2012"}, {"body": "makes sense ok thanks", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "might able add warning development solution nt figured", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "starter kit repo issue tracking issue already addressed though nt uploaded new build yet", "d": "4/2012"}, {"body": "fantastic thanks look little harder next time", "d": "4/2012"}, {"body": "seems odd extract js rails generates link put jsfiddle", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "add script tag work working fix", "d": "4/2012"}, {"body": "using emberjs fiddle version released days ago would encourage use latest version since many bugs fixed new features added took look example refactored working example found question ask stackoverflow", "d": "4/2012"}, {"body": "updated version fiddle using emberjs", "d": "4/2012"}, {"body": "hi pangratz thanks reply need observers work using binding example given merely trimmed order demonstrate problem could get something working using addobserver function", "d": "4/2012"}, {"body": "look problem never invoked", "d": "4/2012"}, {"body": "pretty sure document ready invoked added alert alert displayed", "d": "4/2012"}, {"body": "ok misunderstanding sorry next try", "d": "4/2012"}, {"body": "need create button via code via view original jsfiddle sample unit testing reasons rely view instantiate button possible", "d": "4/2012"}, {"body": "something like", "d": "4/2012"}, {"body": "thanks much fire observers expected would know nt work add set adding observer", "d": "4/2012"}, {"body": "finally figured wrapped creation button emberrun thanks help pangratz much appreciated definitely helped right direction", "d": "4/2012"}, {"body": "glad could help", "d": "4/2012"}, {"body": "possible handlebars reason allowing keep templates simple nt afraid make view subclasses", "d": "4/2012"}, {"body": "nickfranceschina ewot joke based unix error codes start e wot agree useful case trying empty view inbuffer ie dom yet judging error nt something expect happen using helper kselden check think worked code", "d": "4/2012"}, {"body": "using several spots unable gather solid evidence really happening symptoms look like two totally differentunrelated nested views different nested branches root layout somehow affecting remove one ewot goes away think misusing custom view registered handlebar helper somehow nt figured yet", "d": "4/2012"}, {"body": "ps also using ember layout ember route manager projects", "d": "4/2012"}, {"body": "figured actually bug ember data adapter causing object get updated store several times quickly one lists observing changes property forcing ton redraws fast", "d": "4/2012"}, {"body": "nickfranceschina glad figured still probably nt throw exception", "d": "4/2012"}, {"body": "pangratz nt work", "d": "4/2012"}, {"body": "ok thanks frodsan seems latest oauth enhancements github broke used gem", "d": "4/2012"}, {"body": "opened issue constellationrubynetgithubupload", "d": "4/2012"}, {"body": "wonder nt hit api directly without using", "d": "4/2012"}, {"body": "wagenet might good thing done little search nt found alternative library offers upload files github", "d": "4/2012"}, {"body": "libraries going nt need libraries seriousness able hit api directly", "d": "4/2012"}, {"body": "forked example little refactoring define dependency property also kind deprecated use helper add dependency property would get informed length array changes would nt trigger recalculation sum replace value array via method also question problem emberjs ask directly stackoverflow", "d": "4/2012"}, {"body": "awesome pangratz answered question also nt know deprecated sorry pollute issues questions ember nt think enough rep stackoverflow post question minutes ago thankyou try find time write docs", "d": "4/2012"}, {"body": "cheers wagenet mentioned deprecation comment stackoverflow", "d": "4/2012"}, {"body": "pangratz johncant still cases useful however mainly nt much functionality plan make better time", "d": "4/2012"}, {"body": "corresponding pull request needs merged fix issue emberjsstarterkit", "d": "4/2012"}, {"body": "cool somehow missed emberjsstarterkit", "d": "4/2012"}, {"body": "mentioning wycats wagenet tomdale kselden ebryn notified issue already closed", "d": "4/2012"}, {"body": "davidkellis sounds like lazy setup trying access prototype", "d": "4/2012"}, {"body": "prototype lazily initialized need manually call classproto initialize prototype", "d": "4/2012"}, {"body": "thank yall clarification bet classproto try tomorrow", "d": "4/2012"}, {"body": "use case", "d": "4/2012"}, {"body": "fleshing minimalistic activerecordesque model class looks like note code generated coffeescript translatorcompiler javascript emberminmodel emberobjectextend emberminmodelreopenclass function query var array request query null query array emberarrayproxycreate request ajax url thisprototypeurl lt bit appinvestmentprototypeurl initially undefined type get datatype json data query requestdone function data textstatus jqxhr var models consolelog done data textstatus jqxhr models data map function modeldata return thiscreate modeldata consolelog models models return arrayset content models return array define subclass emberminmodel like went wrong expecting immediately defining subclass appinvestment expression appinvestmentprototypeurl would evaluate investments actually undefined create first instance appinvestment part find unintuitive since appinvestmentprototypeurl evaluates undefined call appinvestmentall nt generate ajax request investments use case tinker expect invoke appinvestmentproto first invocation appinvestmentall appinvestmentprototypeurl evaluate investments make ajax request investments like intended update sure enough inserted appinvestmentproto immediately definition appinvestment first invocation appinvestmentall works expected appinvestmentprototypeurl defined investment ajax request pointed correct url thank yall pointer use classproto", "d": "4/2012"}, {"body": "sandstrom close ideas performance improvements radar", "d": "4/2012"}, {"body": "hmm solution nt straightforward emberbinding defines class level instance level methods tchak approach ca nt worked able former latter", "d": "4/2012"}, {"body": "tomdale says nt expected work however admit would nice changing improvement", "d": "4/2012"}, {"body": "events fire element one responds click events technically bug something improve", "d": "4/2012"}, {"body": "ran across today", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "closing favor", "d": "4/2012"}, {"body": "radicaled thinking nt think using dom insertion anyway designed", "d": "4/2012"}, {"body": "purpose emberjs html elements encapsulated within javascript backed view impression could freely mixmatch freestanding html emberjsbacked html views together freely implies supposed", "d": "4/2012"}, {"body": "general want one parent view app though may exceptions harm putting html parent view ember nt directly control make sure nt trying control stuff ember elsewhere time", "d": "4/2012"}, {"body": "tell bit app may able help clarify things", "d": "4/2012"}, {"body": "regular garden variety cms using emberjs drive applike bits using control behavior media player widget one things context ticket needed functionality prepend widget existing html structure notified element rendered could run party js worked right visible elements nt want cargo cult method definition viewappend everywhere wanted viewprepend viewafter viewbefore etc", "d": "4/2012"}, {"body": "radicaled seen", "d": "4/2012"}, {"body": "wagenet proposing somewhere callback move element jquery regular prepend function", "d": "4/2012"}, {"body": "said depend party js needs visible elements suggesting make emberview right html trigger party js", "d": "4/2012"}, {"body": "whoops bad", "d": "4/2012"}, {"body": "radicaled work case want make sure good solution", "d": "4/2012"}, {"body": "think one quick question related html assuming ca nt change structure markup nt want wrap emberview right way append element", "d": "4/2012"}, {"body": "nt come use case yet would one", "d": "4/2012"}, {"body": "moment one knows annotated version still care could copy code link make new version care", "d": "4/2012"}, {"body": "closed", "d": "4/2012"}, {"body": "like mahonnaise quick template sanity checking thought share quick gist use ember case helps anyone", "d": "4/2012"}, {"body": "raycohen thanks gist", "d": "4/2012"}, {"body": "easy way test templates going close someone else reopen refile want tighter integration ember", "d": "4/2012"}, {"body": "also expected new state set inside based documentation transitioning new state new currentstate enter method called statemanager instance first argument object representing transition second argument also seems useful new state already set", "d": "4/2012"}, {"body": "agreed sytse also need sometimes last state currentstate enter method api evolve could useful laststate property would like also able gotostate enter method state think possible current implementation happens sometimes intermediary states sorry also mentioned", "d": "4/2012"}, {"body": "assumption fix issue mistaken let know reopen", "d": "4/2012"}, {"body": "wagenet great hear played bit profiled jsfiddle actually much faster jsfiddle example runs like x times faster compared great", "d": "4/2012"}, {"body": "fpauser awesome ideas things want improve speed since got improvement going close ticket", "d": "4/2012"}, {"body": "looks like possible reproduce setting following header fix precompile handlebars templates core", "d": "4/2012"}, {"body": "sorry getting back sooner solved problem server level setting xcontentsecuritypolicy header domain necessary", "d": "4/2012"}, {"body": "iamjstates worries seems like found case happen way solve glad got solved case", "d": "4/2012"}, {"body": "changed build script precompile resolve issue", "d": "4/2012"}, {"body": "puzzling seems boil eachproxy handling setting observers internally call addobserver root part chained path however chainnode plucks toplevel keyname eachproxy goes merry way eachproxy never gets involved basically two levels arrays play watching eachnest eachisdone work instance", "d": "4/2012"}, {"body": "forgot clarify chainnode plucks keyname eachproxy getting eacharray hence need nesting observers", "d": "4/2012"}, {"body": "chime also find needing pattern described sopost quite often along something like view figure previous element idx thisgetpath parentviewcontentindex prev thisgetpath parentviewparentview get content objectatcontent unless less convoluted way write current ember arrived mostly trial amp error would say case deserves sugar coating current way far intuitive especially dedicated nested metamorph still quite sure needed seen arguments presenter pattern similar seems little overkill want express something tune see performanceconcern contentindex though perhaps could start prevfirstlastelement first last relatively cheap think would already cover many cases css nt cut", "d": "4/2012"}, {"body": "changing improvement since ebryn said nt intend support case said would still nice support ebryn chance look anymore", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "taking lack feedback wycats goahead close", "d": "4/2012"}, {"body": "emberwatch causes watched property defined would unknown property based value undefined", "d": "4/2012"}, {"body": "kselden possible note somewhere property yet defined", "d": "4/2012"}, {"body": "false alarm appears work least", "d": "4/2012"}, {"body": "probably revert however make computed properties smarter nt trigger events one watching", "d": "4/2012"}, {"body": "way rely array observers attempt make work outside arrays would difficult best", "d": "4/2012"}, {"body": "anyone needs functionality meantime add enumerable observer see", "d": "4/2012"}, {"body": "kselden still seems problem correct", "d": "4/2012"}, {"body": "assuming either already covered covered", "d": "4/2012"}, {"body": "emberbutton deprecated", "d": "4/2012"}, {"body": "looks nt distribute part starterkit hope", "d": "4/2012"}, {"body": "omo npm package already though date see", "d": "4/2012"}, {"body": "great hear waiting latest push thank letting know", "d": "4/2012"}, {"body": "fixed", "d": "4/2012"}, {"body": "whether change default resolve issue prior release", "d": "4/2012"}, {"body": "think bite bullet", "d": "4/2012"}, {"body": "tomdale turn also enable flag first make default", "d": "4/2012"}, {"body": "wagenet", "d": "4/2012"}, {"body": "progress", "d": "4/2012"}]