[{"title": "add missing onanimationstartonanimationend event handlers", "body": "react currently nt handle aforementioned events patch works webkit work needs done make work browsers support standard css tags", "num": "1196", "d": "2/2014"}, {"title": "renderintodocument working", "body": "hi guys jasmine backbone fault javascript describe cnotice function lol function consolelog notice present consolelog return constructor error invariant violation addcomponentasrefto reactowner refs usually means trying add ref component nt owner created inside another component render method try rendering component inside new toplevel component hold ref code problem javascript describe cnotice function var notice null beforeeach function notice reactcreateclass want import notice component external file thanks", "num": "1191", "d": "2/2014"}, {"title": "inconsistent calling setstate callback", "body": "passing callback unclear whether callback called synchronously asynchronously specifically seems callback executed synchronously react decides effect state changes unclear whether react effect state changes asynchronously synchronously makes hard reason callback called seems consistency even react effects state changes synchronously callback shoved event loop called asynchronously sake consistent api example case shows example callback passed setstate gets called synchronously state change effected synchronously look console numbers start getting logged clicked ok alert box example case shows example callback executed asynchronously state change effected asynchronously see comments fiddle", "num": "1187", "d": "2/2014"}, {"title": "reacttestutilssimulateclick work jsdom", "body": "testing react application nodejs mocha jsdom reacttestutilssimulateclick affect component sample app reproduce problem test", "num": "1185", "d": "2/2014"}, {"title": "special case arrays dom properties", "body": "often code uses heavy handed often times want add class style based option currently want looks something like bad sometimes well longer classnames multiply large number situation adds lot duplicate work developers want make better us talked different ideas want combination explicit much magic one idea magical prop could used pass surface looks great need bake knowledge certain props composite components string guaranteed component using prop way used dom settled least surprising line special casing react dom properties right booleans get handled specially planning ability special case arrays allows us would need individual properties apply handling every property example would basically need flatten join space style would need flatten merge objects diverge slightly current behavior stringifying allmost properties", "num": "1179", "d": "2/2014"}, {"title": "inputs slower update tags", "body": "compare one swapped input span notice second one twice fast update maybe optimize reactdominput bring line", "num": "1178", "d": "2/2014"}, {"title": "html characters parsed", "body": "hi possible react compiler turns html characters like inside react code literal characters compiled causing problems opened browser way fix", "num": "1177", "d": "2/2014"}, {"title": "jsx html entities without surrounding text produce bad js", "body": "html entities work interspersed plain text ex becomes space middle genuine nbsp often nonbreaking space used style background element without collapsing work react currently becomes parse", "num": "1176", "d": "2/2014"}, {"title": "react support svg opacity attributes", "body": "none svg attributes seem work", "num": "1171", "d": "2/2014"}, {"title": "mobilesafariclickeventplugin requires touch events initialized", "body": "event trigger node cursor pointer style example", "num": "1169", "d": "2/2014"}, {"title": "jsxtransformer error", "body": "jsxtransformerjs included script html produces error arrfoo function firefox jsx file transformed offline javascript produces error error invariant violation registercomponent target container dom element line line points back line contains arrfoo", "num": "1168", "d": "2/2014"}, {"title": "react escaping causing markupchecksum match", "body": "noticed lately app throwing following warning load running code debugger found difference generated markup inpage lot lines like following inbrowser generated markup includes prerendered page something misconfigured bug", "num": "1165", "d": "2/2014"}, {"title": "reactcomponentisvalidcomponent returns true component classes", "body": "last two assertions new test nt pass ducktyping check added sebmarkbage quite sure mind every object whose component class valid right js identify valid components correctly function var component reactcreateclass render function return expect reactcomponentisvalidcomponent toequal true expect reactcomponentisvalidcomponent toequal true expect reactcomponentisvalidcomponent null toequal false expect reactcomponentisvalidcomponent true toequal false expect reactcomponentisvalidcomponent toequal false expect reactcomponentisvalidcomponent string toequal false expect reactcomponentisvalidcomponent reactdomdiv toequal false fail expect reactcomponentisvalidcomponent component toequal false fail", "num": "1164", "d": "2/2014"}, {"title": "docs componentdidupdate etc says", "body": "componentspecs says several places prior dom node passed last argument using still access dom node calling thisgetdomnode pretty sure change made", "num": "1163", "d": "2/2014"}, {"title": "working jsx", "body": "react docs say valid html attributes accepted jsx let please make exception working ps found supposed way via value really convenient generate please let honor basic promises", "num": "1162", "d": "2/2014"}, {"title": "provide way handle browserautocompleted form values controlled components", "body": "controlled component form names user saved browser common usernamepassword fields browser sometimes render page values fields without firing onchange events user submits form component state reflect showing user experimenting appears data load tested logging thisrefsmyinputgetdomnode value", "num": "1159", "d": "2/2014"}, {"title": "download react devtools already installed", "body": "getting console already installed google chrome latest using stable included browserify shimmed aliased react react see use react tab chrome devtools", "num": "1158", "d": "2/2014"}, {"title": "remove todomvc examples", "body": "related todomvcs updated pass todomvc tests sync back wondering simpler put readme examples docs site point react todos todomvc repo", "num": "1154", "d": "2/2014"}, {"title": "extract html mutation setinnerhtml module consistent behavior", "body": "see", "num": "1153", "d": "2/2014"}, {"title": "trigger change events value input changed programmatically", "body": "bind event input using change value input programmatically change event fired example changing input result triggering done manually like", "num": "1152", "d": "2/2014"}, {"title": "reactrendercomponenttostring wo nt render nested image tag", "body": "see fiddle img tag nested one level fails render uncaught typeerror read property firstchild undefined self closing paragraph fine reproduce issue current master img tag special case way work around issue", "num": "1149", "d": "2/2014"}, {"title": "obscure domchildrenoperations error multiple updates", "body": "throws js jsx reactdom var x reactcreateclass getinitialstate function return render function thisstates return else thisstates return else return go function thissetstate thissetstate thissetstate thissetstate var reactcreateclass render function return var z reactcreateclass render function return componentwillupdate function xgo var xnode documentgetelementbyid x var ynode documentgetelementbyid var x reactrendercomponent xnode reactrendercomponent ynode reactrendercomponent ynode maybe simplified simplest repro could make thanks fforw sending repro case", "num": "1147", "d": "2/2014"}, {"title": "jsx tool weird things providesmodule", "body": "ca nt reproduce making files public instead publicjs repro making autofocusmixinjs", "num": "1145", "d": "2/2014"}, {"title": "polygon missing transform reactdom", "body": "blames", "num": "1144", "d": "2/2014"}, {"title": "getinitialstate called component lifecycle", "body": "reproduce simple code looks like post whole code wrong look pictures first one right panel state null second already populated", "num": "1142", "d": "2/2014"}, {"title": "svg changing classname nt work", "body": "still nt work workaround refs", "num": "1139", "d": "2/2014"}, {"title": "mixed callback mixins", "body": "think mixed callback mixins called moment applying mixin component component spec argument var sometrickerymixin mixin function spec redefine render dangerous things besides overriding callbacks used want implement custom policy methods wrap method callbefore callafter downside would make things little less straightforward mixin user perspective", "num": "1138", "d": "2/2014"}, {"title": "unique component identifier", "body": "reactasync reactmultiplayer need components unique identifiers case reactasync maintain mapping component state make serialisable send wire map components keys ca nt used case reactmultiplayer unique url per component instance currently libraries use added public api something", "num": "1137", "d": "2/2014"}, {"title": "remove usage docs examples", "body": "whitespace fix remove soon", "num": "1136", "d": "2/2014"}, {"title": "convert camelcasing data properties hyphens", "body": "background properties specialcased allow works naturally jsx looks great however breaks directly using reactdom api particularly transpilers instance coffeescript div reactdom div datafoo bar silently ignored hyphen required attributes picked custom property regex hypens allowed literal object property names requires ugly extra set quotes proposal camelcased custom properties convert every uppercase character hyphen followed character downcased wo nt conflict builtin properties since would ignored anyway nt introduce regressions makes custom properties behave like standard ones also reverse transformation jquery makes data attributes seems quite natural", "num": "1134", "d": "2/2014"}, {"title": "reactrendercomponenttostring executionenvironmentcanusedom", "body": "using test generated output forms library sharing set qunit tests firefox chrome nodejs using qqunit function always thrown errors used browser tests still worked seemed call callback throwing error custom assertion function using trying browser test suites complaining function synchronous error thrown get hold generated html run nodejs tests bombing navigator check chrome becuase qqunit fakes global using jsdom patch check navigator undefined get results running browser edited nodemodules version add process check tests run nodejs complains assertions boolean html attributes longer part generated markup biggie edited version test browsers using following errors thrown call errors html differences getting running nodejs tl dr react always using equivalent executing stops throwing errors", "num": "1129", "d": "2/2014"}, {"title": "add support schemaorg attributes itemscope itemtype itemprop", "body": "", "num": "1126", "d": "2/2014"}, {"title": "unable set audio tag attributes", "body": "limitation api tags see maybe react work around like normalize tags etc would like able something like pseudocode react pick attribute change take care invoking javascript interface attributes etc", "num": "1124", "d": "2/2014"}, {"title": "reactbootstrap builds move reactjs org", "body": "hi like separate builds source time move org looks like good place like repos like move source later date sad losing stars thanks", "num": "1123", "d": "2/2014"}, {"title": "document expose reactperf", "body": "think said wanted", "num": "1121", "d": "2/2014"}, {"title": "warning code shows min build", "body": "see search either change warning implementation warn strip build step b change callers check cpojer", "num": "1120", "d": "2/2014"}, {"title": "reacteventemitter error upgrade react", "body": "upgraded previously working app running app throws following error chrome nt get detailed stack trace though sorry app previously working without errors react also upgraded reacttouchlib dependency created fork reacttouchlib repo update react dependency case existing dependency react causing issue", "num": "1119", "d": "2/2014"}, {"title": "inaccurate warning value props set without onchange", "body": "create input component set without providing handler react log console provided prop form field without handler render readonly field field mutable use otherwise set either nt entirely accurate however example app rely event bubbling set single form component thereby saving sanity preventing add every single field lot app working", "num": "1118", "d": "2/2014"}, {"title": "support anchor tag attributes", "body": "react currently support anchor tag attributes know current status adoption attributes know chrome supports pretty sure firefox supports well could really care less thought mention completeness see also", "num": "1115", "d": "2/2014"}, {"title": "reacttools npm package broken", "body": "returns object method undefined", "num": "1114", "d": "2/2014"}, {"title": "strange cursor jump", "body": "situation nt modify value onchange working like charm modify value cursor jumping end prevent behaviour without control state cursor position update", "num": "1113", "d": "2/2014"}, {"title": "csstransitiongroup working safari", "body": "changed replaced reactaddonstransitiongroup reactaddonscsstransitiongroup transistions leave leaveactive longer work safari mac os x understand safari regarded bit old eg github react meant support browser transistions work fine safari chrome", "num": "1111", "d": "2/2014"}, {"title": "docs componentdidupdate get called initial render", "body": "documentation states lifecycle method nt get called initial render whereas opposite true rightly due opportunity capture dom state occasions think needs updating", "num": "1109", "d": "2/2014"}, {"title": "browserify r react takes almost seconds", "body": "react react think envify switched recast submitted patch envify uses jstransform instead recast brings us back delivers advantages recast version preserves code formatting think blocker", "num": "1108", "d": "2/2014"}, {"title": "changing node type breaks invariant", "body": "example var failingcomponent reactcreateclass getinitialstate function return selecting false handleaddclick function e thissetstate selecting true render function thisstateselecting cause invariant violation return reactdominput null else return reactdomdiv onclick thishandleaddclick press reactrendercomponent failingcomponent documentgetelementbyid example one tries click div error raised invariant violation reactmount two valid unequal nodes break pair instead tag well maybe tags well nt checked nt break tag others works flawlessly react nt work master", "num": "1107", "d": "2/2014"}, {"title": "handletoplevel throw removing event target", "body": "throws click text", "num": "1105", "d": "2/2014"}, {"title": "reactchildrenonlychild throws text child", "body": "text child string fails would make sense accept string frankly confused api", "num": "1104", "d": "2/2014"}, {"title": "document clonewithprops", "body": "", "num": "1103", "d": "2/2014"}, {"title": "consider backporting change", "body": "would help people using reactrails version node shipping rails buildpack laughably ancient", "num": "1101", "d": "2/2014"}, {"title": "bring descriptor warning", "body": "warning point great change end point right gist documentation documentation update fbme url launch", "num": "1098", "d": "2/2014"}, {"title": "make sure whitespace codemod correct", "body": "see syranide comment", "num": "1093", "d": "2/2014"}, {"title": "make consoletable work firefox perf", "body": "need petehunt cc joshduck going block nt think people using perf stuff fix asap", "num": "1091", "d": "2/2014"}, {"title": "sync vendored modules", "body": "", "num": "1090", "d": "2/2014"}, {"title": "tutorial revamp", "body": "would like include routing model objects integration jquery plugin sortable related", "num": "1089", "d": "2/2014"}, {"title": "error invalid operand object expected gt", "body": "hi getting following error click dom node nt mounted yet least think happening occurs clicking element multiple times transitions fixed issue updating getselection function selecteventpluginjs flipping test seems work wanted check adverse impact", "num": "1083", "d": "2/2014"}, {"title": "rendering strings newlines inconsistent rererender", "body": "rerender sometimes use innertext causes inconsistencies rendering whitespace see demo make sure nt happen", "num": "1080", "d": "2/2014"}, {"title": "componentdidmount run server render", "body": "fails might fixed nt tried related swannodetteom", "num": "1079", "d": "2/2014"}, {"title": "monkeypatch mathrandom new date datenow render dev", "body": "talking adam wolff today rxjs ton common bugs functions gon na bad time use react methods monkeypatched warn could prevent bugs jordwalke seemed like idea", "num": "1077", "d": "2/2014"}, {"title": "fix", "body": "since nt call gets hella confused", "num": "1074", "d": "2/2014"}, {"title": "fix transitions example use csstransitiongroup", "body": "let remember merging", "num": "1071", "d": "2/2014"}, {"title": "map undefined json object passed", "body": "reactjs library using underscorejs right see map function nt work json object data passed using map consists json schema excerpt would like use built map function rely external library wrong", "num": "1068", "d": "2/2014"}, {"title": "expose csstransitiongroup reactaddons", "body": "", "num": "1064", "d": "2/2014"}, {"title": "support lowercase vendor prefixes stylenames", "body": "tldr let allow stylenames recommend javascript keys start capital letter vendor prefixes presumably hyphenation trivial start single leading hyphen forces user put vendorspecific key nt even valid produces css nt really work probably need rework build awareness vendorspecific prefixes core react style building comes", "num": "1063", "d": "2/2014"}, {"title": "react ignores form attributes", "body": "passing react ignores enctype nt parse", "num": "1062", "d": "2/2014"}, {"title": "use merge withcontext means prototype values nt copied", "body": "written context class planned use turns implemented using copies properties understand desired places reason could nt merge properties clear example troublesome code", "num": "1061", "d": "2/2014"}, {"title": "reactemptycomponent nullcomponent", "body": "people varying hacks allow component render nothing add stopgap standard solution support components returning propose something like title maybe aka probably render one thing people another thing ideally something nt break flow", "num": "1058", "d": "2/2014"}, {"title": "add support iframe attributes seamless sandbox srcdoc", "body": "", "num": "1057", "d": "2/2014"}, {"title": "write docs statics", "body": "since descriptor warning references statics probably document releasing", "num": "1056", "d": "2/2014"}, {"title": "jstransform longer works", "body": "jsfransform sourcemap uses nt support shimsshams nt either", "num": "1053", "d": "2/2014"}, {"title": "react incorrectly identifies component root presence textnodes container", "body": "quoting andreypopp react incorrectly identifies component root presence textnodes container removed whitespaces tags template everything ok fixed react though see commit fix", "num": "1050", "d": "2/2014"}, {"title": "jsxcompilerhtml nt show livecompiled switcher", "body": "chenglou", "num": "1049", "d": "2/2014"}, {"title": "allow disable guard feature", "body": "see", "num": "1047", "d": "2/2014"}, {"title": "unmounting react node", "body": "trying unmount reactjs node handleclick function returns fired click element unmount rootnode tried well selector works unmounting documentation states like would use tests turns works elementsselectors somehow works selector element generated reactjs plain html returns soon try select different generated reactjs returns wo nt work either though essentially return thing also nt work simple way select node via without resort jquery selectors know somewhere", "num": "1044", "d": "2/2014"}, {"title": "error removing without", "body": "got template like got error debug session found happened parent node removed element child node table solution wrap think many people nt wright tag", "num": "1043", "d": "2/2014"}, {"title": "allow html conditional comments doctype", "body": "hacking fully server client compatible app using react one obstactle running seems react nt like exclamation marks jsxstyle code example pretty standard boilerplate html think getting stuck conditional comments example would prefer keep code html style render server without making major changes needs inside react class open trying hack together may take stab sometime coming week", "num": "1035", "d": "2/2014"}, {"title": "android simple form fails", "body": "created gist illustrating getting output adb console", "num": "1031", "d": "2/2014"}, {"title": "tags nt supported", "body": "tl dr nt work background make tags work one needs something along lines js function var header footer nav article section menu var lt documentcreateelement well create css rule running code behave sanely elements manipulating document nodes however nodes nt attached document decides sad work specifically detach nodes document whenever set reactcomponentbrowserenvironmentjs jquery gets around creating elements document fragment inserting document probably something similar", "num": "1030", "d": "2/2014"}, {"title": "behavior differs chrome manually removing component dom", "body": "recently came across following js jsx reactdom var countdownview reactcreateclass componentdidmount function thistimeout setinterval thisforceupdatebind function rerender documentbodyinnerhtml reactrendercomponent documentgetelementbyid container rerender live demo note manually removing component element dom using instead clicking timestamp thereafter cause js error findcomponentroot every second chrome firefox errors thrown addition would nice could give useful message instead clear completely render get somewhathelpful warning reactmount root element removed original container", "num": "1029", "d": "2/2014"}, {"title": "error message passing string instead function handler could clear", "body": "accidentally wrote code react responded technically correct somewhat vague error message undefinedhandlechange string function clear", "num": "1028", "d": "2/2014"}, {"title": "sending state current component parameter another external method possible", "body": "", "num": "1025", "d": "2/2014"}, {"title": "update latest esprima jstransform", "body": "need pick latest changes fix parse errors", "num": "1024", "d": "2/2014"}, {"title": "remove warnings old react module", "body": "", "num": "1023", "d": "2/2014"}, {"title": "todo list application react home page working", "body": "sure best place report application todo example react homepage seems bug adding new item fact adds two one created empty jsfiddle works fine nt know whether conflict something else page setup details", "num": "1020", "d": "2/2014"}, {"title": "error raised disabling input element focus", "body": "sure qualifies bug feature request let decide steps reproduce load url jsfiddle nt play well host open developer tools click submit button call handler sets disabled property submit button notice error console worked around application calling documentbodyfocus disabling button active focus would nice react input component could detect focus remove disabling", "num": "1015", "d": "2/2014"}, {"title": "shouldcomponentreceiveprops something", "body": "talked spicyj chat back agreed something like whether component simulate would sometimes great means resolving confusion two components type completely different data would normally considered say zpao briefly mentioned one could wrap component provide really quite hack two components would intricately bound methods put outer outer possibly reading state inner also quite tedious background opinion solution reconciling reordered children synonymous identity component could index array objects thus replaced array component would update rather remount identical even though also something decided handled component opposed parent speaking zpao seemed agree could nt see much use believe definite usecases like array primarily thirdparty integration reusable components alternatives could simulated using mixin simply invokes full chain methods component dom inputs would incorrectly remain unless also assign identity root node component could also still dirty feel issue addressed properly react minor change believe although intersects significantly refactoring may advisable naming probably shitty name feel like remain true meaning thus form really rather kill", "num": "1014", "d": "2/2014"}, {"title": "update docs supported properties", "body": "let hold sure cut release least going add couple entirely possible add", "num": "1008", "d": "2/2014"}, {"body": "called items added existing transitiongroup see think accomplish want ideas documenting better way runtime warnings new features nt fit use case please reopen thanks", "d": "2/2014"}, {"body": "oh right missed existing part sorry", "d": "2/2014"}, {"body": "take look currently listening right events", "d": "2/2014"}, {"body": "yah seen file clear suggesting use strategy handle multiple browsers use component directly", "d": "2/2014"}, {"body": "comment long time ago might still relevant nt reading dom order reconcile kind point reconciling able detect changes without resort touching dom sure possible types things want without resorting dom touching", "d": "2/2014"}, {"body": "definitely happening seems like asking question rather actual issue quick testing side shows issues issue would great could provide code reproduces error", "d": "2/2014"}, {"body": "well using gulpreact uses reacttools example result transformation get", "d": "2/2014"}, {"body": "ah yes react actually render straight html htmlentities strings issue somehow curious", "d": "2/2014"}, {"body": "yes issue browser somehow set encoding iso believe forcing encoding solve issue thanks", "d": "2/2014"}, {"body": "onionsoup ah also worth knowing unable use document charset ps correct also unless using xhtml technically using selfclosing slash", "d": "2/2014"}, {"body": "believe works correctly confirm also try", "d": "2/2014"}, {"body": "indeed right using browser copy gulpreact stale sorry ben", "d": "2/2014"}, {"body": "problem glad figured", "d": "2/2014"}, {"body": "reference even react codebase assuming weird ios bug react might able work around though", "d": "2/2014"}, {"body": "guess issue around quite interesting timing ran thing different context morning see bunch workarounds add empty handlers page loads address nt seem like react problem fix either add cursor pointer empty event handlers causes issue", "d": "2/2014"}, {"body": "mattkunze try fix things fixed would nt surprise temporarily add clickhandler touch solve like", "d": "2/2014"}, {"body": "yes fix exact problem sounds like perhaps working", "d": "2/2014"}, {"body": "plugin registered automatically something enable confirm original jsfiddle posted nt working ios", "d": "2/2014"}, {"body": "digging repository found event plugin seems related similar bug problem seems little wider chrome ios also affected mobile webkit issue", "d": "2/2014"}, {"body": "adding component workaround seems like plugin working moment", "d": "2/2014"}, {"body": "exception wrapped trycatch block exception nt bubbling causing trouble please file issue browserify buffer module code comes", "d": "2/2014"}, {"body": "fwiw works fine firefox", "d": "2/2014"}, {"body": "react nt actually look instead compares checksum servergenerated markup computed sent browser clientgenerated markup could try running server client compare outputs make sure passing props cases render function looks props state date mathrandom etc", "d": "2/2014"}, {"body": "thanks quick response give shot escaping manner must data mismatch somewhere run work follow close issue back thanks feb ben alpert notifications githubcom wrote react nt actually look outerhtml instead compares checksum servergenerated markup computed sent browser clientgenerated markup could try running reactrendercomponenttostring server client compare outputs make sure passing props cases render function looks props state date mathrandom etc reply email directly view github", "d": "2/2014"}, {"body": "escaping part used constructing html part list chars escape however done client server nt issue seeing react recently released running different version serverclient", "d": "2/2014"}, {"body": "syranide thanks narrowed differences whitespace handling realized updated versions libs yet updated resulted mismatch whitespace files imported node built browserify updating fixed issue thanks help guys hope anyone else comes across issue show google search", "d": "2/2014"}, {"body": "intermediate step currently duck typing flawed regardless descriptors probably get inheritance chain instanceof reactdescriptor works safer check descriptors pass could probably check props expected component classes fail test therefore also renamed feb ben alpert notifications githubcom wrote last two assertions new test nt pass ducktyping check added sebmarkbage quite sure mind every object whose type component class valid right identify valid components correctly function var component reactcreateclass render function return expect reactcomponentisvalidcomponent toequal true expect reactcomponentisvalidcomponent toequal true expect reactcomponentisvalidcomponent null toequal false expect reactcomponentisvalidcomponent true toequal false expect reactcomponentisvalidcomponent toequal false expect reactcomponentisvalidcomponent string toequal false expect reactcomponentisvalidcomponent reactdomdiv toequal false fail expect reactcomponentisvalidcomponent component toequal false fail reply email directly view github", "d": "2/2014"}, {"body": "right current code returns true passed component class wrong", "d": "2/2014"}, {"body": "right add unit test curiosity find feb pm ben alpert notifications githubcom wrote right current code isvalidcomponent returns true passed component class wrong reply email directly view github", "d": "2/2014"}, {"body": "adding warning passing component class rendercomponent stack overflow question", "d": "2/2014"}, {"body": "brigand thanks", "d": "2/2014"}, {"body": "flockonus problem nt make sense react options would uncontrolled controlled time generally act way would expect react naming convention would make controlled thus unable change options option would uncontrolled adding possible nt even see point sure could represent uncontrolled terms naming would quite misleading right better way point leading people inconvenient path react nt aim copy html deviate makes sense like alternative kind broken assume", "d": "2/2014"}, {"body": "way html work nt pretty nice helper react expectation noob user react nt remove valid attribute html deny apply case nt specify nt work like fine see number people frustrated", "d": "2/2014"}, {"body": "flockonus using development unminified version react seen warning console specifically", "d": "2/2014"}, {"body": "spicyj sounds like upgraded error reason would ever want ignore perhaps leaves react unstable state", "d": "2/2014"}, {"body": "want many things warnings possible compile prod", "d": "2/2014"}, {"body": "petehunt ah makes sense thanks", "d": "2/2014"}, {"body": "seems discuss bit", "d": "2/2014"}, {"body": "unfortunately nt hide error even devtools installed right see", "d": "2/2014"}, {"body": "let replace readme", "d": "2/2014"}, {"body": "correct mirrors events fired outside react expected value changes trigger event good way make infinite loop want call change handler manually mentioned", "d": "2/2014"}, {"body": "looks like forgot save fiddle", "d": "2/2014"}, {"body": "whoops bad", "d": "2/2014"}, {"body": "eelkeh believe fixed earlier today check build using also use builds easier", "d": "2/2014"}, {"body": "right build behind seems fixed thanks", "d": "2/2014"}, {"body": "wow really bug narrowed little still rediculously complex big props fforw repro anyway glancing code experience safely assume issue receives multiple updates node intuitively nt make sense since always calls done basically recursive however taking another peek code pretty sure issue case makes invalid assumption updates belongs root case component updates another root everything done updates root root always greater practice means whenever updates another root dom updates root batched one opposed batching component updates violation assumptions also inefficient intuitively seems happen component updates within call sure exactly solved practice sure right sure happening repro ingredients", "d": "2/2014"}, {"body": "speaking bit spicyj chat feel like issue called within become asynchronous opposed synchronous usually leads issue also possibly lot subtle issues", "d": "2/2014"}, {"body": "apparently blame", "d": "2/2014"}, {"body": "narrowed even apparently breaks immediately first error nt show later unless prodded still nt feel enlightened issue though", "d": "2/2014"}, {"body": "syranide latest two jsbins amp throw different error x one removes z x throws render wo nt refs render thisrefs undefined react docs warn never access refs inside component render method component render method even running anywhere call stack nt know relevant", "d": "2/2014"}, {"body": "plievone yeah different error sure cause issue span actually ever rendered old repro nt actually turn error later", "d": "2/2014"}, {"body": "syranide ok perhaps reduced test case see console called twice row first time span dom even though rendered already one culprit behavior may effectively calling setstate sibling component setstate would allowed component triggered via componentwillupdate", "d": "2/2014"}, {"body": "plievone huh end rendered test case error", "d": "2/2014"}, {"body": "syranide nt want throw error see componentdidupdate called double point first span one would try access refgetdomnode would throw see console flow", "d": "2/2014"}, {"body": "plievone defined error regardless react expects node nt throws error even still nt physically dom something wrong unless missing something", "d": "2/2014"}, {"body": "syranide yes definitely problem said sorry clear wanted reduce refs forceupdates may bring problems one could throw error componentdidupdate clarity innerhtml definitely empty interesting called right away span", "d": "2/2014"}, {"body": "benjamn sounds like commoner trying many things", "d": "2/2014"}, {"body": "commoner happy scale back advise wrapping components amd ca nt think anything outside playbook", "d": "2/2014"}, {"body": "michaeljarosik sorry zpao meant library executable uses", "d": "2/2014"}, {"body": "ahh thanks clarifying probably accurate way read relatively speaking least btw thanks answering recent questions stack helped ton first react app", "d": "2/2014"}, {"body": "content question stack overflow since possibly bug flagged question removal trying precompile react jsx files nonminified file subdirectory compiles react source becomes along renamed source moved parent directory happens use nonminified version react compiled file minified using nonminified source debugging similar problem version instead named autofocusmixin resulting file named also parent directory solution manually copy nonminified source correct location anyone come better solution see wrong assume offending code react source see unclear purpose confirmed file using react core without addons var autofocusmixin componentdidmount function thispropsautofocus thisgetdomnode focus moduleexports autofocusmixin", "d": "2/2014"}, {"body": "file unminified probably contains directives confusing commoner michaeljarosik problem persist remove file", "d": "2/2014"}, {"body": "michaeljarosik regarding reason autofocus mixin gt nt support attribute polyfilled used react form elements", "d": "2/2014"}, {"body": "benjamn problem persist removed file needs copied manually since source file present transfercompile", "d": "2/2014"}, {"body": "benjamn stuff default commoner primary purpose long time ago reconsider use executable", "d": "2/2014"}, {"body": "seems l incorrectly storing reusing virtual components call least create component instance creates virtual component react may choose promote virtual component component instance reusing object allowed reuse virtual component ie render multiple times even different executions nt looked deeply ca nt really tell going seems like going wrong", "d": "2/2014"}, {"body": "yes component rendered added first time replaced added messed stuff maybe reactjs nt allow thanks time", "d": "2/2014"}, {"body": "allowed right check enforce yes", "d": "2/2014"}, {"body": "sure falls class things start warning aware problems reuse pattern led moving towards solution cc sebmarkbage closing though since currently user error even done bad job communicating sorry", "d": "2/2014"}, {"body": "problem thanks support time thu feb pm paul shannessy notifications githubcomwrote closed reply email directly view github melhores cumprimentos webdesignportocom", "d": "2/2014"}, {"body": "firefox bug also makes error crash things hard find reduced case bug hack fix", "d": "2/2014"}, {"body": "thanks report tracking", "d": "2/2014"}, {"body": "magically overriding seems like bad idea seems like would better mixin explicitly state implements method instead implement also assuming would nt fly come around", "d": "2/2014"}, {"body": "another use case implement custom overriding policies methods like", "d": "2/2014"}, {"body": "redundant even enough however unique id implementation detail afaik likely removed future ifwhen ever let go innerhtml also possible concatenated id wo nt available soon node hold relative id possibly monotonic unique id innerhtml implementation detail also unique single point time unique time unsure ca nt solved example via mixin creates unique id component incrementing global counter", "d": "2/2014"}, {"body": "syranide shared multiple composite components correct seems like something fragile cases need unique id one client nt need consistent across clients make autoincrementing counter cases want ids consistent across clients nt think rely rendering components different order server rendering different servers cause node ids different need think really want force person using mixin specify unique key", "d": "2/2014"}, {"body": "spicyj must unique point time describes hiearchy indices keys component removed likely immediately assumed another component taking place anyway andreypopp messages chat seemed like mixin approach good solution", "d": "2/2014"}, {"body": "syranide mean two composite components nested dom node share rootnodeid", "d": "2/2014"}, {"body": "spicyj ah right right emphasis excellent point unique dom loosely speaking", "d": "2/2014"}, {"body": "see also", "d": "2/2014"}, {"body": "sgrove definitely something react attributesproperties listed time getting result could submit pr however must warn tags barely practically functional react today ancestors siblings reordered audio likely pause pending pr landing", "d": "2/2014"}, {"body": "great happy send pr later week thanks syranide appreciate speedy response", "d": "2/2014"}, {"body": "nt know bugfree yet", "d": "2/2014"}, {"body": "let hold", "d": "2/2014"}, {"body": "think functions warnings nt actually executed least avoid including warning message", "d": "2/2014"}, {"body": "think make look identical thing", "d": "2/2014"}, {"body": "think fix use case perhaps also make code work dependencies listed probably event plugins dependencies maybe best leave required asis", "d": "2/2014"}, {"body": "thanks fixes issue", "d": "2/2014"}, {"body": "darthapo twoway binding may something want use instead even implement one provided addon nt ideal case ps also helpful warning quite ocd annoying ca nt turned though", "d": "2/2014"}, {"body": "related note wondering making custom control needs properly support event bubbling good reason use actual input element propagate target maybe", "d": "2/2014"}, {"body": "beers", "d": "2/2014"}, {"body": "replaced see", "d": "2/2014"}, {"body": "aetet generic version problem unsolvable without directly accounting cursor updating cursor cases solvable without additional hurdles jump implemented versions nt npmed yet specific case restoring cursor updating value enough supply function gettingsetting selection one react exposed", "d": "2/2014"}, {"body": "syranide thanks nt find enough crossbrowser setcursor solution nt work chrome android another usecase filtered input work direction", "d": "2/2014"}, {"body": "aetet check react implementation uses internally interested preventing input forcing certain text case work", "d": "2/2014"}, {"body": "update going block", "d": "2/2014"}, {"body": "works original poster shims", "d": "2/2014"}, {"body": "seems true", "d": "2/2014"}, {"body": "pretty sure nt try", "d": "2/2014"}, {"body": "joecritch updating state chance possibly parent updating props tested quickly correctly getting called barring bugs everything", "d": "2/2014"}, {"body": "ca nt repro closing feel free reopen repro", "d": "2/2014"}, {"body": "command running directory trouble reproducing slowdown", "d": "2/2014"}, {"body": "chime say something definitely funky also breaks even wrapped one divs specific root although bad never go higher least", "d": "2/2014"}, {"body": "cc zpao seems like showstopper", "d": "2/2014"}, {"body": "exactly", "d": "2/2014"}, {"body": "plievone seems weird try worked oh well yeah probably root cause", "d": "2/2014"}, {"body": "syranide without keys may reuse instance id something cases unmounting event target thus erroring guess", "d": "2/2014"}, {"body": "plievone think tried think anyway whole issue seems magically weird", "d": "2/2014"}, {"body": "syranide problem occurs well", "d": "2/2014"}, {"body": "yeah definitely launch blocker", "d": "2/2014"}, {"body": "dupe breaks input reactmount node cache nt get populated render span without ever calling getdomnode", "d": "2/2014"}, {"body": "nt understand use case like either making public point may mistake", "d": "2/2014"}, {"body": "petehunt nt think enough docs write wink want somebody else want grab", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "nt two kind contradictory children prop break try render multiple times", "d": "2/2014"}, {"body": "eh going leave gist look official site hurry actually want whole section site dedicated warnings put even warning going live", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "inspired consoleshim", "d": "2/2014"}, {"body": "fixed still trouble master let know", "d": "2/2014"}, {"body": "hi spicyj yes still issue using master code show nt cause issue thanks", "d": "2/2014"}, {"body": "guard immediately precedes call debugger see", "d": "2/2014"}, {"body": "sorry spicyj thought using master mistaken get master test thanks", "d": "2/2014"}, {"body": "yep fixes thanks", "d": "2/2014"}, {"body": "switched use broke contenteditable stuff internal fb zpao knows", "d": "2/2014"}, {"body": "switching back regardless innertext issue browsers nt textcontent suffer", "d": "2/2014"}, {"body": "looks like brought", "d": "2/2014"}, {"body": "right also right thing", "d": "2/2014"}, {"body": "jquery empties adds text node relevant commits", "d": "2/2014"}, {"body": "okay interesting", "d": "2/2014"}, {"body": "jbonta patch almost ready", "d": "2/2014"}, {"body": "spicyj curious simpler solution newline problem works innerhtml", "d": "2/2014"}, {"body": "hmm interesting definitely want preserve whitespace though", "d": "2/2014"}, {"body": "also clarification plea", "d": "2/2014"}, {"body": "even sure run componentwillmount", "d": "2/2014"}, {"body": "changed new problem", "d": "2/2014"}, {"body": "new problem", "d": "2/2014"}, {"body": "clarify wrongly trigger browser server without dom see rendercomponenttostring mountcomponent gettransactionwrappers native components define may error stringified browser work correctly rendered server side", "d": "2/2014"}, {"body": "internal diff fixes", "d": "2/2014"}, {"body": "give example bug", "d": "2/2014"}, {"body": "respectfully say meh generally nt agree overriding builtins would love hear bugs encountered", "d": "2/2014"}, {"body": "anytime call anything render uses may break server rendering make interactions behave strangely bug instagram read rng clock reactive system since code may rerun time", "d": "2/2014"}, {"body": "petehunt would deal information relative current time ie blog post x hours old person x years days old message received x seconds ago", "d": "2/2014"}, {"body": "agreed think far common guys want least tip entry lol", "d": "2/2014"}, {"body": "actually sure made separate going comment pr", "d": "2/2014"}, {"body": "objects nt function iterate object like", "d": "2/2014"}, {"body": "would help react map function converted way underscore way nt convert nested elements", "d": "2/2014"}, {"body": "react nt provide map function part javascript standard provided browser", "d": "2/2014"}, {"body": "ah okay thought may case would useful though thanks info", "d": "2/2014"}, {"body": "wait silly", "d": "2/2014"}, {"body": "would nice rather auto prefixing css hacks guys provide consistent dom vm consistent css rules would awesome", "d": "2/2014"}, {"body": "work see list supported attributes", "d": "2/2014"}, {"body": "oh capitalize type though little annoying", "d": "2/2014"}, {"body": "like contexts explicitly designed used plain js objects get merged contexttypes childcontexttypes similarly expected plain objects inclined wontfix leave others used contexts course use whatever objects want values within context object also note api contexts experimental may change time", "d": "2/2014"}, {"body": "moves use hasownproperty see perhaps separate set merge functions could used would look enumerable properties could even pooled variants heavy use", "d": "2/2014"}, {"body": "might want invariant children", "d": "2/2014"}, {"body": "ok solution return work renders something like way always return node even guys think", "d": "2/2014"}, {"body": "chenglou little weird api would like becomes reality sounds good", "d": "2/2014"}, {"body": "actually see master srcdoc nt", "d": "2/2014"}, {"body": "want add going cut soon like whenever happens time also backportable one", "d": "2/2014"}, {"body": "beat thanks", "d": "2/2014"}, {"body": "thechriswalker sorry nt sure planning", "d": "2/2014"}, {"body": "oops fix", "d": "2/2014"}, {"body": "would nice sure without changing code nt care much makes testing bit convenient maybe disable sourcemaps defineproperty nt exist", "d": "2/2014"}, {"body": "yeah disable source maps browsers cause problems think valuable modern browsers keep possible", "d": "2/2014"}, {"body": "blocklevel elements obvious could ignore whitespace text nodes without much problem inline element though spacing could change appearance tempted warn still require", "d": "2/2014"}, {"body": "cc petehunt", "d": "2/2014"}, {"body": "need change use", "d": "2/2014"}, {"body": "related", "d": "2/2014"}, {"body": "ah yes closing one", "d": "2/2014"}, {"body": "see", "d": "2/2014"}, {"body": "thing thought reacterrorutils", "d": "2/2014"}, {"body": "guard function know one linked question", "d": "2/2014"}, {"body": "seems like misunderstood works first internal identifier used asks dom element giving string nt anything second docs stated pass container node mounted react component container really simple nt play either reselect element keep reference", "d": "2/2014"}, {"body": "really root container rather trying remove manually simply modify owner component render method render node anymore", "d": "2/2014"}, {"body": "ok target selects clicked element wont remove however works put reference element rendering reusing initial variable stored element used also returns false consoles one selected vm", "d": "2/2014"}, {"body": "gives dom node component like said need call unmount wrapper element component aside like plievone said generally nt unmounting stuff way example might better suited situation jsx reactdom var app reactcreateclass getinitialstate function return displaymessage true handleclick function thissetstate displaymessage false render function var message thisstatedisplaymessage message hi return reactrendercomponent whateverwrapper use sparingly react way render whatever based component props state render arbitrary modify since everything harder track otherwise", "d": "2/2014"}, {"body": "ok might better solution situation however still curious selector work necessarily remove reference dom object note different selectors might point different elements far know type last example would hide reference whole div instead message", "d": "2/2014"}, {"body": "make parent hide instead trying hide gives dom object", "d": "2/2014"}, {"body": "specifically important maintainability able component hierarchy clearly define visible screen parent component displays confusing remove dom looking parent render method expect exist hand amp amp clearly see included presumably also see change certain cases parent might want show confirmation box reason honoring child request gassorr make sense", "d": "2/2014"}, {"body": "currently react requires tbody work properly found pull request open warn common error", "d": "2/2014"}, {"body": "awesome", "d": "2/2014"}, {"body": "checking seem break doctype well", "d": "2/2014"}, {"body": "jsx html want look html jsx compiler wo nt able generate doctypes conditional comments react technically impossible design want functionality like might consider creating script addon htmljsx generate javascript jsx equivalent", "d": "2/2014"}, {"body": "true sucks people want fullpage server rendering think claim support fullpage server rendering least support doctype", "d": "2/2014"}, {"body": "see good reason leaving portions html spec ended adding branch reactappmiddleware changes allow pulling static html template initially rendering components results see example used repo see serverjs", "d": "2/2014"}, {"body": "petehunt agree also think really practical render full pages inside react", "d": "2/2014"}, {"body": "think good reason react used many client side library therefore kept light possible perhaps could extension made implements rest spec could mixed server side client nt need render stuff like doctype server", "d": "2/2014"}, {"body": "guess could use reactdominjection modify jsx transform read", "d": "2/2014"}, {"body": "natew deal void tags like right selfclose embedding would use tool like htmljsx transform html syntax jsx transformer understands", "d": "2/2014"}, {"body": "images working like problems played html jsx transformer thats react site currently nt needed yet personally document outlines supported tags nt checked also nt gotten deep things yet edit selfclosing yea always felt accustomed using anyway", "d": "2/2014"}, {"body": "second thought think may missed point adding something like would useful would little impact react code could probably done conditional comments inserting conditional comments using innerhtml might work sure updating work though nt think document issues seen htmljsx transformer strips tags strips tags tag content nt transformed namespaced attributes nt work issues css styles attribute casesensitivity another github issue since uses browser dom use jsdom nt use browser tags supported browsers work worked pretty well htmljsx transformer things like turn class classname style strings objects turn void tags selfclosing tags creating tools transform userprovided htmldata asis components make use", "d": "2/2014"}, {"body": "would like see jsx support html conditional comments things jhiswin described going implement jsx preprendering tool found could nt even write html comments doctype", "d": "2/2014"}, {"body": "sure html comments deal breaking use case conditional comments solution problems doctype prepended web server request handler static build system", "d": "2/2014"}, {"body": "prepending doctype easy conditional comments harder easiest way conditionally load ie shims short option write bunch js preshims browser detection fiddle webserver config may always access users still market difficult elevate html comments status js comments esprima fork", "d": "2/2014"}, {"body": "jeffmo", "d": "2/2014"}, {"body": "wyuenho another take could preprocessor like htmljsxlib turn x something like conditionalcomment add reactdomx view need preprocessor deal differences html jsx anyways", "d": "2/2014"}, {"body": "jhiswin better yet preprocess jsx hack work make sure spit right string called extra setup hassle tho also denies claim react designed easily rendered server", "d": "2/2014"}, {"body": "still think best jsx support many constructs possible fewer surprises", "d": "2/2014"}, {"body": "btw rendering server nt necessarily mean need able render full pages especially since browser support updating sketchy gone back forth whether want actually support reason could probably get comments core little work mostly cloning reacttextcomponent work comments figuring look id sure jsx transform sure prioritize relative things especially since worked around think pr would definitely considered", "d": "2/2014"}, {"body": "look weekend release schedule", "d": "2/2014"}, {"body": "sometime tuesday friday", "d": "2/2014"}, {"body": "rush", "d": "2/2014"}, {"body": "comments interesting typical setup number row without closing tag sure syntax tricks build root level component opening tags conditionals", "d": "2/2014"}, {"body": "headsup bunch bugs comments particular think get merged get lost iirc nt problem serverrendering may mess clientside etc", "d": "2/2014"}, {"body": "make sure using polyfills described", "d": "2/2014"}, {"body": "spicyj thanks tip however nt seem make difference updated gist", "d": "2/2014"}, {"body": "possible jsxtransformer nt work old android react version work better", "d": "2/2014"}, {"body": "spicyj something going gist get idea play tomorrow helpful thanks", "d": "2/2014"}, {"body": "fwiw would strongly suggest precompiling jsx js sending browser", "d": "2/2014"}, {"body": "spicyj bug new adding document fragments come slight cost probably significant context", "d": "2/2014"}, {"body": "fixed cc jnetterf", "d": "2/2014"}, {"body": "seems ie example clears dom nodes whole subtree zero also null old component instance still attached child container element replace whole tree innerhtml call dom elements including rootnode detached wo nt anymore detached old container dom node usual browsers traversal root node impossible causes return false used processing old component dom node old container elements detached behavior starts differ error happens browsers perhaps old component instance runs happily detached container dom element without knowing problem might something one could get better view problem enable helpful warning", "d": "2/2014"}, {"body": "curious called many times query dom", "d": "2/2014"}, {"body": "yeah queries dom time", "d": "2/2014"}, {"body": "sure technically acceptable use case child might actually want misleadingly named string display text nothing event coincidentally called detect put though", "d": "2/2014"}, {"body": "well certainly complain dom events dom elements get similar error tags", "d": "2/2014"}, {"body": "send state one component another method parameter like onclick thispropshandle thisstate", "d": "2/2014"}, {"body": "let try keep github issues react support forum google groups stack overflow better suited answer question though yes would pull call another function binding render adds", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "thanks reporting dupe", "d": "2/2014"}, {"body": "also turns unintentional update website making use code master instead release fixed website work", "d": "2/2014"}, {"body": "send state one component another method parameter like onclick thispropshandle thisstate", "d": "2/2014"}, {"body": "sounds like bug", "d": "2/2014"}, {"body": "cc sebmarkbage jordwalke", "d": "2/2014"}, {"body": "could expand bit rationale nt consider key synonymous identity see key encapsulates identity child however since could multiple instances user may also encapsulate positional information addition rarely ever see use case identity part child could expand use case note key hack also used top level feature hacked simply wrapping concerned two ways general future direction moving even responsibility updates parent eg parent needs reason update child gets handled gets placed may affect siblings also bring interesting point state inner child able cause child unmount nt think able may break assumptions parent love see real use case", "d": "2/2014"}, {"body": "sebmarkbage became little longer hoped think makes sense nt consider key synonymous identity solution efficiently reconciling children key really mapping keys collection rendered components rendered list visual mirror map objects key removed component removed one moved one added component key identifies specific key collection data associated key key function data simply often convenient solution guarantee consider collection non unique database objects rendered reconciling keyless component optimization heuristic guaranteed correct take example rendering single component user selects image rendered first selects video component remounted different component classes however user picks two different files type component explicitly required support changing content explicitly support internally resetting state focus uncontrolled dom nodes break although likely nonproblematic ways rather allow simply exclaim imagevideo overrule implicit heuristic sure parent provide key nt believe concern child really knows supports also guaranteed simple key equals filename could potentially opaque object far parent concerned really boils fact heuristic fact false would expect also allowed false true simply class thus ignoring effect properties far real usecases go still nt put react production yet currently breaks swfplugin unless explicitly add support think also makes sense theoretically especially thirdparty integration reusable components happens due onetomanyunique data objects applications rarely run issue effects may negligible focus remaining field previous animation still playing nt make right could see lot reusable components falling trap explicitly support resetting avoid taking chances ps makes sense perhaps clear association props relevant", "d": "2/2014"}, {"body": "set unique values identity value favored key since clearly identifies reorders map eg dictionary key map used key list item often though list item generic item wrapper around value value represented different component therefore gets key based identity value checks currently available except based keys live parent makes strong contract parent decides something gets places something gets placed even component travels though multiple intermediates removed would example strange child allowed unmount therefore think concept unmountremount wrong abstraction see problem though true would nt want leak details internals value parent possibly breaks encapsulation currently component able handle change major changes props also affect state componentwillreceiveprops allowing internal state component reset albeit necessarily entire component tree however ideally entire tree resilient use key wish reset part tree would much comfortable api helps reset internal state flush children rather telling parent remount child never responsible lifecycle responsible children lifecycle something like something would nicer affords less control keys since ca nt applied subtree could accompanied easier way handle operations want mounts updates example", "d": "2/2014"}, {"body": "sidenote really wish components nt much boilerplate stigma associated components felt lightweight would nt much problem since would wrap function call", "d": "2/2014"}, {"body": "sebmarkbage slept see coming think words put good heuristic better heuristic still nt represent parents true intent child know parents intent ie act changing filename component could either represent parents intent changing viewed file reset image viewport parents intent open new tab new image image viewport reset parent example set even make intent explicit put like actually makes perfect sense childs decision say parent make explicit choice matter either give different reference new instance keep key understanding childs expected behavior changing file ie loosely speaking difference traditional agree general understanding actually totally agree think diverges people interpretationexpectation react certainly something definitely documented thoroughly case makes perfect sense", "d": "2/2014"}, {"body": "sebmarkbage sidenote would make sense able provide arrayobject key would cheaply serialized idea nt ie arbitrary separator rather also saves escape keys potentially unclean much edgecase", "d": "2/2014"}, {"body": "sebmarkbage would suggest use case", "d": "2/2014"}, {"body": "spicyj incrementing id fine anything else uniquely identifies switch guess boils need explicitly manage life cycle need give identifies instance", "d": "2/2014"}, {"body": "already work properly master moved props addition props always copied react never mutate passed", "d": "2/2014"}, {"body": "spicyj fix arrived released", "d": "2/2014"}, {"body": "nt include changes master time two changes interested", "d": "2/2014"}, {"body": "spicyj awesome much much cleaner another element makes react great", "d": "2/2014"}, {"body": "soon", "d": "2/2014"}, {"body": "petehunt says need change use srcbrowsergetreactrootelementincontainerjs", "d": "2/2014"}, {"body": "thumbsup actually still nontrivial number attributes nt currently supported mostly oversight", "d": "2/2014"}, {"body": "suppose assumed would treat arrays terminals underscore nt implement deep hard decisions like", "d": "2/2014"}, {"body": "one issue utility requires specify array resolution front apply arrays graph may want resolve different array conflicts differently tough think api makes sense use starting point pretty comprehensible thorough test case", "d": "2/2014"}, {"body": "addon coming help stay tuned", "d": "2/2014"}, {"body": "seen really great implementations allow resolving arrays arbitrarily quite smart array diff algos jsondiffpatch", "d": "2/2014"}, {"body": "petehunt truly addon solve multiple uses key", "d": "2/2014"}, {"body": "believe cover use case please reopen disagree", "d": "2/2014"}, {"body": "sebmarkbage particular reason currently reconcile transactions nest without issue see", "d": "2/2014"}, {"body": "thomasboyt still happening", "d": "2/2014"}, {"body": "benjamn updated yep js grunt requirejs running requirejs app requirejs task tracing dependencies librequirejsrequire typeerror undefined function file jscomponentsformsuseraddjs module tree jsapp jsrouter jsflowsclaimappview jsflowsclaimbankfirst jsx error typeerror undefined function file jscomponentsformsuseraddjs module tree jsapp jsrouter jsflowsclaimappview jsflowsclaimbankfirst jsx originalerror typeerror undefined function file jscomponentsformsuseraddjs requiremodules jsx jscomponentsformsuseradd moduletree jsx jsflowsclaimbankfirst jsflowsclaimappview jsrouter jsapp filename usersthomasboytvenmodevopsvenmowebviewsbasepubliclibjsxrequirejspluginjsjsxjs unfortunately still maintain branch", "d": "2/2014"}, {"body": "issue", "d": "2/2014"}, {"body": "think could probably get away calling server rendering thoughts anyone zpao jordwalke sebmarkbage spicyj", "d": "2/2014"}, {"body": "petehunt issue see breaks expectation ie explicitly prevent changes state ca nt change state actually useful set timers requests eventbus subscribing etc works equally well today sure longterm plan currently relies althought bit unique case accessing props nt feel clean perhaps", "d": "2/2014"}, {"body": "workaround moment", "d": "2/2014"}, {"body": "work around publish new react package update envify modify installed react package use different version", "d": "2/2014"}, {"body": "chance official version similar greater zero", "d": "2/2014"}, {"body": "nm started working least upstream version issue esprima must changed", "d": "2/2014"}, {"body": "mattkunze version use still improvement quite blocker", "d": "2/2014"}, {"body": "zpao modify installed react package install react", "d": "2/2014"}, {"body": "info version fixes problem", "d": "2/2014"}, {"body": "yeah working well sorry nt get back initial question traveling weekend think issue us envify dependency well since also depends esprima", "d": "2/2014"}, {"body": "closed", "d": "2/2014"}, {"body": "try used phantomjs plugin small shim implement missing functionality chromefirefox plugins", "d": "2/2014"}, {"body": "shim referring tried karma initially could nt get phantomjs play along nicely", "d": "2/2014"}, {"body": "include snippet make react work phantomjs", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"body": "related", "d": "2/2014"}, {"body": "yeah dupe", "d": "2/2014"}, {"body": "found also used react codebase well supported modern mobile browsers", "d": "2/2014"}, {"body": "canonical method reading input value nt touch dom directly would also convenient shimming events like might want people see different currently dom", "d": "2/2014"}, {"body": "happened", "d": "2/2014"}, {"body": "seems fixed current master", "d": "2/2014"}, {"body": "mostly fixed though seems extraneous whitespace surrounding js syranide know fixes", "d": "2/2014"}, {"body": "spicyj pr fix output weirdness yes", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "nt sound like closing", "d": "2/2014"}, {"body": "believe fixed", "d": "2/2014"}, {"body": "nt chance verify according om user issue still fixed tested recent react commit", "d": "2/2014"}, {"body": "well works", "d": "2/2014"}, {"body": "filed probably underlying cause even though symptoms changed", "d": "2/2014"}, {"body": "confirmed longer problem om w react master", "d": "2/2014"}, {"body": "swannodette works", "d": "2/2014"}, {"body": "spicyj actually work custom component cases work", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"body": "vjeux actually going leave open remember version update", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"body": "might interest", "d": "2/2014"}, {"body": "written combining react create reusable charting components example bar line charts examples bar chart stacked bar chart line chart", "d": "2/2014"}, {"body": "totally agree andreaferretti", "d": "2/2014"}, {"body": "chenglou fixed", "d": "2/2014"}, {"body": "eh guess personally dont feel api like solve problem sure explicit way retrieving child know one point often nt less ok api close swannodette fine", "d": "2/2014"}, {"body": "clarify idea still set function call get", "d": "2/2014"}, {"body": "onlychild used components soon become component descriptors still set prop function assume function call function would nt second argument component constructors though translates children property ie children position jsx swannodette need use second argument use explicit property named", "d": "2/2014"}, {"body": "currently using argument component constructors however easily switch via works fine closing one thanks", "d": "2/2014"}, {"body": "fingermark going add immutable deepupdate addon starting think could useful addition get right think syranide suggested provide helper google closure compiler think", "d": "2/2014"}, {"body": "petehunt would make sense use uptospeed issues closure compiler syntax already use work right", "d": "2/2014"}, {"body": "yes would equivalent today need want minify correctly would turn final invocation would", "d": "2/2014"}, {"body": "petehunt ah right right forgot supposed used another possibility get rid linkstate alltogether using much compact arbitrary use would require coresupport think would make sense basically deprecates use nt however helper function could make sense one solution depth redundancy everyone gets closure compiler support linkstate additionally could get rid weird mixin would still addon could even cook prefer nt bad bad idea ofc", "d": "2/2014"}, {"body": "ideally immutable setter ig uses opensourcing addon could combined build omcortexstyle cursors could used implement linkedstate", "d": "2/2014"}, {"body": "petehunt curious idea sound ok fundamentally broken way think would makes sense simpler uses alternative current linkstatemixin could easily cook nt bad idea ig better solution everyone write blog posts already", "d": "2/2014"}, {"body": "wondering people wtf object literal syntax since people nt care closure compat would personally prefer think kind api would fly npm official addon", "d": "2/2014"}, {"body": "petehunt wait release", "d": "2/2014"}, {"body": "makes nt triggered browser special keys", "d": "2/2014"}, {"body": "separated addon js reactaddons easy inclusion browserify projects previously getting invariant violations using parts app others appears fix lightweight fashion version corresponds react version files pulled", "d": "2/2014"}, {"body": "mhart pass array something broken remember worked old react", "d": "2/2014"}, {"body": "steida specify broken", "d": "2/2014"}, {"body": "pass array children second arg see child array unique key prop pass array children var params nt see error message take look line works chang factorycall props concat children apply instead call helped", "d": "2/2014"}, {"body": "yeah intended behavior see thing array format often used situation often want pass persist across renders", "d": "2/2014"}, {"body": "oh bug feature know key property thank", "d": "2/2014"}, {"body": "chenglou saying pass array element property would thought would good still worked without ie passing array effect passing variable number arguments", "d": "2/2014"}, {"body": "hmmm friendly warning seems extreme completely legitimate use case way turn appears node console well completely spams server logs", "d": "2/2014"}, {"body": "heuristic typical use case variable number arguments always provide set number items eg nt need keys typically two slots children predictable update occur keys inferred however providing dynamic data set growsshrinks eg based data way react determine updates without keys never legitimate provide dynamic set without keys even always order instead waiting race condition screw issue warning based heuristic dynamically ca nt tell dynamic array static set always one never legitimate ignore warning always provide keys default heuristic helpful way avoid keys common case fairly safely infer also convenient way provide keys based property names object", "d": "2/2014"}, {"body": "note even dynamic set always order still provide index key explicitly declares fine interpretation state gets preserved based order list rather persistent identity item keeps safe heuristic would ever need change almost communicates considered problem tracking changes set", "d": "2/2014"}, {"body": "ok clarifying chenglou said incorrect legit case think general point issue error messages could bit nicer probably stands check render method undefined helpful", "d": "2/2014"}, {"body": "scratch said meant legit works", "d": "2/2014"}, {"body": "think key pun intended debugging warnings highlight react developer tools could add feature way enough context backtrack component ultimately caused problem unfortunately lacking displayname property likely less context react developer tools highly recommend manually adding displayname components nt use jsx help debugging", "d": "2/2014"}, {"body": "heuristic pattern seems heuristic case code perfect valid still see child array unique key prop check render method undefined using arrays childrens render function return thisheader thisp content sun feb pm sebastian markb\u00e5ge wrote think key pun intended debugging warnings highlight react developer tools could add feature way enough context backtrack component ultimately caused problem unfortunately lacking displayname property likely less context react developer tools highly recommend manually adding displayname components nt use jsx help debugging reply email directly view github", "d": "2/2014"}, {"body": "array issue displayname better wrapper around react like hyper nt get around polish hopefully point", "d": "2/2014"}, {"body": "since help work compiletojavascript languages frameworks typescript f funscript websharper", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "would cool support pointer events particularly regarding responsiveness modern ie ie mobile browsers hate add proprietary viewport tags css properties get rid infamous click delay instance update", "d": "2/2014"}, {"body": "thauburger edit internal diff coming making onclick work without delay", "d": "2/2014"}, {"body": "chenglou nt work right though believe", "d": "2/2014"}, {"body": "chenglou spicyj thanks update", "d": "2/2014"}, {"body": "spicyj one disable click delay something like suggested fastclickjs", "d": "2/2014"}, {"body": "sure best place love see blog post sample code", "d": "2/2014"}, {"body": "also cool context keydown like context hokeys keyboard driven apps", "d": "2/2014"}, {"body": "aetet sadly though operate assumption uswestern keyboard layouts unless willing avoid support also could easily make mixin spicyj petehunt specific pr simply exposing could useful leaving confines react like mixin could take care cleaning depending usecases guess could even although might end lot mixins depending size problem could even single mixin attaches events defined handlersmethods etc mixins could even implemented addon although kind feels like native implementation would nice", "d": "2/2014"}, {"body": "way get events really needed though whenever difference could exist react changes basically match spec", "d": "2/2014"}, {"body": "masklinn world difference comes practical usefulness though", "d": "2/2014"}, {"body": "basically match spec world difference comes practical usefulness though yes positive one behaviour react much useful dom event", "d": "2/2014"}, {"body": "need simple editor create contenteditable component basically target browser support normalize contenteditable better useful inaccessible due quirks weirdness poor crossbrowser compatibility full normalization would probably complex react core though", "d": "2/2014"}, {"body": "love see well reason brigand work simple richtext editor prose", "d": "2/2014"}, {"body": "edwardmsmith may work older browsers modern browsers use oninput callback like initial content edit sure use app state initial content make controlled component gets rerendered every time user cursor jump beginning text every keypress", "d": "2/2014"}, {"body": "fixed current master least", "d": "2/2014"}, {"body": "zpao sure custom dom nodes imported local scope jsx converts like react components work addition svg tags supported react eventually also custom tags needed legacy code proprietary systems tags never part react obvious alternative beside patching react use little tedious clean way expand supported dom nodes something like createdomcomponent", "d": "2/2014"}, {"body": "sverrejoh somebody works react saying merely exposing function nt add tags jsx list want able run code new tags converted need react jsx", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"title": "option", "body": "hi yall see guide instantiation options guide nt see guess little mistake name change transition effect however ca nt manage make enterleave instantiation options recognized tried since nt know change made source tried applying vtransition doc says css ca nt use veffect either needs transition registerd vueeffect nt use example simple jsfiddle bug brainfart", "num": "152", "d": "2/2014"}, {"title": "small bug", "body": "found bug accident actually binding method name vue throw error warning still work intended", "num": "151", "d": "2/2014"}, {"title": "allow simple prototype properties", "body": "would useful simple bound properties view prototype performance reasons example js var form vueextend var loginform formextend overlaps form prototype propery hidesuccessmessagetimeout case simple property copied prototypes", "num": "150", "d": "2/2014"}, {"title": "syntax sugar extending components", "body": "currently extend registered component thinking new syntax make easier maybe something like thoughts", "num": "149", "d": "2/2014"}, {"title": "hook called extended view", "body": "fiddle worked previous versions", "num": "148", "d": "2/2014"}, {"title": "option disable parsing mustachestyle directives", "body": "trying create hybrid application using means pages rendered serverside client parts converted dynamic views problem user example name string html rendered server html superman parse replace property view data course could use directive every node may contain unsafe content would convenient come kind option disable parsing mustachestyle directives think", "num": "147", "d": "2/2014"}, {"title": "creating subviews vue", "body": "confused quite long time since know mvvm developer based backbone backbone new views required remove subview disappears case picture would open clicking click open people build kind ui vue", "num": "146", "d": "2/2014"}, {"title": "srcqueuejs empty", "body": "looks strange", "num": "145", "d": "2/2014"}, {"title": "component within template sets listeners wrong element", "body": "example click listener set component element replaced taking listener", "num": "144", "d": "2/2014"}, {"title": "add mark safe filter translates mustache binding instead", "body": "would useful filter allows user mark mustache binding safe would become", "num": "143", "d": "2/2014"}, {"title": "give component access partial", "body": "think would useful give component access partial allow manipulated inserted component template", "num": "142", "d": "2/2014"}, {"title": "directives inside component templates binding early", "body": "example type field alert comes template uses directive set alert class appears binding prior getting data type undefined wrong class set", "num": "141", "d": "2/2014"}, {"title": "updating vue data array items", "body": "trying update array items vue data object tried using vmodel tried specifying handler specific assigning fromto neither one update look debugger method values evaluate would expect still nt seem update vm sure missed point", "num": "140", "d": "2/2014"}, {"title": "vue\u652f\u6301\u7684\u6d4f\u89c8\u5668\u8303\u56f4\u662f", "body": "chrome ff opera", "num": "139", "d": "2/2014"}, {"title": "paramattributes values interpolated", "body": "see", "num": "138", "d": "2/2014"}, {"title": "transitions skipped vtransition vrepeat", "body": "demo switch select firefox setting transitions skipped time better setting vue transitions still skipped time time chrome vue transitions skipped part displaying dom transitions demo seem affect", "num": "137", "d": "2/2014"}, {"title": "default value paramattributes options", "body": "option exists element default value think would allow easily define default options", "num": "136", "d": "2/2014"}, {"title": "regression delegation", "body": "using conjunction delegation mechanism fails run handler see seems regression introdouced", "num": "135", "d": "2/2014"}, {"title": "ready hook", "body": "fiddle", "num": "134", "d": "2/2014"}, {"title": "staggering animations", "body": "", "num": "133", "d": "2/2014"}, {"title": "vmodel nt work components", "body": "created component added vmodel select tag component use component try get value model value nt seems like way binding nt happen model component", "num": "132", "d": "2/2014"}, {"title": "attached", "body": "foo getting rendered cases attached callback never get called first case jsfiddle javascript var foo vueextend template foo attached function consolelog attached run var new vue template components foo foo appendto body var new foo appendto body", "num": "131", "d": "2/2014"}, {"title": "callback bound event object", "body": "js var vm new vue created function consolelog vm true current vm maybe event could passed second parameter", "num": "130", "d": "2/2014"}, {"title": "strange behavior vueextend components", "body": "creating two classes extending vue component name last defined component shadows previously defined component another class also shadowing component visible vue class", "num": "129", "d": "2/2014"}, {"title": "vtransition lock element vleave state", "body": "demo already listening change expression beginning transition event", "num": "127", "d": "2/2014"}, {"title": "make delegate vm root node default", "body": "repeated items except", "num": "126", "d": "2/2014"}, {"title": "option", "body": "seems better solution confusing likely removed next release", "num": "125", "d": "2/2014"}, {"title": "plugin shorthand syntax work browserify", "body": "browserify analyze static requires", "num": "124", "d": "2/2014"}, {"title": "extended components able plugins", "body": "", "num": "123", "d": "2/2014"}, {"title": "clarify directive documentation using literals directive html attribute", "body": "let say want pass string literal directive one two ways html message literal string show parameter directive method however need single quotes inside double quotes bit eyesore could way html message literal string available directive methods like way looks better potential confusing directive documentation needs good enough know interpret keypath string literal string expression needed additionally consequences performance otherwise abusing literal strings think questions addressed directives depth section documentation list directives api reference good job calling literal directives split list top page", "num": "122", "d": "2/2014"}, {"title": "wrap settimeout javascript transitions", "body": "", "num": "117", "d": "2/2014"}, {"title": "add css animation support vtransition", "body": "also staggering animations list items", "num": "116", "d": "2/2014"}, {"title": "appened dom nodes two way binding", "body": "first say excellent library created started port rather large enterprise sized application work vue far done extremely well reducing complexity code said wondering currently possible make two way data binding work appended dom nodes take fiddle example trying bind inserted input box firstname model mean dom elements must present vue setup bindings correctly perhaps better method going", "num": "115", "d": "2/2014"}, {"title": "vuejs server", "body": "would nt cool require vue nodejs use browserify reuse viewmodels", "num": "114", "d": "2/2014"}, {"title": "updating model callback propogate", "body": "updating model within vm callback see data model update update get reflected view see ready method timercomponent jsfiddle example", "num": "113", "d": "2/2014"}, {"title": "dispatch behavior", "body": "trying dispatch event grandchildren ready event works inside bar arrives foo nt ready function var self self dispatch hello foo setactive function index self dispatch hello bar self dataactive index", "num": "112", "d": "2/2014"}, {"title": "vhtml documentfragment dom node", "body": "seems assign documentfragment html node data attribute view update assign string value html node template updated ie vueobject dataelement works updates dom tree vueobject dataelement documentcreateelement div vieobject dataelement documentcreatedocumentfragment nt work vueobject dataelement documentcreateelement div innerhtml works something wrong seems inefficient transform documentfragment string back piece dom", "num": "111", "d": "2/2014"}, {"title": "onetime bindings", "body": "times need static template rendering without overhead setting observers currently experimental feature polymer polymer lands vue", "num": "110", "d": "2/2014"}, {"title": "input values deleted vmodel", "body": "following think result instead replacing value data reasonable without data less html new vue el body data two three great job btw", "num": "109", "d": "2/2014"}, {"title": "performance poor firefox", "body": "sure excited go alpha version browser seems firefox system amp slower chrome good selfoptimizing js faster something wrong like see another test firefox aurora someone else possible todomvc benchmark palemoon firefox fork vue ms backbone ms knockout ms ember ms angular ms react ms om ms ractive ms firefox aurora vue ms backbone ms knockout ms ember ms angular ms react ms om ms ractive ms chrome beta vue ms backbone ms knockout ms ember ms angular ms react ms om ms ractive ms vue ms backbone ms knockout ms ember ms angular ms react ms om ms ractive ms animating instances iterations ms results vue firefox fork firefox aurora cpu much higher amp seems sluggish chrome beta tia", "num": "108", "d": "2/2014"}, {"title": "inline data", "body": "mixed compilation literal directive intended simple inline data similar attributes nested paths expressions bindings literal strings anything complicated pass object parent vm alldigit values converted numbers values wrapped quotes escape commas eg", "num": "107", "d": "2/2014"}, {"title": "add outlet syntax templates", "body": "would allow components wrap existing html allow better composed", "num": "106", "d": "2/2014"}, {"title": "array diffing still runs transition unchanged elements", "body": "could wrong seems like transitions run elements array unchanged built commit css transition runs replace array objects previously array case example", "num": "105", "d": "2/2014"}, {"title": "allow created constructors add assets directives filters etc", "body": "gives bit flexibility code organization", "num": "104", "d": "2/2014"}, {"title": "instanciate component many times", "body": "hello thks beautifull framework question want instanciate component many times identify instance apply specific data regards", "num": "103", "d": "2/2014"}, {"title": "diff arrays vrepeat update", "body": "thoughts new array large overlap elements old array could save lot work", "num": "102", "d": "2/2014"}, {"title": "make loop objects also", "body": "internally object converted array object additional innumerable attribute data manipulation done manipulating array instead mapped back original object mostly way detect new property creation objects could avoided available tbd allow user access converted array", "num": "101", "d": "2/2014"}, {"title": "vrepeat destroys amp recreates items changes made array", "body": "vrepeat directive combined vcomponent component contains components using vrepeat short deeply nested dom element like tree view would parent gt child gt child etc seems hugely ineffective vrepeat destroys rebuilds views every time original array changes avoided either changing vrepeat directive avoiding issue together example thanks efforts", "num": "100", "d": "2/2014"}, {"title": "error", "body": "error installation latest version node version npm version", "num": "99", "d": "2/2014"}, {"title": "callback ca nt handle correct callback", "body": "always fire first element callback element retrun code wrong", "num": "98", "d": "2/2014"}, {"title": "image src attribute causes compilation", "body": "hello template like javascript gives error angular team issue resulted ngsrc directive nb problem might happen attribute see nghref well edit comes jsfiddle", "num": "97", "d": "2/2014"}, {"title": "general faq", "body": "use thread simple quick questions avoid cluttering issue list alternatively try vuejs irc channel freenode also read wiki faq first", "num": "96", "d": "2/2014"}, {"title": "binder currently blanking form elements load", "body": "default set values within form elements binding declared currently vue clear values regardless data scope happen reading current values assigning scope simple fix initially stop binder clearing values adding thislock value return modelupdate method sure consequences though thoughts", "num": "95", "d": "2/2014"}, {"title": "vmodel work", "body": "running using using either fails work completly although nt time figure scripts may something break able use vmodel even add simple myvuetags always returns first value even multiple values selected try see create minimal example broken behaviour", "num": "93", "d": "2/2014"}, {"title": "plugin interface spec", "body": "verbose version shorthand equivalent inside plugin function", "num": "88", "d": "2/2014"}, {"title": "add cspcompliant mode content security policy", "body": "might missing something obvious apologize advance expected work nt good reason", "num": "87", "d": "2/2014"}, {"title": "add truncate default filter", "body": "", "num": "86", "d": "2/2014"}, {"title": "allow ajax loading templates vpartial", "body": "also requires hook become asynchronous actually sure part vue starting feel like something framework like handled userland recommended practice prebundle everything using component", "num": "85", "d": "2/2014"}, {"title": "make vrepeat work array primitive values", "body": "wrap value object access value value", "num": "84", "d": "2/2014"}, {"title": "utilstotext stringify object", "body": "", "num": "83", "d": "2/2014"}, {"title": "", "body": "", "num": "82", "d": "2/2014"}, {"title": "throws error minified concatenated use strict script", "body": "vue part built website happens concatenate minify tested another script adds global scope minified vuejs script throws js exception part script assigns library undefined recreate try using using official umd factory pattern fixes remember correctly", "num": "81", "d": "2/2014"}, {"title": "ie nt allow", "body": "kinda annoying using inside style", "num": "80", "d": "2/2014"}, {"title": "rewrite lifecycle hook mechanism", "body": "use emitters internally user also listen events instance created", "num": "79", "d": "2/2014"}, {"title": "roadmap", "body": "core animation transition api internal improvements consolidate api future specs improve api make easier ship standalone reusable components build largerscale applications tooling chrome dev tools extension cspcompliant build see branch commonjsbased build setup browserify vueify webpack vueloader scoped css wip serverside rendering starter kit plugins please discuss plugin specific topics plugin respective repo general philosophy plugins light selfcontained importantly avoid reinventing wheel build top solid low level solutions mostly make vuefriendly vuetouch vueresource vuerouter wip vuevalidator community calling usercontributed examples tutorials open blog post submissions blog set", "num": "78", "d": "2/2014"}, {"title": "allow directives literal ie bound anything take attribute value string", "body": "would simplify internal directives", "num": "77", "d": "2/2014"}, {"title": "bug function removeclass", "body": "vuejs dev line removeclass funciton branch", "num": "76", "d": "2/2014"}, {"title": "vrepeat vm destroyed directly remove data corresponding array", "body": "", "num": "75", "d": "2/2014"}, {"title": "fix weird issue todomvc example", "body": "item checked complete page loads clear completed button bindings somehow skipped", "num": "74", "d": "2/2014"}, {"title": "remove need classlist polyfill", "body": "", "num": "73", "d": "2/2014"}, {"title": "docs update", "body": "x accessing repeated child vms x unescaped html x add section using event system compositionmd x remove classlist polyfill notice", "num": "72", "d": "2/2014"}, {"title": "change avoiding conflicts handlebar binding", "body": "dear xiaoyou looking mvvm work meteorjs recently found ngmeteor taking glance codes vue find explicit mentioning fix problem would like create project vmeteor maybe may suggest thank much", "num": "71", "d": "2/2014"}, {"title": "irc channel", "body": "hi thank amazing work project would think vuejs irc channel need help registering channel freenode handle want tell", "num": "69", "d": "2/2014"}, {"title": "accessing computed properties components mixed view model javascript", "body": "way access computed properties components mixed view model javascript docs show use directive access html javascript example jsfiddle illustrates type composition referring component created adding view model using components instantiation option want know right way access computed properties component view model javascript access directive used work using since computed field refer last item list may concepts correctly think cases would want get data component code instead markup", "num": "68", "d": "2/2014"}, {"title": "add triple mustache verbatim html", "body": "essentially sugar vhtml", "num": "67", "d": "2/2014"}, {"title": "computed properties vrepeat", "body": "possible use computed properties vrepeats far tell way tell item rendered computed property also tried adding function property data item nt working either example data items number text one number text two template computed propercolor function item return itemnumber blue black", "num": "66", "d": "2/2014"}, {"title": "form inputs repeating element updating computed properties expected array mutated", "body": "using add objects array hooked template element contains form inputs appears newlycreated input elements bound way input elements created based initial data object provided instantiating vue instance newlycreated input elements correct value called typing nt cause property computed array change commit functional test demonstrates strangely test passes run casper fails browser tried safari chrome firefox", "num": "65", "d": "2/2014"}, {"title": "compatible shim", "body": "much issue question vuejs still functional shim used", "num": "64", "d": "2/2014"}, {"title": "misspelling getting started page", "body": "getting started page word actual misspelled actuall", "num": "63", "d": "2/2014"}, {"body": "nt forget register effect via vueeffect", "d": "2/2014"}, {"body": "javascript transitions renamed effects better differentiate css transitions css animations javascript effects need pass options name need specify effect html greet fixed fiddle docs", "d": "2/2014"}, {"body": "sure bug since actually working since data properties methods exposed vm instance avoid anyway", "d": "2/2014"}, {"body": "currently access extra properties bit verbose dev branch added access easily", "d": "2/2014"}, {"body": "nt want add custom properties passed view prototype", "d": "2/2014"}, {"body": "blacklist options nt get mixed also vm instances proxy access could potentially cause naming collisions conceptually anything vm instance nt start either data property bindable method", "d": "2/2014"}, {"body": "roger thanks", "d": "2/2014"}, {"body": "could also return created component guess could source confusion another approach explicit js vuecomponent form vuecomponent loginform extends form becomes horrible idea var form vueextend var loginform vueextend extends form", "d": "2/2014"}, {"body": "know option would confusing haha nt mention", "d": "2/2014"}, {"body": "maybe return new created objects static methods chaining necessary case imho", "d": "2/2014"}, {"body": "c style extend vue component form component loginform form loginform extends form", "d": "2/2014"}, {"body": "ok mistake returns new component written like", "d": "2/2014"}, {"body": "yeah registration methods return chaining however considering convenience syntax extending components see", "d": "2/2014"}, {"body": "would even useful could change delimiters underscore template example javascript templatesettings interpolate g var template template hello name template name mustache gt hello mustache", "d": "2/2014"}, {"body": "changing delimeters wo nt help case user still able call say break everything parse attributestyle directives user chance break anything", "d": "2/2014"}, {"body": "ahh sorry nt vigilant enough", "d": "2/2014"}, {"body": "hackish way monkey patching", "d": "2/2014"}, {"body": "bpierre yes great mustachestyle bindings also used node attributes example docs html hello name course strange user contain mustaches lol attribute example contain anything", "d": "2/2014"}, {"body": "true certainly break future release", "d": "2/2014"}, {"body": "new option", "d": "2/2014"}, {"body": "wow incredible speed man becoming framework dream thanks", "d": "2/2014"}, {"body": "want totally something similar vuejs necessary super heavy views want explicitly control lifecycle sub view better memory management cases compose everything together use display based view state", "d": "2/2014"}, {"body": "would nice could option tell vue subvue child therefore able dispatch messages catch broadcasted messages hierarchy vms", "d": "2/2014"}, {"body": "marfalkov good point internal compiler option occurred make public option example could get benefits access scope event communication etc", "d": "2/2014"}, {"body": "great", "d": "2/2014"}, {"body": "accidentally checked test file thanks noting", "d": "2/2014"}, {"body": "fixed thanks", "d": "2/2014"}, {"body": "triple mustaches see", "d": "2/2014"}, {"body": "bpierre said", "d": "2/2014"}, {"body": "ooops thanks", "d": "2/2014"}, {"body": "able access hook", "d": "2/2014"}, {"body": "example", "d": "2/2014"}, {"body": "fun", "d": "2/2014"}, {"body": "marfalkov nice one", "d": "2/2014"}, {"body": "works use directive bind function able get value available thisvalue", "d": "2/2014"}, {"body": "set called creating custom directive nt vue treat literal directive basically need access binding values even though called case also use html", "d": "2/2014"}, {"body": "definitely weird also available update hook defined useful think implicit literal directive udpate hook may little nonobvious", "d": "2/2014"}, {"body": "right make explicit options", "d": "2/2014"}, {"body": "also get initial value argument available", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "would think property containing string", "d": "2/2014"}, {"body": "might boolean options future limiting everything single string type feels less flexible", "d": "2/2014"}, {"body": "ok thanks", "d": "2/2014"}, {"body": "meant post faq apologies", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "intended simple inline data attribute value interpreted raw values instead binding child component already access parent data directly template actually share data use", "d": "2/2014"}, {"body": "see built better example see missed obvious solution case basically component like bind data property parent vm parent vm already property directly directly use ideally like bind component app way bind input value property first version base demo working using sync two properties events sake completeness finally version quick amp dirty directive order synchronize two properties without adding code like last one structures kept separated like think", "d": "2/2014"}, {"body": "thanks detailed examples totally make sense think something like could indeed useful also makes think lock mechanism prevent values circular triggering", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "thanks man removed forced layout tested single element worked browsers seems without force layout triggering becomes inconsistent revert change", "d": "2/2014"}, {"body": "ah stupid still need delegation", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "updated fiddle", "d": "2/2014"}, {"body": "jquery selector looks element dom element appended dom yet give jquery component element search context would work", "d": "2/2014"}, {"body": "thanks wrong way eg el baz jquery getting rusty", "d": "2/2014"}, {"body": "achievable via", "d": "2/2014"}, {"body": "could make fiddle", "d": "2/2014"}, {"body": "hellojosh component view model want access data parent either need combine directive go combine directive supply object parent view model latter probably bit cleaner example section documentation also shows", "d": "2/2014"}, {"body": "obsoleter thanks help duckbox fiddle shows something simple trying", "d": "2/2014"}, {"body": "hellojosh looks like bug fixed sometime works fiddle", "d": "2/2014"}, {"body": "hellojosh seems working latest version side note concept components vuejs instance nontrivial data logic view states use case seems partial would simpler", "d": "2/2014"}, {"body": "something like feels complicated javascript var foo vueextend template foo ready function var self attached function selfonattached methods onattached function consolelog know attached attached function consolelog attached run var new vue template components foo foo attached function broadcast attached appendto body var new foo appendto body", "d": "2/2014"}, {"body": "see fiddle attached gets called console logs attached", "d": "2/2014"}, {"body": "fiddle", "d": "2/2014"}, {"body": "see gets called second case", "d": "2/2014"}, {"body": "ahhhhhh ffs marfalkov apologize get saying explicitly setting child component attach event fire error design sure use created method instead attached get outcome looking", "d": "2/2014"}, {"body": "duckbox problem unfortunately use attached callback big mixed jqueryknockout datagrid build vue attached view", "d": "2/2014"}, {"body": "wondering use attached callback parent attached children", "d": "2/2014"}, {"body": "would clean keep relevant code module attached callback instead parent attached callback dynamically creating components based events", "d": "2/2014"}, {"body": "right one component needs attached callback imagine components attached callbacks would messy", "d": "2/2014"}, {"body": "true think solution broadcasting top level vm address next release", "d": "2/2014"}, {"body": "awesome", "d": "2/2014"}, {"body": "thought seems problematic recursively fire attacheddetached child components two events meant indicate component element relationship parentnode whether inside dom consistent behavior native dom mutation events use case something like", "d": "2/2014"}, {"body": "live broadcast one case would good could let say afterrendered callback", "d": "2/2014"}, {"body": "hook fired compilation done note component compiledrendered attached dom", "d": "2/2014"}, {"body": "fired view rendered nt", "d": "2/2014"}, {"body": "nope saying compilation less thing rendering hook fired means data bindings processed element stabilized", "d": "2/2014"}, {"body": "strange tried ready nt work case look thanks", "d": "2/2014"}, {"body": "provide fiddle illustrating problem ran would great closing", "d": "2/2014"}, {"body": "since using way nt really bother good point javascript var vm new vue created function var self consolelog self vm true", "d": "2/2014"}, {"body": "yes moment wondering purpose", "d": "2/2014"}, {"body": "amp", "d": "2/2014"}, {"body": "give example", "d": "2/2014"}, {"body": "using way", "d": "2/2014"}, {"body": "component use different methods pesca scarta", "d": "2/2014"}, {"body": "declare attributes components ca nt use whatever user writes attribute automatically", "d": "2/2014"}, {"body": "blacklist native attributes depending element type cumbersome whitelist approach explicit safer", "d": "2/2014"}, {"body": "think dataattributes bit misleading potential confusion datatset api perhaps bindattributes example seems odd whereas need rename binding key instance well dataqty seems messy", "d": "2/2014"}, {"body": "yes bindattributes also sounds misleading really binding starting value maybe", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "paramattributes feb pierre bertet notifications githubcom wrote elementattributes htmlattributes tagattributes domattributes attributes reply email directly view github", "d": "2/2014"}, {"body": "ah misthought whole binding part initial data follow absolutely paramattributes sounds perfect describe", "d": "2/2014"}, {"body": "dead simple attr", "d": "2/2014"}, {"body": "marfalkov already option hash attribute keyvalues added element", "d": "2/2014"}, {"body": "exact opposite maybe names could reflect something like", "d": "2/2014"}, {"body": "setattributes getattributes sounds good", "d": "2/2014"}, {"body": "nt think logical counterparts part element options component configuration option", "d": "2/2014"}, {"body": "makes sense", "d": "2/2014"}, {"body": "hmmm guess shorthand componentbased projects clarify spec", "d": "2/2014"}, {"body": "vuerequire works already called static way really ugly solution could require modules relevant plugins", "d": "2/2014"}, {"body": "yeah actually one reasons use component browserify let think", "d": "2/2014"}, {"body": "maybe dedicated plugin api could provided documented instead exposing internal components", "d": "2/2014"}, {"body": "could try commonjseverywhere", "d": "2/2014"}, {"body": "actually thinking shipping built versions npm instead would allow get rid emitter hack also split observer package", "d": "2/2014"}, {"body": "scrap browserify attempts parse requires inside throws compile time error", "d": "2/2014"}, {"body": "yup browserify attempts parse bundle making dynamic paths impossible likes utils static named module without define list modules packagejson etc fri feb pm evan notifications githubcom wrote scrap browserify attempts parse requires inside throws compile time error reply email directly view github", "d": "2/2014"}, {"body": "modules exposed plugins theoretically need plugins mess parts anyway docs updated together next release plugin spec mature", "d": "2/2014"}, {"body": "think may also true requirejs setup use almond shim", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "agreed option create directives implementation like since literal directives need data binding capabilities nt need method directive definition provide method data binding work skipped essentially makes literal directive using bad consequences fact avoid using quotes literal values makes directive expression requires lot internal work evaluate clarify docs better thanks", "d": "2/2014"}, {"body": "also documented", "d": "2/2014"}, {"body": "moving vuejsorg repo", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "sure approaching built comprehensive css animation library optimized animations use take find keep great work", "d": "2/2014"}, {"body": "thanks brandon vue animation transition support provide hooks custom css would provide flexibility actual css code developers wo nt bundled vue core would cool collection css animations used vue box", "d": "2/2014"}, {"body": "amp", "d": "2/2014"}, {"body": "hi brandon happy know vue working regarding question ideally want include much possible template initialization possible compile appended nodes really needed fiddle add append element however example remove input node associated bindings autodestroyed remain memory lot stuck like could cause memory leaks application think better solution including input template showhide", "d": "2/2014"}, {"body": "idiomatic implementation moment could result verbosity template complexity js code greatly reduced next version vue make able iterate object could help multiple fields need functionality", "d": "2/2014"}, {"body": "fun example breaking functionality component directive vuejs awesome", "d": "2/2014"}, {"body": "really nice obsoleter great use components", "d": "2/2014"}, {"body": "obsoleter use filters", "d": "2/2014"}, {"body": "thanks fast reply excellent examples", "d": "2/2014"}, {"body": "filipelinhares awesome thank must missed docs", "d": "2/2014"}, {"body": "definitely something interested could also used prerendering page server side initial speed seo way vue built assumes presence dom requires full dom simulation node like jsdom quite heavy probably mess around see much work would time moment focusing consolidating core api plugin spec", "d": "2/2014"}, {"body": "one thoughts came roadmap instead jsdom ran runtime would task would execute task dev compile manifest object data intercepted dom output bootstrap sorts initial load obviously would require vue plugin read manifest contents bind data prerendered markup", "d": "2/2014"}, {"body": "mistake changed way counting seconds nt fix filter nothing broken", "d": "2/2014"}, {"body": "listening events", "d": "2/2014"}, {"body": "root rootvm hello function msg consolelog someone said hello msg", "d": "2/2014"}, {"body": "rootvm compiled children compiled time attached listener ready hooks already fired order capture children ready event attach listener parent ready hook", "d": "2/2014"}, {"body": "nt seem work fireing inside grandready childready rootready", "d": "2/2014"}, {"body": "oops sorry meant parent created hook", "d": "2/2014"}, {"body": "yeahh thank", "d": "2/2014"}, {"body": "things hold json compliant values strings work raw nodes wo nt intended transform strings html situation seems looking partials register partial inside templates use partials converted documentfragments cached would efficient", "d": "2/2014"}, {"body": "aye right partials work fine fast went ballmer peak", "d": "2/2014"}, {"body": "thanks fixed initial data undefined inline value used", "d": "2/2014"}, {"body": "honestly sure causing perf difference vue firefox likely dom layoutrendering javascript optimization would nt say faster ff wrong far know pretty performant browser also note benchmark specific series operations reflect every aspect browserframework performance", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "thanks noticing fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "hi guide doc also always pass additional data manually instantiate components", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "hi rudasn top level array changes vuejs nt rebuild whole list items example viewmodel associated removed piece data destroyed similarly add new elements array existing viewmodels unaffected index updated necessary amount work done vue linearly proportional amount changes data let know understood concerns correctly", "d": "2/2014"}, {"body": "thanks evan something wrong code trying loop object first converting array reset array property one objects changes order property ordered dictionary words resetting array causes rebuild everything apparently tried creating directive loop objects work directives eg component also defined thoughts especially appreciated feb evan notifications githubcom wrote hi rudasn top level array changes vuejs nt rebuild whole list items example arr pop viewmodel associated removed piece data destroyed similarly add new elements array existing viewmodels unaffected index updated necessary amount work done vue linearly proportional amount changes data reply email directly view github", "d": "2/2014"}, {"body": "give example data described think mapping object array use need serialize data map array back object data format also considering adding directive looping objects stay tuned", "d": "2/2014"}, {"body": "thanks phone atm ca nt provide data example object keys id child objects value child object child objects order property defines order display one object loop directive would greatly appreciated feb evan notifications githubcom wrote give example data described think mapping object array use vrepeat need serialize data map array back object data format also considering adding directive looping objects stay tuned reply email directly view github", "d": "2/2014"}, {"body": "ago might cause working though keep getting error", "d": "2/2014"}, {"body": "fixed think kind npm cache error", "d": "2/2014"}, {"body": "sorry found solution needed", "d": "2/2014"}, {"body": "add help event listeners specify methods without duplicate piece data", "d": "2/2014"}, {"body": "mizchi one thing note json compliant best practice exclude functions data objects putting functions always preferred want use custom vue constructor repeated items combine guide", "d": "2/2014"}, {"body": "use situation", "d": "2/2014"}, {"body": "great asked faq", "d": "2/2014"}, {"body": "hi started toying vuejs ran issue nesting data collections using repeat directives displaying data working fine however element subordinate vms destroyed bound data currently removed well hook afterdestroy listener example try clicking itemsremove n buttons unintended behaviour better approach use", "d": "2/2014"}, {"body": "interesting nt considered type usage maybe remove behavior", "d": "2/2014"}, {"body": "hey evan first think great job vue case pojos composability difference maker also speed ofc question done full time like angular guys eg google sponsored thanks", "d": "2/2014"}, {"body": "dyu thanks project moment started using new projects creative lab potential dedicate substantial part fulltime bandwidth future", "d": "2/2014"}, {"body": "think favour handle related data explicitly necessary thanks looking really enjoy using vue far", "d": "2/2014"}, {"body": "cmenke thanks thinking think suggestion makes sense originally added hook wanted allow users manually destroy repeated instances expressions seen example believe problematic general bad practice example manually destroying repeated vms proper way simply manipulate source data array latest patch reverted behavior", "d": "2/2014"}, {"body": "say words different better angular suited", "d": "2/2014"}, {"body": "charuru reasons use vue angular although might apply everyone vuejs flexible less opinionated solution allows structure app way want instead forced everything angular way interface layer use light feature pages instead full blown spa gives bigger room mix match libraries probably important distinction vuejs much simpler angular general learn almost everything really fast get productive vuejs better performance nt use dirty checking vuejs clearer separation directives components directives meant encapsulate dom manipulations components stand selfcontained unit view data logic angular lot confusion two also note vuejs relatively young project angular battleproven larger community want something large serious production app might want pick angular vuejs supports angular suppots", "d": "2/2014"}, {"body": "post would great wiki faq btw angular still beta att", "d": "2/2014"}, {"body": "hi evan week evaluating frontend framework use arrived angular react found must say really like clear style vuejs understand angular problem gets really slow creates lot watchers example ngrepeat found nice article says conventional wisdom angularjs says keep number databound elements wonder vuejs similar problem scaling databound elements fact vuejs nt use dirty checking winning factor angularjs use dirty checking", "d": "2/2014"}, {"body": "yjeroen angular gets slow lot watchers every time anything scope changes watchers need reevaluated vuejs nt suffer uses event based observing mechanism changes trigger independently unless explicit dependency relationships believe angular uses dirty checking support vuejs able get plain object syntax using features nt support hand dirty checking also benefit original data objects modified anyway vuejs converts object properties gettersetters", "d": "2/2014"}, {"body": "thank elaborate response disadvantage using change listeners changing original object something developer needs aware disadvantage taken care vuejs", "d": "2/2014"}, {"body": "yjeroen minor caveats observed objects see bunch gettersetters first define gettersetters data objects nt much problem data objects expected obtained plain json vuejs provides computed properties vuejs sometimes attach hidden properties data objects order observe developer accidentally overwrite properties would break rare run situations easy avoid nt set anything start data objects apart caveats use vuejs observed objects like normal objects loops work intended time nt even need worry", "d": "2/2014"}, {"body": "trying update array items vue data object tried using vmodel tried specifying handler specific assigning fromto neither one update look debugger method values evaluate would expect still nt seem update vm sure missed point", "d": "2/2014"}, {"body": "adamgd sorry one gotchas interpolate changes happen inside array elements propagate array data fact changed binding notified recommended log stringified data console instead outputting", "d": "2/2014"}, {"body": "adamgd example fiddle", "d": "2/2014"}, {"body": "hi evan wondering anything horizon release robust working example vuecomponent saw roadmap discussion routingpagejs curious anyone sample project incorporating routing page transitions etc using component really like way vue structured much angular trouble figuring structure app", "d": "2/2014"}, {"body": "mikegioia yes definitely part plan first step probably module probably watch keep updated", "d": "2/2014"}, {"body": "brandonpierce thank tested another fiddle dom mirroring data rather interpolation understand quirk interpolation rather something fundamental change watching initially thought response gotcha documented somewhere", "d": "2/2014"}, {"body": "ok thanks", "d": "2/2014"}, {"body": "adamgd documented interpolating objects pretty recent addition might changes later", "d": "2/2014"}, {"body": "recommended use inline default using instead set default value viewmodel option data considered source truth purpose reflect current state data", "d": "2/2014"}, {"body": "thanks reporting fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "questions plugin interface usage param according mainjs example correct assume available use plugin choice returning function object containing keep design directives computed properties etc would like allow user configure plugin adding ideas idea configuration function issue solution disables usage shorthand idea add hook js myappjs var myplugin require myplugin would allow returns vueuse mypluginconfig foo bar configuration passed second param vueuse myplugin foo bar course directly called config vueuse myplugin vueuse myplugin global configuration mypluginconfig foo bar vueuse myplugin anothervueuse myplugin see last example still issue solution time called settings defined plugin object persist shared plugin instances solution could wrap magic javascript mypluginjs vueplugin ensures time config called new object created var vue require vue moduleexports vueplugin config function install function another problem could missing eg vue require detection code acceptable plugin interface really like second idea adds plugin concept think less concepts better also maybe missing super elegant solution already exists trying achieve sorry case think", "d": "2/2014"}, {"body": "thanks suggestions pierre original issue bit date require longer passed argument edited works expect exposes internal modules like etc allowing function convenience similar directive computed property apis configuration think need change implementation inside plugins plugins nt need options simply ignore options argument want plugins implemented without require vue easily mock vue test plugin", "d": "2/2014"}, {"body": "thanks answers", "d": "2/2014"}, {"body": "sure setup work example", "d": "2/2014"}, {"body": "figured source problem violates content security policy chrome app using exact error printed console refused evaluate string javascript unsafeeval allowed source script following content security policy directive defaultsrc self chromeextensionresource note scriptsrc explicitly set defaultsrc used fallback invalid expression metadata angularjs added ngcsp directive support apps extensions websites csp enabled believe default thoughts supporting something like", "d": "2/2014"}, {"body": "see think probably implemented optional plugin although sure time time soon could edit title csp specific keep open discussion thanks", "d": "2/2014"}, {"body": "able enable unsafeeval extension via manifestjson nt scriptsrc present defaults original secure settings granted enabling thing recommended get running solution cemented", "d": "2/2014"}, {"body": "chrome apps allowed relax csp google docs chrome extensions let relax default content security policy chrome apps", "d": "2/2014"}, {"body": "feross cripes thought extension good shout", "d": "2/2014"}, {"body": "one option seems avoid using anything simplest expressions parsed seems without use unfortunate", "d": "2/2014"}, {"body": "think csp support take quite time land meanwhile really want use vue chrome app could sandboxed architecture work ie running vue interface front communicate via message passing", "d": "2/2014"}, {"body": "sandbox approach could work keen adding additional complexity ie turning sync function calls property accesses async ones unfortunate chrome apps restrictive nt allow loosening csp meantime going use eventemitter hook events dom manually webtorrent nt think bad though csp support lands take another look using vuejs thanks", "d": "2/2014"}, {"body": "precompiling would another way approach see", "d": "2/2014"}, {"body": "good find feross", "d": "2/2014"}, {"body": "feross unfortunately essential vue current implementation data binding different handlebars uses also vue nt return static rendered string maintains live dom node really way precompile vue templates", "d": "2/2014"}, {"body": "fixed implementation really flexible enough leave userland", "d": "2/2014"}, {"body": "closing", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "resolved", "d": "2/2014"}, {"body": "yes thanks reporting caused build plugin fixed dev branch", "d": "2/2014"}, {"body": "seems fixed since", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "ah seems ie ignoring invalid inline css parsing html", "d": "2/2014"}, {"body": "ok see made tests looks like vstyle attribute tests results", "d": "2/2014"}, {"body": "exactly alas even still causing headache", "d": "2/2014"}, {"body": "reintroduced", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "awesome another vuerouter option tildeiorouterjs looks nice build things top", "d": "2/2014"}, {"body": "thanks suggestion feel tildeio implementation heavy size vue nt want enforce promises users", "d": "2/2014"}, {"body": "indeed sake completeness routerjs based lightweight", "d": "2/2014"}, {"body": "ah nice looks like valid choice", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "completely random would beneficial serverside compiler render relative vuejs view initial load first time speed seo etc sceanario vuejs would able read rendered markup establish state etc accompanied object rendered bootstrap something always wanted angular establish fully possible likes backbonehandlebars", "d": "2/2014"}, {"body": "something thinking currently react virtual dom probably mess jsdom see big effort would low priority unless someone wants work", "d": "2/2014"}, {"body": "would mind look future something like working degree would awesome", "d": "2/2014"}, {"body": "currently componentsdirectivesfilters registered global context accessible anyone local context accessible within scope current vue instance question bring expose reusable assets without cluttering global namespace example illustrate point fyi started reading vue mins ago shows great potential already possible happened miss done please disregard post thanks great work", "d": "2/2014"}, {"body": "bjornlll using vue module system eg component browserify assets simply module required needed general vue tries avoid imposing rules user organize hisher code somehow feel asset import functionality beyond scope vue", "d": "2/2014"}, {"body": "thanks replying good point much importing namespacing access particular component context would using vue together requirejs seen vue integrates commonjsamd loaders source assets require call points nt see avoid vue registering globally accessible context point import call would scope accessibility imported component within template scope said import call might solution example highlight point still wondering scope access registered component accessible within templates choosing read docs source", "d": "2/2014"}, {"body": "bjornlll", "d": "2/2014"}, {"body": "thanks could accomplish using function include privatedirectives requires patches modules privatedirectives var mycomponent vueextend directives include uivizgraph uilistablegrid filters components transitions partials", "d": "2/2014"}, {"body": "edited goals include preparations adopting future specs", "d": "2/2014"}, {"body": "typo please discuss plugin specific topics plguin repo address vue community", "d": "2/2014"}, {"body": "jiyinyiyong thanks fixed currently github community essentially also irc channel freenode vuejs although always active", "d": "2/2014"}, {"body": "another lightweight routing lib", "d": "2/2014"}, {"body": "using one vue", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "ohhh thanks good catch", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "hmm currently builtin way nt consider common use case also changing interpolation tags cause reusability issues components want use custom setup actually matter changing two regexps feel free fork adapt needs", "d": "2/2014"}, {"body": "sounds like good idea registered vuejs", "d": "2/2014"}, {"body": "active irc closing feel free nudge want moderate channel", "d": "2/2014"}, {"body": "thanks question overlook design update work returns list viewmodels associated array eg html", "d": "2/2014"}, {"body": "landed casper test coverage since nt checkin built files dev branches want try clone repo build otherwise probably merged master days", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "nt really understand trying achieve could please provide full example format code markdown put jsfiddle data objects must jsonstringifyable functions ignored", "d": "2/2014"}, {"body": "fiddle", "d": "2/2014"}, {"body": "hi dan use computed properties repeated items need give viewmodel constructors using details see guide another tricky thing fiddle attribute use mustache binding always get string value long property present button disabled even value empty string proper way deal write simple directive sets element property fixed example found", "d": "2/2014"}, {"body": "thanks updated fiddle docs great overall nt think would tried vue without nt really understand component part example useful", "d": "2/2014"}, {"body": "glad helps", "d": "2/2014"}, {"body": "thanks reporting fixed see commit message detailed explanation casper test case passes changed three fields event loop view updated next tick using latest values change field alone test fail modified test case account included commit", "d": "2/2014"}, {"body": "browsers already work since shims anything clone repo include shim see unit tests pass unfortunately work way shim objectdefineproperty plain javascript objects", "d": "2/2014"}, {"body": "thanks quick response project thinking using needs support ie sadly", "d": "2/2014"}, {"body": "fixed thanks", "d": "2/2014"}, {"body": "also fyi website repo would preferred open website related issueprs", "d": "2/2014"}, {"body": "landed", "d": "2/2014"}, {"body": "hold wait nightwatchjs release saucelab friendly version", "d": "2/2014"}, {"body": "looks like decent option works sauce labs cleaner syntax wd", "d": "2/2014"}, {"body": "original", "d": "2/2014"}, {"body": "duckbox think actual app", "d": "2/2014"}, {"body": "moved", "d": "2/2014"}, {"title": "backbone longer works w ender backbone set exports defined", "body": "use backbone module enderbuilt libraries backbone reference undefined instead pointing global assume valid reason omit situations case prevents backbone working ender module always exists modules part ender library nt get passed really need end unreachable context ender library", "num": "3031", "d": "2/2014"}, {"title": "backbone collection create work existing model wait set true", "body": "please checkout jsfiddle error thrown longer sets model problematic called server response problem introduced try make pr fix indeed bug", "num": "3028", "d": "2/2014"}, {"title": "feature remove item", "body": "calling modeldestroy model removed collection server returns status code accepted", "num": "3027", "d": "2/2014"}, {"title": "bower install issue", "body": "sure related backbone bower whenever trying upgrade getting following error", "num": "3022", "d": "2/2014"}, {"title": "success method triggered collection fetch params", "body": "hello new backbone strange problem issue pass params collection fetch never triggers success call back method without params triggers code never goes success call back remove data params goes success call back give alert message ps know another way attribute ca nt use coffee showphotolist projectid gt photolistsfetch data param projectid projectid success renderphotolist renderphotolist gt alert hellow render", "num": "3021", "d": "2/2014"}, {"title": "bb lodash requirejs", "body": "hi implement lodash new version bb amd wrapper exports backbone global scope requirejs without amd wrapper works good thnk", "num": "3019", "d": "2/2014"}, {"title": "button view clicked automatically backbonejs", "body": "view button associated tap event sounds normal except view user directed view button seem get tap event even though user touch button animation associated button animation start view opens", "num": "3018", "d": "2/2014"}, {"title": "collection create nt trigger request sync error events", "body": "creating model model collection create nt bubble request sync error events falls category", "num": "3017", "d": "2/2014"}, {"title": "oldie iframes never removed history stop", "body": "new created every call never removed likely causing memory leaks oldie see", "num": "3015", "d": "2/2014"}, {"title": "adding model collection sets model collection property set", "body": "checked source setting collection added options preparemodel method collection possible tell set collection model want create selection existing collection collections created models want keep reference original collection collections immutable", "num": "3014", "d": "2/2014"}, {"title": "collectionclone use options", "body": "clone empty collection would nt work options new collection undefined clone function return new thisconstructor thismodels second parameter thisoptions need store constructor", "num": "3013", "d": "2/2014"}, {"title": "backbone unable find dynamic div created template", "body": "sorry guys new backbonejs everything working fine goes method view div doesnot founded verified firebug everything run checked dom rowfluid div exist looking issue hours looking forward help guys coffee class myapproutersprojectsrouter extends backbonerouter initialize gt projects new myappcollectionsprojectscollection routes projects projects projects gt projectsfetch done gt view new myappviewsprojectsindexview collection projects projects html viewrender el class myappviewsprojectsindexview extends backboneview addall gt collectioneach addone addone project gt view new myappviewsprojectsprojectview model project rowfluid append viewrender el render gt elhtml addall class myappviewsprojectsprojectview extends backboneview template jst backbonetemplatesprojectsproject render gt elappend template", "num": "3009", "d": "2/2014"}, {"title": "breaks routing encoded newlines query strings", "body": "release introduced uri decoding path query params meaning encoded newlines query strings prevent matching route since regular expression dot nt match newlines broke things pretty badly us frustrating pointrelease sure best fix thinking probably updated match newlines well least documentation explaining query params contain encoded newline characters thoughts happy attach pr consensus resolved", "num": "3007", "d": "2/2014"}, {"title": "backbone model attributes error", "body": "hello every one baning head last hours still unable figure solutions looking forward help guys simply calling follow error", "num": "3005", "d": "2/2014"}, {"title": "use titanium", "body": "noticed use underscore issue mentions problems titanium values used sure backbone even used titanium thought pass along", "num": "3004", "d": "2/2014"}, {"title": "cause loaderror typing gt require money irb", "body": "following online tutorial manipulating currency irb downloaded files using installation completed switched ird ranwhich returned instead returned require irb could someone help solve problem thanks", "num": "3002", "d": "2/2014"}, {"title": "breaks browserify minified file", "body": "bug fixed backbonejs file minified file", "num": "3001", "d": "2/2014"}, {"title": "need use config testamdhtml", "body": "need use config testamdhtml since underscore amd support", "num": "2999", "d": "2/2014"}, {"title": "sync event destroying model", "body": "seems model destroyed event sent coffeescript line listento model sync alert sync never alerts sync model destroyed result model collection get request event beginning process matching sync end catastrophe manually trigger events server answers fixed need revisit code eliminate double triggering", "num": "2998", "d": "2/2014"}, {"title": "breaks browserify", "body": "hello version breaks browserify build backbone trying require jquery although backbone nt dependency know try catch around nt work browserify try resolve require fails causes build fail", "num": "2997", "d": "2/2014"}, {"title": "release breaking changes", "body": "using backbonejs requirejs application release works fine use rjs optimizer reduce project single javascript file point application stops working get message backbone defined message originates marionette explicitly depends backbone requirejs config explicity declares backbone dependency marionette confirmed nt happen", "num": "2996", "d": "2/2014"}, {"title": "removing callbacks working expected", "body": "docs eventsoff sample code var chai require chai expect chaiexpect sinon require sinon sinonchai require sinonchai var backbone require backbone var require lodashdistlodashunderscore chaiuse sinonchai describe backboneevents function var myobj beforeeach function myobj extend myobj backboneevents remove custom events objects function var sinonspy var sinonspy var sinonspy expectation callbacks already removed event time trigger called even unbinding event thereby failing pass test", "num": "2994", "d": "2/2014"}, {"title": "error file backbonejs", "body": "error line file backbonejs uncaught typeerror call method undefined", "num": "2992", "d": "2/2014"}, {"title": "bower issues", "body": "try add backbone package using bower two issues whole repository included ignores respected backbone dependencies included underscore issue command bower install targz repository downloaded issue think inside file bowerjson componentjson files present main repository", "num": "2989", "d": "2/2014"}, {"title": "route exception", "body": "routes throw exceptions due use iframes gon na bring old issue started iframe approach refresh memory even get find fix issue would really nice backbone least provide flag completely disable use iframes cost losing history support course", "num": "2988", "d": "2/2014"}, {"title": "remove item list tutorials", "body": "link tutorial even says page story demo tutorial remove please", "num": "2987", "d": "2/2014"}, {"title": "generate url routes", "body": "please u realize function realy need example", "num": "2982", "d": "2/2014"}, {"title": "docs move examples section separate page", "body": "documentation page backbone already fairly large api docs changelog faq totals around pixels spent examples section great show real world uses backbone think wrong place information navigating docs machine scroll wheel finger scroll also nightmare since scroll bar almost half height could propose move remove examples section whole", "num": "2981", "d": "2/2014"}, {"body": "yep brought tickets see end solution wherever backbone first referenced", "d": "2/2014"}, {"body": "yeah actually tried trouble due way ender modules created way add reference without losing ability integrate ender integrates modules methods via attempt add reference first eg like results infinite loop max stack size limit reached presumably due circular reference somewhere managed work around integrating means one global variable updating references backbone methods wondering gained breaking usage pattern least reference might well removed latter block first post since block unreachable backbone part ender library", "d": "2/2014"}, {"body": "hi ixxerri suspect problem parsing json status code jquery considers empty response invalid json fails request send instead request fine hope helps smiley", "d": "2/2014"}, {"body": "hi think misunderstood request gets accepted success problems asking model deleted collection response rather means accepted worked wednesday february brad dunbar notifications githubcom wrote closed reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "right completely misread sorry smiley think instead nothing", "d": "2/2014"}, {"body": "yes nothing least maybe trigger sort event since always success callback might even necessary think would apply methods well put post february brad dunbar notifications githubcom wrote right completely misread sorry image smiley think instead nothing reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "feel like would bit special case want handle custom sync method since presumably way backbone know specific action handled server", "d": "2/2014"}, {"body": "true backbone would nt update action occurred server unless user implements sort sockets assuming nodejs server still valid http response backbone nothing beneficial interfere anything else allows handle responses february tim griesser notifications githubcom wrote feel like would bit special case want handle custom sync method since presumably way backbone know specific action handled server reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "think original read ticket correct accepted request accepted processing processing completed request might might eventually acted upon might disallowed processing actually takes place facility resending status code asynchronous operation response intentionally noncommittal purpose allow server accept request process perhaps batchoriented process run per day without requiring user agent connection server persist process completed entity returned response include indication request current status either pointer status monitor estimate user expect request fulfilled remote action may eventually taken presumably time taken confirmation happening band since backbone default optimistic remote actions default optimistic well clientside act happened patched method fine way change default handling", "d": "2/2014"}, {"body": "backbone optimistic set wait true though think huge effect end user experience handling would fall category features instead flag condition", "d": "2/2014"}, {"body": "backbone optimistic set wait true though yes nt think would expected behavior treat differently wait true enabled default either way mostly academic esoteric status codes", "d": "2/2014"}, {"body": "given nature status code fact interfere status codes think would great addition fits perfectly something handled immediately like simple db query status sent thanks february jeremy ashkenas notifications githubcom wrote backbone optimistic set wait true though yes nt think would expected behavior treat differently wait true enabled default either way mostly academic esoteric status codes reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "problem running following command anyway could due temporary issue", "d": "2/2014"}, {"body": "thanks fixed cleaning bower cache done", "d": "2/2014"}, {"body": "hi awaisilyastkxel suspect syntax incorrect try instead hope helps try irc channel mailing list problems", "d": "2/2014"}, {"body": "try asking questions stackoverflow irc channel listserve github issues problems framework", "d": "2/2014"}, {"body": "without actual code difficult debug problem seems handling quite well view lifecycle", "d": "2/2014"}, {"body": "code within mobile app using phonegap jquerymobile code apologies paste code forum code segment view events tap transferinputfindanother function alert bypass check backbone causing double tap findanother function scroll box displayed code showtransferto function e e thischecktransferfrom return hide show settimeout function", "d": "2/2014"}, {"body": "backbone nt deal events looks like jquery mobile issue perhaps might luck posting documentcloud irc channel backbone mailing list github issues problems framework", "d": "2/2014"}, {"body": "fair never supposed ever call sure", "d": "2/2014"}, {"body": "yeh huge bug worth fixing probably", "d": "2/2014"}, {"body": "sorry invalid issue model already backbonemodel instance preparemodel called collection property changed", "d": "2/2014"}, {"body": "glad worked ya", "d": "2/2014"}, {"body": "filed pr ages ago agree model", "d": "2/2014"}, {"body": "storing options sets bad precedent really need probably override would things like saving comparator initialize arguments right", "d": "2/2014"}, {"body": "storing options prerequisite able clone correctly right cloning invokes constructor without passing options passed original made collection uses foomodel cloned collection happily keep using vanilla backbonemodel makes sense", "d": "2/2014"}, {"body": "js var backbonemodelextend url foo var backbonemodelextend url bar var collection backbonecollectionextend model var new collection id consolelog first instanceof true var new collection id model consolelog first instanceof true", "d": "2/2014"}, {"body": "javascript var backbonemodelextend var col new backbonecollection id model colat instanceof true var clonedcol colclone clonedcoladd id clonedcolat instanceof true clonedcolat instanceof false", "d": "2/2014"}, {"body": "ah passed requisite options ctor instead", "d": "2/2014"}, {"body": "well pass every option constructor every new option introduced subclass require overriding clone well saving copy options constructor lot easier", "d": "2/2014"}, {"body": "yeah ai nt gon na need overridden prototype like would guess people best left every new option introduced subclass require overriding clone well eh would right", "d": "2/2014"}, {"body": "introduce new option save reference collectionmodel instance need grab back put constructor clone yeah right looks like subclasses override anyway options actually supplied construction inheritance", "d": "2/2014"}, {"body": "yeah lets leave one developer", "d": "2/2014"}, {"body": "wait nt default implementation clone sane least within context vanilla collection model", "d": "2/2014"}, {"body": "actually yeah would agree thinking something along lines", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "otherwise take snapshot options anyway get passed way", "d": "2/2014"}, {"body": "yeah figure wanted could save reference pass back later feb pm jimmy yuen ho wong notifications githubcom wrote otherwise take snapshot options anyway get passed way reset add set references reply email directly view github", "d": "2/2014"}, {"body": "yeah figure wanted could save reference pass back later nt quite make sane vanilla collectionmodel default nt think escape copying options", "d": "2/2014"}, {"body": "ok screw defaults idea need override base collection something", "d": "2/2014"}, {"body": "yeah changed defaults back extends mistake unless talking defaults thing want know expected semantics obviously nt exactly cloning sure dozens incompatible overrides varying semantics good idea", "d": "2/2014"}, {"body": "mornin awaisilyastkxel search document elements matching however rendering index view yet inserted document need search views element instead instead generally try irc mailing list type question github issues questions backbone nt used debugging hope helps smiley", "d": "2/2014"}, {"body": "hi kainosnoema fixed apologies breakage thanks reporting alone concerning point release take look interested", "d": "2/2014"}, {"body": "braddunbar thanks quick turnaround new query string handling nice ca nt wait another version bump try", "d": "2/2014"}, {"body": "property undefined check exists getting set correctly constructor try asking questions mailing list irc channel documentcloud github issues problems framework", "d": "2/2014"}, {"body": "let tag em close em", "d": "2/2014"}, {"body": "titanium mvc framework alloy built top backbone", "d": "2/2014"}, {"body": "titanium mvc framework alloy built top backbone rock fix similar handled underscore either making default adding guard", "d": "2/2014"}, {"body": "hi cyzanfar fairly certain wrong place perhaps ask irc browse issues", "d": "2/2014"}, {"body": "thank mon feb pm brad dunbar notifications githubcomwrote closed reply email directly view github", "d": "2/2014"}, {"body": "problem smiley", "d": "2/2014"}, {"body": "built release maybe jashkenas release emergency release amd folks need remove shims upgrade requirejs way around running problems", "d": "2/2014"}, {"body": "good catch thanks", "d": "2/2014"}, {"body": "np", "d": "2/2014"}, {"body": "take look kind need event triggered also project working", "d": "2/2014"}, {"body": "far tell looking code sync event wo nt trigger model returns true using isnew method", "d": "2/2014"}, {"body": "confirm cause behaviour case", "d": "2/2014"}, {"body": "oops issue closed mistake yes right point issuing sync event communication server new isnew true model destroyed however one would expect sync event bubble collection nonnew model destroyed stated doc typically works well dim view collection sees request event undim corresponding sync received always works except destroy model code proves point server file called dummymodelphp client code coffeescript class mod extends backbonemodel initialize id val url phpdummymodelphp isnew get id else class col extends backbonecollection model mod collection new col collectionon destroy collection destroy ev collectionon add model consolelog collection ev add modelisnew new else modelget id collectionon request consolelog collection request ev collectionon sync consolelog collection sync ev newmod new mod newmodon change consolelog new model changed ev newmodon request consolelog new model request ev newmodon sync consolelog new model sync ev newmodon destroy consolelog new model destroy ev collectionadd newmod consolelog collection size collectionsize newmodfetch success gt consolelog fetched value newmodget val consolelog destroy error gt consolelog fetch error note delay give time follow activity log code produces following console log collection ev add collection size new model request ev collection request ev new model changed ev fetched value destroy new model sync ev collection sync ev destroying new model request ev collection request ev new model destroy ev collection destroy ev destroy method executed model new model sync ev sync event missing collection end workaround simple trigger event success callback destroy method fixed backbone event triggered twice", "d": "2/2014"}, {"body": "problem running due order operations model destroyed collection severs ties discontinue proxying events nt know call bug since sure ever discussed true intended functionality cc jashkenas braddunbar", "d": "2/2014"}, {"body": "facing exactly issue backbonereact library", "d": "2/2014"}, {"body": "hi great deal precedent one amp think reasons still stand time triggered model already removed collection", "d": "2/2014"}, {"body": "close issue program behaviour contrary stated documentation already surmised first post reason behaviour destruction model happened chance properly trigger events guessing probably happening makes kind sense good reason close issue otherwise would raised documentation says triggers destroy event model bubble collections contain request event begins ajax request server sync event server successfully acknowledged model deletion makes sense clear program doingthere sync event neither model collection correction sync event model bubble collection reread previous paragraph guess one could say bubbling mentioned destroy event others would counter request event bubble collection therefore sync event nt something need fixed", "d": "2/2014"}, {"body": "nt think anything needs fixed believe documentation correct well event triggered containing collections thus model removed collections proxy events models contain attempting fake event lead confusion", "d": "2/2014"}, {"body": "makes sense sync would fire destroy though since nt able destroy pessimistically request comes back nt seem bit strange could receive proxied request event never receive subsequent proxied sync event", "d": "2/2014"}, {"body": "second thought makes sense destroy name guess would work better event double duty moment means request successful client state sync server", "d": "2/2014"}, {"body": "well destroying model collection nt actually sync collection may new models services nt synced destroying yes request ending event highly needed use case call sync", "d": "2/2014"}, {"body": "sync event meant let us know collection synced issued also whenever single model saved server many models may synced moment disturbing lack sync event destroying model bit like html tag without matching closing tag request event says communication initiated server nt need know operation related adding deleting patching etc expressed words event would symetrically expect event shortly meaning process completed successfully details concerning nature operation original request event events paired cases except model destroyed may stubborn fail see logic exception", "d": "2/2014"}, {"body": "events paired cases except model destroyed events still paired correctly model triggers happens triggered model longer member collections previously belonged", "d": "2/2014"}, {"body": "imagine scenario view renders collection bind view collection events add remove change request sync instance rely request sync events start stop loading spinner achieve though clearly understand event nt bubbling right feel thing developer would expect happen edit binding model sync event removal ugly inserts lot clauses view code", "d": "2/2014"}, {"body": "happens sync triggered model longer member collections previously belonged think magalhas valid use case happens nt really strong argument current behavior would agree particular reason want call", "d": "2/2014"}, {"body": "right particularly strong argument explaining reason behavior order several good reasons think triggered first optimistic choice trigger first triggered asynchronously point future triggered last request complete implicit assumption fact already removed containing collections breaking assumption would likely break lot code mirrors way attributes set triggered several good ways toggle spinner use success callback xhr promise global events assuming using jquery work mmikeyy", "d": "2/2014"}, {"body": "sure going outside backbone eg global events would good idea could get triggers unexpected places script template loading relying ajax could tedious write code discriminate events triggered requests backbone wrote earlier easy circumvent problem manually triggering sync event collection success callback destroy method code however remain bothered fact collection get request event matching sync event event signals start process one reliably signals end interest process case server interaction whatever happens collection model plenty specialized events add destroy change etc available act model collection worth suggestion would new event always match request event signal request completion ideally parameters would indicate success failure pair events would useful manage aspects user interface eg request start request success request fail request end update documentation state clearly sync events bubble destroyed models longer exist rtfm reply would sufficed cut lengthy discussion short buti probably still would felt need another event described discussion would whether bug understand really one", "d": "2/2014"}, {"body": "hrrm good suggestions pinging substack", "d": "2/2014"}, {"body": "let clear something probably lot developers using backbone browserify use together jquery smart use jquery npm since available problem resolved already got jquery nodemodules folder currently working project jquery nt available started shimmed stumbled issue basically everyone wants use backbone together browserify without jquery uses jquery shim probably issues workaround include jquery npm nt think really nice hard dependency get working backbone actually nt really dependency jquery", "d": "2/2014"}, {"body": "hit issue problem jquery npm nt really jquery looking one intended use server shim sure best solution iirc setting jquery path browser paths nt fix", "d": "2/2014"}, {"body": "tgriesser problem anymore since jquery officially available npm nt need version use", "d": "2/2014"}, {"body": "run browserify debowerify transform never run assume way stub jquery within browserify", "d": "2/2014"}, {"body": "wow looking transform like idea missed iraytje ah yeah must problem think needed plugin compatibility reason", "d": "2/2014"}, {"body": "change make seems like attempting load jquery available within node likely right thing instead take position running backbone serverside never looking use views want models collections", "d": "2/2014"}, {"body": "nah loading jquery serverside definitely valid use case wiki page write blog post shim desirable jquery browser whats issue seems like small edge case", "d": "2/2014"}, {"body": "think shame backbone npm nt work browserify requiring module even conditionally dependency backbone even attempt load jquery within backbone even server side want use together load jquery assign backbone like always fix issue everyone nt require blog post using backbone browserify shim", "d": "2/2014"}, {"body": "backbone npm designed work node natural order things also happens work browserify bonus", "d": "2/2014"}, {"body": "even attempt load jquery within backbone even server side want use together load jquery assign backbone like always tend agree though", "d": "2/2014"}, {"body": "fair enough used change come introduced trycatch attempt load jquery node", "d": "2/2014"}, {"body": "somewhere around", "d": "2/2014"}, {"body": "goal make common case serverside node browserbased commonjs using jquery work without hassle opposed reverting add note docs changelog common case js commonjs var backbone require backbone backbone require jquery amd define backbone jquery function backbone backbone", "d": "2/2014"}, {"body": "nt need note amd though since taken care earlier block code", "d": "2/2014"}, {"body": "running seems like also issue amd projects use bower requirejs getting automatically upgraded seems like issues shimming plugins thinking really since breaking things lots people real culprit write configs first notice things working ci blowing across projects", "d": "2/2014"}, {"body": "recently pointed configuration within packagejson may help", "d": "2/2014"}, {"body": "nt backbone include packagejson dependencies field idea module would ever require package without putting package dependencies field seems really weird", "d": "2/2014"}, {"body": "perhaps", "d": "2/2014"}, {"body": "substack historical reasons makes sense since old jquery package something ever want downloaded project", "d": "2/2014"}, {"body": "backbone nt depend jquery unlike say underscore node package nt exist throws", "d": "2/2014"}, {"body": "nt backbone include jquery packagejson dependencies field load backbone node probably nt want jquery dependency folks might", "d": "2/2014"}, {"body": "getting something thread naive understanding dependencies work package dependency dependencies go packagejson dependencies field thread people telling despite present code jquery dependency jquery dependency backbone code take jquery actually dependency backbone belongs packagejson dependencies field weird thirdcase middleground shenanigans going take hacks like nt belong", "d": "2/2014"}, {"body": "addendum like tbranyen already pointed problem want something different happen node vs browser use something like browser field specify different entrypoint perfile overrides", "d": "2/2014"}, {"body": "substack jquery optional light dependency backbone load use backbone fine without jquery present first reference jquery lazily set anytime", "d": "2/2014"}, {"body": "mentioned add docs somewhere", "d": "2/2014"}, {"body": "care making egal amd feb pm jeremy ashkenas notifications githubcom wrote closed via reply email directly view github", "d": "2/2014"}, {"body": "raynos says backbone code relying set leave user would one need another name jquery", "d": "2/2014"}, {"body": "mean also remove amd jquery require using module system make sure underscore visible set backbone seems little odd probably fine", "d": "2/2014"}, {"body": "looks like best option jquery library also interface", "d": "2/2014"}, {"body": "jquery jquery zepto ender way code run browser user power choose one backbone way set jquery interface implementation way go neither amd npm notion interface optional dependency afaik", "d": "2/2014"}, {"body": "jquery zepto whatever optional backbone effort assign right library user code like backbone jquery nt depend jquery please", "d": "2/2014"}, {"body": "mean also remove amd jquery require nt think amd browerside packaging browser jquery usually dependency backbone", "d": "2/2014"}, {"body": "subset jquery used backbone huge possible provide api drop jquery jquery dependency force people make custom version backbone order use something else", "d": "2/2014"}, {"body": "kof take look", "d": "2/2014"}, {"body": "nt think amd browerside packaging browser jquery usually dependency backbone since modules names arbitrarily defined amd config requiring module named forces people name zepto jquery custom ender build jquery want use backbone something jquery amd causes actual problems might create confusion", "d": "2/2014"}, {"body": "thing lodash though imagine using something jquery either know legacy code base used incompatibilities requirejs makes pretty easy alias modules", "d": "2/2014"}, {"body": "good point", "d": "2/2014"}, {"body": "requiring something dependency straight bug think thanks quick fix someone push npm forward looking solution could class method explicitly allows developer assign value throwing later calls nt setup found global browser dependency one generally swapped variety libraries others point", "d": "2/2014"}, {"body": "fix exists backbonejs file minified version backboneminjs still require jquery someone fix please", "d": "2/2014"}, {"body": "wookiehangover real culprit npm install save backbone bower install save backbone write configs first notice things working ci blowing across projects heads behavior changed use means packages updated released see", "d": "2/2014"}, {"body": "jdalton interesting decision obviously nt gotten wind change", "d": "2/2014"}, {"body": "great default modules complying semver probably good applications", "d": "2/2014"}, {"body": "longer possible integrate backbone ender library modules loaded part ender library always exists context nt actually possible reach loading block passed argument solution use ender nt autointegrate modules module needs loaded via optionally integrated via backbone currently integrated must used separately like instead", "d": "2/2014"}, {"body": "try opening issue marionette recall need use amd build load backbone properly", "d": "2/2014"}, {"body": "many backbone plugins nt support amd even though adding backbone window happens asynchronously function passed define called meanwhile plugins included built file may looking windowbackbone immediately nt defined yet seems valid issue compatibility", "d": "2/2014"}, {"body": "ianmetcalf requirejs shim configuration nt work", "d": "2/2014"}, {"body": "nt using rjs optimizer shim wrap plugin discussed bit specifically comments toward bottom", "d": "2/2014"}, {"body": "exactly issue well seems solved marionette backbonerelational", "d": "2/2014"}, {"body": "seeing backbonevirtualcollection good excuse get plugins include amd compatibility", "d": "2/2014"}, {"body": "good excuse get plugins include amd compatibility want start list amd offenders open pulls take minutes amd baked bb proper harder excuse lack support", "d": "2/2014"}, {"body": "ha open pr", "d": "2/2014"}, {"body": "amd baked bb proper harder excuse lack support really tragic amd infect every single file javascript existence order useful external libraries nt want include prerogative sigh", "d": "2/2014"}, {"body": "jashkenas even loyal requirejs user agree little sad see support added personally fine shim setup", "d": "2/2014"}, {"body": "another option consider marionette two builds one amd support one without", "d": "2/2014"}, {"body": "upgrade rjs optimizer config fix build issue amd version backbone downstream dependencies shim config details", "d": "2/2014"}, {"body": "solves thanks jrburke", "d": "2/2014"}, {"body": "spies nt reset call counts tests comment first trigger see call counts", "d": "2/2014"}, {"body": "sounds like underscorejs nt loaded", "d": "2/2014"}, {"body": "added cut use master get benefits ignores", "d": "2/2014"}, {"body": "clear thanks clarification", "d": "2/2014"}, {"body": "everything set correctly routes throwing exceptions ie ran backbone test suite without errors feel free submit failing test case like pursue", "d": "2/2014"}, {"body": "started project recently permission denied exceptions seems like nt happens workaround working fine ignore exception gethash method original modified", "d": "2/2014"}, {"body": "page quirks mode different document mode normally without reproducible case really much", "d": "2/2014"}, {"body": "running compatibility mode ie throwing exception ayresbarcelos saying exception caused iframe nt really want add try catch suppress error going gather details ie environment using jashkenas tests running version compatibility mode mean everything setup correctly", "d": "2/2014"}, {"body": "running compatibility mode valid way test actual behaves quite differently might one areas tests run whatever run working real real real real real", "d": "2/2014"}, {"body": "ok confirmed also tested native run another round tests", "d": "2/2014"}, {"body": "wiki remove pull request needed give try", "d": "2/2014"}, {"body": "seems reasonable", "d": "2/2014"}, {"body": "submit pull request", "d": "2/2014"}, {"body": "thanks", "d": "2/2014"}, {"body": "thoughts topic", "d": "2/2014"}, {"body": "put bottom bothering folks documentation single page nice", "d": "2/2014"}, {"body": "would argue nt documentation like anecdotal evidence important folks use backbone", "d": "2/2014"}, {"body": "agree think important information earlier clear backbone widely used", "d": "2/2014"}, {"body": "sorry boys examples stay feel free move faq docs like", "d": "2/2014"}, {"body": "also examples real world backbone apps function though monday february sam breed notifications githubcom wrote would argue nt documentation like anecdotal evidence important folks use backbone reply email directly view github", "d": "2/2014"}, {"body": "looks like someone already rearranged sections nt deployed site yet", "d": "2/2014"}, {"body": "optional parts backbone routes support nesting", "d": "2/2014"}, {"body": "would welcome pull request", "d": "2/2014"}, {"body": "would say pr please release plugin nt know jashkenas opinion nt see nt part backbonerouter core", "d": "2/2014"}, {"body": "depends fancy ends yes sure feel free take crack", "d": "2/2014"}, {"body": "moral story ing duplicate models breaks passed directly calling works also pass see results hazard guess point say line new idattribute parsing server response nt parsed yet expose models ids thus check fails lines later maybe braddunbar shed little light solution algorithm still incorrect duplicates nonnested attributes becomes different nt throw due array getting priority array setting collection models probably best detect dups early throw wrap around line", "d": "2/2014"}, {"body": "updated spec use method correct running problems using option intended behavior silently reject duplicate model throw error case opinion throwing error developer friendly server clientside code giving duplicate want know upfront alternative creating bugs downstream much harder identify track want go route wrote couple specs expected behavior", "d": "2/2014"}, {"body": "dropped support case think need function solve issues like would also make composite keys easy js default generateid function attrs return attrs thisidattribute eschwartz test case generateid function attrs return attrsnestedid instead using use change would nonbreaking thoughts", "d": "2/2014"}, {"body": "definitely relying data parsed passed cruel else could composite keys called would function used multiple places", "d": "2/2014"}, {"body": "working quick pr get details", "d": "2/2014"}, {"body": "still nt solve problem duplicate models passed call though", "d": "2/2014"}, {"body": "use case example building library uses backbone interface various mapping apis case directly interacting dom views rather map library apis stands forced use entire backbone library along flavor fo though really using fyi able stub without side effects using implementation rely", "d": "2/2014"}, {"body": "apis stands forced use entire backbone library along flavor fo though really using models collections fyi able stub without side effects using implementation backbonesync rely ajax sounds like exactly supposed using backboneview minuscule loading without needing may unaesthetically appealing ca nt imagine mattering almost conceivable js environment", "d": "2/2014"}, {"body": "jashkenas using browserify complete backbone pulled project uglifyjs able strip away parts would bundle size would lot smaller router code would pulled bundle fact prevents using backbonerouter project would double bundle size code nt need also lot upsides like code would logically split files would divide code modules modules would reusable also outside complete backbone context would much fit nodejs philosophy help browserify taking browser side development would work splitting code providing way build browserify would accept pull request would wasting time", "d": "2/2014"}, {"body": "nnarhinen get away supporting modern environments might look exoskeleton backbone fork modular components work paul miller said doubt backbone size sincere concern app extra kb browserify pulls likely among smallest dependencies", "d": "2/2014"}, {"body": "kilobytes something care dangerous path go end bundle half something nt need pulled nt want reinvent wheel nt see nt work towards web development would reintroduce performance terms bundle size memory footprint supporting backbonejs would make sense ca nt really see downsides", "d": "2/2014"}, {"body": "backbone tiny interested see dependencies backbone limiting factor downsides increased complexity much benefit backbone one file needs one file adding complexity makes confusing people unfamiliar commonjs", "d": "2/2014"}, {"body": "would argue building unified file including unfamiliar commonjs would add little complexity yet still support real valid performance reuse concerns users niklas backbone aims limit supporting lowest common denominator may enough encourage users pursue projects use foundation certainly gives pause would nt bothered respond issue except fact fair technical argument met untechnical arbitrary response seemed run counter goals project maybe statement goal monolithic design added project description help differentiate backbone modern approaches", "d": "2/2014"}, {"body": "strictly followed semantic versioning would probably backbonejs nt help anyone evaluate actual progress project minor maybe nonexistent problem following semver big problem", "d": "2/2014"}, {"body": "semver musthave big project", "d": "2/2014"}, {"body": "knowtheory looks bit odd think would fine one would get surprise breakage", "d": "2/2014"}, {"body": "cares version numbers high standard use use nt even understand discussion going long", "d": "2/2014"}, {"body": "would prevented issues problems others w several backbone releases", "d": "2/2014"}, {"body": "braddunbar rest reasons sounds like valuing aesthetics version number actual meaning", "d": "2/2014"}, {"body": "thanks strictly following semantic versioning would nt work well backbone think backbone working well users dependency management following semver would", "d": "2/2014"}, {"body": "frequent releases would help catch showstopper bugs faster think much ask people constantly run edge versions backbone get bugfixes need", "d": "2/2014"}, {"body": "issue removed leading seems working jashkenas another post read removal leading slash handled automatically incorrect", "d": "2/2014"}, {"body": "leading hash seems problem leading slash since got rid working properly", "d": "2/2014"}, {"body": "underscore sortedindex nt actually available included mixins whitelist", "d": "2/2014"}, {"body": "obviously guys jashkenas braddunbar coded lot backbone know ins outs keep returning problem raised alexeypetrushin yes made discovery per brad reply subsequent event tantamount really quite bit also new backbone time discovery took quite bit thinking stepping code know trying really hard keep backbone lean issue keeps cropping alexeypetrushin suggestion trigging event local state goes would helpful addition heft using abovedescribed approach also awkwardness setting keeping around indefinitely know therefore interpreted last validation error still think awkward short code changes method described checking really best approach common use case view needs toggle presenting valid invalid valid render underlying model model attribute use case huge", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "change constructor behavior problem blindly passing ajaxspecific options straight model constructor", "d": "2/2014"}, {"body": "backbone always flexible less opinionated frameworks nt understand different native windowhistorypushstate understand people wo nt like however decision using left final user please rethink", "d": "2/2014"}, {"body": "one may useful anyone looking functionality backbonecollectionsubset backbonevirtualcollection", "d": "2/2014"}, {"title": "need sexpr finergrained control whether route active", "body": "sure bug expected behavior misusing clearing functionality queryparamsnew clear params linkto helper passing values index link longer active params used links within index template description nt great look following example see dogs index link longer active name breed parameter active case cats index link would expect dogs link remain active since still within dogsroute", "num": "4447", "d": "2/2014"}, {"title": "calling removeobjects removes incorrect things", "body": "hi everyone found issue using method may illustrated bin trying go deep problem found think actual issue library code roughly results calling callback two times thus deleting required things sure expected behaviour native reproduced chrome ff easy fix may moving regular loop try submit pr issue make pass existing tests nt completely stupid", "num": "4443", "d": "2/2014"}, {"title": "recovering rejection promise emberroute model work using recommended means", "body": "ember guides async routing recovering rejection section says catch promise rejects within model hook convert fulfills wo nt halt transition gist demonstrates problem live example jsbin problem although error callback successfully invoked model function evidenced log output route detect happened continues halt transition route evidenced log output fact template nt get rendered run browser hash fragment nt change either expected result route detect callback returned recovery object thus allow transition go using model page render foo foo successfully recovered promise rejection route", "num": "4442", "d": "2/2014"}, {"title": "emberobjectextend breaks objectseal", "body": "js emberversion var extendcreate objectseal emberobjectextend foo function return bar create class extendcreatefoo function return baz function return baz extendcreatefoo bar yet js createwithmixins objectseal emberobjectcreatewithmixins foo function return bar class createwithmixinsfoo function return baz function return baz createwithmixinsfoo baz", "num": "4441", "d": "2/2014"}, {"title": "item items wrong context", "body": "think found bug helper specifically nesting two jsbin showing mean section interest since using preserves context would expect reference variable object array instead inside second helper reference controller expected behavior helper preserving context", "num": "4437", "d": "2/2014"}, {"title": "template rendered named template use outlet", "body": "see demonstrating rendering cats route along cats template named cats outlet application template result see catsindex template rendered within cats template despite seeing transition catsindex machty usually respond coworkers issues quickly tell us ember wrong hoping", "num": "4434", "d": "2/2014"}, {"title": "actions inside nested components bubble route", "body": "maybe something wrong ca nt get foo action bubble route error occurs nest two components inside using handlebars block helper syntax example parent component template child component template handlebars hello child bubbling route apparently route javascript appindexroute emberrouteextend model function return red yellow blue actions", "num": "4430", "d": "2/2014"}, {"title": "x working certain situations", "body": "following construct working emberjs demonstrated following jsfiddle seem issue order evaluation", "num": "4429", "d": "2/2014"}, {"title": "component looses context initfunction implemented", "body": "component template getting context controller implemented initfunction modified componentexample show", "num": "4428", "d": "2/2014"}, {"title": "emberselect never output selected attribute", "body": "hi trying use emberselect view however selected attribute never outputted active option exemple doc work neither reproducing minimal example current version ember beta failed also master branch thank", "num": "4427", "d": "2/2014"}, {"title": "binding route controller transitioning route causes exception", "body": "hi folks found bug emberroutesetup route bound property controller route transitioned exception thrown simply changing line emberroutesetup line fixes cheers andrew", "num": "4425", "d": "2/2014"}, {"title": "using emberarray component", "body": "component works similar manner pass array get selected item simply taking options array pushing ember array call component template multiple times value options property components component options another component options components value property shared components nt supposed happen coffee selectinputcomponent embercomponentextend value options dog cat fish list embera didinsertelement gt get options get options foreach item gt get list pushobject emberobjectcreate value get value isselected false isdefault false", "num": "4424", "d": "2/2014"}, {"title": "embercomputedfilter replaces items place property changes", "body": "list text fields bound ux issue field autosaved text field loses focus tracked issue reducecomputed properties called removes item adds item back issue nt happening upgraded might also related quickly content gets flushed dom add remove occur directly item location affect dom", "num": "4423", "d": "2/2014"}, {"title": "emberselect work subobjects embermap", "body": "emberselect combination view viewhelper take controller property contentargument view emberselect contentrelationsroles case relations could javascript object relationsroles expected enumerable confgure relations embermap perform relationsset roles name one emberselect display values correctly bug jsbin", "num": "4422", "d": "2/2014"}, {"title": "queryparamsnew query params sticky index route", "body": "seeing two issues using index routes queryparamsnew first breaking active state may related second sticky params working expected ca nt find open ticket seems relevant seeing longer description demo found", "num": "4420", "d": "2/2014"}, {"title": "transition fails silently", "body": "code error dashboardpageheader exist ember fails report issue application would never transition loading issue reported able resolve sure doubt supposed fail silently", "num": "4419", "d": "2/2014"}, {"title": "promiseproxymixin reset isfulfilled isrejected reseting promise", "body": "sure expected behavior design assume object promiseproxymixin fullfilledrejected assign new promise object isfulfilledisrejected reset example code javascript var tasks emberarrayproxyextend emberpromiseproxymixin tasksset promise getjson apitasksjson tasksget isfulfilled return false ajax request response tasksget isfulfilled return true assign new promise reload data tasksset promise getjson apitasksjson ajax response isfulfilled true tasksget isfulfilled return true expect every time set reset false set manually reseting sure good suggestion could anyone tell reason design like reset isfulfilled isrejected automatically thanks", "num": "4414", "d": "2/2014"}, {"title": "reason using container factorycache", "body": "looked container code looks like never merge factorycache actually container cache reason using", "num": "4413", "d": "2/2014"}, {"title": "routing error route", "body": "sure changed app get error seems like error never reached far caught earlier helpful message exactly sure going though", "num": "4412", "d": "2/2014"}, {"title": "loading event bubbling expected", "body": "event appear bubbling upward way described ember app template routes model hook returning delayed promise demonstrating", "num": "4409", "d": "2/2014"}, {"title": "refer arrangedcontent instead content", "body": "encountered subtle weirdness mixin looks like previously dependant key referring whenever mixin overriden ending null method composedelete function index var arrayoperation thisoperations index deletestogo arrayoperationcount leftarrayoperation thisoperations may undefined leftop leftarrayoperation amp amp leftarrayoperationtype nextarrayoperation nextop nextcount removenewandnextop false removeditems operations assignment referring index greater", "num": "4408", "d": "2/2014"}, {"title": "passing primitives longer calls model hooks nested routes", "body": "passing string number route using helper function longer calls hook nested routes parent changes working example broken example version router nt call model hook nested routes argument child route nt changed think common nested routes model refresh parent model changes sure bug nt want pollute stackoverflow", "num": "4405", "d": "2/2014"}, {"title": "amd detection define default", "body": "almost thing previously resolution great removing ember reliance still nt detect amd environments define automatically literally something simple would mostly satisfy gladly pr core sickness supported begs question whether still leak globally running amdsupported environment sort global variable nazis personally vote still go global need devil advocate btw realize example people want wrap ember module issue believe ember detect automatically especially since source ported amd eak think buy completely", "num": "4402", "d": "2/2014"}, {"title": "fixture adapter allow testing serializers transforms wrong repository sorry please delete", "body": "fixture adapter assumes data provided correct format call serializers transforms fixture data format expect get data massaged version data take payload rest service use fixture data first massage transforms custom serializer would like test fixture data case may offline able call rest service also test meta data serializer null statement fixtureadapter removed defaults back jsonserializer transforms called subclass fixtureadapter specify defaultserializer test serializer data format rest service would actually send way subclass fixtureadapter set serializer back undefined would ok", "num": "4400", "d": "2/2014"}, {"title": "transitioning stored transition subroutes fails", "body": "route setup like approutermap function thisresource login thisresource order path orders orderid function thisresource checkout checkout path protected authenticated route stores attempted transition appauthenticatedroute emberrouteextend beforemodel function transition var loggedin thiscontrollerfor application get isloggedin loggedin thisredirecttologin transition redirecttologin function transition var applicationcontroller thiscontrollerfor application applicationcontrollerset attemptedtransition transition thistransitionto login appcheckoutroute appauthenticatedrouteextend login transition retried app attempts transition instead back order code seems work ember fails higher small app reproducing issue", "num": "4399", "d": "2/2014"}, {"title": "actions nt delegate controller controller", "body": "action inside context bubble foocontroller rather current route controller furthermore inside returns current route controller seems action would first bubble controller context defined route controller would output current controller context jsbin cc bcardarella", "num": "4398", "d": "2/2014"}, {"title": "model property proxying like content property", "body": "caused breaks upgrading always source confusion whether use controller proxying personally favoured upgrading count created jsbin illustrate problem jsbin controller defined length even though aliased property elements change keyword correct length verify taking steps click companies link navbar check boxes sidebar property reference handlebars displays find change model content repeat steps correct length displayed", "num": "4396", "d": "2/2014"}, {"title": "deprecate notifypropertychange", "body": "convenience method calling row nt whole point called change occurs used places ember tests", "num": "4395", "d": "2/2014"}, {"title": "transitionto routing", "body": "realted created jsbin show problem steps recreate click companies top nav check boxes sidebar click delete button delete button action handler looks like replication happening real world application real app wait records deleted want back certain route happen noticed router code appending ca nt understand work", "num": "4394", "d": "2/2014"}, {"title": "allow view parameter render option hash", "body": "jsbin trying show possible render outlet possible render viewcontrollertemplate second outlet possible render using controller capital leters middle greengreen possible render using controller capital leters middle associated nongenerated view needed bluebluecontroller blueblueview ember uses controller blueblue specified options autogenerates view blue guess match template blue understand default rules choose view outlet possible override manually maybe parameter render options hash", "num": "4392", "d": "2/2014"}, {"title": "routing different handler linkto", "body": "sure connected misunderstanding router works would good get clarity situation jsbin illustrates problem steps reproduce click companies link top nav everything works expected correct handler route name selected afterhook called route click companies link top nav handler routename executed route defined therefore overrriden hook get behaviour expect override stop transition route would expected handler get executed time find strange clicking link generated link results different handler executed different circumstances", "num": "4391", "d": "2/2014"}, {"title": "controllerfor setupcontroller fails silently setupcontroller aborted", "body": "bug setupcontroller apphelloroute emberrouteextend usercontroller bug code needed find ember complain aware thing happening template rendered thought named controllersroutersviews wrong route spent hours looking problem simply failing completely silent stacktrace console error message expected behaviour think least development builds error message provided edit seems error abort silently unexpected", "num": "4390", "d": "2/2014"}, {"title": "nested collectionviews broken", "body": "hi shown js bin using nested collection views causes error uncaught typeerror call method lookup null issue states collection views working itemview either", "num": "4389", "d": "2/2014"}, {"title": "transition params changed", "body": "router seems changed unexpected ways previously check willtransion messages route experiencing many subtle bugs", "num": "4388", "d": "2/2014"}, {"title": "helper add css class based active route", "body": "issue discussed lately currently clean way active css class depending active route tag linkto helper markup used bootstrap example desired output current workaround double nesting ugly proposal add helper adds active class enclosing tag existing active route detection functionality moved mixin reused proposed usage fancy usage sometimes designers put classes body distinguish styles different templates first parameter string route could lookupadd css classes handed property eg views classnames property guys happy proposal try implement first draft ping trek stefanpenner", "num": "4387", "d": "2/2014"}, {"title": "context component", "body": "found number bugs release happening upgrading app relatively big creating jsbins proving bit struggle first one click one checks left column route transitions click check sidebar transition find action alert used work routing bugs go away revert try create jsbins situations", "num": "4385", "d": "2/2014"}, {"title": "helper specifying controller actions ignored controller", "body": "see specifying controller helper nt work entirely expected expected actions triggered within block handled controller named block instead bubble parent controller", "num": "4384", "d": "2/2014"}, {"title": "emberstringfmt stringprototypefmt behave differently", "body": "seems requires single array requires multiple parameters returns returns conversely returns returns fiddle table form given data method array params desired desired", "num": "4383", "d": "2/2014"}, {"title": "select tag display options bug", "body": "hello try make select tag associated model user change appropriate property updated jsbin see selected value displayed select box made mistake bug emberselect view", "num": "4382", "d": "2/2014"}, {"title": "queryparamsnew available canary build", "body": "using enabled queryparamsnew feature worked well application however upgraded keep getting error checked emberjs gem distribution could nt find reference queryparamsnew however code related queryparamsnew still found canary build queryparams officially removed betarelease builds", "num": "4372", "d": "2/2014"}, {"title": "ember seems incompatible sharethis", "body": "using sharethiscom implement sharing site without including emberjs everything works fine file included javascript error raised uncaught typeerror read property undefined buttonjs", "num": "4371", "d": "2/2014"}, {"title": "newer version breaks jqgrid", "body": "using ember jqgrid recently try upgrade ember newer version breaks jqgrid grid longer sends request web service nt see error using chrome debugger using fiddler nt see error request back end downgraded back works finds grid stops working starting ember anyone gotten newer version ember work jqgrid", "num": "4370", "d": "2/2014"}, {"title": "nested feature flags", "body": "currently support nested feature flags build error occurs value anything believe able updated handle properly created shipped value feature fixed upstream reference used", "num": "4369", "d": "2/2014"}, {"title": "arraylength computed properties observers firing", "body": "seem run issue fairly often always work around appears unexpected behavior ember basic way reproduce define array property emberobject define computed property based array length define observer computed property add value array observer fire expected read computed property elsewhere console add another value array observer fires continue array changes expected fiddle demonstrate open console see log messages array changes observer valueslength fires expected observer computed property fire expected click log hasvalue button starts work second concern click log button hasvalues observer fires time array content changes would expect observer fire hasvalues actually changes occurs array becomes empty empty workarounds simple issue behavior unexpected wind pulling hair trying debug code work thanks everyone", "num": "4368", "d": "2/2014"}, {"title": "contradicting documentation related parameter emberrouterender", "body": "example accept template name route name", "num": "4367", "d": "2/2014"}, {"title": "route transitions flickery many repaints", "body": "actionable bug wanted bring general problem everyone attention close several apps seen route transition visually busy might still fairly fast measured milliseconds amount repaints makes seem heavy example illustration happens hit back button one pages going home page page back button takes half second importantly seems cause excessive flickering several consecutive frames", "num": "4366", "d": "2/2014"}, {"title": "wrong assertion value loops must array", "body": "problem ca nt pass object handlebarsjs conditional raises exception emberjs code handlebarsjs iterate objects excerpt handlebars place emberjs occurs module ember submodule emberhandlebars emberhandlebarseachview embercollectionviewextend embermetamorph assertarraylike function content emberassert value loops must array passed contentconstructor arraycontroller embercontrollermixindetect content content amp amp contentisgenerated content instanceof emberarraycontroller emberassert value loops must array passed embercontrollermixindetect content amp amp contentget model undefined contentget model wrapped content content emberarraydetect content module ember submodule emberviews embercollectionview embercontainerviewextend contentdidchange emberobserver content function var content get content", "num": "4365", "d": "2/2014"}, {"title": "destroying namespace remove list namespaces", "body": "", "num": "4363", "d": "2/2014"}, {"title": "ca nt loop emberdeffered object template", "body": "want show issues get emberdeferred resolve pass controller shows error issues else code model var dfd emberdeferredcreate var issues ema getjson appapipath issues magid function response error console assertion failed value loops must array passed emberdeferred uncaught typeerror object object object method addarrayobserver please help thanks", "num": "4361", "d": "2/2014"}, {"title": "internal state transition indom embercoreview causes must use emberset access property error within containerview", "body": "ember component passing containerview component choking render throwing error stating need use emberset set view state property setting directly seems culprit line embercoreviewtransitionto line ember changing simple thisset state state seems resolve problem nearly comfortable enough ember internals know whether appropriate fix happy provide additional context helps thanks", "num": "4356", "d": "2/2014"}, {"title": "findingnearesteventmanager wasteful", "body": "feature likely never rarely used incur cost every dispatched event includes mouseoveretc consider killing flagging cache results need run time", "num": "4355", "d": "2/2014"}, {"title": "ca nt get content value view class", "body": "trying get content template view class modelname showing fine template try access contentname view class shows undefined define app function app return appissueview please help thanks", "num": "4354", "d": "2/2014"}, {"title": "route view initialized model changes", "body": "noticed route view initialized every time model changes route even though model actually rendered original view quick jsbin reason view created used try find router happening", "num": "4353", "d": "2/2014"}, {"title": "latest canary build broken", "body": "hi developing canary recently ran new error looks like coming javascript function embercontainer requiremodule container default embercontainerset emberset occurs regardless whether app initialized suggestions", "num": "4345", "d": "2/2014"}, {"title": "render thing thingmodel nt tear controller upon unrender causes leaks", "body": "seeing memory leak controllers nt torn leaving route thus multiple instances controller acting object created", "num": "4342", "d": "2/2014"}, {"title": "ember bower handlebars dependency incorrect", "body": "handlebars dependency specified pulls breaks embertemplatecompiler precompiling templates", "num": "4341", "d": "2/2014"}, {"title": "query parameters works", "body": "linkto index queryparams statecontent time linkto code console log error uncaught error parse error line linkto index queryparams state expecting close closeunescaped string integer boolean id data got invalid", "num": "4340", "d": "2/2014"}, {"title": "using deep property computed property bindattr work", "body": "tried using code like defined like within controller verify computed property changes expected modified elsewhere value attribute update accordingly", "num": "4339", "d": "2/2014"}, {"title": "embercomputedsortlength receiving change notifications incorrectly", "body": "adding single object empty source array observer property defined fire changing property object source array one sortproperties observer fire times even though length conceptually changing created failing test yet dug root cause wanted put see hjdivad initial feedback guidance", "num": "4337", "d": "2/2014"}, {"title": "emberroutingboundactionname quoteless actions controller cause uncaught error", "body": "action defined controller controlleractions appear demo fix replace reference", "num": "4335", "d": "2/2014"}, {"title": "bug emberselect multipletrue nt set selection elements deep equal objects", "body": "bug emberselect preselect options selection property contains objects content property doesnt preselect objects match deep equal operation live example test javascript test selection set deeply equal objects function var yehuda id firstname yehuda tom id firstname tom david id firstname david brennain id firstname brennain aclonedtom id firstname tom aclonedyehuda id firstname yehuda", "num": "4331", "d": "2/2014"}, {"title": "differences bindattr", "body": "bit confusing realize bindattr use different notion truth example errorname array validation errors field name field ok array empty otherwise error messages using matters write ca nt write works fine", "num": "4330", "d": "2/2014"}, {"title": "oneway defaultto nt", "body": "docs emcomputedoneway say downstream value permanently diverges upstream property docs emcomputeddefaultto nt specify happens upstream value changes implementation causes permanent divergence like need thing js k emobjectextend oneway embercomputedoneway ab defaultto emcomputeddefaultto ab k kcreate b pull upstream unset kget oneway kget defaultto allow setting kset oneway kset defaultto retain value set kget oneway kget defaultto diverge permanently kset ab kget oneway kget defaultto", "num": "4323", "d": "2/2014"}, {"title": "input type checkbox valueboolthing work", "body": "turns supposed sure makes sense maintains parity old school cept syntax strictly html world dumbleton brain spent insignificant amount time wondering heck approach issue title nt working make sense support anyone else tripped", "num": "4319", "d": "2/2014"}, {"title": "embermixin cp firing emberobject", "body": "basically computedproperty mixin cp depends instance controller cp nt trigger upon change object two jsbins showing issue", "num": "4318", "d": "2/2014"}, {"title": "active state anscestor linkto broken queryparamsnew enabled", "body": "routes controller defines links ancestor routes longer considered active jsbin demonstrates issue believe current behavior changed pr due considering object keys empty object", "num": "4317", "d": "2/2014"}, {"title": "proper way create fixture adapter", "body": "docs currently show three different methods creating adapters getting starting guide using fixtures section fixture adapter created extending adapter class adapter class documentation created using dsstorecreate fixture adapters guide created using dsstoreextend seem work equally well however option relies undocumented default value nt explained tutorial elsewhere could find option specifies revision field nt explained nt appear used best practice specifying adapters know submitted documentation discrepancies happy forkfix api appears state flux ca nt tell docs code correct method use think important get right common warningcomplaint heard people give trying evaluate angular vs ember hard find accurate ember tutorials api keeps changing", "num": "4315", "d": "2/2014"}, {"title": "emberroutermap nt documented", "body": "one first ember functions exposed getting started tutorial following perhaps unique see code tutorial like cross reference docs awfully hard time figuring map actually could nt find function documented anywhere ember router class documentation found reference source code nt immediately obvious since documentation source site looking rest documentation reference find map emberenumerable documentation emberrouter use interface would useful see mentioned somewhere emberrouter docs nt map come context api", "num": "4314", "d": "2/2014"}, {"title": "memory leak observables observed array", "body": "really simple test file basically along assumption folder structure starter kit tested instead happens using let run hour essentially leaks bytes per second bytes hour much larger app worse wanted dead simple thoughts ember starter kit lt gt welcome emberjs lt gt lt p gt outlet firstname lastname version app emberapplicationcreate apppersonmodel emberobjectextend firstname null lastname null version versionchanged function observe something observes version approutermap function put routes appindexroute emberrouteextend apptestcontroller apppopulatearray function var myarray embera myarrayaddobserver function actually wanted something var lt var person apppersonmodelcreate firstname john lastname doe version myarraypushobject person return myarray appindexcontroller emberarraycontrollerextend init function apptestcontroller content apppopulatearray setinterval function apptestcontrollerset content apppopulatearray setinterval function var data apptestcontrollerget content dataforeach function value index valueincrementproperty version", "num": "4309", "d": "2/2014"}, {"title": "able sort arraycontroller computed property itemcontroller", "body": "currently sortproperties includes computed property itemcontroller property found sort properties original model", "num": "4308", "d": "2/2014"}, {"title": "bindattr regression observers properly removed", "body": "commit removed function helper looks like call missed though still references function rather function say line packagesemberhandlebarslibhelpersbindingjs left master currently line problem exists line", "num": "4307", "d": "2/2014"}, {"title": "weird behaviour deleting last element arrayproxy", "body": "jsbin shows problem click remove add removing adding new element items appear old one new one twice exception last element removed", "num": "4306", "d": "2/2014"}, {"title": "use handlebars whitespace control", "body": "handlebars whitespace control introduced simply mustache expression may add opening brackets closeing brackets indicate whitespace beforeafter expression trimmed eg render line sometimes may break layout eg blocks unwanted empty spaces since handlebars fix adding whitespace control however tried use ember app getting error console warning running embertemplates dist embertemplates task error parse error line ss headers goal forec expecting id data got invalid warning ember handlebars failed compile apptemplatesforecasthbs use force continue related grunt task looks like emberhandlebars allow whitespace control project deps", "num": "4305", "d": "2/2014"}, {"title": "ember guides creating deleting records misleading usage examples", "body": "section deleting records correctly stated delete record call deleterecord instance dsmodel however example chance called promise object would suggest changing example something like", "num": "4304", "d": "2/2014"}, {"title": "findquery fails content", "body": "ember correctly calls rest interface fine results however none rest api returns content causes problem ember expects empty array logs following error response findquery must array undefined application working change api work around surely findquery handle better response returning empty array", "num": "4303", "d": "2/2014"}, {"title": "transitionto someroute undefined nooping cases", "body": "placeholder fix problem try flesh specific jsbin soon basically code tries provide model model expected work transition following nt working causing transition noop least setupcontroller set model undefined following fixed need investigate worked", "num": "4298", "d": "2/2014"}, {"title": "queryparams remember old state", "body": "controller go controller link go another page click next link redirect taskcontroller params queryparams remember state", "num": "4294", "d": "2/2014"}, {"title": "typo", "body": "differnt channels read post release cycle blog post different channels", "num": "4288", "d": "2/2014"}, {"title": "fear ember become fun", "body": "working work projects weekend fun working ember make painful thanks", "num": "4286", "d": "2/2014"}, {"title": "appending created component instance via componentfactory nt invoke didinsertelement", "body": "hey see container nt like longer tried using lookup component registered helper manually appending component view nt invoke function live example please note working ok replace manually registered component via handlebars helper auto registered component thanks", "num": "4284", "d": "2/2014"}, {"title": "meeting minutes", "body": "trek blog post would nice", "num": "4283", "d": "2/2014"}, {"title": "naming conventions guide uses term theoretically", "body": "second paragraph contains sentence following examples app name chose namespace represent ember application created theoretically choose name want application usage term theoretically suggests behavior resulting use another name confidently known function correctly confidently known valid js identifier work alternative phrasing could although unconventional may choose another name application simply removing word theoretically would also sufficient", "num": "4282", "d": "2/2014"}, {"title": "make ember initializers embertesting friendly", "body": "production apps custom initialize fetch global configuration permissions etc found embertesting nt initializer aware current implementation example test need mock xhr fired init method stub configuration example get test setup qunit init code already fired get around today monkey patch initializer invoke manually setup curious possible delay boot testing scenarios honestly curious option", "num": "4280", "d": "2/2014"}, {"title": "queryparamsnew unsorted queryparams produce duplicate history", "body": "controller unsorted duplicate history produce transit helper demo click link twice produce duplicate history wo nt happens application route app fix sorting controller manually works simplified demo fix sorting demo", "num": "4279", "d": "2/2014"}, {"body": "beerlington fyi understanding sticky queryparams going removed next iteration machty raytiley would know details", "d": "2/2014"}, {"body": "mutating array enumerating deletionsadditions may throw current position resulting unexpected results removeobjects suffering issue considered bug", "d": "2/2014"}, {"body": "guess approve nt intended behaviour try pr", "d": "2/2014"}, {"body": "dentuzhik yes believe pr fixing adding test fails currently would wonderful", "d": "2/2014"}, {"body": "rjackson thanks chance may go upcoming beta case successful pr", "d": "2/2014"}, {"body": "dentuzhik bugfixes bugs affect beta branch get pulled beta merged yes pr accepted get current beta series", "d": "2/2014"}, {"body": "found test modules nt even exist written bunch tests using pretty much code used module cases passed started investigation going seems like problem two places existing tests use function returns array items passed value seems like test suite wrong comes passing values reference initially test module done returns new value thus preventing passing value reference using code case tests passed create failing case create helper make testing code case finally failed tests unsure solution since create new helper abandon used lots places tests may case similar bugs may reproduced somewhere else although seems like mutationonly problem rjackson think nt pushed test even fork necessary", "d": "2/2014"}, {"body": "also problem tests give expected results prototype extensions enabled really sure handle gracefully", "d": "2/2014"}, {"body": "think one corner cases jquery promises obviate deficiencies normalize rsvp promise appears work correctly leave open known limitation jquery weaksauce implementation promises", "d": "2/2014"}, {"body": "created newer milestone jsbin demonstrates thing using exact syntax ember guide docs first callback", "d": "2/2014"}, {"body": "machty thanks answer think wrap promise rsvppromise happy workaround perhaps rely anything function promise instead check rsvppromise function case wrap rsvppromise similar done except user care another alternative think specific promise likely many developers using especially scenario route ajax returned promises common detect jquery promises wrap rsvp promises thoughts", "d": "2/2014"}, {"body": "bguiz assimilation already part promisea spec rsvp conforms issue jquery promises apparently nt work would recommend using something like icajax normalizes jquery ajax utilize runloop rsvp promises", "d": "2/2014"}, {"body": "stefanpenner thank much suggestion icajax works perfectly", "d": "2/2014"}, {"body": "hmm maybe actually part works prototypes js function myclass myclassprototypefoo function return bar myinstance objectseal new myclass myinstancefoo function return baz myinstancefoo bar", "d": "2/2014"}, {"body": "cases references controller", "d": "2/2014"}, {"body": "seeing use statement first loop outside second reference one objects array", "d": "2/2014"}, {"body": "output first iteration items name lt output children lt output children child children lt output generated index controller bug expected equal item name lt found output expected output thisname lt found output expected output output model ah damn see mean think bug", "d": "2/2014"}, {"body": "one debugger statement look debugger variables refer one objects array controller even made explicit prefixing", "d": "2/2014"}, {"body": "updated example indeed bug", "d": "2/2014"}, {"body": "title issue template rendered named outlet use outlet", "d": "2/2014"}, {"body": "hitting well fix define sub routes manually specify parameter", "d": "2/2014"}, {"body": "seems like template rendered outlet considered child looks like probz lies trying compute based lastrenderedtemplate", "d": "2/2014"}, {"body": "think found fix post info later tonight", "d": "2/2014"}, {"body": "guess design problem app code parent component calling nt bubble route parent component another component nested inside parent component actually handles actions child component displays text pr issue fixes", "d": "2/2014"}, {"body": "actually changing second value override first fixes problem working jsfiddle internally copying keywords new localized set options block specified added context bind destination fiddle source fiddle essentially means inside template referencing summary believe simply support aliasing name", "d": "2/2014"}, {"body": "could definitely benefit documentation notating limitation", "d": "2/2014"}, {"body": "yes noticed works changing variable name something else also think documented clear allowed expecting first occurrence x reference outer scope mostly option x references value defined nt seem useful", "d": "2/2014"}, {"body": "closing favor pr adding documentation", "d": "2/2014"}, {"body": "override need call ensure internal component initialization occurs generally case overriding internal methods hooks implemented specifically purpose working jsbin docs classes instance initialization", "d": "2/2014"}, {"body": "nt know much jquery think kind found source issue function applies attributes dom elements views js emberviewapplyattributebindings function elem name value var type embertypeof value changes also change logic emberhandlebarslibhelpersbindingjs name value amp amp type string type number amp amp isnan value value elemattr name elemattr name value else name value type boolean emberisnone value value false remove attribute elemremoveattr name elemprop name else value elemprop name line value always properties elemprop name value else value elemremoveattr name marked line fails thereby causing attribute applied looking bit deeper fails jquery says element already attribute ran following jquery selectors console option selected selected true prop selected true jquery ca nt find elements attribute asked element directly says selected says tags without even decent knowledge jquery wo nt speculate going wrong certainly seems like bug", "d": "2/2014"}, {"body": "abrom sounds like good fix would mind submitting pr possibly test illustrating issue make sure nt future regression", "d": "2/2014"}, {"body": "possible missing something seems list implemented computed property dependent options would need customization totally untested illustration coffeescript selectinputcomponent embercomponentextend value options dog cat fish list emcomputed options key value options get options list ema", "d": "2/2014"}, {"body": "thanks thats way better implementation still nt think behaviour occur", "d": "2/2014"}, {"body": "seifsallam dig figure actually happening confirm incorrect definitely seems wrong surface though change fix issue", "d": "2/2014"}, {"body": "rjackson partially still hiccups trying fix generally values correct", "d": "2/2014"}, {"body": "rjackson tried wo nt able observe elements inside list depending", "d": "2/2014"}, {"body": "ember expert nt believe embermap implements emberenumerable result ca nt observe property changes map bad hopefully feature gets added future confusing made embermap behave like enumerable missing observable functionality", "d": "2/2014"}, {"body": "beerlington got still debugging found put default value works", "d": "2/2014"}, {"body": "abuiles tried default values looks like really works default value matches query param otherwise sticky params still lost", "d": "2/2014"}, {"body": "beerlington nt found exactly issue noticed example value param still even though already change url", "d": "2/2014"}, {"body": "beerlington correct default value nt change either", "d": "2/2014"}, {"body": "beerlington fixed", "d": "2/2014"}, {"body": "confirm issue using ember transition fails without error indication failure template named incorrectly also navigating directly route got error saying call method shouldsupercede null", "d": "2/2014"}, {"body": "certain seems like normal promise made one time use type thing nt seem like intended handle swapping internal promise like trying least see code mixin infers handle", "d": "2/2014"}, {"body": "reason way always use arraycontroller promiseproxymixin reason load model route model hook want display loading spinner page loaded way create promise object set controller also use arrayproxy promiseproxymixin build model layer classes seems ed promisearray uses way collection wants reload data think replace new things wrong way tell better way much appreciate", "d": "2/2014"}, {"body": "think reasonable isfullfiled isrejected reset promise changes", "d": "2/2014"}, {"body": "take time research ember ember data uses promiseproxymixin first ok make pr", "d": "2/2014"}, {"body": "checked ember ember data source ember nt use promiseproxymixin ember data mixin used promisearray promiseobject seems records need reload new promisearraypromiseobject created safe modify mixin sure needs discussion submit pr currently even without feature also work code", "d": "2/2014"}, {"body": "pr tests would great", "d": "2/2014"}, {"body": "coffeescript works promiseproxy embermixincreate emberpromiseproxymixin promisedidchange emberimmediateobserver promise setproperties isfulfilled false isrejected false content null reason null", "d": "2/2014"}, {"body": "would accept pr adds reset", "d": "2/2014"}, {"body": "stefanpenner problem add tap function tests", "d": "2/2014"}, {"body": "awesome thanks", "d": "2/2014"}, {"body": "factorycache caching resolver returns factory change resolved repeated resolving factory nt incur penalty resolving strategies impose singleton factory instantiated stored container cache nonsingleton factory instantiated cached believe current behavior working expected closing issue", "d": "2/2014"}, {"body": "seeing problem well another fiddle reproduce problem guides mention work see offending section transitioning nt exist stops looking since pivot handler machty intended behavior looks like guides need pull request", "d": "2/2014"}, {"body": "actions bubble top shown loading substates entered pivot route would mean tearing bunch templates nt need torn order perform intermediate transition loading substate sounds like might want use loading action handler apply global loading spinner something blurb docs suggests behavior describing maybe could clear way loadingerror substate resolution differs error events continue bubble transition pivot route bug maybe docs could improved", "d": "2/2014"}, {"body": "machty gotcha thanks good explanation", "d": "2/2014"}, {"body": "believe", "d": "2/2014"}, {"body": "failing jsbin treats object array nearly equivalent", "d": "2/2014"}, {"body": "put amd shim let pass module name first argument frustrating using handlebars amd way leave anonymous people put wherever file systems choose", "d": "2/2014"}, {"body": "fivetanley", "d": "2/2014"}, {"body": "fivetanley thought could clarify link somewhere would import ember anonymous note nt familiar anon modules mentioned even though googled bunch probably misunderstanding", "d": "2/2014"}, {"body": "could please try demonstrate behavior jsbin", "d": "2/2014"}, {"body": "tried jsbin first could nt work visit given route provided app instructions reproduce issue instead code jsbin find see behaviour visiting link clicking checkout followed login easier way navigate route jsbin", "d": "2/2014"}, {"body": "stefanpenner confirm bug put together pr pretty quickly", "d": "2/2014"}, {"body": "believe bug", "d": "2/2014"}, {"body": "dup", "d": "2/2014"}, {"body": "template referencing defining default setup alias overriding therefore removing default alias really sure working though alias nt seem changed going use seems fine would need use everywhere setup alias noticed set instead model existing alias still work make value", "d": "2/2014"}, {"body": "actually see mean updated jsbin handlebars refers check boxes click delete action runs controller count one places breaking real app modal rendered action like length change property model content jsbin everything works would expect major would call breaking change stumped happened upgrading", "d": "2/2014"}, {"body": "content set alias model controller way around proxies consume content consume model model cp work correctly", "d": "2/2014"}, {"body": "something meaning fix nt got around", "d": "2/2014"}, {"body": "useful synthesize property change events occasion example invalidate cp", "d": "2/2014"}, {"body": "saying click select one thing hit delete nt get routed back companiesconstruction route seem work fine jsbin", "d": "2/2014"}, {"body": "jespr take steps said see main outlet content behaviour expected solved though advice", "d": "2/2014"}, {"body": "gonvaled even specify options hash method refer working bin", "d": "2/2014"}, {"body": "oooops missed exactly wanted close thanks", "d": "2/2014"}, {"body": "implicit route even nt explicitly define one ultimately translates fixed bug causing hooks routes nt need reevaluated way eg transition model hooks nt run avoid wasteful computation server queries think affecting case transitioning sibling routes nt going refire logic model hooks route nt invalidated way want define redirect logic would always worked past", "d": "2/2014"}, {"body": "feel linking expected think confusing even confusing add redirect hook feel like edge case exception want link routes worry fear might number places feels unnecessary", "d": "2/2014"}, {"body": "stage would prefer wasteful computation strange behaviour would expect links work", "d": "2/2014"}, {"body": "link routes worry move hook amount code", "d": "2/2014"}, {"body": "case functionally equivalent mean move", "d": "2/2014"}, {"body": "machty work around problems multiple ways immediate concern thinking long term surprising behaviour things seem like work", "d": "2/2014"}, {"body": "add assertions alert user going wrong path", "d": "2/2014"}, {"body": "sure behavior describing expected nested route hierarchy course resource expected invoke hooks", "d": "2/2014"}, {"body": "would expect behave way part application code different places different situations", "d": "2/2014"}, {"body": "certainly struck unexpected would raised issue", "d": "2/2014"}, {"body": "really think missing nt catch breaking change make lot noise upon release nt think sort assertions add case way code actually serve welldefined purpose transitions hierarchy must pass whatever validationredirection put model hooks case different expect links within hierarchy refire hooks involve entry route nt make conceptual sense would expect behave way part application code different places different situations way goal much welldefined goal hierarchical structures involved given data required performcomplete transition different depending app state well transitioning tofrom links going behave way depending present context want hear suggestions making things straightforward need make sure conceptual page things way least think agree loudly mentioned potential breaking change upon release", "d": "2/2014"}, {"body": "hindsight yes would good aware problem remains want everything displayed ca nt child route change create put hook undefined model passed hook use could use controllerformodelfor feels like working round problem least feel natural", "d": "2/2014"}, {"body": "good news betacanary feature routes nt specify model inherit model parent resource released weeks able need use modelfor succinct kind unsuccinct means code smell", "d": "2/2014"}, {"body": "certainly sounds better although think waiting next upgrade", "d": "2/2014"}, {"body": "yeah feel ya sorry one rough talking others see ifhow prevent sort thing lot undefined behavior routerjs microlibs ironed unfortunately feel pain illdefinedundefined behavior solidifying direction broke app let know approach ends working meantime", "d": "2/2014"}, {"body": "unfortunately circumstance relying buggy behavior nt want afraid upgrades upgrading app within week release one us wrong", "d": "2/2014"}, {"body": "machty hook works funny thing realised big work around counteract model hooks always firing", "d": "2/2014"}, {"body": "oh please tell get rid workaround would silver lining", "d": "2/2014"}, {"body": "well ends well thanks input cheers paul cowan cuttingedge solutions scotland blog website february alex matchneer notifications githubcom wrote oh please tell get rid workaround would silver lining reply email directly view github", "d": "2/2014"}, {"body": "woooo hoooo could close alreadyclosed issues", "d": "2/2014"}, {"body": "seems bad ping machty", "d": "2/2014"}, {"body": "needed provide jshint would need create save effort think issue clear enough", "d": "2/2014"}, {"body": "gonvaled time provide jsbin would great", "d": "2/2014"}, {"body": "also sure canary beta release", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "take look commentuncomment line bug see described effect", "d": "2/2014"}, {"body": "well crap changing beta build fixes issue bug technically already fixed probably merged beta released stefanpenner think worth new release", "d": "2/2014"}, {"body": "machty likely seems like may afew regressions want fixup though", "d": "2/2014"}, {"body": "far tell several problems exist jsbin instantiating controllers without going container leaves without container truly need instantiate suggest item view template calls render without context called time use singleton foo controller context looping list must provide context appropriate", "d": "2/2014"}, {"body": "may bug first issues prevented actually getting bug", "d": "2/2014"}, {"body": "stefanpenner changed like right still working", "d": "2/2014"}, {"body": "updated bin", "d": "2/2014"}, {"body": "excellent thanks stefanpenner selvag", "d": "2/2014"}, {"body": "oscarvgg confirm issue exists close guy thanks selvag", "d": "2/2014"}, {"body": "oscarvgg fixed container lookup controller previous jsbin updated working bin", "d": "2/2014"}, {"body": "oscarvgg working mean demonstrates issue demonstrate issue", "d": "2/2014"}, {"body": "stefanpenner issue nested collection views problem nt looking controller lookup factory", "d": "2/2014"}, {"body": "selvagsz noticed problem previous bin sorry nt tell got idea important thing", "d": "2/2014"}, {"body": "ping machty", "d": "2/2014"}, {"body": "yeah router refactor changed flattened hash params deeper hash params keyed route name seeing original approach broken unable handle cases two different params route hierarchy name clobber flattened version nt think every documented marked public api though understand utility cases sure really falls semver category nt really think reverse though perhaps better documented breaking change though honestly surprised many people know ituse", "d": "2/2014"}, {"body": "think number gotchas least finding", "d": "2/2014"}, {"body": "please let us know else finding nt fall category flattened params hash", "d": "2/2014"}, {"body": "machty true say model hooks running async think different behaviour hook executing running caused problems ca nt recreate one jsbin probably return promise hook", "d": "2/2014"}, {"body": "sounds completely crazy nothing like wouldshould ever snuck without someone noticing also update persistence library eg ember data ember model might changed whether promise returned api lem know isolate jsbin doubts one", "d": "2/2014"}, {"body": "machty using emberdata old version updated reverting makes problem go away hard one track impossible recreate jsbin think", "d": "2/2014"}, {"body": "unsure possiblepractical try bisect", "d": "2/2014"}, {"body": "im proposal problem clear would love hear others thoughts", "d": "2/2014"}, {"body": "close might need wait til htmlbars though form sexpr though", "d": "2/2014"}, {"body": "machty sexpr subexpression concept handlebars eg new query params feature could done", "d": "2/2014"}, {"body": "seems bad know big pain reproduce failing test case would tremendous help", "d": "2/2014"}, {"body": "jsbin issue trying recreate router bugs", "d": "2/2014"}, {"body": "ah ok mind quickly refactoring issue provide step step makes much easier digest step step step expected got", "d": "2/2014"}, {"body": "sure problem number places components losing context recreated issue problem component used different templates template component templates component declared like component clicked uses sentaction call action like component template action sent component template action sent stepped code reason action sent target triggeraction function click one items sidebar jsbin transition bulkactions route component send action triggeraction function opts opts opts var action optsaction get action target optstarget get targetobject actioncontext optsactioncontext", "d": "2/2014"}, {"body": "maybe illustrates better boxes left sidebar able call action via sendaction component component main body able call action via sendaction target triggeraction", "d": "2/2014"}, {"body": "still sure cause yet looks like component main outlet set causes find target mentioned try review detail tonight", "d": "2/2014"}, {"body": "undefined clicking component main outlet odd", "d": "2/2014"}, {"body": "ah think could extract jsfiddle failing test case help lay groundwork fix", "d": "2/2014"}, {"body": "bitten sure rationale", "d": "2/2014"}, {"body": "would good compromise accept either array multiple parameters way nt break backwards compatibility either get consistency two", "d": "2/2014"}, {"body": "likely duplicate various others unfortunately need love many little quirks bugs aware unfortunately bandwidth sort yet hopefully soon", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "still working provide really rock solid queryparams solution hope solve current issues cycle", "d": "2/2014"}, {"body": "see thanks effort hope queryparams restored betarelease builds soon", "d": "2/2014"}, {"body": "enabled default prior beta release builds first couple betas beta series accidentally left nonenabled feature flagged features build intentional corrected later betas sytong sorry mistake caused confusion hope caused much trouble definitely working hard get enabled default soon possible maybe even beta series", "d": "2/2014"}, {"body": "work final api fix bugs cropup feature available canary builds please note still need optin enabling feature flag ember loaded made mistake initial beta branching process working caused flagged features still present builds sorry caused trouble confusion anyone general feature flagged code included builds feature ready betarelease enabled default used without using environment flags", "d": "2/2014"}, {"body": "sharethis using enumeration without checking given common extending really update guard case configure ember extend prototypes", "d": "2/2014"}, {"body": "trek likely start making defproperties nonenumerable last time tried though emberstates broke pretty quickly backwards compatibility concern mine big", "d": "2/2014"}, {"body": "added windowenv envextendprototypes false still getting error", "d": "2/2014"}, {"body": "example note env set loading emberjs", "d": "2/2014"}, {"body": "mixonic", "d": "2/2014"}, {"body": "mixonic always feel like flags error try set late", "d": "2/2014"}, {"body": "set models fails say longer supports property observes assuming need able extend prototypes live error take share completely fix thank prompt replies", "d": "2/2014"}, {"body": "js function property foo becomes js embercomputed foo function", "d": "2/2014"}, {"body": "also beable disable array prototypes see", "d": "2/2014"}, {"body": "try using see ember swallowing error place line beginning application file also please try better error handling stuff added believe could also jsbin example behavior", "d": "2/2014"}, {"body": "isolate jsbin jsfiddle", "d": "2/2014"}, {"body": "jinx", "d": "2/2014"}, {"body": "partial jsfiddle code first time use jsfiddle nt know put webapi code webapi basically returns list city name id webapi controller would never get hit put emberonerror function error throw new embererror error still error raised", "d": "2/2014"}, {"body": "file using jqgrid seems respond error chrome console tells jquery method jqgrid caused aforementioned", "d": "2/2014"}, {"body": "updated jsfiddler using project however latest version jqgrid file locally", "d": "2/2014"}, {"body": "latest fiddle contains ember previous fiddle going dom manipulation route happen view suspect reorganize code case much better situation far nt appear like bug ember ill gladly reopen demonstrated suggestion would open stackoverflow question accomplish correctly really good venue knowledge sharing issue tracker unfortunately great feel free cross link", "d": "2/2014"}, {"body": "last fiddle last post source used include jqgrid nt part original question sorry confusion relevant fiddler still actually nothing route array names part starting template ember code nt really anything render grid content perhaps misunderstood comment", "d": "2/2014"}, {"body": "sorry controller work view also nt believe exists api ember emberdata", "d": "2/2014"}, {"body": "moved everything view still request nt sent web service something disabled function jqgrid latest jsfiddler code", "d": "2/2014"}, {"body": "unconsumed computed properties trigger observers never computed property observers fire even dependent keys change think value changing one unknown value another nt usually affect application code computed properties almost always observed time fetched example get value computed property put dom draw observe update dom property changes need observe computed property nt currently retrieving get method also use prototype extension fire observer method init assuming cp value observers usually", "d": "2/2014"}, {"body": "thanks much explanation luke big help feb pm luke melia notifications githubcom wrote closed reply email directly view github", "d": "2/2014"}, {"body": "actually think actionable one wycats motivations emberdata identity map default scenario pulling data fetched local cache needs work case refreshing said local cache example clicking backbutton rerequest transition smooth one would expect clearly approaches need good solution managing stale data would big win apps rather going emberdata route may want consider provide strategy set strategies mitigate problem", "d": "2/2014"}, {"body": "often see sort thing people ditch model hooks load bunch stuff like setupcontroller something like means paint multiple times async data comes vs waiting destination route promises resolve single paint", "d": "2/2014"}, {"body": "interesting perhaps need improving performance avoiding rerequests people weird async stuff model hooks might try defer updating dom state settled avoid screen flicker", "d": "2/2014"}, {"body": "sounds undetectable probably undesirable wrong provide escape valve folk ca nt fit every last thing means necessarily opting repaints async involved maybe get better idea approach nt work contact info authors", "d": "2/2014"}, {"body": "contact info authors nt semirelated nt currently way distinguish backbutton transitions forward transitions might cases expensive things forward transitions model reloading animations etc would nt want user hits back button", "d": "2/2014"}, {"body": "joliss ya even identity map invalidated normal transitions backbuttons would fix specific issue", "d": "2/2014"}, {"body": "think key really minimizing requests instead pretend like request happened instead pause made equally janky experience optimizing requests make big difference", "d": "2/2014"}, {"body": "joliss absolutely rely described weird async behavior implement lazyloading functionality applications guidelines outbound data requests route model hook override necessary deal properly setting values anything single request means gets overwritten kick async loading data hook nt return promises hook make sure set things properly deal race conditions results primary render blocks core data loaded lazilyloaded components load css transitions win race beat promises great present first render outbound requests made parallel one place look data loaded patterns like big part embernodata solution felt need something handling sort async load nonessential data cleanly deals resulting race conditions aside use exclusively redirection machty put late cycle use case anyway", "d": "2/2014"}, {"body": "think need way freeze views animated properly back transition ios smooth two uiviewcontroller instances also makes swipe gesture possible ember instant new loading substates used data framework like ember data provides cached data smooth animate one associating directionality transitions could helpful animations joliss example relayouts styling mistakes image dimensions known image finishes loading total lack animations destroys experience compared ipad app", "d": "2/2014"}, {"body": "ember going get first class animation support including directionality mentioned majorbreakfast probably wo nt land months hugely challenging probably substantial chunk code nathanhammond seen", "d": "2/2014"}, {"body": "machty glad hear thinking stuff basically area experise routerviewlayer definitly super hard get right without doubt", "d": "2/2014"}, {"body": "majorbreakfast freezing views actually part plan idea actually disconnect bindings enable animations", "d": "2/2014"}, {"body": "think holy grail ios swipe gesture fixed duration user input interruptible ember nt support directly nt stand way either", "d": "2/2014"}, {"body": "machty loading behavior defined well advance new loadingerror substate stuff landing loading routes actually became usable thanks actually nt use promises return value instead solved loading templateview layer everything css blocks computed properties actually made relatively easy support partially moving away behavior could move async additional data nt block render calls hook continue life could fire completed hook earlier lifecycle care nt gets called lifecycle hook chose abuse hook define pattern consistent throughout codebase", "d": "2/2014"}, {"body": "bug questions please use stack overflow much better venue knowledge sharing", "d": "2/2014"}, {"body": "likely observing observed consider making", "d": "2/2014"}, {"body": "fact observing state speech balloon component intended wrap view decorate shadow little triangle rendered svg thinking size inner view would drive size balloon thus bunch svg attributes bound computed properties need able call getboundingclientrect inner view element naturally nt work well inner view nt dom hoping able get around computed properties bail inner view nt dom recompute component state changes alternative way accomplish without dramatically restructuring things", "d": "2/2014"}, {"body": "nt observable likely consider moving although suspect breaking change also error message nt good totally improve would interested pr improving error message second question stackoverflow much better venue sort help suggest cross linking issue", "d": "2/2014"}, {"body": "work around", "d": "2/2014"}, {"body": "stackoverflow much better venue asking help mind opening question please feel free cross link", "d": "2/2014"}, {"body": "cc seems related optimization rerender route transitions models route hierarchy changed", "d": "2/2014"}, {"body": "yes intentional new view object gets instantiated see code changes reason view gets pick template context wants render ca nt tell template context unchanged instantiating view way avoid creating unused view object would change view api views longer dynamically override things probably worth", "d": "2/2014"}, {"body": "thanks seems intentional likely change time soon closing", "d": "2/2014"}, {"body": "think strongly consider take another approach prevents view needing instantiated preserving optimization", "d": "2/2014"}, {"body": "seems common theme walking prototype anyone", "d": "2/2014"}, {"body": "think exists path defer actual creation views till much much later merely passing view factory around till last moment likely sort enable sorting several quirks", "d": "2/2014"}, {"body": "hmm ok still learning ember code base trying wrap head around changing view template context model change specific use case example jsbin something help get better idea something like would expect override rendertemplate route enforcing acceptable solution equality check views could moved route render method", "d": "2/2014"}, {"body": "likely related dig fix shortly", "d": "2/2014"}, {"body": "yeah ran ca nt break jsbin ucanam streak", "d": "2/2014"}, {"body": "looks like fixed", "d": "2/2014"}, {"body": "parrish actually unrelated error getting issue fixed", "d": "2/2014"}, {"body": "ah seen commit fixed build assumed culprit thanks looking", "d": "2/2014"}, {"body": "yeah build never failed publishing calling would cause transpile step ensures called", "d": "2/2014"}, {"body": "fixed applying monkey patch ember javascript var willdestroy viewwilldestroy viewwilldestroy function containerresolvecacheremove controllerfullname controllerdestroy willdestroycall", "d": "2/2014"}, {"body": "imo nt correct approach targets problem", "d": "2/2014"}, {"body": "according would seem controller singleton hence wo nt destroyed", "d": "2/2014"}, {"body": "docs model property path specified new instance controller created used multiple times name case would want tear controller tear controller singleton usage", "d": "2/2014"}, {"body": "could labeled bug correct pile issues", "d": "2/2014"}, {"body": "timevans labeled", "d": "2/2014"}, {"body": "stefanpenner heart", "d": "2/2014"}, {"body": "knownasilya open", "d": "2/2014"}, {"body": "yeah created could nt find delete submitting pr", "d": "2/2014"}, {"body": "either handlebars date andor something wrong canary enabled query params feature", "d": "2/2014"}, {"body": "jonnii thanks reply totally new emberjs like much trying learn using starter kit downloaded emberjscom please let know enable query params feature", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "believe also need beta branch", "d": "2/2014"}, {"body": "definitely use canary builds number bugfixes canary make beta since feature enabled default", "d": "2/2014"}, {"body": "eldilibra find working getting right issue still exists please provide jsbinfiddle demonstrating issue", "d": "2/2014"}, {"body": "thanks checking selvag whip fiddle soon time", "d": "2/2014"}, {"body": "behaviour test expected like computed properties created lazily initially add sorted array insert beforehand first expectation pass test changing observed properties two entries fires twice entry property change sorted item results removal addition length decrements increments problem nt trigger observers watched key set value observers trigger watched key cp whose depkey changed", "d": "2/2014"}, {"body": "lukemelia understood kselden problem length observer would nt fire item readded different test lukemelia yes misunderstood something", "d": "2/2014"}, {"body": "indream thank reporting fixed", "d": "2/2014"}, {"body": "opened pull request review deep knowlage codebase sure better way fix could give feedback", "d": "2/2014"}, {"body": "semantics identical said think expected semantics even difference important someone pretty nonobvious", "d": "2/2014"}, {"body": "pretty strange diverges immediately hmm", "d": "2/2014"}, {"body": "jamesarosen also find conceptually confusing list default dk", "d": "2/2014"}, {"body": "originally opened surprised permanently diverged implementation could set would reconverge soon upstream changed probably dangerous figure relying behavior likely answer keep global state around apps since apps use ember router amp container create tear views controllers user navigates around", "d": "2/2014"}, {"body": "ember update system works per property basis changing object merely value trigger updates change dependent key everything works expected", "d": "2/2014"}, {"body": "nt know name property added feb pm stefan penner notifications githubcom wrote ember update system works per property basis changing object merely value trigger updates change dependent key testhi everything works expected reply email directly view github", "d": "2/2014"}, {"body": "guess workaround would increment property every time add change property observe", "d": "2/2014"}, {"body": "yes would responsibility object propagate information believe concept maybe explored something support today", "d": "2/2014"}, {"body": "another idea use custom notifies change upon setting individual property content", "d": "2/2014"}, {"body": "rjackson yes also works level deep good suggestion", "d": "2/2014"}, {"body": "rjackson ca nt seem get working js resultgroups emberobjectproxyextend setunknownproperty function key value thissuper key value create content emberobjectcreate", "d": "2/2014"}, {"body": "rjackson something wrong", "d": "2/2014"}, {"body": "think better stack overflow question", "d": "2/2014"}, {"body": "stefanpenner right", "d": "2/2014"}, {"body": "seems like duplicate slindberg confirm", "d": "2/2014"}, {"body": "rjackson think different issues without digging ca nt say sure deals links current route falsely marked active whereas problem links routes farther current route chain getting marked active", "d": "2/2014"}, {"body": "clozedbai", "d": "2/2014"}, {"body": "lfalin probably kurko give us insights also might right place issue related docs hence emberwebiste", "d": "2/2014"}, {"body": "likely better stackoverflow question please feel free cross link", "d": "2/2014"}, {"body": "stefanpenner asking programming howto question reporting conflicting information documentation nt want hurt anyone feelings one biggest complaints seen ember vs angular api changes often hard find reliable uptodate information use fine api change think reasonable expect least official documentation would consistent sync changes also mentioned happy fork docs make edits nt appear enough authoritative information choose one way another like ember would love see widely adopted happy help abuiles right place put issue understanding docs autogenerated code comments repo seemed appropriate place report issue", "d": "2/2014"}, {"body": "lfalin ember stable api really nt changed since maybe additions nt believe valid concern anymore issue seems related emberdata working hard also reach stability ember property concern guides please open issue website repo issue emberdata related api docs please open issue ember data repo", "d": "2/2014"}, {"body": "lfalin right right place put issue understanding docs autogenerated code comments repo seemed appropriate place report issue stuff api auto generated emberdata fixed stuff guides emberjswebsite would say let go easier understand nt confuses people stuff", "d": "2/2014"}, {"body": "thanks everyone nt realise guides emberdata separate repositories one sorry still new ember great framework though", "d": "2/2014"}, {"body": "problem trying keep stuff organized", "d": "2/2014"}, {"body": "fwiw defined", "d": "2/2014"}, {"body": "thanks found code well nt immediately obvious least", "d": "2/2014"}, {"body": "closing emberjswebsite", "d": "2/2014"}, {"body": "hjdivad really need port sortable stuff array computed", "d": "2/2014"}, {"body": "use embercomputedsort want sort properties itemcontroller", "d": "2/2014"}, {"body": "stefanpenner would love blocked order support full backwards compatibility", "d": "2/2014"}, {"body": "blocked decision core backwards compat existing core macros", "d": "2/2014"}, {"body": "levelbossmike thanks jsbin", "d": "2/2014"}, {"body": "suppose bug somehow object behaves strange way either use return different array", "d": "2/2014"}, {"body": "right use workaround quite unreadable", "d": "2/2014"}, {"body": "michlord maybe example expects record already loaded store fix example make explicit please open issue cc trek", "d": "2/2014"}, {"body": "ok", "d": "2/2014"}, {"body": "singingbush could please open issue emberdata", "d": "2/2014"}, {"body": "ok recreated", "d": "2/2014"}, {"body": "singingbush please close one", "d": "2/2014"}, {"body": "closing favor alternate issue", "d": "2/2014"}, {"body": "correct behaviour query params tied properties controllers property changed controller query param remains query params guide gives detail clearing query params", "d": "2/2014"}, {"body": "guides stored repo actual file could send pr fix", "d": "2/2014"}, {"body": "ah look hard enough submitted", "d": "2/2014"}, {"body": "pain go back one year", "d": "2/2014"}, {"body": "smiley", "d": "2/2014"}, {"body": "ya serious regression workaround follows", "d": "2/2014"}, {"body": "stefanpenner applied shit broken wan na pair wink", "d": "2/2014"}, {"body": "thread excites given experience ember year old", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "considered mixing angular", "d": "2/2014"}, {"body": "one word ie", "d": "2/2014"}, {"body": "scshepard prefer netscape imo", "d": "2/2014"}, {"body": "ha used netscape twenty seconds deleted itha date sun feb notifications githubcom emberjs noreplygithubcom cc scshepard hotmailcom subject emberjs fear ember become fun scshepard prefer netscape imo reply email directly view github", "d": "2/2014"}, {"body": "oh god one year ago nt even knew ember", "d": "2/2014"}, {"body": "see container nt like component xx longer unsure mean components looked container via tried using componentfactory lookup component registered helper manually appending component view nt invoke didinsertelement function registering handlebars helper add factory container thus call find since registered container reason fire called custom component found created empty component wired use template words never used modified jsbin use initializer register component container", "d": "2/2014"}, {"body": "rjackson thanks clarifying registration via problematic library code use register components programmatically place probably u remember appropriate way achieve without requiring users add initializers", "d": "2/2014"}, {"body": "number libraries add initializers library required consumers include anything special seems perfectly acceptable examples", "d": "2/2014"}, {"body": "thing", "d": "2/2014"}, {"body": "reschedule google outage away traveling laid low nasty cold coming", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "would mind submitting issue write pr thanks", "d": "2/2014"}, {"body": "ah", "d": "2/2014"}, {"body": "would like prevent initializers running till test phase", "d": "2/2014"}, {"body": "curious run test driving app code need special treatment like feeling test code", "d": "2/2014"}, {"body": "personally usually handle form asynchrony application route get nice loading template going possible similar things initializers least use cases felt somewhat place maybe different", "d": "2/2014"}, {"body": "initializers run upon initialize application subsequent call put together quick jsbin illustrate toranb saying would prefer initializers run upon", "d": "2/2014"}, {"body": "may also meant test code running initializer async finished easiest way handle add call module setup routine individual test nt another example jsbin", "d": "2/2014"}, {"body": "rjackson corrected looks like appreset work mentioned initial complaint updated jsbin show example rsvpall never actually fires test code runs even using wait mentioned chance way calling embertesting wo nt wait rsvp finish odd reason", "d": "2/2014"}, {"body": "toranb following code incorrect likely addition intializer likely also likely stackoverflow post", "d": "2/2014"}, {"body": "closing think initializers alright testing scenarios", "d": "2/2014"}, {"body": "epic fail part sorry waste everyone bandwidth", "d": "2/2014"}, {"body": "toranb worries gave good excuse make jsbin uses async initializers smile", "d": "2/2014"}, {"body": "also definitely think usage separate class like example wonderful idea allows test initializer code simple stubs", "d": "2/2014"}, {"body": "finally got jsbin working include test embertesting package regression purposes nothing else provide good example others might follow looked embertesting tests nt see anything like alsowait required setup resolve rsvp like metioned rjackson thanks help guys", "d": "2/2014"}, {"body": "indream talked machty irc saw bug old jsbin well seems legit want throw together pr nt want nt time let know put together pull request want get credit since posted issue figured fix", "d": "2/2014"}, {"body": "machty dunno explicitly defined routes like similar would nt regex exclude list available routes assertion would swap one bug another", "d": "2/2014"}, {"body": "also since implicit routes actually added recognizer technically link nt list though end probably probably bug well though since transitioning error route shows notsopretty dummy path sounds like nt recognized names instead new private handler would used transition would kill two birds one stone", "d": "2/2014"}, {"body": "machty sure still applicable issue tried hand solving anyway used computed property maintain list friendly route names filtering error loading route names without iterate entire list went route performance reasons noticed errorloading routes always first offsets existing route name array get chance appreciate quick review see point", "d": "2/2014"}, {"body": "avaragado probably investigate bit however think error view layer note jsbin problem body invocation include tag rather immediately outputting tags seem specific jsbin related real problem", "d": "2/2014"}, {"body": "avaragado another way work around problem entire app enable range api following note must come load ember seems bug metamorph table handling", "d": "2/2014"}, {"body": "look later feeling ebryn kselden may able help problem seems entire body rendered buffer process use metamorph function wind start tags end tags different parents table implicit tbody respectively metamorph also first child view problem manifests first record able work around problem omitting tbody tags templates would nt recommend falling back range api unless fixing templates impractical", "d": "2/2014"}, {"body": "ok thanks", "d": "2/2014"}, {"body": "cc machty", "d": "2/2014"}, {"body": "closing favor pr", "d": "2/2014"}, {"body": "machty waiting", "d": "2/2014"}, {"body": "discussions w wycats", "d": "2/2014"}, {"body": "finally managed create jsbin shows initially joe member party amp list bottom shows members party open console tab issue upper list updates list nt although theres explicit error thrown described think result related problem edit might bug probably unrelated issue even happens without sorting part", "d": "2/2014"}, {"body": "hjdivad first glance appears similar issue true propagating extra change notifications coming emberdata fixing involve good time consuming refactor computed properties work likely somewhat breaking also seems like issue array computed reduce computed exists brought light extra change events ultimately need fix sides problem shortterm seems like arraycomputed target", "d": "2/2014"}, {"body": "seems environment show bug little hard reproduce thus hards diagnose helps offer life vncsession examine original setting time", "d": "2/2014"}, {"body": "fwoeck problem jsbin inverse relationship updated problem noted problem ember data nt think completely resolved single source truth done relationships meantime many many relationships think need responses include updates sides relationship see example although using rest active model adapters able include sides payload stefanpenner please correct errors", "d": "2/2014"}, {"body": "fwoeck upon reflection unsure posted jsbin reflects original problem would probably good walk vnc session kindly offered see original issue try set something email", "d": "2/2014"}, {"body": "curious anything come legit bug good workaround", "d": "2/2014"}, {"body": "longer issue latest build assume got handled elsewhere", "d": "2/2014"}, {"body": "thomassnielsen think could take shot", "d": "2/2014"}, {"body": "pretty busy time put time list wo nt intervene someone though", "d": "2/2014"}, {"body": "wagenet thomassnielsen took shot providing docs", "d": "2/2014"}, {"body": "sounds good", "d": "2/2014"}, {"body": "seems like thread connected ember extension issue", "d": "2/2014"}, {"body": "braddunbar actually works fine latest chrome could confirm still happens let us know browser adjust jsbin breaks", "d": "2/2014"}, {"body": "hi jayphelps thanks response probably mentioned unable break jsfiddle issue requires navigating directly using router already correct fragment navigates without issue however retrieving fragment locationpathname page load value using chrome nt match", "d": "2/2014"}, {"body": "history location implementation requires server understands ca nt test jsbin jsbin giving", "d": "2/2014"}, {"body": "yep yep used node server debug locally", "d": "2/2014"}, {"body": "thanks smiley", "d": "2/2014"}, {"body": "seeweer good question let see get clarification", "d": "2/2014"}, {"body": "gon na toss entirely resolved issue promised would nt spend time fighting anyway sad", "d": "2/2014"}, {"body": "hello stefanpenner update", "d": "2/2014"}, {"body": "closed included beta series", "d": "2/2014"}, {"body": "closing favor pr", "d": "2/2014"}, {"body": "hey team started using ember working getting pure js client working google auth using historylocation discovered historylocation geturl respecting locationhash part setting history current geturl drops locationhash fragment first thoughthack inject location hash url breaks router parser tries match full string instead generating path request may natural update routing engine ignore location hash routing historylocation use sure effects design hashlocation router second though alter location hash query param works nt break routing parser issue wanting flush queryparams url really happy erase hash params history location need consistent way access historylocation lasthash hope makes sense glad see worked new emberjs aware design protocol team follows years web experience excited framework", "d": "2/2014"}, {"body": "robotarmy sounds like similar issue mmun working supporting type scenarios phases first classes strip hash content nt route related work done ready using would access would normally start working emberidiomatic way accessing hashes supports doubled hashes eg let support well", "d": "2/2014"}, {"body": "digging ready using historylocation would access would normally windowlocationhash", "d": "2/2014"}, {"body": "jayphelps yes similar", "d": "2/2014"}, {"body": "robotarmy never used google hashed based oauth flow access hash via ember app actually runs router strips google oauth library allows provide access token via javascript would decent workaround lands demo", "d": "2/2014"}, {"body": "good thought continue hack way fri jan pm jay phelps notifications githubcomwrote robotarmy never used google hashed based oauth flow access hash via windowlocationhash ember app actually runs router strips google oauth library allows provide access token via javascript would decent workaround lands demo reply email directly view github modern yoga vs traditional yoga", "d": "2/2014"}, {"body": "rjackson appreciate profound explanation thank", "d": "2/2014"}, {"body": "closing since pr", "d": "2/2014"}, {"body": "looks like fixed", "d": "2/2014"}, {"body": "yes closing", "d": "2/2014"}, {"body": "joelkallman filmknurd macool ditto", "d": "2/2014"}, {"body": "updated jsbin could nt reproduce tried also tried mode firefox windows old fiddle one seemed fine", "d": "2/2014"}, {"body": "also reproduce going close let reopen find way isolate reliably reproduce", "d": "2/2014"}, {"body": "bit haphazardly renamed thinking make disappear causing exact error upon template teardown", "d": "2/2014"}, {"body": "hit repro usecase", "d": "2/2014"}, {"body": "news fiddle recent build ember maybe workaround", "d": "2/2014"}, {"body": "friendly psa already acknowledged issue said working unnecessary", "d": "2/2014"}, {"body": "action believe run annoying issue workaround would much appreciated", "d": "2/2014"}, {"body": "old issue confirm case shouldjs well tacking seems best solution", "d": "2/2014"}, {"body": "ran problem ember source beginning default serialize override probably want", "d": "2/2014"}, {"body": "trying use zurb foundation clearing lightbox running similar issue mien seems stem js use next prev css better workaround messing foundation code know model wo nt changing would great option skip metamorph tags", "d": "2/2014"}, {"body": "end ended using embercollectionview nt seem litter metamorphs based", "d": "2/2014"}, {"body": "see issue happening", "d": "2/2014"}, {"body": "stefanpenner see click archive posts links source code gist new bug time double rooturl happens route model hook returns promise returning array works expected however model async transition results double rooturl eg blogblogpostsarchive archive route w async compared blogposts index route asyc", "d": "2/2014"}, {"body": "indeed problem canary tested beta canary problem starts canary take look see find changed", "d": "2/2014"}, {"body": "digitaltoad revision beta", "d": "2/2014"}, {"body": "tested beta joshua borton wed feb pm jay phelps notifications githubcom wrote digitaltoad version beta reply email directly view github", "d": "2/2014"}, {"body": "jayphelps took changes updated example app shared fix linkto url see looks good", "d": "2/2014"}]