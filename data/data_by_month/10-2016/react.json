[{"title": "path attribute removed animatemotion tag", "body": "want request feature report bug bug current behavior react remove path animatemotion tag outputs warning warning unknown prop tag remove prop element current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior want use path animatemotion tag without using dangerouslysetinnerhtml versions react browser os affected issue work previous versions react google chrome dev windows version", "num": "8154", "d": "10/2016"}, {"title": "componentdidmount would nt rerendering component", "body": "look got problem shows console nt know wtf error another serious problem code log know code may look good problem killing try debug ca nt", "num": "8144", "d": "10/2016"}, {"title": "hot module replacement problem working dropbox", "body": "submitting bug report react webpack version current behaviour hot module replacement work project dropbox named dropbox person change name dropbox without work spend days figure problem want share others need waste time", "num": "8141", "d": "10/2016"}, {"title": "uncaught error", "body": "connect connect connect connect getcontext withhandlers memberprepaidview idea getting", "num": "8140", "d": "10/2016"}, {"title": "react support node development", "body": "current behavior steps reproduce install node clone react repo run expected behavior react support node development", "num": "8134", "d": "10/2016"}, {"title": "setstate handle well nested setstate calls", "body": "could bug nice feature setstate handle well nested setstate calls successive calls put pendingstatequeue resolved queue reference cleared soon suggestion would change function processpendingstate like processpendingstate function props context var inst thisinstance var queue thispendingstatequeue var replace thispendingreplacestate thispendingreplacestate false thispendingstatequeue null lt lt lt lt lt lt lt lt lt lt lt lt lt queue return inststate", "num": "8132", "d": "10/2016"}, {"title": "transferring transitiongroup maintenance", "body": "nt good maintaining reacttransitiongroup nt use much facebook result stagnating bugs nt get fixed new features nt get added apis nt acknowledge changes react eg fake lifecycle hooks ca nt work functional components nobody time review prs like dead weight core team feel guilty much great alternatives ecosystem react motion however understand lot people happy issue call new maintainer using widely codebase would happy maintaining fork documentation please let us know deprecate package favor package", "num": "8125", "d": "10/2016"}, {"title": "react docs conditional rendering", "body": "", "num": "8119", "d": "10/2016"}, {"title": "datepicker updating type change", "body": "toggling input type date datetimelocal strict formatting rules least chrome breaking example changing react version example fixes bug", "num": "8116", "d": "10/2016"}, {"title": "children components always blackbox parent", "body": "perhaps already solved trouble finding solution happy scenario follows function return hello world function disable props return propschildren function b return component nt know anything disabled component b owner decides disable component wrapping component disable easy enough far like pattern means disable component like however started getting trouble div disable adds dom starts mess styling flexbox cases component might styles disable needs replicate think tidiest solution component expose prop used pass disabled class means component may want disable needs also expose prop accepted approach problem something missing thanks", "num": "8111", "d": "10/2016"}, {"title": "reusable components page redirects improperly", "body": "old page reusable components went great detail various proptypes used redirects wrong page original page redirects like looking something see original page google cache", "num": "8108", "d": "10/2016"}, {"title": "redirection docs lead wrong page", "body": "search google react event listener remove click dom event listeners component react dom event listeners component note entry shows attach dom events provided react check info good opens page nt include info event listeners happens search results pretty annoying able find references public docs quickly", "num": "8100", "d": "10/2016"}, {"title": "redirected wrongly", "body": "following warning redirected correctly least chrome debugger warning child array iterator unique key prop check render method see information leads instead", "num": "8092", "d": "10/2016"}, {"title": "debug read property reactinternal null", "body": "good debugging toool finding exact line numbers component names got error like adding console logs every file solution", "num": "8091", "d": "10/2016"}, {"title": "reactaddonscsstransitiongroup give warning transitionentertimeout nt supplied reactcsstransitiongroup", "body": "failed prop type transitionentertimeout nt supplied reactcsstransitiongroup cause unreliable animations wo nt supported future version react see information solve warning thanks", "num": "8087", "d": "10/2016"}, {"title": "readd warning proptypes", "body": "discussion spicyj decided keep warning even though functions throw production warning way learn also document pass secret case know", "num": "8080", "d": "10/2016"}, {"title": "add description false caveat docsconditionalrenderingmd", "body": "want request feature report bug documentation enhancement need describe user wants output string false boolean property false convert string else wo nt appear output", "num": "8075", "d": "10/2016"}, {"title": "uncaught invariant violation parentcomponent must valid react component", "body": "want request feature report bug bug current behavior seeing following error page used work stack nt say anything debugging difficult request help debug code improve error stack people encounter error figure coming thanks versions react browser os affected issue work previous versions react chrome windows react", "num": "8074", "d": "10/2016"}, {"title": "forms documentation hide relevant info", "body": "want request feature report bug feature current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior attribute shown within code scroll find versions react browser os affected issue work previous versions react relevant", "num": "8068", "d": "10/2016"}, {"title": "handling events readme example handles eventhandler takes parameter", "body": "example eventhandlers receive e syntheticevents example passing parameters eventhandler", "num": "8065", "d": "10/2016"}, {"title": "new docs set localization effort", "body": "deleted old localized content docs changed much set proper infrastructure localization old process slow ineffective cc lacker", "num": "8063", "d": "10/2016"}, {"title": "new docs wanted guides", "body": "revamped docs guides missing think essential community section good resources eg mrscobbler glossary similar virtual dom terminology gone friendly check inspiration troubleshooting common issues explain right away like wrong element casing loaded dom container missing react scope etc see inspiration accessibility madhug manipulating children using portals useful modals animation react motion jamesknelson routing need use react router show use history api point rr componentbased api ajax show use lifecycles mention cancellation issues x integrating nonreact code show wrap jquery plugin react expose react component backbone view consume backbone models reactperf include basic usage example reference snapshot testing publishing component somebody wants work please comment let figure plan help wanted", "num": "8060", "d": "10/2016"}, {"title": "unable type input adding value prop", "body": "made input field makes api call based whats typed returns results list clicking list element value text input field must get updated add value prop input unable type anything removing value prop input able type set state work javascript import searchdoctorbyname helpersapi import react component react class autocompletesearch extends component constructor props super props thisstate value suggestions export default autocompletesearch using also futile", "num": "8053", "d": "10/2016"}, {"title": "wrong snippet code uncontrolled components docsforms", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8052", "d": "10/2016"}, {"title": "featureidea rename context types implicit props types merge", "body": "currently js parent getchildcontext gt theme red render gt child themedbutton props ctx theme gt themedbuttoncontexttypes theme proptypesstring effectively context implicit props ie mostly equivalent child parent expect child ask interchangably proposalidea mind also imply override props needed cases like testingpreview sample enhancer implementation feel free point flaws edge cases whatever context probably share issue idea intuitive introduce concept ps also would proposal creating constant context values share fixed values never trigger child update mount", "num": "8042", "d": "10/2016"}, {"title": "new docs docs bugs amp issues", "body": "completely rewrote docs bound cause issues mistakes etc let keep issue umbrella problems discovering initial rollout x old links nt major issue x topbar points ugly url x nt use identifier x remove vars everywhere except page x jsx depth weird names like lacker x jsx depth shows failing example tag nt show fix lacker localized pages gone need set new streamlined localization effort cc thejameskyle mention default indexhtml productionready mark legacy unnecessary addons page recommend instead figure community section mention string refs x forms doc mistakes forms doc uses setstate uncontrolled components confusing installation messy", "num": "8035", "d": "10/2016"}, {"title": "docs list key examples override number", "body": "want request feature report bug bug current behavior examples use component name maybe good idea rename component something", "num": "8034", "d": "10/2016"}, {"title": "findparent fails unable get property reactinternalinstance undefined null reference", "body": "want request feature report bug bug current behavior exception thrown rendering stops current behavior bug please provide steps reproduce possible minimal demo problem via similar template nt seem determinstic happens ie least expected behavior throw exception continue rendering versions react browser os affected issue work previous versions react react ie windows", "num": "8031", "d": "10/2016"}, {"title": "maximum call stack size exceeded reactdomcomponentupdatedomchildren", "body": "first realize likely nt problem react problem application tought open issue see think might problem react could give pointers dig deeper since call stack contains react code nt much us trouble shoot see messed want request feature report bug possible bug current behavior sometimes get random maximum call stack size exceeded errors small percentage users nt look like related browserdevice seems happen types devices mobile tablet desktop firefox chrome safari ios mac stack trace nt contain code react looks like js lastprops line column webpack updatedomproperties line column webpack updatecomponent line column webpack receivecomponent line column webpack receivecomponent line column webpack updatechildren line column webpack reconcilerupdatechildren line column webpack updatechildren line column webpack updatechildren line column webpack updatedomchildren line column webpack pages larger others anyone nesting deep enough could realistically cause maximum call stack size exceeded error versions react browser os affected issue work previous versions react nt know true versions nt version deployed help reagarding would much appreciated", "num": "8030", "d": "10/2016"}, {"title": "multiple copies react installed", "body": "using react components made various libraries like material ui get message see one version react installed using gulp browserify build process idea solve", "num": "8026", "d": "10/2016"}, {"title": "chrome throws error failed execute insertbefore node parameter type node", "body": "react throws error messages certain points app chrome chrome browsers work nt able pinpoint cause", "num": "8025", "d": "10/2016"}, {"title": "feature request reactaddonsupdate operations accept objects well arrays", "body": "want request feature report bug feature current behavior pass object reactaddonsupdate update operation speced take array generates error saying forget wrap object array expected behavior operate single object provided example unshift foo onto target element versions react react", "num": "8023", "d": "10/2016"}, {"title": "better support web components", "body": "gets old rebuild date picker whatever widget every time switch frameworks would nice react better support web components", "num": "8022", "d": "10/2016"}, {"title": "npm run lint fails windows", "body": "npm run lint fails windows least windows error running eslint task using gulpfile c projetosgitreactgulpfilejs starting eslint c function exports require module filename dirname exist syntaxerror unexpected token illegal objectexportsruninthiscontext modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload modulerunmain run startup lint failed fatal error something went wrong running gulp screenshot found related error mocha could nt fix anyway might", "num": "8021", "d": "10/2016"}, {"title": "need way prevent component render client side initial load", "body": "ad performance isomorphic application need react avoid rendering ad component containing ad position div client initial load following scenario react renders ad position div server sends html client div empty div id attribute identifying location place ad google gpt makes request ad react lifecycle finished client ad position div gets filled ad react finds mismatch server client ad position div rerenders empty ad position div client wiping ad way conditionally stop react rendering ad position div client found seems like needs flag method react lifecycle used prevent component render certain conditions", "num": "8017", "d": "10/2016"}, {"title": "warning validatedomnesting appear child see head gt metadata", "body": "believe bug dom validator try render entire page element inside got warnings render result put inside expected behavior warns appears also move elements using react tested previous version updated reactdom renders correctly warns well", "num": "8014", "d": "10/2016"}, {"title": "fiber formalize states", "body": "fiber number states component however formalized code right instead state inferred leads hard follow code instead organize code terms explicit states original prototype componentdidmount ie never begun begun never completed completed committed nt begun time around begun yet completed completed yet committed componentdidmount ie nt begun update yet begun never completed update completed committed nt begun update begun update yet completed completed update yet committed children set component also states never reconciled current set last committed previously reconciled set nt committed yet", "num": "8012", "d": "10/2016"}, {"title": "rfc enabling formreset controlled inputs make value defaultvalue transparent", "body": "would like make case supporting controlled inputs make control value defaultvalue direct background react synchronizes attribute property inputs believe two reasons easy testing frameworks like selenium select testing reverts input back value attribute also trigger change events causes input state sync react state many reasons listed stop syncing value attribute keep issue focused desired outcome change want able control value attribute property directly component time javascript wo nt add flow types clarity type widget name string class editwidget extends reactcomponent constructor thisstate thispropswidget onchange event thissetstate name eventtargetvalue render return revert save change react property directly maps value property react property directly maps value attribute configurable time input becomes controlled specifies property support formreset sending synthetic change events fields mismatch last tracked value maybe fire blindly simplicity change creates controlled input makes much clearer react applies changes control granted user provides away allow props coming form dictate canonical state form still supporting native browser behavior also means nt synchronize value attribute would save lot headaches things figure server rendering property use case send along default value might fine cases thought edge cases", "num": "8011", "d": "10/2016"}, {"title": "jsx gotcha case sensitivity", "body": "want request feature report bug documentation add something pertaining jsx gotcha page current behavior equal rather unintuitive considering meaning nt generally attached case current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8008", "d": "10/2016"}, {"title": "onchange event getting triggered via selenium clear", "body": "want request feature report bug possible bug current behavior according selenium spec based issues reported method triggers dom onchange event spec issue however using clear input onchange handler triggered browser see input empty expected behavior expect onchange handler trigger versions react browser os affected issue work previous versions react using react reproduced firefox amp chrome latest version post", "num": "8004", "d": "10/2016"}, {"title": "ca nt find function", "body": "use chrome give function", "num": "8002", "d": "10/2016"}, {"title": "style props render incorrectly safari", "body": "want request feature report bug bug report report undocumented behaviour current behavior style props render incorrectly safari example following becomes screenshot inspector similar thing happens rendered another screenshot works expected browsers tried current behavior bug please provide steps reproduce possible minimal demo problem via similar template check element child ios safari using desktop safari inspector tool otherwise minimal failing example expected behavior rendered style property matches given style property becomes becomes versions react browser os affected issue work previous versions react using version served seen issue ios safari el captian safari ios safari seems unaffected unsure versions", "num": "7998", "d": "10/2016"}, {"title": "remove debug info reactminjs file publish project", "body": "remove debug info reactminjs file publish project", "num": "7990", "d": "10/2016"}, {"title": "variable refers new date child element", "body": "following code snippet book run code compiled via babel code like error message reported browser datetimenow could please help answer cause error thank much want request feature report bug current behavior error message uncaught invariant violation objects valid react child found mon oct cst meant render collection children use array instead wrap object using createfragment object react addons check render method current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior span tag displays current time versions react browser os affected issue work previous versions react react", "num": "7988", "d": "10/2016"}, {"title": "event listeners stop working container moved new document", "body": "want request feature report bug report bug current behavior react gt container moved different document component tree rerendered event listeners stop working react lt possible move container one document another via state rendered components preserved event listeners continued work steps reproduce using testhtml click counter button times click move iframe button click counter times note counter longer responds clicks expected behavior clicking counter continues increment moved iframe works react react gt versions react browser os affected issue work previous versions react issue bisects changed logic adds event listeners use cached document value instead hack resolves issue patch diff git asrcrenderersdomsharedreactdomcontainerinfojs bsrcrenderersdomsharedreactdomcontainerinfojs index asrcrenderersdomsharedreactdomcontainerinfojs bsrcrenderersdomsharedreactdomcontainerinfojs var docnodetype function reactdomcontainerinfo node var info ownerdocument nodenodetype docnodetype node nodeownerdocument get ownerdocument return nodenodetype docnodetype node nodeownerdocument tag nodenodenametolowercase namespaceuri nodenamespaceuri notes original use case preserving state components app runs chrome popup window pop closes unloads window workaround involves moving dom node background page popup closed back next opened", "num": "7986", "d": "10/2016"}, {"title": "issue redboxreact", "body": "testing react version one projects installing packages worked previous version react redboxreact issue reactdom error redboxreactreactdomindexjs module found error resolve module reactlibreactdom", "num": "7985", "d": "10/2016"}, {"title": "mistakenly published latest", "body": "bug current behavior yields result installs expected behavior looks like publish mistake point point", "num": "7982", "d": "10/2016"}, {"title": "react match syntax autofocus", "body": "react match syntax autofocus autofocus attribute auto focuses inputs forms buttons autofocus true false attributes camel case html demo current situation react following valid equivalent true following invalid number attributes boolean attributes presence boolean attribute element represents true value absence attribute represents false value attribute present value must either empty string value ascii caseinsensitive match attribute canonical name leading trailing whitespace source recommendation update syntax example considered valid", "num": "7981", "d": "10/2016"}, {"title": "docs implementation notes replacechild args worng order", "body": "order arguments wrong js prevnodeparentnodereplacechild prevnode nextnode prevnodeparentnodereplacechild nextnode prevnode", "num": "7975", "d": "10/2016"}, {"title": "jsx variables shadowing gotcha", "body": "think discovered jsx gotcha see nowhere mentionned let say component defined like intended behaviour rendered output provided receives instead value foo prop provided comp means variable shadowing work suspect relative template like behaviour jsx since bited gotcha think mentionned docs correct code make work", "num": "7965", "d": "10/2016"}, {"title": "documentation finddomnode title paragraph", "body": "documentation bug working browser contains subheading refs finddomnode following paragraph however contain information finddomnode removed commit", "num": "7958", "d": "10/2016"}, {"title": "allow html attributes dangerously set without encoding", "body": "want request feature report bug feature current behavior react element like renders expected behavior behavior expected majority cases strongly recommended however scenarios automated parser play nicely encoded special characters etc user may want render arbitrary strings attributes without automatic encoding way provided entire elements could const getattributes gt datafoo amp bar currently workaround using container element node able set attribute specifically would bit safer thoughts fence whether good idea since opens another avenue inserting invalid html nevertheless interested hearing justified grounds", "num": "7951", "d": "10/2016"}, {"title": "props validation objects", "body": "want request feature report bug request feature current behavior ca nt specify object different type values eg either rely order object specify like unpack object passing props current behavior bug please provide steps reproduce possible minimal demo problem via similar template bug makes fairly typical usage spitting warnings console expected behavior able specify objectof attached pr versions react browser os affected issue work previous versions react", "num": "7945", "d": "10/2016"}, {"title": "fiber principles contributing fiber", "body": "wanted document unique design patterns apply fiber necessarily anything else start may mutate fiber working phases may global sideeffects need global sideeffect moved phase fiber fixed data structure shares hidden class never add fields outside construction nothing reconciler uses dynamic dispatch ie nt call first class function except user code ref callbacks functional components render methods etc rest static function available closure ie use instead time need branch logic use switch statement number indicates type object dealing branch take see pattern matching many modules instantiated object single constructor gets called initialization time inlinable compiler nothing fiber uses normal js stack meaning use stack compiled flat function needed calling functions fine limitation ca nt recursive ca nt use recursion traverse tree learn use singly linked list tree traversal algorithm eg parent first depth first need complicated use normal js stack time yield would rebuild stack continue since lasts idle would spend time unwinding rebuilding stack time bad however everything along stack would aware unwind abort middle work flow plausible could level ocaml algebraic effects nt currently features need nt get performance tradeoffs want box atm plausible future way forward though code lives outside recursion nt matter much cases react space normal stack eg memoization error handling etc using normal stack makes difficult get interact everything put stack generally put heap memoize maintaining stack heap data theoretically less efficient said optimizations might moot js stacks much efficient js heaps one thing wanted try compile react components work directly data structures like normal programming languages compile make mutations etc stack think ideal implementation react let try see goes cc spicyj gaearon acdlite", "num": "7942", "d": "10/2016"}, {"title": "making view difference reuse markup error configurable", "body": "want request feature report bug requesting feature current behavior currently way reuse markup error displayed difference hardcoded characters code side configurable property code found characters sometimes bit hard debug especially cssinjs libraries div usually also contain obfuscated class name able make larger number could help debugging went wrong", "num": "7939", "d": "10/2016"}, {"title": "functions passed props updated", "body": "array reactcreateelement render jsx understand todoitems dragged text updated onblur clicking anywhere outside current text surprised get issue gif passed arrow functions updated new render call end gif still observe logs maybe like since forever surprising intuitive maybe optimization demo issue edit instead would fix issue breaks css transitions", "num": "7937", "d": "10/2016"}, {"title": "use reactdomrender target implicit jsx root", "body": "currently rendering must provide topmost wrapper addition node designated reactroot introduces unwanted extra layout element make styling little irritating would nice target topmost node could pass array first children right away", "num": "7932", "d": "10/2016"}, {"title": "page navigates path component changes", "body": "new react looks like appjs loginformjs expected behavior state app changed callback header component rendered stay like current behavior state changed header rendered page directed automatically dont know help appreciated", "num": "7928", "d": "10/2016"}, {"title": "changing state quickly cause error shallow render", "body": "want request feature report bug report bug current behavior running causes react throw exception issue using see error using current behavior bug please provide steps reproduce possible minimal demo problem via similar template could figure use jsfiddle example even though reactwithaddons loaded code used project reproduce jsx import react component purecomponent react import render reactdom import reacttestutils reactaddonstestutils class root extends component componentwillmount thistestbreak settimeout thistestbreakbind render documentgetelementbyid root class testreactelement extends purecomponent render return thispropsname const testrender name gt let renderer reacttestutilscreaterenderer rendererrender testrender test testrender test testrender test works fine long run soon run times error pops project tap output listened wrapper updated new one comes reproducible example contrived realworld bug running tests project expected behavior expected behavior error occurs console running multiple shallow test renders time react updating state element rendered dom versions react browser os affected issue work previous versions react windows updates october tried previous versions react verified displays error chrome firefox", "num": "7927", "d": "10/2016"}, {"title": "fiber umbrella remaining features bugs", "body": "umbrella issues remaining fiber issues found running unit tests flag turned see additional tasks beyond scope initial fiber release phases phase infrastructure x set infra know tests failing spicyj x reacttestutils features x reactcomponentexpect gaearon x scry etc gaearon phase smaller initial tasks x reactdomfiberrender simple synchronous case sebmarkbage x string refs using owner acdlite x pass correct previous state componentdidupdate x componentwillmount componentwillreceiveprops componentwillupdate lifecycles sebmarkbage x componentdidupdate fired shouldcomponentupdate returns false sebmarkbage x instance recreated already started work gets resumed componentwillreceiveprops without didmount sebmarkbage x fix module pattern mountindeterminatecomponent sebmarkbage x finddomnode sebmarkbage x switching types nt track deletions updateslot nt return null sebmarkbage gaearon x purecomponent flag acdlite x ensure scheduling works synchronously default batched dom events initial default priority acdlite x unstablebatchedupdates acdlite x setstate componentdidmountcomponentdidupdate always synchronous end batch even work deferred acdlite x make sure setstate error boundaries work gaearon acdlite x unmount failed trees attempting recover acdlite phase larger tasks x allow testing fiber facebook web codebase spicyj x error boundaries gaearon x context gaearon x dom attributesproperties update sebmarkbage x dom events plug event system sebmarkbage x rendercontainerintosubtree preserve state spicyj x fb bug switching text children regular children wo nt clear old text content easy fix since sideeffect parent scheduled child insertions acdlite sebmarkbage x recover errors commit phase including errors thrown host environment use single trycatch block acdlite x fb svg mode switch based parent svg html gaearon x fb setstate behavior called possible lifecycles including sibling lifecycles parents children acdlite phase uncovered bugs x root container wrong commit phase sebmarkbage x update stateprops object pointers even bailout happens currently cause unnecessary componentdidupdate solve somehow acdlite x validate inputvaluetracking indeed need cleaned unmount nt think needs revert anyway x autofocus nt work todo reactdomfibercomponent bvaughn x fb last effect renders infinite loop acdlite x fb defer clearing initial nodes work actually begun ensure unmounting rerendering batch works acdlite x updates different roots componentwillmount reactupdatestest acdlite x refs update even shouldcomponentupdate returned false however componentdidupdate fire acdlite x fb make top level render unmount synchronous default even batch even updates updates acdlite x fb uncaught typeerror read property children null probably due context change based caller probably either avoid rerendering set pendingprops memoizedprops case sebmarkbage x replacestate remove previous callbacks scheduled acdlite x root fiber use instead acdlite x fb ensure get current props controlled components restorestateifneeded spicyj x fb iterable children eg immutablejs set etc gaearon x fb reuse hosttext bailing sebmarkbage x fb ensure rendersubtreeintocontainer twice enables context pass middle subtree ie two nested layer single context provider top spicyj x make hostcontainer appendinsertremove child instead always updating detach return child gets unmounted removed sebmarkbage x handle selection restoration x swap active fiber host node updated including listeners change know listener active needs remain even prepareupdate fixed x remove traversal x finddomnode findallinrenderedtree broken insertion happens happen look previous work progress deletes removes looks like current assume happen deletion done sebmarkbage x fb batch different roots together one commit reactupdatestest wo nt fix use portals instead x error handling error thrown detachref callbacks acdlite x ensure walk return treetraversal always get current fiber props possibly walk parentnode tree instead sebmarkbage x ensure switch tag names cover mixedupper case eg wo nt fix instead warn upper case used html tags sebmarkbage x scheduling issue causing reactcompositecomponentnestedstatetest fail performs first setstate second one task priority stuff fix acdlite x fb scheduling update render nt work mostly already warn setstate called render might required componentwillmount others calling callback sets state different component works currently complete phase resets updatequeue pending priority cause infinite loops happen apparently still used need either warnlog better upgrade everyone support fiber acdlite x toplevel context pushpop nt properly matched lots tests fail patch bvaughn x fb reentrant mounting synchronous mode spicyj phase x feature flag disable fiberonly features acdlite x polyfills alternate paths sebmarkbage x ismounted technically deprecated yet sebmarkbage x top level render callbacks second argument render x ensure server rendering works using stack fiber enabled x declarative portal api gaearon x add tests event bubbling need track changes top level event listeners get attached x react test renderer support iamdustan x react art support bvaughn x land basic react native support react repo bvaughn x mark root renders mount perf testing see tests marks toplevel updates bvaughn x merge callbacklist onto updatequeue instead separate field acdlite x separate priority level state updates acdlite x fix coroutine issue fiber passed user space could become stale sebmarkbage x dom dev tools gaearon phase unit tests known bugs push x fb fix bug used certain cases sebmarkbage acdlite x fb provide ability block event bubbling portals spicyj x unit tests reactfragmenttest invariants acdlite x unit tests reactdomproductiontest invariant acdlite x unit tests reactemptycomponenttest invariant acdlite x ensure replace calls sensible messages acdlite x unit tests reactmounttest acdlite x unit tests reactmultichildtest remove map children support stack acdlite x unit tests reactmultichildtexttest acdlite x rn fix event bubbling regression spicyj bvaughn x make sure babel nt generate bad code eg iife maybe fork babel plugin throw spicyj x rn land react update fbsource fiber disabled sebmarkbage x verify fiber works ie facebook map set open make sure works spicyj x fb figure ads image cropper issue spicyj x unit tests reactdomcomponenttest acdlite x unit tests reactcomponentlifecycletest warnings ex fdn render acdlite x allow assigning thisstate cwrp warning acdlite x unit tests reactstatelesscomponenttest warning trueadm x unit tests refstest trueadm x make new manual proptypes checker acdlite x unit tests reactcompositecomponenttest warnings ex setstate render acdlite x ensure break alluncaught exceptions works expected browsers acdlite x investigate modules unit tests fail remove stack trueadm x quick investigation fb requirejs perf trueadm x quick investigation fiber bundle perf cutting extra devonly code trueadm x fb move hidden check hostconfig phase release warn throw update container manually emptied outside react stack mounted brandnew tree fiber tries apply update usually fails keyanzhang sebmarkbage took blocks beta x extract proptypes separate npm package get package name acdlite x unit tests reactcontextvalidatortest pass correct previous deprecate feature remove test bvaughn x fb better fix reactarttext x update warning calling proptypes directly refer user api x docs updates test utils removed addons flarnie phase react native fiber x reimplement shallow renderer without stack dependencies lelandrichardson trueadm rn ensure keep important invariants text must wrapped block anything ensure call fb specific warning module instead one rn spicyj nt block anything oss internal fb x convert proptypes callers use checkproptypes acdlite x deploy forwarding modules reactlibreactcurrentowner reactlibreactcomponenttreehook fbjslibinvariant fbjslibwarning fbjslibexecutionenvironment fbjslibperformancenow fbjslibemptyobject fbjslibemptyfunction fbjslibshallowequal keep using providesmodule repo flat bundles better yet inverse switch using commonjs naming convention www sebmarkbage bvaughn see codemod away use instead nt block oss release x release new version reactredux whose peer compatible update rn use x enable feature flag one week landing sync x codemod flow errors yielded properly typing added types comments good enough x redesign host component type type host component refs integration upgrade compatible bvaughn x unblocks rn dev tools gaearon x unblocks rn inspector see known issues section pr gaearon make sure instanceprops nt leak sebmarkbage bvaughn phase flat bundlesrollup x make react perf work fiber reactperftest gaearon decided favor deeper timeline integration x unit tests reactcomponenttreehooktest gaearon x unit tests reacthostoperationhistoryhooktest gaearon x make list internal react modules required fb code x come better strategy dealing dev code make sure nt ship prod x change www sync script run rollup using commonjs source x shimming required files ex reactdominjection warning x exporting single bundle exposes internals need x make fowarding modules reactdometc well internal modules convert oss repo modules block release nicetohave follow x make separate dev nondev build one file www x convert oss repo rollup x replace current gruntgulp build system unified build system maybe purely using rollup add closure compiler advanced deal mangling properly block release nicetohave follow phase asynccompatible block release fix incremental regression regression fb fix resumemountclassinstance gets passed construct class otherwise rn aborting async work unmounting tree due error leaks native views add crossrenderer support portals necessary async art reactdomfiberrender return root instance render even priority deferred test cover incremental cases decide replacing priorities deadlines fix starvation phase serverside rendering x x unit tests reactrenderdocumenttest ssr reviving server rendered markup including rendering shadow dom containers phase improvements block release internal api consistently used exposing statenodes see x keywarnings fragments flarnie x nt mark update effect newly mounted components unless componentdidmount lifecycle add support enzyme fiber currently bailing equal propsstate equality means still copy children traverse meaning parent many children still lot work even bails skips pendingworkpriority referred children would know children additional work acdlite x unit tests reactdomtextcomponenttest normalize case reconsider contentreset flag cleaner solution clearing text content innerhtml changing insertion order reconsider storing masked contexts instances revert inputvaluetracking replace different comparison strategy gettersetters slow complicated subscription model nt helpful fiber goals principle listening lots events diffing value sound nt shipped oss yet hard fix probably get pushed back fiber drops lazy dom insertion order solution nt slow worth fixing leave slow wait fix browser related follow previous task use linked list acdlite ensure possible resume incomplete parents without rerendering shallow reuse store memoizedprops resuming completed parents already possible acdlite move callback invariant closer usage requested replace invariants warnings help code size", "num": "7925", "d": "10/2016"}, {"title": "dangerouslysetinnerhtml someofmytext causes chrome console developer tool freeze problem firefox though", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7924", "d": "10/2016"}, {"title": "detect click outside view component react native", "body": "want compress view component clicks outside view way", "num": "7910", "d": "10/2016"}, {"title": "bug sometimes selects last value dropdown", "body": "using value multiple times selection differs fiddle example issue chrome selects first option value testing iphone selects last option value solution consistent always selecting first option value", "num": "7908", "d": "10/2016"}, {"title": "fiber spillover child reconciliation", "body": "spillover nt plan initial batch fix text node merging edge case search forward find next sibling swap end text node sum previous value siblings trick lets us avoid backreferences tag include children updated recalculate children needed eg coroutines alternatively pass nearest host coroutine tree quickly flagged child changed insertmoves avoided added sideeffect list coroutines second option probably better possibly use two sideeffect lists two passes needed forward order possible x remove notion unnecessary extra traversal requires duck typing know terminal reconsider need backpointers several optimizations possible uses memory", "num": "7906", "d": "10/2016"}, {"title": "context support reacttestrenderer", "body": "want request feature report bug feature request current behavior nt appear way pass context calling attempting use snapshot testing jest component uses could provide context could create similar helper function enzyme expected behavior able provide context similar versions react browser os affected issue work previous versions react using react nt tried previous versions react", "num": "7905", "d": "10/2016"}, {"title": "data updating", "body": "data atributes updating using react redux input fields dataerror atribute dataerror property used give feedback user field valid inital state looks like component looks like passed component via javascript const mapstatetoprops error gt error const mapdispatchtoprops dispatch gt export default connect mapstatetoprops mapdispatchtoprops component hit submit helper validates data data valid helper calls reducer return something like using redux logger inspect get desired state continues instead", "num": "7903", "d": "10/2016"}, {"title": "strange second argument passed event handler always undefined", "body": "found bug attached event listener property like event listener called arguments synthetic event strange undefined value think normal behavior handler called single param event object windows chrome react version", "num": "7902", "d": "10/2016"}, {"title": "bypass synthetic event system web component events", "body": "use web component react must directly attach event listener react ref wc could change implementation react detects custom element tag names dashes like bypass synthetic event system whitelist attach event listener element bypass synthetic event system anyway already need bypass manually using web component familiar react codebase naive approach seems work whoever uses web components react responsible whatever downsides would cause maybe performance nt know already supposed downsides issue convenience wc usage inside react send pr thought opening issue looked issues nt see existing one related handling wc events current behavior wc custom event eg must handled attaching event listener directly element componentdidmount using ref react js class hellomessage extends reactcomponent handlehelloclick thisrefs foo toggle handleflipend ev consolelog handle flip end componentdidmount thisrefs foo addeventlistener flipend ev gt thishandleflipend ev render return front back expected behavior wc custom event handled reactelement corresponding wc js class hellomessage extends reactcomponent handlehelloclick thisrefs foo toggle handleflipend ev consolelog handle flip end render return front back ps snippet still unrelated reasons ideally would nt need refs handling events wcs", "num": "7901", "d": "10/2016"}, {"title": "shallowcompare stateless components", "body": "want request feature report bug report bug confusion point current behavior implementing inside always return true pass param expected behavior would expect method handle cases passed documentation clear stating must pass versions react browser os affected issue work previous versions react using react specific browser os", "num": "7900", "d": "10/2016"}, {"title": "syntheticeventkey property unidentified safari mac os x", "body": "bug current behavior using standard onkeydown event syntheticeventkey property unidentified safari key pressed fiddle expected behavior syntheticeventkey provide proper values standard keyboard inputs letters numbers numberpad arrows backspace etc chrome since webkitbased browsers version info mac osx el capitan react safari", "num": "7897", "d": "10/2016"}, {"title": "dom contents ready first update incognitoprivate window", "body": "bug current behavior attempting load data api display scroll url fragment deep document window partially scrolls may browser behavior ca nt figure reliably wait content painted scrolling view first attempt example showing issue open new incognito chrome private firefox window paste type sorry ff url data loaded itunes saved state triggered triggered used let dom painting occur dom node deep document queried attempted scroll view correct node red background never seen work fresh incognitoprivate window issue using suggested answer discussion expected behavior dom node scrolled view versions react browsers os work previous versions react", "num": "7889", "d": "10/2016"}, {"title": "inconsistent state setstate componentdidmount", "body": "working library needs initialized componentdidmount according documentation getting expected results update state like javascript class chartcontents extends reactcomponent constructor super thisstate stxx componentdidmount let stxxnew stxchart thischartcontainer stxxnewchart spy sampledata thissetstate stxx consolelog consolelog thisstate render const style height position relative width return view object debugger find state updated object chartcontents newly created chart try access returns empty object initialized also see eslint warning wondering solve problem thanks", "num": "7886", "d": "10/2016"}, {"title": "thinking react tutorial update", "body": "thinking react one important well written tutorials beginners even advanced developers would like update increase readability also would like replace jsfiddle react docs highlighter first suggestions jsx replace var productcategoryrow reactcreateclass render function return thispropscategory function productcategoryrow category return category jsx replace var productrow reactcreateclass render function var name thispropsproductstocked thispropsproductname return name thispropsproductprice function productname product return function productrow product return productprice continue nt worth effort", "num": "7885", "d": "10/2016"}, {"title": "docs request build react component library", "body": "important section think lot folks end piecemealing would super useful terms ecosystem support", "num": "7882", "d": "10/2016"}, {"title": "reacttestrenderer missing files", "body": "installing reacttestrenderer npm brings indexjs file referenced lib folder exist", "num": "7880", "d": "10/2016"}, {"title": "reactaddonstransitiongroup creates multiple copies react", "body": "scenario react library amp code using webpack build process react gets bundled twice including webpack build process apart increased build size fine webpack build process however try use react component built another project angular project using ngreact load react globally library creates issue multiple copies react refsmusthaveowner problem comes react using one globally one gets bundled anybody else encountered issue workaround plan make peer dependency require directly sure major change asking anyways please correct misunderstood problem anyways ps sorry previous issue accidentally hit enter github created issue", "num": "7874", "d": "10/2016"}, {"title": "declaring react", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7872", "d": "10/2016"}, {"title": "unable add css react app", "body": "making react js app trying add bootstrap css app following code webpackconfigjs var webpack require webpack contextpath processcwd indexhtml checked network request app getting file styles getting applied components following component import react component react please help solving issue", "num": "7860", "d": "10/2016"}, {"title": "show component stack invalid type warning element creation", "body": "foo valid string function show error message include owner name please check render method bar full parent stack show warnings like key warnings prop types call reactcomponenttreehook get full stack possible", "num": "7856", "d": "10/2016"}, {"title": "svg xlinkhref breaks tabkey focus safari", "body": "want request feature report bug bug report current behavior safari given document fields separated uses focusing first pressing tab key focus switched second input instead address bar another browser element gets focused sure issue react safari could reproduce safari without using react opening issue current behavior bug please provide steps reproduce possible minimal demo problem try use tab key jump first second input field expected behavior pressing tab key sets focus second input field works fine browsers versions react browser os affected issue work previous versions react safari version osx react", "num": "7852", "d": "10/2016"}, {"title": "custom renderer api support", "body": "working upgrading renderers documentation current master build installing following along knew hard breaking changes wanted begin discussion commitments react willing make time support use case rather trying figure current apis needed front like begin looking mount entry point discuss apis could exposed covered apis reactmount reactmount reactnativemount reacttestmount entry points three facebookreact supported renderers live codebase first class access number internals external renderers currently get specifically modules access reactreconciler instantiatereactcomponent helper function create correct react component type host composite text also part reconciler reactupdates understanding part reactreconciler reactinstrumentation bridge react internals devtools limited react devtools modules see used fb renderers beyond may worth future consideration though understand important unblock renderer development understanding renderers method dependent upon reconciler bridge renderer semantics react core reconciler become effectively private nonshareable recent build changes done today allow renderers continue existing experimenting release cycle initial ideas get feedback possible direction would acceptable ideas comes developerconsole warnings unsupported nonguaranteed api could break moment including patch releases expose minimal reconciler surface area create package", "num": "7850", "d": "10/2016"}, {"title": "windows development issues", "body": "issues developing windows fresh install master running causes test suites fail error changing teststests seems fix issues last character escape character invalid regex another regex error though sure regex comes though also error looks like unix git bash crossover issue possibly another escape character issue anyone run windows similar issues", "num": "7849", "d": "10/2016"}, {"title": "update unknown props warning page", "body": "current behavior write jsx component without upper case react gives unknown prop warning finally remember react jsx uses upper vs lower case convention distinguish local component classes html tags think could useful remind unknown props warning page reason warning spent time debugging understanding warning case might one expected behavior update unknown props warning page add reason warning could appearing using jsx component without upper case react treats html tag probably nt recognize props react jsx uses upper vs lower case convention distinguish local component classes html tags versions react browser os affected issue work previous versions react use react let know think could useful nt enough careful", "num": "7848", "d": "10/2016"}, {"title": "react lets access dom internal instances", "body": "current behavior reactdomcomponenttreejs gives easy access react internal instances even property name randomly generated instance following piece code lets access redux state placed context might lead security issues potentially malicious thirdparty scripts selfxss something like following piece code considerable order expose things javascript const instancemap const setinstance node instance gt const id nuid node internalinstancekey id instancemap id instance const removeinstance node gt delete instancemap node internalinstancekey const getinstance node gt return instancemap node internalinstancekey", "num": "7846", "d": "10/2016"}, {"title": "log warning user setting dom properties web component", "body": "current behavior using web components react cumbersome properties copied attributes without transforming lot said confusing developers trying use web components using react expected behavior much like using property logs warning suggest property key exists raise similar warning user knows happening expected behavior bug proposal acceptable pr ready sent thoughts", "num": "7845", "d": "10/2016"}, {"title": "react clearing datareactid datareactchecksum attributes dom mount", "body": "current behavior rendering react view server react appears mount without errors client remove attributes dom far observed issue using react router also reported reacttrainingreactrouter rr folks characterized react issue current behavior bug please provide steps reproduce possible minimal demo problem repro repo expected behavior mounting react remove extra attributes dom versions react browser os affected issue work previous versions react react browsers tested far chrome safari ie appear get better rolling back earlier react versions could reproduced react router lt happy provide much debugging information honestly sure start troubleshooting thanks advance guidance illumination provide", "num": "7844", "d": "10/2016"}, {"body": "like see consistency point actually mind anything end properties node eg class rel etc consistent naming convention creating components mind something like would make sense current haphazard approach different ones avoid clashing javascript keywords", "d": "10/2016"}, {"body": "attribute notes correspond property names used javascript access values consistent haphazardly chosen jsx makes feel like dealing dom directly react still managing elements javascript makes sense consistent property names rather html attribute names", "d": "10/2016"}, {"body": "aweary totally understand referring javascript poor choice prop names rather anything react specific guess question jsx feel additional level abstraction make developer friendly saying throwing thoughts", "d": "10/2016"}, {"body": "aweary thanks realize name actual dom api get implementation indeed coherent nt think still problem users could expect pretty sure far one thinking term html write jsx reactdom", "d": "10/2016"}, {"body": "totally agree confusing doubt think current warnings get dev mostly sufficient lesson need learn nt think point would change worth making would pretty huge breaking change especially change attributes could support even confusing imo", "d": "10/2016"}, {"body": "yeah thinking dual attribute solution people ease thinking dom prefer thinking html painless experience sorry example fact learning enough maybe change realize dom api attribute names mind leave issue open may see issue people edit place using dom rather markup annoying svg time designer give svg icon want make component rewrite lot attributes guess jsx could make life way easier considering common markup attributes well", "d": "10/2016"}, {"body": "looks like getdata never calls callback also please see get support", "d": "10/2016"}, {"body": "wo nt able help nt include fiddle reproducing issue like issue template chose delete asks", "d": "10/2016"}, {"body": "thanks report however file webpack react user interface library relation hot module replacement cheers", "d": "10/2016"}, {"body": "would need minimal example reproducing problem help troubleshoot", "d": "10/2016"}, {"body": "gaearon thanks reply seems works", "d": "10/2016"}, {"body": "thanks fix", "d": "10/2016"}, {"body": "please show code issues", "d": "10/2016"}, {"body": "unfortunately coding f transpiled javascript makes almost unreadable dealing messages change state times calls recursive usually initiate change state something like setnewvalue function v setstate function state statenewvalue v showmessage changing value v showmessage function msg setstate function state statemessage msg call showmessage happens within first call setstate get added current pendingstatequeue reference already cleared instead gets added new queue executed later future call setstate happens suggested change simply maintains reference queue returning allows new setstate added queue processed", "d": "10/2016"}, {"body": "anyway change f code trigger message callback like setnewvalue function v setstate function state statenewvalue v function showmessage changing value v showmessage function msg setstate function state statemessage msg", "d": "10/2016"}, {"body": "thanks suggestion miles would work code posted small sample calls happening controls communicate among would trigger multiple renders time problem code would get separated using called elm architecture lines well react state model render function view one update function state gets changed function acts messaging processor thus recursive times fact prior current implementation using mailbox agent update function worked well react one exception textbox input mailbox asynchronous change input would make cursor jump end decided remove mailbox make synchronous textbox works recursive calls work course made local copy reactjs mentioned change works", "d": "10/2016"}, {"body": "first correct usage state treated immutable must never assign instead return update since using previous state might well pass object right away secondly calling inside updater function supported maybe throw case updater function supposed pure return next state execute side effects", "d": "10/2016"}, {"body": "dan thanks help first correct usage right meant use return assign mistake paraphrasing code f got wrong read something like setnewvalue function v setstate function state showmessage changing value statenewvalue v return newvalue v showmessage function msg setstate function state return statemessagespush msg secondly calling setstate inside updater function supported maybe throw case imagined could case call bug possible feature decision want allow recursive calls seem difficult allow modification posted would make react versatile otoh throwing harder think cheers", "d": "10/2016"}, {"body": "nt use either wanted drop link refactored standalone version put together make pretty compelling starting point anyone looking maintain standalone version reacttransitiongroup obviously preact forking work react would basically changing imports dependencies point react instead originally fork reactcomponentcsstransitiongroup extracted react source", "d": "10/2016"}, {"body": "use facebook react motion mean end sight lt reacttransitiongroup start refactoring code favor react motion", "d": "10/2016"}, {"body": "use facebook react motion facebook product nt many insertiondeletion animations nt use anything much mean end sight lt reacttransitiongroup start refactoring code favor react motion even completely stop releasing new versions wo nt worse effectively already abandoned year keep using fork want improve fact issue", "d": "10/2016"}, {"body": "us animation problem using great gsap tweening engine problem comes animate component removal react motion almost solves problem one issue react motion callback transitionmotion anyhow never perfect solution box invest", "d": "10/2016"}, {"body": "taion might interested maintaining copy pasted forked component many times nice make direct improvements also already similar different transition component maintain reactoverlays", "d": "10/2016"}, {"body": "jquense would amazing done great work maintaining react libraries", "d": "10/2016"}, {"body": "ok glad take maintenance initial thought move since pairs nicely transition component one single components transitiongroup lists also keep separate repo necessary think folks want component requiring individually suite nt cause much friction", "d": "10/2016"}, {"body": "would like org concern org people think going require bootstrap something like", "d": "10/2016"}, {"body": "tangential would prefer move reactoverlays reactjs potentially replacing reactmodal", "d": "10/2016"}, {"body": "reactjs might make sense pull transition reactoverlays anaimation specific package since nt specifically overlays p", "d": "10/2016"}, {"body": "would next steps need help forking", "d": "10/2016"}, {"body": "runs fine run locally react jsbin indeed see effect open console see warnings value set correct format nt see warnings locally", "d": "10/2016"}, {"body": "experienced going experimentation see figure working jsbin also actual code", "d": "10/2016"}, {"body": "tidiest solution component interested supporting disabled accept prop component could choose use special inline style anything else get relevant styles escape hatch components may expose prop breaks encapsulation often leads issues later project hope helps ps use issue tracker bugs would great could use community resources asking questions thanks", "d": "10/2016"}, {"body": "thanks gaearon continue discussion", "d": "10/2016"}, {"body": "hi thanks feedback old reusable components page contained many topics unfortunately ca nt set redirects hash portion url go new docs website use search like see whole separate guide dedicated proptypes well complete api reference hope helps", "d": "10/2016"}, {"body": "docs replaced week ago quite complete yet understand annoying previous docs unfocused included many tips lacker best place content", "d": "10/2016"}, {"body": "hmm tip seemed like hardly content see basically content want use dom event listeners call redirected page since bunch rewriting suspicion lot google searches somewhat annoying precise word nt show page google gets index updated suggestion leave nt think specific use needs react docs per se suspect google index updates redirects stop causing annoyance case", "d": "10/2016"}, {"body": "thanks guys keep checking", "d": "10/2016"}, {"body": "nt think specific use componentdidmount needs react docs per se maybe refs dom would good place", "d": "10/2016"}, {"body": "thought nt even use refs using global stuff got stumped", "d": "10/2016"}, {"body": "fits dom part", "d": "10/2016"}, {"body": "nt know change links point spicyj help make point", "d": "10/2016"}, {"body": "working chrome debugger attaching unique key iterated children attached warning appears link redirected subsequently reproduce typing address field browser nt know redirects find redirection table", "d": "10/2016"}, {"body": "yes understand valid issue need fix comment pointed towards spicyj knows redirects set", "d": "10/2016"}, {"body": "fixed old redirect cached browser verify opens right url incognito tab", "d": "10/2016"}, {"body": "thanks bringing attention", "d": "10/2016"}, {"body": "error like likely earlier error got react inconsistent state use promises might catching errors mistake never appear console think react bug please provide fiddle reproducing issue", "d": "10/2016"}, {"body": "closing due lack details response", "d": "10/2016"}, {"body": "hey solve exactly warning says add like examples link hope helps", "d": "10/2016"}, {"body": "gaearon use like", "d": "10/2016"}, {"body": "comment still valid need add missing props", "d": "10/2016"}, {"body": "even though functions throw production particularly functions throw production", "d": "10/2016"}, {"body": "curiosity throw errors", "d": "10/2016"}, {"body": "eliminate code production nt seem make sense ship real code proptypes validators normally never used prod therefore replace empty function make behavior clear make throw people nt rely validating eg user input", "d": "10/2016"}, {"body": "paragraph saying therefore condition element right appear output react ignore skip could add something detailed jsx depth would like make pr last section mentions handling", "d": "10/2016"}, {"body": "yep sorry fault nt read yet think yes section jsx depth explicitly mentions", "d": "10/2016"}, {"body": "fixed via called explicitly", "d": "10/2016"}, {"body": "nt stack point something called presumably code", "d": "10/2016"}, {"body": "sorry slept hours working much code another package using thanks lot replying closing issue covered shame", "d": "10/2016"}, {"body": "haha worries cheers", "d": "10/2016"}, {"body": "also imho consider adding example radiobuttons use attribute defaultselected attribute", "d": "10/2016"}, {"body": "ericnakagawa please fix", "d": "10/2016"}, {"body": "fixed line breaks", "d": "10/2016"}, {"body": "ca nt pass arguments react passes event mean something like index inside perhaps could add section events loops conditions", "d": "10/2016"}, {"body": "thinking something like openslideshow viewingwhat thispropstoggleslideview viewingwhat would event handled", "d": "10/2016"}, {"body": "oh see normally create two functions use partial application either bind arrow functions realm javascript react guide probably mention way thanks input", "d": "10/2016"}, {"body": "would consider using something like", "d": "10/2016"}, {"body": "heard zpao thejameskyle building something yarn may reuse", "d": "10/2016"}, {"body": "ericnakagawa going work thejameskyle see yarn solution work react", "d": "10/2016"}, {"body": "cc lacker hramos ericnakagawa", "d": "10/2016"}, {"body": "take glossary sections list terms somewhere work come nt remember virtual dom terminology page contained", "d": "10/2016"}, {"body": "possibly take routing history", "d": "10/2016"}, {"body": "regarding terminology please assume familiarity topics basic guides relevant terms right titles elements components props state lifecycle events keys", "d": "10/2016"}, {"body": "routing guide even need use think possible plain props also hashbased routing ok probably need context make component work seems little complicated", "d": "10/2016"}, {"body": "plain props make top level render inside change handler right like avoid people often nt understand compose two handlers think teach routing right away like would really need context link listen history independently", "d": "10/2016"}, {"body": "actually nt need context using plain history thinking using history package", "d": "10/2016"}, {"body": "want keep package free people see simplicity routing react go packages actually need features", "d": "10/2016"}, {"body": "yes definitely ideal thinking mistake part confirm idea add listener component use based choose render based create component captures", "d": "10/2016"}, {"body": "maybe even call router make top level app component choose right thing based state url gt component map object something like", "d": "10/2016"}, {"body": "ok put draft together probably weekend", "d": "10/2016"}, {"body": "writing guide ajax good people someone already", "d": "10/2016"}, {"body": "anyone working take", "d": "10/2016"}, {"body": "madhug assigned thanks", "d": "10/2016"}, {"body": "gaearon started putting routing guide together history api little less nice imagined first browser nt emit event called means components need way notifying component changes eg context shared global second safari nt emit page load browsers problem explaining things would end guide history instead guide react routing would ok use event instead possibly history also create separate issue", "d": "10/2016"}, {"body": "ok using seems reasonable note hides browser inconsistencies", "d": "10/2016"}, {"body": "specify input becomes controlled means must update corresponding state react literally means value always matter probably want call inside handler alternatively remove prop altogether make input uncontrolled wo nt call also wo nt able control current value eg transform reset learn forms documentation section help", "d": "10/2016"}, {"body": "thanks gaearon nt know state updated onchange", "d": "10/2016"}, {"body": "noted alternatively use uncontrolled inputs specifying use initial value case wo nt able control value", "d": "10/2016"}, {"body": "umm curious purpose would uncontrolled input serve mean usually isnt purpose input taking dataand processing application", "d": "10/2016"}, {"body": "read data uncontrolled input fine handler use controlled inputs want control eg reset force certain values eg props change use uncontrolled inputs nt care controlling need current values", "d": "10/2016"}, {"body": "need replace render section snippet code codepen actually renders input text instead radio buttons docs forms uncontrolled components", "d": "10/2016"}, {"body": "thanks finding bayfaal codepen updated push edit formsmd page matches codepen", "d": "10/2016"}, {"body": "thanks feedback good job mon oct pm eric nakagawa notifications githubcom wrote thanks finding bayfaal codepen updated push edit formsmd page matches codepen receiving mentioned reply email directly view github mute thread", "d": "10/2016"}, {"body": "docs component api", "d": "10/2016"}, {"body": "yea something happened redirects lacker", "d": "10/2016"}, {"body": "luqmaan thanks fixed let us know find broken links", "d": "10/2016"}, {"body": "hello world nt added redirects", "d": "10/2016"}, {"body": "great job new docs love live editor error handling curious reason used homepage tutorials curious whether best practice would thought possible otherwise", "d": "10/2016"}, {"body": "another thing noticed might issue old docs syntax errors nt correct formatting newlines babelcodeframe someone make pr add add style div edit css class seems make go width limit colored error box width would need longer accurate would better", "d": "10/2016"}, {"body": "reason var used homepage tutorials reason feel free send pr fixing", "d": "10/2016"}, {"body": "new style think point key differences old style take people knowing key things change", "d": "10/2016"}, {"body": "matter point much style lack cohesion previous docs nt really grouped topic clear progression simple complex titles nt descriptive many random tips nt fit cohesive narrative using apis nt used widely ecosystem anymore etc new docs line people use react today descriptive titles linear progression simple complex topics basic difference", "d": "10/2016"}, {"body": "possible typo docs consider ticking clock example one previous sections", "d": "10/2016"}, {"body": "gaearon uncontrolled form example passing value actually controlled example correct example would something like jsx class form extends reactcomponent constructor props super props thishandlesubmit thishandlesubmitbind handlesubmit event alert text field value thistextinputvalue render return reactdomrender documentgetelementbyid root", "d": "10/2016"}, {"body": "controlled component maintain internal state component renders purely based props bit confusing probably better clarify talking dom state instead react x thinkinginreacthtml second last paragraph nt mention jsxindepthhtml javascriptexpressions two headings id javascript expressions makes impossible link second one x fourth example innermost one missing", "d": "10/2016"}, {"body": "info latest stable removed landing page", "d": "10/2016"}, {"body": "andreyco mean download starter kit link mentioned version people nt find starter kit useful always find latest version releases gh page", "d": "10/2016"}, {"body": "another feedback controlled components", "d": "10/2016"}, {"body": "gaearon yes mean link mentioned version nt care link interested version information anyway big deal search latest gh releases ty", "d": "10/2016"}, {"body": "merged bunch prs fixes keep coming please", "d": "10/2016"}, {"body": "looks weird mobile sort broken top bar", "d": "10/2016"}, {"body": "feedback tutorial cc spicyj", "d": "10/2016"}, {"body": "figure redirects correctly", "d": "10/2016"}, {"body": "gaearon considered replace redcarpet kramdown", "d": "10/2016"}, {"body": "giuseppeg idea want send pr better understand difference", "d": "10/2016"}, {"body": "feedback people used seeing version number homepage add somewhere also link changelog good measure", "d": "10/2016"}, {"body": "reading though react without page react components declared classes methods follow semantics regular classes means nt automatically bind instance explicitly use bind constructor perhaps worth mentioning applies event handlers otherwise works fine happy open pr", "d": "10/2016"}, {"body": "simonsmith sounds good", "d": "10/2016"}, {"body": "perhaps worth mentioning applies event handlers otherwise works fine happy open pr simonsmith gaearon nt think true understanding correctly need bind method anytime might executed context refer component instance defined js class bar extends reactcomponent constructor props super props throw since tries access thisstatefoo thisstate undefined bar thispropslogfoo render return bar class foo extends reactcomponent constructor props super props thisstate foo foo logfoo consolelog foo thisstatefoo render return event handler common case case need bind methods", "d": "10/2016"}, {"body": "rule thumb access method anywhere without right need bind", "d": "10/2016"}, {"body": "rule thumb access method anywhere without right need bind docs", "d": "10/2016"}, {"body": "helps", "d": "10/2016"}, {"body": "prs welcome", "d": "10/2016"}, {"body": "aweary yeah point docs imply need use whenever want use instance method demonstrated true time seen code every method bound hand even called normally see people might think correct put together changes discuss pr", "d": "10/2016"}, {"body": "mention old stringbased refs new docs mentioned deprecated notice least", "d": "10/2016"}, {"body": "shenlok technically deprecated yet considered legacy refs dom mention briefly using ref callback set property class common pattern accessing dom elements currently using access refs recommend using pattern instead agree add small section bottom least describing string refs work notice nt recommend using could send pr", "d": "10/2016"}, {"body": "forms docs mistakes forms docs found mistake basic radio button example method use according state lifecycle docs bad thisprops set react thisstate special meaning free add additional fields class manually need store something used visual output nt use something render nt state", "d": "10/2016"}, {"body": "sorry discussed elsewhere nt able find references though many random tips nt fit cohesive narrative agree narrative although time many provided really good advice antipatterns things avoid least valuable way learning react browsesearch new docs missing sure whether integrated sections discarded reason imho specific section antipatterns beneficial newcomers avoid making common mistakes eg using props initial state well reference able point others", "d": "10/2016"}, {"body": "oops forgot builtin thing take pr renaming", "d": "10/2016"}, {"body": "ok", "d": "10/2016"}, {"body": "pr tries fix symptoms", "d": "10/2016"}, {"body": "ragnaroek thanks report nt seem determinstic happens ie least share test case reproduces nondeterministically even nt consistent better nothing would say fixing symptoms issue nt good idea may hide deeper issue cause hard debug problems somewhere else code path", "d": "10/2016"}, {"body": "agree fixing symptom way bad idea turned problem react exception one promise handlers", "d": "10/2016"}, {"body": "ragnaroek thanks update glad figured", "d": "10/2016"}, {"body": "iirc often indication setting state lifecycle method reason end endlessly changing state remember even nt actually change values state still queue update unless proper runs stack", "d": "10/2016"}, {"body": "yeah looked code could nt find cases issue expect code shown stack trace happen lot couple different stack traces logs code never still likely explaination error side dig", "d": "10/2016"}, {"body": "found common modules react dependency rather peerdependency npm package using webpack got around creating alias perhaps something similar gulp", "d": "10/2016"}, {"body": "awesome helped sharing ref others thanks", "d": "10/2016"}, {"body": "also please file issues libraries gently ask use instead", "d": "10/2016"}, {"body": "want install packages resolving configure require key browserify object take care error", "d": "10/2016"}, {"body": "also ran one exclusively chrome", "d": "10/2016"}, {"body": "thanks issue report moesattler react throws error messages certain points app chrome chrome browsers work test latest version react least something newer know hard large applications might issue already resolved nt able pinpoint cause unfortunately lot without reproducible test case could share minimal test case exhibits issue would useful might something already resolved newer release", "d": "10/2016"}, {"body": "impacting dev builds app anyone experiencing dist builds also ideas would impact dev builds", "d": "10/2016"}, {"body": "getting errors mentioned trying upgrade apis changed somewhat requiring us rebuild lot app", "d": "10/2016"}, {"body": "yes encounter issue stack trace shows markupindex nan line placing conditional debugger line resolve issue mysteriously upgrading react fix since reactmultichild changed happens code base lot react components rendered example large table pagination render non react component inside react component use setinterval call react rendering function constantly issues occur pc mac working fine however since widely used production code still supported would like see fix thanks", "d": "10/2016"}, {"body": "dev team facing exact issue chrome dev proddist works great reproduce time seems redraws components react take actions render components third one throw error every time", "d": "10/2016"}, {"body": "us since chrome upgrade last friday", "d": "10/2016"}, {"body": "using react error occurs chrome debugging see get triggers error going back stack trace point manually adding also breakpoints see value variable moment like adding noticed happens array received always pair insertmarkup similar type removenode interestingly enough able narrow one case really small piece component mine triggers simply something like tests able see provokes error without breaks places able avoid error happening part breaks error part within external component fyi trying work reproducible scenario", "d": "10/2016"}, {"body": "company using react webpack dev server upgrading chrome production works perfectly fine occurs rerendering components react", "d": "10/2016"}, {"body": "issue chromium arch linux seems like probably bug since way see gets set result place breakpoint around nt seem happen ie return nan classic heisenbug probably wonky lowlevel stuff", "d": "10/2016"}, {"body": "would bet due bug mentioned developit twitter ends returning value pushed instead index", "d": "10/2016"}, {"body": "case fix already merged pushed next stable release meaning would nt actionable end wait fix land", "d": "10/2016"}, {"body": "yup canary work fine decent way verify seeing turbofan push issue", "d": "10/2016"}, {"body": "guess issue could confirmed since lots met situation anyone fixed simply upgrading", "d": "10/2016"}, {"body": "patch release chrome windows seems already chrome fixed issue us", "d": "10/2016"}, {"body": "upgrading chrome fixed", "d": "10/2016"}, {"body": "thanks verifying moesattler", "d": "10/2016"}, {"body": "confirmed upgraded chrome version problem disappeared", "d": "10/2016"}, {"body": "see bad idea implemented could nt unshift array another one", "d": "10/2016"}, {"body": "please report specific issue ideally provide idea solution example good example issue", "d": "10/2016"}, {"body": "scsherwood ca nt make google gpt request componentdidmount rerender results call react finish rendering markup sent server ad request happen separately initial rendering complete", "d": "10/2016"}, {"body": "jblok reason cant make componentdidmount tied react lifecycle script component bottom page server side rendered markup need ads appear immediately page load already server side rendered markup delay ads showing client side scripts", "d": "10/2016"}, {"body": "yes entire app nt downside really unclear mean script third party ad script runs page load regardless loading ads componentdidmount wo nt slow stated server sending empty div anyway", "d": "10/2016"}, {"body": "yes entire app nt downside really visually speaking app present first byte lifecycle client side ties firing gpt request unclear mean script third party ad script runs page load regardless script bundled javascript react miscellaneous vendor scripts app scripts etc gpt loaded head document let know questions clarify goal visually render full page ads seconds", "d": "10/2016"}, {"body": "trying get front react render get faster performance ads waiting react costs us around ms ad call made steven sherwood w e stevensherwood weathercom tue oct jonathon blok notifications githubcom wrote scsherwood ca nt make google gpt request componentdidmount rerender results call react finish rendering markup sent server ad request happen separately initial rendering complete receiving mentioned reply email directly view github mute thread", "d": "10/2016"}, {"body": "another option may offscreen rendering ad serverstate load time push rendered html store components simply grab html store set inside target component using assumes determine ad service finished rendering", "d": "10/2016"}, {"body": "use state js class mycomponent extends component constructor props super props thisstate hasmounted false componentdidmount thissetstate hasmounted true render return text rendered server thisstatehasmounted amp amp text appears mounting generally nt recommend causes extra rerendering case sounds exactly like need", "d": "10/2016"}, {"body": "ill prepare sample repo illustrate situation", "d": "10/2016"}, {"body": "recently opened discussion kevin lacker tried reproduce application smaller example repo able reproduce ads wipeout issue theory one libraries using causing rerender causes warning message continue digging determine exactly library causing issues", "d": "10/2016"}, {"body": "hi thynson thanks creating issue making sure understand question intend use instead", "d": "10/2016"}, {"body": "dud know oct pm keyan zhang notifications githubcom wrote hi thynson thanks creating issue making sure understand question intend use instead receiving subscribed thread reply email directly view github mute thread", "d": "10/2016"}, {"body": "keyanzhang right autocompletion provided wrong tag name actually related svg thanks hint", "d": "10/2016"}, {"body": "controlled inputs already sanctioned way resetting using purpose seems sloppy", "d": "10/2016"}, {"body": "disagree intuitive inputs already get significant treatment normalize change event behavior would trigger change form resets primary motivation course address edge cases special inputs types chrome also makes forms resilient instead fighting browser plays nice", "d": "10/2016"}, {"body": "updated title ended going alternative approach fix chrome input issues love keep talking", "d": "10/2016"}, {"body": "joearasin thanks issue currently documented jsx depth though much said react jsx uses upper vs lower case convention distinguish local component classes html tags might also something willcan addressed clearly new docs cc lacker hramos", "d": "10/2016"}, {"body": "cc lacker updating jsx depth guide", "d": "10/2016"}, {"body": "see perfectly documented section", "d": "10/2016"}, {"body": "yeah documented places", "d": "10/2016"}, {"body": "furthermore manually attached onchange event via reference input indeed get triggered js class myinput extends component constructor props super props thisstate value componentdidmount thiselemonchange gt consolelog changing changehandler evt gt consolelog changehandler triggered thissetstate value evttargetvalue render const value thisstate return setvalueclear triggers dom attached change handler", "d": "10/2016"}, {"body": "ca nt use incompatible versions react reactaddonsperf please either use", "d": "10/2016"}, {"body": "upgrade one use", "d": "10/2016"}, {"body": "oh right nt separate package get importing", "d": "10/2016"}, {"body": "looks like problem exist exhibit behaviour", "d": "10/2016"}, {"body": "eqyiel thanks report seems bug safari able reproduce without using react test jsfiddle", "d": "10/2016"}, {"body": "aweary welp thanks looking guess try find workaround", "d": "10/2016"}, {"body": "ended using test like applying different styles conditionally closing nt think interest react team sort safari bugs", "d": "10/2016"}, {"body": "lines last argument rather second message argument nt get cut automatically like fix please submit pr splits several calls different messages check makes build size smaller", "d": "10/2016"}, {"body": "proposal use message map apart js file message map easy use debug mode easy remove publish create message code example message sample message sample message sample message use reactjs message code", "d": "10/2016"}, {"body": "already exactly suggested done automatically use pass string second argument babel transform extracts second message argument however nt happen arguments suggested making multiple calls", "d": "10/2016"}, {"body": "talking reactdomminjs reactminjs gulp script extracting errorcodes part build run separately gaearon said actually make minified version bytes larger change lines reactmountjs currently errorcodes part codesjson gain places continue tomorrow", "d": "10/2016"}, {"body": "cleaning code table bring size reactminjs reactdomminjs however numbers code table contain gaps renumbering causes tests depend numbers fail fix", "d": "10/2016"}, {"body": "rickbeerendonk fixed improvements welcome", "d": "10/2016"}, {"body": "keyanzhang look", "d": "10/2016"}, {"body": "conclusion invariants second argument ending meaning text argument minified files changing code turn resources possible increases size minified files missing error messages fixed container old error messages cleaning remove bytes reactminjs bytes reactdomminjs removing unused error messages make unit tests fail due required renumbering fragile gulp task react extracterrors add error messages nt remove oldunused messages cleaning messages however gain bytes minified files new issue gulp task react extracterrors find error messages build messages error message item must set found current react version error map probably sync please run building react gaearon keyanzhang submit pull request updated old messages removed reducing size minified files job gulp task react extracterrors propose anything issue changing code increase minified files", "d": "10/2016"}, {"body": "thanks contribution however manually edited file designed appendonly ensure backward compatibility means existing code file never changedremoved readme file added contains information system gulp task also fixed however interesting mentioned removing old messages actually decreases build size could tell json file used reference included release build sure happens", "d": "10/2016"}, {"body": "keyanzhang backwards compatibility bit hidden docs due central system error messages old past versions", "d": "10/2016"}, {"body": "rickbeerendonk yeah exactly affect build size though", "d": "10/2016"}, {"body": "keyanzhang hmmm might due missing messages fixed", "d": "10/2016"}, {"body": "short answer need call method datetimenow variable date object string ie one objects error message referring said error message initially confusing since simply renders date string example replace object error message makes little sense", "d": "10/2016"}, {"body": "correct dates objects js render output may contain react elements strings numbers formatting string like method work find list methods mdn cheers", "d": "10/2016"}, {"body": "update rcs need update react reactdom package judging error message redboxreact old copy reactdom nodemodules delete issue fixed also bring maintainers reactdom needs peerdependencies rather dependencies closing something fix react hope helps", "d": "10/2016"}, {"body": "fixed need delete updating", "d": "10/2016"}, {"body": "issue solved updating redboxreact thank gaearon", "d": "10/2016"}, {"body": "cc zpao", "d": "10/2016"}, {"body": "thanks reporting yes mistake publish retagged latest fine", "d": "10/2016"}, {"body": "react runs javascript thus considered naturally map corresponding htmldom jsproperties htmlattributes artifact html attributes htmldom jsproperty boolean also html lot quirky stuff simplistic design legacy limitations legacy nt exist js intentionally bringing quirks along seems counterproductive note behavior official reactdom module renderer react naturally going opinionated", "d": "10/2016"}, {"body": "work", "d": "10/2016"}, {"body": "disabled attribute works expected react matches autofocus work", "d": "10/2016"}, {"body": "props meant mapping html attributes use camelcased version make clear javascript properties html attributes dom properties attributes including event handlers camelcased consistent standard javascript style intentionally break spec since spec inconsistent react docs dom differences something like corresponds directly disabled attribute works expected react matches autofocus work work need use camelcased attribute name works fine since attributes without values default since explicitly intentionally breaking spec going close really appreciate issue", "d": "10/2016"}, {"body": "weird camelcase single word", "d": "10/2016"}, {"body": "think consistency semantics making camelcase makes consistent think less confusing either way point would nt worth introducing breaking change like semantical reasons", "d": "10/2016"}, {"body": "would nt breaking change could updated allow ways", "d": "10/2016"}, {"body": "would introduce new inconsistency since nt support attributes currently", "d": "10/2016"}, {"body": "yeah might messed please send pr", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "problem specific jsxtransform using testing babeljs officially recommended one final code looks fine correct shadowing transformtool using", "d": "10/2016"}, {"body": "intended behaviour got investigate thanks", "d": "10/2016"}, {"body": "thanks pointing totally correct actually pr totally replacing doc updated one fixes reference finddomnode let go pr comment welcome btw", "d": "10/2016"}, {"body": "lacker", "d": "10/2016"}, {"body": "unless missing something nt actually make lot sense browsers perform encoding try read obvious reasons encoding take place runtime client react sets attributes via js exists server generate raw html rendered asis nt really value dealing broken parsers much quotes encoded attributes way around seems either changefix parser run preprocess step goes html decodes entities attributes feeds parser benefit react", "d": "10/2016"}, {"body": "hey thanks filing issue ca nt specify object different type values eg proptypesobjectof id proptypesnumber name proptypesstring nt think ever supported nt looking help cheers", "d": "10/2016"}, {"body": "hi may nt throw warnings used wrongly without realising update codebase use shape thanks", "d": "10/2016"}, {"body": "nt working around lack threads language yes true nt good option javascript run threads huge problem tried exploring various options running web workers parallel js tried propose shared immutable persistent data structures language experimented custom vm tweaks etc javascript language nt suitable mutable shared runtimes like prototypes ecosystem nt ready duplicate code loading module initialization across workers garbage collectors efficient currently thread safe vm implementors seem unwilling bare implementation cost persistent data structures shared mutable typed arrays seems moving along requiring data go layer seems unfeasible ecosystem today artificial boundaries different parts code base also nt work well introduces unnecessary friction even lots js code like utility libraries duplicated across workers leads slower start time memory overhead yes threads likely question target something like web assembly however interesting realization benefits fiber architecture applicable whether threads componentkit runs native work using threads example able start higher priority work one thread lower priority thread still happening leading much simpler implementation however limitations ca nt safely abort background thread aborting restarting thread cheap many languages also safe could middle lazy initialization work even though effectively interrupted continue spending cpu cycles one solution samething fiber make api yield points unwind stack safely check flag periodically abort effectively fiber another limitation since ca nt immediately abort thread ca nt sure two threads processing component time leads limitations able support stateful class instances like although might good thing reasons another thing threads nt automatically buy ability resume part work ca nt memoize part work done one thread reuse another certainly implement threads end similar complexity fiber top threads threads slight benefit start next work slightly earlier interject instructions background thread still powering however yield points frequent enough default nt think matter fiber therefore yes writing complex implementation lacking threads javascript forced deal end better features simply relied threads scheduling parallelism true threads get parallelism however nothing scheduling responsiveness generally nt want spend one cpu processing work already aborted higher priority work arrived nt buy anything instead really want calculate independent work different threads example two react siblings calculated parallel threads since disconnected access threads would however everything fiber still valid scheduling purposes architecture even use threads parallelism subtrees conclusion working around limitations language note say choose cooperative scheduling threads projectuse case particular use case made sense threads still make sense many cases", "d": "10/2016"}, {"body": "ok cooperative scheduling might benefits preemptive threads could nt use generator functions like scheduling frameworks done two reasons generators nt let yield middle stack wrap every single function generator adds lot syntactic overhead also runtime overhead existing implementation fair syntax might helpful perf issue still stands biggest reason however generators stateful ca nt resume middle want execute across multiple time slices step however get update b already completed way reuse value ie skip ahead different value still reuse result important react since lot memoization plausible add layer around really gaining much use generators also languages generators designed functional use case capability js one", "d": "10/2016"}, {"body": "ok ocaml algebraic effects bucklescript compile nontrivial overhead js version assuming would ok use algebraic effects ocaml way think would need clone fiber resume possible compiler could reuse immutable stack frame fiber without copying works without get limited benefits would also end lots nested handlers would add overhead also add linear search time find top handler yield besides support existing react api need set features overlap implementation fibers return pointers combining get benefits high hopes one day use effects use cases internally could also use make even simpler react api however think probably easier lower level control even though complexity higher look forward seeing implementations prioritize implementation simplicity using complex compilers solve problems", "d": "10/2016"}, {"body": "mistake using constructor instead", "d": "10/2016"}, {"body": "already works fiber backport existing reconciler fiber ready yet hope ship next year", "d": "10/2016"}, {"body": "submit traditional htmlformelement case need preventdefault event passed submit handler", "d": "10/2016"}, {"body": "currently validation using local json file client side event onclick added links components used need use preventdefault every time use predefined event", "d": "10/2016"}, {"body": "ca nt believe basic needed use preventdefault", "d": "10/2016"}, {"body": "updated fail case less code works node js use strict const react require react const enzyme require enzyme const jsdom require jsdom const doc jsdomjsdom globaldocument doc globalwindow docdefaultview class root extends reactcomponent componentwillmount work deferred settimeout thistestbreakbind testbreak work setstate thissetstate render work remove least one bug manifests multiple children nt matter children array return reactcreateelement div null reactcreateelement reactcreateelement enzymemount reactcreateelement root const testreactelement gt reactcreateelement div work use instead shallow rendering const testrender gt enzymeshallow reactcreateelement testreactelement work call testrender lt testrender testrender testrender edit updated code comments", "d": "10/2016"}, {"body": "another example uses pubsub eventemitter simulates test would look like hooked something like flux js use strict const react require react const enzyme require enzyme const jsdom require jsdom const transmitter require transmitter const bus transmitter const doc jsdomjsdom globaldocument doc globalwindow docdefaultview class root extends reactcomponent componentdidmount fluxlike bussubscribe gt thissetstate render work remove least one bug manifests multiple children nt matter children array return reactcreateelement div null reactcreateelement reactcreateelement works use shallow rendering enzymemount reactcreateelement root const testreactelement gt reactcreateelement section work use instead shallow rendering const testrender gt enzymeshallow reactcreateelement testreactelement work call testrender lt testrender testrender testrender call action separate test fail buspublish", "d": "10/2016"}, {"body": "things hope would also appended list featuresbugs fixing context making stateless functional components performant learning inferno provide stateless function components lifecycle hooks maybe revisingimproving reacts legacy build step try cut react size major rewrite", "d": "10/2016"}, {"body": "donnieflorence list things need get parity existing implementation finish might look adding new features", "d": "10/2016"}, {"body": "wickedrahul please fill issue report template provide steps reproduce andor demo reproducing issue unfortunately ca nt help without information", "d": "10/2016"}, {"body": "closing since information response", "d": "10/2016"}, {"body": "hey use issue tracker specifically bug reports feature requests usage questions directed somewhere else like stackoverflow thanks", "d": "10/2016"}, {"body": "multiple items name meant warning trivial efficiently correctly currently warned", "d": "10/2016"}, {"body": "syranide ok suggestions solve country example fiddle want favorite list beginning", "d": "10/2016"}, {"body": "jansoren want help code need use stackoverflow discussion board keep gh issues bugs simply need give separate name prefix use differentiate", "d": "10/2016"}, {"body": "want help code need use stackoverflow discussion board keep gh issues bugs simply need give separate name prefix use differentiate", "d": "10/2016"}, {"body": "technically pass context like normally react wrap rendered element element context providing component shortcut offered enzyme shortcut able pass context using regular react api", "d": "10/2016"}, {"body": "prefer use shortcuts case also ran problem trying use contextproviding component render", "d": "10/2016"}, {"body": "looks like duplicate react bundle could case", "d": "10/2016"}, {"body": "nt think found issues people saying seen could explain things try without", "d": "10/2016"}, {"body": "folder get duplicate react", "d": "10/2016"}, {"body": "thanks confirming currently using lerna webpack maybe something webpack module resolution config", "d": "10/2016"}, {"body": "going close since technically already pass context via usual means wrapping component error see appears related module resolution rather react", "d": "10/2016"}, {"body": "please someone confirm bug design", "d": "10/2016"}, {"body": "sure intentional likely matter projects observable difference reason matters", "d": "10/2016"}, {"body": "even getting", "d": "10/2016"}, {"body": "perhaps browser thing looking callstack nt really see would argument", "d": "10/2016"}, {"body": "reason matters yes implemented custom basic component jsx export class uicomponent extends reactcomponent got problem method method allows attach event handlers defined component classes extra data binding always first argument event object jsx class customlist extends uicomponent render return thispropsitemsmap item index gt return", "d": "10/2016"}, {"body": "ok actually react passing sure actually used somewhere anyway still got third argument assume comes browser nt seem like safe assumption anyway unless something else missed", "d": "10/2016"}, {"body": "syranide may ask version react use", "d": "10/2016"}, {"body": "point nt see reason react pass internal data event handler opinion garbage data makes event handlers inconsistent wrong", "d": "10/2016"}, {"body": "agree make sense pass garbage look call stack figure fix", "d": "10/2016"}, {"body": "quick look ca nt figure caused problem calls stack first calls cusstom methods onitemclick uikiteventhandler reacterrorutilsinvokeguardedcallback executedispatch executedispatchesinorder executedispatchesandrelease executedispatchesandreleasetoplevel foreachaccumulated processeventqueue runeventqueueinbatch handletoplevel handletoplevelimpl perform batchedupdates batchedupdates dispatchevent also found switched minified version regular version regular react build event handler got params syranide said", "d": "10/2016"}, {"body": "believe problem binds additional arugments case get looks like longer case master binds one argument binds event handler", "d": "10/2016"}, {"body": "purpose push event object event handler", "d": "10/2016"}, {"body": "aweary proxy syntheticevent", "d": "10/2016"}, {"body": "yes seems proxy", "d": "10/2016"}, {"body": "see syntheticeventjs proxy used dev supported", "d": "10/2016"}, {"body": "aweary good news waiting next release react team make serious refactor module look like mess code fix params variables naming", "d": "10/2016"}, {"body": "thanks advice perhaps could send pr help us", "d": "10/2016"}, {"body": "pr would much appreciated happy review keep mind meant general purpose module safe function invocation example use calling componentwillunmount argument names generic since represent almost generic argument though kind confusing use cases even though used outside event system know gaearon", "d": "10/2016"}, {"body": "guys complete picture react works inside situation little use", "d": "10/2016"}, {"body": "guys complete picture react works inside situation little use totally understandable codebase dense sometimes wanted give try would happy work pr otherwise one us try get going close issue think identified additional arguments expect see least native event browser passing changes master released", "d": "10/2016"}, {"body": "though kind confusing use dispatchevent cases dev even though used outside event system know gaearon understand abstraction exists \u30c4", "d": "10/2016"}, {"body": "aweary nt understand send native event second argument native event instance already attached property right", "d": "10/2016"}, {"body": "side effect current abstraction since actually dispatching empty event function called event handler gets passed event mock event see nt actually event used invoke event handler type react type case dev though kind weird actually going reopen either fully justify abstraction exists remove abstraction", "d": "10/2016"}, {"body": "four arguments ca nt find callsites call four arguments let remove argument issue resolved", "d": "10/2016"}, {"body": "create react component web component constructor give custom event support", "d": "10/2016"}, {"body": "long support attributes nt see problem heuristic concern would heuristic normalizing event name really fan converting things like mootools concern related handle capturebubblepassiveactive etc like better could pass props element properties seems like ship sailed since web components nt designed handle properties properly massive loss community imo", "d": "10/2016"}, {"body": "like better could pass props element properties seems like ship sailed since web components nt designed handle properties properly massive loss community imo feels like statement clumping web components single bag poor design many cases nt mean ca nt optimise ones designed well couple paradigms trying push community skatejs events props use props source truth sync attributes props monica dinculescu mentioned former rob dodson latter polymer summit talks think something trying espouse unfortunate primitives nt make obvious think comes nature browser builtins days react setting props supporting custom events reason maintain react integration library posted worth looking source patterns definitely working us production also worth noting patterns employed also used skate wrapper around incremental dom set props everything falling back attributes last resort integration lib events special convention similar react particular something pay attention adding event listeners without checking name something like prefer events propertiesyou could flip around set props leave web component property set creates little work component means nt prefix checking fan", "d": "10/2016"}, {"body": "treshugart people seem find counterintuitive preference would effectively call sounds like fan approach well maybe still hope change web components ecosystem prefer indeed react promoting style would perhaps help staltz think approach", "d": "10/2016"}, {"body": "sebmarkbage like approach think things consider probably already aware props nt work elements error set property example readonly attributes nt work elements needs set property example attribute sync property set user sets value web components may edgecases attributeonly handler necessary maybe attributes dashes myproperty reflected camelcased props myproperty behaviour probably fine worry case consumer use attributes name property happens property getter set writable false way consumer prefer attribute maybe something enforced component author must provide setter consumer would behaviour applied custom elements would detected something like following might little bit robust brainstorming case overall tend agree fine react seems like ways consumer get around potential design problems component using maybe still hope change web components ecosystem prefer indeed react promoting style would perhaps help sure hope trying know polymer team trying well think react massive help", "d": "10/2016"}, {"body": "like better could pass props element properties seems like ship sailed since web components nt designed handle properties properly massive loss community imo sure exactly referring polymer definitely prefer setting properties setting attributes web components nt handle properties way", "d": "10/2016"}, {"body": "sebmarkbage think definitely encourage folks write components support objectassign approach mentioned treshugart mentioned spoke polymer summit talk based previous twitter discussion easy event support react would also great", "d": "10/2016"}, {"body": "talk also mentioned need dispatch events state changes libraries like react revert changes similar way react handles native input checkbook element", "d": "10/2016"}, {"body": "events props yes think would benefits outside web components wonder see libraries rely less context api could emit custom event nt see problem heuristic typeof props propname function elementaddeventlistener propname props propname false sebmarkbage unless know current work happen stencil something", "d": "10/2016"}, {"body": "nhunzaker well think discussed would alternate strategy would support addeventlistener click fn would instead support elementonclick fn", "d": "10/2016"}, {"body": "yeah think ok idea understand proposed avoid translating reasons", "d": "10/2016"}, {"body": "problem properties attributes events children know one use end heuristics explicit namespaces nt think explicit namespaces ergonomic properties powerful attributes properties rich data types eg boolean complex objects like typed cssom let us specific data types individual style properties html properties always control represent current visible state element whenever diverge properties source truth like case htmlinputelement exception set indeterminate state oversight treshugart pointed exception mostly random things added carelessly outside normal process rdf custom elements built third parties svg properties ca nt set normal way usually using instead nested normal properties edge cases dealt library like react dom knows properties benefit reflected ca nt detect attribute event accepted accepted ca nt add runtime warnings wrong attribute names also use workarounds eg fallback something else property available one prefer properties leaves events use heuristic affects performance negatively since create mappings runtime also means claiming whole namespace means custom elements ca nt provide property wanted example infinite scrolls pattern like nt simple event callback invoked create row particular index think would unfortunate claim whole namespace prefix type precedence much simpler model course still leave us children special kind unique property react children components type value concede one constrained special case", "d": "10/2016"}, {"body": "took stab implementing model discussed sebmarkbage let know matches thinking javascript class xcheckbox extends htmlelement connectedcallback thisaddeventlistener click thisonclick disconnectedcallback thisremoveeventlistener click thisonclick onclick e thischecked thischecked thisdispatchevent new customevent checkchanged detail checked thischecked bubbles false set oncheckchanged fn thisremoveeventlistener checkchanged thisoncheckchanged thisoncheckchanged fn thisaddeventlistener checkchanged thisoncheckchanged get oncheckchanged return thisoncheckchanged set checked value thischecked value value thissetattribute checked thisremoveattribute checked get checked return thischecked customelementsdefine xcheckbox xcheckbox const props checked true oncheckchanged function e consolelog oncheckchanged called e const customcheckbox documentcreateelement xcheckbox objectassign customcheckbox props documentbodyappendchild customcheckbox one concern element authors optin defining setter expose handler every event dispatch may end bloating elements especially variety events expose react might make element author lives bit easier speaking personally knowing trade event name heuristic define setters everything choose heuristic", "d": "10/2016"}, {"body": "sebmarkbage get properties preferable attributes polymer defaults setting properties since web components days polymer elements polymer automatically supports properties think web components handle properties correctly wc libraries seen handle properties correctly well know large set components nt support properties let know glad see help fix massive loss robdodson nt think really feasible element authors write event handler properties events work fine event handler properties extra burden wo nt consistently implemented nt even sufficient many uses guess dom event handler properties would nt even exist vestige earlier time polymer angular believe skatejs well syntax conventions declaring binding property attribute adding event handler html attribute names nt know jsx seems like since html javascript lot leeway invent syntax unambiguously differentiate properties attributes events", "d": "10/2016"}, {"body": "react intentionally went back claims single event handlers better model use cases multiple event listeners better solved elsewhere since leads confusion events flow order flow additionally string based event system difficult type statically type systems like typescript flow optimizing adding lots event subscriptions runtime instead string based hash maps nt think fair say event handler properties strictly worse types firstclass event handlers like observables would nice support using properties important feature interop reflection without reflection ca nt make automatic wrappers providing firstclass observables properties available event something event listener system nt provide course like attributes nt really make sense since stringly typed event system broadcast string element bubbling", "d": "10/2016"}, {"body": "sebmarkbage good points moment take look sample code posted let know seems inline thinking", "d": "10/2016"}, {"body": "robdodson yes looks good", "d": "10/2016"}, {"body": "problem boilerplate think solvable initially user space terms libraries make easy create bestpractice custom elements later standard helper batteries included", "d": "10/2016"}, {"body": "problem boilerplate think solvable initially user space terms libraries make easy create bestpractice custom elements later standard helper batteries included yeah sounds good treshugart staltz guys think", "d": "10/2016"}, {"body": "looks awesome reiterate currently solves stuff userland might good spot start collaborating boilerplate", "d": "10/2016"}, {"body": "experience using vanilla web components reactlike architecture humble suggestions nt spray props directly onto element something like instead makes alot easier debug works better immutable paradigm time travel avoids clashes gives component chance interpret data especially important wc extends native element etc nt support attributes much better one good consistent way properties deal data several partial solutions scale little benefit gained trying make attributes work would offset confusion many devs hopefully eventually reflects back wc design component implements render function invoke updating world essentially except components stateless amp stateful would great wcs implement declarative render function rather deal change individually aforementioned agree standard helper binding events perhaps jsx syntax addition", "d": "10/2016"}, {"body": "hate chime thread like feel owe justin deminimus hard work patience someone building shard templating engine designed approximate functional groups unbelievable excuse french expletive json manage data looped layered attributed pass data strings makes even vaguest concept sacrificing speed ease use dom severability available via element properties alternative mapped property proxies anathema via shard templating granular web components hundreds inputs radically different configs fly changes handled fewer five fingers worth event handlers focus edge cases attempting dual focus one exception attribute based handlers make events specific element view image one simplest projects iuniversal dropdown takes items whatever input menu calls handle events via attribute binding window click touched listener creative refactoring focus manipulation text inputs excepted use chase handler passes listener active text field damned tab apple", "d": "10/2016"}, {"body": "minimum gon na burn wheel kill cpu complex app", "d": "10/2016"}, {"body": "robdodson yeah aligned think well speaking personally knowing trade event name heuristic define setters everything choose heuristic also choose action points issue willing something unsure confused whether robdodson sebmarkbage intentions act", "d": "10/2016"}, {"body": "clarify conclusion robdodson shows proposed bestpractice feasible direction web components ecosystem including event listeners properties react switch simply transferring props element properties next major release next actionable item would someone maybe polymer provides way make easy build web components see viable rawform web components community opposed big libraries", "d": "10/2016"}, {"body": "staltz discussing platform engineers chrome raised issues around native properties work builtins think worthwhile discuss working follow details points covered", "d": "10/2016"}, {"body": "checkbox example showed relatively simple bit verbose ce author wire event handler properties however turns currently impossible ce author implement event handler attributes match behavior platform builtins attribute handlers created ways exposed plain javascript raises concern make sense promote pattern ces uses existing semantics nt attribute property parallelism realize frameworkslibraries problem use properties general pattern ces troubling breaks html elements work could surprising anyone assuming would behave like builtin tags couple solutions team proposed spec api making easy ce authors mimic native behavior could generate properties attributes would work exactly builtins pursue propertiesonly approach use existing semantics basically use opportunity say stuff pretty weirdbroken instead encouraging let pioneer different system userland feed back spec personally lean toward option curious folks thread think options take time leaves question approach move forward near term think couple options similar staltz original proposal react could add event listeners dom events instead defining heuristic translating possible solution would express event name jsx eg element authors continue use properties events approach promote treshugart reactintegration lib improve interop react lean toward option reactintegration lib awesome option lowers barrier people use ces react together either case would continue encourage folks treat properties source truth may want encourage bubble events good reason know one critiques current event system might place agree best practice options avoid baking pattern hash would better long term alternative add motivated work think primary goal extensible web movement web components general take feedback library framework authors use improve platform", "d": "10/2016"}, {"body": "example would prefer", "d": "10/2016"}, {"body": "yes agree everything rob said could still bikeshed name need know sebmarkbage thinks", "d": "10/2016"}, {"body": "curious though react decide set props element opposed attributes could troublesome custom elements needing things set attributes", "d": "10/2016"}, {"body": "function expects three parameters pass documentation typescript code would compile source problem comes element creation react internal code missing argument inside shallowcompare shallowequal use strict compare end sth like always false use base class extends old way nt need write anymore warning dev react version would better optional parameter later add state component likely forget pass additional parameter therefore parameters required", "d": "10/2016"}, {"body": "bug safari support expose values could used accurately reliably polyfill fully either unless changed recently doubt however report correct values control keys like space enter arrows escape etc", "d": "10/2016"}, {"body": "control space arrow etc keys report correctly say guessing solution would essentially roll keymap keydown keyup events specific safari since nt normalized default side note probably note sytheticevent documentation keydown keypress keyup events react syntheticevent truly normalized safari browsers", "d": "10/2016"}, {"body": "guessing solution would essentially roll keymap keydown keyup events specific safari since nt normalized default doubt reliably polyfilled safari nt note refers virtual key code users keyboard layout use reliably turn characters hoping hence nt certain circumstances may acceptable say hotkeys side note probably note sytheticevent documentation keydown keypress keyup events react syntheticevent truly normalized safari browsers protectedvoid yeah perhaps applies many browsers many different types events also find browsers nt support similar features fully either truly normalized grey area regardless", "d": "10/2016"}, {"body": "definitely think added note documentation struggling issue right implicitly thought syntheticevent actually handled issue syntheticevent normalize browser event quirks issue restricted safari also browsers makes even important put note guess somebody would argue common knowledge keyboard events consistent cross browser one seldomly use keyboard events would definitely found useful react docu stated", "d": "10/2016"}, {"body": "syranide main thing looking using key keycode implementing method restricted input numeric values allowing tabs backspace delete shift home end arrow amp meta keys protectedvoid yeah perhaps applies many browsers many different types events also find browsers nt support key similar features fully either truly normalized grey area regardless reading documentation syntheticevent mistaken impression things like key events already normalized across modern browsers assumption made suggesting overly detailed explanation anything least something indicating properties syntheticevent available browsers even modern ones", "d": "10/2016"}, {"body": "doubt reliably polyfilled safari nt note keycode refers virtual key code users keyboard layout use reliably turn characters hoping hence nt syranide give example using would result incorrect results know replaced also refers virtual key code", "d": "10/2016"}, {"body": "aweary keyboardevent supports mostly keydownup mostly keypress reason distinction difference code represents button keyboard character code represents translated keyboard layout settings os important thing note pressing keyboard always generate whereas resulting may etc something else entirely say russiankorean keyboard layout resulting also depends shiftctrldeadkeyetcstate bad idea filtering characters pressing generate number hold shiftctrletc also generally good idea actively filter inputs destroys undo history even corrupts undo history chrome still fixed stuff may also pasteddraggedetc keydown insufficient regardless looked using normalization back concluded could nt used reliably nt remember exactly either represents keyboard button identifier ie universal code keyboard button reflect shiftctrldeadkeycompositionstate andor reported wrong keys cases also interesting note browsers natively support actually report wronginconsistent characters possibly due omissions specification even normalization perfect still could nt rely behaving perfectly", "d": "10/2016"}, {"body": "syranide thanks breaking agree nt seem safe way polyfill looks like work done getting safari cc lacker might want make mention docs since nt first time tripped people going close since ca nt resolve stands", "d": "10/2016"}, {"body": "cc lacker might want make mention docs since nt first time tripped people documenting normalizations proscons sounds like undeniably beneficial thing even knowing things normalized big win someone willing invest time", "d": "10/2016"}, {"body": "deferred may may affect otherwise work afaik called everything flushed dom nothing left react intuitively work however remember images may downloaded later increase size rows throwing applies webfonts stylesheets loaded script also throw measurements brief flickering see fiddle seems images presized thus throw initial measurements begin load", "d": "10/2016"}, {"body": "guaranteed update state immediately state updates batched whenwhere accessing state cases", "d": "10/2016"}, {"body": "aweary consolelog statements currently componentdidmount function however result render function find state updated class object thisstate", "d": "10/2016"}, {"body": "consolelog statements currently componentdidmount function guarantee state updates complete immediately since batched see docs setstate setstate immediately mutate thisstate creates pending state transition accessing thisstate calling method potentially return existing value guarantee synchronous operation calls setstate calls may batched performance gains logging state immediately calling likely give previous state since nt actually updated yet want perform side effect something state updated provide callback js thissetstate newstate gt callback called state updated however result render function find state updated class object thisstate saying contain updated state called", "d": "10/2016"}, {"body": "aweary correct read docs setstate saw state guaranteed updated right away saw state updated new state within function program thought strange behavior something wrong also said however result render function find state updated class object thisstate specific first render give output unexpected called showing stxchart state second render contain new chart object empty object initialized expected updated time inconsistency made question verbose output javascript class chartcontents extends reactcomponent constructor super thisstate stxx componentdidmount let stxxnew stxchart thischartcontainer stxxnewchart spy sampledata thissetstate stxx render const style height position relative width red arrows show inconsistent green arrow shows state match inconsistency concerned trying understand something wrong expected behavior", "d": "10/2016"}, {"body": "avakathrynshaw log chrome creating copy object actually reads data object expand console hence expand object console case seeing value value logged", "d": "10/2016"}, {"body": "syranide thank thought look browser worked well new react assumed something wrong close issue", "d": "10/2016"}, {"body": "hey totally agree get updated bunch folks working react docs week newdocs branch format little bit different take", "d": "10/2016"}, {"body": "ok newdocs branch", "d": "10/2016"}, {"body": "added visibility let track would like write", "d": "10/2016"}, {"body": "take stab sure", "d": "10/2016"}, {"body": "cc zpao", "d": "10/2016"}, {"body": "thanks catching need add packagejson field", "d": "10/2016"}, {"body": "closed tada", "d": "10/2016"}, {"body": "versions react addon match deleting nodemodules running npm install nt get extra copy react npm leave top level react module tree case", "d": "10/2016"}, {"body": "gaearon yes case using webpack bundle component leave react external bundle part lib file using component angular project load react separately react nodemodules folder problem however guessing comes fact requires specific reactlib file gets bundled separately loading react library separately requirement part ngreact library two versions react atleast two versions function noticed hope making sense trying create fiddle see communicate clear way", "d": "10/2016"}, {"body": "tl dr gaearon issue amp solution seemed work longer version issue issue seemed using internal apis react somebody using writing custom library define react external essentially two copies react one external reference react causes issue using custom library external react solution declare external dependencies custom library use external react source", "d": "10/2016"}, {"body": "yeah nt good story around umd bundles referencing addons right plan decouple addons completely perhaps hand community nt actively maintain anyway", "d": "10/2016"}, {"body": "ajainarayanan problem adding external dependencies nt helped confused referencing probably overlooking something small help would appreciated", "d": "10/2016"}, {"body": "grahamvo reactjs comes react alone reactwithaddonsjs packages react along necessary addons packaging reactaddonscsstransitiongroup external dependency library want use reactwithaddonsjs project using library hope helps", "d": "10/2016"}, {"body": "hi unfortunately nt look like issue related react like something wrong build setup hard guess exactly snippets use bug tracker bugs react close issue need help would encourage create publish project reproducing issue link stackoverflow forums hopefully somebody take look way also offer officially supported build setup react apps problem file issue help", "d": "10/2016"}, {"body": "oh sure way calling dibs one", "d": "10/2016"}, {"body": "alright getting ready send pr lunch pizza", "d": "10/2016"}, {"body": "dotch thanks report able reproduce outside react looks like issue safari js var container documentgetelementbyid container var root documentcreateelement root var documentcreateelement input var documentcreateelement input var svg documentcreateelementns svg var use documentcreateelementns use usesetattributens href icon svgappendchild use rootappendchild rootappendchild svg rootappendchild containerappendchild root verify issue still occurs submitted bug report apple", "d": "10/2016"}, {"body": "hi aweary thanks investigating link us bug report keep track", "d": "10/2016"}, {"body": "danburzo submitted report feedback form bug report category nt let track report nt personally developer account apple nt access might worth reporting anyone wants", "d": "10/2016"}, {"body": "reported bug nt think share url please find screenshot report like", "d": "10/2016"}, {"body": "thanks much sarbbottam", "d": "10/2016"}, {"body": "fyi deprecated one use however issue exist updated bug report", "d": "10/2016"}, {"body": "think intention move towards fiber completely different api use classes today friends fiber reconciler intentionally written opaque targets mind decoupled day one exposed package mature pitfalls today caused shared state renderers like meantime work custom renderer think encouraged ship copy react reconciler least react native far know means affected breaking changes react repo master update renderer time complicates setting custom renderer need script keep reconciler fork sync react repo would cool somebody contributed rn renderers could use meant longterm solution neither current renderer architecture", "d": "10/2016"}, {"body": "yeah looking something maintain release cycle primarily knowing fiber change world sound like saying rather see hack community sync react reconciler code codebase something react native avoid repo rather expose something explicitly new build format released fiber becoming official stable", "d": "10/2016"}, {"body": "sound like saying rather see hack community sync react reconciler code codebase something react native avoid repo react native nt plan avoid opposite open diff react native ship copy reconciler manually synced like described lets rn team experiment changing renderer code sync pace exposing renderer package pitfalls significant one unintentionally shared state different renderers like", "d": "10/2016"}, {"body": "link open diff chance find browsing", "d": "10/2016"}, {"body": "nt think submitted pr likely internal diff yungsters updates getting merged", "d": "10/2016"}, {"body": "close plans take extra steps support custom renderers stack reconciler changing everything fiber fiber firstclass custom renderer support", "d": "10/2016"}, {"body": "would like submit pr doc page", "d": "10/2016"}, {"body": "sure", "d": "10/2016"}, {"body": "might lead security issues potentially malicious thirdparty scripts selfxss treat data keep client javascript memory secure thirdparty script kinds things including overriding react global use one pretending react devtools overriding native object behavior react offers guarantees internal structures exposed third party code fact impossible perhaps extremely hard offer guarantee react example methods could altered order react leak internal data would use javascript runtime functions need protect data load javascript", "d": "10/2016"}, {"body": "using would work fixing issue course security guaranteed would preferable expose data directly instead keep closure imo", "d": "10/2016"}, {"body": "since offer guarantee eg devtools needs hook information anyway see point adding halfmeasures patch places better opinion guarantee something accept patch fixes one hundreds places might rely something like especially considering test suite guarding future changes might expose information", "d": "10/2016"}, {"body": "reason class vs classname valid properties web components warnings intended fixed case might impossible fix since already correct think solved custom components validate props", "d": "10/2016"}, {"body": "either scale say level although sure debug level update documentation personally big fan web components although evidently biased think developers run issue", "d": "10/2016"}, {"body": "mentioned documentation agree ideal adding warning would defeat purpose allowing", "d": "10/2016"}, {"body": "johnius nt show example hard evaluate solution looks like hack dom operations like focus valid without", "d": "10/2016"}, {"body": "think important came", "d": "10/2016"}, {"body": "ok react team working overhauling docs amp plan finish docathan october newdocs branch way get want via notsuperdisruptive changes like css feel free send pull request branch rather someone react team take look vjeux claims gon na hard think get next couple weeks", "d": "10/2016"}, {"body": "changes mostly css definitely superdisruptive send pr later tomorrow", "d": "10/2016"}, {"body": "lacker pr look", "d": "10/2016"}, {"body": "done thanks much", "d": "10/2016"}, {"body": "looks like bug sure high priority since concentrating fiber would great could turn failing test case", "d": "10/2016"}, {"body": "close since nt provide jsfiddle issue template explicitly asked thank time happy reopen provide fiddle demonstrating problem", "d": "10/2016"}, {"body": "indicates introduced change nt problematic seem triggered script engine bug sort resulting crash found small refactor fixes issue entirely sure", "d": "10/2016"}, {"body": "submitted pull request changes let know think", "d": "10/2016"}, {"body": "thank pr merged appear soon website working new docs another pr decided scrap tutorial completely nevertheless helpful meantime", "d": "10/2016"}, {"body": "oh great help new tutorial way love contribute documentation sometimes hard keep documentation sync code changes", "d": "10/2016"}, {"body": "lockdown rewrite messy state bit hard take outside contributions shakes however right merged sure plenty work possible around fixingamending things screwed think merged would helpful could keep eye new prs branch could comment example still work progress thoughts love hear", "d": "10/2016"}, {"body": "love help however", "d": "10/2016"}, {"body": "published installation use snapshot testing please report issues big change internals organized continuing split react reactdom internally release bunch internal modules moved never part public api valid minor version published rc chance assess whether libraries depend use private apis raise issues maintainers stable package depends react internal apis consider copying relevant code project react makes guarantees imports folders ever supported may technically break patch version even though taking extra steps make smooth quick fix replace likely work many modules might get removed renamed react please nt use internal modules react found issue popular reactrelated library breaks please post keep track", "d": "10/2016"}, {"body": "getting", "d": "10/2016"}, {"body": "faalsh nt mean install rc please run published latest mistake nt meant installed automatically trying rc purpose please look library tries import likely code file issue library", "d": "10/2016"}, {"body": "gaearon trying rc purpose thanks tip error caused reacthotloader", "d": "10/2016"}, {"body": "rhl one relying internal module unsupported year please migrate like keep using instructions linked first paragraph readme", "d": "10/2016"}, {"body": "hi gaearon currently react reactdom reacttestrenderer jest snapshot testing materialui components reacttestrenderer get following error repro needed insights thanks", "d": "10/2016"}, {"body": "thisbejim regression though ever work aweary look please intuition support mock dom refs moment", "d": "10/2016"}, {"body": "gaearon yupp support never implemented error technically new since would get error tests chance even call technically regression since never worked look would take implementing support", "d": "10/2016"}, {"body": "gaearon yeah bad looking issues wrongly assumed something planned fixed release thank taking look aweary appreciate time effort meantime workarounds cheers", "d": "10/2016"}, {"body": "thisbejim would interested fixing", "d": "10/2016"}, {"body": "gaearon work done towards nt chance finish last week said want work thisbejim feel free", "d": "10/2016"}, {"body": "also came report prevents usual usecase thisonfocus thisrefsvalueinputselect refs available yet using workaround", "d": "10/2016"}, {"body": "lezuse use simpler workaround fyi", "d": "10/2016"}, {"body": "syranide ha true thanks", "d": "10/2016"}, {"body": "removed outdated content docs deemphasized legacy practices added cautionary notes around versioning docs would great tangential issue", "d": "10/2016"}, {"body": "tutorial gone", "d": "10/2016"}, {"body": "better new docs please comment missing add", "d": "10/2016"}, {"body": "okay bad part word long write", "d": "10/2016"}, {"body": "intentionally long use sparingly easy search giant codebases safely replace automatically etc", "d": "10/2016"}, {"body": "rest mean http", "d": "10/2016"}, {"body": "close intentional design decision also documented discussed lifecycles likely change something declarative fiber shipped however whether something prefix nt affect whether api declarative thank concerns", "d": "10/2016"}, {"body": "seems closed", "d": "10/2016"}, {"body": "yep", "d": "10/2016"}, {"body": "could solution server provide initial state client side javascript use initial render common pattern serverclient react applications want client pick state server knows example could load user value object script tag server load component via props set initial state", "d": "10/2016"}, {"body": "problem initial state picking user input user entered html downloaded react initializing clientside initialize textbox empty user types something textbox react initializes clientside input wiped", "d": "10/2016"}, {"body": "gaearon recommend workaround prior release react case instance component uses ref one tested mocking entire component via meaningful approach", "d": "10/2016"}, {"body": "workaround prior release workaround added release try", "d": "10/2016"}, {"body": "fair enough checkout release candidate make sure everything working sit tight released also occurs could refactor component imperative interactions associated pulled separate component mocked", "d": "10/2016"}, {"body": "hi start want say great work aweary clap testing components stumbled fishy behavior basic everything works first render components rendered refs callbacks update add new components ref callbacks got error dummy example js const b reactcreateclass onrefel ref consolelog ref el ref renderel return onref ref consolelog ref b ref render return renderel const reactcreateclass render return function createnodemock element consolelog yee createnodemock called return ref object dummy test gt const component renderercreate createnodemock let tree componenttojson consolelog render tree componentupdate consolelog render tree typeerror optionscreatenodemock function tree componenttojson expect tree tomatchsnapshot imho correct behavior digging would say change allow pass maybe something like test pass options nt js dummy test gt const component renderercreate createnodemock let tree componenttojson consolelog render tree componentupdate createnodemock consolelog render tree typeerror tree componenttojson expect tree tomatchsnapshot get complicated want simulate async update setstate also missing options dummy look like js b component const reactcreateclass getinitialstate return array componentdidmount settimeout gt try thissetstate array catch error typeerror optionscreatenodemock function consolelog error render consolelog render return createnodemock dummy test done gt const component renderercreate createnodemock let tree componenttojson consolelog render tree settimeout gt consolelog render tree tree componenttojson expect tree tomatchsnapshot done part basic understating sets stored hard see quick dig code dancer maybe goo place start making sense think guys one time awesome work clap aweary gaearon", "d": "10/2016"}, {"body": "let reopen nt lose track", "d": "10/2016"}, {"body": "piecyk thanks details report look today see done", "d": "10/2016"}, {"body": "generally agree componentdidmount react lifecycle like getdefaultprops getiniitialstate componentwillmount render componentdidmount set state componentdidmount rerender component render called twice", "d": "10/2016"}, {"body": "guess moving set update order another workaround put property nt trust smile", "d": "10/2016"}, {"body": "way get ref component whose instance created component actually trying call function connected component use case wrapper calls method component component returns height going predetermined based logic need actual dom calculations", "d": "10/2016"}, {"body": "since merged closing thanks", "d": "10/2016"}, {"body": "likely wo nt focusing fiber nt even methods thanks suggestion though", "d": "10/2016"}, {"body": "like argue favor zemlanin use case purpose private property identifier collide another feels like much appropriate solution sort problem compared think useful simplifying guideline would react prop keys like object prop keys rather keys strings part exactly object keys dealing jsx use spread operator way objects slippery slope towards supporting manner exotic types prop keys object keys valid key types simply end list react tried stick close terms style far would nice continue along lines treating symbols way ie collisionproof private key identifiers use frameworks extension mechanisms never iterated usually copied eg turn perhaps terms jsx syntax implications nt see anything special would need done props always strings would nt able use symbols would either part spread object future allow prop name expressions using square bracket syntax eg would course also cover symbol prop names incidental random prop names long namespaced names like good enough solutions symbol seems like cleaner fit much like like move plain classes", "d": "10/2016"}, {"body": "think annotation removed apparently closurecompilerspeific currently serves purpose break minification", "d": "10/2016"}, {"body": "see also", "d": "10/2016"}, {"body": "please send pr removing gcc annotations think gcc support intended point broken ages", "d": "10/2016"}, {"body": "appreciate someone else could create pr nt want sign cla", "d": "10/2016"}, {"body": "probably", "d": "10/2016"}, {"body": "still failing react well closure compiler", "d": "10/2016"}, {"body": "since nobody worked issue advance like contribute please feel free", "d": "10/2016"}, {"body": "gaearon working removing gcc anotations plan create pr tomottow day", "d": "10/2016"}, {"body": "thanks shastel", "d": "10/2016"}, {"body": "thanks", "d": "10/2016"}, {"body": "docs gone let track separate manipulating children guide would like work", "d": "10/2016"}, {"body": "please turn failing test case", "d": "10/2016"}, {"body": "experimental proposal mentioned docs kevinsuttle nt solve issue us rebinds every render", "d": "10/2016"}, {"body": "gaearon great nice work docs dan", "d": "10/2016"}, {"body": "looks like fixed think work least says sure specifically set conditional wo nt attach click listeners buttons made version uses divs works though clear stepping code looks like might exception nt getting raised edit sorry interpreted compare wrong github reverse order", "d": "10/2016"}, {"body": "updated comment interpreted history wrong comparison feature think one might resolved", "d": "10/2016"}, {"body": "let track", "d": "10/2016"}, {"body": "issue closed original test case still produces warning using jsfiddle via", "d": "10/2016"}, {"body": "issue gets closed bug fixed master looking issue history see got closed open pr look milestone says means stable version issue fixed meantime already use", "d": "10/2016"}, {"body": "ah missed sorry thanks clarification", "d": "10/2016"}, {"body": "worries hopefully get within week two rc perfectly usable", "d": "10/2016"}, {"body": "dropped section completely new docs", "d": "10/2016"}, {"body": "gaearon look like issues last comment fixed plan release help us lot thanks time", "d": "10/2016"}, {"body": "rande open ticket next release rc soon based", "d": "10/2016"}, {"body": "try fix", "d": "10/2016"}, {"body": "gaearon thanks jest tests green good news hot reload component seem work anymore found check documentation", "d": "10/2016"}, {"body": "hot reload component seem work anymore react hot loader deprecated unsupported year", "d": "10/2016"}, {"body": "raphaguasta according code main difference purecomponent statelesscomponent statelesscomponent shouldupdate value always true purecomponent shouldupdate value equal result shallow equality check case shouldupdate value false purecomponent true statelesscomponent think cheaper make shallow equality check making virtual dom comparison may wrong", "d": "10/2016"}, {"body": "docs", "d": "10/2016"}, {"body": "fwiw even adding props allowed object stop warnings nt help issue appears react sets props element mounted results props present electron reads hacky workaround made would much prefer see way force react components attributesto set mount time rather slightly later", "d": "10/2016"}, {"body": "fwiw already implemented fiber wo nt bringing old reconciler", "d": "10/2016"}, {"body": "gaearon ran state searched found thread case error result copypaste transposition passing container state nested components prop works better nt paste leave like case error tricky track appeared error leading assume result timer error cause structure threw basically container initial state containing stateless child component passes prop child container grandchild child component middle layer completely stateless nt call getinitialstate thisstate undefined everything seems working intended except error order per attached screenshot huge deal definitely made debugging harder", "d": "10/2016"}, {"body": "mentioned warning nt show since react please update react", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "dantman creating third party renderers never advertised public api want safe changes reactdom best course action completely fork rather substitute modules nt guarantee wo nt break third party renderers future especially given new reconciler implemented completely different way", "d": "10/2016"}, {"body": "error almost always chore finding component referring help error message better identify component maybe help display everything known element props location element component hierarchy perhaps parent warning reactcreateelement undefined invalid value type string dom elements reactclass composite components something like feasible desirable", "d": "10/2016"}, {"body": "gravitypersists needs explicitly say undefined rather obscure error called", "d": "10/2016"}, {"body": "problem react nwjs environment", "d": "10/2016"}, {"body": "way find faq means link ca nt find navigation path ca nt search within codefacebookcom ca nt google ca nt google web sites linking", "d": "10/2016"}, {"body": "regard catsushi lt notifications githubcom neither hold hard copy acknowledgement duly registered apply pull requests approval face book registration example upcoming evostar event way find faq means link ca nt find navigation path ca nt search within codefacebookcom ca nt google ca nt google web sites linking receiving subscribed thread reply email directly view github mute thread catsushi notifications githubcom sent saturday october facebookreact subject facebookreact license clarification way find faq means link ca nt find navigation path ca nt search within codefacebookcom ca nt google ca nt google web sites linking receiving subscribed thread reply email directly view github mute thread", "d": "10/2016"}, {"body": "love see clear response adeelzaman question facebook infringe vr patent microsoft microsoft initiate legal action license react would revoked would stop using", "d": "10/2016"}, {"body": "catsushi luckily google caught searching facebook license faq brings page first result hanvyj gaearon said able provide clarifications right sorry even give interpretation license text actually binding court could disagree questions talk skilled lawyer interpret license text", "d": "10/2016"}, {"body": "spicyj thanks legal shame company work way patent troll main business engineering reasonably confident lawyers going err side caution potentially exposing companies ip tell keep well away simply due ambiguity clear risk pure software companies probably nt find much issue state software patents try somewhat optimistic mention google microsoft apple use react hopes approval", "d": "10/2016"}, {"body": "spicyj want hear facebook lawyers answer real intention facebook modification license", "d": "10/2016"}, {"body": "intention facebook matter written license matters sorry able give clarification", "d": "10/2016"}, {"body": "obviously issue interpretation facebook issue language andor purpose", "d": "10/2016"}, {"body": "may want use faq allay basic fears people lawyers example similar catsushi questions consequences termination additional patent grant allowed use react anymore", "d": "10/2016"}, {"body": "faq says things certain without legal precedent ultimately interpreting license always court something claim certainty took us quite work legal team get faq published please believe contains clarifications legally technically provide thanks", "d": "10/2016"}, {"body": "fat finger nt meant reopen", "d": "10/2016"}, {"body": "basically court matter users behave intention language facebook might want ask court judge effect binding force underlying lows hand language newly designed facebook time language might changed point free intention facebook know general licensers put almost regulation freely first matter intention facebook second might also matter ambiguous wording language contrast surely must matter interpretation third person least point think designer language lawyer supported appropriate person answer issue", "d": "10/2016"}, {"body": "catsushi replying rauschma comment possibly answer questions asked reasons explained patent grant intentional large companies want use react without explicit patent grant defensive clause also intentional facebook needs protect companies buy patent portfolios sue facebook feedback company uncertain using react feel free send thoughts james pearce touch legal team continuing asking questions issue spend lot time effort clarifying common misconceptions unproductive keep repeating points lock issue", "d": "10/2016"}, {"body": "gaearon really read comments yes unproductive nt think anybody facebook answered questions others unfortunately message got facebook facebook ca nt clarify incomprehensible reasons would contact james pearce colleague chance want use react significant products", "d": "10/2016"}, {"body": "closing documented context page wo nt documented pages part stable api", "d": "10/2016"}, {"body": "unlikely support something like close future best bet maintain fork system something similar facebook module forked happy revisit year right issue priority us", "d": "10/2016"}, {"body": "likely wo nt property initializers get language property rather use constructor problem nt think useful anyway constructor likely revisit lifecycles shipping fiber keep mind designing new ones", "d": "10/2016"}, {"body": "still experiencing running mocha execute tests", "d": "10/2016"}, {"body": "please file issue test case reproducing afraid ca nt help otherwise also run make sure", "d": "10/2016"}, {"body": "updated lifecycle docs order schema looks cool sure want add fiber make order much less deterministic close thanks suggestion", "d": "10/2016"}, {"body": "taints anymore", "d": "10/2016"}, {"body": "language makes sense thanks", "d": "10/2016"}, {"body": "closing seems like react got inconsistent state due user error still good least possible fix apps", "d": "10/2016"}, {"body": "update issue reactmode would useful toggle specific debug levels", "d": "10/2016"}, {"body": "update would issue", "d": "10/2016"}, {"body": "facing issue dont style tag code external css uses pseudo class therefore coming dom nodes invariant violation thrown solve", "d": "10/2016"}, {"body": "similar problem loading twitter button mutates dom throwing error deal kind issues third party libraries", "d": "10/2016"}, {"body": "gaearon error checked dont duplicated react besides made test require reactcsstransitiongroup error dont shows use component reactcsstransitiongroup inside component error throwed addcomponentasrefto thanks edit using almost example", "d": "10/2016"}, {"body": "possible would bug joke apart waiting react", "d": "10/2016"}, {"body": "removed starter kit altogether also using cdn anymore closing", "d": "10/2016"}, {"body": "getting error ideas narrow stack", "d": "10/2016"}, {"body": "brigand mostly indication dom modified outside react control parent null replacing child tries call replacechild null start looking", "d": "10/2016"}, {"body": "problem code undefined warning reactcreateelement getting undefined type reason development build unable reproduce jsfiddle", "d": "10/2016"}, {"body": "still active give try", "d": "10/2016"}, {"body": "wallacyyy open pr", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "aweary know asked last interaction months ago maybe pr could active anymore thx reply", "d": "10/2016"}, {"body": "spudly could render htmlwithoutprops server bootstrap step cache datareactchecksum subsequent renders thus avoiding double rendering point concerning indeed chance share prototype interesting nt seem much topic content static really slowly changing seems wasteful sending payloads twice initial load obviously legacy cms use cases already mentioned also case headless cms ability create application top without compromising initial load performance also think could case allowing optin checksum asynchronous would reduce bandwidth real time application likely rendering data server sending initial state receiving connecting websocket lot effort goes server side rendering applications optimising code crucial critical rendering path shouldcomponentupdate called initial render one could cancel delay rendering right obviously would potentially break lot code component lifecycle sounds like right place still bit new react though apologies missing something", "d": "10/2016"}, {"body": "personally understand problem double loading underestimated video facebook team tries implement new engine enhance rendering page say ms ms looks like team spends time attempt speed cheetah two gigantic hippos behind everybody wait hippos developers spend time create fix hack spend clients time wait loading duplicated data example need one customers create big static page two dynamic elements ui simple great build reusable react components also need make json request server texts images loading workaround content ui unique mostly static react page rendered server side sent client time react clientjs contains copy huge data common scenario really important problem someone please specify exact issues reactjs team facesforesees attempt resolve problem proposal clientjs source code initially rendered server way possible mark static blocks never change react restore points virtual dom whatever dom first rendering even stateful components dynamic properties still possible client side restore component would first place truth even whole dom page removed clientjs hold full source code later might possible write algorithm automatically understand part static without manual marking server model server manager knows rendered html looking rules game server eliminate parts clientjs complex scenarios server knows blocks eliminate marked blocks could rendered dom done example clientjs script dynamically created server request probably made fast enough versioning caching enhancements react amazing library really hope see even initialpartial solution good suggestions ps rename create new issue proper name doubled data real problem component mounting", "d": "10/2016"}, {"body": "added", "d": "10/2016"}, {"body": "someone working take stab", "d": "10/2016"}, {"body": "madhug definitely take imagine single guide combines use cloneelement reactchildren helpers", "d": "10/2016"}, {"body": "cool thanks start working weekend", "d": "10/2016"}, {"body": "update expect fix released", "d": "10/2016"}, {"body": "stopgap hiding clear input x", "d": "10/2016"}, {"body": "gaearon component prop time prop would regard uncontrolled component think explicitly declared examples form docs example write note situation would missunderstands react beginers", "d": "10/2016"}, {"body": "seems like unsupported pattern trying render something container already contains another component whose lifecycles currently executed want appear include render output", "d": "10/2016"}, {"body": "seeing well toonvanacker", "d": "10/2016"}, {"body": "yup think issue needs reopened jimfb easily reproduce windows maybe add test something thing still keeping", "d": "10/2016"}, {"body": "able reproduce using latest release reopen since still issue", "d": "10/2016"}, {"body": "able reproduce issue outside react see issue calling settextcontent node setting overwrite placeholder focusedblurred restore placeholder text case browsers tested look", "d": "10/2016"}, {"body": "recommendations new lifecycle docs took lot effort get new docs together nt expect us spend effort soon therefore issue like much likely addressed case case basis reviewing prs rather planning", "d": "10/2016"}, {"body": "think done", "d": "10/2016"}, {"body": "uglify things minify code webpack config development mode warning showed remove new webpackoptimizeuglifyjsplugin mangle false compress warnings false webpack development config get rid warning", "d": "10/2016"}, {"body": "think object approach options makes sense since options might needed combined sebmarkbage suggestion events passive default probably would nt cumbersome another approach comes mind would attach properties event handler allow opt passive mode toggle options something like jsx class foo extends reactcomponent constructor thishandlescroll thishandlescrollbind thishandlescrollpassive false handlescroll render return theory would work pretty nicely decorators land", "d": "10/2016"}, {"body": "thinking little think would better add event options property function instead individual options would allow react worry one property instead potentially many adjust example jsx class foo extends reactcomponent constructor thishandlescroll thishandlescrollbind thishandlescrolloptions passive false handlescroll render return another thought occurred might look like modified jsx syntax way allowed options passed via jsx random example nt put much thought also thinking whether events passive default bit fence one hand would certainly nice events like scroll handlers worry would cause much turbulence unexpected behavior many click handlers could make events passive default others would probably end confusing folks probably good idea", "d": "10/2016"}, {"body": "way pretty similar proposed earlier without modifying jsx syntax documentation would straightforward", "d": "10/2016"}, {"body": "react events passive default seems way touch events least able unless fall back vanilla documentlevel event listeners", "d": "10/2016"}, {"body": "joshjg react handlers passed synthetic events sort like native events different way someone knowledge correct say nt actually read code super familiar implementation details know works least long handlers preventing also react event handlers experience anyway likely luck eg click listener ca nt bound react want avoid bubbling click inside certain element case use mdn got slightly main topic short answer react nt use passive events sometimes handled strange order", "d": "10/2016"}, {"body": "ability tags inside react component respec css custom properties would ideal shadow dom spec currently handles polymer support would also solve issues missing pseudoclasses js varying syntax casing css js looked issues seen bunch related issues latest web components spec since updated ends coming", "d": "10/2016"}, {"body": "perhaps sanitation via tagged template strings could work parsing styles bit elegant say xml cdata escapes", "d": "10/2016"}, {"body": "detailed implementation notes detail somewhat simplified way stack reconciler works believe together contribute codebase overview design decisions covers ground likely wo nt time cover give somebody motivated enough information contribute eg glossary", "d": "10/2016"}, {"body": "update exact symptoms firefox input field focused resizing page triggers update states rerender", "d": "10/2016"}, {"body": "also reproduce would like dive figure happens", "d": "10/2016"}, {"body": "nt seem like common confusion sure worth making language complex docs say second parameter optional callback function executed completed component rerendered generally recommend using logic instead follow tip using instead would nt problem still see elegant way phrase without making sentence complicated please feel free send pr thanks", "d": "10/2016"}, {"body": "", "d": "10/2016"}, {"body": "react way knowing intended render component empty value intended component uncontrolled source bugs see point might source bugs kind disagree first part value property part props object therefor use objectkeys figure key intentionally added props object nt key exist explicitely set property even value undefined going approach would controlled component would uncontrolled", "d": "10/2016"}, {"body": "found problem code like warning resourcelist changing uncontrolled input type checkbox controlled input elements switch uncontrolled controlled vice versa decide using controlled uncontrolled input element lifetime component info", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "closing favor umbrella issue", "d": "10/2016"}, {"body": "related fiber codebase different left fiber fiber ready yet", "d": "10/2016"}, {"body": "exciting see progress awesome chart tests passing unofficial may also helpful interested passerby curious fiber", "d": "10/2016"}, {"body": "looks like issue incorrect build setup rather something fix future separate addons completely wo nt issue", "d": "10/2016"}, {"body": "line numbers enable transform development already included default create react app", "d": "10/2016"}, {"body": "dylanpiercey attribute anyway information internet", "d": "10/2016"}, {"body": "halthammerzeit attribute partially removed basically used link dom react elements used link react using server side rendering", "d": "10/2016"}, {"body": "dylanpiercey well understand could used client article seems kinda explain nt see reason exist server client gets markup server without renders stuff client without compares two strings throws warning nt match including short uninformative piece diff like needed needed extract compare string", "d": "10/2016"}, {"body": "halthammerzeit plenty virtual doms nt need id attributes bootstrap existing dom definitely required unfortunately nt think react puts much effort ssr though according gaearon seem works leave attitude", "d": "10/2016"}, {"body": "dylanpiercey yeah guess facebook isolated ecosystem rather part internet nt need web documents concept thinking react server side rendering terms caching came conclusion would require rewrite current package drop favour assembling react page different totally independent pieces raw html markup like cache block also cache block assemble mix react elements pieces raw html markup currently react nt provide possibilty render whole thing one time guarding guess someone eventually develop mixed caching solution probably could big company hits performance issues rendering react serverside gon na stick strategy render seospecific blocks server side render variable blocks user bar comments etc client side way react wo nt complain attempted reuse warning pages safely cached server side raw html strings cache invalidated data changes supposed infrequent", "d": "10/2016"}, {"body": "currently react nt provide possibilty render whole thing one time guarding datareactids datareactchecksums guess someone eventually develop mixed caching solution probably could big company hits performance issues rendering react serverside might want check caching ssr", "d": "10/2016"}, {"body": "aweary thanks looks like way go future even though particular project seems abandoned nt support react", "d": "10/2016"}, {"body": "whoops nt notice issue created since becoming urgent deleted old localized content let track visible issue", "d": "10/2016"}, {"body": "know since closed running null owner issue breaking application already verified nt two reacts loaded via checking output checking chrome sources per gaearon blog post modifying react one components checking modification maintained react variable used new component trying use draftjsplugins verified one react application also gone entire component tree refactored things components one rendering created parent method still getting bug finding stackoverflow check owner property verified null component rendering going tree except components direct children data loading hocs createcontainer reactmeteordata classes defined using syntax sure would influence things seemed odd always null internal thing sure supposed behave tips still running invariantviolation even verifying listed reasons", "d": "10/2016"}, {"body": "please file issue minimal example reproduces", "d": "10/2016"}, {"body": "closing either works", "d": "10/2016"}, {"body": "hey jimfb fun running internet another bug fix function cause recent node versions particularly running tests new version node one changes node unhandled promise rejections result warning existing code vpontis separate calls base promise effectively creates two promises one handles success one handles errors means error first promise viewed node unhandled promise rejection fix pretty easy chain two calls makes one promise success error handler fixed code js const makecancelable promise gt let hascanceled false const wrappedpromise new promise resolve reject gt promise val gt hascanceled reject iscanceled true resolve val catch error gt hascanceled reject iscanceled true reject error return promise wrappedpromise cancel hascanceled true", "d": "10/2016"}, {"body": "closing wo nt changing", "d": "10/2016"}, {"body": "wo nt changing works please consider filing instead", "d": "10/2016"}, {"body": "closing docs use", "d": "10/2016"}, {"body": "closing old", "d": "10/2016"}, {"body": "jimfb zpao react svg issue still happening ie", "d": "10/2016"}, {"body": "react web components built solve different problems web components provide strong encapsulation reusable components react provides declarative library keeps dom sync data two goals complementary developer free use react web components use web components react", "d": "10/2016"}, {"body": "reactjs conf andrew rota wayfair complementarity react web components", "d": "10/2016"}, {"body": "wo nt also wrote alternatives inheritance", "d": "10/2016"}, {"body": "kill factories", "d": "10/2016"}, {"body": "bit late party also problems trying something similar hatched said created checkbox component want test checkbox something similar less details stripped simplicity render return onchange event gt thispropsonchange eventcurrenttargetchecked writing unit tests test behaviour find way test following checkbox defaultcheckedfalse checked execute simulated change event ckeckbox checked checkbox checkedfalse checked execute simulated change event onchange callback passed props called argument true problem simulatechange element nt actually modify checked state checkbox scenario testable simulatechange element currenttarget checked true nt work test scenario possible pass property currenttarget people mentioned thread note checkbox would listening target instead currenttarget simulatechange element target checked true would actually work however nt currenttarget", "d": "10/2016"}, {"body": "correct simulatechange change state inputs merely triggers event listeners react relies browser change input follow link case click etc anything avenue would reimplementing behavior incompatible way suggestion mutate actual dom node call simulatechange event handler run properly", "d": "10/2016"}, {"body": "thank explanation makes lot sense unfortunately actually using enzyme far know underlying uses testutils simulate write tests far know nt allow mutate actual dom node even simulate nt really change dom state inputs still allows pass custom data eventtarget object simulatechange node target value whatever would nt possible allow simulate currenttarget least would allow least test event handlers since impossible scenario ps using currenttarget instead target event handlers mainly using typescript know interested events html input compile time check eventcurrenttargetvalue typesafe manner since target definition dynamic known compiletime", "d": "10/2016"}, {"body": "closing since bug different documented behavior web components use", "d": "10/2016"}, {"body": "might related make breaking change switch properties would become classname", "d": "10/2016"}, {"body": "gone", "d": "10/2016"}, {"body": "andreypopp side question example using static class option makes sense method ie jsx class extends reactcomponent static childcontexttypes name reactproptypesstring static getchildcontext return name jonas render return", "d": "10/2016"}, {"body": "oliviertassinari needs prototype method nonstatic also use state props", "d": "10/2016"}, {"body": "brigand right nt work thanks issues rule eslint", "d": "10/2016"}, {"body": "closing aware compelling reason allow see good reason please send pr let discuss", "d": "10/2016"}, {"body": "confirm using keyword resolved issue chance progress issue looks ugly team totally mess le tests get written", "d": "10/2016"}, {"body": "sebmarkbage sort spurred wanting custom events prior work stripping attribute whitelist support custom attributes took stab pred hesitant submit pr another pr think happy lot event name munging already happening able lower move central location lean existing suggested feel like right track", "d": "10/2016"}, {"body": "let continue discussion", "d": "10/2016"}, {"body": "npm test clonewithprops", "d": "10/2016"}, {"body": "thanks xd notifications githubcom npm test clonewithprops receiving authored thread reply email directly view github mute thread \u6b63\u4e2d\u8d75 image \u6b63\u4e2d\u8d75 aboutme", "d": "10/2016"}, {"body": "changing internals longer relevant", "d": "10/2016"}, {"body": "closing yet officially supported document api", "d": "10/2016"}, {"body": "closing longer relevant", "d": "10/2016"}, {"body": "ok found promises anywhere project completely overhauled webpack configuration also webpack dev server configuration everything including errors showed expected still really sure issue obviously somewhere webpack configs", "d": "10/2016"}, {"body": "closing common issue caused wrong usage comes often feel free send pr adds better warnings", "d": "10/2016"}, {"body": "solved", "d": "10/2016"}, {"body": "another usecase popout video eg sits specific place dom activated moves root element becomes movement nt impact playback generated keys idea gist would work think would kind attribute", "d": "10/2016"}, {"body": "jakearchibald pretty sure affect playback iframes reload audio stops much hint going move", "d": "10/2016"}, {"body": "syranide talking moving video causes pause reload", "d": "10/2016"}, {"body": "tricky solution chrome call handlechange fired js handlecomposition event gt check demo", "d": "10/2016"}, {"body": "chenxsan find solution detect compositionstart let variable equal true use variable set onchange see fire query", "d": "10/2016"}, {"body": "wo nt changing semantics", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "hmm svg makes little trickier ideally know whether svg container need handful stuff nt right may wait information retagging", "d": "10/2016"}, {"body": "romulof looks like trying reference instance variable static method ca nt way tell talking definition static things always live outside context instance", "d": "10/2016"}, {"body": "romulof common object oriented languages fat arrow syntax binds context defined maybe could try using", "d": "10/2016"}, {"body": "sbussard exactly question implemented static object maybe allowing function called constructor", "d": "10/2016"}, {"body": "intentionally outside class optimizing compiler could inline call site", "d": "10/2016"}, {"body": "thanks everyone tweaked rebased almost prs thread prs make due unaddressed mistakes outdated content planning remove old articles completely rewrite scratch sorry also plan review tomorrow separately thank much everyone helped updating docs coming days stay tuned", "d": "10/2016"}, {"body": "docs updated syntax", "d": "10/2016"}, {"body": "added error codes inspect full errors production", "d": "10/2016"}, {"body": "class components must extend", "d": "10/2016"}, {"body": "removed", "d": "10/2016"}, {"body": "dear facebook jsx developers goes ecmascript decided consensus process inside ecma international guys part discussion regarding inclusion jsx syntax partially acting like parallel standards body definition ecmascript either might kinda see next paragraph everybody starts different javascripts one incompatible cool selfcontradiction according current facebook jsx specification website archived jsx intended implemented engines browsers proposal incorporate jsx ecmascript spec intended used various preprocessors transpilers transform tokens standard ecmascript intended used exactly way file extension", "d": "10/2016"}, {"body": "basically think potential experimental extensions javascript new language flowtype another one experimental syntax extension nt need whole new language support could argue annotated extension nt make sense combine long list file extensions every new experimental version language designed coexist extensions existing language compatible way fact might maybe one day part call javascript fact differentiates java coffeescript none features new language unlike typescript subsetsuperset javascript really new language like c developers saying c extension c therefore ok c files c extension", "d": "10/2016"}, {"body": "maratbn committee facebook associate member ecma international involved ecmascript process process involves multistage process starts lots exploration user space various contributors champions aim propose concrete proposals see ecmascript take many years needs lot evidence worth inclusion early experiments jsx may well adopted standard like one point clear form though would semanticless syntax defined runtime semantics would field still evolving another plausible route would include macro system language still unclear features would require stage ready formal proposal yet say never similarly flow typescript types ready become formal proposal yet evolving within space extension long overloaded various extensions early proposals implemented babel flow types etc also whole thing nodejs potentially requiring file extension ecmascript multiple ambiguous parsing interpretations file", "d": "10/2016"}, {"body": "sebmarkbage jsx may well adopted standard like one point stage ready formal proposal yet say never get adopted means rightfully deserve extension present time typescript people also ecma international committees happy using separate extension", "d": "10/2016"}, {"body": "given issue resolved close april let keep beating dead horse instead focus efforts making cool stuff web react jsx instead react agnostic extension plenty tooling available since filed issue make extension choice purely aesthetics issue days use like babel use feel help team js something anyone still feel strongly enough want debate place js spec appropriate places discuss nt javascript repo react javascript place discussion", "d": "10/2016"}, {"body": "pomax given issue resolved close april let keep beating dead horse instead focus efforts making cool stuff web react jsx instead repo react javascript place discussion number newer discussions pull requests bug reports related issue referencing arguments made using base supporting arguments issue dead horse since react javascript closely related appropriate place discussion conducted long stays topic reactjavascript relationship stray pure javascript topics completely unrelated react purpose public forum facilitate open sharing opinions analysis exactly happening", "d": "10/2016"}, {"body": "closed issues right place discussions want use thread reference great nt keep adding comments issue resolved thoughts based still open issues refer comments directed", "d": "10/2016"}, {"body": "pomax closed issues right place discussions open public forums right place closed discussions", "d": "10/2016"}, {"body": "may keep discussing like sure discussion affect anything react including maintaining jsx compiler compiler behavior issue like change behavior babel recommend instead file issue realistically discussion change anything whole issue actionable react team cheers", "d": "10/2016"}, {"body": "gaearon ok dan good insight", "d": "10/2016"}, {"body": "issue outdated close", "d": "10/2016"}, {"body": "afaik already support startingstopping outside top level", "d": "10/2016"}, {"body": "closing nt appear actionable us", "d": "10/2016"}, {"body": "ran times ended bad", "d": "10/2016"}, {"body": "brigand need flag compare props within furthermore solution could easily broken may prevent rerendering", "d": "10/2016"}, {"body": "oh cool thanks", "d": "10/2016"}, {"body": "closing tree considered implementation detail", "d": "10/2016"}, {"body": "still something team interested anyone using point", "d": "10/2016"}, {"body": "making changes createclass", "d": "10/2016"}, {"body": "removed tutorial longer applicable", "d": "10/2016"}, {"body": "since implemented babel plugin give full stacktrace unknown prop warning enabled default create react app", "d": "10/2016"}, {"body": "closing wo nt changing", "d": "10/2016"}, {"body": "closing nt use jsdoc new code anyway", "d": "10/2016"}, {"body": "nt support anymore", "d": "10/2016"}, {"body": "looks fixed", "d": "10/2016"}, {"body": "use web components react pass attributes", "d": "10/2016"}, {"body": "fixed since", "d": "10/2016"}, {"body": "wo nt changing mixins work nt recommend using new code", "d": "10/2016"}, {"body": "zpao jimfb take longer valid seems still exist", "d": "10/2016"}, {"body": "running issue using recompose example error apparently swallowed try finally block cc acdlite", "d": "10/2016"}, {"body": "tryfinally block possibly swallow exceptions likely trycatch calling code catch react errors promise handler common mistake", "d": "10/2016"}, {"body": "gaearon right mistake", "d": "10/2016"}, {"body": "neither maintained recommended please either use shallow rendering instead mock components jest gives ability pass anything", "d": "10/2016"}, {"body": "closing still consensus ecosystem figure", "d": "10/2016"}, {"body": "closing wo nt", "d": "10/2016"}, {"body": "closing outdated", "d": "10/2016"}, {"body": "still weird documented track changes jsx repo", "d": "10/2016"}, {"body": "jimfb post confusing draftjs drops warning", "d": "10/2016"}, {"body": "updated link", "d": "10/2016"}, {"body": "hi get following error try use unstablehandleerror error typeerror null object evaluating thisrenderedcomponentunmountcomponent anonymous function compjs line", "d": "10/2016"}, {"body": "closing old", "d": "10/2016"}, {"body": "supporting anymore", "d": "10/2016"}, {"body": "nt support anymore", "d": "10/2016"}, {"body": "specifying object supported please use explicit keys", "d": "10/2016"}, {"body": "closing unlikely working", "d": "10/2016"}, {"body": "probably relevant use client", "d": "10/2016"}, {"body": "fiber", "d": "10/2016"}, {"body": "new reference lists lifecycles phase think close", "d": "10/2016"}, {"body": "coroutines fiber make possible implement flexible layout primitives without breaking encapsulation wo nt go proposal issue thanks", "d": "10/2016"}, {"body": "closing nonactionable repo", "d": "10/2016"}, {"body": "gaearon ha thanks bringing old memories", "d": "10/2016"}, {"body": "create app react however html format fixed wrap first level child elements navbar searchbar div page class", "d": "10/2016"}, {"body": "component returns list rows used table ca nt wrap additional html tag allowed standard know tbody might multiple rows returned multiple child components may need combined single tbody technique mentioned prinzhorn wrapping children html comment actually implemented anybody tried implement component renders html comment nt seem work", "d": "10/2016"}, {"body": "fyi rewrite working already supports fragments track progress", "d": "10/2016"}, {"body": "closing since actionable us", "d": "10/2016"}, {"body": "think supported new reactperf", "d": "10/2016"}, {"body": "might consider future let continue discussion", "d": "10/2016"}, {"body": "closing outdated discuss let", "d": "10/2016"}, {"body": "officially supported closing", "d": "10/2016"}, {"body": "closing nt seem actionable us", "d": "10/2016"}, {"body": "fixed", "d": "10/2016"}, {"body": "seems like resolved", "d": "10/2016"}, {"body": "gaearon would nt say solved mean unofficial typings definitelytyped imho workaround example hard control typings prereleases react definitelytyped", "d": "10/2016"}, {"body": "actionable team", "d": "10/2016"}, {"body": "guess need statement team interested including typescript definitions would accept definitions inside pr requirements", "d": "10/2016"}, {"body": "zpao elgerlambert u guys awsome strugglling long time untill find issue", "d": "10/2016"}, {"body": "progress ticket dealing issue", "d": "10/2016"}, {"body": "share jsfiddle reproducing issue use starting point", "d": "10/2016"}, {"body": "hi would like work bug spicyj jgebhardt anyone point right direction working bug", "d": "10/2016"}, {"body": "literally lost hour debugging given amount assistance react provides users something unexpected suggesting camelcase using hyphenated class names etc would expected something console would awesome nondogmatic support people something unnecessary least warning", "d": "10/2016"}, {"body": "issue well reason need important override inline style project transition state still css applied using classes one using css important tag originally override jqueryui css believe support tag would prevent use another css class trying transition away css classes modifying old css class longer important tag pain since used globally would break areas ui still using old jquery rendering", "d": "10/2016"}, {"body": "moment wrote library address use case brigandreactwithimportantstyle uses set style modifier", "d": "10/2016"}, {"body": "said searching even question react supports course turns case use case like others trying get component play along nicely third party stuff really hope gets added", "d": "10/2016"}, {"body": "wo nt make changes anymore", "d": "10/2016"}, {"body": "want pass property children component part props got warning console normal property change fix found html property change another key please forgive ignorance", "d": "10/2016"}, {"body": "fwiw discovered clean way follows", "d": "10/2016"}, {"body": "kolodny would nt really call clean making hoc would better approach hijacking refs make side effect", "d": "10/2016"}, {"body": "slightly better position testutils documentation enzyme also good reference docs something missing please send pr suggestions start discussion", "d": "10/2016"}, {"body": "mostly fixed new docs", "d": "10/2016"}, {"body": "closing old", "d": "10/2016"}, {"body": "closing old nt seem important nt even seem bug", "d": "10/2016"}, {"body": "longer term encouraging people use flow typescript instead gaearon guide explains use flow instead proptypes especially checkcatch unknown prop types per issue thanks", "d": "10/2016"}, {"body": "install flowbin initialize config use javascript flow import react react type props foo string bar type state baz number nullable string export default class mycomponent extends reactcomponent props props state state baz nullable null componentwillmount thissetstate baz bleh fails told baz would number state type true fails told baz nullable state type componentwillreceiveprops nextprops props thispropsbaz fails told foo bar props type nextpropsbaz fails reason const fails needs foo const b fails baz nt const c cool use nuclide see errors atom", "d": "10/2016"}, {"body": "similar issue type defaultvalue type dot first time tried type failed cursor go front type still type multiple dot field empty", "d": "10/2016"}, {"body": "update issue", "d": "10/2016"}, {"body": "would like throw lobby builtin solution rollyourown counter solution used years requires manual perrequest reset server side order make isomorphic apps work properly feels completely acceptable context writing full app bit confusing first time encounter issue becomes huge pain writing dom component library consider following consider want write component package npm encapsulates nicer api awful choices bottle counter live fact lib wo nt work isomorphic app unacceptable make endusers bring counter unique id provide every component props unnecessarily verbose places requirements composing library components additional reusable ones force enduser components specific fluxish lib get unique dom ids simple ui library worth one halfway decent option come still nt love create package includes component whose descendants receive counter function via could fairly elegant could install via npm convenience functions decorating components receive context la still think little bit absurd include outofthebox support something comes frequently dom", "d": "10/2016"}, {"body": "years issue closed obviously still demand solution discussion see reason issue reopened", "d": "10/2016"}, {"body": "microdata microdata microdata microdata microdata hopefully find issue look attributes microdata attributes wanted issue findable online searching spec commenting add searchability issue awh heck rdfa even though rdfa implemented react kind useful result searching would good oh mention microdata", "d": "10/2016"}, {"body": "hello added additional component head serverside resolve situation class head extends reactcomponent render let dangerousinnerhtml string thispropschildrenmap value gt typeof value string return reactdomserverrendertostaticmarkup value else return value use maybe perfect solution requires additional code please review say think thanks", "d": "10/2016"}, {"body": "use unmountcomponentatnode documentbodyinnerhtml fixed ie", "d": "10/2016"}, {"body": "keeping bunch old issues around nt help visibility putting umbrella item", "d": "10/2016"}, {"body": "closing bug alternatives proposed", "d": "10/2016"}, {"body": "closing outdated think still relevant please submit pull request new documentation thank", "d": "10/2016"}, {"body": "closing gcc advanced mode nt really supported react point might supported set tests around nt regressed time", "d": "10/2016"}, {"body": "create react app sorta", "d": "10/2016"}, {"body": "closing old still nice nobody look issue", "d": "10/2016"}, {"body": "closing still consensus many things ecosystem figure eventually", "d": "10/2016"}, {"body": "closed still problem onchange fire testing forced use", "d": "10/2016"}, {"body": "many examples new docs codepen links nt think examples repo valuable closing", "d": "10/2016"}, {"body": "spent sensible time research result end library permanently solved problem check please would good know impressions everything", "d": "10/2016"}, {"body": "right way respond outside world events leave react event system add native dom listener bad since require mental overhead work need think event listener receiving native event react synthetic event also simply possible computed eg also makes hard react events handlers interrupt dom handlers issue mentioned consider following example intuitive react listener stop propagation spoiler react also listens use js class examplecomponent extends reactcomponent render return documentaddeventlistener keydown gt alert still fire reactdomrender documentgetelementbyid react example want deal outside events simple drawing tool must listen stop drawing process otherwise ui would feel broken right without leaving react event system could listen mosueup event root component pass callback child responsible drawing ca nt listen events outside component even outside browser although react event hub would capture listening lot solution ideas tied dom specific features like nt think way react would like go think make approach abstract think new public api something like behave like regular dom node callbacks receive created every root react component accessible inside components calling something like trivial migrate people currently relying dom event systems eg edit api could made declarative well eg eventroot get involved triggering twophase dispatch respects order well everything expect listening stopping propagation isolated specific react instance gt two react trees listen ca nt interfere api help abstract fact react listen people nt need rely fact anymore example replace new event root correctly applied love hear think could help shape future react event system", "d": "10/2016"}, {"body": "would like throw support issue couple usecases run dropdown menu needs listen outside automatically close menu clickanddrag functionality sometimes needs listen documentwide eg lasso select around elements user drags outside container element modal window handling close user hits esc like idea fake eventonly nodes nt render dom proposal handles listen events children usecase added additional props like listening globally could handle pretty much everything could even add prop constrains handling particular ref", "d": "10/2016"}, {"body": "continuation gaearon said feb year anyone wants make custom attributes bit tidy write babel plugin astbased transformer using babel quick working example change find appropriate js babel plugin var template require babeltemplate var refbody template moduleexports function types var visitor jsxattribute path pathnodenamename attrs return pathreplacewith tjsxattribute tjsxidentifier ref tjsxexpressioncontainer tfunctionexpression null tidentifier n tblockstatement refbody attrsmap pathnodevalueexpression return inherits require babelpluginsyntaxjsx visitor visitor generate required logic output js function mycomponent ref var size refsize var density refdensity var href refhref", "d": "10/2016"}]