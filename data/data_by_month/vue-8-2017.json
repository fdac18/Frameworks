[{"title": "get absolute position click", "body": "trying open contextual menu click vue component click want get coordinates mouse display menu place mouse clicked trying play around parameters event click function figure got indications", "num": "6488", "d": "8/2017"}, {"title": "provideinject custom directives", "body": "problem feature solve user uses custom directive app multiple places might need configure directive two different ways depending area app directive used configuration used many instances one areas providing configuration every instance becomes redundant cumbersome proposed api look like think provideinject pattern would good solution user could add different configurations top level provider components use custom directive normally descendants js var provider provide foo bar var otherprovider provide foo baz vuedirective bar inject foo bind el binding bindinginjectionsfoo bindingfoo confident best place actual injections live directive hook arguments ideas code example", "num": "6487", "d": "8/2017"}, {"title": "unwatch event server write", "body": "version reproduction link steps reproduce version reproduction link steps reproduce watch storestatescrolly handler function scrolly deep true expected writing template watch function need unwatch leaving component actually happening nt find relevant cancellation api document", "num": "6486", "d": "8/2017"}, {"title": "writing template watch function need unwatch leaving component", "body": "", "num": "6485", "d": "8/2017"}, {"title": "contenteditable problem", "body": "version reproduction link steps reproduce set attribute contenteditable plaintextonly change contenteditable true expected contenteditable plaintextonly actually happening contenteditable true", "num": "6484", "d": "8/2017"}, {"title": "mainjs\u518d\u67d0\u4e9b\u673a\u578b\u4e0a\u672a\u8fd0\u884c", "body": "version reproduction link steps reproduce \u542f\u52a8dev expected actually happening \u542f\u52a8dev", "num": "6483", "d": "8/2017"}, {"title": "routes working production application", "body": "version reproduction link steps reproduce path content component content meta title content expected redirect content route actually happening route working using development server production application route stops working error get content", "num": "6481", "d": "8/2017"}, {"title": "memory leaks serversiderender vue", "body": "version reproduction link steps reproduce npm start memory leaks server side visiting expected memory leak actually happening memory leak caused vueuse installedplugins ca nt release", "num": "6479", "d": "8/2017"}, {"title": "", "body": "version reproduction link steps reproduce expected \u671f\u671b\u53ef\u4ee5\u5207\u6362option actually happening", "num": "6476", "d": "8/2017"}, {"title": "unclear unit test run", "body": "version steps reproduce contributing guide says ensure tests passes opening pr npm run test runs tests npm run dev test run tests former passes correctly latter fails lof errors sure one run pass circleci seems run expected tests devwatch command running whole suite actually happening devwatch loads different karma configuration file running whole suite", "num": "6475", "d": "8/2017"}, {"title": "element data cleared initializing vue instance", "body": "version reproduction link steps reproduce set jquery data element inside vue root element initialize vue instance root instance try accessing jquery data element expected data still element rendered vue already actually happening data cleared various jquery plugins running elements use hidden data keeping current state seems weird vue would recreate dom elements especially nt vue bindings", "num": "6474", "d": "8/2017"}, {"title": "using vue amp modules", "body": "version reproduction link steps reproduce search amp forum modern browserjavascript usage modern browserjavascript usage discussed posted questions answer example simple cli template could easily used minimal vue file transpiling friendly output expected documentation example using cli avoid babel transpiling bundling remove module use actually happening luck far answers questions possibly simply documentation issue use currently simply possible vue url simply main repo use vue yet amp module based temporary dual build legacy workflow strictly npm run scripts node scripts call rollup example built task manager see documentation docsify based believe built vue", "num": "6472", "d": "8/2017"}, {"title": "objects evaluated strings bound inside within component", "body": "version reproduction link steps reproduce sure check included jsfiddle simple example create new component select element bind value options inside select element actual option object write onchange method triggers input event follow vmodel pattern use newly created component inside vuejs app pass array objects options notice option selected selected value string object object rather actual object keep mind works perfectly fine select field outside component using inside component bug appears expected option inside select bound object within component expect value selected item object string actually happening option inside select bound object within component value selected item string representation object rather object building component library project library prestyled inputs use forms select components like retain original object rather key since typically need send entire object back server updating said object", "num": "6471", "d": "8/2017"}, {"title": "vfor empty dom wrapper", "body": "problem feature solve want generate two objects dom per single object proposed api look like would render", "num": "6470", "d": "8/2017"}, {"title": "beforeunmount lifecycle", "body": "problem feature solve try build vue version reactoverdrive needs get size position component destroyed currently set false change route lifecycle component seems like viffalse dom removed called vm destroy called seems way get real dom component destroyed related get position size component destroyed vif proposed api look like may useful cases viffalse called dom removed called optional called vm destroy called like possible viffalse called dom removed vm destroy called", "num": "6469", "d": "8/2017"}, {"title": "weird binding behavior slots involved", "body": "version reproduction link steps reproduce child component attribute changes nt observed component question distributed using slots change made parent component one used distributed child component change observed another entity page uses exact binding please see commented portion testpage marked todo uncomment observe expected attached fiddle clicking swap button change background color label red blue uncommenting portion marked todo uncomment observe corrects behavior actually happening element page nt use exact binding change nt observed implementing default layout library gets used application came across bug trying alter style binding component button clicked component distributed using layout slots", "num": "6468", "d": "8/2017"}, {"title": "keystrokes missing vmodel used", "body": "version reproduction link steps reproduce issue occurs internet exporer textareas input fields using vmodel binding open ie quickly enter text second textarea maybe press buttons time used barcode scanner enter texts also possible reproduce keyboard also recognized happens often slow machines expected keys recognized actually happening letters missing randomly made video behaviour could reproduce even vuejs page added von input textarea see whats logged result ac ac b never recognized even input event also changed intercharacter delay scanner ms ms without success", "num": "6466", "d": "8/2017"}, {"title": "add shortcut listen event child", "body": "", "num": "6465", "d": "8/2017"}, {"title": "add comparison moon", "body": "problem feature solve lately moon framework good pr probably direct competitor vue syntax size perfs similar proposed api look like would nice entry", "num": "6464", "d": "8/2017"}, {"title": "vif nt call destroyed lifecycle component", "body": "version reproduction link steps reproduce play select look console everytime user change model view updated component call destroyed event expected call destroyed event actually happening destroyed event called reproduction reusable table component app change type make ajax call router myrouter type change data title", "num": "6463", "d": "8/2017"}, {"title": "vue clientside hydration", "body": "wondering possible find vue clientside hydrated course server app provided valid html client corresponded docs example somebody knows thanks", "num": "6462", "d": "8/2017"}, {"title": "createelement conflict text style button", "body": "version reproduction link steps reproduce push change button expected expect button text change actually happening program caused errors", "num": "6461", "d": "8/2017"}, {"title": "hot module replacement seems get stuck starting optimize css", "body": "version reproduction link steps reproduce vue init webpack blah defaults except nightwatch npm install npm run dev running windows expected change files get reloaded actually happening detects change nt update webpage console says starting optimize css every time detects change", "num": "6460", "d": "8/2017"}, {"title": "sync modifier template string", "body": "version reproduction link steps reproduce expected work fine actually happening report assigning rvalue", "num": "6459", "d": "8/2017"}, {"title": "ability disable change events already change event handler", "body": "problem feature solve change event handler changes values fields change event handlers want suppress disable event handlers changing values common pattern frameworks lot sharepoint proposed api look like perhaps global flag like vmdisablechangeevents", "num": "6458", "d": "8/2017"}, {"title": "able pass multiple events function templates", "body": "problem feature solve multiple event handlers call function add noise templates propose dry bit proposed api look like currently pass multiple functions single event handler like html however think would really handy able inverse ie passing function multiple event handlers today instance html would great could instead html way clearly see one glance many different behavior attached component also modifying callbacks easier thoughts", "num": "6457", "d": "8/2017"}, {"title": "nested smart components ssr", "body": "problem feature solve introduction separation concerns important always try encapsulate data logic inside independent smart components reusable throughout application smart components usually perform asynchronous operations like data fetching nested inside problem currently ssr solution proposed example requires asynchronous operations performed asyncdata hook unfortunately available routecomponents registered router makes routecomponents become supersmart take responsibility data underlying dumb components nt allow smart component placed beneath routecomponent ssr serverside renderer wo nt wait nested smart component finish asynchronous work desired behavior serverside renderer wait root child components resolve recursively hence let every active smart component attain renderable state benefits feature allow better code structuring seamless ssr support also extremely helpful kind situations layout application needs computed programmatically think content management system one would able compose final layout singlepage application simply putting together independent arbitrary building blocks top template smart components amp apis smart components served best combination graphql every little smart component asks graphql client small part graph api server offer fetches data needs less gql client batch little queries one big query every fire way smart components make modular architecture piece cake define components active actual context execution inactive components hidden due certain application state conditions like current route example proposed api look like api proposal able make component smart regardless placed application basically means making asyncdata hook available component routecomponents becomes classical dependency tree problem tree components compose flat dependency tree filtering dumb components resulting array promises ssr needs await finally rendering page performance considerations traversing component tree every ssr request seems inefficient step probably done webpack compile time", "num": "6456", "d": "8/2017"}, {"title": "vm forceupdate duplicates content childs consist slot followed text", "body": "version reproduction link steps reproduce component render function return element contains slot directly followed raw text expected new content completely replaces old content rerender actually happening new content appended old content rerender seems like fixed render functions compiled templates release notes version says small acrosstheboard performance improvement render functions compiled templates skip normalization nested children arrays based information inferred templates compile time could nt reproduce files project generated webpack template jsx affected seen issue render functions seen linked fiddle", "num": "6455", "d": "8/2017"}, {"title": "better handling recursion computed values", "body": "problem feature solve computed values objects reference cause much recursion error cases needed recalculation triggered change property computation depend computed values recalculated properties change value depends less calculation needed less errors occur example case code cause much recursion better behavior would resolve resolve fiddle causing much recursion fiddle one dependency removed error proposed api look like api would change", "num": "6454", "d": "8/2017"}, {"title": "img tag automatically adds end tag", "body": "version reproduction link steps reproduce use vue become sub tag img expected use vue become sub tag img actually happening use vue become sub tag img \u89c1", "num": "6452", "d": "8/2017"}, {"title": "vue nt pre treat prop local data anything else considered", "body": "problem feature solve vue want pass prop father child component need manually create local data save prop makes lots useless works vue pre treat prop local data property child component direct use data whatever want worries change father component data vue want strictly enforce onewaydataflow make child component data relative independence necessary proposed api look like feature suggest like props initialcounter initobject methods function dosomething function use local data thisinitialcounter", "num": "6451", "d": "8/2017"}, {"title": "\u7528\u4e8etypescript\u7684dts\u6587\u4ef6bug", "body": "version reproduction link steps reproduce \u5982\u679c\u6211\u7528script\u5f15\u5165vuejs\u7684\u65b9\u5f0f typescript\u975e\u6a21\u5757\u5316\u6765\u5f00\u53d1 \u8fd9\u91cc\u7684dts\u5c31\u65e0\u6cd5\u4f7f\u7528 expected null actually happening null null", "num": "6449", "d": "8/2017"}, {"title": "\u7528\u4e8etypescript\u7684dts\u6587\u4ef6bug", "body": "\u5982\u679c\u6211\u7528script\u5f15\u5165vuejs\u7684\u65b9\u5f0ftypescript\u975e\u6a21\u5757\u5316\u6765\u5f00\u53d1 \u8fd9\u91cc\u7684dts\u5c31\u65e0\u6cd5\u4f7f\u7528", "num": "6448", "d": "8/2017"}, {"title": "change prop type checking use instanceof instead typeof", "body": "problem feature solve currently prop type checking fails passing object extends expected type would allow anything inheriting expected type pass check proposed api look like line child classes would also pass mind component checking pass object extends string pass typecheck born issue one users passing string castable object extends string prop vue component interested check", "num": "6447", "d": "8/2017"}, {"title": "could typechecking use instanceof instead typeof", "body": "line child classes would also pass mind component checking pass pass typecheck", "num": "6446", "d": "8/2017"}, {"title": "weex code branch main vue code", "body": "problem feature solve weex related code added core repo would allow better readability proposed api look like vueweexvuejs vuevuejs", "num": "6445", "d": "8/2017"}, {"title": "accessibility vmodel update ui input adjusted voiceover", "body": "version reproduction link steps reproduce issue occurs ios devices tested using iphone ipad reproducing require turning builtin screenreader voiceover voiceover enabled settings gt general gt accessibility suggest adjusting accessibility shortcut last item accessibility settings allow tripleclick home button enable voiceover navigate codepen voiceover press range input finger mouse drag left right observe stars appear underneath along number reflecting total number correct behavior turn voiceover select range input hovering finger swiping leftright highlight inform swipe one finger adjust swipe one finger adjust observe neither stars rating adjusted expected adjusting range input voiceover expect see stars rating number adjust time actually happening changes reflected ui adjusting range input voiceover may issue best opened apple depends watched behind scenes though may possible correct within vue ensuring updated change events example whereas right may rely events nt apply screen reader manipulation", "num": "6444", "d": "8/2017"}, {"title": "use tostring determine function prop modified", "body": "problem feature solve convenient use pass anonymous function component template certain instances example provide formatting function slot feels like overkill however anonymous functions always cause child component rerender parent component rerenders function recreated suggest comparison false next try comparing tostring rerender also false unlikely noticeable negative performance impact function props terribly common changing fly even less benchmarking functiontostring shows ops per second pretty standard windowschrome system regardless function size proposed api look like proposing api changes", "num": "6443", "d": "8/2017"}, {"title": "\u5e0c\u671bvmodel\u80fd\u63d0\u4f9bjs\u8868\u8fbe\u5f0f\u7684\u652f\u6301", "body": "problem feature solve proposed api look like export default data return", "num": "6442", "d": "8/2017"}, {"title": "passing props root instance", "body": "version reproduction link although putting works steps reproduce declare prop root application instance pass prop represents root app expected root app props data actually happening props data nt showing", "num": "6440", "d": "8/2017"}, {"title": "function", "body": "typeerror function eval handleerror eval arrayeval eval nexttickhandler eval", "num": "6439", "d": "8/2017"}, {"title": "new issue mine", "body": "", "num": "6437", "d": "8/2017"}, {"title": "injectprovide working vueextend class", "body": "version reproduction link steps reproduce use vueextend create subclass contains option inject property child component subclass expected property injected correctly actually happening property injected srccoreutiloptionsjs line set function may cause issue", "num": "6436", "d": "8/2017"}, {"title": "keyupmetaenter", "body": "version reproduction link steps reproduce per docs modifier key meta work apple keyboards cmd key nt work combined enter works fine keyupctrlenter expected keyupmetaenter myfunc fires myfunc cmd enter pressed mac actually happening myfunc nt fire", "num": "6435", "d": "8/2017"}, {"title": "add shorthand syntax vif vfor", "body": "", "num": "6434", "d": "8/2017"}, {"title": "componentparse report error put correct js string containing script section", "body": "version reproduction link steps reproduce see error terminal expected run correctly actually happening build error component split sections script style script bug happened script section js string like var teststring may appear like test var teststring script section failed build", "num": "6433", "d": "8/2017"}, {"title": "consider feature detecting browsers instead ua sniffing", "body": "problem feature solve envjs currently contains user agent sniffing detections faked may always return expected instance also detect firefox android real intention detect webkit browsers android would require also checking similarly android devices use uas get around ironically bad ua sniffing true ios detected edge detected ie detected detected chrome detected also returns true opera false chrome ios proposed api look like", "num": "6432", "d": "8/2017"}, {"title": "add class element passed slot", "body": "hi way working expect output also javascript const items slotsitem working", "num": "6431", "d": "8/2017"}, {"title": "errorhandler catch uncaught exceptions", "body": "version reproduction link steps reproduce use handle errors create request throw error within request expected catch error actually happening catch error", "num": "6430", "d": "8/2017"}, {"title": "", "body": "", "num": "6429", "d": "8/2017"}, {"title": "listens camelcase event", "body": "problem feature solve markup currently compiles always written event handlers kebabcase surprised compiler created event handler camelcase proposed api look like compiler output event handlers camelcase", "num": "6428", "d": "8/2017"}, {"title": "vue get css style", "body": "version reproduction link steps reproduce expected \u83b7\u53d6\u5230css\u4e2d\u7684\u6837\u5f0f actually happening", "num": "6427", "d": "8/2017"}, {"title": "props passed attrs route props", "body": "version reproduction link steps reproduce setup wrapping component proxies props child using try pass props using api expected props route passed component actually happening none pass", "num": "6426", "d": "8/2017"}, {"title": "class binding class name b black b gray causes template compilation error", "body": "version reproduction link steps reproduce take element add vbind class b black bool seems happen class name contains two hyphens row problem people using tachyons css expected b black class border black applied containing element actually happening compilation error using tachyons css styling trying conditionally change border color double hyphen seems legitimate class name", "num": "6425", "d": "8/2017"}, {"title": "adding support templateurl optional", "body": "problem feature solve based blog regarding view template url support purpose including templateurl vuejs given complexity project requires templateurl web applications targeted towards performance application vuejs requires lot component written line html given complexity hard debug time teams full stack people requesting provide support templateurl vuejs making vuejs standard choice creating large scale enterprise level application feature request proposed api look like define new component called todoitem vuecomponent todoitem templateurl todo", "num": "6424", "d": "8/2017"}, {"title": "adding support templateurl optional", "body": "based blog regarding view template url support purpose including templateurl vuejs given complexity project requires templateurl web applications targeted towards performance application vuejs requires lot component written line html given complexity hard debug time teams full stack people requesting provide support templateurl vuejs making vuejs standard choice creating large scale enterprise level application feature request", "num": "6423", "d": "8/2017"}, {"title": "make reactive", "body": "version reproduction link steps reproduce see code pen please expected changes computed data view updates actually happening changes vue nt know", "num": "6422", "d": "8/2017"}, {"title": "template reacting prop change", "body": "version reproduction link steps reproduce set prop object pass prop subsequent children child emit update gets passed root component react changing prop expected upon mutating prop root component expected template references prop react change actually happening upon mutating prop root component template references prop still show initial value even though consolelog prop change showing updated value initially using found following caveat reactivity changed change affect template rendering", "num": "6421", "d": "8/2017"}, {"title": "render activator slot default slot", "body": "version reproduction link steps reproduce click run expected expected render default slot component actually happening rendered default activator components", "num": "6420", "d": "8/2017"}, {"title": "extends option working intended single file components", "body": "version reproduction link steps reproduce create new single file component extends another single file component using option expected component extended actually happening nothing appears original component possible use option js files like using mixins vue files", "num": "6419", "d": "8/2017"}, {"title": "used keepalive want switch users log app clear caches whole page", "body": "problem feature solve used keepalive want switch users log app clear caches whole page proposed api look like load whole page", "num": "6418", "d": "8/2017"}, {"title": "used keepalive want switch users log app clear caches whole page", "body": "", "num": "6417", "d": "8/2017"}, {"title": "add syntax sugar vbind", "body": "version reproduction link steps reproduce click run expected actually happening wish make shorter syntax like prop name existing variable parent expand", "num": "6416", "d": "8/2017"}, {"title": "add syntax sugar vbind", "body": "", "num": "6415", "d": "8/2017"}, {"title": "make routerview temporarily keepalive", "body": "problem feature solve hi guys hava hard problem push b b push c need b keep alive c back b b back need b destroy proposed api look like need keep keep alive permanently keep b keep alive temporarily solutions thanks", "num": "6413", "d": "8/2017"}, {"title": "vuex\u5b9e\u4f8b\u6ca1\u6709\u88ab\u6ce8\u5165\u5230\u5b50\u7ec4\u4ef6", "body": "version reproduction link steps reproduce \u4f9d\u8d56 npm install \u6784\u5efa npm run page npm run server expected actually happening vuex\u5b9e\u4f8b\u6ca1\u6709\u88ab\u6ce8\u5165\u5230\u5b50\u7ec4\u4ef6 \u65e0\u6cd5\u5728\u5b50\u7ec4\u4ef6\u7684\u8ba1\u7b97\u5c5e\u6027\u4e2d\u8bbf\u95ee\u5230", "num": "6412", "d": "8/2017"}, {"title": "replace flow typescript avoid facebook bsd patents license", "body": "problem feature solve flow facebook bsd patents license project built proposed api look like typescript apache license", "num": "6411", "d": "8/2017"}, {"title": "replace flow typescript avoid facebook bsdpatents license", "body": "title", "num": "6410", "d": "8/2017"}, {"title": "import \u5355\u6587\u4ef6\u7ec4\u4ef6\u4e4b\u540e \u624b\u52a8\u79fb\u9664ctor", "body": "version reproduction link steps reproduce \u9996\u5148 npm install \u5b89\u88c5\u4f9d\u8d56 \u7136\u540e npm run page \u751f\u6210html npm run server \u81ea\u52a8\u7f16\u8bd1\u548c\u6a21\u5757\u70ed\u66f4\u65b0 open \u5728\u63a7\u5236\u53f0\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u6e32\u67d3\u9519\u8bef expected actually happening", "num": "6409", "d": "8/2017"}, {"title": "vuejs render api calls ssr", "body": "problem feature solve unable render vue ssr api call javascript turned documentation also explain proposed api look like document possibility create", "num": "6408", "d": "8/2017"}, {"title": "allowing vonce accept boolean flag", "body": "problem feature solve right render component creation great data available however would nice able allow component rerender async data available freeze contents longer impacts performance proposed api look like allow take boolean parameter eg parameter truthy default behavior applied otherwise ignored", "num": "6407", "d": "8/2017"}, {"title": "inlinetemplate default template render properties passed options components", "body": "problem feature solve like behavior new vue instance inlinetemplate default components vue components printing one template render properties options btw concerns isolation parent child component scopes responsibility developer like inlinetemplates prop proposed api look like", "num": "6406", "d": "8/2017"}, {"title": "transition class removed", "body": "version reproduction link steps reproduce \u9a6c\u4e0a\u5207\u5230\u6d4f\u89c8\u5668\u7684\u5176\u4ed6\u6807\u7b7e\u9875 \u7b49\u81f3\u5c11 expected \u56de\u5230\u6d4b\u8bd5\u9875\u9762\u65f6 test \u5e94\u8be5\u663e\u793a\u51fa\u6765 actually happening test toggle \u6700\u65b0 \u6700\u540e\u7684\u72b6\u6001\u5e94\u8be5\u662f", "num": "6405", "d": "8/2017"}, {"title": "suggestion function receive array argument", "body": "problem feature solve first want thanks excellent framework sometimes use many plugins component code like think little troublesome suggestion function receive array argument code like proposed api look like vueuse plugin arguments object array function plugin example", "num": "6404", "d": "8/2017"}, {"title": "error attempting clone element append child render", "body": "version reproduction link steps reproduce jsfiddle example uncomment expected output foobar foobar actually happening uncaught typeerror read property propsdata undefined generated new vue trying replicate something similar example react", "num": "6403", "d": "8/2017"}, {"title": "question injectprovide", "body": "problem feature solve reason inject provided value see called see simple proposed api look like js hope work gt const vm new vue provide foo const child new vue parent vm provide foo inject foo expect childfoo tobe js import util util const parent new vue provide util inject util mounted thisutilsamecodeforuse const child new vue parent parent inject util mounted thisutilsamecodeforuse computed util gt util looks ugly", "num": "6402", "d": "8/2017"}, {"title": "show list dom revered vue js", "body": "problem feature solve want show vue js list vfor reversed dom object change created reversed list vfor html default list top bottom want append items bottom top dom see telegram web messages list ngrepeat way vfor another option thanks proposed api look like see telegram web messages list ngrepeat", "num": "6401", "d": "8/2017"}, {"title": "changing class input value bound value resets blank class updated", "body": "version reproduction link steps reproduce enter value first input box change class enter value second input box change class purpose code write custom component using guide expected reset text change class input box actually happening resetting value blank nt happen input box bound prop value whole point task create custom input component bound want indicate error process error handling display custom component", "num": "6400", "d": "8/2017"}, {"title": "\u5173\u4e8evue\u7684\u5b50\u7ec4\u4ef6\u6d89\u53ca\u4ea4\u4e92\u65f6\u7684\u6a21\u578b\u8bbe\u8ba1\u6a21\u5f0f\u95ee\u9898", "body": "problem feature solve \u4e00\u822c\u5178\u578b\u7684\u7236\u5b50\u7ec4\u4ef6\u4e2d \u5b50\u7ec4\u4ef6\u901a\u8fc7props\u5b9a\u4e49\u7236\u7ec4\u4ef6\u7684\u4f20\u5165\u53c2\u6570 \u5728\u5b50\u7ec4\u4ef6\u7684\u67d0\u4e2a\u9875\u9762\u5143\u7d20\u4e2d \u53ef\u4ee5\u76f4\u63a5\u7ed1\u5b9aprops\u7684\u5b9a\u4e49\u7684\u5c5e\u6027 \u5982\u679c\u9700\u8981\u8f6c\u6362 \u53ef\u4ee5\u5728\u5b50\u7ec4\u4ef6\u4e2d\u58f0\u660ecomputed \u5c5e\u6027 \u73b0\u5728\u7684\u95ee\u9898\u662f \u5982\u679c\u5b50\u7ec4\u4ef6\u7684\u7684\u9875\u9762\u662f\u53ef\u4ee5\u7f16\u8f91\u7684 \u6bd4\u5982input \u90a3\u4e48input \u7684\u7ed1\u5b9a\u5230\u4e00\u4e2acomputed\u5c5e\u6027 \u610f\u5473\u7740computed \u5c5e\u6027\u9700\u8981\u91c7\u7528getset\u65b9\u5f0f\u6765\u5b9a\u4e49 \u4e3a\u4e86\u4fdd\u8bc1set\u4e2d\u7684\u6570\u636e\u80fd\u5b58\u50a8 \u53c8\u9700\u8981\u5728data\u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf \u8fd9\u5c31\u5bfc\u81f4\u4e86\u4e00\u4e2a\u5b50\u7ec4\u4ef6 \u4e3a\u4e86\u4ea4\u4e92\u80fd\u529b \u9700\u8981data props computed \u4f3c\u4e4e\u6709\u70b9\u7e41\u7410 \u9700\u8981\u5b9a\u4e49\u5927\u91cf\u7684\u6a21\u578b \u90a3\u4e48 \u9488\u5bf9\u8fd9\u79cd\u666e\u904d\u5b58\u5728\u7684case \u5728vue\u4e0b\u7684\u4e00\u822c\u8bbe\u8ba1\u6a21\u5f0f\u662f\u4ec0\u4e48 \u6709\u4ec0\u4e48\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848 proposed api look like \u6e05\u65b0\u7684\u5904\u7406\u6a21\u5f0f", "num": "6399", "d": "8/2017"}, {"title": "\u5173\u4e8evue\u7684\u5b50\u7ec4\u4ef6\u7684props", "body": "\u4e00\u822c\u5178\u578b\u7684\u7236\u5b50\u7ec4\u4ef6\u4e2d \u5b50\u7ec4\u4ef6\u901a\u8fc7props\u5b9a\u4e49\u7236\u7ec4\u4ef6\u7684\u4f20\u5165\u53c2\u6570 \u5728\u5b50\u7ec4\u4ef6\u7684\u67d0\u4e2a\u9875\u9762\u5143\u7d20\u4e2d \u53ef\u4ee5\u76f4\u63a5\u7ed1\u5b9aprops\u7684\u5b9a\u4e49\u7684\u5c5e\u6027 \u5982\u679c\u9700\u8981\u8f6c\u6362 \u53ef\u4ee5\u5728\u5b50\u7ec4\u4ef6\u4e2d\u58f0\u660ecomputed \u5c5e\u6027 \u73b0\u5728\u7684\u95ee\u9898\u662f \u5982\u679c\u5b50\u7ec4\u4ef6\u7684\u7684\u9875\u9762\u662f\u53ef\u4ee5\u7f16\u8f91\u7684 \u6bd4\u5982input \u90a3\u4e48input \u7684\u7ed1\u5b9a\u5230\u4e00\u4e2acomputed\u5c5e\u6027 \u610f\u5473\u7740computed \u5c5e\u6027\u9700\u8981\u91c7\u7528getset\u65b9\u5f0f\u6765\u5b9a\u4e49 \u4e3a\u4e86\u4fdd\u8bc1set\u4e2d\u7684\u6570\u636e\u80fd\u5b58\u50a8 \u53c8\u9700\u8981\u5728data\u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf \u8fd9\u5c31\u5bfc\u81f4\u4e86\u4e00\u4e2a\u5b50\u7ec4\u4ef6 \u4e3a\u4e86\u4ea4\u4e92\u80fd\u529b \u9700\u8981data props computed \u4f3c\u4e4e\u6709\u70b9\u7e41\u7410 \u9700\u8981\u5b9a\u4e49\u5927\u91cf\u7684\u6a21\u578b \u90a3\u4e48 \u9488\u5bf9\u8fd9\u79cd\u666e\u904d\u5b58\u5728\u7684case \u5728vue\u4e0b\u7684\u4e00\u822c\u8bbe\u8ba1\u6a21\u5f0f\u662f\u4ec0\u4e48 \u6709\u4ec0\u4e48\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848", "num": "6398", "d": "8/2017"}, {"title": "\u5173\u4e8evue\u7684\u5b50\u7ec4\u4ef6\u7684props", "body": "\u4e00\u822c\u5178\u578b\u7684\u7236\u5b50\u7ec4\u4ef6\u4e2d \u5b50\u7ec4\u4ef6\u901a\u8fc7props\u5b9a\u4e49\u7236\u7ec4\u4ef6\u7684\u4f20\u5165\u53c2\u6570 \u5728\u5b50\u7ec4\u4ef6\u7684\u67d0\u4e2a\u9875\u9762\u5143\u7d20\u4e2d \u53ef\u4ee5\u76f4\u63a5\u7ed1\u5b9aprops\u7684\u5b9a\u4e49\u7684\u5c5e\u6027 \u5982\u679c\u9700\u8981\u8f6c\u6362 \u53ef\u4ee5\u5728\u5b50\u7ec4\u4ef6\u4e2d\u58f0\u660ecomputed \u5c5e\u6027 \u73b0\u5728\u7684\u95ee\u9898\u662f \u5982\u679c\u5b50\u7ec4\u4ef6\u7684\u7684\u9875\u9762\u662f\u53ef\u4ee5\u7f16\u8f91\u7684 \u6bd4\u5982input \u90a3\u4e48input \u7684\u7ed1\u5b9a\u5230\u4e00\u4e2acomputed\u5c5e\u6027 \u610f\u5473\u7740computed \u5c5e\u6027\u9700\u8981\u91c7\u7528getset\u65b9\u5f0f\u6765\u5b9a\u4e49 \u4e3a\u4e86\u4fdd\u8bc1set\u4e2d\u7684\u6570\u636e\u80fd\u5b58\u50a8 \u53c8\u9700\u8981\u5728data\u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf \u8fd9\u5c31\u5bfc\u81f4\u4e86\u4e00\u4e2a\u5b50\u7ec4\u4ef6 \u4e3a\u4e86\u4ea4\u4e92\u80fd\u529b \u9700\u8981data props computed \u4f3c\u4e4e\u6709\u70b9\u7e41\u7410 \u9700\u8981\u5b9a\u4e49\u5927\u91cf\u7684\u6a21\u578b \u90a3\u4e48 \u9488\u5bf9\u8fd9\u79cd\u666e\u904d\u5b58\u5728\u7684case \u5728vue\u4e0b\u7684\u4e00\u822c\u8bbe\u8ba1\u6a21\u5f0f\u662f\u4ec0\u4e48 \u6709\u4ec0\u4e48\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848", "num": "6397", "d": "8/2017"}, {"title": "make flow chart document", "body": "problem feature solve flow chart proposed api look like flow chart", "num": "6396", "d": "8/2017"}, {"title": "vue \u548cvfor\u5faa\u73af\u76f8\u5173\u7684\u4e00\u4e2abug", "body": "version reproduction link steps reproduce expected \u65e0 actually happening \u65e0", "num": "6395", "d": "8/2017"}, {"title": "style change component dynamic changes", "body": "version reproduction link steps reproduce click one cloud except last one expected cloud click change red disappear actually happening turns red disappear cloud next row takes place also turns red since right datatest attribute", "num": "6394", "d": "8/2017"}, {"title": "enhance velse work vfor", "body": "problem feature solve cases use vfor vif around velse show results element seems like making velse work directly vfor output anytime vfor combined vif one returns results would enhance vue proposed api look like itemname items", "num": "6393", "d": "8/2017"}, {"title": "vprop directive pairs sync stateless components", "body": "problem feature solve writing stateless components confusing underdocumented especially components contain ui elements user interacts gets even complex multiple ui elements component particularly complex elements like multiple select checkboxes many people fall trap populating state props antipatterns much vue documentation focuses twoway databinding internal state community favors writing pure components without state communicate changes back parent provides like interface parent component still requires lot repeat code component repetition props trying sync back parent additionally bind correct event based input type well including special care edge cases handled component author lead missing edge cases errors add significant complexity component proposed api look like syntactic sugar smartly binds correct event based field type would great similar directive use components nt keeping internal state simply want emit update event back parent case could syntactic sugar would pair nicely parent", "num": "6392", "d": "8/2017"}, {"title": "deep json cropped assigning data", "body": "version reproduction link steps reproduce vue instance created fetch json data lot data kind deeply nested structure screens rooms devices items scenes items sensors items fetch data parse everything fine assign vue data thisscreens whole items gone rest still fun thing assignment alters response thisscreens rooms devicesitems empty also datascreens rooms devicesitems expected expect whole json structure saved thisscreens actually happening items gone", "num": "6390", "d": "8/2017"}, {"title": "\u8de8\u5411\u4e0a\u7ea7dom\u4f20\u9012\u4e8b\u4ef6", "body": "version reproduction link steps reproduce expected actually happening \u80fd\u6b63\u786e\u6267\u884clogthree\u65b9\u6cd5", "num": "6389", "d": "8/2017"}, {"title": "invalidate client cache vue js", "body": "really need know clear client caches vuejs got client others files cached indeed nt want", "num": "6388", "d": "8/2017"}, {"title": "typeerror read property tofixed undefined", "body": "version reproduction link steps reproduce create method vue showmessage create object message show false text text data section call showmessage html element using von clickshowmessage set value show true using thismessageshow true print value show using consolelog thismessageshow expected value show set true without errorwarning actually happening get warning error line thismessageshow true typeerror read property tofixed undefined however line consolelog thismessageshow prints correctly issue reproducible button clicked circumstances expected behavior shown jsfiddle dont see error running", "num": "6387", "d": "8/2017"}, {"title": "vuecil\u6253\u5305svg\u51fa\u73b0\u5982\u4e0b\u9519\u8bef", "body": "\u6253\u5305\u597d\u7684svg\u53d8\u6210\u4e0b\u9762\u8fd9\u6837 moduleexports webpackpublicpath indexsvg \u9644\u4e0asvg\u6e90\u7801 \u8fd8\u6709webpack\u914d\u7f6e\u6587\u4ef6 test pngjpggifsvg loader fileloader options name name ext hash", "num": "6386", "d": "8/2017"}, {"title": "share state hook functions directives", "body": "problem feature solve situations necessary share state hook functions directives particularly useful directives attach detach event listeners elements consider following example directive vdrag listener gets attached element requires access values provided hook eg etc problem listener removed element hook order remove event listener element need ensure get reference hook perhaps gone wrong way solution could come registering listener element persistent weakmap finding listener using element problem would alleviated simply attaching listener hook detaching getting listener proposed api look like implement function directive register unreactive state javascript vuedirective sample", "num": "6385", "d": "8/2017"}, {"title": "vforstart vforend like", "body": "problem feature solve want next itemname proposed api look like new directives", "num": "6384", "d": "8/2017"}, {"title": "possible bug handling key", "body": "version reproduction link steps reproduce create x number child components complex strings something like add components inside child components example columns case expected deleting first component component get deleted components created component recreating components kills components inside actually happening deleting row components happens delete first row subsequent rows also get deleted recreated childcomponent inside get dropped never recreated end empty rows columns created dropped watch short video see happening creating row component number columns drop row want exact row dropped rows affected deleting rows discovered dropping row rows behind would also get dropped recreated empty time also discovered changing remove row works better need remove button parent child component wrapped vfor inside div difference two ways first case deletes subsequent components second case component question code looking except markup", "num": "6383", "d": "8/2017"}, {"title": "transitiongroup working tables rows tr", "body": "version reproduction link steps reproduce click button transition expected transition opacity property row appear actually happening transition appear see also", "num": "6382", "d": "8/2017"}, {"title": "string property escaping incorrectly", "body": "version reproduction link steps reproduce pass htmlentity escaped string ampersand prop value control try display eg amp quot example amp amp stuff amp quot expected example amp stuff actually happening example amp amp stuff fiddle links instead specific version", "num": "6381", "d": "8/2017"}, {"title": "", "body": "vue", "num": "6379", "d": "8/2017"}, {"title": "selected option set vmodel working ie", "body": "version reproduction link steps reproduce set select element vmodel one options value objects component mounted callback expected selected option match tags vmodel value actually happening dropdown value remains empty", "num": "6378", "d": "8/2017"}, {"title": "vif velse true vue net", "body": "version reproduction link steps reproduce created project using tutorial expected condition true dom shows content inside vif condition false dom shows content inside velse actually happening dom shows content", "num": "6377", "d": "8/2017"}, {"title": "run iphone iphone", "body": "version reproduction link steps reproduce open iphone iphone expected everything works actually happening vmodel doesnt work vue support iphone iphone default web view", "num": "6376", "d": "8/2017"}, {"title": "reuse part template partials", "body": "hi cases need conditionally use part template example header box used compound template depending params currently duplicating partials solution partials thanks advance", "num": "6375", "d": "8/2017"}, {"title": "development mode actionmutation log vue devtools", "body": "problem feature solve referencing pretty sweet development feature would add another tab inside vue devtools track flow actions mutations suggestion allow function devtoolslog inside storedispatch storecommit holds passed params using custom library sure provides another level debuggability problem though currently need add line code inside actionmutation achieve overview instance dispatching action might look like inside new tab inside vue devtools clicked expanded result list visible vue devtools might look like note making actions print different color mutations makes really easy follow flow proposed api look like believe alternative extend vueconfig enabledisable feature overall idea enabling vuedevtools able read two functions", "num": "6373", "d": "8/2017"}, {"title": "component disappears first rerender", "body": "version reproduction link steps reproduce jsfiddle wait complete two seconds expected customela still dom actually happening customela removed dom rerender however comes back third rerender tested using instead jsfiddle jsfiddle using vue verified bug locally", "num": "6372", "d": "8/2017"}, {"title": "data leaks among multi instances component", "body": "version reproduction link expected removing instance component remove data holds actually happening removing instance component passesleaks data next sibling chain", "num": "6370", "d": "8/2017"}, {"title": "typescript experimental declarations feature", "body": "problem feature solve would love typescript recognize fields defined props data directly demoed starter project solves headache declaring interface every component changing interface whenever change something component however uses fork vue directly leverage production code far behind latest release timeline feature going released proposed api look like looks like experimental feature already implemented like know going merged released", "num": "6368", "d": "8/2017"}, {"title": "warning multiple refs name", "body": "problem feature solve colleague spent hours debugging issues caused two refs name two cases happen simple stupidity realizing refs nt seem work vfor case reasonable assume ref would work correctly one fubar component instantiated assuming titles duplicates ref work right either ref ignores vif ref nt work right vfor proposed api look like simply issue vue warning multiple refs name encountered", "num": "6366", "d": "8/2017"}, {"title": "vmodel \u548cvon input value \u51fa\u73b0 \u4e0d\u652f\u6301qq\u8f93\u5165\u6cd5\u548c \u4e94\u7b14\u8f93\u5165\u6cd5\u7684\u95ee\u9898", "body": "version reproduction link steps reproduce \u8fd9\u6837\u4e66\u5199\u7684\u65f6\u5019 \u51fa\u73b0 \u4e0d\u652f\u6301qq\u8f93\u5165\u6cd5\u548c \u4e94\u7b14\u8f93\u5165\u6cd5\u7684\u95ee\u9898 expected \u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c actually happening \u5728qq\u8f93\u5165\u6cd5\u8f93\u5165\u7684\u65f6\u5019 \u4e5f\u5c06\u5b57\u7b26\u6dfb\u52a0\u8fdb\u53bb \u800c\u4e94\u7b14\u8f93\u5165\u6cd5 \u51fa\u73b0\u4e0d\u4e86\u5f39\u6846 \u53ea\u4f1a\u8f93\u5165 \u5b57\u6bcd", "num": "6365", "d": "8/2017"}, {"title": "vmodel \u548cvon input value \u51fa\u73b0 \u4e0d\u652f\u6301qq\u8f93\u5165\u6cd5\u548c \u4e94\u7b14\u8f93\u5165\u6cd5\u7684\u95ee\u9898", "body": "version reproduction link steps reproduce \u8fd9\u6837\u4e66\u5199\u7684\u65f6\u5019 \u51fa\u73b0 \u4e0d\u652f\u6301qq\u8f93\u5165\u6cd5\u548c \u4e94\u7b14\u8f93\u5165\u6cd5\u7684\u95ee\u9898 expected \u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c actually happening \u5728qq\u8f93\u5165\u6cd5\u8f93\u5165\u7684\u65f6\u5019 \u4e5f\u5c06\u5b57\u7b26\u6dfb\u52a0\u8fdb\u53bb \u800c\u4e94\u7b14\u8f93\u5165\u6cd5 \u51fa\u73b0\u4e0d\u4e86\u5f39\u6846 \u53ea\u4f1a\u8f93\u5165 \u5b57\u6bcd", "num": "6364", "d": "8/2017"}, {"title": "prohibited keywords includes", "body": "problem feature solve vuejs prohibited keywords include though includes feeling use causes confusing reasons prohibited keywords nt include proposed api look like prohibited keywords include keyword", "num": "6362", "d": "8/2017"}, {"title": "broken", "body": "version reproduction link steps reproduce working anymore see provided fiddles expected behavior actually happening using dynamically change input type text area neither working anymore also common case working using dynamic components common usage component libraries like bootrapvue user dynamically change elements behavior current implementation falling back fix intentional breaking change", "num": "6361", "d": "8/2017"}, {"title": "generate default prop value based value another prop", "body": "problem feature solve recently making vue component library dozen props two props called respectively property component looks like want default value determined based value example specified set default value specified either set specified set value words always defaults value proposed api look like currently vue allows property functions generate default value dynamically however seems impossible obtain another prop value inside function hope api look like", "num": "6358", "d": "8/2017"}, {"title": "typescript defnition vueuse function nt allow custom parameters", "body": "version reproduction link steps reproduce create new vuejs project typescript add plugin passes arguments use command download install vuenativewebsocket add following lines srcmaints expected vuedts definition use function reflects actual functionality actually happening vuedts definition allows plugin object function options object actual function defined vueusejs takes plugin object function number optional parameters nt actually ask options object plugin suggestion would make following change vuedts line could options available way function written usejs definition written correct", "num": "6357", "d": "8/2017"}, {"title": "alias nt resolve correctly style tag vue files", "body": "problem feature solve webpackbaseconfig alias defined use alias style tag vue file nt seem work get error ps using srcstylesvariablesscss file store sass variables importing every vue file would love know way importing variables file every component using sassloader styleloader thanks proposed api look like", "num": "6356", "d": "8/2017"}, {"title": "alias nt work style", "body": "webpackbaseconfig alias defined use alias style tag vue file nt seem work get error ps using srcstylesvariablesscss file store sass variables importing every vue file would love know way importing variables file every component using sassloader styleloader thanks", "num": "6355", "d": "8/2017"}, {"title": "async components", "body": "version reproduction link steps reproduce templates async components nt work expected manual expected output doesnt work actually happening return empty template", "num": "6354", "d": "8/2017"}, {"title": "ssr contextstyles undefined", "body": "version reproduction link steps reproduce expected defined actually happening equal contextstyles getter set new context created equal defining getter property vuejs copying property getter adding following line one fixes issue", "num": "6353", "d": "8/2017"}, {"title": "vbind reactive changing prop data null", "body": "version reproduction link steps reproduce create component whose template vbinds prop attribute mount component prop set string number later change prop null dom updated expected dom updated reflect bound value null actually happening nothing tested working vue narrowed vue version broke", "num": "6352", "d": "8/2017"}, {"title": "update slot content without rerendering rest component", "body": "problem feature solve developed components generate large amounts html allow content added via slot appears slot content updated render function called component however seems like something could avoided optimization would significantly improve performance component instances possible proposed api look like proposing api changes", "num": "6351", "d": "8/2017"}, {"title": "dom errors component patching nt break app", "body": "problem feature solve loading vue component syntax error breaks entire application robust handling error stack see fiddle pressing show first new item appears pressing show first break app show wo nt work anymore proposed api look like would new api nt render anything log error nt break rest application similar html parse errors", "num": "6350", "d": "8/2017"}, {"title": "perform flip correctly multiple items removed one step", "body": "version reproduction link steps reproduce click remove three remove multiple items one step expected removing single items works expected items drop vertically removing multiple items animation repeated single removals work expected actually happening multiple items removed horizontal location items shifts first item removed would guess adjusting item class goes elements setting leaveactive position absolute takes flow following element left position previous element horizontal position affected flip calculation made would explain single element removals work expected elements affected correct could fixed example accumulated class adjustments would make made flip animation calculations made edited newissuevuejsorg tool translates html entities eg lt lt github issue hides unknown tags", "num": "6349", "d": "8/2017"}, {"title": "synchronize select vmodel", "body": "version reproduction link steps reproduce javascript z const vm new vue el app data return x methods test consolelog change event mounted settimeout amp gt thiso expected try snippet find timer callback execute later trigger event change undefined read vue source code find know vue want synchronize selectvalue think selected synchronized select default value actually happening selected synchronized select default value", "num": "6348", "d": "8/2017"}, {"title": "use components sync occurs bug", "body": "version reproduction link steps reproduce \u70b9\u51fb\u7b2c\u4e00\u4e2a\u4fee\u6539\u6309\u94ae \u4fee\u6539\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\u4e2dname\u5c5e\u6027 vue\u4f1a\u6b63\u5e38\u8b66\u544a name\u5c5e\u6027\u6b63\u5e38\u66f4\u65b0 \u70b9\u51fb\u7b2c\u4e8c\u4e2a\u4fee\u6539\u6309\u94ae \u4fee\u6539\u7b2c\u4e8c\u4e2a\u7ec4\u4ef6\u4e2dname\u5c5e\u6027 \u7ed3\u679c\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\u4e2dname\u5c5e\u6027\u6536\u5230\u5f71\u54cd\u9700\u8981\u6ce8\u610f\u7684\u662f \u6211\u5728\u7b2c\u4e8c\u4e2a\u7ec4\u4ef6\u4e2d \u5bf9name\u5c5e\u6027\u7528\u4e86 sync \u63cf\u8ff0\u7b26 first clicked first modify button ok clicked second modify button first mycomponent name became original value way used sync data name second mycomponent expected \u7b2c\u4e8c\u6b21\u70b9\u51fb\u4fee\u6539\u540e \u7b2c\u4e00\u4e2a\u7ec4\u4ef6\u4e0d\u53d7\u5f71\u54cd second click modify button first mycomponent wo nt change actually happening \u7b2c\u4e00\u4e2a\u7ec4\u4ef6\u53d7\u5230\u7b2c\u4e8c\u4e2a\u7ec4\u4ef6\u7684\u70b9\u51fb\u4e8b\u4ef6 \u611f\u89c9\u50cf\u662f\u72b6\u6001\u6062\u590d\u5230\u521d\u59cb second click modify button name data first mycomponent changed original value original data delivered \u65e0 \u8c22\u8c22 thanks", "num": "6347", "d": "8/2017"}, {"title": "vueserverrenderer hello cause serverclient dom mismatch", "body": "version reproduction link steps reproduce make ssr app using nuxt something else put template expected error actually happening console output", "num": "6345", "d": "8/2017"}, {"title": "performance avoid unnecessary rerender conditional data change", "body": "version reproduction link steps reproduce head function called every iteration directive function mutates data property last iteration directive therefore trigger rerender change however seems like rerender happens every time function called line mutates data removed rerender happen tested angular angular seems rerender last iteration expected behavior vue well expected foo trigger rerender index equal actually happening foo triggers rerender every time", "num": "6342", "d": "8/2017"}, {"title": "element fontsize display differently two component", "body": "version reproduction link steps reproduce use vuecli initialize project add indexhtml add appvue hellovue add style overflow auto hellovue root element fontsize two components display different expected one font size one page two appearance strange actually happening display use remove overflow auto behave normally want", "num": "6341", "d": "8/2017"}, {"title": "vueserverrenderer entryserverjs init method", "body": "problem feature solve propose add ability declare method init called server initialization server starting recompilation developer possibility reload services creating vue frontend app serverside rendering want create backend api server want bundle together vue ssr server import successfully bundled connect express provide via param add route backend api server method route added every time user requested server vueserverrenderer call default export method also added server starting first request backend api server bundled transparently call methods serverside api provider clientside api provider use axios make httprequests writing providers mean files inside vuehackernewssrcapi think useful proposed api look like means code vuehackernews template javascript serverjs const backendrouter expressrouter appuse backendrouter rendererinit backendrouter appget isprod render req res gt readypromisethen gt render req res javascript entryserverjs const backendapi require backendapi function init context contextbackendrouteruse backendapi export init export default context gt", "num": "6340", "d": "8/2017"}, {"title": "", "body": "version reproduction link steps reproduce jsfiddle\u9884\u89c8\u5728\u56fd\u5185\u65e0\u6cd5\u8bbf\u95ee expected \u5e0c\u671bvue\u5b98\u7f51\u6240\u6709\u4f8b\u5b50\u80fd\u6b63\u786e\u663e\u793a actually happening jsfiddle\u65e0\u6cd5\u8bbf\u95ee\u4f1a\u635f\u5931\u5927\u91cf\u51c6\u5907\u7528vue\u7684\u6f5c\u5728\u7528\u6237", "num": "6339", "d": "8/2017"}, {"title": "line numbers errors html parser", "body": "problem feature solve errors raised html parser code nt register location error location much easier debug example forget close html tag compiler complain tell name tag however idea opening tag located moderately big files quite impractical proposed api look like could add property options include line html included file use offset location printing getting locations idea proceed someone give pointers may submit pull request", "num": "6338", "d": "8/2017"}, {"title": "", "body": "version reproduction link steps reproduce xx expected actually happening button click alert ok \u70b9\u51fb new vue el app data vue warn property method alert defined instance referenced render make sure declare reactive data properties data option found uncaught typeerror alert function click eval createfunction htmlbuttonelementinvoker", "num": "6337", "d": "8/2017"}, {"title": "", "body": "version reproduction link steps reproduce xx expected actually happening \u70b9\u51fb new vue el app data", "num": "6336", "d": "8/2017"}, {"title": "", "body": "\u70b9\u51fb new vue el app data", "num": "6335", "d": "8/2017"}, {"title": "prop nt passed via element attribute", "body": "version reproduction link steps reproduce pass prop element attribute like declare prop props field render template prop interpolation like expected see propvalue outputted resulting html actually happening prop value ignored without messages stays undefined", "num": "6334", "d": "8/2017"}, {"title": "sanitize vhtml", "body": "problem feature solve currently working making blog using wordpress rest api back end api returns article html markup taking json response using render vue app understand crosssite scripting security risks proposed api look like would great automatically sanitized string remove tags needing script tags whatever reason maybe accomplish recently made aware angular think vuejs would greatly benefit feature", "num": "6333", "d": "8/2017"}, {"title": "vueserverrenderer cached attributes never released leading big memory footprint", "body": "version reproduction link steps reproduce expected cache escape attribute actually happening attribute cached see attribute cached escaped", "num": "6332", "d": "8/2017"}, {"title": "nesting nt work", "body": "know supposed components inside single detailed nt obvious start reading guide show many example tiny components functioning someone starts incrementally updating application use vue intuitively start using selectors dd functionality application targeting different parts markup selectors option fall apart soon used one part dom inside another part dom targetted another linked example nt obvious front developer needs specifically use single everything inside components would great clear front introduction mentions create reusable components mention caveat contrast vue angular nt difficult regard directives although api awkward could applied simple selectors never mattered selector matched element inside element also manipulated angular getting angular played well augmenting existing markup without unintuitive fail post vue much better angular many ways think great way create nested intuitively work maybe difficult implementation side nt know would make sense end users sure first person read vue introduction stumble caveat sure others experience unituitive failures well anyways describing something think could help make vue better intuitive especially comes people starting learn vue attempt sprinkle vue apps large preexisting doms", "num": "6331", "d": "8/2017"}, {"title": "vueesmjs vue warn error callback watcher function return thisdata state error vuex mutate vuex store state outside mutation handlers found", "body": "\u5173\u952e\u662f\u6211\u6ca1\u4fee\u6539 state\u7684\u503c", "num": "6330", "d": "8/2017"}, {"title": "callback watcher function return thisdata state mutate vuex store state outside mutation handlers", "body": "version reproduction link steps reproduce expected asda actually happening fdafsdf sdfsd", "num": "6329", "d": "8/2017"}, {"title": "potential issue ie data object declaration function", "body": "version reproduction link steps reproduce create component declare data option function inside component especified docs run ie expected component render without issue ie actually happening component breake code error console said invalid character data declaration line building demos coincidence run app ie suddenly app stop working points nt use transpiler pure js function loaded vuejs library cdn nt tested earlier ie version firefox works perfectly chrome edge", "num": "6326", "d": "8/2017"}, {"title": "", "body": "version reproduction link steps reproduce \u4e07\u91d1\u6cb9\u662f\u89c4\u907f\u8fd9\u4e2abug\u7684\u64cd\u4f5c expected \u8fd4\u56de\u6b63\u786e\u7684oldvalue actually happening oldvalue\u548cnewvalue\u76f8\u540c \u90fd\u662fnewvalue\u7684\u5185\u5bb9 \u8fd9\u4e2a\u662fbug\u8fd8\u662f\u7f3a\u9677", "num": "6324", "d": "8/2017"}, {"title": "watch oldvalue newvalue use unshift change array length", "body": "solve future", "num": "6323", "d": "8/2017"}, {"title": "basic directive vmodel work aspnet core project", "body": "development environment aspnet core typescript problem know changed change value form value model change update value places change value form change click button changed value model change update new value need source code project click region source code database source code scriptsql bluespnswag nswagstudio file first use commands sequence bluespwebapis folder second use commands sequence bluespvue folder last open url look view edit item chinglish thank u", "num": "6321", "d": "8/2017"}, {"title": "basic directive vmodel work aspnet core project", "body": "development environment aspnet core typescript problem know changed change value form value model change update value places change value form change click button changed value model change update new value need source code project click region source code database source code scriptsql bluespnswag nswagstudio file first use commands sequence bluespwebapis folder second use commands sequence bluespvue folder last open url look view edit item chinglish thank u", "num": "6320", "d": "8/2017"}, {"title": "vuejs keyup event probability triggered", "body": "version reproduction link steps reproduce scene like six input last two input disabled enter tab key key switched next cycle like last input might appear differently input seems like vuejs keyup nt work javascript keyup executed chances small may try several times show expected vuejs keyup used normal javascript actually happening try several times last red vuejs keyup trigger", "num": "6319", "d": "8/2017"}, {"title": "\u65e0\u6cd5\u83b7\u53d6\u672a\u5b9a\u4e49\u6216 null \u5f15\u7528\u7684\u5c5e\u6027 split", "body": "version reproduction link steps reproduce expected compatible actually happening error error function location", "num": "6318", "d": "8/2017"}, {"title": "async data update select option trigger dom change event", "body": "version reproduction link steps reproduce open console panel check log expected loading initial data options trigger dom change event done user actually happening async data update result dom change event sync data update something commit working fine app fire form submit user changed option app submit right data initialized check commented line sample js", "num": "6317", "d": "8/2017"}, {"title": "debug sourcemaps ide phpstorm vue single file component", "body": "version reproduction link steps reproduce install laravel mine use sourcemaps mix file usual installation composer install npm install change phpstorm settings tream vue files html place breakpoints comparison js files work use component somewhere inside div id setup javascript remote debug config chrome phpstorm case launch debug load page opened browser window expected breakpoint vue js files break actually happening breakpoints js file inspecting sources chrome devtools see something weird sourcemaps source vue files root webpack contain actual code vue files also copies twice one prefix also however content seems generated code think phpstorm expects original source copies location note chrome devtools able break wonder move component sourcecode js files use export default", "num": "6316", "d": "8/2017"}, {"title": "whitespace problem chromewindows latest", "body": "version reproduction link steps reproduce seems render fine edge firefox chrome windows latest puts space front like spaces also appear chromeandroid output screen hello world rather hello world expected space front hello actually happening space front hello nt happen codepan sure", "num": "6315", "d": "8/2017"}, {"title": "whitespace issues chrome windows latest", "body": "seems render fine edge firefox chrome windows latest puts space front like output screen hello world rather hello world", "num": "6314", "d": "8/2017"}, {"title": "conditional change type attribute working", "body": "version reproduction link steps reproduce try type text field keep clearing input every second expected toggle showing hiding password actually happening destroying input clearing value time value changes", "num": "6313", "d": "8/2017"}, {"title": "method named update breaks component creation", "body": "version reproduction link method computed steps reproduce add method computed property custom component add component app note vue throws expected method called perfectly reasonable name method andor computed property throwing simply based naming actually happening yet dig reason object loses reference method computed name", "num": "6312", "d": "8/2017"}, {"title": "transition mode working vshow", "body": "version reproduction link steps reproduce transition element specific mode eg outin multiple elements transition vshow directive instead vif expected elements vshow transition properly respect specified transition mode actually happening initial element animates one meant replace never appears ran making part form use vif since need form fields stay within html use backend form submit probably misunderstanding something found nothing repo issues google help greatly appreciated", "num": "6311", "d": "8/2017"}, {"title": "beforemount work ie", "body": "version reproduction link steps reproduce open ie edge fount beforemount work error information show expected method tableonload work change table layout actually happening nothing happen", "num": "6309", "d": "8/2017"}, {"title": "vue ca nt response ios wechat brower", "body": "version reproduction link steps reproduce \u5728ios \u7c7b\u4f3c\u95ee\u9898 expected \u80fd\u591f\u597d\u597d\u6e32\u67d3dom actually happening \u53ef\u80fd\u662fvue\u4e8b\u4ef6\u5835\u585e", "num": "6308", "d": "8/2017"}, {"title": "always allow babel transform expressions templates", "body": "version reproduction link steps reproduce vue export default data return b true already enabled initializing expected value actually happening error compiling template invalid expression class true b seems validating expression goes babel trying evaluate makes es features used templates limited node supports causes confusion translate spread operators arrays templates elsewhere translate spread operators objects anywhere except templates think might intentional mark bug", "num": "6307", "d": "8/2017"}, {"title": "vue vuecli update vue", "body": "want build webpack project vue install vuecli update vue vue", "num": "6306", "d": "8/2017"}, {"title": "logos vuex vuerouter", "body": "version reproduction link steps reproduce expected actually happening read comment vuex vuerouter great tools think deserve logos perhaps community decide whether logos tools designed example", "num": "6305", "d": "8/2017"}, {"title": "deleted", "body": "", "num": "6304", "d": "8/2017"}, {"title": "ref undefined come back route change", "body": "project ok click button change return click show undefined", "num": "6302", "d": "8/2017"}, {"title": "provide typescript declaration file", "body": "problem feature solve please provide declaration file thanks proposed api look like", "num": "6301", "d": "8/2017"}, {"title": "", "body": "", "num": "6300", "d": "8/2017"}, {"title": "vue component work expect", "body": "version reproduction link steps reproduce click first text click second text click first text click first text expected forth step second third showed actually happening second appear", "num": "6299", "d": "8/2017"}, {"title": "ie\u4e0b\u8868\u5355\u7ed1\u5b9a\u4f7f\u7528\u626b\u7801\u67aa\u95ee\u9898", "body": "version reproduction link steps reproduce expected actually happening \u65e0", "num": "6298", "d": "8/2017"}, {"title": "initialize object properties binding controls initialized yet", "body": "version reproduction link steps reproduce bind html controls unintialized object properties expected object properties initialized bound controls actually happening bound understand object properties need initialized binding controls sometimes possible know properties used would nice binding controls properties would initialize first initialized yet", "num": "6297", "d": "8/2017"}, {"title": "errorhandler called custom events inside components", "body": "version reproduction link steps reproduce assign custom error handler throw error inside even handler method component expected event throws error call custom handler assigned actually happening throws error global window object bypassing", "num": "6296", "d": "8/2017"}, {"title": "npm run lint error could nt find plugin eslintpluginhtml", "body": "version reproduction link steps reproduce git clone vue repo checkout dev branch excute npm install exccute npm run lint error expected lint success actually happening eslint could nt find plugin eslintpluginhtml happen couple different reasons eslint installed globally make sure eslintpluginhtml also installed globally globallyinstalled eslint find locallyinstalled plugin eslint installed locally likely plugin nt installed correctly try reinstalling running following npm eslintpluginhtml latest savedev still ca nt figure problem please stop chat team", "num": "6294", "d": "8/2017"}, {"title": "set dropdown open default", "body": "hello guys open default dropdown vue select", "num": "6293", "d": "8/2017"}, {"title": "vfor\u91cc\u7684 key\u4e0d\u7b26\u5408\u9884\u671f", "body": "version reproduction link steps reproduce expected \u91cc\u7684 key\u7b26\u5408\u9884\u671f actually happening vfor\u5faa\u73af\u91cc\u7ed1\u5b9a\u7684", "num": "6292", "d": "8/2017"}, {"title": "failed mount component using non single file component sfc inside sfc", "body": "version reproduction link steps reproduce ran vue init browserify vuetest used full build compiler setup options converted hellovue hellojs non sfc js import vue vue vuecomponent hello template data return msg welcome vuejs app js import hello componentshellojs export default name app components hello run npm run dev goto expected expect application render hello component successfully actually happening", "num": "6291", "d": "8/2017"}, {"title": "computed property getshowcreatedialog assigned setter", "body": "version reproduction link steps reproduce expected warn actually happening vue warn computed property getshowcreatedialog assigned setter", "num": "6290", "d": "8/2017"}, {"title": "props undefined within", "body": "version reproduction link steps reproduce using ends undefined expected expect within outside tag actually happening undefined tried variations using nt trigger", "num": "6289", "d": "8/2017"}, {"title": "iterating list working", "body": "version reproduction link steps reproduce fiddle works one nt expected expect second fiddle show text sides symbols similar first fiddle actually happening data displayed second fiddle might happening something wrong second one perhaps bootstrap code messing", "num": "6288", "d": "8/2017"}, {"title": "iterating list working", "body": "using trying something like js class select extends vue constructor args argsdata argsdata argsdataitems argsdataitems const select new select el select results something looks like expecting see something like", "num": "6287", "d": "8/2017"}, {"title": "index equivalent", "body": "problem feature solve distinguishing elements generated list useful element associated item array directly modify list element within directive element proposed api look like index variable available within directives elements generated list", "num": "6286", "d": "8/2017"}, {"title": "reactive vuedelete equivalent objects", "body": "problem feature solve although documented release notes edited docs weeks ago commit vuedelete work anymore since objects need addremove item array simple using pushsplice need manipulate object vueset reactively add delete nt seem builtin reactive solution builtin way would like know possible implement one proposed api look like sure code api implements javascript builtin delete operator maintaining reactivity would excellent", "num": "6285", "d": "8/2017"}, {"title": "improve performance arrays extensible therefore reactive", "body": "version reproduction link steps reproduce create large array case array contains arrays prevent extensions set array vue viewmodel expected vue reactivity system anything array setting property runtime setting string viewmodel ie actually happening dependarray function invoked recursively object every time array accessed causing setting property take linear time occur many times per tick reproducer close actual scenario building virtual grid large source array compute start index normally would based scroll position case added button simulate scrolling template renders rows jsfiddle array never change thing changing start index however enormous amount lag profile see issue core nothing reactivity solely performance seem like something perform poorly", "num": "6284", "d": "8/2017"}, {"title": "better error message vfor typo", "body": "problem feature solve recently made annoying mistake putting colon front vfor vfor used vbind shorthand error message complained recognizing iteration variables super confusing expected vfor create variables proposed api look like clearly vue trying interpolate expression regular vbind think throw error please remove colon vfor need colons vbinds", "num": "6283", "d": "8/2017"}, {"title": "jquery working dynamic component", "body": "dealsvue rotating icon click working using working", "num": "6282", "d": "8/2017"}, {"title": "clicknative work", "body": "version reproduction link steps reproduce code example rowtitle rowcode rowprice expected expected get nativce event actually happening click generate event none even mouseevent remove get event", "num": "6281", "d": "8/2017"}, {"title": "clicknative work", "body": "clicknative work", "num": "6280", "d": "8/2017"}, {"title": "ssr client side hydration mismatching vdom generated useless text vnode", "body": "version reproduction link steps reproduce shown codeopen case wrote vue ssr runtime still use vue client expression false dom generate useless text vnode lead mismatching childnodes vs vnodes expcetion removed program works expected vdom longer produces unwanted vnode tags actually happening vdom created useless text tag vnode", "num": "6279", "d": "8/2017"}, {"title": "ssr client side hydration mismatching vdom generated useless text vnode", "body": "version reproduction link steps reproduce shown codeopen case wrote vue ssr runtime represent static file case still use vue client expression false dom generate useless text vnode lead mismatching childnodes vs vnodes warn removed program works expected vdom longer produces unwanted text tag vnode actually happening vdom created useless text tag vnode", "num": "6278", "d": "8/2017"}, {"title": "input type number accepts character", "body": "version reproduction link steps reproduce create new input field input field accept expected integers accepted field actually happening able input number", "num": "6277", "d": "8/2017"}, {"title": "vif breaks dependent selects logic", "body": "version reproduction link steps reproduce click toggle pickup try change district select see issue also delete div vif cartpagepickup change vif vshow see everything working expected simple dependent selects logic select elements based value actually happening logic breaks looks like caching issue change problematic selectcustomselect location dom works", "num": "6276", "d": "8/2017"}, {"title": "better error message recursive components", "body": "problem feature solve currently next impossible debug errors components referencing selves accident case apparently allready proposed part discussion another ticket proposed api look like api change better error message source file causing issues", "num": "6275", "d": "8/2017"}, {"title": "builtin component component prop receive async component factory function", "body": "version steps reproduce builtin component component html message javascript new vue el app data message hello vuejs methods getasynccomponent return gt promiseresolve template html message expected render async component correctly actually happening getasynccomponet method enter dead loop call", "num": "6273", "d": "8/2017"}, {"title": "builtin component component prop receive async component factory function", "body": "version steps reproduce builtin component component html message javascript new vue el app data message hello vuejs methods getasynccomponent return gt promiseresolve template html message expected nt render async component actually happening getasynccomponet method enter dead loop call", "num": "6272", "d": "8/2017"}, {"title": "code\u51fa\u73b0\u7684\u95ee\u9898", "body": "version reproduction link steps reproduce expected actually happening", "num": "6271", "d": "8/2017"}, {"title": "embed tweet \u7b49\u7b49 \u7c7b\u4f3c\u7684\u95ee\u9898", "body": "\u8fd9\u79cd\u60c5\u51b5\u6211\u9700\u8981\u600e\u4e48\u53bb\u5904\u7406", "num": "6270", "d": "8/2017"}, {"title": "error render client side dynamic component", "body": "version reproduction link steps reproduce link reproduction worked think working use webpack dont use nuxt js server side good worked clientside error expected want errors actually happening error browser rendered mycomponent", "num": "6268", "d": "8/2017"}, {"title": "error render client side dynamic component", "body": "hello component serverside good worked browser message error pls help thank", "num": "6267", "d": "8/2017"}, {"title": "trigger src property refresh picture", "body": "call element removed picture refresh triggered function loads picture written way loadimg function url thattargetcomplete true var el thattarget url return apiattr thattarget isalredyload apiimagecache url url function ret err retstatus returl elsrcindexof returl gt return elsrc returl", "num": "6266", "d": "8/2017"}, {"title": "canvas update", "body": "hi everybody new vue want draw picture vuejs found canvas update remove data example thanks xin", "num": "6265", "d": "8/2017"}, {"title": "input type number keyboard input work microsoft edge", "body": "version reproduction link steps reproduce simply create number input use arrow keys microsoft edge browser vmodel update bidirectional value expected value vue componentinstance would updated updown arrow keys chrome firefox actually happening value updated", "num": "6264", "d": "8/2017"}, {"title": "attrs undefined component props", "body": "version reproduction link steps reproduce access attrs object within component context props provided expected attrs object containing unrecognized props therefore would expect empty object props specified component tag actually happening attrs undefined", "num": "6263", "d": "8/2017"}, {"title": "lazy slot loading", "body": "problem feature solve render slot rendered child context render parent first pass child example parent template child template loading would result exception null parent rendered first proposed api look like maybe lazy attribute slot", "num": "6262", "d": "8/2017"}, {"title": "vuex two way data binding", "body": "version reproduction link steps reproduce go click change value input change value row well expected store property payload comes like expected mutation write statenovamedica payload change state actually happening binds state last thing using value case row table change value input clicking value row also changes see problem running go click change value input way see row value also changes github repo mutation changing value comment workaround found nt think good thing thinking field properties bothersome work", "num": "6261", "d": "8/2017"}, {"title": "ssr\u73b0\u5728\u5751\u592a\u591a", "body": "version reproduction link steps reproduce expected actually happening", "num": "6260", "d": "8/2017"}, {"body": "related somehow", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "issues", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "nt find relevant cancellation api document", "d": "8/2017"}, {"body": "valid value contenteditable valid", "d": "8/2017"}, {"body": "\u8bf7\u4e0d\u8981\u76f4\u63a5\u4e22\u4e00\u5768\u4ee3\u7801\u6307\u671b\u522b\u4eba\u5e2e\u4f60\u6539", "d": "8/2017"}, {"body": "please open issue vuerouter repository one please provide minimal reproduction complete application please descibe situation deployment better properly configure server work history mode explained vuerouter documentation", "d": "8/2017"}, {"body": "hi would rather argue nt leakage expected leakage installs plugins global constructor using plugins dynamically nt recommended better install plugin entry point case reevaluate component code every request node module file persistent object heap plugins repeatedly applied one vue thus using memory even removed leakage still happen consider plugin maintain objects assign constructor said recommendation maintaining installedplugins wo nt use much memory used correctly nt apply plugin dynamically use plugin entry point consider using", "d": "8/2017"}, {"body": "herringtondarkholme thanks advice demo may bit confuse demo say reproduce problem real problem case runinnewcontext true even using plugins entry point memory leaks long plugins build server bundle vue use node module problem vue official didt say plugins server must defined node module also consider changing runinnewcontext think case memory leak problematic hope vue repair", "d": "8/2017"}, {"body": "see code indeed used release leakage problem sadly runinnewcontext true every new request create new plugin object many copies one plugin functionality different identities imho deprecate", "d": "8/2017"}, {"body": "\u8bf7\u9075\u5b88 issue", "d": "8/2017"}, {"body": "place reporting element issues please write online demo issue posva please close one", "d": "8/2017"}, {"body": "tests difference browser running unfortunately running chrome flakiness related launcher eg switch window launching test terminal launched chrome considered background mode throttles animations thus causing transitionanimation tests fail cases default stable used reference", "d": "8/2017"}, {"body": "unfortunately vue using content template data stored dom element mounting vue instance gone vue uses html string compile render function need initialise jquery plugins event make sure kept", "d": "8/2017"}, {"body": "sorry nt really understand problem vue ecosystem simply provides libraries distributed npm packages default workflow cli templates bundling code distribution want avoid transpiling babel configuration question want use modules directly browser generic workflow question framework agnostic reported", "d": "8/2017"}, {"body": "record provide esm build actually default export npm package documented well go ahead try interpret think really asking really clea transform vue files modules without bundled webpack browserify use build process answer would wwwgithubcomvuejsrolluppluginvue part anyway issue closed nothing main repository want propose additional documentation please wwwgithubcomvuejsvuejsorg questions template open issue template repository already mentioned asked couple places without luck understand frustration stuck repository wrong place ask specific question bump thread forum find quickly surely continue discussion", "d": "8/2017"}, {"body": "sorry nt really understand problem want able use vue transforming vue files transpiling bundling removes modules want vue cli without configuring webpack babel vue ecosystem simply provides libraries distributed npm packages default workflow cli templates bundling code distribution want use webpack babel least directly want vue cli options use webpack babel except vue transformations want avoid transpiling babel configuration question want use modules directly browser generic workflow question framework agnostic reported think asking something unreasonable admit ignorant details vue files eventually converted vanilla htmlcssjs want simple solution use modern browser chrome safari canary native modules full support need unnecessary workflow", "d": "8/2017"}, {"body": "transform vue files modules without bundled webpack browserify use build process yup bump thread heres url", "d": "8/2017"}, {"body": "imo bug reason works like expected custom components vue add runtime code compile time custom components result vue using retrieve selected value like find behaviors use case use computed value get set could trick", "d": "8/2017"}, {"body": "indeed expected behaviour try set html element object convert string actually setting value jkzing proposed computed property good way go", "d": "8/2017"}, {"body": "jkzing thanks prompt reply workaround trick perspective new user vuejs confusing read documentation try apply component work expected architecturally understand decision made totally understand explanation posva original assumption first ran issue reading section doc convinced correct found bug believe interface framework consistent however wrong right interface may behavior work outside components great seeing behavior inside component confusing least casual user beginner", "d": "8/2017"}, {"body": "well work custom select component correctly implemented point one using using", "d": "8/2017"}, {"body": "easily using functional component demo", "d": "8/2017"}, {"body": "use", "d": "8/2017"}, {"body": "thanks lot", "d": "8/2017"}, {"body": "took look jsfiddle version vue structure async component faulty component seems work expected using one child want foo bar tablerows ca nt get work multiple childs get tablerows", "d": "8/2017"}, {"body": "nt something could js hooks transitions maybe inside even", "d": "8/2017"}, {"body": "indeed using hook transition allows control since probably always related animations transition getting access element removed dom using transition looks like right way go may worth adding sake consistency nt forget add transition", "d": "8/2017"}, {"body": "posva jsnanigans thanks solved problem", "d": "8/2017"}, {"body": "believe problem vue detect change children properties updated explicitly used template solution would recreate whole object changing one style force update easily done spread operator instead setting new background color like like keep everything overwrite background propery working example", "d": "8/2017"}, {"body": "jsnanigans think analysis right workaround would probably work nt necessary vue pick react", "d": "8/2017"}, {"body": "linusborg suggestions fix interested cleanest way get work thanks alex", "d": "8/2017"}, {"body": "fixed", "d": "8/2017"}, {"body": "test right using listener yields result probably something wrong ie messing", "d": "8/2017"}, {"body": "nt know sure going source could cause definitely listener nt use instead use works fine test ckittelmann imagine using barcode scanner need listen keyup event nt need twoway databinding might solution", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "try compare ecosystem first lol", "d": "8/2017"}, {"body": "believe moon needs compare vue way around obvious reasons", "d": "8/2017"}, {"body": "please move vuejsvuejsorg nt know anyone team knows moon enough make comparison much like idea moon nt think used enough add entry page comparing every possible framework rather compare people might choosing use scenario personal opinion moon vue preact react expect see comparison moon github website", "d": "8/2017"}, {"body": "use otherwise vue reuse component instance efficiency", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi nt vnode returned vue interpolation string number plain object use toggle showing text element", "d": "8/2017"}, {"body": "closing since expected behaviour", "d": "8/2017"}, {"body": "case op wants combine dynamic render function template authoring one reassign field manually call", "d": "8/2017"}, {"body": "found correct project", "d": "8/2017"}, {"body": "basically impossible modifiers allows valid expression looks like nt understand modifier please check documentation questions please use official chat forum ask questions", "d": "8/2017"}, {"body": "also far see docs functionality removed migration", "d": "8/2017"}, {"body": "yes modifier removed reintroduced agaion later although different scope mechanic", "d": "8/2017"}, {"body": "sure completely understanding situation provide small example issue facing thanks", "d": "8/2017"}, {"body": "hmm many problems moment implement syntax currently possible note spaces possibles would common source error want avoid people want use events readability could use characters like though realistic version current syntax would nt work one arg directives would lead modiers object put nutshell syntax like could possible new syntax people need learn replace something already feasible personally think second version straightforward easier read imo pass think worth listening others opinions", "d": "8/2017"}, {"body": "spaces possible limitation parser html perhaps former case could possible modify parser accepts spaces particular case really like version since really hard read looks like events perhaps character visible think would prefer character since unlikely used custom event name whereas could likely could possible new syntax people need learn replace something already feasible indeed already possible verbose less legible opinion solution would bit like using instead anyway thanks taking time review", "d": "8/2017"}, {"body": "posible", "d": "8/2017"}, {"body": "would somehow inverse current order know sure reversed use multiple callbacks way go likely confuse users", "d": "8/2017"}, {"body": "syntax mentioned possible brackets let users know kind event handling inverse think syntax clearer since posva said spaces possible attributes part nt put events modifiers value part one function call brackets something like users know difference", "d": "8/2017"}, {"body": "would totally different syntax could add events single attribute like sure realistic since might conflicts normal syntax think lot readable grasp adding extremely long attribute", "d": "8/2017"}, {"body": "seems topic people passionate great really creative ideas tackle also great however personally every syntax proposal far still seems complicated abstract far away html amp js great save keystrokes get rid repetition cost easy grok syntax generally increasingly opposed new syntax least nt bring new features opinion api surface big enough would rather see get working modifiers would trivial write helper method like keep listener definitions templates", "d": "8/2017"}, {"body": "good point linusborg think extending directive accept array objects like one passed previous comment think quite nice listener definitions templates", "d": "8/2017"}, {"body": "agree linusborg syntax simplier realistic", "d": "8/2017"}, {"body": "sure follow linusborg syntax means multiple events would something like case problem today lot duplication advantage go point without repetition think taking listener template prevent get full picture going looking listener defined template others elsewhere seems optimal long attribute notation would shorthand already exists prefer use one line per event duplicate handler name fine handler definition long use nonshorthand definition format guess events calls handler could perhaps divide template multiple lines", "d": "8/2017"}, {"body": "yes saying vbind syntax showed working currently normal events nt native modifiers trivial write helper function like one showed creates object vbind would mean nt introduce new template syntax instead solve lines js", "d": "8/2017"}, {"body": "seems doable user land let assume making regular http requests restlike api make smart components global mixin looks given key component time makes request simply adds request array attaches array ssrcontext simply promiseall done moving graphql assuming using vueapollo seems already supports something like check docs", "d": "8/2017"}, {"body": "sideeffect fixed", "d": "8/2017"}, {"body": "unless misunderstand something possible basically js function return b function b return moment call enter infinite loop even computation nt directly depend computed property eg statement computed property know changes usually less expensive recompute top two computed properties depend looks weird interested factual case leads situation summarised direct possible", "d": "8/2017"}, {"body": "thank hope make request bit clearer current version vue tries something like infinite loop javascript function return name othername b name function b return name b othername name hope vue become bit smarter hood javascript var name gt othername gt bname var b name gt b othername gt aname following case leads infinite loop much simplified look calculation javascript new vue data initialcourse imported via ajax elsewhere initialclasses example values also included via ajax nrofstudents properties class nrofstudents properties class computed course function var course clone thisinitialcourse coursenrofstudents sumby thisclasses nrofstudents lt return course classes function var classes thisinitialclassesmap clone var ifactor classes nrofstudents thiscoursenrofstudents lt example values result get work used following workaround javascript new vue data initialcourse imported via ajax elsewhere initialclasses example values also included via ajax nrofstudents properties class nrofstudents properties class computed course function var course clone thisinitialcourse return course coursenrofstudents function return sumby thisclasses nrofstudents classes function var classes thisinitialclassesmap clone var ifactor classes nrofstudents thiscoursenrofstudents", "d": "8/2017"}, {"body": "see thanks clarification makes sense create intermediary computed property prevent infinite loop imagine also aggregate one computed property extract two computed properties", "d": "8/2017"}, {"body": "thank aggregation extraction interesting suggestion take suggested solution changing dependency tracked vue much work doable use resources something since leave issue closed asking think technically possible probably missing trying suggest would make things much easier intermediate calculations needed whatever reason think vue amazing terrific job thank time leave", "d": "8/2017"}, {"body": "html nt allow selfclosing tags", "d": "8/2017"}, {"body": "linusborg modified still error see", "d": "8/2017"}, {"body": "hm superweird works normally idea could except elements appear belong hardly related", "d": "8/2017"}, {"body": "okay found vuejs file original vuejs file someone changed file note contains real file contains expected nice try joke someone find slap p sidenote would suggest use file could mailicious code", "d": "8/2017"}, {"body": "someone find slap p nt someone girlfriend", "d": "8/2017"}, {"body": "linusborg thank much checked svn record really tell", "d": "8/2017"}, {"body": "vue pre treat prop local data property child component direct use data whatever want worries change father component data child would either receive updates prop parent anymore lose local changes receives updates parent reason copy local data property intend mutate value need copy work independently updates come parent", "d": "8/2017"}, {"body": "receive updates prop parent anymore yes know parent data changed child need update prop immediately think achieve feature frame level user write watch computed props like fact code appears app components however works auto complated vue frame lose local changes receives updates parent one component unlikely two functions update prop immediately amp amp save current local data whatever child component broadly separated two categories readonly operable readonly component prop changes ok operable component suppose saving child component current data necessary need like code add watch prop data changed save current local data whatever want vue user want write code less application scenarios component need local data prop edit directly worries change parent component data linusborg", "d": "8/2017"}, {"body": "\u90fd\u7528 ts \u4e86\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528 script \u5f15\u5165 anyway bug", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "actually could already done custom prop validator case", "d": "8/2017"}, {"body": "jkzing would absolutely work usecase creating component use case interested however using components vendor code vendor component checks string type nothing manually call object little janky two good reasons vendor package check type want use methods type prototype like parent prototype methods available wrapper objects nt issue want use argument type printing string iterating array etc neither usecases broken allowing users pass wrapper objects inherent value strictly checking type literals checking something strictly string gains nothing checking something properties string think akin failing test user provides extends", "d": "8/2017"}, {"body": "rather argue mixing primitive values wrapper objects code smell javascript eg supporting checking api means vue implicitly indirectly encourages code smell consider vendor code returns two wrapper objects underlying primitive value vue treat two objects different case primitive value users libraries explicitly convert wrapper primitive value cast tostring", "d": "8/2017"}, {"body": "could give example situation example would apply hard time understanding situation could pass two wrapper objects single prop nt see issue far code smell believe code smell indication something might wrong guarantee something wrong nt buy argument allowing people use language feature like wrappers vue somehow endorsing encouraging also nt buy wrappers moral evil framework like vue must take stand language feature good bad reasons use decide design framework prevent people using wrappers badly also prevent people using well think programmers trusted", "d": "8/2017"}, {"body": "consider route updated value say code trigger rerender object value also allows wrapper object users check prop primitive using use validator current api", "d": "8/2017"}, {"body": "understand saying would good seems like one hand switching instanceof run risk developer writing bad code triggers unnecessary renders seems passing object needlessly resets value unnecessarily would always cause rerender string typed prop onus developer object case deal issues hand prevent developers using wrappers code even best solution nt apply code also large commonly used libraries like lodash uses wrappers commonly used method obvious case partly selfishly also principle prefer scenario gives developers freedom use wrappers generally whatever language feature fits problem best also saddles responsibility dealing fallout edgecases great power comes great responsibility like said think developers handle responsibility think adding feature right move also understand open source opinion one matters leave community decide thanks fun discussion", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "already srcplatformsweex", "d": "8/2017"}, {"body": "files references weex also high level diagram read understand framework interested contribute evan notifications githubcom sent friday august vuejsvue cc sharma rahul author subject vuejsvue weex code branch main vue code closed receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "see", "d": "8/2017"}, {"body": "guess ios simply listens event hood possible case voice preventing events firing properly someone try make vanilla js repro would help", "d": "8/2017"}, {"body": "reconstructed vanilla js using event listeners issue identical issue see vue breaks voiceover codepen vanilla stars input using makes work scenarios though codepen vanilla stars change guys whether like care circumventing kind issue vue using vue wanted circumvent could definitely think worth ticket apple though make one later today", "d": "8/2017"}, {"body": "unfortunately nt think obvious way work around vue core use force listen events instead though", "d": "8/2017"}, {"body": "aminimalanimal easy way fixing would replace way downside fact event trigger followed one may lead collisions complicated scenarios solution somewhat better using listens events may want everytime", "d": "8/2017"}, {"body": "thanks help workaround good know going hood certainly makes update andreiglingeanu mentioned nice also event handling ui state updates immediately user adjusting went using usual adding codepen vuetiful stars workaround filed ticket apple link apple nt make issues publicly viewable", "d": "8/2017"}, {"body": "aminimalanimal cool please link login see feedback one side coffeescript thing looks strange though nt touched quite time already", "d": "8/2017"}, {"body": "already declare function data computed recreate function template renders say recommended way functions floating template much js template unlikely noticeable negative performance impact unfortunately adding check every prop everywhere may actually noticeable tell misunderstood something since already easily achievable prefer introduce new condition check could lead slower performance", "d": "8/2017"}, {"body": "correct easily achievable however throwing arrow function template often matter characters convenient developers may realize performance impact reason use vue small learning curve large ease use regardless understand", "d": "8/2017"}, {"body": "fyi also technically correct two functions may well string content declared different scopes invoking would result different results probably uncommon still possible", "d": "8/2017"}, {"body": "great point feel like documentation warn using anonymous functions way performance hazard temptation real arrow functions compact", "d": "8/2017"}, {"body": "would even possible generate warning development build vue trivial use tostring determine function anonymous", "d": "8/2017"}, {"body": "\u4ece\u6570\u636e\u7ed3\u6784\u5c42\u9762\u53bb\u601d\u8003\u5427", "d": "8/2017"}, {"body": "expected behaviour simply supported", "d": "8/2017"}, {"body": "may interested edit suggest ask real problem forum discord server sure come way help", "d": "8/2017"}, {"body": "posva tried sure anything changed changing although docs seems pretty much without using function seems popular workaround creating child component treat root component throwing children sort looks like looking thinking root instance different component instances essentially component guess main use see avoiding duplication php code declare prop multiple places components putting actual value root children use root prop value declared say want change code setting prop value currently need change components new code whereas pass prop root one place change", "d": "8/2017"}, {"body": "looking thinking root instance different component instances essentially component props passing data form parent component child component main instance root component parent component html attributes element mount props hence making work want would require extra code vue core act mount element kind parent component pass attribute values props would advise go main child component really established pattern", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "actually browseros firing event inputs meta key pressed try using try releasing enter without meta key pressed", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "parse error vueloader please open issue well template compiler code resides repo maybe ok", "d": "8/2017"}, {"body": "hey reviewing code think comes vuetemplatecompiler vuetemplatecompiler built vuesrc compiler open issue", "d": "8/2017"}, {"body": "add backslash slash escape", "d": "8/2017"}, {"body": "javoski works obviously parse bugsolve problem uglily found bug happenedif time give pr", "d": "8/2017"}, {"body": "actually default html parser maybe browsers interpret within javascript string end script tag nt think vue", "d": "8/2017"}, {"body": "jakovski right part html spec nt parse javascript inside looks expected hccde check astexplorer", "d": "8/2017"}, {"body": "javoski nickmessing true inline script html need escaped browsers nt know js string vue exact vuetemplate distinguish js string tag name vue file one script section meet string nt take close tag immediately look behind look ahead find another look behind utill find last one correct close tagas mentioned vue vue template solve problem elegantlyit shoud better browsers ca nt may many inline script sections like", "d": "8/2017"}, {"body": "generated javascript codes eventually embedded html files ok codes separated js file depends building process nt think good idea", "d": "8/2017"}, {"body": "javoski thus usual situation considering code may embedded html files right", "d": "8/2017"}, {"body": "vendor prefixed sniffing even unreliable likely get removedchangeddeprecated future versions browsers", "d": "8/2017"}, {"body": "interesting thought feel unwarranted web platform prioritises backwards compatibility ie amp detections locked never change never release new versions browsers chrome detection would break lot things removed github search reveals results existed safari chrome amp firefox existence deemed important edge also implemented compatibility reasons github search reveals hits equivalents many millions results assume autoprefixed ios detection less well known also results github worried touchscreen mac released would also exist safari could also check absence existed desktop safari since need also add leaves edge list prefixed properties existed since edge launched nt changed perhaps testing would better since native os accessibility feature fyi supported css features mention obtained via opening browser comparing output since january", "d": "8/2017"}, {"body": "personally think opting esoteric techniques platform sniffing opens whole new worms honestly sure actually better worth unless concrete examples current sniffing strategies leading unintended behaviors certain devices intend keep", "d": "8/2017"}, {"body": "unless concrete examples current sniffing strategies leading unintended behaviors certain devices intend keep tested firefox android nt behaving incorrectly conditions codebase also android tablet pretends ios gave test case could see happens", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "catch errors thrown asynchronously similar responsible anything thrown within promise chain", "d": "8/2017"}, {"body": "guess dirty hack would something like", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "\u8bd5\u4e86\u4e0b \u5b9a\u4e49\u6210 \u666e\u901a\u6570\u7ec4\u53ef\u4ee5", "d": "8/2017"}, {"body": "unfortunately would breaking change probably lot component packages expose sync props compiled vueloader using packages new version vue contains changer would break packages would emit vue app would listen", "d": "8/2017"}, {"body": "agree linusborg revisit", "d": "8/2017"}, {"body": "personally find consistent reference props camelcase javascript said changed going breaking", "d": "8/2017"}, {"body": "\u7528 css \u8bbe\u7f6e\u7684\u89c4\u5219\u7528 style \u672c\u6765\u5c31\u53d6\u4e0d\u5230 \u8fd9\u8ddf vue", "d": "8/2017"}, {"body": "remove prop name hellovue component work", "d": "8/2017"}, {"body": "posva hierarchy props prop", "d": "8/2017"}, {"body": "issue sorry confusion may cause", "d": "8/2017"}, {"body": "oh right let move vuerouter", "d": "8/2017"}, {"body": "hi like would javascript need wrap quotes valid js identifier demo", "d": "8/2017"}, {"body": "doh thank", "d": "8/2017"}, {"body": "actually already achievable userland probably keep way components functions return promises handle fetching template inside promise working example jsfiddle using promises", "d": "8/2017"}, {"body": "thank thisthe jsfiddle provided still fetches inline html tag html file looking box solution like angularjs also work application", "d": "8/2017"}, {"body": "need use axios similar lib fetch file ask questions forum discord server", "d": "8/2017"}, {"body": "jsfiddle provided still fetches inline html tag html file fiddle fake fetch ca nt put html file jsfiddle real project absolutely make request server retrieve html file example fetch api easy seen posva example posva said use anything want retrieve template content looking box solution like angularjs works outofthebox nt need additional library vue also way powerful angularjs since limited template fetch options entire component definition asynchronous way also work application reason nt work", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "boringer unfortunately reactive plain javascript objects arrays primitive types supported want find way around limitation try asking chat forum github issues bugs feature requests expected", "d": "8/2017"}, {"body": "note props readonly change value declared example nt happens everytime template renders object reinitialized change ignored need save object", "d": "8/2017"}, {"body": "works get warning vue setting properties data represent props common usecase maybe nt maybe warning reevaluated", "d": "8/2017"}, {"body": "root", "d": "8/2017"}, {"body": "hoc rendering includes everything slots please doublecheck functional component slots api", "d": "8/2017"}, {"body": "probably correctly express idea want slots saved using hoc component idea", "d": "8/2017"}, {"body": "simply mistake imports import syntax wrong exports options object default export usual import statement notice misssing brackets nt use defualt export bracket notation correct case", "d": "8/2017"}, {"body": "doh thanks linusborg going go bury", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "\u5728 san martin morote notifications githubcom closed receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "better handle bug reports feature requests", "d": "8/2017"}, {"body": "ok thx \u5728 san martin morote notifications githubcom better handle bug reports feature requests receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "proposed many times past please check", "d": "8/2017"}, {"body": "sqal said dup", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "please want report bug provide reproduction nt ask us also able use template make even easier", "d": "8/2017"}, {"body": "ok anyway thanks", "d": "8/2017"}, {"body": "flow used dev dependency flow syntax stripped built files end users vue eg consuming npm nothing related flow distributed code nt make affected flow license way concerning case would probably someone forking vue thus using source code directly even flow code governed licensepatent grant distributed way either doubt mere usage flow syntax subject license think valid concern moment logistic costs migrating blocking factor maybe someone team familiar flowts evaluate much effort entails cc herringtondarkholme ktsn octref", "d": "8/2017"}, {"body": "makes sense interesting jsx creative commons attribution international license flow nt really clear vuejs end migrating typescript also help effort", "d": "8/2017"}, {"body": "considering fact typescript team members interested vue would vote migrating typescript however use flow daytoday basics one great feature miss typescript probably research flow use return type function ts", "d": "8/2017"}, {"body": "hi think clear reasoning let explain technical issue migrating typescript doable requires many changes use option ts ts nt accept type annotation js flow means need migrate one single shot including building system changes ts flow still many subtle syntax differences differences small ubiquitous eg flow ts potential issues might tsflow checking rules eg flow allows ts nt know much code impacted trying migrate", "d": "8/2017"}, {"body": "created issue flow say facebook bsdpatents license syntax typescript flow similar cases typescript allows strict typescript interested vue perhaps vue request features flow nickmessing mentioned", "d": "8/2017"}, {"body": "features could find already requested issues looks like typescript team really busy need clear issues backlog", "d": "8/2017"}, {"body": "forgive random outside opinion would really worth seems like benefit would potential licensing problem nt really affect anything outside vue", "d": "8/2017"}, {"body": "herringtondarkholme said obviously much human effort need done big code freeze probably nt much human effort available still open discussion", "d": "8/2017"}, {"body": "end users vue eg consuming npm nothing related flow distributed code actually whole folder distributed npm package however sure could treated something flowrelated end user", "d": "8/2017"}, {"body": "would suprised find facebook patent type annotation syntax considering done since actively using neither flow vue source files using anything flowrelated anyway", "d": "8/2017"}, {"body": "linusborg flow license bsd patents react license granted hereunder terminate automatically without notice subsidiaries corporate affiliates agents initiate directly indirectly take direct financial interest patent assertion facebook subsidiaries corporate affiliates ii party patent assertion arises whole part software technology product service facebook subsidiaries corporate affiliates iii party relating software notwithstanding foregoing facebook subsidiaries corporate affiliates files lawsuit alleging patent infringement first instance respond filing patent infringement counterclaim lawsuit party unrelated software license granted hereunder terminate section paragraph due counterclaim opinion means proprietary product develop facebook come develop thing without fear lawsuit file suit using flow react bsdpatent licensed facebook software github license use software terminates invalidating proprietary claims may tl dr yes think using flow syntax alone impact vuejs legal standpoint lawyer opinion", "d": "8/2017"}, {"body": "file suit using flow react bsdpatent licensed facebook software github license use software terminates invalidating proprietary claims may using flow nothing vue code use contains hint flow fact vue maintainers used flow build process create files hadhave licence flow concern using flow patented technologies one could find applications far every interpretation would crazy would mean people use patented technology could get legal problems product use build patents legal crazy true stop writing software alltogether sued anything everything second would mean someone held patent something used webpack would stop using already built files built webpack still legal", "d": "8/2017"}, {"body": "linusborg may right like said lawyer expert law think licensing goes general nature open source dumb types threads considerations even need exist", "d": "8/2017"}, {"body": "say decide convert would happy help lot successpractice lately converting projects helping much eslint typescript compatibility work would lot reasons including patent issues understand majoritycore team", "d": "8/2017"}, {"body": "vue codebase rewriting ts full ts support like angular", "d": "8/2017"}, {"body": "vue typescript take learnings polymer", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "issues debug", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow doc may help", "d": "8/2017"}, {"body": "sure actually possible guess could move generated render function statics value true problem behind fr nt clear nt trying achieve", "d": "8/2017"}, {"body": "yes essentially trying achieve seems like one extra unnecessary listener since async data case never false case ran providing nice semantic observable status messages suppose could use following template render status seems lot simpler also acknowledge rendering trivial another example less trivial streaming updating list objects finalized nt want keep updating", "d": "8/2017"}, {"body": "data never updates probably nt need optimise anything else nt think intent clear btw would without read condition met render basically sure much extra work needed achieve keep mind nt want add syntax sugar vue moment want keep lib small may revisit future though moment already achieve using ifelse proly pass", "d": "8/2017"}, {"body": "perhaps modifier could used seems less ambiguous although ca nt speak dev effort thanks consideration", "d": "8/2017"}, {"body": "hi vonce used static content doc tell compiler nt add responsive functionalities save cpu time otherwise content responsive methods could used save kind cpu time use control done never change component never invokes responsive code watcher performance lost code running fastest code", "d": "8/2017"}, {"body": "would nt conflict default slot", "d": "8/2017"}, {"body": "rayrutjes slots make sense template property render function right", "d": "8/2017"}, {"body": "rayrutjes", "d": "8/2017"}, {"body": "conflicts default api importantly template behavior consistent inspecting parent template alone behavior vary based definition child component intentional design decision beginning going change", "d": "8/2017"}, {"body": "seems edge case related tracked", "d": "8/2017"}, {"body": "thanks looking jkzing closing dup", "d": "8/2017"}, {"body": "easily without changing api javascript quick amp dirty ajaxplugin toastplugin loadingplugin alertplugin foreach vueuse vue safer ajaxplugin toastplugin loadingplugin alertplugin foreach x gt vueuse x see arrayprototypeforeach", "d": "8/2017"}, {"body": "sirlancelot oh good idea thank", "d": "8/2017"}, {"body": "ca nt clone every must unique", "d": "8/2017"}, {"body": "sirlancelot really problem jjvainav vnodes representing child components different format vnodes representing elements example ca nt simply reuse use depending weither tag registered globally nt component template nt come parent ca nt inject child component without component using bug usage question please use forum chat", "d": "8/2017"}, {"body": "injected values resolved first actually provide values based", "d": "8/2017"}, {"body": "rayrutjes sorry ca nt understand please explain detail", "d": "8/2017"}, {"body": "provided values able rely data data able rely injected values order must inject state provide", "d": "8/2017"}, {"body": "rayrutjes oh see function use state", "d": "8/2017"}, {"body": "js import util util const parent new vue provide util computedlike util mounted thisutilsamecodeforuse const child new vue parent parent inject util mounted thisutilsamecodeforuse without watch nice", "d": "8/2017"}, {"body": "paulopmx change class rerender new class new value remove make work use instead", "d": "8/2017"}, {"body": "reseting input value blank resets input value bound prop always empty", "d": "8/2017"}, {"body": "nickmessing thanks reply actually simplified example actually bound defined prop parent defined", "d": "8/2017"}, {"body": "paulopmx option effect components nt effect root app nothing works", "d": "8/2017"}, {"body": "paulopmx check defined add every render reset value see console", "d": "8/2017"}, {"body": "updated code works yeah looks like right must miss something bindings", "d": "8/2017"}, {"body": "\u8be5\u7c7b\u95ee\u9898\u8bf7\u5230 \u6216", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "\u8c22\u8c22", "d": "8/2017"}, {"body": "elements inside keyed", "d": "8/2017"}, {"body": "checkbox checkbox", "d": "8/2017"}, {"body": "\u8c22\u8c22\u5927\u5bb6", "d": "8/2017"}, {"body": "use attribute", "d": "8/2017"}, {"body": "thanks sorry trouble start javascript vue django must say fun takes time understand details", "d": "8/2017"}, {"body": "worries recommend check discord server get fast feedback", "d": "8/2017"}, {"body": "dup", "d": "8/2017"}, {"body": "thanks proposal right lean adding syntax sugar reason one exists inputs able use components especially ui components makes code readable adding new syntax something already feasible short nt direction want go however think improve docs happily take pr", "d": "8/2017"}, {"body": "hello repro actually reproduce issue neither provided data trying assign tried infer data description unable reproduce issue closing likely issue somewhere else able provide working repro feel free open new issue", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nt defined look console better hint", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "want help project ask questions forum discord server gitter stackoverflow reporting bug need reproduction please provide one", "d": "8/2017"}, {"body": "ok ask thanks", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "nice neat considering data attributes temporary variables outside", "d": "8/2017"}, {"body": "sure understand need looking example wrap component handles drag events vue export default methods draghandler event debugger directives supposed super simple dom abstractions need maintain state invocations use dom data attributes need handle something complicated state like functions likely better using proper component directives vue used stateful removed favor using proper components much overlap", "d": "8/2017"}, {"body": "goto solution save state html element sirlancelot said want keep directives simple limit responsibility become complex using component way go", "d": "8/2017"}, {"body": "adding posva said directive ability vue deliberately removed essentially custom directives vue similar components abilities made unclear use vue decided make destinction clear need state generally use component directive directives responsibilities reduced lowlevel dom work higher level woirk done components need state directive arises edge case use element store workaround", "d": "8/2017"}, {"body": "want manage semicomplicated state directive could use solution like slippery slope though take care", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "sirlancelot thanks", "d": "8/2017"}, {"body": "property applied sibling nodes case move property wrapper", "d": "8/2017"}, {"body": "tag allowed according html spec stripped automatically browser use template option", "d": "8/2017"}, {"body": "writing two times", "d": "8/2017"}, {"body": "see nt believe showed colleague submitted bug nt see amp amp amp checking make sure copypasta nt happen still effect happening project maybe doubleescaping sure enough double escaping back end", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "dup", "d": "8/2017"}, {"body": "repro link nt contain", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "would kindly tell us vmodel code found source website wo nt search site nt even form", "d": "8/2017"}, {"body": "sorry false alarm", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "closing instead opening discover really affect vue", "d": "8/2017"}, {"body": "looks like bug thanks reporting looks like introduced looks like problem happens patch vnodes though edit looks like false vnode patch making call mount disappearing node tree", "d": "8/2017"}, {"body": "fixed note changing element wrapping slots element considered replaced thus slot content including components destroyed recreated unfortunately vdom patching works unlikely change", "d": "8/2017"}, {"body": "sounds good thanks ballpark date next release", "d": "8/2017"}, {"body": "two mistakes fiddle shortland shoud use unique key instead using index directly see fixed", "d": "8/2017"}, {"body": "hi glad hear vue used microsoft production thanks reporting meanwhile track progress improved typing main blocker blocking change declaration need transition plan introduce new change also help transition inferring optional generic type parameter make compatible api without losing precise inference let first close issue concentrate discussion pull request thanks", "d": "8/2017"}, {"body": "second one sounds rather like mistake part b bug could provide small reproduction problem appears sidenote aware refs vfor end array", "d": "8/2017"}, {"body": "nickmessing think solved instead adding yet another warning core lib would bug true would remove label ask op suggest rule repo ok", "d": "8/2017"}, {"body": "linusborg agree", "d": "8/2017"}, {"body": "disagree problem refs might specified programatically case warning would issued even though would save user lot trouble possibilities linter would warn even though nt two cases mutually exclusive linter nt enough information reliably determine duplicate references runtime enough information", "d": "8/2017"}, {"body": "incidentally try come simple test case original second example next week", "d": "8/2017"}, {"body": "concede linter catch dynamic refs many cases would implement warning mechanism however simple check nt enough either totally valid overwrite refs would somehow register ref assignments run render function check ne assignment assigned privously render run think feasable", "d": "8/2017"}, {"body": "linusborg one easy way need wait drop ie support sweatsmile", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks use jsfiddle starting point", "d": "8/2017"}, {"body": "lastest chrome works computer doesnot work maybe jsfiddle alse work donot know describe want know someone encounter write jsfiddle", "d": "8/2017"}, {"body": "maybe ask forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "guess relevant vue input software please try remove vue dependency see still happen", "d": "8/2017"}, {"body": "maybe check somehow help ddcouples possible provide minimized demo contains necessary code reproduce problem without nothing else thanks", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "sounds reasonable especially vue automatically prefix template identifiers", "d": "8/2017"}, {"body": "actually sometimes use demonstration purposes people coming react background nt think prohibited since works perfectly fine rather part recommended instead forbidden ps though herringtondarkholme think reasonable remove prohibited keywords make sense support expression ex", "d": "8/2017"}, {"body": "nickmessing nt think allow since promote inappropriate logic template like example give would think probably belong method vm", "d": "8/2017"}, {"body": "nt think prohibited since works perfectly fine ah see nt realize prefix works fine", "d": "8/2017"}, {"body": "nt akryum wrote similar issue rely find phone", "d": "8/2017"}, {"body": "nvmd something different textareainput nt working either different components input behaving instead treating input marked regression still nt checked introduced fix something else", "d": "8/2017"}, {"body": "fix issue", "d": "8/2017"}, {"body": "mosinve nt", "d": "8/2017"}, {"body": "seems commit breaked", "d": "8/2017"}, {"body": "maybe could check whether real custome component apply gencomponentmodel method posva could nice first contribution try fix weekend case someone wants try", "d": "8/2017"}, {"body": "defcc agree points", "d": "8/2017"}, {"body": "riophae achieve using computed prop like", "d": "8/2017"}, {"body": "define props based props directly default value order props resolved decide default value however object order keys thus making props value depend lead unexpected behaviour instead use computed property add property hold actual variable change hook combine necessary", "d": "8/2017"}, {"body": "yeah computed property solves problem actually possible determine order js var propswithdefaultfunction var propswithdefaultfunctionthatreliesonothers var otherprops var key props var prop props key typeof prop object amp amp typeof propdefault function propdefaultargumentslength propswithdefaultfunctionpush key else propswithdefaultfunctionthatreliesonotherspush key else otherpropspush key first resolve default values otherpropsforeach resolve default values propswithdefaultfunctionforeach last resolve default values propswithdefaultfunctionthatreliesonothersforeach", "d": "8/2017"}, {"body": "riophae relies relies", "d": "8/2017"}, {"body": "nickmessing yeah impossible", "d": "8/2017"}, {"body": "riophae actually possible using calling everything fake objects reasonable limits browser support computed properties approach works great scenarios", "d": "8/2017"}, {"body": "try", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nothing deal vue akryum faster give answer", "d": "8/2017"}, {"body": "related webpack indeed", "d": "8/2017"}, {"body": "akryum works posva asked thought alias work style tag", "d": "8/2017"}, {"body": "vivekroy repository vuejs library webpack template problem webpack vue find template repo", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "specifying option overwrite whatever template dom property advanced syntax needs promise resolves component", "d": "8/2017"}, {"body": "style invalid change color red work need use object syntax", "d": "8/2017"}, {"body": "also tested using color red still work updated fiddle", "d": "8/2017"}, {"body": "problem initial value setting color height using string syntax nt work want object syntax", "d": "8/2017"}, {"body": "fixes fiddle actual project get back information thanks", "d": "8/2017"}, {"body": "correct problem invalid string syntax forgotten standard browser behavior modify style style set invalid value remembered since relying behavior css stylesheets accomplish graceful degradation many cases may worthwhile development build vue validate style actually set warn nt least object notation used since graceful degradation nt possible anyway using object notation relatively easy mistake make hard debug forgot golden rule forgot understand considered outside scope vue", "d": "8/2017"}, {"body": "note understand would nt possible scoped slots however optimization might help even scoped slots would trigger rerender child component rerender parent component generated delta actual slot content", "d": "8/2017"}, {"body": "well think would possible implement something would diff slot contents updateiung components ignoring difficulties implementing moment ca nt say much right would come performance tradeoff proposal would save rendering virtualdom child nothing slot changed everytime diffing slot content find changes slot content would diffing slot content twice render function child run new vdom diffed essentially means children big templates small slot contents would run better children small templates big slots woudl run worse changes happen sure better also technically child would keep outdated virtualdom content slot nodes parent created fresh nodes rerendered suspect might technical hurdle", "d": "8/2017"}, {"body": "case slot component uses vfor loop apply hundreds repeats case unquestionably faster calculate delta wonder reasonably detected", "d": "8/2017"}, {"body": "wonder reasonably detected hardly compile time runtime would require analysis compilation would derminate template expensive set flag component resolts slot diffing runtime nt cheap components sounds easy measuring expensiveness would tricky considering big impactr temnplate actually expensive small fact statically analyse compilation big arrays render runtime etc pp new api would thinkable set flag manually least theory", "d": "8/2017"}, {"body": "would say either slot used inside loop slot contents smaller template time probably worth test delta particular case would save make rather unintuitive changes structure library used lot developers company", "d": "8/2017"}, {"body": "also calling render function typically much slower performing diff two strings data", "d": "8/2017"}, {"body": "mmh sure want force behaviour flexible allow user specify offset per child css really think want work absolutely positioned said overlap", "d": "8/2017"}, {"body": "assumes guess cause correct nt think happening absolute positioning think ordering flip calculations applying style changes remove three items one go collapse towards location first removed item first fall directly downwards seems flip calculation works correct animation applying absolute positioning works fine long single item removed issue two items removed calculation fails correctly calculate item end position seems make sense absolute positioning applied transitiongroup iterates children seems make changes classesstyles goes items multiple elements removed change affects subsequent items unexpected way previous elements removal already removed flow calculates end position explains issue single removal problem seen multiple items removed would work user expects transition group firstly calculated flip positions removed elements currently stand without yet mutating classesstyles made changes classesstyles elements way elements would animate expected", "d": "8/2017"}, {"body": "nt think happening absolute positioning think ordering flip calculations applying style changes remove three items one go collapse towards location first removed item first fall directly downwards really remove many clicking remove one see behaviour", "d": "8/2017"}, {"body": "ah yes sorry quite right made fiddle test unless would make good feature request something like element removed absolutetransformed position calculated relative parent held leave animation applies nt bug suppose closed", "d": "8/2017"}, {"body": "actually intended said try set value input something impossible value transformed empty string vue consistent aspect set something js like html attributes strings makes sense vue use instead would also breaking change", "d": "8/2017"}, {"body": "working expected change prop value look console happens change th ename parent parent renders passes static value name thus overriding changes solve use data property save current state", "d": "8/2017"}, {"body": "posva thanks use data refer name yes works thanks", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "simple repo using nuxt ssr frameworks eg ream issue pretty convinced vuessr bug", "d": "8/2017"}, {"body": "would help make vanilla vue thanks", "d": "8/2017"}, {"body": "nailed issue replacing html entities rendered output updated example code nt know would necessary since browsers anyway adding rendered opening tag browser understand trigger clientserver dom mismatch warning opened pr remove html entity conversion", "d": "8/2017"}, {"body": "thanks concise repro looks like bug thanks proposing pr", "d": "8/2017"}, {"body": "expected behaviour methods contain arbitrary code cached therefore every time component renders get called inside method change something triggers render method get executed careful enters infinite loop nt precise enough use performancenow get infinite loop look console put nutshell change data used template method called template infinite loop example even though changing content elements changing adjacent element template whole template renders therefore method gets called goes index many workarounds depend use case one could using component ask question forum discord server gitter stackoverflow get personal help", "d": "8/2017"}, {"body": "issue foo change data every time nt rerender occur data changed comparison angular vue angular", "d": "8/2017"}, {"body": "example even though changing content li elements changing adjacent element template whole template renders therefore method foo gets called vfor goes index every call changes displayed adjacently therefore rerenders vfor well template calls", "d": "8/2017"}, {"body": "okay noticed even angular runs infinite digest date replaced performance two questions though angular still faster nt vue avoid list items rerendered endtime changed since nt rely endtime", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "cdn \u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u662f\u4f60\u7535\u8111\u91cc cdn \u9759\u6001\u8d44\u6e90\u7f13\u5b58\u8fc7\u4e86\u6240\u4ee5\u611f\u53d7\u4e0d\u660e\u663e translation issue talking jsfiddle sometimes blocked china keep eye thanks", "d": "8/2017"}, {"body": "\u56fd\u5185\u67d0\u4e9b\u8fd0\u8425\u5546\u7684\u7f51\u7edc\u662f\u4f1a\u6253\u4e0d\u5f00 \u786e\u5b9e\u6bd4\u8f83\u7a33\u5b9a", "d": "8/2017"}, {"body": "looking relation issue well also one location selfexplanatory", "d": "8/2017"}, {"body": "yes definitely warnings referring", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "\u4f60\u7684 repro", "d": "8/2017"}, {"body": "\u8bf7\u597d\u597d\u63d0\u4f9b repro", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi drdaemos maybe use relevant thread jsfiddle good luck", "d": "8/2017"}, {"body": "yep expected plasmatium explains use want pass props root instance rarely case", "d": "8/2017"}, {"body": "yeah thanks accept use guess would helpful add vue warning usage", "d": "8/2017"}, {"body": "would breaking change done instead adding modifier strips tags easily handled computed property utility function", "d": "8/2017"}, {"body": "clarify saying changing default behavior would breaking change guess ideally would nice sanitized default suggestion using modifier sounds great would look like", "d": "8/2017"}, {"body": "hi two cents would seems unnecessary vue maintain html sanitizer given libraries already well argue appropriate places perform sanitization also allow better developer control ideas sanitize html persisting database returning json response sanitize html vue computed property would useful unable modify wordpress backend might try calling library property also worth mentioning docs appropriate warnings guide reference sections", "d": "8/2017"}, {"body": "rpkilby sanitizehtml seems great work use case still think would nice vue automatically added security measure absolutely hear concerns thanks input link", "d": "8/2017"}, {"body": "nt think good idea vue add builtin htmlsanitizer either introducing new config eg compromised way", "d": "8/2017"}, {"body": "agree rpkilby shipping builtin sanitizer would add extra bundle weight rare use case use cases trusted content also trivial add setting", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "sorry provide minimal jsfiddle github repository ssr case find read source code see vueserverrenderer source code may understand say save data attribute make cache get bigger bigger vueserverrenderer source code javascript function cached fn var cache objectcreate null return function cachedfn str var hit cache str return hit cache str fn str function escape return sreplace lt gt amp g escapechar var cachedescape cached escape function renderattr key value isbooleanattr key isfalsyattrvalue value return key key else isenumeratedattr key return key isfalsyattrvalue value value false false true else isfalsyattrvalue value return key typeof value string cachedescape value value return", "d": "8/2017"}, {"body": "would get bigger using property", "d": "8/2017"}, {"body": "cachedescape cached attributte value value difference every request", "d": "8/2017"}, {"body": "please develop situation exactly leading leak please maybe naive attributes", "d": "8/2017"}, {"body": "posva issue normal static attributes think leaks eg ids used attribute values cache could eventually contain every single id database use ids database entries attribute values example time users request pages different items server cache would grow grow containing item ids db could potentially happen data db used element attributes might rather need lrucache limited size", "d": "8/2017"}, {"body": "linusborg thinking issue nt clear beginning problem leak never released memory edit hate github longer logs change title", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "hi wormgirl thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow note reproduction link needs minimal app repo note link another website thanks", "d": "8/2017"}, {"body": "problem likely template definition uses template literals nt work ca nt verify right use normal strings instead use babel option fiddle verify please", "d": "8/2017"}, {"body": "yes sir changed normal string worked think use babel orther avoid errors since rely heavily ie customers thanks reply", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "please read documentation expected behaviour nt clone arraysobject wo nt change", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "tab key yet current input element lose focus keyup event tab actually fired next input element last input element behaved differently demo", "d": "8/2017"}, {"body": "bug documentonkeydown works going javoski", "d": "8/2017"}, {"body": "sure really want nt know javascript keyup event works mean maybe use instead close cuz demo worked expected according tests", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow btw reporting bug asking help providing strict minimal augment chances getting help", "d": "8/2017"}, {"body": "thanks reporting fixed", "d": "8/2017"}, {"body": "closing duplicate", "d": "8/2017"}, {"body": "found issue vscode ide problem nature", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow real problem webpack mix config vueloader really bug", "d": "8/2017"}, {"body": "sgehrman use carriage return line feed characters crlf aka new line use web", "d": "8/2017"}, {"body": "note atom users default os default crlf windows change setting lf", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "using also nt work would intuitively expected domdiffing applying change attribute value like one would expect", "d": "8/2017"}, {"body": "thing broken using selfclosing input tag", "d": "8/2017"}, {"body": "fiddle showing works vanilla htmljs raises concern vue dom diffing like claims attribute would end modified value inputted text would remain inside input", "d": "8/2017"}, {"body": "syropian suggested add dummy workaround works intuitive wasteful", "d": "8/2017"}, {"body": "trusktr attribute special expected behaviour without carry around think even", "d": "8/2017"}, {"body": "nickmessing intuitive please fix sort thing work vue works browser sure switching wo nt work case could rerender would whatever browser actually otherwise vue nt dom diffing like one would assume switching work vue make intuitively easy nt framework like vue goal make things easy", "d": "8/2017"}, {"body": "see fact someone telling unituitively use vmodel workaround problem frustrating library issue gets closed library author easily improve library benefit users cost small onetime extra effort library author side library author chooses perhaps author convenience true benefit user could instead leave open suggest pr made much better choice", "d": "8/2017"}, {"body": "trusktr well rerendering diffs indeed let imagine simple scenario step first render dom looks like step add text dom looks like consider describing domprop attr step change vue calculate diff apply result value gets removed intuitive understand virtual dom based rerendering remove new helps replaced see", "d": "8/2017"}, {"body": "example nt really applicable case also mentioned implementation details end users nt need care case simple thing changing type type vice versa optimize dom diffing expected case end users wo nt run unexpected behavior another way put simply change type type using vanilla domjs simple vue vue extension people expect vanilla dom honestly good enough reason make optimization end case similar cases make intuitive possible end users", "d": "8/2017"}, {"body": "updated title remove question mark even hack dom diffing working vue destroying existing element creating whole new one rather modifying attribute really bad destroys interoperability outside code example bootstrap validator stops working reference nolongerexisting element vue supposed incrementally adoptable interoperable outside code fe jquery plugins simply acceptable", "d": "8/2017"}, {"body": "nickmessing vue always domdiffing like claims fiddle work start typing input field see values logged console toggle showhide password vue domdiffing properly would changing attribute input case continue see output console case input console time showhide toggled vue replaces entire element new one broke simple tool lead code leak unused dom memory", "d": "8/2017"}, {"body": "example using react domdiffing works expected", "d": "8/2017"}, {"body": "trusktr indeed makes sense change goes one textlike input another vue never claiming rather vue guarantees keep sync actual dom virtual dom using reactivity system impossible predict going since internal api change time bug since keeping sync actual dom virtual dom defined template probably suboptimal replace whole input switching one textlike another try optimize vue never designed friendly jquery plugins", "d": "8/2017"}, {"body": "impossible predict going since internal api change time true guarantee atomicity proposed regardless implementation attribute supposed change based vue template thing dom change corresponding real attribute suboptimal replace whole input switching one textlike another probably suboptimal ever replace input matter type transition changing type text file dom changes empty string nt think user going try though simply use either needed make choice way would vanilla dom case nt think need replace input element regardless type change happens simply ca nt predict user fair vue make assumptions even unintentional", "d": "8/2017"}, {"body": "fiddle shows events type change think interest tool work existing standardized dom functionality working expectations dom works", "d": "8/2017"}, {"body": "fyi intentional mechanism dealing bindings different bindings toggle say eventvalue bindings generated compile time would different straightforward replace element cases toggling use case considered easy fix", "d": "8/2017"}, {"body": "vue uses underscore prefixes internal methods advised", "d": "8/2017"}, {"body": "prs add warnings check methods names welcome guess yeah nt name methods starting underscore", "d": "8/2017"}, {"body": "nt note docs think unreasonable expect people respect naming strategies methods however understand may simple make change make pr add warnings make notes documentation", "d": "8/2017"}, {"body": "posva believe similar prs existed add warning turned adding warning nt easy vue adds methods one one hard tell word internal", "d": "8/2017"}, {"body": "damn nt think hard case worth pointing docs future versions use prevent right", "d": "8/2017"}, {"body": "posva still unfamiliar vue codebase symbols seem like great way mitigate issue entirely idea though breaking change simply namespace methods something like updating docs pr nt really see good place add note naming methods guide perhaps deserves heading still trying understand codebase rather write guide something nt completely understand", "d": "8/2017"}, {"body": "posva herringtondarkholme justinbeaudry might misunderstanding would possible provide warning perhaps also", "d": "8/2017"}, {"body": "chrisvfritz trying something like locally morning see would work seems instead trying warn collisions specific names warning method names seems best bet warning almost nt seem harsh enough though imo", "d": "8/2017"}, {"body": "chrisvfritz problem library use prefixed method names hide implementation warn based prefix library users undesired warning", "d": "8/2017"}, {"body": "herringtondarkholme prefixed names nt used due possible namespace collisions seems unreasonable find every internal method used warn method conflicts imo either warn every prefixed method name warning namespace methods", "d": "8/2017"}, {"body": "herringtondarkholme agree justinbeaudry case sounds like suggest use underscoreprefixed datumpropcomputedmethod names ca nt guarantee vue wo nt conflict future means plugins could already break moment including patch release think better onetime soft break warning suggests alternate strategy maybe prefix could officially reserved private plugin properties suggested namespace like avoid conflicts plugins use similar strategy even applicationspecific pluginsmixins property registration could display warning", "d": "8/2017"}, {"body": "slight aside private methods specifically taking advantage js scoping might make sense example js export default function myprivatefunc vm", "d": "8/2017"}, {"body": "chrisvfritz agree introducing new naming pattern good enough safely use", "d": "8/2017"}, {"body": "imo either warn every prefixed method name warning namespace methods say warning introducing new naming method convention make lot library creators warnings fill console people using plugins making difficult debug furthermore people come complain create issues nothing vue repository also plugins even vue add methods one one create static list methods names nt used ca nt", "d": "8/2017"}, {"body": "posva even vue add methods one one create static list methods names nt used ca nt unfortunately ca nt create static list private property names might used future maintaining list would pain easily falling sync introducing new naming method convention make lot library creators warnings fill console people using plugins making difficult debug necessarily could start introducing new config eg enabled could throw actual errors stack traces see exactly method defined release could reach biggest plugin authors personally suggesting enable default tests plugin authors trained could include softer warning default eg way anyone still affected see warnings instead scarier errors apps wo nt break even dev unless already broken due real conflict warnings still include stack traces users see exactly problem came obvious name message could even describe possible plugin causing naming conflict people probably using many plugins ca nt narrow even good reading stack traces future could continue used compatibility conventions want establish decided warn component names without dash using standalone build suggestion making right btw thoughts", "d": "8/2017"}, {"body": "looks like huge amount work little benefit think easier answer every issue may arise future little contacting every big plugin author pov note docs best option using front property user must aware recommending using looks like good trade", "d": "8/2017"}, {"body": "reproduced property well updated issue", "d": "8/2017"}, {"body": "posva agree right problem relatively small least far measure since overriding private properties produce difficulttodiagnose errors worse subtle bugs nt even produce error since difficult track report might remain largely invisible problem longer wait something like plugins exist conflicts arise vue pluginsmixins feel like wait bigger problem guaranteed keep growing vue popularity even work point justinbeaudry yes warn toplevel properties data props computed properties methods", "d": "8/2017"}, {"body": "still think pragmatic way document people built plugins work probably got around naming restriction already really think trying solve problem nt exist may happen future new users trying create plugins face issue find thread end fixing couple hours max", "d": "8/2017"}, {"body": "posva sounds like primary concern whether worth effort accurate think work towards eslint rule already done would nt mind writing optional warnings behind config flag devonly feature also would nt add weight production build sound acceptable place start", "d": "8/2017"}, {"body": "chrisvfritz main concern think careful adding warnings impact development experience everybody may help dozen persons sometimes think adding documentation eslint plugins better", "d": "8/2017"}, {"body": "posva impact development experience trying avoid behind config flag would nt affect experience care future compatibility always positive way think hiding important warning behind compatibility flag likely make people angry offering chance take minutes prevent apps breaking future see similar many security issues use ssl even though user credentials probably wo nt stolen eliminating especially ugly scenario despite relatively low likelihood occurrence cases easy fix make entire vue app could break time way would difficult diagnose possibly even detect feel worth couple minutes fix even probably wo nt happen", "d": "8/2017"}, {"body": "development experience also mean time impact performance nt clear sorry really depends check happen flag deactivate tipwarning looks reasonable", "d": "8/2017"}, {"body": "ah see since check happens initialization already iterating property checks impact minimal", "d": "8/2017"}, {"body": "transition must one element vif allows use development version see error", "d": "8/2017"}, {"body": "thank answer seen error console beforehand seems like mode outin work transitiongroup would one achieve desired effect use hooks trigger animations manually cleaner way", "d": "8/2017"}, {"body": "personally use vif transitiongroup nt seem fit use case please ask questions forums discord", "d": "8/2017"}, {"body": "thank sorry inconvenience", "d": "8/2017"}, {"body": "worries", "d": "8/2017"}, {"body": "code works fine mean ie instead ms edge change code", "d": "8/2017"}, {"body": "thx work", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "workaround use latest node flag build", "d": "8/2017"}, {"body": "nickmessing thanks work around still problem solution possible always include workaround made affected projects less portable future es features always land babel plugins node even flag", "d": "8/2017"}, {"body": "justineo personally would like change mechanism move away babeltemplatecompiler would result runtime errors make hard track mistakes templates another way try parse babel instead slow need research actual performance impact", "d": "8/2017"}, {"body": "justineo unfortunately using parse expression breaks current solution since parses keywords successfully ex adds extra dependency looks like option limited use code supported node expressions solves spread problem moment", "d": "8/2017"}, {"body": "thanks nick think better point docs prevent confusion make pr later nt mind", "d": "8/2017"}, {"body": "learned lot", "d": "8/2017"}, {"body": "closing issue nt seem consider", "d": "8/2017"}, {"body": "nickmessing reason could nt use instead build step webpack template", "d": "8/2017"}, {"body": "chrisvfritz would nt recommend using babelnode performance overhead", "d": "8/2017"}, {"body": "posva much slower talking though think predictable behavior worth slightly slower builds even moderately slower builds nt already tradeoff choosing write tests include build system compiles predictably supported javascript", "d": "8/2017"}, {"body": "concern adding note documentation wo nt sufficient people encounter problem nearly impossible find note could easily waste day trying figure feature nt working correctly probably likely give assuming vue template compiler buggy lied supporting babel features really nt feasible find consistent workaround think need way communicate users like catch errors vue template compiler provide warning behavior", "d": "8/2017"}, {"body": "chrisvfritz nt tested using babelnode webpack template know possible remember keep slightly bad memory using node projects", "d": "8/2017"}, {"body": "posva chrisvfritz option anyway since nt transpire code think know way make work make dependency template compiler considered", "d": "8/2017"}, {"body": "nickmessing posva investigate would either mind reopened make sure nt forget since really problem documentation solve thinking close one prevent issue completely templates vuetemplatecompiler directly provide user warninghint error raised may caused unsupported feature node last resort decide neither feasible encountering difficulttodiagnose behavior one horror stories vue users tell late night around campfire nickmessing think users nt concerned size dev dependencies would alright would make things work users expect", "d": "8/2017"}, {"body": "chrisvfritz unfortunately nt know without bundling babylon runtime build", "d": "8/2017"}, {"body": "chrisvfritz worries", "d": "8/2017"}, {"body": "nickmessing ah see crazy idea could avoid pulling babylon template compiler something like beginning function closer pseudocode real solution think strategy getting might feasible", "d": "8/2017"}, {"body": "chrisvfritz actually yes try way", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "thanks lot good job look nice simple wait evan input", "d": "8/2017"}, {"body": "vuex logo looks dopest would really love could alternatives vuerouter though cents", "d": "8/2017"}, {"body": "loving vuex logo think vuerouter similar reactrouter logo", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "usage question please post forumvuejsorg", "d": "8/2017"}, {"body": "ping ktsn kazupon herringtondarkholme", "d": "8/2017"}, {"body": "thought wrote typings sure necessity since used webpack config write webpack config typescript", "d": "8/2017"}, {"body": "hi foisonocean would mind provide information far know clientplugin webpack nt think many users use ts webpack setup plus clientplugin contains almost nothing signature also seems adding work vueserverrender", "d": "8/2017"}, {"body": "yes using typescript write webpack config", "d": "8/2017"}, {"body": "woo", "d": "8/2017"}, {"body": "oh nt know webpack officially supports config file written typescript create declaration", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "\u5f00 issue", "d": "8/2017"}, {"body": "working expected destroys recreates toggled slot content second component recreated wrap slot inside div works expected", "d": "8/2017"}, {"body": "\u8fd9 ie \u7684 bug \u800c\u4e0d\u662f vue \u7684\u95ee\u9898 \u5efa\u8bae\u4f60\u7528", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "vue", "d": "8/2017"}, {"body": "know binding template already know fields discussed unfortunately current behavior wo nt change allowing templates dictate data structure breaks single source truth", "d": "8/2017"}, {"body": "expected information edit button custom event", "d": "8/2017"}, {"body": "tested works fine plugin installed installing eslintpluginvuelibs make sure updated version npm delete nodemodules", "d": "8/2017"}, {"body": "posva thanks update npm works fine", "d": "8/2017"}, {"body": "update npm btw still quite old", "d": "8/2017"}, {"body": "posva thanks lot reinstall nodejs stable version npm update nodejs trying read hope contribute source code", "d": "8/2017"}, {"body": "personal thing anything else think node comes major improvements", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "want generate random keys generated time create items add array call functions template keys created every time component renders completely defeating purpose keys recommend use forum discord server gitter stackoverflow get help", "d": "8/2017"}, {"body": "thanks use channels solve problem", "d": "8/2017"}, {"body": "hi hegangsz \u4f7f\u7528", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "expected overwriting global component local component options ca nt get data since exporting data want use globally registered components execute vue", "d": "8/2017"}, {"body": "please provide real reproduction", "d": "8/2017"}, {"body": "version update computed property statement feat warn assigning computed property setter must add setter computed property", "d": "8/2017"}, {"body": "trying set property state getter mapped instance may happen pass computed property handled another component find case happening nt please tell reopen", "d": "8/2017"}, {"body": "posva thanks used sync would change property updateanotherstate val gt property val sync always trying set property immediately use sync", "d": "8/2017"}, {"body": "try implied templates similar use component", "d": "8/2017"}, {"body": "implied templates similar use component data gotcha whittleddown example case came across definitely kosher use case set like specifically highlight fact bound parent outside tag inside reason bound parent within tag seemed nonintuitive thought worth ask", "d": "8/2017"}, {"body": "nt use inside template", "d": "8/2017"}, {"body": "missed", "d": "8/2017"}, {"body": "code editor turns nt realize serverside handlebars interpolating template code never made client pasted viewsource fiddle thanks sorry wasting time guys joe", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "prefer", "d": "8/2017"}, {"body": "sirlancelot described declare expression", "d": "8/2017"}, {"body": "sure understand works objects", "d": "8/2017"}, {"body": "use property object telling vue longer wish reactivity property deleting basically keyword bring back reactivity deleted property need use want delete object property still wish remain reactive without needing use try setting property instead", "d": "8/2017"}, {"body": "lost reactivity used vuedelete checked api docs vuedelete says vuedelete works arrays vuedelete target key arguments object array target string number keyindex works array index guys say mistake docs must another problem code caused issue look thank replies", "d": "8/2017"}, {"body": "omerzfira docs sat array index supported starting mean lost reactivity deletes property longer property reactive nt exist something like supposed work reactively removes property property reactive since nt exist", "d": "8/2017"}, {"body": "way since github issues issues questions close ask questions forum chat stackoverflow", "d": "8/2017"}, {"body": "seem misunderstand objectpreventextensions method prevents new properties ever added object ie prevents future extensions object mdn emphasis mine vue nt add new properties adds getters setters existing properties fine objectpreventextensions demo vanilla javascript probably want rather use", "d": "8/2017"}, {"body": "linusborg perhaps post titled differently please see console timings reproducer posted see clearly bug vue recursively walking array effort make elements reactive want following code take vue similar thing plain objects however prevent behavior currently prevent vue looping elements array though causing significant performance degradation project large array need able index nt need reactive", "d": "8/2017"}, {"body": "simpler reproducer nt involve takes gt simply set property large array edit another one showing hack currently", "d": "8/2017"}, {"body": "edit following wrong see next reply seem misunderstand explanation objectpreventextensions prevent reactivity design objectfreeze design bug intentional design decision solution problem use objectfreeze", "d": "8/2017"}, {"body": "revert apologize claiming sure worked instance reality wrong turns fact wrong vue respect objectpreventextensions test original jsfiddle log array console added vue without notice one without property means reactive one nt also checked adding breakpoints vuejs line defined called twice reason defined called reach array element items passed function reactivity system apologies claiming something factually wrong issue stays closed vue already behaving like want", "d": "8/2017"}, {"body": "ah see surprised different way prevent reactivity object vs array chrome still taking freeze array items seems depend length array would possible introduce different way indicating vue iterate array actually need object frozen change behavior vue", "d": "8/2017"}, {"body": "side note function still getting invokedthe array iterated however mistaken thinking culprit performance issue", "d": "8/2017"}, {"body": "would possible introduce different way indicating vue iterate array discussed couple times previously already wo nt happen really want skip reactivity add array directly instance instead assigning property derived", "d": "8/2017"}, {"body": "okay going take step back think initial debugging led think problem something nt reproducer close actual scenario building virtual grid large source array compute start index normally would based scroll position case added button simulate scrolling template renders rows jsfiddle array never change thing changing start index however enormous amount lag profile see issue core nothing reactivity solely performance seem like something perform poorly realize issue kind gone rails originally posted let know open new issue", "d": "8/2017"}, {"body": "sure new issue order behaviour really something work around within reactivity functionality said need raw performance reactivity add array normal instance propety discussions improving specific performance challenges probably rather happen forumvuejsorg unless specific improvement suggest would warrant new issue feature request", "d": "8/2017"}, {"body": "linusborg due respect find really hard believe considered acceptable performance especially considering fact marked array extensible entire array subarrays iterated every time property read viewmodel reproducer template renders rows reads template expression problem far worse number rows increased performance basically n number elements array number times array referenced render function believe fixed changing line nt able buildtest due however sure break tests believe makes sense given fact vue respect nonarray objects", "d": "8/2017"}, {"body": "good idea honestly sure consequences fenduru reopened rename topic better reflect issue could edit op comment linking got heart issue thanks chime evan fenduru suggesting keep running getter array nt extensible could negative consequences thinking could interfere reactive objects within notextensible array accessing prop object would trigger object reactive getter accessing object whole eg passing child component reading keys object array objectkeys might go unnoticed skipping right deep enough topic say walk array could nt maybe find way called per render cycle watcher instead times array accessed render array ca nt change anyway spontaneous idea could totally rails first call add prop like watcher subsequent calls make sure array cache already watcher called empty cache javascript set would much better arrayisarray value amp amp deptargetarraycacheindexof value dependarray value deptargetarraycachepush value depjs export function poptarget deptargetarraycache null deptarget targetstackpop code walk arraycache time check presence would assume number array component much smaller length biggest array component situations performancewise would imporvement", "d": "8/2017"}, {"body": "according description needing properties reactive top level think real issue whether data object array observed shallowly instead whether called upon opinion works mean prevent properties added object original properties still required reactive since likely referenced templates instance even called specific array whose items referenced templates changes items inside array still need demonstrated view layer case invoked recursively makes lot sense line think really matters figuring way defined properties instance object shallow style", "d": "8/2017"}, {"body": "reading keys object array objectkeys might go unnoticed skipping dependarray right behavior would consistent behavior objects indexing keys reactive values index reactive everything still work walk array dependarray could nt maybe find way called per render cycle watcher instead ntimes array accessed n render thinking well performance hit applications right even ones want reactivity called many times per tick suspect could reduced per tick cases however case still advocating avoiding calling altogether used jacelynfish clarify mean reactive top level mean want reactivity system detect array reference changed array immutable time contents change array reference changes vue reactive arrays contents waste performance", "d": "8/2017"}, {"body": "fenduru array wo nt immutable calling", "d": "8/2017"}, {"body": "jacelynfish application guarantees array immutable regardless whether object technically mutated", "d": "8/2017"}, {"body": "linusborg thoughts would like file pull request however unable get working dev environment per", "d": "8/2017"}, {"body": "jacelynfish linusborg fenduru idea using objectpreventextensions disable array reactiveness ob added therefore changes happen elements watched array immutable issue right", "d": "8/2017"}, {"body": "think going way far tons possible typos accept handling one handle much future writing writing nothing prevents user property called make binding valid btw colon way add arguments directives", "d": "8/2017"}, {"body": "could handled rule eslint though", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "modifier available necessary components native elements since listen native events native element using modifier element nt make sense", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "wrote vue ssr runtime make sure behaves like vue would case codepen using unminified version vue render comment node placeholder elements currently displayed nt happen production minified version though codepen befixed simply using html renderer produces output different vue would depending environment issue fix renderer implementation vue", "d": "8/2017"}, {"body": "oops feel stupid", "d": "8/2017"}, {"body": "little bit explicit happening considering vifs supposed show hide stuff naturally errosrs forced play detective understand part behaviour intended select district restaurants list changes accordingly nt seer problem see", "d": "8/2017"}, {"body": "linusborg thank helping recorded video make issue clear issue open jsfiddle link see open another jsfiddle link se everything working fine changed location nothing else", "d": "8/2017"}, {"body": "ok think understand mean probably keying different elements following advice", "d": "8/2017"}, {"body": "ok solves issue thank team great work great framework", "d": "8/2017"}, {"body": "better sitation situation begin us improve error messages understand mistake part lead error mention optimally hear might consider helpful error message", "d": "8/2017"}, {"body": "hinted better error message api change section sorry unclear able get source file error name component causing issue thanks", "d": "8/2017"}, {"body": "issue caused message accidentally tried render component recursively error message tells name element error possibly retelated recursive component render used vueloader usually also get filename component causing issue generated component trace sure helpful especially since stil fully understood mistake made trigger error hard improve message mistake demonstration", "d": "8/2017"}, {"body": "issue importing component defining via components prop component allready imported globally via vueuse component beeing called recursively probably parent component instance know component instantiate error unclear overriding allready existing component generally speaking current error message generic covers multiple errors one intended cover", "d": "8/2017"}, {"body": "hm point really ask reproduction generally overwrite component problem instance probably parent component instance know component instantiate error show show use tag template vue nt know registered recursively call component missing property things explained error message errors catched", "d": "8/2017"}, {"body": "repro soon worries", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "expected behaviour using function function gets executed every time component tries renders basically function called well thus creating infinite loop please next time provide actual repro code also could followed information issue created", "d": "8/2017"}, {"body": "ok thanks wo nt always rendered data nt change", "d": "8/2017"}, {"body": "work", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow result exactly without vue", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum official chat stackoverflow", "d": "8/2017"}, {"body": "close found fix webpack config resolve alias vue vuedistvuejs", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "close found fix webpack config resolve alias vue vuedistvuejs", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "usage question encourage ask forum discord try use issue tracker bug reports feature requests question need key items", "d": "8/2017"}, {"body": "think demo worked expected", "d": "8/2017"}, {"body": "thanks response", "d": "8/2017"}, {"body": "likely issue ms edge nothing vue remove vue dependency get behavior edge", "d": "8/2017"}, {"body": "thanks confirm vueless fiddle works firefoxchrome edge", "d": "8/2017"}, {"body": "closing", "d": "8/2017"}, {"body": "awesome also seems like already filed bug edge nt find earlier little hard search cool beans", "d": "8/2017"}, {"body": "reference similar issue remains open angularjs tracker well", "d": "8/2017"}, {"body": "curiosity problem facing undefined accessing edit also asking equal undefined attrs actually useful", "d": "8/2017"}, {"body": "greegus case something like using babelplugintransformoptionalchaining", "d": "8/2017"}, {"body": "would judge expected behaviour debatable", "d": "8/2017"}, {"body": "ping greegus", "d": "8/2017"}, {"body": "ran definitely unexpected ever example writing todo app starts todos would strange make list begin instead add statements optional chaining app case similar niche cases user wants check exist still possible use case still covered part really convinces bug though set empty object prop passed component op points currently really checking exist would require strategies", "d": "8/2017"}, {"body": "chrisvfritz convinced bug", "d": "8/2017"}, {"body": "linusborg looks like one working bug currently may pr", "d": "8/2017"}, {"body": "sure", "d": "8/2017"}, {"body": "unfortunately rendered parent context gets access different", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "nt considerated bug", "d": "8/2017"}, {"body": "shared whole project asked help vuex two way binding furthermore vue repo vuex want report bug need send concise reproduction please ask help channels pointed come back turns bug thanks", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "gebilaoxiong", "d": "8/2017"}, {"body": "ok let add link example post dynamic components found internet admin panel manage posts tab create post tab create post component makes sure user nt lose data switch back manage posts tab excellent imagine add selector chose set tabs fly admin user panel approval panel might still end create post component user component component name data admin panel inactive create post tab likely completely irrelevant reuse component sure context changed maybe approval panel create post tab template never gets unloaded way actually get rid backgrounded component signal interface changed short dynamic list widgets switch list changes unloaded template cached widgets might either required anymore data might become irrelevant widgets switch wait change list old list new ones end old cached components unreachable reachable likely stale data switch cache dynamic might fix data part problem hooks nt help think maybe watcher inactive component would trying explain problem dynamic context", "d": "8/2017"}, {"body": "maybe approval panel create post tab keepalive template never gets unloaded way actually get rid backgrounded component signal interface changed problem meant used kind scenario looks like using without needing", "d": "8/2017"}, {"body": "well need much little example app link avoid user retype data different inner ui widget chosen happens actual set components data inside also dependent outside deeply nested components data issue also contained outer dynamic context makes cache whole lot likely irrelevant components thinking ways signal empty cache invalidate children reset without think problem component dynamic context inactive children taken datadriven loop end stale outer context changes works fine onetomany efficiently manytomany fine way reset inner outer changes might need invalidate signal components even usecase nt immediately clear common usage", "d": "8/2017"}, {"body": "still think nothing new add use case must clear allowing imperatively reset keepalive component cache really looks like bad usage goes declarative rendering last example reset using attribute component", "d": "8/2017"}, {"body": "create reused component declarative data eventually watchers wo nt stale data ever reused example use watchers detect context changed reset form unused components use dynamic include keepalive", "d": "8/2017"}, {"body": "rules omitting end tags rather casebycase straightforward since close another one encountered however etc terminated open tag element want strictly adhere spec hardcode possibilities imo worth users intentionally write speccompliant imo sloppy html since already closing tag warning place essentially enforcing vue templates slightly stricter subset html imo fine considering tradeoff", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "also think better vue relax restrictions keys supports object", "d": "8/2017"}, {"body": "works differently components native elements therefore guess making smarter trivial input event probably needs modified manually inner component outer component etc app wrapping third party component adding custom style thought work noticed adding also required think bit weird component declared nt thinking twice guess automatically added accepted due thus included non recognized props anymore however exist unless specifically declared perhaps could added manually specified prop", "d": "8/2017"}, {"body": "think bit weird component declared nt frandiox might misunderstood mean seeing value attrs", "d": "8/2017"}, {"body": "well child properly declared prop would expect see props attrs happening", "d": "8/2017"}, {"body": "linusborg think frandiox suggesting seen automatically registered prop child component due use parent nt noticed behavior personally", "d": "8/2017"}, {"body": "linusborg chrisvfritz passing attribute manually normal however think normally pass internally expanded need manually pass omit value included attrs included unless specified component used internally though declared prop agree included however declared nt included considering also adding", "d": "8/2017"}, {"body": "frandiox ah thanks example agree strange nt appear easily fixable assume registered prop adding instead works cases", "d": "8/2017"}, {"body": "made time afternoon fix reviews welcome", "d": "8/2017"}, {"body": "definitely something wantneed looks like increasing popularity hoc made necessity", "d": "8/2017"}, {"body": "workaround jsfiddle example fixed probably nt work ssr work forked op jsfiddle", "d": "8/2017"}, {"body": "thank", "d": "8/2017"}, {"body": "linusborg nice think would help coming real life hoc use cases solving using primitives", "d": "8/2017"}, {"body": "absolutely", "d": "8/2017"}, {"body": "mentioning issue edit mybad since using undocumented createelement api would worth documenting plugin developers", "d": "8/2017"}, {"body": "link wrong unless really wanted link issue yes technically api still missing api page", "d": "8/2017"}, {"body": "alexandrebonaventure issue vue days smile also documented", "d": "8/2017"}, {"body": "function documented argument render function available via open issue", "d": "8/2017"}, {"body": "linusborg basically function gets sent function right", "d": "8/2017"}, {"body": "exactly documented clearly also available outside render function via instance method", "d": "8/2017"}, {"body": "play example couple issues using complex scenario hence need official repo couple notes createrenderfn check attrspropslisteners functions evaluate would allow dynamically set props etc based existing props composability component second parameter entire createhoc method curried could easily chain multiple hoc creators together hoc added mixin try chain hocs together ie second hoc access parent props example", "d": "8/2017"}, {"body": "hey folks looking writing implementation let know think look publish soon also thinking writing recomposestyle package", "d": "8/2017"}, {"body": "recompose style package would great really could used something like withstate recently sat aug jack notifications githubcom wrote hey folks looking writing implementation let know think look publish soon also thinking writing recomposestyle package receiving mentioned reply email directly view github mute thread", "d": "8/2017"}, {"body": "jackmellis great take lead couple thoughts feedback gave previously think curried version great point default way hocs generally done nt good point problem mixins already idea mitigate nt one moment gut feeling mitigatable combination curried variants created using also thought naming nt like something like would meaningful make sense scenario embed nodes javascript render h return h div staticclass somestyling rendercomponentwith props", "d": "8/2017"}, {"body": "end opted componentfirst noncurried curried variant react ecosystem functionalfocused unlike vue acts like oop framework think best keep consistent rest vue still offer functional alternative added code deal rather whole hoc mixin manually merge hoc options together using optionsmergestrategies problem optionsmergestrategies expects vm last parameter merging instantiation vm quite happy since exactly put together less think people use directly general usage something like perhaps nt quite understand example", "d": "8/2017"}, {"body": "perhaps nt quite understand example think right track thoughts going similar direction thought last reply initial poc included people could add additional markup around rendered component would mean really hoc anymore would bring ui well", "d": "8/2017"}, {"body": "yes think attempting render additional content gone outside hoc territory might well create sfc handle", "d": "8/2017"}, {"body": "published vuehoc npm also working vuecompose quick documentationsessionaway ready well although similar recompose vue handles lot clever stuff like caching computations encourages use actually nt need quite complex functionalstyle syntax", "d": "8/2017"}, {"body": "posva still looking solution time chime would really appreciate hopefully someone else might ideas least situation updated example based last fiddle added grandchildren references injected directly references computed property based injected goal mixin properties component tree let inherited specific way contrived example let say building library form components nested want mixin state form components also want state propagate sub tree example say property requires subtree become want able get reactive update changes", "d": "8/2017"}, {"body": "jasonsanjose problem injected reactive whole new object every time setting root really think twisting feature much looks like need way sharing state components injectprovide meant", "d": "8/2017"}, {"body": "posva thanks feedback found creative solution involves watchers injected properties bit indirection pretty easy follow seems work hopefully still playing within rules least going trip future behavior changes", "d": "8/2017"}, {"body": "better example cascading breadcrumbs", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "working case says cant find app ist another solution", "d": "8/2017"}, {"body": "need mount vue div", "d": "8/2017"}, {"body": "know already import vuejs like everything working working use npm version", "d": "8/2017"}, {"body": "working component library utilizes provide inject certain components behavelook slightly differently context another component library since components used engineers development warnings injection found keeps showing environment would love feature implemented add mentioned like see attribute indicate whether injection required optional", "d": "8/2017"}, {"body": "vue version put computed property helper function get warn could nt find vuex state think warn may consider condition codes like js storejs import vue vue import vuex vuex vueuse vuex const state isloading false const mutations updateloadingstatus state payload stateisloading payloadisloading export default new vuexstore state mutations js appvue import loading vux import mapstate vuex export default name app components loading computed mapstate isloading state gt stateisloading", "d": "8/2017"}, {"body": "plortinus happens trying change value mapstate create getters probably make things work binding handle update committing mutations", "d": "8/2017"}, {"body": "posva thanks loti tried use modifier handle problemit works wondering solution good practice notthe purpose codes show loading toast switch one page another page spa js import loading vux import mapstate vuex export default name app components loading computed mapstate isloading state gt stateisloading", "d": "8/2017"}, {"body": "whywhen would component ever want change value isloading component hardly know process nt see need sync vmodel anything like", "d": "8/2017"}, {"body": "update value beforeafter action js routerbeforeeach function next storecommit updateloadingstatus isloading true next routeraftereach function storecommit updateloadingstatus isloading false", "d": "8/2017"}, {"body": "yeah sure value go parent component compoent loading component value changed component situation would need maybe missunderstanding props work least combination computed properties", "d": "8/2017"}, {"body": "closing dup", "d": "8/2017"}, {"body": "agree laugharn prefetch resources controllable case would like avoid big scripts like pdfjs pdfjs worker downloaded early", "d": "8/2017"}, {"body": "html code like id b type myproducttype value myproductid von click greet vue js code like data myproduct id type text", "d": "8/2017"}, {"body": "android problem handle composition events", "d": "8/2017"}, {"body": "vueconfigerrorhandler catching errors inside methods run render button throws error call method vueconfigerrorhandler wo nt catch neither windowsonerror", "d": "8/2017"}, {"body": "met problem seems solution issue found", "d": "8/2017"}, {"body": "vvpvvp encountered seems like problem build tools try updating vueloader amp vuetemplatecompiler", "d": "8/2017"}, {"body": "discovered work around withdrawing fr", "d": "8/2017"}, {"body": "iceuncle", "d": "8/2017"}, {"body": "vueissuebot", "d": "8/2017"}, {"body": "created\u91cc\u9762\u6dfb\u52a0 windowfunctionnamethisfunctionname", "d": "8/2017"}, {"body": "interesting change files inconsistency applications harder change craft see change lexers globally even could find would likely break craft plugins expect twig default think argument could made applications may reasons change lexers think allowing components change delimiters would make sense however agree argument changed globally vue application reason imho best way allow developer choose change even component file", "d": "8/2017"}, {"body": "hi problem wrote use barcode reader input filled fast char skipped directive helped ugly work case think onchangeinput event bind value cycle problem input fast lt browser opera customers use", "d": "8/2017"}, {"body": "maybe help", "d": "8/2017"}, {"body": "using simply replace amp directives single vue rest still able reproduce input fast issue even using tool like keepass autotype fields", "d": "8/2017"}, {"body": "problem us opera said customers use browser vmodel syntactic sugar vmodellazy try found exact problem", "d": "8/2017"}, {"body": "checked opera works without problems", "d": "8/2017"}, {"body": "\u8fd9\u6837\u7684\u65b9\u5f0f\u5bfc\u5165\u7ec4\u4ef6", "d": "8/2017"}, {"body": "sethdorris ever get figured using webpack vue seeing issue click listener added anything vbinds templating seems work removing webpack loading everything oldschool style seems fix problem", "d": "8/2017"}, {"body": "issue change events clicktab input field change event triggered", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "\u65b0\u7248\u5fae\u4fe1\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u4e2abug\u4e86 \u5728 zgcodes notifications githubcom receiving mentioned reply email directly view github mute thread", "d": "8/2017"}, {"body": "serverrendered attribute let vue know needs hydrate markup instead throwing away render scratch remove vue simply fresh clientside render causes fouc real cause short answer ca nt arbitrarily codesplit using ssr reason need ensure async components resolved starting render otherwise server rendered markup render empty placeholders async components client also need resolve async components first starting hydration otherwise hydrating markup async components definitions available yet leads mismatch currently support routebased code splitting vuerouter async route components autoresolved route view rendered routeronready initial render detailed ssr guide along release explain everything better", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "quite interestingly specify key codes works sure mac chrome nt fire event one problem solution triggers event release cmd key enter", "d": "8/2017"}, {"body": "tried dynamic emits idiomatically ok mock events meant something else", "d": "8/2017"}, {"body": "get hint definitely alibaba hahah", "d": "8/2017"}, {"body": "denghongcai forgot last comment push changes probably next weekend currently busy also small improvements bundle size reduction working buffersstreams java api working nashorn", "d": "8/2017"}, {"body": "think exact issue seems different try example whenever accessing specifically get method used onblur event clears field typing dummy field updates another data makes typed value appear commenting onblur event use problem occur seems related cached value computed function bit late tried forceupdate nexttick doesnt change behavior let know create new issue instead", "d": "8/2017"}, {"body": "oops forgot example works see else could wrong", "d": "8/2017"}, {"body": "ok found problem think problem happens thisvalue declared ie declaring fixes issue probably another unreactive value issue worth noting using methods ie instead computed works guess bestpractice would declare object keys", "d": "8/2017"}, {"body": "confirm form data keys initialized", "d": "8/2017"}, {"body": "still work", "d": "8/2017"}, {"body": "vue native", "d": "8/2017"}, {"body": "locking prevent spam current solutions weex near future nativescript", "d": "8/2017"}, {"body": "hi ended issue also vue comments inside div css selector work comments inline read evan comment find workaround sure change since issue reported regarding subject thank adrian ps love vue sounds funny", "d": "8/2017"}, {"body": "works props data binding way pass props like customcomp definition vue amp work results directive rendered attributes directives", "d": "8/2017"}, {"body": "emit update foo newvalue \u4e0d\u660e\u767d\u600e\u4e48\u7528\u8fd9\u884c\u4ee3\u7801 \u5728\u54ea\u91cc\u8c03\u7528 \u6709\u6ca1\u6709\u5b8c\u6574\u7684\u4f8b\u5b50\u770b\u770b", "d": "8/2017"}, {"body": "binsinger \u5c31\u662f\u5728\u7ec4\u4ef6\u91cc\u9700\u8981\u66f4\u65b0", "d": "8/2017"}, {"body": "rayrutjes code coverage working happen encounter issues describe", "d": "8/2017"}, {"body": "cleaned thread unrelated comments please use forumvuejsorg chatvuejsorg questions problems", "d": "8/2017"}, {"body": "doesnt feel right composition logic must chained extended component residing inside inherited maybe combination composition extendmixin could good solution exploring idea parent baseform standard header specific userform usage would expect possible would either method specific forms create using baseform way would see use also baseform option depending desired result way use slots direct access submit method specific form could look like import baseformfrom baseformvue export default extends baseform components baseform additional methods data etc overriden baseform expected method expected make sense sure since got state probably work different extendmixin util gets propsdata using gettersetter methods specified ref ie baseform creates complete mapping example submit declared userform submit return refbaseformsubmit would automatically created userform may add event broadcasting global state common practice framework correct", "d": "8/2017"}, {"body": "like idea using baseform slots directly userform perhaps use directly overriden template natural way baseform userform superuserform essentially reusing defined slots extended class allows template expand let say want enclose form like decorator case yes composition necessary could like userform would agree userform concept bit breaking concept components userform concept seems logical really extends existing component structure", "d": "8/2017"}, {"body": "something worked allows easily override existing slots note work files allow define template way export default function extendtemplateslots template slots import baseform baseform import extendtemplateslots helpersextendtemplateslots export default extends baseform template extendtemplateslots formtemplate default actions props title default user form", "d": "8/2017"}, {"body": "looked like functional component one work well almost would need convert string html vnodes dont know import baseform baseform const userform extends baseform custom option override existing slots slots default actions props title default user form could generic component export default render createelement return createelement userform scopedslots create vnodes userformslots strings header props gt slotsheader slotsheader null actions props gt slotsactions slotsactions userformslotsactions slotsdefault slotsdefault userformslotsdefault props componentprops edit oops component userform still needed finally export functional component configure slots reason able add methods data baseform needed like example functional component would enough", "d": "8/2017"}, {"body": "think would needed trouble using", "d": "8/2017"}, {"body": "continue hope realized issue closed therefore probably nobody notice write want discuss something forumvuejsorg probably better place", "d": "8/2017"}, {"body": "oh right", "d": "8/2017"}, {"body": "vue one handle situation book loaded async initially value", "d": "8/2017"}, {"body": "\u8fd9\u4e2a\u62a5\u9519\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u670d\u52a1\u5668\u6e32\u67d3\u51fa\u7684 html \u548c\u5ba2\u6237\u7aef vue \u751f\u6210\u7684 dom vue warning \u6d88\u606f\u4e2d\u63d0\u5230\u7684\u6d4f\u89c8\u5668\u81ea\u52a8\u4fee\u6b63\u4e0d\u89c4\u8303 dom dom \u7684 directive directive virtualdom directive vshow directive", "d": "8/2017"}, {"body": "thread saved life", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "saves almost memory big nested array", "d": "8/2017"}, {"body": "fridus really like way nasty mustache tags needed thanks", "d": "8/2017"}, {"body": "trying file pr vue get build recommendation move forward", "d": "8/2017"}, {"body": "uncaught promise typeerror read property length undefined dont know error please help", "d": "8/2017"}, {"body": "define member data props name handler broken example clicking foo button causes error message vue foo export default data return edit null methods edit something", "d": "8/2017"}, {"body": "\u6211\u7684\u7b2c\u4e09\u7ea7\u8def\u7531\u7ec4\u4ef6", "d": "8/2017"}, {"body": "update open anything done help move issue", "d": "8/2017"}, {"body": "akryum since teaser back february seemed dead water blakenewman see pinged months ago information issue sorry getting annoying really like know make happen", "d": "8/2017"}, {"body": "scottbedard working hidden gotchas however could documented unusable features work done quite ago unfortuently nt map current state rendering system work need done vuejscollaborators opinion feature overall development effort additional cost core worth feature", "d": "8/2017"}, {"body": "think nice feature since default way write components using templates imho decoupling rendering functions components used templates compiler would great", "d": "8/2017"}, {"body": "problem scope using templates functionally limiting much using jsxrender functions think point building functional components constraints design patterns nt fit template model feature requires small amount extra runtime never performance pure render functions enabling feature assume better performance comparative pure render functions true stance feature moment empower templates used functionality gives true reward", "d": "8/2017"}, {"body": "also would nice scoped style support functional components may unrelated", "d": "8/2017"}, {"body": "unrelated believe working work unless regression", "d": "8/2017"}, {"body": "hey evan follow issue find lots pieces like generated code thousands project add quite kbs compression take care quite easily never less nice generated output could simply remove compiletime see add option template compiler give pull request succeed thinking something like", "d": "8/2017"}, {"body": "also find situations reactive handy without must resort complex solution eg emitvuex get children state anyway think getting children state parent natural straightforward without reactive feature actually useless", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "iceuncle", "d": "8/2017"}, {"body": "iceuncle \u80fd\u5426\u5e2e\u5fd9\u770b\u770b\u7684\u5440\u8c22\u8c22\u4e86", "d": "8/2017"}, {"body": "\u54ea\u4f4d\u54e5\u4eec\u6709\u9047\u5230\u8fc7\u5e76\u4e14\u89e3\u51b3\u7684\u5e2e\u5fd9\u770b\u770b\u8c22\u8c22", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "vue\u6709\u5185\u7f6eeventbus", "d": "8/2017"}, {"body": "created\u91cc\u9762\u6dfb\u52a0 windowfunctionnamethisfunctionname", "d": "8/2017"}, {"body": "custom modifiers come angular background started vue saw thread feel would really help something like angular parsers formatters vue could something like vmodeldateformat result something like mmddyyyy would really cool edit looks like reiterated said", "d": "8/2017"}, {"body": "happening using edge vue", "d": "8/2017"}, {"body": "start range vfor instead", "d": "8/2017"}, {"body": "disagree common case think built way without need custom range function", "d": "8/2017"}, {"body": "guys gitter join receive support getting issue assigned worked first timer oss", "d": "8/2017"}, {"body": "dmcfaddengalway discourage starting feature feature request pretty old forum discord server gitter", "d": "8/2017"}, {"body": "even answered evan closed still want emmet basic syntax quite helpful", "d": "8/2017"}, {"body": "wondering vue add data left selector able select generated elements", "d": "8/2017"}, {"body": "fingerpich js export default name isname", "d": "8/2017"}, {"body": "emadadly want different name id vue file used component recursively set id global name", "d": "8/2017"}, {"body": "fingerpich still working concepts think following set component name globally file create vue instance ie abovebefore vue instance creation add something like import mycomponent componentsmycomponentvue vuecomponent mycomponent mycomponent new vue components member app another component makes available template used", "d": "8/2017"}, {"body": "btw found issue getting error well seems name member singlefile vue component ignored stopped including names started naming member referenced globally eg valid approach used global registrations seems appropriate register used locally however sure performance impact registering locally repeatedly component nested within many components", "d": "8/2017"}, {"body": "want loop itemrealname itemdepartmentname want loop twice trick though produce many tbody elements seems display correctly valuevaluename valuevaluetype", "d": "8/2017"}, {"body": "raychenfj works", "d": "8/2017"}, {"body": "testing attribute seems vue nt render dom binding datacomputed values eg underlying data got work cc posva", "d": "8/2017"}, {"body": "use slot vmodel", "d": "8/2017"}, {"body": "rpkilby one way copy object remove observablereactivity really useful since want keep array states implement state history object vuex edit solution specific case object needed copy property values moment time care references dynamic updates etc", "d": "8/2017"}, {"body": "right vfor map vfor acts received empty array regardless outcome extended discussion whetherhow support maps sets would save lot people lot debugging time vue simply warned maps sets yet supported see", "d": "8/2017"}, {"body": "jiiiiiin style backgroundimage url slideimg", "d": "8/2017"}, {"body": "answer nt seem work anymore new way accomplishing", "d": "8/2017"}, {"body": "desktop apps electron works great native mobile apps im still sure use weex nativescript ionic quasar vuecordova edit ok weex looks promising managed install download adb android studio npm install g weextoolkit weex create myapp cd myapp weex platform add android npm install weex run android", "d": "8/2017"}, {"body": "weex framework building native mobile crossplatform uis moreover evan help weex already supported vuejs one frontend frameworks words use vuejs syntax develop native apps based weex steffanhalv good try great vuejs features still available weex platform except web platformbased features like weex project moved apache software foundation asf latest resources weex official website repo mirror apache weex mailing list", "d": "8/2017"}, {"body": "frankfang manage fix already exact problem", "d": "8/2017"}, {"body": "mrphilipt use", "d": "8/2017"}, {"body": "frankfang okay able resolve issue using vmodel selector instead vref instance putting something data turns nt really need vref", "d": "8/2017"}, {"body": "hit problem really must show records time simplest solution use divs instead table render time case reduced seconds aprox rows columns cells like said usually best option question whether really painting cells cases showing data justified edge cases need handled care", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "yup basic principle set property later declare initialized vue data note nonreactive data private begin expose vue keep data privately current file module working rely public getters proxy specific private data template requires properties albeit might mean boilerplate question got answer data nonreactive template render reactively data anyway template references data something must seriously consider beforehand especially passing props components since nt reactive anyway one approach using far sort like singletonlocal services lazily instatiated stuff resort property lazily instantiatelookup something store nested private reference vue instance context yet found singletonsglobals simply return value directly via global service locator direferencecontainer something example note plain js easily adopted vanilla js", "d": "8/2017"}, {"body": "know way late issue hour pulling hear making babel understand spread operator thinking nt want duplicate object arrived following conclusion become also put trigger trigger somewhere html way pollute scope one variable never set thought check data songduration makes answer better proud guys p ps try add trigger prop data vue still flip moreover looks like loophole works oo", "d": "8/2017"}, {"body": "reference", "d": "8/2017"}, {"body": "von touchstart ontouchstart", "d": "8/2017"}, {"body": "\u611f\u8c22\u5927\u795e\u89e3\u7b54", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "tanrenjie", "d": "8/2017"}, {"body": "resetting data objects plain json kill prototypes could create instantiated class based objects rootnested object methods since prototypes methodsgetterssetters proxied vue still accessible via data nested data objects problem nt get computed caching unless manually import nested getters optionally namespaced flat vue structure order manually proxy custom haxevx compiletime macro haxevx nt vanilla vue provide objectoriented dot access rerout root vue instance anyway nested accessors vue typically would exist nested vue components vuex modules rather objectoriented nested accessors else set flattened objectpropertyname proxy access however think using non computed nested access object methods nt much problem case though long nt reset yr data plain json nt need caching", "d": "8/2017"}, {"body": "use bindings apply runtime", "d": "8/2017"}, {"body": "implementing tree data structure iterator converting arrays would result large unnecessary overhead", "d": "8/2017"}, {"body": "fixed component tag well", "d": "8/2017"}, {"body": "link gives error", "d": "8/2017"}, {"body": "yes ziyuang removed days ago encourage use webpack performance systemjs really high", "d": "8/2017"}, {"body": "thank solution would work component function", "d": "8/2017"}, {"body": "works components", "d": "8/2017"}, {"body": "bitten problem found real reason vue behaving way laziness operator indeed expression immediately return look whatever value result need called upon fiddle provided returning starts false never called meaning vue register dependency however called anytime property computed first used assignment return meaning laziness never cause us trouble", "d": "8/2017"}, {"body": "one caveats vue since runtime dependency getter access tracking determine dependencies computed property means boolean considerations must seperated first seperate variables stringing operator avoid caveat make codebase much longwinded since ca nt conveniently string conditions single line could easily use haxe macro optionally decompose single line conditional expressions multiple variabledeclared conditions targeting specific environments lazy evaluation needs avoided however issue occur ifelse block requiring preevaluate certain conditions required vue environment intially thought ideal vue would seperate js compilermacropreprocessor engine would analyse computed function expressions precompute ast tree detect expressions cident accesses already precompute bindings already vuevue componentsmodulesstores also avoids overhead preprocessing dependencies getters runtime however easier said done particularly tricky cases indirect function calls fromto different computed getterssetters methods even local dynamic variables may retrieve multiple dependencies across multiple functions hard even haxe macro accompanying ast since nt retrieve dependencies via expressions infer logically potential runtime assignments expressions thus end often cost bit boilerplate often resort manually listing dependencies manually codebases neede vue reflect alternatively always set flag false nt care caching", "d": "8/2017"}, {"body": "case javascript aheadoftime dependency tracking doomed fail ca nt know advance property accessed property names strings result arbitrary computations including network calls", "d": "8/2017"}]