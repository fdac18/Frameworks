[{"title": "uncaught error unable find element updating innerhtml option element", "body": "coworker caught offguard behaviour yesterday wanted see possible react bug misunderstanding part basically seems one part innerhtml option element trying update one throw error worked around combining parts single variable using jsfiddle demonstrating error done workaround something wrong something possible react", "num": "3792", "d": "4/2015"}, {"title": "use responder system react", "body": "hi see reactnative gesture responder system also use responder system react notice implemented use thx", "num": "3791", "d": "4/2015"}, {"title": "bad interaction react click event handler native click event handler", "body": "repro created buttons one rendered time one button click handler hooked react synthetic click event hooked native click event even though one button rendered time single click triggering click events bug hit apps mix react components nonreact controls eg jquery ui repro steps reproed chrome react go click button labeled one expected button rendered labeled two actual rendered button still label one open console see gototwo gotoone indicates one button click handler ran two button click handler ran even though never saw button two", "num": "3790", "d": "4/2015"}, {"title": "testutilsrenderintodocument nt function expected browsers", "body": "hi program jsfiddle jsx var input reactcreateclass render function return var testutils reactaddonstestutils var inputinstance testutilsrenderintodocument var inputdomnode reactfinddomnode inputinstance inputdomnodefocus place cursor end inputdomnodesetselectionrange log twice consolelog inputdomnodeselectionstart consolelog inputdomnodeselectionend problem logged twice chrome firefox expected logged twice see safari interesting part use instead program works expected using chrome firefox safari", "num": "3789", "d": "4/2015"}, {"title": "warn using reactunmountcomponentatnode different react instance tree", "body": "able look see child datareactid attribute nt rendered copy react consequently warn see", "num": "3787", "d": "4/2015"}, {"title": "support prepostevent notification", "body": "find needing notification synthetic event eg onclickonchange react component helps implement fluxlike framework strict constraints store change events propagate system ideally need access entry points application async server events timer events browser events latter would like hook react event system thing possible andor feasible implement", "num": "3782", "d": "4/2015"}, {"title": "expose reactaddons reactaddons npm deprecate reactaddons", "body": "current system packaging reactaddons nt great need pull addons even want use one instead let make similar simple adding files buildnpmreact require private internal modules", "num": "3780", "d": "4/2015"}, {"title": "remove v mvc text website", "body": "lots people use react v mvc sure thought put phrase website think breeds idea dump inside though recommended application architecture experience people end problems react incomprehensible webs events cascading updates etc perhaps something like react concerned rendering ui since makes assumptions rest technology stack easy try small feature existing project top new one", "num": "3776", "d": "4/2015"}, {"title": "error stacks general", "body": "hi well like project using gripe errors refactoring large amounts code find call get unhelpful error ways errorout react well also seem produce unhelpful errors stack traces nt escape react time making near impossible debug possible better stack trace tell line perhaps would tell actually went wrong trying create element undefined", "num": "3775", "d": "4/2015"}, {"title": "npm update broke something relating reacttools", "body": "ran npm update reactnative broke project got error find package main file package usersblainedevnativeevueiosnodemodulesreactnativenodemodulesreacttoolssrc could something related thought post", "num": "3774", "d": "4/2015"}, {"title": "bc break", "body": "hi code javascript var hello reactcreateclass render function return hello gt thispropsname reactrender documentgetelementbyid container works fails following message javascript uncaught error parse error line unexpected token gt return hello gt thispropsname fiddle fiddle idea problem could", "num": "3773", "d": "4/2015"}, {"title": "large speed loss hidden element using inline styles", "body": "came across speed test using react removed hidden element table load see impacted speed remove hidden element speed gets better element simple td element inline styles hide surprised speed difference wanted know happening inline styles hidden element test hidden element test hidden element", "num": "3771", "d": "4/2015"}, {"title": "componentwillreceiveprops called many times apparently identical props", "body": "unless missing something nt happen eg printout app make sure nt happen thanks", "num": "3770", "d": "4/2015"}, {"title": "numeric character reference props possible due escaping", "body": "html numeric character reference named character reference work propvalues common use case eg icons fonts work raw strings fashion breaks scenarios yielding workaround found far using dangerouslysetinnerhtml bit unfortunate forces introduce another wrapper using basic html feature jsfiddle sample", "num": "3769", "d": "4/2015"}, {"title": "updating state fails componentdidmount client side using server side rendering", "body": "trying render react component server side html serve rerender client side included cut example whereby time x displayed x updated per second given simple class javascript reactcreateclass server side html generated correctly suitable datareactid attribute client side first line componentdidmount causes error displayed first second updated expected per second error message logged console error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser usually due forgetting using tables nesting tags like using nonsvg elements parent try inspecting child nodes element react id documentation componentdidmount states invoked client server immediately initial rendering occurs implies perfectly safe update state diverge state encoded initial server side html representation replace thissetnow settimeout thissetnow fixes things seems like nasty hack", "num": "3768", "d": "4/2015"}, {"title": "reactid bug", "body": "code datareactid dom element looks like bug", "num": "3766", "d": "4/2015"}, {"title": "recognize dom changes", "body": "hey im using react render treeview since nt found good replacement native javascript drag n drop sorting script sticked react renders everything fine dom looks like datareactid gt since using reordering elements dom manipulated directly looks like datareactid gt got mixed realized really fast anything good example remove reordered list item ref nt work onclick events working render displaying data another element figure way force react completely rerender complete component already tried forceupdate method within component nt seem recognize changes dom someone know better way tackle problem edit see example remove node rendered list update itemarray react nt recognize datareactid three removed dom", "num": "3764", "d": "4/2015"}, {"title": "react renders children", "body": "rendering react children dumping code using insertingreplacing nodes back unfortunately svg tag get back code like works fine actually using code like actually generating useless tags via see three broad solutions coded ugly solution keep track whether node child append markup tag instead adds couple checks html children flow something happy nt work safari browsers box nt innerhtmlinnersvg polyfill cleanest solution would change actually parse markup use html svg nodes feel like nt done performance reasons vs innerhtml right simply detect tag deal used createnodesfrommarkup hackish nt break everything sounds quite painless happy work pr fix familiar philosophy project would direction want thanks", "num": "3763", "d": "4/2015"}, {"title": "react render tbody components returns uncaught error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated", "body": "problem fiddle attempting dynamically update existing html table ajax data components tbody component renders collection datarows representing collection elements renders collection cells representing elements row understand html table without tbody element browsers insert one cause problems happening html table tbody wish replace get following error run code code succeeds simply change render table top table element course running firefox linux chrome reactjs extension linux help would appreciated thanks dave", "num": "3762", "d": "4/2015"}, {"title": "make reactshallowrendererrender act similar react", "body": "opinion return component instance calling second time unmount previously mounted component type key different make sense", "num": "3760", "d": "4/2015"}, {"title": "claim reactjsorg", "body": "learned objections claiming submit pr ghpages branch add cname file", "num": "3754", "d": "4/2015"}, {"title": "react blur may relatedtarget ie supported", "body": "reactbrowsereventemitter handling see react first check trap capturing event using ca nt browser supports use however problem pattern internet explorer implements implement ie ie supports addeventlistener trapping capturing events means ie react handlers ie null react handlers even though ie would support used", "num": "3751", "d": "4/2015"}, {"title": "differences jquery cdn url tutorialmd", "body": "getting started defined adding markdown defined unify", "num": "3750", "d": "4/2015"}, {"title": "implement syntax highlighting code snippets written markdown website", "body": "code snippets code snippets across homepage syntax highlighting features great also something similar resulting markdown output displayed given input great syntax highlighting like github markdown results code snippet present react webpage eg", "num": "3748", "d": "4/2015"}, {"title": "npm install fails linux without g installed", "body": "fresh installation ubuntu installed compiled version nodejs failed step error make g command found solves problem make sense put g dependency readmemd prerequisites section", "num": "3744", "d": "4/2015"}, {"title": "kill reacttools current form", "body": "shipped jstransform cli api reacttools intention deprecate reacttools entirely less thing support lets us ship transform updates outside react release cycle sure wo nt ship reacttools basically reship jstransform hawk watching repo wondering means options switch jstranform wrote migration guide switch babel supports many things jstransform nothing nt really suggest option wo nt unship reacttools npm long used versions correctly able keep chugging along x remove transforms x make sure build still works x make reacttools still works like one x make sure jsxtransformer still works make new one jstranform", "num": "3743", "d": "4/2015"}, {"title": "would nice reactcomponent could render undefined", "body": "idea would nice reactcomponent could render undefined opted property like isloading true find following quite bit something like follow might clean bit unaware possible already", "num": "3738", "d": "4/2015"}, {"title": "typescript support", "body": "rt", "num": "3736", "d": "4/2015"}, {"title": "update jsfiddles use ssl", "body": "couple jsfiddles site nt using ssl link ssl pages nt work fix official docs blogs posts published us work", "num": "3735", "d": "4/2015"}, {"title": "warnings tell tree component culprit", "body": "upgrading relatively large codebase react hit variety warnings latest warning use keyed object wrapped reactaddonscreatefragment object passed child exploring stack starts give hints culprit case element one many anything react make warnings debuggable", "num": "3733", "d": "4/2015"}, {"title": "react onclick event overridden android browser", "body": "maybe galaxy tried chrome standard browser clicking email address triggers native email intent js bin test case note mailto even anchor tag noticed used email address text button div click event started investigating seems like browser click event listener email container android opens email intent every part element safe click except email address try clicking email addresses test case using browser android device see galaxy problem widespread", "num": "3732", "d": "4/2015"}, {"title": "ca nt make checkbox work modal", "body": "info modal hidden beginning control state changing class previous code click checkbox inside modal makes changes state changed rendering modal visibility visible opacity modalhide visibility none opacity previous code checkbox nt work getinitialstate items checked true checked true checked true onchange id let items thisstateitems itemsevery item index gt itemid id itemchecked itemchecked return false return true thissetstate items items render checkboxlist thisstateitemsmap item index gt return current code funny works keep others render return thisstateshowmodal amp amp checkboxlist get works nt know reason", "num": "3731", "d": "4/2015"}, {"title": "error handling server side rendering", "body": "hi running reactrendertostring nodejs server get error messages error instead everything stops browser get response added proptypes give errors key inside object nt error message big problem trying learn react developers callback anything detect errors reactrendertostring thanks", "num": "3730", "d": "4/2015"}, {"title": "event handler triggered element container prevent bubbling", "body": "using react map library use react render elements container provided map library problem container prevent event bubbling checkout reactjs source code found event emitter listen html document depend event bubbling dispatch event make onclick handler work currently addeventlistener manually nt think elegant way wondering could react provide option bind event listener html elements instead entire document", "num": "3729", "d": "4/2015"}, {"title": "requiring polymer reactmount test breaks manual test several browsers", "body": "looking found requiring polymer actually webcomponentsjs breaks tests messages like commenting make tests green seems like polymer chrome override original dom constructors therefore errors occur chrome latest safari firefox tests gets failed due", "num": "3728", "d": "4/2015"}, {"title": "warn rendering htmlunknownelement", "body": "usually means user mixed lowercaseuppercase naming convention see could add message like warning tag unrecognized browser meant render react component start name uppercase letter check per tag development mode", "num": "3726", "d": "4/2015"}, {"title": "default props class syntax", "body": "support announcement says idiomatic way specify class state use simple instance property likewise getdefaultprops proptypes really properties constructor makes lot sense noticed small inconsistencies may worth rethinking using original syntax value returned seems used points component lifecycle constructor example inspect gets sent see default props applied nt seem case using class syntax means duplicate code example mean js class control extends reactcomponent constructor props propsvalue propsvalue super props componentwillreceiveprops props propsvalue propsvalue something props see duplicating expression one default obviously lot duplication using method could return method would work make sense restore method avoid unnecessary duplication another reactlike approach aware", "num": "3725", "d": "4/2015"}, {"title": "shallow rendering support context", "body": "shallow renderer render method currently accepts second undocumented argument values pass nt actually make pass component receives context object related", "num": "3721", "d": "4/2015"}, {"title": "smulateclick trigger browser default action", "body": "simple terms cause hash change intentional", "num": "3720", "d": "4/2015"}, {"title": "disable reactperf", "body": "working integrating react serverside rendering framework maintain sailsjs ironically causing serious slowdowns project point skewing perception certain things making development generally annoying report findings via chrome debugger separately anyone interested like disable docs state perf object documented exposed reactaddonsperf using reactwithaddonsjs build development mode using reactaddons using react npm module however see option disable thoughts", "num": "3715", "d": "4/2015"}, {"title": "componentwillunmount called server side", "body": "using rendertostring rendertostaticmarkup componentwillmount called corresponding componentwillunmount never called leads memory leaks server using mixin code cleanup whenever component unmounts", "num": "3714", "d": "4/2015"}, {"title": "component rendering null always triggers dom update", "body": "see behavior fiddle basically thing tag always updated dom check elements view chrome inspector see elements updated nt happen component explicitly returns instead", "num": "3713", "d": "4/2015"}, {"title": "documentation classes", "body": "lifecycle methods define modern react component classic component spec checked docs ca nt find much yet classes missing something", "num": "3710", "d": "4/2015"}, {"title": "spurious context warning getchildcontext nt pure", "body": "sahrens found case component creating new object time getchildcontext called nt optimal performance getchildcontext called render looks like actually calling twice render warning two results nt code var parent reactcreateclass childcontexttypes x reactproptypesnumber getchildcontext function return x mathrandom render function return var child reactcreateclass contexttypes x reactproptypesnumber render function return x thiscontextx reactrender documentbody produces warnings like", "num": "3709", "d": "4/2015"}, {"title": "long tap submitting form", "body": "hi observed mobile browsers specifically chrome firefox safari try submit form holding submit input button half second longer onsubmit events form get triggered comparison quick tap triggers onsubmit callbacks issue", "num": "3708", "d": "4/2015"}, {"title": "reactmultichildunmountchildren throws error thisrenderedchildren undefined", "body": "leaning question solid bug report solid repro started occurring application recently could well due bad implementation application question supposed able happen ie renderedchildren able undefined causing loop unmountchildren throw error might wrong occurring application code referring", "num": "3702", "d": "4/2015"}, {"title": "replace invariant better prod", "body": "idea pretty sure saw elsewhere reactnative maybe transform calls conditional wrapping call check condition anyway would reduce noop function calls otherwords becomes hell could replace get rid function call entirely though really nt matter much since going throw plus duplicate default string might end meaningless", "num": "3701", "d": "4/2015"}, {"title": "csstransitiongroup remove elements dom", "body": "check fiddle component limit log entries old entries removed dom", "num": "3700", "d": "4/2015"}, {"title": "prepend generated code comment transformed file", "body": "would beneficial prepend sort code automatically generated modify hand comment files built binary likely reduce developer confusion also simplify code reviews time wasted reviewing jsx source js output plus tools phabricator autodetect string changed files display appropriate message review suggest default behavior since nt think major downsides alternate options would include sort managed macro flag", "num": "3699", "d": "4/2015"}, {"title": "add method enabling full invariant warnings production", "body": "hi using react build views atom editor atom app running production mode react wo nt give us proper invariant errors looking code hundreds checks see code running production environment nt look trivial add pull request search replace production development started get errors wanted know special case come system use react plugin surrounding app production mode look seeing make atom run production mode feels like something react support rather atom support running production app development mode thanks time francois", "num": "3698", "d": "4/2015"}, {"title": "shallow renderer fails component", "body": "trying render component using preliminary shadow renderer support testutils simple reproducible test case issue var foo reactcreateclass contexttypes foo reactproptypesobject run jest test get looks like error thrown whenever component rendered thought perhaps context required although nt problems omitting actual app even using get exception", "num": "3696", "d": "4/2015"}, {"title": "iteration conditional tags jsx", "body": "point view react newbie one things stand xmllike syntax jsx respect templating language lack conditional iteration tags reason jsx anything like obvious compilation us write today would syntax valid xmllike example since would compiled specific javascript code anyways example shorter still point nt mean start holy war react absolutely great feels bit wrong basic iteration conditional instructions xmllike part whatever specific syntax would make templating parts jsx structured would make easier html css people tweak markup add without risk damaging control structures", "num": "3695", "d": "4/2015"}, {"title": "proptypesoneof proptypesshape", "body": "component expects one type object another tried variations cproptypes foo proptypesoneof proptypesshape x proptypesstring isrequired isrequired warning warning failed proptype invalid prop value supplied expected one null null bug limitation wrong jsbin", "num": "3692", "d": "4/2015"}, {"title": "detect component invalid props", "body": "way check existing component valid props instantiated addition existing console warning would great check could run later ie prior rendering component receiving new props", "num": "3686", "d": "4/2015"}, {"title": "react incorrectly reports isomorphic rendering differences", "body": "react unable reuse markup reason stated warning message seems react determines failed checksum actually tries determine part code different takes account things actually cause different checksum calculated easy way find real discrepancy think better way deal warning list places markup might discrepancy instead listing first place since likely actual problem", "num": "3685", "d": "4/2015"}, {"title": "erraccessorsnotsupported using", "body": "using shim sham v react always throws error erraccessorsnotsupported line also using reactrouter set env production fails raised separate issue also env production env production call stack", "num": "3682", "d": "4/2015"}, {"title": "member variables react class shared reference", "body": "create several instances react class using reactcreateelement class member variables shared instances arrays objects shared strings booleans etc feels horrible scary wrong bug another way want please look second realworld example", "num": "3681", "d": "4/2015"}, {"title": "upgrading makes app slow", "body": "hi trying upgrade react rendering app using much longer time rendering takes around ms takes ms performance impossible upgrade kind reason slow rendering thanks", "num": "3680", "d": "4/2015"}, {"title": "nested node lists gain extra tag top containing tag list item", "body": "already tried stackoverflow und might want check description also jsfiddle comments trying create nested navigation tree unordered lists list items containing tags sublevel lists gain unintentional tag link without description discovered html source also styled via css substitute tag eg behaviour disappears let nodetree reactcreateclass render function return thispropstreemap function node return nodetreeitem reactcreateclass render function return nodetreecontent reactcreateclass render function return null renders root item", "num": "3679", "d": "4/2015"}, {"title": "components extending reactcomponent break findallinrenderedtree", "body": "honest sure really bug ca nt tell components nt extend actually supported cursory look tests type checks seem indicate areshould run issues using way except trying test", "num": "3677", "d": "4/2015"}, {"title": "csstransitiongroup animate child calls getboundingclientrect componentdidmount", "body": "possibly react bug nt able reproduce vanilla jshtmlcss far demo encountered tried fade component contains reactswipe uses plain js library hood seems like call makes getboundingclientrect magically neutralizes transition causing effect one workaround seems deferring getboundingclientrect call using settimeout thanks greenjello reactjs", "num": "3672", "d": "4/2015"}, {"title": "html jsx compiler example page broken", "body": "get error referenceerror htmltojsx defined", "num": "3671", "d": "4/2015"}, {"title": "jsxtransformer changes source map return type", "body": "seems api change react covered documentation using option source map returned plain javascript object previously would return instance need call get actual source map intentional change got overlooked writing documentation", "num": "3670", "d": "4/2015"}, {"title": "key prop dom nodes actually called code", "body": "trying fix warning searching ended found finally managed get rid warning using instead fixed probably least docswarning", "num": "3669", "d": "4/2015"}, {"title": "onchange event propagated materialize css used class browserdefault", "body": "use materialize css framework react issue onchange event propagation way event fired called add class works pretty well sure react issue maybe also created issue materialize repo", "num": "3667", "d": "4/2015"}, {"title": "access css class name renderintodocument", "body": "jest tests like verify class names rendered elements best get react element dom access css class", "num": "3666", "d": "4/2015"}, {"title": "dynamically changing rowspan", "body": "problem trying update table initial table looks like rowspan works fine row table cell looks like looking length ordinates array axis number rows want row cell cover user clicks new ordinate pushed table rerenders end result reason although rowspan changes see inspecting elements reason table cell spans across rows bug made fiddle see problem", "num": "3661", "d": "4/2015"}, {"title": "reacttools installation fails", "body": "npmdebuglog info worked ends ok verbose cli c program filesnodejsnodeexe verbose cli c program filesnodejsnodemodulesnpmbinnpmclijs verbose cli install verbose cli g verbose cli reacttools info using npm info using node verbose node symlink c program filesnodejsnodeexe silly cache add args reacttools null verbose cache add spec reacttools silly cache add parsed spec raw reacttools silly cache add scope null silly cache add name reacttools silly cache add rawspec silly cache add spec silly cache add type range verbose addnamed reacttools silly addnamed semvervalid null silly addnamed semvervalidrange silly addnamerange name reacttools range hasdata false silly maptoregistry name reacttools silly maptoregistry using default registry silly maptoregistry registry silly maptoregistry uri verbose addnamerange registry flight fetching verbose request uri verbose request auth needed info attempt registry request try verbose request id http request get info retry retry error last attempt error connect eacces info attempt registry request try http request get info retry retry error last attempt error connect eacces info attempt registry request try http request get verbose stack error connect eacces verbose stack exportserrnoexception verbose stack tcpconnectwrapafterconnect oncomplete verbose cwd c error windowsnt error argv c program filesnodejsnodeexe c program filesnodejsnodemodulesnpmbinnpmclijs install g reacttools error node error npm error code eacces error errno eacces error syscall connect error error connect eacces error exportserrnoexception error tcpconnectwrapafterconnect oncomplete error error connect eacces code eacces errno eacces syscall connect error please try running command rootadministrator verbose exit true tks", "num": "3660", "d": "4/2015"}, {"title": "change event fired input typedate", "body": "hello seems like change event fired input typedate mobile firefox android please try following jsfiddle code example may something wrong code works well chrome safari desktop firefox mobile firefox tested firefox android case vanilla javascript works well case thank advance andrei", "num": "3659", "d": "4/2015"}, {"title": "document events pooled", "body": "ran issue event handler called passing function accessing inside function seems reacts synthetic events garbage collected event handler finished executing gave error tried access since properties removed event object fine easy fix destructuring event argument instead probably documented", "num": "3657", "d": "4/2015"}, {"title": "chrome synthetic drag drop events use domstringlist eventdatatransfertypes", "body": "broken chrome", "num": "3656", "d": "4/2015"}, {"title": "getdefaultprops working", "body": "working simple component default props react component class navigation extends reactcomponent getdefaultprops return user render consolelog thisprops thispropsuser user logged return else user logged return navigationproptypes user reactproptypesobject return navigation simply render without props got empty object console output using react chrome osx idea going wrong", "num": "3655", "d": "4/2015"}, {"title": "use statefy", "body": "hey folks implementing set react components explain section created statefy problem sure good practice afraid using large number components find would way better another way could please give feedback project would much appreciated thanks", "num": "3653", "d": "4/2015"}, {"title": "passing react class prop longer works", "body": "hi trying run following code using latest version react jsx var mycomponent reactcreateclass render function return var app reactcreateclass render function return reactrender documentbody however error thrown code ran code functions expected react someone figured due change way react classes autobinds methods therefore changing method fixes issue jsx render function var tmpl reactcreateclass render function return thispropsdata", "num": "3652", "d": "4/2015"}, {"title": "react failing script tags", "body": "react liking js render function return workaround", "num": "3649", "d": "4/2015"}, {"title": "exposing max tree depth", "body": "working treelike visualization child nodes nested inside parent node expand tree hit depth limit set reactinstancehandlesjs getting following error message wondering guys plans make depth limit configurable way bypass limitation", "num": "3648", "d": "4/2015"}, {"title": "update tutorial doc", "body": "plans update reworking internal documentation based tutorials use happy contribute back want us update code examples existing tutorial would best keep existing examples add underneath create new tutorial page eg", "num": "3647", "d": "4/2015"}, {"title": "onchange dropped input fields generated within iterator", "body": "using underscore mapping array generate list components example code upon rendering onchange dropped", "num": "3643", "d": "4/2015"}, {"title": "jsx watch error watch enospc", "body": "sometimes dont know reacttools aka try compile js command result well working done flag option try add result confused environment", "num": "3637", "d": "4/2015"}, {"title": "rename react element", "body": "want rename react like react work rename", "num": "3633", "d": "4/2015"}, {"title": "async lifecycle methods animation", "body": "trying integrate animations react project becoming quite struggle example error message component fade like fade old message fade new one animations javascript main problem ca nt fade previous error sync think would make sense lifecycle methods name async callbacks like", "num": "3631", "d": "4/2015"}, {"title": "ship", "body": "handful things ship patch release missing anything", "num": "3629", "d": "4/2015"}, {"title": "unable horizontally align elements", "body": "trying horizontally space divs demonstrated example works fine css paste example code html file try react like var react require react var page reactcreateclass displayname test render function return reactrender documentbody nt work correctly known issues react might missing wrong way", "num": "3626", "d": "4/2015"}, {"title": "reactproptransferer merge react native styles", "body": "existing merge strategy merges objects different merge strategy necessary react native uses ints instead objects also supports arrays believe backwardscompatible web react", "num": "3624", "d": "4/2015"}, {"title": "reactcsstransitiongroup warns removed transition progress", "body": "noeventtimeout timer cleared child unmounted transition progress causes false positive warning", "num": "3623", "d": "4/2015"}, {"title": "document defined server", "body": "saw bug year ago facebookreact fixed encountering running react server generate html one parent components variable whose value determined reaches child component need implement way child component pass back data parent read implemented parent component passes callback function prop child component child component calls callback componentwillmount function also tested calling callback getinitialstate callback calls setstate update state variable parent work serverside exception thrown document defined", "num": "3620", "d": "4/2015"}, {"title": "feature request show component name warnings", "body": "upgrading found really hard locate problems caused duplicated using may help component names warnings", "num": "3619", "d": "4/2015"}, {"title": "clarification patents grants termination clauses", "body": "firstly sincerely apologise wrong place asking question nt seen answered places think definitely relates usage reactjs consternation confusion facebook patent grant declared project including one specifically license granted hereunder terminate automatically without notice anyone makes claim including filing lawsuit assertion action alleging b right patent claim facebook invalid unenforceable lawyer interpret mean use react publicly voice concern quality validity patent owned facebook access reactrelated patents terminated automatically open sued patent infringement may little paranoid also wonder simply discussing issue grounds patent grant termination clause makes perfect sense terms protecting facebook unnecessary patent litigation desired purpose spirit actual purpose letter b clause confusing concerning please point discussion answer already taken place would terrific yet official word facebook issue please point arena going take place likely appropriate", "num": "3617", "d": "4/2015"}, {"title": "performance components", "body": "trying proof react faster angular problem code need generate list lines use input change value specific field inside angular fast binding however react ca nt code angular html code react html somebody help proof react faster angular", "num": "3616", "d": "4/2015"}, {"title": "binding classes onchange", "body": "using classes autobinding nt happen hopefully know expect inside function class undefined fact happens however inside function input component constructor obviously bind functions time problem resolved since thissetstate exists constructor calling thissetstate inside handlechange function getting error nothing happening confusing track admittedly immediately sure thought make issue open discussion", "num": "3613", "d": "4/2015"}, {"title": "record perf mesures every single render", "body": "app framework similar om always render top component flux store components listening single flux store event single global json state managed outside react ask question followup issue noticed reactrender takes callback former perf code looked like javascript render reactaddonsperfstart reactrender documentbody reactaddonsperfstop reactaddonsperfprintwasted render reactaddonsperfstart reactrender documentbody reactaddonsperfstop reactaddonsperfprintwasted next renders render takes callback seems make sens use instead considering reactrender synchronous javascript render reactaddonsperfstart reactrender documentbody function reactaddonsperfstop reactaddonsperfprintwasted render reactaddonsperfstart reactrender documentbody function reactaddonsperfstop reactaddonsperfprintwasted next renders question directly comes mind would behavior rendering triggered rendering callback called ideal world would seem could also could lead bad duplicated mesures even worse failure perf allow started twice example think usecase pretty common using react really pure way would nice explain document achieved without expecting weird side effects", "num": "3611", "d": "4/2015"}, {"title": "documentation componentwillreceiveprops confusing", "body": "read doc says invoked component receiving new props however clear still invoked component explicitly receive props example looks like default called every time updating phase developer control", "num": "3610", "d": "4/2015"}, {"title": "erro webkit qt", "body": "one know would reactjs work wkhtmltopdf curious exactly feature api react uses supported qt web view js libraries use work fine related", "num": "3609", "d": "4/2015"}, {"title": "jsx compiler issue html element", "body": "started making new ui components react faced following issue defined component state use state input tag inside render function gives following error reactifyerror usrlocalsrcstagileappappjs parse error line unexpected token parsing file usrlocalsrcstagileappappjs index linenumber column description unexpected token name reactifyerror filename usrlocalsrcstagileappappjs filename usrlocalsrcstagileappappjs stream seems jsx supports typevalue properties property like checked without value", "num": "3608", "d": "4/2015"}, {"title": "testutils shorthands", "body": "right two methods jest api shorthands yet methods ridiculously long like makes slow reading typing shorthands two methods testutils heart", "num": "3607", "d": "4/2015"}, {"title": "setting attribute style null breaks attribute", "body": "assign null style attribute reset works following changes value nothing fiddle demonstrating try push button several times seems like strange behaviour would nt surprised first attempt set stylenull failed nt silently breaks style attribute", "num": "3606", "d": "4/2015"}, {"title": "idea let touchable support press radius instead press rect", "body": "press rect defines rectangle around touchable component touch stays active thinking radius pair radii form oval around touchable component makes sense rectangle ways", "num": "3602", "d": "4/2015"}, {"title": "animation lifecycle order", "body": "bit confused using following render two different pages every lifecycle animation callback get tried simple transition fading element home fading element search weird going home search see logs search component rendered top home component homecomponentwillleave called would expect oder like way animations seems make sense following code would read home component leaves fade header search component enters fade header coffee home componentwillleave done gt consolelog home componentwillleave header velocity opacity duration complete done search componentdidenter gt consolelog search componentdidenter header velocity opacity duration", "num": "3601", "d": "4/2015"}, {"title": "thisprops available component constuctor", "body": "versions node react babel tested playing new syntax figured weird behaviour code snippet print fact another weird stuff print object property", "num": "3599", "d": "4/2015"}, {"title": "tests fail run manually firefox chrome", "body": "hi trying run jasmine tests firefox fail run tests chrome succeed know tests run phantom js headless chrome nt tests supposed run browsers apart assertion failed able spot seems thing changed order data attributes first tag tests dependent", "num": "3598", "d": "4/2015"}, {"title": "get regex props match error", "body": "sorry poor english gt lt show code var regextextfield reactcreateclass handlechange function e var patt thispropsregex get regex obj var val etargetvalue consolelog consolelog patt patt value val consolelog result patttest val render function return reactrender set regex obj documentgetelementbyid regextextfield match error patt dg value result true patt dg value match error result false patt dg value result true patt dg value result false match error use regexp var regextextfield reactcreateclass handlechange function e var patt regexp thispropsregex g use regexp var val etargetvalue consolelog consolelog patt patt value val consolelog result patttest val render function return reactrender use string documentgetelementbyid regextextfield match ok patt g value result false patt g value result true patt g value result true patt g value result true", "num": "3597", "d": "4/2015"}, {"title": "warn rendered dom node htmlunknownelement", "body": "bit react jsx uses upper vs lower case convention distinguish local component classes html tags afterthought remembered something lowercaseuppercase jsx tags good react citizen searched react site found documented new react took around minutes trace generally follow convention developed simple component mostly static site simply clones children adds thought simple utility therefore lowercased understand might change worth least adding warning uncommon html tag names better yet lowercase jsx tags also local variables", "num": "3596", "d": "4/2015"}, {"title": "rendering server", "body": "issue element rendered server client example recreates issue jsx const react require react const selecteddebug reactcreateclass displayname selecteddebug render return b c moduleexports selecteddebug attribute rendered server works fine browser also tried setting prop element nt seem make difference renders expected using however course throws warning console telling use either prop note code running node using babel transpiling tested using react amp missing something bug", "num": "3594", "d": "4/2015"}, {"title": "issue using reactaddons related error reported many others uncaught typeerror read property reactautobindmap null", "body": "managed isolate issue simplest component var react require reactaddons var test reactcreateclass render function return hello world moduleexports test using gives infamous replace everything works fine errors warnings incompatibility addons part missing anything", "num": "3593", "d": "4/2015"}, {"title": "uncaught typeerror read property reactautobindmap undefined", "body": "iv getting aforementioned quite often recently bundling modules browserify stack trace pin points exact point origin error generated avoid", "num": "3592", "d": "4/2015"}, {"title": "uncaught typeerror read property context null", "body": "uncaught typeerror read property context requestonreadystatechange mean", "num": "3585", "d": "4/2015"}, {"title": "suggestion major version switchover jsx cli always assume jsx js needing x", "body": "since jsx code advocated needing jsx extension would make sense major version release breaks backward compat switching always assume code jsx unless otherwise specified using x flag major semver bump would ensure existing projects affected realignment current advocacy practice", "num": "3582", "d": "4/2015"}, {"title": "reactaddonstestutilsrenderintodocument document wrong", "body": "argument rather", "num": "3581", "d": "4/2015"}, {"title": "consistently rendering new components body defeat purpose dom diffing", "body": "example something like repeatedly mean diffing nt taken advantage real dom rerendered every time something place prevent real dom rerendered every time", "num": "3577", "d": "4/2015"}, {"title": "use linkedstatemixin links radio buttons radiolink", "body": "react two types linked states valuelink checkedlink neither work well radio buttons mutable value attribute somewhat degenerate parameter additional work done understand radio button actually selected would great could add something akin valuelink text inputs would set state variable defined value like say first radio button clicked change state would variable named value probably achieved adding lines linkedvalueutilsjs arguable whether linked value could also serve group name even radio type implicitly set radiolink attribute believe syntax kept close link types plus typename verbosity gives context code usecase warrant feature", "num": "3573", "d": "4/2015"}, {"title": "document reactaddonsbatchedupdates", "body": "nt realise addons bundle would good get added docs would good also include example using something similar", "num": "3570", "d": "4/2015"}, {"title": "expose reactmount", "body": "sorry already exists form misunderstanding everything works certain libraries eg reacthotapi depend use wo nt work script available react bundle eg projects added single line essentially expose work would nice available default however apologies available default form", "num": "3568", "d": "4/2015"}, {"title": "improve error createelement undefined", "body": "", "num": "3565", "d": "4/2015"}, {"title": "strange contains method mounted dom input", "body": "got component renders following mount root component different props previously rendered node receive error render remove inputs form error goes away important note using contexts component lives inside root even though error everything works expected", "num": "3561", "d": "4/2015"}, {"title": "onchange propagation", "body": "one tricky thing experienced recently onchange input propagates nt set stoppropagate means input somewhere deep change propagate dom tree since using onchange generic components triggering also took find understand whats going question intentional maybe would make sense warning want handle input onchange propagate event curious would consider better practice avoid use onchange prop nonform components use stoppropagation thanks thoughts", "num": "3559", "d": "4/2015"}, {"title": "confuse two children key", "body": "using react mounting two components page already ensure key unique click button one alright click button two one crop two make confuse console show click one button click two button change work properly", "num": "3558", "d": "4/2015"}, {"title": "teardown testutils method", "body": "unittesting module used isomorphic app process writeup mocha consume individually run pretty good far however starting use testutils starts failing account apparently line kicked react clientmode bad need way kick react clientmode add teardown method aka", "num": "3557", "d": "4/2015"}, {"body": "something want requires thought around components rendered currently solution always renders something synchronously example wait returning result anyway tracking", "d": "4/2015"}, {"body": "great see rendering component serverside nodejsexpress using sync method feel right blocking thanks", "d": "4/2015"}, {"body": "reactrendertostring nt io would nt gain anything async current form", "d": "4/2015"}, {"body": "might benefit much async streaming markup generation follow along", "d": "4/2015"}, {"body": "thanks following", "d": "4/2015"}, {"body": "posted irc explained likely happening react renders multiple text parts wrapped span tags browser recognizes invalid html strips confusing react goes rerender guess nt wrap text span single piece guess makes intended behaviour surprising nevertheless perhaps error message updated give hint towards specific cause already mentions browser adding tbody first come across error", "d": "4/2015"}, {"body": "would say clearly bug anything passes initial render pass update render thanks flagging us", "d": "4/2015"}, {"body": "bug issue", "d": "4/2015"}, {"body": "closing favor also get explicit warning master", "d": "4/2015"}, {"body": "currently supported available without custom react build sorry", "d": "4/2015"}, {"body": "experimented came another repro one click button native click handler causes button go away input field rendered results exception repros seems something strange going calling within native click handler", "d": "4/2015"}, {"body": "works add event handler", "d": "4/2015"}, {"body": "thanks workaround behavior without design looks like bad behavior caused rerender happening synchronously within native click handler", "d": "4/2015"}, {"body": "get nt seem work element nt page rendering works expected suppose fluke program ran correctly safari though requirement nt documented anywhere appending document commented commit guess bigger issue method misnomer nt actually render document certainly fooled", "d": "4/2015"}, {"body": "cc gaearon iamdustan came twitter discussion possible way start migrating requiring single addon condoned way without reaching directly nt screw packaging", "d": "4/2015"}, {"body": "would greatly appreciated", "d": "4/2015"}, {"body": "sounds like good plan", "d": "4/2015"}, {"body": "zpao spicyj update docs change well", "d": "4/2015"}, {"body": "please", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "cc petehunt also wants gone", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "know entirely anecdotal story long ever considered joining react team friend recommend react framework check particular friend recommends check half dozen different librarieslanguages week nt particularly strong endorsement enough get open web page level duediligence one recommendations generally read homepage toollibrarylanguage maybe poke around example code see would look like insert mental index know exists ifwhen need call upon terminology foreign virtual dom jsx reactive data flow elements vs components file away nt really understand trying accomplish category things try solve problems experiencing saw sentence lots people use react v mvc suddenly clicked knew mvc understood react meant ui meant could define models controllers using tools could use react render view application critical point decided click download button needless say huge fan react anyway fully understand react understand sentence arguably bit misleading also see succinctly communicates react actually terms familiar", "d": "4/2015"}, {"body": "think would prudent add ditch mc althoughter instead implies react used also view frameworks succinct", "d": "4/2015"}, {"body": "something like since react makes assumptions rest technology stack easy try small feature existing project lots people start using react v mvc later realize might need c anymore", "d": "4/2015"}, {"body": "oh wait ryanflorence already said better missed initial comment", "d": "4/2015"}, {"body": "jimfb really succinctly said found really helpful line terse clear used analogy already understood well sure technically misleading already understand react found really helpful newcomer point tag line people nt know react likely know views mvc", "d": "4/2015"}, {"body": "kind ambivalent like phrased way keeps original ui meaning also suggests react better without mc baggage", "d": "4/2015"}, {"body": "thanks report keeps coming know sebmarkbage reluctant probably add hard error createelement", "d": "4/2015"}, {"body": "danschumann seen console warning though", "d": "4/2015"}, {"body": "would agree debugging error day error message read like issue ended forgot forward slash element still looking classes try debug issue see example", "d": "4/2015"}, {"body": "agnosticdev thanks looks like babel gives better error reassuring probably going end improving reacttools parser start recommend babel hopefully help transformrelated errors", "d": "4/2015"}, {"body": "spicyj thank recommendation", "d": "4/2015"}, {"body": "thanks bug report think probably looking react native repository located post issue repository think better able handle bug report repository actually tracking reactcore webversion react since issue probably nt related reactcore think makes sense close issue repository encourage post reactnative cc zpao spicyj case something jumps related reacttools npm bundling", "d": "4/2015"}, {"body": "bad delete", "d": "4/2015"}, {"body": "made change jsx parsing fix somewhat ambiguous cases around documented changelog also link npm package distributed find update places would issue case probably use full arrow really want keep ascii arrows", "d": "4/2015"}, {"body": "fast version seems creates contain text numbers nothing slow version additionally elements visible still dom logic functioning complicated surprised speed fun thing try speed test real world app would use", "d": "4/2015"}, {"body": "speed test looked test beat react unnecessary hidden inputs weird test agree would nt real project curious react got much slower inputs still little curious hidden element larger impact jsblocks", "d": "4/2015"}, {"body": "inputs somewhat complicated logic handle user interactions making sure state changes handled correctly unfortunately means probably code running using jsblocks probably could bit optimization inputs nt much setup user handling would interesting though sure valuable would actually typical cases handful inputs hidden inputs pretty contrived use case", "d": "4/2015"}, {"body": "really nt think necessary time could see applicable really large table needs inline editing even think could easily even render inputs render click pretty easily thanks info though cleared things", "d": "4/2015"}, {"body": "expected see", "d": "4/2015"}, {"body": "already documented along reasoning several alternatives say use unicode version quite simple already using hexadecimal version html character references may pad code leading zeros necessary course", "d": "4/2015"}, {"body": "string reason jsx compiler parses html entities react nt use unicode character instead", "d": "4/2015"}, {"body": "implies perfectly safe update state diverge state encoded initial server side html representation replace thissetnow settimeout thissetnow fixes things seems like nasty hack yeah code seems fine react able reuse markup work react emit warning still work suboptimally works defer update seem indicate react something wrong would say might related sure prcommit relevant though cc spicyj", "d": "4/2015"}, {"body": "example works fine mikecardwell chance get repro jsbin", "d": "4/2015"}, {"body": "probably mentioned earlier actually building entire document using react part body made difficult get example jsbin using external js file however put couple examples hosting realise nt convenient hope still useful html urls identical difference browserjs referenced inside working use settimeout thisupdatenow instead thisupdatenow", "d": "4/2015"}, {"body": "thanks example looks like happens fullpage rendering try rerun reactrender tag body nt parsed yet react ca nt find goes update think best us support pattern recommend call reactrender script tag end body dom ready maybe give warning", "d": "4/2015"}, {"body": "ahhh thanks sure missed", "d": "4/2015"}, {"body": "ran example react datareactid looks like browser version react using create jsfiddle demonstrates issue", "d": "4/2015"}, {"body": "means somewhere code everything goes stringified primitives edit least ps also definitely right code snippet looking id", "d": "4/2015"}, {"body": "syranide right thanks", "d": "4/2015"}, {"body": "react wo nt work manipulating dom works simple cases like adding something react leaf nodes moderately complex case like described work design instead change drag drop code manipulate data dom use react rerender dom wrote drag drop library might want check", "d": "4/2015"}, {"body": "gaearon said react never reads dom mutating reactrendered dom outside react nt supported", "d": "4/2015"}, {"body": "chieforz would recommend exploring flexbox property might work well since nt physically move nodes", "d": "4/2015"}, {"body": "getmarkupwrap already meant handle cases unfortunately looks like nt list since nt want add one time need alternative way deal", "d": "4/2015"}, {"body": "sounds great adapted solution use think could solution problem passing future root node check root node element instance way nt hardcode svg tags ca nt share test case using working nodes throwing think something like could prworthy solution react", "d": "4/2015"}, {"body": "mutexjp started empty table added already one added browser mutexjp browser add one immediately", "d": "4/2015"}, {"body": "case like mentioned irc starting existing table empty tbody like col", "d": "4/2015"}, {"body": "render replace replace children rendering end", "d": "4/2015"}, {"body": "reactrender documentation states contents container node case gets replaced note reactrender replaces contents container node pass future may possible insert component existing dom node without overwriting existing children somehow case element", "d": "4/2015"}, {"body": "docs correct container node case html react remove changes contents contents case another end", "d": "4/2015"}, {"body": "yeah unfortunately way manage tbody react reasons already mentioned", "d": "4/2015"}, {"body": "two tbodies actually completely valid point troll anything though true", "d": "4/2015"}, {"body": "stonecypher true nt help", "d": "4/2015"}, {"body": "cody spicyj thank much responses guess part problem misinterpretation docs indeed thought container node would replaced either way know manage tbody react take different approach thanks", "d": "4/2015"}, {"body": "currently rendering two different components different types test mess", "d": "4/2015"}, {"body": "cc graue", "d": "4/2015"}, {"body": "looks like could use bail reconciling reset", "d": "4/2015"}, {"body": "record works better js var shouldupdatereactcomponent require shouldupdatereactcomponent reactshallowrendererprototyperender function element context var transaction reactupdatesreactreconciletransactiongetpooled thisrender element transaction context reactupdatesreactreconciletransactionrelease transaction return thisinstancegetpublicinstance reactshallowrendererprototypeunmount function thisinstance thisinstanceunmountcomponent thisinstance null reactshallowrendererprototyperender function element transaction context var prevelement thiselement thisinstance amp amp shouldupdatereactcomponent prevelement element thisunmount thisinstance var rootid reactinstancehandlescreatereactrootid var instance new shallowcomponentwrapper elementtype instanceconstruct element else thisinstancereceivecomponent element transaction context thiselement element prepare pr agree changes", "d": "4/2015"}, {"body": "gaearon said already supposed supported thinking behavior test maybe support suggested way well approach testing updates help", "d": "4/2015"}, {"body": "oh see nt understand example first guess could use approach still prefer consistency react method also going really need logic related thing going test", "d": "4/2015"}, {"body": "would cause reactjsorg canonical site react may want since nt control domain", "d": "4/2015"}, {"body": "nt look like automatically redirect facebookgithubioreact ex fine", "d": "4/2015"}, {"body": "nt want canonical link still plans eventually make reactjscom thing content nt work ghpages redirect would fine could update get guess need different ghpage project", "d": "4/2015"}, {"body": "checked bunch org pages nt cause github version redirect would purely additive", "d": "4/2015"}, {"body": "cc syranide resident event expert days", "d": "4/2015"}, {"body": "jsfb haha familiar events actually anyway kind related value meant go available elsewhere event would obviously easy normalize doubt makes unlikely canwant fragile etc etc generally speaking though never need access react curious need", "d": "4/2015"}, {"body": "related separate since done browser failed implement relatedtarget react exposing relatedtarget implemented browser fix bug probably simple change using focusin wherever supported instead using addeventlistener nt supported ie flip order make use relatedtarget gone extra effort make navigation respond keyboard based waiaria recommendations keyboard function relatedtarget relevant form close blur functionality navigating keyboard menu items given focus one time focus leaves menu user tabbed clicked somewhere else taken action moved focus menu menu closes form delegated blur event required trying tell focus left region rather single form field longer focused fires every single blur event within region relatedtarget necessary tell difference user moving one menu item another focus leaving menu bonus focus menu container user normally opened menu click get free way automatically close menu user clicks somewhere else type menu closing actually lot less hack methods like trapping clicks body covering page transparent overlay etc", "d": "4/2015"}, {"body": "nice find use version interested creating pr update", "d": "4/2015"}, {"body": "zpao yes looking think attempt unify would like create pr soon", "d": "4/2015"}, {"body": "suggesting make syntax highlighting output markdown example", "d": "4/2015"}, {"body": "zpao yeah since already implemented page snippets great output results markdown example syntax highlighting", "d": "4/2015"}, {"body": "going simple markdown example mechanism highlighting docs vastly different", "d": "4/2015"}, {"body": "kind annoying yea might need something like compilers dependency binary npm module one dependencies depends even contextify nt call need g install node npm via install well seems like since requirement many modules", "d": "4/2015"}, {"body": "used recommended approach debian ubuntu based distributions part installation see point contextify setup windows even complicated", "d": "4/2015"}, {"body": "return instead work", "d": "4/2015"}, {"body": "nt realize option wonderful thanks always", "d": "4/2015"}, {"body": "thought talked guess maybe release notes briefly docs work support pattern", "d": "4/2015"}, {"body": "help maintain unofficial type definitions might find useful usage examples test files", "d": "4/2015"}, {"body": "nt plan maintain ts definitions use ones vsiao linked things typescriptcompatible let us know already able use typescript classes react components like class", "d": "4/2015"}, {"body": "thanks", "d": "4/2015"}, {"body": "issue typescript repo might interested", "d": "4/2015"}, {"body": "list reactjs ones see checktrack x x x x x note zpao deduped made links", "d": "4/2015"}, {"body": "nonreactjs fiddles locations x fiddle wrong owned reactjs might worth forking reactjs account", "d": "4/2015"}, {"body": "copy updated ones already updated thinking react docs page broken anyway one http docs works update edit already docs loading version fiddle also broken anyway might fiddle integration script works might better link http nt might best link instead embedding", "d": "4/2015"}, {"body": "super easily unfortunately break warning debugger able see objects involved perhaps even problematic render function looking stack", "d": "4/2015"}, {"body": "best include context always easy", "d": "4/2015"}, {"body": "look owner one", "d": "4/2015"}, {"body": "thread owner flattenchildren nt easiest already warn element creation time though cases", "d": "4/2015"}, {"body": "think feature android browsers unrelated react see", "d": "4/2015"}, {"body": "ended using try catch like", "d": "4/2015"}, {"body": "glad figured nt reactspecific error throw component bubbles rendertostaticmarkup however handle errors app", "d": "4/2015"}, {"body": "use work handling event capture phase things may slightly different nt add event listeners directly element article good read browsers improved years still generally good idea especially library used build large applications", "d": "4/2015"}, {"body": "onclickcapture work either guess way propagation cancelled ok looks like bind event manually solution", "d": "4/2015"}, {"body": "jsfb take look past context changes", "d": "4/2015"}, {"body": "probably add logic validatedangeroustag inside reactdomcomponentjs already runs per tag note runs dev prod mode safety new check probably wrapped", "d": "4/2015"}, {"body": "default props already merged componentwillreceiveprops called", "d": "4/2015"}, {"body": "default props already merged componentwillreceiveprops called far tell never called using class syntax", "d": "4/2015"}, {"body": "correct instead write js class control extends reactcomponent componentwillreceiveprops props something props controldefaultprops value work", "d": "4/2015"}, {"body": "ahh sorry see documentation thanks", "d": "4/2015"}, {"body": "yes simulate click event dispatch ie run react handler wo nt actually perform default behavior", "d": "4/2015"}, {"body": "flag set wo nt run see", "d": "4/2015"}, {"body": "probably want make sure environment variable set disables lot debugging slow react including reactperf stuff setting noop return function passed", "d": "4/2015"}, {"body": "probably want make sure environment variable nodeenv set production yea thing production sort sledgehammer case since also turn debug settings bunch libraries using well reactperf flag thanks tip check global object", "d": "4/2015"}, {"body": "tip use webpack use importsloader inject var specific module", "d": "4/2015"}, {"body": "setting seems effect still thing rendering large number elements sucking overall processing power required render", "d": "4/2015"}, {"body": "intent using react development mode recommendation would fork version react using modify functions reactperfjs always noops use fork performance testing aware many checks react slow performance development mode may skew results going close issue nt look like anything concrete react differently feel free continue discussing", "d": "4/2015"}, {"body": "tjwebb depending build react using gets compiled global replace setting would effect need enabledisable dev part build process compiling react", "d": "4/2015"}, {"body": "also unlikely reactperf causing perf problems disabled measurement disabled calls wrapped function directly barely overhead seeing hot spot may artifact profiling tools", "d": "4/2015"}, {"body": "component nt actually mount server use instead hook things way mixins acting lifecycle called server", "d": "4/2015"}, {"body": "nt work need initialize things client server example reactbacon initializes event streams need work client server cleanup also needs happen server", "d": "4/2015"}, {"body": "decision call componentwillunmount server side intentional ca nt call componentwillunmount server side indicates time component cleanup shutdown calling would mean components get cleanedup ever get sent client obviously wrong moment components attempt detect runtime environment presence lack thereof particular features thereby differentiating serverbrowser environments work feature detection fragile prone breaking eventually may provide way users build isomorphic components severside clientside environment allowing components aware local environment features available environment still early discussionidea phase issues tracking ideas area including ideally components get renderable data directly parent instead sideloading data eliminates vast majority cases would otherwise inclined open resources server side following simpledatafromparent model also makes code much easier reason since current solutions runtime detection reorganize app get renderable data parent since issues tracking request going close issue feel free continue conversation", "d": "4/2015"}, {"body": "jsfb thanks reply problem considering singular component existing sever client ca nt call componentwillunmount server side indicates time component cleanup shutdown calling would mean components get cleanedup ever get sent client obviously wrong component actually move server client would need provide clean serialization mechanism would allow serveronly resources cleaned something would satisfactorily solve issue otherwise attempting abstract component server amp client way leaky abstraction cause writing issue regarding implies root node orchestrating entire state application ideal nontrivial systems hard make case coupling seems offer little expressive power flexibility additional step component lifecycle example nt address cleanup provide clean abstraction details callback based promise based stream based asynchronous programming see comments bring thread sounds promising could make many things simpler us using react rfp dataflow controlflow models might something coming line possibly forked react might interested going route nt address problem directly runs counter key notions symmetry isomorphism", "d": "4/2015"}, {"body": "think thing affects performance", "d": "4/2015"}, {"body": "nice find chenglou added support perhaps wants look", "d": "4/2015"}, {"body": "looking little bit perhaps nt know talking issue seems case gets prevelement empty element nextelement null sent returns false elements null thus making element unmount mount sure yet normalization emptyelement happen though anyway saying really basic stuff always fun dig react internals learning works", "d": "4/2015"}, {"body": "dupe think", "d": "4/2015"}, {"body": "bit information classes bottom reusable components", "d": "4/2015"}, {"body": "thanks agnosticdev still need fullblown example methods use think", "d": "4/2015"}, {"body": "yeah would really helpful", "d": "4/2015"}, {"body": "ah added notes component api section eg note replacestate nt work lifecycle methods", "d": "4/2015"}, {"body": "fixed removes warning entirely part switch parent context", "d": "4/2015"}, {"body": "going leave open case want patch release", "d": "4/2015"}, {"body": "wo nt take would need something different", "d": "4/2015"}, {"body": "getchildcontext supposed idempotent recalled render phase referential equality might screw warning even though idempotent assuming value semantics", "d": "4/2015"}, {"body": "yes sorry unclear random call demonstrate original case instantiated valuelike object time arguments", "d": "4/2015"}, {"body": "issue one context comes owner hierarchy one comes parent hierarchy value semantics two distinct objects could represent value auxiliary data nt contribute user interpretation value eg one values object might logger something could add hacks attempt smarter definition equality ultimately going futile effort catch everything could also add hack find component provided variable bail component also potential issues might lead warning popping even subtle situations terms prioritization non fatal warning occurs rare cases thus nt seen nt really great solution fix would useful point release code removed entirely intuition unless surprising number users hitting might let people know going teach making code idempotent either way update gist people know going sebmarkbage seem sufficient patch point release", "d": "4/2015"}, {"body": "gist updated", "d": "4/2015"}, {"body": "spargonaut form getting submitted event bubbling demo replicating issue help troubleshooting", "d": "4/2015"}, {"body": "pretty sure never undefined point nt really touched code perhaps spicyj sebmarkbage say certainty", "d": "4/2015"}, {"body": "could something else throwing therefore causing undefined point nt good error recovery one error likely subsequent ones like one work error boundaries help could also strange vm bug sometimes found similar errors logs android phones using chrome anything say source errors", "d": "4/2015"}, {"body": "might end meaningless believe done intentionally hand hotspots would seem guess one could argue might make sense simply always use inline style drop argument rather adding another transform", "d": "4/2015"}, {"body": "guess one could argue might make sense simply always use inline style drop argument rather adding another transform tough sentence parse saying always write optimized form would say first way easier read human", "d": "4/2015"}, {"body": "consider something like decorator since jsx transformed anyways invariant feels like contract codes could readable separate warning real implementation thoughts", "d": "4/2015"}, {"body": "complex invariants nt strictly arguments might option cases nt cover us", "d": "4/2015"}, {"body": "could related", "d": "4/2015"}, {"body": "yeah issue works correctly master long keep tab focused background tab run though", "d": "4/2015"}, {"body": "would use webpack bannerplugin build tools likely similar plugins advantage full control text message", "d": "4/2015"}, {"body": "bad idea however probably going add features reacttools point would suggest giving babel look", "d": "4/2015"}, {"body": "clear building views plugin nt control runtime development mode", "d": "4/2015"}, {"body": "cc bolinfest guys done anything work around sounds like something possible force atom francoislaberge really sure would work especially since prod build actually strips friendly messages entirely npm package basically atom using already build step makes possible get dev prod build switching think actually may misunderstood might way make installing react using one ships atom still", "d": "4/2015"}, {"body": "zpao installing react one access within react get access", "d": "4/2015"}, {"body": "give precompiled dev build one ship cdns prebuilt files well using anything make sure always use otherwise hit problems multiple reacts using party components wo nt interact well reason multiple reacts", "d": "4/2015"}, {"body": "zpao hmmm yeah going get messy quickly reusing thirdparty components much thanks info though", "d": "4/2015"}, {"body": "think known issue shallow rendering cc jsfb graue", "d": "4/2015"}, {"body": "matthewgertner thanks report context nt meant supported shallow rendering ie nt tested looks like may able work around problem passing object second argument jsfb looks like additional argument added shallow rendering api thinking default empty object", "d": "4/2015"}, {"body": "thanks graue workaround works great see posted fix well looking forward", "d": "4/2015"}, {"body": "agree zpao answer", "d": "4/2015"}, {"body": "yea stand response crux argument language already supports constructs use language jsx supposed simple really nt want people learn new language use reactjsx answer loop jsx way loop js", "d": "4/2015"}, {"body": "think want basically enum", "d": "4/2015"}, {"body": "oh darn thanks", "d": "4/2015"}, {"body": "problem first one willing bet wo nt last", "d": "4/2015"}, {"body": "proptypes functions call manually verify props could always iterate props manually call proptype function verify type", "d": "4/2015"}, {"body": "much true really super useful joshfrench believe get warning receiving new props actually running validations creating new element use update instance prior rendering props immutable warn mutations get talked bit launched precisely validation important lots places happen nt updated yet would encourage otherwise nt think going expose anything check proptypes given point", "d": "4/2015"}, {"body": "makes sense needed nudge obvious direction question less props mutated fact implementing stricter validation warning eg rendering know ahead time component passed invalid props upstream data source thanks", "d": "4/2015"}, {"body": "discussion already", "d": "4/2015"}, {"body": "hmm trycatch expectation throwing sham environment catch simply nt frozen props nt production sure exactly hitting", "d": "4/2015"}, {"body": "yeah see sorry hard get handle app working spent day stripping starting absolute nothing see happening run nt envproduction ie reports exception thrown caught hangs stupid popup message box screen unless fully disable debugging error reporting browser completely really fault know really sucks libraries like reactrouter also die actually even manage route app see absolutely nothing browser environment fault router setting properties calling define properties directly check environment seems fall shim could befit knowing env production shim maybe passing better value rather throwing react something really deal cheers", "d": "4/2015"}, {"body": "codeuniquely sounds like saying development sucks nt much correct action item end close one think still react bug", "d": "4/2015"}, {"body": "much close apr jim notifications githubcom wrote codeuniquely sounds like saying development sucks nt much correct action item end close one reply email directly view github email scanned netintelligence", "d": "4/2015"}, {"body": "seems work assigned object prototype class really surprising values probably part component state instead", "d": "4/2015"}, {"body": "js works objects effectively always passed reference would see thing use typical js protoypes explicitly nt clone everything object pass us becomes pretty unscalable solution autobind functions create new functions instance due binding felix said probably use state since returning new object function nt reference issue", "d": "4/2015"}, {"body": "make sure unintentionally running debug mode performance regression debug version react", "d": "4/2015"}, {"body": "thanks", "d": "4/2015"}, {"body": "looked fiddle problem comes inside another allowed", "d": "4/2015"}, {"body": "ah crap absolutely correct feel officially stupid close", "d": "4/2015"}, {"body": "warning", "d": "4/2015"}, {"body": "supposed checking setstate sure best fix sebmarkbage seems like could look see internal instance instance reactcompositecomponent", "d": "4/2015"}, {"body": "fixed seems like docs rebuild since", "d": "4/2015"}, {"body": "updated nobody put right labels pr make sure got cherrypicked done though might take minutes caches clear page work properly", "d": "4/2015"}, {"body": "oversight aligned jsxtransformer use code reacttools opposed duplicating efforts slight variation originally changed reacttools last year made jsxtransformer use reacttools nt notice bit postprocessing reacttools add bit changelog", "d": "4/2015"}, {"body": "make sense suspect copy react modified probably search replace mistake", "d": "4/2015"}, {"body": "yeah nt react sure got code search key config see built copy well", "d": "4/2015"}, {"body": "repro would great materialize perhaps modifying dom kind sounds like big nono may update styles props react managed nodes without errors clonedreplacedmoved invariant error waiting happen", "d": "4/2015"}, {"body": "think guilty materialize creates fake select see demo", "d": "4/2015"}, {"body": "lot dom mutation happening use materialize custom component guess face similar problems components maybe materialui suitable requirements", "d": "4/2015"}, {"body": "thank guys bloodyowl right forgotten could issue charca yes know materialui tried materialize felt mature features nt real issue", "d": "4/2015"}, {"body": "actual react bug closing fact materialize modifying dom means probably going tricky time things probably want build wrapper components make things work better good luck", "d": "4/2015"}, {"body": "yes actually answers helped thanks", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "yaycmyk said work", "d": "4/2015"}, {"body": "ah works thanks wish example documented somewhere along jest testutils", "d": "4/2015"}, {"body": "put work ie zpao yet another reason drop optimistic traversal ask perhaps something like", "d": "4/2015"}, {"body": "syranide master warning least", "d": "4/2015"}, {"body": "spicyj fantastic", "d": "4/2015"}, {"body": "thanks help easy fix would probably never found think warning sort including table maybe somewhere documentation nt noticed", "d": "4/2015"}, {"body": "rudmanmario meant comment sorry unclear next release warn explicitly suggest adding tbody tag", "d": "4/2015"}, {"body": "logged administrator privileges", "d": "4/2015"}, {"body": "looks like permissions error nt run anything install nt think anything anything else sounds like issue take npm", "d": "4/2015"}, {"body": "successfully installed using administrator use windows accounts failure ths guys", "d": "4/2015"}, {"body": "cc syranide salier need special case amp listen different event", "d": "4/2015"}, {"body": "cc spicyj think", "d": "4/2015"}, {"body": "event objects pooled use preserve object agree documented though", "d": "4/2015"}, {"body": "ah interesting nt know", "d": "4/2015"}, {"body": "surprised plus curious motivation", "d": "4/2015"}, {"body": "think motivation performance expensive create lots short lived objects puts lots pressure javascript garbage collector onclick would nt big deal mousemove event could fire often said issue keeps coming surprisingconfusing part framework lots people spend lots time debugging issue realize problem might make sense consider changing cc zpao spicyj yes document going keep behavior", "d": "4/2015"}, {"body": "jsfb", "d": "4/2015"}, {"body": "drag drop events normalized react moment", "d": "4/2015"}, {"body": "react seems inconsistently unintentionally normalizing dnd events certain browsers", "d": "4/2015"}, {"body": "entire implementation extends syntheticmouseevent normalized though currently normalized", "d": "4/2015"}, {"body": "classes need defaultprops static property navigationdefaultprops", "d": "4/2015"}, {"body": "thanks maybe update documentation iamdustan happy send pr", "d": "4/2015"}, {"body": "commentary docs agree like see better docs class syntax guy happened see issue really quickly", "d": "4/2015"}, {"body": "reference might good also put documentation make bit easier find going close since invalid love see pr docs", "d": "4/2015"}, {"body": "think also seen runtime warning", "d": "4/2015"}, {"body": "spicyj really though", "d": "4/2015"}, {"body": "tjwudi thanks looks like oversight fix", "d": "4/2015"}, {"body": "seems like bad practice exposing internals general advance afaik create stateless components provide stateful wrapper components may preferable even interested stateful components separates logic presentation", "d": "4/2015"}, {"body": "actual issue closing feel free discuss ideally mailing list", "d": "4/2015"}, {"body": "andrerpena yeah agree syranide sounds like bad practice design use react code mutable autocompletestate object created amp held controllercomponent pass autocomplete component autocomplete component free manipulate state object api state object expose state autocomplete desires expose way state still held controllercomponent internal state also opaque controller single variable instead whole mess internal variables controller nt knowcare personally note nt opinion react teamcommunity large extremist view think components either purely statelogic user interface behave like controller purely render functions stateless view data always pull component internal state mutable object keep controller component single internalstate variable subcomponent avoid long chains callbacks variablesidontcareabout model syranide mentioned turns particularly good examples like one highlighted means controller easily read value text component public api component state variable rather responding callbacks set variable controller remembers value parent never needs reference child component never needs respond nightmarish hell callback chains also gives parent easy way resetting child component throw away internalstate object create new one something easily achievable children state course still plenty use cases warrant callbacks individual props use goodengineeringdiscretion nt go crazy singlevariable idea generally anything parent likely controledit separate anything internal component state", "d": "4/2015"}, {"body": "jsfb quick sidequestion guys good component naming convention pattern", "d": "4/2015"}, {"body": "usually try pick name makes sense component building biggest recommendation give given component eg give class defines components state name combines component name word eg generally use word container describe controller holds ui components common community mostly word internally facebook", "d": "4/2015"}, {"body": "help", "d": "4/2015"}, {"body": "nt seem intentional also ca nt repro master track fixed might worth backporting cc sebmarkbage spicyj", "d": "4/2015"}, {"body": "might something binding used effectively call bound function however switched calling bound function however calling native bind construct operation invoked call function problem still work production build polyfill overrides", "d": "4/2015"}, {"body": "actually particular issue probably related might secondary issues pattern", "d": "4/2015"}, {"body": "posterity never ever js render function var tmpl reactcreateclass render function return thispropsdata creating new class every render slow nt reconcile", "d": "4/2015"}, {"body": "clear instead js var template reactcreateclass render function return thispropsdata var app reactcreateclass render function return", "d": "4/2015"}, {"body": "fixed", "d": "4/2015"}, {"body": "specific expect happen happened instead", "d": "4/2015"}, {"body": "probably want even script probably wo nt execute browsers wo nt execute scripts innerhtmled", "d": "4/2015"}, {"body": "sweet would work etc browser nt supposed read anyways grab later componentdidmount compile shaders ironically ended using template strings outside jsx ends syntax highlight vim even better", "d": "4/2015"}, {"body": "nt objection bumping limit number millions could probably get rid check", "d": "4/2015"}, {"body": "think new way things probably update existing examples feel free submit pull request cc sebmarkbage zpao", "d": "4/2015"}, {"body": "ready recommend classes newcomers see details", "d": "4/2015"}, {"body": "spicyj right clarify blockers want switch imo property initializers reaches stable polyfill recommend observe pattern released primary recommendation flux stores mixins publish article describing alternatives mixins popular libraries might want use moves away mixins", "d": "4/2015"}, {"body": "agree ready newcomers updating tutorial examples let stick plan thanks guys", "d": "4/2015"}, {"body": "going close likely forget ever update even update docs wo nt forget come back actually making change ready though", "d": "4/2015"}, {"body": "seems unlikely post repro case", "d": "4/2015"}, {"body": "oops never mind inside iterator function nt component passing third argument using arrow function instead solve problem", "d": "4/2015"}, {"body": "spicyj oh man sorry noise total noob mistake think got result normally get undefined function error similar resulted attribute missing think stopped looking code altogether focused see scope resulted hardly different binding wonder though react could anything produce better error case example let consider object perhaps simple validation whereby onchange attributes attributesonchange warning could produced least thanks", "d": "4/2015"}, {"body": "yeah talked unfortunate nt think going change anything sort thing static type system like flow able catch though", "d": "4/2015"}, {"body": "ah see case made enabledisable thanks", "d": "4/2015"}, {"body": "based threads around internet seems thing presumably found things along reload sysctlconf nt know much else except maybe gracefully handle error really problem commoner since jsx command really wrapper amp applying transform would mind filing posterity", "d": "4/2015"}, {"body": "thanks feedback zpao research error means disk space available clearing work back normally", "d": "4/2015"}, {"body": "need assuming use jsx createelement", "d": "4/2015"}, {"body": "get", "d": "4/2015"}, {"body": "shipit", "d": "4/2015"}, {"body": "zpao missing would lovely fixed", "d": "4/2015"}, {"body": "like see fix", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "perhaps mixed works", "d": "4/2015"}, {"body": "spicyj modified css make container class css selector sorry leaving furthermore demo posted nt work resize window divs right next", "d": "4/2015"}, {"body": "see subtle difference html whitespace adjacent elements jsx whitespace removed two tags different lines usually want add back explicitly writing", "d": "4/2015"}, {"body": "spicyj ah thanks tip", "d": "4/2015"}, {"body": "think things actually using reactproptransferer iirc avoided possible already noted deprecated favor spread props cloneelement respectively something trying ca nt use use", "d": "4/2015"}, {"body": "cc vjeux hopefully thought encountered", "d": "4/2015"}, {"body": "zpao take look using familiarity seeing react native core code use", "d": "4/2015"}, {"body": "cloneelement takes magic might require little bit work trying get away magic see bit", "d": "4/2015"}, {"body": "kassens could help reproduce bug prepared example click item list start animation seconds additionally output debug info console clearly shows also warning takes place seconds timeout violated triggered function executes seems child unmounted transition progress design please correct wrong", "d": "4/2015"}, {"body": "dom ssr add kind abstraction test dom present", "d": "4/2015"}, {"body": "way pass data parent component serverside state variable parent component needs set order page generated properly hence reason need happen serverside client", "d": "4/2015"}, {"body": "parents children still communicate normal way callbacks need right places lifecycle methods including wo nt called server side fact relying child information seems imply need know something child layoutsizeetc blocking issue going relying browser figure component layoutsize information wo nt available server side nt browser exception thrown within react thrown within react sounds like might bug provide piece example code crashes", "d": "4/2015"}, {"body": "well use case creating breadcrumbs using reactrouter layout component rendering breadcrumbs dont know breadcrumbs page components child component layout component created", "d": "4/2015"}, {"body": "already deleted code implemented workaround code originally looked something like reactrouter layout page components home etc call breadcrumbcallback something wrong", "d": "4/2015"}, {"body": "think use figure breadcrumbs parent container reactrouter breadcrumbs", "d": "4/2015"}, {"body": "yeah thats actually workaround using right correct wrong still bug react", "d": "4/2015"}, {"body": "single render pass server abstractly pattern nt really make sense server parent already rendered effectively trying kick render call function sets state parent seem like nt throw bad way though bet blame sebmarkbage changes made state queue", "d": "4/2015"}, {"body": "bishtawi convinced bug react ssr think bunch reasons want enforce singlepass rendering nothing else keeps open possibility streaming output client ca nt think good reason child pass kind information back parent use case sounds like antipattern maybe bug error message nt best behavior probably correct going close issue feel free continue discussion", "d": "4/2015"}, {"body": "determined callbacks parents life cycle methods typically antipattern actually opens lot strange timing issues example ref resolution order changed refs parent resolved child componentdidmount called jsfb ca nt proclaim antipattern without providing alternative solution also fix error message nt want support", "d": "4/2015"}, {"body": "sebmarkbage thought tmbtech provide alternate solution start handling layout internally instead deferring browser intuition nt want support fixing error message makes sense maybe newdifferent issue", "d": "4/2015"}, {"body": "alternative solution presented makes use something specific reactrouter", "d": "4/2015"}, {"body": "well general solution parent whatever calculation child possibly calling shared library outside layout parent information child since child presumably got parent reactrouter case shared codedata solution general solution", "d": "4/2015"}, {"body": "one neat way static method child call rendering forward call deeper needs neither solutions solve case parent child vastly detached passing info intermediate abstractions prohibitive exact problem layout prerender suppose solve", "d": "4/2015"}, {"body": "case think factory already component class name add breakpoint warning line look stack see exact code path caused", "d": "4/2015"}, {"body": "spicyj actually tried nt figure access property side objects", "d": "4/2015"}, {"body": "look stack trace one frames application code accessing", "d": "4/2015"}, {"body": "spicyj mean component called alright strange thx anyway", "d": "4/2015"}, {"body": "related", "d": "4/2015"}, {"body": "thanks syranide sure escaped notice", "d": "4/2015"}, {"body": "advocate software patent reform affects validity facebook patents activate termination clause patent grant potential likely legal consequences activating termination clause patent grant", "d": "4/2015"}, {"body": "jokeyrhyme part team offer", "d": "4/2015"}, {"body": "let keep discussion issue somebody authority comment able", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "something like", "d": "4/2015"}, {"body": "compare angular need performance react convince coworkers change technology", "d": "4/2015"}, {"body": "henricavalcante neither absolutely fastest nt work like meaningful metric construct cases react win hands cases angular wins hands react large tend much manageable applications scale performance usually predictable hotspots mostly easily addressed anecdotally case angular friends tend degrade applications scale becomes hard something regardless first running debug version react significantly slower specific example worstcase react nt see would ever want update items per keypress like", "d": "4/2015"}, {"body": "unfortunately thanks help", "d": "4/2015"}, {"body": "sounds like perhaps explicitly calling controlled component implementations", "d": "4/2015"}, {"body": "yup agreed", "d": "4/2015"}, {"body": "reactdominput wherever else may appear seen wanted make sure guys know code backwards forwards onchange nt called reason", "d": "4/2015"}, {"body": "yeah reactdominput reactdomselect reactdomtextarea maybe linkedvalueutils top head", "d": "4/2015"}, {"body": "cool work thanks", "d": "4/2015"}, {"body": "thought going crazy error checked value watching remove attributes", "d": "4/2015"}, {"body": "cc spicyj sebmarkbage", "d": "4/2015"}, {"body": "idea sebmarkbage", "d": "4/2015"}, {"body": "receiving call every time render called perfectly within guarantees api promise props different previous time function called guaranteed props guarantee function called props change nt need control called component nt work new props return", "d": "4/2015"}, {"body": "guarantee function called props change share example called", "d": "4/2015"}, {"body": "call setstate component componentwillreceiveprops called eg application example componentwillreceiveprops recalled react nt make attempt diff props userdefined components nt know whether changed case props object empty pretty clear oftentimes prop complex object function hard impossible diff call always rerender always parent component rerenders note also behavior may change slightly jsx object nt depend parent props hoisted outside reactcreateclass definition smart compiler write would always rerender though even always hard determine statically", "d": "4/2015"}, {"body": "call always rerender always parent component rerenders think would useful addition docs appreciate explanation spicyj", "d": "4/2015"}, {"body": "agree docs confusing nt use props data stores spicyj explanation makes wonder pattern break future", "d": "4/2015"}, {"body": "cody please rely always called api promise always call function though practice currently getting called may optimize calls function call intelligently less often without notice guarantee called props change", "d": "4/2015"}, {"body": "could outdated javascript environment like phantomjs tried recommended polyfills", "d": "4/2015"}, {"body": "also issue try polyfill pedroteixeira solved problem", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "yea sounds like polyfill issue would explain react undefined laster reopen case", "d": "4/2015"}, {"body": "jsx expression semicolon nt make sense also need prop name checked accessibility probably want change onclick onchange checkbox idhtmlfor linking label please ask questions reactjs ircfreenodenet stackoverflow", "d": "4/2015"}, {"body": "thanks moved stackexchange", "d": "4/2015"}, {"body": "planning add existing helpers test utils right always make helpers util library use", "d": "4/2015"}, {"body": "thanks firlaj able reproduce", "d": "4/2015"}, {"body": "wrong repo", "d": "4/2015"}, {"body": "try passing props super call chrome print live object console react assigns constructed instance right construction addition passing constructor", "d": "4/2015"}, {"body": "sounds like happy take prs fix though surprised fail thought passed one point past", "d": "4/2015"}, {"body": "pretty strange checksum gets added html string manually would nt imagine differs browsers", "d": "4/2015"}, {"body": "take look create pr find makes tests fail", "d": "4/2015"}, {"body": "also caught attention yesterday research around found related issue managed fix failing tests firefox small changes note remaining failing tests also failing safari mac send pr", "d": "4/2015"}, {"body": "oh badso sorry", "d": "4/2015"}, {"body": "problem regexp instance reused works event handler creates new regexp instance oh badso sorry smilecat", "d": "4/2015"}, {"body": "cody thx feel kind stupid", "d": "4/2015"}, {"body": "generally treat warnings nonfatal errors meaning try warn things fixed upon time enumerated known html attributes backpedaling mistake ever since allow lowercase tag ca nt distinguish valid html tag using new tag never heard nt error regards warning variable scope common say would variable scope lowercase name tag clearly nt generate warnings maybe anyway think way handle problem separating tags components interested hearing thoughts", "d": "4/2015"}, {"body": "adding warnings local vars hold reference classes extend reactcomponent cc spicyj jsx var div content usage div makes div react element following jsx var centered class extends reactcomponent content makes usage reactcomponent subclass clear separation two", "d": "4/2015"}, {"body": "yeah could get behind idea curious spicyj says", "d": "4/2015"}, {"body": "could bit expensive though would probably want check unrecognized html tags ie whitelist probably want avoid check production logic would warn starts get little messy", "d": "4/2015"}, {"body": "nothing production part jsx transform step even something ended jsxtransformer fine production anyway definitely interesting might really quite difficult would need track every variable might scope nt think possible transformers really need something like flow understand everything used imagine passing function around renders nt scope module call another module even want capture local scope perfect slow would never defining class actual local scope function could capture couple cases passing component class via props much else imagine customelement called actually wanted render local variable developer came along precalculation assigned something called made sense realizing would affect render nt actually know intended since much state intention outside transform ca nt capture nt think realistic actually", "d": "4/2015"}, {"body": "transforming js done sake keeping short let assume transformed proposing new api show point transform performed sure transformer knows lowercase uppercase lowercase could transform development check first argument react element react component true could show warning seems straightforward wondering missing something obvious way need track variables scope indeed would dirty", "d": "4/2015"}, {"body": "thinking could warn rendered element htmlunknownelement", "d": "4/2015"}, {"body": "spicyj would solve problems beyond warning suppressed noise user actually intended", "d": "4/2015"}, {"body": "looking source code looks attribute added node mounted snippet like reason", "d": "4/2015"}, {"body": "known problem right though nt looked back lately see discussion", "d": "4/2015"}, {"body": "ah see thanks responding", "d": "4/2015"}, {"body": "nt know would related addons sounds like using old jsx transformer check case", "d": "4/2015"}, {"body": "thanks reply using reactify seems recent one else check also mentioned everything seem work ok long stick react without addons maybe also related unable use reactrouter", "d": "4/2015"}, {"body": "look built file similarly", "d": "4/2015"}, {"body": "sorry newbie question sure find processed file using rails browserify reactify idea puts result js files point right place thanks", "d": "4/2015"}, {"body": "look script tag generated html see loaded", "d": "4/2015"}, {"body": "problem indexhtml testjs javascript var commentbox reactcreateclass render function return hello world commentbox reactrender documentgetelementbyid app var commentbox reactcreateclass render function return reactcreateelement div null hello world commentbox reactrender commentbox documentgetelementbyid app gives uncomment upper part js comment lower part works tried taking jsxtransformerjs without addons many configurations without luck", "d": "4/2015"}, {"body": "make sure indeed using correct version react case different strange issues found using wrong version react dependency aware try npm list react make sure one react", "d": "4/2015"}, {"body": "using version test", "d": "4/2015"}, {"body": "yes also sure using version eventually found case dependency one modules using", "d": "4/2015"}, {"body": "using npm plain html javascript file unpacked files react works react", "d": "4/2015"}, {"body": "ivanflorentin shaimo closing sounds like found issue", "d": "4/2015"}, {"body": "ivanflorentin seen warning console pointing", "d": "4/2015"}, {"body": "thanks spicyj changing sugestion gives", "d": "4/2015"}, {"body": "ivanflorentin code works fine make repro case jsbin look happy investigate", "d": "4/2015"}, {"body": "spicyj yes works like fails", "d": "4/2015"}, {"body": "yes need pass element either reactrender", "d": "4/2015"}, {"body": "spicyj thank much works large piece code written works fine guess adjust code thanks fast response", "d": "4/2015"}, {"body": "yes deprecation introduced completely removed see details received console warnings running", "d": "4/2015"}, {"body": "seem happen using reactaddons see issue posted", "d": "4/2015"}, {"body": "possibly trying make element like instead using old jsx transformer either possible", "d": "4/2015"}, {"body": "come irc old reactify version updating reactify fixed issue check deps different reactify version sh npm ls reactify good reactify bad reactsomething reactify reactify", "d": "4/2015"}, {"body": "mine looks good still getting issue use reactaddons instead react", "d": "4/2015"}, {"body": "shaimo looking line", "d": "4/2015"}, {"body": "main js file require jsx files build browserify changed approach resolves issue", "d": "4/2015"}, {"body": "spicyj looks clean", "d": "4/2015"}, {"body": "either post example project shows issue", "d": "4/2015"}, {"body": "spicyj sure making ajax call fetch data db display make searchable var react require react var bootstrap require reactbootstrap var xhr require superagent var listgroup bootstraplistgroup var listgroupitem bootstraplistgroupitem var input bootstrapinput var panel bootstrappanel var polls var view reactcreateclass getinitialstate function return selectedpoll query componentdidmount function var self xhrget polls end function err res err consolelog err else consolelog res polls resbody selfismounted consolelog resbody uuid selfsetstate selectedpoll resbody query onchange function value var result polls map function val valuuidtolowercase indexof value valquestiontexttolowercase indexof value resultpush val thissetstate query value selectedpoll result render function return var searchbar reactcreateclass dosearch function e thispropschange etargetvaluetolowercase render function return var polllist reactcreateclass select function consolelog selected render function var arr var self thispropsdata thispropsdatamap function value var head valueuuid var body valuequestiontext arrpush head body arrpush return arr arr var pollview reactcreateclass render function return yo moduleexports view mainjs file used source browserify build var react require react var view reactcreatefactory require appjsx reactrender view documentgetelementbyid bodycontainer", "d": "4/2015"}, {"body": "oh yes createfactory required case since using jsx instead custom components start capital letter would work", "d": "4/2015"}, {"body": "get error", "d": "4/2015"}, {"body": "really hard say sure without info one thing jumps ajax calling result possible component unmounted though would throw error think warning returning clearing requests suggested way handling error suggesting using though could reduce something reproducible sharable would helpful", "d": "4/2015"}, {"body": "think point likely current plan sunset reacttools make jstransform standalone way transform code babel whatever tool want supports jsx see given jstransform jsx transform nt really make sense default files fwiw never really advocated using files use open source projects follow convention people actually may match think transpiling js becomes commonplace makes sense use", "d": "4/2015"}, {"body": "jsx source code calling files js nt make lot sense transpiled javascript storing result files ending js certainly makes sense saving jsx js extension makes much sense saving coffeescript java source code js transpile javascript rather actually javascript neither cli utility getting sunsetted issue closed soon irrelevant", "d": "4/2015"}, {"body": "basically think potential experimental extensions javascript new language flowtype another one experimental syntax extension nt need whole new language support could argue annotated extension nt make sense combine long list file extensions every new experimental version language designed coexist extensions existing language compatible way fact might maybe one day part call javascript fact differentiates java coffeescript none features new language unlike typescript subsetsuperset javascript really new language", "d": "4/2015"}, {"body": "annotation would indeed quite silly point seems weird acknowledge jsx fact new language mostly javascript processing mostly java important part things js ca nt ever spec published even draft even intends add xml syntax rich object notation making sure people understand file going runnable js engine without conversion step seeing extension indicate content type seems pretty much common sense", "d": "4/2015"}, {"body": "making sure people understand file going runnable js engine without conversion step argument currently applies many features early adopter code might even work future engines flow types another example syntax extension nt active proposal talks potentially standardized form jsx actively pursued right definitely see form jsx standardized future since solves real use case template literals nt perhaps current form form also code used extension years js becoming source target language necessarily future js always expected majority code future compiledtranspiled executed engine moving target", "d": "4/2015"}, {"body": "yeah much draft knowledge even predraft working group subspec jsx relies additional base js though let know love read possibly contribute", "d": "4/2015"}, {"body": "trigger diff fast recommended way rerender toplevel component", "d": "4/2015"}, {"body": "spicyj thanks super quick reply react keeps track element gets react component rendered happens target element gets removed", "d": "4/2015"}, {"body": "yes call reactunmountcomponentatnode removing container dom order prevent leaks", "d": "4/2015"}, {"body": "spicyj aah thanks valuable", "d": "4/2015"}, {"body": "raf batching nt supported wo nt go docs batchedupdates", "d": "4/2015"}, {"body": "raf batching discouraged suitable shipping core would reasonable link uptodate npm project batchedupdates page", "d": "4/2015"}, {"body": "nt use facebook clear solves real problems nt want maintain fix bugs related reactaddonsbatchedupdates give enough control batching", "d": "4/2015"}, {"body": "also known issues raf batching mostly around controlled components", "d": "4/2015"}, {"body": "deprecate eventually remove raf batching", "d": "4/2015"}, {"body": "never supported fashion", "d": "4/2015"}, {"body": "ie already deprecated", "d": "4/2015"}, {"body": "nt file deleted case", "d": "4/2015"}, {"body": "exposed public api builds sure delete pr incoming", "d": "4/2015"}, {"body": "btw available register dev hook iirc one dev hook really want react better toolingintrospection story", "d": "4/2015"}, {"body": "saw exposed within used chrome extension right referring", "d": "4/2015"}, {"body": "yes hook defined react give internals problem devtools already defines nt want librarytool conflict devtools", "d": "4/2015"}, {"body": "correct react dev tools reaches internal private api nt expose hook public api subject change without notice nt want people relying extent possible said timbur exposing reactmount way pretty reasonable solution really need access internals aware unsupported territory per gaearon comment yes grow might make sense better resources dev tooling would interesting start understanding tooling needsusecases see could better addressed devtools whatwhy people need whatever nt yet available timbur little curious details use case", "d": "4/2015"}, {"body": "cc syranide remember talked", "d": "4/2015"}, {"body": "jsfb putting together development toolkit includes optional dev tools extension use webkitsfirefox native sources paneleditor update scripts modules hot reloading also realtime replication devs option work app time reason someone cantwo nt install extension option update modules within browser via codemirror available makes sense include hot reload logic within usual window rather dev tools extension passes changed code onto inspected window reloads module seems like cleaner solution relying way another", "d": "4/2015"}, {"body": "really want keep public api minimal nt think going expose directly may way obviously unsupported also devtools mind way actually need note even private within module figure", "d": "4/2015"}, {"body": "honestly think way used hot reloading pretty hacky guessing necessary due methods designed specifically deeply traversing react elements matching class simple methods would probably ideal dev tools", "d": "4/2015"}, {"body": "guessing necessary due methods designed specifically deeply traversing react elements matching class class nt even matter need access root real react component instances page please nt merge solved way", "d": "4/2015"}, {"body": "would work maybe cache real root component instances expose way real question might would potential dev tools need well whatever arbitrary things devs might want changebind", "d": "4/2015"}, {"body": "love see firstclass officially supported react introspection api would usable devtools libraries much support give us internal instance tree way force updates maybe things keeps happening aside somebody writing", "d": "4/2015"}, {"body": "clarify understand minimal api surface area ca nt see making introspection api slightly official would hurt nobody expects stable even changing every release would still improvement adhoc solutions use", "d": "4/2015"}, {"body": "indeed necessity lack thereof probably thing delaying things seem working well enough despite slightly hacky stuff said glad take stab sure time plus would nt want waste time perhaps someone could outline specs would sure merged implemented", "d": "4/2015"}, {"body": "using inside causing problem bad", "d": "4/2015"}, {"body": "get console warning", "d": "4/2015"}, {"body": "also hit issue point time far remember brought dom behaves nt really think react intends change fairly easy build wrapper component around stop propagation ideally react tries change dom stuff works provide nice functional declarative abstraction top", "d": "4/2015"}, {"body": "thanks feedback think avoiding prop way go get mixed dom events", "d": "4/2015"}, {"body": "would use appropriate", "d": "4/2015"}, {"body": "called cached components without explicit prop passed share array reference state", "d": "4/2015"}, {"body": "vsiao oh thanks see", "d": "4/2015"}, {"body": "mention using already wired mocha", "d": "4/2015"}, {"body": "opensource point directly code", "d": "4/2015"}, {"body": "agree supporting various linting options would exercise futility brought one appears bug nt add trailing white space instance could find", "d": "4/2015"}, {"body": "yeah transpiler produce trailing whitespace probably nt intentional highpriority bug primarily since generated code thus intended human consumption like said likely accept pull request like fix", "d": "4/2015"}, {"body": "nontrivial fix generator left asis", "d": "4/2015"}, {"body": "syntax proposed thing somewhere seems solve bunch issues like conditionals arrays elements nt think seen mention timeline place could look info", "d": "4/2015"}, {"body": "place tracking frags", "d": "4/2015"}, {"body": "uh yea sounds fine behavior definitely nonstandard markdown example big deal probably tutorial cdnjs pretty easy", "d": "4/2015"}, {"body": "going use marked instead already familiar option sanitize input", "d": "4/2015"}, {"body": "issues put workaround deal zpao roadmap", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "valid render function literally requirement demonstrated zpao really simple example checks ca nt really rely anything use open github issues track bugs react since nt technically bug going close issue basically takes development radar feel free continue discussion continue discussion mailing list stackoverflow", "d": "4/2015"}, {"body": "syranide see point might right usability performance issues might deal breakers especially solutions less invasive still trying wrap head around line drawn various data types makes string safe wrapped makes object safe safe concerned still easy wrong thing even explicit syntax difference something like subtle js thispropsuser js thispropsuser legit use cases would actively test code branches notice something wrong expected string everyone kind edge case code branches go production without ever properly tested would false sense security well ultimately nt think validating data structures something react needs necessarily concern type systems reason think need address particular issue cost xss high think fine mistake causes site break even think would ok something allows ui redressing scenario plenty ways get point however ok simple mistake like causes full crosssite script execution high costprobability ratio risk high even probability low think argument sourceid solution specifically addresses tag creation scenario causes high risk scenarios still issues solved simple data types alone", "d": "4/2015"}, {"body": "available high chance people blindly allow since found stackoverflow read article written guy would mitigate protection brought result people idea make vulnerable people security mind would continue writing protected code using complex tool requires attention question product reactjs community gained", "d": "4/2015"}, {"body": "nt know react allowed seem like simple fixes done href bad common style bad unexpected gt expected safe escaping error innerhtmlrendertostring case someone really needs set manually user html doubt real react code would broken", "d": "4/2015"}, {"body": "still trying wrap head around line drawn various data types makes string safe wrapped makes object safe safe sebmarkbage think kind comes currently element primitive instead imagine something like whatever put inside becomes opaque tostringed safe render supplying primitive value would throw example would argue sensibly accept primitive values would internally call whatever value pass safe render would instead accept elements passing nonelement would throw concerned still easy wrong thing even explicit syntax difference something like subtle yeah regardless syntax really throw helpfully throw warn tostring something harmless yes still mess run looks correct correct rendered value longer turn arbitrary elements given malicious data previously could ultimately nt think validating data structures something react needs necessarily concern type systems static type checking would catch mistake without running code implicit wrapping prevents far see usability performance issues might deal breakers especially solutions less invasive suspect performance wo nt issue end static values trivially reused pooling make dynamic values virtually free yes obstacles usability valid point frontend nt style inheritance would nt understand would unaffected string would nt renderable render text explicitly render frontends style inheritance like html richtext components would affected introduction nt laid head yet implicit behavior fragiledangerous seen implicit wrapping workarounds reduce problem fix think matter realizing implicit model flawed way take explicit model somehow make almost friendly implicit frontends suspect answer yes ps realize really separate discussion really solving xss issue immediate sense whether implicit model flawed less invasive solutions far realistic point", "d": "4/2015"}, {"body": "brigand already evaluated decided protecting invalid styles simple fix last evaluated found prohibitively expensive automatically given value whitelist safe patterns would massively huge actively want move away whitelists react fallback underlying dom blacklist could come would likely incomplete anyway ie css expressions another one various url paint expressions semicolons concern also various complex parsing rules agree bad relies implementation detail react html serialization instead hopefully one day slowest browsers fast enough use technique instead href perhaps protected also arguable would react overreaching agree cost accidentally high added additional protection end day ca nt protect everything crazy dom target interop environment put higher demands new abstractions react native also highly recommended build set high level components instead targeting html directly facebook semantic html enough", "d": "4/2015"}, {"body": "syranide think valuable conversation thread since generic catchall issue necessarily related one issue alone see title nt really think anything special primitive values string one kind data structure want support many different ones higher level components might objects represent kind values even strings could reimplemented different data structure something like immutablejs may also json serializable key issue union type set accepts one multiple types want make sure user explicitly decides one put think ultimately become prohibitively verbose union types overloads matter fwiw lot components fb accept strings rich text need convenient way pass rich text system also possible build one place componentize use another since rich text elements could include animation etc might make sense allow stateful scenario would want underlying component rendering label accept subset components rendering type system except proptypes devonly system nt protect kind attack", "d": "4/2015"}, {"body": "sebmarkbage perhaps nt entirely clear think seems everything richtext model html flawed great documents immensely fragile user interfaces documents rendered within user interface nt render user interface within document nt make sense using document model html fundamental design language nt current render target would argue mature react user interface best avoid html style inheritancedocument model ie click click click click simpler traditional setup would write want generic button implementation whatever children label longer universal understanding render string components inherently isolated reusable style perspective primitives rendered xss issue goes window even whitespace rules become irrelevant inherent technical beauty unambigious gets whatever worth could formal nonsense syntax would hard argue could even marketed new general purpose primitive type limited user interfaces ahem basically talking xml subset starting point opinion thing stands richtext components usually finds useful user interfaces definitely forgotten nt necessarily mean richtext dedicated syntax perhaps current syntax react currently targeting html makes daunting aspect html provides conveniences would targeted anything else quite sure reactjsx would nt walked path without significant consideration sure solution html sets squarely apart user interface targets nt really prove exceptionally competent think sane question whether html really ideal role model reactjsx user interfaces", "d": "4/2015"}, {"body": "react native almost works like though strings text elements children text components nt accept text children like", "d": "4/2015"}, {"body": "syranide midlong term think right kind architecture react users moving towards however easy shift immediately nt see trusted source solution needs block important features would gotten shifting newer architecture seems like safe short term solution also nt block anything planning anyway", "d": "4/2015"}, {"body": "sebmarkbage agree agree", "d": "4/2015"}, {"body": "thinking priorities see three threats xss dangerouslysetinnerhtml script tags etc b clickjacking similar c types ui redressing scenarios nt involve interactivity agree react secondary layer already broken issue real solution always fix json passthrough hole follows react responsible providing permanent solution react responsible mitigating impact hole occurs full xss threat clearly high cost bug even fix quickly harm already done getting embarrassing redressing message phishing attempt static message threat c might bad even happen guarantee significant harm done fixed addressing passthrough hole real harm done agree need protect possibly b lot possibilities limit scope problem sensitive attributes another thing would like start thinking ran react worker allowed crossorigin script communicate worker render arbitrary could targeting higher level abstractions real dom nodes kind things would need protect point scenario explicitly allow arbitrary ui elements subtree page probably means explicitly allowing threat c probably even b", "d": "4/2015"}, {"body": "sebmarkbage far concerned related html react except particular issue addressed without implementing much safer abstraction html seems wo nt nt seem worthwhile sure would still many tricks reactdom might simply able guard think publicly documenting explaining known pitfalls would go long long way seems biggest issue right general lack awareness mistakes eg dangers user supplied href one applies protocols including urls without protocoldomain part always block everything say also beware links point current domain could possibly perform operations behalf user react simply guard needs documented possibly made available readymade helpers also important document also exploitable allows injection arbitrary css wo nt stop problem publicly documented big step seeing unlikely ever outright prevent targeting html", "d": "4/2015"}, {"body": "going close since immediate issue solved figure interop later", "d": "4/2015"}, {"body": "currently whitelist supported attributes want remove whitelist allow attributes point tricky components pass attributes children edit actually changed mind leave one open track addition time fixed added goodfirstbug might add whitelist", "d": "4/2015"}, {"body": "webkitdirectory added", "d": "4/2015"}, {"body": "still need", "d": "4/2015"}, {"body": "flux indeed one way solving problem created pr mention", "d": "4/2015"}, {"body": "gaearon thanks others reference", "d": "4/2015"}, {"body": "gaearon one step might nice throw quick ifyouunderstandalittleaboutflux example", "d": "4/2015"}, {"body": "got surprised today upgrading bug ie nt accepted bug anyway use suggested glenjamin wanted point seemed work", "d": "4/2015"}, {"body": "came across gh issue running similar problem attempting understand parentbased contexts work trying figure bug hidden code using test found running react javascript var obj val testcontext function ownercontext comp return compreactinternalinstancecurrentelementcontexttest function parentcontext comp return compreactinternalinstancecontexttest var app componenta componentb app reactcreatefactory reactcreateclass displayname app childcontexttypes test reactproptypesobject getchildcontext function return test obj getinitialstate function return value false componentdidmount function settimeout function consolelog changing value thissetstate value true bind render function return thisrenderchild return reactdomdiv thisrenderchild renderchild function thisstatevalue return componenta else return componentb componenta reactcreatefactory reactcreateclass displayname componenta componentwillmount function consolelog componenta willmount ownercontext parentcontext contexttypes test reactproptypesobject render function consolelog componenta render ownercontext parentcontext return reactdomdiv componentb reactcreatefactory reactcreateclass displayname componentb componentwillmount function consolelog componentb willmount ownercontext parentcontext contexttypes test reactproptypesobject render function consolelog componentb render ownercontext parentcontext return reactdomdiv reactrender app documentgetelementbyid container renders one second switches provides context key child components declare appropriate value child components log ownerbased parentbased contexts written running app shows following console gets context key changing method wrap child component simple changes console output show based explanation davidagraf original issue two things nt understand example wrapped given expected parentbased context rerendering ignoring question correct nondivwrapped example receiving right context really parent described wrapping plain suddenly provide correct parentbased context understand deriving context parent providing context since given logic parent thus passing one child", "d": "4/2015"}, {"body": "wonder might fixed verify still case", "d": "4/2015"}, {"body": "gaearon good call looks like fixed master", "d": "4/2015"}, {"body": "sorry make sure get another minor release", "d": "4/2015"}, {"body": "wondering use outerhtml comparing client markup could nt solution", "d": "4/2015"}, {"body": "wondering use outerhtml comparing client markup could nt solution nt think work copypasting comments sure would good way fix reescaping comparing calling would likely escape unrelated characters well unescaping comparing would produce exact diff unless keep track unescapes performed comparing revert producing diff string sounds like going trouble might needed", "d": "4/2015"}, {"body": "experimenting similar idea rewriting see readme notable difference introduce explicit observableprocess identity reconcile processes similar react prop stateful components named process changes react async stops old process instance starts new one api looks like import react react import async reactasync function definefetchprocess url return id url start return fetch url function mycomponentprocesses props return user definefetchprocess async mycomponentprocesses class mycomponent extends reactcomponent render let user thisprops process api follows promises api syntactically namewise semantically expected called per process live made accommodate popular use case fetching data via promises honest think need change prevent confusion", "d": "4/2015"}, {"body": "maybe mistaken think thing prevents implementing proposed issue api userland lack lifecycle hook executes render like new already installed instance", "d": "4/2015"}, {"body": "one thing nt yet discussed handling callback observable produces error information available component somehow react handles actual call need standardized method inject callback object provide flexibility application developers see two approaches first errors placed toplevel attribute similar seems incredibly heavy handed eats component namespace second would allow developers define callback lifecycleish function wanted custom error handling observables could add something like similar done upcoming iteration parsereact created error handling produce api wanted errors added private name gt error map components toplevel public method returns clone map empty otherwise allowing simple course defining new reserved methods also tricky business wo nt pretend nt need way implicitly explicitly make errors available component rendering", "d": "4/2015"}, {"body": "andrewimm idea feed generic error propagation system bubbles error hierarchy handled error boundary also handle errors methods throwing recover gracefully like method throws significantly work take time implement properly idea unify error handling way", "d": "4/2015"}, {"body": "would argue left outside react proper key integration points coordinated projects like reactasync reactnexus cleanly done top react proper", "d": "4/2015"}, {"body": "agree seems like suggested way better baking framework tue apr pm rodolfo hansen notifications githubcom wrote would argue left outside react proper key integration points coordinated projects like reactasync reactnexus cleanly done top react proper reply email directly view github", "d": "4/2015"}, {"body": "weekend built yet another flux implementation called flexy check code store exposes method conforms observable api even though really observables reactive framework used would say api easy enough create actual observables said nt judge code harshly done weekend fun understanding using jscsp using observe api sidenote system like flux actually makes serverside rendering less painful using similar system reactnexus initialize stores pass react app monitor stores dispatcher keep rerendering till actions fired required data already stores", "d": "4/2015"}, {"body": "would argue smallest integration point get new semantics stateless data subscriptions integration points would suggest including async rendering much complex issue deserves thread hook could used async rendering regardless everything else already possible implement top react percomponent basis note going global injections plugins since breaks component reuse across environment frameworks built top react contextual individual components hooks missing", "d": "4/2015"}, {"body": "hey honest new hooks would made implementation easier certainly achieve sideways data loading without demonstrated anything exposing supporting maintaining react components instances lifecycle outside mounted react hierarchy would help use internal call etc consider approach brittle relies internal invariants change next version react stateless approach seems async data fetching stateful thus storing pendingcompletedfailed status components state relevant use realworld apps higherorder components perform data fetching inject fetching state children components props inner component thus stateless desirable outer component stateful also desirable eg display loading spinner placeholder", "d": "4/2015"}, {"body": "integration points would suggest seems andreypopp asked right question nt thing need implement userland lifecycle hook render seems like smallest minimal api change needed rest setting triggering forceupdate appropriately change based whatever input streamemitterobservable unless missing something else special entirely possible", "d": "4/2015"}, {"body": "getting drawn larger discussion answer sebmarkbage think one important hook would like something needed using real observables hook provide functions deal values pushed observable set data real observables would situation little open think hooks replace observablespecific behaviour custom hooks way could use eventemitters csp channels instead", "d": "4/2015"}, {"body": "seems like last comments saying smallest extension point actually connect disconnect lifecycle hooks make easy attach async data component manage subscriptions observables could fairly trivially built upon outside core exposing lifecyle points broader appeal reasonable summary", "d": "4/2015"}, {"body": "also yet convinced needs solved react much inclined think react provide necessary hooks build functionality top react moment let say going thoughts potential sources new data seems excessive idea separate application state component state might clarify separate issues around state feel like cost introducing new input may outweigh gains want focused solely component state let fields add instead name generic props data state data local variable data name adds meaning muddles existing meanings would much prefer name would actually mean something matthewwithanm comment might better name example would clearly associate method let execute server need kind hook clean memory leaks might cause unmounting never happen call every time change must optimized performance ideally ca nt made expensive accidentally becomes part hot path like react nexus next bindings diffed previous bindings removed bindings unsubscribed added bindings subscribed", "d": "4/2015"}, {"body": "come believe state complicates components trying use less components lift instead addition concerns fisherwebdev raised agree convinced letting depend good idea state depends props observed depends state props nt complicated rather", "d": "4/2015"}, {"body": "also coming realize observe dependent mostly nt need gaearon points easy enough hoist state one level feels cleaner separating concerns potentially depend logic around handling updates within component grows significantly complex depends forkless handlers less code critical path translates simpler rendering cycle also reduces number unintended updates retrigger subscriptions", "d": "4/2015"}, {"body": "observe props less deal state better imo", "d": "4/2015"}, {"body": "opinion library react try flexible possible agree good idea observe depend state yes complicated yes best practice depend state choice users react allowed make would recommend leaving current api unchanged possible hooks add flexibility make work observables example proving documentation explains using state observe method recommended", "d": "4/2015"}, {"body": "believe everyone wants right thing want pointed right direction observe accepting state makes easier user accidentally find something like antipattern docs", "d": "4/2015"}, {"body": "saw issue playing fixeddatatable problem indeed mixing versions webpack injected dependencies react elements created without gets added", "d": "4/2015"}, {"body": "closing leiserfg still trouble let know", "d": "4/2015"}, {"body": "true rebuild lib works fine", "d": "4/2015"}, {"body": "nt want yet", "d": "4/2015"}, {"body": "documented somewhere want examples yet", "d": "4/2015"}, {"body": "still powerful classes enabled limitations know think might actually want redo presentation examples show createclass classes side side", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "method like forcing complete render", "d": "4/2015"}, {"body": "another potential solution", "d": "4/2015"}, {"body": "favor inline styles possible gets complex use something like bem recommended spicyj also like suitcss pairs well react experience", "d": "4/2015"}, {"body": "seems like core incongruence using stateful mixins control component state using stateful mixins means giving control mixins practice using replacestate alongside immutablejs came caveat could nt use stateful mixins see ways mixins barred access setstate stateful possibly unfortunate limitation mixins state distinct component mixed makes even special already bit special bunch methods mixed class prototype would encourage data isolation different mixins mixins components maintains control adds weight react abstraction also unfortunate add ducktype interface state allow overriding state merge strategy rough example could look like would allow initial state kind object supports interface could keep using existing setstate api actually leaning favor option thinking perhaps stateful mixins would better wrapping components component composition could provide functionality stateful mixins used today leaning favor option three actually simplifies rather adds complexity react case go option would propose also adding api parallel setstate perhaps called updatestate always takes function function always returns entirely new state object kind api would put amount control back hands developers using react would allow turn code looks like js class clickcounter extends reactcomponent getinitialstate return data immutablemap count updatecount thissetstate prev gt data prevdataupdate count gt render return code looks like one layer indirection removed state access js class clickcounter extends reactcomponent getinitialstate return immutablemap count updatecount thisupdatestate prev gt prevupdate count gt render return", "d": "4/2015"}, {"body": "concern two different update functions hoping go direction state always updated returning values sure direction still considered current thinking though proposal also seems halfway using immutablejs way seems like really want omlike cursor like call update twice feel like case pluggability leads worse results everyone opinionated solution preferable", "d": "4/2015"}, {"body": "differences going immutability really relevant update helper attached object map vs record contains map could imagine mutable map instead record concern exists longer seems issue convenience using updater top level object immutablerecord automerged could", "d": "4/2015"}, {"body": "also implement without changing need read wo nt trigger another render writing props state within proposed function call shooting foot case every method lifecycle", "d": "4/2015"}, {"body": "want able respond new props event returns case ca nt use", "d": "4/2015"}, {"body": "seeing similar issue many places error shown write amd since company uses esri javascript api heavily relies dojo one module creates component returns result reactcreateclass somewhere else app call reactrender somenode throws multiple instances error get around returning something like also seeing occasionally jasminenode calling testutilsrenderintodocument note noticed started upgrading react", "d": "4/2015"}, {"body": "noticed nodejs calling rendertostaticmarkup one package react components another package", "d": "4/2015"}, {"body": "merging", "d": "4/2015"}, {"body": "another one thinking parentbased refs actually using similar pattern next version react dnd attaching nodes higherorder component binds drag drop events js class box extends component static proptypes dragpreviewref proptypesfuncisrequired dragsourceref proptypesfuncisrequired render const dragsourceref dragpreviewref thisprops export default configuredragdrop box configure register gt registerdragsource itemtypesbox boxsource collect connect monitor dragsourceid gt come really like api provides flexibility compose refs js function joinrefs refa refb return function instance refa instance refb instance class card render const caption dragsourceref droptargetref thisprops also always manually tricky use cases specifying custom drag preview js class box extends component componentdidmount const dragpreview new image dragpreviewonload gt thispropsdragpreviewref dragpreview dragpreviewsrc render const dragsourceref thisprops", "d": "4/2015"}, {"body": "merging", "d": "4/2015"}, {"body": "sebmarkbage zpao considered done since rebased awaiting merge", "d": "4/2015"}, {"body": "screwed somehow thing resubmitted", "d": "4/2015"}, {"body": "bit error today jsdom tests fixing behavior", "d": "4/2015"}, {"body": "fixed", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "use syranide proposal rendertostream method javascript function rendertostream component production processenvnodeenv invariant reactdescriptorisvaliddescriptor component rendercomponenttostaticmarkup must pass valid reactcomponent invariant reactdescriptorisvaliddescriptor component var transaction readable require stream readable stream new readable processedfragments batchsize try var id reactinstancehandlescreatereactrootid transaction reactserverrenderingtransactiongetpooled true finally reactserverrenderingtransactionrelease transaction idea concat string chunks soon stream need avoid event loop blocked even massive string elaborate strategy take consideration buffer size requested stream jussikalliokoski strategy match experiments", "d": "4/2015"}, {"body": "syranide wrote may wrong think generally problematic unless reactchildrenfilter would replace filtered children null undefined rather compact array canshould map filter way dynamic children nt keyed reconciliation suffer badly maybe missing something nt see problem exactly could elaborate fyi want implement tabs component thought would nice idea define individual tabs using nested tab components besides tabs tabs header also contain buttons get structure like tabs component would like know children tabs buttons great could", "d": "4/2015"}, {"body": "arendjr call bad practice unrelated provided separate props mixed soup children", "d": "4/2015"}, {"body": "syranide sure agree bad practice seems perfectly reasonable parent component might want arbitrary behaviors based children particular components want preserve absolute ordering child components nt really way tabs come beforeafter tab buttons alternate otherwise mixed agree nt appear preserving order think completely valid use case could imagine someone implementing smart div fancy layout things treats components differently others obviously natural mixed bag children given simplicity ofersadgat implementation convinced makes sense pollute api space providing filter function syranide agree reconciliation would suffer maybe would warn children keys almost reason provide function add warn hook probably separate issue gaearon suggested seems like natural way get children potentially empty array might nice solution issue cc spicyj", "d": "4/2015"}, {"body": "sure agree bad practice seems perfectly reasonable parent component might want arbitrary behaviors based children jsfb broad subject seems processing children inherently bad think depends trying accomplish children need separated likely separate props begin api redesigned somehow could imagine someone implementing smart div fancy layout things treats components differently others obviously natural mixed bag children sure imagine quite sure actually makes practical sense nt better solutions problem inventing nonstandard behaviors percomponent basis seems like last resort used concluded established practices nt good fit nt allornothing children used looks pretty nt mean solution could imaginably longer opaque structure special behavior likely apparent user well saying ask tool used intended purpose children purpose think mistake expand definition unless sure makes sense", "d": "4/2015"}, {"body": "agree depends trying accomplish likely separated going try filter anyway someone desires heterogeneous list components usually due ordering concerns think perfectly valid use case children may natural place defined providing reasonable support use case facebook common branch based type child popularity facebook nt necessarily imply best practice common use case support nt know percentage use cases operation imagine large percentage presumably reason use heterogeneous list maintain order said still entirely convinced feature makes sense justifies api creep real advantage see gives us opportunity warn unkey children", "d": "4/2015"}, {"body": "true facebook existing components branch based type position child usually better idea pass separate components explicitly instead explicit addition easier implement going back original issue considering implementing sort clones children rekeys appropriately example would return something like less react flattens children internally point could manipulate array whatever way convenient", "d": "4/2015"}, {"body": "sounds good", "d": "4/2015"}, {"body": "super delayed response regardless whether bug spec whatever decision avoid arrow function desugaring purely optimization could easily considered heuristic given use case problem look xjsidentifier arrow function transform accidentally unnecessary bind edge case occurs nt actually mean", "d": "4/2015"}, {"body": "hack together bugfix jstransform btw", "d": "4/2015"}, {"body": "fixed jstransform", "d": "4/2015"}, {"body": "closing due response though might also", "d": "4/2015"}, {"body": "matter measure always largest contributor latencyperformance issues running applications sidebyside benchmarkjs node stock react vs react commented see performance gains opssec rendering app commented migrating components helps custom components builtin components use seems like two ways mitigate issue migrate internal components use remove classes created behave similarly classes far binding", "d": "4/2015"}, {"body": "migrating possible seems better hard justify optimizing feature future increase priority migrating builtin components really going get perf boost ssr", "d": "4/2015"}, {"body": "jsfb hard justify everyone uses nt know make autobinding faster", "d": "4/2015"}, {"body": "seeing improvement nodejs using script running test using react npm applied patch make contexts work multiple react process", "d": "4/2015"}, {"body": "yea really hard justify still talking serverside right perhaps something nt actually create bound functions upfront maybe placeholder functions lookup real function use", "d": "4/2015"}, {"body": "mridgway try requiring reactdistreactminjs instead main react module currently compare", "d": "4/2015"}, {"body": "wondering", "d": "4/2015"}, {"body": "nt think related since tests hitting see get test working minjs although patching kind difficult since add context changes well", "d": "4/2015"}, {"body": "build one call bindautobindmethods removed", "d": "4/2015"}, {"body": "ran test files still seeing difference changes made benchmark ran times confirm smallest margin difference found", "d": "4/2015"}, {"body": "okay trouble getting running locally complains ca nt find fluxiblerouter nt figured right incantation installlinketc make work", "d": "4/2015"}, {"body": "sorry let pull simplify", "d": "4/2015"}, {"body": "ok better luck repo note minified builds seem break nt use nodeenvproduction reason", "d": "4/2015"}, {"body": "still failing require fluxiblerouter", "d": "4/2015"}, {"body": "ugh sorry happens globally link something pushed changes removes dependency", "d": "4/2015"}, {"body": "got seeing definitely difference like nodeenvproduction", "d": "4/2015"}, {"body": "think important note even drop end taking hit manually calling instead may end less nt think ever reasonably get rid entire cost way js currently binding serverside safe", "d": "4/2015"}, {"body": "typical use case needing autobinding event handlers usually get fired client would optimal bind methods case", "d": "4/2015"}, {"body": "looks like started autobinding getdomnode nt previously almost certainly unintentional part", "d": "4/2015"}, {"body": "whoa noticed benchmarks well thought outlier tried chrome high resolution timers sometimes frequently called functions get unfair share blame", "d": "4/2015"}, {"body": "jordwalke nt profiler normal react autobinding commented", "d": "4/2015"}, {"body": "currently trying update elements inside svg tag went problem works well following browsers nt update mobile safari console logs render method chrome firefox", "d": "4/2015"}, {"body": "rect supported tag using dangerouslysetinnerhtml", "d": "4/2015"}, {"body": "asaayers using elements attributes well nt supported moment", "d": "4/2015"}, {"body": "updating key manually forced react rerender svg fixed problem safari", "d": "4/2015"}, {"body": "interesting ran exact problem friday works style though", "d": "4/2015"}, {"body": "good workaround clippath attribute got stuck element well nt supported svg element found post stackoverflow came accross solution", "d": "4/2015"}, {"body": "never mind started working next version react hot loader monkeypatching convenient", "d": "4/2015"}, {"body": "monkey patching internals break soon start precompiling react using closure compiler need officially supported hooks like devtools reactperf etc also need apr dan abramov notifications githubcom wrote never mind started working next version react hot loader monkeypatching convenient reply email directly view github", "d": "4/2015"}, {"body": "talking monkeypatching react internals monkeypatching user components pass transform anyway addition method forwarding hijack componentwillmount componentwillunmount track instances proves enough case also going enabled development suspect case getting source react precompiled one anyway", "d": "4/2015"}, {"body": "gaearon earlier morning put together believe sebmarkbage talking chaining particular usecase using automatically hot reload reactclasses development environment monkeypatches concerned minification issues since dev environment either later today tomorrow make sure works classes anything extra use personal note really nt like make work since powers seem opposed exposing see sure gaearon remembers pretty ugly monkeypatching yay must applied react ever imported seems work without suppose might solution source problem agree future probably need something elegant like described original post", "d": "4/2015"}, {"body": "timbur looked reacthotify yet succinct api reacthotapi require pass ugliness currently support style classes ones hard port think", "d": "4/2015"}, {"body": "timbur solve problem percomponent work separate versions need kept component example class class b needs get class reloads original class patched similarly class b reloads patches original class b gist looks like reload would overwrite classes application made explicit reacthotify api keeps internal map hotifying functions per component class required pass string uniquely identifying component usually works fairly well filename plus component name", "d": "4/2015"}, {"body": "gaearon thanks heads class needing updated gist fix checked reacthotify liking looks pretty straightforward makes sense reacthotapi decorators grown lot past months use almost everything glad see becoming widely adopted soon standardized upon first glance looks like would pretty easy make reacthotify work babelpluginreacthotify looks perfect usecase throw gist get chance see incorporating reacthotify working thanks filename plus component name semiunrelated regarding anyone know sure expected part standard saw short dicussion back looks like yet solidified", "d": "4/2015"}, {"body": "timbur updated gist fix think still slightly wrong functions need reused different versions component way patching works function handle original version component updated versions get reevaluated module code hot updates knows refer class code sets patching case need somehow store map functions based unique class identifier derive identifier depends build system tools disposal upon first glance looks like would pretty easy make reacthotify work createclass implement ask pr reacthotify ideally like team effort got plenty tests give idea test api would sensible add test case using test file wo nt work right away autobinding new methods hot reload need autobound possible port function reacthotapi etc ps maybe could open issue reacthotify nt spam people", "d": "4/2015"}, {"body": "see discussion mixins effectively legacy feature going merge breaking change behavior even though agree makes sense way closing wontfix cases use higherorder components get behavior want", "d": "4/2015"}, {"body": "sounds like dupe merging", "d": "4/2015"}, {"body": "probably another consequence", "d": "4/2015"}, {"body": "syranide exactly issue ca nt implement solution code try exec following code require reactaddons changes also tried directly change nodemodulesreactaddonsjs file make look like works fine final question solution change react attribute name inside code many thanks", "d": "4/2015"}, {"body": "fberthelot using webpack hot loader could brake things basically take magic first file order apply patch", "d": "4/2015"}, {"body": "thanks azproduction unfortunatly nt use webpack hot loader way nt know tool seem fun try day personnaly awful quick fix jenkins build time change require reactaddons custom implementation react still find ugly less ugly still ugly", "d": "4/2015"}, {"body": "close enough close one track", "d": "4/2015"}, {"body": "think fixed code explicit error", "d": "4/2015"}, {"body": "jsfb take explicitly blocked threw render lost check carried", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "using bem usually end get classes nt elegant", "d": "4/2015"}, {"body": "fixed using reactchildrenforeach reactdomoption flatten children passing raw html component strings numbers get concatted together elements skipped log warning invalid children", "d": "4/2015"}, {"body": "chance go", "d": "4/2015"}, {"body": "design nice api implement include way determine children listening context keys actually changed actually updated instead everything unlikely full time core team alone time apr pm dan abramov notifications githubcom wrote chance go reply email directly view github", "d": "4/2015"}, {"body": "sure take look", "d": "4/2015"}, {"body": "sorry folks still ca nt find time start working pending react dnd release busy preparing conf unlikely able work anytime soon", "d": "4/2015"}, {"body": "thumbsup", "d": "4/2015"}, {"body": "equally tough break free latest revision reacttestutilsjs challenge breaking free really boils fact way mocking libraries would stubspy render method uses different syntax example would use stub javascript mockcomponent function module mocktagname mocktagname mocktagname modulemocktagname div almost feels method belong something jest specific like sebmarkbage", "d": "4/2015"}, {"body": "legacy needed jest anymore really", "d": "4/2015"}, {"body": "closing super actionable added appear phase", "d": "4/2015"}, {"body": "worries forgot stopped caring js styling become supported thanks spicyj", "d": "4/2015"}, {"body": "going issues today", "d": "4/2015"}, {"body": "trying clean issues close take pr clarify", "d": "4/2015"}, {"body": "fix implemented soon react really like far major bummer unfortunately", "d": "4/2015"}, {"body": "would nt expect change anytime soon maybe eventually", "d": "4/2015"}, {"body": "mfunkie issue using reactmodal changed one reactbootstrap", "d": "4/2015"}, {"body": "also using reactbootstrap ran issue using react reactbootstrap mfunkie workaround fixed thanks", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "guess cases nesting elements different versions inside spicyj using browserify happen requiring two different versions react way handles deduplication requires path code two versions end getting deduped modules coderequire path changed versions get deduplicated others nt encountered reactdomselect react evaluated mixes reactbrowsercomponentmixin part spec reactinjectionclassinjectmixin reactbrowsercomponentmixin evaluated adds reactbrowsercomponentmixin classes subsequently created reactclasscreateclass shared react nt change two versions react reactdomselect react evaluated tries mix reactbrowsercomponentmixin twice reactdomselect spec global injected mixin list long modules stateful approach deduplication seems horrifically unsafe file issue browserify nt yet verified webpack would issue either way think would make sense handle specifically react given trip newcomers", "d": "4/2015"}, {"body": "reverting sort problems", "d": "4/2015"}, {"body": "thank discussion battling invariant violation bug half day yesterday came across ticket morning setup using browserifyshimmed version react reactrouter loaded cdn reading discussion opted use npm versions libs error went away first react project debugging problem pretty big headache thanks discussion lead figure problem move forward", "d": "4/2015"}, {"body": "reason nt support implemented yet hoping something like js var shallowrenderer reacttestutilscreaterenderer var instance shallowrendererrender var result shallowrenderergetrenderoutput expect resulttype tobe div instancehandleclick call setstate inside result shallowrenderergetrenderoutput expect resulttype tobe span imagine returns different state", "d": "4/2015"}, {"body": "gaearon supposed work post minimal repro", "d": "4/2015"}, {"body": "graue render return instance", "d": "4/2015"}, {"body": "works use think could return also shim react expects defined reason", "d": "4/2015"}, {"body": "think could possibly solved new method trying work migrating use super noob react source going slow going help react team get would much appreciated", "d": "4/2015"}, {"body": "duro unfortunately wo nt work case reacttransitiongroup needs ref element ca nt keep old one syranide suggestion creating wrapper work though", "d": "4/2015"}, {"body": "spicyj something needs happen right reacttransitiongroup practically unusable used combination something like reactrouter passing props parent component children tearing hair trying get work days", "d": "4/2015"}, {"body": "anyone cares take look project problem specific file implemented", "d": "4/2015"}, {"body": "new callback refs introduced react clone element conserve ref example implementation props considered functions jsx function clonewithref element ref return reactcloneelement element ref function component ref component elementref component var child reactcreateclass componentdidmount function consolelog child thisc render function var child reactchildrenonly thispropschildren return clonewithref child c gt thisc c var wrapper reactcreateclass componentdidmount function consolelog wrapper thisc render function return jsfiddle pattern considered okay might go implementing", "d": "4/2015"}, {"body": "love get hands implementation", "d": "4/2015"}, {"body": "sebmarkbage could give example best deal multiple form inputs without linkstate", "d": "4/2015"}, {"body": "saulshanabrook two following equivalent sugar really", "d": "4/2015"}, {"body": "enough trouble convincing fix correct nt think want take ever support raf batching core perhaps want fix curious though problems raf batching solve reactaddonsbatchedupdates fix problems", "d": "4/2015"}, {"body": "enough trouble convincing fix correct elaborate bit could learn line thought real reason remove node going removed dom anyway better remove dom wrong using raf batching tight spots app need update opacity user scrolls lags terribly without raf batching used complicated userland code raf raf batching able use case wo nt help happens often scroll want keep code simple still update opacity needed faster frames make sense", "d": "4/2015"}, {"body": "idea sounds good code still tricky especially reentry case makes sense looked throttling scroll events instead typical way deal could something like still want raf boundaries function throttleaf fn var interval null function onframe interval null fn return function throttled interval null interval requestanimationframe onframe thisthrottledscroll throttleaf thishandlescroll onscroll thisthrottledscroll basically raf batching introduces complexity makes things harder reason like necessitating fix far tried avoid using", "d": "4/2015"}, {"body": "see perhaps right first wrote code nt trustring use raf properly think better idea use might well throttle scrolling thanks", "d": "4/2015"}, {"body": "problem let know goes", "d": "4/2015"}, {"body": "yeah csstransitiongroup turns default see expect work use instead sorry slow response", "d": "4/2015"}, {"body": "react could really great platform svg hard use svg full effect without xlink href friends", "d": "4/2015"}, {"body": "got bit issue please update uglify", "d": "4/2015"}, {"body": "afaik reason upgrade syranide want send pr branch forget update shrinkwrap files properly", "d": "4/2015"}, {"body": "send master pull things cheers paul apr pm ben alpert notifications githubcom wrote afaik reason upgrade syranide want send pr branch forget update shrinkwrap files properly reply email directly view github", "d": "4/2015"}, {"body": "confirmed correct minified build ship week fix", "d": "4/2015"}, {"body": "get rebuild", "d": "4/2015"}, {"body": "ledowong nt generally point releases except newest minor release except case security vulnerability patch change locally make build unable upgrade", "d": "4/2015"}, {"body": "closing favor sound pretty similar", "d": "4/2015"}, {"body": "dupe less", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "sounds like", "d": "4/2015"}, {"body": "case useful prinzhorn suggestion using html comments map fragment components dom approach knockout uses knockout calls virtual elements knockout docs", "d": "4/2015"}, {"body": "also another use case extra wrapping elements problematic using flexbox", "d": "4/2015"}, {"body": "aldendaniels absolutely agree ran flexbox issues already", "d": "4/2015"}, {"body": "ran flexbox dependent dropdowns would render manage first dropdown followed b c depending value dropdown would render appropriate number dropdowns eg b c stateless changed case nt much matter parent multiple children rendered deal css things differently nt need reused another component needs b c alternative maybe way unravel parent nt specific ideas look", "d": "4/2015"}, {"body": "hit scenario today think good use case feature component renders multiple elements could rendering element page wrapper element would bad scenario wanting component responsible rendering tag runtime code needed page well another tag carries localized strings used runtime code example case like code authored", "d": "4/2015"}, {"body": "also ran flexbox issues nothing ca nt solved css one beauties flexbox need less wrapper elements everywhere make layout work still end wrapper elements everywhere using react since always wrap whatever return divdiv similar unless makes sense container", "d": "4/2015"}, {"body": "sounds like", "d": "4/2015"}, {"body": "chance land", "d": "4/2015"}, {"body": "plan", "d": "4/2015"}, {"body": "going make refs dom nodes node soon", "d": "4/2015"}, {"body": "facts guesses bug incorrect issue probably nt going get fixed everyone looking wrong thing fix primarily suggestion onfocusout fix firstly people correct firefox lacks bug wish would fixed years ago see bug actually prerequisites spec defines blur focus events however chrome implements ie instead implements events next event bubble fire exact element registered loses focus lost node even node descendant like focused div focus lost button inside fire descendant loses focus nt matter descendant loses focus another descendant something outside element registered fire either case jquery mimics registering capturing used register delegated event see test button loses focus fired container around fired button fired container including firefox jquery fakes delegated fired brings react react delegates events means use react register capturing document supported otherwise use causes separate bug reported result react work alright elements like etc focusable children care lose focus focus goes worthless use containers behave handler container would event would fire child loses focus instead fires every time element within container loses focus required tell focus left container available chrome ie firefox ie", "d": "4/2015"}, {"body": "neonstalwart aware probably nt want use testing equivalent focus lost due click wrong target tab used change focus", "d": "4/2015"}, {"body": "mentioned advanced performance section docs think would nice sample project utilizes immutablejs highlight pros cons use case", "d": "4/2015"}, {"body": "nt heard zpao please reopen", "d": "4/2015"}, {"body": "solution", "d": "4/2015"}, {"body": "syranide restated clearly defined transition server rendering client render made available jsfb means since components statefull want well defined handoff component state evidenced leaving server serverside events serialization coming client clientside events deserialization think environment feature detection identified diagnosed context necessary handling server client transitions affect components needs somehow surfaced something like componentwillserialize server side rendering either stop calling componentwillmount server side add corresponding componentwilldeserialze initial called prerendered components client rendering", "d": "4/2015"}, {"body": "kryptt yeah think really boils able determine clientserver somehow update transition happens ie assume value context would sufficient", "d": "4/2015"}, {"body": "want support would probably react configurable way sort like", "d": "4/2015"}, {"body": "fixed", "d": "4/2015"}, {"body": "guess", "d": "4/2015"}, {"body": "suppose batch update print callback fixed fiddles unfortunately still incorrect", "d": "4/2015"}, {"body": "thanks try also linked related question take look", "d": "4/2015"}, {"body": "need believe add myappinit similar external script tags queue correctly", "d": "4/2015"}, {"body": "nt plan class support make classes however like", "d": "4/2015"}, {"body": "yeah petehunt change", "d": "4/2015"}, {"body": "others uses format get prop value choice pass index prop name think correct way pass prop value explicitly think might hack make work nicely though forgot pete pr looked like", "d": "4/2015"}, {"body": "chenglou way could index name huge deal help narrow search space working inconsistent apis", "d": "4/2015"}, {"body": "brigand possible might require api change sure whether worth point", "d": "4/2015"}, {"body": "leave commentits worth", "d": "4/2015"}, {"body": "chenglou probably nevermind", "d": "4/2015"}, {"body": "fixed", "d": "4/2015"}, {"body": "nt heard much desire going close sounds like likely antipattern component sometimes receives context parent sometimes nt", "d": "4/2015"}, {"body": "update still happening", "d": "4/2015"}, {"body": "resolved marked merged may issue closed", "d": "4/2015"}, {"body": "yes thanks", "d": "4/2015"}, {"body": "also wary exposing api long term use flow systems probably move proptypes core eventually", "d": "4/2015"}, {"body": "merging sounds like timeouttransitiongroup working people", "d": "4/2015"}, {"body": "nt plans right", "d": "4/2015"}, {"body": "nt think going anything", "d": "4/2015"}, {"body": "fixed chrome also added better warning particular problem", "d": "4/2015"}, {"body": "foreignobject", "d": "4/2015"}, {"body": "work possibly attributes", "d": "4/2015"}, {"body": "status supporting svg addons ran today", "d": "4/2015"}, {"body": "cc xymostech michelletodd", "d": "4/2015"}, {"body": "namespaced attributes", "d": "4/2015"}, {"body": "full svg support addons", "d": "4/2015"}, {"body": "svg attribute support", "d": "4/2015"}, {"body": "supporting attributes", "d": "4/2015"}, {"body": "request adding attribute fillrule maybe fillrule", "d": "4/2015"}, {"body": "would also like see svg addon", "d": "4/2015"}, {"body": "react core team behindthescenes movement discussion", "d": "4/2015"}, {"body": "specifically svg things worked also related attributes change", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "fixedit", "d": "4/2015"}, {"body": "planning add utils like testutils always implement locally project helper want planning move towards shallow testing ie testutils createrenderer future", "d": "4/2015"}, {"body": "nt heard complaints close would consider pr though", "d": "4/2015"}, {"body": "handful flux projects examples several work server probably going add anything react website", "d": "4/2015"}, {"body": "plugging mine smiley", "d": "4/2015"}, {"body": "nothing planned close", "d": "4/2015"}, {"body": "want chime nt really understand input field change value event like state changed elsewhere update nt see makes sense personally element gets props makes difference problem faced right writing refs element needs updated form state change wrapping method like using jquery personally feel aspect form handling react bit clunky", "d": "4/2015"}, {"body": "running issue ended something like componentdidmount function var thisget function data thatsetstate data data loaded true render function thisstateloaded loading", "d": "4/2015"}, {"body": "nt know related issue misconception part using reactcsstransitiongroup transitionleave false cause strange behaviour code running navigating another tab case code reproduce run example everything works fine open another tab wait sec return example spans nt disappear strange behaviour occurs idea happening", "d": "4/2015"}, {"body": "geoffreymm probably take look discussionpossible solutions", "d": "4/2015"}, {"body": "partially fixed rest sounds like", "d": "4/2015"}, {"body": "came today raise exact issue", "d": "4/2015"}, {"body": "super actionable close maybe rethink api add async rendering support changes batching", "d": "4/2015"}, {"body": "brigand andreypopp description decorators includes api desugaring already implemented babel typescript", "d": "4/2015"}, {"body": "yeah unfortunate something nt great solution khan academy timeouttransitiongroup worked several people linked issue", "d": "4/2015"}, {"body": "yes mention docs would great", "d": "4/2015"}, {"body": "update", "d": "4/2015"}, {"body": "able get tests pass using simulatenative codez jsx andorcomponentjsx render function var props classname chain andor onmouseleave thishandlemouseleave onclick thistoggleediting handlemouseleave function thissetstate editing false andorcomponentjsxtest sets state editing false mouse leaves function var andor reacttestutilsrenderintodocument var node andorgetdomnode test results", "d": "4/2015"}, {"body": "brianblocker tried using instead still trigger event", "d": "4/2015"}, {"body": "ryanzec helps difference worked calling pass amp fail states listed along full test case passed failed itonly onmouseover item sets class focused function let listitems testutilsscryrenderedcomponentswithtype thiscomponent listgroupitem let chosenlistitem listitems update seems also work", "d": "4/2015"}, {"body": "update issue running similar problem", "d": "4/2015"}, {"body": "also ran issue recently wrap child fix bug", "d": "4/2015"}, {"body": "got done", "d": "4/2015"}, {"body": "cc", "d": "4/2015"}, {"body": "visionscaper tip press subscribe right column", "d": "4/2015"}, {"body": "updates suggested best practices one autofill event polyfill seems like sledgehammer solution", "d": "4/2015"}, {"body": "manually call setstate change input value maybe want onchange function e thissetstate value etargetvalue manaulchange function val var input thisrefstestinputgetdomnode inputvalue val thissetstate value val", "d": "4/2015"}, {"body": "syranide spicyj us nt irc resolution", "d": "4/2015"}, {"body": "laser iirc simply better ways approach problem nt rely internals faint memory simply generating unique id component mount using instead could way", "d": "4/2015"}, {"body": "syranide ah okay thanks clarifying team trying come approach including viewspecific token actions errors say failing serverside validation linked back originating views wout introducing granular viewspecific stores approach suggested jingc love able rely unique id set react instead generate something possible take care erin", "d": "4/2015"}, {"body": "laser yeah need unique id component make counter increment new component try avoid adding functionality react easily replicated component code", "d": "4/2015"}, {"body": "spicyj cool makes sense without thinking hard could imagine something like", "d": "4/2015"}, {"body": "syranide unfortunately seems react sometimes goes little bit overboard helpful warnings one cases", "d": "4/2015"}, {"body": "warning often helpful beginners know really nt want handler nt use custom component react composition components maybe example custom component added forms docs", "d": "4/2015"}, {"body": "wontfixing", "d": "4/2015"}, {"body": "want support async server rendering going close issue original docs asked done think issues open track async server rendering", "d": "4/2015"}, {"body": "nt super actionable going close thanks thoughts though css transitions seem surprisingly tricky", "d": "4/2015"}, {"body": "nt think going anything specifically server rendering bundling builds like zpao mentioned might change npm package eventually prebuilt using closure similar", "d": "4/2015"}, {"body": "related", "d": "4/2015"}, {"body": "simenbrekken workaround best know", "d": "4/2015"}, {"body": "convoluted solution anyone else ever wants hack something together handlechange function itempropkey event function assign obj keypath value lastkeyindex var lt lastkeyindex key keypath key obj obj key obj obj key obj keypath lastkeyindex value assumes state object something like", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "fixed", "d": "4/2015"}, {"body": "anyone interested using different approach case click outside component interacting another objectsignaljs javascript componentdidmount function objectsignalcomponentclickedadd thiscomponentclicked componentwillmount function objectsignalcomponentclickedremove thiscomponentclicked componentclicked function id consolelog componentclicked id check dropdown opened etc cheers", "d": "4/2015"}, {"body": "nt like idea stopping event propagation scale unfortunately react makes hard handle events consistently mix libraries expect events work normal fashion circumventing react together javascript componentdidmount function documentaddeventlistener click thisondocumentclick", "d": "4/2015"}, {"body": "johnarnfield literally reactonclickoutside mixin", "d": "4/2015"}, {"body": "reopened since looks like changes reverted getting similar issue whether jsx used obviously real world example case complex component multitude options charting module need able pass config objects definitely seeing crosstalk props different instances workaround anyone recommend edit actually see problem probably using state", "d": "4/2015"}, {"body": "spicyj still open bug home page examples visible without cloning issue still valid specify specifically examples concerned", "d": "4/2015"}, {"body": "examples", "d": "4/2015"}, {"body": "would probably part site redesign nt feel strongly keeping open though like close", "d": "4/2015"}, {"body": "desire close agree nice framework authors make easy run examples think perfectly valid request nt sure examples talking andor modern homepage satisfied issue sounds like nt", "d": "4/2015"}, {"body": "homepage nt changed two years", "d": "4/2015"}, {"body": "think pretty good idea kind messy normally connect windowdocument level events flux pass app tree would nice could pass option reactrender define app entry point delegate events kind topic could related work making react handle mounted documentbody function sensibly safer mount react document body could delegate body events default", "d": "4/2015"}, {"body": "nelix events propagate bubble proposal", "d": "4/2015"}, {"body": "provide minimum api hook react event system let third party libs build see fit", "d": "4/2015"}, {"body": "could nt agree poster", "d": "4/2015"}, {"body": "brigand suggestion", "d": "4/2015"}, {"body": "would possible introduce concept config support customization like seems like could expanded solve svg attributes issues well making svg attributes config match strings javascript reactconfig htmldompropertyconfig iscustomattribute regexpprototypetestbind dataarialazo az azd properties someotherprop null would trigger reactinjectiondompropertyinjectdompropertyconfig htmldompropertyconfig", "d": "4/2015"}, {"body": "jstrimpel want avoid adding configs make things complicated users api surface area things could go wrong introduce component incompatibilities make difficult us permutations conditions need tested know want get rid attributes whitelist anyway makes sense introduce config take away subsequent release", "d": "4/2015"}, {"body": "oops nt mean close", "d": "4/2015"}, {"body": "jsfb thanks removing whitelist eta", "d": "4/2015"}, {"body": "awesome removing whitelist fix use case perfectly interested see svg wizardry cooking tehnomaag amp dandelany nt considered using react svg could pretty cool", "d": "4/2015"}, {"body": "removing whitelist", "d": "4/2015"}, {"body": "appreciate removal tag name whitelist allowed us support many custom elements however allowed us support custom elements extend native elements require attribute described previous comment resolution would superduperappreciated", "d": "4/2015"}, {"body": "aaronius something want happy take pr adding", "d": "4/2015"}, {"body": "spicyj would totally pr something small like adding nt think would solve entire custom element problem attribute example use attribute extend element extension uses custom attribute named would removed custom element may fail behave properly get around using nfroidure method make really sad info priority remove whitelist would rad", "d": "4/2015"}, {"body": "jhicken currently skip whitelisting check component name contains dash enable component inheritance would need also skip whitelist check component contained attribute would allow arbitrary properties custom element", "d": "4/2015"}, {"body": "jsfb know talked code looks like", "d": "4/2015"}, {"body": "threw commit together jsfb suggested peak let know thoughts", "d": "4/2015"}]