[{"title": "treat value null empty string", "body": "per gaearon request opening new issue based currently create input like null value flag react treat uncontrolled input console warning generated however often valid condition example creating new object initialized w default values server passed component props form requires address address line often optional passing null value controlled component reasonable thing one workaround ie errorprone approach quite awkward per issue referenced react team planned treating null empty string nt yet occurred like propose tackling problem near future please let know help", "num": "11417", "d": "10/2017"}, {"title": "reactchildren support call return types", "body": "include react defined subrepo children enumerated similar support added issue follow suggested gaearon", "num": "11416", "d": "10/2017"}, {"title": "componentdidcatch fired expected", "body": "hello guys try build custom blog app branch mentioned issue issue ca nt bring live errorboundary though everything like described react docs debugging shows componentdidcatch never called errors synthetic new error real ui errors use errorboundary navigation component errorboundary component jsx export class errorboundary extends reactcomponent lt children jsxelement ierrorboundarystate state ierrorboundarystate haserror false blog component bugged natural way code cause render bug runtime also try conditional throw error inside blog render method wrap root application component errorboundary every time exatly effect componentdidcatch fired expected behavior componentdidcatch fired child component ca nt render properly due unhandled exception like described docs project technology stack packagejson windows chrome react typescript config extended file webpack webpackdevserver config redux reactredux reactrouterredux materialui components repository", "num": "11415", "d": "10/2017"}, {"title": "serverside rendering async routing", "body": "hi render synchronous route serverside client side hydrate dom get warning client side asynchronous route nt find component hand react fiber reconciliation tries remove non hydratable node page makes blank flash client side", "num": "11414", "d": "10/2017"}, {"title": "\u4e66\u5199\u683c\u5f0f\u9519\u8bef", "body": "jsx prevents injection attacks default react dom escapes values embedded jsx rendering thus ensures never inject anything explicitly written application everything converted string rendered helps prevent xss crosssite scripting attacks reactdom", "num": "11413", "d": "10/2017"}, {"title": "jsx \u4ee3\u8868 objects", "body": "babel\u5c06jsx\u7f16\u8bd1\u6210reactcreateelement \u8f6c\u8bd1\u5668\u4f1a\u628a jsx\u8f6c\u6362\u6210\u4e00\u4e2a\u540d\u4e3a\u7684\u65b9\u6cd5\u8c03\u7528", "num": "11412", "d": "10/2017"}, {"title": "reactdom \u4e66\u5199\u683c\u5f0f\u4fee\u6539", "body": "", "num": "11411", "d": "10/2017"}, {"title": "error boundaries triggered event handlers", "body": "want request feature report bug feature question current behavior componentdidcatch triggered error occurred event handlers react components expected behavior honest without reading full documentation error boundaries first attempt test error boundaries trigger error event handler ouch discovered componentdidcatch triggered react lifecycle methods render wondering design decision done like would convenient one component handle unexpected exceptions inside components instead two ways handle errors inside component also created stackoverflow question concern thanks versions react browser os affected issue work previous versions react react", "num": "11409", "d": "10/2017"}, {"title": "web development", "body": "use laravel react js mysql building site like yelp tripadvisor good option rendering csr ssr approach good website initially want stay monolithic architecture year later go microservice architecture method follow make shifting easier mono micro moreover target make site progressive web app beginning need suggestion guys", "num": "11408", "d": "10/2017"}, {"title": "errors guys help pls", "body": "want set yarn terminal shows error entering command packagejson name workspace private true scripts start meteor port ip port dependencies babelruntime bcrypt classnames history meteornodestubs moment proptypes react reactaddonspurerendermixin reactdom reactrouter help pls", "num": "11407", "d": "10/2017"}, {"title": "proposal promise setstate first arg", "body": "recommend way use setstate use function instead object async functions push inside setstate add arg write instead", "num": "11406", "d": "10/2017"}, {"title": "focusinfocusout relatedtarget ie", "body": "currently react lt support events problem ie lt blur event relatedtarget great support events question support later versions problem mentioned answer", "num": "11405", "d": "10/2017"}, {"title": "cases lose components", "body": "want request feature report bug problem understand current behavior behind react div components loaded current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react document structure looks like thisthe second div used react components first div able load properly dom last div load dom expected behavior divs loaded normally versions react browser os affected issue work previous versions react react system", "num": "11403", "d": "10/2017"}, {"title": "wip rfc improvements ref system", "body": "formal discussion talk future refs within react improve upon current behavior currently two ways refs react string refs callback refs string refs string refs applied composite components class components ie host components ie example might look like types jsx host components class mycomponent extends reactcomponent componentdidmount thisrefsinputfocus render return composite components class inputwrapper extends reactcomponent focus thisrefsinputfocus render return class formcomponent extends reactcomponent componentdidmount thisrefsinputwrapperfocus render return callback refs callback refs also applied composite components class components ie host components ie example might look like types jsx host components class mycomponent extends reactcomponent componentdidmount thisinputnode thisinputnodefocus render return composite components class inputwrapper extends reactcomponent focus thisinputfocus render return input domnode type text class formcomponent extends reactcomponent componentdidmount thisinputwrapperfocus render return inputwrapper instance proposed behavior propose three major changes current ref system works deprecate string refs removal react ref api broken several aspects taken refer thisrefs myname strings closure compiler advanced mode compatible nt allow notion multiple owners single instance magical dynamic strings potentially break optimizations vms needs always consistent synchronously resolved means asynchronous batching rendering introduces potential bugs currently hook get sibling refs one component refer sibling context reference works one level breaks ability wrap one encapsulation ca nt statically typed cast use languages like flow typescript way attach ref correct owner callback invoked child ref attached callback issued current owner require access react runtime find current owner creation reactelement making aheadoftime optimizations hard deal callback refs issues recommended choice react team time already everything callback refs personally feel need keep string ref system around libraries inferno preact already removed string refs reported performance optimization deprecate ref prop entirely feel refs components lead problematic patterns make apps much harder scale easily break unidirection flow component tree opinion class components nt able access instances components communication use instead alternatively cases access root dom node needed unavailable wrapper component could used escape hatch example something personally feel problematic pattern one seen bite teams past jsx class itemcontainer extends reactcomponent render let subscribe unsubscribe propssubscriptionhandler example couples handling items item container breaking control flow ideally passed child prop child control flow another usage refs composite components related usage passing component instance ref get back root dom node example follows approach avoided instance passing refs via props add special hostref prop works host components reduce confusion would normal prop composite components keeping current ref naming might cause unintended problems would also allow apps move new system incrementally furthermore accept callback refs string refs example jsx function button classname props return hostref simple prop gets passed child via jsx spread downsides migration cost changes proposal cost migration string refs still widely used thirdparty components likely trackable upgraded via codemodding refs composite components far widely used string refs may make sense make changes vs cost react ecosystem unlikely upgraded via codemod codemodding may possible automate vast majority string refs callback refs via codemod need form checking owner ref differs cases string refs vs callback refs point needs broken apart discussed might possible automate codemod refs composite components would require change structure components app work point needs broken apart discussed considerations react native currently nt host components composite components refs core components need special consideration may function maybe could function prop called something similar would work like refs currently", "num": "11401", "d": "10/2017"}, {"title": "follow want go microservice architecture building large scale website planning use laravel react js mysql initially beside type rendering best csr ssr implement things prooperly", "body": "", "num": "11399", "d": "10/2017"}, {"title": "elements components", "body": "code react element react component asking told render instance used case react element given according doc react elements immutable would pass different props instance render latter immutable", "num": "11398", "d": "10/2017"}, {"title": "mismatch node type hydrating svg ssr", "body": "want request feature report bug report bug current behavior getting following error trying hydrate ssr content current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react following check returns false expected behavior node types compared correctly svg uses camelcase tagname versions react browser os affected issue work previous versions react react", "num": "11397", "d": "10/2017"}, {"title": "function also iterable treated inconsistently", "body": "want request feature report bug bug think current behavior codesandbox plop html function makerenderable fn valuegetter const iteratorsymbol typeof symbol function amp amp symboliterator iterator function iterator let timescalled return next const done timescalled gt return done value done undefined valuegetter fn iteratorsymbol iterator return fn const renderablefunction makerenderable function b kinda irrelevant goes return b gt rendered version function function working return works renderablefunction function notworking return work renderablefunction reactdomrender documentgetelementbyid root expected behavior expect things render regardless whether child member array children versions react browser os affected issue work previous versions react yes worked react suggested solution fairly confident issue array children case getiteratorfn call within statement whereas original reconcilechildfibers puts getiteratorfn call outside mistaken simple fix would move curly brace lines wink happy complete test given little direction like test go thanks", "num": "11396", "d": "10/2017"}, {"title": "occams software", "body": "reasonably familiar react coder looking simple template image oriented app downloaded reviewedhackedplayed many examples section useful notice something felt worth mentioning perhaps alone find many files confusing trying figure code works perhaps hangover java trained engineers bringing coding style javascript really wish party nice emoji search app good example one consolidates files one file one make version clear readable easily understood fewer lines code code modules wade figure code works actually thought impossible impossible character character lines full use monitor easy mentioning react seems particularly sprawling framework could bit grooming demo fb react single page demo less anyone else agree would like propose section examples called full app snippets something equally silly us get directory vertigo easily sometimes reminds sitting back car reading book windy road", "num": "11394", "d": "10/2017"}, {"title": "feature assign multiple jsx attributes value", "body": "would like propose feature going keep real simple often times like similar multiple variable assignment javascript good idea bad idea", "num": "11393", "d": "10/2017"}, {"title": "calling setstate inside requestanimationframe loop causes leak", "body": "want request feature report bug bug current behavior component implements loop calls inside endlessly create listeners page shown picture chrome developer tools understand react uses raf reconciliation algorithm running multiple raf work without producing behavior understanding raf callbacks appended next frame callstack current behavior bug please provide steps reproduce possible minimal demo problem minimal code required trigger behavior profiling fiddle produce result previous picture expected behavior react behavior happen running code produce unwanted listeners seen picture versions react browser os affected issue work previous versions react tested react ubuntu chrome behavior happen previous versions react", "num": "11392", "d": "10/2017"}, {"title": "createportal support option stop propagation events react tree", "body": "want request feature report bug feature also bug cause new api breaks old current behavior stop events propagation portal react tree ancestors layers mechanism modalspopovers completely broken example dropdown button click click opens popover also want close popover clicking button createportal click inside popover fires click button closing use stoppropagation simple case tons cases need use stoppropagation also stop events expected behavior createportal option stop synthetic events propagation react tree without manually stopping every event think", "num": "11387", "d": "10/2017"}, {"title": "please simplify component event binding", "body": "request feature class toggle extends reactcomponent constructor props super props thisstate istoggleon true handleclick simple like class toggle extends reactcomponent constructor props super props thisstate istoggleon true event register like spring handleclick", "num": "11384", "d": "10/2017"}, {"title": "chain dependency causes warnings createreactclass", "body": "want request feature report bug potential bug current behavior render react app produces warning development mode current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react create new project uses create component build project library minify js assets create another project include dependency create another react component use bundle production build create third project include dependency build react app uses warnings expected behavior warnings regarding third party dependency versions react browser os affected issue work previous versions react react version one quick example installing dependency create react app uses component component implements uses", "num": "11382", "d": "10/2017"}, {"title": "show better warning accidentally returning constructor", "body": "based conversation vjeux wrote instead error super confusing told render defined component nt make sense since returned fix show different message gave us something without method", "num": "11381", "d": "10/2017"}, {"title": "ondrop breaks onselect event", "body": "want request feature report bug bug current behavior event fired inside editable element input textarea contenteditable event element longer fire changing selection using keyboard see gif onselect event gets called time move cursor around using arrow keys event fired longer fire move cursor around also using keys jsfiddle used record video expected behavior event always fire selection changes versions react browser os affected issue work previous versions react react chrome", "num": "11379", "d": "10/2017"}, {"title": "separate rendertostring rendertonodestream", "body": "currently possible run rendertostring client reactdomserver imports nodejs fs package would nice could still support rendertostring client", "num": "11377", "d": "10/2017"}, {"title": "reactchildren support portals", "body": "nt think currently checked probably treat elements", "num": "11373", "d": "10/2017"}, {"title": "get right enativeeventcurrenttarget use drag api", "body": "component looks like js handledrop e gt consolelog drop enativeeventcurrenttarget ecurrenttarget render return panellayerview thisstatedragover panellayerviewdragover ondragenter thishandledragover ondragover thishandledragover ondragleave thishandledragleave ondrop thishandledrop gt thispropschildren drag element set draggable true component get console message add listener dnd operation docbodyi tried find problem please help lookthanks ahead", "num": "11370", "d": "10/2017"}, {"title": "react recognize property dom elements", "body": "property definition yet recognized react though property relieves pain deal browsers support date inputs nt former require property form latter require nicely formatted date eg since user see exactly react wo nt even allow conjunction though proclaim machine readable format used browsers support date input alternatively support date passed property use always put nicely formatted date property pain relieved also react allow format property case indicated browser support still lacky best even avant garde browsers hence urgent issue react get relevant though herein duly noted", "num": "11369", "d": "10/2017"}, {"title": "add way opt user timing api calls", "body": "want request feature report bug bug feature dont know current behavior building dev environment performance timeline measures appear default ie without query string described bug way disable perf measures need way clear timeline focus custom perf measures", "num": "11366", "d": "10/2017"}, {"title": "fix coverage reporting", "body": "reason coverall says master pointing commit makes sense probably bug either reporting side removed badge readme", "num": "11363", "d": "10/2017"}, {"title": "npm recognized internal external command", "body": "want request feature report bug bug installation issue first time use react current behavior create app refered guide npm recognized internal external added node enviornment variables user variables system variables os win node version npm version", "num": "11358", "d": "10/2017"}, {"title": "bug onmouseevent nt exsit canvas", "body": "want report bug use onmousemove event canvas ca nt get mouseevent get proxy use addeventlistener get mouseevent test code import react component react class canvascolor extends component constructor super thiscolor ffffff componentdidmount thiscontext documentqueryselector canvas thisctx thiscontextgetcontext thisrendercanvas getcolor e gt consolelog e etarget const x elayerx const elayery const data thisctxgetimagedata x data parsefloat data thiscolor rgba datajoin consolelog thiscolor rendercanvas gt const imagesource documentqueryselector img thiscontextwidth imagesourcewidth thiscontextheight imagesourceheight thiscontextstyleposition absolute thiscontextstylezindex thiscontextstyletop thisctxdrawimage imagesource imagesourcewidth imagesourceheight onmousemove e gt thisgetcolor e render return", "num": "11357", "d": "10/2017"}, {"title": "lineargradient produces server side rendering warning", "body": "report bug server side rendering warning using svgs react current behavior get following warning using svg tag lineargradient attribute one components since server side warning reproduced warning repo simple example svg tag steps reproduce clone repo visit browser open javascript console see warning expected behavior expected behaviour warning server side rendering like none rendering client side worked react tested branch repo", "num": "11354", "d": "10/2017"}, {"title": "error boundary stack traces show components unknown", "body": "want request feature report bug bug unless missed something required support current behavior error boundary component stack traces show every component name current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react trigger error catch error boundary observe string shingo yamazaki codepen demo reproduce issue expected behavior versions react browser os affected issue work previous versions react react windows na", "num": "11353", "d": "10/2017"}, {"title": "invariants nt error codes yet missing production builds", "body": "see comment verified introduced regression", "num": "11348", "d": "10/2017"}, {"title": "rfc plan custom element attributesproperties react", "body": "meant address doc outlines pros cons various approaches react could use handle attributes properties custom elements tocsummary background proposals option set properties pros easy understandimplement avoids conflict future global attributes takes advantage custom element upgrade custom elements treated like react component cons possibly breaking change need ref set attribute clear serverside rendering would work option propertiesifavailable pros nonbreaking change cons developers need understand heuristic falling back attributes may conflict future globals option differentiate properties sigil pros nonbreaking change developers optin similar libraries handle attributesproperties system explicit cons new syntax clear serverside rendering would work option add attributes object pros system explicit extending syntax may also solve issues event handling cons new syntax may breaking change may larger change previous proposals option api consuming custom elements pros system explicit nonbreaking change idiomatic react cons could lot work complex component may bloat bundle size config needs keep pace component background react tries pass data custom element always using html attributes attributes must serialized strings approach creates problems data passed object array scenario end something like workaround use manually set property workaround feels bit unnecessary majority custom elements shipped today written libraries automatically generate javascript properties back exposed attributes anyone handauthoring vanilla custom element encouraged follow practice well like ideally see runtime communication custom elements react use javascript properties default doc outlines proposals react could updated make happen proposals option set properties rather try decide property attribute set react could always set properties custom elements react would check see property exists element beforehand example code would result react setting property element equal value camelcased property names react could use style uses today properties like pros easy understandimplement model simple explicit dovetails react javascriptcentric api dom element created libraries like polymer skate automatically generate properties back exposed attributes elements work approach developers handauthoring vanilla components encouraged back attributes properties mirrors modern ie oddballs like elements etc implemented avoids conflict future global attributes react sets attribute custom element always risk future version html ship similarly named attribute break things concern discussed spec authors clear solution problem avoiding attributes entirely except developer explicitly sets one using may sidestep issue browsers come better solution takes advantage custom element upgrade custom elements lazily upgraded page prpl patterns rely technique upgrade process custom element access properties passed properties set definition use render initial state custom elements treated like react component react components pass data one another already use properties would make custom elements behave way cons possibly breaking change developer handauthoring vanilla custom elements attributes api need update code app break fix would use set attribute explained need ref set attribute changing behavior properties preferred means developers need use order explicitly set attribute custom element reversal current behavior developers need order set property since developers rarely need set attributes custom elements seems like reasonable tradeoff clear serverside rendering would work clear model would map serverside rendering custom elements react could assume properties map similarly named attributes attempt set server far bulletproof would possibly require heuristic things like camelcased properties dashcased attributes option propertiesifavailable runtime react could attempt detect property present custom element property present react use otherwise fallback setting attribute model preact uses deal custom elements pseudocode implementation possible steps element defined property react use element undefined property react trying pass primitive data stringnumberboolean use attribute alternative warn set element undefined property react trying pass objectarray set property someattr object object useful alternative warn set element rendered server react trying pass stringnumberboolean use attribute element rendered server react trying pass objectarray anything pros nonbreaking change possible create custom element uses attributes interface authoring style encouraged may happen regardless custom element author relying behavior change would nonbreaking cons developers need understand heuristic developers might confused react sets attribute instead property depending chosen load element falling back attributes may conflict future globals sebastian raised concern using check existence property custom element might accidentally detect property superclass htmlelement also potential conflicts global attributes discussed previously doc option differentiate properties sigil react could continue setting attributes custom elements provide sigil developers could use explicitly set properties instead similar approach used glimmerjs glimmer example example sigil indicates pass data custom element using properties serialized attribute string react components already pass data one another using properties would need use sigil although would work would redundant instead would primarily used explicit instruction pass data custom element using javascript properties ht developit preact suggesting approach pros nonbreaking change developers optin preexisting react custom element apps would continue work exactly developers could choose wanted update code use new sigil style similar libraries handle attributesproperties similar glimmer angular vue use modifiers differentiate attributes properties vue example angular example system explicit developers tell react exactly want instead relying heuristic like propertiesifavailable approach cons new syntax developers need taught use needs thoroughly tested make sure backwards compatible clear serverside rendering would work sigil switch using similarly named attribute option add attributes object react could add additional syntax lets authors explicitly pass data attributes developers use attributes object data passed using javascript properties example idea originally proposed treshugart author skatejs implemented val library pros system explicit developers tell react exactly want instead relying heuristic like propertiesifavailable approach extending syntax may also solve issues event handling note outside scope document maybe worth mentioning issue requests react bypass synthetic event system declarative event handlers added custom elements custom element event names arbitrary strings means capitalized fashion bypass synthetic event system today also mean needing come heuristic mapping event names jsx however syntax extended allow attributes could also extended allow events well model variable name used event name heuristic needed cons new syntax developers need taught use needs thoroughly tested make sure backwards compatible may breaking change components already rely properties named could break may larger change previous proposals react may easier make incremental change like one previous proposals position proposal something take consideration later bigger refactor option api consuming custom elements proposal offered sophiebits gaearon react team react could create new api consuming custom elements maps element behavior configuration object pseudocode example code returns proxy component knows pass data custom element depending configuration provide would use proxy component app instead using custom element directly example usage pros system explicit developers tell react exact behavior want nonbreaking change developers optin using object continue using current system idiomatic react change require new jsx syntax feels like apis react example proptypes even though moved package somewhat similar approach cons could lot work complex component polymer paperinput element properties would produce large config developers using lot custom elements app may equal lot configs need write may bloat bundle size related point custom element class incurs cost definition config object size note sure true someone familiar react build process could verify config needs keep pace component every time component minor version revision adds new property config need updated well difficult add maintenance maybe configs generated source less burden may mean needing create new tool generate configs web component library cc sebmarkbage gaearon developit treshugart justinfagnani", "num": "11347", "d": "10/2017"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11345", "d": "10/2017"}, {"title": "unexpected rerenders production enviroment", "body": "want request feature report bug report bug current behavior react making unexpected rerenders used along happens production enviroment current behavior bug please provide steps reproduce possible minimal demo problem application running development mode setting key prop properly thus making rerenders route calls inside component app production mode appending new value existing key resulting rerender expected behavior application production mode setting proper key value rerendering versions react browser os affected issue work previous versions react nt believe browser problem issue safari chrome tested react react tried isolate issue much could help please let know", "num": "11344", "d": "10/2017"}, {"title": "support onend svg event", "body": "hi trying use warning unknown event handler property ignored workaround", "num": "11342", "d": "10/2017"}, {"title": "hydration breaks html class", "body": "updated application react app using reactresponsive since updated react bugs related invalid html outputted react hydration server generates html desktop client mobile rendering mismatch previously causing full rerender perfect worked react supposed notrerender everything mismatching parts run html invalid mix sliced html generated server desktop mode html served server hydration html generated client without ssr normal mobile mode html rendered react disable ssr wrong html generated hydration client mobile mode invalid html rendered react tries hydrate expected html versions chrome react", "num": "11336", "d": "10/2017"}, {"title": "iframe content getting initial document differs actual result", "body": "want request feature report bug bug sure react browser current behavior made static iframe display url run script iframe parent window works fine second refresh entire page every time load body innerhtml differs innerhtml supposed correct rendered html effected javascript within iframe page script shows html initial html loaded behavious watched pausing script even several time calling reload iframe problem persists fixed entire page reloads parent window current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react something like sorry know make import work fiddle expected behavior versions react browser os affected issue work previous versions react chrome macos high siera", "num": "11335", "d": "10/2017"}, {"title": "componentdidcatch getting called error promise", "body": "per new react release doc says react prints errors occurred rendering console development even application accidentally swallows parent component child component triggered error block promise call catch method promise componentdidcatch parent getting called sure whether expected behaviour jsfiddle", "num": "11334", "d": "10/2017"}, {"title": "consider publishing external requestidlecallback polyfill", "body": "require high fidelity requestidlecallback polyfill pretty much always fallback internal fallback still means others ship nt cooperating even fb two builtin one yet implementing option since want start using probably become even interesting priority queue option lands sufficient us since start polyfilling option even native requestidlecallback implementations", "num": "11330", "d": "10/2017"}, {"title": "get react full flow coverage", "body": "dialog gaeron want update typings package react think need help community", "num": "11328", "d": "10/2017"}, {"title": "release tool statistical perf analysis replacement reactperf", "body": "want request feature report bug feature current behavior na expected behavior great react integrates timeline browsers dev tools helpful cases trying fix performance specific thing however miss perf tool previous versions could find issue tracking reimplementation tool great perf tool covered well timeline integration easily see components render needlessly therefore easily eliminated scu impact give easily see collective render time component might example component renders fast many instances thus contribute significant render time anyway give overview components slow fast render slow components flamegraph shows find specific scenarios much detail distract basically wasted exclusive inclusive tables dom table feel much better represented timeline integration versions react browser os affected issue work previous versions react yes perf addon good", "num": "11326", "d": "10/2017"}, {"title": "webpack config docs request aka", "body": "like", "num": "11324", "d": "10/2017"}, {"title": "templates apart jsx non programmatic situations", "body": "view please take look examples hello world react gt appjsx hello world vue gt appvue identical nt yes two different paradigm hey expressing things way taking benefits virtual dom feature request like vue supports jsx programmatic situations think react also support templates non programmatic situations also imagine trying create website based existing theme purchased changing jsx literally feel like sticking knife eyeballs templates existing html works please also note programmatic situations low use case non programmatic situations high use case", "num": "11322", "d": "10/2017"}, {"title": "jsx alternative namespaced tagsxml", "body": "currently working template engine uses namespaced xml tags jsx support xml namespaced tags actively maintained alternative someone point right place question", "num": "11321", "d": "10/2017"}, {"title": "strict ordering commitupdate", "body": "exactly order calls related structure tree note question asking example following several ways could rendered strict relationship assuming nt know technical terms difference though feel free use look em examples sorry using madeup terms example bottomtotop etc example bottomtotopperlevel etc example toptobottom etc example toptobottomperlevel etc also prompts another related question commitupdate element guaranteed happen children adjusted", "num": "11319", "d": "10/2017"}, {"title": "remove warnings unsupported style properties", "body": "safelist blocklist basically react seemingly allows write jsx reactdomrender documentgetelementbyid root renders style properly warnings perhaps could remove warnings writing pure react use names reason hoping remove warnings bit lenient little python wrapper uses react jupyternteract frontends", "num": "11315", "d": "10/2017"}, {"title": "ssr result render browser incorrectly", "body": "want request feature report bug bug current behavior dangerouslysetinnerhtml render html string real document well server side render environment return rendered html right browser side render sanitize html tags content example html string browser rendering difference tag removed normal behavior react sure ssr right demo expected behavior browser got ssr html render tags removed versions react browser os affected issue work previous versions react react macos try done previous version react", "num": "11314", "d": "10/2017"}, {"title": "adding support component factories createelement etc", "body": "problem let assume implementing component suite providing dozen superfancy readytouse components react users however know whether users library preferring jsx normal javascript nonjsx case users surely want write instead far nonjsx users providing component component factory seems better solution whereas jsx users would surely prefer component class createelement support component factories yet convenient component suite provider decide whether components shall provided factories classes respectively render functions case stateless functional components whether shehe always provide versions feature request promote component factories firstclass citizens react world instead downgrading legacy currently planned make sure functions like createelement etc support component factories level component classes respectively render functions case stateless functional components supported currently btw access component factory also access component classfunction via factorytype considered deprecated react team know factorytype seems helpful little example many thanks advance", "num": "11313", "d": "10/2017"}, {"title": "example links reactreconciler readme broken", "body": "reporting since says links break please file issue fix intentionally link latest versions since api still evolving knowing place uptodate examples would help lot issue template really fit trying follow anyway want request feature report bug bug readme current behavior links reconciler configuration examples links broken current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react visit reactreconcilerreadmemd expected behavior correct links wanted fix pr could find appropriate replacement reactnative versions react browser os affected issue work previous versions react issue exists branch", "num": "11310", "d": "10/2017"}, {"title": "add property", "body": "want request feature report bug improvement current behavior synthetickeyboardevent currently support property mdn nice want write keyspecific inputspecific dependent layout modifier keys handling expected behavior already exposes property property well currently want use must access versions react browser os affected issue work previous versions react affects react earlier assume", "num": "11306", "d": "10/2017"}, {"title": "express tests via public api", "body": "great contribution opportunity need rewrite unit tests terms public api means import npm entry points like etc internal modules like bad requires already marked todo tests miss help find unclaimed test files comment issue want take particular unit test file name submit pr rewrites test use public apis instead step requires thinking use previous examples rewrote tests public api inspiration example generally need think behavior testing actually reproduces react app test rare cases may involve exposing api public need discuss separately hesitate start discussion figure rewrite particular test public api comment brainstorm full list tests need change may simple oneliner changes may involve bit rewrite may require rewriting scratch may even impossible research leading conclusion still valuable love know try let us know update tests taken subscribe issue might free future somebody time finish work comment test becomes available try taken madeinfree see taken accordeiro taken reznord x taken gordyd x taken anushreesubramani x taken dphurley x taken skiritsis x taken timjacobi x taken x taken jeremenichelli x x taken jeremenichelli x taken audyodi x taken gordyd x taken enapupe x taken sadpandabear x taken minerado x taken silvestrijonathan x taken x taken smaniotto x taken timjacobi x taken douglasgimli x taken ethanarrowood x taken accordeiro x taken jstejada x taken adsonpleal firsttime contributor refer contribution instructions clear fix specific test comment tried brainstorm gave test please post findings comment decide next fine find time figure try help maybe somebody else pick later", "num": "11299", "d": "10/2017"}, {"title": "react spread operator still official documentation", "body": "bug documentation current behavior react spread operator removed react still documentation expected behavior word caution included include react maybe also add ways spreading props versions react browser os affected issue work previous versions react react worked previous releases", "num": "11293", "d": "10/2017"}, {"title": "branch tag type checking", "body": "follow neat also means sometimes comparing strings numberssymbols could potentially deopt type hints function might actually better check childtag ensure hostcomponent fragment compare type separate branches fact might already bug incase ever add strings fibertype fibers hostcomponent checking tags type comparison branches ensure nt possible bugs well optimize type hints monomorphic functions", "num": "11290", "d": "10/2017"}, {"title": "make invalid prop type warnings specific falsy", "body": "common pattern however condition correctly warns used instead could suggest specifically warning longer term alternative use proposed concise operator", "num": "11289", "d": "10/2017"}, {"title": "add", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11287", "d": "10/2017"}, {"title": "react release script followup", "body": "x verify safe run including extracting errors see comment thread context pr x decide mechanism relax peer dependency constraints see context pr", "num": "11285", "d": "10/2017"}, {"title": "jest watching mode seems unexpectedly cache sources", "body": "probably configuration issue transitioning workspaces restart watcher see changes sometimes", "num": "11283", "d": "10/2017"}, {"title": "react test utils nt bundle copy reconciler", "body": "way currently set incorrect downright broken blow faces later specifically currently uses brings copy parts reconciler however also depends example would give accurate results nt bump use stateless fix forbidding bundle reconciler secret stuff exposed work could separate stateless helper safe share seems easier", "num": "11280", "d": "10/2017"}, {"title": "react test renderer peer dependency keeps getting bumped", "body": "noticed reacttestrenderer peer dependency react gets bumped every version update least happens version still required could peer dependency version stay even versions package get bumped say ask makes hard libraries pull reacttestrenderer end users use directly nt pull package never use directly specific example mind enzyme version peer dependency dependency react installed enzyme tries install latest reacttestrenderer pull requires satisfy recently made test renderer peer dependency annoying user library manually install package nt use directly changed regular dependency noticing peer dependency testrenderer react gets bumped every version change causes problem possible leave peer dependency within major version least going forward another way library pull test renderer without forcing user", "num": "11278", "d": "10/2017"}, {"title": "latest version react deleted content asproptypes provided allow users decide whether delete contain contents", "body": "example react releases new version may require two new versions one containing deleted content included", "num": "11277", "d": "10/2017"}, {"title": "yarn workspaces followup", "body": "soon x package called weird maybe rename clarify difference x better strategy shared code currently pile code without particular structure import directly haste master though least worse might want tighten little bit future maybe firstclass entry points need clear code duplicated renderers using modules x server nt depend reconciler modules noticed depends seems like always miss warnings server maybe depend shared file instead regardless already issue master regression x find solid way avoid jest skipping modules current hack gross hack otherwise jest skips code thinking need compiled resolved hack dangerous cause false positives thirdparty code specifically check resolved symlink path jest transformer still means add package whose name start babeled tests add another exceptional case live hack little bit since plan publish packages start near future file issue jest though come better solution update fixed via later x get rid flag bundle config x rename entry points intuitive eg react entry point etc x make internal folder structure sensible x move requires around prettier x fix relative requires tests x get rid bundle config x bundling prod bundle x general remove anything bundle config determined using package folder x fix gross hack forbid importing packages move flow types odd packagelevel deps must top level split bundle config per package autodiscover packages bundling version check autogenerate simple entry point files npm exception move packages", "num": "11275", "d": "10/2017"}, {"title": "redirect first doc page", "body": "want request feature report bug bugbroken link thinking react section docs line current behavior broken link sends user page found current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior go appropriate link need help executing step versions react browser os affected issue work previous versions react", "num": "11274", "d": "10/2017"}, {"title": "dangerouslysetinnerhtml working ie", "body": "hello today spotted bug setting inner html element using property browser raise error use ssr actual html received server good probably problem func code string contains html", "num": "11271", "d": "10/2017"}, {"title": "reactdomhydrate falsely warns text content mismatch", "body": "want request feature report bug bug current behavior javascript function foo return foo function test return bar hydration serverside rendered produces following warning expected behavior warning versions react browser os affected issue work previous versions react react reactdom", "num": "11268", "d": "10/2017"}, {"title": "way set svg transformorigin attribute", "body": "list supported svg attributes actually supported dom current behavior attribute ignored warning shown console property supported possible set another error attribute valid course set dom makes spinner look correct expected behavior attribute set tag", "num": "11265", "d": "10/2017"}, {"title": "new way bind event handler function", "body": "currently way use event handlers functional components without performance degradation eg unnecessary function recreations bind arrow functions case render new handler created also react need perform bookkeeping remove previous handler dom element add new handler ok event delegation system react touch dom elements replace handler somewhere internal structure events nt bubble take noticeable time application sure change class components solve problem bind handlers component created want use functional components application came new fastest method binding handlers actually preform binding reason binding function event handler need access current component props current component state another way get props state component react describe docs yes access props state current component without unnecessary functions recreations render function node node return nodetext function onclick e const node getprops e nodeparentremovechild node function getprops e return etarget objectkeys etarget filter k gt kindexof reactinternalinstance debugownermemoizedprops demo perform event delegations efficient way react need assign current vdomelement rendered dom element vdomelement link actual owner component get props state react concealed developers made suffer performance degradation also choosing problem many articles advices recommend investigate rule bind handlers render function many solutions exist use bind constructor use class field properties arrow functions use autobind decorators solution need even recreate handlers component instantiation like current solutions definitely fastest way highly suggest make api public make helper get current props state eventtarget", "num": "11263", "d": "10/2017"}, {"title": "ref set null every render", "body": "want request feature report bug possible bug current behavior ref callbacks always passed subsequently passed reference current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react attached code sample following life cycle functions ref callbacks executed nullrefexamplezip initial render app render myapp render myportal render myapp ref set myapp myportal ref set myportal second render app update app render myapp update myapp render myportal update myportal render myapp ref set null myportal ref set null myapp update myapp ref set myapp myportal update myportal ref set myportal app update expected behavior nt expecting refs set null render although gets set shortly thereafter expected behaviour nt see documentation versions react browser os affected issue work previous versions react react macos chrome amp safari", "num": "11258", "d": "10/2017"}, {"title": "apply files npm whitelist build time", "body": "make build step apply logic npm whitelisting field way issues like would get caught early", "num": "11257", "d": "10/2017"}, {"title": "reactart npm missing lib folder", "body": "seems like intended public apis published npm folder whitelist", "num": "11254", "d": "10/2017"}, {"title": "uncaught typeerror thisupdaterenqueuecallback function", "body": "bug stack trace", "num": "11253", "d": "10/2017"}, {"title": "react server side rendering clientserver mismatched html differences", "body": "want request feature report bug bug current behavior migrating react helped us discover bug code safariios devices sort functionality would cause result return different order compared node server response chromefirefox rendered component component tag wrapping optional image elements react components completely rerendered overriding tag new url client react client component rerendered everything inside nt change wrapped url lead links leading peoples incorrect locations hopefully makes sense current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react nt know good way creating fiddle however best answer questions expected behavior would expected client side html overridden server side html react completely rerender component versions react browser os affected issue work previous versions react functionally different react react sure listed intended changes react raising make aware incase issue", "num": "11248", "d": "10/2017"}, {"title": "create property nonextensible object", "body": "want request feature report bug bug current behavior error thrown ie error message states create property nonextensible object originates following location file webpack nodemodulesreactdomlibpooledclassjs line expected behavior errors versions react browser os affected issue work previous versions react version number reactdom used work error messages started implemented dllplugin webpack involved outputting dependencies single file sure would problem though", "num": "11240", "d": "10/2017"}, {"title": "combine themebreakpoints react", "body": "need configuration app resposnive example used component searchicon materialui want adjust screen take consideration make margin also second option using react google chrome browser", "num": "11238", "d": "10/2017"}, {"title": "test", "body": "test", "num": "11237", "d": "10/2017"}, {"title": "shallow test renderer calls shouldcomponentupdate forceupdate", "body": "extra guard clause calling means always calls block even forced rerender tests example breaks shallow rendering enzyme using mobx observables minimal test case javascript import react react import shallowrenderer reacttestrenderershallow const renderer new shallowrenderer class testcomponent extends reactcomponent render return describe forceupdate gt call shouldcomponentupdate gt let called testcomponentprototypeshouldcomponentupdate gt called const component rendererrender rendererinstanceforceupdate expect called tobe lt throws called", "num": "11236", "d": "10/2017"}, {"title": "react props available arguments set html tag", "body": "want request feature report bug bug current behavior props passed dom element available react via thispropsattribute current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react issue visible expected behavior attribute passed html tag passed react props returns html tag containing world inside thispropsname props empty inside app react element versions react browser os affected issue work previous versions react browsers tested react", "num": "11234", "d": "10/2017"}, {"title": "request release react based mit license", "body": "updated react license bsd patent license mit license could release thank", "num": "11233", "d": "10/2017"}, {"title": "keyup event fired firefox android", "body": "want request feature report bug bug current behavior keyup event fired using vanilla js issue str android smartphone ensure autocompletion autocorrect enabled open firefox android works desktop chrome android type letter input field expected behavior alphanumeric char typed alert displayed versions react browser os affected issue work previous versions react version used react browser firefox android work previous versions react nt know", "num": "11231", "d": "10/2017"}, {"title": "reactiveformsmodule like react", "body": "struggling forms react reduxform library library arrive reactive forms lot bugs reactive form control field state nice way group fields validations asyn validations validator librarary included library react ecosystem better build library templates css another libraries lot bugs beta mode new versions example materialui compatible react frustating devine future solve important bugs", "num": "11229", "d": "10/2017"}, {"title": "issue dangerouslysetinnerhtml markup rehydration", "body": "want request feature report bug bug current behavior trying rehydrate markup argument optional error thrown happens component dangerouslysetinnerhtml prop example expected behavior error thrown versions react browser os affected issue work previous versions react react version browser", "num": "11228", "d": "10/2017"}, {"title": "async componentwillreceiveprops allow state update", "body": "want request feature report bug feature current behavior almost immediate rerender due called unless says otherwise expected behavior new props cause async call soon going update state anyway wo nt cool react might well wait async call thing calls one render instead two potential solution react see returns defers rerender", "num": "11224", "d": "10/2017"}, {"title": "reactwarningkeys thrown components returned iterator", "body": "want request feature report bug bug current behavior steps reproduce see expected behavior key warning versions react affects chrome macos warnings react solutions fix key warning edit docs explain needed react element dynamic props changed every render elements returned iterator", "num": "11222", "d": "10/2017"}, {"title": "code snippet docs unexpectedly throws", "body": "bug report docs present example code snippet crashes js process see particular notice highlighted parts code snippet first sentence snipppet reads react call ref callback dom element component mounts call null unmounts ref callback called null callback moment user clicks second input button method since null really yet method throw would suggest adding little guard code snippet people copypaste without worry replacing something like found docs react", "num": "11221", "d": "10/2017"}, {"title": "add flow coverage renderer fixture use maintained renderer tests", "body": "renderer package contains fixture updated every time change apis however covered flow full test coverage tedious make sure get exactly right messed making changes api also means updating lot renderers point would nice fixture could built top noop renderer something cc iamdustan gaearon", "num": "11220", "d": "10/2017"}, {"title": "way input rendering checking strategy reactdom", "body": "sure appropriate way ask like opinion notice use often code wondering way build pure function components apply logic shallow comparison rendering rendering component using reactdom reason something like guys think", "num": "11218", "d": "10/2017"}, {"title": "reactaddonstestutils needs older version reactdom", "body": "installed latest reactaddonstestutils latest npm also latest version reactdom also npm reactdom dependency would expect would trick however npm sends warnings really need older version reactdom able use testutils ok use latest reactdom version using react reactdom reactaddonstestutils", "num": "11214", "d": "10/2017"}, {"title": "use native event supported", "body": "want request feature report bug improvement current behavior right synthetic event created based two events webkit fallback days chrome safari opera spec event available actually fires includes spec properties extremely helpful tells whether event inserting text replacing text inserting line break etc tells input taking place dom right information nt exposed even browser supports checked expected behavior instead react treat slightlypreferred fallback native support add true goal end fallback stack guarantees always spec relevant information associated event extra properties critical situations want prevent default browser behavior firing perform logic internal model instead looking slate without extra information fallback hackier event occur trying parse dom change rerendering remove etc want avoid modern browsers results reduced performance another situation fixes spellcheck right nt trigger react handler even though modern browsers fire event listened right", "num": "11211", "d": "10/2017"}, {"title": "vs push", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11209", "d": "10/2017"}, {"title": "investigate nested update overflow caused coalescing", "body": "internal issue manifested infinite nested update loop triggering invariant trueadm investigated introduced fixed however failing tests related even though removed coalescing implementation feel like need investigate happened add regression test prevent issue occurring future might also valuable think additional information surface error least development example component names last ten fibers scheduled update", "num": "11207", "d": "10/2017"}, {"title": "react component passed children component nullifies effect purecomponent", "body": "nt know would come feature request bug expected things handled differently shouldcomponentupdate current behaviour component renders b passes c children b rerenders state change part passed b c basically nothing changes subtree b b still always rerenders fiddle reproduce issue click c make state change b rerenders effect much cases children passed level deep cause unnecessary rerenders previous versions question observations posted feel free answer expected handled different way", "num": "11203", "d": "10/2017"}, {"title": "react error decoder page broken", "body": "example following decode page broken described", "num": "11201", "d": "10/2017"}, {"title": "docs older versions react unavailable", "body": "want request feature report bug bug current behavior documentation older versions react deleted react documentation website shows documentation current version react current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior documentation previous versions react available somewhere ideally version picker top page select version react working like pythonorg example versions react browser os affected issue work previous versions react every version react latest", "num": "11199", "d": "10/2017"}, {"title": "automated release script", "body": "create command line tool automate release steps outlined", "num": "11198", "d": "10/2017"}, {"title": "reacttestrenderer breaks trying use internal property", "body": "using version get sample test case really error thrown fail testspecjs test suite failed run offending code var reactinstancemap var reactinternals reactsecretinternalsdonotuseoryouwillbefired var reactglobalsharedstate reactcurrentowner reactinternalsreactcurrentowner seems like maybe change", "num": "11197", "d": "10/2017"}, {"title": "add warnings adding functions components state", "body": "want request feature report bug feature hey wanted add type check state development order educate saw couple times codebase saves functions even components state checking codebase first time blush saw check method allow functions part state would say may wrong could warn developer well nt see case function live inside state saw lot posts stakoverflow putting components functions redux global state might conception want create pr order address warning development think", "num": "11196", "d": "10/2017"}, {"title": "onmouseenter lost hovering children", "body": "want request feature report bug bug current behavior event triggered element event lost mouse comes child rendered based event nt happen react hovering newly created child would persist event current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react react expected behavior react code reproduce hover anywhere red menu opens try hover anywhere blue background expected behavior hovering newly created child element persist event versions react browser os affected issue work previous versions react testes react chromelinux latest ubuntu mate tested anywhere else", "num": "11191", "d": "10/2017"}, {"title": "use testrenderer", "body": "want request feature report bug nt know current behavior codes javascript setupjs init dom const jsdom require jsdom const jsdom new jsdom const window jsdom function copyprops src target const props objectgetownpropertynames src filter prop gt typeof target prop undefined map prop gt objectgetownpropertydescriptor src prop objectdefineproperties target props globalwindow window globaldocument windowdocument globalnavigator useragent nodejs copyprops window global javascript import react react import expect chai import testrenderer reacttestrenderer import setup const testrenderer testrenderercreate test consolelog testrendererroot consolelog testrenderertojson consolelog testrenderertotree packagejson javascript babel options babel plugins addmoduleexports presets env react npm test test mocha require babelcoreregister console show current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior like versions react browser os affected issue work previous versions react jsdom mocha use mocha jest babelcore react reactdom reacttestrenderer chai os npm", "num": "11190", "d": "10/2017"}, {"title": "need hook hydration mismatch", "body": "want request feature report bug feature current behavior react attribute removed server rendered markup previous versions used attribute beacon checksum mismatches log servers notified production issues attribute removed mechanism determine checksum mismatch occurred aware checksum issues longer cause entire dom rerender however still important know occur typical use case display ads autoplay video want know ad gets rerendered double counted autoplay video interrupted due react rerendering dom related bugsrequests ability debug checksums production expected behavior solution necessarily need reintroduce checksum attribute could event hook callback applications leverage handle checksum issues versions react browser os affected issue work previous versions react react browsers worked lt react", "num": "11189", "d": "10/2017"}, {"title": "update performance optimization documentation reflect react", "body": "want request feature report bug bug date documentation current behavior current react documentation talks flag however since react appears behavior new default development builds shinier output yay pull request seems became new normal expected behavior would expect first step suggesting add reactperf gets deleted would also expect screenshot reflect new improved output perhaps one screenshots gaearonspull request linked versions react browser os affected issue work previous versions react react happy make pull request expectation aligned projects", "num": "11185", "d": "10/2017"}, {"title": "compatible", "body": "bug feature used able use react great react able use property generate custom elements custom attributes could picked ie get many warning messages custom tag elements likewise seems certain attributes nt getting rendered either instance elements like get output without size attribute nt think react know tags hardcoded react got way react output custom tags without throwing warning messsages reintroduce attribute indicate custom tag custom attributes", "num": "11184", "d": "10/2017"}, {"title": "flowify reactpartialrendererjs", "body": "annotation start flowifying avoid bugs like iamdustan wan na take", "num": "11175", "d": "10/2017"}, {"title": "react render text area placeholder initially", "body": "bug current behavior windows text area placeholder rendering initially expected behavior placeholder visible initial render versions react browser os affected issue work previous versions react windows appears regression", "num": "11172", "d": "10/2017"}, {"title": "react use requestanimationframe default", "body": "consider following sample code pasted class extends reactcomponent private canrender boolean false private latestdata outputstats hit getting framerates like words seem limiter react correct slightly separate topic true animation things think would good simply wrap block guess really react question though since observablething could also capped via ticks", "num": "11171", "d": "10/2017"}, {"title": "react official site work chrome", "body": "react official site show white screen show error", "num": "11170", "d": "10/2017"}, {"title": "react mismatched html warning logged hydrating portals rendered documenthead", "body": "want request feature report bug bug current behavior rendering portal server causes react log warning unexpected markup hydrating server markup currently happens using reacthead current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react sure possible simulate jsfiddle since requires serverrendering access fairly minimal repro case reacthead example app clone run via following see react warning logged thoughts simpler way repro happy well expected behavior entirely possible usage react portals nt anticipated sure invalid use case would like get thoughts better approach currently reacthead besides warning moduleapp seems function exactly expected high level reacthead works serverrendering tags eg etc collected array rendertostring placed server template client serverrendered tags queryselected removed replaced reactdomcreateportal order support spa functionality issue reacthead versions react browser os affected issue work previous versions react react", "num": "11169", "d": "10/2017"}, {"title": "reacttestrenderer find method documented incorrectly", "body": "mismatch behavior method documentation claims find first descendant test instance test testinstance returns true fact throws error multiple descendant test instances way docs worded expected work like happy submit pr fixing like guidance whether docs incorrect implementation incorrect worth implementation wrapped seems likely docs incorrect ie intentional choice whoever wrote methods also happy go split two separate methods eg", "num": "11166", "d": "10/2017"}, {"title": "someone point react actually updates dom", "body": "want learn performance react trying get sense exactly react manipulates dom stepping source inspecting devtools profiler see finally called react triggers update dom understand reconciliation works looking actual mechanics read specific line code react appends new elements dom eg someone point right direction asked reactjs freenode nt get response looking thanks advance", "num": "11165", "d": "10/2017"}, {"title": "support srcobject attribute video element", "body": "want request feature report bug feature current behavior currently set srcobject video get error current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react another issue closed issue never resolved firefox deprecated using safari nt support expected behavior ability set video element common webrtc applications versions react browser os affected issue work previous versions react react", "num": "11163", "d": "10/2017"}, {"title": "background color issue", "body": "hi got issue background colors simple component rendering div tested crome safari firefox visible chrome size dark rectangle affected rendered div give background color", "num": "11162", "d": "10/2017"}, {"title": "shallow renderer subsequent calls inside discard previous ones", "body": "current behavior multiple calls last one works shallow renderer current behavior bug please provide steps reproduce possible minimal demo problem dom renderer correctly renders hello world test shallow renderer renders undefined world versions react browser os affected issue work previous versions react issue introduced react reason must lines replacing fix", "num": "11161", "d": "10/2017"}, {"title": "server rendering meta tags attributes non camelcase result warning", "body": "want request feature report bug bug current behavior server rendering srcset attributes used needed camelcased results change renders camelcased version remove warning also happens srcset etc current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior warning given versions react browser os affected issue work previous versions react previous versions react passed camelcase rendered case correctly either snake lowercase renders camelcase executed server using react happening latest chrome", "num": "11160", "d": "10/2017"}, {"title": "autofocus nt work ssr react", "body": "works client hydrated used implemented js special case nt cause commit effect scheduled call like question even bother implementing js anymore emit attribute ssr let browser take care", "num": "11159", "d": "10/2017"}, {"title": "typeerror read property create undefined using reacttestrenderer", "body": "want request feature report bug bug current behavior trying run simple jest snapshot test failing reacttestrenderer current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react import react react import header componentsheaderheadercontainer import renderer reacttestrenderer test header loaded correctly gt const component renderercreate let tree componenttojson expect tree tomatchsnapshot running jest throws following error header loaded correctly header loaded correctly expected behavior snpashot test pass versions react browser os affected issue work previous versions react reacttestrenderer react reactdom", "num": "11158", "d": "10/2017"}, {"title": "react expected server html contain matching", "body": "seems like putting end tag makes react think missing react warns compensates adding another one looks like bug another different issue", "num": "11155", "d": "10/2017"}, {"title": "onchange get executed react", "body": "want request feature report bug bug current behavior react onchange gets fire reproduced bug link current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior onchange get executed maany times select radio button versions react browser os affected issue work previous versions react", "num": "11154", "d": "10/2017"}, {"title": "onmouseenter triggered children react", "body": "hi issue triggered children component occurs react created codepen shows issue simplified structure component needs capture events trigger simple component waits image passed loaded displaying using created open console see triggered hovering normal behavior also hovering div supposed happen remove whole logic element works intended possible coding way nt appropriate look like bug anyway", "num": "11152", "d": "10/2017"}, {"title": "react missing global context", "body": "hey using internationalize component wrap app component provide translation whole app like inside intlprovider set translation context getchildcontext could access anywhere global context global context removed nt seen change breaking changes wrapping every component use translations intlprovider use thiscontext instead sounds like overkill better approach", "num": "11151", "d": "10/2017"}, {"title": "update props commitupdate", "body": "given instance contains object attempts update object result error since object frozen correct approach set new props instance commitupdate see art renderer example sets properties instance directly eg correct approach ability wrap changing properties container object", "num": "11150", "d": "10/2017"}, {"title": "react recognize prop dom element", "body": "versions react reactrouterdom reactrouterredux next test case server side client side steps reproduce error occurs first navigation client side", "num": "11147", "d": "10/2017"}, {"title": "link file json", "body": "demohtmltxt demodatajstxt want ask away take file json react js file name orb folder htdocsorbdemo demodatajs demodatajs take filejson return dont show localhost example file demodatajs windowdemo windowdemodata var data getdata stockvsjson var lt var j j lt datalength j windowdemodatapush data j function getdata return stockvsjson function return stockvsjson demohtml function refreshdata pgridwidgetrefreshdata windowstockvsjson edit code example file number", "num": "11146", "d": "10/2017"}, {"title": "react component updates dom nt", "body": "upgrading react noticed regression one apps navbar would rerender upon loginlogout verified consolelog statements dom would nt get corresponding updates abbreviated component question js class navbar extends reactcomponent render const isauthenticated thisprops return isauthenticated thisrenderauthenticatedmenu thisrenderunauthenticatedmenu renderauthenticatedmenu return lt adding key fixed renderunauthenticatedmenu return lt adding key fixed export default connect state gt isauthenticated stateauthisauthenticated routing staterouting navbar worked without requiring annotated keys react became necessary upgrading expected behavior indicative regression", "num": "11144", "d": "10/2017"}, {"title": "react amp bad ux amp scroll bug", "body": "react amp bad ux right menu bad ux left menu much better", "num": "11143", "d": "10/2017"}, {"title": "input type number onchange vs oninput", "body": "entering text eee onchange fired oninput tested react chrome firefox safari edge dom behavior react react onchange equivalent dom input event", "num": "11142", "d": "10/2017"}, {"title": "deduplicate update mounted mounting component warning", "body": "note anushreesubramani working please send prs similar anushreesubramani wan na take one well would need deduplicate based ownerstack info similar works", "num": "11140", "d": "10/2017"}, {"title": "infinite loop maximum update depth exceeds", "body": "want request feature report bug bug current behavior wrote component recreate warnings fix javascript class app extends component constructor super thisstate value null render thissetstate value test process found error came uncaught error maximum update depth exceeded happen component repeatedly calls setstate inside componentwillupdate componentdidupdate react limits number nested updates prevent infinite loops execution stop going infinite loop printing variants error one another screenshot reference current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react snippet given expected behavior nt infinite loop execution stop printing error versions react browser os affected issue work previous versions react react chrome ubuntu tested older versions react problem present", "num": "11136", "d": "10/2017"}, {"title": "dom test fixtures unable load react", "body": "far tell path umd version react changed makes impossible test latest version react test fixtures probably need add condition react loader change path certain version", "num": "11132", "d": "10/2017"}, {"title": "dom test fixtures add caveats range inputs unsupported things", "body": "confusing recall range input type supported invalidating test cases example test case verifies changing range slider arrow keys works expected however looks like standard input plan make test fixtures public wonder would worth adding caveat language marking test invalid certain browser maybe would annoying thought might nice collect opinion others", "num": "11131", "d": "10/2017"}, {"title": "website old docs link redirect", "body": "open link old documentation link redirect redirect current documentation url", "num": "11130", "d": "10/2017"}, {"title": "website jsx editor documentation need padding bottom", "body": "found every live jsx editor scroll", "num": "11129", "d": "10/2017"}, {"title": "react client side render nt update dom style comes ssr", "body": "want request feature report bug bug current behavior react clientsiderender problem update dom style update prop detail repo current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react created repo expected behavior update dom style correctly versions react browser os affected issue work previous versions react using chrome dev os x el capitan macintosh intel mac os x khtml like gecko react work previou version like", "num": "11128", "d": "10/2017"}, {"title": "missing docs transferring props jsx", "body": "noticed latest docs nt talk transferring props jsx rest properties really useful building reusable react components curious omitting documentation intentional would great understand good practice anymore otherwise would happy send pr adds back docs changes community want see overall think important info surface current docs", "num": "11124", "d": "10/2017"}, {"title": "react document breaking changes nt warn react", "body": "want request feature report bug bug current behavior path upgrading react simple docs minor exceptions app runs without warnings work cases found nt true longer declared never declared anyways never yelled amp found old component amp completely broken callback longer falsy would write write sloppy code never existed anyways worked react expected behavior adding things migration guide maybe reenabling support falsy callback versions react browser os affected issue work previous versions react react browsers worked react", "num": "11123", "d": "10/2017"}, {"title": "reconciler gone", "body": "question know intentional one able track index newremoved node going provide api important able integrate correctly thirdparty code example pixijs threejs addchildremovechildaddchildat apis important able tell node imagine something like could beneficial even terminal ui native ui illustrate mean get expanded new children appended andor removed preferrably react", "num": "11118", "d": "10/2017"}, {"title": "using setstate inside function child component generates warning functions valid children", "body": "want request feature report bug reporting bug current behavior context react native app error nt related renderer using handcrafted component fetches data passes function child component rendered however using save call result get pretty interesting error see gives current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react tried remove business logic reproduce error react native app codesandbox fully reproduce expected behavior expected error versions react browser os affected issue work previous versions react know error occurs react renderer got react native first place started project react related issues might related ping gaearon", "num": "11116", "d": "10/2017"}, {"title": "wrap events react", "body": "per discussion react rc asked open separate issue regarding opening event system react currently use disappeared react blocking ability upgrade basically grab order wrap certain piece code fire afterward asked nt wrap instead least time believe experiments showed nt work react seemed firing internal synthetic events later time possibly batching nt know new hacky way thing happy punt question want request feature report bug depends certainly used work sense bug would require api creation perhaps maybe feature current behavior access event firing expected behavior way inject code fire events fire versions react browser os affected issue work previous versions react react solution existed react", "num": "11115", "d": "10/2017"}, {"title": "check raf polyfill lazily", "body": "cases like pretty confusing probably move warning happen first rather immediately", "num": "11114", "d": "10/2017"}, {"title": "consider providing umd build testutils", "body": "noticed stopped providing bunch fiddles old bugs use wonder add back eg let hear people say", "num": "11111", "d": "10/2017"}, {"title": "document deep equality checks jsonstringify shouldcomponentupdate bad idea", "body": "inspired", "num": "11107", "d": "10/2017"}, {"title": "asynchronous componentwillunmount react", "body": "react called first rendering next component dom current version called mounting next component creates issue existing code since reuse component history changes invokes new props change url thereafter invokes component still way synchronous way", "num": "11106", "d": "10/2017"}, {"title": "server render missing nodes recreated correct classname", "body": "possible regression looks like recreating missing nodes working correctly react nodes get recreated one copy classname sibling node instead getting recreated correct classname pen demonstrating issue works fine react jsx rendered html", "num": "11104", "d": "10/2017"}, {"title": "ssr reactdom client server handling newlines differently causing mismatch warnings", "body": "bug report noticed warning text content match warning certain pages isomorphic react app using react reactdom boiling simple test case seems different kinds newlines handled differently failing match everything fine mismatch error words separated browser however get except js error console second foobar reads one word seems chrome issue mishandling single r carriage return try echoes string console one word browser see foobar one word importantly though windows newlines result app definitely seems like bug react reconciliation logic setup full list npm deps nodeexpress app node browser macos chrome workaround preprocess text useruploaded content normalize newlines", "num": "11103", "d": "10/2017"}, {"title": "make undefined ref message better", "body": "reported could clearer", "num": "11102", "d": "10/2017"}, {"title": "type fiber tag disjoint union", "body": "sebmarkbage tried flow could nt handle well might worth trying someday", "num": "11101", "d": "10/2017"}, {"title": "react continues incorrectly handle disabled", "body": "would like report bug please closed gaearon said reopen still problem currently understand react incorrectly handling common case construction fairly normal create first element disabled remains preselected react render case instead renders first deselected control attempted fix forcing selection normal approach set relevant react disallows preferring novel property instead mimicing firstwrite version property attempt set set ignored may case defaultvalue broken select react inability render disabled either default selected initial present since least sometime first found first documented january prior faster tell core devs irc know far goes back past", "num": "11100", "d": "10/2017"}, {"title": "may broken", "body": "would like report bug refiling another outstanding bug closed despite reproducible decided create repro case since repro involves setting confronted human inability remember whether html zeroindexed oneindexed since repro also involves determining whether given selectable decided control four select see get third fourth joke got neither got first selectable winner testcase series see see instead see currently believe honored first time noticed tested", "num": "11099", "d": "10/2017"}, {"title": "allow suppressing error boundary logs intentionally throwncaught errors", "body": "repost erikras want request feature report bug somewhere current behavior running tests library behaviors want test throw error currently result output console error great application great library test expected behavior would great could something like please provide exact jest configuration mention jest node yarnnpm version operating system see also", "num": "11098", "d": "10/2017"}, {"title": "umbrella react dom bugs", "body": "since going open issues yesterday today also compiled list things seem broken reactdom grouped areas think issues equally important like start discussion around start attacking shorter longer term example potential fixes onchange event logic would need take account even inform think would good topic next chat cc jquense aweary nhunzaker maybe could also broadcast time autofill provide way handle browserautocompleted form values controlled components ie edge longer prompt remember password controlled form dom fixture form coverage restored state autofill composition events issues x incorrect data compositionend event typing korean change event fires many times inputing chinese characters onchange work well japanese ime react prs x try generate beforeinput event buggy composition scenarios ie x handle composition events changeeventplugin mouse enter leave mouseenter fires disabled inputs whereas mouseleave mouseenter event triggered cursor moves disabled button onmouseenter propagation double reactroot onmouseleave working expected input checkbox select x change event fire ie edge certain circumstances x pressing spacebar checked radio button fires click browsers x input type email controlled component control white spaces changing state onfocus onchange select multiple element work firefox x select onchange firing using keyboard input onchange triggered every time epreventdefault used input element backspace work x radio buttons correctly checked using multiple lists radio buttons input autofocus causes focus emitted ref undo behavior controlled textareas works differently default behaviour chrome triggers onchange twice replacing text selection x textarea onfocus stoppropagation incorrect cursor rendering firefox x onbeforeinput fires edge updates dom clear button ios date input return correct event value eventpreventdefault click handler prevent onchange called x reset select ignores defaultvalue", "num": "11097", "d": "10/2017"}, {"title": "programmatically filled input fire onchange event", "body": "want request feature report bug bug current behavior react generated input fire event programmatically filled demo expected behavior react generated input fire event programmatically filled demo versions react browser os affected issue work previous versions react reported bug tested chrome safari macos experience bug bug present react core goal create browser bookmarklet autofills form within react app", "num": "11095", "d": "10/2017"}, {"title": "add inline syntax errors website editor", "body": "tsriram suggested proof concept like wonder new editor", "num": "11094", "d": "10/2017"}, {"title": "add error boundaries website", "body": "places could handy live editor homepage show crashes search box gets broken fair adblocker global missing maybe", "num": "11093", "d": "10/2017"}, {"title": "investigate compiling react google closure compiler advanced mode", "body": "creating track already compile bundles gcc simple mode bunch things break advanced mode gradually moving closer able think prerequisite since otherwise never sure still correct landed open question still keep devtools working wonder fiber could array fixed indexes would nt need sourcemapping", "num": "11092", "d": "10/2017"}, {"title": "react spillover", "body": "dumping items since want close umbrella x convert oss repo modules block release nicetohave follow x move docs update fbmereactpolyfills point x fix rn crash dev x worth looking existing entries attribute table might mean bugs x decide flat bundles one create custom fiber renderer nt block final ideally final internal pr wip fb gaearon bvaughn context update unknown property warning documentation new behavior currently warning points blog post update crossorigin doc warning clarify throwercatcher semantics gaearon bvaughn sebmarkbage add closure compiler advanced deal mangling properly block release nicetohave follow whitelistblacklist warnings add yellow box warnings could make optin minor release bvaughn let make optin default rn make sure instanceprops reactnativecomponenttree nt leak sebmarkbage bvaughn rn ensure keep important invariants text must wrapped dan moved back blockers shipping without invariants adding later painful decide handle situation container content changed outside react right warn also either silently fails throws cryptic error also throw error canshould fix behavior match previous react see comments flarnie consider logging caught errors immediately rather commit gaearon bvaughn improve component stack usability issue pr ssr probably lowercase attributes html namespace pr", "num": "11088", "d": "10/2017"}, {"title": "read property func undefined updated react", "body": "updated react version get error bundlejs created webpack line use proptypes separately lib webpack config import path path import webpack webpack export default entry babelpolyfill webpackhotmiddlewareclient pathjoin dirname clientindexjs output path filename bundlejs publicpath plugins new webpackhotmodulereplacementplugin new webpackoptimizeoccurrenceorderplugin module loaders test js include pathjoin dirname client pathjoin dirname servershared loaders reacthotloaderwebpack babelloader test css loader styleloader cssloader resolve extensions js css", "num": "11087", "d": "10/2017"}, {"title": "deduplicate warning functions valid children", "body": "one", "num": "11086", "d": "10/2017"}, {"title": "even though using webpack uglifyjs plugin minification reactdevtools telling unminified code production quality", "body": "want request feature report bug bug current behavior reactdevtools showing red icon deployed application even though using webpack uglifyjs plugin webpack defineplugin processenvnodeenv jsonstringify production current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior react devtools would show black icon indicating production quality code versions react browser os affected issue work previous versions react using latest version google chrome version official build app running react reactdom", "num": "11085", "d": "10/2017"}, {"title": "errorboundary behavior", "body": "breaks app windows mac high sierra chrome tried new errorboundary functionality reactjs trying use catch undefined variables rendering certain components causing whole app behave strangely trying encapsulate side effects undefined variables components break gracefully errorboundary component defined like errorboundary imported correctly sitting container component render function wrapping child component like order test broken app functionality put undefined variable render function component errorboundary included undefined variable gets rendered happens browser rest app stops working correctly syntax error errorboundaries supposed behave", "num": "11084", "d": "10/2017"}, {"title": "difficult track source boolean prop warning", "body": "want request feature report bug dx issue think certainly frustration upgrade would submitted gaearon told thrice current behavior build works strewn warnings would like fix warnings like library provides hoc provides boolean props first concerned react would longer allow think problem one tests carelessly leaking props way even created dumbest hoc ever test hoc could pass boolean prop seems like however stacktrace componenttrace even remotely clear tests causing warning previous versions would show exact stacktrace file names line numbers generated error versions react browser os affected issue work previous versions react react yes worked previous additionally several tests need throw errors alert library users something wrong test logs full bright red new fact life library developers test somehow replicated current master branch reduxform", "num": "11083", "d": "10/2017"}, {"title": "error boundaries causes multiple errors thrown development mode", "body": "want request feature report bug bug maybe current behavior error caught react lifecycle methods thrown twice development mode current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react look console see one errors caught one still thrown could possibly confusing people see two identical errors console expected behavior error thrown versions react browser os affected issue work previous versions react stumbled fixing one tests checked component throw conditions test started failing react second thrown react really sure bug wanted clarify whether made intentionally seems like trick causes behavior bug happy help fix someone would suggest start", "num": "11082", "d": "10/2017"}, {"title": "deduplicate render methods pure warning", "body": "note task already claimed saw fiddle nested update bug would nice dedupe first place instead calling thousand times note task already claimed", "num": "11081", "d": "10/2017"}, {"title": "idea host codemods website", "body": "would nice provide repl codemods website especially createclass proptypes conversion handy oneoffs like converting stackoverflow answers fiddles also introduces people idea codemodding playful way repl include instructions running locally bottom", "num": "11080", "d": "10/2017"}, {"title": "improving browser qa", "body": "manually test lot behavior captured jsdom change events number input quirks event pooling error handling etc despite test suite comprehensive unit tests alpha beta release candidates number bugs slipped particularly around change events want explore would look like reduce burden manual browser qa possible particularly around things like change events hook javascript dom apis automatable filed issue explore following areas though happy others pitch deploying dom test fixtures public url distribute manual qa run automated tests investigate browserstack sauce labs possible browser automation options deploy nightly edge build react accompanying jsfiddle make easier determine fix works master without needing know setup react locally automation place extremely laborious comprehensive tests could run help fight regressions probably missing something going start post followup comments learn stuff", "num": "11079", "d": "10/2017"}, {"title": "tutorial doc incorrectly formatted babel url", "body": "bug documentation links users babel link incorrectly formatted code clicking link goes incorrect link prints instead code current url evaluates percent encoding instead link replaces", "num": "11078", "d": "10/2017"}, {"title": "old fiddles still broken due httphttps issue", "body": "see example mixed content page loaded https requested insecure script request blocked content must served https redirect happens without preserving protocol", "num": "11077", "d": "10/2017"}, {"title": "reactdom problems csp", "body": "want request feature report bug bug current behavior refused apply inline style violates following content security policy directive stylesrc self either unsafeinline keyword hash nonce nonce required enable inline execution expected behavior error csp try use reactselect app csp enabled result mentionedapparently problem reactdom line", "num": "11076", "d": "10/2017"}, {"title": "move website source new reactjsorg repo", "body": "new website launched propose following cleanup steps move gatsby source dynamic content md yml files new repo update external tools like netlify crowdin use new repo delete jekyll website source offer several benefits including improve focus simplify triage process website framework repos cut noise netlify preview comments prs nt related website creating issue mostly facilitate discussion around new proposed directory structure proposed directory structure cc ericnakagawa flarnie joecritch", "num": "11075", "d": "10/2017"}, {"title": "performance enhancements niche situations", "body": "hit couple things bit surprising sure really asking things documented somewhere also kinda going flow seems place raise generic issues even bugs keys make things slower bunch items thing changed xy positions adding key index made rendering slower possible shortsighted though since could well change layer items changing abovebelow found interesting rendering null makes huge difference two test cases full graphics pipeline vs essentially empty pojo renderer difference speed nt matter data graphics rather returned components dom nt work course custom renderers known certain type element edge node side effects render lifecycle returning significantly faster even straight functional component returns simple element side effects makes sense since react less branches consider even branches point nothing simple objects", "num": "11073", "d": "10/2017"}, {"title": "component respect defaultprops rendered react element", "body": "want request feature report bug bug current behavior component respect defaultprops rendered react element js object current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior defaultprops applied provided example two identical buttons versions react browser os affected issue work previous versions react tested chrome versions nt work", "num": "11071", "d": "10/2017"}, {"title": "componentwillmount calls order deterministic reactdomhydrate reactdomserverrendertostring", "body": "question related serverside rendering support materialui usecase generate class names based react tree traversal order one users djeeg noticed react tree potentially traversed different order serverside clientside using hence question calls order deterministic", "num": "11070", "d": "10/2017"}, {"title": "tests failing using createportal react", "body": "bug two files indexjs import react component react import reactdom reactdom export default class somethingcool extends component render return reactdomcreateportal thisportal indextestjs import react react import reactdom reactdom import somethingcool itonly renders without crashing gt const div documentcreateelement div reactdomrender div app started createreactapp run test get console renders without crashing change component render empty div without works fine info createreactapp reactscripts react reactdom macos sierra note also used suggested workaround requestanimationframe tests please let know info needed help figure going thanks", "num": "11068", "d": "10/2017"}, {"title": "read namespaceuri null error rendering comment", "body": "see internal task", "num": "11067", "d": "10/2017"}, {"title": "react known regressions", "body": "going track since website issues creating lot noise fixed master x extra variable umds fixed x instead component stack warning fixed x crash hydrating development fixed x getting lost svg fixed x crash rendering shadow root fixed x allow running test shallow renderers production fixed x ssr nt separate unrelated text nodes cases fixed x ssr reactdom client server handling newlines differently causing mismatch warnings fixed x peer dependencies warn beta x fires twice child added fixed x fires hovered child fixed x shallow renderer merge multiple calls correctly fixed x ssr throws obscure error bad prop fixed x loses textarea placeholder first render fixed x false positive warning rehydrating camelcase svg tag names fixed x false positive warning rehydrating fixed x nt work ssr new features added master x allow attribute attributes x allow explicitly shallow ignore hydration warning", "num": "11065", "d": "10/2017"}, {"title": "bug reactdomhydrate detects fix diff", "body": "intentional difference client vs server rendering image component displays different src depending screen pixel density import react react import proptypes proptypes function image props let src propssrc const style props const width propswidth stylewidth const height propsheight styleheight const pixelratio globaldevicepixelratio width height amp amp pixelratio gt const lastdotindex srclastindexof return imageproptypes src proptypesstringisrequired width proptypesnumber height proptypesnumber imagedefaultprops width undefined height undefined export default image current behavior render retina screen get warning warning prop match server imagepng client image browser shows serverrendered content correct client one expected behavior client mutates dom changes src attribute img versions react browser os affected issue work previous versions react react chrome previous versions react good approach render would rerender whole dom instead diff", "num": "11064", "d": "10/2017"}, {"title": "onblur event triggers trying set focus input type number conditional rendering firefox", "body": "want request feature report bug bug current behavior trying render active focus event triggers firefox even focus set current behavior bug please provide steps reproduce possible minimal demo problem click name column render active focus works chrome edge firefox please see live example expected behavior clicking name column input appears active versions react browser os affected issue work previous versions react react firefox sure react issue actually noticed change input type works perfectly firefox problem related input type number", "num": "11062", "d": "10/2017"}, {"title": "relationship render updatecontainer requestanimationframe", "body": "highly related call reactdomrender accurately updatecontainer within renderer seems param called somewhere updating rendered specifically callback call eg recursive approach get error flushsync called inside lifecycle method called react already rendering tangential note happens even triggered elsewhere like may bit misleading someone please explain little order look like updatecontainer callback use case described issue sake clarity like call toplevel render components finished rendering rely react requestanimationframe timing rather inject another one triggering prop changes without making root node manage via setstate componentdidupdate realworld scenario using react drive animation via custom renderer thanks", "num": "11060", "d": "10/2017"}, {"title": "componentdidcatch receiving props", "body": "want request feature report bug feature current behavior triggered errorboundary component additional props passed component goes render props available deliberate current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react pass props like trigger error children expected behavior expect props case still passed versions react browser os affected issue work previous versions react react reactnative new feature", "num": "11059", "d": "10/2017"}, {"title": "svg image onload event getting dispatched", "body": "svg element getting onload event dispatched example tested react", "num": "11058", "d": "10/2017"}, {"title": "reacttestrenderershallow throws nodeenvproduction", "body": "want request feature report bug feels like bug open correctioncontext current behavior reacttestrenderershallow throws details versions react current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react count jk specs comparing snapshots shallow rendered components utilizing libraries change behavior ex recompose expected behavior able shallow render components wouldwill built deployed production versions react browser os affected issue work previous versions react reacttestrenderershallow runs happily check error throw appears new related comment response difference dev prod versions react great news terms react disallowing prod version shallow render nt cover prod code path librariesdependencies", "num": "11055", "d": "10/2017"}, {"title": "resolution failure bundlecollapser nonunique file contents", "body": "want request feature report bug report bug expected behavior expected behavior recommended optimization resolve requires correctly produce functionally equivalent output current behavior observed behavior bundlecollapser causes browserified bundle resolve files incorrectly components different paths identical contents steps reproduce full reproduction see bundlecollapseruniquenessfailure react render different values coming respectively since component content identical erroneously resolves wrong component displays value simpler reproduction specific react see bundlecollapseruniquenessfailure versions react browser os affected issue work previous versions react browserifybundlecollapser issue react version irrelevant real issue officially recommended optimization may result invalid bundle", "num": "11049", "d": "10/2017"}, {"title": "active tab included current route permalinks new docs site", "body": "want request feature report bug bug new docs site current behavior new docs site active tab included current route permalinks attempting send someone instead dropped correct tab active current behavior bug please provide steps reproduce possible minimal demo problem via similar template go click add react existing app tab grab permalink within section ex open permalink within incognito window expected behavior taken correct linked section within docs versions react browser os affected issue work previous versions react issue react new docs site", "num": "11043", "d": "10/2017"}, {"title": "warning documentation found", "body": "want request feature report bug bug current behavior documentation warnings returns current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior redirect correct documentation versions react browser os affected issue work previous versions react workaround look cached version google search check markdown", "num": "11036", "d": "10/2017"}, {"title": "missing documentation nullundefined input value", "body": "want request feature report bug like request documentation pass input get following warning warning prop null consider using empty string clear component uncontrolled components warning clearly states problem fails mention supposed pass could find explanation online found link url controlledinputnullvalue sounds page explain exactly looking merely redirects nt mention issue warn input value null states warning added nt say open pull request document value undefined controlled component adds following documentation similarly setting attribute setting make react assume component controlled may produce warning explanation react behaves way naively expect perfectly valid value eg numeric input empty passing empty string indicate absence numeric value seems odd really like information documentation", "num": "11031", "d": "10/2017"}, {"title": "loosen type requirements event handlers", "body": "want request feature report bug feature current behavior adding event handlers common practice something like fine react reports warning technically correct expected listener function instead got value type however forces use verbose variant expected behavior think makes sense allow addition function types event handlers anything falsy although may much ask definitely understand rationale type safety perspective make less pragmatic personally huge fan js evaluates reduces amount boilerplate needed conditionally wire handlers versions react browser os affected issue work previous versions react react browsers emit warning react", "num": "11027", "d": "10/2017"}, {"title": "create pr eg createreactclass module", "body": "lots react modules listed repository would like create prs createreactclass reactdomfactories code repo somewhere", "num": "11024", "d": "10/2017"}, {"title": "feature request disable unrecognized tag warning react specific tags", "body": "want request feature report bug feature current behavior firefox element implemented use polyfill able support everything works well react warns element unrecognized page load quite useless specific case would like possibility disable warning elements utility warning remains developer mistype component name expected behavior specified tag acceptednormal react warn specified unrecognized tags versions react browser os affected issue work previous versions react react firefox previous versions warning clear enough need information cheers", "num": "11023", "d": "10/2017"}, {"title": "error error info logged wrong order firefox", "body": "react component throws error development mode error referenceerror x defined additional info error occurred component logged firefox happens wrong order error actually works fine google chrome firefox version macos react reproduce open browser console component throw error like javascript const helloworld gt hello world x reactdomrender documentgetelementbyid root", "num": "11022", "d": "10/2017"}, {"title": "leading zeros controlled input integer value", "body": "want request feature report bug bug current behavior text input see leading zeros pass digit value current behavior bug please provide steps reproduce possible minimal demo problem via similar template reason ca nt reproduce bug jsfiddle codepen moreover react works fine steps create controlled text input add listener saves input value integer pass value input write input value equal value input expected behavior value input state without leading zeros versions react browser os affected issue work previous versions react cra react chrome ie firefox understand low amount information happy provide need know else would useful", "num": "11021", "d": "10/2017"}, {"title": "deprecate remove testutilsmockcomponent", "body": "jestism nt open source package people using jest implement similar pattern directly", "num": "11019", "d": "10/2017"}, {"title": "old fiddles broken new domainwebsite", "body": "longer works causes old fiddles like break fix", "num": "11018", "d": "10/2017"}, {"title": "fiber render documentfragmentshadowroot", "body": "want request feature report bug bug current behavior react able render within documentfragmentshadowroot possible fiber anymore demo js import react component react import render reactdom class mycomponent extends component render return hello react class myelement extends htmlelement static myelement constructor super const shadowroot thisattachshadow mode open try fails render shadowroot catch e consoleerror e shadowrootinnerhtml connectedcallback consolelog myelement mounted customelementsdefine myelementis myelement related expected behavior able render shadow root like previous versions react versions react browser os affected issue work previous versions react react chrome", "num": "11017", "d": "10/2017"}, {"title": "hoistnonreactmethods", "body": "know discussed various places past specifically requesting gaearon add redux iirc know reasoning behind using something like somewhat sound topic nt really perfect solution time drawbacks guys think package utilizing hoc way previously nt work fiber recently rewrite bit move logic use ref child rather component prototype appears job well enough want make sure forgetting something significant especially fiber works obviously using heavily would nt good idea case hoc largely invisible implementation simply injecting prop changing passing refs works simply nt seem appropriate solution implementation would look something like obviously nt ideal trying consider best way implement transparent way handling far real problem see implementation would methods present child time mounting think acceptable drawback would think would nt hard adjust situation well though", "num": "11016", "d": "10/2017"}, {"title": "reactjsorg website displays empty page cookies disabled firefox", "body": "using firefox cookie whitelist plugin enabled preventing cookie storage loading flashes page content removes content body producing empty white page following content loading page content initially loads flashes security exception thrown console content removed page cookie whitelist set allow temporary cookies page loads normally", "num": "11015", "d": "10/2017"}, {"title": "warn unexpected html inside svg", "body": "react reactdom versions js const createelement h require react const rendertostaticmarkup require reactdomserver rendertostaticmarkup h div null h svg null h span nt mixed browser console guess programmer responsibility avoid case understand performance nt check", "num": "11013", "d": "10/2017"}, {"title": "reset select ignores defaultvalue", "body": "want request feature report bug report bug current behavior resetting form contains select defaultvalue selected option becomes first option element list one valuedefaultvalue current behavior bug please provide steps reproduce possible minimal demo problem via similar template put piece code click reset button formreset form expected behavior expect select select option valuedefaultvalue like applying formreset versions react browser os affected issue work previous versions react reactdom seems browser independent tried chromium firefox fedora nt try prior version react", "num": "11010", "d": "10/2017"}, {"title": "announcement page broken adblocker", "body": "announcement page broken using chrome mac", "num": "11008", "d": "10/2017"}, {"title": "question buildscripts sources", "body": "build scripts tirelessly typed fb exist fancy versions somewhere import statements object rest spread await lightly transpiled actually typed using unpleasant ecmascript offers direct untranspiled execution recent nodejs nice one search unique wordings one without finding anything", "num": "11005", "d": "10/2017"}, {"body": "sophiebits interpretation correct reason nt", "d": "10/2017"}, {"body": "like take able pr tonight", "d": "10/2017"}, {"body": "please create minimal reproducing example get new issues every day spend hour trying reproduce every issue would nt time left development good guide", "d": "10/2017"}, {"body": "clarify published demo helpful nt notice link top first would still appreciate could extract part nt work show simpler environment without router libs typescript etc", "d": "10/2017"}, {"body": "thanks fast response try additional research gradually removing libs ts maybe cause problem", "d": "10/2017"}, {"body": "also try opposite direction starting fiddle adding two three minimal components", "d": "10/2017"}, {"body": "according screenshot generated node server side rendering remove node divhomepage dynamic component current route", "d": "10/2017"}, {"body": "question", "d": "10/2017"}, {"body": "believe issue also referring following blog post true think might want notify author maotr instead", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "michael \u5218\u5e05 notifications githubcom receiving subscribed thread reply email directly view github mute thread", "d": "10/2017"}, {"body": "believe suggesting space react dom nt eg react dom reactdom sure referring though", "d": "10/2017"}, {"body": "seems like text may copied true think might want notify author maotr instead", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "bvaughn patient thanks think got mean react issue contact author using email", "d": "10/2017"}, {"body": "error boundaries nt supposed catch errors event handlers render lifecycles", "d": "10/2017"}, {"body": "documentation", "d": "10/2017"}, {"body": "yeah followed documentation however convinced reasons catch errors event handlers also know catch error trycatch blocks would mean develop new way handle display errors component instead using error boundaries also read react nt need know errors event handlers developers would convenient wanted dig bit reasons design decision thanks", "d": "10/2017"}, {"body": "ok let keep open discussion nt think specific reason could nt agree behavior whether beneficial acdlite might remember better", "d": "10/2017"}, {"body": "great think main benefit uniform way handle errors across components using error boundaries otherwise encourage develop two ways handle exceptions extend current behavior eb support besides adopters new feature may tempted trigger errors event handlers case waiting behavior perhaps one example codepen move exception handler ui get blocked users nt glue going according documentation save error would implement trycatch block set state display errors instead relying eb", "d": "10/2017"}, {"body": "reasons decided event handlers passed multiple levels throw nt know component error originated dom node triggered event component owns handler latter case even clear know component even could reliably figure component originated error would work error surfaces synchronously end event dispatch however many errors occur asynchronously like promise handler timeout way catching react similar previous point gave event errors semantics render errors raises question whether types events like network events userdefined subscriptions would require us exposing api like wrap arbitrary function error handling", "d": "10/2017"}, {"body": "thanks explanation acdlite humble thoughts event handlers passed multiple levels throw nt know component error originated dom node triggered event component owns handler latter case even clear know component difference pass props subtree components guess may also happen exception inside subtree component case keep reference dom trigger exception even could reliably figure component originated error would work error surfaces synchronously end event dispatch however many errors occur asynchronously like promise handler timeout way catching react would nt case async side effects render lifecycle methods like componentdidmount call external api ticket closed useful fiddle supported lifecycles think also supported event handlers similar previous point gave event errors semantics render errors raises question whether types events like network events userdefined subscriptions would require us exposing api like invokecallback wrap arbitrary function error handling understanding react error handling", "d": "10/2017"}, {"body": "difference pass props subtree components guess may also happen exception inside subtree component case keep reference dom trigger exception react component throws rendering know component react called component components nt call methods sure last component called event handlers pass handler one consider source one could possibly track", "d": "10/2017"}, {"body": "already asked please nt create duplicate issues bug tracker react discussion board please refer previous answer appropriate places ask questions cheers", "d": "10/2017"}, {"body": "hey looks like issue build environment setup want keep issue tracker bugs feature requests react would suggest trying one many support resources help", "d": "10/2017"}, {"body": "require promise right using things like render", "d": "10/2017"}, {"body": "might seem good worms promise rejected call twice two promises arrive different order last one win want newer value older value intentionally assuming already know want set need wait promise first call ready", "d": "10/2017"}, {"body": "likely support unfortunately microsoft nt gon na fix really way effectively work around event system tried best way found handle depending use case listen blur focus container set timeout coordinate two events", "d": "10/2017"}, {"body": "jquense totaly correct also fix using focusinfocusout react lifecycle example using however stuck testing using common react test tools react ca nt simulate unsupported events", "d": "10/2017"}, {"body": "try like fiddle", "d": "10/2017"}, {"body": "thankyou solved problem brought react babel version bug", "d": "10/2017"}, {"body": "yakiler nt mind share problem babel fixed", "d": "10/2017"}, {"body": "clemmy ok html use convert jsx library correctly parse jsx html official library perfect solution", "d": "10/2017"}, {"body": "note nt using version babel real websites meant quick prototyping extremely slow", "d": "10/2017"}, {"body": "deprecate refs composite components approach avoided instance passing refs via props unfortunately solution nt resolving problem receiving component instance parent component example component librarydeveloper nt props refs need pr merged week month never break many existing apps using refs without way achieve functionality", "d": "10/2017"}, {"body": "approach avoided instance passing refs via props mentioned bunch eslint thread deprecating finddomnode taion using props pass refs dom node access untenable libraries may either parents children approach works everyone agrees prop names imagine every library specified name css classes nothing would interop well need handle etc bit less concern still great root problem composite refs seems encourages using instance imperatively could address behavior host refs always return underlying host node ref probably use case refs anyway", "d": "10/2017"}, {"body": "alternative approaches getting root dom node class component need special cases via wrapper component jsx class rootnodewrapper extends reactcomponent componentdidmount thispropsrootref reactdomfinddomnode componentwillunmount thispropsrootref null render return usage ways without using", "d": "10/2017"}, {"body": "strongly agreed css class name example point alternatives work promulgated canonical name like something otherwise interop becomes miserable every library ends inventing convention agree always returning host ref would clever neat though still backdoor getting instance might nice cases sure cutting entirely really best", "d": "10/2017"}, {"body": "guess system nt need support outofthebox parent could always pass callback child calls render time neat web pass host node usefulmeaningful eg react native context though", "d": "10/2017"}, {"body": "taion thinking sure naming big problem looking different codebases contract passing though ref via explicit props seems declarative opinion rather generic specifying type node want ref say actually lends descriptive even prevalent component render returns fragment case generic root dom node return via composite component free name prop want though could use generic name even would longer special case composite components legacy components still work change long pass props jquense feel logic composite components become even confusing developing react native api refs remain consistent across renderers opinion", "d": "10/2017"}, {"body": "trueadm works single level nesting multiple levels nesting sort breaks want work like purposes able receive something generically attach popover tooltip single prop would best especially also works dom components", "d": "10/2017"}, {"body": "taion using generic name like expect callback return single ref likely become confusing added fragments react theory could many refs might something could better tackle future still feel better explicit use pass via prop would conflict", "d": "10/2017"}, {"body": "think case would throw attempting attach something fragments entirely ideal better suggestion deal case example comes something like suppose needs find dom node thing wrapping position calculations figuring render tooltip like exist convention works someone implementing standard convention follow otherwise interop across component libraries becomes hairy mess", "d": "10/2017"}, {"body": "taion case wrap child component use calculations based possible ca nt put additional something like probably better route could adapt alternative wrapper component using really expect fragments become common return type component renders future throwing error nt ideal core api", "d": "10/2017"}, {"body": "generally acceptable add extra wrapping markup sort utility component components really come quite lot generic utility component ca nt eg assume user component wrapped something without breaking markup may indeed case components return fragments also case components nt need parents inject eg event handlers add eg tooltip hover behavior components care nt going return fragments anyway eventually render something relevant cares expose api lets get handle dom element use position calculations strongly rather something takes consistent convention makes possible support without adding extra user never asked reactcallreturn could interesting longerterm solution semantics quite different ca nt eg shimmed perspective something like assuming react ships fullybaked reactcallreturn nt really great options maintaining forwardbackward compatibility already bitten us extent portals old api least explicitly unstable ref api", "d": "10/2017"}, {"body": "taion case expect single component nothing stopping using get dom node proposal nt suggesting deprecate api suitable replacement escape hatches want avoid something work fragments could use marker dom node fragment wanted support range children could placeholder end could support handling many children refs", "d": "10/2017"}, {"body": "example per breaks conceptually presence fragment returns well mean fine purposes nt need generic way get handle dom node arbitrary react element may well fragment see pattern facebook page think looks little bit like renders tooltip portal maybe react portal positions tooltip shows next really common pattern generically almost every ui library exposes something like often nt make assumptions beyond tooltip shows element take mouse events certainly mandatory extra markup case want something implicitly asserts renders single dom element work literally", "d": "10/2017"}, {"body": "actually going become normal prop composite elements case serve role hypothetical composite component choose forward along wishes expose root node way case great preferred solution though sure handle deprecation way nt warn legitimate uses along lines", "d": "10/2017"}, {"body": "motivating example consider component like pretty natural way write component becomes another prop case parent gets exactly wants", "d": "10/2017"}, {"body": "taion maybe deprecate entirely use alternative api prevent confusion case ideally react equivalent would normal prop trying explain whole time proposing actually fits better like showed still wip rfc update tomorrow reflect name change personally feel might best make go away cases instead specific escapehatch host nodes maybe would normal prop composite components meaning passed freely needed thoughts", "d": "10/2017"}, {"body": "sure rename something like eg react would invoke callback host node everything else another prop think something like getting earlier think would great ends asking eslint discussion purposes would replace", "d": "10/2017"}, {"body": "would super sweet btw exactly wanted", "d": "10/2017"}, {"body": "updated original post slightly bit tired let know anything missed used example", "d": "10/2017"}, {"body": "looks great two small notes considerations think handles proposed case well rn composite components could implement semantics note replaces least remaining use cases", "d": "10/2017"}, {"body": "broad question clear answer best people directly use react laravel server run js php code projects attempting mitigate speak stability could also two server layers php node seems complex googled laravel react server rendering found thread hope find useful encourage turn community resources question", "d": "10/2017"}, {"body": "case component whereas element element stateful component gets rendered instance created instance preserved across renders whereas new elements created every render good blog post goes detail", "d": "10/2017"}, {"body": "amannn doc state statement react elements immutable said true element question custom react component instance one mutable afaik gaearon", "d": "10/2017"}, {"body": "element never mutable eg consider code js const element hello world elementpropschildren goodbye world reactdomrender element documentgetelementbyid root throw note user defined custom components stateful hand properties instance mutated time react user", "d": "10/2017"}, {"body": "amannn class clock extends reactcomponent constructor props super props thisstate seconds componentdidmount thisinterval setinterval gt thistick tick thissetstate prevstate gt seconds prevstateseconds render return would example classify mutating instance react element second passing different", "d": "10/2017"}, {"body": "well yes properties instance mutated react mutation element however rather new one created every render terminology bit tricky linked article maybe helps bit", "d": "10/2017"}, {"body": "amannn yeah think terminology thing give thought later", "d": "10/2017"}, {"body": "rendering new instances", "d": "10/2017"}, {"body": "would example classify mutating instance react element second passing different someprop exactly immutable create new element every time react remembers old one internally type key match case mutates old instance props new element detail", "d": "10/2017"}, {"body": "related", "d": "10/2017"}, {"body": "ask called", "d": "10/2017"}, {"body": "reconciles component say screen actually screen", "d": "10/2017"}, {"body": "duplicate fixed master thanks report", "d": "10/2017"}, {"body": "could move make sure still throw something neither supported object types still throw unsupported type nt object call unnecessarily eg element maybe could duplicate code path figure smart way test go place existing iterable tests currently go search definitions see one find one similar put next", "d": "10/2017"}, {"body": "look examples sprinkled throughout docs section fairly small even though technically hosted files", "d": "10/2017"}, {"body": "yes viewed fine beginners code useful grab unless missing something four five built several materialui apps redux redux forms written distilled subset use many components mui however react native compatible appear movement direction would really love see something akin threejs extensive example application library examples lt modules plus threejs library components yarn webpack lint mocha thousands special case frameworks react ecosystem beginning resemble java spring good way find surprising even building several full production reactreduxformsrest apps learning curve react apps using different set components ui much shorter learning react first place solution issue lot distilled single module applications cover range potential use cases", "d": "10/2017"}, {"body": "tried use create react app handles build dependencies nt need think configuring setting", "d": "10/2017"}, {"body": "yes used deconstructed understand exactly great piece software good fit last app great start last app used koa server telemetry sensors app three facing web viewing data sensors telemetry acquisition database admin archival react superb environment able store routes react component definitions tables query needed generate front end apps thinking user oriented take picture stuff take another picture write note normal stuff fairly pedestrian react native environment problem party example lots unique extra special dependencies standard way show core functions minimalist linting minimal error handling complex regression testing set modules would willing contribute repository knew others would value fun learn new stuff every time take new bleeding edge project nt mind bleeding new stuff half fun stuff mature boilerplate simple boilerplates ones see set many modules directory vertigo think like new term", "d": "10/2017"}, {"body": "thinking much thought createreactapp great piece software also good example problem newbie hard figure exactly entry point one software exists hidden nodemodule directory part user code would bet cra made explicit instantiates placing code module root directory created app use would skyrocket google generally alphabet describes functions happen implicitly magical considered poor design hard control maintain modify complex directory structures hidden critical files perform magic matter cool suffer issue problem degree training history also bit ego making thing look trivial hard looks trivial appreciated much", "d": "10/2017"}, {"body": "another way look think compiled languages need understand c compiler works write c would expect complete source code c compiler explicitly written every c project call command line utility abstraction think cra way starts make sense think", "d": "10/2017"}, {"body": "sure clear big believer react please take denigration instead profound desire help improve c language issue great example turns struggling today use glreact repositories keep running problems like missing obviously react issue illuminating upgraded node broke many gl oriented react libraries reinstall node plus make sure microsoft developer utilities installed support high performance version sqlite somehow figure make work react native also bought mac hopes sidestep issues entangled hope see point believe set really well executed minimalist examples types react app components widely used would really help sort react rocks distilled core components tested user confident examples work simply pointing directory running npm init amp npm start simplified app set would go along way reduce stress level venturing one react comfort zone especially one could cut paste examples create full solutions ideally repository example would limited optimally one directories nodemodules directory modularization fine create directory vertigo way help others feel afterall hard trash talk java spring ultimately nodereact ecosystem inscrutable sun oct dan abramov notifications githubcom wrote another way look think compiled languages need understand c compiler works write c would expect complete source code c compiler explicitly written every c project call command line utility thats abstraction think cra way starts make sense think receiving authored thread reply email directly view github mute thread", "d": "10/2017"}, {"body": "js const updateusername e gt thissetstate username etargetvalue solves quite nicely explicit require changes jsx", "d": "10/2017"}, {"body": "react nt use raf least", "d": "10/2017"}, {"body": "good know however still seems like creates listeners page calling setstate raf loop prior versions nt chrome profiler let see listeners attached unfortunately tried testing browsers also nt list total number listeners page", "d": "10/2017"}, {"body": "run long enough see getting gc eventually also see happen production mode think real leak expected create listeners trick use intercept exceptions keeping pause uncaught exceptions checkbox working maybe could restructure code reuse single listener keep stack callers sure worth effort", "d": "10/2017"}, {"body": "thanks clarification close issue", "d": "10/2017"}, {"body": "also propagation mouseoverleave looks completely unexpected", "d": "10/2017"}, {"body": "move portal outside button eg wo nt bubble button", "d": "10/2017"}, {"body": "first thought imagine mouseenter handler component container need nothing events component mouseenter simply works mouse really enters button dom element fired mouse popover portal event fires mouse popover actually moment need stop propagation component break event firing mouse button popover using common popover component application also break logic app parts really nt understand purpose bubbling react tree need events portal component simply pass handlers props worked perfect open modal window button deep react tree receive unexpected firing events modal also stop propagation dom get events really expect fired", "d": "10/2017"}, {"body": "nt use arrow function case look like exactly asking class toggle extends reactcomponent constructor props super props thisstate istoggleon true handleclick gt", "d": "10/2017"}, {"body": "parrker becourse looks like strange humanity hope component ugly work let codes nice sharp", "d": "10/2017"}, {"body": "proposed way thing typescript js class toggle extends reactcomponent state istoggleon true handleclick gt know mean strange humanly already consistent languages also similar arrow functions work javascript syntax currently stage proposal means decent chance becoming part javascript babel plugin included default create react app", "d": "10/2017"}, {"body": "fri oct pm dan abramov notifications githubcom wrote closed receiving subscribed thread reply email directly view github mute thread gt", "d": "10/2017"}, {"body": "duplicate happy take fix", "d": "10/2017"}, {"body": "hi would like work could please point specific direction would really appreciate", "d": "10/2017"}, {"body": "think relevant code reactfiberclasscomponent would suggest adding test first eg try reproduce existing warning try make changes better warning help", "d": "10/2017"}, {"body": "hey mzubairahmed thought good starting bug went ahead fix exercise nt ultimately take bug let know create pull request", "d": "10/2017"}, {"body": "mzubairahmed able look yet", "d": "10/2017"}, {"body": "deanbrophy yes even started working since beginner taking time complete think wise hold welcome continue gaearon keep looking space issues future", "d": "10/2017"}, {"body": "mzubairahmed thanks next good first issue", "d": "10/2017"}, {"body": "discovered serverbrowserjs", "d": "10/2017"}, {"body": "import client app bundler automatically use instead field remember verifying worked webpack browserify bump case nt happen", "d": "10/2017"}, {"body": "interesting didnt know perhaps oy importing something else causing issue trying render email previews client", "d": "10/2017"}, {"body": "looking taking issue first sourcecodetouching pr sure much take someone knows wants take please let know look something else work", "d": "10/2017"}, {"body": "see comment curious breaking change", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "intentional react listens events document level better performance", "d": "10/2017"}, {"body": "thank muchi miss point", "d": "10/2017"}, {"body": "yes intentional docs nt updated yet ideally wish browser vendors offered way group filter cc samccone way opt yet open adding proposed way", "d": "10/2017"}, {"body": "ideally wish browser vendors offered way group filter guess would best option proposed way nt like query string way much global var looks good maybe something like", "d": "10/2017"}, {"body": "fyi started discussion timeline filtering feature chrome", "d": "10/2017"}, {"body": "gaearon fixed", "d": "10/2017"}, {"body": "yep thanks reminding", "d": "10/2017"}, {"body": "run npm terminal", "d": "10/2017"}, {"body": "close definitely issue setup cra ca nt run shell problem path configured system node experts ca nt help able use node npm support forums resolve", "d": "10/2017"}, {"body": "proxy get development mouse event proxy warn accessing fields unsupported way technically event object need fields work", "d": "10/2017"}, {"body": "thanks report fixed released yet watch next release", "d": "10/2017"}, {"body": "support functions thus components unnamed unless either set polyfill getter provides polyfill", "d": "10/2017"}, {"body": "ah sure enough polyfilling trick thanks kovensky wonder added javascript environment requirements section docs polyfills error boundaries section", "d": "10/2017"}, {"body": "please file new issue documenting thanks", "d": "10/2017"}, {"body": "think fix", "d": "10/2017"}, {"body": "apologies long read wanted make sure thoroughly exploring option nt want bias things much opinion position choose think go option option backwards compatible declarative explicit need maintain fallback heuristic libraries already provide similar sigilsmodifiers", "d": "10/2017"}, {"body": "apologies long read wanted make sure thoroughly exploring option nt want bias things much opinion position choose think go option option backwards compatible declarative explicit need maintain fallback heuristic libraries already provide similar sigilsmodifiers", "d": "10/2017"}, {"body": "option option think react handled behavior api changes well past introducting warnings links docs might serve well help developers understand happening hood option looks attractive declarative nature reading jsx code new coming developers know immediately react rendering element", "d": "10/2017"}, {"body": "comments option developers might confused react sets attribute instead property depending chosen load element consumers custom element need understand distinction important author custom element seems like author element need handle attributes anything used html since way data gets passed html usage properties want support complex values property getset dom even possible author could something initially implemented attribute later add property name support flexible data types still back property value stored attributes naming collisions future htmlelement attributes properties seems like weakness web components standards general since lead errors regardless binding approach element undefined property react trying pass objectarray set property someattr object object useful seems confusing bind differently based value author element specified property gettersetter handle value setting property would cause element behave like value never specified might harder debug comments option another potential con option requires consumer custom element know whether element implemented something property attribute using mix react components custom elements could confusing set react props using one syntax custom element properties using different syntax", "d": "10/2017"}, {"body": "consumers custom element need understand distinction important author custom element doubt actually huge issue pointed element author define attribute property underlying value accept data would also add keep attribute property sync setting one sets naming collisions future htmlelement attributes properties seems like weakness web components standards general since lead errors regardless binding approach agree sure something react needs try work around library feels like problem needs solved part custom elements spec see discuss part upcoming tpac standards meeting add properties nt bad elementdefined property shadow future property added htmlelement passing data custom element js property would continue work main issue seems around attributes since global seems confusing bind differently based value author element specified property gettersetter handle value setting property would cause element behave like value never specified might harder debug case custom element lazy loaded upgraded initially undefined properties addresses use case making sure elements still receive data use postupgrade true author nt define gettersetter value would useful also useful since nt know property truly undefined definition lazy loaded seems safest set property another potential con option requires consumer custom element know whether element implemented something property attribute think essentially boat today nothing forces custom element author define attribute instead property could element properties api would receive data react current system would need know use directly set js properties custom elements meant primitive nothing enforces creating corresponding attributes properties trying hard encourage best practice libraries know today create backing properties attributes edit stated earlier point seems like author element need handle attributes anything used html since way data gets passed html usage properties want support complex values property getset dom never know user try pass data element end needing attributeproperty correspondence anyway imagine option shipped folks would bind everything using sigil easiest work custom elements vue today since expose modifier", "d": "10/2017"}, {"body": "requires consumer custom element know whether element implemented something property attribute something react worry rob said opinion custom element author responsability inform user element works actually way need today example think element let say need mute change current time inside component works boolean attribute current time need create pointing video element change property create event handler instance method manually set property dom element think kinda breaks declarative model react imposes api jsx abstract layer since clearly state wrapper component property binding would still need event handler jsx abstraction model would declarative refs would nt necessary point whether relying native custom elements still need know way around based documentation difference second case come custom element author cjorasch two cents", "d": "10/2017"}, {"body": "designing scratch without needing consider backwards compatibility think option would idiomatic per react javascriptcentric api dom regard serverside rendering could problem solved providing api application code inform react map custom element properties attributes similar maps react already maintains platformdefined attributes api would need invoked per custom element name instance properties nt follow straight correspondence attribute hopefully relatively rare concerned much breaking change though think option pretty appealing well sigil signifies property would suggest since already javascript property accessor however think unfortunate make every instance custom element used application responsible knowing use attribute vs use property prefer option even property attribute map needed mapping code isolated jsx usages", "d": "10/2017"}, {"body": "case custom element lazy loaded upgraded initially undefined properties addresses use case making sure elements still receive data use postupgrade maybe nt understand upgrade process elements would typically properties defined getterssetters class prototype checking would return true existence gettersetter even property value still undefined upgrade property values get set temporary instance later get copied actual instance lazy load complete", "d": "10/2017"}, {"body": "upgrading process custom element receives class prior instance class property getterssetters nt available", "d": "10/2017"}, {"body": "jeremenichelli muted works boolean attribute checked also corresponding property though nt seem documented mdn p current time need create ref pointing video element change property yeah occasionally encounter propertiesonly apis modern html elements updates high frequency would nt make sense reflect html attribute point wether relying native custom elements still need know way around based documentation yep unfortunately onesizefitsall attributesproperties rule think generally speaking lean heavily properties provide syntax developers use attributes special cases", "d": "10/2017"}, {"body": "robdodson yeap knew muted property used two prove already wild nt onesizefitsall rule mentioned rely documentation native custom elements something would nt mind decision writing last code snippet kinda liked property binding though", "d": "10/2017"}, {"body": "effulgentsia however think unfortunate make every instance custom element used application responsible knowing use attribute vs use property think already case today though since major custom element libraries polymer skate possibly others automatically create backing properties exposed attributes developers could use sigil every property custom element would probably rare occurrence need switch using attribute cjorasch upgrade effulgentsia mentioned possible custom element page load definition later time initially instance load definition later upgrades becomes instance class point lifecycle callbacks get executed use technique polymer starter kit project kind like example wo nt load definition router changes entirely possible set property element upgraded definition loaded element grab data one lifecycle callbacks", "d": "10/2017"}, {"body": "developers could use sigil every property custom element developers started would differentiate using property using property must nt differentiation needed serverside rendering", "d": "10/2017"}, {"body": "developers started would differentiate using property using property must sorry maybe phrased wrong meant developers would likely use sigil would give consistent result use pass primitive data rich data like objects arrays always work think working properties runtime generally preferred working attributes since attributes tend used initial configuration nt differentiation needed serverside rendering might case server sigil would fallback setting attribute", "d": "10/2017"}, {"body": "might case server sigil would fallback setting attribute nt think would work reason sigil property nt exist attribute video currenttime differentiate using property using property must think differentiation important entirely different reasons choosing use attribute property optimization eg ssr preferring attributes vs clientside rendering preferring properties vs something exists either attribute property regard serverside rendering could problem solved providing api application code inform react map custom element properties attributes specific suggesting something like examples muted set either property attribute reactdomdefinecustomelementprop xfoo muted muted muted currenttime set property reactdomdefinecustomelementprop xfoo currenttime currenttime null myattribute set attribute reactdomdefinecustomelementprop xfoo myattribute null myattribute richdata set either property attribute setting attribute set json string rather object object reactdomdefinecustomelementprop xfoo richdata richdata richdata jsonstringify something property null ssr would skip rendering hydrate client something attribute null react would invoke currently something react could choose whatever strategy optimal perhaps means always setting property clientside attribute serverside perhaps means setting attribute initially creating element setting property later patching vdom perhaps means setting attribute value primitive type ideally react able change strategy whenever wants internal implementation detail react encounters prop nt called nt defined html spec global property attribute react implement default logic example perhaps version maintain bc set attribute version assume either follow optimal strategy case keeping separate api jsx objects kept clean within single namespace like react components noncustom html elements", "d": "10/2017"}, {"body": "sorry excessive comments thought another benefit proposal like share calls could provided js file maintained custom element author repository custom element maintaineddistributed would nt needed custom elements strict correspondence propertyattribute per issue background statement recommendation majority case anyway custom element authors following recommendation would need provide react integration file author nt provide eg custom element author nt care react community people use custom element within react apps could selforganize central repository housing integration file think possibility centralization preferable solution requires every user custom element always explicit sigil", "d": "10/2017"}, {"body": "option would preferred huge breaking change inverse attributes prefix props", "d": "10/2017"}, {"body": "sigils react nt know feel jsx spec regarded universal overly reliant dependent browser specifics especially irregularities due backward compatibility behaving different unfortunate looking browsers api whole surprise would make implementation detail leak surface contradict javascript centric approach unless spec following think bad idea rely web component glad semantics hidden away react jsx well making sure introduce breaking changes options leaving place seems favourable specifically designed access object least developer knows exactly going sigilleak neither new attributes could break existing projects", "d": "10/2017"}, {"body": "leecheneler option would preferred huge breaking change inverse attributes prefix props would breaking change current behavior attributes default would remain sigil would optin developers would use replace spots code currently use pass data custom element js property drcmda neither new attributes could break existing projects clarify meant", "d": "10/2017"}, {"body": "fyi anyone following discussion updated rfc option suggested members react team", "d": "10/2017"}, {"body": "robdodson referring option add attributes object cons may breaking change", "d": "10/2017"}, {"body": "option seems safest us lets us add feature without make decision implicit api right since ecosystem still figuring phase always revisit years polymer paperinput element properties would produce large config developers using lot custom elements app may equal lot configs need write impression custom element users react eventually want wrap custom elements react components anyway appspecific behaviorcustomizations nicer migration strategy case everything already react component eg happens generated lets replace react component custom component uses even use custom elements point time people going create react components interop points might well provide powerful helper also likely people share configs custom elements use eventually see ecosystem stabilize adopt configless approach think next step would write detailed proposal config look like satisfy common use cases compelling enough custom element react users since nt answer common use cases like event handling going end limbo feature nt provide enough benefit offset verbosity", "d": "10/2017"}, {"body": "building earlier comment logic would react prop xfoo instance prop null register event handler invokes prop value assumed function else rendering clientside null set element property prop value else null set element attribute stringified prop value null use stringify prop value otherwise polymer paperinput element properties would produce large config like suggest config necessary outlier props prop xfoo instance nt included config default value function else", "d": "10/2017"}, {"body": "alternatively maybe makes sense keep events separate namespace case remove everything last comment instead let events registered", "d": "10/2017"}, {"body": "gaearon effulgentsia yall think combination option option option would make easier casual user custom element pass rich data imagining scenario building app want use couple custom elements already know work invested want write config option would folks want use something like paperinput app would really like expose entire api everyone team", "d": "10/2017"}, {"body": "ssr option heuristic could always use attribute rendering server camelcase property gets converted dashcase attribute seems pretty common pattern across web component libraries", "d": "10/2017"}, {"body": "like idea combination lot meaning custom elements would work expected set property clientside dashcased attribute serverside people could switch anything nt suit would breaking change though way react works anyone experiences breakage eg using custom element attributes nt backed properties could switch still break leave react team decide acceptable", "d": "10/2017"}, {"body": "ah get reading quickly train robdodson really fan option read props prefixed hence hesitation option seems reasonable straightforward like effulgentsia heading reason could nt supporting multiple types single prop valuable hesitant flow though effulgentsia value function eventname prop name else propertyname prop name attributename camelcasetodashcase prop name nt think want function prop default event assigning propertyname attributename sensible would want supported mimic question", "d": "10/2017"}, {"body": "leecheneler quoting issue summary option pros element created libraries like polymer skate automatically generate properties back exposed attributes elements work approach developers handauthoring vanilla components encouraged back attributes properties mirrors modern ie oddballs like elements etc implemented reason assigning propertyname attributename sensible reflects actually case elements follow best practice making react aware allows react decide use based situation using properties clientside rendering attributes serverside rendering custom elements nt follow best practice attributes without corresponding properties andor properties without corresponding attributes react would need aware attributelessproperties nt rendered ssr propertylessattributes set setattribute clientside rendering proposal could potentially done bitcombining flags however would nt provide way express attribute name different property name eg camelcase dashcase would provide way express serialize rich object attribute ssr current behavior object object nt useful nt think want function prop default event yeah think agree well hence followup comment thanks validating hesitance", "d": "10/2017"}, {"body": "thought less verbose version earlier suggestion const xfoo reactdomcreatecustomelementtype xfoo unreflectedattributes unreflectedproperties reflectedproperties default casing conversion could omitted per code comment strongly urge requiring every reflected property defined rather default anything nt defined automatically reflected property whose attribute name dashcased version", "d": "10/2017"}, {"body": "makes sense effulgentsia like second example open combinatorial explosion types gets added ala events whatever might make sense although suppose would nt want mix event prop attribute anyway attribute amp prop probably things want mimic", "d": "10/2017"}, {"body": "think opportunity react web component community align best practice react opinion go long way custom element authors guided right direction due widespread adoption weight opinions carry although authored implementation option always caught separate attributes events properties ideally prefer option practically think prefer option escape hatch option ideal many types attributes nt corresponding properties aria data require extra heuristics around edgecases elements may attribute property implement one whatever reason feel option considered carefully may viable longterm option preferable nonbreaking change work situations custom element definition registered prior instance created loaded properties set prior art option preact cc developit worked well thus far going path gives reasonably robust nonbreaking implementation proven successful react variant works situations anything gives react shortterm solution better solutions assessed longterm situation situations nt work deferred loading custom element definitions others nt covered escape hatch like incremental dom done could implemented similar effulgentsia proposing would scale better number custom elements consumers want percustomelement basis still function allows react opinion escape hatch satisfy usecases handing responsibility consumer edgecases also something previously discussed developit implementing preact alignment preact react would big win concern future html attributes something ca nt solve nt think get caught concerning", "d": "10/2017"}, {"body": "calls could provided js file maintained custom element author would tie custom element implementation libraryspecific implementation case react opinion high burden custom elements authors moreover authors use react convincing ship definition gets politics discussions one wants defining invocation api user custom element propertiesattributes user actually uses less code maintain expressive", "d": "10/2017"}, {"body": "even library author use react arguing better ux client web components define property configuration use first time use web component needs property hard adding sigil verbose also explicit easier subsequent uses nt need think every single callsite component either case need understand propertiesattributes difference adopting new web component single shared configuration nt need every user component within app think could potentially allow remapping property names configuration allow making reactidiomatic names upgrade path sophisticated wrapper one ever needed also smoother since replace xfoo custom react component whatever fancy translation logic needs basically possible people think property configuration every time use component rather approach suggested option think ergonomic equally flexible option nt work super well server rendering html generation option also creates upgrade hazards web component authors adding property name existing attribute breaking change decide ssr nt useful option pretty appealing react perspective familiar would comprehensive enough practice though component authors expose everything via properties", "d": "10/2017"}, {"body": "treshugart without getting deep bikeshedding think could show expect escape hatch work pseudo code fine page", "d": "10/2017"}, {"body": "sorry sophiebits seeing reply like respond points reading times wanted quickly respond one familiar would comprehensive enough practice though component authors expose everything via properties component built polymer skate expose everything via properties might rare outliers maybe setting attribute styling something otherwise think things always backed properties pretty confident majority inproduction web components built using one two libraries someone handauthoring vanilla web component nothing forces expose everything via properties encourage best practices docs examples worth also nothing forcing use attributes custom element definition class developer whatever want practice folks prefer using abstraction like polymer skate mint components getting properties api free", "d": "10/2017"}, {"body": "maybe best approach properties always client side support option configuration map primitive property names attribute names people want support ssr apps", "d": "10/2017"}, {"body": "sophiebits think great idea except extent breaking change people written react apps using attribute names example rule properties propname nt dashes attributes robdodson aware custom element frameworks practices people would different casing attributes corresponding property without containing dash ie attribute property actually seems much common pattern builtin html elements global attributes eg gt unclear sufficiently discouraged custom element attributes thanks polymer skate still issue existing jsx would fail property set property", "d": "10/2017"}, {"body": "effulgentsia speak skate recommend using attribute api writing html intents purposes also classified server rendering anything via js setting props api automatically oneway sync deserialisation attributes derives attribute name dashcasing property name camelcase becomes camelcase etc behaviour whole configurable encourage best practice aforementioned stated many props make ssr hard valid concern since sounds like would prefer option maybe try push forward sophiebits proposal setting props client providing fallback mapping assume means attributes set server sake example could implement carrying state props server client skate custom element implements setters custom element level trivial react went road setting attributes server rehydration would essentially skate component authors actually would nt anything already provide deserialisation logic robdodson would similar thing incremental dom would look something like js const isbrowser true would actually detection const oldattributehook reactdomsetattribute much like idom impl arguably clear name reactdomsetattribute element name value gt essentially option added browser check keep attr sets server isbrowser amp amp name element element name value else oldattributehook element name value", "d": "10/2017"}, {"body": "sophiebits option also creates upgrade hazards web component authors adding property name existing attribute breaking change think may unavoidable given way attributes work platform ssr custom element therefore must write attribute also run risk platform ship similarly named attribute future treshugart mentioned nt think something react really library empowered solve something want take web component spec authors tpac see fix custom element space sure changes mind option wanted mention since option nice bonuses preact seems proving practice maybe best approach properties always client side support option configuration map primitive property names attribute names people want support ssr apps supportive continuing head direction effulgentsia think great idea except extent breaking change people written react apps using attribute names option would solve otherwise would probably need heuristic coupled option maps dashcased attributes camelcased properties rule properties propname nt dashes attributes looks like preact set attribute dash name assuming use option nt pass check falls back attribute source personally like behavior gets back realm setting attribute possible future conflicts think sophiebits weigh aware custom element frameworks practices people would different casing attributes corresponding property without containing dash know dash easy way library know camel case handauthoring vanilla web component could option would save would nt find property fallback previously used attribute worth looks like preact last resort call tolowercase property nt recognize setting attribute ssring would also properly fall back attribute treshugart maybe try push forward sophiebits proposal setting props client providing fallback mapping assume means attributes set server yes yes would similar thing incremental dom idea every element base class would need mix", "d": "10/2017"}, {"body": "btw thank continuing participate discussion know gotten quite long", "d": "10/2017"}, {"body": "sure understand last example highly unlikely provide global overridable hook like", "d": "10/2017"}, {"body": "gaearon think trey showing net change monkeypatch presumably written reactdom implementation", "d": "10/2017"}, {"body": "based recent comments think proposal bc nt change anything lowercase custom elements work react words jsx like would continue work way react minor bug fixes wanted open separate issue discuss add configless api create react component better custom element semantics eg component created employ following semantics prop xfoo reserved react prop name others apply usual react semantics set either attribute property custom element dom node htmlelement global attribute property defined html spec including thing props react would element words react applies props dom node identical clientside ssr prop xfoo contains dash global attributes permitted emit warning inform developer xfoo propertycentric attributecentric api nothing neither set property attribute prop xfoo starts underscore upper ascii letter nothing maybe emit warning neither recommended way name properties custom elements reserve namespaces future semantics example see props xfoo rendering clientside set dom node property ssr value primitive render attribute nonprimitive skip rendering set property clientside hydration ssr rendering attribute camelcasetodashcase name components created via api reserve prop name use event listeners eg wanting conflict potential custom element property names reactdomcreated implementation would automatically register event listeners dom node edge cases eg using custom element implementation nt desired sufficient app developer could implement react component whatever special thing need ie nt need use could extend people want behavior want jsx use lowercase custom element names instead similar reasons people familiar writing html prefer monkeypatch reactcreateelement would pretty simple monkey patch take first argument matches custom element name want whether specific list string lowercase letters least one dash invoke name forward result remaining arguments original", "d": "10/2017"}, {"body": "developit gaearon could either mapping necessary think hook sustainable however also intended show net change implemented reactdom core jason pointed", "d": "10/2017"}, {"body": "bc nt change anything lowercase custom elements work react words jsx like would continue work way react minor bug fixes wanted open separate issue discuss personally prefer able use element easily pass properties without first needing wrap possible rather go sohpiebits suggestion option clientside properties config ssr still holding hope maybe folks reconsider maybe option backwards compatability bonus gaearon opinion change trey proposal part reactdom core maybe could flesh example would help", "d": "10/2017"}, {"body": "main concern option creating lot boilerplate allow interoperability breaking dx would shame react core team contributors spend lot time changes wo nt desired impact really loved react team handled last changes repo like proptypes would good think plan involving one switch educate developers possible changes future custom custom elements think solution satisfy us one combining options steps api addition warning deprecation behavior change maybe options warning later option deprecation needed wrapper", "d": "10/2017"}, {"body": "maybe options warning later option deprecation needed wrapper actually thinking opposite would better series steps option less dramatic change measuring goes ssr story starts look like web components following option adds new api notion proxywrapper components", "d": "10/2017"}, {"body": "main problem option pretty large bc break main problem option race condition depending element done upgrading sure either truly acceptable project widely used react given availability option wonder instead make much safer still useful improvements usages example inverse option simply introduce props stuff like fully backwards compatible virtue uppercase letters valid attribute names except react currently calls setattribute even prop names upper alphas relying browsers internally lowercase name however could future minor release react emit warning encountering custom element props valid attribute names people fix casing mistakes prior upgrading react addition preserving bc approach easy understand attributecentric meaning react props treated element attributes fits given element name lowercase dash therefore htmlcentric however provided relatively rare cases need pass properties pass rich data people want switch mental model propertycentric ala option option style api could come syntax every prop treated property option fits element name xfoo also following jscentric convention think still want minimum support props treated attributes could either limit generalize treating prop dash attribute meanwhile support option configuration ssr could add config api perhaps could callback function similar one treshugart comment think", "d": "10/2017"}, {"body": "way isolate without third party dependencies", "d": "10/2017"}, {"body": "also experience bug development mode render html array unique keys array entry removing keys rendering everything div around remove whole array seems fix might suggest something wrong way react works keys", "d": "10/2017"}, {"body": "unfortunately vague help diagnose problem need minimal reproducing case involve libraries", "d": "10/2017"}, {"body": "understand possible reproduce description hard thing happens one specific location code use lot array constructions code work fine suddenly one location started break everything standard cra application also nt show errors using keys try see findmake reproducing case without libraries", "d": "10/2017"}, {"body": "chance using babel plugins like inline elements transform try disabling", "d": "10/2017"}, {"body": "support custom attributes include events event still whitelisted react sure implement event react try work around using dom apis js constructor props super props thishandleend thishandleendbind componentdidmount thisnodeaddeventlistener endevent thishandleend componentwillunmount thisnodeaddeventlistener endevent thishandleend handleend render return help", "d": "10/2017"}, {"body": "looks like svganimationelementonend part svg animations level specification currently editor draft means currently part official specification process yet browser support also unclear think whitelisted events either part official specification andor wide browser support use case think manually listening event likely best solution", "d": "10/2017"}, {"body": "fair", "d": "10/2017"}, {"body": "react reactdomhydrate supposed notrerender everything mismatching parts correct understanding react supported render different things secret client performance reasons need fix cases markup differs react patch cases text content attempt patch attributes text content exception often different server due example timestamps see information", "d": "10/2017"}, {"body": "note okay extra rerender really need render something different client use approach render server first components need show something different hope helps", "d": "10/2017"}, {"body": "thanks new behaviour react makes sense confused documentation react attach event listeners preserving much existing dom possible best results try render content server client differences possible guess fixed maybe warning console improved currently logs something like could error log precisions fix cases markup differs find solution stop using use css media queries instead js media queries server client always hell", "d": "10/2017"}, {"body": "track better docs better warnings", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "think bug react tried vanilla dom apis", "d": "10/2017"}, {"body": "hi sorry think might confused body content", "d": "10/2017"}, {"body": "says error boundaries catch errors rendering lifecycle methods constructors whole tree showing error promise callback happened fire thing called error nt technically happen inside error boundaries wo nt catch error boundaries mechanism prevent react getting inconsistent state nt know render due error case example even despite error rendering unaffected example promise lead rerendering throws gets swallowed see case error boundary receives error working designed", "d": "10/2017"}, {"body": "thanks gaearon explaining doc little confusing would great give example application accidentally swallow error dont think child component swallowing error", "d": "10/2017"}, {"body": "referring block leave clause empty log error effectively swallowing react still report unhandled browser pass error boundary even though caught intentionally people accidentally swallowing errors like years got dozens different issues time", "d": "10/2017"}, {"body": "thanks gaearon removed catch block said even removed error boundary parent component even though child components throws error without swallowing render whole component tree rendered possibility developer notice time development testing correct wrong think swalling error means even error thrown child component rendered", "d": "10/2017"}, {"body": "sure asking yes expected error thrown rendering tree unmounted unless created error boundary swallowing error means using block ignoring object makes impossible developers figure went wrong saying react protects printing error console even caught", "d": "10/2017"}, {"body": "wrote implementation launch async actions browser based requestanimationframe support priorities frames break may useful", "d": "10/2017"}, {"body": "think start small fixes pr first experience contributed react want understand structure approaches development cc gaearon", "d": "10/2017"}, {"body": "maybe compose task list filesfunction need typings", "d": "10/2017"}, {"body": "script called counts number files flow coverage pushes branch perhaps could modify list files instead could make dashboard reads github api shows list remaining files kinda like isfiberreadyyetcom", "d": "10/2017"}, {"body": "think watch tonight", "d": "10/2017"}, {"body": "looked seems could figure need change maybe someone help would really like understand", "d": "10/2017"}, {"body": "tried", "d": "10/2017"}, {"body": "nt understand file gaearon maybe go messenger email speed discussion", "d": "10/2017"}, {"body": "script greps many files calls script writes branch proposing maybe change keep list files flow instead think", "d": "10/2017"}, {"body": "instead number files output list files understand correctly", "d": "10/2017"}, {"body": "thought could yes", "d": "10/2017"}, {"body": "basically wasted exclusive inclusive tables exclusive inclusive tables might make sense build something top performance observer api exposed browsers uses high precision timings emit via integration user timing api fact wwwillchen already created proof concept ago would great someone could take polish turn npm module wasted table complicated rather get figure async story fiber clear work async mode rather invest effort break later anyway", "d": "10/2017"}, {"body": "mean createreactapp", "d": "10/2017"}, {"body": "sure issue indeed use create react app officially supported", "d": "10/2017"}, {"body": "mean builtin webpack specific template kind thing hope understanding react examples gaearon would request reopen issue makes sense", "d": "10/2017"}, {"body": "cra uses webpack hood get typical webpack boilerplate want make sense", "d": "10/2017"}, {"body": "gaearon nice checked thankyou actually coming vue learning react nt knew said mention docs need change sure make sense", "d": "10/2017"}, {"body": "moreover separation concerns big issue jsx moreover days people going ahead moving css within jsx according good questions facebookreact arguably agree css js paradigm feature request templates make sense reactjs future separation concerns", "d": "10/2017"}, {"body": "think kind abstraction behind scenes converts equivalent jsx render function would ideal", "d": "10/2017"}, {"body": "hey danielruf jsx specification technically allow namespaced tags see identifier jsx specification reason nt work babel plugin throws jsxnamespacedname since supported react would recommend referring jsx repo issue tracker reading existing issues topic jsxnamespacedname needed worst case could fork implement version allows namespaced tags easy since ast node already hope helps", "d": "10/2017"}, {"body": "example using astexplorer shows namespaced tags parsed babel", "d": "10/2017"}, {"body": "hm usable solution far careless seems unmaintained find solutions", "d": "10/2017"}, {"body": "commitupdate element guaranteed happen children adjusted yes pretty important guarantee example closest siblings first last instead last first think correct order etc however best authoritative answer test see happens since things change subtle ways sometimes", "d": "10/2017"}, {"body": "sebmarkbage heads super quick rough test order described exactly right specific name lookup searching", "d": "10/2017"}, {"body": "hey rgbkrk even though blacklist behavior lenient react still warns using noncanonical names attributes recognizes example use instead still get warning canonical name attribute seeing consistent camelcased names still canonical names style properties warning issued like attribute names use property names still recommended use camelcased versions also worth noting would worked react well attributes consistent style properties also warnings devonly nt affect behavior production", "d": "10/2017"}, {"body": "agree aweary answer behavior style properties indeed new trying encourage consistency third party components feel obligated support kinds patterns time better ecosystem people argue conventions feel works best point wrap logic components read props passing add similarly named props natural convention js always forcesilence warnings overriding might provide kind apis opt warnings future disabling particular one want continue enforcing naming consistency provide wrapper around nonreact code always convert things part wrapper", "d": "10/2017"}, {"body": "perfect thanks response guide people using python bindings towards using proper let accidentally work passing", "d": "10/2017"}, {"body": "specific reason nt want make helper camelcase things", "d": "10/2017"}, {"body": "fine making helper curious ok leave let pass minispec state need use camelcase link back react docs blog", "d": "10/2017"}, {"body": "misunderstanding pass attributes nt mean guaranteed work correctly use wrong casing react pass apply special behavior might attribute property behavior visibly different less crossbrowser normalization", "d": "10/2017"}, {"body": "provide complete example since tests server rendering example also use server rendering", "d": "10/2017"}, {"body": "gaearon hi found point result issue another package imported cause even though called sorry pls close issue thanks", "d": "10/2017"}, {"body": "deprecated think using correctly intentionally want people wrap components factories definition time unnecessary set problems solving described release however wrap things factories import time fixed example want print warnings yes bit typing solves problems introduced extra wrapping difficult testing confusing type systems always wrap exports", "d": "10/2017"}, {"body": "thank much dan information gave perfectly fine mostly everything written first component factory factory accessing factorytype allowed retrieve react custom component class course everything react custom component class also done factory using factorytype sense component factory bit powerful component class also used directly without explicit need createelement second seems react team consider createfactory important see following react warning factorytype deprecated access class directly passing createfactory says considered legacy several issues wish lists read things like reactcreatefactory moved separate package etc third let simplify feature request follows please let createfactory including factorytype property remain main react module without labeling legacy deprected javascript const factorytag symbol isreactfactory prefer const factorytag isreactfactory function createfactory type const factory createelementbind null type like add please let createelement support factories directly even seems kind unnecessary canonical react programming may unnecessary cases like one remark stated javascript const fancybutton createfactory remark maybe helps bit tell concrete reason feature request think javascript ui world really missing kind ui library abstraction api example implement datepicker libraryagnostic way use later directly react component vue component whatever depending systemjs webpack configuration gt packagemodule aliasmapping btw something like custom elements onsen ui mean least virtual dom based ui libraries abstraction api could look like follows function createelement create virtual dom node signature react function iselement check whether something proper virtual dom node function mount mountrender virtual dom tree real dom element reactdomrender function definecomponent define actual component types discussed maybe functions forget concrete argument function definecomponent interessting question exactly function definecomponent return return class says underlying component system objectorientedclassbased return class end day concrete classes whatever implementation details correct answer returns component factory return value component factory virtual dom element represents concrete component important factorymeta could give access meta information component type like supported properties etc ideally returned component factory supported directly createelement counterpart underlying ui component system case counterpart actually existing component types represented component factory could also used directly jsx without inconvenience unwrapping things everything feels natural exactly reason feature request described rare cases concrete component type representation underlying ui library example concrete react component class really needed retrieved factorytype", "d": "10/2017"}, {"body": "ones called reactdom reactart please submit pr", "d": "10/2017"}, {"body": "created pr", "d": "10/2017"}, {"body": "take look weekend see tackle short term", "d": "10/2017"}, {"body": "great thanks pick particular test please comment filename thread someone else start working test", "d": "10/2017"}, {"body": "definitely interested contributing look weekend find opportunity refactor", "d": "10/2017"}, {"body": "interested well", "d": "10/2017"}, {"body": "published list tests first post let know ones like take assign", "d": "10/2017"}, {"body": "fine", "d": "10/2017"}, {"body": "sadpandabear got", "d": "10/2017"}, {"body": "work", "d": "10/2017"}, {"body": "take look", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "work", "d": "10/2017"}, {"body": "take", "d": "10/2017"}, {"body": "like give shot", "d": "10/2017"}, {"body": "take", "d": "10/2017"}, {"body": "like work", "d": "10/2017"}, {"body": "like work", "d": "10/2017"}, {"body": "would like take", "d": "10/2017"}, {"body": "like take synthetickeyboardeventtestjs thanks", "d": "10/2017"}, {"body": "let take", "d": "10/2017"}, {"body": "like work", "d": "10/2017"}, {"body": "take", "d": "10/2017"}, {"body": "taking", "d": "10/2017"}, {"body": "like work", "d": "10/2017"}, {"body": "like work reacttreetraversaltestjs", "d": "10/2017"}, {"body": "hi like work", "d": "10/2017"}, {"body": "take", "d": "10/2017"}, {"body": "like work", "d": "10/2017"}, {"body": "could take", "d": "10/2017"}, {"body": "like try", "d": "10/2017"}, {"body": "hello like try muscle", "d": "10/2017"}, {"body": "hello like try", "d": "10/2017"}, {"body": "take", "d": "10/2017"}, {"body": "getnodeforcharacteroffsettestjs", "d": "10/2017"}, {"body": "burnsbeaver one like start one test per person", "d": "10/2017"}, {"body": "getnodeforcharacter please deleted comment sorry confusion", "d": "10/2017"}, {"body": "still free", "d": "10/2017"}, {"body": "take fallbackcompisitionstate", "d": "10/2017"}, {"body": "try reactfiberhostcontexttestjs", "d": "10/2017"}, {"body": "update tests taken subscribe issue might free future somebody time finish work comment test becomes available try", "d": "10/2017"}, {"body": "people took want reiterate solution always clear cases might even possible reasonably test behavior without changes react source ever feel stuck comment try figure plan", "d": "10/2017"}, {"body": "adsonpleal sorry disappoint checked unfortunately accidentally already fixed realize first todo outdated test see already fixed", "d": "10/2017"}, {"body": "gaearon wow refactoring gon na take time hope finish everything weekend small doubt ok repace behavior function uses something like way check pr see remove know tests may rely specific stuff wondering effectively used instead", "d": "10/2017"}, {"body": "jquense context best long get working review see approach works", "d": "10/2017"}, {"body": "heads anyone else older version yarn installed trying run tests locally everything breaking upgrading yarn latest fixed issue tests running fine", "d": "10/2017"}, {"body": "sadpandabear module test file going check implementation soon", "d": "10/2017"}, {"body": "gaearon tests feel like dependent upon existence test suite make sense write tests replace existing functions test suite along lines setting inner html vs anything specific suppose getting little hung naming test suite edit unless mistaken svgs property sure second chunk tests file even necessary", "d": "10/2017"}, {"body": "silvestrijonathan think tests really trying verify works expected react modify tests use reactdom render content enough fine rename test feel would appropriate", "d": "10/2017"}, {"body": "couple hours playing test file strong suggestion newcomers like start tests clean env file editing existing file mocked internal functions functions broken took awhile realize things nt working intended", "d": "10/2017"}, {"body": "gaearon think need clarify including simulating events considered private api indirectly reaches internal apis nt let us properly test would work otherwise eg hamper ability test compiled packages without exposing hooks wo nt let us test new nonsynthetic event system", "d": "10/2017"}, {"body": "dphurley noticed working also working test suite uses wanted give heads pr sure already submitted pr nt might good idea base accepted", "d": "10/2017"}, {"body": "gaearon thanks advice thought utilizing tests go way yes probably rename tests case look pr next day", "d": "10/2017"}, {"body": "got first merged pr take look working anything related events suggest read discussions reviews common themes may valuable use discussions steer prs right direction", "d": "10/2017"}, {"body": "great convos referencethanks work got little busy think able get pr opened weekend tests", "d": "10/2017"}, {"body": "yet look test picked got busy things try raising pr another couple days buy time", "d": "10/2017"}, {"body": "sounds fine sure", "d": "10/2017"}, {"body": "spread operator language feature could removed react referring", "d": "10/2017"}, {"body": "salehhamadeh may thinking removed gaearon pointed spread operator entirely different thing hope clears things", "d": "10/2017"}, {"body": "figured happening code used jsxtransformer compiled spread attribute thanks helping figure", "d": "10/2017"}, {"body": "oh see yeah jsxtransformer might broken since also note unsupported two years using production please compile jsx babel ahead time", "d": "10/2017"}, {"body": "would like take issue need little direction start", "d": "10/2017"}, {"body": "run code see emitted warning find message source tweak message helpful help", "d": "10/2017"}, {"body": "yes thank", "d": "10/2017"}, {"body": "hi beginner think warning located line reactdomdevelopmentjs file correct wrong", "d": "10/2017"}, {"body": "specific file local nodemodules directory install reactdom via npm", "d": "10/2017"}, {"body": "yes search source code though find", "d": "10/2017"}, {"body": "proposed fix", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "looks similar", "d": "10/2017"}, {"body": "nt think moved files though", "d": "10/2017"}, {"body": "bumped", "d": "10/2017"}, {"body": "ok get works real map keeps things object still works even though directly uses nevertheless still fragile", "d": "10/2017"}, {"body": "worked around", "d": "10/2017"}, {"body": "cc bvaughn would say fine leaving actually something would require bump two modules afaik access around public api maybe hard keep better compatibility", "d": "10/2017"}, {"body": "thanks bringing attention bdwain agree gaearon probably okay leave peer dependency unless made changes require bumping worry may cause problem future though since tests release process nt step past versions peer deps verify still work eg test latest test renderer latest react would require release manager knowremember actively consider peer dep constraints implications bit hard nt context changes gone certain release", "d": "10/2017"}, {"body": "see react test renderer rely private apis react public api nonmajor bump fine right", "d": "10/2017"}, {"body": "renderers rely private apis package scope limited add flow types think try safely keep compatible", "d": "10/2017"}, {"body": "sweet thanks", "d": "10/2017"}, {"body": "separate package way react chosen reactproptypes deprecated think works back", "d": "10/2017"}, {"body": "better good version compatibility includes newest functionality know maybe easylet user decide one use", "d": "10/2017"}, {"body": "dependency updated use old version react course reactnative ca nt use latest version painful", "d": "10/2017"}, {"body": "run codemod convert old pattern new one", "d": "10/2017"}, {"body": "please run codemod convert code hope links help", "d": "10/2017"}, {"body": "edited title potential actionable issue", "d": "10/2017"}, {"body": "oh wait wrong repo", "d": "10/2017"}, {"body": "filed", "d": "10/2017"}, {"body": "hey fixed known issue fix next release however thank great write", "d": "10/2017"}, {"body": "fixed master duplicate", "d": "10/2017"}, {"body": "possible set transformorigin another error attribute valid course set dom makes spinner look correct see another error setting works chrome however seem like valid svg attribute first place find specification mdn either probably fiddle work safari firefox however exist style property name still work safari work chrome firefox part css transforms level spec per mdn probably use instead", "d": "10/2017"}, {"body": "expected please see also", "d": "10/2017"}, {"body": "ahh thanks gaearon figured must somewhat design makes sense similar purecomponent works inline functions assumed specific react since issue manifested upgrade thanks link previous issue caveats super helpful", "d": "10/2017"}, {"body": "hi like work im beginner would appreciate pointers start", "d": "10/2017"}, {"body": "run repo root start build process relevant part probably see gets populated content npm packages want make sure respect entry package skip filesfolders whitelist way something missing package copied check change works example change would exist change folder would copied whitelist", "d": "10/2017"}, {"body": "thanks really helpful solution thinking involves parsing packagejson file packages comparing filesdirectories copied parsed array right track", "d": "10/2017"}, {"body": "sounds right", "d": "10/2017"}, {"body": "sorry nt mean hijack issue apravink playing possible fix pushed repo happy discuss", "d": "10/2017"}, {"body": "nt chance work working solution please go ahead", "d": "10/2017"}, {"body": "thanks informing apravink pick please feel free share ideas suggestions", "d": "10/2017"}, {"body": "please see discussion behavior expected documented breaking change although prominently future", "d": "10/2017"}, {"body": "gaearon mistake nt see thanks information", "d": "10/2017"}, {"body": "worries bit confusing agree", "d": "10/2017"}, {"body": "react back production us performance greatly improved thanks great work", "d": "10/2017"}, {"body": "glad hear", "d": "10/2017"}, {"body": "enough information unfortunately think react anything wrong encourage investigate webpack side also likely problem react file first place", "d": "10/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "10/2017"}, {"body": "done", "d": "10/2017"}, {"body": "yep take look blog post", "d": "10/2017"}, {"body": "encountered bug looks like triggers except az", "d": "10/2017"}, {"body": "encountered bug looks like triggers except az yup autocompletionautocorrect triggered alphanumeric chars", "d": "10/2017"}, {"body": "look antform", "d": "10/2017"}, {"body": "thanks looks nice design form replaces reduxform design use validator copyright license clear", "d": "10/2017"}, {"body": "bug tracker react please use community resources library discussion", "d": "10/2017"}, {"body": "webmobiles refer himhe big introduce increase size js antd library containing reduxform license", "d": "10/2017"}, {"body": "confirmed offending code duplicate fixed case thank filing providing reproduction case", "d": "10/2017"}, {"body": "awesome thx", "d": "10/2017"}, {"body": "happy send pr gets green light", "d": "10/2017"}, {"body": "hey pirate seeing key warning running example provided chance returning fragment using array like need add key root please provide full example reproducing warning investigate thanks", "d": "10/2017"}, {"body": "nope returning array rendered conditionally part larger component working providing full example createreactapp give couple hours", "d": "10/2017"}, {"body": "aweary repo minimum amount code required reproduce open see error error disappears removed suspect issue lies babel plugin code want close issue reopen babel issue tracker", "d": "10/2017"}, {"body": "thanks clarifying pirate nt using inlineelements transform development using applying production build check information thanks", "d": "10/2017"}, {"body": "happy update docs open issue instead", "d": "10/2017"}, {"body": "yes please file website issues repo", "d": "10/2017"}, {"body": "ended new issue another repo", "d": "10/2017"}, {"body": "wanting try generate file distribution well consumers get flow typechecking userland renderers run fixture file release fails know breaking api change", "d": "10/2017"}, {"body": "would nice fixture could built top noop renderer something", "d": "10/2017"}, {"body": "use maintained renderer tests could look caveat renderer internal dependencies", "d": "10/2017"}, {"body": "understand asked sorry benchmarked interactions app evidence makes faster use places otherwise sorry helpful sure else looking maybe clarify example could give better answer", "d": "10/2017"}, {"body": "test utils included react dom import like", "d": "10/2017"}, {"body": "word maintainers curious opinion thanks", "d": "10/2017"}, {"body": "cc acdlite sebmarkbage", "d": "10/2017"}, {"body": "progress update bug running using react waypoint trouble replicating reliably", "d": "10/2017"}, {"body": "wardenunleashed sure issue pr introduced issue released public releases", "d": "10/2017"}, {"body": "anything maximum update depth exceeded error think might give brief summary physical symptoms see encountering problem component essentially tries setstate enters leaves viewport onleave event fires completely freeze entire browser become unresponsive starting utilize significant amount memory hits upper limit events error logged duration freeze logging error varies seemingly never seconds figured might related due infiniteloop nature problem fact nt experienced problem previously", "d": "10/2017"}, {"body": "internal bug fixed wardenunleashed infinite loop bugs could caused number things could open separate issue details ideally isolated repro case", "d": "10/2017"}, {"body": "closing duplicate yes expected", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository please open new issue repository thanks", "d": "10/2017"}, {"body": "broken mean nt see page please disable fair adblocker known cause issues new website fixing soon case please file issues website repository instead", "d": "10/2017"}, {"body": "verified page displays correctly probably ad blocker breaking", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository please open new issue repository thanks", "d": "10/2017"}, {"body": "awesome thanks", "d": "10/2017"}, {"body": "believe already issue", "d": "10/2017"}, {"body": "code alone reproduce jest says fail testspecjs test suite failed run", "d": "10/2017"}, {"body": "modified code js var react require react var reacttestrenderer require reacttestrenderer things gt var inst reacttestrenderercreate reactcreateelement null qwe expect insttojson tomatchsnapshot ran fine guess something wrong environment actually maybe bad something like make sure using work happy reopen provide reproducing example reproduce bug", "d": "10/2017"}, {"body": "provide reproducing example repo fresh clone changed test file code ran npm install npm test still got thing log nt generate packagelock files default see versions got installed gaearon please reopen", "d": "10/2017"}, {"body": "eddiemonge verisons using also tried repro yarn npm unable trigger error see output gaearon noted", "d": "10/2017"}, {"body": "hmm ok troubleshoot side", "d": "10/2017"}, {"body": "im getting error typeerror read property reactcurrentowner undefined add import renderer reacttestrenderer test file dependencies follows name testapp version private true dependencies react reactdom reacttapeventplugin reacttestrenderer devdependencies reactscripts scripts start reactscripts start build reactscripts build test reactscripts test envjsdom eject reactscripts eject flow flow name testapp version private true dependencies react reactdom reacttapeventplugin reacttestrenderer devdependencies reactscripts scripts start reactscripts start build reactscripts build test reactscripts test envjsdom eject reactscripts eject flow flow please find screen cast description eddiemonge thank help naveen", "d": "10/2017"}, {"body": "hey eddiemonge changed version react reacttestrenderer npm install work", "d": "10/2017"}, {"body": "older version reacttest installed globally somehow removing forcing cache clean reinstalling locally fixed problem think something trying use global version", "d": "10/2017"}, {"body": "eddiemonge thank discovering similar issue removing global react package allowed tests run reference issue saw", "d": "10/2017"}, {"body": "naveendk ran issue latest disttag version requires peerdependency kept running issue looks like bumped cleared everything ca nt upgrade yet need older version find older compatible version registry", "d": "10/2017"}, {"body": "peer dependency disregard install", "d": "10/2017"}, {"body": "make sure version version", "d": "10/2017"}, {"body": "supported put functions react state nothing wrong pattern although used often example dynamic loading code common store component react state check looking relevant relevant api lets set state based previous state cause functions part state although supported well hope explains", "d": "10/2017"}, {"body": "fixed release fix soon", "d": "10/2017"}, {"body": "new method unrelated also nt need jsdom test renderer", "d": "10/2017"}, {"body": "ps printed testrenderer got reacttestinstance javasrciprt consolelog testrenderer reacttestinstance component reactcompositecomponentwrapper currentelement typeof symbol reactelement type object key null ref null props object owner null store rootnodeid compositetype instance toplevelwrapper props object context refs updater object reactinternalinstance circular state null hostparent null hostcontainerinfo createnodemock function createnodemock updatebatchnumber null pendingelement null pendingstatequeue null pendingreplacestate false pendingforceupdate false renderednodetype renderedcomponent reacttestcomponent currentelement object renderedchildren object toplevelwrapper circular hostcontainerinfo object mountindex mountimage null debugid context mountorder toplevelwrapper null pendingcallbacks null calledcomponentwillunmount false warnedaboutrefsinrender false mountindex mountimage null debugid", "d": "10/2017"}, {"body": "documentation react", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "test renderer new nt properly documented basically except nt methods words nt support traversal", "d": "10/2017"}, {"body": "nt intercepting logging warnings errors enough", "d": "10/2017"}, {"body": "syranide like monkey patching consoleerror looking checksum errors ideally would properly supported api react one idea could callback call believe callback already return error object perhaps checksum issues could exposed way well", "d": "10/2017"}, {"body": "diffing attributes innerhtml longer happens production build way issuing possible mismatches even text content run normalization stuff dev know whether actually mismatch theory could issue hook particular mismatches actually currently track production like tag mismatches would limited since many mismatches nt actually end different dom structures probably run dev build work fully callback hydrate would nt work want able asynchronously lazily hydrate parts tree time particular time done matching monkey patching seems like way whatever hooks expose would end looking similar talked alternative way intercept warnings generic way maybe way", "d": "10/2017"}, {"body": "thanks response sebmarkbage react today get diff production know know mismatch occurred run local dev build investigate main concern losing ability know error occurred less concerned getting diff production try monkey patching nt know best solution advocate going forward general curious apps handle production checksum issues concern applications react isolates checksum issues tree perhaps less issue", "d": "10/2017"}, {"body": "possible attach data attribute eg datareactmismatch better name altered dom node root one would enough application code check reporting purpose", "d": "10/2017"}, {"body": "sebmarkbage ping", "d": "10/2017"}, {"body": "sorry saying new strategy react nt even know something mismatch nt actively patch everything everything compared general curious apps handle production react lot use production yet early adopter think nt handle production rely showing point development lot needs systemic handling building frameworks around ensures common patterns nt cause", "d": "10/2017"}, {"body": "also noticed duration marks consistent expected duration steps computed subtracting react related marks", "d": "10/2017"}, {"body": "could please file nt track doc issues main repo anymore", "d": "10/2017"}, {"body": "examples images size output react", "d": "10/2017"}, {"body": "general recommendation add custom tags without dash dash way define custom element idea otherwise safe way browsers add new tags spec fact might already broken raise issue asking following recommendation likely existed recommendation well known planning changing like know concerned thing whether break rationale", "d": "10/2017"}, {"body": "see would need changed like point react raise warnings camelcased attributes custom element seems reasonable nt clear reading", "d": "10/2017"}, {"body": "resolved issue changing custom elements accidentally thought attribute deprecated need dash convention", "d": "10/2017"}, {"body": "see sneak time next day", "d": "10/2017"}, {"body": "need somebody else confirming reproduces reproduce", "d": "10/2017"}, {"body": "verified provided example using render windows render using example", "d": "10/2017"}, {"body": "idea going", "d": "10/2017"}, {"body": "matches logic find probably one", "d": "10/2017"}, {"body": "aweary take", "d": "10/2017"}, {"body": "probably one gaearon looks like issue focusing blurring causes placeholder show behavior saw first time looking", "d": "10/2017"}, {"body": "check fixes", "d": "10/2017"}, {"body": "gaearon stepping found call site verified reason set let build locally verify fix", "d": "10/2017"}, {"body": "react currently use raf although future plan use polyfill requestidlecallback true animation things think would good simply wrap thiscanrender block requestanimationframe sounds good forget schedule another frame already scheduled one", "d": "10/2017"}, {"body": "found reason use ad blocking extension problem program", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository please open new issue repository real issue thanks", "d": "10/2017"}, {"body": "also wanted say awesome work react really excited make use portals bit ahead", "d": "10/2017"}, {"body": "instead reading put initially would match server trigger rerender hydration produce warning", "d": "10/2017"}, {"body": "ah course get following advice avoiding thanks gaearon working pr", "d": "10/2017"}, {"body": "please fix docs thanks think misunderstood documenting close issue track docs nt find time send pr please refile issue thanks", "d": "10/2017"}, {"body": "heavy lifting reactdom injects host component class react react handles traversal diffing calls various update methods reactdomfibercomponent work moving host node dom node new markup", "d": "10/2017"}, {"body": "jquense exactly looking thank", "d": "10/2017"}, {"body": "would note realistically big react apps rarely dom manipulation ends expensive mostly reconciliation react offers strategies avoid like purecomponent encourages use virtualization large lists", "d": "10/2017"}, {"body": "gaearon thanks makes sense question trying answer small component vastly larger component tree needs updated literally react update dom question arose reading reconciliation wondered say leaf components require updating react replace toplevel root node eg w updated root element allow browser rebuild render tree accordingly react perform individual mutations leaf elements directly ask imagine scenarios either approach could present performance bottleneck excuse asking wrong questions well documented somewhere far nt come across anything answer question though", "d": "10/2017"}, {"body": "react updates leaf nodes case please see", "d": "10/2017"}, {"body": "love create pr", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "see would related react seems like question css think belongs issue tracker sure reactspecific please create vanilla htmlcss demo also reproduce issue", "d": "10/2017"}, {"body": "dark rectangle render component think react related", "d": "10/2017"}, {"body": "nope issues vanilla js also sorry", "d": "10/2017"}, {"body": "want send pr", "d": "10/2017"}, {"body": "sure", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "change charset renders camelcased version bug html case insensitive completely valid output browser understand fine agree little bit surprising tracking real problem", "d": "10/2017"}, {"body": "bug html case insensitive charset completely valid output hyphenated attributes treated", "d": "10/2017"}, {"body": "think emit autofocus attribute looks like key drawback autofocus supported ios safari android browser drawbacks missing hardmechanical would add autofocus via js", "d": "10/2017"}, {"body": "always js pretty easy seems pretty bad semantics take scripts load actually gets focused user focus things meantime suddenly becomes focused since fiber asynchronously rehydrate might also want partial hydration might make even worse already weird artifacts might get focused switch gets focused could potentially js normal one fails sure detect could add lot code", "d": "10/2017"}, {"body": "sure right tradeoff given browser support issue", "d": "10/2017"}, {"body": "take scripts load actually gets focused think strong case emitting attribute sounds like ca nt guarantee correctness even check user might already flow scrolled page nt want page jump someone start typing another input box midway key stroke sorry rehash argument would make someone filed issue", "d": "10/2017"}, {"body": "emitting attribute sounds like right way go want autofocus work browsers nt support seems sane add script end body guess causes issues html page large guess could also check activeelement none body focus might overkill", "d": "10/2017"}, {"body": "cc", "d": "10/2017"}, {"body": "initial reason emitting autofocusattribute browser implementations widely inconsistent treated support focus page load etc imho means anyone serious autofocus apply manually via js anyway however vaguely remember mobile browsers nt really listen js focus honor autofocus extent mess merit emitting attribute feel strongly focus manually given tools", "d": "10/2017"}, {"body": "chatted trueadm think sounds like plausible way forward react emit ssr html ensure call js polyfill hydrated elements keep blacklisting clientcreated elements use js polyfill react remove js polyfill completely warn one element added commit since browser inconsistencies occur make sense", "d": "10/2017"}, {"body": "warn one autofocus element added commit since browser inconsistencies occur browsers least long ago inconsistent interpret autofocus attribute well know eg ff would honor pageload totally ignore dynamically inserted nt surveyed long time still think approach correct", "d": "10/2017"}, {"body": "basic investigation looks like modern browsers except safari respect page load probably made sense html documents apps would expect respected dynamically inserted elements since basically page transitions much first page load spas probably keep polyfill", "d": "10/2017"}, {"body": "gets weirder chrome respects dynamically added elements one even creating input adding document removing next tick enough disable autofocusing elements added future chrome firefox care dynamically added elements safari always respects", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "please provide complete project reproducing", "d": "10/2017"}, {"body": "since use typescript guess would need configure something import commonjs modules", "d": "10/2017"}, {"body": "hi dan npm jest able replicate error", "d": "10/2017"}, {"body": "typescript project please provide javascript project reproducing instead typescript experts bug react reproducible calling javascript fix related typescript configured encourage reach typescript community help instead hunch default syntax work commonjs react modules maybe named import syntax work read section blog post happy reopen demonstrate problem without typescript cheers", "d": "10/2017"}, {"body": "sounds good thanks", "d": "10/2017"}, {"body": "actually think bug caused running mounting document ssr fixture seems like render right hydration go last could also work around delaying rendering close hear people confusing maybe make message better", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "sounds like duplicate", "d": "10/2017"}, {"body": "thanks dan seen issue jsfiddle example seemed like different cause", "d": "10/2017"}, {"body": "let keep open suspicion might related could wrong", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "never supported access anything internal name nt documented public api reserve right break internal apis versions including patch releases semantic versioning covers public api currently read something context declare create helper utility find cumbersome js function addintlcontext mycomponent mycomponentcontexttypes componentcontexttypes intl proptypesobject usage class button extends reactcomponent addintlcontext button possible lift restriction future part larger context api redesign", "d": "10/2017"}, {"body": "heavily edited original question since poor choice object naming code led false assumptions specifically object named props thought might something gets especially frozen rather fixed see question updating object instance", "d": "10/2017"}, {"body": "attempts update object commitupdate result error since object frozen object nt freeze instances must something else updating frozen freeze react elements props nt ones need mutate see question updating object instance still sure understand instance object provide free anything like including mutating adding removing properties using nested objects etc", "d": "10/2017"}, {"body": "gaearon sorry delay took closer look get error dev mode production mode fine specifically given reconciler attempt modify get error happen modifying ie scalar", "d": "10/2017"}, {"body": "react nt limit anything instances error getting message stack etc provide reproducing example", "d": "10/2017"}, {"body": "hmmm thought maybe rebuild reactreconciler package install might fix getting oo", "d": "10/2017"}, {"body": "ah seems working old version api changed", "d": "10/2017"}, {"body": "yeah put stuff object", "d": "10/2017"}, {"body": "rather flow types reactfiberreconciler help", "d": "10/2017"}, {"body": "got working see error sure helpful create new repo minimal setup give debug info objectisfrozen instanceprops true dev mode false production mode props happens name object instance", "d": "10/2017"}, {"body": "ahhh mistake assigning props came createinstance directly without copying new empty object course props frozen", "d": "10/2017"}, {"body": "sake clarity case anyone else hits issue everything gaearon said correct react freeze anything instance rather freezes copy props passed instance least dev mode makes perfect sense perspective props definition immutable nt prevent making unfrozen copy storing mutable object instance", "d": "10/2017"}, {"body": "ah makes sense nt thought yes nt want modify", "d": "10/2017"}, {"body": "btw totally right nt need keep around yet least hehe reason compare old new prepareupdate commitupdate note using prepareupdatepayloadcommitupdate instead commitupdate eg always sending updatesignal prepareupdate guidelines approach better", "d": "10/2017"}, {"body": "nt need update case optimize skipping signal", "d": "10/2017"}, {"body": "correct thinking prepareupdate might good place deal async props well example let say component loads data net data loaded something useful render way solve react would usually give component local state load even wrapped hoc reuse across components idea local state pipeline custom renderer thinking could instead handled mapping object keys unloaded data omitted data ultimately loaded included although wo nt trigger new load finished use case single global state constantly updated anyway according frame tick continually called check loaded data terms implementation details mapping function could come instance checks sort cache loaded data access using lenses could use generic function property list comes instance thinking loud thoughts", "d": "10/2017"}, {"body": "nt recommend implementing things like custom renderer expect work well custom renderers meant strictly deciding render things platform primitives data loading concerns typically solved application level renderers low level completely unaware components", "d": "10/2017"}, {"body": "came reactuniversalcomponent", "d": "10/2017"}, {"body": "hi question nt seem reactspecific suggest ask stack overflow similar website generic javascript tag", "d": "10/2017"}, {"body": "hi sory post bad ask respon source take orb react folder demo help", "d": "10/2017"}, {"body": "implemented", "d": "10/2017"}, {"body": "please provide full reproducing example", "d": "10/2017"}, {"body": "syranide right bug component sorry confusion js import react react import proptypes proptypes import navlink reactrouterdom import isfunction lodashisfunction import routemap routes export default class loadablenavlink extends reactcomponent static proptypes children proptypesnode proptypesstring params proptypesobject constructor props super props thisroute routemap propsto method missing componentwillreceiveprops nextprops thisroute routemap nextpropsto maybepreloadcomponent gt thisroute return render const children params props thisprops return", "d": "10/2017"}, {"body": "briancappello great curious behavior still change unrelated ie broke component time upgrading", "d": "10/2017"}, {"body": "syranide yea must broken upgraded noticed afterwards mistakenly attributing fault version change downgraded indeed component still broken without call still works", "d": "10/2017"}, {"body": "scroll bug", "d": "10/2017"}, {"body": "serious site built users pleasure", "d": "10/2017"}, {"body": "docs site lives standalone repo believe issue belongs", "d": "10/2017"}, {"body": "yes please file website issues new repository", "d": "10/2017"}, {"body": "hey tkrotoff known limitation number inputs see react emit change event value input actually changed enter invalid number number input get value dom value change event wo nt dispatched since react detect change hope helps", "d": "10/2017"}, {"body": "gaearon sure would happy take", "d": "10/2017"}, {"body": "actually gaearon want full check warnings better raising individual issues", "d": "10/2017"}, {"body": "yea would amazing nt think necessarily always deduped might easier discusss specific cases convert rest", "d": "10/2017"}, {"body": "pointers go identifying specific cases nt need deduped gaearon", "d": "10/2017"}, {"body": "nt clear guideline think useful one warning happen render likely happen spam console deduped whereas warning happen user calls specific api api typically called outside render phase might make sense dedupe", "d": "10/2017"}, {"body": "found versions update mounted mounting component warning first reactfiberschedulerjs imported reactfiberreconcilerjs warning update mounted mounting component usually means called gt setstate replacestate forceupdate unmounted component noop please check code app component second one reactnoopupdatequeuejs imported reactbaseclassesjs warning setstate update mounted mounting component usually means gt called setstate unmounted component noop please check code app component gaearon doubts repetition intentional serve different purposes dedupe warning reactfiberschedulerjs alone thanks advance", "d": "10/2017"}, {"body": "one likely almost never happen happens somebody creates instance react component manually eg tries call let dedupe think means unlikely case fire two warnings rather one okay", "d": "10/2017"}, {"body": "totally warnings react codebase checked came list warnings deduped fixed ones felt duplicated rerender per suggestion given pr still list warnings unsure need deduplication share list wish take look apologies delay giving pr gaearon", "d": "10/2017"}, {"body": "hey anushreesubramani thanks report ran snippet provided seems like stopping maximum update depth error verify jsfiddle working expected differ code running get infinite loop", "d": "10/2017"}, {"body": "jsfiddle might work differently worth checking locally", "d": "10/2017"}, {"body": "gaearon tested locally html file saw results chrome production development builds html class app extends reactcomponent constructor super thisstate value null lt p gt render thissetstate value test return reactcreateelement div null reactdomrender reactcreateelement app null documentgetelementbyid container", "d": "10/2017"}, {"body": "could also specific cra environment", "d": "10/2017"}, {"body": "aweary gaearon fiddle works fine well also tested html fine well happening cra generated app guess dan guess right could specific cra open issue cra instead", "d": "10/2017"}, {"body": "yes please although let keep one open posterity", "d": "10/2017"}, {"body": "opened issue cra", "d": "10/2017"}, {"body": "nhunzaker really resolve thought problem cdn paths using", "d": "10/2017"}, {"body": "sorry got wrong issue", "d": "10/2017"}, {"body": "fixed still broken alphas pretty borked anyway might need blacklist somehow", "d": "10/2017"}, {"body": "problem added little work around seemed good blacklist", "d": "10/2017"}, {"body": "sophiebits mentioned maybe probably ok support get confirmation would nonissue", "d": "10/2017"}, {"body": "yo would awesome support", "d": "10/2017"}, {"body": "fwiw works nt range inputs range input test case nt test arrow keys want add disclaimer case someone comes page public site gets confused blames react", "d": "10/2017"}, {"body": "nhunzaker unsupported browsers maybe add browser detection logic render message like browser officially supported react discover issue occurs browser likely expected behavior reuse detection logic browserspecific quirks like", "d": "10/2017"}, {"body": "could use something like bowser browser detection", "d": "10/2017"}, {"body": "might worth pulling like modernizer attaching prop something fn running test going crazy obvious cases like whatever clear cases", "d": "10/2017"}, {"body": "wow odd", "d": "10/2017"}, {"body": "new react done poc looking contribute something community fine try hand mean something open community", "d": "10/2017"}, {"body": "thank filing issue however documentation source code reactjsorg lives different repository please open new issue repository sorry inconvenience", "d": "10/2017"}, {"body": "ps gursimarsinghchawla would love contribute check issues tagged good first issue new repo", "d": "10/2017"}, {"body": "filed", "d": "10/2017"}, {"body": "thank filing issue however documentation source code reactjsorg lives different repository please open new issue repository sorry inconvenience", "d": "10/2017"}, {"body": "expected please see worked sense react removed whole markup rendered client produces jarring experience always warned please fix differences server client render need render different things server client mounting illustrated approach", "d": "10/2017"}, {"body": "gaearon thanks confirming feature react would mind tell detail updated react question example js import react react const isbrowser typeof document object export default function app return style state got updated dom however content inside div browser server got updated mean children prop updated rely rerender need something updated according browser environment", "d": "10/2017"}, {"body": "mean children prop updated current strategy react patches text content mess reconciliation often happens due eg timestamps harder anything meaningful difference eg attributes without making performance worse everyone rely rerender need something updated according browser environment preferably yes schedule extra render really need different although sebmarkbage adding way intentionally opt inconsistencies text far context read decision likely document broadly eventually action item", "d": "10/2017"}, {"body": "gaearon thanks lot dan answer useful could", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives repository nt mind please open new issue repository discuss sorry inconvenience", "d": "10/2017"}, {"body": "send pr", "d": "10/2017"}, {"body": "pr would great since reimplementation entirely plausible things changed rare bumped neither sound like would lines fixes though see point fixing back new behavior line originally intended usage", "d": "10/2017"}, {"body": "fyi documentation source code reactjsorg lives different repository would willing open new issue repository iinsta sorry inconvenience still welcome pr", "d": "10/2017"}, {"body": "cztomsik react dom immutable manipulation happen generating new structure", "d": "10/2017"}, {"body": "please look currently implemented internally uses undocumented react classes hook inside transaction see changed apply updates actual threejs mutable api possible react", "d": "10/2017"}, {"body": "solution progress give firstclass access creating renderer", "d": "10/2017"}, {"body": "yes solvable new reconciler api unfortunately none existing code work good news real api rather bunch hacks make consumable soon track exposing", "d": "10/2017"}, {"body": "sure understand trying seems like calling inside bad idea obvious error makes pretty clear even smaller reproduction", "d": "10/2017"}, {"body": "yes problem example called rendering start rendering call starts rendering call etc results infinite loop component takes care keeping state calling prop render data need component try thing render gives js import react react import render reactdom import fetch fetch class app extends reactcomponent renderchildren data gt jsonstringify data render return render documentgetelementbyid root working sandbox", "d": "10/2017"}, {"body": "thanks tombonnike gaearon quick answers actually little bit different trying achieve saw idea fetch data save use data component would need answers make sense put indeed", "d": "10/2017"}, {"body": "idea fetch data save use data component would need solution case would modify render callback pass data components need know bit counterintuitive since went pattern need bring data component tell render", "d": "10/2017"}, {"body": "thanks advice exactly exploring different patterns see another approach could interesting anyhow thanks time", "d": "10/2017"}, {"body": "one way think every piece data one component holds state need pick either fetch use gives via render prop app case need different fetch api would call data loads instead trying keep state", "d": "10/2017"}, {"body": "leaning toward second option see achieve first place wanted lift state using share data probably mistake would lead strange pattern sibling fetching data lifting inside parent state siblings could exploit data second thought nt seem natural another note also access inside react native component tied dom thinking component maybe exactly want", "d": "10/2017"}, {"body": "probably mistake would lead strange pattern sibling fetch fetching data lifting inside parent state siblings could exploit data second thought nt seem natural think actually ok think fetch like input mistake trying set state render phase instead could call data ajax callback fetch render app would change handler sets state like", "d": "10/2017"}, {"body": "also access handlechangeonchange inside react native component tied dom sure mean suggest fetch accept onchange custom prop call data fetched", "d": "10/2017"}, {"body": "example second approach referring close originally without state duplication updatestateduringrender issue hope helps", "d": "10/2017"}, {"body": "okay got thought referring method used nt get custom prop exactly trying achieve naively inside render phase plus like approach similar able incrementally adopt without breaking anything definitely solved problem thank", "d": "10/2017"}, {"body": "happy help", "d": "10/2017"}, {"body": "basically grab executedispatchesinorder order wrap certain piece code fire afterward describe detail", "d": "10/2017"}, {"body": "sure use immutablejs cursor library handle everything single state atom gets passed root element event handlers may something like bit pseudocodeish custom shouldcomponentupdate whatnot cursor actually represents something like wrap something like javascript const executedispatchesinorder require reactdomlibeventpluginutils executedispatchesinorder require reactdomlibeventpluginutils executedispatchesinorder function previousroot deref rootcursor executedispatchesinorderapply arguments things behave expected asynchronous changes keypaths leading root cursor trigger rerenders appropriately immutablejs comparison invalidate expected components aka everything along parentpath leaf change edit clarified things example since kind relied knowledge internal workings", "d": "10/2017"}, {"body": "would expect wrapping browser event handlers still let", "d": "10/2017"}, {"body": "tried indeed work trying recall whether specific event diverged required technique back wrote years ago react top head happen know either different earlier version react whether certain events nt matched native call addeventlistener perhaps event react generates synthetically something words switch wrapping addeventlistener events wo nt see go happy consider closed", "d": "10/2017"}, {"body": "tolmasky events built synthetically based events specifically almost often synthetic composed events like etc calculated using events pretty complicated lots going events depend key mouse events along events correspond browser events listen could also potentially listen dependent event synthetic events example listen events", "d": "10/2017"}, {"body": "synthetic events still always happen inside browser events call stack right even names nt match", "d": "10/2017"}, {"body": "gaearon yes synthetic events extracted dispatched inside event listener registered whatever dependent event triggered", "d": "10/2017"}, {"body": "idea possibly move event synthetic path use browser events directly point point required wrap events wonder better way solve though strategy calling outside batch example bypasses optimizations mind asynchronous rendering idea use event wrappers hint priority level default update associated flush synchronously shortest path textbox issued event case controlled components wonder solve use case integrated way still lets react normal work ultimate goal design avoid coupling logic function react", "d": "10/2017"}, {"body": "see", "d": "10/2017"}, {"body": "code use check props state equal tuned works basic types js", "d": "10/2017"}, {"body": "issue relocated", "d": "10/2017"}, {"body": "current version componentwillunmount called mounting next component exactly right called next component created mounted ca nt revert old way incompatible want take react future want enable asynchronous rendering future versions impossible nt create new instance early made change exactly clear trying perhaps moving logic help give assistance need know use case detail create small fiddle demonstrates trying", "d": "10/2017"}, {"body": "tried create search user query appear url user tries search user searches xyz call new route previous url check code due async behaviour calling rendering component cases", "d": "10/2017"}, {"body": "ajanuragjain hope nt mind chiming another case change ordering caused existing code function expected anymore application maintain array acts like stack application state expect parent components push data onto children using example displaying following components resulting application state would resemble note using instead would lead reverse ordering child components would call first change route would cause new displayed components become case react popping item stack using would remove one item list causing temporarily push names onto stack resulting correct react called first resulting temporary two pop operations called resulting undesired basically looking tools allow make consecutive application state modifications parent child order setup b child parent order teardown c order torn components first newly setup components later alternative solutions possible issue would great know case somehow fits react general vision", "d": "10/2017"}, {"body": "sounds like expected behavior react nt guarantee result correct mismatch inserts extra nodes nt patch attributes would pretty expensive negate performance benefits expected fix mismatches development app fast production plan document prominently future read", "d": "10/2017"}, {"body": "nt know issue exists prior react", "d": "10/2017"}, {"body": "browsers normalize newlines based best rendering ssr react normalize newlines rendering dom perhaps measurable impact performance although kind doubt would preferable perform less strict runtime check text comparison fails alternatively react could also emit warning encounters rendering text seems strict cc gaearon", "d": "10/2017"}, {"body": "also fairly certain similar issues special unicode codepoints dom may discard browsers could encode differently edit one dom discard browsers", "d": "10/2017"}, {"body": "tried text search reactfiberchild ca nt seem find would love make first contribution making warnings clear anyone point right direction full text article save others time finding ran error took us days track library may find console kept telling us reactfiberchild could render element ref undefined tore hair puzzling could happen eventually dug react code saw error generated react like undefined ref attributes null fine took us discover elements created core external library set ref undefined forked fixed everything rendered beautifully", "d": "10/2017"}, {"body": "post repro js fiddle read code mess thanks", "d": "10/2017"}, {"body": "jquense looks like someone added fiddle three year old version", "d": "10/2017"}, {"body": "thanks cc aweary perhaps reset pr could also cover saying pain tho instinct would recommend controlling select case", "d": "10/2017"}, {"body": "jquense looks like issue whitespace option value property option element strips whitespace fail match due leading trailing whitespace example without whitespace see matches native dom behavior solution would separate could trim comparison try use something like nt trim whitespace sure yet best solution would", "d": "10/2017"}, {"body": "aweary replication given space option value remains broken sure able repair guy silly overcomplicated code way one gave subject form fix", "d": "10/2017"}, {"body": "hope consider testing bug reporter actual test case", "d": "10/2017"}, {"body": "please post test case jsfiddle one nt cover bug thanks", "d": "10/2017"}, {"body": "already said bug four years old already written three productions cut paste want", "d": "10/2017"}, {"body": "maybe someone else see act", "d": "10/2017"}, {"body": "hey stonecypher sorry bad experience trouble shooting methods work ton issues react repo times need little help finding stuff get jsfiddle reproduces issue think could diagnose issue create test case manual dom test fixture ca nt reproduce best resolve issue inputs selects hot topic team right want make work seamlessly possible need little help", "d": "10/2017"}, {"body": "nhunzaker third time declining copy working reproduction already given jsfiddle last time someone asked closed ticket", "d": "10/2017"}, {"body": "already given jsfiddle stonecypher sorry jsfiddle provided already identified issue another jsfiddle previous issue would really help us could link us hundreds hundreds closed issues sometimes hard go back find one specific one", "d": "10/2017"}, {"body": "opened eight tickets far four years team closed active ticket without even investigating five days ago gotten lot little help nhunzaker open link open console observe clear instructions show problem real move forwards see fit interested copy pasting reproduction case ticket jsfiddle please take quality seriously please stop asking copy repro cases aweary repro case ignoring shows thing found correct please nt involve ticket anymore thanks", "d": "10/2017"}, {"body": "aweary really ca nt find ctrlf testcase issue read issue", "d": "10/2017"}, {"body": "stonecypher opened three issues us including one issue closed nt provide reproducible test case thankfully nhunzaker spent time putting together jsfiddle linked issue issue read issue reason asking jsfiddle ca nt easily read source code test case ca nt make modifications debug providing hosted example without source helpful us please understand every single person trying help volunteer free time making easier us help goes long way acting rude makes difficult us work together resolve issue please take consideration", "d": "10/2017"}, {"body": "aweary please disinvolve ticket would less work make fiddle keep arguing convincing longer contribute react opened lot three issues nt know interested getting volunteers speech nt get credit collaborator already work want lazy open comment ticket closing leaving closed guys nt able find four years despite one basic test cases happy leave react broken another four years collaborators nt interested enough quality cut paste single stretch text single time", "d": "10/2017"}, {"body": "jsfiddle semirelated codepen native behavior sure directly assigning accurate result select showing blank least chrome far know internal methods involve finding matching option selecting assign value directly work every browser", "d": "10/2017"}, {"body": "nhunzaker correct browsers honor correct thing explicitly disallowed react", "d": "10/2017"}, {"body": "nhunzaker far sort open discussion react idea fairly different htmls guys nt allow makes multiselection impossible causes weird edge problems nt important require instead someone set assume strategy get around dealing controlled uncontrolled components would turn mess involve container way good argument imagination react look defaultvalue count appropriate number nodes set attribute relevant nt know enough internals clear matching would involved distance count", "d": "10/2017"}, {"body": "stonecypher know frustrating understand old issue open long time sorry want work resolve kind behavior acceptable continues take action please keep civil focused technical discussion thanks", "d": "10/2017"}, {"body": "guys nt allow selected makes multiselection impossible causes weird edge problems nt important understanding would willing enumerate weird edge cases far understood multiple selection possible providing array demonstrated jsfiddle good argument imagination react look defaultvalue count appropriate number nodes could explain approach detail function runs select options inside react short enumerates select options adds selected options matching values bails early singular selects however processes options set select maybe get away assigning singleselect case wonder browser support think worth exploring", "d": "10/2017"}, {"body": "nhunzaker seems like reported issue ca nt use index option element select element would nt expect work first place behavior described spec sounds like stonecypher looking set nt support using indices", "d": "10/2017"}, {"body": "nhunzaker oh jesus supposed use value documentaton says use defaultvalue nt mention supposed use value assumed would index html okay maybe edge cases nt exist memory tested one values index coincidence may tried arrays gave unexpected result half dataset coincidentally correct half also four years ago job company nt exist anymore nt actually ability dig old code nt remember clearly make effort reproduce locally amount time things may fixed misunderstanding api may nothing repro would embarrassing left bug open four years misunderstanding api relevant docs relevant stretch documentation page addresses multiple input types nonexhaustively examples actual example use thus indicator", "d": "10/2017"}, {"body": "aweary thank neglected identify think page agree use indices select options using prop always direct comparison question whether want support way select options stonecypher use case requires select option index could maintain index state pass value extracting element array index something like", "d": "10/2017"}, {"body": "allergic state also would appropriate serverside rendering nt really care whatever think misunderstood supposed would appreciate told way could rendered static html without props state something like would also appreciate told contribute documentation worried misunderstanding part api expected work", "d": "10/2017"}, {"body": "clearer someone would modify oneliner disabled option could initially selected one shut go away bug", "d": "10/2017"}, {"body": "far use cases satisfy design requirements ui work nt cared years came back original ticket got closed request reopen still broken time thought still broken", "d": "10/2017"}, {"body": "nhunzaker also matter able html feel supporting would pleasant choice", "d": "10/2017"}, {"body": "pushing long overdue fix issue", "d": "10/2017"}, {"body": "gon na close since bug talk supporting selectedindex specific feature request issue moment nt see super compelling reason add easy enough work around defaultvalue clear additional controllable prop would interact existing ones terms parity html think fair point however inputs react already pretty specialized divergent normal behavior may worth added complecity", "d": "10/2017"}, {"body": "jquense renew request told contribute docs give opinion strong signal wrongly", "d": "10/2017"}, {"body": "cc acdlite sebmarkbage bvaughn", "d": "10/2017"}, {"body": "error great application great library test one way prevent unwanted messages appearing tests onerous could also globally jest setup file nt think saw warnings probably mocked something jest point regarding gaearon comment original issue believe nt see mix spying consoleerror mocking reactfibererrorlogger unfortunately mocking nt really recommended outside context react project come cleaner story order simplify external testing", "d": "10/2017"}, {"body": "pr fixed", "d": "10/2017"}, {"body": "cc jquense", "d": "10/2017"}, {"body": "duplicate manually calling controlled input longer work due heuristic use dedupe change events", "d": "10/2017"}, {"body": "workaround helpful", "d": "10/2017"}, {"body": "dcalhoun example showing workaround gaearon linked works example hope helps", "d": "10/2017"}, {"body": "thank much help example allow accomplish need sorry duplicate", "d": "10/2017"}, {"body": "use formidablelabsreactlive left hand side new editor need either reimplement component ideal add functionality upstream sure interested latter given already component cc philpl thoughts", "d": "10/2017"}, {"body": "bvaughn super biggest conflict see adding custom transpilers implementation feature might vary slightly depending transpiler used unfortunately also site currently using fully custom transpiler top babelstandalone reconcile problems sure hard add", "d": "10/2017"}, {"body": "maybe custom format could define would enable user inject error messages row optional column number would sufficiently compileragnostic", "d": "10/2017"}, {"body": "bvaughn great could added editor without much effort sure soon time mind copying issue suggested api issue reactlive please", "d": "10/2017"}, {"body": "got", "d": "10/2017"}, {"body": "moved", "d": "10/2017"}, {"body": "moved", "d": "10/2017"}, {"body": "years message documentation use instead enable advanced optimization closure compiler react finally support advanced optimization great news", "d": "10/2017"}, {"body": "continue case code reference surely build react closure compiler danger mode", "d": "10/2017"}, {"body": "ljharb yes already clear real problem often case code nt constitute majority bundle", "d": "10/2017"}, {"body": "nt message documentation days use string instead use callback save variable", "d": "10/2017"}, {"body": "string refs legacy yes nt recommendation advise string refs issues considered legacy likely removed one future releases currently using thisrefstextinput access refs recommend callback pattern instead source", "d": "10/2017"}, {"body": "yes reactproptypes deprecated version removed proptypes moved packages check blog post info migrating", "d": "10/2017"}, {"body": "jquense wrote use proptypes separately lib means know proptypes package use open issue back", "d": "10/2017"}, {"body": "sorry quick close line clearly showing old usage may code problem someone depending reactproptypes app reason breaking", "d": "10/2017"}, {"body": "jquense work project fixed bug related reactrouter used old proptypes", "d": "10/2017"}, {"body": "hey try fix one", "d": "10/2017"}, {"body": "sure sounds good holler need help", "d": "10/2017"}, {"body": "added commit fixing bug hope okay", "d": "10/2017"}, {"body": "unfortunately help share url happens project example", "d": "10/2017"}, {"body": "hey dan working fine closed silly mistake still sourcemap issue however nt generate build css think might webpack issue link see working thanks always help knowledge sharing everywhere", "d": "10/2017"}, {"body": "still sourcemap issue however nt generate build css odd could file issue cra repo example would helpful glad production detection seems working cheers", "d": "10/2017"}, {"body": "fyi using cra however ongoing thing heavily discussed webpack threads conflcts plugin arise well know reason however done extensive testing anything like webpack config webpackprodconfigjs packagejson variation scripts packagejson sourcemaps emitted production using webpack uglifyjs plugin even regular uglifyjs plugin nt think use flags cra right maybe nt issue smart one day figure circumvent problem said still post issue cra please advise thanks", "d": "10/2017"}, {"body": "oh nt use cra nt apply nt think use flags cra right nt use instead separate production config explicitly use two webpack plugins specify produce separate sourcemap files hope helps", "d": "10/2017"}, {"body": "thanks dan great start look", "d": "10/2017"}, {"body": "totally different ballgame nifty", "d": "10/2017"}, {"body": "error boundaries catch errors child components wo nt catch error component wrap something error boundary since case fails manages render error boundary learn exists", "d": "10/2017"}, {"body": "something like would work js function mycomponent return brokenvar function app return usage", "d": "10/2017"}, {"body": "however stacktrace componenttrace even remotely clear tests causing warning previous versions would show exact stacktrace file names line numbers generated error sure confusing js traces component traces show screenshot consider good behavior like understand mean better believe particular warning existed see could better stack trace perhaps referring different warnings better stack traces show screenshot ones useful component stack traces note js traces component traces show line numbers use plugin development enable see root element defined line number probably find test impression issue referring js traces well nothing make disappear saw browser see well click expand arrow see additionally several tests need throw errors alert library users something wrong test logs full bright red running browser really considered use case always run tests jsdom comment", "d": "10/2017"}, {"body": "sum need screenshots draw conclusions", "d": "10/2017"}, {"body": "yes obviously new warnings request somewhat unfulfillable previously errors unit tests pretty easy know exactly really considered use case always run tests jsdom tests also running jsdom thanks plugin trying", "d": "10/2017"}, {"body": "seconds think plugin needed confirm close issue", "d": "10/2017"}, {"body": "previously errors unit tests pretty easy know exactly error warning never printed js stacks warnings although technically could possible overrode printed", "d": "10/2017"}, {"body": "tests also running jsdom case seeing additional error boundary log nt look expected figure minimal reproducing project", "d": "10/2017"}, {"body": "think problem one tests carelessly leaking props way suspicion correct nearly impossible isolate without plugin trivial find remedy plugin guess recommend advertising bit incorporating functionality library thanks dan", "d": "10/2017"}, {"body": "still could share minimal project spits unhandled error noise please incorporating functionality library possible would done", "d": "10/2017"}, {"body": "still could share minimal project spits unhandled error noise please issue", "d": "10/2017"}, {"body": "yeah", "d": "10/2017"}, {"body": "basically close favor", "d": "10/2017"}, {"body": "also wrote explanation", "d": "10/2017"}, {"body": "oops sorry went issues page missed", "d": "10/2017"}, {"body": "worries many", "d": "10/2017"}, {"body": "one", "d": "10/2017"}, {"body": "interested taking would one first open source contributions really excited", "d": "10/2017"}, {"body": "sounds great need search codebase find fire two warnings add boolean variables fire set boolean next time check boolean firing skip boolean already set", "d": "10/2017"}, {"body": "questions feel free ping", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "sounds fun see relation reactjsreactcodemod one link would fork common codemods repl", "d": "10/2017"}, {"body": "imagined somehow run browser honest nt think", "d": "10/2017"}, {"body": "fair seems like could add npm module website deps embed way happy play around point enjoy repl stuff", "d": "10/2017"}, {"body": "another thing missing html jsx converter one apparently points back website nt provide anymore host link invalid prop classname warnings", "d": "10/2017"}, {"body": "nt actually one site let update doc talking point nt need continue support redirect reason reactmagic docs link react website redirect back reactmagic website edit open pr", "d": "10/2017"}, {"body": "let update doc talking point nt need continue support redirect sorry clarify meant would prefer official tool volunteerrun project breaks every time release would feel comfortable linking warnings mean hosting making visible somewhere website know link actually making solid official tool course would involve work currently time", "d": "10/2017"}, {"body": "well pr sent pull us loop would nt break future releases", "d": "10/2017"}, {"body": "moved", "d": "10/2017"}, {"body": "cc aweary jquense", "d": "10/2017"}, {"body": "deploying build fixutres prs would really helpful inadvertently already feature docs site possible would nice fixtures app jsfiddle like functionality way could quickly test dom changes locally without write new test case deploy nightly edge build react accompanying jsfiddle make easier determine fix works master without needing know setup react locally zpao used host site deployed builds master try find get home", "d": "10/2017"}, {"body": "still builds ci", "d": "10/2017"}, {"body": "think sophiebits also suggested contractors run qa tests different browsers sure hard would", "d": "10/2017"}, {"body": "think focused selenium tests via sauces labs like particularly fraught areas reasonable idea yes flakey least provide canaryinthecoalmine early warnings inform spend time manual qa unittest nature tests reduce flakeyness plus get insight break peoples selenium workflows circleci workflows feature also makes easier set flows nt required need manual approval", "d": "10/2017"}, {"body": "helps also experience saucelabsbrowserstack found sl less flakey across browsers done bunch testing protractor react better expected results glad help", "d": "10/2017"}, {"body": "also want call back definitive list browsers need test could make sure wasting time testing unsupported browsers", "d": "10/2017"}, {"body": "identified current documentation production actually already fixed code", "d": "10/2017"}, {"body": "important keep fiddles working stable official react documentation reference fiddles", "d": "10/2017"}, {"body": "many old issues refer broken fiddles harder check latest version mention code examples people built education documentation", "d": "10/2017"}, {"body": "relocated", "d": "10/2017"}, {"body": "know much csp says refused apply inline style inline styles allowed nothing react work around need ensure code dependencies contain", "d": "10/2017"}, {"body": "liking think streamline efforts sides", "d": "10/2017"}, {"body": "another benefit could since moving docs along license able display mit license navigation bar per discussion", "d": "10/2017"}, {"body": "whole lot benefits favorite one hopefully people stop trying read docs github also reduce issue noise hopefully community members commit access unreasonably excited bvaughn let know help love deletingmoving things better real work", "d": "10/2017"}, {"body": "let know help love deletingmoving things better real work thanks dan enjoy take care one", "d": "10/2017"}, {"body": "bvaughn would require help effort keen help", "d": "10/2017"}, {"body": "thanks offer think good bulk help would great project moved file bunch issues", "d": "10/2017"}, {"body": "one thing consider creating issue best keep scriptserrorcodescodesjson sync lesser extent also applies way read current react version packagejson file already little janky think okay us move siteconstants file accept fact need bump please let know seems onerous see couple options currently leaning toward first one option website build scripts could load latest error codes facebookreact repo build time think could done way gatbsy source plugin pros adds complexity facebookreact repo change userfacing behavior performance website cons additional point failure reactjsorg repo ci eg github api error codes json gets moved etc website must separately rebuilt whenever error codes updated option could justintime load latest error codes facebookreact repo user opens error page pros website automatically stays insync latest error codes updated nt add complexity build step cons added latency user looking error messages additional point failure reactjsorg website eg github api error codes json gets moved etc option could fork error codes json store copy new repo pros flexibility error codes live website cons easy forget forked file release", "d": "10/2017"}, {"body": "wrote gatsby source plugin loads data react repo using github user content api js const request require requestpromise const errorcodesurl exportssourcenodes async boundactioncreators gt const createnode boundactioncreators const jsonstring await request errorcodesurl createnode id errorcodes children parent errors internal type errorcodesjson contentdigest jsonstring think reasonable let talk anyone concerns though", "d": "10/2017"}, {"body": "sounds good mean ca nt run website offline", "d": "10/2017"}, {"body": "sounds good mean ca nt run website offline run website offline need first reenable service workers figure causing intermittent problems change wo nt preclude plugin wrote embeds data build dev startup time end result", "d": "10/2017"}, {"body": "believe possible preserve history new repo following sh git filterbranch supports single folder start creating one pruned repo per folder want preserve copy history docs folder step take long time lot history copy git clone git githubcom facebookreactgit reactdocs cd reactdocs git filterbranch pruneempty subdirectoryfilter docs master cd copy history www folder git clone git githubcom facebookreactgit reactwww cd reactwww git filterbranch pruneempty subdirectoryfilter www master cd create new repo unify filtered repos mkdir reactjsorg cd reactjsorg git init least one commit needed steps work git commit allowempty initial empty commit merge docs changes git remote add reactdocs reactdocs git fetch reactdocs git merge nocommit reactdocsmaster allowunrelatedhistories git readtree prefixdocs u reactdocsmaster git commit import docs merge www changes git remote add reactwww reactwww git fetch reactwww git merge nocommit reactwwwmaster allowunrelatedhistories git readtree prefixwww u reactwwwmaster git commit import www move things around outlined issue description commit commit edit seems suggest nt work correctly may related flag sure edit able get working copying history folder think okay since folder much newer history less useful", "d": "10/2017"}, {"body": "website build scripts could load latest error codes facebookreact repo build time something similar babel site loads package readmes main babel repo part build script believe possible preserve history new repo following glad could work splitting one yarn repositories two separate ones took forever work actually", "d": "10/2017"}, {"body": "gatsby plugin system made ridiculously easy pull data graphql via plugin read data template graphql", "d": "10/2017"}, {"body": "hard say anything without seeing specific cases measured", "d": "10/2017"}, {"body": "workinprogress repo see live demo pick strategy click add bunnies hoping add test cases livetinkering thing proper benchmark think playing around get feel sorry organized right anything make easier discuss please let know interesting bits mostly though moved custompixi renderer repo linked specifically empty renderer nt really push anything placeholder objects feels similar performance either pixidom renderer pixicustom renderer depending whether rendering null edges toggle empty view though right easy way via live demo feel live demo screendrawing extra computation pixi nt really changing much get certain number bunnies seems difference whether rendering null edges seems biggest performance factor far rather using one renderer vs another using keys also makes difference hope helps", "d": "10/2017"}, {"body": "updated demo two separate cases use source difference edges per bunny one version renders proper element renders also updated description demo explain results test cases think much clearer also little confused rendering null fits tree see nt call via renderer added props parent component understand bit better goal would think special elements definitively containers therefore somehow see performance gains though rendered null makes sense sukkot israel soon probably afk usual happy followup later thanks taking look", "d": "10/2017"}, {"body": "bit busy things try look time next week forget please ping", "d": "10/2017"}, {"body": "also forgot since focused actually using renderer still interested ping", "d": "10/2017"}, {"body": "design taken account jsx generates however enumerate props merge default props means performance hit object form meant target optimising compiler compiler would need smart enough inline default props directly object literals bail impossible determine default props", "d": "10/2017"}, {"body": "bad using form means render dynamic content server received json anyways guess either implement already traverse tree work around thanks prompt response", "d": "10/2017"}, {"body": "well always pass props fill give complete element", "d": "10/2017"}, {"body": "explain order difference see obvious would expect currently work depth first appear earlier amongst siblings fire earlier seeing different results said probably nt rely order calls client break async mode future mounting paused aborted restarted etc", "d": "10/2017"}, {"body": "explain order difference see gaearon unfortunately nt access reproduction example issue description hopefully soon able dig issue one reproduction understand answer expect tree traversal algorithm hence call order hooks break async mode future good know also heard end situation called called challenging handle gon na need rethink cleanup logic assuming scheduling timeout waiting hook good workaround materialuireactjss side way remove css page component mounted cc kof thanks answer", "d": "10/2017"}, {"body": "cc acdlite might context implications right", "d": "10/2017"}, {"body": "provide full example please nt see thisportal defined code although error message still odd", "d": "10/2017"}, {"body": "sorry looks like stripped much use works fine import react component react import reactdom reactdom export default class somethingcool extends component constructor super thisportal documentcreateelement div documentbodyappendchild thisportal render return reactdomcreateportal thisportal close since nt think related directly react also using storybook looks like could something going strangely get error thanks quick reply sorry false alarm", "d": "10/2017"}, {"body": "thanks report anyway need example work", "d": "10/2017"}, {"body": "think likely due swapping root nodes creating new root node comment node parentnode null specific error handling", "d": "10/2017"}, {"body": "would possible get updated next npm react regressions fixed", "d": "10/2017"}, {"body": "ptomasroos releaed nottoodistant future", "d": "10/2017"}, {"body": "maybe issue keep open released", "d": "10/2017"}, {"body": "thanks feedback iamdustan", "d": "10/2017"}, {"body": "release within week two work problems done need keep issue open lock comments help get release faster need test facebook first", "d": "10/2017"}, {"body": "understanding expected patch differences since production expensive negates performance benefits new approach see also", "d": "10/2017"}, {"body": "intentionally want render something different client one popular approach set boolean state flag like use rendering way initial render pass server additional pass change want see client", "d": "10/2017"}, {"body": "ok thanks think docs bit misleading least unclear render used hydrate container whose html contents rendered reactdomserver react attach event listeners preserving much existing dom possible best results try render content server client differences possible", "d": "10/2017"}, {"body": "agree would like send pr make clearer", "d": "10/2017"}, {"body": "fwiw believe current order events callback provided updatecontainer called via rendererflushsync correct bit confused error message since callback happens initial render initial mount happens renderer updates finish renderer batchedupdates renderer unbatchedupdates renderer flushsync component render component componentdidmount callback renderer deferredupdates state changes component componentdidupdate", "d": "10/2017"}, {"body": "sure going research suggests oddities tag practically get event work js see codepen adding inline plain markup work able get work scant fixes could find online one supppper ugly probably tenable insight nhunzaker resident svg guru", "d": "10/2017"}, {"body": "use case sounds reasonable mentioned would take pr makes proper production builds", "d": "10/2017"}, {"body": "also let keep conversation thanks", "d": "10/2017"}, {"body": "ah sorry issue nt come searches feel free close one favor", "d": "10/2017"}, {"body": "guess important anymore react since ship flat bundles nt long module ids want send pr remove", "d": "10/2017"}, {"body": "ah mean react still affected savings nt great react distributed makes sense submit pr remove recommendation goal get core issue fixed maybe nice thing use", "d": "10/2017"}, {"body": "ah mean react still affected savings nt great react distributed yep", "d": "10/2017"}, {"body": "important fix linked quite times specific sections maybe even website", "d": "10/2017"}, {"body": "hmm interesting works correctly locally devmode correct tab opened body scrolls specified anchor tag production website correct tab usually active body nt scroll correctly", "d": "10/2017"}, {"body": "think might remove tabs mechanism entirely htmlcss embedded markdown file approach nasty oneoff anyway think post pr either breaks file files adds nested sidenav entry depends whether need support previous links like docsinstallationhtml usingacdn make work b makes single page links top instead tabs", "d": "10/2017"}, {"body": "thank much reporting pushed fix deploy minutes", "d": "10/2017"}, {"body": "sorry confusing redirects rewrote docs last year best effort redirects worth updating warnings better locations recall right reason warning wanted change behavior using ensures code wo nt break change nt changed yet", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "seems like would work fine would look verbose explicit course caller passes see warning presumably already declare proptype function type flowtypescript would warn anyway", "d": "10/2017"}, {"body": "presumably already declare onclick func proptype nt always use prop types allow avoid warning gets around parent passing falsy values", "d": "10/2017"}, {"body": "right understand annoying change surely something like every level necessary probably often much verbose", "d": "10/2017"}, {"body": "certainly right less verbose explicitly trying remove responsibility checking falsy values consumer issue related event handlers native dom elements custom components choose enforce nt enforce scope issue example declare component explicitly accepts handler write prop type validation anyway example following style guide lot people goal issue reduce amount forced typechecking imposed react consumers everyone likes code typed order pragmatic think type systems js optin react", "d": "10/2017"}, {"body": "lot support certainly change back sure use case conditional event handlers common enough ternary worse boolean shortcut experience components ecosystem use either proptypes flowts already push responsibility consumer anyway would want special case booleans behavior passed empty string numbers strings event handlers treated differently attributes warn unexpected booleans attributes way understand user meant pass boolean something take boolean might even realize attribute take boolean case takes etc would easy remember attributes events different tolerance type requirements", "d": "10/2017"}, {"body": "event handlers treated differently attributes warn unexpected booleans attributes way understand user meant pass boolean something take boolean might even realize attribute take boolean case autocomplete takes name etc would easy remember attributes events different tolerance type requirements actually going go detail nt want bother case proposal shut immediately thank openminded passed error honestly doubt would ever happen idea use boolean shortcut approach either avoid adding handler add result truthy expression handler course truthy value must function think falsy values treated like warn either use error obviously intended disable regard current behavior perfect yes guess means event handlers treated differently agree let wait see others think heck maybe one thinks annoying ps unrelated particular issue related typing react render method sometimes avoid rendering empty block following shorthand often used would get expected output falsy comments block rendered numerical text node rendered numbers valid elements means problem pointing illustrate gotchas related typing react prop types catch nt perfectly valid sure headscratcher first see everyone knows falsebranch value result logical binary expression evaluates false", "d": "10/2017"}, {"body": "let wait hear people", "d": "10/2017"}, {"body": "like feature hard add anything jeffijoe said taste whether like pragmatic hacks", "d": "10/2017"}, {"body": "branch maintaining code actively anymore want change", "d": "10/2017"}, {"body": "rogierschouten react modules searching packages folder root project open pr repo changes correct folder like would main code see amp nt available anymore branch", "d": "10/2017"}, {"body": "thanks gaeron michaeldeboey wanted add peer dependencies react packagejson build system nt like fact modules require react without referring packagejson however nt maintained upgrade seems modules master packages directory already peer dependency set", "d": "10/2017"}, {"body": "build system nt like fact modules require react without referring packagejson unfortunate problem peer dependencies nt add value make testing prereleases awkward noisy warnings seems modules master packages directory already peer dependency set sure referring nt maintain modules anymore nt exist master", "d": "10/2017"}, {"body": "wo nt making customizable happy take prs silence warning specific tags known standards track soon implemented browsers already exception would like send pr", "d": "10/2017"}, {"body": "okay thanks see wise silence dialog nt know implemented ticket tracking issue mozilla already months old nt seem lot movement", "d": "10/2017"}, {"body": "mdn spec seems like fair game let add", "d": "10/2017"}, {"body": "start dig see could thank cheers", "d": "10/2017"}, {"body": "elements use lot custom elements generate webgl scenes", "d": "10/2017"}, {"body": "please file new issue example could add special cases", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "wonder happens", "d": "10/2017"}, {"body": "thanks report zonzujiro aware issue react compares values numbers determine needs update input value equal assumes nt need update value see information thanks", "d": "10/2017"}, {"body": "aweary thank response far understand input logical react compares values inputs numbers input suppose react nt compare values numbers inputs tested codepen code project works fine behavior depend execution environment could issue something else", "d": "10/2017"}, {"body": "test utils documentation sorry colors", "d": "10/2017"}, {"body": "oh whoops apologies", "d": "10/2017"}, {"body": "also noticed fiddles linking broken assume wereare linking place something keep mind examples seem broken", "d": "10/2017"}, {"body": "take minutes deploy site hopefully fixed", "d": "10/2017"}, {"body": "unfortunately recharts examples broken nt specify react version accidentally updated react different file names could potentially fix side providing fallback one commonly used builds nt even exist anymore fixed side anyway", "d": "10/2017"}, {"body": "hi determined issue days ago might related second note describes fix problem method getroothostcontext rootcontainerinstance reactfiberreconciler apply fix source recompile get another warning says warning validatedomnesting appear child lt document issue needs investigation application work shadowdom thanks markus", "d": "10/2017"}, {"body": "fix", "d": "10/2017"}, {"body": "note places source compare compare want audit check cases", "d": "10/2017"}, {"body": "fix looks good gaearon thx super fast response note places source compare documentnode compare documentfragmentnode want audit check cases think check within getroothostcontext enough webcomponents", "d": "10/2017"}, {"body": "maybe also adding addition test tag render const templateinstance templatecontentclonenode true reactdomrender reactcreateelement helloworld templateinstance", "d": "10/2017"}, {"body": "would like contribute fixture added send pr fork branch know web components", "d": "10/2017"}, {"body": "hi mentioned warning validatedomnesting occur development bundle forget activate nodeenv production tags cover test might discussion dedicated thread tag also tag introduced shadow dom", "d": "10/2017"}, {"body": "fixed warning", "d": "10/2017"}, {"body": "would like contribute fixture added send pr fork branch know web components huh afk next time sure thanks gaearon much appreciated", "d": "10/2017"}, {"body": "imo hoisting clumsy workaround missing feature react let keep discussion", "d": "10/2017"}, {"body": "kyleamathews", "d": "10/2017"}, {"body": "dunno gatsby pretty normal reactjs ssr app loads server rendered html hydrates nt seen heard anyone encountering error gatsby googling error found stackoverflow discussion maybe relevant since reactjsorg load external scripts though feels bit red herringish jfarlow plugin break react ssred apps", "d": "10/2017"}, {"body": "also getting empty page regular chrome canary flashes rendered page goes blank hitting view source shows appears full working page compared working page firefox react dev tools show components amp children failed google chrome version official build google chrome version official build canary clearing browser cache nt anything works incognito page also worked switched guest logged chrome profile also get following errors logged console referenceerror docsearch defined tcomponentdidmount component commitlifecycles n u c h objectupdatecontainer objectunbatchedupdates n u c h updatecontainer anonymous unbatchedupdates pt render anonymous settimeout async anonymous anonymous anonymous anonymous anonymous anonymous homejs r anonymous windowwebpackjsonp bootstrap anonymous component component referenceerror babel defined component tupdatestate component new component constructclassinstance beginwork u c h tupdatestate component component constructclassinstance beginwork u c h updatecontainer anonymous unbatchedupdates pt render anonymous settimeout async anonymous anonymous anonymous anonymous anonymous anonymous homejs r anonymous windowwebpackjsonp bootstrap anonymous component uncaught referenceerror docsearch defined tcomponentdidmount component commitlifecycles n u c h objectupdatecontainer objectunbatchedupdates tcomponentdidmount component commitlifecycles n u c h updatecontainer anonymous unbatchedupdates pt render anonymous settimeout async anonymous anonymous anonymous anonymous anonymous anonymous homejs r anonymous windowwebpackjsonp bootstrap anonymous component new page super fast works", "d": "10/2017"}, {"body": "looks like fair adblocker version culprit whitelisting site solved problem", "d": "10/2017"}, {"body": "website opensource project", "d": "10/2017"}, {"body": "yes source folder repo soon extracted repo looks like fair adblocker version culprit whitelisting site solved problem perhaps need add error boundary", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg backstory made move see issue meanwhile move issue let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "maybe could warn warnings invalid nesting eg inside another", "d": "10/2017"}, {"body": "aweary", "d": "10/2017"}, {"body": "zehiro seeing click button reset form without changing value sets value select element first first change select value first click reset nothing happens reporting verify seeing behavior thanks", "d": "10/2017"}, {"body": "aweary exaclty thie behaviour would expect situations clicking reset button default option selected", "d": "10/2017"}, {"body": "thanks confirming zehiro according html spec select elements following reset event happens reset algorithm select elements go option elements element list options set selectedness true option element selected attribute false otherwise set dirtiness false option elements ask reset looks like depends attribute preset set property elements never set attribute hit case option reset algorithm select element display size option elements select element list options selectedness set true set selectedness first option element list options tree order disabled true think need utilize defaultselected attribute element keep sync spec nt really say attribute works reset algorithm quick testing shows help us resolve issue", "d": "10/2017"}, {"body": "thanks analysing deeply subject help chose appropriate solution though", "d": "10/2017"}, {"body": "worries mostly documenting future reference rest team thanks report", "d": "10/2017"}, {"body": "thanks adressing", "d": "10/2017"}, {"body": "sebmarkbage remember opinions past affect issue", "d": "10/2017"}, {"body": "try incognito window maybe caching issue", "d": "10/2017"}, {"body": "yup works incognito window normal window even clear cache hard reload", "d": "10/2017"}, {"body": "maybe chrome extension messing", "d": "10/2017"}, {"body": "yes looks like fair adblocker causing loads fine disable", "d": "10/2017"}, {"body": "add error boundaries nudging people whitelist site adblockers", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository made sure mention specific issue new repo via let continue discussion", "d": "10/2017"}, {"body": "exist form see fancy versions", "d": "10/2017"}, {"body": "hey compuives thank filing issue love idea documentation source code reactjsorg lives different repository would please open new issue repository discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository issue mention due mismatch node versions specified actually corrected yesterday", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "additional detail noticed attributes rendered using dom property name instead html attribute name react react incorrect client server side react reported think seems related particular bug", "d": "10/2017"}, {"body": "nt think technically incorrect html caseinsensitive although nt hurt lowercase", "d": "10/2017"}, {"body": "ah yes already forgotten used xhtml many years stuck reason would full backwards compatibility unless xhtml compatibility considered thing", "d": "10/2017"}, {"body": "note usual caveats downcasing svg apply svg casesensitive attributes instance needs use attribute name recent prs looks like similar issues gaearon mind posting posterity naively downcasing everything sound", "d": "10/2017"}, {"body": "regarding case sensitivity existing issue", "d": "10/2017"}, {"body": "ok seems happening assigning innerhtml attribute actually enough content parsed without knowing inside maybe always wrap extra tag normalizing", "d": "10/2017"}, {"body": "fix", "d": "10/2017"}, {"body": "thanks much gaearon", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thanks confirming issue struggling identify reason svg component stopped working update component made clickable lost focus blur functionality tabindex rendered camelcase style ignored browser tried adding property tabindex tag jsx swallow react rendered final component", "d": "10/2017"}, {"body": "created fix", "d": "10/2017"}, {"body": "closed", "d": "10/2017"}, {"body": "thank", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "intentionally drop assume totally unaware", "d": "10/2017"}, {"body": "fixed via", "d": "10/2017"}, {"body": "another benefit componentwillmount also use methods defined class set state since way sets state following example docs code class clock extends reactcomponent constructor props super props thisstate date new date componentdidmount thistimerid setinterval gt thistick componentwillunmount clearinterval thistimerid tick thissetstate date new date render return hello world thisstatedatetolocaletimestring reactdomrender documentgetelementbyid root could rewritten like following componentwillmount class clock extends reactcomponent componentwillmount thistick componentdidmount thistimerid setinterval gt thistick componentwillunmount clearinterval thistimerid tick thissetstate date new date render return hello world thisstatedatetolocaletimestring reactdomrender documentgetelementbyid root confused using constructor suggested way things seems like benefits say use constructor thanks", "d": "10/2017"}, {"body": "maybe article help", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "according react docs following lifecycle mount saying makes total sense could probably done way however little bit asynchronous state handling going render called state begins case always safest use constructor define initial state course use redux control default behavior using reducers default props", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue feel free open issue repository continue conversation sorry inconvenience", "d": "10/2017"}, {"body": "aweary thanks understand risk one takes using undocumented features suggestion trysound worked thanks", "d": "10/2017"}, {"body": "moved", "d": "10/2017"}, {"body": "moved", "d": "10/2017"}, {"body": "nothing new front follow case add something", "d": "10/2017"}, {"body": "bvaughn would like solve issue need guidance", "d": "10/2017"}, {"body": "looks like people already submitted prs related fumblehool think covered", "d": "10/2017"}, {"body": "bvaughn please update status issues also", "d": "10/2017"}, {"body": "nt know issue talking", "d": "10/2017"}, {"body": "meant issues prs submitted users difficult see issue already covered", "d": "10/2017"}, {"body": "best review prs triage issues also working things way people submitting prs copies see issue looks outdated please feel free leave comment", "d": "10/2017"}, {"body": "going close currently unreproducible suspect reason accidentally rendering outside another possibility bug track namespaces check reproducing example find one let us know reopen feel free file new issue thanks", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "couple points equivalent note passing component class function reference string strings pass dom elements like div b etc also required capitalize function names foo foo using jsx see read creating elements components", "d": "10/2017"}, {"body": "thanks alex guess continue discussion rather discord believe custom renderer pass string like long supported renderer function additionally unable get approach work way could get work specifically words bypassing custom renderers internal type lookup thing rather supplying function returns nondom type object work adding nondom type objects using createelement foo worked fine kneejerk perspective makes sense since react must somehow turn plain object proper element still clear exact pipeline happen outside renderer happen generically specifically given object satisfies methods renderer expects eg call appendchildremovechild etc needed possible bypass renderer internal thing simply supply function returns sort object", "d": "10/2017"}, {"body": "limitation correct custom renderers custom elements require going keystring lookup original question best practices exposing end user think comes two options documentation telling available strings roll components exporting components simple helpers use jsx straight import", "d": "10/2017"}, {"body": "leaving issue open might confusing since got stuff wrong going deeper seems like really varies usecase closing thanks help alexkrolick", "d": "10/2017"}, {"body": "believe custom renderer pass string like reactcreateelement long supported renderer createinstance function yes possible bypass renderer internal createinstance thing simply supply function returns sort object reactcreateelement element description react reconciles descriptions decides whether create append update remove instances think comes two options options reasonable would probably go documenting supported tags throwing unsupported ones", "d": "10/2017"}, {"body": "right think thought would surprising react add px depending whether string contents looks like number", "d": "10/2017"}, {"body": "note self reenable also reenable shallow rendering testutils", "d": "10/2017"}, {"body": "gaearon also one potential solution problem outlined right difficult test error boundaries dev build real browser since error ends thrown asynchronously production build let users use standard assertions since error utils use typical block best solution specific problem least solution", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "going assume issue closing one", "d": "10/2017"}, {"body": "triggering state change like suggested existing solution aware bumped issues react executes synchronously precisely accommodate use cases like", "d": "10/2017"}, {"body": "work around set dangerouslysetinnerhtml something else client like blank content space wo nt try manipulate tree dangerouslysetinnerhtml node client even wrong still trigger warning way suppress definitely hacky though", "d": "10/2017"}, {"body": "sebmarkbage hacky may definitely try thanks", "d": "10/2017"}, {"body": "quick question error boundaries ok multiple error boundaries different levels hierarchy let say one root level another one route level another one nested component level", "d": "10/2017"}, {"body": "bogdansoare read error boundaries like blocks whenever feelknow something throwfail wrap error boundaries nt know anything performance issues stacked eb tho", "d": "10/2017"}, {"body": "please refer post describes behavior detail adopt doc format", "d": "10/2017"}, {"body": "doc file ready adopted blog post gaearon said one concern though mentions parameter lifecycle method blog post mention contains use put notes", "d": "10/2017"}, {"body": "yes please worth documenting contains string field object try see string looks like provide example", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg tagged inprogress belonging krizzu let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "confirm see difference behavior maybe bug", "d": "10/2017"}, {"body": "side note awesome speak different languages yet understand code", "d": "10/2017"}, {"body": "gaearon hey dan created fiddle issue click button hover right div new trigger event twice seems bug need help much willing something", "d": "10/2017"}, {"body": "really idea coming start looking code path event different maybe", "d": "10/2017"}, {"body": "another possible place enterleave issues piling maybe worth getting switch native events", "d": "10/2017"}, {"body": "clarify behavior nt two events dispatched element newly added element also dispatching event captured parent handler mouse slowly see first event fires mouse enters parent black border second fires mouse enters new child red border", "d": "10/2017"}, {"body": "another possible place jquense looks like part root issue seeing child divs nt triggering events inside equal newly added div equal ends populating arrays event gets processed", "d": "10/2017"}, {"body": "valid bug please close", "d": "10/2017"}, {"body": "issue checks checked", "d": "10/2017"}, {"body": "fix", "d": "10/2017"}, {"body": "issue moved new repo free work like", "d": "10/2017"}, {"body": "fixed moved docs another repo", "d": "10/2017"}, {"body": "awesome", "d": "10/2017"}, {"body": "issue worked anyone encountered following along documentation looked reference pr looks like pr nt getting merged could try tackle one currently working beginner", "d": "10/2017"}, {"body": "hey engineeringrobert thanks asking prs submitted fix issue though one needed rebased could merged website issues though might interested looking", "d": "10/2017"}, {"body": "bumped would awesome supported", "d": "10/2017"}, {"body": "yup issue", "d": "10/2017"}, {"body": "express support pressing issue please nt add comments nt particular context nt helpful spamming notifications", "d": "10/2017"}, {"body": "gaearon using prettify package mentioned still get issue code javascript export function renderstaticmarkup req const context const markup reactdomserverrendertostring return javascript import react react import reactdom reactdom import browserrouter reactrouterdom import app app reactdomrender documentgetelementbyid root happening due white spaces template string literal", "d": "10/2017"}, {"body": "please provide complete runnable minimal example reproducing well screenshot exact warning get", "d": "10/2017"}, {"body": "ok solved sorry alarm static markup template literal changed eliminated whitespace rendering node error warning went peace", "d": "10/2017"}, {"body": "could smart cases text node whitespace would semantic meaning would nt ignore warning case sebmarkbage realistically determine looking html put documentlevel whitespace affect rendering involving cssrules seems fragile entirely certain prettifiers account really serving prettified generated html unsafe guarantee affect rendering", "d": "10/2017"}, {"body": "published small fiberlike reconciler yesterday maybe helps someone extract core idea", "d": "10/2017"}, {"body": "close issue track documentation feel free refile cc keyanzhang also asked", "d": "10/2017"}, {"body": "please see", "d": "10/2017"}, {"body": "already fixed record also affected original problem error thrown line containing call", "d": "10/2017"}, {"body": "tagging feature request technically bug fix", "d": "10/2017"}, {"body": "think react bug using browser event system give different behavior", "d": "10/2017"}, {"body": "mistake thought might something react synthetic event managing ff chrome behave way", "d": "10/2017"}, {"body": "worries thanks checking", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue please open new issue repository continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "amount npm packages named react things react way amount tutorials using react amount stackoverflow questions asking reactrelated things amount articles written react whether tutoriallike newslike blog post new features otherwise much changed okay let actually say everyone involved agreed let change react name think happen returning developers watch old unrenamed tutorials read articles search react first thing hit due google removing reactjs first results searching react confused look way communicate owners reactos react stop js library became os anything change lead people way someone misspelling reactjs reactos thing bothering far best way address concerns logically think start conversation probably saying renaming reactjs damaging whole reactjs ecosystem also causes came address alternative propose", "d": "10/2017"}, {"body": "obviously case people going reactos irc channel andor telegram group looking reactjs help already stated thread frequently yes something solvable without solutions like changing logos names community support problem also facebook reactjs enough popular presence moment name change would visible likely leave many people confused imo wrong impact change really huge changing name much younger reactjs project personally would vote right react js much younger react js much much impact content presence internet reactos changing something point would bad would say probably good solutions involve changing image projects far point issues described community support channels think something fixeable nt know enough community support channels reactos order give proposals", "d": "10/2017"}, {"body": "discussion pierre schweitzer represents reactos project adding disambiguation note irc page hope helps reduce confusion", "d": "10/2017"}, {"body": "lol see mistake reactos channel reactos react wrote patch", "d": "10/2017"}, {"body": "hmm pierre told ask comment clarify", "d": "10/2017"}, {"body": "probably guys taken channel see belong reactos team edit oops nt somebody hijacked netsplit changed tagline", "d": "10/2017"}, {"body": "ok indeed confusing assure nobody react team channel either nt know set change docs point instead want make clear neither manage claim ownership", "d": "10/2017"}, {"body": "clarified", "d": "10/2017"}, {"body": "changing names sides would extremely difficult due public recognition problems possibly internal documented apis whose names include react jo etc would need renamed thus breaking backwardcompatibility", "d": "10/2017"}, {"body": "easy give emoji really better give statement must thought name react take net programming know name imho pardon old reactos project best regards blacky", "d": "10/2017"}, {"body": "going offtop facewiththermometer", "d": "10/2017"}, {"body": "note confusion regarding irc channel would appear someone took advantage netsplit changed topic channel modes channel still effectively owned reactos always forwarding still place way join previously joined netsplit jeditobe please ask around next time jumping conclusions please", "d": "10/2017"}, {"body": "blackcrack old reactos project check archived august history logo first known reactos logo ever updated radioactive reactos logo new atomic reactos logo", "d": "10/2017"}, {"body": "pity exist old forum google cache see dez correct someone delete login recreate new date ask jaix give idea rapps comes mandrake inside story however older years freewin project windows livecd", "d": "10/2017"}, {"body": "fresh example confusion", "d": "10/2017"}, {"body": "dear believe keeping issue open ages bring anything new discussion think hbelusca summed everything previously projects personality identity name logo would make sense rename change logo two projects gaearon already made huge step direction disambiguation glad play fool already happy reduces amount lost people irc channels could done address last remark jeditobe would put extra explanation website stating based reactjs way often state based linux way really issue different project propose close issue given statements issue lasted long enough none projects gain anything fighting side note observers may wonder since specific issue opened mailing gaearon find constructive answers issue telling others constructive reactos folks still happy invite discuss next monthly meeting thanks gaearon help topic cheers pierre", "d": "10/2017"}, {"body": "thanks pierre close issue feel like something else could help reduce confusion let us know", "d": "10/2017"}, {"body": "fix get released", "d": "10/2017"}, {"body": "released happen within week two", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "child element removed transitiongroup children list actually yet removed transitiongroup render result react nt unmount clones last used props sets prop false actually maintaining common ui component rcdialog prohibit developers unmount dialog problem us know may problem others", "d": "10/2017"}, {"body": "problem us workaround think cache dom restore unmount hope nt flicker pretty horrible", "d": "10/2017"}, {"body": "issue solution found use createportal", "d": "10/2017"}, {"body": "hey yall nt think old behavior actually supported even sort worked time subtree component may stayed rendered would orphaned state likely break update occurred assumption subtree always actually parented personally run bugs parent component unmount break something portal component next update cycle", "d": "10/2017"}, {"body": "best workaround think asap escape react lifecycle stack trace control element unmounted also need magic copy context ca nt think disadvantages would api look like would inflexible", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue please open new issue repository sorry inconvenience", "d": "10/2017"}, {"body": "understood gets installed default initializing reactnative project reactnative init projectname something wrong reactnative part understand said web rn fine nt use alpha version reconciler hard provide fiddle since figured part app causes meaning even provide fiddlelike example basically almost entire app wanted know kind behavior generally possible something must wrong app hard guess describe sounds odd ca nt say without seeing reduced example", "d": "10/2017"}, {"body": "gaearon alright thanks provide arising details come", "d": "10/2017"}, {"body": "cc jquense", "d": "10/2017"}, {"body": "dedupe logic obvious candidate deduce might happening wrong get result got bunch webdriver tests testing seeing nt help debugging hmm great maybe small repo dirt simple app textbook saucelabs setup inputs text test zouning care put something together", "d": "10/2017"}, {"body": "jquense app might little bit complex take time try", "d": "10/2017"}, {"body": "seeing issue", "d": "10/2017"}, {"body": "please share complete example github", "d": "10/2017"}, {"body": "line quick fix", "d": "10/2017"}, {"body": "maybe check namespace apply caseinsensitive check html", "d": "10/2017"}, {"body": "two different systems nt make sense conflate people may even use proptypes eg use typescript flow instead still use understanding tempting reduce typing two separate concerns", "d": "10/2017"}, {"body": "agree moving website repo soon let get started done", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue willing please open new issue repository sorry inconvenience manually moving issues one bit long nt want misrepresent", "d": "10/2017"}, {"body": "oh sure make work one", "d": "10/2017"}, {"body": "sorry closed moved already morning brain starting fall asleep", "d": "10/2017"}, {"body": "regressed pull request", "d": "10/2017"}, {"body": "fixed nt exist", "d": "10/2017"}, {"body": "issue master", "d": "10/2017"}, {"body": "jquense change versions imports codepen see change event still fires first time unable test react codepen whatever reason", "d": "10/2017"}, {"body": "right sorry sure happened", "d": "10/2017"}, {"body": "clarify also seems broken swapped import codepen html", "d": "10/2017"}, {"body": "broken orz", "d": "10/2017"}, {"body": "could please explain extra indirection hot parts code making development builds run slower made faster removing really want pick work want understand work stopped actually work nt think adding reactinstrumentation back manner existed general interested way expose perhaps based protocol react devtools already uses first step would probably move react devtools backend react repo integrate tests know regresses first step even require implementor dive devtools works might bit overwhelming", "d": "10/2017"}, {"body": "created pr", "d": "10/2017"}, {"body": "well question rendering portals node still actual scenario replace content prefered something unusual actually one almost every project ever would nice opportunity opinion current behavior appending new nodes quite confusing want sure component rendered separate node append new node manually component done tutorial example", "d": "10/2017"}, {"body": "current implementation makes perfect sense conceptually understand motivations behind wonder real world usage coherent concept pretty sure people use portals placeholders living containers implicitly think behave like behavior back good part code using partially breaks react might good idea let people choice every use case covered gaearon would consider implement either another api technical constraints fiber implement", "d": "10/2017"}, {"body": "leeoniya great hear actually aware improvements thanks letting us know", "d": "10/2017"}, {"body": "yes think interesting good place new website start exploring something like", "d": "10/2017"}, {"body": "gaearon happy open pull request one two articles documentation made interactive article would good start", "d": "10/2017"}, {"body": "really cool love talk however documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue let continue discussion create issue get started", "d": "10/2017"}, {"body": "thanks bvaughn let start discussion", "d": "10/2017"}, {"body": "okay please feel free continue", "d": "10/2017"}, {"body": "regarding warning internal error react performance measurement code one due mistake actionable nt printed first place react nt child array iterator unique key prop strict error often indicate bugs must specify keys react otherwise subtle problems reordering lists example facebook show warnings modal window developers fix might eventually start open source react well please treat important today", "d": "10/2017"}, {"body": "either one works hard say without knowing use case guess parent knows whether child needs data pass boolean prop like trigger abort data fetching changes", "d": "10/2017"}, {"body": "ideally automate parts potentially fixing rrm work model happy", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue please open new issue repository sorry inconvenience", "d": "10/2017"}, {"body": "suppose bug separate", "d": "10/2017"}, {"body": "also ran issue upgrading react using intentionally rendering different classnames based viewport size using css media queries hide default html output desktop broke upgrading since would render mobile view class first idea solve add different values nt effect basic example solved using css class using media queries modify container", "d": "10/2017"}, {"body": "thebuilder want render something different client set state", "d": "10/2017"}, {"body": "thanks fast response see behavior called new serverside rendering couple suggestions willing open pr react blog post calls mismatches recommended indicates changes ok eg timestamps page react docs could updated point dangerous missing nodes server render might get recreated incorrect attributes used clientside warnings serverrender match client expected see warnings unhelpful innertext changes single dom node entire node missing would helpful show warning since case unsupported", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue issue bit tricky seems like couple calls action documentation bit created issue new repo reactjsreactjsorg someone dustinsoftware open new issue proposed warning message modifications continue discussion close issue sure reference discussion thread new issue", "d": "10/2017"}, {"body": "think leave unfixed already released", "d": "10/2017"}, {"body": "cc zpao", "d": "10/2017"}, {"body": "added three add list things make easier outside", "d": "10/2017"}, {"body": "sweet", "d": "10/2017"}, {"body": "going go ahead close since pulled away different project unable come minimal example", "d": "10/2017"}, {"body": "sort syntax like", "d": "10/2017"}, {"body": "agree behavior nt make sense jest environment actually nt think happens tests maybe mocking something seeing please raise separate issue seeing jest", "d": "10/2017"}, {"body": "one datapoint env utilizing sentry loaded via cdn ended masking errors passed error boundaries cross origin errors due way sentry hooks async apis nt normally run dev mode global error handling connected obvious reasons led lot confusion concern debugging figuring scope problem anyone searching reactcrossoriginerror error", "d": "10/2017"}, {"body": "think gcc probably strips way nt see gcc builds", "d": "10/2017"}, {"body": "closing favor activity", "d": "10/2017"}, {"body": "issue", "d": "10/2017"}, {"body": "oh man", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "expect happen react", "d": "10/2017"}, {"body": "problem comes react development mode soon switch production mode works fine one helped accesscontrolalloworigin", "d": "10/2017"}, {"body": "ran problem using webpack code splitting webpack dev server similar cdn setup setup initial bundle loaded script tag bundles loaded via jsonp webpack attribute added script tag initial bundle errors handled thrown code initial bundle handle errors bundles necessary configure webpack crossorigin script loading option like webpack config adds attribute jsonp script tags used load bundles", "d": "10/2017"}, {"body": "hey jjjjw thanks additional info chance could point minimal reprosetup setup describing like better understand update crossoriginerrors page react docs", "d": "10/2017"}, {"body": "bvaughn sure simple demo project worth noting case webpack dev server used different portdomain web server additionally first go doc addition", "d": "10/2017"}, {"body": "experiencing issue webpack running different domain whole application wired together using nginx way see error start chrome disablewebsecurity flag actually idea even possible fix", "d": "10/2017"}, {"body": "idea sentence means removing", "d": "10/2017"}, {"body": "secretly true nt think advertising yet", "d": "10/2017"}, {"body": "docs predate addition though must referred something else", "d": "10/2017"}, {"body": "think must meant future sure would said ca nt remember ever wanting commit past", "d": "10/2017"}, {"body": "landermkerbey love wording tweaked tiny bit landed nt go propagation consumption end propagation specific meaning event systems nt want confuse people good eye documentation constraints appreciate could take pass parts docs perhaps send prs", "d": "10/2017"}, {"body": "think duplicate", "d": "10/2017"}, {"body": "looking", "d": "10/2017"}, {"body": "prashanthr talks style key names talk values specifically loss documentation case say value become dom looks like reason linked wrong page part supposed show gone fix link", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "variation let keep discussion", "d": "10/2017"}, {"body": "gfx created package reactdomcore copies exposes modules lib", "d": "10/2017"}, {"body": "even mismatch consider testutils would say isolated pr probably worth unless prepare complete proposal revamp apis mirror well work codemods since already lot code using", "d": "10/2017"}, {"body": "context reason happens intentionally let browser interpret error uncaught rethrow justification discussed follow advice error add error boundary see error huge problem daytoday workflow fact nudges people add error boundaries nice another justification accidentally swallow error still print alone makes worth imo hundreds comments dozens issues caused people swallowing errors fact print least seems like enough benefit compensate printing twice uncaught unswallowed boundary", "d": "10/2017"}, {"body": "currently way prevent dispatching error event twice case simple error thrown click handler rather error boundaries nt seem help ps sure belongs different issue open new one", "d": "10/2017"}, {"body": "approach like help", "d": "10/2017"}, {"body": "probably something like works well javascript windowaddeventlistener error evt gt evterrormarkedforreactweirdness evtpreventdefault return evterrormarkedforreactweirdness true regular error handling considered temporary hack hoping elegant solution available", "d": "10/2017"}, {"body": "important duplication happens development mode presumably error logging etc happen production", "d": "10/2017"}, {"body": "ah good point forgot would nt issue production mode case minor annoyance app displays errors caught global handler developing error display feature always show twice unless hack duplicates away", "d": "10/2017"}, {"body": "tagging wontfix behavior intentional explained", "d": "10/2017"}, {"body": "maybe nt firing earlier reason nt firing going close since supported use transform development somebody finds simple fix though happy take pr", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "record error enzyme adapter using react adapter react version changing adapters solved issue", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "appreciate discussion think way fulfil feature request without significant downsides general suggest worry much little extra typing going make break application think strive clear data flow keeping components easy compose rather avoid extra keystrokes compromise goals perhaps generic way configured global scale thinking maybe api looks something like global apis pretty bad effects ecosystem components written assuming one configuration work global configuration exactly react essentially global configuration", "d": "10/2017"}, {"body": "gaearon could elaborate prefer use tree deep benifits using functoinal component instead thanks", "d": "10/2017"}, {"body": "callback would live somewhere also slow new architecture want discourage usage need refs pass like described another way could address", "d": "10/2017"}, {"body": "almost got rid", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg", "d": "10/2017"}, {"body": "without reproduction unfortunately much please feel free ping provide consistent repro react thanks", "d": "10/2017"}, {"body": "experiencing problem affecting users firefox repro well wanted note issue continues", "d": "10/2017"}, {"body": "better performance guess talking overthewire bundle size vs runtime perf additionally react really using either classes arrow functions code convinced makes lot difference debugging actually really important topic ran tests weekend swapped closure compiler target one closure anywhere efficient insane magic bundle size actually went also tried babelminify similar results uglify support projects case see payload reduction babel helpers large transpiled results etc react specifically win react codebase uses little expensive sizewise transpilation syntax module discussion topic might good keep alive think close one due lack anything approaching current efficiency closure react currently get wins delivering mostly begin", "d": "10/2017"}, {"body": "react specifically win react codebase uses little expensive sizewise syntax impression", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "verified still issue react", "d": "10/2017"}, {"body": "yes due way polyfill implemented nt really fixable current strategy since relies infering paired event enterleave relatedtarget opposite means since disabled elements nt emit entering element wo nt get", "d": "10/2017"}, {"body": "really big trouble tried get around attaching tag wrapping disabled exhibited behavior nonetheless", "d": "10/2017"}, {"body": "gon na give shot first contribution", "d": "10/2017"}, {"body": "bit confused longer seems exists tests renamed somehow", "d": "10/2017"}, {"body": "logic old engine gone", "d": "10/2017"}, {"body": "ok think good handle upon deeper inspection error happens earlier lifecycle placing invariant higher originally suggested error actually gets thrown mountindeterminatecomponent nt even reach several lines lower check going simply seems work ie throw pure functional components well extended react components throwing plain js classes think exactly want", "d": "10/2017"}, {"body": "anyone else watching made instead requested dan also added test", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "either form makes sense removed deprecated apis wo nt see warnings anymore", "d": "10/2017"}, {"body": "another possible approach browseronly", "d": "10/2017"}, {"body": "would nice see feature react message explicit could tell elements different says also rendering issues due warning new react codebase try give hand issue", "d": "10/2017"}, {"body": "sorry focused getting release nt look existing prs yet", "d": "10/2017"}, {"body": "seems like fixed", "d": "10/2017"}, {"body": "going close duplicate", "d": "10/2017"}, {"body": "solution outlined work react", "d": "10/2017"}, {"body": "awesome thank aweary", "d": "10/2017"}, {"body": "plan current ad hoc process works read nt feel strongly close revisit next time deprecate something", "d": "10/2017"}, {"body": "something commenters flagged confusing one releasechecklist items since joining team observed ad hoc process works nt something seems useful document let close thanks", "d": "10/2017"}, {"body": "related", "d": "10/2017"}, {"body": "rollup made aware issue exposed bug rollupplugincommonjs way thanks would happened react module export given recent improvements rollup treeshaking algorithm pipeline least rollup users exposing bundle might positive effects bundle size depending react features used want go bundle ideally provide named exports create global variables makes easier treeshaking algorithm work even though must admit understand every aspect react build script would expect could basically solved adding another build target correct format possibly entry point right exports btw noticed using rather old version rollup anything preventing updating please file issue interesting todo comment still current", "d": "10/2017"}, {"body": "lukastaegert named exports default ones different sense named export afaik treated differently imported", "d": "10/2017"}, {"body": "andarist default export changed runtime named exports bindings changed file", "d": "10/2017"}, {"body": "maybe comment named exports little cryptic elaborate referring uncommon practice exporting things twice named export member default export latter often prevents treeshaking named export even though default export used reason exporting file default export still needs assembled assembled object included happen easily various members included bundle practice probably stems fact bundlers like webpack indeed rollup commonjs plugin converting commonjs files libraries include lodashes remove default export nodemodules bundle size treeshaking currently nearly halved would possible future improvements mean react make possible interchanged always need assemble object likelihood break treeshaking whole package however understand decisions ease use always preferred premature optimisation point consider especially plan move native modules future opinion", "d": "10/2017"}, {"body": "ah sure understand aware nt like though recommending named exports kind rule thumb way better educate people consequences attaching things default one hint hint eslint plugin however understand decisions ease use always preferred premature optimisation point consider especially plan move native modules future opinion personally see harder use assuming would exported purely named export attachment default one migration newer export style could easily run codemod also babel plugin could created allow people using syntax", "d": "10/2017"}, {"body": "trysound note export like export changed runtime statement complicated one named function declaration named class reassigned reassigning functionclass name otherwise appears nonreassignable always mutable export declaring recommend immutability good", "d": "10/2017"}, {"body": "make work manually exporting named exports separate file bundling file rollup", "d": "10/2017"}, {"body": "want make clear going get awesome benefits tree shaking react code internals always used might shave one two kb code never uses high priority optimization us reason", "d": "10/2017"}, {"body": "main benefit es module option react able use native modules development avoid rebundling every change code", "d": "10/2017"}, {"body": "also es modules place webpack could scope hoist react moment simply bails react treats commonjs", "d": "10/2017"}, {"body": "chiming kind late consider something like jsx const test props gt example testproptypes prop function props propname componentname recursivetypecheck props propname strong throw error nooo function recursivetypecheck element type elementtype type return true else return reactchildrentoarray elementpropschildren child gt recursivetypecheck child type edit disregard believe missing case classfunctional component renders", "d": "10/2017"}, {"body": "hi ljharb react team talked issue came concerns tldr right thinking best implement react return type nt mean accept props interact css environmental things would nt give enough type safety address cases thought additionally moved react core would generally prefer type checking outside react detail considered tried get sense high level problem meant solve seems like feature would help validate components gets passed via props certain behavior similar api based type component render though proposed feature would work cases also thought common cases pitfalls common pattern seen takes prop clones passes even verify returns ca nt guarantee accepts passes also seen cases may return may even accept props css implementation details compatible could assume would work children also considered idea could implemented outside react sebastian commented earlier coroutines fiber let implement kind thing user space wider solution kind parentchild relationships indirections could said without react enforcing adding arbitrary convention imo potentially dangerous ecosystem said point moved react core separate module seems like might similarly ok module outside react address concern hope helpful please let know sounds anything clarify thanks also bringing issue attention could bring team", "d": "10/2017"}, {"body": "thanks response think module outside react definitely better way go still devonly hooks inside react feature need similar devonly hooks eg happy make separate package react willing add hooks even verify returns ca nt guarantee accepts propx passes sure known implementation", "d": "10/2017"}, {"body": "fancychild known implementation clarify objection might button component takes buttonstyle maybe buttongroup seems like common use case practice feature today pass fancybutton instead fancybutton renders button buttongroup clone fancybutton element add buttonstyle prop fancybutton instead fancybutton nt necessarily take buttonstyle could take totally different set props typechecks cloneelement nt primary value see curious see value proposition enforcing", "d": "10/2017"}, {"body": "tend avoid much main goal example take want allow children nt want teach exists allow explicit claim renders proptype say want children either render", "d": "10/2017"}, {"body": "buttongroup care fancybutton returns button guarantee allows otherwise", "d": "10/2017"}, {"body": "application easily see helping enforce css constraints eg kinda enforce contain immediate children yet see else would useful since rendered child opaque interface directly", "d": "10/2017"}, {"body": "sophiebits gaearon design consideration nt want devs able freely put whatever want wherever want restricting buttongroup buttons devs ca nt naively stick dropdown menu something buttongroup perhaps common pattern us proptype called textlike allows string component internal translation component component internal design library however lots wrapper components might render custom hardcoded props let say want usable wherever allowed without embed knowledge inside proptype", "d": "10/2017"}, {"body": "subtyping vs nominal typing sometimes makes sense add restrictions wo nt technically fail organizationally fail", "d": "10/2017"}, {"body": "restricting buttongroup buttons devs ca nt naively stick dropdown menu something buttongroup yes bad happens fine answer nothing primarily documentation enforced code want make sure missing anything wherever allowed authoring component whenwhy would want restrict children allow kinds text components seems css argument even since heading likely different appearance text", "d": "10/2017"}, {"body": "bad thing interface inconsistent designers without realizing users sad got nothing css want entire codebase restricted possible heavily use custom children proptypes already nontext allowed people devsengspms put icons nt accessible abuse existing styling use containers layout often breaks various responsive breakpoints employ multitude subpar ux patterns without realizing want nothing permitted except knowngood patterns rendertypes anything provides similar functionality help close remaining loopholesawkward surfaces approach", "d": "10/2017"}, {"body": "bit worried add turn cargo cult people adding case understand initial use case bit awkward api decorating child components actual use case validating parentchild relationship obvious looking api", "d": "10/2017"}, {"body": "fair criticism solution made sense another way meet use case would obviousintuitive", "d": "10/2017"}, {"body": "seems like would easy fix clearing container suggested indeed ca nt really unit test occurs manual test want send pr", "d": "10/2017"}, {"body": "ah sorry missed one happy make pr get today sure test see", "d": "10/2017"}, {"body": "let track rewriting tests via public api", "d": "10/2017"}, {"body": "nt appear issue using new portal api", "d": "10/2017"}, {"body": "unable reproduce issue sullenor reported latest react release issue fires single change event per input seems still problem investigate separately thanks", "d": "10/2017"}, {"body": "\u30c4", "d": "10/2017"}, {"body": "could also use set flag reactdevtoolsglobalhook object icon devtools extension could use indicate misconfigured build sounds reasonable", "d": "10/2017"}, {"body": "seems like stalled nt feel strongly fixing said happy remove misleading example somebody sends pr", "d": "10/2017"}, {"body": "reference made quick effort resolving", "d": "10/2017"}, {"body": "fixed react", "d": "10/2017"}, {"body": "mentioned associated pr documentation source code reactjsorg lives different repository reactjsreactjsorg going close issue", "d": "10/2017"}, {"body": "agree better document expected cause side effects synchronously update state willupdate willreceiveprops hmm gaearon nt okay call changed since last checked", "d": "10/2017"}, {"body": "thank filing issue raising concerns documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue closed associated pr added comment explaining also moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "happy take pr nt see sense keeping issue open", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "aweary think mean fixed", "d": "10/2017"}, {"body": "iansu thanks copypaste error", "d": "10/2017"}, {"body": "closing duplicate already closed", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue please feel free open pr new repository suggestions improve documentation like discuss proposed changes first please open issue talk", "d": "10/2017"}, {"body": "fixed released", "d": "10/2017"}, {"body": "think better place", "d": "10/2017"}, {"body": "unlikely implement way parentchild introspection pretty niche use case providing api would break key invariant react tree understand writing custom renderer seems excessive renderer api exposed lot easier thanks", "d": "10/2017"}, {"body": "also super secret coroutine api might helpful yielding data child back parent exposed publicly yet ways hack around really want live edge", "d": "10/2017"}, {"body": "gracias mis amigos", "d": "10/2017"}, {"body": "new might know talking suppose component state set internally using changes timer maybe requeries weather given date periodically would actual behaviour expectation widget render method called changes example parent component rerenders passes different value weather render method called whenever parent rerenders purely weather render method called whenever changes state component ie whenever refetches data wrong wrong nt read next paragraph time please let know wrong right render thing regardless give props renders div date render function matter child component changing periodically like feels roughly equivalent const weather rmemoize date gt return day format date weather render gt weather date const date datenow expect weather date weather date tobe true expect weather date weatherrender weather date weatherrender tobe false weather function pure nt care weather impure returning render function right full disclosure walked conversation facebook may waaaay league", "d": "10/2017"}, {"body": "nt heard many complaints error wording straightforward plus gives list keys component stack trace think clear enough unless specific feedback", "d": "10/2017"}, {"body": "second huge number buttons text tictactoe game actually fixed since issue reported datatable table think table div elements css says table make accessible one needs use table tag th tag tr tag td tag fantastic article make html tables please correct wrong aria attributes also valid alternative actual html incorrect documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue flarnie done accessibility auditing new reactjsorg website sure still improve create issue new repo reactjsreactjsorg let continue discussion", "d": "10/2017"}, {"body": "answer question since asked please correct wrong aria attributes also valid alternative actual html incorrect technically valid discouraged since aria came rules aria appeared accompany aria use first rule aria native html carry necessary semantics use aria reasons tend browsers exposed native html nearly years depending tag aria newer bugs browsers properly exposing aria browsers properly exposing native html elements aria spec also changing rapidly html semantics time using pile divs plus bucket aria code write maintain read refactor code break say bit fragile right writing tests example use span rolebutton etc instead button tag writing tests ensure refactoring lose focusability button name event listener spacebar things harder lose native button reasons yes technically pile divs aria attributes roles damn near every tag could allowed technically accessible done correctly end user would know difference ew", "d": "10/2017"}, {"body": "browsers exposed native html nearly years depending tag aria newer bugs browsers properly exposing aria browsers properly exposing native html elements aria spec also changing rapidly html semantics seems like important point admittedly one familiar chance references show support percentages like curious learn time using pile divs plus bucket aria code write maintain read refactor hand nt convincing argument easily imagine scenarios work use aria eg like button one mentioned ones less work use aria often case tables choice better development maintenance perspective casebycase page linked says visual design constraints rule use particular native element element styled required experience generally motivator divsaria roles preferred traditional elements", "d": "10/2017"}, {"body": "accessible version little bit look tutorial worth massive complexity aria brings project know many companies big companies try get away using aria one small problem whole table becomes unusable using screen reader would never know one wishes use aria imperative screen reader user test several screen readers several browsers using aria like trying version css completely new syntax css without looking results using html using widgets look fantastic box incomprehensible html widgets look bad buttons x labeled trick copy paste webpage text document see pretty much screen reader sees layout words get little like edit fields say edit buttons word button end copy paste method shows worst errors", "d": "10/2017"}, {"body": "btw title change say tutorial example accessible docs beautiful never read amazing documentation framework nt even know need tutorial docs lol", "d": "10/2017"}, {"body": "hey frastlin let continue chat new issue one closed since docs moved new repo", "d": "10/2017"}, {"body": "bvaughn choice better development maintenance perspective casebycase yes though nt seen faketableariadup code table things ymmv page linked says visual design constraints rule use particular native element element styled required experience generally motivator divsaria roles preferred traditional elements yes almost always form controls since browsers tend disallow styling os takes big hand styling get ariadupthewahoo dropdown tag would worked instances ca nt style options browsers even styling main body takes bunch hacks means though developer responsible things select would automagically collision detection work mobile oses dealing onscreen osbased keyboard appearingdisappearing script behaviours lot teams willing work default styles fugly css ca nt job even shadowdom nt looking like option either table harder sell team willing add extra code tests whatnot indeed ultimately decision open edgecase bug reports also recommend developers prototyping locally part tech stack pushing run accessibility testing tools catch things like mismatched aria parentchild roles roles child roles required parent roles since becomes thing structures like tables get created purely aria yeah might need actually go test screen reader since currently getting benefit aria screen magnifiers dragon bit well one place seen interesting take aria tables responsive table knowing changing css display states table removed table semantics several browsers booo firefox safari booo seen team use list markup aria minimum screen sizes plus css turn list table desktop sizes small show useful table aria roles removed user ends semantic slightly complex list weird neat idea anyway frastlin using html using widgets look fantastic box incomprehensible html widgets look bad oh form controls look pretty terrible p", "d": "10/2017"}, {"body": "let continue chat new issue", "d": "10/2017"}, {"body": "let make sure also fix testing linting running flow really anything broken", "d": "10/2017"}, {"body": "gaearon scripts running correctly expect linc windows nt grep command prettierall long command issue screenshots left windows right ubuntu windows nt grep command issue long command pr output rest fixed pr windows ubuntu", "d": "10/2017"}, {"body": "longer reproduce issue latest releases", "d": "10/2017"}, {"body": "looks nice changed website interested filed new issue", "d": "10/2017"}, {"body": "close nt goal gcc compatible yet rather like gcccompile need fix issues part work prefer track issue", "d": "10/2017"}, {"body": "longer issue react", "d": "10/2017"}, {"body": "link longer appears docs", "d": "10/2017"}, {"body": "would like test see still broken", "d": "10/2017"}, {"body": "let track", "d": "10/2017"}, {"body": "resolved react", "d": "10/2017"}, {"body": "yes thanks", "d": "10/2017"}, {"body": "thinking based checking browser stats nt provide full list least provides list browsers definitely need support things list need discuss hoping list least helpful baseline definitely supported full support chrome last available xpvista firefox esr ie safari edge probably supported full support safari chrome seeing bunch traffic windows sure probably ok support safari sure definitely supported would nice enumerate means anything work", "d": "10/2017"}, {"body": "determining current firefox esr found downloads page helpful", "d": "10/2017"}, {"body": "changing context works nt think properly exposing current form goal said probably get rid masking hijack issue track", "d": "10/2017"}, {"body": "nt know means long prevent wasted renders based props state context happy camper something automatically handled even better", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "nt think likely", "d": "10/2017"}, {"body": "gone back forth currently think much churn ecosystem little gain quoting feel like ship sailed ton libraries react ecosystem already rely better worse changing involve ton churn worse change people update configs code silently fail deadcode eliminate popular bundlers like webpack also mention regarding environment react ships separate entry points production commonjs bundles alias bundles force production environment even says otherwise workaround", "d": "10/2017"}, {"body": "confirm whether still happens master native web components wc support borked fixed master", "d": "10/2017"}, {"body": "first also observed first hand react today also confirmed fellow opened related issue wrote working temporary fix see use case web components react applications considering using react building complicated web components delivered platforms thinking wordpress bloggers similar", "d": "10/2017"}, {"body": "problem created component react want include sites similar iframe way work retarget events think realy hurts performace", "d": "10/2017"}, {"body": "react use event delegation listen clicks react components imagine shadow boundary would get way want make sure understand problem", "d": "10/2017"}, {"body": "seems like nt seen much confusion area probably worth spending extra doc warning space thus confusing people nt problem common ones", "d": "10/2017"}, {"body": "thank consideration", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "clear good solution problem solutions compared elements nt changed trying short circuit rendering force skipping maintaining cache elements react bail reconciling constant elements hand really want particular child might well wrap class components get refs particular one index react already lets way hope helps", "d": "10/2017"}, {"body": "elements nt changed trying short circuit rendering force skipping maintaining cache elements react bail reconciling constant elements handle constant hoisted elements nested components children might return different snapshots bail point hoisted element would nt uninternationally also short circuit child components could update render heuristic intentional regard", "d": "10/2017"}, {"body": "yes intentional wo nt work something child tree depends prop mutation descending without actual new element created", "d": "10/2017"}, {"body": "beautiful", "d": "10/2017"}, {"body": "see warning nested case react nt know fixed good know", "d": "10/2017"}, {"body": "somewhat related discussion", "d": "10/2017"}, {"body": "nt support close experiencing problems versions please file new bug full instructions reproduce example", "d": "10/2017"}, {"body": "python somthing called deprecation warning proptypes warning since april automated codemod change code link", "d": "10/2017"}, {"body": "provide complete example pass array children third argument lack keys get warning avoid thing jsx passing child variadic arguments case consider content static like never change child order thus ask keys hope helps please create new issue complete example could run", "d": "10/2017"}, {"body": "think correct fix emit different warning set case want suggest empty array rather empty string", "d": "10/2017"}, {"body": "submitted proposed fix pull request", "d": "10/2017"}, {"body": "hendeca looks like pr approved", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "case different providers order incorrect hence errors raised facing warning try reordering nested providers kind dependency concise order", "d": "10/2017"}, {"body": "yes bug misunderstanding indeed passing set browser", "d": "10/2017"}, {"body": "perf addon removed react might revive point relevant anymore", "d": "10/2017"}, {"body": "let track", "d": "10/2017"}, {"body": "zpao still good time", "d": "10/2017"}, {"body": "chatting sophiebits couple weeks ago planning getting guess let try knock next week", "d": "10/2017"}, {"body": "remaining items moved", "d": "10/2017"}, {"body": "seems like issue due user mistake calling function instead passing closing", "d": "10/2017"}, {"body": "react perf work react might resurrect point clear work new algorithm case close", "d": "10/2017"}, {"body": "perf addon nt work react anyway close", "d": "10/2017"}, {"body": "seems like unrelated react react fault let us know reopen", "d": "10/2017"}, {"body": "yeah bug react sorry taking time", "d": "10/2017"}, {"body": "nt think understand original request helps solve general problem hot reloading knowing enough need know whole key path think developing system builtin notion stores already bigger react might well attach implicit keys override attach bigger issue related hot reloading think let close one", "d": "10/2017"}, {"body": "know", "d": "10/2017"}, {"body": "yep explained intentional lets us differentiate dynamic children need ask specify keys static children know order never changes jsx transform relies", "d": "10/2017"}, {"body": "actually went way show stack cases good thing stack enable babel plugin development see filenames line numbers think valuable enough warnings show component stack specific suggestions improve stack format please file issue thanks", "d": "10/2017"}, {"body": "close duplicate", "d": "10/2017"}, {"body": "inside supported guess could warn nt seen people practice get reports like maybe could", "d": "10/2017"}, {"body": "fixed docs", "d": "10/2017"}, {"body": "react get infinite loop example", "d": "10/2017"}, {"body": "yep implement custom need control", "d": "10/2017"}, {"body": "react released official support error boundaries fully supported client side supported server side since would incompatible forwardonly streaming server side use nt obscure errors though", "d": "10/2017"}, {"body": "think could try react report whether issue still exists", "d": "10/2017"}, {"body": "gone", "d": "10/2017"}, {"body": "seems like nt need anything side let know misunderstood", "d": "10/2017"}, {"body": "something nt remember close somebody curious bet acdlite answer", "d": "10/2017"}, {"body": "pretty certain issue nt exist react wrong please let know", "d": "10/2017"}, {"body": "react uncaught error find module reactdomlibreactperf webpackmissingmodule indexjs eval indexjs", "d": "10/2017"}, {"body": "react currently support react perf addon please read announcement blog post mentions", "d": "10/2017"}, {"body": "heads react hack wo nt work internal property names changed might work though js function getreactlisteners node function getprops let key node keystartswith reactinternalinstance return node key memoizedprops return null node nodewrappedjsobject node let handlers let props getprops props let name props namestartswith let prop props name let listener propreactboundmethod prop return handlers note might give wrong one pooled two alternating buffers easy way tell current one", "d": "10/2017"}, {"body": "provide better message quite related seems react tries put component jsx like component also reactcreateelement simply swallowed think warning would useful see also fixed", "d": "10/2017"}, {"body": "need reproducing example", "d": "10/2017"}, {"body": "closing since reactperf available react might resurrect future clear work new algorithm view wasted time chrome performance tools functionality right see performance tab components rerendering give idea something rerenders nt also use highlight updates checkbox react devtools highlight updating components note works correctly react higher", "d": "10/2017"}, {"body": "add component stack like warnings", "d": "10/2017"}, {"body": "gaearon like try one firsttime contributor react project pointers would appreciated", "d": "10/2017"}, {"body": "example warning includes component stack test warnings contenteditable warning see nt include stack add relevant test change also test warning message single word like presence stack hope helps", "d": "10/2017"}, {"body": "thank give shot later today", "d": "10/2017"}, {"body": "agree bit confusing actually think fix later want make site dynamic every field become readonly spam warnings better use beginning case also serializes markup completely avoids warning problems", "d": "10/2017"}, {"body": "ca nt reproduce maybe temporary issue got solved still repro please provide example", "d": "10/2017"}, {"body": "go facebook messenger right chrome mac behaviour still input string flflflflf message field try move caret using arrow keys right left", "d": "10/2017"}, {"body": "oh wow right tried different place mistake look like bug reproduce isolated example", "d": "10/2017"}, {"body": "cc flarnie case known issue draft", "d": "10/2017"}, {"body": "tried different apps lying around last one reproduce uses react reactdom version tried creating new fresh app using react reactdom nt able reproduce problem yet assuming inputs example app controlled although nt matter last time looking maybe actually fixed", "d": "10/2017"}, {"body": "still happening messenger since uses could draft issue rather react issue", "d": "10/2017"}, {"body": "nt use draft first encountered using older apps currently reproduce also remember making really barebones app still exhibited strange behaviour happened check facebook messenger trying think high profile app would use latest react help ideas ways get information", "d": "10/2017"}, {"body": "playing around facebook messenger noticed seems related handling f character lowercase try string fffffff get behaviour lowercase english norwegian character produces behaviour simply repeated f inserted next l characters also get strangeness nt found pairing reproduces problem maybe could clue", "d": "10/2017"}, {"body": "new knowledge try reproducing vanilla react", "d": "10/2017"}, {"body": "since data changing every single render much speed react staying declarative model first option declarative always going slower second option imperative practice bump issues like good idea ensure use fast production version use virtualization avoid rerendering necessary sometimes resort imperative escape hatches like hope helps", "d": "10/2017"}, {"body": "browser event thing think possible us detect case without convoluted hacks", "d": "10/2017"}, {"body": "comment referenced really old would nt read much since react changed lot last years meanwhile would great docs specified componentdidmountupdate use requestanimationframesettimeout access rendered dom sure understand necessary could elaborate didmount didupdate called changes flushed dom synchronously access refs backing dom elements methods documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue let reopen new issue repository continue discussion still interested", "d": "10/2017"}, {"body": "bvaughn methods get called changes flushed dom irrelevant problem get called first browser painting happens give example element set property report incorrect values however correct values get reported wrap code retrieving values", "d": "10/2017"}, {"body": "element set property report incorrect values however correct values get reported wrap code retrieving values point repro shows behavior chance methods get called changes flushed dom irrelevant relevance pointing required access dom elements cdmcdu elements already exist accessible updating docs say add async delay accessible dom elements might give incorrect impression elements nt created appended yet lifecycle hooks called", "d": "10/2017"}, {"body": "sorry looks like hasty solve problem particular case nailed padding causing problem reason clientwidth received cdm smaller total padding amount surrounding component maybe gets painted first without padding accurate obtained bit later attach fiddle reproduce", "d": "10/2017"}, {"body": "caused style chance something may inherited parent style may changed okay thanks", "d": "10/2017"}, {"body": "nevermind issue caused something else sorry", "d": "10/2017"}, {"body": "happens", "d": "10/2017"}, {"body": "yes refs free making always available going hurt performance memory usage maybe future could solved", "d": "10/2017"}, {"body": "required string refs eventually get deprecated anyway encourage generate objects directly", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue created issue new repo already think related let continue discussion new issue", "d": "10/2017"}, {"body": "aweary thoughts", "d": "10/2017"}, {"body": "issue seems line seems like noop cases lack comment makes bit tough understand even see sets value guarded think space bit afraid change without understanding", "d": "10/2017"}, {"body": "jquense know something sideeffect produces something called value detachment term stole sophiebits assigning value attribute changes value property check codepen still seems fixable map possible sequences assignments see easily avoid needing also worth identifying line forces validation required date inputs", "d": "10/2017"}, {"body": "nt think term either maybe jimfb", "d": "10/2017"}, {"body": "looks like still need following test defaultvalue uncontrolled input gt var container documentcreateelement div var node reactdomrender container expect nodevalue tobe reactdomrender container expect nodevalue tobe expect nodedefaultvalue tobe remove line setting defaultvalue changes value property error far react concerned think could debated correct behavior remove check defaultvalue would change set different value user interacted determine relatively static may reasonable trade alternatively wonder could perform detachment input never changed input receives new defaultvalue prop sounds mechanical complicated", "d": "10/2017"}, {"body": "love html api changing validation state", "d": "10/2017"}, {"body": "almost fix investigating unhelpful error set pick tomorrow", "d": "10/2017"}, {"body": "huh got use instead review", "d": "10/2017"}, {"body": "ran adding reactredux app made using aspnet core template template splits webpack config two separate configuration files need modify array put top order get work also fully clean environment namely delete folder rebuild project order changes get properly picked", "d": "10/2017"}, {"body": "hard tell something without example", "d": "10/2017"}, {"body": "hard time convincing something react would say likely browser issue encourage recreate vanilla js test still experience convinced reactonly please file new issue test cases verify", "d": "10/2017"}, {"body": "would surprised case since apps would break therefore probably something localized app since reproducible test case issue way verify happened closing", "d": "10/2017"}, {"body": "fixed best results use plugin development", "d": "10/2017"}, {"body": "got rid", "d": "10/2017"}, {"body": "since fixed", "d": "10/2017"}, {"body": "hard say issue since provide reproducible example regardless sounds like browser issue related react", "d": "10/2017"}, {"body": "specific use cases always expose need learn", "d": "10/2017"}, {"body": "think already expose portals react native", "d": "10/2017"}, {"body": "haha realize wonder anybody tried use yet", "d": "10/2017"}, {"body": "still nt think currently way make new container short making new root view native land starts new tree automatically", "d": "10/2017"}, {"body": "think insert root view manually register tag without rendering need native though makes sense need build wrapper manage gets inserted", "d": "10/2017"}, {"body": "think support immutable dom nodes sometimes need keep state associated weakmaps supported everywhere", "d": "10/2017"}, {"body": "react nt use checksums anymore", "d": "10/2017"}, {"body": "seems like bringing something back dead gaearon idea disable class transforming babel using preset fragment thanks time", "d": "10/2017"}, {"body": "use react preset babel wo nt transform classes unless babel config parent directories eg webpack options", "d": "10/2017"}, {"body": "think intend support seems like relatively uncommon request easily work around using applying", "d": "10/2017"}, {"body": "works react", "d": "10/2017"}, {"body": "warn react", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue already created issue new repo relates let move discussion", "d": "10/2017"}, {"body": "migrating", "d": "10/2017"}, {"body": "love contribute would assign issue get started thank", "d": "10/2017"}, {"body": "nt think anyone assign something go ahead pick something looks good go said issue really migrated new docs site repo", "d": "10/2017"}, {"body": "migrated interested picking guides let talk new issue make inprogress", "d": "10/2017"}, {"body": "fairly happy context name already unnecessarily relying proptypes defining context relationship nt think go direction fact probably decouple future since many people nt use proptypes", "d": "10/2017"}, {"body": "sure proper place post react documentation creative commons licensed end leads github page", "d": "10/2017"}, {"body": "yeah think licencedoc removed commit maybe remove paragraph migration document website", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion", "d": "10/2017"}, {"body": "rolled", "d": "10/2017"}, {"body": "think fixed", "d": "10/2017"}, {"body": "reproduce original case react", "d": "10/2017"}, {"body": "nt show particular warning anymore thoughts future similar warning please post", "d": "10/2017"}, {"body": "still relevant", "d": "10/2017"}, {"body": "coming back old one entire purpose unit testing test isolated component obviously soon component depends context ca nt purely isolated still setup wrapping component may set context bit counterintuitive context unit testing guess would really nice reacttestrenderer would actually allow get rid step", "d": "10/2017"}, {"body": "nt maintain addon anymore", "d": "10/2017"}, {"body": "sounds like right explanation", "d": "10/2017"}, {"body": "tracking windows fixes build system let make sure fix tests", "d": "10/2017"}, {"body": "clarify attributes work react need specify explicitly different unknown attributes treat booleans different ways eg considered truthy ask explicitly specify strings", "d": "10/2017"}, {"body": "ah thanks clarification gaearon", "d": "10/2017"}, {"body": "indeed thanks gaearon", "d": "10/2017"}, {"body": "thank", "d": "10/2017"}, {"body": "seems like tag support generally flaky sure anything would suggest detecting ie showing fallback content", "d": "10/2017"}, {"body": "could get whole world drop ie good", "d": "10/2017"}, {"body": "well hopefully wo nt take long die", "d": "10/2017"}, {"body": "still issue", "d": "10/2017"}, {"body": "gaearon nope", "d": "10/2017"}, {"body": "greatly appreciated documenting pulling hair input getting focus", "d": "10/2017"}, {"body": "note use talking dom use", "d": "10/2017"}, {"body": "pretty broken general since react offer firstclass portal api replaces suffer interleaving issues", "d": "10/2017"}, {"body": "see work react closing please provide reproducing case", "d": "10/2017"}, {"body": "still happens", "d": "10/2017"}, {"body": "syranide workaround works great everybody else might need aware difference pick one fit needs", "d": "10/2017"}, {"body": "closing enough info help", "d": "10/2017"}, {"body": "works", "d": "10/2017"}, {"body": "hi update also would helpful changing global theme app", "d": "10/2017"}, {"body": "updates issue might look months", "d": "10/2017"}, {"body": "seems like less issue let keep discussion", "d": "10/2017"}, {"body": "think ever something like public api possible something like compile target trueadm experimented inferno think gave lot benefit real products compared benchmarks might wrong", "d": "10/2017"}, {"body": "jtadmor one way deal use hoc js const compwithmessage message gt props gt const mycomp compwithmessage message always one string though get tired extra step instantiate hocs wish compiler would hoist props constant including functions nt depend variables scope like entire element subtrees constant even reconciliation nt skip comparing constant props hoisting would prevent reconciliation thinking anything changed", "d": "10/2017"}, {"body": "really necessary strings immutable anyway guess would make sense objects instead", "d": "10/2017"}, {"body": "trueadm yes functions main reason things like hocs begin think", "d": "10/2017"}, {"body": "case would easier hoist functions safe thus ensure identity come workarounds react", "d": "10/2017"}, {"body": "gaearon true optimizing compiler label babel plugins type compiler within react", "d": "10/2017"}, {"body": "generic label potential optimizations reactaware compiler could necessarily existing ones", "d": "10/2017"}, {"body": "warn devtools working well also docs", "d": "10/2017"}, {"body": "sure would still reproduce since rewrote shallow renderer actually changed behavior browser keep two nodes rely behavior though completely unsupported two siblings react reserves right keep duplicate omit one something inconsistent case strictly warn", "d": "10/2017"}, {"body": "switching switches input uncontrolled react warns think happens next click manually browser toggles uncontrolled see changing whereas simulate event nothing happens click handler switched uncontrolled mode real click warning suggests use unless mean component uncontrolled case keep uncontrolled whole lifetime hope helps", "d": "10/2017"}, {"body": "related insertion order juggle react ieedge perf nt anymore react assume fixed please file new issue thanks", "d": "10/2017"}, {"body": "seems like fixed somehow", "d": "10/2017"}, {"body": "still issue react", "d": "10/2017"}, {"body": "fwiw solve problem fb agree firstclass api would nice", "d": "10/2017"}, {"body": "nt use code anymore also react explicitly asks polyfill map use elsewhere", "d": "10/2017"}, {"body": "active discussion close", "d": "10/2017"}, {"body": "landed react another issue blocking rendering let close one", "d": "10/2017"}, {"body": "see us changing much ecosystem already depends convention churn dangerous changing anything likely result breaking people dead code elimination pipelines react ships separate entry points production commonjs bundles alias bundles force production environment even says otherwise", "d": "10/2017"}, {"body": "gaearon alright thanks update", "d": "10/2017"}, {"body": "seems like temporary issue nothing side", "d": "10/2017"}, {"body": "removed reactperf might readd later need rewrite anyway", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "closing stale", "d": "10/2017"}, {"body": "nt seem like happens", "d": "10/2017"}, {"body": "work react support unknown attributes please file new issue minimal reproducing example", "d": "10/2017"}, {"body": "problem methods take dom nodes arguments need first get dom node component pass example like", "d": "10/2017"}, {"body": "please file discuss react native community instead rn maintainers okay could take pr implementing", "d": "10/2017"}, {"body": "sounds interesting nt checksum validation anymore still need report differences mentioned approach let keep discussion", "d": "10/2017"}, {"body": "need full example reproducing look", "d": "10/2017"}, {"body": "confirm still happening react", "d": "10/2017"}, {"body": "looks like perf gone fiddle nt run running minimal example requirebin link seems fixed", "d": "10/2017"}, {"body": "thanks checking yea nt figured recreate perf new engine yet assumptions nt really hold true async case", "d": "10/2017"}, {"body": "also thanks backbone packages first open source js packages used life", "d": "10/2017"}, {"body": "glad help huge fan redux means lot", "d": "10/2017"}, {"body": "vanilla dom event work", "d": "10/2017"}, {"body": "sure executed snippet react works closing issue", "d": "10/2017"}, {"body": "still able reproduce issue react react", "d": "10/2017"}, {"body": "reproduce probably fixed chrome bug", "d": "10/2017"}, {"body": "pretty conservative adding deps think useful us thanks", "d": "10/2017"}, {"body": "investigation topic really annoying still problems custom components", "d": "10/2017"}, {"body": "working makes sense change behavior useful one react however require somebody actual research different options weigh pros cons come comprehensive proposal changes want see would like start working", "d": "10/2017"}, {"body": "happy help much react expert think pretty good idea things work custom element side wondering thought toward supporting model preact uses would help could put together doc outlines approach", "d": "10/2017"}, {"body": "happy help implement changes react plan formulated", "d": "10/2017"}, {"body": "yes doc proposal would help concern know preact model adding new property base class platform would become breaking change reactpreact users", "d": "10/2017"}, {"body": "gaearon ok put together doc ping thread review ready", "d": "10/2017"}, {"body": "sounds good robdodson thx doc idea", "d": "10/2017"}, {"body": "think got doc written reaching couple people feedback draft able share next week", "d": "10/2017"}, {"body": "sweet thanks", "d": "10/2017"}, {"body": "getting increasingly skeptical properties model infeasible use properties current ecosystem seems alternative feature test property use attribute basically prevents dom adding new properties least nodeelementhtmlgenericelement possibly even subclassing enabled since property added parent class switch use maybe could hasownproperty even would sketchy break many use cases serverrendering story custom elements way knowing property translates equivalent attribute even names render attributes add properties client seems two namespaces ca nt reliably combined alternative provide two namespaces react really idiomatic", "d": "10/2017"}, {"body": "possibly even subclassing enabled according customized builtin elements add new attribute names ones cover subclassing concern form subclassing concerned basically prevents dom adding new properties least nodeelementhtmlgenericelement seem like potential problem though also moment time may browser differences example global attribute currently supported firefox automatically added dom property chrome currently part html specification nt know get removed see seems quite possible cases global property additions future potentially would introduce breaking changes custom element implementations well react strategy basing attributeproperty decision property existing", "d": "10/2017"}, {"body": "seems two namespaces ca nt reliably combined alternative provide two namespaces react really idiomatic agree would nt idiomatic specified jsx via sort subdivision props subobjects eg thispropsattributes thispropsproperties etc providing api application code inform semantics custom element eg could object similar htmldompropertyconfig properties defined custom element rather platform still use properties defined platform", "d": "10/2017"}, {"body": "posted rfc discuss pros cons different options", "d": "10/2017"}, {"body": "kevinslin problem commenting unrelated issue never know problem since nt always check notifications known issues problem overall approach particular warning missed actionable since nt reported directly read comment year later close issue react allows return types give better messages component stack traces", "d": "10/2017"}, {"body": "clear expected warnings fire earlier might actionable errors fire later example refs warning includes component name stack traces", "d": "10/2017"}, {"body": "recent discussion", "d": "10/2017"}, {"body": "traversal", "d": "10/2017"}, {"body": "find see pull requests username", "d": "10/2017"}, {"body": "gaearon stale worked totally correctly unfortunately ever heard pushback seemed like simpler solution possible reexamined work several times see solutions feasible repeatedly came conclusion happy talk code follows general pattern necessary also came conflict longstanding request nuclide team regarding event bubbling nested roots necessarily version react nt looked see resolution issue", "d": "10/2017"}, {"body": "believe get fix free switch native events vs polyfill provided event bubbling nt wonky across roots normally", "d": "10/2017"}, {"body": "jquense could clarify reason polyfilled lack support native events mouseenter mouseleave events bubble per specification", "d": "10/2017"}, {"body": "quite right polyfill mimics native mousentermouseleave event behavior nt bubble either polyfill older chrome versions nt supported anymore", "d": "10/2017"}, {"body": "jquense saying instead using event delegation mouseenter mouseleave register native handlers underlying native elements nt recall would need done make approach play nice rest event system nt understand wondering event bubbling nt wonky across roots normally bubbling involved matter", "d": "10/2017"}, {"body": "sorry unclear suggesting instead react polyfill events rely native events would remove lot special code exists solely implement events bubbling poor choice words meant react tree traversal required implement polyfill react uses hunch avoid lean native events like dom events bug go away course may p", "d": "10/2017"}, {"body": "definitely worth consideration one thing lose ability batch think pretty edge case relevant single mouse event issued mouse moved way trigger one handler eg two boxes occupying screen space enter handlers mouse crosses boundary currently able single rerender would settle triggering one still necessary think hook native handler browsereventemitter", "d": "10/2017"}, {"body": "error exist anymore react", "d": "10/2017"}, {"body": "andreioprisan think issue readonly flag", "d": "10/2017"}, {"body": "gaearon question snippet posted really necessary manually remove event listener listener attached node directly wo nt removed automatically along node upon unmount know antipattern got curious would nt snippet suffice class mycomponent extends reactcomponent componentdidmount thisnodeaddeventlistener render return", "d": "10/2017"}, {"body": "case used html p p p tag nested webpack dev server works without error build project run code express ssr server side rendering error logged even though disable ssr component problem solved change parent tag solved problem", "d": "10/2017"}, {"body": "whatever cause error ca nt possibly happen react code rewritten also nt use comment nodes closing still experience similar error upgrading perhaps different message please file new issue reproducing example", "d": "10/2017"}, {"body": "think leave wontfix unless somebody motivated takes sends pr actually makes work", "d": "10/2017"}, {"body": "web living standard since jsx compiled html misunderstanding jsx compiled html compiled js meant represent ui components render react still uses js hood used browser js dom apis nothing react know automatically update attributes react decision browsers work obvious react update attributes tried cases due popular requests turned rabbit hole edge cases inconsistencies sure continue future please rely react changing attributes dom case reasonable thing search", "d": "10/2017"}, {"body": "react handles errors user code gracefully emit cryptic errors", "d": "10/2017"}, {"body": "get uncaught promise typeerror read property replacechild null see crashed explained means code dependencies using swallowing original error verify enabling break caught exceptions debugger closing react released surfaces original error even code accidentally swallows hopefully help people particular error happen anymore either", "d": "10/2017"}, {"body": "agree documented creating array elements reactcreateelement nt sure specify key nt question would nt answer documentation also would happen fi pass children prop also children third argument would take priority would result would throw error seems like loose ends need cleaned", "d": "10/2017"}, {"body": "documentation changes please file issue", "d": "10/2017"}, {"body": "affect propagation react event react component hierarchy", "d": "10/2017"}, {"body": "somebody confirm still happens react", "d": "10/2017"}, {"body": "never jest moved away automocking doubt add hacks jest core either", "d": "10/2017"}, {"body": "repro chrome maybe old chrome bug got fixed", "d": "10/2017"}, {"body": "gaearon chrome fine however safari still affected version macos", "d": "10/2017"}, {"body": "seem like common point confusion close", "d": "10/2017"}, {"body": "deleted need figure something future releases closed", "d": "10/2017"}, {"body": "face ondoubleclick event nt work ios device works well android iphone nt work also added cursor pointer still luck could issue", "d": "10/2017"}, {"body": "note code earlier comments work react also needed react passes custom attributes including long values strings numbers booleans need written explicitly strings close issue necessary specifically amp please file new one details", "d": "10/2017"}, {"body": "found google case importing", "d": "10/2017"}, {"body": "really relevant anymore", "d": "10/2017"}, {"body": "sound react related let know mistaken", "d": "10/2017"}, {"body": "regression getting issue windows", "d": "10/2017"}, {"body": "please file new issue details old issues lot outdated info hard track", "d": "10/2017"}, {"body": "tried using flow react createreactapp flow type errors nt show createreactapp console play nice standard eslint abandon last bit integration working flow nice use", "d": "10/2017"}, {"body": "nt reactperf need rethink", "d": "10/2017"}, {"body": "feel like ship sailed ton libraries react ecosystem already rely better worse changing involve ton churn worse change people update configs code silently fail deadcode eliminate popular bundlers like webpack", "d": "10/2017"}, {"body": "also mention regarding environment react ships separate entry points production commonjs bundles alias bundles force production environment even says otherwise workaround", "d": "10/2017"}, {"body": "also mention regarding environment react ships separate entry points production commonjs bundles alias bundles force production environment even says otherwise workaround", "d": "10/2017"}, {"body": "still issue original code would load videos would nt play ios fixed produces laggy experience video nt play immediately javascript class video extends component componentdidmount thisupdate see difference going ios desktop nt tried android", "d": "10/2017"}, {"body": "sorry check still reproduces react", "d": "10/2017"}, {"body": "think api like could make sense imagine might bit chaotic main idea render function generator able next states components would replace maybe could next level declarative nature react right able declarative describing ui looks basing current data approach could able declarative describing everything happen component lifetime complex scenarios could look like component really obvious component look state also next possible thing could happen current version react see possible scenarios possible sequences", "d": "10/2017"}, {"body": "omg sense today world better would use async javascript class userdata extends component render return good morning renderasync async gt const userdata await whendidmount fetchuser thispropsuserid return hello userdatausername gt loading e gt error", "d": "10/2017"}, {"body": "heuristic settled handling transient states dio allow promises render return types amp element types additionally allow promise component describe children render resolves example jsx const something promiseresolve something render loading", "d": "10/2017"}, {"body": "think particular warning anymore react instead detect development builds react devtools", "d": "10/2017"}, {"body": "vast majority cases error caught earlier error application code got swallowed thirdparty library application code react surface original error better case closing still experience upgrading react please file new issue complete reproducing example", "d": "10/2017"}, {"body": "believe fixed", "d": "10/2017"}, {"body": "use case like use method prevent container scrolling user dragging element inside need register event listener nonpassive passive false browsers switching passive true default like able opposite unfortunately able use style applied touch started probably nt effect", "d": "10/2017"}, {"body": "indeed going problem really soon surprised two years solution found creating event listeners manually antipattern react creates breaking changes may missing part story though", "d": "10/2017"}, {"body": "like new event listener signature proposed romulof besides fixing issue described would possible specify eventlisteneroptions", "d": "10/2017"}, {"body": "ran issue canvas user draw drawing android sometimes pull refresh instead paintstroke shows realworld problem avoiding manually use workaround much like approach romulof suggested seems solution also nt require breaking changes", "d": "10/2017"}, {"body": "bobvanderlinden adding canvas style work really shines use case possible values also quite convenient however piotrcz pointed nt universally solve passive events issue whole also running issue preventing container scrolling dragging child element workarounds pretty hacky add technical debt", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "hi folks progress similar jquense mentioned microsoft tracking fixing far populated expected react strips props thereby leaving way access", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "error exist react happen see different error instead please file new issue instructions reproduce thanks", "d": "10/2017"}, {"body": "close since different things discussed hard say status either please file new issue reproducing example still experience problems related", "d": "10/2017"}, {"body": "let track", "d": "10/2017"}, {"body": "think fixed react please file new issue", "d": "10/2017"}, {"body": "apply", "d": "10/2017"}, {"body": "reference solution", "d": "10/2017"}, {"body": "checksum warning checks still use notify differences might add way hook warning system later let track", "d": "10/2017"}, {"body": "nt maintain transitiongroup repository anymore new home", "d": "10/2017"}, {"body": "closing works designed use controlled inputs need ensure flush value changes react exits event handler", "d": "10/2017"}, {"body": "seems reasonable mirror browser api", "d": "10/2017"}, {"body": "like look could affect draftjs post get time", "d": "10/2017"}, {"body": "documentation turning production mode", "d": "10/2017"}, {"body": "close stale could certainly run testutils production mode wanted need bundle react commonjs obvious reasons include production build ship everyone actually regressed tracking", "d": "10/2017"}, {"body": "still issue", "d": "10/2017"}, {"body": "assume transient chrome bug later fixed still occurs please file new issue", "d": "10/2017"}, {"body": "aweary seems onload event getting dispatched supported", "d": "10/2017"}, {"body": "let track", "d": "10/2017"}, {"body": "clear react bug report question close stale problem please file new issue reproducible example preferably without third party libraries well please explain expected happen actually happens", "d": "10/2017"}, {"body": "realize old ticket might idiomatic ways things react hit issue related figured good place comment best way handle situations need measure component mounted prefer avoid need actually call component also dealing custom renderers sure implement furthermore css tricks like visible may apply example mean class mycomponent extends reactcomponent private instancewidth number issues approach bordering like within really since happen first time via cdm still feels icky extra private var dunno feels odd going blip wrong position truly rendered way around think manage via visual tricks like setting opacity love hear thoughts nt right way thanks", "d": "10/2017"}, {"body": "absolutely fine call read something dom supposed pure fact measurement use case one reasons exists react designed use case mind nt blip react processes synchronously avoid problem", "d": "10/2017"}, {"body": "closing stale", "d": "10/2017"}, {"body": "hello would like revive conversation adding another point view wir react possible mount components certain points dom using portals use case building different components like modals notifications rendered certain component mount like appjsx notificationjsx javascript import react react import reactdom reactdom import notificationcomponent notificationjs import singletonoverlay generaloverlayjs export default class notification extends reactcomponent constructor props super props thisstate element null componentdidmount thissetstate element reactdomfinddomnode singletonoverlay render return thisstateelement reactdomcreateportal notification thisstateelement null option would find domnode similar functions pass makes feel unpleasent forced leave reactcosmos therefore would love able search instances certain component pass function instead passing instance mentioned feature im also interested approaches solve problem jimfb would worth feature proposal", "d": "10/2017"}, {"body": "reproduce react", "d": "10/2017"}, {"body": "agree benmmurphy istarkov solution effectively using since nt solve garbage collection problem benmmurphy solution closer nulls wrong variables promise handlers dereferenced key passing function closure dereferences handlers const makecancelable promise gt let cancel gt const wrappedpromise new promise resolve reject gt cancel gt resolve null reject null wrappedpromisecancel cancel return wrappedpromise explanation solution allows garbage collection previous solutions found went ahead turned npm package trashable since use case react made hoc component tracks promises cancels component gets unmounted trashablereact", "d": "10/2017"}, {"body": "noted sophiebits likely use case think create dom element try assign different see one sticks example tell right syntax use helper function uses right syntax based feature test", "d": "10/2017"}, {"body": "close works designed think use controlled inputs expected update value synchronously need example debounce updating value example one might maintain two values state one input one debounced value", "d": "10/2017"}, {"body": "closing stale something fix react please let us know", "d": "10/2017"}, {"body": "end extensible system tried design really work even warnings quite slow development also pretty complicated design better one new engine like begin scoping warning hook first track", "d": "10/2017"}, {"body": "think likely going support anytime soon", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "lt", "d": "10/2017"}, {"body": "seems like particular bug fixed react", "d": "10/2017"}, {"body": "actually gone opposite direction minify even commonjs version production mode lets us apply optimizations would nt otherwise easy consistently regardless bundler consuming side nt expect people need debug react code nt plan provide unminified production mode feel strongly build react source disable minification", "d": "10/2017"}, {"body": "react nt use checksum validation anymore similar problem react please file new issue", "d": "10/2017"}, {"body": "close stale", "d": "10/2017"}, {"body": "unfortunately still issue old browsers unless globally polyfill symbol strategies discussed internally nt make", "d": "10/2017"}, {"body": "nt impression nt support use case could either use global polyfill enable transform", "d": "10/2017"}, {"body": "think many tool authors would happy even one version long gets job done otherwise done implicitly simply reliable worse still works fine modern dev browsers break hardtofind way legacy users hope team consider", "d": "10/2017"}, {"body": "react throw meaningful message gt nested updates", "d": "10/2017"}, {"body": "allow returning updaters prevent update", "d": "10/2017"}, {"body": "thing perfectly acceptable initial value example creating new object initialized w default values server passed component props form requires address address line often optional perfectly aware may may add value completing form suggested workaround seems hackey tell issue causes console warning know ignore warning distracting debugging actual errors", "d": "10/2017"}, {"body": "think first post bit misleading problem null value problem react treats flag make input uncontrolled turned confusing added warning discourage existing users passing null lets us safely change behavior future version treat null empty string nt done yet plan understand right maybe good time mind raising new issue discuss", "d": "10/2017"}, {"body": "gaearon thx", "d": "10/2017"}, {"body": "react nt transformation feel free file issue babel zpao say issue person badge repo downvote nt solution best react practice issue yet possible", "d": "10/2017"}, {"body": "wzup need combative zpao saying nothing react side needs fixed react assigning names functions production expected see minified names whole point minifying removes unnecessary code mangles identifiers development using minification first place minification causing minify developing minification needed ship production version app users finally absolutely need names minified builds assign manually bundle size larger case nothing done react side react issue rather issue locking discussion taking unnecessarily emotional tone feel free file new issue believe bug react handles please provide context think problem negative towards people trying help", "d": "10/2017"}, {"body": "seems like fixed", "d": "10/2017"}, {"body": "jest using supports printing react elements js import prettyformat prettyformat const reactelement reacttestcomponent prettyformatplugins test const renderer const element renderergetrenderoutput const formatted prettyformat element plugins reactelement printfunctionname false", "d": "10/2017"}, {"body": "yes use jest snapshots nowadays", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "attribute nt seem solve react workaround", "d": "10/2017"}, {"body": "use component stack trace would nt expect still problem", "d": "10/2017"}, {"body": "think probably solved portals", "d": "10/2017"}, {"body": "diu bu diu ren", "d": "10/2017"}, {"body": "close since fix also nt care prop order", "d": "10/2017"}, {"body": "henlz perhaps time file new issue reproducing example one pretty stale hard say even related", "d": "10/2017"}, {"body": "gaearon right create one details steps reproduce better discussion", "d": "10/2017"}, {"body": "close one unlikely make meaningful progress issue", "d": "10/2017"}, {"body": "currently exposed future plan batch default", "d": "10/2017"}, {"body": "think close hard type extra hand implicitly lead surprises", "d": "10/2017"}, {"body": "documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg", "d": "10/2017"}, {"body": "react render one element need enclose elements one single tag like case opening div element div closing div element div ie elements enclosed single div element making single element whole react render work", "d": "10/2017"}, {"body": "nt validate checksums anymore", "d": "10/2017"}, {"body": "realize replying comment year old anybody know workaround get scenario mentioned scottnonnenberg working unfortunately gaearon workaround applicable warnings still triggered quick test dan hackaround still seem work far see although realize far ideal example js import proptypes proptypes import react react import reactdom reactdom const customcomponent gt null customcomponentproptypes requiredbool proptypesboolisrequired let counter beforeeach gt customcomponentdisplayname test gt const div documentcreateelement div reactdomrender div test gt const div documentcreateelement div reactdomrender div test result following warnings consoleerror warning failed prop type prop marked required value", "d": "10/2017"}, {"body": "updates still seems inconsistency browser behavior demonstration shows differences adding listeners react plain js chrome react triggers event disabled button nt react nt trigger event parent node safari react triggers event disabled button nt firefox behavior consistent expected browser behavior", "d": "10/2017"}, {"body": "updates would issue would like look happens", "d": "10/2017"}, {"body": "yeah well finding happens hardest part basically react nt listen events probably bubble instead listens event one special case document uses reverse logic element moved sent synthetic mouseleave event element entering sent synthetic mouseenter event mouseout event typically fired move cursor element element viewport also fires move cursor button butting becoming native event react consistently sends event enter disabled button even browser nt consider mouseenter leave disabled button browser except firefox sends mouseout event react nt send left asymmetry next subtle difference wrap disabled button another element chrome still nt fire mouseout events safari fire mouseout event wrapper element possible solutions move cursor away disabled button browsers fire mouseover event disabled button becomes case using reverse logic consistently send appropriate mouseleave event therefore obtaining consistent probably expected behavior browsers react already uses event one special case mouse enters viewport one special case disabled form elements least invasive solution following cons detect user agent needed avoid sending duplicate events keep list node elements problem disabled chrome example disabled textarea nt suffer problem according mdn input types nt either chrome probably ie still miss event parent element size button chrome nt send mouseover event attach listeners node directly nt know possible current event system think remember talks concerning events delegating scroll events document sometimes actually worse performance personally think solution would best one would directly reflect native browser behavior case basically bug produces inconsistency browser behavior may least let decide path take fixing", "d": "10/2017"}, {"body": "thanks analysis nt enough context helpful next person visits try compile list issues need fix", "d": "10/2017"}, {"body": "hmm sure possible javascript directly possible something somewhat similar kin would allow hoc catch accesses undefined properties choose wants handle case may breaking thousand javascript laws concept seems help types situations languages perhaps something simple expecting returned prop either call provider caller expecting method calls function returns value otherwise throwing standard error js class forwardunknown extends component unknownpropaccessed prop thiswrapped amp amp thiswrapped prop return thiswrapped prop render return something along lines would think provide necessary options allow blind passthrough also hoc intelligently handle situation said hoc significantly complex looks like proxies could used provide kind functionality albeit performance hit likely problem", "d": "10/2017"}, {"body": "particular cache nt exist anymore react find others let us know", "d": "10/2017"}, {"body": "closing favor recent discussion", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "think might well consider converging test renderer api", "d": "10/2017"}, {"body": "year passed since last message facebook still pushing irrelevant ads dev console install msn toolbarww browser extension idea put youtube video autoplay stay classy", "d": "10/2017"}, {"body": "mvasilkov irrelevant believe possible install react devtools opera least heard pushing hard developing real apps without devtools pretty complex importance getting newcomers try larger annoyance brings minority users nt need really browser thing eg nt work opera happy add check disables opera specifically let us know", "d": "10/2017"}, {"body": "gaearon still nt see problem adding sort optin method disable message runtime definitely legitimate situations message might ideal even dev environment", "d": "10/2017"}, {"body": "gaearon rossipedia like example angular application", "d": "10/2017"}, {"body": "still nt see problem adding sort optin method disable message runtime method already even though hacky documented think want warning show app always use", "d": "10/2017"}, {"body": "gaearon probably hacky non solution offered especially hook changes since double underscore variable edit also dangerous approach submodule chooses optout opts everything", "d": "10/2017"}, {"body": "also dangerous approach submodule chooses optout opts everything problem added official api fact primary reason api seems unfortunate", "d": "10/2017"}, {"body": "gaearon optin", "d": "10/2017"}, {"body": "making optin defeats purpose people want reach wo nt know opt please try see annoyance affecting broader context think useful benefits ecosystem solution solve original problem", "d": "10/2017"}, {"body": "react developer able bootstrap react app whatever settings want meaning someone like could disable within react instance components would enabled current solution hook global variable really big problem every module type mentality would quickly called console spam", "d": "10/2017"}, {"body": "global hook absolutely understand appreciate value prefer optout instead", "d": "10/2017"}, {"body": "meaning someone like could disable within react instance components would enabled nt understand somehow opted would effect react nonreact consumers way could possibly help behavior global fact advocating global flag pretty much setting global gives agree hacky though open proposals", "d": "10/2017"}, {"body": "clarify nt react instance unless bundles whole react npm rightfully deduplicate react people whose apps already using react nt end two reacts bundle", "d": "10/2017"}, {"body": "like said react developer nt know workflow angular bootstrap multiple applications absolutely separate flag leave log react instance developer could toggle released widget currently global variable able mean bundled react instantiated react application", "d": "10/2017"}, {"body": "gaearon whoa talking dan abramov huge fan repetitive advertising browser toolbar irrelevant js console developer tool use accident actively want use stuff thing promoting developer tool want need also accidental made informed decision nt want could please allow developers choice adfree development environment pretty please imagine developers seeing facebook trendsetter start promoting stuff js console necessarily browser extensions referral links books amazon also thing youtube series lessons beginners would nt awesome download react devtools msn toolbar better development experience funky progress bar coolest thing npm click download new book jquery write like buy amazon check new trending sansserif fonts available google fonts failed load resource net errblockedbyclient consolelog let die together hell", "d": "10/2017"}, {"body": "sieabah sure concepts angular translate react specific api suggestions please let know mvasilkov agree theory practice need educate users devtools higher downsides noise users note two year old issue dozen people complained need invoke slippery slope message years nothing described happened open solving somehow open proposals proposal turn shows interested solving problem holistically including finding another way achieve initial goal educating beginners devtools", "d": "10/2017"}, {"body": "gaearon like said disconnect knowledge angular thing vs react works put simply angular run must bootstrapped essentially angular knows start module module instantiated configuration example module definition may something similar react would module instantiation actual react app could pull devtools module logs nt devtools installed disable logging instantiated application least offers optout method preferred enabled would look variable undefined log", "d": "10/2017"}, {"body": "sieabah know library using react render things loading react without rendering anything latter could change react log first render instead app startup former wo nt help", "d": "10/2017"}, {"body": "sophiebits essentially widget offers login prompt culprit line reactdomjs looking finds environment fbjslibexecutionenvironment application push something executionenvironment something equivalent saying disable logging environment instance believe fair tradeoff logs presented people react app devs publish widgets optout log", "d": "10/2017"}, {"body": "widget brokenbuggy would valuable users know tool debugging", "d": "10/2017"}, {"body": "gaearon still would useful developer choose optout logging narrowed bug would going github creating issue learn need configure debug widget", "d": "10/2017"}, {"body": "think nt expect care built react probably use production react build nt warning wonder currently always using dev build switches depending app prod mode", "d": "10/2017"}, {"body": "sounds like good solution could even offer two options one react users relies app react version one nonreact users includes bundled production react makes sense two audiences might want different apis react component vs imperative api nonreact consumers might build system nt know switch development production versions react", "d": "10/2017"}, {"body": "want pass startup config option whether debugdev mode enabled reliably compiled ahead time also good issue currently want app dev mode using production widget rely nodeenv nt correctly handle case", "d": "10/2017"}, {"body": "hi widget uses prod version react cdn add widget via npm users required bundle applications module bundler use prod mode set processenvnodeenv production make sense", "d": "10/2017"}, {"body": "getting error warning installed version react devtools old work current version react please update react devtools need put instead", "d": "10/2017"}, {"body": "easiest way completely disable something like webpack config disable warning devtools integration nt use webpack equivalents browserify plugin rollup simple string replacement like nt use bundler consume react single file set build step performs similar string replacement bundle sorry still frustrating believe sufficient address problem buildtime flag makes sense runtime one pretty build time flag would look like anyway dependencies use work top react may bundle react production mode see message first place use bundler approach suggested work closing", "d": "10/2017"}, {"body": "see explanation simulates react event fire event listeners added browser api", "d": "10/2017"}, {"body": "close report specify crucial details like os browser version able reproduce lack details assuming transient browser bug", "d": "10/2017"}, {"body": "think somewhat exotic use case unlikely provide hooks probably achieve overriding browser base implementations though", "d": "10/2017"}, {"body": "use since need react synthetic events react starts rendering never mind get point", "d": "10/2017"}, {"body": "react synthetic event handlers called inside browser event handlers react sets want something end every react event might well end every browser event said use case described probably solutions sends change event within sending event getters called store b store needs robust indeed annoying facebook flux implementation lets store express dependencies api lets ensure always processes event b also forbids cycles ie throw try register reverse dependency practice enough protection look derivative architectures lean functional territory eg redux nt many stores instead pure reducer functions result store updates always atomic would completely eliminate problem relying event system whether react browser seems like wrong direction actions could also dispatched inside timeouts ajax callbacks always outside events hope helps", "d": "10/2017"}, {"body": "get warning using tag intended warning tag unrecognized browser meant render react component start name uppercase letter", "d": "10/2017"}, {"body": "wildhoney nt seem right also nt seem happen create isolated example triggers preferably file new issue since easy lose reports old issues", "d": "10/2017"}, {"body": "sorry gaearon probably bit hasty posting message get warning running tests via enzyme perhaps related investigate take action necessary", "d": "10/2017"}, {"body": "oh means unsupported jsdom mind filing separate issue maybe somehow disable jsdom environment", "d": "10/2017"}, {"body": "jondum agreed also use things like search engines like since load run js react getting warning tag unrecognized browser meant render react component start name uppercase letter yes make question sanity", "d": "10/2017"}, {"body": "want ask follow question using create react app reactscripts okay define initial states javascript class foo extends component static defaultprops static proptypes state difference compare using constructors define initial states javascript class foo extends component static defaultprops static proptypes constructor props super props specifically performance implications first approach", "d": "10/2017"}, {"body": "exactly thing difference", "d": "10/2017"}, {"body": "jhabdas well defaultprops defined access class methods since returns", "d": "10/2017"}, {"body": "majioa nt know classlevel api one idea cache default props separate object refer think", "d": "10/2017"}, {"body": "majioa", "d": "10/2017"}, {"body": "reactperf nt work need reevaluate approach introducing something like think close since specific old reactperf", "d": "10/2017"}, {"body": "warn", "d": "10/2017"}, {"body": "seems like address", "d": "10/2017"}, {"body": "mistadikay warning referring", "d": "10/2017"}, {"body": "gaearon wish remembered almost years ago", "d": "10/2017"}, {"body": "seems like would reasonable fix anyone wants try probably want ensure test suite always end test", "d": "10/2017"}, {"body": "fix would suggest windowing eg reactvirtualized nt mind lower level caching react elements child referentially equal react skip reconciling", "d": "10/2017"}, {"body": "situation adding functionality component extending class button extends component componentdidmount logic setup listeners etc class lightbutton extends button componentdidmount make execute method componentdidmount button additional logic add even listeners let say button party library code modified", "d": "10/2017"}, {"body": "use jquery actually trigger dom events see approach yagudaev vitalyq helpful", "d": "10/2017"}, {"body": "think sophiebits example also presents less obvious place could break js class parent extends reactcomponent state person name dan cachedel handleclick gt thisstatepersonname dominic thisforceupdate even thissetstate render return function child props return hi propsname example one get updated one even though nothing wrong depend external data happened accept prop happened mutated instead copied", "d": "10/2017"}, {"body": "happened accept prop happened mutated instead copied nt understand sentence mutable props supported nt bad practice avoided cost", "d": "10/2017"}, {"body": "nice supported pointing case works react breaks optimization", "d": "10/2017"}, {"body": "specifically note mutating props mutating object state calling forceupdate always supported often way start integrating legacy codebase react", "d": "10/2017"}, {"body": "node etc use test renderer shallow renderer depend dom", "d": "10/2017"}, {"body": "portals crossrenderer yet think use cases thread fixed", "d": "10/2017"}, {"body": "close actively exploring web workers reasons exploring async work main thread cooperative scheduling though", "d": "10/2017"}, {"body": "react add dom attributes add element get work however would nice server side rendering translated rendered markup", "d": "10/2017"}, {"body": "react add dom attributes add autofocus true element get work believe react warn since intended spelling one handled specially probably planning pass normal version track", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "closing stale seeing reactdom size already become concern community probably stay userland unless somebody suggests really compellingcompact implementation", "d": "10/2017"}, {"body": "know issue old closed got googling thought leave note posterity since found easy way use reactchildrenmap approximate filter return nothing condition false return child condition true", "d": "10/2017"}, {"body": "seems like changing would solve practical problems experiencing would introduce new ones", "d": "10/2017"}, {"body": "seems like thoughts influenced new architecture currently actively thinking parallels closing", "d": "10/2017"}, {"body": "seems like use case niche effort make happen trivial close unlikely work", "d": "10/2017"}, {"body": "still problem react please file new issue", "d": "10/2017"}, {"body": "refiled", "d": "10/2017"}, {"body": "react docs recommend using plugin however work encountered nonunique ids managed avoid issue", "d": "10/2017"}, {"body": "sounds unfortunate file issue stop recommending docs find alternative", "d": "10/2017"}, {"body": "full reproduction vanilla react babel file separate issue", "d": "10/2017"}, {"body": "filed separate issue see", "d": "10/2017"}, {"body": "checksum validation anymore still expect trees match", "d": "10/2017"}, {"body": "understanding fixed please raise new issue", "d": "10/2017"}, {"body": "solution right", "d": "10/2017"}, {"body": "closing favor", "d": "10/2017"}, {"body": "closer able", "d": "10/2017"}, {"body": "thank filing issue documentation source code reactjsorg lives different repository reactjsreactjsorg info made move see issue moved issue new repo reactjsreactjsorg let continue discussion sorry inconvenience", "d": "10/2017"}, {"body": "closing stale still want let create new issue also mentions plays along prerendering", "d": "10/2017"}, {"body": "issue pretty stale close specific features miss shallow renderer please create new issues proposals work note added new test renderer much featurecomplete", "d": "10/2017"}, {"body": "close stale somebody needs please create new issue describing use case detail", "d": "10/2017"}, {"body": "verified print sensible messages cases lack deduplication filed", "d": "10/2017"}, {"body": "preferred way today", "d": "10/2017"}, {"body": "throwing trigger think nested updates", "d": "10/2017"}, {"body": "react return arrays need extra dom nodes", "d": "10/2017"}, {"body": "trueadm work creating nt used much browser vendors worked tests involving react nt think likely spending time close", "d": "10/2017"}, {"body": "seems like pretty odd api decision think want encourage relying could deprecated oddity also working new powerful toplevel api think becomes less valuable would let slide", "d": "10/2017"}, {"body": "see action item portals new react propagation works correctly across subtrees use case could fixed think support entirely correct behavior different roots close let know wrong", "d": "10/2017"}, {"body": "fiddle work anymore last comment several years ago close stale warn bad nesting hopefully problem", "d": "10/2017"}, {"body": "wanted add common way different clientserver markup set flag components need differ use clientonly elements", "d": "10/2017"}, {"body": "react component defined componentwillreceiveprops inside always called setstate object several members including objects seems caused runaway loop rerenders added code make call setstate conditional loop longer observed thought calling setstate componentwillreceiveprops also componentwillmount meant trigger rerender wrong changed", "d": "10/2017"}, {"body": "therealdebater nt sound related issue nt trigger extra rerenders please file new issue example reproducing", "d": "10/2017"}, {"body": "yes duplicate", "d": "10/2017"}, {"body": "closing stale use case makes difference please file new issue describe", "d": "10/2017"}, {"body": "dropped support imagine going last much longer special checks relevant days closing stale", "d": "10/2017"}, {"body": "seems like impossible support server rendering currently supporting subset attributesproperties compatible client server rendering need trivial implement component js class checkbox extends reactcomponent componentdidmount thiselindeterminate thispropsindeterminate componentdidupdate prevprops prevpropsindeterminate thispropsindeterminate thiselindeterminate thispropsindeterminate render return checkboxdefaultprops indeterminate false usage reactdomrender documentgetelementbyid root might gotchas see thread hope shows easy achieve react even without react directly supporting", "d": "10/2017"}, {"body": "think pretty unlikely crash app failing prop overriding note makes app less predictable since prop validation happens development means app fail development different ways production potentially leading unreproducible error reports production said fail fast crashes new error handling behavior react instead keeping tree around broken state unmount let opt graceful handling error boundaries way think add failfast mode react achieve warnings overriding wish caveats", "d": "10/2017"}, {"body": "hello guys watch link data server side rendering example", "d": "10/2017"}, {"body": "idk may seems like lot code get request post request", "d": "10/2017"}, {"body": "sorry busy rewrite react actively reviewing prs", "d": "10/2017"}, {"body": "fixed", "d": "10/2017"}, {"body": "sweat figured much react absolutely worth great work", "d": "10/2017"}, {"body": "portals introduced react let unite several dom trees single conceptual react tree understand correctly help address original problem described post event bubbling works respects react hierarchy portals sophiebits noted clear generic fix would like comments like sad bring us closer solving problem closing issue believe reasonable workaround portals exists react libraries providing modals migrate using portals experiencing problem different use case please file new issue describe detail preferably example unfortunately comments thread brief lacking details", "d": "10/2017"}, {"body": "apis like intersection observer react wrappers", "d": "10/2017"}, {"body": "closing stale practically solution would make sense seems like maybe best solution parent smarter realize removing active child unset active state property one would either update together treat recommendation rendering derive actual active item", "d": "10/2017"}, {"body": "closing stale enough interest please reopen file new issue", "d": "10/2017"}, {"body": "seems like went different direction longer viable", "d": "10/2017"}, {"body": "closing stale interest please file new issue", "d": "10/2017"}, {"body": "specialcasing specific operations like last child becomes first looks great benchmarks syranide noted leads unexpected differences performance make profiling harder issue moving different good solution either sure solving would worth complexity introduces close issue generic ideas improving diffing algorithm make better average case without hurting edge cases opposed adding special case let discuss new issue", "d": "10/2017"}, {"body": "update wrong see updating value input right away cause react actively revert old value would thought nt actually seem case need debounce someone typing supersonic become issue seems like common thing example rerendering preview embedded video changing url granted specific scenario people copypaste rather typing would pretty awful performance anyone manually typed wanted trim extra parts accidentally copied etc also important keep mind huge segment people around world nt working powerful computers like many developers people nt rich smooth experience also react takes care case anyway elaborate", "d": "10/2017"}, {"body": "iandunn scenario would nt need debounce related text field still want update text field synchronously response user input want debounce extra work triggered changes example code could look like js constructor props super props thisstate inputtext currenturl thishandlechange thishandlechangebind thisupdateurl thisupdateurlbind debounce thisupdateurl debounce thisupdateurl handlechange e thissetstate inputtext etargetvalue debounced thisupdateurl updateurl thissetstate currenturl thisstateinputtext render return way text updates happen synchronously expected video updated necessary", "d": "10/2017"}, {"body": "ah yeah conflating debouncing element debouncing update video preview also mistakenly thought input field working controlled actually uncontrolled wrapped component nt notice opened looked thinking debouncing controlled field would nt interfere value updated bad thanks reply", "d": "10/2017"}, {"body": "hmm neither see warning see apply style think fixed", "d": "10/2017"}, {"body": "closing stale built something static want make dynamic would annoying fix key warnings think fine always show", "d": "10/2017"}, {"body": "damusnet best way report problems react file new issues likely problems entirely unrelated issue discussed discussion buried three year old thread know problems", "d": "10/2017"}, {"body": "gaeron alright thanks nt sure deserved new issue open one", "d": "10/2017"}, {"body": "close stale argument consistency important also argument might want callback fired early possible changes flushed sometimes browsers looking ios safari prevent certain actions late think changing new thoughts would like revive discussion please file new issue", "d": "10/2017"}, {"body": "chrome ios make sure test autofill chrome suggestions ios keyboard emits autofilling values mobile safari hand emits chrome safari mac react nt use event regular seems root cause issue would nt possible react also trigger dom events would harm related issue chrome ios tested autofilling events following little page html windowonload function let elements documentqueryselectorall input let actions documentgetelementbyid actions let events focus blur keydown keyup change inputsplit lt p gt elementsforeach element gt eventsforeach event gt elementaddeventlistener event e gt consolelog e let etypenode documentcreatetextnode elementname gt etype ecode ekeyidentifier actionsappendchild etypenode actionsappendchild documentcreateelement br", "d": "10/2017"}, {"body": "reason want put input create many handlers really true example using single event handler multiple controlled inputs cases really want break react model use uncontrolled components escape hatch show warning use case neither options works well please file new issue describe detail", "d": "10/2017"}, {"body": "sort issue handling value changes onkeydown fix adding noop onchange handler mentioned seems absurd work around inaccurate warning sure uncontrolled component would really work case either mean guess could add handler using vanilla js ref element sounds dangerous", "d": "10/2017"}, {"body": "closing easy workaround string manipulation sending markup doctype comments react also support anymore remaining browser conditional comments relevant adding support comments doctype would span multiple projects react babel eslint etc yields little benefit unlikely working", "d": "10/2017"}, {"body": "problem rare hard enough unlikely spending time complexity increase code size introduce probably worth effort close issue unsolved open reviving somebody comes simple solution see", "d": "10/2017"}, {"body": "closing stale", "d": "10/2017"}, {"body": "closing stale someone affected please raise new issue discuss", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "advent portals react first time react event system felt dramatically different dom raised fact events bubble portals handy far seems make logical sense something works nicely current fallbacks adding dom events think divergence makes need api react event system even relevant", "d": "10/2017"}, {"body": "seems like use case niche noted separate imperative api unlikely seems like intermediate component best solution use case problems mentioned felipeochoa seem related thread let track", "d": "10/2017"}, {"body": "hmmm still need allow custom attributes regular dom elements used happy react longer expose object although see still use source code write release notes reactlib reactdomlib anymore lt gt let us know specific case new issue try figure migration strategy well please rely library turn relies custom elements web components provide layout happy chose path adding custom attributes elements feel like providing required markup accomplishable short still way tell react certain attributes okay nt issue reopened", "d": "10/2017"}, {"body": "everdimension attributes trouble arbitrary custom attributes work fine react default closed", "d": "10/2017"}, {"body": "ok found going current behavior something like bit surprising perhaps intended first case react also gives warning warning received nonboolean attribute expected cast value string intended update code accordingly", "d": "10/2017"}, {"body": "everdimension surprised custom boolean attributes supported examples use angularjs material angular flexlayout html first item row second item row probably legit use custom boolean attributes imho supported react", "d": "10/2017"}, {"body": "supported explicitly asks pass string value sure way tell apply boolean attribute cases applied setting empty value true removing false cases expects strings always pass automatically interpreted truthy string need explicitly specify depending used", "d": "10/2017"}, {"body": "gaearon would make sense simply treat versions flags still warn certain scenarios like passing custom attributes supporting libraries others may rely attribute simply existing specifically equal cases following would considered true following would considered false especially think proptypes flowtype typescript others attributes used boolean flags probably done explicitly also true bit cumbersome check rather methods", "d": "10/2017"}, {"body": "form works understand shorthand form feels nicer might actually confusing future discussions jsx spec repo changing semantics compile would align object shorthand form also make less cumbersome pass many props recommend relying shorthand form anyway changing anytime soon within", "d": "10/2017"}, {"body": "using works according html spec semantically using empty attribute latter implicit way give value empty string", "d": "10/2017"}, {"body": "everdimension gaearon indeed principal problem possibility falsepositive definitely high case becoming especially since principally values entirely opposite might well setting tests would yield result specifically talking boolean attributes current implementation consistent boolean attributes work boolean attributes number attributes boolean attributes presence boolean attribute element represents true value absence attribute represents false value attribute present value must either empty string value caseinsensitive match attribute canonical name leading trailing whitespace argue side intention specifically obviously setting absolutely pass boolean attributes specific types attributes specifically valid truthy value truthy values think big issue would moreso following result undesired truthy outcome instead rendering would rendered creating sort falsepositive desired intent would prevent attribute attached setting false current state true problem ensuring truthy value instead intuitively ensuring false value truthy real issue component example explicit course practice could current implementation much verbose cumbersome solution especially case large sets jsx markdown seems like viable one intuitive solution p", "d": "10/2017"}, {"body": "swivelgames get warning mentioned earlier boolean value unknown attribute render example remove boolean attribute use please refer previous issues topic context make onoff yesno boolean attributes work decide desired behavior boolean value passed unknown prop rfc plan attributes react boolean attributes web components understand html spec says boolean attributes recognize inconsistency react higherlevel abstraction boolean values sometimes represent enumerable attributes boolean set values example important implement solution context mind", "d": "10/2017"}, {"body": "thread getting really long every message spams lot people feature implemented react specific concerns ideas please file new focused issue thanks", "d": "10/2017"}]