[{"title": "children removed using clonewithprops", "body": "repro case", "num": "2441", "d": "10/2014"}, {"title": "merge classname using spread operator", "body": "using transferpropsto classname property would merged true using new spread operator one nicest features transferpropsto made extending existing components much easier created couple fiddles illustrate sure would considered bug understand would reasons incredibly convenient possible would nice utility method something classname merging maybe part addons", "num": "2440", "d": "10/2014"}, {"title": "react performance wrong", "body": "currently evaluation react vs angular new project one criterion looking performance particularly mobile devices built prototypes react angular found seeing huge render times particular page basically huge list prices prices react angular much quicker distilled prototype two sample apps basically rendering list numbers printing currencies react angular running react version using locale switcher took react around rerender entire list angular taking worked reactintl people found currency formatting consuming time thought well test heavily favors react basically every node rerendered locale changes added simple buttonclick counter top page measurements react took entire increment click rerender almost entirety wasted section react perf tools angular took clearly must something wrong react beaten handily angular initial render rerender page incremental render everything looks straightforward problem", "num": "2439", "d": "10/2014"}, {"title": "react docs outdated", "body": "seems like every time go look reactjs docs date become pretty troublesome team pretty much given referring documentation resides site unreliable incomplete proven much time spent work struggling figure things understandable new libraries sometimes team developing project looking developers take run would behoove keep documentation date developers testing trying work adequately develop using time energy compile exhaustive list issues outdated areas documentation one example toplevel api documentation page whose contents either deprecated dated methods like changed since per changelog posted paul oshannessy hard continue develop main toolset used outdated documentation references many developers side team share sentiment much documentation lacking trying take guys built build kickass web apps using reactjs help us smile", "num": "2438", "d": "10/2014"}, {"title": "warning jsx uses plain function react components valid react jsx transform", "body": "updated react mass warnings flood console seems elements using thing seems fix rebuilding imported var button reactcreatefactory require button like think rather unnecessary think purpose update thought createfactory would enough imported components use browserify helps create new elements fine createelement example without warnings try reuse elements exactly want use react warns cases gave specific element name nt right fixed putting createfactory require working jsx auto compiled gulpjsx think updated nt need jsx tags anymore warning give anything trace well pinpointed happening render method components elements reuse either imported ones others filescopemodule like anyone say missing ca nt purpose forced give imported elements different name assigning variable name createclass require one throw warning mean components valid valid react ca nt find much meant plain functions mentioned one blog updates tried making existing components new methods warnings persist exactly needed barebones avoid warnings ever break app new updates came everything worked fine transition big must missing essential thing", "num": "2436", "d": "10/2014"}, {"title": "access key within component", "body": "understand component key longer available component props one get access component key", "num": "2432", "d": "10/2014"}, {"title": "custom elements implied lowercaseconventionmd working", "body": "understand lowercaseconventionmd custom element names supported however try using following example gist jsx fails transformed misunderstanding wrong gist misleading", "num": "2430", "d": "10/2014"}, {"title": "thiskey seems always undefined inside react component", "body": "react attempt use thiskey inside react component simple test case could access value via removed", "num": "2429", "d": "10/2014"}, {"title": "nashorn server side rendering null function line number", "body": "hello react team poking around reactjs server side rendering nashorn keep getting annoying problem whole code single jsx file faulting code options select sort price variation symbol company sad things works browser java nashorn js engine hoping could tips could maybe solve see nashorn team bug js engine using react nt help ps branch precise context similar problem option problem var bugselect reactcreateclass displayname bugselect render function apple banana cranberry", "num": "2427", "d": "10/2014"}, {"title": "attribute button supported", "body": "docs ones taged list supported tags form autofocus formnovalidate", "num": "2425", "d": "10/2014"}, {"title": "documentation versions", "body": "would great documentation various versions react similar currently docs points latest version apps upgraded nice able refer documentation earlier versions also interested helping move towards react powered docs remove jekyll dependency without disturbing existing structure team willing consider contributions area sebmarkbage zpao", "num": "2424", "d": "10/2014"}, {"title": "bug typeapply error type apply function", "body": "reverted commits tonight learn reactjs stopped awesome specifically nuked nodemodules get fresh npm install happened led look type object debugger apply function typerenderapply function sure changed packagejson looks like", "num": "2423", "d": "10/2014"}, {"title": "breaking change transferpropsto semantics defaultprops take precedence", "body": "semantic interaction default props changed default props override transferred props previous versions react opposite would happen nt seem mentioned release notes fiddle intentional decision probably mentioned release notes unintended side effect internal changes default props probably fixed", "num": "2421", "d": "10/2014"}, {"title": "getting started section line srchelloworldjs translate correct vanilla js", "body": "current code hello world transform following buildhelloworldjs file reactcreateelement null hello world hello world nt show page instead want code would translate null hello world would happy submit request update file let know", "num": "2420", "d": "10/2014"}, {"title": "jsx spread syntax requires objectassign", "body": "new jsx spread syntax introduced described nice compile jsx uses feature see implemented objectassign since proposed feature supported firefox using jsx spread syntax necessitates using polyfill objectassign would great case seems like possible implement behavior without objectassign", "num": "2417", "d": "10/2014"}, {"title": "please add reactproptypescomponentclass similar reactproptypes", "body": "hello found useful able pass react component class ie result calling instance component child component eg generic searchresults accepts results array resultcomponent property used render method create search result pagesearch component passes pagesearchresult class searchresults component campaignsearch component passes campaignsearchresult although could map results result components higher hierarchy convenient handled generic searchresults component common logic performed construction result aside whether example good practice believe useful property type could added official proptypes list believe would almost identical function instead would call updated message must use either use custom function uses publicly exposed many thanks brendan", "num": "2411", "d": "10/2014"}, {"title": "batching update one component twice causing unpredictable lifecycle", "body": "one hard explain reproduce try using following mixin changed slightly original found gist back js var react require react var layeredcomponentmixin componentdidmount function thislayer documentcreateelement div documentbodyappendchild thislayer thisrenderlayer componentdidupdate function thisrenderlayer componentwillunmount function thisunrenderlayer documentbodyremovechild thislayer renderlayer function var layer thisrenderlayer unrenderlayer function thislayerwillunmount thislayerwillunmount thislayer moduleexports layeredcomponentmixin allows create layered components case modal dialog use following component build modals js var react require react var toolboxuseractioncreators require actionstoolboxuseractioncreators var modalstore require storesmodalstore function getstatefromstore return modalcount modalstoregetmodalcount var modal reactcreateclass componentwillmount function thissetstate modallevel modalstoregetmodalcount componentdidmount function modalstoreaddchangelistener thisonchange documentaddeventlistener keydown thishandlekeydown componentwillunmount function modalstoreremovechangelistener thisonchange documentremoveeventlistener keydown thishandlekeydown getinitialstate function return getstatefromstore getdefaultprops function return classname feature render function var classname thispropsclassname var modalbackdropclassname var handlebackdropclick thishandlebackdropclick var killclick thiskillclick var modallevel thisstatemodallevel var totalmodals thisstatemodalcount killclick function e estoppropagation handlebackdropclick function thispropsonrequestclose handlekeydown function e ekeycode thishandlebackdropclick onchange function thissetstate getstatefromstore moduleexports modal combination works perfectly close highest modal component used inside render method ie following error thrown element types tried including work fine throws following trace follows happens several modals top one dialog runs fine error weird thing app still runs fine error thrown impact apart thrown app performs using webpack build", "num": "2410", "d": "10/2014"}, {"title": "adding removing background style attribute creates unwanted styles", "body": "element depending condition may set background condition first true later false element left residual styles never set code output looks like html styles never set user code interfering styles css fiddle showing issue", "num": "2407", "d": "10/2014"}, {"title": "triggering file input click causes onchange event fire", "body": "jsfiddle demo must using first click browse select file onchange event fire alert appear second click trigger file input click select file onchange event fire", "num": "2406", "d": "10/2014"}, {"title": "functionprototypebind problem", "body": "js lib change functionprototypebind takes problem react", "num": "2404", "d": "10/2014"}, {"title": "updates background inline css properties rendered firefox", "body": "updates inline via style attribute rendered firefox created example example button click toggles elements height background color firefox height rerendered correctly background chrome ie toggle properties expected", "num": "2403", "d": "10/2014"}, {"title": "warn two versions react used alongside", "body": "people lose hours work debugging simple issue two versions react loaded time warning right away happens usually discover problem invariant violations descriptive eg think even saw warning said something like check two copies react loaded really cryptic reason nt want warn right away two copies react loaded", "num": "2402", "d": "10/2014"}, {"title": "replace jsx language extension tagged template strings", "body": "apologies advance wrong way start discussion could nt find suitable forum ml discuss tagged template strings part reason back compat deprecate jsx language extension use template strings may oversimplifying seems upgrade path users would replace things format unifying jsx would help save effort make tools intended work js work jsx example jshint jscs popular static analysis tools several tickets jsx support happy field however imo efforts would better spent getting tools ready instead know fb contributing back upstream awesome focusing help speed efforts hopefully react recent move get closer class syntax sign proposal seriously thoughtfully considered", "num": "2401", "d": "10/2014"}, {"title": "reactdominput throw error use mootools together", "body": "error stack first reactwithaddonjs componentname reactdominput propname onchange jump func mootools c null arguments proptypespropname jump reactwithaddonjs props undefined", "num": "2400", "d": "10/2014"}, {"title": "consider deferring rendering actually document", "body": "warn best practice defer container node actually document allows events work expected system could use indocument detection determine container document could either warn use hack defer rendering actually gets added document web components similar lifecycle hooks integrating would likely involve deferring work document", "num": "2398", "d": "10/2014"}, {"title": "errors react tutorial step", "body": "step tutorial get following error uncaught typeerror failed construct comment please use new operator dom object constructor called function pedagogical failing steps tutorial believe step come step happily update something agree", "num": "2395", "d": "10/2014"}, {"title": "stop treating key null unspecified key", "body": "issue remind us revert", "num": "2394", "d": "10/2014"}, {"title": "implement shallow testing", "body": "need way test output single level react component without resolving way bottom layer whatever thinking something like javascript var shallowrenderer reacttestutilscreaterenderer shallowrendererrender shallowrendererattachref myrefname somemock var result shallowrenderergetrenderoutput expect resulttype tobe div expect resultpropschildren toequal shallowrendererrender var updatedresult shallowrenderergetrenderoutput expect updatedresulttype tobe updatedresultpropsonclick mockevent var updatedresultcausedbyclick shallowrenderergetrenderoutput expect updatedresultpropsclassname tobe wasclicked var instance shallowrenderergetmountedinstance instancecustomfunction var updatedresultcausedbycustomfunction shallowrenderergetrenderoutput expect updatedresultcausedbycustomfunctionpropsclassname tobe custom basically fix needs go entire lifecycle reactcompositecomponent needs bail whenever would continued rendering", "num": "2393", "d": "10/2014"}, {"title": "render react components data attributes", "body": "nt know design wrong using bootstrap style application one features using popovers dont like looks messy abstract datacontent stuff react component would expect hover see contents react component rendered ever see way react land clean code separate components render components dataattributes", "num": "2392", "d": "10/2014"}, {"title": "feature request dynamic object literal property keys", "body": "spec would come handy allowing something like", "num": "2391", "d": "10/2014"}, {"title": "attach value nonform elements retrieve value", "body": "corresponding jsfiddle basically trying create auto suggest list trying attach onclick handlers list elements assign values however evttargetvalue retrieve value clicked list element wrong", "num": "2390", "d": "10/2014"}, {"title": "regression null key handling possibly intentional", "body": "code foo bar assigned implicit keys children gives error warning flattenchildren encountered two children key child keys must unique two children share key first child used renders foo key cast string reactelement gets checked null traverseallchildren guess okay intentional broke part ka upgrade sebmarkbage cc jdan", "num": "2386", "d": "10/2014"}, {"title": "strange behaviour svg defs", "body": "found case two similar functions output exactly dom element work different ways missing something difference moved defs block render function renderdefs function var mainview reactcreateclass getinitialstate function return showdef false changedefs function renderdefs function thisstateshowdef return null return render function var fillstyle thisstateshowdef fill url fill red return fixme verion nt work clues renderdefs function thisstateshowdef return null return render function var fillstyle thisstateshowdef fill url fill red return thisrenderdefs", "num": "2380", "d": "10/2014"}, {"title": "question flow released month", "body": "subject important waiting atscale conf", "num": "2379", "d": "10/2014"}, {"title": "new method implicit keys traverseallchildren", "body": "current state implicit keys react psuedojsx good reconciles good reconciles bad destroys bad destroys propose arrayset ignore tailing subarray indices value root child index currently case except broken objects first reactnode every array reconciles depth want improve maps reconcile way previous indices discarded map encountered possibly discarding entire computed name far even pseudojsx showing new indices would computed discarded examples top reconcile correctly cc sebmarkbage", "num": "2378", "d": "10/2014"}, {"title": "deprecate isvalidclass", "body": "deprecate isvalidclass function returns object render method valid class probably nt want assume valid prototype nt allow module pattern used really difficult validate without invoking static type system shines dynamic check isvalidclass would turn nt need function generally want validate something extra class anyway eg method render table cell", "num": "2374", "d": "10/2014"}, {"title": "reactcsstransitiongroup specify component properties", "body": "reactcsstransitiongroup default render span component introduce new dom element need counted css example using flex box layout html problems see span default inline element need redefine css styles css becomes complex example require write css like working example reactjs documentation offers two options use reactdomdiv write component ok write component flewrow flexcolumn flexdirection column solution endup lot components basically render one div element different classes flexrow flexrowreverse flexcolumn flexcolumnreverse way specify properties transition group component nt find anything source code documentation", "num": "2371", "d": "10/2014"}, {"title": "rendered markup roots added reactmount node cache", "body": "reactmount caches children parent visits avoids worstcase exponential cost however use reactdomidoperations updates forces reactmount populate cache previous children newly rendered node needs found children parent newly rendered root retraversed exist node cache since guaranteed siblings newly rendered roots cached reference node trivial manually add node cache avoid doubletraversals entirely", "num": "2365", "d": "10/2014"}, {"title": "internal api terminologynaming", "body": "actually takes element following also named mount another component perhaps necessary inherited exposed user classes go etc clarity callsites perhaps true guess justification loops back actually intended cc sebmarkbage zpao", "num": "2354", "d": "10/2014"}, {"title": "use arrays children reactcreateelement", "body": "thought bring set stone since intended mostly nonuser feature understand would nt make sense take opportunity also change signature avoid varargs potential perf boost nonscientific test ps hmm guess already support simply providing array children seems touching significant slowdown relatively necessarily practice cc sebmarkbage", "num": "2351", "d": "10/2014"}, {"title": "update docs", "body": "bunch things need documentupdate x new terminology elements nodes x rewrite jsx depth bit tough update piecemeal x factory usage best practices x changes x fix documentation changes x newfixed dom attributes x docs license x new methods old methods x authors amp acknowledgements addons update probably mention", "num": "2347", "d": "10/2014"}, {"title": "mixin render unordered mode like sets", "body": "similar would love tell react component nt care order render elements minimize dom operations maintain elements key effect whenever rerender happens react removes elements longer new elements appended end order never accounted sets may available many browsers would love similar feature implemented objects explanation right passing array children keys property order preserved usually correct behavior however projects using trick famous render elements using values instead case elements anyway actual order dom matter major benefit trick eliminates almost dom operations except updating styles page reflow paints great performance problem react maintaining order children react reorders dom elements anyway ways keep track every render manually reorder data prevent rerenders got better way", "num": "2346", "d": "10/2014"}, {"title": "refer window object", "body": "timer example pass cause keyword function point object works ca nt figure", "num": "2342", "d": "10/2014"}, {"title": "reacttransitiongroup overwrites children ref prop", "body": "uses children overwrites prop see", "num": "2341", "d": "10/2014"}, {"title": "adiacent blocks", "body": "hi looking already issue nt find anything open bug however feature request right things like jsx needs enclosed container possible allow without container thanks", "num": "2338", "d": "10/2014"}, {"title": "testutilssimulatemousedown nt trigger focus event", "body": "code js jsx reactdom var button reactcreateclass render function return test handlemousedown function consolelog handle mouse handlefocus function consolelog handle focus var button reactrendercomponent documentgetelementbyid content reactaddonstestutilssimulatemousedown buttongetdomnode outputs expected output like real browser demo", "num": "2336", "d": "10/2014"}, {"title": "jsx compile string instead object instantiation", "body": "example opt convert instead", "num": "2335", "d": "10/2014"}, {"title": "custom events", "body": "wondering considered way make custom events something like could used parent component could look like perhaps course might already possible considered nt find information thoughts", "num": "2334", "d": "10/2014"}, {"title": "missing important info post", "body": "hi think article forgot mention need put make test suite work omitting put lines npm config resulted test error namely think suite nt knew find resources mentioned article sorry nt find anything cheers jim", "num": "2333", "d": "10/2014"}, {"title": "onchange fire multiple times single change", "body": "run code select text type character show changes rather one think anyone really cares would notice", "num": "2332", "d": "10/2014"}, {"title": "nasty user input bug", "body": "use backspacedeletepastecut input field undo notice entire document revert redo type something boom react throw invariant stop function dom mutated normally dom updates clear undo history inputs however happen circumstances reason would assume listens many different events broken like var app reactcreateclass getinitialstate function return changes handlechange function e thissetstate changes thisstatechanges render function return thisstatechanges thisstatechanges null reactrendercomponent documentbody test cc spicyj", "num": "2331", "d": "10/2014"}, {"title": "attribute support number", "body": "data attribute formatted wo nt rendered html example notice show rendered result", "num": "2329", "d": "10/2014"}, {"title": "figure sometimes undefined", "body": "exists places code able reproduce anyone idea", "num": "2328", "d": "10/2014"}, {"title": "reactdominput unnecessarily traverses node mount", "body": "preferable access directly", "num": "2327", "d": "10/2014"}, {"title": "using sidebyside provokes invariant errors browserify", "body": "using different modules provoke invariant errors mixed together use either components required also provoke invariant errors used inside components regression since reactaddons made specifically reason since marked deprecated", "num": "2326", "d": "10/2014"}, {"title": "immutability helpersupdate would nice also include inc", "body": "one important list would really useful updates shared space used client side server side way nt need rewrite logic places nt know useful would nice addition", "num": "2325", "d": "10/2014"}, {"title": "title tag loses datareactid parsed", "body": "parser seems ignore attributes tag losing datareactid documentqueryselector title getattribute datareactid null react later complain working around small wrapper component resets attribute added", "num": "2323", "d": "10/2014"}, {"title": "using img onerror within array map", "body": "hey guys trying generate list images using arrayprototypemap want use onerror function image found please take look fiddle clue wrong", "num": "2321", "d": "10/2014"}, {"title": "unhelpful error two react components responsible updating div", "body": "moron two separate react components responsible div nt quite obvious real life ultimately boiled caused whole page freeze browser killed warning error react gave help trying diagnose issue react attempted use reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injectednew markup compensate works lost many benefits server rendering instead figure markup generated different client server", "num": "2319", "d": "10/2014"}, {"title": "support insertion points", "body": "web components used intertion point something react work could like coffee reactcreateclass render gt div b reactcreateclass render gt div b b supposed work even find inserting components sending props looks quite ugly several nodes insert better solutions", "num": "2318", "d": "10/2014"}, {"title": "update examples reactcreateelement", "body": "least one nt use jsx", "num": "2315", "d": "10/2014"}, {"title": "need show message devtools installed", "body": "every time run react get message despite aleady installed bug plan disable message", "num": "2314", "d": "10/2014"}, {"title": "list property updated correctly", "body": "testcase code basically jsx says one big another rerender attribute updated", "num": "2309", "d": "10/2014"}, {"title": "go github first", "body": "making efforts move development react happen github first facebook simply another consumer historically mostly done opposite way prs needed pulled fb ensure nt break products etc result moved slow occasionally dumped large changesets without context syncing commits worked awkward resulted mistakes something way data flow dangerous number things need internally externally wo nt happen overnight use issue track things need externally make lint work consistently noisy unusable right faster everything basic buildtest process slow jest helps resolve differences internal external code reactversion commentedout warnings", "num": "2307", "d": "10/2014"}, {"title": "drop reactlink hooks controlled components", "body": "reactlink supports sort adhoc twoway data binding found distraction rather helpful nt plan adding core outside addons anyway take support controlled components make wrappers used instead controlled components put wrappers addons provides backwards compatibility without legacy remain core", "num": "2302", "d": "10/2014"}, {"title": "nonsensical names test methods", "body": "scryrendereddomcomponentswithclass kind joke name scary stand something else", "num": "2301", "d": "10/2014"}, {"title": "extending lifecycle direct communication component tree", "body": "want extend lifecycle react components giving children declared thispropschildren opportunity vote whether ready rendered asynchronous fashion want postpone actual rendering ready one usages would showing loading animations root component rather children want something like problem direct access actual component descriptors call customdefined methods component using static methods also resolve problem may rely component current state acceptsmount implementation ideas achieve", "num": "2299", "d": "10/2014"}, {"title": "safari bug attempted assign readonly property", "body": "specific safari breaks updatejs addon place fixed", "num": "2298", "d": "10/2014"}, {"title": "accept iterables collections children", "body": "react currently accepts arrays children var array spans would excellent generalize concept accept collections iterables collections set map immutablejs variants identified implement result calling iterator iterables array arguments object arrayish things thirdparty data structures identified returning iterator cases left iterator point extracting children becomes straightforward unlocks really useful things use immutablejs react efficiently var data immutablevector b c datamap str gt strtouppercase use generators var data function yield yield yield data", "num": "2296", "d": "10/2014"}, {"title": "scroll momentum stopped rendering", "body": "see jveux react version infinity know updated version react get result works seamlessly let go trackpadmagic mouse know momentum scrolling kicks scrolling suddenly stops rerendering reduced testcase experiment get result change color visible items vs nonvisible ones lag little bit lost struggling days trying different ways implement infinity react known issue issue hintsworkarounds", "num": "2295", "d": "10/2014"}, {"title": "better api assigning keys components", "body": "describes key attribute assigned one ways providing object objects unordered hack described try work around fact problem unspecified implementationdetail think bad idea rely unspecified implementationdetail nothing preventing browsers changing order past example see specifically later comments note differences browsers understand days browsers maybe reached consensus faster way objects see changing also think better api code basically wants array pairs object nt support array key component instead afterwards objectbased solution could deprecated", "num": "2294", "d": "10/2014"}, {"title": "react mutates event objects", "body": "code accesses eventtarget asynchronously surprise react mutating event object removing useful properties synchronously emitting event seems like broken behavior html react mutating event objects react mutating event objects", "num": "2293", "d": "10/2014"}, {"title": "removing leave classes csstransitiongroup nt work well alternative batching strategies", "body": "hi probably design wanted make sure problem using together raf batching strategy aware raf batching officially supported works well solves quite problems app nt want give problem following removes classes calling really necessary batching strategy default may raf result classes removed tick element removed dom thus element flickers move calls behind condition transition group behaves fine missing something edit indeed missing situation fire another case wo nt work still wish way around", "num": "2292", "d": "10/2014"}, {"title": "call setstate onblur stops event propagation necessary use windowsettimeout bug flux", "body": "callback onblur call setstate based state buttons may removed screen problem one buttons callback needs run onblur caused clicking button setstate called onblur callback callback button onclick run maybe technically visible verified button callback works fine onblur callback call setstate worked around issue using windowsettimout calls setstate right approach bug flux callbacks nt run expectation callbacks would run setstate calls would cummulative thanks advice", "num": "2291", "d": "10/2014"}, {"title": "reactaddonscsstransitiongroup nt work inside element chrome", "body": "repro create component renders tag list visible elements wrap inner elements expected elements display transition classes work elements added removed actual elements visible jsfiddle", "num": "2290", "d": "10/2014"}, {"title": "drop uppercasing reactdomcomponenttagname", "body": "works well visually highlighting html tags print somewhat weird svg web components also public property could used purposes would also mean drop internal use unless considerations", "num": "2288", "d": "10/2014"}, {"title": "templates", "body": "idea looking reactjsx examples noticed something place jsx shows render function trivially rendercomponent function ends looking lot like regular html template strange limitation handle looping since template syntax got thinking could probably write templates old templating language programmatically convert react elements could write templates resembling jquery angular django even haml custom parserconverter build react templates could without jsx involved would probably look better wonder main appeal jsx overcome lack multiline string syntax javascript first thinking easy put templates heredoc sting parse use coffeescript exists alternative ways organize things angular reference templates url dev preload page production save requests lot like using requirejs production polymer widget gets html file including element element template behavior side side could done react substitute element available combine html files dynamically dev statically production using vulcanize polymer way seems pretty tempting honestly using polymer instead support p could add looping jsx probably look good already preprocessing script anything possible", "num": "2286", "d": "10/2014"}, {"title": "displayname available instance", "body": "jsx infer component name variable assignment specify class displayname accordingly really available class instance react even set explicitly also componentdidupdate prevstate seems current state sure browserify bundling js tried everything prevstate always logs current state post update", "num": "2285", "d": "10/2014"}, {"title": "warning proptypes", "body": "saw several places code base following issue would nice react warned accidentally write instead", "num": "2284", "d": "10/2014"}, {"title": "highlight", "body": "highlight little second code sample highlights nt change nt highlight line adds", "num": "2282", "d": "10/2014"}, {"title": "event bubbling", "body": "hi ran today issue event bubbling child components parents problem follows child component handles form attaches onsubmit event form submit child handler stuff nt return false event bubbles parent component attaches one onsubmit handler child handler nt get called funny thing attach onsubmit handler element wraps child handlers get called sample code fiddle available js var parent reactcreateclass var child reactcreateclass reactrendercomponent documentbody nt know expected behaviour bug nt found anything related documentation previous issue", "num": "2281", "d": "10/2014"}, {"title": "provide deferupdate method feature request", "body": "hi flux architecture seems recommend react elements bind change event listeners stores call changes occur generally find deferring forceupdate calls useful prevents multiple calls forceupdate tick think idea comes reactmixinmanager provides one implementation personally seen performance boost think using following simple mixin sure good idea generally incorporated react core thought throw meta issues like encouraged frowned upon know large project lot real issues core devs need paying attention", "num": "2280", "d": "10/2014"}, {"body": "correct design updating value input controlled input information docs", "d": "10/2014"}, {"body": "ehm think something caused need recheck bad", "d": "10/2014"}, {"body": "often abbreviated", "d": "10/2014"}, {"body": "spread operator part spec jsx nt change implementation details also specific dom components something like closing intended behavior", "d": "10/2014"}, {"body": "internal helper could expose addon also use simple concatentation hoping able something like might performant either way explicit less magical make easier understand going tends convenient saving typing problem magic nt know props magic behavior exactly might", "d": "10/2014"}, {"body": "pull mixin determined account render cost", "d": "10/2014"}, {"body": "deleted previous comment clearly wrong though yes take measurements without mixin", "d": "10/2014"}, {"body": "ok removed mixin internationalization still render time list counter update", "d": "10/2014"}, {"body": "react wrapping composite component currently significant overhead used large numbers thing angular react remain performant scale must use ca nt though example adding reduce update time significantly pretty sure running react debug mode significantly slower react best bruteforce performer ie tons tons nodes tends perform consistently dealing complex uis angularko often buckles important consideration react meant every usecase easy escape need render huge list dom nodes angular need never react also makes rather easy render ondemand preferable imho personal opinion react fast enough needs notice slowness everything snappy even switching views confident app grows continue perform equally well even nt case component model react fantastic would give lot ps updating single huge array items worstcase react always create virtual dom element items even though may changed absolutely need ondemand grouping items way increase performance significantly skip large parts array", "d": "10/2014"}, {"body": "syranide thanks feedback regarding points nt think numbers component loops number maps li shouldcomponentupdate spend partial update significantly shame required though get things decent performance seems like easy introduce bugs things wo nt update originally tried production mode significantly speed things maybe look something like get range angular yes weighing head surprised see react underperform compared angular almost everything read talked react speedy fact blog post speeding large list rendering angular using ngreact render react wanted make sure nt something would look say duh course getting bad performance compared angular", "d": "10/2014"}, {"body": "sorry another tl dr rendering x amount instead x amount directly react recommends immutable data becomes super cheap super simple nt implement hand every component mostly use mixin find component hotspot add simple check two familiar different tests angular render simple large lists fine data dependencies become complex nonobvious tends become huge issue rarely good way solve seems exact problem ko across entire app experiences understanding react react never best performer simple somewhat synthetic usecases much overhead setting things dealing components much consistent performer even approach worstcase think main takeaway performance subpar react app solution apply simple intuitive optimizations mostly whereas angularkoetc goto often avoid language features apply various workarounds personally used disappointed every framework react worked fantastically start finish consistent performance codebase beautiful readable reusable ever also confident tons researchtype optimizations react eventually apply squeeze every drop performance react incredibly naive current existing codebase components look work reason choosing react want work uis react best everything right feel free drop channel irc questions", "d": "10/2014"}, {"body": "came introduces lots trivial still breaking changes docs yet pushed check repo md files date issue recent impression docs page date week", "d": "10/2014"}, {"body": "date know couple small things left mention deprecated apis new adding docs otherwise updated launch pushed site latest api mistakes omissions please tell us nt bottle ca nt fix problems nt know first hearing problems extent seem describing", "d": "10/2014"}, {"body": "using jsx must use use result tag jsx use class ie value intimately familiar tests various warnings explicitly says warning jsx uses plain function react components valid react jsx transform ie function foo return valid anymore", "d": "10/2014"}, {"body": "one place seeing people get tripped tooling upgrading react without upgrading jsx transform pipeline using reacttools directly reactify library transform must also updated said updated gulpreact l would double check inserting createfactory calls would fix jsx uses still transforming old pipeline easy way check look compiled output createelement nowhere found still using old jsx transform", "d": "10/2014"}, {"body": "duplicate design", "d": "10/2014"}, {"body": "example used indicate html tag called react would use custom component currently jsx transform still check whitelist known html elements wo nt future release allows upgrade without breaking completely mysterious ways eg break compile time nt ship code like production", "d": "10/2014"}, {"body": "intention future version whitelist checked able render custom elements least hoping case want able render webview tag likely little obscure warrant whitelisted", "d": "10/2014"}, {"body": "correct yea would nt add webview whitelist anyway obscure nonstandard tag", "d": "10/2014"}, {"body": "support requested", "d": "10/2014"}, {"body": "closing issue noted could use directly however available part jsx transform", "d": "10/2014"}, {"body": "using workaround", "d": "10/2014"}, {"body": "design believe sebmarkbage", "d": "10/2014"}, {"body": "yea design note change log reason concept key something controlled react internals component gets created thing refs think array map map series tuples react fragment series tuples also key designed decide value slot actual value reading prop named might overloading meaning accidentally using something unrelated change makes concept bit strict helps avoids bugs transferring props another component nt bring key ref along also helps performance ensure types react internals consistent stable would suggest renaming duplicating prop name possible fix really need access", "d": "10/2014"}, {"body": "thanks sebmarkbage really appreciate response kept reading change log related still could nt figure meant said available element directly example seemed pair expecting changing course nt work anyway add new prop thanks response", "d": "10/2014"}, {"body": "agree dcneiner could clarified better first line changelog reads refs accessible yes key confusing", "d": "10/2014"}, {"body": "willdady result assigned children value component updating unmounting result assigned associated element element refers instance defined special use react values used purposes address seems confusion correct within component instance", "d": "10/2014"}, {"body": "thanks extra info syranide makes sense explained thanks", "d": "10/2014"}, {"body": "nt quite enough info help attach stacktrace possible hitting code using implied globals eg though thought safeguarded", "d": "10/2014"}, {"body": "jvm nashorn stacktrace nt think help reactjs file problem happens line renderedcomponent thisrender", "d": "10/2014"}, {"body": "java stack nt interesting helpful get js one", "d": "10/2014"}, {"body": "tweaking catch error reactjs file js stack trace get lines normally respected", "d": "10/2014"}, {"body": "lead help", "d": "10/2014"}, {"body": "handled run time others missing", "d": "10/2014"}, {"body": "totally agree actually planning least initially linking documentation stable branches stopgap solution since api documentation lot explanations interpage links sometimes wording updates releases little tricker node docs yes open change let discuss drop complete change us thought", "d": "10/2014"}, {"body": "reference underscore serve git tag page rawgithub user requests older version nice permanent solid solution though", "d": "10/2014"}, {"body": "would nt work us great idea maybe something vein though", "d": "10/2014"}, {"body": "problem get back get app working", "d": "10/2014"}, {"body": "roycehaynes could please rename bug bug typeapply error typeapply function regards", "d": "10/2014"}, {"body": "natim swtiched continue problem", "d": "10/2014"}, {"body": "switched", "d": "10/2014"}, {"body": "natim updated title", "d": "10/2014"}, {"body": "roycehaynes thanks", "d": "10/2014"}, {"body": "include minimal code reproduces error", "d": "10/2014"}, {"body": "look example le oct paul shannessy notifications githubcom \u00e9crit include minimal code reproduces error reply email directly view github", "d": "10/2014"}, {"body": "bah know happening reactify issue filed details basically install reacttools nt", "d": "10/2014"}, {"body": "natim hmm able fix issues upgrading reactify locked reacttools version correctly however still seeing issue cloning repo running using npm suspicious different npm versions installing packages different orders reactify installed first reason nt see reacttools also going installed meets version dependency install reacttools version npm using", "d": "10/2014"}, {"body": "zpao experiencing issue airbnb starting yesterday afternoon looks like fixed version reactify create test react app shows error", "d": "10/2014"}, {"body": "natim amp zpao thanks guys validating crazy basically reactify upgrades react creates issue solution upgrade reactify", "d": "10/2014"}, {"body": "case nt following along reactify issue updates released branches locking reacttools version still suspect something related npm causing inconsistent repro fine thanks bringing", "d": "10/2014"}, {"body": "deprecated explanation", "d": "10/2014"}, {"body": "ah yes one reasons deprecated probably mention clearly release notes thought changed guess nt", "d": "10/2014"}, {"body": "also", "d": "10/2014"}, {"body": "typically whole point deprecating something give people time transition away break semantics deprecating might well remove entirely least way avoiding potentially insidious bugs come breaking change making clear people upgrade without code breaking", "d": "10/2014"}, {"body": "yes try hard lot changes went one sequencing difficult get right could deprecated introduced spread syntax earlier hindsight transferpropsto rarely used outside facebook deemed nt need release codemod go nt consider former facebookers might use prevalent sorry oct stefano j attardi notifications githubcom wrote typically whole point deprecating something give people time transition away break semantics deprecating might well remove entirely least way avoiding potentially insidious bugs come breaking change making clear people upgrade without code breaking reply email directly view github", "d": "10/2014"}, {"body": "technically transferpropsto nt change semantics affected defaultprops changing semantics breaks used together update post reflect breaking change", "d": "10/2014"}, {"body": "part changes introduced details", "d": "10/2014"}, {"body": "got thanks anything done update getting started page set", "d": "10/2014"}, {"body": "set previous versions docs available github using lt branches need", "d": "10/2014"}, {"body": "fwiw still write work left convenience functions place however compositecomponent need bit wrapping see docs details", "d": "10/2014"}, {"body": "actually like idea using objectassign encouraging use standard however seems counterproductiveredundant implement objectassign internal use exposing reactspread especially objectassign commonly used couple internal apis listen could exposed nt implemented twice", "d": "10/2014"}, {"body": "think radical least doc explain something like use transferpropto function compatibility due case feel react credible popular words chinese \u6b65\u5b50\u5927\u4e86\u5bb9\u6613\u626f\u5230\u86cb means step big ball break", "d": "10/2014"}, {"body": "dandelany feature never announced nt quite done yet spread attributes jsx require calls original intention require polyfill react core like features direction heading checkout presentation rationale transpiler react likely take dependencies polyfills future especially features unfortunately wider js community polyfilling infrastructure pretty poor eventually decided taking dependency react core dexbol main docs updated alternative patterns nt want follow along progress standards", "d": "10/2014"}, {"body": "closing since already addressed", "d": "10/2014"}, {"body": "sebmarkbage thanks explanation apologies confusion installed accidentally still testing project used great presentation definitely agree reducing api surface area bringing abstractions control though bit worried polyfilling work seems like options none great bundle polyfills internally react eg react namespace modules bad problems mentioned fact ca nt refer via normal syntax bundle polyfills react overwriting globals eg objectassign seems weirdbad practice touch globals user could already polyfill place repolyfilling still maybe best option require users polyfills place react work properly allows people use polyfills want significantly increases barrier entry getting react working new dev curious react planned approach definitely easy problem solve", "d": "10/2014"}, {"body": "ran well upgrading couple widget components useful pass element type use internally part markup would nice stricter validation coffee widget reactcreateclass proptypes label reactproptypesstringisrequired labeltag reactproptypescomponentisrequired used work getdefaultprops gt labeltag reactdomspan render gt reactdomdiv classname widget propslabeltag classname label propslabel reactrendercomponent widget label wahoo labeltag reactdomstrong mountpoint", "d": "10/2014"}, {"body": "spent day still closer solving since found though use esc key close modal error thrown", "d": "10/2014"}, {"body": "like error says seems calling component unmounted go calls make sure correct log figure one called late", "d": "10/2014"}, {"body": "point tho coming component see components", "d": "10/2014"}, {"body": "debugging deep core components marked causing problem really nt get component update unmounted etc fine", "d": "10/2014"}, {"body": "uses asap formerly setimmediate queue updates perhaps something unmounting added tests", "d": "10/2014"}, {"body": "temporarily fixed calling modal closed sure fixes puts end days trying figure", "d": "10/2014"}, {"body": "posterity probably workaround backfires nt actually verified edit really weird workaround actually fix seems nt reason", "d": "10/2014"}, {"body": "interestingly nt happen safari ff affected however different values css properties html", "d": "10/2014"}, {"body": "highlights problem without diving markup", "d": "10/2014"}, {"body": "tried without react doubt react culprit", "d": "10/2014"}, {"body": "correct wondering possible reconcile difference behavior modern browsers", "d": "10/2014"}, {"body": "worth noting able capture event like", "d": "10/2014"}, {"body": "nt fire event doubt anything react sniped", "d": "10/2014"}, {"body": "sounds like fires nt bubble", "d": "10/2014"}, {"body": "seems onchange file inputs nt bubble example jquery may workaround latebinding change handlers directly descendant elements using see", "d": "10/2014"}, {"body": "blame lib use sourcing lib replace gets added better polyfill details may able suggest targeted solutions react uses whatever nothing react closing keep discussing", "d": "10/2014"}, {"body": "zpao made chrome plugin inject js webpage ca nt change js lib webpage js lib change functionprototypebind first page loading react problem happened may fix functionprototypebind using react", "d": "10/2014"}, {"body": "replace gets added better polyfill yup", "d": "10/2014"}, {"body": "thx", "d": "10/2014"}, {"body": "style keys need camelcased see information wrong need use wonder firefox stumbles", "d": "10/2014"}, {"body": "oh missed article thanks info idea working browsers spotted inside inline styles object development console warning would helpful seems like easy mistake", "d": "10/2014"}, {"body": "already warning rc please shout see differently", "d": "10/2014"}, {"body": "probably good way find two copies react loaded commonjs modules antithesis sharing global scope literally two duplicate separate modules would expect react clever enough figure say component react component even copy react", "d": "10/2014"}, {"body": "think lesser evil put flag like flag react reads devtools spend time", "d": "10/2014"}, {"body": "sebmarkbage zpao commonly recurring problem hard debug simply setting testing whether set would save lot people lot headache objections preferable extend simple ducktyping warns looks like reactelement nt something like free nt interfere intentionally running multiple react instances", "d": "10/2014"}, {"body": "think future actually work meantime warn", "d": "10/2014"}, {"body": "would catch issues listed though usually problem comes component helper library loads version get case besides react truly support independent reacts page right interfere way nt mixed eg browser event handling", "d": "10/2014"}, {"body": "clarify referring syranidea comment", "d": "10/2014"}, {"body": "would catch issues listed though usually problem comes component helper library loads version get isvalidelement case might mistaken ignoring weird hacks issue multiple instances react reactelements different instances gets mixed depending api feed going see lots different errors though yeah think take care least besides react truly support independent reacts page right interfere way nt mixed eg browser event handling long never stop event propagation mount inside ok think still great though think future actually work meantime warn good point", "d": "10/2014"}, {"body": "poc jsxastemplatestring implementation", "d": "10/2014"}, {"body": "reasons completely possibleuseful", "d": "10/2014"}, {"body": "rreverser thanks engaging discussion twitter like note objections long form friendly attempt change opinion highlighting rebutting points article linked would possible use template literals syntactic entry point change semantics inside template literal allow embedded scripts evaluated scope seems negate possible portion statement reasons completely possibleuseful however would lead divergence tooling built around assumptions imposed template literals would nt work fine expected world would still need tooling around understand tag however inside template literal means tool made understand tag would help tooling dsls nt intend using either big win would undermine meaning template literals true tagged template nt make use nt mean undermined think mustache handlebars jrb etc forgo would necessary define jsx behaves within rest ecmascript grammar within template literal anyway would dsls ones make use therefore better introduce jsx entirely new type primaryexpression follow preceding statements currently jsx tooling requires two things new parser tooling understand dsl went free template literal route tooling understand dsl would required requiring additional parser requiring tooling able except custom parsing understand grammar also means ca nt use jsx transpilers easily opting harmony features requires unnecessary overhead argument coffescripttypescript etc guilty crime nt make better completely different languages jsx could easily made real js willing accept template literals need use", "d": "10/2014"}, {"body": "mikesherov realise poc linked would create actual dom elements render thereby eliminating performance gains allowed virtualdom", "d": "10/2014"}, {"body": "nt realize thanks letting know however poc could augmented work way react actually works virtual dom implementation details trying find would possible use template strings instead suggest poc actual replacement rreverser raised points language semantics still trying illuminate understand real meat issue argument poc using actual dom actually factor discussion poc see syntax could handled well enough template strings", "d": "10/2014"}, {"body": "mikesherov unless static transformation template string intrinsically bad idea would say hint name template string would require runtime parsing would way actually translate tag names locally defined classes unless want use variables left html far behind could use js instead", "d": "10/2014"}, {"body": "unless want use variables left html far behind could use js instead fail see far html nt", "d": "10/2014"}, {"body": "true tagged template nt make use nt mean undermined point would leave unused variable linter minifier would useless code probably also type system perhaps could code highlighting even would helpful would expect highlighters work well code worst case minifier proceeds without error reason think anything inside template literal referred anything outer scope nt even notice hits production best could start assuming special semantics content template literals undermine meaning template literals requiring additional parser requiring tooling able except custom parsing understand grammar yes example better incompatible tooling fails early tries proceed wrong assumptions also means ca nt use jsx transpilers easily thing needed parser compatible transpile jsx calls leave rest untouched pipe another parser pretty quick updating parser new syntax proposed standardization eg asyncawait etc also thirdparty forks parties like rreverser awesome work acorn expecting use experimental syntax still use something like sweetjs ideal mixing various experimental local dsls still build one jsx template literal systems becomes popular enough might adopt far seems people prefer use either jsx function calls thirdparty language think jsx shows js lacking certain syntactical features pure json nt readable format data structures hopefully spark ideas introduce new object literal form js even based xmllike syntax close issue nothing new nothing actionable feel free keep discussion going reopen new information arrives", "d": "10/2014"}, {"body": "pretty quick updating parser new syntax proposed standardization eg asyncawait etc yes entire js tool chain ecosystem nt quick think jsx shows js lacking certain syntactical features well syntactic noise roadblock really js template strings handle jsx left extra extra certain cases react deems noisy respect opinion even disagree use example complicated example template strings post slightly noisier make tag switch vs pure json nt readable format data structures hopefully spark ideas introduce new object literal form js even based xmllike syntax would agree sentiment json isnt solution less noisy tagged template syntax would thanks thorough response think bit unfortunate syntactic noise ultimately preventing template strings adopted whole new primaryexpression perhaps one day reconsider", "d": "10/2014"}, {"body": "even sure switching actually even works simply trying make point syntactic terseness actual blocker", "d": "10/2014"}, {"body": "mikesherov familiarity also issue overcome want make clear nothing would make happier standardized solution issue think custom dsls even custom highlevel libraries avoided possible tooling issue issue one thing learn however says lot many smart people tend think familiarity terseness jsx worth downside complicating tooling story increasing language surface area people opposite side nt think toolingcompatibility issue nt like look indicates issue remains perhaps solution better editors allow customize code looks like source code representation nt matter use syntax preference unfortunately ide tooling nt yet least terms popularity", "d": "10/2014"}, {"body": "want make clear nothing would make happier standardized solution issue think custom dsls even custom highlevel libraries avoided possible case possible seemingly desired however says lot many smart people tend think familiarity terseness jsx worth downside complicating tooling story increasing language surface area equal number smart people side discounting jsx nt think appeal unnamed authority good argument would say smart people may thought using template strings fully unnamed anonymous rebuttal indicates issue remains perhaps solution better editors allow customize code looks like source code representation nt matter use syntax preference unfortunately ide tooling nt yet least terms popularity different transpilation anyway solution would allow user define default template string parser define boundary markers expressions terseness argument gone", "d": "10/2014"}, {"body": "case possible seemingly desired possible sense ca nt possibly deprecate without uprising nt think appeal unnamed authority good argument nt mean authority populous ie majority sentiment solution would allow user define default template string parser define boundary markers expressions macros", "d": "10/2014"}, {"body": "thanks discussion means lot sensitive topics discussed civilly freely without attitudes getting way possible sense ca nt possibly deprecate without uprising know feeling lived deprecating tons stuff jquery user outcry response built jquerymigrate plugin work deprecation jsx format ever seriously considered gladly write migration tools along army folks would help make switch easy devs nt mean authority populous ie majority sentiment appeal majority opinion better appeal authority also dispute majority think preferable language unification", "d": "10/2014"}, {"body": "macros took suppose", "d": "10/2014"}, {"body": "appeal majority opinion better appeal authority also dispute majority think preferable language unification clarified meant within react community sure larger js community would prefer unification nt bare cost even within react community large code bases suffer components higher level abstractions apparent cost switching less familiarterse syntax higher pain feeling divergent tooling would say smart people may thought using template strings fully explained considerations earlier posts person various companies using react internally facebook nt think people unfamiliar issues hurt personally gladly write migration tools along army folks would help make switch easy devs already tool transpiler upgrade path issue break things time make sure provide upgrade path problem people would bare cost working subjectively worse syntax nt currently hurt trying deprecate would make lives worse", "d": "10/2014"}, {"body": "explained considerations earlier posts person various companies using react internally facebook nt think people unfamiliar issues fair talking anonymous majority group time made statement prior clarifying problem people would bare cost working subjectively worse syntax nt currently hurt trying deprecate would make lives worse aye trust understand concern initial question asked back compat personal opinion evidence support think people would get would make lives worse temporarily resulting benefits unified ecosystem would felt far wide despite devs knowing connection anyway think beaten dead horse enough taken enough time thanks discussion hope reconsider future", "d": "10/2014"}, {"body": "somewhat relevant jsontype alternative syntax jsx", "d": "10/2014"}, {"body": "jussikalliokoski mention much boilerplate exists explicitly nonjsx users syntax also reponsible significant amounts unnecessary allocations reactelements plain objects nt think provide manually created ones yet intention iirc", "d": "10/2014"}, {"body": "syranide boilerplate especially component contains lot html elements unnecessary allocations productivity gt performance time always use directly parts code becomes problem", "d": "10/2014"}, {"body": "jussikalliokoski unnecessary allocations productivity gt performance time think one reasons jsx exists", "d": "10/2014"}, {"body": "andreypopp think one reasons jsx exists question hate jsx fact use reasonablesized project work however significant tradeoff productivity gives somewhere takes somewhere else compile step give examples pretty nice style rules project ca nt enforce tools like jscs jshint tool incompatibility bridging tools make sacrifices either causing linters ignore things jsx blocks completely nice example pure js vim setup whenever save file jumps next linting error tools free make typos inside jsx blocks without editor noticing anything preprocess code passing linter leads compilergenerated style violations would nt make sense able configure jsx output style rules another problem errors using gulpwebpack jsxloader every time compilation error jsx error message tells line omits file caused filed bug long time ago always forget manage eventually figure causing error preprocessing steps always pretty serious tradeoff effect magnified tools play much used love reason eventually gave coffeescript well jsx far less horrible coffeescript sense though errors make sense transformation lightweight nt really even need source maps proper debugging", "d": "10/2014"}, {"body": "mootools problem", "d": "10/2014"}, {"body": "mootools using old webpage ca nt remove bloodyowl", "d": "10/2014"}, {"body": "sounds like mootools implements differently standard mootools corrected easier path getting rid mootools feasible would upgrade mootools", "d": "10/2014"}, {"body": "personally made sure changed mootools back day going bad time anything sorry upgrade", "d": "10/2014"}, {"body": "made chrome plugin inject js webpage ca nt change js lib webpage js lib change functionprototypebind first page loading react problem happened may fix functionprototypebind using react sebmarkbage", "d": "10/2014"}, {"body": "suggested using better polyfill", "d": "10/2014"}, {"body": "chrome extensions execute code isolated dom environment using content scripts way execute environment completely isolated web page realm still touch dom scripts page interact message passing need", "d": "10/2014"}, {"body": "nt meant work getting might worth making clearer", "d": "10/2014"}, {"body": "suggestion step step since able render data cant render data", "d": "10/2014"}, {"body": "ah sorry totally missed part comment seems reasonable feel free go", "d": "10/2014"}, {"body": "obviously wo nt dynamic bootstrap messes dom ca nt react manage also", "d": "10/2014"}, {"body": "figured much thinking told friend create popover react would rather use jquery tools needs display static information changes sense backbone underlying tech polls new information every seconds rerenders backbone view nothing call react component tyhe way change information side world changes interms user input manually change wont problem makes sense", "d": "10/2014"}, {"body": "considered using react bootstrap accomplish describing lines using reactbootstrapoverlaytrigger reactbootstrappopover", "d": "10/2014"}, {"body": "nothing actionable option render string want could easily every render would fit jquery stuff bootstrap depends could also create hooks update certain events use something like react bootstrap mentioned", "d": "10/2014"}, {"body": "also wrote explanation", "d": "10/2014"}, {"body": "want able apply css name minification line someone writes transformation implements might well added doubt devs would take time", "d": "10/2014"}, {"body": "indifferent whether wise use part spec somewhat surprising jsx harmony nt support using jsx compiler service see get translated property value shorthand function values already supported computed keys", "d": "10/2014"}, {"body": "react picks features via jstransform nt jsx specific falls category general js transforms would need pick result going close think good candidate request jstranform repo file issue", "d": "10/2014"}, {"body": "access attribute like reactlike give element ref use", "d": "10/2014"}, {"body": "nothing react setting attribute dom node nt corresponding property safely get attribute value using appropriately storing data random dom nodes use data attributes access", "d": "10/2014"}, {"body": "hm yea intentional ensure stable types system nt think null treated valid nonvalue align defaultprops default arguments default values destructuring intention null symbolize missing object however type weird coerced left refs expect become objects valid represent missing value two options allow value coerced strings throw nonstring values nt coerce string start using maps keys eg dates would become reference instead value would treated key would still duplicate", "d": "10/2014"}, {"body": "maybe support meaning key warning drop support trying avoid breaking things impossible grep without warning idea places code", "d": "10/2014"}, {"body": "nt prod though right thought fallback duplicate values would essentially", "d": "10/2014"}, {"body": "code previously outputted outputs ignore children first given key", "d": "10/2014"}, {"body": "oh fine warning one version swap behavior want send pr", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "react actually renders seems inside allowed", "d": "10/2014"}, {"body": "tried several different combinations one troubled one add propspatterns first pattern object works properly add second one first pattern still works second nt feels like inserting second pattern node using proper dom constructor still might missing something renderdefs function var var defsarray var patternids objectkeys thispropspatterns patternidslength return", "d": "10/2014"}, {"body": "function look like last example gave", "d": "10/2014"}, {"body": "let paste whole module changed thisprops thisstate var mainview reactcreateclass sorry verbose comments inspector element manually change fill back red works colors nt", "d": "10/2014"}, {"body": "taddei tried testcase corroborate findings way managed make update work forcing react completely alter svg element parent jsbin ugly ugly hack", "d": "10/2014"}, {"body": "touchesir yes thanks prototyping issue came happens react add elements svg nt expertise core react functionality would guess would usage innerhtml instead innersvg guess", "d": "10/2014"}, {"body": "ready please nt use issues mailing lists stackoverflow direct communication appropriate venues", "d": "10/2014"}, {"body": "ok thx", "d": "10/2014"}, {"body": "give example code would make improvement", "d": "10/2014"}, {"body": "spicyj react optimization drop array allocation children reconciles correctly lowest level pr allows work depth thus extends courtesy usecases common though useful also compare ex nt see justification making inconsistent unless measurable cost willing take quite sure nt", "d": "10/2014"}, {"body": "know put rc already right really decided happened sure let deprecate want put pr", "d": "10/2014"}, {"body": "nt see coming started working also deprecate change semantics put pr decide later", "d": "10/2014"}, {"body": "documentation get dated gets synced going call closed thanks taking", "d": "10/2014"}, {"body": "seems touching arguments significant slowdown relatively necessarily practice good overview arguments handling surprisingly using arrayprototypeslicecall arguments leaks arguments object may better use inline arguments slicer helper instead hot paths", "d": "10/2014"}, {"body": "deprecate isvalidclass", "d": "10/2014"}, {"body": "also consider documenting quite important flux etc perhaps mention release notes", "d": "10/2014"}, {"body": "hey shipped still couple things get docs checklist", "d": "10/2014"}, {"body": "order still matter unless also force zindex guarantee never overlap imagine best solved helper function retains ordering previous next array rather add core consider issues going map set map seems like edge case edge case cost delegating helper function nt issue probably react internally anyway", "d": "10/2014"}, {"body": "syranide totally agree edge case helper function let anyway wanted put case easier way nt read react source seemed like less work thought might help performance case require anything small amount time implement think close issue side note translate values depend order data elements generated overlap actually guaranteed implemented optimized version interested", "d": "10/2014"}, {"body": "fwiw set actually ordered ordered insertion order also nt problem objects numeric keys mess ordering new set set sadd set sadd set sadd set sadd set var x svalues consolelog x sdelete true sadd set var x svalues consolelog x still pretty interesting suggestion", "d": "10/2014"}, {"body": "thats interesting anyway long agreed close issue unless trivial add workaround anyway", "d": "10/2014"}, {"body": "curious helper function looks like care share gist", "d": "10/2014"}, {"body": "sure best way yet firstly nt think clean way since propschildren immutable map function wo nt work ca nt simple transform function working two possible approaches approaches involve creating helper react component tracks changes using state accepts data unique keys another react component render data approach store object every possible unique key ever rendered render method something like render function assuming data array objects unique property called key var key thisstatecache thisstatecache key false setting values false removing order maintained thispropsdataforeach function elem thisstatecache elemkey elem bind var children map thisstatecache function elem return thispropscomponent elem bind elements order existing elements preserve order new elements added end return reactdomspan null children seems like better way things essentially two fast loops time complexity n element removed readded inserted original position middle sure meaningful performance difference compared new dom nodes appended end way would always take current set elements rendered put state object diffing every time ensure new elements added end would obviously similar terms code things assume data passed props data related order originally sent component passed knows display correctly actual order dom nt matter another thing note browsers working api would let update transform values without updating strings elements would eliminate almost dom operations", "d": "10/2014"}, {"body": "sure going win anything stock reconciliation pass tried actually measured significant performance wins real application", "d": "10/2014"}, {"body": "oh course making work javascript minimise dom operations trying also thought mixin makes react less work would sensible im sure test properly yet", "d": "10/2014"}, {"body": "nt care order children keys might straight forward make idempotent sorted children key first would predictable inserts removes would occur", "d": "10/2014"}, {"body": "functions component automatically bound component instance", "d": "10/2014"}, {"body": "react binds functions defined component automatically realize confusing newcomers might make explicit arrow functions future sure yet", "d": "10/2014"}, {"body": "greate feature love", "d": "10/2014"}, {"body": "discards regardless necessary intentional however guess could really wrap internal identity component ref instead", "d": "10/2014"}, {"body": "daddye slew feature requests feature appears team yet decide whether implement multiple element return jsx background", "d": "10/2014"}, {"body": "closing favor", "d": "10/2014"}, {"body": "correct behavior sorry issue", "d": "10/2014"}, {"body": "nt think jsx box perhaps macro sweetjs see", "d": "10/2014"}, {"body": "react jsx transformer probably never jsx implementations certainly", "d": "10/2014"}, {"body": "going free write transform like", "d": "10/2014"}, {"body": "syranide nice think sweetjs plus job", "d": "10/2014"}, {"body": "maybe think things first realize pass kind property component never mind", "d": "10/2014"}, {"body": "sounds like figured one", "d": "10/2014"}, {"body": "right think author nt expose info like details might assume dev search example mentioned article anyone searching example need depends structure project", "d": "10/2014"}, {"body": "fisherwebdev would feel adding line jest intro mentioning things may need specify packagejson linking jest docs nt think get exact specifics", "d": "10/2014"}, {"body": "tried throws already step", "d": "10/2014"}, {"body": "browsers tend parse data attributes starting number actually valid according likely reason valid obviously true variables see closing reopen disagree", "d": "10/2014"}, {"body": "quite certain reports instead replaces falsy values obviously node nt", "d": "10/2014"}, {"body": "construct complete simplified example nt think happening since reactaddons requires thing react adds couple properties", "d": "10/2014"}, {"body": "okay due fact bundling react separate bundle currently two different copies react", "d": "10/2014"}, {"body": "relevant well supposed update anything inside body via react", "d": "10/2014"}, {"body": "using name multiple times overwriting spot instead get reference erroring image event object note though generally safe modify attributes dom directly especially plan update react later would better store js info image including whether errored update src property rerendering based new data also wrong forum help requests like future mailing list irc channel stack overflow would appropriate", "d": "10/2014"}, {"body": "hey spicyj thanks help sorry posting reason posted coz thought bug tried using without also thing missed keep mind thanks anyways", "d": "10/2014"}, {"body": "allowed manually mutate nodes created react mounting div span text managed react blown away mount would error see react sees existing markup usually indicates serverrendered reused yeah serverrendered check could smarter rendercomponent could throw invariant react children roots serverrendered", "d": "10/2014"}, {"body": "zpao good first bug", "d": "10/2014"}, {"body": "yeah would good response say obvious stupid simplified example layers abstraction way preventing realising going error nt really help", "d": "10/2014"}, {"body": "web components used intertion point thispropschildren really sure actually asking last example done using insertion point well want multiple insertion points either use props filter pick ones want either type prop", "d": "10/2014"}, {"body": "sorry familiar terms express examples think need single insertion point ok case maybe relate docs though use cases explicitly demod", "d": "10/2014"}, {"body": "made pr tell ok", "d": "10/2014"}, {"body": "pr merged closing milestone", "d": "10/2014"}, {"body": "plans disable right detection bit tricky nobody working see", "d": "10/2014"}, {"body": "looks like htmldompropertyconfigjs", "d": "10/2014"}, {"body": "clarify updated yup using mdn example works nt interested fixing tmcw", "d": "10/2014"}, {"body": "yep pr opened", "d": "10/2014"}, {"body": "thanks quick fix", "d": "10/2014"}, {"body": "commendable", "d": "10/2014"}, {"body": "great move making community driven project", "d": "10/2014"}, {"body": "kudos indeed", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "rather trivial draft pr", "d": "10/2014"}, {"body": "yo petehunt jam opinions", "d": "10/2014"}, {"body": "sebmarkbage could give examples wrappers needed new contribution react sorry ask trivial questions", "d": "10/2014"}, {"body": "clues", "d": "10/2014"}, {"body": "scary scry fantasy word means search something", "d": "10/2014"}, {"body": "spicyj differ name something actually descriptive perhaps common testing", "d": "10/2014"}, {"body": "historically methods dom helpers returns single result returns set", "d": "10/2014"}, {"body": "must facebookism defined function util module happily ignoring testutils functions ever since", "d": "10/2014"}, {"body": "briefly examined problem generally problem logic put children rather parent would better suited responsibility root component global loading indicator probably one logic simply forward data children seems general recommendation nt view components isolated black boxes move logicdata hierarchy perhaps makes sense context recommend taking react discussion group coming irc closing keep github issues focused development", "d": "10/2014"}, {"body": "looks like weird fix actual issue", "d": "10/2014"}, {"body": "found fix suitable another framework similar issue issue updating values component update mixin safari throws attempted assign readonly property error maybe logical fix solution found", "d": "10/2014"}, {"body": "could would like repro understand problem surfaces clear looking fix", "d": "10/2014"}, {"body": "actual issue value causing problem make reduced test case", "d": "10/2014"}, {"body": "ca nt reproduce stuff simplified version logic perhaps problem complex rewriting object project found bug gon na try reproduce weekend perhaps find correct reproduction could close issue", "d": "10/2014"}, {"body": "cc sebmarkbage", "d": "10/2014"}, {"body": "sure collections duck typing set also enough maps special probably want use key react key value could either detect maps specifically allow iterable sequence two value tuples difficult part determine tuple nested array value map tuple", "d": "10/2014"}, {"body": "maybe iterable enough map iterators return tuples set array iterators return individual values perhaps hold convention treat tuple react key", "d": "10/2014"}, {"body": "drawback nested iterablesarrays explicitly looking method spec collections also want see keys would differentiate cases", "d": "10/2014"}, {"body": "perhaps misunderstood discussion seems must explicitly test vs etc containing tuples interpreted keyvalue unthinkable would want store lists children ps collections etc", "d": "10/2014"}, {"body": "implements collections mess think right strategy intelligently check native mapset implementation polyfill noncompliant approach taking facebook", "d": "10/2014"}, {"body": "leebyron sounds sane could even polyfill array cheap iterable easily well believe showed earlier work backporting map set approximate weakmap weakset well legacy browsers actually perform rather well perf memory could easily made smart enough use mapset underlying data structure provide additional data required fast ordered iteration", "d": "10/2014"}, {"body": "guess bug webkit firefox works fine scrolling seems stop react removes elements dom workaround found far unfortunately antipattern nt remove elements dom instead let react reuse react reuse element key screamcat hopefully better solution", "d": "10/2014"}, {"body": "imagine elements removed new ones added browser viewport temporarily becomes smaller stops scrolling solution force minimum height bodyouter element update unset minimum height", "d": "10/2014"}, {"body": "made almost minimal test case syranide height never becomes smaller nt know force minimum height", "d": "10/2014"}, {"body": "cody aha yeah would expect bug webkit unless issue nt present thing plain js could react something stops scrolling could fixed time plain js repro would awesome", "d": "10/2014"}, {"body": "syranide come plain js result react broken webkit works fine firefox react innocents thereby proven", "d": "10/2014"}, {"body": "cody ah awesome thank wonder way around somehow asked google quickly could nt find anything helpful", "d": "10/2014"}, {"body": "gabor use eventually order keys objects nt maintained react wo nt function", "d": "10/2014"}, {"body": "know ordered seems good fit used still think conceptually want array pairs perhaps dropin replacement unfortunately browsersupport quite poor one ff chrome ok soon polyfillland time guess documentation updated recommend maps second part comment mean react internally relies orderingthing function case changedfixed soon possible perhaps switching using polyfill browsers support", "d": "10/2014"}, {"body": "nt see could arrays keyvalue pairs would exclude possibility nonkeyed arrays", "d": "10/2014"}, {"body": "hmm right support nonkeyedarray objectwithkeys right guess code simply checks array behave accordingly checking could simply see array items pairs also could please respond first part response true react internally relying ordering objects plans fix problem", "d": "10/2014"}, {"body": "hmm right support nonkeyedarray objectwithkeys right yes iterables coming though guess code simply checks array behave accordingly checking could simply see array items pairs would ambigious necessarily mean treated pairs also could please respond first part response true react internally relying ordering objects plans fix problem intentional performance reasons react used facebook instagram safe say issue practice react move use internally future", "d": "10/2014"}, {"body": "hmm thought sacrificing correctness performance domain c programmers perhaps used often moving plan mean support react planning go polyfill perhaps branches code already published documents facebookdoesitsoitmustbeok argument sure respond", "d": "10/2014"}, {"body": "happens react pools event objects call prevent event object recycled", "d": "10/2014"}, {"body": "react nt mutate native object synthetic event mentioned poll objects mitigate gc hold one calling persist", "d": "10/2014"}, {"body": "use case solved removing classes inside callback remove inside handler instead removed ing yet callback instead removeclass calls right addclass outside callback actually using timeouttransitiongroup since works fine fix presume fix behavior well someone bumps problem hope less hackish solution though", "d": "10/2014"}, {"body": "hey could please provide example example see callbacks get fired expected also added second click button fired multiple setstate sequence commented going behind drives behavior overriding property merge pendingstate partialstate nt know exactly question helps hope helps someone smile regarding questions check comment", "d": "10/2014"}, {"body": "hi cirocosta changed ui around nt share original comment sure setting state onblur set state button would display would result button onclick called", "d": "10/2014"}, {"body": "react nt care callback comes created want load templates ondemand seems far preferable use codesplitting achieve full benefit without involvement react", "d": "10/2014"}, {"body": "react supporting string templating options argued beginning biggest point jsx template simple transform otherwise js transforms js directly sting parsing runtime wo nt adding syntax conditionals loops supported language nt go learn whole language see handlebars ng etc something already know host language syranide mentioned could easily refer file function render function want", "d": "10/2014"}, {"body": "react deep clone propsstate want benefits using need ensure objects immutablenot mutated", "d": "10/2014"}, {"body": "cigzigwon get displayname bit ugly useful debugging anyway", "d": "10/2014"}, {"body": "ok nt realize since new react thx guys", "d": "10/2014"}, {"body": "cigzigwon almost always someone knowledgeable online irc channel gettingstarted related questions feel inclined", "d": "10/2014"}, {"body": "well ridiculous request follow naming conventions instead pattern test", "d": "10/2014"}, {"body": "sadly nature javascript apply applies magic methods everything define well nt believe anything sensible react nt cherrypicking caseinsensitive testing defined properties list supported react properties however hesitant would patch fraction problem inherent javascript ultimately react concern static analysis possibly future ecmascript proposals truly worthwhile solution sure defer zpao sebmarkbage final say", "d": "10/2014"}, {"body": "fair mistake seen several different people make silently fails check props also addressed lint rule given react helpful error messages thought might worthwhile addition agree cherrypicking", "d": "10/2014"}, {"body": "already precedence cherrypicking difficult though", "d": "10/2014"}, {"body": "sebmarkbage go ahead emit warnings dev react properties incorrect casing", "d": "10/2014"}, {"body": "syranide well properties bit indication something wrong right add method order add functionality functionality break case proptypes misscase props go silently unchecked", "d": "10/2014"}, {"body": "recognize problem nt idea good solution casing common one nt sufficiently solve problem misspellings like common ca nt really catch end would prefer get rid proptypes benefit type checking systems like flow safe typescript new syntax extensions harder misspell warn", "d": "10/2014"}, {"body": "fair closing", "d": "10/2014"}, {"body": "issue true erratic production correct dev lines passed markdown renderer correct see l think matter publishing new version production dev", "d": "10/2014"}, {"body": "fixed missed getting branch docs published brought repush site", "d": "10/2014"}, {"body": "event bubbles root per html domcomponent exists domhierarchy receives dom composite component part domhierarchy receive dom want expose need expose ie call right time", "d": "10/2014"}, {"body": "ok thx quick response", "d": "10/2014"}, {"body": "familiar flux use preferable react point view wrong react really comes used immutable data largely propagated root would simply batchdefer updates root propertiesstate would get single near optimal update immutable data generally preferable many reasons react landed master available release yet nt actually dissected exact details sure applies well think might could simply wrap updates single could easy fix applies really familiar practical intricasiesrecommendations using react mutable data ca nt give authorative answer best plan action think switching using immutable data preferable obviously always practical depending project meta issues like encouraged frowned upon know large project lot real issues core devs need paying attention selfinterest questions frowned upon anything benefit react seems fine least also know alone bumping issue", "d": "10/2014"}, {"body": "awesome thanks syranide look immutables honest nt seen page react docs clearest explanation immutables seen far also looks like helpful lib stands far aware flux recommended architecture managing data event flows react applications flux nt much say immutables possibly unfortunate fact published article use flux stores ot would appreciate feedback might nice usually nt run problem immutables solve since usually component tied store listen changes rarely necessary since updates triggered bottom component tree top think use backbone property purpose true though nt tried yet situation run component listening changes multiple stores receive event triggering say three calls one would mentioned think kind thing likely happen lot people impression one recommended way things unfortunately nt think helps looks like calls must made inside function whereas problem call made inside separate event handlers perfectly happy using little mixin think would useful others unless nt instead preferring reading attributes thisstate even belong stores passed props", "d": "10/2014"}, {"body": "squarely realm makes sense never tried sense nice usually nt run problem immutables solve since usually component tied store listen changes shouldcomponentupdate rarely necessary think use backbone changed property purpose true though nt tried yet everytime heard backbone react mentioned sentence backbone poor fit react problem evented setup works great react long single event emitted per action none components listening event parentschildren soon either broken get overlapping updates unless able batchprune somehow beauty pushing everything root long action clearly defined end push current model data root redundant renders inconsistencies etc also use immutable data also get benefit virtually unnecessary renders cheap theory anyway running something similar works great last heard discussion subject best practice really sure entirely date perhaps dev shine definitive light subject using reacts events forceupdate", "d": "10/2014"}, {"body": "hmm evented setup definitely flux recommends stores built around eventemitter talking also makes sense though personally dont believe run parentchild problems despite deeply nested data would also love clarification dev though learned lot already thanks oct pm andreas svensson notifications githubcom wrote squarely realm makes sense never tried nice usually nt run problem immutables solve since usually component tied store listen changes shouldcomponentupdate rarely necessary think use backbone changed property purpose true though nt tried yet everytime heard backbone react mentioned sentence backbone poor fit react problem evented setup works great react long single event emitted per action none components listening event parentschildren soon either broken get overlapping updates unless youre able batchprune somehow beauty pushing everything root long action clearly defined end push current model data root redundant renders inconsistencies etc also use immutable data get benefit virtually unnecessary renders theory anyway running something similar works great last heard discussion subject best practice really sure entirely date perhaps dev shine definitive light subject using reacts events forceupdate reply email directly view github", "d": "10/2014"}, {"body": "spicyj interesting curious would interpreted", "d": "10/2014"}, {"body": "mdn nt clear", "d": "10/2014"}, {"body": "uses value filename iirc empty interpreted truthy download link without provided filename", "d": "10/2014"}, {"body": "code follows bad practices first try declaring initial state second nt need rerender component like changing state rerender twice render initially function nothing name parameter try looking examples write better code", "d": "10/2014"}, {"body": "cigzigwon thanks know bad practice question internal framework heavily inspired om concepts maintains state outside react always rerenders top injecting global application state read jsfiddle oversimplification problem actually happened application someone triggered application event render phase event triggered render inside render beginning suspected someone something like point issue issue making error message consistant always detects potential infinite loop rendering triggered outside also make clearer component cause problem component triggered nested rendering case put breakpoint react warning statement able find appropriate stack entry concerned component would easier error instead warning put displayname component error anyway warning appropriate anyway another error happens little bit later obscure error message would better fail fast consistently exposed cases", "d": "10/2014"}, {"body": "ok get gist saying someone else also wanted sort protection infinite loop mistake yes referring standalone react successfully used libs internally react works great sounds like issue code reviewpair programming techniques solve within organization", "d": "10/2014"}, {"body": "thisismounted false componentwillmount function", "d": "10/2014"}, {"body": "cigzigwon oh ok pulled comments another issue nt aware fixed thanks", "d": "10/2014"}, {"body": "hi dmose seems like great thing made pr trying address see appreciate hear think", "d": "10/2014"}, {"body": "responsibility want submit issue petition moving shareable utils core separate packages seems sound would expect happen anytime soon", "d": "10/2014"}, {"body": "apparently kind happening", "d": "10/2014"}, {"body": "going trying move away much possible flux examples probably use internal modules", "d": "10/2014"}, {"body": "filed flux", "d": "10/2014"}, {"body": "need factory return object props methods use dont instantiate function nt scoped directly bad code", "d": "10/2014"}, {"body": "cigzigwon described already works little less memory efficient using prototype many instances created nt know say bad code since using prototype bad code may considered premature optimisation think would either nice support mixins prototypes either document ca nt use prototypes mixins irc chan alone wondering works guess people give try prototypes", "d": "10/2014"}, {"body": "slorber react use prototype autobinds methods eventually seems nonissue provide classes react react longer require use even core sure", "d": "10/2014"}, {"body": "sebmarkbage anything actionable", "d": "10/2014"}, {"body": "think way early upgrade since rc solution", "d": "10/2014"}, {"body": "indeed moving transition worked wonder breaks somewhere else", "d": "10/2014"}, {"body": "another example csstransitiongroup leaveactive working safari osx", "d": "10/2014"}, {"body": "yea nt think want support enum closest thing arbitrary value checking could arguably considered type cirocosta mentioned think falls territory could provide proptype", "d": "10/2014"}, {"body": "feasible request sure much value people get point rather strive feature parity flowtypescript could add request flow", "d": "10/2014"}, {"body": "actually nt care somebody wanted feel free", "d": "10/2014"}, {"body": "make release", "d": "10/2014"}, {"body": "yes", "d": "10/2014"}, {"body": "cool thanks", "d": "10/2014"}, {"body": "making tags configurable seems like copout essentially pushing problem users instead closing addresses concern feel free voice opinion", "d": "10/2014"}, {"body": "affects also css selectors way adamkyle posted", "d": "10/2014"}, {"body": "recorded desktop reproducing bug good words", "d": "10/2014"}, {"body": "sebmarkbage entirely sure exactly problem contexts meant solve hypothetical context reinvented styles without selectors imagine benefit able propagate activeetc descendants implicitly passing props far hierarchy far often requested obviously parent tree seems using guid style approach would preferable avoiding conflicts components would instead optin something like var child reactcreateclass contextsources ancestorishovered parent hovered render function return thiscontextancestorishovered ancestor hovered ancestor hovered var parent reactcreateclass childcontexttypes hovered reactproptypesboolean getchildcontext function return hovered true render function return exactly sure contexts meant solve could way way mark", "d": "10/2014"}, {"body": "someone familiar react internals would care put together short summary needs done glad give shot make pr reactrouter depends heavily starting break people use cases things nt fully understand exactly difference parent owner trees one dombased react thing might change affect users currently using", "d": "10/2014"}, {"body": "love know whenif might happen take get share belief make componentlibrary composition better particular case working library wraps reactrouter like able pass data library routes app components ca nt presently without either changes reactrouter support directly b ability pass context app alreadycreated", "d": "10/2014"}, {"body": "sebmarkbage assume want support reparenting anything need keep mind guessing wanted check", "d": "10/2014"}, {"body": "things learned yesterday talking sebmarkbage parent tree made parent components necessarily dom elements owner tree made components bottom render stack time given component rendered changing use parent tree gets us one step closer able remove entirely good thing vast majority people currently using unaffected change since owner tree definition subset parent tree", "d": "10/2014"}, {"body": "well said would nt support real html guess need follow longer use whitelist dom components going wanted use directly could might work guarantees still use whitelist transforming jsx least provide clean upgrade path future", "d": "10/2014"}, {"body": "please submit instead", "d": "10/2014"}, {"body": "misuba update surface seems problem build process flaw react", "d": "10/2014"}, {"body": "syranide moving preminified react actually square things away enough libraries sundry old crap js env isolating problem biggish job wish better news", "d": "10/2014"}, {"body": "got fixed", "d": "10/2014"}, {"body": "happened", "d": "10/2014"}, {"body": "came across post includes solution eating subsequent click events important function sounds like strong candidate solution delayed event issue", "d": "10/2014"}, {"body": "good first bug", "d": "10/2014"}, {"body": "think covered", "d": "10/2014"}, {"body": "work master proptypeselement though may actually want proptypesnode", "d": "10/2014"}, {"body": "zpao example incorrect nt call reactdomdiv factory", "d": "10/2014"}, {"body": "sebmarkbage example right question proptype component constructors basically", "d": "10/2014"}, {"body": "contra oh used isvalidclass deprecated going away basically issue almost function valid class since almost function return valid instance support arbitrary class patterns might also support nonfunctions support module pattern strings also valid constructing instances html tags specified think solution usually try go specific elaborate use case pass classes props", "d": "10/2014"}, {"body": "sebmarkbage guess check instance function solves problem", "d": "10/2014"}, {"body": "na", "d": "10/2014"}, {"body": "bit week trouble finding information use immutablejs react together suspect optimization", "d": "10/2014"}, {"body": "going polyfill use impl depend existing", "d": "10/2014"}, {"body": "see closed issue works using react something change along way since nt work even controlled", "d": "10/2014"}, {"body": "codriniftimie uncontrolled code set value directly dom node controlled example need change value component refstextarea", "d": "10/2014"}, {"body": "oh bad cool thanks", "d": "10/2014"}, {"body": "better", "d": "10/2014"}, {"body": "ca nt repro master still make happen perhaps smaller test case wink please let use know version using", "d": "10/2014"}, {"body": "iamdustan found gist ripple effect react tried nt work ff came post issue searched doin issue", "d": "10/2014"}, {"body": "syranide actually material design ripple effect written svg similar problem firefox love attention", "d": "10/2014"}, {"body": "nhunzaker immediate fix attach click handler dom element nt work ff broken", "d": "10/2014"}, {"body": "myagoo nhunzaker research tldr spec ambiguous renderingframing context buttons elements firefox happens buttons fieldsets create new framing context impacts event model assuming svg behavior similar reason currently unsure react handle think need experimenting user land thought process concerning syranide", "d": "10/2014"}, {"body": "iamdustan yeah putting thought behavior inherit firefox react nt responsible removing need read proposal linked appreciate length responses", "d": "10/2014"}, {"body": "context end trying unreachablebranch mostly works except chokes least instance even fixing nt end significant perf wins even combined multiple jstransforms happening browserify step", "d": "10/2014"}, {"body": "guess see point although example end allocating new object anyways benefit allocating lost feel still important feel free submit pr possibly without allocation btw getting deprecate pulled repo people maintain favour immutablejs could get happens petehunt", "d": "10/2014"}, {"body": "wanted mention anyway added check framework uses react updates wait new repo fix maybe try migrate apps immutablejs", "d": "10/2014"}, {"body": "marcbelmont resolve still issue", "d": "10/2014"}, {"body": "issue anymore chose things differently however piece html previous comment still correct thing", "d": "10/2014"}, {"body": "sebmarkbage want anything validate actual instance pretty good name used nt really good way see object return value vs something like backbone view sounds like nt really want anything let decide", "d": "10/2014"}, {"body": "really check verifies instance tied react system could make static would prefer anyway would allow differentiate react version component mounted fact react component something else seems like good api unmounted valid instance anything render function seems like useless test also likely change new signatures makes unstable api failures might become passing upgrades seems bad like hear use case", "d": "10/2014"}, {"body": "removed reactrender methods consider remove well component life cycle methods", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "probably nt actually necessary upgraded ka transferpropsto hand nt hard", "d": "10/2014"}, {"body": "jardakotesovec gonzih immutablejs fully featured immutable collection library provides helpers want since getting deprecatedpulled repo always come back petehunt close", "d": "10/2014"}, {"body": "components nt need state could easily majority avoiding allocation win also informal mentions allowing setstate set keys nt already exist ie must initially set equivalent code sanity improving performancememory usage like idea lot", "d": "10/2014"}, {"body": "going close think little chance also issue needing make sure actually supported spec sure even going possible", "d": "10/2014"}, {"body": "uses shim solved", "d": "10/2014"}, {"body": "seems work fine since migration", "d": "10/2014"}, {"body": "sebmarkbage ran issue also exists project use modal dialogs dialogmixin contains common logic react classes use mixin implement dialogspecific logic would great static method show mixin would create show new dialogs issue go something like utilsshowdialog think issue reopened", "d": "10/2014"}, {"body": "vkramskikh issue anymore use convenience constructor anyway warns would use jsx value anyway could eg work mixin", "d": "10/2014"}, {"body": "sebmarkbage unfortunately nt work code gives warning warning expect get react class use instead", "d": "10/2014"}, {"body": "oh could possibly remove warning since actually start working leave broken next release since also broken right", "d": "10/2014"}, {"body": "nt work code prints throws exception warning would work release would happy", "d": "10/2014"}, {"body": "sebmarkbage longer valid right", "d": "10/2014"}, {"body": "petehunt checked", "d": "10/2014"}, {"body": "sebmarkbage guess iswill solved static analysis annotations well", "d": "10/2014"}, {"body": "assume please reopen thanks discussion smile", "d": "10/2014"}, {"body": "guessing already found answer moved otherwise recommend coming irc posting google group", "d": "10/2014"}, {"body": "update started exploring react immediately run many people recommend react go solution building isomorphic apps long solved think simply ca nt get job done ears sounds like problem react components nt ones dispatching async requests fetch data data ready call reactrendercomponent solution clientside serverside also get ability abort outcome choice async request fail feel free dismiss misunderstood something seems treating react components view model seems meant view true react nothing slightly different templating solution view layer would shame potential really understand fdecampredon mentions complex applications composed multiple modules react would perfect nt think approach would mean treating component view model look flux architecture think react components controllerviews display data stores also invoke actions based user interactions actions update stores model sounds like obvious mvc architecture problem initial action populates store fairly simple client side action invoked method recommended server side hand really need special place kind mechanism would delay rendering action finished stores populated moment seems way reactasyncfibers flux nice thing flux nt need artificial cache transport component states server client like done original reactasync example simply initialize stores send client html markup see example solution indeed hackish", "d": "10/2014"}, {"body": "nt think necessarily needs componentwillmount async even sure needs lifecycle event real issue server side way analyze component tree everything rendered string ideal solution solve would allow rendering would build component tree would able traverse tree find components need additional data allow us asynchronously load data rerender components subtree ready flushing markup allow us convert tree string replicates able browser virtual dom rerender want difference browser dom updates implicit server need explicit render string perform updates virtual dom based async data", "d": "10/2014"}, {"body": "yes know mean description posting posterity", "d": "10/2014"}, {"body": "spicyj officially allow classes prepare release", "d": "10/2014"}, {"body": "josebalius preparations afaik officially javascript classes sure ship jsx transpiler support classes available limited form right iirc proposal still final think", "d": "10/2014"}, {"body": "found reactwithaddons explicitly ran tests nodeenvdevelopment still luck maybe nt envify loader configured correctly webpack check", "d": "10/2014"}, {"body": "guessing object literal computed property keys eventual jsx syntax spread spread one way", "d": "10/2014"}, {"body": "code sample worth thousand words show set attribute name jsx", "d": "10/2014"}, {"body": "victorhomyakov nt know details exactly believe following code work", "d": "10/2014"}, {"body": "computed properties nt work right nt support computed properties transform though one npm implemented recast", "d": "10/2014"}, {"body": "solutions nt require leaving jsx confident something want support cc zpao sebmarkbage", "d": "10/2014"}, {"body": "sure asking want shorter names probably repackage another classobject bit wordy also informative find preferable cc zpao", "d": "10/2014"}, {"body": "reason besides nt want type many letters please share reopen reason", "d": "10/2014"}, {"body": "sebmarkbage fixed quite time ago right nope definitely fixed react master least", "d": "10/2014"}, {"body": "spicyj etc perhaps misunderstanding issue far react concerned seems design say nt ways work around userland though", "d": "10/2014"}, {"body": "maybe know vjeux jordwalke done thinking around", "d": "10/2014"}, {"body": "zpao landed close", "d": "10/2014"}, {"body": "foreignobject", "d": "10/2014"}, {"body": "foreignobject", "d": "10/2014"}, {"body": "fixed master believe shipped", "d": "10/2014"}, {"body": "fix landed time ago closing", "d": "10/2014"}, {"body": "since deprecating update favour immutablejs think beside existing bug fixes low hanging feature requests wo nt adding whole new syntax updating nested collections like json paths fyi immutablejs clojure uses imo way saner way approaching said agree spicyj yes ordering arbitrary right probably nt rely way ca nt know mean makes sense close petehunt", "d": "10/2014"}, {"body": "fyi immutablejs clojure uses path child imo way saner way approaching chenglou gcc advancedmodecompatible though think", "d": "10/2014"}, {"body": "pedroteixeira interested build framework around omcursor concepts used react update paths probably efficient clean code job well production check code used inside cursorset cursorget operations atom implementation support transactions allow something like dom events transaction read writes drawback current implementation generates intermediary objects transaction", "d": "10/2014"}, {"body": "edit clojure mergewith deep merging two structurally dissimilar collections weird begin otherwise work fine petehunt", "d": "10/2014"}, {"body": "problem little css solved", "d": "10/2014"}, {"body": "actually avoidable afterall", "d": "10/2014"}, {"body": "informative warning case closing", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "well really fixed update devtools", "d": "10/2014"}, {"body": "zpao facebookreactdevtools perhaps referring updated store yet perhaps", "d": "10/2014"}, {"body": "reporting value good idea probably good idea report either could make sense though probably", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "merged", "d": "10/2014"}, {"body": "awesome thanks", "d": "10/2014"}, {"body": "third party languages class class result", "d": "10/2014"}, {"body": "nt support classes way yet support classes class factory", "d": "10/2014"}, {"body": "spicyj understand meant need pass class", "d": "10/2014"}, {"body": "need class", "d": "10/2014"}, {"body": "sebmarkbage oh awesome", "d": "10/2014"}, {"body": "nt like refs look almost like promises slightly different behavior promises alone already confusing enough would fixed replacing returns new unresolved alternatively maybe could rename distinguish api promises maybe difference detail people would typically run", "d": "10/2014"}, {"body": "differences particular concerned", "d": "10/2014"}, {"body": "realize closed struggling seems like least way parent component andor animated item notified animation completed take instance simple carousel like reject inputs prevnext animation occurring far tell way without implementing copy reactcsstransitiongroup nice could something like javascript var carousel reactcreateclass handleanimationend function consolelog animation complete render function return reactcsstransitiongroup transitionname slide onanimationend thishandleanimationend thispropschildren thispropsindex", "d": "10/2014"}, {"body": "came could nt find way call lifecycle events child components instead passing around handlers spicyj reason following nt work javascript var csstransitiongroupchild reactcreateclass componentwillenter function done thispropschildrencomponentwillenter even though child componentwillenter defined never gets called version reactcompositecomponent method thispropschildrencomponentwillenter", "d": "10/2014"}, {"body": "case helps anyone khan academy dropin replacement seems solve problem usecases", "d": "10/2014"}, {"body": "anyone looked problem suggested workaround", "d": "10/2014"}, {"body": "good solution case trying solution feeling tricky coffee componentdidmount root refsrootgetdomnode rootonmouseenter onmouseenter rootonmouseleave onmouseleave got still quite strange results", "d": "10/2014"}, {"body": "resolvedno longer relevant", "d": "10/2014"}, {"body": "closing workaround om", "d": "10/2014"}, {"body": "functionality seems really useful", "d": "10/2014"}, {"body": "least would nice inherited context nt seem case either", "d": "10/2014"}, {"body": "spicyj know fixed master think", "d": "10/2014"}, {"body": "still broken throws slightly different error", "d": "10/2014"}, {"body": "spent hours chasing bug codebase would good fix soon someone else runs repro versions react ended btw", "d": "10/2014"}, {"body": "vinspee dosomething want label increase hit area checkbox browsers", "d": "10/2014"}, {"body": "related believe pr somewhere", "d": "10/2014"}, {"body": "seems like wontfix meant helpful warning error", "d": "10/2014"}, {"body": "pure components nice think timerng makes sense treat state pass time using props shifting state one level time fundamentally global state however far component hierarchy push state still wrong place addition time continuous nt even make sense use state props imo best way would prop description divide time discrete moment local state store current moment clock reactcreateclass mixins reacttimebased render function thisstatemomentintime case reacttimebased would mixin automatically called setstate frequency propsfreq addition make sure components update synchronously applicationwide frequencies reduce rate dom needs updating addition time converted human readable string days ago obviously nt need update every second really easy use shouldcomponentupdate prevent unneeded updates convert two moment string representations see changed need monkey patch built functions make clear documentation right way things accessing global state code usually sign something wrong", "d": "10/2014"}, {"body": "diggsey really neat idea would love see proof concept", "d": "10/2014"}, {"body": "something like already including precise timeouts dynamic units elapseduntil polish npm perhaps", "d": "10/2014"}, {"body": "controversial good first bug let get rid label", "d": "10/2014"}, {"body": "think react rendering model needs separate dom react components html body iframe tags idea dom separate good one imho prime use case iframes component dom therefore includes doctype html head body toplevel tags think iframe actually officially supported component fundamental support components", "d": "10/2014"}, {"body": "also happens conditionally return null component eg javascript render function", "d": "10/2014"}, {"body": "seems released", "d": "10/2014"}, {"body": "fwiw little confused expected smaller version regular know docs explain downloaded forgot part minifier nt ever use distributions think renaming would avoid confusion vs would unambiguous", "d": "10/2014"}, {"body": "sebmarkbage task community know experimenting responsibility reactjsx", "d": "10/2014"}, {"body": "method handling nested state come yet", "d": "10/2014"}, {"body": "recommend look direction api support notation useravatarurl", "d": "10/2014"}, {"body": "courtesy become slightly less relevant necessarily irrelevant reactlink longer supported core components", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "related", "d": "10/2014"}, {"body": "dose look good introducing new people react first ting tutorial need ajax calls let add jquery", "d": "10/2014"}, {"body": "willdady please provide example solved still clear best practice", "d": "10/2014"}, {"body": "creativityhurts pseudocode general idea user clicks anywhere page dropdown close except click anywhere within dropdown var dropdown reactcreateclass componentdidmount function documentaddeventlistener click thisdocumentclickhandler componentwillunmount function documentremoveeventlistener click thisdocumentclickhandler documentclickhandler function thissetstate isopen false triggerclickhandler function thissetstate isopen true dropdownclickhandler function e enativeeventstopimmediatepropagation render function", "d": "10/2014"}, {"body": "sebmarkbage probably authority nt seem realistic core feature nothing prevents adding mutual contract components cases component wants renders children ondemand probably best delegated callback prop instead", "d": "10/2014"}, {"body": "yea seems like nonreact use case needs separate transform", "d": "10/2014"}, {"body": "syranide would imagine react emulation mode rectify browser emulated events eg ios touch event cascade", "d": "10/2014"}, {"body": "iamdustan really idea thankfully able stay away touch events far imagine would prevent cascade definitely big questionmarks seen issues", "d": "10/2014"}, {"body": "something still want solve seems fix would simple enough", "d": "10/2014"}, {"body": "seems issue addresses concern already nt see react adding specific attribute global whitelist", "d": "10/2014"}, {"body": "zpao petehunt sebmarkbage imagine make happen address issue related attributesproperties would nt whitelisted right", "d": "10/2014"}, {"body": "correct get attributes though", "d": "10/2014"}, {"body": "briandipalma explore everything passed props set state within react view thought common convention setstate flux stores change otherwise hard time getting change render event handler", "d": "10/2014"}, {"body": "ptomasroos yes setstate call passed state provided store react component nt calculate based thisstate", "d": "10/2014"}, {"body": "briandipalma good agree wanted explicit", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "change really disturbed jsx usage mithril see new version work somehow", "d": "10/2014"}, {"body": "fyyyyy continue use reacttools make custom transformer like", "d": "10/2014"}]