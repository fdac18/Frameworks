[{"title": "children removed using clonewithprops", "body": "repro case", "num": "2441", "d": "10/2014"}, {"title": "merge classname using spread operator", "body": "using transferpropsto classname property would merged true using new spread operator one nicest features transferpropsto made extending existing components much easier created couple fiddles illustrate sure would considered bug understand would reasons incredibly convenient possible would nice utility method something classname merging maybe part addons", "num": "2440", "d": "10/2014"}, {"title": "react performance wrong", "body": "currently evaluation react vs angular new project one criterion looking performance particularly mobile devices built prototypes react angular found seeing huge render times particular page basically huge list prices prices react angular much quicker distilled prototype two sample apps basically rendering list numbers printing currencies react angular running react version using locale switcher took react around rerender entire list angular taking worked reactintl people found currency formatting consuming time thought well test heavily favors react basically every node rerendered locale changes added simple buttonclick counter top page measurements react took entire increment click rerender almost entirety wasted section react perf tools angular took clearly must something wrong react beaten handily angular initial render rerender page incremental render everything looks straightforward problem", "num": "2439", "d": "10/2014"}, {"title": "react docs outdated", "body": "seems like every time go look reactjs docs date become pretty troublesome team pretty much given referring documentation resides site unreliable incomplete proven much time spent work struggling figure things understandable new libraries sometimes team developing project looking developers take run would behoove keep documentation date developers testing trying work adequately develop using time energy compile exhaustive list issues outdated areas documentation one example toplevel api documentation page whose contents either deprecated dated methods like changed since per changelog posted paul oshannessy hard continue develop main toolset used outdated documentation references many developers side team share sentiment much documentation lacking trying take guys built build kickass web apps using reactjs help us smile", "num": "2438", "d": "10/2014"}, {"title": "warning jsx uses plain function react components valid react jsx transform", "body": "updated react mass warnings flood console seems elements using thing seems fix rebuilding imported var button reactcreatefactory require button like think rather unnecessary think purpose update thought createfactory would enough imported components use browserify helps create new elements fine createelement example without warnings try reuse elements exactly want use react warns cases gave specific element name nt right fixed putting createfactory require working jsx auto compiled gulpjsx think updated nt need jsx tags anymore warning give anything trace well pinpointed happening render method components elements reuse either imported ones others filescopemodule like anyone say missing ca nt purpose forced give imported elements different name assigning variable name createclass require one throw warning mean components valid valid react ca nt find much meant plain functions mentioned one blog updates tried making existing components new methods warnings persist exactly needed barebones avoid warnings ever break app new updates came everything worked fine transition big must missing essential thing", "num": "2436", "d": "10/2014"}, {"title": "access key within component", "body": "understand component key longer available component props one get access component key", "num": "2432", "d": "10/2014"}, {"title": "custom elements implied lowercaseconventionmd working", "body": "understand lowercaseconventionmd custom element names supported however try using following example gist jsx fails transformed misunderstanding wrong gist misleading", "num": "2430", "d": "10/2014"}, {"title": "thiskey seems always undefined inside react component", "body": "react attempt use thiskey inside react component simple test case could access value via removed", "num": "2429", "d": "10/2014"}, {"title": "nashorn server side rendering null function line number", "body": "hello react team poking around reactjs server side rendering nashorn keep getting annoying problem whole code single jsx file faulting code options select sort price variation symbol company sad things works browser java nashorn js engine hoping could tips could maybe solve see nashorn team bug js engine using react nt help ps branch precise context similar problem option problem var bugselect reactcreateclass displayname bugselect render function apple banana cranberry", "num": "2427", "d": "10/2014"}, {"title": "attribute button supported", "body": "docs ones taged list supported tags form autofocus formnovalidate", "num": "2425", "d": "10/2014"}, {"title": "documentation versions", "body": "would great documentation various versions react similar currently docs points latest version apps upgraded nice able refer documentation earlier versions also interested helping move towards react powered docs remove jekyll dependency without disturbing existing structure team willing consider contributions area sebmarkbage zpao", "num": "2424", "d": "10/2014"}, {"title": "bug typeapply error type apply function", "body": "reverted commits tonight learn reactjs stopped awesome specifically nuked nodemodules get fresh npm install happened led look type object debugger apply function typerenderapply function sure changed packagejson looks like", "num": "2423", "d": "10/2014"}, {"title": "breaking change transferpropsto semantics defaultprops take precedence", "body": "semantic interaction default props changed default props override transferred props previous versions react opposite would happen nt seem mentioned release notes fiddle intentional decision probably mentioned release notes unintended side effect internal changes default props probably fixed", "num": "2421", "d": "10/2014"}, {"title": "getting started section line srchelloworldjs translate correct vanilla js", "body": "current code hello world transform following buildhelloworldjs file reactcreateelement null hello world hello world nt show page instead want code would translate null hello world would happy submit request update file let know", "num": "2420", "d": "10/2014"}, {"title": "jsx spread syntax requires objectassign", "body": "new jsx spread syntax introduced described nice compile jsx uses feature see implemented objectassign since proposed feature supported firefox using jsx spread syntax necessitates using polyfill objectassign would great case seems like possible implement behavior without objectassign", "num": "2417", "d": "10/2014"}, {"title": "please add reactproptypescomponentclass similar reactproptypes", "body": "hello found useful able pass react component class ie result calling instance component child component eg generic searchresults accepts results array resultcomponent property used render method create search result pagesearch component passes pagesearchresult class searchresults component campaignsearch component passes campaignsearchresult although could map results result components higher hierarchy convenient handled generic searchresults component common logic performed construction result aside whether example good practice believe useful property type could added official proptypes list believe would almost identical function instead would call updated message must use either use custom function uses publicly exposed many thanks brendan", "num": "2411", "d": "10/2014"}, {"title": "batching update one component twice causing unpredictable lifecycle", "body": "one hard explain reproduce try using following mixin changed slightly original found gist back js var react require react var layeredcomponentmixin componentdidmount function thislayer documentcreateelement div documentbodyappendchild thislayer thisrenderlayer componentdidupdate function thisrenderlayer componentwillunmount function thisunrenderlayer documentbodyremovechild thislayer renderlayer function var layer thisrenderlayer unrenderlayer function thislayerwillunmount thislayerwillunmount thislayer moduleexports layeredcomponentmixin allows create layered components case modal dialog use following component build modals js var react require react var toolboxuseractioncreators require actionstoolboxuseractioncreators var modalstore require storesmodalstore function getstatefromstore return modalcount modalstoregetmodalcount var modal reactcreateclass componentwillmount function thissetstate modallevel modalstoregetmodalcount componentdidmount function modalstoreaddchangelistener thisonchange documentaddeventlistener keydown thishandlekeydown componentwillunmount function modalstoreremovechangelistener thisonchange documentremoveeventlistener keydown thishandlekeydown getinitialstate function return getstatefromstore getdefaultprops function return classname feature render function var classname thispropsclassname var modalbackdropclassname var handlebackdropclick thishandlebackdropclick var killclick thiskillclick var modallevel thisstatemodallevel var totalmodals thisstatemodalcount killclick function e estoppropagation handlebackdropclick function thispropsonrequestclose handlekeydown function e ekeycode thishandlebackdropclick onchange function thissetstate getstatefromstore moduleexports modal combination works perfectly close highest modal component used inside render method ie following error thrown element types tried including work fine throws following trace follows happens several modals top one dialog runs fine error weird thing app still runs fine error thrown impact apart thrown app performs using webpack build", "num": "2410", "d": "10/2014"}, {"title": "adding removing background style attribute creates unwanted styles", "body": "element depending condition may set background condition first true later false element left residual styles never set code output looks like html styles never set user code interfering styles css fiddle showing issue", "num": "2407", "d": "10/2014"}, {"title": "triggering file input click causes onchange event fire", "body": "jsfiddle demo must using first click browse select file onchange event fire alert appear second click trigger file input click select file onchange event fire", "num": "2406", "d": "10/2014"}, {"title": "functionprototypebind problem", "body": "js lib change functionprototypebind takes problem react", "num": "2404", "d": "10/2014"}, {"title": "updates background inline css properties rendered firefox", "body": "updates inline via style attribute rendered firefox created example example button click toggles elements height background color firefox height rerendered correctly background chrome ie toggle properties expected", "num": "2403", "d": "10/2014"}, {"title": "warn two versions react used alongside", "body": "people lose hours work debugging simple issue two versions react loaded time warning right away happens usually discover problem invariant violations descriptive eg think even saw warning said something like check two copies react loaded really cryptic reason nt want warn right away two copies react loaded", "num": "2402", "d": "10/2014"}, {"title": "replace jsx language extension tagged template strings", "body": "apologies advance wrong way start discussion could nt find suitable forum ml discuss tagged template strings part reason back compat deprecate jsx language extension use template strings may oversimplifying seems upgrade path users would replace things format unifying jsx would help save effort make tools intended work js work jsx example jshint jscs popular static analysis tools several tickets jsx support happy field however imo efforts would better spent getting tools ready instead know fb contributing back upstream awesome focusing help speed efforts hopefully react recent move get closer class syntax sign proposal seriously thoughtfully considered", "num": "2401", "d": "10/2014"}, {"title": "reactdominput throw error use mootools together", "body": "error stack first reactwithaddonjs componentname reactdominput propname onchange jump func mootools c null arguments proptypespropname jump reactwithaddonjs props undefined", "num": "2400", "d": "10/2014"}, {"title": "consider deferring rendering actually document", "body": "warn best practice defer container node actually document allows events work expected system could use indocument detection determine container document could either warn use hack defer rendering actually gets added document web components similar lifecycle hooks integrating would likely involve deferring work document", "num": "2398", "d": "10/2014"}, {"title": "errors react tutorial step", "body": "step tutorial get following error uncaught typeerror failed construct comment please use new operator dom object constructor called function pedagogical failing steps tutorial believe step come step happily update something agree", "num": "2395", "d": "10/2014"}, {"title": "stop treating key null unspecified key", "body": "issue remind us revert", "num": "2394", "d": "10/2014"}, {"title": "implement shallow testing", "body": "need way test output single level react component without resolving way bottom layer whatever thinking something like javascript var shallowrenderer reacttestutilscreaterenderer shallowrendererrender shallowrendererattachref myrefname somemock var result shallowrenderergetrenderoutput expect resulttype tobe div expect resultpropschildren toequal shallowrendererrender var updatedresult shallowrenderergetrenderoutput expect updatedresulttype tobe updatedresultpropsonclick mockevent var updatedresultcausedbyclick shallowrenderergetrenderoutput expect updatedresultpropsclassname tobe wasclicked var instance shallowrenderergetmountedinstance instancecustomfunction var updatedresultcausedbycustomfunction shallowrenderergetrenderoutput expect updatedresultcausedbycustomfunctionpropsclassname tobe custom basically fix needs go entire lifecycle reactcompositecomponent needs bail whenever would continued rendering", "num": "2393", "d": "10/2014"}, {"title": "render react components data attributes", "body": "nt know design wrong using bootstrap style application one features using popovers dont like looks messy abstract datacontent stuff react component would expect hover see contents react component rendered ever see way react land clean code separate components render components dataattributes", "num": "2392", "d": "10/2014"}, {"title": "feature request dynamic object literal property keys", "body": "spec would come handy allowing something like", "num": "2391", "d": "10/2014"}, {"title": "attach value nonform elements retrieve value", "body": "corresponding jsfiddle basically trying create auto suggest list trying attach onclick handlers list elements assign values however evttargetvalue retrieve value clicked list element wrong", "num": "2390", "d": "10/2014"}, {"title": "regression null key handling possibly intentional", "body": "code foo bar assigned implicit keys children gives error warning flattenchildren encountered two children key child keys must unique two children share key first child used renders foo key cast string reactelement gets checked null traverseallchildren guess okay intentional broke part ka upgrade sebmarkbage cc jdan", "num": "2386", "d": "10/2014"}, {"title": "strange behaviour svg defs", "body": "found case two similar functions output exactly dom element work different ways missing something difference moved defs block render function renderdefs function var mainview reactcreateclass getinitialstate function return showdef false changedefs function renderdefs function thisstateshowdef return null return render function var fillstyle thisstateshowdef fill url fill red return fixme verion nt work clues renderdefs function thisstateshowdef return null return render function var fillstyle thisstateshowdef fill url fill red return thisrenderdefs", "num": "2380", "d": "10/2014"}, {"title": "question flow released month", "body": "subject important waiting atscale conf", "num": "2379", "d": "10/2014"}, {"title": "new method implicit keys traverseallchildren", "body": "current state implicit keys react psuedojsx good reconciles good reconciles bad destroys bad destroys propose arrayset ignore tailing subarray indices value root child index currently case except broken objects first reactnode every array reconciles depth want improve maps reconcile way previous indices discarded map encountered possibly discarding entire computed name far even pseudojsx showing new indices would computed discarded examples top reconcile correctly cc sebmarkbage", "num": "2378", "d": "10/2014"}, {"title": "deprecate isvalidclass", "body": "deprecate isvalidclass function returns object render method valid class probably nt want assume valid prototype nt allow module pattern used really difficult validate without invoking static type system shines dynamic check isvalidclass would turn nt need function generally want validate something extra class anyway eg method render table cell", "num": "2374", "d": "10/2014"}, {"title": "reactcsstransitiongroup specify component properties", "body": "reactcsstransitiongroup default render span component introduce new dom element need counted css example using flex box layout html problems see span default inline element need redefine css styles css becomes complex example require write css like working example reactjs documentation offers two options use reactdomdiv write component ok write component flewrow flexcolumn flexdirection column solution endup lot components basically render one div element different classes flexrow flexrowreverse flexcolumn flexcolumnreverse way specify properties transition group component nt find anything source code documentation", "num": "2371", "d": "10/2014"}, {"title": "rendered markup roots added reactmount node cache", "body": "reactmount caches children parent visits avoids worstcase exponential cost however use reactdomidoperations updates forces reactmount populate cache previous children newly rendered node needs found children parent newly rendered root retraversed exist node cache since guaranteed siblings newly rendered roots cached reference node trivial manually add node cache avoid doubletraversals entirely", "num": "2365", "d": "10/2014"}, {"title": "internal api terminologynaming", "body": "actually takes element following also named mount another component perhaps necessary inherited exposed user classes go etc clarity callsites perhaps true guess justification loops back actually intended cc sebmarkbage zpao", "num": "2354", "d": "10/2014"}, {"title": "use arrays children reactcreateelement", "body": "thought bring set stone since intended mostly nonuser feature understand would nt make sense take opportunity also change signature avoid varargs potential perf boost nonscientific test ps hmm guess already support simply providing array children seems touching significant slowdown relatively necessarily practice cc sebmarkbage", "num": "2351", "d": "10/2014"}, {"title": "update docs", "body": "bunch things need documentupdate x new terminology elements nodes x rewrite jsx depth bit tough update piecemeal x factory usage best practices x changes x fix documentation changes x newfixed dom attributes x docs license x new methods old methods x authors amp acknowledgements addons update probably mention", "num": "2347", "d": "10/2014"}, {"title": "mixin render unordered mode like sets", "body": "similar would love tell react component nt care order render elements minimize dom operations maintain elements key effect whenever rerender happens react removes elements longer new elements appended end order never accounted sets may available many browsers would love similar feature implemented objects explanation right passing array children keys property order preserved usually correct behavior however projects using trick famous render elements using values instead case elements anyway actual order dom matter major benefit trick eliminates almost dom operations except updating styles page reflow paints great performance problem react maintaining order children react reorders dom elements anyway ways keep track every render manually reorder data prevent rerenders got better way", "num": "2346", "d": "10/2014"}, {"title": "refer window object", "body": "timer example pass cause keyword function point object works ca nt figure", "num": "2342", "d": "10/2014"}, {"title": "reacttransitiongroup overwrites children ref prop", "body": "uses children overwrites prop see", "num": "2341", "d": "10/2014"}, {"title": "adiacent blocks", "body": "hi looking already issue nt find anything open bug however feature request right things like jsx needs enclosed container possible allow without container thanks", "num": "2338", "d": "10/2014"}, {"title": "testutilssimulatemousedown nt trigger focus event", "body": "code js jsx reactdom var button reactcreateclass render function return test handlemousedown function consolelog handle mouse handlefocus function consolelog handle focus var button reactrendercomponent documentgetelementbyid content reactaddonstestutilssimulatemousedown buttongetdomnode outputs expected output like real browser demo", "num": "2336", "d": "10/2014"}, {"title": "jsx compile string instead object instantiation", "body": "example opt convert instead", "num": "2335", "d": "10/2014"}, {"title": "custom events", "body": "wondering considered way make custom events something like could used parent component could look like perhaps course might already possible considered nt find information thoughts", "num": "2334", "d": "10/2014"}, {"title": "missing important info post", "body": "hi think article forgot mention need put make test suite work omitting put lines npm config resulted test error namely think suite nt knew find resources mentioned article sorry nt find anything cheers jim", "num": "2333", "d": "10/2014"}, {"title": "onchange fire multiple times single change", "body": "run code select text type character show changes rather one think anyone really cares would notice", "num": "2332", "d": "10/2014"}, {"title": "nasty user input bug", "body": "use backspacedeletepastecut input field undo notice entire document revert redo type something boom react throw invariant stop function dom mutated normally dom updates clear undo history inputs however happen circumstances reason would assume listens many different events broken like var app reactcreateclass getinitialstate function return changes handlechange function e thissetstate changes thisstatechanges render function return thisstatechanges thisstatechanges null reactrendercomponent documentbody test cc spicyj", "num": "2331", "d": "10/2014"}, {"title": "attribute support number", "body": "data attribute formatted wo nt rendered html example notice show rendered result", "num": "2329", "d": "10/2014"}, {"title": "figure sometimes undefined", "body": "exists places code able reproduce anyone idea", "num": "2328", "d": "10/2014"}, {"title": "reactdominput unnecessarily traverses node mount", "body": "preferable access directly", "num": "2327", "d": "10/2014"}, {"title": "using sidebyside provokes invariant errors browserify", "body": "using different modules provoke invariant errors mixed together use either components required also provoke invariant errors used inside components regression since reactaddons made specifically reason since marked deprecated", "num": "2326", "d": "10/2014"}, {"title": "immutability helpersupdate would nice also include inc", "body": "one important list would really useful updates shared space used client side server side way nt need rewrite logic places nt know useful would nice addition", "num": "2325", "d": "10/2014"}, {"title": "title tag loses datareactid parsed", "body": "parser seems ignore attributes tag losing datareactid documentqueryselector title getattribute datareactid null react later complain working around small wrapper component resets attribute added", "num": "2323", "d": "10/2014"}, {"title": "using img onerror within array map", "body": "hey guys trying generate list images using arrayprototypemap want use onerror function image found please take look fiddle clue wrong", "num": "2321", "d": "10/2014"}, {"title": "unhelpful error two react components responsible updating div", "body": "moron two separate react components responsible div nt quite obvious real life ultimately boiled caused whole page freeze browser killed warning error react gave help trying diagnose issue react attempted use reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injectednew markup compensate works lost many benefits server rendering instead figure markup generated different client server", "num": "2319", "d": "10/2014"}, {"title": "support insertion points", "body": "web components used intertion point something react work could like coffee reactcreateclass render gt div b reactcreateclass render gt div b b supposed work even find inserting components sending props looks quite ugly several nodes insert better solutions", "num": "2318", "d": "10/2014"}, {"title": "update examples reactcreateelement", "body": "least one nt use jsx", "num": "2315", "d": "10/2014"}, {"title": "need show message devtools installed", "body": "every time run react get message despite aleady installed bug plan disable message", "num": "2314", "d": "10/2014"}, {"title": "list property updated correctly", "body": "testcase code basically jsx says one big another rerender attribute updated", "num": "2309", "d": "10/2014"}, {"title": "go github first", "body": "making efforts move development react happen github first facebook simply another consumer historically mostly done opposite way prs needed pulled fb ensure nt break products etc result moved slow occasionally dumped large changesets without context syncing commits worked awkward resulted mistakes something way data flow dangerous number things need internally externally wo nt happen overnight use issue track things need externally make lint work consistently noisy unusable right faster everything basic buildtest process slow jest helps resolve differences internal external code reactversion commentedout warnings", "num": "2307", "d": "10/2014"}, {"title": "drop reactlink hooks controlled components", "body": "reactlink supports sort adhoc twoway data binding found distraction rather helpful nt plan adding core outside addons anyway take support controlled components make wrappers used instead controlled components put wrappers addons provides backwards compatibility without legacy remain core", "num": "2302", "d": "10/2014"}, {"title": "nonsensical names test methods", "body": "scryrendereddomcomponentswithclass kind joke name scary stand something else", "num": "2301", "d": "10/2014"}, {"title": "extending lifecycle direct communication component tree", "body": "want extend lifecycle react components giving children declared thispropschildren opportunity vote whether ready rendered asynchronous fashion want postpone actual rendering ready one usages would showing loading animations root component rather children want something like problem direct access actual component descriptors call customdefined methods component using static methods also resolve problem may rely component current state acceptsmount implementation ideas achieve", "num": "2299", "d": "10/2014"}, {"title": "safari bug attempted assign readonly property", "body": "specific safari breaks updatejs addon place fixed", "num": "2298", "d": "10/2014"}, {"title": "accept iterables collections children", "body": "react currently accepts arrays children var array spans would excellent generalize concept accept collections iterables collections set map immutablejs variants identified implement result calling iterator iterables array arguments object arrayish things thirdparty data structures identified returning iterator cases left iterator point extracting children becomes straightforward unlocks really useful things use immutablejs react efficiently var data immutablevector b c datamap str gt strtouppercase use generators var data function yield yield yield data", "num": "2296", "d": "10/2014"}, {"title": "scroll momentum stopped rendering", "body": "see jveux react version infinity know updated version react get result works seamlessly let go trackpadmagic mouse know momentum scrolling kicks scrolling suddenly stops rerendering reduced testcase experiment get result change color visible items vs nonvisible ones lag little bit lost struggling days trying different ways implement infinity react known issue issue hintsworkarounds", "num": "2295", "d": "10/2014"}, {"title": "better api assigning keys components", "body": "describes key attribute assigned one ways providing object objects unordered hack described try work around fact problem unspecified implementationdetail think bad idea rely unspecified implementationdetail nothing preventing browsers changing order past example see specifically later comments note differences browsers understand days browsers maybe reached consensus faster way objects see changing also think better api code basically wants array pairs object nt support array key component instead afterwards objectbased solution could deprecated", "num": "2294", "d": "10/2014"}, {"title": "react mutates event objects", "body": "code accesses eventtarget asynchronously surprise react mutating event object removing useful properties synchronously emitting event seems like broken behavior html react mutating event objects react mutating event objects", "num": "2293", "d": "10/2014"}, {"title": "removing leave classes csstransitiongroup nt work well alternative batching strategies", "body": "hi probably design wanted make sure problem using together raf batching strategy aware raf batching officially supported works well solves quite problems app nt want give problem following removes classes calling really necessary batching strategy default may raf result classes removed tick element removed dom thus element flickers move calls behind condition transition group behaves fine missing something edit indeed missing situation fire another case wo nt work still wish way around", "num": "2292", "d": "10/2014"}, {"title": "call setstate onblur stops event propagation necessary use windowsettimeout bug flux", "body": "callback onblur call setstate based state buttons may removed screen problem one buttons callback needs run onblur caused clicking button setstate called onblur callback callback button onclick run maybe technically visible verified button callback works fine onblur callback call setstate worked around issue using windowsettimout calls setstate right approach bug flux callbacks nt run expectation callbacks would run setstate calls would cummulative thanks advice", "num": "2291", "d": "10/2014"}, {"title": "reactaddonscsstransitiongroup nt work inside element chrome", "body": "repro create component renders tag list visible elements wrap inner elements expected elements display transition classes work elements added removed actual elements visible jsfiddle", "num": "2290", "d": "10/2014"}, {"title": "drop uppercasing reactdomcomponenttagname", "body": "works well visually highlighting html tags print somewhat weird svg web components also public property could used purposes would also mean drop internal use unless considerations", "num": "2288", "d": "10/2014"}, {"title": "templates", "body": "idea looking reactjsx examples noticed something place jsx shows render function trivially rendercomponent function ends looking lot like regular html template strange limitation handle looping since template syntax got thinking could probably write templates old templating language programmatically convert react elements could write templates resembling jquery angular django even haml custom parserconverter build react templates could without jsx involved would probably look better wonder main appeal jsx overcome lack multiline string syntax javascript first thinking easy put templates heredoc sting parse use coffeescript exists alternative ways organize things angular reference templates url dev preload page production save requests lot like using requirejs production polymer widget gets html file including element element template behavior side side could done react substitute element available combine html files dynamically dev statically production using vulcanize polymer way seems pretty tempting honestly using polymer instead support p could add looping jsx probably look good already preprocessing script anything possible", "num": "2286", "d": "10/2014"}, {"title": "displayname available instance", "body": "jsx infer component name variable assignment specify class displayname accordingly really available class instance react even set explicitly also componentdidupdate prevstate seems current state sure browserify bundling js tried everything prevstate always logs current state post update", "num": "2285", "d": "10/2014"}, {"title": "warning proptypes", "body": "saw several places code base following issue would nice react warned accidentally write instead", "num": "2284", "d": "10/2014"}, {"title": "highlight", "body": "highlight little second code sample highlights nt change nt highlight line adds", "num": "2282", "d": "10/2014"}, {"title": "event bubbling", "body": "hi ran today issue event bubbling child components parents problem follows child component handles form attaches onsubmit event form submit child handler stuff nt return false event bubbles parent component attaches one onsubmit handler child handler nt get called funny thing attach onsubmit handler element wraps child handlers get called sample code fiddle available js var parent reactcreateclass var child reactcreateclass reactrendercomponent documentbody nt know expected behaviour bug nt found anything related documentation previous issue", "num": "2281", "d": "10/2014"}, {"title": "provide deferupdate method feature request", "body": "hi flux architecture seems recommend react elements bind change event listeners stores call changes occur generally find deferring forceupdate calls useful prevents multiple calls forceupdate tick think idea comes reactmixinmanager provides one implementation personally seen performance boost think using following simple mixin sure good idea generally incorporated react core thought throw meta issues like encouraged frowned upon know large project lot real issues core devs need paying attention", "num": "2280", "d": "10/2014"}, {"body": "correct design updating value input controlled input information docs", "d": "10/2014"}, {"body": "ehm think something caused need recheck bad", "d": "10/2014"}, {"body": "often abbreviated", "d": "10/2014"}, {"body": "spread operator part spec jsx nt change implementation details also specific dom components something like closing intended behavior", "d": "10/2014"}, {"body": "internal helper could expose addon also use simple concatentation hoping able something like might performant either way explicit less magical make easier understand going tends convenient saving typing problem magic nt know props magic behavior exactly might", "d": "10/2014"}, {"body": "pull mixin determined account render cost", "d": "10/2014"}, {"body": "deleted previous comment clearly wrong though yes take measurements without mixin", "d": "10/2014"}, {"body": "ok removed mixin internationalization still render time list counter update", "d": "10/2014"}, {"body": "react wrapping composite component currently significant overhead used large numbers thing angular react remain performant scale must use ca nt though example adding reduce update time significantly pretty sure running react debug mode significantly slower react best bruteforce performer ie tons tons nodes tends perform consistently dealing complex uis angularko often buckles important consideration react meant every usecase easy escape need render huge list dom nodes angular need never react also makes rather easy render ondemand preferable imho personal opinion react fast enough needs notice slowness everything snappy even switching views confident app grows continue perform equally well even nt case component model react fantastic would give lot ps updating single huge array items worstcase react always create virtual dom element items even though may changed absolutely need ondemand grouping items way increase performance significantly skip large parts array", "d": "10/2014"}, {"body": "syranide thanks feedback regarding points nt think numbers component loops number maps li shouldcomponentupdate spend partial update significantly shame required though get things decent performance seems like easy introduce bugs things wo nt update originally tried production mode significantly speed things maybe look something like get range angular yes weighing head surprised see react underperform compared angular almost everything read talked react speedy fact blog post speeding large list rendering angular using ngreact render react wanted make sure nt something would look say duh course getting bad performance compared angular", "d": "10/2014"}, {"body": "sorry another tl dr rendering x amount instead x amount directly react recommends immutable data becomes super cheap super simple nt implement hand every component mostly use mixin find component hotspot add simple check two familiar different tests angular render simple large lists fine data dependencies become complex nonobvious tends become huge issue rarely good way solve seems exact problem ko across entire app experiences understanding react react never best performer simple somewhat synthetic usecases much overhead setting things dealing components much consistent performer even approach worstcase think main takeaway performance subpar react app solution apply simple intuitive optimizations mostly whereas angularkoetc goto often avoid language features apply various workarounds personally used disappointed every framework react worked fantastically start finish consistent performance codebase beautiful readable reusable ever also confident tons researchtype optimizations react eventually apply squeeze every drop performance react incredibly naive current existing codebase components look work reason choosing react want work uis react best everything right feel free drop channel irc questions", "d": "10/2014"}, {"body": "came introduces lots trivial still breaking changes docs yet pushed check repo md files date issue recent impression docs page date week", "d": "10/2014"}, {"body": "date know couple small things left mention deprecated apis new adding docs otherwise updated launch pushed site latest api mistakes omissions please tell us nt bottle ca nt fix problems nt know first hearing problems extent seem describing", "d": "10/2014"}, {"body": "using jsx must use use result tag jsx use class ie value intimately familiar tests various warnings explicitly says warning jsx uses plain function react components valid react jsx transform ie function foo return valid anymore", "d": "10/2014"}, {"body": "one place seeing people get tripped tooling upgrading react without upgrading jsx transform pipeline using reacttools directly reactify library transform must also updated said updated gulpreact l would double check inserting createfactory calls would fix jsx uses still transforming old pipeline easy way check look compiled output createelement nowhere found still using old jsx transform", "d": "10/2014"}, {"body": "duplicate design", "d": "10/2014"}, {"body": "example used indicate html tag called react would use custom component currently jsx transform still check whitelist known html elements wo nt future release allows upgrade without breaking completely mysterious ways eg break compile time nt ship code like production", "d": "10/2014"}, {"body": "intention future version whitelist checked able render custom elements least hoping case want able render webview tag likely little obscure warrant whitelisted", "d": "10/2014"}, {"body": "correct yea would nt add webview whitelist anyway obscure nonstandard tag", "d": "10/2014"}, {"body": "support requested", "d": "10/2014"}, {"body": "closing issue noted could use directly however available part jsx transform", "d": "10/2014"}, {"body": "using workaround", "d": "10/2014"}, {"body": "design believe sebmarkbage", "d": "10/2014"}, {"body": "yea design note change log reason concept key something controlled react internals component gets created thing refs think array map map series tuples react fragment series tuples also key designed decide value slot actual value reading prop named might overloading meaning accidentally using something unrelated change makes concept bit strict helps avoids bugs transferring props another component nt bring key ref along also helps performance ensure types react internals consistent stable would suggest renaming duplicating prop name possible fix really need access", "d": "10/2014"}, {"body": "thanks sebmarkbage really appreciate response kept reading change log related still could nt figure meant said available element directly example seemed pair expecting changing course nt work anyway add new prop thanks response", "d": "10/2014"}, {"body": "agree dcneiner could clarified better first line changelog reads refs accessible yes key confusing", "d": "10/2014"}, {"body": "willdady result assigned children value component updating unmounting result assigned associated element element refers instance defined special use react values used purposes address seems confusion correct within component instance", "d": "10/2014"}, {"body": "thanks extra info syranide makes sense explained thanks", "d": "10/2014"}, {"body": "nt quite enough info help attach stacktrace possible hitting code using implied globals eg though thought safeguarded", "d": "10/2014"}, {"body": "jvm nashorn stacktrace nt think help reactjs file problem happens line renderedcomponent thisrender", "d": "10/2014"}, {"body": "java stack nt interesting helpful get js one", "d": "10/2014"}, {"body": "tweaking catch error reactjs file js stack trace get lines normally respected", "d": "10/2014"}, {"body": "lead help", "d": "10/2014"}, {"body": "handled run time others missing", "d": "10/2014"}, {"body": "totally agree actually planning least initially linking documentation stable branches stopgap solution since api documentation lot explanations interpage links sometimes wording updates releases little tricker node docs yes open change let discuss drop complete change us thought", "d": "10/2014"}, {"body": "reference underscore serve git tag page rawgithub user requests older version nice permanent solid solution though", "d": "10/2014"}, {"body": "would nt work us great idea maybe something vein though", "d": "10/2014"}, {"body": "problem get back get app working", "d": "10/2014"}, {"body": "roycehaynes could please rename bug bug typeapply error typeapply function regards", "d": "10/2014"}, {"body": "natim swtiched continue problem", "d": "10/2014"}, {"body": "switched", "d": "10/2014"}, {"body": "natim updated title", "d": "10/2014"}, {"body": "roycehaynes thanks", "d": "10/2014"}, {"body": "include minimal code reproduces error", "d": "10/2014"}, {"body": "look example le oct paul shannessy notifications githubcom \u00e9crit include minimal code reproduces error reply email directly view github", "d": "10/2014"}, {"body": "bah know happening reactify issue filed details basically install reacttools nt", "d": "10/2014"}, {"body": "natim hmm able fix issues upgrading reactify locked reacttools version correctly however still seeing issue cloning repo running using npm suspicious different npm versions installing packages different orders reactify installed first reason nt see reacttools also going installed meets version dependency install reacttools version npm using", "d": "10/2014"}, {"body": "zpao experiencing issue airbnb starting yesterday afternoon looks like fixed version reactify create test react app shows error", "d": "10/2014"}, {"body": "natim amp zpao thanks guys validating crazy basically reactify upgrades react creates issue solution upgrade reactify", "d": "10/2014"}, {"body": "case nt following along reactify issue updates released branches locking reacttools version still suspect something related npm causing inconsistent repro fine thanks bringing", "d": "10/2014"}, {"body": "deprecated explanation", "d": "10/2014"}, {"body": "ah yes one reasons deprecated probably mention clearly release notes thought changed guess nt", "d": "10/2014"}, {"body": "also", "d": "10/2014"}, {"body": "typically whole point deprecating something give people time transition away break semantics deprecating might well remove entirely least way avoiding potentially insidious bugs come breaking change making clear people upgrade without code breaking", "d": "10/2014"}, {"body": "yes try hard lot changes went one sequencing difficult get right could deprecated introduced spread syntax earlier hindsight transferpropsto rarely used outside facebook deemed nt need release codemod go nt consider former facebookers might use prevalent sorry oct stefano j attardi notifications githubcom wrote typically whole point deprecating something give people time transition away break semantics deprecating might well remove entirely least way avoiding potentially insidious bugs come breaking change making clear people upgrade without code breaking reply email directly view github", "d": "10/2014"}, {"body": "technically transferpropsto nt change semantics affected defaultprops changing semantics breaks used together update post reflect breaking change", "d": "10/2014"}, {"body": "part changes introduced details", "d": "10/2014"}, {"body": "got thanks anything done update getting started page set", "d": "10/2014"}, {"body": "set previous versions docs available github using lt branches need", "d": "10/2014"}, {"body": "fwiw still write work left convenience functions place however compositecomponent need bit wrapping see docs details", "d": "10/2014"}, {"body": "actually like idea using objectassign encouraging use standard however seems counterproductiveredundant implement objectassign internal use exposing reactspread especially objectassign commonly used couple internal apis listen could exposed nt implemented twice", "d": "10/2014"}, {"body": "think radical least doc explain something like use transferpropto function compatibility due case feel react credible popular words chinese \u6b65\u5b50\u5927\u4e86\u5bb9\u6613\u626f\u5230\u86cb means step big ball break", "d": "10/2014"}, {"body": "dandelany feature never announced nt quite done yet spread attributes jsx require calls original intention require polyfill react core like features direction heading checkout presentation rationale transpiler react likely take dependencies polyfills future especially features unfortunately wider js community polyfilling infrastructure pretty poor eventually decided taking dependency react core dexbol main docs updated alternative patterns nt want follow along progress standards", "d": "10/2014"}, {"body": "closing since already addressed", "d": "10/2014"}, {"body": "sebmarkbage thanks explanation apologies confusion installed accidentally still testing project used great presentation definitely agree reducing api surface area bringing abstractions control though bit worried polyfilling work seems like options none great bundle polyfills internally react eg react namespace modules bad problems mentioned fact ca nt refer via normal syntax bundle polyfills react overwriting globals eg objectassign seems weirdbad practice touch globals user could already polyfill place repolyfilling still maybe best option require users polyfills place react work properly allows people use polyfills want significantly increases barrier entry getting react working new dev curious react planned approach definitely easy problem solve", "d": "10/2014"}, {"body": "ran well upgrading couple widget components useful pass element type use internally part markup would nice stricter validation coffee widget reactcreateclass proptypes label reactproptypesstringisrequired labeltag reactproptypescomponentisrequired used work getdefaultprops gt labeltag reactdomspan render gt reactdomdiv classname widget propslabeltag classname label propslabel reactrendercomponent widget label wahoo labeltag reactdomstrong mountpoint", "d": "10/2014"}, {"body": "spent day still closer solving since found though use esc key close modal error thrown", "d": "10/2014"}, {"body": "like error says seems calling component unmounted go calls make sure correct log figure one called late", "d": "10/2014"}, {"body": "point tho coming component see components", "d": "10/2014"}, {"body": "debugging deep core components marked causing problem really nt get component update unmounted etc fine", "d": "10/2014"}, {"body": "uses asap formerly setimmediate queue updates perhaps something unmounting added tests", "d": "10/2014"}, {"body": "temporarily fixed calling modal closed sure fixes puts end days trying figure", "d": "10/2014"}, {"body": "posterity probably workaround backfires nt actually verified edit really weird workaround actually fix seems nt reason", "d": "10/2014"}, {"body": "interestingly nt happen safari ff affected however different values css properties html", "d": "10/2014"}, {"body": "highlights problem without diving markup", "d": "10/2014"}, {"body": "tried without react doubt react culprit", "d": "10/2014"}, {"body": "correct wondering possible reconcile difference behavior modern browsers", "d": "10/2014"}, {"body": "worth noting able capture event like", "d": "10/2014"}, {"body": "nt fire event doubt anything react sniped", "d": "10/2014"}, {"body": "sounds like fires nt bubble", "d": "10/2014"}, {"body": "seems onchange file inputs nt bubble example jquery may workaround latebinding change handlers directly descendant elements using see", "d": "10/2014"}, {"body": "blame lib use sourcing lib replace gets added better polyfill details may able suggest targeted solutions react uses whatever nothing react closing keep discussing", "d": "10/2014"}, {"body": "zpao made chrome plugin inject js webpage ca nt change js lib webpage js lib change functionprototypebind first page loading react problem happened may fix functionprototypebind using react", "d": "10/2014"}, {"body": "replace gets added better polyfill yup", "d": "10/2014"}, {"body": "thx", "d": "10/2014"}, {"body": "style keys need camelcased see information wrong need use wonder firefox stumbles", "d": "10/2014"}, {"body": "oh missed article thanks info idea working browsers spotted inside inline styles object development console warning would helpful seems like easy mistake", "d": "10/2014"}, {"body": "already warning rc please shout see differently", "d": "10/2014"}, {"body": "probably good way find two copies react loaded commonjs modules antithesis sharing global scope literally two duplicate separate modules would expect react clever enough figure say component react component even copy react", "d": "10/2014"}, {"body": "think lesser evil put flag like flag react reads devtools spend time", "d": "10/2014"}, {"body": "sebmarkbage zpao commonly recurring problem hard debug simply setting testing whether set would save lot people lot headache objections preferable extend simple ducktyping warns looks like reactelement nt something like free nt interfere intentionally running multiple react instances", "d": "10/2014"}, {"body": "think future actually work meantime warn", "d": "10/2014"}, {"body": "would catch issues listed though usually problem comes component helper library loads version get case besides react truly support independent reacts page right interfere way nt mixed eg browser event handling", "d": "10/2014"}, {"body": "clarify referring syranidea comment", "d": "10/2014"}, {"body": "would catch issues listed though usually problem comes component helper library loads version get isvalidelement case might mistaken ignoring weird hacks issue multiple instances react reactelements different instances gets mixed depending api feed going see lots different errors though yeah think take care least besides react truly support independent reacts page right interfere way nt mixed eg browser event handling long never stop event propagation mount inside ok think still great though think future actually work meantime warn good point", "d": "10/2014"}, {"body": "poc jsxastemplatestring implementation", "d": "10/2014"}, {"body": "reasons completely possibleuseful", "d": "10/2014"}, {"body": "rreverser thanks engaging discussion twitter like note objections long form friendly attempt change opinion highlighting rebutting points article linked would possible use template literals syntactic entry point change semantics inside template literal allow embedded scripts evaluated scope seems negate possible portion statement reasons completely possibleuseful however would lead divergence tooling built around assumptions imposed template literals would nt work fine expected world would still need tooling around understand tag however inside template literal means tool made understand tag would help tooling dsls nt intend using either big win would undermine meaning template literals true tagged template nt make use nt mean undermined think mustache handlebars jrb etc forgo would necessary define jsx behaves within rest ecmascript grammar within template literal anyway would dsls ones make use therefore better introduce jsx entirely new type primaryexpression follow preceding statements currently jsx tooling requires two things new parser tooling understand dsl went free template literal route tooling understand dsl would required requiring additional parser requiring tooling able except custom parsing understand grammar also means ca nt use jsx transpilers easily opting harmony features requires unnecessary overhead argument coffescripttypescript etc guilty crime nt make better completely different languages jsx could easily made real js willing accept template literals need use", "d": "10/2014"}, {"body": "mikesherov realise poc linked would create actual dom elements render thereby eliminating performance gains allowed virtualdom", "d": "10/2014"}, {"body": "nt realize thanks letting know however poc could augmented work way react actually works virtual dom implementation details trying find would possible use template strings instead suggest poc actual replacement rreverser raised points language semantics still trying illuminate understand real meat issue argument poc using actual dom actually factor discussion poc see syntax could handled well enough template strings", "d": "10/2014"}, {"body": "mikesherov unless static transformation template string intrinsically bad idea would say hint name template string would require runtime parsing would way actually translate tag names locally defined classes unless want use variables left html far behind could use js instead", "d": "10/2014"}, {"body": "unless want use variables left html far behind could use js instead fail see far html nt", "d": "10/2014"}, {"body": "true tagged template nt make use nt mean undermined point would leave unused variable linter minifier would useless code probably also type system perhaps could code highlighting even would helpful would expect highlighters work well code worst case minifier proceeds without error reason think anything inside template literal referred anything outer scope nt even notice hits production best could start assuming special semantics content template literals undermine meaning template literals requiring additional parser requiring tooling able except custom parsing understand grammar yes example better incompatible tooling fails early tries proceed wrong assumptions also means ca nt use jsx transpilers easily thing needed parser compatible transpile jsx calls leave rest untouched pipe another parser pretty quick updating parser new syntax proposed standardization eg asyncawait etc also thirdparty forks parties like rreverser awesome work acorn expecting use experimental syntax still use something like sweetjs ideal mixing various experimental local dsls still build one jsx template literal systems becomes popular enough might adopt far seems people prefer use either jsx function calls thirdparty language think jsx shows js lacking certain syntactical features pure json nt readable format data structures hopefully spark ideas introduce new object literal form js even based xmllike syntax close issue nothing new nothing actionable feel free keep discussion going reopen new information arrives", "d": "10/2014"}, {"body": "pretty quick updating parser new syntax proposed standardization eg asyncawait etc yes entire js tool chain ecosystem nt quick think jsx shows js lacking certain syntactical features well syntactic noise roadblock really js template strings handle jsx left extra extra certain cases react deems noisy respect opinion even disagree use example complicated example template strings post slightly noisier make tag switch vs pure json nt readable format data structures hopefully spark ideas introduce new object literal form js even based xmllike syntax would agree sentiment json isnt solution less noisy tagged template syntax would thanks thorough response think bit unfortunate syntactic noise ultimately preventing template strings adopted whole new primaryexpression perhaps one day reconsider", "d": "10/2014"}, {"body": "even sure switching actually even works simply trying make point syntactic terseness actual blocker", "d": "10/2014"}, {"body": "mikesherov familiarity also issue overcome want make clear nothing would make happier standardized solution issue think custom dsls even custom highlevel libraries avoided possible tooling issue issue one thing learn however says lot many smart people tend think familiarity terseness jsx worth downside complicating tooling story increasing language surface area people opposite side nt think toolingcompatibility issue nt like look indicates issue remains perhaps solution better editors allow customize code looks like source code representation nt matter use syntax preference unfortunately ide tooling nt yet least terms popularity", "d": "10/2014"}, {"body": "want make clear nothing would make happier standardized solution issue think custom dsls even custom highlevel libraries avoided possible case possible seemingly desired however says lot many smart people tend think familiarity terseness jsx worth downside complicating tooling story increasing language surface area equal number smart people side discounting jsx nt think appeal unnamed authority good argument would say smart people may thought using template strings fully unnamed anonymous rebuttal indicates issue remains perhaps solution better editors allow customize code looks like source code representation nt matter use syntax preference unfortunately ide tooling nt yet least terms popularity different transpilation anyway solution would allow user define default template string parser define boundary markers expressions terseness argument gone", "d": "10/2014"}, {"body": "case possible seemingly desired possible sense ca nt possibly deprecate without uprising nt think appeal unnamed authority good argument nt mean authority populous ie majority sentiment solution would allow user define default template string parser define boundary markers expressions macros", "d": "10/2014"}, {"body": "thanks discussion means lot sensitive topics discussed civilly freely without attitudes getting way possible sense ca nt possibly deprecate without uprising know feeling lived deprecating tons stuff jquery user outcry response built jquerymigrate plugin work deprecation jsx format ever seriously considered gladly write migration tools along army folks would help make switch easy devs nt mean authority populous ie majority sentiment appeal majority opinion better appeal authority also dispute majority think preferable language unification", "d": "10/2014"}, {"body": "macros took suppose", "d": "10/2014"}, {"body": "appeal majority opinion better appeal authority also dispute majority think preferable language unification clarified meant within react community sure larger js community would prefer unification nt bare cost even within react community large code bases suffer components higher level abstractions apparent cost switching less familiarterse syntax higher pain feeling divergent tooling would say smart people may thought using template strings fully explained considerations earlier posts person various companies using react internally facebook nt think people unfamiliar issues hurt personally gladly write migration tools along army folks would help make switch easy devs already tool transpiler upgrade path issue break things time make sure provide upgrade path problem people would bare cost working subjectively worse syntax nt currently hurt trying deprecate would make lives worse", "d": "10/2014"}, {"body": "explained considerations earlier posts person various companies using react internally facebook nt think people unfamiliar issues fair talking anonymous majority group time made statement prior clarifying problem people would bare cost working subjectively worse syntax nt currently hurt trying deprecate would make lives worse aye trust understand concern initial question asked back compat personal opinion evidence support think people would get would make lives worse temporarily resulting benefits unified ecosystem would felt far wide despite devs knowing connection anyway think beaten dead horse enough taken enough time thanks discussion hope reconsider future", "d": "10/2014"}, {"body": "somewhat relevant jsontype alternative syntax jsx", "d": "10/2014"}, {"body": "jussikalliokoski mention much boilerplate exists explicitly nonjsx users syntax also reponsible significant amounts unnecessary allocations reactelements plain objects nt think provide manually created ones yet intention iirc", "d": "10/2014"}, {"body": "syranide boilerplate especially component contains lot html elements unnecessary allocations productivity gt performance time always use directly parts code becomes problem", "d": "10/2014"}, {"body": "jussikalliokoski unnecessary allocations productivity gt performance time think one reasons jsx exists", "d": "10/2014"}, {"body": "andreypopp think one reasons jsx exists question hate jsx fact use reasonablesized project work however significant tradeoff productivity gives somewhere takes somewhere else compile step give examples pretty nice style rules project ca nt enforce tools like jscs jshint tool incompatibility bridging tools make sacrifices either causing linters ignore things jsx blocks completely nice example pure js vim setup whenever save file jumps next linting error tools free make typos inside jsx blocks without editor noticing anything preprocess code passing linter leads compilergenerated style violations would nt make sense able configure jsx output style rules another problem errors using gulpwebpack jsxloader every time compilation error jsx error message tells line omits file caused filed bug long time ago always forget manage eventually figure causing error preprocessing steps always pretty serious tradeoff effect magnified tools play much used love reason eventually gave coffeescript well jsx far less horrible coffeescript sense though errors make sense transformation lightweight nt really even need source maps proper debugging", "d": "10/2014"}, {"body": "mootools problem", "d": "10/2014"}, {"body": "mootools using old webpage ca nt remove bloodyowl", "d": "10/2014"}, {"body": "sounds like mootools implements differently standard mootools corrected easier path getting rid mootools feasible would upgrade mootools", "d": "10/2014"}, {"body": "personally made sure changed mootools back day going bad time anything sorry upgrade", "d": "10/2014"}, {"body": "made chrome plugin inject js webpage ca nt change js lib webpage js lib change functionprototypebind first page loading react problem happened may fix functionprototypebind using react sebmarkbage", "d": "10/2014"}, {"body": "suggested using better polyfill", "d": "10/2014"}, {"body": "chrome extensions execute code isolated dom environment using content scripts way execute environment completely isolated web page realm still touch dom scripts page interact message passing need", "d": "10/2014"}, {"body": "nt meant work getting might worth making clearer", "d": "10/2014"}, {"body": "suggestion step step since able render data cant render data", "d": "10/2014"}, {"body": "ah sorry totally missed part comment seems reasonable feel free go", "d": "10/2014"}, {"body": "obviously wo nt dynamic bootstrap messes dom ca nt react manage also", "d": "10/2014"}, {"body": "figured much thinking told friend create popover react would rather use jquery tools needs display static information changes sense backbone underlying tech polls new information every seconds rerenders backbone view nothing call react component tyhe way change information side world changes interms user input manually change wont problem makes sense", "d": "10/2014"}, {"body": "considered using react bootstrap accomplish describing lines using reactbootstrapoverlaytrigger reactbootstrappopover", "d": "10/2014"}, {"body": "nothing actionable option render string want could easily every render would fit jquery stuff bootstrap depends could also create hooks update certain events use something like react bootstrap mentioned", "d": "10/2014"}, {"body": "also wrote explanation", "d": "10/2014"}, {"body": "want able apply css name minification line someone writes transformation implements might well added doubt devs would take time", "d": "10/2014"}, {"body": "indifferent whether wise use part spec somewhat surprising jsx harmony nt support using jsx compiler service see get translated property value shorthand function values already supported computed keys", "d": "10/2014"}, {"body": "react picks features via jstransform nt jsx specific falls category general js transforms would need pick result going close think good candidate request jstranform repo file issue", "d": "10/2014"}, {"body": "access attribute like reactlike give element ref use", "d": "10/2014"}, {"body": "nothing react setting attribute dom node nt corresponding property safely get attribute value using appropriately storing data random dom nodes use data attributes access", "d": "10/2014"}, {"body": "hm yea intentional ensure stable types system nt think null treated valid nonvalue align defaultprops default arguments default values destructuring intention null symbolize missing object however type weird coerced left refs expect become objects valid represent missing value two options allow value coerced strings throw nonstring values nt coerce string start using maps keys eg dates would become reference instead value would treated key would still duplicate", "d": "10/2014"}, {"body": "maybe support meaning key warning drop support trying avoid breaking things impossible grep without warning idea places code", "d": "10/2014"}, {"body": "nt prod though right thought fallback duplicate values would essentially", "d": "10/2014"}, {"body": "code previously outputted outputs ignore children first given key", "d": "10/2014"}, {"body": "oh fine warning one version swap behavior want send pr", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "react actually renders seems inside allowed", "d": "10/2014"}, {"body": "tried several different combinations one troubled one add propspatterns first pattern object works properly add second one first pattern still works second nt feels like inserting second pattern node using proper dom constructor still might missing something renderdefs function var var defsarray var patternids objectkeys thispropspatterns patternidslength return", "d": "10/2014"}, {"body": "function look like last example gave", "d": "10/2014"}, {"body": "let paste whole module changed thisprops thisstate var mainview reactcreateclass sorry verbose comments inspector element manually change fill back red works colors nt", "d": "10/2014"}, {"body": "taddei tried testcase corroborate findings way managed make update work forcing react completely alter svg element parent jsbin ugly ugly hack", "d": "10/2014"}, {"body": "touchesir yes thanks prototyping issue came happens react add elements svg nt expertise core react functionality would guess would usage innerhtml instead innersvg guess", "d": "10/2014"}, {"body": "ready please nt use issues mailing lists stackoverflow direct communication appropriate venues", "d": "10/2014"}, {"body": "ok thx", "d": "10/2014"}, {"body": "give example code would make improvement", "d": "10/2014"}, {"body": "spicyj react optimization drop array allocation children reconciles correctly lowest level pr allows work depth thus extends courtesy usecases common though useful also compare ex nt see justification making inconsistent unless measurable cost willing take quite sure nt", "d": "10/2014"}, {"body": "know put rc already right really decided happened sure let deprecate want put pr", "d": "10/2014"}, {"body": "nt see coming started working also deprecate change semantics put pr decide later", "d": "10/2014"}, {"body": "documentation get dated gets synced going call closed thanks taking", "d": "10/2014"}, {"body": "seems touching arguments significant slowdown relatively necessarily practice good overview arguments handling surprisingly using arrayprototypeslicecall arguments leaks arguments object may better use inline arguments slicer helper instead hot paths", "d": "10/2014"}, {"body": "deprecate isvalidclass", "d": "10/2014"}, {"body": "also consider documenting quite important flux etc perhaps mention release notes", "d": "10/2014"}, {"body": "hey shipped still couple things get docs checklist", "d": "10/2014"}, {"body": "order still matter unless also force zindex guarantee never overlap imagine best solved helper function retains ordering previous next array rather add core consider issues going map set map seems like edge case edge case cost delegating helper function nt issue probably react internally anyway", "d": "10/2014"}, {"body": "syranide totally agree edge case helper function let anyway wanted put case easier way nt read react source seemed like less work thought might help performance case require anything small amount time implement think close issue side note translate values depend order data elements generated overlap actually guaranteed implemented optimized version interested", "d": "10/2014"}, {"body": "fwiw set actually ordered ordered insertion order also nt problem objects numeric keys mess ordering new set set sadd set sadd set sadd set sadd set var x svalues consolelog x sdelete true sadd set var x svalues consolelog x still pretty interesting suggestion", "d": "10/2014"}, {"body": "thats interesting anyway long agreed close issue unless trivial add workaround anyway", "d": "10/2014"}, {"body": "curious helper function looks like care share gist", "d": "10/2014"}, {"body": "sure best way yet firstly nt think clean way since propschildren immutable map function wo nt work ca nt simple transform function working two possible approaches approaches involve creating helper react component tracks changes using state accepts data unique keys another react component render data approach store object every possible unique key ever rendered render method something like render function assuming data array objects unique property called key var key thisstatecache thisstatecache key false setting values false removing order maintained thispropsdataforeach function elem thisstatecache elemkey elem bind var children map thisstatecache function elem return thispropscomponent elem bind elements order existing elements preserve order new elements added end return reactdomspan null children seems like better way things essentially two fast loops time complexity n element removed readded inserted original position middle sure meaningful performance difference compared new dom nodes appended end way would always take current set elements rendered put state object diffing every time ensure new elements added end would obviously similar terms code things assume data passed props data related order originally sent component passed knows display correctly actual order dom nt matter another thing note browsers working api would let update transform values without updating strings elements would eliminate almost dom operations", "d": "10/2014"}, {"body": "sure going win anything stock reconciliation pass tried actually measured significant performance wins real application", "d": "10/2014"}, {"body": "oh course making work javascript minimise dom operations trying also thought mixin makes react less work would sensible im sure test properly yet", "d": "10/2014"}, {"body": "nt care order children keys might straight forward make idempotent sorted children key first would predictable inserts removes would occur", "d": "10/2014"}, {"body": "functions component automatically bound component instance", "d": "10/2014"}, {"body": "react binds functions defined component automatically realize confusing newcomers might make explicit arrow functions future sure yet", "d": "10/2014"}, {"body": "greate feature love", "d": "10/2014"}, {"body": "discards regardless necessary intentional however guess could really wrap internal identity component ref instead", "d": "10/2014"}, {"body": "daddye slew feature requests feature appears team yet decide whether implement multiple element return jsx background", "d": "10/2014"}, {"body": "closing favor", "d": "10/2014"}, {"body": "correct behavior sorry issue", "d": "10/2014"}, {"body": "nt think jsx box perhaps macro sweetjs see", "d": "10/2014"}, {"body": "react jsx transformer probably never jsx implementations certainly", "d": "10/2014"}, {"body": "going free write transform like", "d": "10/2014"}, {"body": "syranide nice think sweetjs plus job", "d": "10/2014"}, {"body": "maybe think things first realize pass kind property component never mind", "d": "10/2014"}, {"body": "sounds like figured one", "d": "10/2014"}, {"body": "right think author nt expose info like details might assume dev search example mentioned article anyone searching example need depends structure project", "d": "10/2014"}, {"body": "fisherwebdev would feel adding line jest intro mentioning things may need specify packagejson linking jest docs nt think get exact specifics", "d": "10/2014"}, {"body": "tried throws already step", "d": "10/2014"}, {"body": "browsers tend parse data attributes starting number actually valid according likely reason valid obviously true variables see closing reopen disagree", "d": "10/2014"}, {"body": "quite certain reports instead replaces falsy values obviously node nt", "d": "10/2014"}, {"body": "construct complete simplified example nt think happening since reactaddons requires thing react adds couple properties", "d": "10/2014"}, {"body": "okay due fact bundling react separate bundle currently two different copies react", "d": "10/2014"}, {"body": "relevant well supposed update anything inside body via react", "d": "10/2014"}, {"body": "using name multiple times overwriting spot instead get reference erroring image event object note though generally safe modify attributes dom directly especially plan update react later would better store js info image including whether errored update src property rerendering based new data also wrong forum help requests like future mailing list irc channel stack overflow would appropriate", "d": "10/2014"}, {"body": "hey spicyj thanks help sorry posting reason posted coz thought bug tried using without also thing missed keep mind thanks anyways", "d": "10/2014"}, {"body": "allowed manually mutate nodes created react mounting div span text managed react blown away mount would error see react sees existing markup usually indicates serverrendered reused yeah serverrendered check could smarter rendercomponent could throw invariant react children roots serverrendered", "d": "10/2014"}, {"body": "zpao good first bug", "d": "10/2014"}, {"body": "yeah would good response say obvious stupid simplified example layers abstraction way preventing realising going error nt really help", "d": "10/2014"}, {"body": "web components used intertion point thispropschildren really sure actually asking last example done using insertion point well want multiple insertion points either use props filter pick ones want either type prop", "d": "10/2014"}, {"body": "sorry familiar terms express examples think need single insertion point ok case maybe relate docs though use cases explicitly demod", "d": "10/2014"}, {"body": "made pr tell ok", "d": "10/2014"}, {"body": "pr merged closing milestone", "d": "10/2014"}, {"body": "plans disable right detection bit tricky nobody working see", "d": "10/2014"}, {"body": "looks like htmldompropertyconfigjs", "d": "10/2014"}, {"body": "clarify updated yup using mdn example works nt interested fixing tmcw", "d": "10/2014"}, {"body": "yep pr opened", "d": "10/2014"}, {"body": "thanks quick fix", "d": "10/2014"}, {"body": "commendable", "d": "10/2014"}, {"body": "great move making community driven project", "d": "10/2014"}, {"body": "kudos indeed", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "rather trivial draft pr", "d": "10/2014"}, {"body": "yo petehunt jam opinions", "d": "10/2014"}, {"body": "sebmarkbage could give examples wrappers needed new contribution react sorry ask trivial questions", "d": "10/2014"}, {"body": "clues", "d": "10/2014"}, {"body": "scary scry fantasy word means search something", "d": "10/2014"}, {"body": "spicyj differ name something actually descriptive perhaps common testing", "d": "10/2014"}, {"body": "historically methods dom helpers returns single result returns set", "d": "10/2014"}, {"body": "must facebookism defined function util module happily ignoring testutils functions ever since", "d": "10/2014"}, {"body": "briefly examined problem generally problem logic put children rather parent would better suited responsibility root component global loading indicator probably one logic simply forward data children seems general recommendation nt view components isolated black boxes move logicdata hierarchy perhaps makes sense context recommend taking react discussion group coming irc closing keep github issues focused development", "d": "10/2014"}, {"body": "looks like weird fix actual issue", "d": "10/2014"}, {"body": "found fix suitable another framework similar issue issue updating values component update mixin safari throws attempted assign readonly property error maybe logical fix solution found", "d": "10/2014"}, {"body": "could would like repro understand problem surfaces clear looking fix", "d": "10/2014"}, {"body": "actual issue value causing problem make reduced test case", "d": "10/2014"}, {"body": "ca nt reproduce stuff simplified version logic perhaps problem complex rewriting object project found bug gon na try reproduce weekend perhaps find correct reproduction could close issue", "d": "10/2014"}, {"body": "cc sebmarkbage", "d": "10/2014"}, {"body": "sure collections duck typing set also enough maps special probably want use key react key value could either detect maps specifically allow iterable sequence two value tuples difficult part determine tuple nested array value map tuple", "d": "10/2014"}, {"body": "maybe iterable enough map iterators return tuples set array iterators return individual values perhaps hold convention treat tuple react key", "d": "10/2014"}, {"body": "drawback nested iterablesarrays explicitly looking method spec collections also want see keys would differentiate cases", "d": "10/2014"}, {"body": "perhaps misunderstood discussion seems must explicitly test vs etc containing tuples interpreted keyvalue unthinkable would want store lists children ps collections etc", "d": "10/2014"}, {"body": "implements collections mess think right strategy intelligently check native mapset implementation polyfill noncompliant approach taking facebook", "d": "10/2014"}, {"body": "leebyron sounds sane could even polyfill array cheap iterable easily well believe showed earlier work backporting map set approximate weakmap weakset well legacy browsers actually perform rather well perf memory could easily made smart enough use mapset underlying data structure provide additional data required fast ordered iteration", "d": "10/2014"}, {"body": "guess bug webkit firefox works fine scrolling seems stop react removes elements dom workaround found far unfortunately antipattern nt remove elements dom instead let react reuse react reuse element key screamcat hopefully better solution", "d": "10/2014"}, {"body": "imagine elements removed new ones added browser viewport temporarily becomes smaller stops scrolling solution force minimum height bodyouter element update unset minimum height", "d": "10/2014"}, {"body": "made almost minimal test case syranide height never becomes smaller nt know force minimum height", "d": "10/2014"}, {"body": "cody aha yeah would expect bug webkit unless issue nt present thing plain js could react something stops scrolling could fixed time plain js repro would awesome", "d": "10/2014"}, {"body": "syranide come plain js result react broken webkit works fine firefox react innocents thereby proven", "d": "10/2014"}, {"body": "cody ah awesome thank wonder way around somehow asked google quickly could nt find anything helpful", "d": "10/2014"}, {"body": "gabor use eventually order keys objects nt maintained react wo nt function", "d": "10/2014"}, {"body": "know ordered seems good fit used still think conceptually want array pairs perhaps dropin replacement unfortunately browsersupport quite poor one ff chrome ok soon polyfillland time guess documentation updated recommend maps second part comment mean react internally relies orderingthing function case changedfixed soon possible perhaps switching using polyfill browsers support", "d": "10/2014"}, {"body": "nt see could arrays keyvalue pairs would exclude possibility nonkeyed arrays", "d": "10/2014"}, {"body": "hmm right support nonkeyedarray objectwithkeys right guess code simply checks array behave accordingly checking could simply see array items pairs also could please respond first part response true react internally relying ordering objects plans fix problem", "d": "10/2014"}, {"body": "hmm right support nonkeyedarray objectwithkeys right yes iterables coming though guess code simply checks array behave accordingly checking could simply see array items pairs would ambigious necessarily mean treated pairs also could please respond first part response true react internally relying ordering objects plans fix problem intentional performance reasons react used facebook instagram safe say issue practice react move use internally future", "d": "10/2014"}, {"body": "hmm thought sacrificing correctness performance domain c programmers perhaps used often moving plan mean support react planning go polyfill perhaps branches code already published documents facebookdoesitsoitmustbeok argument sure respond", "d": "10/2014"}, {"body": "happens react pools event objects call prevent event object recycled", "d": "10/2014"}, {"body": "react nt mutate native object synthetic event mentioned poll objects mitigate gc hold one calling persist", "d": "10/2014"}, {"body": "use case solved removing classes inside callback remove inside handler instead removed ing yet callback instead removeclass calls right addclass outside callback actually using timeouttransitiongroup since works fine fix presume fix behavior well someone bumps problem hope less hackish solution though", "d": "10/2014"}, {"body": "hey could please provide example example see callbacks get fired expected also added second click button fired multiple setstate sequence commented going behind drives behavior overriding property merge pendingstate partialstate nt know exactly question helps hope helps someone smile regarding questions check comment", "d": "10/2014"}, {"body": "hi cirocosta changed ui around nt share original comment sure setting state onblur set state button would display would result button onclick called", "d": "10/2014"}, {"body": "react nt care callback comes created want load templates ondemand seems far preferable use codesplitting achieve full benefit without involvement react", "d": "10/2014"}, {"body": "react supporting string templating options argued beginning biggest point jsx template simple transform otherwise js transforms js directly sting parsing runtime wo nt adding syntax conditionals loops supported language nt go learn whole language see handlebars ng etc something already know host language syranide mentioned could easily refer file function render function want", "d": "10/2014"}, {"body": "react deep clone propsstate want benefits using need ensure objects immutablenot mutated", "d": "10/2014"}, {"body": "cigzigwon get displayname bit ugly useful debugging anyway", "d": "10/2014"}, {"body": "ok nt realize since new react thx guys", "d": "10/2014"}, {"body": "cigzigwon almost always someone knowledgeable online irc channel gettingstarted related questions feel inclined", "d": "10/2014"}, {"body": "well ridiculous request follow naming conventions instead pattern test", "d": "10/2014"}, {"body": "sadly nature javascript apply applies magic methods everything define well nt believe anything sensible react nt cherrypicking caseinsensitive testing defined properties list supported react properties however hesitant would patch fraction problem inherent javascript ultimately react concern static analysis possibly future ecmascript proposals truly worthwhile solution sure defer zpao sebmarkbage final say", "d": "10/2014"}, {"body": "fair mistake seen several different people make silently fails check props also addressed lint rule given react helpful error messages thought might worthwhile addition agree cherrypicking", "d": "10/2014"}, {"body": "already precedence cherrypicking difficult though", "d": "10/2014"}, {"body": "sebmarkbage go ahead emit warnings dev react properties incorrect casing", "d": "10/2014"}, {"body": "syranide well properties bit indication something wrong right add method order add functionality functionality break case proptypes misscase props go silently unchecked", "d": "10/2014"}, {"body": "recognize problem nt idea good solution casing common one nt sufficiently solve problem misspellings like common ca nt really catch end would prefer get rid proptypes benefit type checking systems like flow safe typescript new syntax extensions harder misspell warn", "d": "10/2014"}, {"body": "fair closing", "d": "10/2014"}, {"body": "issue true erratic production correct dev lines passed markdown renderer correct see l think matter publishing new version production dev", "d": "10/2014"}, {"body": "fixed missed getting branch docs published brought repush site", "d": "10/2014"}, {"body": "event bubbles root per html domcomponent exists domhierarchy receives dom composite component part domhierarchy receive dom want expose need expose ie call right time", "d": "10/2014"}, {"body": "ok thx quick response", "d": "10/2014"}, {"body": "familiar flux use preferable react point view wrong react really comes used immutable data largely propagated root would simply batchdefer updates root propertiesstate would get single near optimal update immutable data generally preferable many reasons react landed master available release yet nt actually dissected exact details sure applies well think might could simply wrap updates single could easy fix applies really familiar practical intricasiesrecommendations using react mutable data ca nt give authorative answer best plan action think switching using immutable data preferable obviously always practical depending project meta issues like encouraged frowned upon know large project lot real issues core devs need paying attention selfinterest questions frowned upon anything benefit react seems fine least also know alone bumping issue", "d": "10/2014"}, {"body": "awesome thanks syranide look immutables honest nt seen page react docs clearest explanation immutables seen far also looks like helpful lib stands far aware flux recommended architecture managing data event flows react applications flux nt much say immutables possibly unfortunate fact published article use flux stores ot would appreciate feedback might nice usually nt run problem immutables solve since usually component tied store listen changes rarely necessary since updates triggered bottom component tree top think use backbone property purpose true though nt tried yet situation run component listening changes multiple stores receive event triggering say three calls one would mentioned think kind thing likely happen lot people impression one recommended way things unfortunately nt think helps looks like calls must made inside function whereas problem call made inside separate event handlers perfectly happy using little mixin think would useful others unless nt instead preferring reading attributes thisstate even belong stores passed props", "d": "10/2014"}, {"body": "squarely realm makes sense never tried sense nice usually nt run problem immutables solve since usually component tied store listen changes shouldcomponentupdate rarely necessary think use backbone changed property purpose true though nt tried yet everytime heard backbone react mentioned sentence backbone poor fit react problem evented setup works great react long single event emitted per action none components listening event parentschildren soon either broken get overlapping updates unless able batchprune somehow beauty pushing everything root long action clearly defined end push current model data root redundant renders inconsistencies etc also use immutable data also get benefit virtually unnecessary renders cheap theory anyway running something similar works great last heard discussion subject best practice really sure entirely date perhaps dev shine definitive light subject using reacts events forceupdate", "d": "10/2014"}, {"body": "hmm evented setup definitely flux recommends stores built around eventemitter talking also makes sense though personally dont believe run parentchild problems despite deeply nested data would also love clarification dev though learned lot already thanks oct pm andreas svensson notifications githubcom wrote squarely realm makes sense never tried nice usually nt run problem immutables solve since usually component tied store listen changes shouldcomponentupdate rarely necessary think use backbone changed property purpose true though nt tried yet everytime heard backbone react mentioned sentence backbone poor fit react problem evented setup works great react long single event emitted per action none components listening event parentschildren soon either broken get overlapping updates unless youre able batchprune somehow beauty pushing everything root long action clearly defined end push current model data root redundant renders inconsistencies etc also use immutable data get benefit virtually unnecessary renders theory anyway running something similar works great last heard discussion subject best practice really sure entirely date perhaps dev shine definitive light subject using reacts events forceupdate reply email directly view github", "d": "10/2014"}, {"body": "spicyj interesting curious would interpreted", "d": "10/2014"}, {"body": "mdn nt clear", "d": "10/2014"}, {"body": "uses value filename iirc empty interpreted truthy download link without provided filename", "d": "10/2014"}, {"body": "code follows bad practices first try declaring initial state second nt need rerender component like changing state rerender twice render initially function nothing name parameter try looking examples write better code", "d": "10/2014"}, {"body": "cigzigwon thanks know bad practice question internal framework heavily inspired om concepts maintains state outside react always rerenders top injecting global application state read jsfiddle oversimplification problem actually happened application someone triggered application event render phase event triggered render inside render beginning suspected someone something like point issue issue making error message consistant always detects potential infinite loop rendering triggered outside also make clearer component cause problem component triggered nested rendering case put breakpoint react warning statement able find appropriate stack entry concerned component would easier error instead warning put displayname component error anyway warning appropriate anyway another error happens little bit later obscure error message would better fail fast consistently exposed cases", "d": "10/2014"}, {"body": "ok get gist saying someone else also wanted sort protection infinite loop mistake yes referring standalone react successfully used libs internally react works great sounds like issue code reviewpair programming techniques solve within organization", "d": "10/2014"}, {"body": "thisismounted false componentwillmount function", "d": "10/2014"}, {"body": "cigzigwon oh ok pulled comments another issue nt aware fixed thanks", "d": "10/2014"}, {"body": "hi dmose seems like great thing made pr trying address see appreciate hear think", "d": "10/2014"}, {"body": "responsibility want submit issue petition moving shareable utils core separate packages seems sound would expect happen anytime soon", "d": "10/2014"}, {"body": "apparently kind happening", "d": "10/2014"}, {"body": "going trying move away much possible flux examples probably use internal modules", "d": "10/2014"}, {"body": "filed flux", "d": "10/2014"}, {"body": "need factory return object props methods use dont instantiate function nt scoped directly bad code", "d": "10/2014"}, {"body": "cigzigwon described already works little less memory efficient using prototype many instances created nt know say bad code since using prototype bad code may considered premature optimisation think would either nice support mixins prototypes either document ca nt use prototypes mixins irc chan alone wondering works guess people give try prototypes", "d": "10/2014"}, {"body": "slorber react use prototype autobinds methods eventually seems nonissue provide classes react react longer require use even core sure", "d": "10/2014"}, {"body": "sebmarkbage anything actionable", "d": "10/2014"}, {"body": "think way early upgrade since rc solution", "d": "10/2014"}, {"body": "indeed moving transition worked wonder breaks somewhere else", "d": "10/2014"}, {"body": "another example csstransitiongroup leaveactive working safari osx", "d": "10/2014"}, {"body": "yea nt think want support enum closest thing arbitrary value checking could arguably considered type cirocosta mentioned think falls territory could provide proptype", "d": "10/2014"}, {"body": "feasible request sure much value people get point rather strive feature parity flowtypescript could add request flow", "d": "10/2014"}, {"body": "actually nt care somebody wanted feel free", "d": "10/2014"}, {"body": "make release", "d": "10/2014"}, {"body": "yes", "d": "10/2014"}, {"body": "cool thanks", "d": "10/2014"}, {"body": "making tags configurable seems like copout essentially pushing problem users instead closing addresses concern feel free voice opinion", "d": "10/2014"}, {"body": "affects also css selectors way adamkyle posted", "d": "10/2014"}, {"body": "recorded desktop reproducing bug good words", "d": "10/2014"}, {"body": "sebmarkbage entirely sure exactly problem contexts meant solve hypothetical context reinvented styles without selectors imagine benefit able propagate activeetc descendants implicitly passing props far hierarchy far often requested obviously parent tree seems using guid style approach would preferable avoiding conflicts components would instead optin something like var child reactcreateclass contextsources ancestorishovered parent hovered render function return thiscontextancestorishovered ancestor hovered ancestor hovered var parent reactcreateclass childcontexttypes hovered reactproptypesboolean getchildcontext function return hovered true render function return exactly sure contexts meant solve could way way mark", "d": "10/2014"}, {"body": "someone familiar react internals would care put together short summary needs done glad give shot make pr reactrouter depends heavily starting break people use cases things nt fully understand exactly difference parent owner trees one dombased react thing might change affect users currently using", "d": "10/2014"}, {"body": "love know whenif might happen take get share belief make componentlibrary composition better particular case working library wraps reactrouter like able pass data library routes app components ca nt presently without either changes reactrouter support directly b ability pass context app alreadycreated", "d": "10/2014"}, {"body": "sebmarkbage assume want support reparenting anything need keep mind guessing wanted check", "d": "10/2014"}, {"body": "things learned yesterday talking sebmarkbage parent tree made parent components necessarily dom elements owner tree made components bottom render stack time given component rendered changing use parent tree gets us one step closer able remove entirely good thing vast majority people currently using unaffected change since owner tree definition subset parent tree", "d": "10/2014"}, {"body": "well said would nt support real html guess need follow longer use whitelist dom components going wanted use directly could might work guarantees still use whitelist transforming jsx least provide clean upgrade path future", "d": "10/2014"}, {"body": "please submit instead", "d": "10/2014"}, {"body": "misuba update surface seems problem build process flaw react", "d": "10/2014"}, {"body": "syranide moving preminified react actually square things away enough libraries sundry old crap js env isolating problem biggish job wish better news", "d": "10/2014"}, {"body": "got fixed", "d": "10/2014"}, {"body": "happened", "d": "10/2014"}, {"body": "came across post includes solution eating subsequent click events important function sounds like strong candidate solution delayed event issue", "d": "10/2014"}, {"body": "good first bug", "d": "10/2014"}, {"body": "think covered", "d": "10/2014"}, {"body": "work master proptypeselement though may actually want proptypesnode", "d": "10/2014"}, {"body": "zpao example incorrect nt call reactdomdiv factory", "d": "10/2014"}, {"body": "sebmarkbage example right question proptype component constructors basically", "d": "10/2014"}, {"body": "contra oh used isvalidclass deprecated going away basically issue almost function valid class since almost function return valid instance support arbitrary class patterns might also support nonfunctions support module pattern strings also valid constructing instances html tags specified think solution usually try go specific elaborate use case pass classes props", "d": "10/2014"}, {"body": "sebmarkbage guess check instance function solves problem", "d": "10/2014"}, {"body": "na", "d": "10/2014"}, {"body": "bit week trouble finding information use immutablejs react together suspect optimization", "d": "10/2014"}, {"body": "going polyfill use impl depend existing", "d": "10/2014"}, {"body": "see closed issue works using react something change along way since nt work even controlled", "d": "10/2014"}, {"body": "codriniftimie uncontrolled code set value directly dom node controlled example need change value component refstextarea", "d": "10/2014"}, {"body": "oh bad cool thanks", "d": "10/2014"}, {"body": "better", "d": "10/2014"}, {"body": "ca nt repro master still make happen perhaps smaller test case wink please let use know version using", "d": "10/2014"}, {"body": "iamdustan found gist ripple effect react tried nt work ff came post issue searched doin issue", "d": "10/2014"}, {"body": "syranide actually material design ripple effect written svg similar problem firefox love attention", "d": "10/2014"}, {"body": "nhunzaker immediate fix attach click handler dom element nt work ff broken", "d": "10/2014"}, {"body": "myagoo nhunzaker research tldr spec ambiguous renderingframing context buttons elements firefox happens buttons fieldsets create new framing context impacts event model assuming svg behavior similar reason currently unsure react handle think need experimenting user land thought process concerning syranide", "d": "10/2014"}, {"body": "iamdustan yeah putting thought behavior inherit firefox react nt responsible removing need read proposal linked appreciate length responses", "d": "10/2014"}, {"body": "context end trying unreachablebranch mostly works except chokes least instance even fixing nt end significant perf wins even combined multiple jstransforms happening browserify step", "d": "10/2014"}, {"body": "guess see point although example end allocating new object anyways benefit allocating lost feel still important feel free submit pr possibly without allocation btw getting deprecate pulled repo people maintain favour immutablejs could get happens petehunt", "d": "10/2014"}, {"body": "wanted mention anyway added check framework uses react updates wait new repo fix maybe try migrate apps immutablejs", "d": "10/2014"}, {"body": "marcbelmont resolve still issue", "d": "10/2014"}, {"body": "issue anymore chose things differently however piece html previous comment still correct thing", "d": "10/2014"}, {"body": "sebmarkbage want anything validate actual instance pretty good name used nt really good way see object return value vs something like backbone view sounds like nt really want anything let decide", "d": "10/2014"}, {"body": "really check verifies instance tied react system could make static would prefer anyway would allow differentiate react version component mounted fact react component something else seems like good api unmounted valid instance anything render function seems like useless test also likely change new signatures makes unstable api failures might become passing upgrades seems bad like hear use case", "d": "10/2014"}, {"body": "removed reactrender methods consider remove well component life cycle methods", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "probably nt actually necessary upgraded ka transferpropsto hand nt hard", "d": "10/2014"}, {"body": "jardakotesovec gonzih immutablejs fully featured immutable collection library provides helpers want since getting deprecatedpulled repo always come back petehunt close", "d": "10/2014"}, {"body": "components nt need state could easily majority avoiding allocation win also informal mentions allowing setstate set keys nt already exist ie must initially set equivalent code sanity improving performancememory usage like idea lot", "d": "10/2014"}, {"body": "going close think little chance also issue needing make sure actually supported spec sure even going possible", "d": "10/2014"}, {"body": "uses shim solved", "d": "10/2014"}, {"body": "seems work fine since migration", "d": "10/2014"}, {"body": "sebmarkbage ran issue also exists project use modal dialogs dialogmixin contains common logic react classes use mixin implement dialogspecific logic would great static method show mixin would create show new dialogs issue go something like utilsshowdialog think issue reopened", "d": "10/2014"}, {"body": "vkramskikh issue anymore use convenience constructor anyway warns would use jsx value anyway could eg work mixin", "d": "10/2014"}, {"body": "sebmarkbage unfortunately nt work code gives warning warning expect get react class use instead", "d": "10/2014"}, {"body": "oh could possibly remove warning since actually start working leave broken next release since also broken right", "d": "10/2014"}, {"body": "nt work code prints throws exception warning would work release would happy", "d": "10/2014"}, {"body": "sebmarkbage longer valid right", "d": "10/2014"}, {"body": "petehunt checked", "d": "10/2014"}, {"body": "sebmarkbage guess iswill solved static analysis annotations well", "d": "10/2014"}, {"body": "assume please reopen thanks discussion smile", "d": "10/2014"}, {"body": "guessing already found answer moved otherwise recommend coming irc posting google group", "d": "10/2014"}, {"body": "update started exploring react immediately run many people recommend react go solution building isomorphic apps long solved think simply ca nt get job done ears sounds like problem react components nt ones dispatching async requests fetch data data ready call reactrendercomponent solution clientside serverside also get ability abort outcome choice async request fail feel free dismiss misunderstood something seems treating react components view model seems meant view true react nothing slightly different templating solution view layer would shame potential really understand fdecampredon mentions complex applications composed multiple modules react would perfect nt think approach would mean treating component view model look flux architecture think react components controllerviews display data stores also invoke actions based user interactions actions update stores model sounds like obvious mvc architecture problem initial action populates store fairly simple client side action invoked method recommended server side hand really need special place kind mechanism would delay rendering action finished stores populated moment seems way reactasyncfibers flux nice thing flux nt need artificial cache transport component states server client like done original reactasync example simply initialize stores send client html markup see example solution indeed hackish", "d": "10/2014"}, {"body": "nt think necessarily needs componentwillmount async even sure needs lifecycle event real issue server side way analyze component tree everything rendered string ideal solution solve would allow rendering would build component tree would able traverse tree find components need additional data allow us asynchronously load data rerender components subtree ready flushing markup allow us convert tree string replicates able browser virtual dom rerender want difference browser dom updates implicit server need explicit render string perform updates virtual dom based async data", "d": "10/2014"}, {"body": "yes know mean description posting posterity", "d": "10/2014"}, {"body": "spicyj officially allow classes prepare release", "d": "10/2014"}, {"body": "josebalius preparations afaik officially javascript classes sure ship jsx transpiler support classes available limited form right iirc proposal still final think", "d": "10/2014"}, {"body": "found reactwithaddons explicitly ran tests nodeenvdevelopment still luck maybe nt envify loader configured correctly webpack check", "d": "10/2014"}, {"body": "guessing object literal computed property keys eventual jsx syntax spread spread one way", "d": "10/2014"}, {"body": "code sample worth thousand words show set attribute name jsx", "d": "10/2014"}, {"body": "victorhomyakov nt know details exactly believe following code work", "d": "10/2014"}, {"body": "computed properties nt work right nt support computed properties transform though one npm implemented recast", "d": "10/2014"}, {"body": "solutions nt require leaving jsx confident something want support cc zpao sebmarkbage", "d": "10/2014"}, {"body": "sure asking want shorter names probably repackage another classobject bit wordy also informative find preferable cc zpao", "d": "10/2014"}, {"body": "reason besides nt want type many letters please share reopen reason", "d": "10/2014"}, {"body": "sebmarkbage fixed quite time ago right nope definitely fixed react master least", "d": "10/2014"}, {"body": "spicyj etc perhaps misunderstanding issue far react concerned seems design say nt ways work around userland though", "d": "10/2014"}, {"body": "maybe know vjeux jordwalke done thinking around", "d": "10/2014"}, {"body": "zpao landed close", "d": "10/2014"}, {"body": "foreignobject", "d": "10/2014"}, {"body": "foreignobject", "d": "10/2014"}, {"body": "fixed master believe shipped", "d": "10/2014"}, {"body": "fix landed time ago closing", "d": "10/2014"}, {"body": "since deprecating update favour immutablejs think beside existing bug fixes low hanging feature requests wo nt adding whole new syntax updating nested collections like json paths fyi immutablejs clojure uses imo way saner way approaching said agree spicyj yes ordering arbitrary right probably nt rely way ca nt know mean makes sense close petehunt", "d": "10/2014"}, {"body": "fyi immutablejs clojure uses path child imo way saner way approaching chenglou gcc advancedmodecompatible though think", "d": "10/2014"}, {"body": "pedroteixeira interested build framework around omcursor concepts used react update paths probably efficient clean code job well production check code used inside cursorset cursorget operations atom implementation support transactions allow something like dom events transaction read writes drawback current implementation generates intermediary objects transaction", "d": "10/2014"}, {"body": "edit clojure mergewith deep merging two structurally dissimilar collections weird begin otherwise work fine petehunt", "d": "10/2014"}, {"body": "problem little css solved", "d": "10/2014"}, {"body": "actually avoidable afterall", "d": "10/2014"}, {"body": "informative warning case closing", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "well really fixed update devtools", "d": "10/2014"}, {"body": "zpao facebookreactdevtools perhaps referring updated store yet perhaps", "d": "10/2014"}, {"body": "reporting value good idea probably good idea report either could make sense though probably", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "merged", "d": "10/2014"}, {"body": "awesome thanks", "d": "10/2014"}, {"body": "third party languages class class result", "d": "10/2014"}, {"body": "nt support classes way yet support classes class factory", "d": "10/2014"}, {"body": "spicyj understand meant need pass class", "d": "10/2014"}, {"body": "need class", "d": "10/2014"}, {"body": "sebmarkbage oh awesome", "d": "10/2014"}, {"body": "nt like refs look almost like promises slightly different behavior promises alone already confusing enough would fixed replacing returns new unresolved alternatively maybe could rename distinguish api promises maybe difference detail people would typically run", "d": "10/2014"}, {"body": "differences particular concerned", "d": "10/2014"}, {"body": "realize closed struggling seems like least way parent component andor animated item notified animation completed take instance simple carousel like reject inputs prevnext animation occurring far tell way without implementing copy reactcsstransitiongroup nice could something like javascript var carousel reactcreateclass handleanimationend function consolelog animation complete render function return reactcsstransitiongroup transitionname slide onanimationend thishandleanimationend thispropschildren thispropsindex", "d": "10/2014"}, {"body": "came could nt find way call lifecycle events child components instead passing around handlers spicyj reason following nt work javascript var csstransitiongroupchild reactcreateclass componentwillenter function done thispropschildrencomponentwillenter even though child componentwillenter defined never gets called version reactcompositecomponent method thispropschildrencomponentwillenter", "d": "10/2014"}, {"body": "case helps anyone khan academy dropin replacement seems solve problem usecases", "d": "10/2014"}, {"body": "anyone looked problem suggested workaround", "d": "10/2014"}, {"body": "good solution case trying solution feeling tricky coffee componentdidmount root refsrootgetdomnode rootonmouseenter onmouseenter rootonmouseleave onmouseleave got still quite strange results", "d": "10/2014"}, {"body": "resolvedno longer relevant", "d": "10/2014"}, {"body": "closing workaround om", "d": "10/2014"}, {"body": "functionality seems really useful", "d": "10/2014"}, {"body": "least would nice inherited context nt seem case either", "d": "10/2014"}, {"body": "spicyj know fixed master think", "d": "10/2014"}, {"body": "still broken throws slightly different error", "d": "10/2014"}, {"body": "spent hours chasing bug codebase would good fix soon someone else runs repro versions react ended btw", "d": "10/2014"}, {"body": "vinspee dosomething want label increase hit area checkbox browsers", "d": "10/2014"}, {"body": "related believe pr somewhere", "d": "10/2014"}, {"body": "seems like wontfix meant helpful warning error", "d": "10/2014"}, {"body": "pure components nice think timerng makes sense treat state pass time using props shifting state one level time fundamentally global state however far component hierarchy push state still wrong place addition time continuous nt even make sense use state props imo best way would prop description divide time discrete moment local state store current moment clock reactcreateclass mixins reacttimebased render function thisstatemomentintime case reacttimebased would mixin automatically called setstate frequency propsfreq addition make sure components update synchronously applicationwide frequencies reduce rate dom needs updating addition time converted human readable string days ago obviously nt need update every second really easy use shouldcomponentupdate prevent unneeded updates convert two moment string representations see changed need monkey patch built functions make clear documentation right way things accessing global state code usually sign something wrong", "d": "10/2014"}, {"body": "diggsey really neat idea would love see proof concept", "d": "10/2014"}, {"body": "something like already including precise timeouts dynamic units elapseduntil polish npm perhaps", "d": "10/2014"}, {"body": "controversial good first bug let get rid label", "d": "10/2014"}, {"body": "think react rendering model needs separate dom react components html body iframe tags idea dom separate good one imho prime use case iframes component dom therefore includes doctype html head body toplevel tags think iframe actually officially supported component fundamental support components", "d": "10/2014"}, {"body": "also happens conditionally return null component eg javascript render function", "d": "10/2014"}, {"body": "seems released", "d": "10/2014"}, {"body": "fwiw little confused expected smaller version regular know docs explain downloaded forgot part minifier nt ever use distributions think renaming would avoid confusion vs would unambiguous", "d": "10/2014"}, {"body": "sebmarkbage task community know experimenting responsibility reactjsx", "d": "10/2014"}, {"body": "method handling nested state come yet", "d": "10/2014"}, {"body": "recommend look direction api support notation useravatarurl", "d": "10/2014"}, {"body": "courtesy become slightly less relevant necessarily irrelevant reactlink longer supported core components", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "related", "d": "10/2014"}, {"body": "dose look good introducing new people react first ting tutorial need ajax calls let add jquery", "d": "10/2014"}, {"body": "willdady please provide example solved still clear best practice", "d": "10/2014"}, {"body": "creativityhurts pseudocode general idea user clicks anywhere page dropdown close except click anywhere within dropdown var dropdown reactcreateclass componentdidmount function documentaddeventlistener click thisdocumentclickhandler componentwillunmount function documentremoveeventlistener click thisdocumentclickhandler documentclickhandler function thissetstate isopen false triggerclickhandler function thissetstate isopen true dropdownclickhandler function e enativeeventstopimmediatepropagation render function", "d": "10/2014"}, {"body": "sebmarkbage probably authority nt seem realistic core feature nothing prevents adding mutual contract components cases component wants renders children ondemand probably best delegated callback prop instead", "d": "10/2014"}, {"body": "yea seems like nonreact use case needs separate transform", "d": "10/2014"}, {"body": "syranide would imagine react emulation mode rectify browser emulated events eg ios touch event cascade", "d": "10/2014"}, {"body": "iamdustan really idea thankfully able stay away touch events far imagine would prevent cascade definitely big questionmarks seen issues", "d": "10/2014"}, {"body": "something still want solve seems fix would simple enough", "d": "10/2014"}, {"body": "seems issue addresses concern already nt see react adding specific attribute global whitelist", "d": "10/2014"}, {"body": "zpao petehunt sebmarkbage imagine make happen address issue related attributesproperties would nt whitelisted right", "d": "10/2014"}, {"body": "correct get attributes though", "d": "10/2014"}, {"body": "briandipalma explore everything passed props set state within react view thought common convention setstate flux stores change otherwise hard time getting change render event handler", "d": "10/2014"}, {"body": "ptomasroos yes setstate call passed state provided store react component nt calculate based thisstate", "d": "10/2014"}, {"body": "briandipalma good agree wanted explicit", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "change really disturbed jsx usage mithril see new version work somehow", "d": "10/2014"}, {"body": "fyyyyy continue use reacttools make custom transformer like", "d": "10/2014"}, {"title": "support assignment parser", "body": "needed binding directive properties", "num": "136", "d": "10/2014"}, {"title": "typescript interfaces dependency injection", "body": "strongly typed languages java c used program interface allows loosely coupled components also allows easier unit testing mock implementations interface contract typescript interfaces interesting features structural typing duck typing inference interface even class object marked ambient declarations allow describe party api interface fact creation therefore ts class could explicitly implicitly implement multiple interfaces therefore interface could substituted abstract class specially prototype inheritance underlying javascript interfaces typescript compile time construct useful compiler warn argument nt meet api expectation fact interfaces exist form iifeclass product typescript compilation root problem use di markerhandle possible solutions generate dummy class interface try cast whatever means javascript benefit iife could contain rtti downside typescript compiler would implement would rtti classes explicitly implemented interface know would classgetinterfaces type capture interface name string use di handle allow manual annotation dependencies di interfaces vs autowiring dependencies class di implementation ioc pattern goal externalize knowledge composition implementation contract autowiring injection specific class special case ioc general case di interfaces needs configured explicitly order choose correct implementation interface therefore think need way register implementation interface would injected many di frameworks people use fluent api di container configure sample microsoft unity uses rtti c generics capture class registration class implementation interface sometimes interface type granular enough need name well sometimes implementation statefull need lifetime sometimes singletons need scope example per request approaches child container scoped resolve operation intended usage strongly typed languages impose type validating compiler ourself codebase big remember case interested continue usage typescript bring quality javascript feature easily doable extension ts compiler would need find easy way achieve result manual annotation hope helps sorry uptospeed details visions angular di component pavel", "num": "135", "d": "10/2014"}, {"title": "rfc", "body": "update igorminar summarize constraints solution looking must match following valid html see issue discussion chars attr name valid html web designer friendly interoperable webcomponents nt interfere web component initialization support debugging story via inspecting rendered dom development syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives support additional info options binding order avoid directive specific microsyntaxes enables tooling work without hardcoding support microsyntaxes must supported way preserves constraint please nt propose new solutions nt meet criteria original description current proposal syntax several issues proposal come light recently work browsers tested chrome ie safari error means possible create valid template programatically still possible parse read template seems like calling requires first character specifically allowed starting character third part html shorteners nt support nonstandard characters tools slim haml jade nt support generating special characters would break backend servers ruby rails svg requires valid xml valid xml seems spec least chrome browser issues characters need investigate strawman proposal go back slightly longer text based syntax caveat syntax requires parameter item weird syntax want ta make sure bindings starting right hand side valid expression valid expression micro syntax reason need way pass localvarname string literal expression hence please leave thoughts background reasoning behind new syntax found", "num": "133", "d": "10/2014"}, {"title": "gulp race condition", "body": "task modulesbuilddartpubspec copy pubspec build folder launch pubspec modified might happen pubspec depends pubspec copied yet see benchmark depends facade pubspec facade yet copied build folder make build fail", "num": "130", "d": "10/2014"}, {"title": "parser support basic features implement interpolation", "body": "compiler translates expression parser needs support able implement interpolation compiler", "num": "129", "d": "10/2014"}, {"title": "implement event binding syntax ie eventname expr", "body": "implementation similar elementbindings extra complexity attaching callbacks part view instantiation", "num": "128", "d": "10/2014"}, {"title": "notify directive", "body": "component selector mycomponent bind title title url url class mycomponent implements onchange var title var url onchange records map important method fires titleurl updated issue title updated component know url updated next title thing reason method provided guarantees data stable used computation dosomething title url used case data bound component needs notified using method bindings updated proposed solution addition memento method also take group id change detection detects change looks groupid keeps track groupid changes change detection knows fire method dispatcher list records changed groupid part group need keep track record changes since know method associated corner case possible two groups id came protowatchgroup case records part different watchgroup instance", "num": "126", "d": "10/2014"}, {"title": "define plan compiler", "body": "", "num": "124", "d": "10/2014"}, {"title": "need commandline utility dump traceur ast", "body": "rkirov investigate see actually exists", "num": "123", "d": "10/2014"}, {"title": "view instantiation integration tests", "body": "create view instantiation integration tests ie create protoview instantiate make change execution context detect changes test correct updates dom directives executed usecases binding text node content binding element properties binding directive properties binding element events sample code usecase var protowg new protowatchgroup protowgwatch somevar var element domcreatetemplate var protoview new protoview element listwrappercreate listwrappercreate protowg false var view protoviewinstantiate var comp new mycomp todo creating watchgroup done viewinstantiate viewwatchgroup protoviewprotowatchgroupinstantiate view viewwatchgroupsetcontext comp var cd new changedetector viewwatchgroup cddetectchanges todo check viewnodes whether text node updated helper functions function getouterhtmls nodes var res var function getouterhtml el elnodetype nodetextnode return elnodevalue else elnodetype nodecommentnode return else return elouterhtml cc mhevery", "num": "122", "d": "10/2014"}, {"title": "mapwrapperclear work", "body": "working noticed work map left unchanged", "num": "121", "d": "10/2014"}, {"title": "transpile js dart", "body": "eg following work js means variable changing concept compile time constant js transpile dart", "num": "115", "d": "10/2014"}, {"title": "backtick syntax transpile", "body": "since backticks support multiline strings", "num": "114", "d": "10/2014"}, {"title": "rfc add support assert", "body": "dart builtin either bool function returning bool think adding support transpiler could linked type assertions type assertions enabled assert would throw false type assertions disabled assert would removed code", "num": "112", "d": "10/2014"}, {"title": "show original file name file number stack traces", "body": "right getting errors like makes hard know file contained error line number line number transpiled sources", "num": "108", "d": "10/2014"}, {"title": "allow annotation class", "body": "currently const added ctor allowing added class would allow reducing boilerplate code case dart needs generate const ctor", "num": "99", "d": "10/2014"}, {"title": "better workflow debugging transpiler", "body": "thanks arv tips able set great workflow working traceur working angular transpiler little bit pain used mentionned readme guys better workflow debugging adding repl would really help thoughts", "num": "95", "d": "10/2014"}, {"title": "angular input required attr", "body": "adding attribute required input get error chrome console typeerror read property classes undefined delete required disable error", "num": "94", "d": "10/2014"}, {"title": "create benchmark repeat", "body": "", "num": "93", "d": "10/2014"}, {"title": "port tree benchmark angulardart", "body": "", "num": "92", "d": "10/2014"}, {"title": "implement", "body": "", "num": "91", "d": "10/2014"}, {"title": "implement", "body": "", "num": "90", "d": "10/2014"}, {"title": "hook change detection directiveinstances", "body": "", "num": "89", "d": "10/2014"}, {"title": "support component", "body": "", "num": "88", "d": "10/2014"}, {"title": "support template self directives", "body": "", "num": "87", "d": "10/2014"}, {"title": "instantiate directives using local visibility", "body": "", "num": "86", "d": "10/2014"}, {"title": "implement change detection views", "body": "hook view change detection textnodes get updated", "num": "85", "d": "10/2014"}, {"title": "basic implementation view", "body": "clone protoview viewports create elementinjectors locate textnodes", "num": "84", "d": "10/2014"}, {"title": "support simple view template contains decorators text node bindings", "body": "", "num": "83", "d": "10/2014"}, {"title": "support chained expressions ie ab", "body": "use angulardart parserlexer starting point", "num": "82", "d": "10/2014"}, {"title": "detect changes simple nonchained expressions ie", "body": "use angulardart parserlexer starting point", "num": "81", "d": "10/2014"}, {"title": "ngif fails interpolated value equals n", "body": "sorry filled mistake issue please delete one thanks", "num": "80", "d": "10/2014"}, {"title": "add support const list literals", "body": "works js work dart valid compiletime constant", "num": "75", "d": "10/2014"}, {"title": "dart ctor inherited default", "body": "ctor inherited default see class inherit parent class class ctor parent ctor called class parent constructor foo class child extends parent acts class parent constructor foo class child extends parent constructor args super args equivalent constructor args super args generated dart", "num": "70", "d": "10/2014"}, {"title": "refactor transpiler better support dart js", "body": "currently use either original traceur transpiler dart transpiler inherit traceur transpiler plan augment traceur syntax support ie class fields target architecture probably original traceur transpiler lt angular specific js transpiler lt dart transpiler lt inherits regarding folder structure think thoughts", "num": "69", "d": "10/2014"}, {"title": "ngoptions problem removing setting ngmodel variable", "body": "removing ngmodel variable setting last option problem selected option jsfiddle show nt matter many options", "num": "67", "d": "10/2014"}, {"title": "make fields first class citizens", "body": "currently fields declared class annotation field final name string field final age int const constructor name string age int thisname hello name thisage age annotation usage class foo class annotation name string age int const constructor name string age int thisname hello name thisage age annotation usage class foo based typescript follow whatever allow inline initialization fields generate code set fields null constructor set explicitly", "num": "66", "d": "10/2014"}, {"title": "ngoption issue", "body": "hi people came problem nt taken seriously ngoption nt work properly able compare objects rather put selection different variable see declare parameter example users variable declare user works declare jobs compare property make work around please take seriously time thanks ps really good job", "num": "61", "d": "10/2014"}, {"title": "change named parameter format", "body": "current requires repeat twice proposed syntax", "num": "59", "d": "10/2014"}, {"title": "add throttle argument watch", "body": "snippet code keep copy pasting controllers handling autosaving functionality objects var pendingpromise null set watch auto save cta changes throttled every scope watch myobject function nv ov nv amp amp ov amp amp isequal nv ov pendingpromise timeoutcancel pendingpromise api underlying service talks nt get inundates w requests especially ui components like sliders change model incrementally quickly would wonderful later release angular condensed something like time milliseconds set throttle", "num": "58", "d": "10/2014"}, {"title": "assert exported non", "body": "error private dart exported regardless export keyword source file reason assert top level identifiers exported unless contain prefix", "num": "57", "d": "10/2014"}, {"title": "transpiler js dart", "body": "could probably solved writer level difference seems", "num": "53", "d": "10/2014"}, {"title": "transpiler support dart libraries", "body": "today transpiled file statement library name unique derived file name dart support private members amp functions amp variables private members start prefix private member function variable visible entire library whether accessed class file currently prints warnings prefixed members accessed file hence library would right solution support support statement source code may via possible transform prefixed names short term solution could avoid prefixed names also longer term strategy imo", "num": "52", "d": "10/2014"}, {"title": "transpiler calling super constructor", "body": "class parent constructor arg list class child extends parent constructor arg list super arg", "num": "48", "d": "10/2014"}, {"title": "transpiler handle optional parameters", "body": "compiled", "num": "47", "d": "10/2014"}, {"title": "clarify project", "body": "could please clarify readmemd project course nt mind sharing public", "num": "43", "d": "10/2014"}, {"title": "infer class property types ctor args", "body": "currently infer property types ctor args name could produce wrong results js class constructor number b string notice property amp arg name nt match thisb thisa b gt dart class num string b num string b results wrong types thisb thisa b things stop inferring property types args would always produce valid code types lost write logic infer types infer types based names get type rhs types would always correct requires code keep current logic would probably correct cases would tend go something right rather something mostly right could implement later point time thoughts", "num": "42", "d": "10/2014"}, {"body": "talked misko needed", "d": "10/2014"}, {"body": "prefer readability current proposal issue worked around dropped console testing came witch pretty rough checked comply standards well except enabling attributes exotic names strawman proposal user wants create ngrepeat would possible", "d": "10/2014"}, {"body": "fyi javascript renamer like jscompiler would easier grok rename subsequent usesites also declaration think nt want microsyntaxes likely go additional attributes could default item", "d": "10/2014"}, {"body": "sanderelias think couple problems snippet requires work strings leads xss vulnerabilities also angular works dom elements instead strings get xss security default sure order attributes defined means ca nt really rely one attribute might get ugly side effects feels like hack like syntax much also got used reading design documents mhevery caveat reason first decided use", "d": "10/2014"}, {"body": "angry tweets blogs mean anything seems people nt want new syntax anyways easier similar possible", "d": "10/2014"}, {"body": "pascalprecht sure feels like hack one whipped snippet couple minutes show way around limitation sure order attributes create htmlsnippet functions control something like ends source sure needs check strings xss attacks caitp creating new paths always count resistance part jury still one", "d": "10/2014"}, {"body": "question get new paths change sake change really good even though grammar technically easier write parsers tools writing parsers working angular expressions seems like moot point really sure getting kind win making changes", "d": "10/2014"}, {"body": "unless demonstrate really easier people use would say nt even bother", "d": "10/2014"}, {"body": "caitp hmm win better readable templates less boilerplate parser argument indeed reason whatsoever case however parser gets slower result strawman proposal valid point", "d": "10/2014"}, {"body": "still interested causes original decision use four proposed syntaxes template bindings official discussion team decided use even one two anybody know", "d": "10/2014"}, {"body": "syntax looks much natural use similar dom events syntax current syntax", "d": "10/2014"}, {"body": "must different lefthand syntax binding events every event handler seen function call contains enforces natural limitation event handlers must functions searching righthand side could use syntax binding event two possibilities ngrepeat novel ideas think bubble event syntax click also need work around problems would try keep syntax close javascript possible item", "d": "10/2014"}, {"body": "akircher yes reason angular needs new binding syntax order work elements means native custom new syntax required unifies layer angular nt nt know custom elements custom events written article tries explain", "d": "10/2014"}, {"body": "hey paste proposal google gruups syntax resolves custom elements problem nt break html attributes seen angular plans adopt following syntax data binding please nt break html syntax love angular write templates templating language like slim haml jade ca nt ember react example introducing nonstandard characters attributes makes templating languages unusable well syntax coloring introspection ide also really nt like syntax passing arguments ngrepeatperson people clear allows passing string arguments person people arguments ngrepeat treat one differently severely breaks existing syntax developers used propose use prefix properties need processed angular first use microsyntax instead ugly ngrepeatparameter syntax provide parameters many advantages syntax nt break html syntax ide templating languages support leading attribute names tell whether pass binding angular exact meaning determined angular plugin templating system conflated binding system contrary current choice syntax extensible plugins implement microsyntaxes allows seamless webcomponent integration prefixed properties handles angular renamed passed webcomponent think lot pleasurable read understand proposal angular processes properties beginning angular supports box following microsyntaxes exp string interpolation default include interpolation syntax exp exp javascript expression like onclick exp exp one way bind familiar syntax exp two way bind natural syntax special syntax ngrepeat reinterpreted microsyntaxes plugins future versions angular define microsyntaxes miss something beg consider really love angular decisions far except binding syntax additional notes wanted javascript expression default think string interpolation way html treats attibute values strings default example type text means literally type text type inputtype double binding type inputtype evaluates expression syntax also makes distinction oneway twoway binding current choice nt plugins could create microsyntaxes existing ones similar ngrepeat syntax syntax really pluggable fast angular reads properties beginning passes middleware set functions interface like call e htmlelement attribute string value string", "d": "10/2014"}, {"body": "course reason web component uses use template ps code fragments missing previous comment present", "d": "10/2014"}, {"body": "pascalprecht understand needs generic bindingevent handling syntax order handle custom events web components missing something else post helpful btw saying parser could take seeing expr nt dowork could rewrite", "d": "10/2014"}, {"body": "native functions rewritten work new model js htmlinputelementprototypesetattribute htmlinputelementprototypesetattribute htmlinputelementprototypesetattribute function attribute value azaz test attribute var thisattributes thisattributes name attribute thisattributes value value else thissetattribute attribute value var element documentqueryselector test elementsetattribute value new value", "d": "10/2014"}, {"body": "eisenbergeffect probably missing things still trying catch design decisions understanding idea bind properties attributes guess proposing right sorry nitpicking trying make things clear head", "d": "10/2014"}, {"body": "yes properties sorry note deleted original comment got messed something related sending email added full version fri oct pawel kozlowski notifications githubcom wrote eisenbergeffect probably missing things still trying catch design decisions understanding idea bind properties attributes guess proposing bind property name expression right sorry nitpicking trying make things clear head reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "10/2014"}, {"body": "pretty much agreeing eisenbergeffect proposal also curious caused decision use first place maybe something miss covered eisenbergeffect simple sample actual definition micro syntax would look like component point view", "d": "10/2014"}, {"body": "eisenbergeffect think agree need kind prefix suffix mark attributes need processed angular properties current choice correct html attribute breaks lot things mentioned proposal think little verbose probably already used existing components proposal nt matter angular choose split bindngrepeat two properties matters prefix tells angular process attribute first nt think prefix good choice lot components using onclick similar already could ok well think important change microsyntax double binding default html ie string explained previous comment", "d": "10/2014"}, {"body": "sheerun eisenbergeffect think agree need kind prefix suffix yes necessarily prefixsuffix syntax unifies custom attributesevents declarative dsl yes agree change introduced first place mark attributes need processed angular properties angular nt process attributes properties either binds properties attributes depending particular attribute reflected property binding attribute rather fallback far understood design documents proposal bindvalue something think little verbose probably already used existing components think pretty straight forward nt matter angular choose split bindngrepeat two properties actually matter order simple dsl express things bindonclick could ok imo rather good choice since nt really bind events listen think important change microsyntax double binding exp exp default html ie string explained previous comment find rather confusing since people know css selectors", "d": "10/2014"}, {"body": "wondering take mulifaceted approach core binding capability default binding behavior add event handler string interpolation aligns syntax support microsyntax hook would allow directives like translate two attributes template compilation top core layer add backwards compatibilityconvenience layer support convenience backwards compatibility compilation result removal attribute special debug mode compiler would rewrite could seen dom inspector production attribute would absent avoid cost rewriting support inside html content treated string interpolation exactly backwards compatibility optin via config setting templating engine support optional plugin angular contains directives like would backwards compatibility directive would use microsyntax hook translate new syntax upon release mark expression html content obsolete optional etc directives obsolete planned obsolescence get go help people incrementally port give timeline upgrade new syntax get app running support generalized mechanism binding options built expression syntax example one time binding might example custom trigger twoway binding might note binding options similar filters filters act output expression transforming various ways binding options would act binding object allowing manipulation directly note none proposals support directionality bindings support oneway twoway binding would recommend following expressions use default binding given property default means oneway binding everything except form control values default twoway directive properties would default oneway developer could change default given property using metadata annotations defaults could overridden casebycase basis using binding options mechanism described ie", "d": "10/2014"}, {"body": "eisenbergeffect feel like one way thing scenario something probably want avoid unfortunately obviously nt want stick exactly original style either think definitely try minimize size bridge people cross order learn newfangledangular", "d": "10/2014"}, {"body": "would look one way thing optional backward compatibility layered top meaning support educate ideal syntax core provide extensibility points allow layering different syntaxes top ease migration paths developers large codebases", "d": "10/2014"}, {"body": "means extra set duplicate functionality support also confuse users nt sure one use apps good strongly advise", "d": "10/2014"}, {"body": "tend agree caitp compatibility layers nt come free terms initial coding maintenance mental burden users etc instead providing compatibility layer say ngclick like would imo better come migration tool would help translating existing templates would really prefer figure best syntax first cover migration story afterwards", "d": "10/2014"}, {"body": "teach people default binding behavior add event handler string interpolation hood remove expressions dom prevent various web component issues etc debug mode add back attributes seen inspecting dom add section documentation geared towards existing angular users explains use expression string interpolation html content turning planned obsolescence preferred method also tell set optional directives drop enable ngclick etc also planned obsolescence things provided ease migration experience sidebyside explain temporary migrationpurposed directives map new system documentation advanced section explains create directives microsyntax also explain everything gets converted hood thus used directly desired trivial implement fallback syntax attribute rewriting also much code maintain would planned removal beginning", "d": "10/2014"}, {"body": "nt think rearranging hood making things worse rather better ideally write get limited set constructs write reasonably powerful express meaningful application less imho minimizing burden new old users minimizing cost maintaining framework big win", "d": "10/2014"}, {"body": "nt like syntax makes markup look like markup another abstract convention need learn similar directives example feel adding anything nt start az like underscores agree caitlin sort gain changing part angular know lot criticism decision change part frankly never felt needs addressing string says better abstract notation using also kind abstract singular case", "d": "10/2014"}, {"body": "proposal attempts solve technical issues hand also dealing migration story rather large angular community asking far know proposal either inside outside team attempts handle needs syntax also simplest proposals aligns nicely polymer well let look polymer default binding behavior add event handler string interpolation encode attribute edge cases likely go away next year proposal changes order make stringification explicit necessary since bind properties rather attributes proposal also recommends using meaningful rather attribute name encoding required proposing also improves debugging story rewriting expressions debug mode really little work us", "d": "10/2014"}, {"body": "good discussion glad open people follow understand whatever decision eventually made still keen sounds lot like snake oil think say going possible demonstrate actually possible better", "d": "10/2014"}, {"body": "eisenbergeffect use main issue may clash existing html attribute cases attributes may also want specify without creating binding", "d": "10/2014"}, {"body": "decide always use prefix need keep ngcloak example want leave flash angular kicks also web component consumes angular chance interpolate convert function operates consider always using prefix angular properties attribute wo nt displayed html passed web components angular kicks parses adds property already interpolated text goes passed web component clickable angular kicks assigns property converted function operates proper scope please understand ca nt use plain ca nt use cheers", "d": "10/2014"}, {"body": "lgalfaso mean clash existing html attribute syntax works fine almost every existing databinding library today problem accounted aside already explained solved removing things compilation", "d": "10/2014"}, {"body": "eisenbergeffect without mechanism know binding tell", "d": "10/2014"}, {"body": "sheerun misunderstand compilation process little bit need avoid flash expressions compiler already extracted compilation html contained inside element dormant webcomponents upgraded content cloned based tests see attribute removed primary reason using plain html attributes debugging reasons solved rewriting debug mode", "d": "10/2014"}, {"body": "agree francisc explicit better implicit", "d": "10/2014"}, {"body": "lgalfaso example neither properties bound want bind would", "d": "10/2014"}, {"body": "everything caitp saying", "d": "10/2014"}, {"body": "eisenbergeffect databinding web components document misleads people effect process web component would first flash expression binding literal exp replaced actual expression value clearly desired behavior", "d": "10/2014"}, {"body": "incorrect information yes needs updated incidentally discovered error sorry", "d": "10/2014"}, {"body": "eisenbergeffect good point one question though understanding would partials would live inside tag would one bootstrap application would mean router would point components instead random html chunks", "d": "10/2014"}, {"body": "pkozlowskiopensource currently html contained inside templates bootstrapping application would involve specifying root component allows remove problems ngcloak etc also makes super easy application splash screen things loaded great mobile web still debated see bunch related issues would favor though", "d": "10/2014"}, {"body": "eisenbergeffect ok starts make sense really remove comment design doc effect process web component would first flash expression binding literal exp replaced actual expression value clearly desired behaviour incorrect part made convinced absolutely need prefix based comment nt seem case changes things substantially well still wrapping head around stuff", "d": "10/2014"}, {"body": "added note original document", "d": "10/2014"}, {"body": "eisenbergeffect approach think many developers big help understanding migration must indeed really hard date marks dropoff old stuff personally really like current proposal understand issues", "d": "10/2014"}, {"body": "anyways magic prefixsuffixes think want avoid whole thing users ca nt use start suffix bug long time led making directive api even crazier careful prefixsuffixes make sure nt limit user", "d": "10/2014"}, {"body": "like syntax would use something like original proposal seems little bit far away html always liked angular uses plain html even style current proposed syntax via css selectors eg compilation breaks reason like deactivated js eg even valid css selector would guess needs sort escaping", "d": "10/2014"}, {"body": "bind makes lot sense regarding polymer already seems natural", "d": "10/2014"}, {"body": "per previous comments could someone please explain must separate syntaxes vs bind super clear done event listeners almost always functions bindings almost never think distinction already pretty clear without separate syntaxes example value property click event know value binding bind know click event far cleanest syntax prevents naming collisions righthand side always expression", "d": "10/2014"}, {"body": "angular actually observe functions unfortunately simple fri oct pm akircher notifications githubcom wrote per previous comments could someone please must separate syntaxes vs bind super clear done event listeners almost always functions bindings almost never think distinction already pretty clear without separate syntaxes example value property click event know value binding bind know click event far cleanest syntax prevents naming collisions righthand side always expression reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "10/2014"}, {"body": "observing function properties nt think would problem omit binding mean observe called", "d": "10/2014"}, {"body": "observe called", "d": "10/2014"}, {"body": "means result function yeah would nt make sense observe result ngclick handler though", "d": "10/2014"}, {"body": "would work custom web components eg", "d": "10/2014"}, {"body": "oh okay thanks see reason still seems like type thing handled class though rather template defer ideas hfjallemark would property since explicitly put put would event handler something event", "d": "10/2014"}, {"body": "could always add event listeners javascript could even made nice declarative atscript kind sucks", "d": "10/2014"}, {"body": "spent time discussing igorminar going post update brainstorming shortly", "d": "10/2014"}, {"body": "think embedding variable name attribute name seriously limiting nonextensible understand mapping attribute names property names including property value attribute name seems really fishy want ta make sure bindings starting bind right hand side valid expression good idea example valid expression probably hand righthand side always kind syntax interpreted angular eisenbergeffect proposed microsyntax expression could nice proposed kind expression filters achieve example onetime binding little verbose angular could provide shortcut microsyntaxes gt gt gt could give us clear definition microsyntax simple function transforms string proper expression string microsyntax nt apply microsyntaxes could form middleware preprocessing attribute values sample microsyntax defintion one could specify microsyntax one element like eisenbergeffect think", "d": "10/2014"}, {"body": "lot questions around changing syntax reasoning described", "d": "10/2014"}, {"body": "think likely people might already read issue", "d": "10/2014"}, {"body": "understand reasons changing nt see difference second variant readable predictable still makes possible things like", "d": "10/2014"}, {"body": "nt really compatible microsyntax basically give path property nothing else nt think worth tbh", "d": "10/2014"}, {"body": "thanks caitp clarification well proposed already doc file properties words without microsyntax", "d": "10/2014"}, {"body": "constraints attribute names contain keys pass elementsetattribute key value means special characters key tricking browser setting attribute performance hit may shorthand syntax may get converted canonical syntax html compile debug mode syntax canonical syntax ie may chose translate translate needs syntax yet another syntax need work webcomponents means place expression attribute names attribute name needs escaped somehow need able distinguish string literals expressions without knowing directives active may none see need simple microsyntax violate proposal canonical syntax personname proposal shorthand syntax syntax verbose lets apply shorthand equivalent syntax personname optionally make even shorter opting means alternate equivalent syntax personname", "d": "10/2014"}, {"body": "jamm good question need know literal expression leads us micro syntax problem imagine ide trying validate expression ide knows expressions highlight allow click ide know micro syntax unless parses directive complex ide point view valid expression also valid expression point view framework either either expressions support none parser ca nt change rules particular directive leads us notice two first one expression know expression syntax second string literal know literal lack syntax sucks need better one changing syntax sake changing technical reasons need change rules key must escaped way escaping value good enough expression vs literal interpretation string needs done without knowledge outside template must consistent implication throws serious wrench microsyntax angular cant tell attribute expression literal causes kinds problems one compatible webcomponents", "d": "10/2014"}, {"body": "mhevery think continue debate key must escaped way igorminar sure fundamental requirement remove constraint may options open us let keep thinking", "d": "10/2014"}, {"body": "eisenbergeffect nt escape key break constraint rule debug mode syntax canonical syntax ie may chose translate translate needs syntax yet another syntax", "d": "10/2014"}, {"body": "mhevery yeah know smile guess entirely sure need constraint know removing make things bit asymmetrical sure real problem mainly think attribute valuebased syntax nicer enough justify ducks", "d": "10/2014"}, {"body": "new syntax still need support bubble events eg click longer needed", "d": "10/2014"}, {"body": "akircher yes think still need distinguish bubble bubble", "d": "10/2014"}, {"body": "mhevery make operator evaluates iterator wo nt change way used", "d": "10/2014"}, {"body": "would like javascript compatibility still kind screws filters interesting idea though", "d": "10/2014"}, {"body": "igorminar think something like could still single attribute still explicitly expression binding", "d": "10/2014"}, {"body": "like idea new micro syntax semicolons separators looks native html style declaration converted js object adding string interpolate also escaping maybe let use ng prefix angular core directives prevent users invent custom names directives even help add prefixes manner proposals look like send gift person send gift person nt even break html syntax also want note micro syntax semicolons explicit nt remember order need write variables get result especially things trivial variants writing ngoptions", "d": "10/2014"}, {"body": "micro syntax problem imagine ide trying validate expression ide knows expressions highlight allow click ide know micro syntax unless parses directive complex mhevery ide knows defines new variable without parsing directive solve directionality use microsyntax twoway binding oneway clear personname", "d": "10/2014"}, {"body": "additionally use prefix angular properties ide knows attribute values contain microsyntax personname", "d": "10/2014"}, {"body": "honestly thing really good approach lets people write custom ngrepeats want would work ngoptions want something like repeatable construct consistent syntax fits binding attribute syntax matches javascript syntax sounds like win tbh", "d": "10/2014"}, {"body": "like expand idea given jamm making js object cram features want resolves perfectly valid expression object required alternatively could achieved custom js iterator first proposal like object way much", "d": "10/2014"}, {"body": "even support iterators angular expressions need solve write custom decorators number oneway bindings attributes passing strawman proposals canonical syntax proposal misko proposal separating instantiation directive bindings explicit nonhuman writable note clear reading html alone compiler binding ngrepeat instance properties dom element properties bindings make explicit canonical syntax shorthand syntax proposal given instantiation attribute boolean attributes canonical syntax use value macro macros string maps lists translate follows becomes positional attributes supported becomes note means purely stringbased macros ie expressions keys values evaluated think important make distinction clear someone come better symbol first thing came mind attributes angular etc", "d": "10/2014"}, {"body": "rkirov would macros evaluated difference evaluating", "d": "10/2014"}, {"body": "think could combine iterable name iterator single construct could reused many different directives return function parsed expressions acts evluator expression assignable expressions added property called assign acts assignment path expression vain see iterator expression could become function returns iterator tries subsequently function gets scope name iterator something like js assert expriterator seen new weakmap let item expriterator seenitem item addnewitem expr item else seenset item true let item existingcollection seenget item removeitem item function addnewitem expr item seenset item true var element templateclone elementng exprname item addtodomlater element mean would take bit work fully fleshed basically pseudocode seems like bad pattern", "d": "10/2014"}, {"body": "caitp think like could provide examples syntax would look outside ngrepeat", "d": "10/2014"}, {"body": "fardelian macros turn one stringbased attribute multiple stringbased attributes convenience html author preangular land meaning strings beyond simple constructs maps lists macro understands sense might deceiving write js syntax macro runs compiler takes bind expressions parses full extension angular expression syntax point accept valid expression angular parses passes ngrepeat instance line thought caitp entertaining", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "tbosch look", "d": "10/2014"}, {"body": "added binary operations string literals formatters handing vsavkin continue monday", "d": "10/2014"}, {"body": "issue polyfill clear needs investigation issue chrome bug", "d": "10/2014"}, {"body": "chrome looks like facade nt really used", "d": "10/2014"}, {"body": "ca nt seem reproduce outside angular nt look like traceur map polyfill used maybe overwritten something else thought could weird side effect evaluated call systemjs could nt reproduce like weird", "d": "10/2014"}, {"body": "found overnight using valid dart meaning js switching everything works expected", "d": "10/2014"}, {"body": "trivial case wo leading tag converting might enough needs escape existing easiest way probably use already existing templatelitteraltransformer", "d": "10/2014"}, {"body": "vojtajina look making better igor ideas", "d": "10/2014"}, {"body": "angular uses repo", "d": "10/2014"}, {"body": "closed via", "d": "10/2014"}, {"body": "pr", "d": "10/2014"}, {"body": "landed", "d": "10/2014"}, {"body": "implemented", "d": "10/2014"}, {"body": "implemented", "d": "10/2014"}, {"body": "let push november wait elementinjector aware annotations", "d": "10/2014"}, {"body": "also needed application level di elementinjector need first write tests injectors proving used using construct", "d": "10/2014"}, {"body": "clarify issue support annotations di already uses annotations elementinjector couple days compiletime expressions lists maps others since dart accepts string literal compiletime expression works already dart requires using const keyword declaring compiletime lists maps", "d": "10/2014"}, {"body": "thanks clarifying", "d": "10/2014"}, {"body": "actually use versions original traceur transpiling transpiler transpiler extends traceur javascript transpiler extends traceur dart nt like inheritance propose continue like already use parser javascript dart extends traceur parser different transformers dart javascript special transformations two languages different writers dat javascript one compiler checks flag creates parser right transformers right writer would propose following structure", "d": "10/2014"}, {"body": "mostly agree latest comment discutable point syntax folder parse trees dart specific think folder js dart thinking speaking inheritance js version would support additional syntax dart version additional code deal dart specificities sure litteraly inherit idea would mix solution top level syntax folder would contain common parser least idea discussions need happen", "d": "10/2014"}, {"body": "dartjs specific parse trees would created dartjs specific transformers parser right wednesday october victor berchet notifications githubcom wrote mostly agree latest comment discutable point syntax folder parse trees dart specific think folder js dart thinking speaking inheritance js version would support additional syntax dart version additional code deal dart specificities sure litteraly inherit idea would mix solution top level syntax folder would contain common parser least idea discussions need happen reply email directly view github", "d": "10/2014"}, {"body": "exact output parser always whatever target language specific transformers might create different pt different language constructs", "d": "10/2014"}, {"body": "ok would", "d": "10/2014"}, {"body": "see things", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "nt think work closing issue let know something related work done", "d": "10/2014"}, {"body": "wait refactoring happened yet ie splitting folder", "d": "10/2014"}, {"body": "tbosch think done proactively wait need originally opened issue planned update parser support class property declaration supported traceur however feature might integrated traceur", "d": "10/2014"}, {"body": "ah right saying might additions js rather traceur makes sense ok closing thanks clarifying", "d": "10/2014"}, {"body": "moved", "d": "10/2014"}, {"body": "wrt typescript fields initialized defined fields initialized iff initializer present implicitly set", "d": "10/2014"}, {"body": "add support traceur ts supports goal use ts type syntax inside traceur", "d": "10/2014"}, {"body": "discussion arv rise issue initializers supported dart intialization would need happen ctor time js let say code class parent name stringjoe class child extends parent age int constructor age int thisage age super would needed code work properly would initialized instantiate class called however seems weird call ctor defined would generated compile time initialize fields may best drop support initializers", "d": "10/2014"}, {"body": "depends", "d": "10/2014"}, {"body": "generates constructor extends expression constructor uses generating constructor need ensure super called earlier version class proposal used two phase init one phase initialize properties defined outside constructor second phase call constructor sub class fails call super wrong could make error linter example", "d": "10/2014"}, {"body": "generates constructor extends expression constructor uses constructor args super args interesting thanks deducted code verify spec needed anymore btw dart inherit ctor default update transpiler create ticket traceur mind opened questions wan discuss submit impl pr", "d": "10/2014"}, {"body": "vojtajina sync vicb sync status want get point field annotations removed source base", "d": "10/2014"}, {"body": "vicb update status estimate much left complete", "d": "10/2014"}, {"body": "naomiblack traceur plans support discuss arv see submit pr hope able give estimate eow", "d": "10/2014"}, {"body": "pr traceur working expect updates review available following days concentrate generate dart code", "d": "10/2014"}, {"body": "example illustrate saying would swell", "d": "10/2014"}, {"body": "html controller scopecolors name black shade dark name white shade light name red shade dark name blue shade dark name yellow shade light next line works scopeselected scopecolors next line really need work scopeselected name red shade dark searching everywhere api method nt found please put example api sites could find workarounds thank", "d": "10/2014"}, {"body": "want copy selected object", "d": "10/2014"}, {"body": "well first copying object database trying edit need compare objects", "d": "10/2014"}, {"body": "wrong repo think may want start stackoverflow first angularjs repo", "d": "10/2014"}, {"body": "vojtajina tbosch think", "d": "10/2014"}, {"body": "would code look like type annotations default values", "d": "10/2014"}, {"body": "igorminar aware syntax could point spec syntax described", "d": "10/2014"}, {"body": "igor right would work forbid parameter name renaming otherwise valid programs valid atscript programs fri oct pm mi\u0161ko hevery notifications githubcom wrote igorminar aware syntax could point spec syntax described reply email directly view github", "d": "10/2014"}, {"body": "whatever typescript case", "d": "10/2014"}, {"body": "tbosch typescript nt solved yet", "d": "10/2014"}, {"body": "wrong repo think may want start stackoverflow first angularjs repo", "d": "10/2014"}, {"body": "oops sorry", "d": "10/2014"}, {"body": "vsavkin mean looking info ctor inherited js nt found yet default ctor inherited dart may issue relates", "d": "10/2014"}, {"body": "dart called initializer list currently transpiler leaves super call constructor body incorrect", "d": "10/2014"}, {"body": "done part pending pr const ctor may reassign", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "duplicate", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "due time", "d": "10/2014"}, {"body": "generates file every module within runs parallel", "d": "10/2014"}, {"body": "mhevery could discuss relates", "d": "10/2014"}, {"body": "closed duplicate yes let chat tomorrow mock interview", "d": "10/2014"}, {"body": "make test pass", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "vicb commit", "d": "10/2014"}, {"body": "apparently fixed pr", "d": "10/2014"}, {"body": "current solution workaround moved also transpiler changed automatically refer nt need import", "d": "10/2014"}, {"body": "yes add browsers probably angularjs angulardart cause travis digestion problems limited amount granted vms tuesday september rob eisenberg notifications githubcom wrote would certainly vote think emphasizing mobile community want keep honest probably start testing front tue sep caitlin potter would make sense bring mobile browsers early benchmarks pressure reply email directly view github rob eisenberg president blue spire wwwdurandaljscom reply email directly view github", "d": "10/2014"}, {"body": "vsavkin update", "d": "10/2014"}, {"body": "created pr adding required infrastructure simple benchmark currently pr blocked issue benchpress resolved soon", "d": "10/2014"}, {"body": "closed via", "d": "10/2014"}, {"body": "vsavkin provide update", "d": "10/2014"}, {"body": "done doc ported di module works", "d": "10/2014"}, {"body": "ca nt start done may need break subtasks revisit", "d": "10/2014"}, {"body": "closing duplicate", "d": "10/2014"}, {"body": "hi vojta could add details parts transpiler need tests already monday september vojta jina notifications githubcom wrote reply email directly view github", "d": "10/2014"}, {"body": "one thing discussed vojtajina unit test transformers like done traceur advantages could help understand code easy review pr realized tried review pr vsavkin currently integration tests unit test ie assert transformer fail amp could add disabled test todo features", "d": "10/2014"}, {"body": "moved traceur", "d": "10/2014"}, {"body": "implemented need get merged", "d": "10/2014"}, {"body": "update", "d": "10/2014"}, {"body": "depends latest version traceur pushed update lands", "d": "10/2014"}, {"body": "done released traceur", "d": "10/2014"}, {"body": "specs run dart use dart suffix write dart specs run js use suffix monday september victor berchet notifications githubcom wrote today test transpiler running spec js dart good start room improvement asserting code snippets fail given error message could also really help improving test suite example could generation const constructor dart constructor could body initializer list asserting case fails comprehensible error message would really helpful reply email directly view github", "d": "10/2014"}, {"body": "keeping one compiler different things based outputlanguage traceur already outputlanguage latter removes annotations types tuesday september victor berchet notifications githubcom wrote voltajina closed issue pushing refactoring fix master think great master build upon probably create new issue refactoring needed thanks reply email directly view github", "d": "10/2014"}, {"body": "already work syntax js source export bar foo export foo sunday september mi\u0161ko hevery notifications githubcom wrote often times useful able reexport facade types requires support rexporting import foo bar export foo export bar show foo reply email directly view github", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "already transformer else needed", "d": "10/2014"}, {"body": "yes think done refactored code added spec", "d": "10/2014"}, {"body": "vicb sounds good also agree vojtajina making optional", "d": "10/2014"}, {"body": "duplicate", "d": "10/2014"}, {"body": "traceur added support generics see", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "karma dart fixed", "d": "10/2014"}, {"body": "nice", "d": "10/2014"}, {"body": "btw could update readmemd still contains hint dart tests gulp build required", "d": "10/2014"}, {"body": "use module loader see configuration details", "d": "10/2014"}, {"body": "achieve using error reporter transformer ie retrieved parse tree", "d": "10/2014"}, {"title": "binding vmodel array items", "body": "following chance support binding array items box guess directive would convert", "num": "530", "d": "10/2014"}, {"title": "vif directive interferes nested templates", "body": "see", "num": "529", "d": "10/2014"}, {"title": "expression filter concatenation", "body": "using following code render gravatar images jsfiddle expected result actual result workaround jsfiddle", "num": "528", "d": "10/2014"}, {"title": "prefixed variables", "body": "currently nesting viewmodels variables used dom unprefixed unclear viewmodel belong also using variables name children parents use access variable parent access grandparent ugly results big mess suggest add functionality like angularjs could use vcomponent directive like access variables new component using would make whole pile variables page way clear fiddle demonstrating problem fiddle demonstrating solution syntax course", "num": "527", "d": "10/2014"}, {"title": "prefixed data options set vm", "body": "tested", "num": "526", "d": "10/2014"}, {"title": "bind directive data vm", "body": "hi working audio player advanced logic based custom directive multiple audio players based vrepeat want bind vdirectives like vif vstyle state within directive would created jsfiddle illustrate problem directive inner state isplaying want use externally setup controls vif fairly new vuejs might another approach problem thanks martin", "num": "525", "d": "10/2014"}, {"title": "vuejs throw error call method undefined ucbrowser", "body": "often get error android uc browser specific phone specific version current happend throw source code version line component ready attach response extend response throw error debug found emiter empty try fixed bug js hack emitter alreadyconverted convert obj emitter objemitter work well", "num": "524", "d": "10/2014"}, {"title": "pluralize filter issue", "body": "hello ok", "num": "523", "d": "10/2014"}, {"title": "vue instance setupteardown best practice plugin", "body": "hi comments development plugin developing plugin nt know setupteardown vue instance worried read codes vuejs tried idea result found setup teardown following js vueoptionsevents hook created function setup thisstate foo hook destroyed function teardown thisstate null vueprototype hello function consolelog hello thisstate var v new vue v hello ways tell best practice", "num": "522", "d": "10/2014"}, {"title": "computed property depending vm", "body": "hi intended changes vm observed computed property", "num": "521", "d": "10/2014"}, {"title": "", "body": "hello gt", "num": "520", "d": "10/2014"}, {"title": "von context change directives", "body": "write code like get one item pages add directive like work anymore find get right arguemnts full example code", "num": "519", "d": "10/2014"}, {"title": "child vm nonroot element", "body": "html text x works well returns node list returns undefined returns node list demo", "num": "518", "d": "10/2014"}, {"title": "model inline value type number get converted initial render", "body": "tested", "num": "517", "d": "10/2014"}, {"title": "component data next", "body": "filing default data input used work input stays empty also setting later", "num": "516", "d": "10/2014"}, {"title": "dom change js api view binding broken", "body": "want change dom directly code like change model change dom api times know input element operate", "num": "515", "d": "10/2014"}, {"title": "regression vuetouch", "body": "upgrading causes directive update inside plugin fail line undefined apologies lack jsfiddle vuetouch available via cdn", "num": "514", "d": "10/2014"}, {"title": "update model sortable view changes", "body": "update model automatically view sorted jquery ui want happen automatically possible sorting objects multiple lists question sort asked nt understand answer", "num": "513", "d": "10/2014"}, {"title": "failed resolve filter", "body": "failed resolve filter use filter attribute like value attribute created jsfiddle sample reproduce issue nt happen vue vue works fine seems affect", "num": "512", "d": "10/2014"}, {"title": "race condition input range max value filter", "body": "iterating inverse slider example trying make simpler time instead sliders coupled percentage linked directly split total changes modifies max attribute sliders problem want proportion split stay sliders stay position value split update proportionally relation total filter total seemed convenient want change value total want change split total changes need old value total calculate proportion times works perfectly times slider moves nt represent stored value seems happens race condition updating attributes sliders tried add timeout solves problem also adds little glitch slider wondering maybe way vue internals would make desired outcome consistent without use timeout", "num": "510", "d": "10/2014"}, {"title": "better warning invalid types vmodel", "body": "filter passes string input using vmodel vue behave erratically initial render value missing errors user input field erase character input teams use type attribute trigger correct keyboard mobile control input value want enforce type maybe warning wrong one used make sure tag contibutionswanted want help thanks awesome library", "num": "509", "d": "10/2014"}, {"title": "publish tag npm", "body": "forgot publish npm", "num": "508", "d": "10/2014"}, {"title": "trigger update binding sending value", "body": "", "num": "507", "d": "10/2014"}, {"title": "strange interaction filter", "body": "without filter move slider past computed limit adding bogus filter enough prevent slider thumb going past limit happen edit nt happen", "num": "506", "d": "10/2014"}, {"title": "inline value overwrite nt passing filterwrite", "body": "two features introduced model overwritten values set inline html values nt sent filter stupid example filter necessary serves demonstrate issue", "num": "505", "d": "10/2014"}, {"title": "custom directive model", "body": "lets say element like way make directive know already assigned model", "num": "504", "d": "10/2014"}, {"title": "dispatching inputchange events model changes", "body": "vue send inputchange events modifies ui reflect model could useful party ui plugins know update", "num": "503", "d": "10/2014"}, {"title": "component vm content nt affected vm scope", "body": "seems content component inheriting directly component model think proper behavior content inherit parent model main reasoning kind conflicts way web components look using shadow dom define component takes content expect component whatever markup wants content rendered normally within example something like parent model mycomponent template html wow fancy main vue template web components would intuitively think would add fancy wrapper top vue would need explicitly pass scope render propose vue isolates model content component instead inherits model parent", "num": "502", "d": "10/2014"}, {"title": "bug inline partial custom delimiters used", "body": "", "num": "501", "d": "10/2014"}, {"title": "", "body": "", "num": "500", "d": "10/2014"}, {"title": "ios web app unresponsive comes sleeplock screen", "body": "hi one strangest bugs found really obscure one let guide trough process replicating need ios device visit url safari land page click large button calculate next random number displays alert page using vtext everything looks ok far click share button safari click add home screen button page set web app capable metatags launch home screen open without safari ui pure page click newly created icon loads click large button works normal press power button lock device unlock click button get alert next random number text never updated js executing view updating first thought ios problem everything works ios tried logic native js worked problem somewhere vue updates viewdom tree device unlocked try fixing problem", "num": "499", "d": "10/2014"}, {"title": "child views nt pass event handler expressions", "body": "using something like dom event normally passed handler argument however view question child view expected argument example", "num": "498", "d": "10/2014"}, {"title": "exceptions thrown dom handler expressions disappear", "body": "dom event handled function reference exceptions thrown inside handler reported console however dom event handled expression exception reported example", "num": "497", "d": "10/2014"}, {"title": "merge fails properties exist firefox", "body": "following throws exception firefox chrome safari mistake part knew overlooked existence writing mixin helper shortcut would process options watch hash nt know intended behavior would expect either explicit exception informing trying overwrite something allowed jsfiddle would work firefox", "num": "496", "d": "10/2014"}, {"title": "plugin api", "body": "documentation understand installuse plugin nt understand use exposed vue object export new functionality context componentsdirectivesmethods example force intended behavior", "num": "495", "d": "10/2014"}, {"title": "nt vhtml accept dom nodes", "body": "strings okay sometimes use libraries give back dom nodes", "num": "494", "d": "10/2014"}, {"title": "vue next validator", "body": "think already saw experimental validation planed vue next ca nt find anymore gone imagine everything", "num": "493", "d": "10/2014"}, {"title": "event handler name delete executed", "body": "error appears js console however rename event handler remove anything else works expected example code messagetext x new vue el chat data messages newmessage methods send function e epreventdefault thismessagespush text thisnewmessage thisnewmessage remove function message thismessagessplice thismessagesindexof message", "num": "492", "d": "10/2014"}, {"title": "inside component data function vm", "body": "executing consolelog inside component data function inherit true shows window object current viewmodel", "num": "491", "d": "10/2014"}, {"title": "value setting issue", "body": "hello reporting suspicious behavior looks like vue uses strict matching setting value data array common case string number", "num": "490", "d": "10/2014"}, {"title": "vif loses data context", "body": "works expected introduce directive get empty object text", "num": "489", "d": "10/2014"}, {"title": "chrome removing transitioned elements", "body": "elements linger vleave still class attribute need tool debug chrome used", "num": "488", "d": "10/2014"}, {"title": "vrepeat conflicts nested vref", "body": "references nested components nt behave expected children repeated", "num": "487", "d": "10/2014"}, {"title": "vmodel filter issue", "body": "hello using input example along filter lag input value vm data value see example try typing numbers input value modified filter always lag add something like fix problem nt know bug feature would like get easy method sync values", "num": "486", "d": "10/2014"}, {"title": "probably incorrect behaviour expressions attributes", "body": "hello testing new version expression worked well expression get empty class attribute time expression returns expected result attribute expression seem work fine example inspect elements classes please", "num": "485", "d": "10/2014"}, {"title": "safari error template vrepeat", "body": "first thanks great library safari getting error using template vrepeat appears working fine chrome firefox running", "num": "484", "d": "10/2014"}, {"title": "apply required dynamically updating vhtmlcontent", "body": "updating parameter includes vuecode indexhtml file result parser called case similar apply angular", "num": "483", "d": "10/2014"}, {"title": "var iteration iteration firebase example", "body": "think implementation whole library also examples iteration codes like native var loops native loops seen example examplesfirebaseappjs row var key thisvalidation possible look whole library examples change loops native loops well thanks", "num": "482", "d": "10/2014"}, {"title": "filterby", "body": "", "num": "481", "d": "10/2014"}, {"title": "", "body": "", "num": "480", "d": "10/2014"}, {"title": "setting handlers using von nested components v", "body": "currently seems nt see handler parent scope wondering way pull live example", "num": "479", "d": "10/2014"}, {"title": "typescript vue general", "body": "small problem love two things time typescript vue tried handfull different approaches make work together using ts modules andor classes publicprivatestatic properties shim vue components best got love intelisense autocompletion error hints get kind hacky wanted ask think typescript think possible bring togeher natural way maybe refactoring parts extend routine make internals reachable typescript construtor could make huge difference", "num": "478", "d": "10/2014"}, {"title": "objects computed properties", "body": "think request question bug report attempted use object computed property bind properties object using see nt work although expected looks like getters setters never created computed object sidestep issue using individual computed properties rather compound one however would nice convenience least put together templates cases thought reach get thoughts whether reasonable illadvised", "num": "477", "d": "10/2014"}, {"title": "problem setting value via vmodel vrepeated options", "body": "hope subject describes check example see need manually reset value ready function value copy simple selftoself setting wo nt trigger change seems like options created first value setting via moment options select value ca nt set ca nt come decent problem solution deserves fix maybe", "num": "476", "d": "10/2014"}, {"title": "vshow ca nt mess css", "body": "element css setting display none vshow directive vshow nt reveal element normal", "num": "475", "d": "10/2014"}, {"title": "broadcast working instances", "body": "case dynamically create list components html adding something list changing element component longer receive events let know issues reproducing", "num": "474", "d": "10/2014"}, {"title": "vattr applied component", "body": "using expected results select menu initially disabled changing state checkbox update attribute element actual result select menu initially enabled state checkbox effect attribute", "num": "473", "d": "10/2014"}, {"title": "vclass support function", "body": "hi using vuejs currently found vclass nt support function think uncomfortable supporting function make vclass powerful example put complicated logic function isselected instead attribute please think suggestion thanks", "num": "472", "d": "10/2014"}, {"title": "vif multiple issues", "body": "hi try debug following sample updated sorry complexity mixed multiple features nt found main issue please click selection button selection button nt expected also nt work next branch something similar works would cool debug things faster btw vueconfigdebug true nt show log next branch", "num": "471", "d": "10/2014"}, {"title": "work directly set data param without using set method", "body": "work work set method", "num": "470", "d": "10/2014"}, {"title": "dynamic components vcomponent", "body": "trying new vcomponent dynamic binding nt seem work change functionality nt mentioned changelog type test textbox vue recognizes correct component name nt change vcomponent binding", "num": "468", "d": "10/2014"}, {"title": "infinite loop watch subcomponent", "body": "data component subcomponent subcomponent watch temperaturevalue set temperaturechanged true got infinite loop watch subcomponent work fine see example thanks", "num": "467", "d": "10/2014"}, {"title": "filterby booleans", "body": "possible apply boolean property like results empty generated condition false works fine true solution", "num": "466", "d": "10/2014"}, {"title": "filterby booleans", "body": "possible apply boolean property like results empty generated condition false works fine true solution", "num": "465", "d": "10/2014"}, {"title": "css transition enter state", "body": "possible supply venter class vleave transition viceversa", "num": "464", "d": "10/2014"}, {"title": "want turn effects scenarios", "body": "hello want turn effects lowperformance android devices way achieve tried disable properties css vuejs still add class elements classes would never removed", "num": "463", "d": "10/2014"}, {"title": "removes first item", "body": "sometimes causes error changing contentattributes removing first item viewmodel array example removing items except first", "num": "462", "d": "10/2014"}, {"title": "add reacts strangely keys dots", "body": "using add add properties object iterating vrepeat keys dots reason add trying read dots object notation adding strange additional property real one example", "num": "461", "d": "10/2014"}, {"title": "partial recursion repeat alias", "body": "hi using vue issue trying build tree partial recursion works fine add alias repeat breaks getting uncaught rangeerror maximum call stack size exceeded added alias c wanted reference loop also tried children index children undefined value also", "num": "460", "d": "10/2014"}, {"title": "deep watching working", "body": "see codepen", "num": "459", "d": "10/2014"}, {"title": "vrepeat working vcomponent", "body": "next branch tried html failed warning console finding component work however", "num": "458", "d": "10/2014"}, {"title": "final grid result", "body": "search pagination sorting working fine thanks", "num": "457", "d": "10/2014"}, {"title": "vif intermittent", "body": "next branch quite hard reproduce every come across sometimes data updates vif toggle view nt update mean time using conditional vclass toggles", "num": "456", "d": "10/2014"}, {"title": "way using vwith like twoway binding", "body": "got case need update parent binding inside component using vwith", "num": "455", "d": "10/2014"}, {"title": "sometimes destroy nt trigger transition mobile", "body": "instead sometimes see vleave get added element immediately removed rc", "num": "454", "d": "10/2014"}, {"title": "destroy removing element", "body": "rc calling nt element", "num": "453", "d": "10/2014"}, {"title": "access parent vm methods inserted content directives", "body": "goal small component allows parent component insert elements directives attached directives reference properties parent vm example child component complain defined method however call method either way accomplish behavior stuck child component dispatch event button clicked listen parent", "num": "452", "d": "10/2014"}, {"body": "limitations arrays primitive values use arrays objects work", "d": "10/2014"}, {"body": "template interprets block directives template ignored template content extracted block", "d": "10/2014"}, {"body": "oh see intercalating one template element inbetween support directives solved problem", "d": "10/2014"}, {"body": "binding vwith work either template", "d": "10/2014"}, {"body": "filters must used end maybe filter called template looks cleaner eg", "d": "10/2014"}, {"body": "indeed looks way better", "d": "10/2014"}, {"body": "see discussion", "d": "10/2014"}, {"body": "skipped watching data object properties starts nt quite get discussion", "d": "10/2014"}, {"body": "oh sorry misread description prefixed data observed proxied could potential clash builtin propertiesmethods still access", "d": "10/2014"}, {"body": "ok got mention changes page", "d": "10/2014"}, {"body": "think directive component instead vuejs directives dom manipulations", "d": "10/2014"}, {"body": "ok thanks pointer", "d": "10/2014"}, {"body": "thanks reporting never used uc android probably never use smartisan since old version found way fix close", "d": "10/2014"}, {"body": "indeed", "d": "10/2014"}, {"body": "haha considering removing since filter trying much think could better dealt userland casebycase basis want take stab better implementation filter go ahead submit pr", "d": "10/2014"}, {"body": "think post good way write plugins using new option example js var mymixin created function thisstate foo destroyed function teardown thisstate null methods hello function consolelog thisstate var component vueextend mixins mymixin var c new component chello good thing approach avoids modifying default vue options plugin might look like nt think fixed way though feel free make suggestions", "d": "10/2014"}, {"body": "could understand plugin ran vuejs run mixin sorry poor english", "d": "10/2014"}, {"body": "plugin mixinonly need call instead pass create components js var validationmixin require vuevalidation mixin vuecomponent componentwithvalidation mixins validationmixin", "d": "10/2014"}, {"body": "ok thank sample code advice could understand advice continue development vuevalidator plugin", "d": "10/2014"}, {"body": "design vue instances used observed data example use", "d": "10/2014"}, {"body": "ok actual use case building hierarchical selector keeping state original data object end iterating children vms computed properties", "d": "10/2014"}, {"body": "hi \u7136\u540e\u8ba9\u6211\u770b\u4e0b\u51fa\u6765\u7684 stack trace stack trace \u4e5f\u53ef\u4ee5", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "branch \u6700\u65b0\u7684 commit", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "viewmodel page model bug caused issues passing items event listeners since fixed take look", "d": "10/2014"}, {"body": "ok great thx", "d": "10/2014"}, {"body": "every item vm registered child vm instead", "d": "10/2014"}, {"body": "array dom element man achieved code html text x possible make shortcut", "d": "10/2014"}, {"body": "haha right thought actually use", "d": "10/2014"}, {"body": "also possible make global like codes maybe intuitive way html text x", "d": "10/2014"}, {"body": "would complicate internal implementation might easier give class", "d": "10/2014"}, {"body": "maybe right perhaps misusing need find another way instead", "d": "10/2014"}, {"body": "thanks fixed", "d": "10/2014"}, {"body": "component definitions require function", "d": "10/2014"}, {"body": "right forgot", "d": "10/2014"}, {"body": "ok find directive good solution vue good thx", "d": "10/2014"}, {"body": "fixed due change", "d": "10/2014"}, {"body": "thank", "d": "10/2014"}, {"body": "assume item unique id id also set dom elements use jquery sortable hook inside hook call get array sorted ids update model array match order sorted ids easiest way probably create new array replace old one", "d": "10/2014"}, {"body": "try tonight tomorrow comment back method worked thanks", "d": "10/2014"}, {"body": "thanks fixed", "d": "10/2014"}, {"body": "first suggest avoid side effects inside filters filters pure functions concern transforming single value case would use watch value update split accordingly problem using filter change ui filter gets called first updated however filter part evaluating moment value written model yet directive triggered old value example reveal issue internal async batching patched using would work correctly", "d": "10/2014"}, {"body": "makes sense updated used watch result seems similar", "d": "10/2014"}, {"body": "hmm done hook works correctly need figure late behaves differently", "d": "10/2014"}, {"body": "using new option also works correctly inside option works correctly next like discovered", "d": "10/2014"}, {"body": "ok latest commit cases working intended", "d": "10/2014"}, {"body": "yup also works latest thank reference simple iteration variable total split limit ended like", "d": "10/2014"}, {"body": "cool", "d": "10/2014"}, {"body": "actually noticed input type take strings long parsed something like example string break string work hope helps", "d": "10/2014"}, {"body": "want input field display formatted string afaik default behavior set value anything parsed number erase whole thing note filter using default read filter formats data way model view input writes model gets formatted set input value resulting erasing everything working example would require use read write filters", "d": "10/2014"}, {"body": "humm right input parse similar way parseint set value input set value erasing characters bit odd since regular input parse cant anymore vue nt exactly wrong would still helpful warn situation think", "d": "10/2014"}, {"body": "browser setting results empty value nothing vue actually", "d": "10/2014"}, {"body": "added warning using readonly filters however behavior within scope vue warnings", "d": "10/2014"}, {"body": "til input types parse numbers glad hear warning thanks", "d": "10/2014"}, {"body": "ha thanks", "d": "10/2014"}, {"body": "found vm set field value true", "d": "10/2014"}, {"body": "hmm actually wrong", "d": "10/2014"}, {"body": "need", "d": "10/2014"}, {"body": "variable sometimes needs update value common exactly user enters page parameters page displays data links page different parameters", "d": "10/2014"}, {"body": "curious dealing params ca nt update params routing eg", "d": "10/2014"}, {"body": "getting params page like logic triggers attached event component view", "d": "10/2014"}, {"body": "interesting side effect internal mechanism deal filters turns fix outofbound issue range inputs", "d": "10/2014"}, {"body": "good catch thanks", "d": "10/2014"}, {"body": "depending handling options pass expression custom one option", "d": "10/2014"}, {"body": "yes without specifying model name element already maybe directive access raw element attributesdirectives template would easy get trying figure good dry design form validaton manageable complex forms first idea already mention filters way go see similar problem filter nt know caller model yourothers take", "d": "10/2014"}, {"body": "pushed makes attribute removal happen link time means give custom directive higher priority priority time called attribute still present", "d": "10/2014"}, {"body": "nice solution thanks", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "related matter event passed handler access target element would also useful filters access element validation purposes might validator many similar elements way right reference element manually filter parameter correct", "d": "10/2014"}, {"body": "aristidesfl would need access element value already passed filter", "d": "10/2014"}, {"body": "implementation validator", "d": "10/2014"}, {"body": "always next frame data change although deferring mechanism depends whether available wrapped know data ui change depends emit custom event watch callback", "d": "10/2014"}, {"body": "clarify wrote party plugin nt meant vue plugin example", "d": "10/2014"}, {"body": "hmm give brief description expect use event", "d": "10/2014"}, {"body": "example second instance plugin fixed send input events changed results vue updating model reflect changes made fake slider user idea vue sending input change events changes dom element plugin listen update interface accordingly", "d": "10/2014"}, {"body": "components default isolated scope want inherit parent model pass component", "d": "10/2014"}, {"body": "yeah inheriting scope component intuitive inherited parent scope instead", "d": "10/2014"}, {"body": "next branch", "d": "10/2014"}, {"body": "delimiter api changed need provide tokens", "d": "10/2014"}, {"body": "yea works nt fully read changesmd bad thanks", "d": "10/2014"}, {"body": "vrepeat", "d": "10/2014"}, {"body": "\u7528 \u7684 object repeat object \u6dfb\u52a0\u5c5e\u6027\u7684\u65f6\u5019\u8981\u7528", "d": "10/2014"}, {"body": "nt device hand test moment think likely wrap native js test raf call see still working", "d": "10/2014"}, {"body": "yes right tried example device wakes count longer updated meaning request animation frame never triggered file bug apple", "d": "10/2014"}, {"body": "closing apple bug also latest build able get around setting false", "d": "10/2014"}, {"body": "fixed thanks", "d": "10/2014"}, {"body": "fixed next branch", "d": "10/2014"}, {"body": "interesting turns firefox implements nonstandard method changed strategy hash created fixes issue", "d": "10/2014"}, {"body": "well requires bit understanding vue internals write plugins also depends type plugins want write basically several possiblities add global method eg vueelement add set global assets directivesfilterstransitions etc eg vuetouch add vue instance methods attaching convention vue instance methods prefixed nt conflict user data methods example method overwritten methods option", "d": "10/2014"}, {"body": "want write thank much listing possibilities mapping examples thanks also headsup naming convention well already ran forget writing example plans expand documentation plugins release", "d": "10/2014"}, {"body": "yes expand part docs", "d": "10/2014"}, {"body": "thanks excited release though really called", "d": "10/2014"}, {"body": "well big rewrite expect bit unstable basically want see stable usage pushing", "d": "10/2014"}, {"body": "nope directives mapping plain data dom behavior also dom nodes observed using vue observation mechanism need insert dom nodes use native dom api", "d": "10/2014"}, {"body": "function triggered vhtml", "d": "10/2014"}, {"body": "yep planned bit twoway filters think validation done userland plugin", "d": "10/2014"}, {"body": "thx info", "d": "10/2014"}, {"body": "keyword expression interpreted trying valid javascript expression avoid keywords expressions", "d": "10/2014"}, {"body": "although true think confusing since objdelete valid javascript least possibility call delete method somehow", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "nt work", "d": "10/2014"}, {"body": "rename method back", "d": "10/2014"}, {"body": "yes following would work nt obvious", "d": "10/2014"}, {"body": "version using works correctly", "d": "10/2014"}, {"body": "using", "d": "10/2014"}, {"body": "stuck afraid either rename method use workaround", "d": "10/2014"}, {"body": "problem right evaluating frameworks", "d": "10/2014"}, {"body": "curious need access instance data function", "d": "10/2014"}, {"body": "remember grid component passing options inside data function component grid component one options setup function call click function calls method upper vm", "d": "10/2014"}, {"body": "hmm sure good way crossvm method calls makes vms tightly coupled harder reason dispatch events child vms", "d": "10/2014"}, {"body": "understand couplement issue actually singlepage router happens variable inside master vm easily call wherever need inside components inheriting master vm", "d": "10/2014"}, {"body": "thing could happen socket instance variable master vm components reusing instance", "d": "10/2014"}, {"body": "alright", "d": "10/2014"}, {"body": "thanks lot", "d": "10/2014"}, {"body": "good catch", "d": "10/2014"}, {"body": "simple example seems work correctly suspect something else using component vif well", "d": "10/2014"}, {"body": "demo", "d": "10/2014"}, {"body": "oh ok thought referring property instead yeah caveat creates anonymous wrapper instance around content inherits normal properties empty object probably rework part later since anonymous instance nt ideal anyway", "d": "10/2014"}, {"body": "also make annoying intermittent", "d": "10/2014"}, {"body": "provide information seeing type behavior eg css rules applied element type transition directive triggering transition", "d": "10/2014"}, {"body": "directive triggering transition transitions see get access app experiencing", "d": "10/2014"}, {"body": "confirm transitionend triggered element nt removed", "d": "10/2014"}, {"body": "fixed thanks", "d": "10/2014"}, {"body": "actually caused way vmodel restores cursor position updating value adjusted restoring algorithm work example seems common use case another thing using write filter instead read one", "d": "10/2014"}, {"body": "yeah noticed fixed branch thanks reporting", "d": "10/2014"}, {"body": "ca nt seem reproduce make jsfiddle", "d": "10/2014"}, {"body": "sure able see iteration vrepeat rendered latest chrome firefox however safari getting error", "d": "10/2014"}, {"body": "actually caused nasty bug safari pretty tricky fix vue side since vue relies clonenode lot internally sure fix time soon meanwhile suggestion use wrapper div instead template see webkit team reacts bug report", "d": "10/2014"}, {"body": "interesting thanks looking", "d": "10/2014"}, {"body": "ok workedaround next branch hope fix soon", "d": "10/2014"}, {"body": "nt compile content meant static html snippets recommended define components parts need change dynamically switch components instead raw html", "d": "10/2014"}, {"body": "thanks indeed started using components currentview instead though larger projects order keep files separate feature dynamically load html files vuedirectives inside would great", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "loops mean javascript engine needs create function turn seen point following link writes avoid forin loops function based iteration logic behind pretty straightforward instead looping set indexes like would dowhile forin might loop additional array items also requires effort order loop items javascript set function one functionbased iteration comes slew performance issues extra function introduced corresponding execution context created destroyed top additional object added scope chain thanks", "d": "10/2014"}, {"body": "talking looping arrays firebase example looping object array also nt heard anywhere creates function iteration largely engine implementation dependent hardly truth modern engines like interferes optimization looped object hashslow mode possible situations vue uses loop internally target object simple performance difference far small justify writing different way", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "components isolated scope default make component work intended still trying find proper solution eg directives written inline component always compiled inherited scope know need invoke method root scope", "d": "10/2014"}, {"body": "yup closing thanks", "d": "10/2014"}, {"body": "personally nt used typescript much vue requires pretty special treatment extend functionality works need look ts class transpiling works first hand know working vue ts lot works might want take look join forces", "d": "10/2014"}, {"body": "made gist pattern maybe helps somebody else think little bring vues extend tss extend closer together", "d": "10/2014"}, {"body": "indus issue extending vue directly typescript call super vue implied configuration passed constructor yet proceeds ts class member creation fix add support vue pass false constructor defer configuration call vueinit config change allows map typescript class vue side effects using production seeing limitations key logic", "d": "10/2014"}, {"body": "logic greatly simplified option merging externalized constructor constructors simply call think make ts integration bit easier guys think", "d": "10/2014"}, {"body": "missed change thanks", "d": "10/2014"}, {"body": "merge options code lets say create something needs ready funktion internal setup also want give user possibility paste options well another readyfunction example maybe mergeoptions vues extendprocedure available vueutil called every instantiation seems wrong", "d": "10/2014"}, {"body": "typescript needs way subclass vue via prototype pass configuration instance via constructor typescript class instances create members call super thus creates subtle timing issue vue could instanciated passing configuration via constructor subclasses would fail attempting pass members super existed solution pass super false vue call separate vue method set configuration via subclass ok team breaking vuets make vue better adapt external way set configuration vue ted mon oct indus notifications githubcom wrote merge options code lets say create something needs ready funktion internal setup also want give user possibility paste options well another readyfunction example constructor instanceopt maybe mergeoptions vues extendprocedure available vueutil called every instantiation seems wrong reply email directly view github", "d": "10/2014"}, {"body": "nt think makes sense use nested value computed property computed properties meant data needs persisted every time computed property getter invoked fresh copy value returned case object computed property every time get different object trying write back modifying different object every time also example nt explain want way since eventually want write back instead", "d": "10/2014"}, {"body": "fair enough problem originally trying solve something akin following view model array objects view displays objects radio selection selected object persisted model html objname elsewhere view display checkbox configures currently selected object originally attempted following case properties could manipulated selected object first tried method several ways around multiple computed properties child vm config directly watching keypath care seems like good reasons way originally attempted large part motivation asking thanks", "d": "10/2014"}, {"body": "resolved new param attribute elements", "d": "10/2014"}, {"body": "oh actually bound value evaluates true unsets inline display value fallback whatever initial css value element initially want overwrite initial style explicitly use instead", "d": "10/2014"}, {"body": "want element initially hidden js loads inline", "d": "10/2014"}, {"body": "use css rules", "d": "10/2014"}, {"body": "seems fix reset wait nexttick update", "d": "10/2014"}, {"body": "change components instantiated next tick broadcast events happens since events synchronous new components miss might case", "d": "10/2014"}, {"body": "mean receive broadcast events matter fire also array empty reproducing issue took bit diving though chrome script debugging tool find", "d": "10/2014"}, {"body": "wow ca nt believe stupid bug know look fix commit p", "d": "10/2014"}, {"body": "haha splice removing elements nice", "d": "10/2014"}, {"body": "actually deletes elements index hence empty children array", "d": "10/2014"}, {"body": "oh wow learn something every day", "d": "10/2014"}, {"body": "adding managed work around issue", "d": "10/2014"}, {"body": "components default isolated scope direct access parent properties many ways get around make component access parent properties use pass bind still considering directives root element isolated component handled tricky theoretically handled component scope context feels natural able bind parent property", "d": "10/2014"}, {"body": "using computed properties instead function", "d": "10/2014"}, {"body": "rayfranco computed properties good choice however want pass value function computed properties solve problem", "d": "10/2014"}, {"body": "chaomao tried", "d": "10/2014"}, {"body": "rayfranco way works however function invoke twice elegant", "d": "10/2014"}, {"body": "longer evaluate twice", "d": "10/2014"}, {"body": "right fiddle ca nt seem find issue", "d": "10/2014"}, {"body": "sorry wrong sample wait update", "d": "10/2014"}, {"body": "update cloudflare cdn", "d": "10/2014"}, {"body": "indeed bug sorry fixed next branch", "d": "10/2014"}, {"body": "issues code could computed property property method called causing conflict part issue actually nt need method method nt define first", "d": "10/2014"}, {"body": "thanks fast support great project", "d": "10/2014"}, {"body": "tested works", "d": "10/2014"}, {"body": "hi sure something similar documented", "d": "10/2014"}, {"body": "use value initialized initialized bindfunctions update test param value click work example", "d": "10/2014"}, {"body": "expected behavior rules thumb list properties expect component option upfront possible component initialized way add observed data", "d": "10/2014"}, {"body": "sorry indeed bug directive skips setting watcher falsy initial value give truthy initial value work meanwhile fixed next branch", "d": "10/2014"}, {"body": "thank looking", "d": "10/2014"}, {"body": "resolved check release", "d": "10/2014"}, {"body": "create custom filter filters array anyway want", "d": "10/2014"}, {"body": "thanks tip also seems handled ing work fine", "d": "10/2014"}, {"body": "able achieve", "d": "10/2014"}, {"body": "instead pm evan notifications githubcom wrote able achieve setting transition none vleave reply email directly view github tim smart developer tel fax level cuba st po box marion st wellington new zealand", "d": "10/2014"}, {"body": "sorry though said try", "d": "10/2014"}, {"body": "great works thanks", "d": "10/2014"}, {"body": "way toggle moment able disable transitions something like hack setting something like sure would work since nt android device test", "d": "10/2014"}, {"body": "upgrade using everything works well thanks new api looks simple amp nice like", "d": "10/2014"}, {"body": "using expression incorrectly actually calling instance dom api method method nt manipulate array never call instance methods expressions write expression mutates array turn removes instance", "d": "10/2014"}, {"body": "got thanks", "d": "10/2014"}, {"body": "using longer happen", "d": "10/2014"}, {"body": "yep still using npm", "d": "10/2014"}, {"body": "yeah bunch breaking changes make sure read changes doc", "d": "10/2014"}, {"body": "thanks stick sanitizing dots", "d": "10/2014"}, {"body": "got gets reference anyway dig recursion issue otherwise close vue rocks", "d": "10/2014"}, {"body": "reason alias causing infinite loop first recursion referring parent children instead repeating list make work alias write like guess without alias makes much simpler", "d": "10/2014"}, {"body": "field present initial vue detect newly added properties either define initial data fine use", "d": "10/2014"}, {"body": "thanks", "d": "10/2014"}, {"body": "good catch fixed", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "close since related vue code feel free post vuejsdiscussion", "d": "10/2014"}, {"body": "sounds quite vague anyway actually use workaround", "d": "10/2014"}, {"body": "using transitions element vif", "d": "10/2014"}, {"body": "seems working fine sure happening", "d": "10/2014"}, {"body": "pass object changes object reflect parent", "d": "10/2014"}, {"body": "component like changes currentdate inside component nt reflect parent forcing", "d": "10/2014"}, {"body": "reason nt reflect parent component isolated scope avoid modifying parent state take whatever data parent gives unidirectional data flow needs access modify parent state make inherit parent scope", "d": "10/2014"}, {"body": "would inherit much good pattern", "d": "10/2014"}, {"body": "sure big component input field make component", "d": "10/2014"}, {"body": "would love keep behavior consistent arguments passed functions javascript ca nt modify original variable outside function within mutate object passed", "d": "10/2014"}, {"body": "makes sense", "d": "10/2014"}, {"body": "give context reproduce mobile devices particular ipad", "d": "10/2014"}, {"body": "tested iphone ios ca nt seem reproduce issue css using transition", "d": "10/2014"}, {"body": "email test case translatez transforms", "d": "10/2014"}, {"body": "cool able reproduce issue using css fixed simple test case let know works app seems using npm install next", "d": "10/2014"}, {"body": "working great ipad thanks getting issues chrome android though", "d": "10/2014"}, {"body": "specify versions chrome android", "d": "10/2014"}, {"body": "android chrome pm evan notifications githubcom wrote specify versions chrome android reply email directly view github", "d": "10/2014"}, {"body": "hmm exactly setup everything seems work fine exactly running", "d": "10/2014"}, {"body": "nevermind everything working fine cheers", "d": "10/2014"}, {"body": "cool app looks slick btw let know launches", "d": "10/2014"}, {"body": "pm want see app reproduce", "d": "10/2014"}, {"body": "need call remove element", "d": "10/2014"}, {"body": "work expected stuck moment", "d": "10/2014"}, {"body": "gotcha hoping put logic parent vm would nt modify child every time use looking forward giving shot soon", "d": "10/2014"}, {"body": "maybe could make work addchild used options", "d": "10/2014"}, {"body": "indus yeah made work", "d": "10/2014"}, {"body": "first thank fantastic framework design strategies speedup init time grid scenario long loading time vs raw using version upgrading new version advantage situation", "d": "10/2014"}, {"body": "way vrepeat without databinding ie know want render component forget", "d": "10/2014"}, {"body": "want render huge array fastest way write directive similar instantiating component incur lot additional work even rendered plain innerhtml always fastest also important something ca nt done builtin directives always write", "d": "10/2014"}, {"body": "plugin better use built standalone every option would need", "d": "10/2014"}, {"body": "let leave userland feasible approach use two separate properties one vmodel one search key throttle callback vmodel property change search key property", "d": "10/2014"}, {"body": "bumping told cheerio nodejs jquery allowing render dom faster jsdom least said fullfs might want give try previous setup compare", "d": "10/2014"}, {"body": "good point ayamflow times faster still enough another thing wo nt help launching module allows work html stored string real dom using jquery syntax word works plain text dom emulation current state ca nt work plain text need dom way gone little crazy developed decent server rendering module vuejs uses modules like text parsing expression parsing copies almost behavior excluding events dynamic things etc even stable fast thing quality code poor afraid wo nt help end though maybe could interesting concept", "d": "10/2014"}, {"body": "fullfs wow still sounds pretty cool though picking prerendered content front end", "d": "10/2014"}, {"body": "mean rerender client example ractivejs way event blinking know flaw shows things like flashbanners render twice back picking imagine process go like get html server get raw templates somewhere initialize vuejs vue renders dom tree wo nt append document creates hidden dom tree vue starts matching present visible nodes nodes hidden dom tree searching equal elements changing binding hidden nodes visible nodes note process requires equal html rendering result every side method still need render twice plus time matching relinking take look derbyjs uses interesting mechanism html picking broadly speaking sets ids nodes unique value like sends map embedded json containing ids marks probably rerenders dom shadows ps ok probably tell right know team working new project wanted use kind fullstack framework bothsides rendering isomorphic ideology sharing templates code server client long story decided go way ok main thing vuejs really good far developed framework prototype based vuejs bothsides rendering nt know could share forces something least could provide feedback also troubles development due several vue features would like make suggestions enhancements fullstack approach point view", "d": "10/2014"}, {"body": "interesting blowing everything away nt ideal working maybe good enough would love hear feedback get shoot email profile", "d": "10/2014"}, {"body": "nt think best way either anyway ca nt manage better without serious vue modifications wanted leave vue original state talking right way make notes need kind template precompilation function convert raw html tokens could send server client make first initialization faster handlebars ractive something similar nt want spend time rendering nodes twice need way still need kind map fully compiled vue instance match html againt could use precompiled templates make map without creating real dom nodes faster right next could make matching vue would pick html server nodes without need create new ones replacing existing think ps actually sure motivated go trouble making vue work fullstack technology mean nt want trouble subject plans imagined would great", "d": "10/2014"}, {"body": "limitation mainly comes vue approach dombased templating issue angular vue compilation process relies dom leaves string parsing browser basically designed isomorphic javascript mind could made work separate stringbased parser server leave hints rendered html plugin client side helps vue pick hints yeah nontrivial efforts really priority vue ok leaving space frameworks designed specifically isomorphism mind eg react", "d": "10/2014"}, {"body": "ok thanks explaining focus developing crazy stuff pseudovue rendering", "d": "10/2014"}, {"body": "might wrong place ask could expect see release start using", "d": "10/2014"}, {"body": "check rc releases", "d": "10/2014"}, {"body": "csp compliant build available branch", "d": "10/2014"}, {"body": "using adapters \u00e0 la rivets integrating vue application written backbone since models parse save logic already built tested either serialize back forth hand buy way run multiple code paths apis worked big web startups kinda crappy require parsing passed webapp nt think use case would uncommon would especially rad feature something like amp model front end data modeling tools var customers new customers customersfetch urlfragment customers written backbone var customersview new customersview model customers customersviewrender else urlfragment customer written vue var customer findcustomer customers urlfragment customervue customer", "d": "10/2014"}, {"body": "started issue coming precisely rivets adapters", "d": "10/2014"}, {"body": "need js land good stand data modeling absence made conspicuously obvious new wave view layer frameworks like vue react ractive etc full featured libraries saw need nt opened wider community yet ember emberdata angular resource backbone backbonemodel best tool seen far ampersandmodel since allows access data accessor may even observable way vue deal nt looked deep enough vue source know sure sure super busy getting door thoughts vueresource would work adapters possible", "d": "10/2014"}, {"body": "example wrote using vue backbone model essence since manipulated independently anything wraps operates pojo used persistence layer", "d": "10/2014"}, {"body": "think probably better handled option", "d": "10/2014"}, {"body": "rethinking problem probably better", "d": "10/2014"}, {"body": "thanks ted work closing put link vuets readme", "d": "10/2014"}, {"body": "component looks something like title component title null parent title ends getting displayed instead usually behavior want case component title null want leave blank good way referencing datatitle thanks", "d": "10/2014"}, {"body": "chrisdavies pretty sure wo nt happen still sounds weird define child component title late", "d": "10/2014"}, {"body": "fact child title never defined null json serializer server simply nt put title property json vue displayed component parent title instead anyway got around sanitizing data component create function ctitle undefined amp amp ctitle thanks", "d": "10/2014"}, {"body": "likely separate build since csp compliant interpreter add bulky code needed situations yeah definitely roadmap waiting finish refactor first", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "coming really love see officially comes updated website good stuff", "d": "10/2014"}, {"body": "triplekdev hopefully week working documentation", "d": "10/2014"}, {"title": "implementation isnew save breaks saving new models assigned id", "body": "either using default id using define id field calling backbone model fails create new object backend id field already set end function calls determine method use sync method checks id field set sets sync method accordingly id field set determines action update calling put instead post backend failing save model backend nt exist previous versions one downloaded march least possible save models using preassigned id", "num": "3364", "d": "10/2014"}, {"title": "historystart url conversion broken oldie wantshashchange wantspushstate", "body": "say windowlocation browser call turns location turn location happens initially computes fragment empty string return since oldie calls fragment empty currently work around problem specific case hack", "num": "3358", "d": "10/2014"}, {"title": "collectioncreate call save adding nonunique model", "body": "var mymodel backbonemodelextend defaults id null var mycollection backbonecollectionextend url foo model mymodel var mycollection new mycollection mycollectioncreate id mycollectioncreate id example two put requests sent given url seems odd second add noop pass wait true intended", "num": "3355", "d": "10/2014"}, {"title": "using pushstate hashes together", "body": "according current implementation use pushstate hashes routing need direct routes hashes routes", "num": "3352", "d": "10/2014"}, {"title": "second parameter initialize replaced object", "body": "strange issue object initialization second argument null etc live preview", "num": "3350", "d": "10/2014"}, {"title": "collection length updated models removing fetch", "body": "line backbonejs code variable nt updated models removed causes sometimes error think also problem cid id modelmap object keys model id cid", "num": "3348", "d": "10/2014"}, {"title": "move wraperror functionality backbonesync", "body": "currently wraperror always called backbonesync wraperror removed functionality moved within backbonesync provide added benefits users override backbonesync check see error parameter explicitly defined code unnecessary preemptive checks see optionserror specified every ajax call", "num": "3346", "d": "10/2014"}, {"title": "custom comparators", "body": "backbone set relies underscore isequal method determine whether attributes changed however becomes issue attribute contains another model collection really like way specify custom comparator attribute could consulted instead isequal present overriding set gets pain", "num": "3345", "d": "10/2014"}, {"title": "collectioncreate throws missing url exception given model", "body": "succeeds nt pass specifically happens passing model expected surprised want use collection url hence using instead", "num": "3344", "d": "10/2014"}, {"title": "adding model collection fails", "body": "trying add model collection however get looking code makes sense backbone passes model instance collectionget get looks model supposed add instantiated models collection", "num": "3343", "d": "10/2014"}, {"title": "server side backbonejs application serve indexhtml rest api server", "body": "good day guys sure right place question asked stack overflow google groups answer trying figure make rest api server backbone js application question keep track requests methods post get others question give client indexhtml page found example entry point site root gives index page problem solution go url users without going first get json list users without entire site understand way rest api works would like site give clients index page always connect first time need server keep track whether first connection give indexhtml along data request first one server sends indexhtml server rest api looks like little confused hope help sory bad english", "num": "3342", "d": "10/2014"}, {"title": "ajax error destroying model", "body": "error occurs server returns empty response jquery trying parse empty response forced default suggest add one condition check type request javascript default jsonrequest options var params type type type delete paramsdatatype json", "num": "3339", "d": "10/2014"}, {"title": "ioswebkitdebugproxy installation error aclocal file exist", "body": "tried install ioswebkitdebugproxy throwing teh error update brew could please guide resolve error aclocal error aclocal file exist ebiztestsmacbookpro ebiztest brew update updated homebrew gt updated formulae awscli opam qwt varnish chromedriver libssh pianobar solr daemon mksh soundtouch wireshark geoserver mongodb unixodbc ebiztestsmacbookpro ebiztest brew install ioswebkitdebugproxy gt downloading already downloaded gt autogensh autogensh aclocal aclocal error aclocal file exist", "num": "3335", "d": "10/2014"}, {"title": "allow listento callback method name string", "body": "since callback always called object context perhaps could optionally give string name method object would closely mirror functionality events hash open doors error method nt exist object people already pass undefined issue really already exists", "num": "3333", "d": "10/2014"}, {"title": "create valid equivalent event successful validation", "body": "chance could new standard event validation run errors found would really useful happen complement invalid event validation run example backbone view model shows error messaging invalid events var model backbonemodelextend validate function thisget foo bar return foo bar var view backboneviewextend events click onclick sounds like reasonable feature request let know work patch", "num": "3332", "d": "10/2014"}, {"title": "backbonecollection trigger invalid event", "body": "collection create new model property invalid attributes collection nt trigger event method always return new model return new model attribute default use method instead property", "num": "3328", "d": "10/2014"}, {"body": "behavior since initial release going need override support", "d": "10/2014"}, {"body": "meant map canonical resource identifier typically assigned backend simply put nt already model trying create first time", "d": "10/2014"}, {"body": "jridgewell backbone code working always checked id field implemented let set field complains database using properly rest api uses username find data users simply type name looking usernames also unique indexed work well ids users set username registering need submit model field completed", "d": "10/2014"}, {"body": "good catch fix short order", "d": "10/2014"}, {"body": "think addressed issue would mind giving spin", "d": "10/2014"}, {"body": "thanks quick patch think fixes right thing see code review pull request", "d": "10/2014"}, {"body": "odd trying create resource trying create another one backbonejs psychic powers nt know still exists server deleted time expired ephemeral non restful resource whatever crazy scheme might cooked", "d": "10/2014"}, {"body": "please try mailing list stackoverflow irc channel questions github issues maintaining framework", "d": "10/2014"}, {"body": "wrong argument types model constructor signature anything else incorrect future please use stackoverflow mailing list questions github issues maintaing framework", "d": "10/2014"}, {"body": "thanks read doc carefully", "d": "10/2014"}, {"body": "bad", "d": "10/2014"}, {"body": "override case", "d": "10/2014"}, {"body": "current approach overriding isequal wrapper method set reverting back original underscore isequal feels like kludge primarily nt want pollute underscore code internal logic lot stuff depends isequal secondly substitute isequal set conditions someone got sloppy forgot revert method could issues finally going forward objects may complex comparison logic instance two models equal subset attributes equal ie maintain timestamps record keeping model state nt weigh equality check guess could add custom comparator logic expand isequal respect custom comparators still feels less ideal", "d": "10/2014"}, {"body": "cbroome curious need store collectionmodel attributes reserve attributes strictly primary data types plain objects even though require nested hierarchies modelscollections app want attach model another model would nt suffice attach id attribute default usual backbone wiring sync together may something like enlighten use case", "d": "10/2014"}, {"body": "want attach model another model would nt suffice attach id attribute default usual backbone wiring sync together ramseydsilva still nt cover equality check suppose want see attribute categorymodel changed setting still need write custom isequal would know verify categorymodels within context itemmodel aside sometimes back complex components models models wo nt corresponding id api every new one get unique backbone cid instance scheduler component understands ical assigns intervals backed backbonemodel model scheduler attribute property like able say performing equality check look scheduler tojson attribute state", "d": "10/2014"}, {"body": "expected passing option backbone wait server agree adding model jsfiddle example sending post request jsfiddle agree post request specified url error post forbidden", "d": "10/2014"}, {"body": "taking talking runtime error url property must defined expected oct jeremy ashkenas notifications githubcom wrote closed reply email directly view github", "d": "10/2014"}, {"body": "know url bad example show collection url defined try call throws exception pass", "d": "10/2014"}, {"body": "cleaned fiddle try make easier read", "d": "10/2014"}, {"body": "michaelhgchen could please review reconsider resubmit issue real issue tried clarify might explained well first time", "d": "10/2014"}, {"body": "collection create meant called attributes object model instance try see works reason need pass model instance create set collection property first", "d": "10/2014"}, {"body": "mind posting failing test case jsfiddle", "d": "10/2014"}, {"body": "nambrot may wrong might wanted instead", "d": "10/2014"}, {"body": "sorry super busy currently able create jsfiddle please close nt want issue laying around ramseydsilva rake care", "d": "10/2014"}, {"body": "nambrot ah see never knew could", "d": "10/2014"}, {"body": "legitimately curious got tried reproducing thing come either overwritten model created using", "d": "10/2014"}, {"body": "ahhhhh sorry fault indeed overwritten totally ignored would impact object access", "d": "10/2014"}, {"body": "ah makes sense glad found", "d": "10/2014"}, {"body": "appears duplicate others search background", "d": "10/2014"}, {"body": "experience anyone figure sparkles", "d": "10/2014"}, {"body": "add homebrew support backbone", "d": "10/2014"}, {"body": "verified reproducible issue", "d": "10/2014"}, {"body": "infotoudaya looks like missing collection macros locate utilise pkgconfig osx system install missing dep via best luck side note wrong repo", "d": "10/2014"}, {"body": "interesting idea", "d": "10/2014"}, {"body": "big question callback resolved bind time trigger time people might expect one confused think solved docs people wo nt know feature unless reading section either would equally useful usually binding prototype methods eg looks like resolving method trigger time would involve changes core event dispatch would best maybe double size triggerevents worse might cause noticeable perf degradation option resolving method bindtime would pretty easy implement check callback string see context function property name", "d": "10/2014"}, {"body": "chatting coworker mentioned resolving method trigger time would actually buy power could switch event handler object based state resolve bind time really syntactic sugar", "d": "10/2014"}, {"body": "correct wrong believe event looking fired validation nt prevent need means fired validation confirms conditions valid nt produce", "d": "10/2014"}, {"body": "trigger event want end validation", "d": "10/2014"}, {"body": "true trigger validation change event triggered actually changing model dontshootme true probably work short term wanted ask standard event since also event whatever reason event considered undesirable like know necessary nt really fly could said", "d": "10/2014"}, {"body": "second thought see need invalid since needs fire event match change operation fails nt see ca nt extend logic successful validation since leverage trigger error messages clear", "d": "10/2014"}, {"body": "closing dupe probably others", "d": "10/2014"}, {"body": "platinumazure maybe use monkey patch whith something like javascript validatefn backbonemodelprototypevalidate backbonemodelprototypevalidate function attrs options var ret validatefncall attrs options ret true thistrigger valid options return ret preparemodelfn backbonecollectionprototypepreparemodel backbonecollectionprototypepreparemodel function attrs options var ret preparemodelfncall attrs options ret false return false thistrigger valid ret options return ret careful tested used triggering events early late could undesirable effect", "d": "10/2014"}, {"body": "oops missed duplicate think searching open issues sorry", "d": "10/2014"}, {"body": "let tag em close em", "d": "10/2014"}, {"body": "sorry return question much time passed busy month underscore partial definitely help minor improvement still requires individual functions set advance looking define arguments right events hash looking source code uses jquery function allows passing argument accessible eventdata using bit regex arguments could extracted passed calling would happy write pull request changes sounds viable", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "think correct behavior actually defer braddunbar rewritten sort nested setting behavior recently", "d": "10/2014"}, {"body": "sequence events see listed level nesting update attribute fire change event call first listener arguments event update attribute nested fire change event call first listener arguments event call second listener arguments event call second listener arguments event opinion sort behavior inherent triggering events synchronously suggestion would use event fired events using values event updating values nested manner cc tgriesser", "d": "10/2014"}, {"body": "yep agree correct synchronous behavior wanted defer authority many ways address app quickest easiest simple", "d": "10/2014"}, {"body": "okay makes sense thanks update", "d": "10/2014"}, {"body": "nt think support encourage behavior passing custom options callback handler encourages second channel information outside actual url value whole point providing url value give link return place left options forwarded means return bookmark options nt forwarded state app different defeating point routing first place truly client side bit information pass around different way truly persistent bit state something nt want serialized url put session router options nt right way communicate", "d": "10/2014"}, {"body": "reason ca nt use pass context provided ajax library naganowl provide realworld example would useful", "d": "10/2014"}, {"body": "jashkenas allowing modelcollection specified ajax option callbacks promise based callbacks maintain consistent function body instance client would nt able display property model options error callback could modified pull model first argument seems elegant callbacks able reference rather everywhere examples could rendering parts view success model request without relying events flexibility course said collections well ultimately fact backbone dependency jquery calls method methods call makes think also respect properties options provided", "d": "10/2014"}, {"body": "naganowl face similar issue propose forward original options sent crud methods backbonesync would help use case well see", "d": "10/2014"}, {"body": "ramseydsilva along lines ultimately issue wants keep logic success error callbacks handlers called proper context rather rewrite overridden success handler", "d": "10/2014"}, {"body": "fetch returns ajax returns deferred object rely code chain successive events moreover fetch returns completion may unnecessary block code waiting fetch resolve already handle model nt suffice also model fetched server repeatedly fetch keep sync", "d": "10/2014"}, {"body": "also return thing ie deferred object proposed wo nt really solve problem need wait fetch finish instantiating view could", "d": "10/2014"}, {"body": "yep something done app recommend binding render event model", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "let leave something fixed constructor", "d": "10/2014"}, {"body": "agree method missing also thought using conjunction ran across problem trigger event twice using option calling option also want event fired property gets unset method would take new attributes hash fill hash values old attributes keys present new attribute hash js modelprototypereset function attrs options var key thisattributes key attrs continue attrs key void", "d": "10/2014"}, {"body": "lennerd", "d": "10/2014"}, {"body": "help imagine key current attributes hash model present new hash pass listen event wo nt triggered new value used silent mode js backbonemodelprototypereset function attrs options var key thisattributes thisunset key silent true return thisset attrs options var bar new backbonemodel baron change function model consolelog model bar changed baron change foo function model foo consolelog foo changed foo barset foo test gt model bar changed gt foo changed test barreset gt model bar changed foo resetted change event triggered", "d": "10/2014"}, {"body": "cool get mean probably opt using overriding thisattributes explicitly matter swapping pandaface", "d": "10/2014"}, {"body": "pardon ignorance show still relatively new backbonejs behavior discussed sounds like description says resets model state server looks though events still triggered make model dirty reason approach taken looking reset attributes based server response would imagine situation might occur model changes sideeffect another operation generally sideeffects considered poor programming avoided possible sideeffect avoided perhaps makes sense send update model xyz response flag instead new model attributes trigger whenever see response pardon ignorance exhibiting comment", "d": "10/2014"}, {"body": "let tag em close em", "d": "10/2014"}, {"body": "sorry late response would nt call optimization code style cleanup tend oneliner statements resulting line small less characters onelinered particular statement argue harder read line personal preference think fine asis", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "jashkenas chance discussion", "d": "10/2014"}, {"body": "sure need take look first", "d": "10/2014"}, {"body": "requirebin reproduces bug", "d": "10/2014"}, {"body": "whipped failing unit test demonstrates issue", "d": "10/2014"}, {"body": "solution looks right maltewessel jmeas combine failing test fix single pr", "d": "10/2014"}, {"body": "yup update pr", "d": "10/2014"}, {"body": "closed favor", "d": "10/2014"}, {"body": "would better", "d": "10/2014"}, {"body": "record overwriting history nt necessary things like repository example require copy pasting scoped regexes backbone feels pretty gross putting router prototype would make extending router bit friendly lot less hacky feeling", "d": "10/2014"}, {"body": "working tweaking history router observation made extending history router objects stands stark contrast objects backbone classes provide numerous hooks making changes behavior two classes offer methods properties override modify work even small changes router history require copying pasting large chunks code including inscope regular expressions use never feels good guess would wager major contributing factor far know nobody made router powerful angular uirouter ember router super cool think changes classes made friendlier extend exposing regexp little step direction", "d": "10/2014"}, {"body": "braddunbar removed antipattern issues jiyinyiyong found addressed somehow imo", "d": "10/2014"}, {"body": "russplaysguitar change fairly small piece backbone would rather large breaking change care would need taken", "d": "10/2014"}, {"body": "needed feature well since model allowed collection design code differently lot situations makes sense model multiple collections feature", "d": "10/2014"}, {"body": "let move pr conversation", "d": "10/2014"}, {"body": "let say saving sensitive data frontend data needs creating ie ssn data nt returned api last digits instead want validated present creating nt want validated receive server server responds last instead full ssn validating twice specifically validating whilst setting breaks scenarios like", "d": "10/2014"}, {"body": "nt think use consistent data model", "d": "10/2014"}, {"body": "nt work though modelset validates new attributes returned server fail full validation edit saving user wtih ssn expecting ssn saved server respond still going fail validation set validates server attrs also despite model still ssn attribute attributes created understandable", "d": "10/2014"}, {"body": "like issue found backbone pretty speedy replies crazy question think consistent uses modelset nt seem like validation enabled default setting data call manually hit save called left validating saving meant originally surprising", "d": "10/2014"}, {"body": "jashkenas could pass hash method sync start new argument override backbonesync stop happening stick default behaviour wo nt break anything modify particular bit behaviour without screwing library ca nt right relies closure good make patch pr edit bullshit nt work gets called via jquery forgot", "d": "10/2014"}, {"body": "like issue found backbone pretty speedy replies crazy depends time mood got lucky think consistent uses nt think surprising still sure problem modelsave ssn modelunset ssn server response comes back sets nt see terrible", "d": "10/2014"}, {"body": "ha hear ya happening issue locally backbone validating presence ssn field creating fine locally nt exist server response set called fails validation nt update attributes server info", "d": "10/2014"}, {"body": "validation either ssn valid ssn nt exist captures actual valid state model", "d": "10/2014"}, {"body": "yeah fair enough empty string instead undefined validating frontend thanks heads man", "d": "10/2014"}, {"body": "went pretty deep rabbit hole trying figure unit tests collection mocked models ids behaving strangely unit tests collection working fine testing collectiontojson matched original mock data unit tests controller always seemed drop model would cool error thrown using id could cause problems least mention constraint documentation", "d": "10/2014"}, {"body": "doc fix would welcome want open pull", "d": "10/2014"}, {"body": "gladly see", "d": "10/2014"}, {"body": "hi problem events fired expect click event using plugin contextmenu backbone", "d": "10/2014"}, {"body": "easytab uses notation trigger display tabs notation also used backbone trigger routes click tab easytab interpreted backbone routing event error logged console design issue js error", "d": "10/2014"}, {"body": "pity issue closed backbone definitely play well partial model update seems developers dont listen users workaround", "d": "10/2014"}, {"body": "seems like users dont read docs workaround particularly bit", "d": "10/2014"}, {"body": "suspect comments except really rude one end predate support patch attribute added dec", "d": "10/2014"}, {"title": "components inside fire reverse order", "body": "seems ember triggers reverse order views contained within sure considered regression since nt know order ever guaranteed still seems strange would result calls followed would result calls followed assuming couple jsbins illustrate issue notice second list reversed ember version ember ember ember", "num": "9460", "d": "10/2014"}, {"title": "actions hash merging properly routes mixin", "body": "function actions hash route works fine including actions hash mixin deleting route moving code actions hash mixin routes action hash deleting actions hash mixin neither optimal solution button partial component triggers actions event corresponding component sends action template handlebars argument method route propagates back correct route code works correctly use mixin actions hash extend route another actions hash methods run problems get issue template ihtable showmodalshoweditinvoicemodal component showmodal function actionname record thissendaction showmodal actionname record route import ember ember import presentsmodalsmixin mixinspresentsmodals export default emberrouteextend presentsmodalsmixin actions showeditinvoicemodal function name record var lineitems recordget lineitems thissend openmodal invoicesedit record mixin import ember ember export default embermixincreate actions openmodal function name record thiscontrollerfor name set content record var modaloutletstack thisget modaloutletstack thisrender name modaloutletstack modaloutletstacklength outlet modal modaloutletstackpush name thisset modaloutletstack modaloutletstack surprisingly code works fine goes correct action nt throw error message route import ember ember import presentsmodalsmixin mixinspresentsmodals export default emberrouteextend presentsmodalsmixin mixin import ember ember export default embermixincreate actions showeditinvoicemodal function name record var lineitems recordget lineitems thissend openmodal invoicesedit record looking ember docs says make things consistent give flexibility action naming standardized around using hash called actions extending class actions defined merge actions defined subclass instance parent also support super wo nt lose flexibility approach ideas seems maybe hash nt merging properly ca nt find action actions hash route mixin actions hash clobbering maybe wierd naming conflict related ember cli odd reason", "num": "9459", "d": "10/2014"}, {"title": "issue boolean bound attributes ember", "body": "ember docs mentions use bindattr boolean value add remove specified attribute example given template isadministrator true handlebars produce following html element example produced html nt value assigned disabled attribute important particular attributes attribute tags browsers interpret differently output vs noticed recently bound attributes bound boolean values generating html like latter attribute given value name attribute example found jsfiddle selected attribute screen shows chrome safari edit failed notice ember result blue displayed instead red think thrown fact clearing value attribute caused right option displayed", "num": "9457", "d": "10/2014"}, {"title": "ember breaks component classnamebindings attributebindings", "body": "ember following code results element ember results element instead html foobar class fromtemplate check classnames fromclass fromtemplate reduced test case jsbin jsbin", "num": "9455", "d": "10/2014"}, {"title": "notifypropertychange makes dshasmany dsbelongsto properties null", "body": "call notifypropertychange property dshasmany dsbelongsto forces property null obviously bug eg foo dsbelongsto bar thisnotifypropertychange foo force foo null", "num": "9453", "d": "10/2014"}, {"title": "yuidoc generation broken", "body": "neither seem work moment command never completes causing autobuild publishing fail find json file cibernox tackle", "num": "9450", "d": "10/2014"}, {"title": "rendered template placed wrong place", "body": "source code define template div div gt script typetextxhandlebars gt someone helloafter rendered html becomes hello someone", "num": "9449", "d": "10/2014"}, {"title": "block triggering undesired computed property", "body": "template use block depends flag model false render basic html true render computed property model array case use also linkto template point route different model problem model changes model false flag computed property still triggered expected accessing property true part block reproduced problem js bin best make clear selfexplanatory would also like take opportunity thank emberjs wonderful team really making world better place thanks", "num": "9448", "d": "10/2014"}, {"title": "strange error buildiesafedom passing number directly variable", "body": "hey folks sure bug really strange edge case essentially case passing number directly non escaped handlebars yes clearly human error completely lost one sensible error message also results google fearful nt know anything done happy help debugging needs", "num": "9445", "d": "10/2014"}, {"title": "doc update deleting records update view", "body": "exactly sure docs go would wanted see something deleting records background quite new ember still spent last two hours long day trying figure deleted record view nt updating view panel template shows recent comment declared popup show comments functionality delete individually delete working would disappear list using persisting using looked ember plugin chrome data section sure enough record getting deleted nt view updating breakdown done google search everything could think finally somehow saw post deep interwebs said something property array might changing array almost bypassed thought well array changing removing one whole object kicks threw like know worked view updated know many read shake head ignorance newbie ember amateur javascript heavily rely docs feel like might somewhere appropriate put something effect deleting record object computed property relies make sure watching record whole object someone knows something like go happy pr maybe info already docs shape form takes several hours figure maybe obvious enough maybe mine edge case nt happen often still love ember", "num": "9443", "d": "10/2014"}, {"title": "potential jsc points concern", "body": "apple needs fix would consider high risk x x x x x would consider low risk following likely problem creating prototype still often use would likely prefer wait ones cause issues wild cc rwjblue", "num": "9441", "d": "10/2014"}, {"title": "property bindings settable properties component nt behave expected", "body": "settable property component depends another property properties set handlebars binding setter runs old value never gets triggered changes", "num": "9440", "d": "10/2014"}, {"title": "ember embermerge error mandatorysetter enabled", "body": "hey saw issue performing partial updates emberdata recreated experiencing using emberobject jsfiddle encountering performing partial update emberdata model already exists issue originates update jsfiddle use emberdata please let know relevant console output debug debug ember debug handlebars debug jquery debug uncaught error error assertion failed must use emberset set property lt unknown mixin gt", "num": "9437", "d": "10/2014"}, {"title": "performing differently", "body": "tested emberselect good bad ugly sometimes used old html selects use render last item selected rather first", "num": "9436", "d": "10/2014"}, {"title": "performance problem chrome", "body": "like bring attention serious performance problem chrome ubuntu present browsers eg firefox details please look following posted discussion forum hope helps", "num": "9435", "d": "10/2014"}, {"title": "error binding meta data template", "body": "seeing error trying bind meta data template upgrading ember see jsbin removing contentmetacurrent stops error", "num": "9433", "d": "10/2014"}, {"title": "mouse hover", "body": "hello new ember want hover mouse png file transparent exist right corner x button press removed store ideas example", "num": "9432", "d": "10/2014"}, {"title": "provide custom optionsdata object template", "body": "hi tried add formatjs ember app uses store messages cf providing object template seams impossible defines imagine clean integration", "num": "9431", "d": "10/2014"}, {"title": "broken ember", "body": "application shows ie quit unexpectedly ember problem look", "num": "9430", "d": "10/2014"}, {"title": "error removeobject store unloadall", "body": "upgraded ember get error try unloadall route problem occurs ember tries remove hasmany array record happens revisit record", "num": "9428", "d": "10/2014"}, {"title": "passing view instance template view helper fails", "body": "passing view instance view helper worked fine stopped working helper refactor fails logs message strange method class method called anywhere seems like helper nt identify properly instance name class", "num": "9427", "d": "10/2014"}, {"title": "overriding attribute assert", "body": "see jsbin clicking button logs nothing console change script tag reference emberjs build console output appears button click seems bad", "num": "9424", "d": "10/2014"}, {"title": "setting meta computed property replaces existing meta", "body": "currently possible add meta data computed property uses meta example creating properties ember data using dsattrdsbelongstodshasmany uses meta therefore available application also use issue specific ember data rather ember limitation current computed property api simply replaces meta provided argument use case simply needing track additional property specific meta data properties dynamically created using ember data also happens use meta currently must access directly cp set meta data evil given api solution currently would like rectify situation via pr allows merging cp meta data two obvious approaches use merge meta data instead replacing current api remove keys approach add accessor returns allow caller manipulate required prefer option preference consensus change accepted", "num": "9423", "d": "10/2014"}, {"title": "broken api emberobserver", "body": "could something like seems like list arguments passed callback looks like mention breaking change release notes sure understand point changing api plus lost valuable argument could used perform cleanup previously assigned value", "num": "9422", "d": "10/2014"}, {"title": "expose api get views bounding rect", "body": "used ember inspector cc teddyzeenny", "num": "9419", "d": "10/2014"}, {"title": "assert classnamebindings used tagless view", "body": "twokul", "num": "9418", "d": "10/2014"}, {"title": "classnamebindings nt get merged classnames tagless component", "body": "linked bin works nt work specifically classes div believe working recently ember realize nt common use case changed app accordingly thought file anyway mixonic said emberjsdev likely bug", "num": "9417", "d": "10/2014"}, {"title": "issue", "body": "property based setting value array dependent causes computed property automatically change reflect new array seems always provide empty array back jsbin working change ember script tag point beta build instead release see working", "num": "9413", "d": "10/2014"}, {"title": "order arguments switched ember", "body": "previously calling embermap invoked callback per item map looked like looks like order arguments switched", "num": "9412", "d": "10/2014"}, {"title": "ensure embercreate used remove strict mode", "body": "stopgap solution reported need move calls use also ensure module resides strict mode working changes wanted ensure included milestone nt forget", "num": "9403", "d": "10/2014"}, {"title": "debug advanced debugging install ember inspector", "body": "although installed ember inspector still get following message console every time start app little debugging see undefined following ifstatement google chrome ubuntu version minor issue still eyesore every time fire inspector", "num": "9399", "d": "10/2014"}, {"title": "npm run build failing node", "body": "using node ember build usersstocknemberjs ember build environment production version module selfregister error module selfregister error native moduleload functionmoduleload modulerequire require object modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerequire require nvm install already installed using node macbookprodenicholas emberjs stockn npm run build ember build usersstocknemberjs ember build environment production version built project successfully stored dist", "num": "9394", "d": "10/2014"}, {"title": "observer emberget regression beta canary", "body": "property set without setter later observed longer access via worked fails canary remove observer everything works cc kategengler", "num": "9387", "d": "10/2014"}, {"title": "performance regression ember", "body": "eviltrout looking perf regressions ember move stuff forward would like start bug shows specific regressions butchered works beta running tests looks like html bindings test worst one real world discourse seems running half speed afford upgrade much would love resolve perf regression", "num": "9381", "d": "10/2014"}, {"title": "container performing lookup checking registry resolver", "body": "referring line code latest master commit whole resolve function javascript function resolve container normalizedname var cached containerresolvecache normalizedname cached return cached var resolved containerresolver normalizedname containerregistry normalizedname containerresolvecache normalizedname resolved return resolved seems backwards nt checking registry see factory explicitly registered falling back resolver check classes whose names match according resolver naming conventions rather way around practically speaking suppose two classes application initialization code want registered would expect object called would get instance instead gets instance seems wrong specific use case want instrument services unit tests tried simply subclassing service class registering subclass named factory javascript module mediaservice tests setup function var instrumentedservice appmediaserviceextend somemethod function testspecific code overriding default application code appreset overrides nontest application initialization code registers appmediaservice service media appcontainerregister service media instrumentedservice test nt work reason outlined instead mess around resolver get behavior want seems like sort case whole point container registerlookup model missing something", "num": "9380", "d": "10/2014"}, {"title": "action within link triggering link", "body": "following handlebars triggers action link according docs without bubblesfalse triggered", "num": "9378", "d": "10/2014"}, {"title": "testing would great also log unhandled promise rejections", "body": "would likely trick", "num": "9376", "d": "10/2014"}, {"title": "minor typo textsupportjs", "body": "packagesemberhandlebarslibcontrolstextsupportjs line reads whether event guessing read whether keyup event", "num": "9373", "d": "10/2014"}, {"title": "containeroptions seems actually populate optionsfortype", "body": "populating", "num": "9371", "d": "10/2014"}, {"title": "route properties observe properties route controller", "body": "route property observes property controller never gets triggered example fiddle example expect every time oscillator toggled function observeoscillator route called never gets called", "num": "9370", "d": "10/2014"}, {"title": "emberselect nt update selection data changed", "body": "jsbin two users next name link edit opens edit form form text inputs selects names cities types choose edit item entire form perfectly substituted data shows current city type select click edit link another item selects remains previous city type also save changes trying edit item changed fields discard changes waiting answer thank", "num": "9369", "d": "10/2014"}, {"title": "handlebars inside html comments assert", "body": "others see trouble migrating due usage handlebars expressions inside html comments like previously supported results entire view fails render console error safari chrome jsfiddle demonstrating issue", "num": "9365", "d": "10/2014"}, {"title": "components blocks properties set showing", "body": "got build chain switched handlebars latest canary many components stopped working basically narrowed components used like wo nt output errors output work output leaving property elementid property work correctly also works correctly without property set view apptestblockcomponent elementid someid content view view apptestblockcomponent content view nonblock level form also works correctly without property set jsbin see", "num": "9363", "d": "10/2014"}, {"title": "dose storefind always request server", "body": "userroutejs ary time select user route always request server nt save store first successful request", "num": "9357", "d": "10/2014"}, {"title": "publish npm", "body": "seems like pieces pretty much pushed need script publish thing missing something", "num": "9354", "d": "10/2014"}, {"title": "feature request groupby computed property", "body": "many projects group collection property leaves behind alot copied code looks something like quick google search found discussion alone request hoping something like", "num": "9353", "d": "10/2014"}, {"title": "bower vs packagejson", "body": "ember previous bower install puts emberjs root bowercomponentsember however emberjs includes breaks perhaps emberjs put subdirectory like lib bower distribution", "num": "9352", "d": "10/2014"}, {"title": "pass current dom object every events", "body": "hi pass current dom object every actions events view also router controller anything since ember uses jquery manipulate dom would helpful thanks", "num": "9351", "d": "10/2014"}, {"title": "programmatic dom manipulation triggering actions", "body": "trying improve unit test coverage adding tests particular dom elements use test helper nothing happens nothing mean get triggered use jquery add click handler click event happening clicking using jquery enter text element also nt trigger actions issues seem isolated tests either meaning running application use jquery click enter text application seem notice helps us understand seems disconnect get work", "num": "9350", "d": "10/2014"}, {"title": "binding simple array values embertextfield loop broken unusable", "body": "problem encountering simple array values loop typing input field updating value immediately focussed normal behaviour also binding basic example work binding embertextfield helper seems like bug something wrong", "num": "9349", "d": "10/2014"}, {"title": "ember array render", "body": "created like databinding works pretty well use array updates html use could fix ember stackoverflow", "num": "9348", "d": "10/2014"}, {"title": "notfounderror failed execute insertbefore node", "body": "get error regular basis rather unpredictable mostly running testem using beta everything ok anyone pointers look", "num": "9347", "d": "10/2014"}, {"title": "ember templates properly preserving white space ember", "body": "upgrading ember beta snippet longer outputting proper white space filteruser john doe output johndoe john doe used computed property filteruserfullname instead would properly display white space john doe", "num": "9346", "d": "10/2014"}, {"title": "unable test apps production builds", "body": "embertesting longer included wonderful reallife great testing production build application ember cli ability run tests production via worked perfectly likely need custom file injected ember application tests started running tests production", "num": "9345", "d": "10/2014"}, {"title": "subclass", "body": "hi great work emberjs even though hard understand angular love features would like ask print console gives string ex sample emberrouteextend consolelog sample prints subclass emberroute consolelog typeof sample function explain please", "num": "9341", "d": "10/2014"}, {"title": "ember crashes used along prototypejs could third party js", "body": "embedding ember app another environment prototypejs also used getting errors console ember application created emberapplicationcreate read documentation emberjs disabling prototype extensions tried steps suggested errors persists ember application crashes jsbin link please suggest possible solution note might repeated question since beginner confuses lot", "num": "9339", "d": "10/2014"}, {"title": "redirect hook parent route fired transition \u0430 child route", "body": "hi version emberjs fixed bugfix nt fire redirect parent routes transitions one child route another fix causes error following situation jsbin route posts declared redirect child route post using hook redirect first transition posts using navigation redirect works correctly however use navigation go back posts expected redirect happen method redirect called", "num": "9338", "d": "10/2014"}, {"title": "properties getting sync canary", "body": "updating property nt seem reflected example input display bound controller property stay sync clicking clear simply updates property nt affect input jsbin latest canary works latest beta mmun might stream related oddness", "num": "9337", "d": "10/2014"}, {"title": "bring back emberhandlebarsget", "body": "removed believe since marked private see docs try bring back number tools using links", "num": "9336", "d": "10/2014"}, {"title": "collectionview trigger observers parentview", "body": "view described following template handlebars input valueviewinputvalue view viewnestedview happens observer inputvalue never fired instantiate view nested collectionview weird thing observer triggered get parentview init method ie", "num": "9335", "d": "10/2014"}, {"title": "profile url sign", "body": "wondering way fix router profile url mimic way medium uses sign example tried couple solutions earlier nt able work", "num": "9334", "d": "10/2014"}, {"title": "unnecessarily removes readd items dependent key changes", "body": "using defined causes contents unnecessarily removed readded dependent key changes even item continues pass filter jsbin illustrates problem use case simply shown jsbin views animate dependent filter key changing often additionally particular views complex prefer frequently rerendering little bit digging discovered issue lies believe reducedcomputed enough knowledge know operation necessary however seems like way operation without unnecessary rerendering opening alternatives even ones nt use", "num": "9331", "d": "10/2014"}, {"title": "emberset even though enumerable", "body": "jsbin since uses expect valid property passed enumerate however get side note let know file separate issue trying create jsbin found causes error returned route hook probably due ember trying generateuse use return set model", "num": "9330", "d": "10/2014"}, {"title": "ember testing included emberprodjs emberminjs builds since", "body": "believe production builds need small possible need embertesting part production build look search embertesting search embertesting results cheers", "num": "9329", "d": "10/2014"}, {"title": "lack innerhtml support causes problems table rendering", "body": "table tr td fail render read issue poor support innerhtml several tags tested using jsbin latest version ember latest beta canary using vm jsbin url testing anybody idea resolved anybody else run htmlbars resolve visualjeff", "num": "9319", "d": "10/2014"}, {"title": "access model outside scope", "body": "hi need get access controller model script run outside ember scope also possible send actions way please give examples thanks", "num": "9317", "d": "10/2014"}, {"title": "handlebars helper duplicates content toggling visibility", "body": "simple template hbs isfoovisible foo simple controller expected result show hide foo many times want disappear reappear actual result gets duplicated every time foo shown metamorph tags keep nesting inside previous tag gets crazy foo shown html click show foo html foo click hide foo html foo show foo html foo foo hide foo html foo foo show foo html foo foo foo created jsbin demonstrating issue", "num": "9315", "d": "10/2014"}, {"title": "reducecomputed recomputes everything single change dependant property", "body": "please see following jsbin reproduces issue open console toggle checkbox see first calls effectively throws away result calls times thus recomputing based items array nt seem expected behaviour match api design appears intended minimize computation chance expected behaviour simplified instead mirror avoid current complex api would also like note clear documentation happens dependent property changes something else said nt callback jsbin example best guess something seems work question marks drove start logging callbacks occur discovered issue", "num": "9313", "d": "10/2014"}, {"title": "parent cancels submit events", "body": "appears using action prevent submit actions happening forms really understand possible jsbin cookbook implementation modal slightly changed use form nest modal inside overlay div truly puzzles event never triggered form even binding console ie missing something bug", "num": "9310", "d": "10/2014"}, {"title": "ember gt uncaught typeerror read property parentnode null", "body": "embercli application upgrading get error application start uncaught typeerror read property parentnode null function debug ember debug ember data debug handlebars debug jquery huge project tried isolate problem luck", "num": "9307", "d": "10/2014"}, {"title": "issue using inside references parent component context", "body": "use helper inside component try use helper references context component inside value condition passed helper rendered html example handlebars tags viewcanremove value rendered html instead contents block jsbin reproduces issue", "num": "9304", "d": "10/2014"}, {"title": "feature flag set true build canary ember errorwarn", "body": "", "num": "9302", "d": "10/2014"}, {"title": "stefan please fix map test failures masterbeta", "body": "", "num": "9301", "d": "10/2014"}, {"title": "emberenumerableutilsindexesof design broken returns", "body": "returns array matching indexes matches obviously would return empty array right returns array single element makes impossible simple search see matches instead examine array make sure first element api supposed return array matches matches would seem array empty minimum design changed reasons backward compatibility documentation highlight lessthanoptimal behavior", "num": "9300", "d": "10/2014"}, {"title": "embercomponent attributebindings nt work namespaced attributes eg xlink href", "body": "following code produces undesired results js export default embercomponentextend tagname image attributebindings src xlink href x width height src mericuhflaggif ends setting rather suggested workaround ebryn use observer manually set fine", "num": "9298", "d": "10/2014"}, {"title": "unable sustain query parameters linux", "body": "linux browsers remove query string placed url hash requesting open cutting query string hash issue observed ubuntu current stable releases chrome firefox possible solution might move query string location hash", "num": "9296", "d": "10/2014"}, {"title": "binding stop working select multipe true", "body": "select multipefalse works change multipletrue bindings stop working app emberapplicationcreate approutermap function put routes appindexcontroller emberobjectcontrollerextend selectedserviceflavours embercomputeddefaultto serviceflavoursfirstobjectmyvalue serviceflavours function return name myvalue name myvalue name myvalue property select", "num": "9295", "d": "10/2014"}, {"title": "route transition nt work working modal", "body": "working modal using tutorial ember website difference trying make modal template outlet another template make reusable opened modal rendered modal outlet exactly try make transition another route nt work write default behavior rendertemplate target route works commented jsbin bug handled thisrender properly", "num": "9294", "d": "10/2014"}, {"title": "computed property model obfuscates view", "body": "refactoring use views deprecation warning change made views working fine particular case failing strange message uncaught error assertion failed looking xx xx xx view lt namespace namespace could found turns computed property somewhat similar name property picked template rendering view name tried removing quotes luck could say problem code view called property name would agree names different enough one suffix view starts uppercase accepted practice ember property starts lowercase also accepted practice solve problem without real justification workaround ember quirks renamed property maybe safe way go properties seems work", "num": "9293", "d": "10/2014"}, {"title": "packagesembermetalliblibrariesjs nt idiomatic js", "body": "packagesembermetalliblibrariesjs likely js function libraries thislibraries librariesprototype etc export default libraries", "num": "9291", "d": "10/2014"}, {"title": "default readonly cp", "body": "add writable mode put ember cp readonly default update internals use writable correctly make test suite also run flag likely use feature flag tech currently flag", "num": "9290", "d": "10/2014"}, {"title": "remove emberenvcpdefaultcacheable old", "body": "", "num": "9289", "d": "10/2014"}, {"title": "backburner needs updated", "body": "nt chance yet doit evening noone time tl dr changes reduce cost trying flush empty queues commit combine queueflush deferredqueuesflush commit x update bb ember x confirm embers tests still correctly pass", "num": "9287", "d": "10/2014"}, {"title": "render helper dynamic view names", "body": "im ember seems code render helper explicitly causing reject googling reading source check happening created new helper simply forcing values javascript emhandlebarsregisterboundhelper renderdynamicview function name model options optionstypes string id everything seems working exactly expected trivial hack must something missing guides source seem understand render helper even rejecting begin anyone help understand", "num": "9286", "d": "10/2014"}, {"title": "ability avoid creating dummy parent div class emberview", "body": "ember enforces creating parent div created components view", "num": "9285", "d": "10/2014"}, {"title": "shared repository internal ember testing helpers", "body": "eg friends super nice could emberdev like bower repository testing helpers stop cheating p copying ember data nt owner rights organization somebody could make repository add release team comitters pretty cool", "num": "9283", "d": "10/2014"}, {"title": "create pair bound properties across two disconnected objects emberbind", "body": "follow seems like op question properly understood believe valid use cases suggesting let rephrase right api following property paths relative api lacks flexibility two object instances create binding using following scenarios exists path globally accessible instance eg singleton two objects apparent connection create pair bound properties directly like api would javascript emberbind object objfrom string pathfrom object objto string pathto var emobjectcreate foo var emobjectcreate bar embind would first define property either one reference end pair ie var emobjectcreate foo var emobjectcreate bar embind opinion elegant pollutes hash good reason", "num": "9281", "d": "10/2014"}, {"title": "types arguments passed bound handlebars helpers changed", "body": "types arguments passed bound handlebars helpers changed jsbin demonstrating difference alternate commenting versions", "num": "9280", "d": "10/2014"}, {"title": "enumberable invoke throw iscallable", "body": "likely raise foo available iscallable without merely hides mega bugs clearly would breaking change though", "num": "9279", "d": "10/2014"}, {"title": "index range error using multiple sort properties", "body": "nasty one issue occurs inside removeitem array computed callback finding correct index item whose observed sort property changes binary search return bad index due internal order function properly reporting item order happen multiple sort properties one changes previous values changed sort property equivalent change moves item side midpoint array due change introduced commit sort property looked item without problem instance created meta object obviously contain unchanged sort properties means unchanged property looked directly line uses comparison instead actual sort property jsbin issue bugfix commit corrects still valid see ways address new one check sort property proxy object accessing directly overhead simple add sort properties creating search proxy object probably overhead previous solution still simple address original issue directly somehow sure possible since would likely require overriding stop using binary search altogether use assume done originally performance large lists probably maintain index mapping objects index never even needs found also assume memory reasons mmpestorich hjdivad thoughts also possibly related", "num": "9278", "d": "10/2014"}, {"title": "calling set computed property deletes binding", "body": "amazed never seen guess deliberate seems unexpected call property permanently overwrites computed property obviously get around using computed property interestingly omit argument computed property calling set overwrites property think unexpected would much clearer threw exception rather permanently diverging intended behaviour", "num": "9276", "d": "10/2014"}, {"title": "ember maximum call stack size exceeded ember command", "body": "unfortunately still bit new emberjs javascript general issue started project ember working great bit learning curve things going fine hit point upgrade version ember embercli working followed steps one upgrading new version ember brings us version followed steps directory ember project usual enter command ember make sure running correct version get version awesome got right version maximum call stack size exceeded hmm first certain something project first attempt tried ember init run new project blueprint project directory also tells maximum call stack size exceeded fails considering project working fine updated version ember using certain something project case feel like simply entering command ember still work normal cause error details needed somewhere specific please let know provide also relevant even ember v reports back correct version followed maximum call stack size exceeded also relevant working windows", "num": "9273", "d": "10/2014"}, {"title": "remapped query params correct url model hook", "body": "please see following jsbin replication problem experiencing app building remapping query parameters get pushed url correctly ie snakecased version however model hook receives camelcased version problem model hook pass parameters like hit api snakecased params like url right written hacky code remap correct overrides provided controller expected behaviour", "num": "9270", "d": "10/2014"}, {"title": "extendprototypes false default", "body": "currently ember extends builtin prototypes amp default although ember nt require extensions disabled enabled default tend stay way evident sites like vine twitch nbcnews amp discourse using default settings problem adding methods like amp increases likelihood used cause problemsroadblocks future builtin language extensions example tried add behaved different way ember newer environments would get builtin version older would get ember causing inconsistency increased possibility breaking thing seen recently mootools happened even", "num": "9269", "d": "10/2014"}, {"title": "routerhandleurl nt work rooturl set router", "body": "machty kinda confirmed expected behavior", "num": "9268", "d": "10/2014"}, {"title": "createrecord updating list queryparams present", "body": "list shows users name taken export default emberrouteextend queryparams q refreshmodel true setup like action quickly adds one record user store problem executing action list nt update however changed model hook works perfectly nt know bug done something wrong", "num": "9267", "d": "10/2014"}, {"title": "unconsumed computed properties triggering observers", "body": "sure bug intentional change documentation nt updated broke bunch code updated ember figured point either fixed documentation updated explains unconsumed computed properties trigger observers however appears ember nt true certain computed properties namely maybe others tested consider following script snippet run ember produces console output run ember produces computed properties unconsumed alias oneway readonly computed properties triggered observers bool manuallyspecified computed properties perhaps desired documentation needs updating really intentional would inconsistent certain computed properties trigger observers unconsumed others", "num": "9265", "d": "10/2014"}, {"title": "using parent context helper changes context entire block", "body": "given following template model expect output instead appears ember handlebars changing context within helper block used reference parent context jsbins ember handlebar output normal handlebars output", "num": "9263", "d": "10/2014"}, {"title": "setting dsmodel array property defaultvalue caches property", "body": "model property defined follows subsequent instances model initialise contents held last loaded model makes properties defined way behave singleton strings booleans seem behave properly", "num": "9260", "d": "10/2014"}, {"title": "deferred readiness", "body": "helped someone irc rather annoying track issue attempting run simple integration test like javascript module acceptance channels setup function app startapp teardown function emberrun app appdestroy test page contents function expect visit andthen function ok true got unfortunately initializer called wait application ready async initializer case need one following error advances readiness application ready state cause wait application ready", "num": "9259", "d": "10/2014"}, {"title": "typo docs", "body": "small typo emberrun documentation page invokes passed targetmethod optional arguments specified period time", "num": "5678", "d": "10/2014"}, {"title": "update back burner", "body": "fixed regression least bug fix beta might release think merely beta though nt time upgrade ember today client work maybe someone else time noone likely able late tonight tomorrow", "num": "5674", "d": "10/2014"}, {"title": "queryparams nt work lazy loaded code", "body": "hi queryparams simply nt work lazy loaded code shown jsbin step backwards one previously queryparams implementation code worked fine nt remember flag enable sorry get way making ember modular guess something needs fixed meanwhile possible workaround hint helpful thanks", "num": "5672", "d": "10/2014"}, {"title": "ember enumerable align array contains", "body": "moment ember contains match values support like array contains cause inconsistency ember adds", "num": "5670", "d": "10/2014"}, {"body": "ordering nt documented guaranteed nt technically bug defer mmun krisselden", "d": "10/2014"}, {"body": "talked briefly capturelike phase called top bottom clear changed nt know old code well new render much easier reason", "d": "10/2014"}, {"body": "change documented changelog release blog post regressionbug fixed", "d": "10/2014"}, {"body": "duplicate scent", "d": "10/2014"}, {"body": "ah whoops thank sir fast usual", "d": "10/2014"}, {"body": "duplicate fixed providing helpful assertion released hopefully next days", "d": "10/2014"}, {"body": "updated jsbin current release build showing assertion assertion failed use class attributebinding use classnamebindings instead", "d": "10/2014"}, {"body": "sorry dupe thanks info assertion", "d": "10/2014"}, {"body": "sounds like bug also calling explicitly", "d": "10/2014"}, {"body": "general via plain continuata provide jsbin reproduces bug", "d": "10/2014"}, {"body": "creating multilevel validation mixin observes triggers validation contained models forcing notification validation triggered simple workaround instance trigger validation directly notifypropertychange behaviour obviously correct raising", "d": "10/2014"}, {"body": "continuata suspect emberdata issue please also provide failing test emberjsjsbincom", "d": "10/2014"}, {"body": "rwjblue stefanpenner give minutes ember exactly quick get running scratch", "d": "10/2014"}, {"body": "continuata base jsbin ember data", "d": "10/2014"}, {"body": "rwjblue thanks post replicated", "d": "10/2014"}, {"body": "rwjblue jsbin nt work throws errors typeerror read property create undefined", "d": "10/2014"}, {"body": "continuata updated also opened update jsbin", "d": "10/2014"}, {"body": "rwjblue ca nt reproduce jsbin investigate post could version using", "d": "10/2014"}, {"body": "temparary fix need figure fix going", "d": "10/2014"}, {"body": "template positioning nt related place script tags please read ember oficial guides great", "d": "10/2014"}, {"body": "miguelcobain thks ur reply way place rendered template specified div", "d": "10/2014"}, {"body": "could answer afraid missing important points ember control place application main template rest hierarchy must laid using ember conventions really nt something explain also really respecting guidelines contributing places like stack overflow ember discuss better kind questions final advise please follow ember guides really great read bit questions soon disappear believe", "d": "10/2014"}, {"body": "agreed miguelcobain try keep issue tracker focused bugs ember sorts questions asked stackoverflow andor irc", "d": "10/2014"}, {"body": "need convert buffer string pushed nt able add numbers render buffer", "d": "10/2014"}, {"body": "nt ensure string internally convert", "d": "10/2014"}, {"body": "instructs listener detect array replaced content changed suspect need exists otherwise ambiguity watching arrays", "d": "10/2014"}, {"body": "way preferred version prone failure hacky happens work regardless stefanpenner think belongs docs somewhere explanation computed property watch contents object rather object whole", "d": "10/2014"}, {"body": "jdhines would surprised nt docs imagine hard search ca nt find find nt clear lets fix open appropriate pr gladly iterate wording solution specification nt actually care merely care dk dependent key", "d": "10/2014"}, {"body": "accurate solution", "d": "10/2014"}, {"body": "seems pretty straightforward well little clearer want watch things thinking section page computed properties object since examples observing singular fields", "d": "10/2014"}, {"body": "jdhines nt actually want watch things merely want know changes correct", "d": "10/2014"}, {"body": "stefanpenner yes guess correct use case since showing firstobject thinking along lines recalculate time length changes", "d": "10/2014"}, {"body": "yes remember things nt change length mutate place need use", "d": "10/2014"}, {"body": "docs nt exist think add seems belong website repo guide", "d": "10/2014"}, {"body": "fix high risk items", "d": "10/2014"}, {"body": "rwjblue could transform issue metatracking issue wanted", "d": "10/2014"}, {"body": "stefanpenner sounds good", "d": "10/2014"}, {"body": "tired look fresh eyes tomorrow appears work correctly update cp following output might wondering nt invalidate since declares dependency also expected behavior values passed via component property provided object initialization time means basically js emberobjectcreate init function thisset inconsistent foo inconsistentdidchange function nt fire due values introduced initialization observes inconsistent properties set initialization time emit change events prime value changes postinit emit change events nolonger prime values reason consistency performance want clarification go detail", "d": "10/2014"}, {"body": "nt want claim value passed value actually want current value real code value depends last set value stored current value fuller version cp output want correct happens simpler case", "d": "10/2014"}, {"body": "sohumb sorry hit enter expected expanded response explain expected behavior tl dr values provided initialization propagate change events object becomes observable initialization", "d": "10/2014"}, {"body": "right makes sense properties set initialization time would nt fire change events expect values see computed properties also reliably said initialized values bug set sees invalid value value according ember model never valid", "d": "10/2014"}, {"body": "sohumb setting initialization thus change events change post render see change events means nt invalidate due initialized value different value prototype", "d": "10/2014"}, {"body": "expecting change events expecting value seen inside initialising valid", "d": "10/2014"}, {"body": "expecting value inconsistent seen inside settable valid explicitly setting initialization causes cached value consumed cache read never called invalidated cache containing purged listeners notified consumed invoked value expect returned", "d": "10/2014"}, {"body": "oh hmm", "d": "10/2014"}, {"body": "cached value per result run time invalid value", "d": "10/2014"}, {"body": "ok bad gone sleep p said still seems like totally correct behavior time settable set return value cached yet set reads prototype", "d": "10/2014"}, {"body": "vs yield two different results order dictates setting order although unsure order documented guaranteed remain today set first read updated set first read reason hungup change events assuming thought setting would invalidate causing emit consumer would force cp recompute rereading property would value expect computed properties object initialization work like explicitly prevent churn", "d": "10/2014"}, {"body": "ultimately likely guarantee ordering component properties sets believe numeric keys abide implied insertion based ordering document would nervous rely mmun thoughts component property ordering continuing preserved way component initializations", "d": "10/2014"}, {"body": "hey going weigh issue stefanpenner late please come back morning", "d": "10/2014"}, {"body": "writing english domain words mindfuck", "d": "10/2014"}, {"body": "concern pushing subtle bug consumers component ie make sure put template using component else totally work possible work around using pushing bug component author may never realise issue usage properties right order also nt like lexical order significant obvious significant template one possible solution check dependant keys properties set constructor make sure set order works", "d": "10/2014"}, {"body": "would like see realworld example problem nt believe exists would like frame potential solutions around concrete examples agree ordering matters frustrating case component author subjected consumers implicit ordering dependency believe one assume system resolve implicit ordering lt strongly suspect real example restructured alleviate constraint provided example lacks context know ca nt changed", "d": "10/2014"}, {"body": "im going head sleep leave concrete example provide feedback inpractice way cp tricky case actually relying collaborator expands problem domain inall reality authored explicitly throw ordering violated believe primary failure scenario initialization point time check could guard throw accordingly believe failure normalized later life cycle dk would cause invalidate thereby informing consumers reconsume yielding expected value ultimately refactoring remove dependency strongly considered lets see examples look like would great derive better pattern mitigate class problem", "d": "10/2014"}, {"body": "okay concrete example let discuss tomorrow", "d": "10/2014"}, {"body": "fyi related fact component pass options object create time properties set order provided one possible solution check dependant keys properties set constructor make sure set order works theory good idea would likely negatively impact performance calls unsure", "d": "10/2014"}, {"body": "given example pretty sure want cp downstream consume allows data settle final answer extracted", "d": "10/2014"}, {"body": "aexmachina suggest using init hook properties must set order believe implying static values always set cps since cps dependent keys nt robust solution race condition grappling must know values two properties cps static props think thing use fairly certain way remove racewhoisfirst problem entirely start thinking examples two cps instead cp static prop see mean", "d": "10/2014"}, {"body": "nt robust solution race condition grappling also would change refactor internals class moving raw properties cp cps row properties seems ok result problem mentioned properties refactored cp", "d": "10/2014"}, {"body": "think settled bug using resolve sorts race conditions path forward", "d": "10/2014"}, {"body": "observer would also work well many use cases better explaining property differs function takes argument", "d": "10/2014"}, {"body": "okay agree although pretty sure sohumb bristle trading performance correctness case problem solved using another computed property definitely subtle gotcha though nt know communicated anywhere writing ember code years nt know lexical order significant object initialization long avoid issue consumers happy", "d": "10/2014"}, {"body": "nt even think trading performance correctness think implemented efficiently merely simpler model nt rewrite ordering", "d": "10/2014"}, {"body": "clear recommend using recommend using function runs properties set example jsbin rewritten aexmachina think dependent keys like roots property property set serialize dependent keys key like disabled modified set must question information expressed setting draggable gone asked draggable value setting would always get answer properly written computed property answer always yes well pretty much refactored example property dependent keys upon init disabled value changes proactively set draggable better expresses want happen relationship properties oneway make sense property setters method calls caching rules use make efficient specific meaning start relying sideeffects value properties setter meaning starts violated sorry wish could express thinking bit better hope helps", "d": "10/2014"}, {"body": "also clear root issue nothing creationtime properties imagine app let toggle draggable disabled would behave differently depending order user clicked buttons", "d": "10/2014"}, {"body": "imho optimal solution use another computed property also mixonic issue indeed caused createiontime properties fact ember nt notify changes properties initialization think totally fine original property entirely consistent although bit strange setting true getting false long notified changes", "d": "10/2014"}, {"body": "imho optimal solution use another computed property", "d": "10/2014"}, {"body": "omarestrella correct objects observed properties bound templates regular property setter based setter set value using object observed must use suggest using", "d": "10/2014"}, {"body": "mixonic ember data jsbin mostly repro issue", "d": "10/2014"}, {"body": "understand behavior technically correct issue used store pushes without taking account partial use case stands call partial loads", "d": "10/2014"}, {"body": "gotcha omarestrella emberdata issue ed using incorrectly", "d": "10/2014"}, {"body": "okay great thanks report issue emberdata", "d": "10/2014"}, {"body": "mixonic nt believe bug ember data merges private intended observable", "d": "10/2014"}, {"body": "last item selected canary working properly", "d": "10/2014"}, {"body": "seems like regression", "d": "10/2014"}, {"body": "yeah need know going permanent adjust needed qa group caught quick original message robert jackson sent pm emberjsemberjs cc hal diggs subject emberjs performing differently seems like regression reply email directly view github context issue github action type viewaction url issue", "d": "10/2014"}, {"body": "haldiggs jsbin pasted show works properly canarymaster builds work properly release permanent regression added issue milestone would like track fix days possible", "d": "10/2014"}, {"body": "thanks much usual team ember shows professional side wed oct pm robert jackson notifications githubcom wrote haldiggs jsbin pasted show works properly canarymaster builds work properly release permanent regression added issue milestone would like track fix days possible reply email directly view github hal diggs non sibi sed patriae self country half communications listening ca nt listen mouth", "d": "10/2014"}, {"body": "lazy addition options dom cause issue", "d": "10/2014"}, {"body": "also occurs ff", "d": "10/2014"}, {"body": "safari", "d": "10/2014"}, {"body": "turns canary nt fixed issue canary build publishing introduced fixed last night means commit broke following list likely labeled", "d": "10/2014"}, {"body": "rwjblue mixonic looking", "d": "10/2014"}, {"body": "commit seems causing grief", "d": "10/2014"}, {"body": "points following list commits htmlbars", "d": "10/2014"}, {"body": "almost certainly", "d": "10/2014"}, {"body": "mixonic rwjblue pr fix issue upstream sadly lack context continue looking try understand pr merged pr ember update sha", "d": "10/2014"}, {"body": "twokul pr looks right type variable changed silently succeeding", "d": "10/2014"}, {"body": "sorry reopen githubcomemberjsdata get appropriate eyes", "d": "10/2014"}, {"body": "done good luck", "d": "10/2014"}, {"body": "number issues js bin sure actually error much oversight return array model trying access property model single item array additionally model nt property query performing attempting match string property model also present", "d": "10/2014"}, {"body": "runspired accessing meta property array worked used pagination makes sense able access meta properties array scenario also define property meta model see", "d": "10/2014"}, {"body": "ah see sure able access way believe need access meta findquery via", "d": "10/2014"}, {"body": "ember working ember broken", "d": "10/2014"}, {"body": "charlieridley right back well documentation used able fetch metadata fact open console run store hand still works something decidedly wrong internals ember computed property autoupdating templates broken", "d": "10/2014"}, {"body": "foxnewsnetwork put hack make work bind metadata template", "d": "10/2014"}, {"body": "similar jsbin showing failure storemetadatafor seems show whenever template directly renders something metadata object nt problem components paginator interacting metadata also charlieridley works great temporary solution thanks", "d": "10/2014"}, {"body": "folks definitely looks like emberdata issue reason ca nt move discussion", "d": "10/2014"}, {"body": "mixonic could emberdata think comment foxnewsnetwork considered something decidedly wrong internals ember computed property autoupdating templates broken meta property accessible controller template would suggests might fact related changes", "d": "10/2014"}, {"body": "definitely bug mandatory setter code working tracking things teaser", "d": "10/2014"}, {"body": "mixonic working fix screenshot pasted", "d": "10/2014"}, {"body": "ember observers seem handle objects created well", "d": "10/2014"}, {"body": "mixonic objects observed used exclusively fastsafe internals actually want support observing objects", "d": "10/2014"}, {"body": "stefanpenner issue nt directly observer system mandatorysetter calling object also pretty common use ember data meta tracking things like current page max page would create observer would used template", "d": "10/2014"}, {"body": "think impedence mismatch ember considers meta object internals ember data considers meta hypermedia perspective current page find info etc like rwjblue brought", "d": "10/2014"}, {"body": "fivetanley agreed meant ember data meta", "d": "10/2014"}, {"body": "ember data meta tracking things like current page max page could assume null prototypes non observable opt observer treat unbound nervous pollute objects ember meta required observations", "d": "10/2014"}, {"body": "appears benefit null prototype neither internal needing safe fast cache misses restore back pojo", "d": "10/2014"}, {"body": "think default enumerable true based object presume answer true ca nt get tonight morning tomorrow tests stefanpenner agree probably wrong ed return kind object also support displaying still fix", "d": "10/2014"}, {"body": "mixonic seems like derived separate fixes remains want enable observing objects suspect yes although unsure want pollute meta suspect although feels strange", "d": "10/2014"}, {"body": "belongs stack overflow discuss please ask question want come back leave link question", "d": "10/2014"}, {"body": "thodwris please feel free link back issue opened discuss post", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "general would like nice story formatjs need dig literature see actually done know integrate better", "d": "10/2014"}, {"body": "michaelklishin please fairly certain ember tests passing checked revisions release commit tests could missing something", "d": "10/2014"}, {"body": "good hear thanks keeping us posted", "d": "10/2014"}, {"body": "bad news see attachment", "d": "10/2014"}, {"body": "please share repro simple tests seem work properly", "d": "10/2014"}, {"body": "similar described jamesreggio end", "d": "10/2014"}, {"body": "michaelvdheeren would love repo based starterkit simplicity pull test also comment talking using ember describing possible ember issue directly", "d": "10/2014"}, {"body": "indeed including nt problems", "d": "10/2014"}, {"body": "michaelvdheeren yup laying blame need reproduction able triage fix", "d": "10/2014"}, {"body": "seems call unloadall related records well", "d": "10/2014"}, {"body": "ablanco provide small jsbin demonstrates issue", "d": "10/2014"}, {"body": "code jsbin code crashes remove second view helper template render properly second view helper one trying load view instance instead view class line removing line everything works line template ember crashes nt recognize view instance change line loading ember order load ember work fine even second view helper template seems like regression ember", "d": "10/2014"}, {"body": "smells like regression", "d": "10/2014"}, {"body": "agreed", "d": "10/2014"}, {"body": "fixed stable branch still needs updates streamified master branch closing", "d": "10/2014"}, {"body": "thanks quick fix", "d": "10/2014"}, {"body": "closing issue pr master pending review already fixed stable", "d": "10/2014"}, {"body": "console output appears click jsbin want action raise thissendaction need wrap action quotes assign value controller", "d": "10/2014"}, {"body": "fivetanley suspect edited jsbin stays streaming take look forked original", "d": "10/2014"}, {"body": "fivetanley easy trigger finger hoss", "d": "10/2014"}, {"body": "discussed irc issue forces classes attribute element include required somewhat surprised worked older versions think attempt restore previous imho flawed older behavior however need nice assertion tells someone done something wrong recover flagging milestone assertion", "d": "10/2014"}, {"body": "updated title reflect last comment", "d": "10/2014"}, {"body": "adds assertion", "d": "10/2014"}, {"body": "rwjblue process updating noticed regressions used pattern components component consumer pass arbitrary number es component also use internal made component api little understandable imho mistaken need instead would suggest moving forward thanks", "d": "10/2014"}, {"body": "aortbals work ultimately everything gets merged classnamebindings see inherited sproutcore ideas clean expect rfcs soon", "d": "10/2014"}, {"body": "ahacking extremely hesitant suggest cp meta data public api ember must keep lowlevel apis private ensure migrate better optimizations abstractions time yet current use meta emberdata probably code smell storing emberdata level metadata cp seems wrong propose specific use case understanding looking", "d": "10/2014"}, {"body": "mixonic method already public api want use exactly intended purpose annotate computed property however way api currently defined ability actually use meta impacted library like ember data also needs annotate properties currently calling replaces existing meta data api seems bit broken nt fully support intent described documentation proposing support merge semantics meta computed property distinct metaforproperty cp mixed onto object easily chain eg", "d": "10/2014"}, {"body": "merge seems reasonable would still slightly concerned property collisions", "d": "10/2014"}, {"body": "stefanpenner yes collisions always issue could mitigated somewhat library best practice use single key libraryfoo host meta hash", "d": "10/2014"}, {"body": "could mitigated somewhat library best practice use single key libraryfoo host meta hash yes toplevel key per library something merging moving ed key", "d": "10/2014"}, {"body": "ok work pr doc changes best practice libraries nt looked inspector know changes ds meta keys likely trip use cooked attribute relationship enumerators", "d": "10/2014"}, {"body": "teddyzeenny", "d": "10/2014"}, {"body": "nt think inspector would affected long methods like remain anyway code inspector ed tested", "d": "10/2014"}, {"body": "herriau nt think anything way check pr", "d": "10/2014"}, {"body": "twokul apps make use went versions ember since issue never come everything working perfectly fine", "d": "10/2014"}, {"body": "herriau hm jsbin output array two items misunderstanding", "d": "10/2014"}, {"body": "herriau callback signature changed produce jsbin demonstrating behavior describing", "d": "10/2014"}, {"body": "rwjblue well emberrassing ca nt reproduce issue guess bower ignored tricked using older version ember closing", "d": "10/2014"}, {"body": "herriau awesome thank following", "d": "10/2014"}, {"body": "would like end week focus beyond timing pr adding support", "d": "10/2014"}, {"body": "one hour one hour coffee ready", "d": "10/2014"}, {"body": "mixonic haha submit pr thanks opening issue matthew", "d": "10/2014"}, {"body": "wanted track milestone", "d": "10/2014"}, {"body": "twokul would like end week focus beyond pr ready review tonighttomorrow", "d": "10/2014"}, {"body": "rwjblue sure thing wondering throw warning instead assertion using causes lot grief mixonic thoughts", "d": "10/2014"}, {"body": "mentioned think assert explicitly specified blank tag names strong assert makes sense example implicitly tagless view converted div add", "d": "10/2014"}, {"body": "specifying tagname class classnamebindings classnames assert completely rails scenario us decipher conflicting intent question assert vs warn think assert makes sense real way proceed expected way", "d": "10/2014"}, {"body": "mixonic break take look", "d": "10/2014"}, {"body": "twokul weird use case unsure fails bindings used merged nt seem appreciate looking think bug significant enough divergence behavior violate semver sure would like thoughts research", "d": "10/2014"}, {"body": "mixonic check avoids parsing empty string since set empty string imo nt make sense parse nt attach maybe warn developers specified empty string help avoid confusion bugs violating semver obviously bad would hesitant bring behaviour back", "d": "10/2014"}, {"body": "twokul agree assertion would enough whip something get master expect release next week two meirish going call correction bug new bug think twokul logic makes sense performance argument real friends supposed spec classes view element view nt element nt reason process suggest writing custom cp use case instead relying old behavior", "d": "10/2014"}, {"body": "mixonic amp twokul thanks agree makes sense thanks hard work well", "d": "10/2014"}, {"body": "since beginning ember time presence classnames classnamebindings enough make view render div instead metamorph ok performance improvement think would good assert development view andor defined empty", "d": "10/2014"}, {"body": "lukemelia tagname classnamebindings exist certainly assert right means confusion intent apply noop ember sure else would apply possibly div already", "d": "10/2014"}, {"body": "throw exception", "d": "10/2014"}, {"body": "seems bad rwjblue believe make beta flagged bad noticing", "d": "10/2014"}, {"body": "cherrypicked travis builds seem pretty backed moment adamferguson test latest beta build completed", "d": "10/2014"}, {"body": "mixonic rwjblue seems working latest beta build thanks much", "d": "10/2014"}, {"body": "related calling logs deprecation notice bc checks attribute provided object attribute deprecated favor maps sure embermap supposed able provided thought bring", "d": "10/2014"}, {"body": "adamferguson private api sync standard thus motivation change emberdata uses polyfill allow computability across old new versions ember unsure behavior sounds like untested since deprecation would raised error builds", "d": "10/2014"}, {"body": "bug fix", "d": "10/2014"}, {"body": "closing favor", "d": "10/2014"}, {"body": "mixonic awesome thanks pointing direction polyfill compatibility makes sense", "d": "10/2014"}, {"body": "moved separate module", "d": "10/2014"}, {"body": "nicholasjstock although causes issues ember bug embercliyuidoc likely using execsync", "d": "10/2014"}, {"body": "could cloned master confirm embercliyuidoc problem close thanks", "d": "10/2014"}, {"body": "stack trace says error originating", "d": "10/2014"}, {"body": "giant brain dump using mandatory setters current value given property returned instead watchers property watchkey canary using setup mandatory setter property exists object time call provided example jsbin property exist object prototype therefore mandatory setter function get setup see updated jsbin showing set prototype mandatory setter assertion fires properly never initialized means always see allows jsbin work properly forward handling previous mandatory setter stuff different way unused paths completely removed production development builds means since setting without object maintained setup since could known set property directly value returned tldr ultimately think poor error bug functionality incorrect lack proper assertions set property object time watcher setup", "d": "10/2014"}, {"body": "pr submitted provide assertion watched property retrieved via set without original jsbin pr needs bit assistance completed one failing test need help", "d": "10/2014"}, {"body": "part mandatory setter feature flag removing milestone list block release discussed rwjblue", "d": "10/2014"}, {"body": "reparses output handlebars align future htmlbars backed templates suspect explain difference believe reparse least improved clever caching unfortunately take away time final solution spare time may worth looking take closer look example", "d": "10/2014"}, {"body": "ran test actually looks ok leaving open get representative repro going", "d": "10/2014"}, {"body": "nt think testing think time measured appears gap waiting next runloop believe might indicate something maybe excess gc", "d": "10/2014"}, {"body": "real world discourse seems running half speed afford upgrade much would love resolve perf regression get reproduction ideally isolation", "d": "10/2014"}, {"body": "made updates benchmarks reviewed show actually considerably faster tests atworst par rest please review benchmarking hard totally possible also trolling", "d": "10/2014"}, {"body": "looking discourse home page vs using chrome canery timeline flame charts see interesting picture ember vs ember noticing huge increase amount time stuff loaded dom vs somewhat expected metal rendering however seeing general gain around scripting times vs zoom single row topic list see see phases create element cosing us scripting loading followed another bit dom building takes another majority time spent parsing dom think enough info create representative test key list say components experiment direct vs templated renders repro quite simple need dev box running discourse replaced emberjs file", "d": "10/2014"}, {"body": "first glance appears regression stated normalization needed get htmlbars believe improve throughput hard work htmlbars improve could use extra peoplepower continue digging ensure additional regressions exists reduce even bottle necks please note also see many performance improvements hopefully reduce overhead around win samsaffron concrete isolated examples provide actionable stuff become also way run discourse get datapoints numbers bit bad apple restores much", "d": "10/2014"}, {"body": "also reference updated test numbers runs render list render list objectcreate objectcreate template bindings template bindings html bindings html bindings", "d": "10/2014"}, {"body": "stefanpenner definitely confirm bit problem benches added complex list example bench suite look looking chrome stable complex list first run complex list third run interesting data points looking timeline though interesting much pronounced perf effect due new rendering techniques look lot faster yet reach parity running discourse get complex test run faster fairly likely discourse also run faster testing mbp noticed larger perf degradation vs firefox faster test vs need fix test suite work ie", "d": "10/2014"}, {"body": "samsaffron thanks update spend time evening new test", "d": "10/2014"}, {"body": "gon na little work today btw get concerned known performance regression easily patched", "d": "10/2014"}, {"body": "eviltrout yes focus without performance regression would interesting datapoints", "d": "10/2014"}, {"body": "yep ships weekend definitely effort go patches probably apply cleanly master continue valuable streams rewrite binding layer land", "d": "10/2014"}, {"body": "redacted post got confused canary beta sorry repost", "d": "10/2014"}, {"body": "canary extremely confusing canary current canary builds identify include output numbers prevent confusion ensure page", "d": "10/2014"}, {"body": "yes sorry confused update soon", "d": "10/2014"}, {"body": "rwjblue apologies canary bench indeed safely ignored release far away still think consider releasing line patch users nt go back get better perf data coming soon", "d": "10/2014"}, {"body": "would like try ensure fixes regression scenarios eviltrout time hangout later tonight", "d": "10/2014"}, {"body": "stefanpenner tonight unfortunately tomorrow day weekend good", "d": "10/2014"}, {"body": "btw rush wanted next release weeks important us ticketed categorized hurried weekend said think others might disappointed effects hence suggestion perf fix line", "d": "10/2014"}, {"body": "rwjblue release remove ember testing build cheers", "d": "10/2014"}, {"body": "still think consider releasing done release remove ember testing build cheers done", "d": "10/2014"}, {"body": "heart heart heart heart heart guys best", "d": "10/2014"}, {"body": "okay updated ember performance suite use new ascii table export easier show findings much clear progression performance current release tests performed desktop tweaks thanks help look like performance bad initially thought seems simple rendering nice improvement creating objects faster awesome however complex list test recently added seem slower average tests quite hit certain entirely related normalization stefanpenner spoke likely spend time looking closely code tomorrow try find perhaps isolate specific benchmark additionally seeing much severe difference ember inspector initially wrote profiling code possible needs updated potentially scary discourse something codebase makes regression worse also something like look tomorrow", "d": "10/2014"}, {"body": "additionally seeing much severe difference ember inspector initially wrote profiling code possible needs updated potentially scary discourse something codebase makes regression worse also something like look tomorrow honestly ember inspector performance ca nt trusted currently currently overhead consuming metrics often costly action processing teddyzeenny chatted various strategies minimize cost honestly engaging instrumentation modes ember slow us dramatically example dramatically reduced cost promise instrumentation view layer instrumentation ember still leaves much desired additionally engaging inspector overhead remember users run devtools open benchmarks perf testing would strongly suggest notice problem use tooling assume outputted values worse without tooling enabled said ember performance bottlenecks would like us keep pushing dramatically reduce cost give everyone better faster apps eviltrout samsaffron would love hangout evening discuss feel free ping free", "d": "10/2014"}, {"body": "going remove blockers list come radical improvements always release since render performance seems improved since even degraded since nt see reason hold back train", "d": "10/2014"}, {"body": "correct took slight perf hit get ember line htmlbars part perf hit goes away entirely lands wip solution nt going block release", "d": "10/2014"}, {"body": "slightly higher nexus goes note also highlights severe issue would upgrade performance android already legendarily bad moving second today render times second load times something could accept", "d": "10/2014"}, {"body": "ya ceiling still incredibly high need time", "d": "10/2014"}, {"body": "fair enough hope robin find wins week mon oct pm stefan penner notifications githubcom wrote ya ceiling still incredibly high need time reply email directly view github", "d": "10/2014"}, {"body": "stefanpenner playing around bit micro optimising core issue calling innerhtml appendchild insertbefore ton times example bench trigger calls innerhtml whereas old branch would trigger calls wonder anyway reconstruct rendering tree generates one dom fragment walks assign elements child views core main reason stuff gotten slower", "d": "10/2014"}, {"body": "thinking fragment reuse bit unbound content makes tricky since executes inline rerender wonder could something addon might impractical inclusion upstream given understand caching happening use templates accordingly think reuse could possible start would override method look cache uncertain exposed apps today dom string parsing certain performance gains keep mind code disposable pick performance elsewhere impact line", "d": "10/2014"}, {"body": "talking perf halved front page render time cost creating views non negligable nt need bindings", "d": "10/2014"}, {"body": "first admin way draw views nt great easier maintain long barrier concerned managing rows october sam notifications githubcom wrote talking perf halved front page render time discoursediscourse discoursediscourse discoursediscourse cost creating views non negligable nt need bindings reply email directly view github", "d": "10/2014"}, {"body": "samsaffron nice delegating native handlebars via helper might streal idea", "d": "10/2014"}, {"body": "please remember hacks help performance immediate future harm performance app complete htmlbars transition like try keep discussion focused improve performance across board", "d": "10/2014"}, {"body": "mixonic note actually fixed large number performance issues many naive scenarios much much faster many apps perform better course unless already selfoptimizing fine always comes caveat may continue wonderful yes normalization handlebars style htmlbars style hurting go away soon", "d": "10/2014"}, {"body": "behavior required issue ember emberdata register defaults container resolved entities must win defaults override obvious tedious breaking solution instead defaults resolved least made lower priority today example provided ember data registering container user may want override resolved alternative imho nt bug merely current state things agree would better reversed nt gotten around work accomplish yet embercli emberaddons provide great way forward somewhat uncertain best way us support globals builds absolutely possible", "d": "10/2014"}, {"body": "closing future plans exist change currently bug hopefully explanation helpful", "d": "10/2014"}, {"body": "yes understand explanation definitely helpful thanks", "d": "10/2014"}, {"body": "write quick jsbin replicate", "d": "10/2014"}, {"body": "unable replicate trying dig", "d": "10/2014"}, {"body": "gon na close able replicate", "d": "10/2014"}, {"body": "observable property believe expect remiss make one probably suggest using action cause route something workaround agree bit confusing", "d": "10/2014"}, {"body": "thanks quick reply worked around issue specific problem would definitely useful become observable close", "d": "10/2014"}, {"body": "royk route several unobservable properties might see elsewhere think improve maybe discussion around pr leaving hanging issue likely get much done", "d": "10/2014"}, {"body": "believe emberdata issues promise proxies select expect simplify example promises involved select work expected probably issue emberdata unless simplify example use ed please use strings ids emberdata times", "d": "10/2014"}, {"body": "mixonic thank much answer", "d": "10/2014"}, {"body": "mixonic ideas achieved emberdata models", "d": "10/2014"}, {"body": "lessless using example could bind directly promiseobject property workaround", "d": "10/2014"}, {"body": "jasonmit man really simple awesome thank", "d": "10/2014"}, {"body": "jasonmit yes looks like work around today ember select needs work correctly likely removing promise proxies favour make raw promises bindable believe still leaves select situation likely part project see select fixed", "d": "10/2014"}, {"body": "made handle async bit better send action selection change instead using two way binding outside value closing favor meta issue", "d": "10/2014"}, {"body": "previously supported handlebars completely unaware surrounding html try creating binding must use", "d": "10/2014"}, {"body": "mmun true supported work least cause entire templateview blow", "d": "10/2014"}, {"body": "mmun rwjblue exactly", "d": "10/2014"}, {"body": "question detect throw useful error message honestly unsure", "d": "10/2014"}, {"body": "regression supported nt support bound comments oo", "d": "10/2014"}, {"body": "mmun regression developer experience definitely saying support bound comments helpful error message would nice", "d": "10/2014"}, {"body": "rwjblue agree nt using types comments one developers used project already changed handlebars syntax expect others might trip well", "d": "10/2014"}, {"body": "pr better error definitely welcome sure conditions might cause error occur", "d": "10/2014"}, {"body": "submitted add helpful error message", "d": "10/2014"}, {"body": "experiencing exact issue update handlebars latest canary find component nt rendering", "d": "10/2014"}, {"body": "confirmed updated duplicate", "d": "10/2014"}, {"body": "nullrocket thanks reporting simpler jsbin showing various permutations one showing failing block hash arguments", "d": "10/2014"}, {"body": "failing tests added", "d": "10/2014"}, {"body": "fix details", "d": "10/2014"}, {"body": "rwjblue thanks end long day nt even thinking duplicate ids junk left different bin focused fact rhino wo nt precompile", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "luoguanzhong question stack overflow please feel free crosslink back", "d": "10/2014"}, {"body": "quick note use storeall find loaded records", "d": "10/2014"}, {"body": "network request first call find already store please note unless using local storage indexeddb adapter record stored browser across page refreshes meaning ember data store gets cleared page refreshes wo nt access model anymore meaning network request", "d": "10/2014"}, {"body": "current state would nt attach dependencies properly jquery handlebars nt expose used commonjs iirc also like get tests passing", "d": "10/2014"}, {"body": "personally nt even care supports cjs artifacts npm helps people nt deal bower", "d": "10/2014"}, {"body": "working time like make nice browserify experience probably get something release", "d": "10/2014"}, {"body": "fivetanley also would nice separate package node browserify", "d": "10/2014"}, {"body": "good addon material", "d": "10/2014"}, {"body": "suggest taking look", "d": "10/2014"}, {"body": "looks like file nt good catch", "d": "10/2014"}, {"body": "needing big code smell properly separating concerns router definitely nt care dom element controller almost certainly nt even view properly broken components custom views care little actual element play fwiw time cared dom elements nt explicitly create instance modal blocker needed completely separate rendered view track location match trigger even element main element view easily grabbed passed action firing almost situation properly handled via custom component view", "d": "10/2014"}, {"body": "see takes time implemented hmmm saying manipulation dom elements scoped ember app animations using css transitionanimation one since need timing complete pardon ignorance coding pure jquery tryinginvesting time ember readinglearning ember docs helping nt seen dom manipulation either intended anyway first place downside meaning say needs need dom element wrong first place", "d": "10/2014"}, {"body": "downside would allow probably even encourage wholesale abandonment proper separation concerns need manipulate dom element view end story", "d": "10/2014"}, {"body": "imagine someone clicking button app might trigger api call might trigger database update might trigger stored procedure crazy things ever know button got hit ui right would mean architecture massive mess ember apps smaller scale layer responsible concerns route concerning concrete dom elements reaching way architectural onion inappropriately messing view layer recipe disaster", "d": "10/2014"}, {"body": "manipulation dom every route handled view right see make sense sequence flow ember app model templates controllers views route", "d": "10/2014"}, {"body": "events get event node actions", "d": "10/2014"}, {"body": "event dispatcher set ember handles events adding handlers root element app one place without event dispatcher placing element outside root element app actionsview events wo nt fire", "d": "10/2014"}, {"body": "im sure checkverify entire test harness javascript karmaloaded function chaishould windowexpect chaiexpect windowshould chaishould windowsinon sinon embertestadapter embertestmochaadaptercreate appsetupfortesting appinjecttesthelpers var karmastarted false appinitializer name run mocha tests initialize function container apptestcontainer container karmastarted appendto body", "d": "10/2014"}, {"body": "jefflage want suggest something wacky initializer already body create ember application test mode ember application passed initializer definitely seems like wrong place start karma imagine want start karma first app starts globals app using acceptance tests tricky less idea globals mode app however many examples jsbins guides", "d": "10/2014"}, {"body": "jefflage jsbin failing test would help us figure going nt use karma mocha stack nt know tell without able dive example", "d": "10/2014"}, {"body": "eptis creating new string time type field setting value set new value scope block cause template rerender normally would write code objects set properties instead looping primitives", "d": "10/2014"}, {"body": "ok clear also case loop object array primitives property still story wed oct matthew beale notifications githubcom wrote eptis creating new string time type field setting value set new value scope block cause template rerender normally would write code objects set properties instead looping primitives reply email directly view github", "d": "10/2014"}, {"body": "sure question context template object template rerender object properties change rerender object changes", "d": "10/2014"}, {"body": "question current behavior also bind object property contains array primitives example", "d": "10/2014"}, {"body": "use array primitives templates must rerender values change nt matter array primitives model", "d": "10/2014"}, {"body": "ok thank much clarifying case would normally use array proxy sent mailbox thu oct pm matthew beale notifications githubcom wrote use array primitives templates must rerender values change nt matter array primitives model reply email directly view github", "d": "10/2014"}, {"body": "sortable arrays usually used presenting list possible may found bug occurring mutated", "d": "10/2014"}, {"body": "sorry forgot explain mentioned stackoverflow bug caused simultaneous usage ember sugarjs extends method overwritten sugar close issue related ember", "d": "10/2014"}, {"body": "able track helper still unknown exactly generates error import em ember var helper function text var handlebars emhandlebars var text handlebarsutilsescapeexpression text text replace gt rn rnnrrn g return new handlebarssafestring export default helper", "d": "10/2014"}, {"body": "remove expression error generated", "d": "10/2014"}, {"body": "thanks looking provide failing jsbin helper code", "d": "10/2014"}, {"body": "strangely enough works setup", "d": "10/2014"}, {"body": "reference seems empty text parent element null", "d": "10/2014"}, {"body": "still concerning need way attack", "d": "10/2014"}, {"body": "adding stacktrace looking asap", "d": "10/2014"}, {"body": "michaelvdheeren looks like simple binding updated data ajax call catch exception debugger able see path binding see binding used templates may point somewhere", "d": "10/2014"}, {"body": "found switching render partial could good optimisation also fixed issue however believe still strange happened", "d": "10/2014"}, {"body": "michaelvdheeren share part template caused issue child template understand might fixed app like know apps nt going problem release stable", "d": "10/2014"}, {"body": "celebrated quickly solved share much possible", "d": "10/2014"}, {"body": "happens switch routes data reloaded child template least interesting part error happens partial using lastcomment title lastcomment lastcomment partial igcommentsmini parent contains view igsea nodesarrangedcontent view renders collection view without template specified", "d": "10/2014"}, {"body": "always happens last child view element within collectionview", "d": "10/2014"}, {"body": "going spend little time trying recreate goes far still little go far see use partial render container view change content route anything specific jsbin working backwards complex issuecausing case simple one would big aid know takes time tricky", "d": "10/2014"}, {"body": "believe getting closer replace simple loop using view helper within loop show node works perfectly hence problem igsea view added great part code view feels like morph elements tore view destroyed hence update data object retrieved tries update morph element igview responsible rendering sea per page applying masonry containerview support heterogenous childviews want sea idea machine given ideamachine also render idea machine card export default emcontainerviewextend layoutenginemixin infinitescrollmixin tagname div classnames sea row nodes null offset null pagesize schedule displaycards sea sorting filtering search options changed emberrunscheduleonce first page sea rendered swaping dom prevents empty sea flicker displaycards function emrunscheduleonce afterrender function thisclear thisset offset thisnextpage observes nodes controllersortascending loops controllerarrangedcontent inserts cards page page basis using endlessscroll nextpage function var self nodes thisget nodes offset thisget offset nextoffset offset thisget pagesize insertnode function node var card thiscreatechildview nodecardview context node thispushobject card return card didinsertelement function thissuper trigger displaycards underlying arrangedcontent changed appon addednode thisdisplaycards appon addedcomment thisafterrenderevent thisdisplaycards willclearrender function appoff addednode thisdisplaycards appoff addedcomment thisafterrenderevent thisdisablescrolldetection thissuper infinitescroll mixin global window document import em ember import jquery export default emmixincreate loadmoreview emviewextend templatename igloadmore enablescrolldetection function window scroll proxy thisdidscrolldebounce disablescrolldetection function window scroll proxy thisdidscrolldebounce didscrolldebounce function emrunthrottle thisdidscroll false didscroll function thisisscrolledtobottom emrunscheduleonce render thisnextpage nextpage function implement function didinsertelement function thissuper emrunscheduleonce afterrender thisenablescrolldetection willdestroyelement function thissuper thisdisablescrolldetection isscrolledtobottom function var windowheight window height var totaldistance document height windowheight var currentdistance document scrolltop destroy function thissuper return", "d": "10/2014"}, {"body": "suspect comment explaining change accurate impossible output render queue visible screen queue flushed browsers singlethreaded runloop executing browser draw believe funky logic view may rendered removed render tree destroyed invalidated curious schedules update cancelled addition cancelled destroy place cancelled today", "d": "10/2014"}, {"body": "michaelvdheeren afraid nt able decipher going release looming today tomorrow may end shipping regression unless get reproduction jsbin demos setting content container view observe render demonstrates none bad behavior described", "d": "10/2014"}, {"body": "mixonic agreed please keep open try dig hopefully provide answer", "d": "10/2014"}, {"body": "mixonic add following piece code see check safestring line reference previously working perfectly value undefined good code suspect something diff safestring value undefined update function thisupdateid null var value thisnormalizedvalue nt diff safestring instances valueconstructorname safestring return", "d": "10/2014"}, {"body": "removing blocker label think fix forthcoming hold release much longer", "d": "10/2014"}, {"body": "rwjblue nt block dive week find significant issue shout", "d": "10/2014"}, {"body": "mixonic sounds good definitely problem point release needed", "d": "10/2014"}, {"body": "mixonic rwjblue attached drumroll failing test fact used dotdotdot didinsertelement probabbly modifies element hence nt correspond morph howto open test index page click reload transition post page sorry bad naming posts page see lastcomment post presented ellipsis done dotdotdot press reload button posts page reloads lastcomment take look console", "d": "10/2014"}, {"body": "michaelklishin excellent lot going definitely trivial reproduce dive next day two see glean thank spending time us", "d": "10/2014"}, {"body": "michaelklishin issue cloning content point replacing whatever page generated dom nt way keep track data bindings dom rebuilt nt seem compatible databinding try commenting line jsbin seems work fine thanks effort diving reproducible case made short work", "d": "10/2014"}, {"body": "mixonic agreed worked perfectly ember read error somewhat problematic", "d": "10/2014"}, {"body": "may worked chance design party destroying dom nodes ember binds difficult impossible thing support apologies sucks app dotdotdot simply greedy plugin worst tradition jquery plugins attached event handler dom event handler would also become disconnected ember issue design flaw lib makes compatibility javascript code ember ember intractable practical sense trying support libraries like keep us ever getting amazing rendering performance want land htmlbars", "d": "10/2014"}, {"body": "agreed", "d": "10/2014"}, {"body": "seems work properly provide failing test jsbin demonstrating problem", "d": "10/2014"}, {"body": "please provide information still occurring specific browser", "d": "10/2014"}, {"body": "using latest version chrome version mac would like provide detail sure isolate problem happening one part template styling view way anything weird css like letterspacing", "d": "10/2014"}, {"body": "seem recreate going close breaking whitespace would definitely bug need go debugging", "d": "10/2014"}, {"body": "updated project use ember today seeing issue breaking white space within templates mixonic seems issue present work values resolved dom rendered see jsbin example system windows chrome vote reopening issue really seems like bug cc rwjblue updated previous jsbin example", "d": "10/2014"}, {"body": "demonstrating difference initially late rendered content whitespace definitely bug thanks much repro herom", "d": "10/2014"}, {"body": "welcom mixonic smiley updated jsbin little typo make work whole smilecat", "d": "10/2014"}, {"body": "bug chrome rendering engine blank text node still present two names simply rendered firefox exhibit bug", "d": "10/2014"}, {"body": "omg yes confirm tried following browsers seeing bug latest chrome windows firefox latest chrome failing mac osx safari", "d": "10/2014"}, {"body": "bug chrome", "d": "10/2014"}, {"body": "following bug chrome seems moving forward solving issue thanks lot mixonic smiley", "d": "10/2014"}, {"body": "likely best asked stack overflow appear bug try keep issue tracker tracking issues", "d": "10/2014"}, {"body": "fiddle working appear bug emberlibrarieseach implements function collides prototype map function triggers possible prototype longer behavior recent versions verify morning", "d": "10/2014"}, {"body": "jasonmit really appreciate effort afraid kind issues might occur whenever get type issues need put patch better solution would avoid prototypejs case sure whether one third party js collides ember way avoid similar issues without putting patch", "d": "10/2014"}, {"body": "enumerableutils friends use arrayprototypeforeach method available helper used think jayphelps rewriting libraries could use loop instead meantime instead helpers pretty sure would nt break public api libraries think jdalton stefanpenner talking using polyfills always helpers avoid collisions native methods like foreach contains etc however think changing enumerableutils behavior would breaking change one could nt make ready start releasing ember stef could probably fill plans polyfillenumerable stuff core team talked already", "d": "10/2014"}, {"body": "also fixed use recent prototype version tested jsbin provided works properly", "d": "10/2014"}, {"body": "rwjblue yes ember working fine latest prototype version prototype breaks included ember fivetanley thanks updating ongoing work really good avoid collisions", "d": "10/2014"}, {"body": "definitely digging", "d": "10/2014"}, {"body": "jsbin working", "d": "10/2014"}, {"body": "needs return", "d": "10/2014"}, {"body": "bring back deprecate", "d": "10/2014"}, {"body": "yes deprecation suggest use component registermakeboundhelper", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "defined behavior described ember guides observers never fire unless consumer", "d": "10/2014"}, {"body": "see thanks lot ahacking", "d": "10/2014"}, {"body": "suspect issue may", "d": "10/2014"}, {"body": "seems possibly reducecomputed issue seems entire family issues array computed tracked well could relevance problems", "d": "10/2014"}, {"body": "hit wall twice stated pr try make arraycomputedreducecomputed properties smarter discovered way cp implemented deeply flawed senses open first step refactor cps nt think going make anytime soon think probably delayed ember time comes cp redone scratch", "d": "10/2014"}, {"body": "yea seem several issues relating arraycomputedreducecomputed think close infavor wagenet cleanup arraycomputed issue", "d": "10/2014"}, {"body": "maybe related", "d": "10/2014"}, {"body": "fyi emberset deprecated although would nice worked", "d": "10/2014"}, {"body": "make sure enumerables eached though cc wycats r", "d": "10/2014"}, {"body": "kiwiupover check canary prod", "d": "10/2014"}, {"body": "confirm canary prod build", "d": "10/2014"}, {"body": "crap", "d": "10/2014"}, {"body": "review fix tonight thanks noticing reporting kiwiupover", "d": "10/2014"}, {"body": "thanks robert wednesday october robert jackson notifications githubcom wrote review fix tonight thanks noticing reporting kiwiupover reply email directly view github", "d": "10/2014"}, {"body": "definitely bug nt seen test suite passes certain try recreate look jsbin nt want ship broken trs visualjeff failing test would really helpful thank jsbin", "d": "10/2014"}, {"body": "mixonic ok learning current state ember htmlbars pr nt really applicable today understand know best practice work arounds issue couple ideas thought check first btw also like see failing test ember", "d": "10/2014"}, {"body": "visualjeff yes likely fixable without failing test", "d": "10/2014"}, {"body": "seeing problem canary visualjeff please reopen still seeing issue", "d": "10/2014"}, {"body": "mixonic tested vm nt work expected trview render data formatting nt honor column boundaries unformatted data dumped table row canary", "d": "10/2014"}, {"body": "hey jerel opsb know two worked together enable ember support legacy browsers either two every work around bug tables apparently nt completely support setinnerhtml number tags like tag either know shim shiv workarounds", "d": "10/2014"}, {"body": "ugh think possible vm upgraded jsbin nt seem work need wait new vm download evening visualjeff share screenshot aware innerhtml problems ember solutions tests place many issues want sure see thing see test fix believe related nt good test case might one", "d": "10/2014"}, {"body": "mixonic happy test automatically get pulled master", "d": "10/2014"}, {"body": "visualjeff merged need pull branch build version ember", "d": "10/2014"}, {"body": "make difference jsbin example listed running emberjs version used renderbuffer branch handlebars jquery", "d": "10/2014"}, {"body": "yup tests pass think upgradedidontknowwhen vm trolled failures test suite right confirmed failing jsbin", "d": "10/2014"}, {"body": "visualjeff pretty positive put would appreciate check today time want push beta stable today tomorrow morning latest", "d": "10/2014"}, {"body": "mixonic sorry delay test today post results visualjeff", "d": "10/2014"}, {"body": "mixonic love yeah man works visualjeff", "d": "10/2014"}, {"body": "visualjeff thanks confirming", "d": "10/2014"}, {"body": "question would best asked stack overflow", "d": "10/2014"}, {"body": "mistake missing", "d": "10/2014"}, {"body": "standard browser behavior see smaller reproduction using jquery basically click event submit button handled higher level called trigger submit event", "d": "10/2014"}, {"body": "rwjblue argh sorry opening irrelevant issue thanks detailed answer", "d": "10/2014"}, {"body": "maybe", "d": "10/2014"}, {"body": "exact problem trying took forever track handlebars code commented html comments eg based description bet money", "d": "10/2014"}, {"body": "workmanw exact issue end though quickly resolved using handlebars comments instead probably reported discovered months back flushed", "d": "10/2014"}, {"body": "workmanw kanongil made day thank much start app hank loading error last line uncaught typeerror undefined function reading used emberdata canary everything works fine", "d": "10/2014"}, {"body": "happy help cheers", "d": "10/2014"}, {"body": "might worth making note blog post andor release notes likely trip people terribly easy debug rwjblue", "d": "10/2014"}, {"body": "default creates new scope want block share surrounding scope need use syntax updated bin", "d": "10/2014"}, {"body": "caused binding context plain string meirish definitely correct solution use context preserving version details change ember using modules enforced strict mode across codebase generally good thing however causes issue attempt bind function primitive value strict mode primitive value boxed converted object automatically us strict mode", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "misunderstood design closing", "d": "10/2014"}, {"body": "related", "d": "10/2014"}, {"body": "workaround computed property set attribute directly", "d": "10/2014"}, {"body": "whops fault looks using old version ember nt support queryparams controller", "d": "10/2014"}, {"body": "set true need use property would still consider bug since lacks documentation example", "d": "10/2014"}, {"body": "looks like possible bug outlets", "d": "10/2014"}, {"body": "verified issue related computed properties model properties", "d": "10/2014"}, {"body": "pretty intriguing tried make jsbin test issue nt able chance could make bin simulate problem", "d": "10/2014"}, {"body": "get frustration gonvaled case transparency ember magic might seem particularly arbitrary seeing conversion using globalssymbols refer classes using lookups injected container new code referring class actually registered container view phonewithflag big effort made attempt move similar class lookups itemcontroller itemview collection etc use container ways semantically appropriate resolve resolve design decision consequence modules nt necessarily names usual sense app instance using embercli think phonewithtag module exported one file imported another case embercli app imported registered container name based directory file name without ever needing define name nb reply postscript issue since removed", "d": "10/2014"}, {"body": "concur workmanw ca nt replicate without removing quotes entirely could include initial debug information ember handlebars version spit console", "d": "10/2014"}, {"body": "duplicate fixed merged", "d": "10/2014"}, {"body": "nice looking forward", "d": "10/2014"}, {"body": "tertiary maybe fixed newer version noticed behavior components js willnotsurvive function return thisget thisget b property b magic adding key value arguments seem keep computed property overwritten willsurvive function key value return thisget thisget b property b set overwritten whatever value set seems odd relevant jsbin", "d": "10/2014"}, {"body": "set willnotsurvive overwritten whatever value set willsurvive seems odd works expected yes odd someone aware", "d": "10/2014"}, {"body": "whoa expected til genuinely surprised behavior generally think function javascript nt expect behave differently based presence argument variables guess would nt expect something analyzing part function see somehow different never really liked implicit injection thing angular either jshint actually hates using also warrants adding comment like seems like something like proposing could solve still nt descriptive making writable really trying make untrampleable unoverwriteable", "d": "10/2014"}, {"body": "generally think function javascript nt expect behave differently based presence argument variables feature meant interim step allow backwards compatibility never transitioned hope get us plan js writable fullname embercomputed firstname lastname get function key return thisget firstname thisget lastname set function key value var name valuesplit thissetproperties firstname name lastname name", "d": "10/2014"}, {"body": "jefflage looks like problems code hack forcing property name processed string code implies general helper probably deprecated future support dynamic rerendering based changing viewcontroller name property likely support future", "d": "10/2014"}, {"body": "mixonic thanks responding far hack realize also realize dangerous helper explicitly allowing specify view want render using dynamic property helper guess question around maybe specifically right pattern want able dynamically render different view also want specify controllermodel", "d": "10/2014"}, {"body": "jefflage safe supported path today use container view via rwjblue basically works", "d": "10/2014"}, {"body": "makes sense appreciate help", "d": "10/2014"}, {"body": "mixonic deprecate render", "d": "10/2014"}, {"body": "fivetanley likely components become sufficiently powerful replace need wont remove feature unless great reason great alternative would nt worry", "d": "10/2014"}, {"body": "actually avoid creation parent div set property manually want unordered list view something like handlebars adding elements", "d": "10/2014"}, {"body": "herom thanks quick response want avoid creating parent tag want depend handlebars", "d": "10/2014"}, {"body": "nt think possible view would know boundaries clear see view representation actual dom element particular use case trying cover could perhaps provide jsbin", "d": "10/2014"}, {"body": "use case trying create component found ember added parent div wrapping component html broke css solution define javascript component class override tagname remove top level tag handlebars required output like pattern happens many times working solution sure best practice wondering better solution instead creating javascript component option avoid creating parent div take handlebars without adding parent div", "d": "10/2014"}, {"body": "nt think better practice achieve views components also targets actions etc would ember detect code related random dom markup distinguish possibilities need tell ember therefore dom representation least know far", "d": "10/2014"}, {"body": "remember backbonejs specify element view responsible via normal jquery selector otherwise new element created anyway works hope improve future thanks lot man", "d": "10/2014"}, {"body": "problem welcome smiley", "d": "10/2014"}, {"body": "tagname null", "d": "10/2014"}, {"body": "stefanpenner use tagname null html defaults normal div tag use tagname null instead get component issue misunderstand direction set tagname null", "d": "10/2014"}, {"body": "stefanpenner notmessenger tried using tagname null tell ember create div default value use tagname null create tag want avoid creating tag keep empty like tagname worked perfectly herom btw solution problem", "d": "10/2014"}, {"body": "cool thing nt know abousamra thanks update sharing", "d": "10/2014"}, {"body": "tagname technique nt appear documented test tell used internally always coupled isvirtual true consider private api personally however useful", "d": "10/2014"}, {"body": "endash good point considered thanks", "d": "10/2014"}, {"body": "endash correct", "d": "10/2014"}, {"body": "use tagname null create tag oops answered phone endash pointed correct likely coupled isvirtual need although isvirtual may want depends usecase", "d": "10/2014"}, {"body": "man used cowboy developer go documented tested idea actually today might tomorrow pass", "d": "10/2014"}, {"body": "fwiw technique least potentially seriously children collectionview", "d": "10/2014"}, {"body": "fivetanley could use emberdev maybe new major revision cc rwjblue", "d": "10/2014"}, {"body": "make sense branch current version branch something add new stuff plain js either non used directly via bower", "d": "10/2014"}, {"body": "pass would really like see someone else pick run ember emberdata embercpm could benefit greatly", "d": "10/2014"}, {"body": "herriau new internal ember metal called stream landed master much flexible adhoc property change notification synchronization nt think great docs regardless expect rough answer talking would found codez tests", "d": "10/2014"}, {"body": "looks like works canary arguments undefined null passed bound handlebars helper showing empty strings helper rather undefined", "d": "10/2014"}, {"body": "works canary updated jsbin test js qunitmodule handlebars helpers arg types test bound helpers consistent argument types function emberhandlebarshelper gettype function value return typeof value view emberviewcreate controller emberobjectcreate template compile gettype null gettype undefprop gettype string gettype gettype appendview equal view text undefined undefined string number object helper output correct run function viewdestroy reveals fixed", "d": "10/2014"}, {"body": "thanks following glad streams pr fixed bug canary know commit introduced regression fyi handlebars supports string number boolean primitives consequently treated regular property lookups eg fooundefined foonull", "d": "10/2014"}, {"body": "mmun thanks nt know commit introduced regression fixed play around git bisect later though primitives makes sense jsbin used property defined null controller passed helper gave type undefined test could nt recreate think managed confuse", "d": "10/2014"}, {"body": "fixed need review", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "slindberg thanks yes nasty one previous commit probably never made beta mattraydub aware little temporarily worked around exactly proposed eliminating altogether js addeditem function array item changemeta instancemeta var index instancemetabinarysearch array item arrayinsertat index item arrayindexof item arrayinsertat index item return array however nt belive eliminating good solution however one come allows us still use property paths actually two related issues describe created using modified properties exposed multiple sort properties function used erroneously compares unchanged sort property used case always point value property changes object shared among multiple items ie common parent belongsto relationship property sort property function compares new sort property value old sort property value instead compare using values last used sort array old sort property value old sort property value believe order move past second issue going necessary create cache sort property values proper comparision take place original value sort property value used side effect approach able eliminate need altogether turn fix first issue hope pull request completed sometime soon", "d": "10/2014"}, {"body": "thanks mmpestorich glad hear top smile", "d": "10/2014"}, {"body": "arrayreduce computed use embermap emberorderedset internally cc hjdivad", "d": "10/2014"}, {"body": "stefanpenner see internally maintains hash calls uses amongst others create passed along originally thought exposing via would helpful rather changing internals felt like using maintain cache sort property values better approach nt", "d": "10/2014"}, {"body": "bug really bugging please see pr let know think", "d": "10/2014"}, {"body": "aexmachina behavior cps long long time documented would definitely welcome review set improvements documentation difficult change within release though due constraints semantic versioning additionally behavior actually useful want raise exception mark cp readonly", "d": "10/2014"}, {"body": "aexmachina advocating cp readonly default likely cause pain worth imho", "d": "10/2014"}, {"body": "stefanpenner cp readonly default", "d": "10/2014"}, {"body": "matthooks first approach would introduce writeable make embers internals work manor maybe using flag", "d": "10/2014"}, {"body": "yes realised solution way home yesterday cps readonly default think fine clearer call cp set", "d": "10/2014"}, {"body": "generate new empty project test builds", "d": "10/2014"}, {"body": "sorry realized wrong repo reopen embercli repo instead", "d": "10/2014"}, {"body": "oh sorry reopen ember cli repo", "d": "10/2014"}, {"body": "believe", "d": "10/2014"}, {"body": "jdalton know internal ember rely things lots flexibility unsure default default wycats tomdale question think always use user land versions never fall back native versions way something change users still get consistent original behavior expected", "d": "10/2014"}, {"body": "would also add lot blog posts stack overflow answers jsbins even ember guides currently show code assumes set changing hard would effectively invalidate examples exist could ultimately another point confusion newer users", "d": "10/2014"}, {"body": "added confusion enumerable allows enumeration non array like objects array like goodies leaves us potential differences sucks big time part ember inherited sprout core days time browser world stale prototype extensions used without fear wrongfully going forward category wish see improved strategy plan needs derived", "d": "10/2014"}, {"body": "think behaving ala lodash might way forward ultimately using small subset lodash may useful nervous explode gzip bite size even", "d": "10/2014"}, {"body": "willing reconsider way consume ember via modules release change would way breaking series", "d": "10/2014"}, {"body": "also worth noting theory currently ember run slower prototypes involved good refactoring address", "d": "10/2014"}, {"body": "think behaving ala lodash might way forward also worth noting theory currently ember run slower prototypes ah good know manually bolting methods reminds prototype approach supporting dom extensions older browsers awesome deeper issues looks like even config new builtins still leak lead issue described simple example", "d": "10/2014"}, {"body": "jdalton yes need consistent current state result much scenario solving holistic set solutions currently ember always falls back existing natives clearly nt actually want may result future breakages nt ember enumerable would opt immediately drop version move minimal lodash", "d": "10/2014"}, {"body": "could wrong believe misunderstanding feature documentation stinks default class used ie urls use look like intended using ember needs know nt considered parsing path looking valid route nt even reference since nt actually need nt tl dr using default rather meaningless afaik using serving app index path eg something make sense", "d": "10/2014"}, {"body": "said another way using jsbin example given rooturl route full path would internal method gets url location class currently use nt provide full path part calling nonhashed portion rooturl router wo nt know cause abstracted location classes mostly lack documentation misleading method names nt renamed since ability added also words path url actual true definitions incorrectly everyone including explanation making things even confusing", "d": "10/2014"}, {"body": "could assert rooturl used hash location", "d": "10/2014"}, {"body": "jayphelps thank great explanation", "d": "10/2014"}, {"body": "jayphelps thoughts asserting used", "d": "10/2014"}, {"body": "rwjblue think would break things using auto location falls back hash unless ignore special case imo clearer documentation best path", "d": "10/2014"}, {"body": "jayphelps ok sounds good hairbrained idea anyways think close since original issue mostly misunderstanding", "d": "10/2014"}, {"body": "query find update server returns set records effectively immutable", "d": "10/2014"}, {"body": "correct must result storefilter", "d": "10/2014"}, {"body": "issue solution somehow cheers jsbin issue", "d": "10/2014"}, {"body": "bugregression", "d": "10/2014"}, {"body": "started fixing realized much problem krisselden planning rework get address correctly", "d": "10/2014"}, {"body": "supported ember", "d": "10/2014"}, {"body": "something could support really nice", "d": "10/2014"}, {"body": "mmun r", "d": "10/2014"}, {"body": "fivetanley moving away context changing helpers purpose future excusing keywords paths etc always return value like using theory could support context changing helpers twokul work view helper context complete recommend code smell block params febreze", "d": "10/2014"}, {"body": "mmun already supported luck currently jsbin never mind swapped updated jsbin nt know syntax thanks mmun", "d": "10/2014"}, {"body": "always passes around instance array strings booleans immutable luckily defaultvalue function return new instance every time", "d": "10/2014"}, {"body": "wow wow anyway thanks explanation appreciated", "d": "10/2014"}, {"body": "nt disagree fix curious need deferred readiness", "d": "10/2014"}, {"body": "stefanpenner completely agree rarely ever done found reviewing code felt returning successfully essentially ignored kinda insane", "d": "10/2014"}, {"body": "hi issue app stefanpenner need deferreadiness inject external script app better way writing unit tests custom restadapter seems external script loaded yet try use store find records", "d": "10/2014"}, {"body": "better way async handled routes", "d": "10/2014"}, {"body": "rwjblue time seen less less genuine usecases deferreadiness nt result poor user experience white screen death deferrals complete advancedefer readiness hooks time good async story route typically initializers meant registering stuff container configuration options injection rules less error prone approach registering initialization allow application resolve needs entity prevents whole category issues exist cases practical register something initialization process imho cases dwindling", "d": "10/2014"}, {"body": "saarangsoltani please open pull request fix would happily merge", "d": "10/2014"}, {"body": "fixed back thinking fixed next time documentation officially generated released often docs get generated wait first nonbeta release", "d": "10/2014"}, {"body": "tehcurtis definitely deployed around release uncertain schedule outside rwjblue might man know", "d": "10/2014"}, {"body": "done", "d": "10/2014"}, {"body": "code transitioning immediatly visiting none code seen", "d": "10/2014"}, {"body": "damn sorry hopefully work code question going route lazy created remove use commented bottom works", "d": "10/2014"}, {"body": "pretty sure setupcontrollers deprecated besides setupcontroller used setting controller creating controller needs exist method called", "d": "10/2014"}, {"body": "first jsbin little bit sophisticated using setupcontroller app used demonstrate issue pretty sure problem controller exists time method called know lazy showing true another place controllers generated", "d": "10/2014"}, {"body": "router looks controller via container want found needs able looked via container wondering container setup see", "d": "10/2014"}, {"body": "nt get seems saying something wrong problem already mentioned", "d": "10/2014"}, {"body": "saying use resolver dynamically create resolve controller needed still nt work query params", "d": "10/2014"}, {"body": "adding custom resolver lazily dynamically create controllers via eval like wanted seems work fine", "d": "10/2014"}, {"body": "thank taking time looking really happens loading code demand try changing apppageeditcontroller exists point picked queryparams initialization somehow", "d": "10/2014"}, {"body": "np return eval controller still want assign global js var controller eval emberobjectcontrollerextend queryparams query query null loaded true windowapppageeditcontroller controller return controller give better use case trying much create controllers using lazily runtime", "d": "10/2014"}, {"body": "wo nt work mean controller want queryparams nt work tested", "d": "10/2014"}, {"body": "works say nt", "d": "10/2014"}, {"body": "indeed loading code pageroute actually root every tree route working modules somehow ember looking pageroute hit code yet find solution possible load code resolver since async least something dig thanks lot", "d": "10/2014"}, {"body": "welcome sure even possible would proxy controller work spitting ideas top head maybe proxies query params everything else controller available", "d": "10/2014"}, {"body": "first lookup controller meant queryparams take data controller real controller wo nt find data needs proxies wo nt help thinking cheating put query info pageeditroute since available time machty always said first idea put everything route changed mind think would good go back first idea even tho setget values tofrom controller", "d": "10/2014"}, {"body": "thanks get fixed asap", "d": "10/2014"}, {"body": "rock made jsbin unrelated underscore issue shows open web console try nonfirefoxnightly browser see report firefox nightly see report using native array contains ff nightly", "d": "10/2014"}, {"body": "jdalton thanks headsup appreciate", "d": "10/2014"}, {"body": "fix push get work", "d": "10/2014"}, {"body": "mgenev provide jsbin complete code example unclear want fetch item view container access class stored property fwiw work fuzzy syntax embercli would need check real app", "d": "10/2014"}, {"body": "sorry got overwhelmed worked nt gotten around making bin try soon", "d": "10/2014"}, {"body": "mgenev ping issue definitely want resolve lose track details", "d": "10/2014"}, {"body": "verified changing index route arraycontroller associated template gives following error uncaught error assertion failed collection could find itemviewclass nt chance put jsbin", "d": "10/2014"}, {"body": "overall getting itemviewclass usable context collection view yet nt know create tie collection view index route arraycontroller example docs page nt quite let know uses appendto body unfamiliar way rendering mark nt want using either way itemviewclass", "d": "10/2014"}, {"body": "carpeliam yeah please make pr address documentation using functions instead strings performance consideration behavior expected strings", "d": "10/2014"}, {"body": "mixonic keyup event listens key event believe option specify event type key pattern fillin somehow something around sure best way least support different events types supported input fields", "d": "10/2014"}, {"body": "abousamra concern listeners firing data pass event object reference implementation fillin keyevent might want use single key events going close general issue safe say would welcome specific suggestions else could done fillin", "d": "10/2014"}, {"body": "rwjblue stefanpenner thanks pointing indeed problem seems good way install via bower since specific version nt cut fix ideas add patched version embercli app via bower", "d": "10/2014"}, {"body": "lock sha via components repo use canary version", "d": "10/2014"}, {"body": "michaelvdheeren think issue within app sounds like something causing view render render something modified causes view torn definitely expensive ideal event triggered rerender example overriding rerender hook sure detailed trigger could build going close specific direction please feel free reopen open new issue something specific address", "d": "10/2014"}, {"body": "still possible use old order rendering example created layout module based jquery layout call order didinsertelement goas top bottom child element knows parents size every child element gets didnt know sizing property parent think break lot apps better way", "d": "10/2014"}, {"body": "onceatime always schedule work queue runloop flush rendering complete probably want", "d": "10/2014"}, {"body": "hi wondering latest app also completely broken although getting different error message logged ipadiphones running including sure adds much thought share different error message ones mentioned previously", "d": "10/2014"}, {"body": "lindyhopchris possible would nt bank", "d": "10/2014"}, {"body": "ported patch case anyone needs", "d": "10/2014"}, {"body": "fyi anyone using patch production alter line include ipads well ipad retina identified ipad think seem exhibit problem also patch seems work great production site w ipad included even add homescreen standalone mode tested within simulator physical ipad retina amp iphone", "d": "10/2014"}, {"body": "thanks lukegalea patch somewhere download builded js get build using npm mac update manually patched emberjs put thanks work guys", "d": "10/2014"}, {"body": "hmrdk glad worked case want build", "d": "10/2014"}, {"body": "rwjblue issue build without use strict sorry nt chance go yet", "d": "10/2014"}, {"body": "stefanpenner told happy need decide", "d": "10/2014"}, {"body": "another fyi workaround nt capture ipad mini addtohomescreen webapp mode seeing issue original ipad mini complicate workaround output different ipad mini safari ipad mini addtohomescreen nobrowsercontrols webapp mode seems similar useragent uiwebview ipad mini safari ipad mini webapp mode notice missing webapp mode cause check apply workaround catch case infuriatingly causes workaround function correctly normal safari addedtohomescreen webapp version even device modified detection", "d": "10/2014"}, {"body": "confirm bug device every one refreshes app wont launch device seems work connected safari debugger cant ever see error", "d": "10/2014"}, {"body": "yet know fix land point release", "d": "10/2014"}, {"body": "simonjefford nt ember bug broken safari believe new helpers htmlbars integration nt walk specific path anymore may prevent us hitting failure case mmun confirm statement unfortunately ca nt really sure covered scenarios non bit jsc broken problems might exist nt know yet bug seem triggered primarily hot code use strict could disable ember wide high likely hood success unfortunate user apps cause failure scenario without knowing think later trying get new helper code longer binds primitives soon right course action", "d": "10/2014"}, {"body": "craigteegarden modified detection fix also handles simulator simulator ua modified detection", "d": "10/2014"}, {"body": "stefanpenner hi yup realise ios issue perhaps wrongly thought hotfix referenced going land ember point interestingly issue went away switched canary referring new helper code", "d": "10/2014"}, {"body": "fyi bower users less crazy patch", "d": "10/2014"}, {"body": "thanks work stefanpenner", "d": "10/2014"}, {"body": "canary snapshot fix fyi bower users less crazy patch", "d": "10/2014"}, {"body": "trackjs logs attempted assign readonly property nt show hits error new ios maybe patched anyone else seeing improvement app uses angular underlying issue would per tryghostghost reference underlying cause might edit unfortunately started seeing errors well", "d": "10/2014"}, {"body": "borhub unfortunately issue touch dom natives", "d": "10/2014"}, {"body": "following links around various patches various bits software related issue webkit bug linked one people pointing anyone know bug actually fault reported fixed etc much favour patching working around sorts bugs would like keep eye", "d": "10/2014"}, {"body": "nt believe reported yet spent time reading related issues nt found reported try find time evening finally report hoping get isolated failure without ember nt cracked nut scenario yet", "d": "10/2014"}, {"body": "finally chance report bug sorry delay hate writing bug reports", "d": "10/2014"}, {"body": "believe release without use strict confirm tomorrows meeting cc rwjblue", "d": "10/2014"}, {"body": "stefanpenner thank taking time raise issue know fun really appreciate", "d": "10/2014"}, {"body": "seen issues safari private browsing mode ios wondering related anyone seeing bug please tell color chrome safari browser black means private browsing enabled white means normal", "d": "10/2014"}, {"body": "zaius bug unrelated using private browsing occurs normal browsing", "d": "10/2014"}, {"body": "ok thanks clarification keep digging", "d": "10/2014"}, {"body": "todd trackjs tracking occurring least different prominent web properties help provide additional error details stacktraces privately help", "d": "10/2014"}, {"body": "toddhgardner shot email", "d": "10/2014"}, {"body": "fixed stable canary mitigate jsc broken contexts removed affected modules also removed places inlined possible missed want careful regress ember entire codebase run without", "d": "10/2014"}, {"body": "stefanpenner like open new issue us track bug reported remember stop removing", "d": "10/2014"}, {"body": "rwjblue sounds good", "d": "10/2014"}, {"body": "emberhandlebarshelper myhelper function value options form creates simplehandlebarsview optimizations assuming leaf node api intended helpers formatting ca nt call view helper functions may appeared work past versions actually structure hierarchy properly required recursive rendering actually partially work fails fast", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "still issues ed basic scaffolding embercli app attach documents models", "d": "10/2014"}, {"body": "seems like fix ed sorry trouble check issue already open open one nt thinking since ember data add logic ehhhh could help case add related edit polymorphic check going away working nt look polymorphic", "d": "10/2014"}, {"body": "polymorphic inheritance yes open ticket ed", "d": "10/2014"}, {"body": "another ticket", "d": "10/2014"}, {"body": "one solution would reopen class rather extending class", "d": "10/2014"}, {"body": "oh lord returns return value runloop event handler would control propagation simply changing results two failed tests think think using nested runloop actually correct rely jquery event system means need return false keep event bubbling without nested runloop way ensure hook code run returning value jquery move away jquery could done much efficiently leveraging runloop tl dr nt think deeply willing let going known regression expect number apps relying document release notes think must replace jquery sufficient", "d": "10/2014"}, {"body": "going leave open release without fix believe workaround always correct way fire focus encourage jquery event triggering causes runloop execute nested inside runloop triggering happens render queue views currently rendering may rerendered torn leaving things parent runloop render tree unpredictable point forward see three approaches could consider would allow safely triggering events running render tree using would avoid corruption would also cause new issues event hooks would longer chance return value handlers control even bubbling return value joined loop use would possible unsure nt already return value would warrant discussion could introduce custom method scheduled ember runloop render instead creating nested runloop might raise issues target trigger removed dom instance could discussed elsewhere defer queue would mean nested runloops never execute render tree run ways challenges deferred", "d": "10/2014"}, {"body": "mixonic mmun thank investigating information actually seems like edge case workaround triggering afterrender guarding element beeing dom sure needs fixed price three alternatives first one looks like simplest would require others check view dom feel free close want", "d": "10/2014"}, {"body": "hi guys update issue anything provide", "d": "10/2014"}, {"body": "getting error", "d": "10/2014"}, {"body": "also seeing error worth noting rsvp method deprecated however result using", "d": "10/2014"}, {"body": "error materially affecting guys apps tests", "d": "10/2014"}, {"body": "seeing main app testing based error taken moved", "d": "10/2014"}, {"body": "also seeing error reported users via error tracking service adding seems triggered route whose model updated every seconds", "d": "10/2014"}, {"body": "investigating looks like second call copy emberjs routerjs library causes error first call made call earlier function comment line app seems work normally without errors seemed like bug notifying query param changes twice however second call implemented raytiley specific reason entirely sure understand reason duplicating behavior setting true qunit tests failing due something else entirely setting query param null route deactivate callback caused next test fail transition due query param change attempted", "d": "10/2014"}, {"body": "got possible similar issue outlined built", "d": "10/2014"}, {"body": "sandstrom think bit different seems like", "d": "10/2014"}, {"body": "drogus right thanks interestingly commented issue months ago apparently memory nt today smile", "d": "10/2014"}, {"body": "sandstrom yeah problem actually part expected behavior computedsort well would nice property change event nt change array positions nt cause removesadds expected behavior computedsort nt exactly desirable want direct edit things sorting either buffer edits somehow like object controller intermediate property control exactly refresh list drogus narrowed specific cases think already linked thread nt chance try patch yet hopefully week", "d": "10/2014"}, {"body": "ok several points aceofspades nt think make happy going lay things much detail possible last jsbin uses private api removed private apis definitely subject change sure agree one gone updating jsbin remove use results working string believe expect things work please note comment would expect template able incorrect ember reserves right change behavior internal templates call signatures indeed change htmlbars reintroduced two changes required avoid error firing view must placed state buffer must attached view see maybe relax requirement buffer attached view render worry relaxing restriction cause errors wild enable good behavior lastly even without errors important note output hello name present must updated binding view later runloop last point highlights think may crux api building string html child views moment run api generating string buffer meaning buffer evolved api generates html content buffer far sane way achieve similar behavior use fetch outerhtml creates dom representation view child views recursively calling render method recursive part maybe inaccurate get idea api includes child views jsbin using api suggest caveat ember view layer designed used adhoc manner like infact codepath used course normally running application allow passing contextual element really used tests wary suggest solution adhoc rendering seems closest want closing issue poor suggestion made adhoc rendering regardless made suggestion changing meaning buffer accommodate use specific method specific circumstance", "d": "10/2014"}, {"body": "thanks mixonic detailed explanation original usecase bit different forgetting original workaround stated simply would like fetch component simple raw template compile handlebars runtime since embercli precompiles templates appears possible alternative seems declare markup javascript rather hbs", "d": "10/2014"}, {"body": "ping case important release suggest close", "d": "10/2014"}, {"body": "mucho importante oct pm matthew beale notifications githubcom wrote ping case important release suggest close reply email directly view github", "d": "10/2014"}, {"body": "ember handlebars ember canary handlebars also come across behaviour rather peculiar given following controller string class names property throws array class names property switching array throws static string class names using static string renders", "d": "10/2014"}, {"body": "inform everyone bug fixed", "d": "10/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "newcomer ember huge everyone company cleaning ember whenever wasted lot time found thread", "d": "10/2014"}, {"body": "asteinlein also wasted embarrassing amount time one rwjblue correct via globals easily import export embercheckboxextend app use believe change component leave view", "d": "10/2014"}, {"body": "stefanpenner respectfully disagree change use component within release without breaking semver contract completely sympathize want changed use component recall submitted pr pr declined semver impact", "d": "10/2014"}, {"body": "rwjblue making embercli addon version suffering", "d": "10/2014"}, {"body": "rwjblue breaks past complaints people subclasses textfield textfields input helper variant", "d": "10/2014"}, {"body": "machty actually happens cp mapped qp dead simple example error click post removing qp namemapping surprisingly fixes", "d": "10/2014"}, {"body": "also issue come multiple times", "d": "10/2014"}, {"body": "looking bit interesting title coreobjectreopen nt handle actions hash quite correct actually notyetextended class mixes nt handle hash example following work javascript var actionwrangler emobjectextend emactionhandler var subwrangler actionwranglerextend subwranglerreopen actions wrangle function consolelog wrangled var wrangler subwranglercreate wranglersend wrangle logs wrangled reason nt work try reopen anything else directly mixes callback mixin nt get added mixin well merged typically happens time extended though prototype reopening subclass works fine term merging hash appropriately want make work stop moving actions mergedproperty hack special case hash something else decent argument breaking change original motivation actions allow objectcontrollers able proxy property might app domain might something argument everybody used hash nt know worth seems like bad idea since core object stuff lean fast laden special cases got nothing suggestion would maybe add something guides pointing would work use case mentioned api docs maybe also somewhere routecontroller docs would useful well", "d": "10/2014"}, {"body": "also hit", "d": "10/2014"}, {"body": "ran one apps recently idea improving ergonomics embertesting loop waiting say seconds switch verbose version loop logs reason test still waiting eg embertesting waiting router load embertesting waiting pending ajax requests embertesting waiting scheduled timers possibly including tasks scheduled thoughts implement sounds good cc stefanpenner machty denisnazarov raycohen", "d": "10/2014"}, {"body": "sure default count retries wait helper seems like nice idea", "d": "10/2014"}, {"body": "app handle problem", "d": "10/2014"}, {"body": "workmanw ya like approach", "d": "10/2014"}, {"body": "luke approach intended address issue may know causing tests hang separate work around oct pm stefan penner notifications githubcom wrote workmanw ya like approach reply email directly view github", "d": "10/2014"}, {"body": "timeout length avoid hangforever tests would great would go seconds even", "d": "10/2014"}, {"body": "jamesarosen neck deep location classes router gon na try squash issue additional thoughts revelations since last discussed plow ahead", "d": "10/2014"}, {"body": "experimented number options think closest ended ie nt still use something get", "d": "10/2014"}, {"body": "adding notes believe ultimately duplicate issue using item filtereditems filtereditems defined embercomputedfilterby causes contents unnecessarily removed readded dependent key changes even item continues pass filter jsbin illustrates problem use case simply shown jsbin views animate dependent filter key changing often additionally particular views complex prefer frequently rerendering", "d": "10/2014"}, {"body": "would like see entire consider using reliable predictable approach comment nt want sound extreme issues caused mis feature kind thing result people giving ember makes question something complex incomprehensible given results surprising unexpected behavior recent sorted array handling fixes numerous issues surrounding feature demonstrates current approach complex get right entirely different approach warranted core team given thought rebooting simplify semantics improve api given current complexity actually implementing reliable cp atop current approach", "d": "10/2014"}, {"body": "core team given thought rebooting arraycomputed reducecomputed simplify semantics improve api given current complexity actually implementing reliable cp atop current approach yes lack time act current pushes need complete circle back interested could use extra help", "d": "10/2014"}, {"body": "stefanpenner yes time issue barely get need get done sleep something documented anywhere intended way forward minefield arround already cost time project point ripping anything arraycomputed reducecomputed negative payoff get unpredictable behavior performance benefit despite documentation suggests entrie array recomputes property change cases views rerender items removed readded nt given remove acrc agreed way forward could looking moving right direction least share whatever inclusion future pr", "d": "10/2014"}, {"body": "ahacking several thoughts one thought resonates putting energy diffing container view would allow us longer require maintaining array uniqueness one big goals rcac many usecases suspect recomputing entire set data coupled diffing result much better performance sanity reasonable n ala react additionally may also solve eager array observers nov meeting chicago quarterly inperson session hope related rfc going even nt believe acrc important topic hope concise path forward exist feel pain acrc narrow success path currently thoughts nt hesitate share one thing problem needs owner someone give thought attention needs unfortunately everyone capable interested likely already saturated hopefully change", "d": "10/2014"}, {"body": "happy work rfc someone couple things mind like rewrite mapsortfilter fully lazy way cp two strategies tracking array mutations diffing technique strengths generally speaking diffing better ergonomics", "d": "10/2014"}, {"body": "another bin believe shows issue editing item list item results multiple items list mutated instead one edited post discuss issue well work around refactor appapplicationcontroller emberarraycontrollerextend sortproperties manufacturer asc modelname asc series asc filteredcontent embercomputedfilter model function model return modelget isactive property model eachisactive sortedcontent embercomputedsort filteredcontent sortproperties property filteredcontent", "d": "10/2014"}, {"body": "seeing issue simple sorted arraycontroller item gets moved arraycontroller resorting item seems get destroyed recreated gets inserted correct spot array came upon thread asking problem stack overflow included jsbin shows itemcontroller logging method every time moves essentially problem talking", "d": "10/2014"}, {"body": "would possible update version ember refactoring go expected issues ticket aggregating months months old respectively", "d": "10/2014"}, {"body": "perrierism go canary time merged weeks later beta weeks later stable lots time catch bugs stuff possible might fast forwarded active beta time completion depending impact firm date unfortunately provide", "d": "10/2014"}, {"body": "stefanpenner appreciated impact seems render dynamic collection items properties actions means app dead water probably implementation use honestly reading documentation looking lot examples idea supposed done flavor terrible hack thing came close working upgrading errors started refactoring expecting find better implementation idea supposed done magical combination collectionview itemviewclass arraycontroller itemcontroller hacking init methods knows", "d": "10/2014"}, {"body": "perrierism sorry extra time would work unfortunately realjob obligations makes hard", "d": "10/2014"}, {"body": "oh man fixed soon soooo happy rush though smile", "d": "10/2014"}, {"body": "fastforwarding changes beta done impact would pretty huge least", "d": "10/2014"}, {"body": "major rewrite please add select without hacks explain somewhere use emberdata see", "d": "10/2014"}, {"body": "update issue worked master issue", "d": "10/2014"}, {"body": "wat rondalesc wonderful prs merged going close", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "got problem created jsbin recreating curious", "d": "10/2014"}, {"body": "worth encounter error app ends dynamic segment route like without issues browser refresh using ember", "d": "10/2014"}, {"body": "took pass additional documentation looks like may missing something key pressupdown methods though since ca nt seem get working advertised continue investigate update documentation necessary", "d": "10/2014"}, {"body": "xpost ping case important release suggest close", "d": "10/2014"}, {"body": "rwjblue current workaround access component inside yielded block content currently possible jsbin demonstrates use case example somerandom somerandom componentssomerandomhandlebars", "d": "10/2014"}, {"body": "ppcano afaik still need use alternative update jsbin working example also updated method mirror current component implementation yield function context options var view optionsdataview var parentview thisparentview var template emberget template", "d": "10/2014"}, {"body": "ppcano also ongoing discussion according krisselden comment probably used solve issue", "d": "10/2014"}, {"body": "rpflorence hbs controller template xpanel xpanelheader something interesting componentisopen else xpanelheader xpanel prop needed controller user customize component template based state could pass prop controller seems unnecessary user perspective nt want make new prop wants customize template think better way", "d": "10/2014"}, {"body": "think", "d": "10/2014"}, {"body": "multiple panels though", "d": "10/2014"}, {"body": "yeah sounds terrible nt find inside terrible probably works well lot things", "d": "10/2014"}, {"body": "could always specify context alternativey labels within component statements", "d": "10/2014"}, {"body": "keyword could jsbin oh using alternative private apis right", "d": "10/2014"}, {"body": "ssot branch", "d": "10/2014"}, {"body": "searls yeah since use branch ember data designed fix relationship bugs increase consistency adding removing relationships sides relationship eg add remove one side postget comments show side commentget post merged regressions fixed let us know", "d": "10/2014"}, {"body": "thanks response fivetanley case think issue unrelated think ticket", "d": "10/2014"}, {"body": "wagenet think linked wrong issues reopen", "d": "10/2014"}, {"body": "relation bug raised bug raised still relevant", "d": "10/2014"}, {"body": "looking answer exact problem dynamic fields need enumerate build form input controls seems helpers nt get value variable passed instead get passed variable name ie string example actual value however able figure interim solution custom input helper allows dereference loop variable following code working note using particular case may may limit usefulness ymmv would keen know start implementing general dereference support bound properties nothing particularly obvious jumped initial scan code stefanpenner heads start", "d": "10/2014"}, {"body": "ahacking believe mmun stream work plays nicely either already likely need bit swamped right give thought deserves apologize quick low value response", "d": "10/2014"}, {"body": "update able extract initial solution standalone general purpose helper dereference variable use within context another helper use follows helper apphelpersderefjs import ember ember export default function name options emberassert must specify variable name argumentslength var deref optionsdatakeywords name typeof deref string return deref return name questions betternicer general solution interest pr box ember helper something guide least", "d": "10/2014"}, {"body": "ahacking yes nice solution using subexpressions streams nt use syntax", "d": "10/2014"}, {"body": "mmun thanks guess wait eventual release settle cutting across new goodness something functioning nt want risk stability", "d": "10/2014"}, {"body": "ahacking basically would look like javascript import read embermetalstreamsread export default function derefhelper params options var view optionsdataview var key read params return viewgetstream key little work could make bound eg changes", "d": "10/2014"}, {"body": "mmun thanks ask documentation streams stuff please pardon ignorance aware features benefits new streams work provides", "d": "10/2014"}, {"body": "ahacking nt documentation yet stream rewrite canary still privateinternal api benefits simplifies lot template binding code makes simpler generalize example currently queryparams helper implementation manage bindings nt streamified yet interested could work find emberjs mmun want chat", "d": "10/2014"}, {"body": "exact problem sandstrom workaround meantime", "d": "10/2014"}, {"body": "sounds related simple jsbin issue demonstrates property change causes affected item removed entire array recomputed", "d": "10/2014"}, {"body": "hjdivad interested second scenario mentioned earlier could give example happening ahacking jsbin example scenario want make sure understand would happen seems like something could bite ass p although observers triggered properties set existing values triggered dependencies chains changed even nt result changes actual value hjdivad", "d": "10/2014"}, {"body": "stefanpenner thanks comment would great addition guide sin emberjscom", "d": "10/2014"}, {"body": "jayphelps bugging cause really really want keep racehorse", "d": "10/2014"}, {"body": "working right meow pr weekend yippy", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "woooo thanks jayphelps thanks heaps pushing forward", "d": "10/2014"}, {"body": "welcome working adding autoscrolling automatically even route waits promises separate pr coming shortly", "d": "10/2014"}, {"body": "love go go go", "d": "10/2014"}, {"body": "jayphelps fix native browser scrolltoanchor behavior", "d": "10/2014"}, {"body": "mmun thing scrolling inside route transitions without delay otherwise browser native autoscroll nt keep looking dom people nt solve issue next phase manually recreating affect transition done making work even almost done said pr", "d": "10/2014"}, {"body": "jayphelps take look reactrouter know recentlyadded feature people seem like", "d": "10/2014"}, {"body": "machty ca nt seem find code referring see pushpop scrolling behavior imo ember core afaik rejected several times may misremembering though", "d": "10/2014"}, {"body": "thanks ongoing work jayphelps people including attempted implement twitter bootstrap scrollspy ember main stackoverflow question ember amp scrollspy implies getting scrollspy working dependent issue working confirming understanding think fix issue fix issue bootstrap scrollspy", "d": "10/2014"}, {"body": "sure since never used scrollspy anything say would conjecture however knowing definitely pull test since seems like legit use case support keep thread apprised", "d": "10/2014"}, {"body": "cheers", "d": "10/2014"}, {"body": "bryanhunt thanks much raising saved hours digging around best part error happened hit url page directly transitioned another area app worked fine", "d": "10/2014"}, {"body": "working canary today", "d": "10/2014"}, {"body": "pwfisher awesome news thanks confirming", "d": "10/2014"}, {"body": "anyone stumbling example wagenet describes", "d": "10/2014"}, {"body": "maybe dumb question attributes supposed constants could way declaring specifically rather building behaviors affect computed properties work based capitalization behavior really hard track manifested several bizarre behaviors around calculated properties dependent capitalized attributes luck attempts figure ran exception chainnodeprototypeunchain led thread lost many hours circling smelled like bizarre conventionsrelated behavior discarded theory usually problems turn mistakes fortunately solution pretty easy aliasing properties using lowercased names using aliases dependents super hard track", "d": "10/2014"}, {"body": "fyi fixed introduction library currently beta scheduled release", "d": "10/2014"}, {"body": "also seeing issue", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "easy miss guides believe issue warning nested found", "d": "10/2014"}, {"body": "yea agree atleast throw warning", "d": "10/2014"}, {"body": "agree really want ability bind individual css properties property view without jump hoop generating valid string api would similar way bind classnames eg opposed would privilege contribute likely accepted", "d": "10/2014"}, {"body": "seems like good addon", "d": "10/2014"}, {"title": "permission denied access property type firefox jquery", "body": "logging frequent javascript errors freecivweb using track js discovered frequently occuring error freecivweb following javascript error file line error permission denied access property type error occurs firefox browser error occurs initially first page load starting new game url jquery version jquery ui version help resolving issue would greatly appreciated andreas", "num": "1826", "d": "10/2014"}, {"title": "height hidden element css height", "body": "element height inside hidden element jquery returns becouse getcomputedstyle return suppose return actual pixel value", "num": "1825", "d": "10/2014"}, {"title": "figure put bug tracker directions", "body": "since migrated trac longer introduction text presented new bug attached link contributingmd text please review guidelines contributing repository suggests might want put variation text file question near beginning report bugs section reference text thanks coming report bug suggest feature jquery reporting please take minute make sure right place file issue search existing similar tickets create minimal test case jsfiddlenet jsbincom demonstrating issue remember team supports recent versions report bug version example read report bugs creating ticket file bug jquery issue tracker", "num": "1824", "d": "10/2014"}, {"title": "error thrown ready handler subsequent handlers invoked", "body": "jquery version browser browser testcase please take look jsfiddle example example works fine edit old improper test case problem error thrown one handlers registered docuement ready subsequent handler invoked addl info happening error thrown handler function registered ready jquerycallbacksfire refer line invoke user ready handler function related piece code error thrown firing flag reset false due handlers registered error triggered refer line firing true list amp amp firingindex lt firinglength firingindex list firingindex apply data data false amp amp optionsstoponfalse statement invokes ready handler memory false prevent calls using add break firing false looks like firing flag need reset finally block workaround obvious workaround handler code need wrapped trycatch avoid issue", "num": "1823", "d": "10/2014"}, {"title": "ajax catch parsererror", "body": "hello catch handler returned instead see error description code js document ajaxerror function event jqxhr ajaxsettings thrownerror consolelog event event consolelog jqxhr jqxhr consolelog ajaxsettings ajaxsettings consolelog thrownerror thrownerror result requesting file works fine errors", "num": "1819", "d": "10/2014"}, {"title": "ignore source bower", "body": "retrieving jquery bower get folder also folder sure case believe source nt included bower installation adds files project nt need large moment unnecessary nonetheless", "num": "1817", "d": "10/2014"}, {"title": "issue retrieving drop contents via ajax ondrop callback", "body": "please note currently testing chrome browser successful implementing project far tell seems due incomplete conflicting svg implementations across browsers sure issue core issue jqueryui handles dropped elements proposed fix jquery appropriate project user drag drop svg path elements onto svg element caveat ui design purposes technically dragging actual element svg element dragging image svg path element dropped onto svg element run ajax callback tested synchronous asynchronous retrieve render actual path element done using jqueryui appears jqueryui calling setpositionrelative process creating element dropped turn calls jquery css error getting look property css function querying position property exists path element dropping onto svg element apparently nt exist setpositionrelative function called assigning position property manually element querying rendered path element cssrelated functions seem generate appropriate values purposes found single location thought would appropriate use try catch block seems prevent issues trying retrieve css properties elements nt yet exist specifically context drag drop scenario summarized added try catch jqueryjs around line otherwise way get computed value exists use val undefined try val curcss elem name styles catch e fixes issue time reference complete stacktrace", "num": "1816", "d": "10/2014"}, {"title": "css method return wrong value negative percent margin", "body": "css method return wrong value margin hidden element specified negative percent value width returned instead examples css margin css margintop return auto wrong expected css margin width css margintop return wrong expected css margin css margintop return correct css margin css margintop return correct", "num": "1815", "d": "10/2014"}, {"title": "trigger issue", "body": "using method tigger found find input typecheckbox trigger click actually equals b find input typecheckbox click b property checked input changed eventhandler input executed property checked input changed eventhandler input executed nt know trigger designed kind ever think perfectly simulate click event man", "num": "1813", "d": "10/2014"}, {"title": "feature trigger event globally", "body": "would possible officially support triggering event globally question one commonly thought following trigger event item listening source looks like deprecated replacement reason ca nt support feature document make pr helps", "num": "1811", "d": "10/2014"}, {"title": "support xhtml", "body": "sometimes ca nt avoided browser handle html xhtml seems reason jquery nt able handle namespaced xhtml markup since difference dom interface namespace problem jquery ca nt find nodes xhtml document via calls bootstrappingfeature detection code well code handling generated elements fails calls variants need used case xhtml order elements imbued correct dom extensions css etc understand wo nt fix section guidelines references bug unless know something nt dom difference markup comes need specify namespace least feeling many many years osmosis fix less reduces detecting xhtml namespace document load replacing calls testing fix almost certainly take effort fix something fully prepared take preliminary tests positive rather fix lines jquery overhaul entire infrastructure posting issue see general sentiment glean historical information", "num": "1810", "d": "10/2014"}, {"title": "execution applicationldjson ajax page load", "body": "could even type scripts executed ajax page load", "num": "1807", "d": "10/2014"}, {"title": "jquery bind function undefined throw error", "body": "hi code view document click undefined method bind event ca nt defense unfunction bind event brwoser throw error tip click anywhere browser commit", "num": "1805", "d": "10/2014"}, {"title": "send contenttype header post method regardless request body", "body": "see discussion", "num": "1804", "d": "10/2014"}, {"title": "animate scrolltop delay instead animate scrolltop duration", "body": "lot testing delayed seems normally animation duration case actually delay start scrolling setting cause delay scrolling cause delay pages animate scrolltop pagesheight cause delay pages animate scrolltop pagesheight wont strange normally supposed animation duration nt instantly scroll eases chosen slow weird jquery chrome official build windows", "num": "1803", "d": "10/2014"}, {"title": "ajax sends contenttype textplain post data empty changed non empty beforesend", "body": "problem add field ajax post request done using works perfect except requests empty data example requests suddenly textplain contenttype beforesend said contenttype applicationxwwwformurlencoded beforesend lied jquery versions affected see", "num": "1801", "d": "10/2014"}, {"title": "multiple element version", "body": "jquery useful method called lets check whether element set matches certain selector side note documentation could use improvement right clear documentation multiple elements warere matched however way check whether elements set match selector propose solving adding method method would identical except would return true elements jquery object matched provided selector", "num": "1800", "d": "10/2014"}, {"title": "question mark replaced", "body": "originally reported code follows code ends parameter content value content replaced similar content jquery code jquery code end codes maybe need optimize issue reported jquery", "num": "1799", "d": "10/2014"}, {"title": "jquery caching delete request android", "body": "originally reported knobli trying use ajax jquery send delete request android phonegap app like function removeobject id ajax type delete url getapiurl objectphp data id id cache false done function data datasuccess alert success else alert failed looks like response cached first request successful sent backend second one another id also successful never get backend issue js chrome ios workaround put mathrandom variable ur ajax type delete url getapiurl objectphp mathrandom mathrandom issue reported jquery", "num": "1798", "d": "10/2014"}, {"title": "deferred api deferredprogress still available deferred object resolved rejected", "body": "originally reported yuuuuc jquery documentation say calls notify deferred resolved rejected progresscallbacks added ignored read jquery source code progresscallback locked deferred object resolved rejected notify called call resolve reject progresscallback disabled notify called call resolve reject progresscallback locked issue exist version jquery check code example issue reported jquery", "num": "1797", "d": "10/2014"}, {"title": "jquery element triggering events wrap", "body": "originally reported lckooo dynamically create div using jquery use wrap another element using jquerywrap method bind events wrapper nt get triggered see fiddle issue reported jquery", "num": "1796", "d": "10/2014"}, {"title": "css marginright memory leak", "body": "originally reported flexphperia found memory leak reliablemarginright function memory leak created call elementcss marginright jsfiddle test case open address chrome open developer tools make heap snapshot click button jsfiddle example red element removed make another heap snapshot browser tools compare snapshots find one htmldivelement detached dom keeping reference reliablemarginright function fix adding line jquery uncompressed code fix problem docelemremovechild container divremovechild margindiv new line issue reported jquery", "num": "1795", "d": "10/2014"}, {"title": "attributecontainsword selector work attributes newlines", "body": "originally reported gharlan attribute contains newline characters attributecontainsword selector work would expect divs red issue reported jquery", "num": "1794", "d": "10/2014"}, {"title": "change tag npm", "body": "originally reported mgol turns npm install jquery npm actually first recognizes valid semver range nt look tag recently caused issues npm banned ranges npm master rule enforced therefore change tag something nt valid semver range verified via require semver validrange tagname return null issue reported jquery", "num": "1793", "d": "10/2014"}, {"title": "select text input field using jquery onfocus event", "body": "originally reported brianpow background plan select whole text inside input field user focus field enivronment win bits bits method function jquery document focus xxx function xxx thisselect result jqueryon work text selected use addeventlistener instead works well jqueryon addeventlistener work test case issue reported jquery", "num": "1792", "d": "10/2014"}, {"title": "getjson treats request jsonp url contains two question marks", "body": "originally reported stijn similar duplicates data parameter url parameter happens current stable edge fiddle code getjson getjson getjson requests get get get course nt making requests two question marks naive string concat side could dupe mentioned ticket figured worth reporting anyway issue reported jquery", "num": "1791", "d": "10/2014"}, {"title": "calling empty disabled callbacks object reenables", "body": "originally reported thedistantsea earlier today answered stackoverflow question wherein behavior shown var c callbacks var f function cdisable cempty cadd f cdisabled course true cfire invokes f behavior occurs versions jquery tested latest fiddle easily reproduce problem disable relies setting internal variables callbacks object undefined methods add test condition abort true empty instead resets variables causes abort test methods erroneously pass ultimately callbacks added invoked disabled object issue reported jquery", "num": "1790", "d": "10/2014"}, {"title": "contains value attribute selector working", "body": "originally reported alexeykay firefox chrom works expectd logs values hello hello emulator real one logs non existing values well add fix check value nothing document ready function input typehidden id hf value function index consolelog val issue reported jquery", "num": "1789", "d": "10/2014"}, {"title": "ajaxjs environments nt location variable break", "body": "originally reported brianblocker appears change removes ie workaround ajaxjs breaks environments windowlocation specific ajaxlocation locationhref try run automated tests using jasminenode location undefined browser sorta therefore test breaks using previous version works fine appears change introduced breaks environment issue reported jquery", "num": "1788", "d": "10/2014"}, {"title": "way globally clean data", "body": "originally reported mgol element data leaked example detachedoffdom lost reference way get rid data matters tests run watch mode leaks accumulate amp crash browser alternative seems initializing jquery scratch desire clean environment little difficult due fact jquery nt expose initializing function lib would loaded easynatural many test frameworks angular betas recently switched use jquery instead problem arisen see issue reported jquery", "num": "1787", "d": "10/2014"}, {"title": "android erroneous handling script exceptions", "body": "originally reported mgol one test ajax one manipulation concern throwing errors async scripts failing android see eg may needed blacklist tests way prevent behavior probably nt one see also issue reported jquery", "num": "1786", "d": "10/2014"}, {"title": "disable failing tests android eg failures appending checked radios", "body": "originally reported mgol currently almost android failures concern appending checked radio buttons see fixing make android test run almost green one issue left issue reported jquery", "num": "1785", "d": "10/2014"}, {"title": "issues using shadowdom shadowroot elements", "body": "originally reported rictic jsbin link reproduce try chrome firefox domwebcomponentsenabled turned element shadow dom appears ways contained document offset assumes element nt contained document disconnected returns offset top left offset checks see element disconnected could try walking dom checking parentnode contains also looking host one travels shadow root containing element issue reported jquery", "num": "1784", "d": "10/2014"}, {"title": "jquery trigger method nt populate currenttarget", "body": "originally reported arkadykarev problem see subject makes jquery completely compatible libs uses currenttarget example following example work correctly go vegetables gt cucumber press activate next button perform radio button changes attached handlers triggered click radio buttons manually see changes price description etc following workaround help var event jqueryevent change eventcurrenttarget eventtarget parent parenttrigger event anyway seems like jquerry bug also found requests gwt groups issue reported jquery", "num": "1783", "d": "10/2014"}, {"title": "ajax requests binary data throw errors chrome", "body": "originally reported cbroome related issue code starting line complete xhrsuccessstatus xhrstatus xhrstatus xhrstatustext support accessing binarydata responsetext throws exception typeof xhrresponsetext string text xhrresponsetext undefined xhrgetallresponseheaders ticket fix throw exception ie browsers however chrome throws exception well accessing xhrresponsetext advocating jquery handling binary data another ticket left plugins like see conditional typeof xhrresponsetext string changed something safer xhrresponsetype text amp amp xhrresponsetext string something similar long check nt throw exception current state prevents launching complete callback binary data response even though text inessential parameter defaulted undefined thanks issue reported jquery", "num": "1782", "d": "10/2014"}, {"title": "basic authentication work jsonp", "body": "originally reported driz sending basic authentication credentials jquery ajax request like nt work datatype jsonp changing datatype json works however need use jsonp cors following workaround issue reported jquery", "num": "1781", "d": "10/2014"}, {"title": "download builder", "body": "originally reported dmethvin let official download builder issue reported jquery", "num": "1780", "d": "10/2014"}, {"title": "syntax errors minified sources", "body": "originally reported bergi current versions syntactic errors minified distribution files prevents compilation strict mode try execute prefixed use strict syntax error functiondeclaration statement context sure means look stackoverflow question familiar build process might either bug minifier wrong usage minifier problems custom build process jquery fault please file upstream bug used minifier", "num": "1779", "d": "10/2014"}, {"title": "remove coreready hard dependency deferred", "body": "originally reported mgol deferred unavailable eg removed via custom compilation coreready implementation fall back standard promise issue reported jquery", "num": "1778", "d": "10/2014"}, {"title": "mixing delegated direct click handlers behaves differently ie windows phone", "body": "originally reported amasniko got fixed positioned overlay direct click handler attached top absolutely positioned element delegated click handler every browser tried clicking absolutely position element invokes delegated handler except windows phone os version overlay handler called try clicking click text following example issue reported jquery", "num": "1777", "d": "10/2014"}, {"title": "error animate plain object", "body": "originally reported dmethvin sure animate intend support generic object code raise exception uncaught typeerror use operator search opacity undefined var opacity animate opacity try use css set opacity change name var animate works guess might resolvable jquery detect html object sure animate intend support html object issue reported jquery", "num": "1776", "d": "10/2014"}, {"title": "ajaxerror ajaxcomplete firing twice upon abort", "body": "originally reported dwelle aborting jqxhr objects inside ajaxsend results ajaxerror ajaxcomplete callbacks called twice first execution jqxhr status abort second execution throws typeerror read property send undefined jsfiddle tested chrome ff jquery issue reported jquery", "num": "1775", "d": "10/2014"}, {"title": "show animations like show toggle slidedown nt respect css display property initial state display none", "body": "originally reported nicholasbg element class css display property default example display block inline style like display none setting displayed something like toggle cause use class display property toggle work properly even toggle exhibit behaviour tell bug introduced jsfiddle demonstrate bug see working normally change jquery version something remove toggle similar case ticket issue reported jquery", "num": "1774", "d": "10/2014"}, {"title": "allow fire callbacks reversed order using callbacks object", "body": "originally reported logo new flag eg reversed could added callbacks object would make callbacksfire method fire callbacks reversed order stackbased execution patterns popular flag would add another possible usage simple yet powerful tool example function value consolelog value function value consolelog says value return false var callbacks callbacks reversed callbacksadd outputs foo callbacksfire foo callbacksadd outputs says bar foo callbacksfire bar issue reported jquery", "num": "1773", "d": "10/2014"}, {"title": "chrome sandboxed app unload available packaged apps", "body": "originally reported solgar hi discovered latest version jquery receive error attempt load inside sandbox chrome app needs done replicate include jquery inside sandbox chrome app created example app replicate error appears related code designed apply far tell issue generates error app loaded appear affect application jquery seems still behave correctly inside outside sandbox issue chrome inside sandbox chrome app furthermore issue version jquery likely added strain issue reported jquery", "num": "1772", "d": "10/2014"}, {"title": "isplainobject returns true instance event", "body": "originally reported compare seems isplainobject event click return false samples use case jquery breaks event instance issue reported jquery", "num": "1771", "d": "10/2014"}, {"title": "fix release script", "body": "originally reported dmethvin metaticket problems encountered release jqueryrelease issues others core releasejs script release tries update jqueryjs jquerylatestjs cdn fails going update anymore freeze remove core releasejs fixed branches npm publish tag fail two different releases worked failed result ended subsequent steps manually note npm publish tag worked fine manually times since npm independent later steps idea error continue jqueryrelease simplify error recovery minimize mess cdn zip files created releasejs empty bytes release nt get far npm error build script never came back shell prompt even got complete message perhaps related zip files empty version packagejson nt seem happen master manually version nt updated bowerjson either old nonsemver format well need repo fulltime exist tagged release see issue issue reported jquery", "num": "1770", "d": "10/2014"}, {"title": "infinite loop empty namespace", "body": "originally reported christian meixner event registered namespace try remove accidentally empty namespacestring enters inifinite loop locking browser window least firefox example document clicka handler document click note trailing dot click aware valid code fail infinite loop blocking browser issue reported jquery", "num": "1769", "d": "10/2014"}, {"title": "define defined error broken build", "body": "originally reported corbacho building custom jquery master branch command grunt build coreready output line define jquery function produces error referenceerror define defined using grunt build know grunt custom recommended alias trying build minimum possible jquery contains necessary code reliable document ready want propose solution part upcoming drupal core alternative domready solution using whole command grunt build coreready exportsglobal exportsamd ajax ajaxxhr ajaxscript ajaxjsonp css deprecated dimensions effects event eventalias offset wrap sizzle queue data css selector traversing serialize builds size domready solution gzipped removing buggy line mentioned works issue reported jquery", "num": "1768", "d": "10/2014"}, {"title": "show break responsive stylesheets", "body": "originally reported stenpaa show called computed display value cemented inline style cause inconsistent behavior fiddle note fiddle use javascript change layout simulates would happen display inline style applied conditionally based responsive media query given block code could produce different results based something like orientation device device orientation really viewport width changed respect showhide calls made understand based fact inline style applied point show called browser rendering styles properly bug suppose comes fact dynamic computed value assumed ok translate fixed inline style resolution may involve finding way clean inline style end show allow styles provided jquery continue exactly showhide invoked issue reported jquery", "num": "1767", "d": "10/2014"}, {"title": "contents children selectors return elements order", "body": "originally reported npben problem exists version looked source since children content selectors hardcoded go logic verifies uniqueness probably situation nt considered examples children contents removing two tags guaranteedunique array fixes issue nt make patch familiar source may better way handle workaround calling add unorderedobject causes uniqueness check sort elements issue reported jquery", "num": "1766", "d": "10/2014"}, {"title": "offsetparent fails recognize transform context", "body": "originally reported jlukic according spec browser behavior using transformation creates new rendering context similar position relative jquery however return offset parent return incorrectly closest container position relative see jsfiddle absolute positioned element relative transformed context reports wrong offsetparent crucial third party libraries use jquery like library semantic ui need determine correct offsetparent using contexts issue reported jquery", "num": "1765", "d": "10/2014"}, {"title": "ie fullscreen inside iframe needs workaround", "body": "originally reported christopher ie bug fullscreen support element made fullscreen inside iframe values offsetwidthoffsetheight results getboundingclientrect small details issue also noticed click positions may opposite direction update ticket find repro issue well issue reported jquery", "num": "1764", "d": "10/2014"}, {"title": "unable trigger checkbox click immediately changing disabled false", "body": "originally reported danspamable bug occurs firefox internet explorer code reproduce checkbox chk prop disabled false chk trigger click see expected results checkbox enabled checked actual results checkbox enabled checked issue reported jquery", "num": "1763", "d": "10/2014"}, {"title": "outerwidth val nt handle selects properly", "body": "originally reported scottgonzalez broken explicitly setting boxsizing contentbox fixes see also issue reported jquery", "num": "1762", "d": "10/2014"}, {"title": "please provide function escaping special characters selectors", "body": "originally reported fejesjoco read article says plain simple colon period must escaped example code also escapes square brackets problem already future may add new special character cool new selector feature breaking change see already many bugs filed special characters selectors closed documented understand completely bug report feature request please provide function escaping special characters selectors benefits easy utility function implement useful many cases people never cared issues realize use escaping mechanism people used run problems special characters used file unnecessary bugs outofthebox solution instead spec changes jquery api changes wo nt breaking change updated escape function would handle new cases quoted documentation suggests copypaste code js jquery helping eliminate kinds code pieces would great embedded also realized much characters could need escaping talking restricted id proposed escape function could handle well hope problem unnecessarily escapes characters selector cases needed issue reported jquery", "num": "1761", "d": "10/2014"}, {"title": "clean empty cache entries", "body": "originally reported psquared even event handlers removed empty cache entry left datapriv unfortunately empty cache entries remain elements removed using method remove causing memory leak test environment chrome jquery steps reproduce attach event handler element eg using remove event handler remove element noderemovechild expected results memory leaks actual results orphaned cache entry remains datapriv example additional info modifying last block jqueryeventremove seems alleviate problem remove expando longer used jqueryisemptyobject events delete elemdatahandle dataprivremove elem events delete dataprivcache elem dataprivexpando issue reported jquery", "num": "1760", "d": "10/2014"}, {"title": "removeattr selected set property false", "body": "originally reported wchen firefox selected value chrome selected value removeattr special handing boolean attributes set corresponding dom property false removing attribute setting dom property false different case specified setting property false means setting dirtiness true changes option react selected attribute changes test case means adding selected attribute end select option firefox respects specified behaviour select second option issue reported jquery", "num": "1759", "d": "10/2014"}, {"title": "textbox responding keyup event", "body": "originally reported sylvain courcoux hi select element textbox element textbox wired keyup event handler checks input numeric using regex clears nonnumeric characters textbox also wired focus event handler check value select element numeric blur textbox basically functionality enter phone numbers problem nonnumeric characters go whereas chrome firefox nonnumeric characters deleted expected sure jquery problem jsfiddle issue reported jquery", "num": "1758", "d": "10/2014"}, {"title": "problem context loading script iframe", "body": "originally reported jjgcastela create script node append head body iframe code evaluated main window jquery loaded instead window iframe able solve adding desired document second argument globaleval function way globaleval function code doc var script indirect eval code jquerytrim code code code includes valid prologue position strict mode pragma execute code injecting script tag document doc amp amp doc document codeindexof use strict doc doc document script doccreateelement script scripttext code docheadappendchild script parentnoderemovechild script else otherwise avoid dom node creation insertion removal using indirect global eval indirect code dommanip function adding parameter call globaleval jqueryglobaleval nodetextcontentreplace rcleanscript doc issue reported jquery", "num": "1757", "d": "10/2014"}, {"title": "update css parser syntax error message", "body": "originally reported waldechristian code throwing syntax errors css parser looks follows throw error syntax error unrecognized expression e practice triggered deep inside third party javascript generates css selectors programmatically results mildly helpful errors like helpful part error message actually contains css selector used confusing side looks like error might come js engine firefox mention upset invalid css selector contains stacktrace ca nt breakpointed trying approach firebug thrown often trying step code many layers earlier call stack simple change error message would make much helpful less confusing throw error css selector syntax error unrecognized expression e issue reported jquery", "num": "1756", "d": "10/2014"}, {"title": "add vagrant support lightweight server", "body": "originally reported eric current unit test instructions advise developers install variant amp heavy install set development environment adding vagrantfile related configuration would allow project ship portable server configuration along code lowering bar new developers clear order run contribute unit testing example vagrantfile available pull request issue reported jquery related", "num": "1755", "d": "10/2014"}, {"title": "investigate implementing jquery specifically init array subclass", "body": "originally reported inspired interesting zepto proposal seems legs us suspect could reduce size well especially issue reported jquery", "num": "1754", "d": "10/2014"}, {"title": "expose interface usedstyle rawcomputedstyle implemented", "body": "originally reported mikesherov help us fix lot autopxpercent issues cantfixed years issue reported jquery", "num": "1753", "d": "10/2014"}, {"title": "edge selfreplacement cases replacewith", "body": "originally reported markelog created ticket per request see essence related bring issue irc channel right fix landed back decided cases rare ones worth given aware kind problems submitted bug tracker lived years without lot attention taking account complexity solution ticket probably would negatively reflect size speed inclined close issue patchwelcome resolution issue reported jquery", "num": "1752", "d": "10/2014"}, {"title": "nt handle attributes digits name well", "body": "originally reported zerkms version affected browser chrome os windows following html var div div consolelog divdata javascript code expect see object one property actual result empty object jsfiddle issue reported jquery", "num": "1751", "d": "10/2014"}, {"title": "triggering focus event namespace runs focus listeners", "body": "originally reported peter using jquery onwards calling trigger focusmyevent focusses target element triggers focus handlers regardless namespace inconsistent events handlers myevent namespace would triggered behaviour appear present tested google chrome version windows issue reported jquery", "num": "1750", "d": "10/2014"}, {"title": "remove size amp andself methods deprecated jquery", "body": "originally reported mgol high time remove jqueryfnsize jqueryfnandself methods deprecated since removing seems fine issue reported jquery", "num": "1749", "d": "10/2014"}, {"title": "support shadowroot nodes sizzle", "body": "originally reported tjvantoll currently shadowroot nodes used sizzle shadowroots documentfragments additional methods adding support might bad issue reported jquery", "num": "1748", "d": "10/2014"}, {"title": "extension point intercepting html dom insertion", "body": "originally reported nicholas company desire filter html strings go methods like html append prevent xss code base quite large thousands references types methods accept html string dom insertion feasible replace instance method call far tell current way intercept html strings insertion suggesting adding kind extension point jquery core would allow someone register function would receive html insertion allow someone change html would actually inserted following potential uses custom xss filters auto linking filters automatically turn email address link example stripping personal data clear suggesting including anything extension point would allow filters written without need basically overwrite html append prepend others manfully check string arguments issue reported jquery", "num": "1747", "d": "10/2014"}, {"title": "jqueryeventfix may force layout", "body": "originally reported anonymous accessing event properties copying like jqueryeventfix event prop originalevent prop may force style recalculation layout screenshots timeline chrome developer tools issue reported jquery", "num": "1746", "d": "10/2014"}, {"title": "empty leaks children attached via documentfragment", "body": "originally reported simon empty cleanly remove children attached via documentfragment issue bug noderemovechild running fiddle sieve demonstrates problem ca nt run jsfiddle create local html minimal test case press button see sieve elements still memory orphaned althought container emptied issue resolved using noderemovenode true test effect removenode fiddle setting usedestorytrue reloading pressing button elements longer leak test case demonstrates issue resolved using noderemovenode false instead noderemovechild example additionally dojo source documents bug right issue reported jquery", "num": "1745", "d": "10/2014"}, {"title": "enhancement selector unwrap", "body": "originally reported nlte unwrap simple removes parent selected elements accepts arguments cases may desirable unwrap condition parent met enabling pass selector unwrap would allow parent matches selector proceed otherwise nothing issue reported jquery", "num": "1744", "d": "10/2014"}, {"title": "jsonp error handler cross origin requests triggered timeout", "body": "originally reported rijoel jsonp error handler triggered http errors eg origin requests immediately cross origin requests timeout occurred easily fixed adding scriptonerror see zeptojs tested browsers affected chrome firefox safari opera affected ie provide patch later issue reported jquery", "num": "1743", "d": "10/2014"}, {"title": "make unit tests work selectornativejs", "body": "originally reported dmethvin would good native selector engine run clean subset unit tests sanity check would nt hurt wait get user feedback though issue reported jquery", "num": "1742", "d": "10/2014"}, {"title": "focus event ignores additional data triggered", "body": "originally reported mail input focus function event extra data consolelog extra data input trigger focus extra data works version work version expected behavior console shows extra data false behavior console shows undefined undefined browser firefox os os x issue reported jquery", "num": "1741", "d": "10/2014"}, {"title": "improve module handling testswarm grunt task", "body": "originally reported stopgap really robust way ensure qunit tests always sent testswarm issue reported jquery", "num": "1740", "d": "10/2014"}, {"title": "html outerheight true returns inconsistent results across browsers", "body": "originally reported jon receiving inconsistent results browsers using html outerheight true goal retrieve actual rendered height document avoiding document height rendered height smaller window height window height returned firefox html outerheight true works correctly window height always returned observe using example run firefox see notice html height matches document height run see notice height approx matches window height document height issue reported jquery", "num": "1739", "d": "10/2014"}, {"title": "create unit test toggleshowhide callback", "body": "originally reported gnarf signature result animated toggleshowhide default duration historically behavior test document see also signature also hold true fade slide issue reported jquery", "num": "1738", "d": "10/2014"}, {"title": "rewrite speed framework based latest sizzle speed tests", "body": "originally reported mikesherov issue reported jquery git", "num": "1737", "d": "10/2014"}, {"title": "add hook cleandata allow cleanup", "body": "originally reported tj crowder jquery needs know element cleaned plugin code perhaps applicationpage code sometimes needs notification well tinymce jquery plugin instance monkeypatches jquery hook empty remove etc clean plugin instance needs respond window resize try might ca nt come way wo nt leave handler lying around programmer using nt call destroy method let face pretty easy fail recommend adding hook event plugins applicationpage code use clearlydocumented caveat almost option used first potential performance implications performance cost normal case one hooked event looks trivially small looking cleandata current dev source looks like comes one extra property test line manipulationjs line number rot eg data amp amp dataevents new dataeventsdestroy new jquery elem trigger destroy efficient way course new pretty cheap quick test machine firefox elements dataevents one dataeventsdestroy average time clear container without cost someone actually hooked event course higher largely irrelevant hooked presumably reason would course somewhat unusual event offthecuff would nt bubble could nt cancelled unusual events happy get details submit pull request tests documentation suggestion legs issue reported jquery", "num": "1736", "d": "10/2014"}, {"title": "allow objects event handlers", "body": "originally reported petkaantonov oop jquery events requires lot proxy boilerplate addeventlistener interface allows passing object handler like function somewidget elem thiselem elem somewidgetprototype constructor somewidget renderto function target target append thiselem thiselemaddeventlistener click thiselemaddeventlistener mousemove mousemove function e click function e handleevent function e return etype apply arguments jquery function somewidget elem thiselem elem method needs bound instance also overhead creating many functions thismousemove proxy thismousemove thisclick proxy thisclick somewidgetprototype constructor somewidget renderto function target target append thiselem thiselem click thisclick mousemove thismousemove mousemove function e click function e jquery supporting objects event handlers would work like function somewidget elem thiselem elem somewidgetprototype constructor somewidget renderto function target target append thiselem thiselem click mousemove mousemove function e click function e handleevent function e return etype apply arguments proxy hacks redundant creation functions retain binding issue reported jquery", "num": "1735", "d": "10/2014"}, {"title": "move element cache element expando avoid cleanup reduce code", "body": "originally reported johndaviddalton soo way back dean edwards proposed event system slapped listeners actual element allowed cache destroyed element gced weekend peter michaux proposed similar solution noticed jquery supports events vanilla objects change would align elements objects gist since jquery already adding expando uid use property actual storage element code recursively clean removeded elements eventcustom data could removed element gced data destroyed issue reported jquery git", "num": "1734", "d": "10/2014"}, {"title": "sourceurl support scripts loaded dommanip using xhrs", "body": "originally reported vsevik ticket inspired discussion chrome developer tools mailing group sourceurl way give name script executed eval debugging purposes see adding sourceurl scripts loaded dommanip would make debugging easier example head append similar different request closed wontfix earlier comments reasons mentioned developers need debugging yes valuable developers comes virtually zero cost users useful chrome users sourceurl supported firefox webkit chrome safari makes together browser market share limited use names would need randomly generated example mentioned url could taken src attribute script tag url script loaded vsevolod vlasov webkit reviewer issue reported jquery", "num": "1733", "d": "10/2014"}, {"title": "preserve url hash requesting via ajax", "body": "originally reported pferreir trying inject facebook like button js page execution time got funny behavior var fjs script first attr async true src connectfacebooknetenusalljs amp appidxxx insertbefore fjs fails equivalent call var fjs script first get var e attr async true src connectfacebooknetenusalljs amp appidxxx get fjsparentnodeinsertbefore e fjs works ok tried different combinations nativejquery elements fail happens least since issue reported jquery git", "num": "1732", "d": "10/2014"}, {"title": "run jquery unit tests xhtml", "body": "originally reported dmethvin need run unit tests xhtml doctype ensure everything passes issue reported jquery", "num": "1731", "d": "10/2014"}, {"title": "upload property xmlhttprequest", "body": "originally reported superbulldeng upload property xhr object returned new xmlhttprequest supported browser object returned ajax seems nt contain property property important get state file upload progress issue reported jquery", "num": "1730", "d": "10/2014"}, {"title": "window outerwidth include scrollbar width", "body": "originally reported antti sometimes annoying window width window outerwidth include scrollbar width value especially trying match window width css media queries currently eg media query css media screen maxwidth body background red red background actually applied document browser jquery tells window width less scrollbar width annoying eg cases mobilespecific stuff needs done css js would need done exactly width documentwindow however plain javascript returns window width asked point breakpoint follows consolelog windowinnerwidth possible get either window width windor outerwidth working consistently browser actual width document width body width return windowinnerwidth either return window width window outerwidth fixing would greatly help making consistent code css media queries possible workarounds currently using plain javascript ie windowinnerwidth checking visible element visible target width example mean issue reported jquery", "num": "1729", "d": "10/2014"}, {"title": "jquerydata first access performance bad", "body": "originally reported daliuskal first time later first run extremely slow jquerydata el already called note key nt matter bug seems started version jquerydata rewritten using first case takes first time times affecting jquery ui performance badly eg first red rectangle drop takes issue reported jquery", "num": "1728", "d": "10/2014"}, {"title": "migrate open issues bugsjquerycom github", "body": "", "num": "1727", "d": "10/2014"}, {"title": "add global ajax beforesend event", "body": "originally reported joshpeek adds global ajaxbeforesend complement local beforesend event issue reported jquery", "num": "1726", "d": "10/2014"}, {"title": "allow users respond ajax event states", "body": "originally reported hungerandthirst jquery docs explicitly state onreadystatechange mechanism provided however since success error complete statuscode cover conceivable requirements frankly think limiting users unnecessarily want respond something get headers back want know start receiving content back server excellent example using jquery bandwidth testing without way detect initially receive content back server beforesend also include delay spent waiting server respond added support receiveheader loading event per xmlhttprequest specs pull request would also like see support onreadystatechange well since valuable states limiting losing value tracking issue reported jquery git", "num": "1725", "d": "10/2014"}, {"title": "width height etc nt round", "body": "originally reported john right rounding answers width height etc nearest pixel makes hard good positioning elements especially animations example items width inside element returning element theoretically animation method might able return interesting result know extra fractionalnumbers getting rounded got report directly mozilla agree particular change makes hard get good numbers see also issue reported jquery", "num": "1724", "d": "10/2014"}, {"title": "fadeto doesnt work position different static aplied child element faded", "body": "originally reported alexanmtz see live example fadein opacity animation nt work applied element child position different static browsers work expected except issue reported jquery", "num": "1723", "d": "10/2014"}, {"title": "improve api interoperability standard promise", "body": "originally reported jzaefferer discussed jquery team meeting amsterdam spec still changing lot within whatwg draft pages github wait ship unprefixed behind flag stable browsers first happened changefix implementation match spec shipped implementation use pipe continue using jqueryspecific functionality", "num": "1722", "d": "10/2014"}, {"title": "form input element name nodename", "body": "use jquery error uncaught typeerror undefined function", "num": "1721", "d": "10/2014"}, {"title": "html method give warning dropping malformed tags", "body": "call contains malformed tags malformed tags silently dropped example silent warning logged", "num": "1718", "d": "10/2014"}, {"title": "chrome jqueryajax fails without calling errorcomplete handlers requesting", "body": "making ajaxrequest page loaded request blocked chrome neither error handler complete handler functions called safari request succeeds warning success complete handlers called firefox request fails error complete handlers called example", "num": "1717", "d": "10/2014"}, {"title": "create xhr", "body": "originally reported jzaefferer amsterdam team meeting create xhr based ajax without legacy options async false things specific nonxhr jsonpscript options keep beforesend expose native xhr cover removed xhrfields option cache possibly rename something like nocache data string use default param append url get requests otherwise send request body today headers method aka type username password url timeout options remove accept use headers async use different method sync requests contents custom parsing contenttype use headers context use proxy converters global hash convertors crossdomain nonxhr datafilter datatype jq use response contenttype global everything consistent ifmodified make plugin islocal expose localprotocols global config array instead jsonp nonxhr jsonpcallback nonxhr processdata knows one sending xml documents anymore right scriptcharset nonxhr statuscode handle responses mimetype override stuff scriptcharset nonxhr successerrorcomplete legacy traditional convert data option string param true xhr xhrfields use beforesend instead first step would delegate ajax eventually possible build jquery interface without methods like get getjson even ajax", "num": "1713", "d": "10/2014"}, {"title": "width value sets incorrect width value block border value specified ems boxsizing borderbox", "body": "originally reported tde api documentation specifies note width value sets content width box regardless value css boxsizing property two key factors leading bug boxsizing borderbox solid black width specified ems code reproduces bug", "num": "1712", "d": "10/2014"}, {"title": "relative percentage values work animate css", "body": "originally reported jwagner moves item pixel instead works expected adds docs suggest css animate behave identically similar really mean similar identical would help give hint docs relative percentage values supported css problem shows current chrome firefox fiddle reproduce", "num": "1711", "d": "10/2014"}, {"title": "clean support comments compat branch", "body": "originally reported dmethvin sure practical cherrypick several additional code blocks need cleanup ref", "num": "1710", "d": "10/2014"}, {"title": "remove sizzle expando clone action", "body": "originally reported jogi issue space selector jquery internet explorer exemple testcls nameblabla find anything older version work jsfiddle", "num": "1709", "d": "10/2014"}, {"title": "position table rows inside relative div container gives different results based scroll position", "body": "originally reported ripdog docs position clearly state return current position element relative offset parent explicitly position based viewport however position report different results based moved page due scrolling fiddle click button scroll click offsettop direct dom stays constant position changes", "num": "1708", "d": "10/2014"}, {"title": "sourcemappingurl comment removed bower build", "body": "hi installed v bower minified version still comment pointing map file conflicts stated official download page hint circumvent issue contribute", "num": "1707", "d": "10/2014"}, {"title": "expr jqueryexr nt work expected", "body": "expr nt work nt work want create userdefined selector using code javascript jquery user selector body div width paddingleft fontsize lineheight backgroundcolor eee function extend expr function elem index match var arrsinglematch split return arrsingle amp lt index amp amp amp amp index amp lt arrsingle jquery lt p gt function var lt lt div gt lt div gt appendto body div css background color fff lt script gt search many pages look books turtorials find reason code nt work failedfew people use expr many people maybe need create userdefined selectorbut find reason comparing older version jquery finally use run code works nt work expr index argument true index element argument javascript jquery user selector body div width paddingleft fontsize lineheight backgroundcolor eee function extend expr function elem index match var arrsinglematch split index true index elem consolelog index return arrsingle lt index amp amp index lt arrsingle jquery function var lt lt div gt lt div gt appendto body div css background color fff lt script gt expr index argument time index true element index javascript jquery user selector body div width paddingleft fontsize lineheight backgroundcolor eee", "num": "1706", "d": "10/2014"}, {"title": "fix get alpha opacity", "body": "setting opacity element according use note filter upper case jquery currently support getting result setted lower case like see demo also msdn upper case lower case used examples pr", "num": "1705", "d": "10/2014"}, {"title": "broken link", "body": "huge issue url right seems broken", "num": "1703", "d": "10/2014"}, {"title": "feature request resolve jquery context parameter first parameter selector", "body": "eg resolve compare", "num": "1702", "d": "10/2014"}, {"title": "safari detected ie lt", "body": "case safari get body zoom forcibly set check", "num": "1701", "d": "10/2014"}, {"title": "method retrieve request headers sent", "body": "native xmlhttprequest api nt methods get request headers would useful add one jqxhr object facilitate debugging test automation direct calls pass directly fullproof way get request headers sent would need take consideration headers added via user requests dating back suggest would useful feature request headers showing google autocomplete searching jqxhr get", "num": "1700", "d": "10/2014"}, {"title": "ie nt fire event input elements", "body": "listening event consistent across browsers minimal test case javascript var input documentqueryselectorall input inputindeterminate true input change function alert change jsfiddle chrome firefox event fires element clicked input needs clicked twice remove state fire event possible work arround issue manually firing event input elements javascript browsers already fire change event bind listener ie windownavigatoruseragentindexof trident gt checking user agent firing event could probably detected creating input element triggering", "num": "1698", "d": "10/2014"}, {"title": "misleading documentation toggleclass method", "body": "third variation toggleclass method documentation follows toggleclass switch switch type boolean boolean value determine whether class added removed says class particular class specified toggles class names present matched elements would great documentation reads side note also later point docs says arguments passed toggleclass class names element first time toggleclass called toggled would nice added first variant method along better description class names element first time toggleclass called toggled something like class names present element toggleclass called first time toggled better imho", "num": "1696", "d": "10/2014"}, {"title": "ajax abort unload requires event module", "body": "fix put following xhrjs however makes xhr dependent events create custom build events give error nt support property method supports windowonbeforeunload may use instead", "num": "1695", "d": "10/2014"}, {"title": "isemptyobject return true string", "body": "isemptyobject bugaga returns true browsers false jquery", "num": "1694", "d": "10/2014"}, {"title": "make jquery collections forofable", "body": "chrome added support proposing jquery collections made compatible statement achieved line discussion twitter live demo view chrome", "num": "1693", "d": "10/2014"}, {"title": "improve performance removal events namespaces", "body": "found doochik probably happens recursion still fast though absolute numbers wonder could better thinking could something hurt byte size otherwise much edge case something drastic", "num": "1692", "d": "10/2014"}, {"title": "download builder", "body": "let make one people ca nt complain hard", "num": "1691", "d": "10/2014"}, {"title": "jqueryfnoffset returns incorrect values elements shadowroot", "body": "offset function documentation states get current coordinates first element set coordinates every element set matched elements relative document however reality returns coordinates relative closest parent documentfragment shadowroot demonstrate set simple test test also contains simple patch fixes problem set browsers tested chrome firefox ie sure handle setcoordinates part function behavior nt really use patch handles get path bunch libraries depend offset affected setup tests couple", "num": "1690", "d": "10/2014"}, {"title": "inconsistent behavior passing bools html method", "body": "versions jquery calling method produces two different behaviors look test case see two elements html set test case uses latest version jquery see behavior test case using latest version jquery following version backwards see following version test case neither html calls write anything elements version future versions test case calling html true writes true element calling false writes nothing serious issue would preferable html method act boolean values behavior wrote nothing least consistent true false seems html either go back writing nothing cases writing true true false false behavior tested chome safari firefox identical behavior seen three browsers", "num": "1689", "d": "10/2014"}, {"title": "selector bug", "body": "problem issue known issue clonesadds nonstandard element page adds blank prefix tag includes colon note nonstandard exactly correct standard less common elements also happens jquery selecting blankprefixed elements multistage combo selector works using tagname without prefix using selector pattern like refer example clearer understanding affected browsers know applies doubtful applies versions ie able test update statement nt exactly correct nt necessarily solve issue notice inconsistent behavior use pseudoselectors demo shows bug prefixed colon handled using jquery using pseudoselectors least consistent selecting element tagname whether includes prefixed elements return results hidden behavior found acts like something patch ie prefix bug acts like demo test case testing foo add custom element dom documentcreateelement someelement jquery document ready function var el someelement var clone elclone create copy element original create element blank prefix lt someelement gt lt someelement gt elafter clone method outputlength someelement span length someelement span method outputlength someelement find span length someelement find span method outputlength someelement span someelement span length someelement span someelement span method outputlength someelement visible span length someelement visible span function outputlength label elems var label jquery lt label gt html label var value jquery lt span gt html elemslength var output jquery lt div gt append label value jquery body append output consolelog outputhtml elems incase prefer console", "num": "1687", "d": "10/2014"}, {"title": "hidden selector reports true form style rule display inline chrome safari", "body": "reproduced instance form stylerule display inline contains divelement first child form hidden returns true appears problem occur first childelement form blocknode display block bug also appears chrome safari firefox", "num": "1686", "d": "10/2014"}, {"title": "cors http patch request working", "body": "see latest update", "num": "1684", "d": "10/2014"}, {"title": "change references bugsjquerycom github issues", "body": "least references contributingmd packagejson thx arthurvr may jquerycom amp friends need updated well", "num": "1681", "d": "10/2014"}, {"title": "file input click inside div click function", "body": "open console browser run", "num": "1679", "d": "10/2014"}, {"title": "width rounds widths", "body": "sure issue reproduce starting jquery nt think could hide much time however noted returns rounded width element computed width asserted documentation created dummy demo basically set width element say returns", "num": "1677", "d": "10/2014"}, {"title": "core function remove later version", "body": "know jqueryclean core function convert html text dom nt found version seems like rename jquerycleandata", "num": "1674", "d": "10/2014"}, {"title": "create bowerjson release remove repo", "body": "since nt commit built file change bowerjson file refers nonexistent file someone tries install repo get confusing results use npm internal needs could create commit bowerjson file release time instead leaving repo", "num": "1673", "d": "10/2014"}, {"title": "installation issue bower", "body": "hello try install jquery bower nothing extracted bowercomponents excepted files bowerjson index output get c npm bower install v bower jquery cached bower jquery validate bower jquery new version bower jquery resolve bower jquery download bower jquery resolved bower jquery install jquery etag jquery etag bowercomponentsjquery system info bower version node version os windowsnt something wrong", "num": "1671", "d": "10/2014"}, {"body": "great idea monitor errors definitely find lot way things breaking real life see error thrown inside jquery often indicates problem way code calling jquery sometimes thirdparty plugin ad blocker creates situation nt see testing might expect many people using jquery ca nt front line debugging web site uses suggest start site like stackoverflow jquery forum get help see something clear bug jquery feel free open issue specific repro case", "d": "10/2014"}, {"body": "see note docs value reported height guaranteed accurate element parent hidden get accurate value show parent first using height", "d": "10/2014"}, {"body": "cc dmethvin", "d": "10/2014"}, {"body": "surprisingly hard problem eh think current contributingmd file long people nt reading also overlap content quick patch would say content belongs make sure jquery bug section nt fix problem much read though", "d": "10/2014"}, {"body": "nt directing people file pointing instead perhaps remove content making sure relevant site putting short notice instead would direct site well", "d": "10/2014"}, {"body": "using template sites points back contribute site see example maybe could use work discussion getting right place suspect jquery core repo one likely get misdirected requests", "d": "10/2014"}, {"body": "good idea", "d": "10/2014"}, {"body": "would want us error caught", "d": "10/2014"}, {"body": "could force ready handlers called asynchronously ie replace wo nt solve problem functions added promise directly note using standard promises would even worse handler throwing exception would fail silently nothing else would break making quite tricky know bug also previous implementation lt would go array function call sequentially behave exactly way except adding function document ready", "d": "10/2014"}, {"body": "agreed far obvious fix catch error report somehow otherwise masking problem", "d": "10/2014"}, {"body": "apologies improper test case earlierlet give exact use case example example works fine yes jquery suppress error may correct execute pending handlers queue time first handler throws error cause problem newly registered handlers example ready handler added click button works fine jquery fails jquery looks like uses finally block reset firing flag possible similar fix thank looking", "d": "10/2014"}, {"body": "yes think possible restore version remove considers syntax error jaubourg think", "d": "10/2014"}, {"body": "well know pained remove block first place argument", "d": "10/2014"}, {"body": "according finally supported", "d": "10/2014"}, {"body": "mzgol problem required could nt words catch smilecat", "d": "10/2014"}, {"body": "yeah rethrowing catch ended losing actual context original exception", "d": "10/2014"}, {"body": "ah right good dropping ie lt", "d": "10/2014"}, {"body": "put complete test case jsfiddlecom jsbinnet", "d": "10/2014"}, {"body": "sorry emulate parsererror jsfiddle tried created test site jscode bad js help jsfiddle remove links tests site thank", "d": "10/2014"}, {"body": "test case fine proves point looks like current code returning specific error thrown rather dumbing result sure whether change documentation code change docs say may specific error get benefit finding specific parser error occurred change reflect docs lose detail scabbiaza situation saw generic message help jaubourg reason nt return", "d": "10/2014"}, {"body": "well value third argument given canonical error callback see doc doc page reason happened dumbed values aborts timeouts incidental fact actual underlying error thrown situations convenience third argument thus set value second case http errors http status text provided xhr infrastructure parser errors exception thrown converters see documentation lacking regarding latter fact nt access second argument canonical error callback context rather third one another wonderful design flaws stacking top years thankfully since easily get around using prefilter remember global ajax events evil", "d": "10/2014"}, {"body": "writing ajaxerror handler application found issue created ajaxerror tests work fine except parser error case expected get documentation says possible values thrownerror argument timeout error abort parsererror opinion generic message useful error identification need access error description well", "d": "10/2014"}, {"body": "looking docs nt see guarantee value similar comment code opinion generic message useful error identification need access error description well smile particular case error occurring server returned invalid json either something rare encountered initial development something decided want harden code example bad thirdparty servers second one could get input text parse would allow provide detailed diagnostics prefer", "d": "10/2014"}, {"body": "well dmethvin assuming control serverside things always case whole argument moot using prefilter solve problem let put solution case guys missed", "d": "10/2014"}, {"body": "jaubourg want get clarity problem reported whether requires action part based current docs nt look breaking documented guarantee contains wondered comment came know", "d": "10/2014"}, {"body": "comes bad understanding definition documentation documentation stated earlier lacking comes hence made things clearer regarding previous comment reason happened dumbed values aborts timeouts incidental fact actual underlying error thrown situations convenience third argument thus set value second case http errors http status text provided xhr infrastructure parser errors exception thrown converters see documentation lacking regarding latter action required docs real actual problem parameters canonical callback available within global handler need fix since prefilters favored global ajax logic anyway provide much consistent complete interface make sense", "d": "10/2014"}, {"body": "see proposition", "d": "10/2014"}, {"body": "agree totally unnecessary people try use source code reference handy folder offline available jquery team even encouraging use source code", "d": "10/2014"}, {"body": "make available jquerycom download provide duplicate bower installation source keep npm bower valid point using source example needed using jquery dependency bower using dependencies source code files download also get included whatever app site make would really care source would also include md files download page found jquery bower package contains additional files besides default distribution cases ignore files however wish download default release use bower install jquery one urls instead registered package example wish install compressed jquery install file following command would reference version wo nt able include map file uncompressed file either also include separately feel nt really way done goes use bower either use npm source provide whatever feels unnecessary", "d": "10/2014"}, {"body": "yeah good point", "d": "10/2014"}, {"body": "duplicate want files", "d": "10/2014"}, {"body": "bower using source code like said keep jquery source npm exclude bower using bower anything else frontend development misusing", "d": "10/2014"}, {"body": "amd modules frontend consumed eg requirejs anything makes less sense include directory npm bower include npm though people would like use npm package way distribute separate files", "d": "10/2014"}, {"body": "basically using jquery requirejs separate branch included concatenated version still feel separated never use files folder would still suggest supply whatever bower", "d": "10/2014"}, {"body": "sth want said drawback files necessary tree kb though nt cause major issues hand maintaining separate packages would quite effort especially integrating release scripts etc would also need mirror npm already plan maintain two packages core would double huge effort little gain see also comment original issue include unminified file needed final app excluding would save space want keep need introduce overhead anyway amd modules separate branch true source code full file built individual ones", "d": "10/2014"}, {"body": "unminified file used debugging often run problem jquery thus need find line breaks nt concern even though duplicates size required jquery amount files main issue using phonegap nodewebkit need compile app file references live without like including readme many pages images alike would also remove nt planning using since maintaining separate package problem already splitting plus jquery packages separate like ui mobile sure current releasescripts setup difference would includingexcluding source folder", "d": "10/2014"}, {"body": "maintain jquery ui amp mobile bower packages afaik right scottgonzalez maintain bower package mainly historical reasons used rely packages internal build system uses npm packages community feels need separate slimmer package fine someone maintaining package feel free create one nt bandwidth need btw need include full packages phonegap bundle rely gruntbowercopy copy files need", "d": "10/2014"}, {"body": "since maintaining separate package problem already splitting keep package moment though plan split anyway maintaining two git branches huge burden gains significant made sense team cases like happen really rarely eg could save space maintaining two sizzle versions felt gains nt big nt result even jquery contains fixes older browsers virtue including sizzle", "d": "10/2014"}, {"body": "since maintaining separate package problem separating code new package programmatically managing repo sake bower already splitting really tags repo managed separate branches model many projects use supporting multiple versions plus jquery packages separate like ui mobile completely separate projects even close situation sure current releasescripts setup difference would includingexcluding source folder nope said releasing source files important option releasing two different packages bower since bower directly tied repositories need duplicate repository bower release without source code mzgol said effort beyond anything else benefit way small", "d": "10/2014"}, {"body": "nt know grunt module thanks might setup fork ignore source files alternative would change distributiontask copy files needed suggested module gruntcopy still feels weird source files bower project bad bower also nt ability use additional parameters situation could say whether would would nt want certain things", "d": "10/2014"}, {"body": "bad bower also nt ability use additional parameters situation could say whether would would nt want certain things seems vaguely related", "d": "10/2014"}, {"body": "given bower npm currently work nothing change repo make everyone happy people want amd modules custom build use requirejs others want built file someone else free create repo contains built file could pull development repo intended use distribution repo create detached heads built files upon releases issue remove bowerjson file since nt support using dev repo way", "d": "10/2014"}, {"body": "quick found solution turns need try catch previous combination jquery jqueryui allowed attaching draggable events rendered dom assuming since everything worked upgrading libraries fixing issue try catch noticed draggable events working flipped code around initializing draggable events elements already rendered dom everything working expected", "d": "10/2014"}, {"body": "fyi version jqueryui using", "d": "10/2014"}, {"body": "please provide test case well precise information browser experience problem without unable help", "d": "10/2014"}, {"body": "examples already provided op like jsfiddle jsfiddle testcase values b values c correct tested firefox ie jquery version", "d": "10/2014"}, {"body": "confirmed simplified related never return resolved value hidden element obvious reasons although nt understand one could find use percentages instead pixels hidden element could use course nt think could remove though since issue longer exist safari oldest android whereas dropping support safari longer support mobile safari", "d": "10/2014"}, {"body": "widthsheights docs already mention results parenthidden elements may accurate nt think swaps show due potential horrific performance past fix would prefer people explicitly make think mess makes wontfix add docs thoughts", "d": "10/2014"}, {"body": "definitely nt jumping hoops get dimensions hidden elements", "d": "10/2014"}, {"body": "actually proposing fix proposing remove old hack already nt need would save us bytes remove unneeded reflow subsequently return expected value case", "d": "10/2014"}, {"body": "meant mention sorry markelog think comment may wrong perhaps mikesherov remembers better nt think fixed year chrome suppose could remove code see fails nt see lot relevant unit tests cssjs moment smilingimp", "d": "10/2014"}, {"body": "nt think fixed year chrome fixed chrome since version nt see lot relevant unit tests cssjs moment tests mikesherov crying loud see related", "d": "10/2014"}, {"body": "already run tests without portion everything fine", "d": "10/2014"}, {"body": "nt know test nt click sounds like safe remove patch", "d": "10/2014"}, {"body": "branch removing quirks browsers dropped try submit pr today", "d": "10/2014"}, {"body": "done see", "d": "10/2014"}, {"body": "intended native dom method essentially performs click click results event dispatched jquery method explicitly event dispatcher side effect native method name called end", "d": "10/2014"}, {"body": "internal function never documented ability trigger events globally nt correspond dom functionality horrible performance implications removed never documented want use jquery events pubsub mechanism trigger events create custom element use trigger", "d": "10/2014"}, {"body": "think would lines jquery fix give try think much harder problem could also look old tickets trac get idea remember newer query methods like nt designed namespaces keep open get chance look search trac might possible refine start", "d": "10/2014"}, {"body": "thanks kind information interested", "d": "10/2014"}, {"body": "provide test case see two issues opened question evidence", "d": "10/2014"}, {"body": "excuse poorly written theme", "d": "10/2014"}, {"body": "correct use method documented valid argument", "d": "10/2014"}, {"body": "send content type body make kind sense blowing thing way proportions nothing content type content earth going", "d": "10/2014"}, {"body": "would mainly empty form post send contenttype", "d": "10/2014"}, {"body": "prefilter beforesend reports incorrect contenttype browser implementation forms followed sends regardless like looks like regression save us bytes blowing thing way proportions nothing provide fix would something drastic", "d": "10/2014"}, {"body": "lots confusion regarding contenttype prefilter contenttype set yet options related data nt dealt yet prefilter want changeaddremove data beforesend data empty course contenttype set case form encoding always ajax requests wrongly use modify data would actually serialized need set contenttype manually anyway bug fix backendproxy would see contenttype attempt parse content fail miserably content empty ajax clientside argument provide fix would something drastic original bug nt contenttype correctly set set modify data beforesend callback empty first place original issue got twisted conversation went lost track fact talking antipattern simple clear solution case nt clear enough use prefilter fact data modified beforesend callback point request lifespan data related information already processed change data prefilter everything works expected set contenttype every requests including ones content open worms serverside reason supporting antipattern clientside classifies blowing thing way proportions", "d": "10/2014"}, {"body": "case form encoding always applicationxwwwformurlencoded ajax requests true pure new method value contenttype header used sometimes always following form logic fully wrongly use beforesend talking talking modifying properties prefilters beforesend method get wrong value even nt touch anything bug fix backendproxy would see contenttype attempt parse content fail miserably content empty neither tickets parser problems post request requests body set contenttype obviously wrong case form contenttype always sent followed logic nt trip serverside scripts case form encoding always applicationxwwwformurlencoded ajax requests nt break server side scripts form requests ajax requests seems unlikely ajax clientside well yeah browserserver communication prefilter contenttype set set request reports set change data prefilter everything works expected nt change anything report wrongly contenttype value ignore argument repeated couple times already", "d": "10/2014"}, {"body": "case form encoding always applicationxwwwformurlencoded ajax requests true pure new method value contenttype header used sometimes always following form logic fully saying good bad find increasingly confusing follow reasonning also sometimes always nt sound like proposing wrongly use beforesend talking talking modifying properties prefilters beforesend method get wrong value even nt touch anything exactly point never talking actual bug bug fix backendproxy would see contenttype attempt parse content fail miserably content empty neither tickets parser problems post request requests body set contenttype obviously wrong know issues empty body contenttype textjson past maybe specific situation happened case form contenttype always sent followed logic nt trip serverside scripts formencoded data empty string acceptable input instance case jsonencoded data case form encoding always applicationxwwwformurlencoded ajax requests nt break server side scripts form requests ajax requests seems unlikely read wrote little thoroughly please ajax clientside well yeah browserserver communication decisions take clientside consequences serverside begin imagine crazy stuff nt happen still prefilter contenttype set set request reports set report set actually report set documentation faith change data prefilter everything works expected nt change anything report wrongly contenttype value ignore argument repeated couple times already repeating fact wo nt make bug earth would want contenttype set particular moment lifespan request poster original bug sure nt inspect value years working never heard single person complain honestly point way could farther removed original bug report started hacking another module altogether keep ignoring fact original bug antipattern consists using rather easily fixed drum rolls using rather", "d": "10/2014"}, {"body": "think jaubourg point nt recurring issue regardless whether people using incorrectly spend time educating users better approaches rather adding even logic actually say instead suggesting use prefilter encourage users type use case create method wraps adds additional piece data necessary reason think approach better works etc", "d": "10/2014"}, {"body": "also sometimes always nt sound like proposing following default behaviour new standart following html forms logic fully fully case jsonencoded data exactly point never talking actual bug trying fix look one previous comment said provide fix bold want understand please patient know issues empty body contenttype textjson past maybe specific situation happened report set actually report set documentation faith repeating fact wo nt make bug course already provided example perhaps missed keep ignoring fact original bug antipattern consists using beforesend rather ajaxprefilter easily fixed drum rolls using ajaxprefilter rather beforesend talking logic please understand also talking original bug report although still nt understand argument ca nt change ca nt get correct values would use otherwise ca nt use document deprecate even remove really transform inflation discussion simple try determine bug", "d": "10/2014"}, {"body": "also sometimes always nt sound like proposing following default behaviour new standart following html forms logic fully fully actually following html forms logic explained several times handle single type content like forms case jsonencoded data ever tried empty expression valid see fiddle send contenttype textjson requests body effectively create faulty requests exactly point never talking actual bug trying fix look one previous comment said provide fix bold want understand please patient always easy get meaning nt feel like patient would nt answered every single question asked p repeating fact wo nt make bug course already provided example perhaps missed mean repeating see show still tell bug confusing settings behaviour reasoning could argue option set yet parameter final url would reply course nt nt request option ignored option ignored requests without body including post requests default behaviour xml consists setting header body yet none provided triggered something funny always found poorly implemented sense called late thankfully prefilters nt suffer limitations keep ignoring fact original bug antipattern consists using beforesend rather ajaxprefilter easily fixed drum rolls using ajaxprefilter rather beforesend talking logic please understand also talking original bug report although still nt understand argument ca nt change ca nt get correct values would use otherwise ca nt use document deprecate even remove gives snapshot options handled prefilters options object used handle options documentation actually quite clear goes suppose though never seen advanced examples callbacks seem always contain basic custom headers setting preemptive aborts important thing settings object contain options never use current request like related ones instance nt mean wrong really transform inflation discussion simple try determine bug already told several times bug keep demanding convinced level detail quite cumbersome timeconsuming us p", "d": "10/2014"}, {"body": "also realize definitely nt clear enough previous comments regarding dichotomy settings behaviour sorry", "d": "10/2014"}, {"body": "jaubourg nt think tried blow anything proportion since one editors xhr spec going information head goal get info head understand reasoning well much discussion obfuscated topic let see summarize least number words possible decide whether anything currently nt set contenttype post request body empty contrast html form post example always sets contenttype however basic nt set contenttype either perhaps nt need body edge case since encoding empty body probably nt affect processing servers fine either way compelling reason change might well leave asis avoid regressions case someone depends current behavior", "d": "10/2014"}, {"body": "fine either way compelling reason change might well leave asis avoid regressions case someone depends current behavior opinion nutshell", "d": "10/2014"}, {"body": "sounds like stay", "d": "10/2014"}, {"body": "please create working example jsfiddle jsbin test", "d": "10/2014"}, {"body": "inactive closing", "d": "10/2014"}, {"body": "workaround set contenttype beforesend provided", "d": "10/2014"}, {"body": "show incorrect contenttype sends", "d": "10/2014"}, {"body": "use change request data designed last call sending callback really useful abort requests preemptively prefilters called much earlier behave expect", "d": "10/2014"}, {"body": "designed last call sending callback really useful abort requests preemptively really usually used documentation also disagrees prerequest callback function used modify jqxhr jquery xml object sent use set custom headers etc jqxhr settings objects passed arguments", "d": "10/2014"}, {"body": "yeah modify jqxhr object settings object dates one reason prefilters introduced", "d": "10/2014"}, {"body": "hm settings object passed get value error set value also error change would cost us anything would make beforesend consistent domain suppose point might moot", "d": "10/2014"}, {"body": "settings object inspection supposed touch guess would locked using thing existed back keep mind really old stuff rewriting lot back forth regarding end needed called stage request order pass unit tests made point keeping lib backward compatible humanly possible anyway point moot making sense far prefilter proper approach one needs change something settings object handled internally callback late", "d": "10/2014"}, {"body": "guessing land end review settings changed time find need reprocessing correctly reflected case prefer add clarification docs saying something like argument considered readonly changes made may reflected request say may suspect might take effect luck", "d": "10/2014"}, {"body": "exactly dmethvin think doc addendum link would work wonders", "d": "10/2014"}, {"body": "dmethvin like far tell option like default value set circumstances different suppose need document js ajaxprefilter function options consolelog optionscontenttype applicationxwwwformurlencoded jqueryajax url method post contenttype header well", "d": "10/2014"}, {"body": "nt reviewed list ajax options see others thinking original goal nt include reprocessing probably nt change", "d": "10/2014"}, {"body": "saying want get bottom additional problem said original report incorrect value even nt change anything ca nt reliable set values object get incorrect values used", "d": "10/2014"}, {"body": "shown getter issue also applicable prefilters", "d": "10/2014"}, {"body": "case post body sure header matters since content sets header content", "d": "10/2014"}, {"body": "used html forms post method using contenttype set regardless request body", "d": "10/2014"}, {"body": "sounds like always set header even empty body looks like mistake separate issue needs fix", "d": "10/2014"}, {"body": "think yes andrewaladev solve issue well thanks", "d": "10/2014"}, {"body": "correct fix use prefilter", "d": "10/2014"}, {"body": "need nt common easy implement want benefit single method check build plugin", "d": "10/2014"}, {"body": "comment author dmethvin either document fix currentlydocumented case jsonp", "d": "10/2014"}, {"body": "jaubourg read docs replacing jsonp case reason cases", "d": "10/2014"}, {"body": "due fact able perform requests since version btw argument trigger behaviour consequence ajax infrastructure control presence callback placeholder url case request order promote request fix would test presence placeholder set accordingly would break fact promote request providing url placeholder proper think would used much scenario", "d": "10/2014"}, {"body": "information version android simple test case also proposed workaround basically would solve problem since ticket migrated unlikely get response op close", "d": "10/2014"}, {"body": "clarify test case attaching new progress handler promise resolves later progress handlers called result last looks wrong clearer test case", "d": "10/2014"}, {"body": "actually design note notify anymore deferred progress state kept invariant deferred progressed point say upload instance still progressed point deferred resolved rejected nt make sense fire progress handlers", "d": "10/2014"}, {"body": "documentation says copy structure wrapped around elements set matched elements attaching events original elements outside document copies used wrap", "d": "10/2014"}, {"body": "comment author flexphperia direct link jsfiddle click run testing memory leaks chrome chances fix bugi next release quite important", "d": "10/2014"}, {"body": "comment author fixed upstream next jquery release", "d": "10/2014"}, {"body": "comment author mgol also remove current tag year two going banned npm servers well perhaps nt really need tag since works fine semver range", "d": "10/2014"}, {"body": "comment author dmethvin reversion two packages wo nt issue possible unpublishremove tag nt know", "d": "10/2014"}, {"body": "comment author mgol dmethvin seems possible soon see", "d": "10/2014"}, {"body": "cc", "d": "10/2014"}, {"body": "sure enough see npmnpm amp npmnpm mediumterm roadmap may get done end year definitely feature want npm soonish use", "d": "10/2014"}, {"body": "comment author brianpow assume focus text field mouse click tab key", "d": "10/2014"}, {"body": "nt see consistent results chrome either selection done outside event handler use", "d": "10/2014"}, {"body": "comment author thedistantsea also made pr github", "d": "10/2014"}, {"body": "comment author dmethvin since regression like fix however nt unit test support jasminenode chance need help propose fix pull request", "d": "10/2014"}, {"body": "comment author mgol end attaching data directly nodes problem may mostly go away mostly since still may leftover data special events etc", "d": "10/2014"}, {"body": "comment author mgol let see data approach fares", "d": "10/2014"}, {"body": "comment author timmywil mgol go ahead mark tickets open skip triage", "d": "10/2014"}, {"body": "comment author mgol oops", "d": "10/2014"}, {"body": "also present jquery main issue internal contains function used offset places ishidden uses either element function contains failing element function comparedocumentposition see whether element question underneath elementownerdocument elements underneath shadow root always false unfortunately builtin function accessor give shadow root given element means traversal currently guaranteed way retrieving host shadow root putting internal contains function would doubt increase running time function massively however think would acceptable limited knowledge use guardian function offset ishidden etc works principle browser shadow dom support amp amp element matches css selector host traverse find shadow host use contains would hopefully add much overhead thoughts", "d": "10/2014"}, {"body": "issue contains affects multitude jquery methods method chains end using seems fundamental issue would benefit adding tests shadow roots across board", "d": "10/2014"}, {"body": "well okay elaborate actually makes difference two arguments passed one shadow root nt example elem shadow root agree would affect lot different methods especially anything using contains check whether element currently within dom however proper fix would hopefully able something better node traversal find roothost full traversal every time contains called arguments would probably bit speed impact", "d": "10/2014"}, {"body": "seems like needs solved via changes additions dom methods ca nt imagine design shadow root would effectively destroy use dom always require climbing tree either intent indeed hide containment case seems wrong us rereveal least method", "d": "10/2014"}, {"body": "teasealancs could limit performance degradation cases shadow roots need found however dmethvin brings good point sometimes need get browsers fix problem", "d": "10/2014"}, {"body": "bit funny thing think one hand elements shadow root interpreted portion dom separate main body elem shadow root return false also note spec details element shadow root property set shadow host value shadow host element hosting shadow root sure hand though currently nt method function specified part spec acts like takes shadow roots consideration thing found thus far tell us definitively whether element shadow root host term represent shadow host nt necessarily think intention conceal containment given shadow host element easily retrieve shadow root using property however think intention separate dom area hidden main dom get feeling lacking part specification moment yes perhaps launching browser inquiry would good idea", "d": "10/2014"}, {"body": "going pull mikesherov opinion also see could recommend good place raise issue", "d": "10/2014"}, {"body": "comment author arkadykarev another words jquery completely compatible latest version gwt one popular java frameworks web apps probably another libs", "d": "10/2014"}, {"body": "comment author dmethvin populate eventcurrenttarget also seems like regression gwt worked previously gwt nt fix regression end wo nt possible use anything recent version jquery gwt", "d": "10/2014"}, {"body": "comment author cbroome actually thinking something like arraybuffer blob indexof xhrresponsetype lt amp amp xhrresponsetext string would safer existing functionality", "d": "10/2014"}, {"body": "right jsonp method requires script transport first example could use json strip padding returned data example actually prefer change rare case good caller see username password exposed right url passing via options nt make clear", "d": "10/2014"}, {"body": "encountered", "d": "10/2014"}, {"body": "jquery nt meant run use strict effect see comment top unminified file reason look information gaining anything attempting force jquery strict mode prevents interoperability thirdparty libraries usestrict compatible", "d": "10/2014"}, {"body": "thanks explanation guess close issue wontfix", "d": "10/2014"}, {"body": "also related", "d": "10/2014"}, {"body": "testing wp os version get tapping test tapping elsewhere full ua yeah ua strings pointless", "d": "10/2014"}, {"body": "ua info meaningful p pm aaron powell notifications githubcom wrote testing wp os version get popup tapping click test overlay tapping elsewhere full ua mobile windows phone android arm touch nokia lumia like iphone os mac os x khtml like gecko mobile yeah ua strings pointless reply email directly view github", "d": "10/2014"}, {"body": "comment author timmywil support support everywhere words tests everywhere think already places point let add tests animate", "d": "10/2014"}, {"body": "comment author animate method allows us create animation effects numeric css property required parameter plain object css properties object similar one sent css method except range properties restrictive explicitly supporting animate plainobject properties documentation actually bug underlying jqueryanimation unit tests issue appears problematic interaction jquerycssnumber unit conversion default tweener inclination ignore units unless tweenelemnodetype nt think much case intentionally understate already dusty corner api animating nonnumeric properties plain objects thoughts", "d": "10/2014"}, {"body": "comment author timmywil since unit tests area already mark regression fixed", "d": "10/2014"}, {"body": "comment author dmethvin agreed thanks analysis", "d": "10/2014"}, {"body": "comment author dmethvin looks like around aborting happens synchronously cleans request avoid memory bloat gets back ajaxsend actually tries send request xhr object blown aborting request nt make lot sense point see xhr spec pretty much noop called send seems appropriate ajaxsend indicate nt want request proceed way concern making change would compat least know aborting nt currently work mark open discussion", "d": "10/2014"}, {"body": "comment author azriel opened pr suggested solution", "d": "10/2014"}, {"body": "hey relatively new open sourcegithub would like start contributing projects soon curiosity desire learn make effective contributions future want ask pr nt merged yet", "d": "10/2014"}, {"body": "hey jabelman took look earlier think fine jaubourg others comments quite often batch things nt get serious landing prs start push new version already signed cla good shape land soon thanks contributing", "d": "10/2014"}, {"body": "comment author dmethvin entirely much magic", "d": "10/2014"}, {"body": "comment author dmethvin low near zero byte cost could possible add someone would need implementation see cost number people using callbacks directly seems low would probably benefit many people", "d": "10/2014"}, {"body": "since nobody stepped nt needed internally closing ticket", "d": "10/2014"}, {"body": "comment author solgar realised neglected add chrome version version nt tried versions chrome looks issue suspect versions support chrome appschrome packaged apps affected", "d": "10/2014"}, {"body": "beforeunload also gives error chrome packaged apps", "d": "10/2014"}, {"body": "comment author dmethvin docs say properties object constructed via new mycustomobject args builtin javascript types date regexp reconstructed appear plain objects resulting object array expecting anything maintain constructedness deepextend good assumption however event object seem pass isplainobject test seems wrong", "d": "10/2014"}, {"body": "comment author dmethvin running commentary", "d": "10/2014"}, {"body": "comment author dmethvin yeah infinite loop seems like bad outcome suppose ignore trailing dot namespaces", "d": "10/2014"}, {"body": "comment author hamishdickson completeness created quick jsfiddle christian right problem firefox chrome safari handle nt loop forever look see", "d": "10/2014"}, {"body": "comment author hamishdickson digging actually looks issue remove rather could cause problems elsewhere go idea ignore trailing dot namespaces case stripping trailing dots types gets loop remove trailing dots types typesreplace replace typenamespace types type may omitted types types match rnotwhite typeslength tmp rtypenamespaceexec types run unit tests nt get errors also ca nt think reason would valid trailing dot proper test tomorrow submit pull request unless anyone comments style logic", "d": "10/2014"}, {"body": "comment author hamishdickson pull request created fix", "d": "10/2014"}, {"body": "comment author corbacho ignore jsfiddle link correct bug fixed one removing line", "d": "10/2014"}, {"body": "comment author corbacho reduced bug command building empty jquery grunt build contains lines define define jquery function", "d": "10/2014"}, {"body": "comment author dmethvin thanks reducing mark open patches testing welcome", "d": "10/2014"}, {"body": "comment author corbacho pull request fix one issues define working fixing define nt related", "d": "10/2014"}, {"body": "comment author cleanup possible current api better worse show works elements suppressed stylesheet rules may issue best solved plugin seem like taken wrong path also affected us defaultdisplay leave consideration", "d": "10/2014"}, {"body": "comment author dmethvin let address via docs nt think way read possible intents show hide general like deprecate encourage people use classes instead may code changes also made simplifications would hope leave ticket open", "d": "10/2014"}, {"body": "comment author noted meeting today ignoring stylesheets looking inline styles would resolve host showhidetoggle bugs probably eliminate defaultdisplay boot course way know bugs would filed different behavior worth looking consequences breaking change", "d": "10/2014"}, {"body": "comment author scottgonzalez uniqueness check nt run children assume elements already order getting children always result ordered set shown scenario assumption incorrect set containing descendant another element set", "d": "10/2014"}, {"body": "comment author scottgonzalez uniqueness check removed due", "d": "10/2014"}, {"body": "comment author dmethvin still avoid uniqueness overhead singleelement sets currently seems like whole optimization added multielement sets may backed way recognize case", "d": "10/2014"}, {"body": "comment author dmethvin test case shows little clearly console", "d": "10/2014"}, {"body": "comment author reavowed bit look problem potential solutions figured share thoughts case useful anyone problem identified children contents preserve uniqueness necessarily preserve ordering sequence sequence contains nested elements checking sequence contains nested elements probably costly especially run unique children anyway however assumption source sequence ordered much efficient way checking resorting uses fact lt b descendant b lt b lt c b descendant c descendant either following algorithm calculate children sequence elements keeping results ordered single pass iteration take first element source sequence call calculate children get elements source sequence long descendants descendants found push children result sequence one descendants found push children array children run unique array push result sequence repeat next element sequence run unique sets child elements ca nt reasonably confirm kept order requiring additional contains calls particularly complicated algorithm either though nt know enough jquery nfrs say whether worth adding special case rather simpler solution applying unique naively would however definitely recommend renaming guaranteedunique something specific like preservesuniquenessandorder shame jqueryunique nt named bit sensibly well sizzle least calls function uniquesort", "d": "10/2014"}, {"body": "comment author dmethvin help us linking spec would current behavior correct older browsers nt implement newer spec", "d": "10/2014"}, {"body": "comment author jlukic css transforms establish new containing block absolute positions calculated based containing block modern browsers support transforms would believe legacy browsers support transforms calculate closest position relative support dropped jquery correct", "d": "10/2014"}, {"body": "comment author dmethvin support dropped jquery correct moment jquery supports browsers old android neither understand transforms android older currently percent android", "d": "10/2014"}, {"body": "comment author dmethvin nt bother much browsers nt support transforms long offsetparent nt blow developer set transform element older browser nt support transforms transform property ignored wo nt factor calculations still seems like additional code could tricky need look nonnone transform webkittransform property method climb tree probably special cases anticipated jlukic code currently using workaround", "d": "10/2014"}, {"body": "comment author jlukic nt written workaround perhaps try nt underestimate importance affects anything needs position based context sticky menus popups", "d": "10/2014"}, {"body": "come problem believe seen code happening menu length size menu changes depending many foldersassetsetc clients position button contains drop menu next folder recently foldersassets get extremely large started disappearing clicking chrome lead rendering bug basically chrome ca nt handle amount content force use transform translatez turn hardware acceleration converts element element code gist works fine element element button way page seems handling conversion properly using offset jquery", "d": "10/2014"}, {"body": "comment author dmethvin add link ie bug reportedfound addressing slipstream patch reason us attempt fix also nt found reliable way correct numbers could nt tell quick read nothing able", "d": "10/2014"}, {"body": "comment author christopher ie bug reported error condition detected case offsetwidthheight lt clientwidthheight never happen correct numbers easily obtainted calling elementgetboundingclientrect multiplying results subtracting right left bottom top", "d": "10/2014"}, {"body": "comment author dmethvin post link screen shot showing problem still exists see ie", "d": "10/2014"}, {"body": "comment author anonymous click click link look values offsetwidthoffsetheight values shown getboundingclientrect post screen shot later today still need one", "d": "10/2014"}, {"body": "comment author dmethvin still puzzled maybe getting", "d": "10/2014"}, {"body": "comment author anonymous possible revision fixed nt access windows machine moment retest get back later today", "d": "10/2014"}, {"body": "comment author christopher confirm still exists ie screenshot judging dialog screen content looks like second screenshot looks like taken chrome ie ie prompt bottom screen shown screenshot", "d": "10/2014"}, {"body": "comment author dmethvin right got confused trying reproduce issue ca nt get anything like described run go page click second click link box goes full screen shows prompt screen totally white try screen recording nt make sense need install software", "d": "10/2014"}, {"body": "comment author christopher seen totally white issue specifically windows surface us window update kb released last tuesday resolved totally white issue left bad measurements unresolved", "d": "10/2014"}, {"body": "comment author dmethvin several updates reboots able finally arrive place reported ie team privately see immediate plans fix slipstream update given previous issue white screen seems instability area", "d": "10/2014"}, {"body": "comment author christopher thanks appreciate taking time look fwiw white screen issue ever windows windows current state number weeks though nt know long microsoft aware", "d": "10/2014"}, {"body": "comment author dmethvin native seems work consistently browser alerts want run jquery handlers case use triggerhandler actually want click event fire disabled element control browser", "d": "10/2014"}, {"body": "comment author anonymous dmethvin wish click event fire disabled checkbox really want enable checkbox check user interface requires moment workaround basically hammer checkbox using settimeout see edits", "d": "10/2014"}, {"body": "comment author anonymous sorry", "d": "10/2014"}, {"body": "comment author anonymous one time", "d": "10/2014"}, {"body": "comment author dmethvin really want enable checkbox check nt want click checkdisable chk prop disabled false checked true need help try forum rather bug tracker", "d": "10/2014"}, {"body": "comment author anonymous replying dmethvin nt want click checkdisable really want enable check call click event handler check revised fiddle chk prop disabled false checked true simulate user checking checkbox changes state without calling click handler need help try forum rather bug tracker please explain think nt bug nt one goals jquery smooth differences browsers reported behavior works differently explorer firefox enough concern also nt dom changes supposed synchronous triggering click ca nt performed immediately enabling checkbox something quite completing time next line code executed appreciate trying help particular case primary goal let know bug receive tech support think bug low priority choose fix fine nt understand writing notabug bug", "d": "10/2014"}, {"body": "comment author dmethvin nt make sense disable check box expect something happen click jquery goal create consistent behavior sequence actions nt make sense", "d": "10/2014"}, {"body": "comment author dmethvin oh get undisable click", "d": "10/2014"}, {"body": "comment author devuxer phew", "d": "10/2014"}, {"body": "comment author dougrchamberlain happy look issue", "d": "10/2014"}, {"body": "comment author dmethvin dougrchamberlain go thanks", "d": "10/2014"}, {"body": "comment author dougrchamberlain okay looked using firefox completely fails mark checkbox versions lt fails intermittently starting version continues fail intermittently edge fails intermittently versions chaining statements seems reduce number failures like jsfiddle nt eliminate chaining valid workaround really surprised since object passed trigger finished returning jquery object since first attempt resolving issue wondering begin looking", "d": "10/2014"}, {"body": "comment author dmethvin seems like firefox bug happens even jquery involved problem goes away dom click method called asynchronously", "d": "10/2014"}, {"body": "comment author dougrchamberlain disregard comment", "d": "10/2014"}, {"body": "comment author grisendo try documentready", "d": "10/2014"}, {"body": "comment author scottgonzalez issue came whatwg mailing list months ago added cssom", "d": "10/2014"}, {"body": "comment author fejesjoco glad worked think would reasonable provide function jquery would call cssescape available use fixed regexp look jquery layer among others hides kinds browser differences also cssescape valid alternative long jquery syntax accordance css jquery actually extend syntax jquery lots lots functions depend selectors believe would real place utility method", "d": "10/2014"}, {"body": "comment author scottgonzalez jquery allows additional selectors additional syntax believe never case proper css escaping method would fail custom jquery selector", "d": "10/2014"}, {"body": "comment author timmywil certainly helpful use cases common case foresee concatenating attribute value attribute selector certain special characters meaning selectors unless escaped impossible predict user intentions time means inevitable nonbug reports well inclined vote feature lack utility externally need internally usually formula great plugin", "d": "10/2014"}, {"body": "comment author dmethvin since addressed standards nt know want get ahead could possibly offer wrapper seems like someone wanted functionality could easily create polyfill big fan either nt know complicates things str could also html script selector sure whether script injection attempt via css fragment could made succeed marking open discussion meeting next month", "d": "10/2014"}, {"body": "comment author fejesjoco str use case thinking use case want add variable string selector without breaking selector example broken parameters like ab function id return id write instead function id return selectorescape id could many vulnerabilities like already example fixed aspnet mvc added escape mechanism metacharacters nt know enough knows people might think escaped makes sense question hey mr interpreter characters escape best answered interpreter good example regex escaping net knows special characters escaped put usersupplied strings regexp without worrying anything", "d": "10/2014"}, {"body": "comment author dmethvin see also parts builtup str may need selectorescaped htmlescaped passed str depending purpose origin", "d": "10/2014"}, {"body": "comment author fejesjoco yes similar problem every time engine supports certain magic characters user may accidentally submit string something else intended also engine way know intentional best solution engine provides proper escaping function engine knows escape user know call string parts special interpretation intended functions way simple put plugins integral parts interpreting engines rules may change time able whatever html htmlescape whatever cssescape whateverid etc", "d": "10/2014"}, {"body": "comment author fejesjoco found similar thing uiautocompleteescaperegex could also added available globally strictly jquery related already jquery ui wrong place usecase since core javascript provides regexp course also provide escaping function nt good example may want find whole words user specifies like new regexp w usersuppliedvalue w user supplied value properly escaped nt contain characters handled specially regexp", "d": "10/2014"}, {"body": "comment author reference", "d": "10/2014"}, {"body": "comment author psquared perhaps better suggestion one made adding something like end dataremove seems help jqueryisemptyobject cache thisdiscard owner", "d": "10/2014"}, {"body": "comment author dmethvin rwaldron could take look", "d": "10/2014"}, {"body": "comment author general support mixing native dom manipulation jquery close el data leaks true parentnoderemovechild el distinct enough may worth looking small fix", "d": "10/2014"}, {"body": "comment author dmethvin agree plenty ways get trouble use native methods remove elements behind jquery back branch remove events data object removes data object preemptively eg", "d": "10/2014"}, {"body": "comment author dmethvin mark valid pending investigation since events often thing data cache would helpful remove events gone", "d": "10/2014"}, {"body": "comment author dmethvin agree right thing perhaps compatible thing let kick road", "d": "10/2014"}, {"body": "comment author anonymous clarify nonnumeric go select element left nonnumeric", "d": "10/2014"}, {"body": "comment author anonymous btw using jquery functionality works expected ie versions functionality break ie", "d": "10/2014"}, {"body": "comment author michael confirmed", "d": "10/2014"}, {"body": "comment author cjqed dug little bit found culprit combination elementblur handler see following jsfiddle similar original commenter fiddle chrome clicking input boxes neither allow enter keys blur focus console reads whenever click inputs expected take blur command type inputs consolelog keyup expected everything works way except blur added like fiddle starts still type input box input box whose event handlers handled bodyon call instead assigning directly jqueryfocus fn another note per original ticket report keyup function get called input keys box", "d": "10/2014"}, {"body": "comment author anonymous thanks looking weird used work fine jquery", "d": "10/2014"}, {"body": "comment author timmywil cjqed mind assign ticket", "d": "10/2014"}, {"body": "comment author cjqed timmywil sure dive weekend", "d": "10/2014"}, {"body": "comment author cjqed timmywil made headway diving deeper like confirmation see following jsfiddle given three options assign event handlers selector focus function dosomething selector focus dosomething parentselector focus dosomething selector three result right third option leave function attached focus event changing type delegate type focusin blur focusout intended behavior third way assigning event handlers", "d": "10/2014"}, {"body": "comment author dmethvin focusin event bubbles according use focusin event using delegation", "d": "10/2014"}, {"body": "comment author dmethvin yes intended behavior focusin must used event delegation", "d": "10/2014"}, {"body": "comment author anonymous marked resolved jsfiddle clearly demonstrates bug b used work fine jquery something broke jquery needs fixed", "d": "10/2014"}, {"body": "comment author dmethvin agreed problem original broken ie working think seem correct", "d": "10/2014"}, {"body": "comment author anonymous well jsfiddle solves problem functionality working changing code nt fix jquery bug ie functionality originally coded jsfiddle breaks jquery works older jquery versions browsers", "d": "10/2014"}, {"body": "comment author dmethvin need confirmation change seem fix things since test case lot moving parts appears consequence us using real dom blur trigger blur fix several problems related event order", "d": "10/2014"}, {"body": "comment author anonymous yes change line theboxblur theboxtriggerhandler blur makes functionality work", "d": "10/2014"}, {"body": "comment author anonymous sorry realized something else still working change line input box allow focus select element numeric", "d": "10/2014"}, {"body": "comment author dmethvin pretty sure problem dom blur essentially async ie versions least think work around leave ticket open", "d": "10/2014"}, {"body": "comment author anonymous ok thanks leaving open functionality used work stopped working nt fixable", "d": "10/2014"}, {"body": "comment author tracobot get many tickets often need return initial reporter information person reply within days ticket automatically closed happened case still interested pursuing issue feel free add comment requested information happy reopen ticket still valid thanks", "d": "10/2014"}, {"body": "comment author anonymous think bug reopened fixed", "d": "10/2014"}, {"body": "comment author dmethvin anonymous comment reason autoclosed reply nt logged person", "d": "10/2014"}, {"body": "comment author anonymous ok anonymous comment actually person filed bug", "d": "10/2014"}, {"body": "comment author dmethvin nb versions ie upward fire event asynchronously calling dom focus blur methods want see console focusing focus focusing see ie focusing focusing focus reason used work faked focus caused larger stack bugs related event order see", "d": "10/2014"}, {"body": "comment author anonymous see going hard handle", "d": "10/2014"}, {"body": "comment author anonymous might sound bit hack adding settimeout ie reorders events correctly jquery focus blur functions could wait returning might fix problem", "d": "10/2014"}, {"body": "comment author dmethvin yes code unit tests jquery internally without pushing problem another location caller could assume elem focus returns element focused whatever event handler supposed faking focus event worked although undesirable effects forced handler run right bottom line focusblur event trusted async ie occasionally unreliable firefox well nt create complicated scenarios break", "d": "10/2014"}, {"body": "comment author anonymous really unfortunate blur focus events used forms forms used important tasks user registration ecommerce processing particular case functionality jsfiddle used enter international phone numbers user nt selected country code select element blurs phone number textbox force user select prefix first changed code make work would really nice find general solution within jquery inevitably problem causing bugs people websites particular built tested released since maintained btw keyupkeydown events subject unexpected behavior", "d": "10/2014"}, {"body": "comment author dmethvin affected switch script tags contemplated", "d": "10/2014"}, {"body": "comment author dmethvin sympathetic google search usually helps sure additional words add much attempt add sizzle jquery would lead people bug tracker rather place like stackoverflow go messed selector", "d": "10/2014"}, {"body": "comment author waldechristian google search usually helps usability similar numerical error code google unless one seen message know means one little chance figure talking css selector excellent error message inform user exactly wrong current one merely informs user something wrong sure additional words add much attempt add sizzle jquery look ticket never asked terms added simply term css selector specifically error message optimal world error would also come stack tract point code came selector parser would case parsefail reparse order able provide explanation expected see aware nontrivial efforts however making error least clear enough easily seen trivial", "d": "10/2014"}, {"body": "comment author timmywil could change expression selector seems pretty clear selector included error message", "d": "10/2014"}, {"body": "comment author waldechristian seems pretty clear selector included error message please take look original description error triggered thirdparty software including selector little enlighten developer type developer might even aware classes ids used said thirdparty software", "d": "10/2014"}, {"body": "comment author timmywil something concise like error selector syntax flag", "d": "10/2014"}, {"body": "comment author waldechristian fine shortening maximum benevolence towards future users like see explicit mention css remain message", "d": "10/2014"}, {"body": "comment author timmywil thought remembered still users use xpath converters case selector originally css think clear enough without though", "d": "10/2014"}, {"body": "comment author dmethvin okay suggestion comment minor formatting changes error selector syntax flag need announce prominently people use google search find know means", "d": "10/2014"}, {"body": "comment author waldechristian merely observation concerned people understand error message means need google chance good error message rather high excellent error messages explain went wrong offer resolution suggestions", "d": "10/2014"}, {"body": "comment author timmywil waldechristian firstly developers google error messages matter clear secondly resolution suggestions would require certain psychic ability way know user trying select helpful message simply points selector invalid needs changed something wo nt throw error succinct manner dmethvin error part message automatically inserted browser", "d": "10/2014"}, {"body": "comment author waldechristian timmywil respectfully disagree points general case due experience many developers many experience levels due experience writing parsers however see scope constraint experiences jquery would make hold positions nt think arguing points necessary main point ticket said reread thought would like say see shortened proposal better original helpfulness could reasonably given context project average user helped seeing error message golfed maximal brevity mention xpath converters unfamilar assume piece code takes xpath entered user converts css selector used internally case xpath converter oncesanctioned part jquery recommend explicitly acknowledging possibly way error invalid selector syntax check original cssxpath expression flag", "d": "10/2014"}, {"body": "comment author dmethvin mark ship title ticket change something useful changelog googleability", "d": "10/2014"}, {"body": "leave note still stand last comment", "d": "10/2014"}, {"body": "comment author instructions also mention mongoose alternative amp works fine without changing repository use reasons mentioned already lightweight vagrant", "d": "10/2014"}, {"body": "comment author gnarf actually like idea vagrantfile available spawn nginx runs config buildsjenkinsjquerycom couple suggestions could setup dns entry something like vagrantjquerycom rather needing anyone ever edit hosts file also posted exact ways build server jenkins sets virtualhost support post static files jquery core unit tests errorpage location proxymethod get proxypass proxysetheader host buildsjenkinsjquerycom support funky url jsonpphp jquery core unit tests rewrite datajsonpphp", "d": "10/2014"}, {"body": "comment author eric replying gnarf could setup dns entry something like vagrantjquerycom rather needing anyone ever edit hosts file would optimal much better solution ever asking anyone edit hosts file also considering packaging vagrant box phpnginx already installed configured would allow bundled configuration ship nothing vagrantfile much cleaner repository developers could continue use either amp install mongoose instead vagrant without much trouble", "d": "10/2014"}, {"body": "comment author replying gnarf actually like idea vagrantfile available spawn nginx runs config buildsjenkinsjquerycom could setup dns entry something like vagrantjquerycom rather needing anyone ever edit hosts file replying eric also considering packaging vagrant box phpnginx already installed configured would allow bundled configuration ship nothing vagrantfile much cleaner repository developers could continue use either amp install mongoose instead vagrant without much trouble okay sounds really nice sold", "d": "10/2014"}, {"body": "comment author gnarf yeah get box setup nginxetc without download post spinup saves big portion problem host source box infra dropbox also keep day", "d": "10/2014"}, {"body": "comment author dmethvin wo nt work oldie least length property squirrely jeresig tried around timeframe bailed rwaldron nt something still refined", "d": "10/2014"}, {"body": "comment author rwaldron replying dmethvin wo nt work oldie least length property squirrely jeresig tried around timeframe bailed rwaldron nt something still refined simple class jquery extends array constructor selector context document super legit subclass array implement jquery prototype methods issue course new subclass semantics ca nt polyfilled ported traditional function declarationexpression syntax super ca nt reserved function body jquery actually quite vocal design specification mechanism understanding jquerythecode would nt benefit real subclassing builtins time far hackish cases like zepto proto never going officially standardized sent die annex instead objectsetprototypeof compliment objectgetprototypeof", "d": "10/2014"}, {"body": "comment author petty sure already solved oldie length issues jsperf accepting immutability existing instances nt change current api promises look later mostly focal point link aggregation unless gets actual pull request", "d": "10/2014"}, {"body": "comment author rwaldron replying petty sure already solved oldie length issues jsperf accepting immutability existing instances nt change current api promises look later actually length related issues oldie trailing commas produce hole every standard modern js implementation array subclasses always broken length property compare following programs var new array consolelog alength consolelog consolelog alength alength consolelog consolelog alength vs function list arraycall thispushapply arguments listprototype objectcreate arrayprototype constructor value list var l new list consolelog l llength consolelog l consolelog llength llength consolelog l consolelog llength behaviour broken proto well function list thisproto arrayprototype thispushapply arguments var l new list consolelog l llength consolelog l consolelog llength llength consolelog l consolelog llength course latter version wo nt work browsers nt support proto apis jquery definition nt match builtin jqueryfnfilter arrayprototypefilter predicate functions written use arrayprototypefilter wo nt work jqueryfnfilter jqueryfnmap arrayprototypemap mapping functions written use arrayprototypemap wo nt work jqueryfnmap jqueryfnfind arrayprototypefind filter", "d": "10/2014"}, {"body": "comment author scottgonzalez sure problems relevant already said nt change current api promises nobody var divs div divslength nt matter methods incompatible arrayprototype methods unless incompatibility actually break things", "d": "10/2014"}, {"body": "comment author dmethvin seeing perf benefit strange", "d": "10/2014"}, {"body": "comment author rwaldron replying scottgonzalez sure problems relevant exactly relevant two statements length property squirrely dmethvin already solved oldie length issues jsperf accepting immutability existing instances nobody var divs div divslength agree sure nt say trying thoroughly illustrate length problems nt matter methods incompatible arrayprototype methods unless incompatibility actually break things saying break extant code saying behaviour could create confusion", "d": "10/2014"}, {"body": "comment author clear interested performance improvement size reduction never recommended anyone set length documented effects generally ca nt expose array methods patterns accept selectors place elements pushstack new instances instead mutating context make new promises like objectprototypetostring jquery object array exclusively seeking efficient techniques implementing extant api", "d": "10/2014"}, {"body": "comment author rwaldron replying clear interested performance improvement size reduction never recommended anyone set length documented effects yes thought made clear understood point say jquery subclassed array developers expect things work like arrays generally ca nt expose array methods patterns accept selectors place elements pushstack new instances instead mutating context make new promises like objectprototypetostring jquery object array exposed default developers use unless plan keep blacklist methods delete jquery instance objects become instanceof array well promise trying rain parade real things consider", "d": "10/2014"}, {"body": "comment author replying rwaldron point say jquery subclassed array developers expect things work like arrays exposed default developers use unless plan keep blacklist methods delete jquery instance objects become instanceof array well never crow continue chastising everyone tries take advantage undocumented implementation details like currently jquerysupport jquerydata promise trying rain parade real things consider yep actually changing prototype chain would huge deal might worthwhile", "d": "10/2014"}, {"body": "comment author ameyms seems happening camelize key passing dataattr function dataattr tries reconstruct hyphenated attribute name incorrectly consider following example datafoobar foobar datafoobar correct incorrect", "d": "10/2014"}, {"body": "comment author dmethvin ref seems like nt take hyphen unless following char az however inside jquerycamelcase making change could affect many situations outside data attributes", "d": "10/2014"}, {"body": "comment author rwaldron lead filing", "d": "10/2014"}, {"body": "comment author rwaldron closed duplicate based spec name list hyphenminus character name followed lowercase ascii letter remove hyphenminus character replace character followed character converted ascii uppercase solution would remove hyphens immediately followed numbers would produce key called unfortunately compatibility breaking actually unit tests support", "d": "10/2014"}, {"body": "comment author rwaldron", "d": "10/2014"}, {"body": "comment author gnarf one weird situations cantfix probably reopening discuss ultimate fate one next meeting", "d": "10/2014"}, {"body": "comment author rwaldron fixed chrome", "d": "10/2014"}, {"body": "comment author dmethvin behavior change wo nt go think need deal", "d": "10/2014"}, {"body": "comment author malsup breaking change migrating", "d": "10/2014"}, {"body": "comment author dmethvin malsup two branches seem work op test case test case", "d": "10/2014"}, {"body": "comment author malsup replying dmethvin malsup two branches seem work op test case test case dmethvin see thread", "d": "10/2014"}, {"body": "comment author dmethvin another result triggering native focus event get event order right jquery extensions namespaces data cases see", "d": "10/2014"}, {"body": "comment author third time charm", "d": "10/2014"}, {"body": "comment author mgol pull request", "d": "10/2014"}, {"body": "comment author dmethvin seems like lot risk little benefit two deprecated suspect still quite bit usage pretty hard tell", "d": "10/2014"}, {"body": "comment author mgol jqueryfnsize hard check due common name hand size code much larger andself one considering latter alias another function", "d": "10/2014"}, {"body": "comment author dmethvin api changes next release would rather batch since disruptive discourage upgrading", "d": "10/2014"}, {"body": "comment author mgol well officially public api whole jquerysupport behaves differently eg former properties functions actually thought timeframe changing much switch amd etc maybe right changes internal little effect public api", "d": "10/2014"}, {"body": "comment author timmywil officially nt made changes public api support documented changeable every api change annoying users even makes sense say keep deprecated refer recommendations nt mean removable easily removable custom builds desired take little space anyway", "d": "10/2014"}, {"body": "comment author dmethvin let hold one following major release least", "d": "10/2014"}, {"body": "comment author dmethvin neither seem important first step would get migrate asap", "d": "10/2014"}, {"body": "comment author dmethvin", "d": "10/2014"}, {"body": "comment author mgol want", "d": "10/2014"}, {"body": "comment author mgol actually nt log deprecation errors core well andself alias need wrapper size quite easy", "d": "10/2014"}, {"body": "let", "d": "10/2014"}, {"body": "comment author timmywil take stab whenever get chance", "d": "10/2014"}, {"body": "comment author jan appears dupe comments bug suggest shadow dom nt sufficiently available across different browsers rise level jquery team felt comfortable supporting exact semantics operations nt allowed shadow root nt clearly defined fwiw bug references pull request commentary", "d": "10/2014"}, {"body": "comment author timmywil thank reference actually aware bug decided open separate issue sizzle support", "d": "10/2014"}, {"body": "comment author dmethvin lot us team consider fact allow scripts run injecting bug ca nt remove backcompat reasons sympathetic leave ticket open discussion see way fix", "d": "10/2014"}, {"body": "comment author rwaldron preventing something like beginning iife amd whatever var html jqueryfnhtml var append jqueryfnappend jqueryfnhtml function filtering return htmlcall filteredsafe stuff jqueryfnappend function filtering return appendcall filteredsafe stuff end iife amd whatever", "d": "10/2014"}, {"body": "comment author nicholas nothing preventing however inefficient risky probably many paths inserting html jquery without tracking risk remains essentially right afraid might missed corner case course methods change versions nt want keep updating functionality would much efficient safe one place insert functionality", "d": "10/2014"}, {"body": "comment author nicholas wrote blog post everything secure jquery would love formal html filter capability seems like injection points functionality fairly straightforward see blog post", "d": "10/2014"}, {"body": "comment author mgol agree would nice", "d": "10/2014"}, {"body": "comment author related nt know want add another function input pass could definitely see exposing arguments currentlyexisting replace rxhtmltag properties jquery simple extensions like noinnerhtml contents could still use string replacement complex ones like ticket requesting could get wholesale filtering something like following apologies atrocious names var origprematch jqueryhtmlprematch origprereplace jqueryhtmlprereplace jqueryhtmlprematch ww jqueryhtmlprereplace function html return extraprocess html replace origprematch origprereplace", "d": "10/2014"}, {"body": "comment author mgol replying related nt know want add another function input pass passed escapehtml function saved one additional function invocation manip operation overhead one additional lot feel regex might enough cases really make possible secure manip methods", "d": "10/2014"}, {"body": "comment author replying mgol passed escapehtml function saved one additional function invocation manip operation overhead one additional lot well still guaranteed least two passes input custom escaping fix selfclosing tags someone sets preprocessing even trying fix mangling scripttextarea content attribute values come think brings related question whether preprocessing precede follow replace currentlyexisting replace rxhtmltag feel regex might enough cases really make possible secure manip methods str strreplace ww fn equivalent str fn str stringreturning singleparameter fn therefore guaranteed support use cases purely question api surface area", "d": "10/2014"}, {"body": "comment author dmethvin could certainly believe happens events like mousemove populate normalize xy position event object browsers may defer work something asks position case something jquery sure avoided though want information object adding paulirish insight", "d": "10/2014"}, {"body": "comment author dmethvin blocked open ticket probably better handle others casebycase basis rather metaticket", "d": "10/2014"}, {"body": "comment author jbedard recently ran across issue well lead using getters delay copyingcalculating event properties would option something similar previously discussed forum recently original post author blogged solution", "d": "10/2014"}, {"body": "comment author dmethvin problem getters still slow every browser also bugs quirks even list browsers true never get event properties perhaps get one property one time faster case mousemove event example suspect going extremely common caller event handler want information would forced layout anyway additionally layout forced enter dirty layout dom change caused previous event handler", "d": "10/2014"}, {"body": "comment author jbedard getters definitely slow still trying think might still worth nt think event handlers access event properties yet eventfix loop accesses fix loop often bottleneck without forced layout scenario seen bug occur times toggling class mouse enterleave bug forces layout event listener simply toggles class based eventtype sets dirty flag case extra layout completely unnecessary even eventfix loop copying everything unnecessary problem would getters least ffchrome calling getters times seems worth would interested pull request least see action", "d": "10/2014"}, {"body": "comment author dmethvin think could examined part wanted tackle issues decided potentially could use native event object skip fixing entirely", "d": "10/2014"}, {"body": "comment author jbedard provides new event interface skips eventfix would great especially still provides things event namespaces amp selectors anyone cares look tried turns hooks getters instead filters prop copying think setter actually slower calling getter needs testing avoids forced layout removes eventfix loop make accessing properties expensive due getter cases tried well worth assume change bigrisky stable api", "d": "10/2014"}, {"body": "comment author anonymous fiddle updated line much testing", "d": "10/2014"}, {"body": "comment author dmethvin reference nt support document fragments api inputs seems like would occur internal uses well", "d": "10/2014"}, {"body": "comment author simon always assumed supported closer look api proves wrong seems general ie bug related jquery able reproduce leaking behavior even simpler case var lt var frag documentcreatedocumentfragment var div documentcreateelement div fragappendchild div frag null leak closed explicitly call removenode fragments children iteration c fraglastchild cremovenode false", "d": "10/2014"}, {"body": "comment author timmywil duplicate ticket", "d": "10/2014"}, {"body": "comment author dmethvin fan wrappish methods one reason exactly unwrap blindly unwraps elements common case would want remove specific wrapper seems like decent idea done cheaply thoughts", "d": "10/2014"}, {"body": "comment author dmethvin still interested providing patch widespread onerror support xhr", "d": "10/2014"}, {"body": "comment author rijoel dmethvin yes quite busy moment think scriptonerror together scriptonreadystatechange covers browsers sure opera found already fixed jquery reason works origin requests uses xml internally altough format jsonp", "d": "10/2014"}, {"body": "comment author rijoel pull request", "d": "10/2014"}, {"body": "comment author mgol look", "d": "10/2014"}, {"body": "comment author exactly analogous starting think generalize incorporate solution", "d": "10/2014"}, {"body": "comment author dmethvin way much code though thinking user passed data use standard trigger path rather native events passes data expense nonstandard event behavior think people probably misusing event system time happens", "d": "10/2014"}, {"body": "comment author probably acceptable focus click handlers would see different checked states checkbox radio inputs event provided trigger definite nogo", "d": "10/2014"}, {"body": "comment author dmethvin op using initialize page load could use triggerhandler instead really trying focus element well", "d": "10/2014"}, {"body": "comment author mail trying distinguish clicking tabbing input field b using trigger focus function somewhere else nothing page load", "d": "10/2014"}, {"body": "comment author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "comment author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "comment author anonymous triggerhandler really acceptable workaround since wo nt actually focus blur etc", "d": "10/2014"}, {"body": "comment author dmethvin fine workaround indicated dom action afterwards var x aninput xtriggerhandler focus x focus", "d": "10/2014"}, {"body": "comment author anonymous people core team certainly know already arises focus fire native event possible blurfocus sequence correct trigger function safeactiveelement amp amp thisfocus thisfocus blur trigger function safeactiveelement amp amp thisblur thisblur", "d": "10/2014"}, {"body": "comment author anonymous wo nt trigger handlers twice replying dmethvin var x aninput xtriggerhandler focus x focus", "d": "10/2014"}, {"body": "comment author osmestad also issue still valid latest jsfiddle problem using triggerhandler trying avoid running code focus handler setting focus programatically trigger workarounds think would unbinding triggering focus rebinding reverting others issue browser chrome os os x", "d": "10/2014"}, {"body": "comment author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "comment author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "comment author mikesherov thanks contributing html height give consistent results nt really support html height currently considering browsers nt give us useful info discovered curious", "d": "10/2014"}, {"body": "comment author jon case preferred way retrieve actual content height document height works well content larger window content smaller window document height returns window height html height appears correct firefox ie better solution updated test case show height well outerheight true results console output running test case firefox window height document height html outerheight true html height body outerheight true body height window height document height html outerheight true html height body outerheight true body height", "d": "10/2014"}, {"body": "comment author mikesherov thanks contributing test case missing opening html tag update please considering ca nt edit hosting server instead submitting jsfiddle", "d": "10/2014"}, {"body": "comment author jon dufresne fixed mistake test case results uploaded newest test case location also made identical version using jsfiddle version also demostrates bug see fiddle version", "d": "10/2014"}, {"body": "comment author tracobot get many tickets often need return initial reporter information person reply within days ticket automatically closed happened case still interested pursuing issue feel free add comment requested information happy reopen ticket still valid thanks", "d": "10/2014"}, {"body": "comment author jdufresne information requested provided still reproducible information requested provided", "d": "10/2014"}, {"body": "comment author dmethvin sure autoclosed noticed op", "d": "10/2014"}, {"body": "comment author mgol test updated", "d": "10/2014"}, {"body": "comment author mikesherov test earlier build", "d": "10/2014"}, {"body": "comment author timmywil sure sizzle speed tests best starting point specially manufactured work selector engines testing selector engine iframes need probably something custom manufactured test jquery modules said couple principles think adopt sizzle speed suite tests nt really need backend slickspeed operates php nt think even need node benchmarkjs project submodule sizzle update released versions whenever need nt happen often tests encapsulated appropriately guarantee one test affect loading test iframe probably going overboard core module may right ajax module finally rwaldron seemed excited revamping old resig project speed tests still open", "d": "10/2014"}, {"body": "comment author mikesherov fine either way really want blast away speed dir rick even better", "d": "10/2014"}, {"body": "comment author dmethvin salvatore iovene intel going take shot thoughts post ping siovene jquerydev", "d": "10/2014"}, {"body": "comment author mgol dmethvin info progress", "d": "10/2014"}, {"body": "comment author scottgonzalez avoid adding custom event types jquery using callbacks list would much better fwiw duck punching cleandata really easy jquery ui", "d": "10/2014"}, {"body": "comment author dmethvin able achieve cleanup today special events api event attached element teardown handler handler would called cleandata also nt bubble good imo eventspecialsanitation teardown function alert repressed span sanitation noop div html would trick use case", "d": "10/2014"}, {"body": "comment author tj crowder replying scottgonzalez avoid adding custom event types jquery using callbacks list would much better happy callback rather event provided easy hook gets fired seeing real issue destroy event though provided make sure nt bubble nonbubbling event default action sounds lot like callback fwiw duck punching cleandata really easy jquery ui yes addition overkill want notification intercept every call several api points suboptimal imv modifying library rather using", "d": "10/2014"}, {"body": "comment author scottgonzalez seeing real issue destroy event problem cause problems ever decides add destroy event", "d": "10/2014"}, {"body": "comment author tj crowder replying scottgonzalez problem cause problems ever decides add destroy event destroy example jqdestroy jqclean whatever avoid conflicts similarly ready really get renamed point see also six lines code lean toward event interested equivalent callback mechanism would look like replying dmethvin able achieve cleanup today special events api first way cool eventspecialsanitation teardown function alert repressed would trick use case would plugin create special event one handler unless implement callback list jquery ui create special event tinymce implement special event starts getting messy imv nice thing using event causes nearzero bloat uses familiar easy paradigm inherits namespacing sorts goodness offthecuff functionally complete implementation adds six lines code nt checked yet efficient way trigger event three posted earlier dataeventsdestroy jquery elem trigger destroy initializing jqueryeventspecial special nobubble true trivial implementation virtually overhead paradigm jquery programmer trivially understand", "d": "10/2014"}, {"body": "comment author jock murphy allow say voice support felt need thing wanted automatic way cleanup proposed solution message seems ideal", "d": "10/2014"}, {"body": "comment author tj crowder copy sixline patch saying implementation beall endall fiddle generates elements hook click event something dataevents one hook jqdestroy event call html container element destroy time long takes well watching see get jqdestroy event container nt compare version using unmodified version want look overheads", "d": "10/2014"}, {"body": "comment author dmethvin fwiw duck punching cleandata really easy jquery ui however public interface ca nt imagine could refactor without thought always saddled attrfn jquery elem trigger destroy could use triggerhandler nt bubble nice thing using event causes nearzero bloat uses familiar easy paradigm inherits namespacing sorts goodness nt bloat code pretty large hammer need nonbubbling callback follow codepath see mean much code involved implementing dom semantics agree web developers understand semantics really needed performance cost normal case one hooked event looks trivially small likely already horribly inefficient right one things wanted look possibility eliminating jquerycache attaching data directly property dom element removal subtree nt special event removeteardown handlers could simply throw away without walking feature obligates us walk entire subtree seems like bad idea right itt proven ca nt shortcut really cleandata bad reason domsubtreemodified event bad abandoned favor mutationobserver perhaps would better see third party could build dom cleanup functionality top shim available", "d": "10/2014"}, {"body": "comment author tj crowder replying dmethvin fwiw duck punching cleandata really easy jquery ui however public interface exactly jquery elem trigger destroy could use triggerhandler nt bubble great three lines seriously knew efficient way may even one could go although efficiency firing event less important imv efficiency firing firing unusual case performance cost normal case one hooked event looks trivially small likely already horribly inefficient right perhaps mostly trivial vast majority situations adding overhead sitaution element events hooked adding one property exist check quick one things wanted look possibility eliminating jquerycache attaching data directly property dom element removal subtree nt special event removeteardown handlers could simply throw away without walking well special events behavior nt change anything joins list hooking event rare one special events fine really cleandata bad reason domsubtreemodified event bad abandoned favor mutationobserver perhaps would better see third party could build dom cleanup functionality top shim available quick review indicates jquery form cleandata four half years since cleanup showed remove used called empty starting line prevent memory leaks jquery add function jqueryeventremove jqueryremovedata far aware uproar browsers computers getting faster untilunless actually shows real performance problem worrying removing premature optimization jquery able point away cleandata time worry deprecating functionality nt find convincing argument current reality particularly given people today get functionality", "d": "10/2014"}, {"body": "comment author dmethvin convinced anything mark ticket open", "d": "10/2014"}, {"body": "comment author oskarols using custom event seems like horribly roundabout way needed handle straightforward manner adding single trigger", "d": "10/2014"}, {"body": "comment author jock murphy sorry disagree dmethvin oskar problem code adds event like clean well defined way clean basically require cleanup happen manually onunload get missed tj proposing straightforward elegant solution frankly bit shocked learn jquery nt good solution problem", "d": "10/2014"}, {"body": "comment author dmethvin problem code adds event like clean well defined way clean yes specialevents interface standard cleanup insufficient agree tj crowder potential messiness event needing teardown handler lot custom events depends use case current teardown handler design low overhead event like majority discussion single page applications mvcs spend lot time cleandata already tj crowder timing test showing additional test cheap someone writes code depends expensively triggered destroy event makes popular plugin start getting reports like aspect agree oskar frankly bit shocked sorry shock jock", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author mikesherov whatever dmethvin thinks", "d": "10/2014"}, {"body": "comment author rwaldron", "d": "10/2014"}, {"body": "comment author anonymous", "d": "10/2014"}, {"body": "comment author gnarf found wanting something like figuring teardown actually accomplish leaning towards meh feature", "d": "10/2014"}, {"body": "comment author tj crowder replying gnarf figuring teardown actually accomplish teardown solution leaves lot desired imv least multiple autonomous handlers convoluted client code hooking event never receive course completely avoidable duplication jquery ui duck punches tinymce monkeypatches stuff adds teardown stuff adds teardown jquery nt going stop needing cleanup time soon makes sense open code using library well esp amazingly trivial cost", "d": "10/2014"}, {"body": "comment author jzaefferer dmethvin would cleandata monkeypunching jquery ui look like using special event teardown see also elaborate mutationobserver relates discussion cleandata hook synchronous triggering destroy event node still dom mutationobserver collect events therefore trigger callback node detached could become problem practice", "d": "10/2014"}, {"body": "comment author dmethvin would cleandata monkeypunching jquery ui look like mean using special events proposed cleandata punch could removed entirely would single special event handler widget factory event like uisanitation jqueryeventspecialuisanitation teardown function dom element get widget ref getwidgetfromelement destroy instead attaching remove event widget create attach empty uisanitation event trigger teardown cleandata code would take care rest thison true thiselement uisanitation jquerynoop mutationobserver collect events therefore trigger callback node detached could become problem practice destroyer expected synchronous behavior remove events generally used part public interface widgets stuff done default handler looks like would safe detached element perhaps even better way since changing attached element might cause reflows", "d": "10/2014"}, {"body": "comment author dmethvin worth thinking leave open", "d": "10/2014"}, {"body": "comment author rwaldron dmethvin nt mind like prototype one", "d": "10/2014"}, {"body": "comment author rwaldron note self click fn support handling delegated events click fn div data object events click fn div dataobject", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author dmethvin gnarf talked austin would lowlevel public interface ideally current event features would built top essentially replace function nt go current jquery dispatcher instead use callersupplied dispatching object would provide users lowoverhead ways handle highfrequency events like scroll mousemove upcoming pointermove avoiding jqueryeventfix example", "d": "10/2014"}, {"body": "comment author good implementation would make something like significantly lightweight", "d": "10/2014"}, {"body": "comment author dmethvin additional note way capturing understand addeventlistener interface seems like events attached object would capturing", "d": "10/2014"}, {"body": "comment author petkaantonov addeventlistener optional usecapture parameter defines whether capturing use regardless use function object handler default false example events bubbling", "d": "10/2014"}, {"body": "comment author dmethvin rwaldron comment thinking interface low level enough support type enhancement includes special events delegation fixing additional data get things either need use standard interfaces additional data issue probably issue since points object get populate features cost execution time one reasons interface provide clean way get performance nt need things like event normalization across browsers", "d": "10/2014"}, {"body": "comment author rwaldron think worth investigating experimenting going grab work jdalton implementing", "d": "10/2014"}, {"body": "comment author jdalton may need confirm memory leak issue maybe really pre handled though remember correctly dean edwards solution leak ie", "d": "10/2014"}, {"body": "comment author dmethvin exit twogc environment oldie implement however still need recursive crawl least cases call special event teardown hooks probably optimize significantly though example expando flag indicates whether special events use element", "d": "10/2014"}, {"body": "comment author dmethvin rwaldron ticket", "d": "10/2014"}, {"body": "comment author rwaldron fixed data rewrite read read backwards", "d": "10/2014"}, {"body": "comment author jdalton looks like still relying data objects internally leak discarded via explicit call element longer needed using element object holds data object would avoid gist issue", "d": "10/2014"}, {"body": "comment author rwaldron current design designed support smooth transition weakmap soon available least browsers picked number arbitrarily putting data directly element would mean exposing jquery interally used data actually two sets data every object element user privateinteral ca nt long user code dom manipulation via jquery data correctly cleaned removed", "d": "10/2014"}, {"body": "comment author jdalton actually two sets data every object element user privateinteral know gist ticket suggest putting element data internaluser element way would need user manually invoke cleaning method would reduce code needed storing data avoid memory leaks without burdening dev cleanup overlooked easy cause leaks easy track", "d": "10/2014"}, {"body": "comment author rwaldron replying jdalton actually two sets data every object element user privateinteral know gist ticket suggest putting element data internaluser element way would need user manually invoke cleaning method would reduce code needed storing data avoid memory leaks without burdening dev cleanup overlooked easy cause leaks easy track user code get jqueryspecific internal data ca nt make guarantees stability reliability trust wish easy always appreciate input feedback case ca nt expose jqueryspecific internal data owner object related directly sure mean need user manually invoke cleaning method happens automatically jquery dom manip methods appropriate time wo nt happen user code uses dom apis directly scope jquery", "d": "10/2014"}, {"body": "comment author dmethvin jdalton general case still need call jquerycleandata method manipulationjs least situations like special events guarantee teardown hook also consider semantics remove say remove elements document removes events data whereas detach go loop part cleandata code regardless perhaps attaching data element would let us skip steps made significant performance difference interested seeing implementation even exposed data extent perf testing web apps sites uncommon see cleandata high list especially mv frameworks update big dom chunks", "d": "10/2014"}, {"body": "comment author rwaldron could patchwelcome ticket patch would pass existing data tests asis", "d": "10/2014"}, {"body": "comment author jdalton related directly sure mean need user manually invoke cleaning method thinking devs use remove friends instead say simply elinnerhtml correct though diligent used lib api managed user code get jqueryspecific internal data ca nt make guarantees stability reliability exposing data pre jquerycache existed sure fits guarantees stability reliability aside jquery nt big user hasownproperty checks could nt someone manipulate objectprototype populate data values fit stabilityreliability guarantees also wan na dmethvin perf concern", "d": "10/2014"}, {"body": "comment author rwaldron exposing data pre jquerycache existed sure fits guarantees stability reliability jquery jquerycache reason aside jquery nt big user hasownproperty checks could nt someone manipulate objectprototype populate data values fit stabilityreliability guarantees sure falls official wo nt fix", "d": "10/2014"}, {"body": "comment author jdalton sure falls official wo nt fix yap lots things scope makes guarantee lip service substance case think beneficial store data element instead said nt time investigate moment resources limited issue noted future reference", "d": "10/2014"}, {"body": "comment author jzaefferer discussed amsterdam jquery ui currently depends cleandata hook widget removal whenever element removed widget calls destroy method widget example unbind event handlers document whatever solution looks like needs provide alternative hook jquery ui see also", "d": "10/2014"}, {"body": "comment author mgol read comments seems still issue teardown hooks invoked element removed via raw dom methods overcome difficulty safety guarantees mostly agree jdalton unable provide complete protection anyway possible jquerycreated amp handled elements cooperate native dom methods one", "d": "10/2014"}, {"body": "comment author dmethvin worried complete protection mainly trying avoid walking elements tree nt someone mingles jquery raw dom methods manipulate document need understand consequences", "d": "10/2014"}, {"body": "comment author dmethvin worth investigating", "d": "10/2014"}, {"body": "comment author jaubourg look", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author dmethvin ref", "d": "10/2014"}, {"body": "comment author dmethvin note quick look pull request possible might open security holes adding careful sourceurl string newline also need alert ie conditional javascript bug see", "d": "10/2014"}, {"body": "comment author mgol ie conditional compilation bug fortunately behind us recent sourcemap specification changes also changed sourceurl sourceurl", "d": "10/2014"}, {"body": "comment author dmethvin switch always using tags running code get free nt think remaining use cases warrant change globaleval see tradeoffs", "d": "10/2014"}, {"body": "comment author paulirish one came believe wither globaleval script tag script real name debuggable browser devtools sourceurl strong xbrowser support would allow inject filename injected scripts would allow participate like real files", "d": "10/2014"}, {"body": "comment author dmethvin see since feature leave open separately nt think retain globaleval method could inject sourceurl comment user added one script tag method use", "d": "10/2014"}, {"body": "comment author pferreir forgot add first case element seems added dom immediately removed", "d": "10/2014"}, {"body": "comment author dmethvin use getscript provide complete test case jsfiddlenet would help us evaluate problem", "d": "10/2014"}, {"body": "comment author pferreir hello small example uncommented code work show like button commented fail tried getscript success", "d": "10/2014"}, {"body": "comment author timmywil filter scripts manipulation getscript used remove hashes url sure", "d": "10/2014"}, {"body": "comment author dmethvin seems valid enough keep open figure removing hash", "d": "10/2014"}, {"body": "comment author dmethvin okay gives error facebook xxx id gives error nt hash timmywil said since script nt yet executed insertbefore making ajax request request script since hash stripped never going see correct id jaubourg know stripping hash specific reason omission", "d": "10/2014"}, {"body": "comment author trip wayback machine reveals stripping hashes since fix favor preserving kills oldie thus may unable maintaining api symmetry", "d": "10/2014"}, {"body": "comment author dmethvin still searching good solution nt blocker", "d": "10/2014"}, {"body": "comment author dmethvin ref", "d": "10/2014"}, {"body": "comment author tomgrohl case copying tests changing doctype xhtml limited certain test might able help one", "d": "10/2014"}, {"body": "comment author dmethvin part investigation done example support firefox serve xhtml right docttype http contenttype ensure interpreted xhtml spits console warnings get wrong according automated tests would nt catch type problem hand seems firefox xul application demands correct xhtml run nt xul automated tests formal support able keep running except break xhtml accident done couple times similar reports related chrome plugins perhaps provide sort xul test testswarm since seems sensitive environment", "d": "10/2014"}, {"body": "comment author tomgrohl thanks info look see else find", "d": "10/2014"}, {"body": "comment author tomgrohl dmethvin starting point wrote code check content type doctype detects closing tags quoted attributes required based following content type applicationxhtmlxml content type texthtml doctype xhtml document xul needs testing though generally doctype andor content type omitted detaults texthtml logic good use probably fix well work creating tests xhtml based existing ones see get", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author dmethvin add list browsers generate console warnings doctyperelated errors happen early shim consolewarn see", "d": "10/2014"}, {"body": "comment author dmethvin although wonder whether shim would see delayloaded iframe anway", "d": "10/2014"}, {"body": "comment author firstly note majority regressions xhtml compatibility past years feature bug detection code included jquery two approaches take solving problem neither particularly ideal run entire test suite xhtml mode pros duplicate tests required test suite code paths properly tested cons looking qunit code history extremely regression prone xhtml compatibility could expect regular breakage updating qunit unless similarly encouraged test xhtml support test running interface uses documentwrite would need reimplemented better way unit tests may possible xhtml mode would require form indicator run xhtml mode result previous tests may marked incompatible xhtml could work fine developer laziness misunderstanding increases testrunning time requiring entire suite run mulitple times iframes tests immune xhtml mode setup way since iframe context would result tests passing fail alternatively duplicate specific tests run xhtml iframes none cons code coverage poor tests duplicated html counterparts maintaining list duplicated maintenance burden jquery", "d": "10/2014"}, {"body": "comment author dmethvin anthonyryan thanks taking another look agree none solutions ideal get harder feature detects asneeded basis thinking may still want sort basicfunctionality test xhtml least would give us hope avoiding kind recurring regressions", "d": "10/2014"}, {"body": "comment author true loading jquery iframe invoking parent callback successful load would go long way permodule tests come later need much complicated either", "d": "10/2014"}, {"body": "comment author mgol replying dmethvin anthonyryan thanks taking another look agree none solutions ideal get harder feature detects asneeded basis testsupportjs forcecompute support tests check match expected matrix problem", "d": "10/2014"}, {"body": "comment author timmywil marking valid", "d": "10/2014"}, {"body": "comment author malsup really fairly significant omission stated impossible track formdata file upload progress without property exposed jqxhr object documented superset browser native xml object upload property one example simply true respect xml level either properties exposed must way access native xhr", "d": "10/2014"}, {"body": "comment author jaubourg ways access native xhr overriding optionsxhr prefilter want upload jquery better implement upload method rather try ajax even bloated", "d": "10/2014"}, {"body": "comment author jzaefferer overriding optionsxhr prefilter good enough least document access nonexposed properties sane way part existing docs see also mike comment", "d": "10/2014"}, {"body": "comment author dmethvin like bettersimpler way well", "d": "10/2014"}, {"body": "comment author mikesherov", "d": "10/2014"}, {"body": "comment author timmywil", "d": "10/2014"}, {"body": "comment author rwaldron ajax extendable", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author mikesherov f timmy", "d": "10/2014"}, {"body": "comment author meleyal seems access xhr object ajaxsettingsxhr", "d": "10/2014"}, {"body": "comment author dmethvin switching far ajax concerned since addition make would crossbrowser either branch prefer deal xhr", "d": "10/2014"}, {"body": "agree seems like confusion pile top let handle via different interface", "d": "10/2014"}, {"body": "comment author antti applies earlier versions jquery well reported latest stable", "d": "10/2014"}, {"body": "comment author dmethvin concerned changing considering compatibility implications way forever window width return documentdocumentelementclientwidth include scrollbars observed say width viewport opinions people expect exclude scrollbars would break lot code changing", "d": "10/2014"}, {"body": "comment author anonymous sure articulated clearly actually meant jquery width fact excludes scroll bar width css media queries count part viewport image might emphasize point see also css defines breakpoint say width viewport nt consistent browser considers viewport width understand would might things bothers match width css media queries using ie width viewport fact none test changing jsfiddle window width window innerwidth window outerwidth possibility get even one working consistently browser viewport width", "d": "10/2014"}, {"body": "comment author dmethvin yes made clear point far tell way long time change good chance break someone code expects width include client area still looking feedback others", "d": "10/2014"}, {"body": "comment author scottgonzalez please nt change honestly strange media queries include scrollbars since developers obviously using things like maxwidth based actual usable space excludes scrollbars expect tons broken sites jquery changed almost broken sites media queries changed thought", "d": "10/2014"}, {"body": "comment author antti understand changing window width would break things nt think changing window outerwidth would break anything", "d": "10/2014"}, {"body": "comment author antti could someone also post example code would break behave strangely changed quite sure currently even see risk high guys", "d": "10/2014"}, {"body": "comment author antti adding looking closer api documentation width states following returns width browser viewport window width returns width html document document width window width currently returns documentdocumentelementclientwidth nt wrong regarding api documentation", "d": "10/2014"}, {"body": "comment author scottgonzalez could someone also post example code would break behave strangely changed anything positions elements relative window eg notifications positioning top right corner would overflow cause horizontal scrollbar anything sizes elements relative window eg overlays overlay would large would cause horizontal scrollbar anything bounds testing window eg draggable elements contained window bounds would slightly wide would cause horizontal scrollbar right edge increasing size document bounds likely several scenarios well generic cases popped head right away", "d": "10/2014"}, {"body": "comment author antti sound something would jquery think cases handled css occasions bounds part correct one yeah might break things looking actual references existing code could test eg links github projects", "d": "10/2014"}, {"body": "comment author dmethvin seems highly unlikely anyone would using window outerwidth today mark open potential change", "d": "10/2014"}, {"body": "comment author scottgonzalez replying dmethvin seems highly unlikely anyone would using window outerwidth today mark open potential change", "d": "10/2014"}, {"body": "comment author dmethvin return value wondering use case spawned", "d": "10/2014"}, {"body": "comment author scottgonzalez use case generic plugins operate elements documents windows example plugin centers x inside would something like xcss left youterwidth xouterwidth correct behavior would achieved today even window however scrollbar width included x would offcenter half size scrollbar compensate would need check windows var ywidth iswindow ywidth youterwidth xcss left ywidth xouterwidth note extended logic already required want support jquery lt since nt support outerwidth windows", "d": "10/2014"}, {"body": "comment author scottgonzalez irc discussion three years ago", "d": "10/2014"}, {"body": "comment author emartel hi sorry nt strong web development background interested topic thought one best way learn collaborate existing projects given thoughts problem wondering would nt simple solution sure elegant solution might start handle legacy code new code wants outerwidth takes scrollbars account would option add state window jquery object default state legacy noscrollbar decent name explains behavior calls made object using function call window sizeexcludesscrollbars truefalse state altered state persisted making subsequent calls width height take scollbars account believe change would give antti wants leaving existing code described scott functional guys think", "d": "10/2014"}, {"body": "comment author rwaldron internal design jquerydata jqueryfndata changing forth coming release", "d": "10/2014"}, {"body": "comment author dmethvin see also", "d": "10/2014"}, {"body": "comment author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "comment author jbedard sorry dupe internal design change solution proposed plans pull request still using objectdefineproperties assume data creation still slow", "d": "10/2014"}, {"body": "comment author dmethvin yes pr mainly proof concept see could attach data directly dom elements avoid cleanup reduce chances leaks suspect need abandon nice encapsulation get speed back", "d": "10/2014"}, {"body": "comment author rwaldron like see benchmarks patterns reflect real pathological use jquery data divs nt realistic using objectdefineproperty means expando property visible objects data elements nt really big deal extant code wants use var data means writable configurable enumerable property user data jquery internal data data properties appearing forin array returned objectkeys jqueryeach iterations data properties appearing json fixed falling back old tojson hack many properties every object fails tests course patched object exists value expando wo nt match returned data", "d": "10/2014"}, {"body": "comment author rwaldron data properties appearing json fixed falling back old tojson hack also means breaking jqueryhasdata agrees data exists even empty data obj exists data returns entire data object expected properties retrieve data object wrapped js object removedata clear object make sure right number properties came data appears expected data empty sanity check data nt change even though data attrs confident fixed concerned resulting code maintenance nightmare", "d": "10/2014"}, {"body": "comment author jbedard sure definepropertyies main cause thought quick test replacing plain assignment use case still significantly slower quick test defineprop big factor could simple assignment used elements still use defineprop objects use case table every cell data approx cells rows columns loads slower vs extra mainly datakey gc example rows x columns seems reproduce profiling cases looks like jsperf reproduces almost exact issue forced relayout expensive cloneappenddatagc fairly small datakey gc skyrocket making relayout looks like might really effect chrome though surprised", "d": "10/2014"}, {"body": "comment author jbedard looks like chrome acting due long data expando property name assume longer name treated differently causes element properties stored differently seems fix everything change makes run faster chrome makes go first run removes gc cpu usage made test locally basically called go heap example showing setting different sized property names elements example ffie actually improve chrome nt understand original bug seems mainly effect chrome others maybe chrome also memory issues also note using plain assignment instead definepropertyies maybe elements still makes another faster datakey get reduced enough uses less time dom manipulations like jsperf jsfiddle examples", "d": "10/2014"}, {"body": "comment author dmethvin awesome jbedard thanks drilling seems like able use uid critical thing allow multiple jqueries work element without conflict jqueryexpando ensure rwaldron think", "d": "10/2014"}, {"body": "comment author jbedard might cause meaning would mathrandom causing issue length string", "d": "10/2014"}, {"body": "comment author dmethvin interesting least fix would easy", "d": "10/2014"}, {"body": "comment author jbedard looks like sizzle also puts property onto dom elements containing dash sizzletimestamp update would great least remove avoid main chrome issue", "d": "10/2014"}, {"body": "comment author jbedard delete elem internalkey cleandata seems cause thing combined lead chrome crashing case deleting giant grid gt nodes delete line cause node increase memory", "d": "10/2014"}, {"body": "comment author markelog landing seems improved also note using plain assignment instead definepropertyies maybe elements still makes another faster sounds like using defineproperties bad idea get back using plain assignment", "d": "10/2014"}, {"body": "comment author jbedard even switching defineproperties defineproperty since one helps bit really think something would best", "d": "10/2014"}, {"body": "comment author replying jbedard even switching defineproperties defineproperty since one helps bit really think something would best agree current implementation trying bit clever", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "migration helper script", "d": "10/2014"}, {"body": "done changelog purposes cc dmethvin table tickets status migrated ie closed switch github milestone match ticket summary owner type priority component update elements mgol feature low manipulation milestone matches ticket summary owner type priority component switch script injection instead indirect eval call markelog feature blocker core warn sizzle nt recent tag release timmywil bug blocker build hidden selector finds elements chrome safari ff ie timmywil bug high css visible inconsistent across browsers empty tags timmywil bug high css isnumeric implementation version returns wrong results opera bug high core reintroduce use requestanimationframe feature high effects remove optimization make jquery compatible google polymer project bug high css globaleval handling use strict pragma incorrect bug low core windowgetdefaultcomputedstyle elem may return null rrrosas bug low css workaround tests android unable crossdocument node manipulation mgol bug low manipulation buildfragment process script element error bug low core error using jqueryajax amd bug low ajax wrap module uses manipulation module declare dependency bug low manipulation drop bower npm timmywil bug low build milestone match ticket summary owner type priority component error jquery bug low manipulation", "d": "10/2014"}, {"body": "nice job mzgol", "d": "10/2014"}, {"body": "still close bugs old tracker pain least migrating tickets little easier script using github api", "d": "10/2014"}, {"body": "awesome thanks easier track release", "d": "10/2014"}, {"body": "mzgol lt", "d": "10/2014"}, {"body": "comment author dmethvin global events destined trash heap say think longterm goal remove trigger ajax events document breaking change course needs done lot advance notice already possible hook beforesend via ajaxsettings suffice", "d": "10/2014"}, {"body": "comment author jaubourg like dave said ajax events way deprecation actually nt need beforesend event use cases examples pull request use ajax prefilters first use case ajaxprefilter function settings settingsdatatypes xhrsetrequestheader accept settingsacceptsscript second use case ajaxprefilter function settings jqxhr settingsvalidateform amp amp validateform settingscontext jqxhrabort case add validateform option ajax calls related form needs validation put form context course", "d": "10/2014"}, {"body": "comment author joshpeek sounds like removing ajax global events deprecate global event triggers rather kill events together definitely favor triggering document living ajaxbeforesend polyfill yeah hook onto ajaxsetup issue thats one passes beforesend callback ajax override disable event major issue ajaxsetup general global ajax events nice alternative ajaxsetup nt think ever wanted global callbacks disabled local one provided really nt think want using ajaxprefilter domain specific form validation awful api wonderful thing events easily cancelable bubbling semantics ca nt use event delegation machinery prefilters prefilters also meanings global context first use case pointed kinda prefilters design could still accomplish thing either way second use case quite since requires set settingsvalidateform real equivalent would ajaxprefilter function settings settingscontext form amp amp validateform settingscontext jqxhrabort write element matchers like using fnon much nicer fnbind thats kinda generic example magnify situation try use many times domain specific contexts document ajaxbeforesend formnewcomment dataremote function return find input val also pair really great ajaxcomplete document ajaxbeforesend function addclass loading document ajaxcomplete function removeclass loading see also rails jquery adapter bubbling beforesend event form ajax beforesend everyone using rails already interacting dataremote forms dataremote ca nt set stuff like settingsvalidateform nt control ajax caller forced delegate action means ajax content settings matters much zepto already implementing prefilter api lines code add prefilters offer ca nt simple event related prefilter code like lines guys already pretty great event system", "d": "10/2014"}, {"body": "comment author dmethvin think argued case well cost implement nt high firing event document jaubourg think", "d": "10/2014"}, {"body": "comment author jaubourg think road choppy choppy network connection ca nt answer right respectfully disagree joshpeek however give proper answer next week enough time properly", "d": "10/2014"}, {"body": "comment author scottgonzalez worth bothered years ajaxsetup annoying global beforesend useful wrote amplifyrequest made sure publish message beforesend callback never understood nt onetoone correspondence callbacks events ajax requests", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author dmethvin jaubourg nt complete thought seems like completeness fired document", "d": "10/2014"}, {"body": "comment author mikesherov sentiments dave", "d": "10/2014"}, {"body": "comment author rwaldron consistency", "d": "10/2014"}, {"body": "comment author timmywil", "d": "10/2014"}, {"body": "comment author jaubourg still issue op expressed regarding prefilter needs use settingscontext explicitely far understand also case global events fire document also prefilter nt incur performance penalty order magnitude firing event prefilter also accidently removed third party code documentoff ajaxbeforesend anyone also automagically offers closure data shared across handlers prefilter done fail without need attach data context data pertains ajax request dom element short selfcontained space ideal kind problems promoted introducing global ajaxbeforesend yet another step direction know wrong need orthogonal logic run request sent much better covered prefilters reason exist first place", "d": "10/2014"}, {"body": "comment author joshpeek could reconsidered global events fire document", "d": "10/2014"}, {"body": "comment author jaubourg first onreadystatechange xhr events support removed original rewrite size beginning real blocking issue used much one may think use cases represent need widespread enough justify quite substantial bump size especially already success error complete callbacks jqxhr object nt strive implement whole xhr api complete xhrcompatible wrapper makes sense relatively diversity transports hood bandwidth detection example clearly typical usecase web app putting mildly beside wanted full control xhr still use jqueryajaxsettingsxhr create native xhr end given level control require nt need ajax intervene top native xhr setting headers automagically without knowledge instance patch really nt like create specific options make sense xhr transport really want right insist using ajax lowlevel control xhr easily copy code apply patch change line jqueryajaxtransport function drop file application override default xhr transport able whatever need said know need progress notification system guess progress callbacks deferredspromises would perfect fit kind things given deferreds progress transport agnostic transport able provide progress notification protocol leave opened given love see something notify readystate changes using deferreds progress make soon since nt brought proposals new features order doubt see hand addition would pretty neutral since progress callbacks nt exist earlier code breakage since existing behaviour stays unchanged anyway yes need kind progress notification system transports adding options specific given transport acceptable approach let use deferreds progress introduced transports notify events try take conversation forward next jquery meeting", "d": "10/2014"}, {"body": "comment author jaubourg duplicate ticket", "d": "10/2014"}, {"body": "comment author jaubourg duplicate ticket", "d": "10/2014"}, {"body": "comment author dmethvin bulk change enhancement feature", "d": "10/2014"}, {"body": "comment author dmethvin progress callbacks make easy", "d": "10/2014"}, {"body": "comment author hungerandthirst nt know top need investigate get back chance look new callbacks yet", "d": "10/2014"}, {"body": "comment author mikesherov informed enough choose", "d": "10/2014"}, {"body": "comment author gnarf think least look using notify send something state change measure size decide", "d": "10/2014"}, {"body": "comment author jaubourg fyi preliminary study indicates adding minimal implementation progress callback xhr transport would call readystate native xhr instance sole parameter inspected used vicinity mingzipped attempt make secure expose native xhr directly useful call progress handlers meaningful parameters make much bigger actually desirable approach quite torn know useful would yet feel like much weight point since know xhr transport extremely simplified like postpone", "d": "10/2014"}, {"body": "comment author dmethvin fine moving later date plenty things keep us busy next couple months", "d": "10/2014"}, {"body": "comment author anonymous replying dmethvin anything adding support introduce lot people progress always thought clever part deferred", "d": "10/2014"}, {"body": "comment author dmethvin", "d": "10/2014"}, {"body": "author rwaldron normalization purposes jquery core maintain round pixel value returns however easily write csshook return widthheight value format prefer", "d": "10/2014"}, {"body": "author bzbarsky clear bug makes width completely useless layout calculations uas subpixel layout compute widths look like fit container fact nt people running time uas fact subpixel layout eg webkit", "d": "10/2014"}, {"body": "author mikesherov boris suggest stop rounding fraction returned", "d": "10/2014"}, {"body": "author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "author mikesherov duplicate ticket", "d": "10/2014"}, {"body": "author mikesherov bzbarsky could get ff return floats offsetwidth offsetheight would solve fact jquery nt use getcomputedstyle height calculations uses offsetheight subtractsadds padding border margin necessary perhaps file bug", "d": "10/2014"}, {"body": "author mikesherov bzbarsky reported ff might take stab ditching offsetwidthoffsetheight jquery oldie codepaths gone would fixed automatically offsetwidthheight stopped rounding", "d": "10/2014"}, {"body": "author mikesherov boris nt use offset use getboundingclientrect", "d": "10/2014"}, {"body": "author mikesherov good news ff chrome safari opera getboundingclientrect work great reporting subpixel values appropriate containing width property however bad news reports opposed offsetwidth ie lt reports textrectangle object width property sigh truly want get subpixely either see drop offsetwidth altogether feature detect subpixely getboundingrectclient use", "d": "10/2014"}, {"body": "author mikesherov oh works right", "d": "10/2014"}, {"body": "author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "author dmethvin duplicate ticket", "d": "10/2014"}, {"body": "author dmethvin ref still jquery may better position since site gets choose whether wants upgrade newer jquery question whether lot popular plugins would break fractional widths heights", "d": "10/2014"}, {"body": "going mark potential inclusion release might best place try breaking change like", "d": "10/2014"}, {"body": "mikesherov assigning want please reassign back notify plz", "d": "10/2014"}, {"body": "author anonymous fadein fadeout also nt work", "d": "10/2014"}, {"body": "author domastrijonis fails jquery sets filter property make work correctly msfilter set", "d": "10/2014"}, {"body": "author addyosmani confirming still issue", "d": "10/2014"}, {"body": "author chee confirming still issue jquery", "d": "10/2014"}, {"body": "author dmethvin mikesherov ended assigned inclined wontfix think", "d": "10/2014"}, {"body": "author mgol dmethvin ca nt use msfilter apart filter remove filter anyway", "d": "10/2014"}, {"body": "author dmethvin mgol sure according microsoft msfilter applies synonym filter since dropping support soon perhaps problem simplified want grab ticket see come fix", "d": "10/2014"}, {"body": "author mgol dmethvin meant still msfilter better syntax conforms css rules filter certainly grab ticket amp check effect", "d": "10/2014"}, {"body": "author djgilcrease make jquerydefered promise closer conforming specification around exceptions checked full compliance tests setup test shows exception handling working expected pull request", "d": "10/2014"}, {"body": "author dmethvin nt think right way go swallowing exception silently reported poorly user foresight attach fail handler see even current proposed spec discussions handwaving needing browser support dev tools able debug properly prefer users opt standard promises compliant polyfill retroactively changing semantics deferred significant way seems like bad idea especially builtin support notify unhandled promise rejections", "d": "10/2014"}, {"body": "author markelog ticket requires clarification specification mentioned ticket description one refers domenic repository also promisesa promisesa proposals much relevance right plus upcoming draft also promise clause dom specification draft stage already implemented two browsers firefox nightly chrome canary without prefixes browsers however implementation mistakes new specification defines new api significantly differs jquery deferred aside methods like cast catch etc also behaivor differences guarantee asynchronous execution swallows errors passes propagate stack rejection handlers progress handler signature always passes one argument successfulfailed callbacks", "d": "10/2014"}, {"body": "author dmethvin definitely good emphasize promisesa proposal standard comply jquery deferred several years would guess number users promisedeferred implementation exists today let break code keep deferred way look ways let developers use emerging standard lively discussion around addition done method promises would swallow exceptions nt seem slated first iteration standard think shame built done way around without proposed browser support exposing unhandled exceptions promises going difficult debug", "d": "10/2014"}, {"body": "author rwaldron replying markelog ticket requires clarification specification mentioned ticket description one refers domenic repository promises specification", "d": "10/2014"}, {"body": "author domenic promisesa standard basis promises specification promises follow promise specification pass promisesa tests promises spec effect superset promisesa spec", "d": "10/2014"}, {"body": "author anonymous built done way around false promiseprototypedone onfulfilled onrejected thisthen onfulfilled onrejected catch e gt settimeout gt throw e", "d": "10/2014"}, {"body": "author dmethvin rethrowing error object propagated nt letting browser handle error point occurred lot important error context lost especially older browsers still supports however particular pull request listed trying turn deferred promisesa ca nt would break years worth existing code already using deferred nobody wants break web instead expect support promises like mentioned seems like good approach edit clarified subject reason ticket nt closed expect support promises changing deferred", "d": "10/2014"}, {"body": "author domenic guess unclear op meant make promises speccompliant changefix implementation match spec shipped implementation use pipe continue using jqueryspecific functionality sounds like saying something different op wherein changefix implementation match spec instead somehow support real promises unclear", "d": "10/2014"}, {"body": "author dmethvin reading agree unclear pull request referencing issue misplaced since op nt mention changing deferred becomes confusing close open new ticket specific title", "d": "10/2014"}, {"body": "author mgol amsterdam meeting discussed op says compliance spec wording clear modify title amp text issue prefer recreate one since discussion already started", "d": "10/2014"}, {"body": "author mgol discuss san diego surprisingly jaubourg seemed ok switch least stable browsers implement new spec keeping pipe current semantics like see much code would affected nt think many people relied production code promise throwing errors way flow control oth jquery even small amount lot larger question deprecate old apis eg case ajax planned xhr ever able actually remove former question similar concern", "d": "10/2014"}, {"body": "author calvinmetcalf chrome beta implements firefox beta flag stable browsers soon", "d": "10/2014"}, {"body": "author markelog replying calvinmetcalf chrome beta implements firefox beta flag stable browsers soon see ticket description wait ship unprefixed behind flag stable browsers first", "d": "10/2014"}, {"body": "author anonymous unwrapping thenables also change consider spec useful", "d": "10/2014"}, {"body": "author dmethvin edited title line actually plan converting internal uses deferred emerging promise implementations semantics two differ much promise lacks several features deferred uses progress callbacks multiple arguments however plan accepting promise input appropriate eg ensuring deferred works thenable", "d": "10/2014"}, {"body": "duplicate", "d": "10/2014"}, {"body": "html parser browser parser act differently example throw exception use jquery instead use direct dom operations", "d": "10/2014"}, {"body": "familiar direct dom operations would equivalent using act differently firefox chromium safari opera see browser bug multiple browsers", "d": "10/2014"}, {"body": "yes equivalent operation two behave similarly browser attempts give error try make sense given may involve ignoring input see article", "d": "10/2014"}, {"body": "understand dropping input preventing developers seeing problem impediment debugging browsers fix bug innerhtml implementations also generate warning html", "d": "10/2014"}, {"body": "per article parsing lenient design browser give something like console warning jquery nt get involved process would need look console already many static html errors page nt give errors html injection via", "d": "10/2014"}, {"body": "console warning exactly think missing", "d": "10/2014"}, {"body": "polyergic nt think jquery job provide console warnings things browsers would easy implement today purpose otherwise devs would get flooded warnings jquery setter internally sets value browser generates warning using jquery claimed know better browser vendors warnings browser implements warnings get duplicate right thing logging anything", "d": "10/2014"}, {"body": "submitted bugs browsers", "d": "10/2014"}, {"body": "page throwing error due security problem nt call handlers error occurs xhr method request starts could trycatch call perhaps", "d": "10/2014"}, {"body": "original discussion changed months ago timmywil priority changed undecided high status changed new open component changed unfiled ajax changed months ago rwaldron applause changed months ago jaubourg owner set jaubourg status changed open assigned followup changed months ago markelog would suggest present method shorthand method like jquerygetpostgetscript therefore rename cache type options change signature beforesend jqueryajax expose localprotocols global config array instead eventually possible build jquery interface different tickets reply followup changed months ago scottgonzalez replying markelog would suggest present method shorthand method like jquerygetpostgetscript therefore rename cache type options change signature beforesend jqueryajax shorthand method complete replacement jqueryajax lots parameters bad api expose localprotocols global config array instead eventually possible build jquery interface different tickets except possible build intended without goal leave jqueryajax asis create new leaner simpler api reply followup changed months ago markelog complete replacement jqueryajax could complete replacement jqueryajax since presented functionality like could nt use jsonp script transports give alternatives nt given method name could nt use getjson shorthand method jqueryxhr since conversion list could continue lots parameters bad api arguments except possible build intended without quite localprotocols global config could implemented first jqueryajax could start using build option obviously need implement method first task purpose could make build option hence word eventually quote goal leave jqueryajax asis create new leaner simpler api could achieve jqueryxhr would presented shorthand jqueryajax would considered last resort method fear choose route could lead source confusion reply followup changed months ago scottgonzalez replying markelog could complete replacement jqueryajax since presented functionality misunderstanding wording replacement complete functionality jqueryajax complete replacement sense jqueryajax removed jqueryxhr added one main goals completely get rid jqueryajax jqueryxhr ca nt shorthand method quite localprotocols global config could implemented first jqueryajax could start using suppose nt think plans change apis around jqueryajax proposed path touch jqueryajax goal leave jqueryajax asis create new leaner simpler api could achieve jqueryxhr would presented shorthand jqueryajax would considered last resort method fear choose route could lead source confusion sure source confusion would happy talk potential confusion using jqueryxhr nt using jqueryajax docs would make clear reply changed months ago markelog completely get rid jqueryajax oh even jqueryxhr could functionality jqueryajax better api even would bold guess even deprecate jqueryajax proposed path touch jqueryajax designation localprotocols made inside ajax module public api consequance jqueryxhr introduction said ticket description make public property expose jqueryajaxsettings format question would recommend dealt jqueryxhr implementation would affect jqueryajax like convertors option could passed jqueryajax defined jqueryajaxsettings changed months ago scottgonzalez exposure localprotocols nt affect jqueryajax want would expect jqueryajaxsettings would nt used jqueryxhr changing actual default values ajax requests seems really bad changed months ago dmethvin definitely way change default settings since potential create havoc modular app like jqueryajaxsettings would also good clearly document method whether data sent url alternatively content body ambiguity whether methods like delete body recall ticket around somewhere changed months ago jzaefferer ticket description outlines options keep though consider adjusting well angualar http service seems like good reference specifically avoid confusion data separate params option params get appended query string data message body without ambiguity another aspect consider response object angular puts data status headers config properties single response object order fit promise changed months ago dmethvin yehuda mentioned code among things adapts ajax rsvpjs promise promisesa compliant changed months ago dmethvin milestone changed none changed months ago dmethvin duplicate ticket", "d": "10/2014"}, {"body": "decided create new ajax interface new release create plugin instead", "d": "10/2014"}, {"body": "original discussion changed months ago tde behavior jquery changed months ago dmethvin hi convert example inline example jsfiddlenet changed months ago mgol owner set tde status changed new pending changed months ago tde status changed pending new test case followup changed months ago timmywil status changed new closed resolution set notabug respecting borderbox outside scope width due fact specific methods account padding margin border innerwidthouterwidth truefalse width however use css width instead reply changed months ago anonymous replying timmywil respecting borderbox outside scope width due fact specific methods account padding margin border innerwidthouterwidth truefalse width however use css width instead clearly bug provided workaround want block border border border etc open mind reconsider shit documentation clearly states note width value sets content width box regardless value css boxsizing property changed months ago timmywil status changed closed reopened resolution notabug deleted valid documentation quote point making nevertheless seems edge case caused combining nonpx like em borderbox changed months ago timmywil owner changed tde timmywil priority changed undecided high status changed reopened assigned component changed unfiled css milestone changed none changed months ago timmywil afaict two routes take unit pixels skip widthheight augmentation completely historically dealt problems involving nonpx units exceptions also advantage small fix could something similar main tween convert necessary values set unit accurate could get expensive could potentially require loop width border margin padding order unify units value adjustment time width set imagine animating width thoughts changed months ago favor exploring size performance impact option may take stopgap meantime might reasonable option seems like overkill changed months ago timmywil perhaps could ensure units setpositivenumber call set value asis changed months ago joshua tausz discovered similar case expands scope bug using jquery chrome windows enterprise bug occurs types unit missmatch example provided initial report set width padding px border result width different behavior expected setting padding returns width would seem indicate translated adding width able use chrome builtin debugger trace code file function agumentwidthorheight returns reflect padding set either side unit attached specifically occurs line already part loop used add various values together type checkingconversion could handled inside existing loop coder go option value used function setpositivenumber value subtract line suggest using type conversion transmitting type value reported function agumentwidthorheight type conversion done line additional style missmatches cause issues suggest longer much edgecase changed months ago dmethvin milestone changed changed months ago timmywil milestone changed", "d": "10/2014"}, {"body": "original discussion changed months ago timmywil priority changed undecided blocker status changed new open component changed unfiled css milestone changed none looks valid reply description changed months ago francomalatacca replying jwagner css left problem style function called css function nt care percentage fix could adding support checking symbol end value compute percentage parent width fixed bug something type string amp amp ret rrelnumexec value fixes bug iexec value value ret ret parsefloat jquerycss elem name else value parsefloat jquerycss elem name parsefloat jquery elem parent css width ret ret thanks franco changed months ago owner set status changed open assigned changed months ago milestone changed changed months ago anonymous reproducible unit em popular units like cm etc need fix changed months ago dmethvin milestone changed", "d": "10/2014"}, {"body": "jogi wrong jsfiddle trying reproduce case correctly", "d": "10/2014"}, {"body": "examples seem working correctly describe trying behavior expecting behavior seeing", "d": "10/2014"}, {"body": "duplicate ticket", "d": "10/2014"}, {"body": "jogi case nt understand tblmf namenumasacmp gt undefined tblmf find namenumasacmp gt works firefox works", "d": "10/2014"}, {"body": "need something reduced kb html plus script unrelated issue", "d": "10/2014"}, {"body": "jogi ok reduced exemple", "d": "10/2014"}, {"body": "jogi see one thing remove line prop disabled false selector works correclty", "d": "10/2014"}, {"body": "jogi observation tblmf namenumasacmp gt undefined tblaa namenumasacmp gt work", "d": "10/2014"}, {"body": "removed superfluous markup script fiddle changed better insight something seems related sizzle combinator caching oldie", "d": "10/2014"}, {"body": "jogi problem input instead name nonstructassettemplate input length nonstructassettemplate find input length", "d": "10/2014"}, {"body": "actually problem clone versions well sure clone still reference sizzle cache object referent wreaks kinds havoc operation using maybe update fixclonenodeissues look remove attributes associated referenceequal clonesource properties", "d": "10/2014"}, {"body": "pr", "d": "10/2014"}, {"body": "conflicts stated official download page meant cdn distribution woundering removed npm bower releases clarify timmywil", "d": "10/2014"}, {"body": "yea fine removing bowernpm well", "d": "10/2014"}, {"body": "next version", "d": "10/2014"}, {"body": "done purpose idea people download files cdns install bower copy rarely might true though tools like fine change downside people copying files around using npmbower bundle longer see source maps", "d": "10/2014"}, {"body": "nt sizzle issue instead jquery think sizzle docs help", "d": "10/2014"}, {"body": "first pretty old tried latest version jquery second better way make custom selectors staabm pointed reopen bug", "d": "10/2014"}, {"body": "thank everyone help", "d": "10/2014"}, {"body": "wanting fix pr delete line url replace", "d": "10/2014"}, {"body": "nt delete wayback machine still content", "d": "10/2014"}, {"body": "could modify point wayback machine url", "d": "10/2014"}, {"body": "sounds like good idea broken links drive crazy timmywil intent seems simply give credit courtesy removing would fine well", "d": "10/2014"}, {"body": "arthurvr want send pr wayback link", "d": "10/2014"}, {"body": "opened", "d": "10/2014"}, {"body": "work sizzle requires first argument string assuming implementation presumably empty includes based exclusion inclusion within could light enough would", "d": "10/2014"}, {"body": "sorry nt understand objection meant form something like first comes mind question filter elements elementarray context provided oktober mesz schrieb richard gibson notifications githubcom work sizzle requires first argument string assuming implementation presumably empty includes based exclusion inclusion within could light enough would reply email directly view github diese nachricht wurde von meinem androidmobiltelefon mit mail gesendet", "d": "10/2014"}, {"body": "fan argument since selection via expressed without extra confusing twoargument variants think latter clearer cases nt great value adding another overload way clearly possibility compat problems since eight years code would nt expect interpretation already many overloads", "d": "10/2014"}, {"body": "yeah probably right", "d": "10/2014"}, {"body": "please recheck also jquery old unsupported newest version", "d": "10/2014"}, {"body": "also please attach complete test case jsfiddlenet show expect hard guess problem gist", "d": "10/2014"}, {"body": "iirc zoom related issues used wo nt fix nt currently appear case", "d": "10/2014"}, {"body": "mzgol ca nt set body zoom jsfiddle well jsbin please check safari page loaded body zoom", "d": "10/2014"}, {"body": "mzgol safari get", "d": "10/2014"}, {"body": "tgfjt thanks test case used work safari sigh", "d": "10/2014"}, {"body": "mzgol oh yes safari case body zoom value zoom", "d": "10/2014"}, {"body": "could check styling check instead idea solves issues though cc mikesherov", "d": "10/2014"}, {"body": "chrome got safari got got", "d": "10/2014"}, {"body": "rwaldron thank comment btw let know wo nt fix list", "d": "10/2014"}, {"body": "tgfjt", "d": "10/2014"}, {"body": "mzgol thank", "d": "10/2014"}, {"body": "yes think issues zoom reliably detect zoom level impossible adjust results problem compounded using etc round integers losing data", "d": "10/2014"}, {"body": "think agree supporting zoom related issues something like bog bog nt understand wrong detection fix", "d": "10/2014"}, {"body": "problem compounded using offsetwidth etc round integers losing data might safer use higher numbers wo nt even increase size safe probably wo nt handle cases least little less vulnerable", "d": "10/2014"}, {"body": "something", "d": "10/2014"}, {"body": "mzgol suppose could play numbers bit common zoom values would fooled sure offsetposition methods work properly conditions would problem user calls forcing zoom pretty antisocial thing seem like try fix", "d": "10/2014"}, {"body": "couple points ca nt superset xhr native version nt method ca nt one since browser sends default set headers would way get facilitate debugging test automation struggling sustain current size jquery whereas feature would pretty limited use slowly deprecating method replacing new interface", "d": "10/2014"}, {"body": "microsoft bug report put fix definitely would need feature detect since browser sniff cause bad behavior bug fixed", "d": "10/2014"}, {"body": "nt able find official bug reports similar issue discussed stackoverflow deals issue whether checkbox becomes clicked state also discusses feature detect could adapted check event", "d": "10/2014"}, {"body": "leongersen nt able find official bug reports could report one", "d": "10/2014"}, {"body": "already", "d": "10/2014"}, {"body": "thanks report", "d": "10/2014"}, {"body": "leongersen oops changed", "d": "10/2014"}, {"body": "general resolution process like ie team fix end potentially even slipstream patch next months happy coordinate sort fixes browser vendors good web devs part charter look adoption rate new jquery versions likely sites would nt actually fix months even years meantime recent versions jquery would bloated dozens rare edge cases majority developers would never encounter prefer see problems addressed directly browser vendors depending feedback add workarounds impact high vendor nt planning quick fix", "d": "10/2014"}, {"body": "understandable policy seems unlikely microsoft fix older versions internet explorer got hand aware testing document modes may reflect actual browsers seem share issue inconsistencies event pseudo selector fixed jquery core would prefer see plugins provide patchworkaround", "d": "10/2014"}, {"body": "goes way back likely need look fix inside jquery original report made sound like problem made fiddle little info event order fix still work keyboard use well want sure patch actually bringing ie compliance written standard none seem helpful defining interaction checkbox mention references talk ie team see reason current behavior history aside nt look like sizzle support yet selector seems safe need add non queries work sure widely implemented browser moment tracked", "d": "10/2014"}, {"body": "written fix feature detect issues event state keyboard support issues force browsers others false force takes lines fix issues wrapped small library together helpers github tests docs yet behaviour nt properly defined spec perhaps jquery nt force", "d": "10/2014"}, {"body": "probably issue apijquerycom repo nt", "d": "10/2014"}, {"body": "yes also would help suggest wording easier understand proposed ideally would pull request page", "d": "10/2014"}, {"body": "ca nt use one things handler might ask server requests progress want stop exit lose work user cancel damage would still done agree dependency unfortunate undesired", "d": "10/2014"}, {"body": "could guard whole block though basically restricting fix complete builds", "d": "10/2014"}, {"body": "anything special event effects module hack relative oldie plus already guard checking presence object although code path executed newer version ie ca nt use method directly", "d": "10/2014"}, {"body": "guarding block works justifies listed dependency suppose markelog remembered falsely seems nt work perhaps check feature detect attach way problem supposed fixed nt present", "d": "10/2014"}, {"body": "perhaps check attachevent feature detect attach way think yes provide patch today", "d": "10/2014"}, {"body": "would failed unit tests", "d": "10/2014"}, {"body": "nevermind looking wrong tests entirely wrong function", "d": "10/2014"}, {"body": "docs argument always plain javascript object types object dom elements primitive stringsnumbers host objects may give consistent results across browsers", "d": "10/2014"}, {"body": "going post", "d": "10/2014"}, {"body": "nt bit early inside jquery line person using knows whether environment going nt know", "d": "10/2014"}, {"body": "yes probably early wanted get general feedback", "d": "10/2014"}, {"body": "hard argue one line code smilecat environment know maybe phonegapcordova app year two could handy nt think keep ticket open amount time though", "d": "10/2014"}, {"body": "agree", "d": "10/2014"}, {"body": "slick", "d": "10/2014"}, {"body": "going drop screenshot code becomes common syntax comparison useful", "d": "10/2014"}, {"body": "chrisantaki want take", "d": "10/2014"}, {"body": "sure markelog", "d": "10/2014"}, {"body": "markelog discussed irc small fix good note changes undocumented nonpublic data structures need advance notice firefox dev tools gropes find real handlers cry would nt want reorganized", "d": "10/2014"}, {"body": "thanks heads dmethvin", "d": "10/2014"}, {"body": "update might memory leak due recursion digging", "d": "10/2014"}, {"body": "good news test causing memory leak", "d": "10/2014"}, {"body": "fixed version test shows performing faster", "d": "10/2014"}, {"body": "like pay bytes speed caching regex recursion new parameter added method", "d": "10/2014"}, {"body": "get fancy speed bytes instead new parameter ask moonlight cache bearer agrees course", "d": "10/2014"}, {"body": "summary original jsperf test memory leak fixed increased performance beyond two ways increase performance found steps forward recommend going branch either since increases clarity code introducing new variable name downside branch byte cost minified amp gzipped branch costs bytes pretty clever fear less readable branches improve performance around sure sold merging either changes though working fun especially branch", "d": "10/2014"}, {"body": "chrisantaki consider removing recursion entirely", "d": "10/2014"}, {"body": "nope give try", "d": "10/2014"}, {"body": "please talk rxaviers instead building one scratch", "d": "10/2014"}, {"body": "please whoever going work get touch ideas share", "d": "10/2014"}, {"body": "issue probably closed duplicate", "d": "10/2014"}, {"body": "say way around issue older right", "d": "10/2014"}, {"body": "actually older port nt really matter comments", "d": "10/2014"}, {"body": "see great discussion current state shadow dom think implementation start plugin evaluate utility stability let close ticket watch spec evolve risk anyone letting us forget say still bit early add support shadow dom", "d": "10/2014"}, {"body": "version jquery boolean supported parameter", "d": "10/2014"}, {"body": "please nt post incomplete bugs start someplace like stack overflow create ticket minimal test case post created jsbincom jsfiddlenet", "d": "10/2014"}, {"body": "dmethvin nt post bugs github issue log nt bug code bug source suggest reading post understanding closing", "d": "10/2014"}, {"body": "post minimal test case jsbincom jsfiddlenet change mind honestly opening issue nt yet looked code reason meaning nt spent enough time post issue code snippet nt runnable asis", "d": "10/2014"}, {"body": "dmethvin agreed tried creating jsfiddlejsbin nt think work expect", "d": "10/2014"}, {"body": "must make jsfiddle modern browser use draft feature checkout", "d": "10/2014"}, {"body": "pretty sure jsfiddle also work appended url created elsewhere main concern original post describes bunch confounding code like bootstrap nt versions document positions important things like jquery shiv real minimal running test case important reopen pending test case", "d": "10/2014"}, {"body": "arthrvr ca nt even log jsfiddlenet old method using longer works perhaps could try instead speculating regardless ticket reopened also agree lot code could create quick demo would absolutely", "d": "10/2014"}, {"body": "adding toolbar even mode perhaps toolbar works nt third url see pattern", "d": "10/2014"}, {"body": "post full working page somewhere want sure complete running test case agree broken", "d": "10/2014"}, {"body": "mzgol actually forgot jshell looking thanks dmethvin jshell able provide example hopefully validate issue alright keep ticket closed originally", "d": "10/2014"}, {"body": "dmethvin perhaps add docs nt really get try hard make site destined js testing work nt make sense contact jsfiddle could ask easy way get raw url nt find url manually every change", "d": "10/2014"}, {"body": "stupid question probably jsbin support", "d": "10/2014"}, {"body": "jaubourg nope stays like", "d": "10/2014"}, {"body": "okay made test case post comment update original question testing even finding incorrect nt necessarily solve issue nt started adding pseudoselectors like element able locate newly created element still demo shows bug prefixed colon handled using jquery using pseudoselectors least consistent finding elements whether includes prefixed elements dmethvin please let know satisfactory", "d": "10/2014"}, {"body": "nt invalid document inline elements ca nt contain block elements", "d": "10/2014"}, {"body": "yes perfectly correct jquery bug submitted bug sorry firefoxgecko webkitblink behaves differently met nonstandard behaviour", "d": "10/2014"}, {"body": "think diagnoses cause wondering left rfc actually standard", "d": "10/2014"}, {"body": "weird supported via activex supported via native xhr oo", "d": "10/2014"}, {"body": "created know sites links make sure tracked well", "d": "10/2014"}, {"body": "created", "d": "10/2014"}, {"body": "created", "d": "10/2014"}, {"body": "guys going handle releasenotesjs", "d": "10/2014"}, {"body": "arthurvr script replaced logic jqueryrelease format bit cleaner consistent using commitplease commit messages also notice reference bugs npm page harm leaving bugsjquerycom page supposed help people selftriage issue reduce number spurious tickets handle core page unclear work fixing", "d": "10/2014"}, {"body": "dmethvin correct think references repos removed open pr according github search nt references", "d": "10/2014"}, {"body": "landed thanks modify commit message little please look", "d": "10/2014"}, {"body": "bug triggering click child bubbles parent invoking handler ad infinitum", "d": "10/2014"}, {"body": "documentgetelementbyid qwer click inside work", "d": "10/2014"}, {"body": "sorry ca nt understand infinitum loop", "d": "10/2014"}, {"body": "test case test case browser might protecting triggering another click handler first one reopen let see others say", "d": "10/2014"}, {"body": "dom example cals dom method element jquery example fires event given element none handlers prevent default action call dom method asked afaict", "d": "10/2014"}, {"body": "yeah mainly wondering nt bubble forgot bubbling default native event apis killing corrected fiddle yeah everything works expected alexufo need remember native dom sth totally different dispatched click event see linked fiddle", "d": "10/2014"}, {"body": "yeah impossible fix without breaking lot existing code might possible majorpoint release though ticket still open", "d": "10/2014"}, {"body": "thank reply dmethvin case doc issue page reports number returned dimensionsrelated apis including width may fractional cases nt true agree", "d": "10/2014"}, {"body": "think still dimension cases fractional start math border padding widths root problem use always integer part calculation", "d": "10/2014"}, {"body": "see thank pointing case propose add note pointing issue feel free close issue duplicate", "d": "10/2014"}, {"body": "never documented use outside library please use documented interfaces", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "would like take", "d": "10/2014"}, {"body": "assume specific jquery core meaning addition repo jqueryrelease right", "d": "10/2014"}, {"body": "yes yes", "d": "10/2014"}, {"body": "installing url package please seek help stack overflow bower package used many users certain contains required files", "d": "10/2014"}]