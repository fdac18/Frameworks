[{"title": "typescript interfaces dependency injection", "body": "strongly typed languages java c used program interface allows loosely coupled components also allows easier unit testing mock implementations interface contract typescript interfaces interesting features structural typing duck typing inference interface even class object marked ambient declarations allow describe party api interface fact creation therefore ts class could explicitly implicitly implement multiple interfaces therefore interface could substituted abstract class specially prototype inheritance underlying javascript interfaces typescript compile time construct useful compiler warn argument nt meet api expectation fact interfaces exist form iifeclass product typescript compilation root problem use di markerhandle possible solutions generate dummy class interface try cast whatever means javascript benefit iife could contain rtti downside typescript compiler would implement would rtti classes explicitly implemented interface know would classgetinterfaces type capture interface name string use di handle allow manual annotation dependencies di interfaces vs autowiring dependencies class di implementation ioc pattern goal externalize knowledge composition implementation contract autowiring injection specific class special case ioc general case di interfaces needs configured explicitly order choose correct implementation interface therefore think need way register implementation interface would injected many di frameworks people use fluent api di container configure sample microsoft unity uses rtti c generics capture class registration class implementation interface sometimes interface type granular enough need name well sometimes implementation statefull need lifetime sometimes singletons need scope example per request approaches child container scoped resolve operation intended usage strongly typed languages impose type validating compiler ourself codebase big remember case interested continue usage typescript bring quality javascript feature easily doable extension ts compiler would need find easy way achieve result manual annotation hope helps sorry uptospeed details visions angular di component pavel", "num": "135", "d": "10/2014"}, {"title": "rfc", "body": "update igorminar summarize constraints solution looking must match following valid html see issue discussion chars attr name valid html web designer friendly interoperable webcomponents nt interfere web component initialization support debugging story via inspecting rendered dom development syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives support additional info options binding order avoid directive specific microsyntaxes enables tooling work without hardcoding support microsyntaxes must supported way preserves constraint please nt propose new solutions nt meet criteria original description current proposal syntax several issues proposal come light recently work browsers tested chrome ie safari error means possible create valid template programatically still possible parse read template seems like calling requires first character specifically allowed starting character third part html shorteners nt support nonstandard characters tools slim haml jade nt support generating special characters would break backend servers ruby rails svg requires valid xml valid xml seems spec least chrome browser issues characters need investigate strawman proposal go back slightly longer text based syntax caveat syntax requires parameter item weird syntax want ta make sure bindings starting right hand side valid expression valid expression micro syntax reason need way pass localvarname string literal expression hence please leave thoughts background reasoning behind new syntax found", "num": "133", "d": "10/2014"}, {"title": "gulp race condition", "body": "task modulesbuilddartpubspec copy pubspec build folder launch pubspec modified might happen pubspec depends pubspec copied yet see benchmark depends facade pubspec facade yet copied build folder make build fail", "num": "130", "d": "10/2014"}, {"title": "parser support basic features implement interpolation", "body": "compiler translates expression parser needs support able implement interpolation compiler", "num": "129", "d": "10/2014"}, {"title": "implement event binding syntax ie eventname expr", "body": "implementation similar elementbindings extra complexity attaching callbacks part view instantiation", "num": "128", "d": "10/2014"}, {"title": "notify directive", "body": "component selector mycomponent bind title title url url class mycomponent implements onchange var title var url onchange records map important method fires titleurl updated issue title updated component know url updated next title thing reason method provided guarantees data stable used computation dosomething title url used case data bound component needs notified using method bindings updated proposed solution addition memento method also take group id change detection detects change looks groupid keeps track groupid changes change detection knows fire method dispatcher list records changed groupid part group need keep track record changes since know method associated corner case possible two groups id came protowatchgroup case records part different watchgroup instance", "num": "126", "d": "10/2014"}, {"title": "define plan compiler", "body": "", "num": "124", "d": "10/2014"}, {"title": "need commandline utility dump traceur ast", "body": "rkirov investigate see actually exists", "num": "123", "d": "10/2014"}, {"title": "view instantiation integration tests", "body": "create view instantiation integration tests ie create protoview instantiate make change execution context detect changes test correct updates dom directives executed usecases binding text node content binding element properties binding directive properties binding element events sample code usecase var protowg new protowatchgroup protowgwatch somevar var element domcreatetemplate var protoview new protoview element listwrappercreate listwrappercreate protowg false var view protoviewinstantiate var comp new mycomp todo creating watchgroup done viewinstantiate viewwatchgroup protoviewprotowatchgroupinstantiate view viewwatchgroupsetcontext comp var cd new changedetector viewwatchgroup cddetectchanges todo check viewnodes whether text node updated helper functions function getouterhtmls nodes var res var function getouterhtml el elnodetype nodetextnode return elnodevalue else elnodetype nodecommentnode return else return elouterhtml cc mhevery", "num": "122", "d": "10/2014"}, {"title": "mapwrapperclear work", "body": "working noticed work map left unchanged", "num": "121", "d": "10/2014"}, {"title": "transpile js dart", "body": "eg following work js means variable changing concept compile time constant js transpile dart", "num": "115", "d": "10/2014"}, {"title": "backtick syntax transpile", "body": "since backticks support multiline strings", "num": "114", "d": "10/2014"}, {"title": "rfc add support assert", "body": "dart builtin either bool function returning bool think adding support transpiler could linked type assertions type assertions enabled assert would throw false type assertions disabled assert would removed code", "num": "112", "d": "10/2014"}, {"title": "show original file name file number stack traces", "body": "right getting errors like makes hard know file contained error line number line number transpiled sources", "num": "108", "d": "10/2014"}, {"title": "allow annotation class", "body": "currently const added ctor allowing added class would allow reducing boilerplate code case dart needs generate const ctor", "num": "99", "d": "10/2014"}, {"title": "better workflow debugging transpiler", "body": "thanks arv tips able set great workflow working traceur working angular transpiler little bit pain used mentionned readme guys better workflow debugging adding repl would really help thoughts", "num": "95", "d": "10/2014"}, {"title": "angular input required attr", "body": "adding attribute required input get error chrome console typeerror read property classes undefined delete required disable error", "num": "94", "d": "10/2014"}, {"title": "create benchmark repeat", "body": "", "num": "93", "d": "10/2014"}, {"title": "port tree benchmark angulardart", "body": "", "num": "92", "d": "10/2014"}, {"title": "implement", "body": "", "num": "91", "d": "10/2014"}, {"title": "implement", "body": "", "num": "90", "d": "10/2014"}, {"title": "hook change detection directiveinstances", "body": "", "num": "89", "d": "10/2014"}, {"title": "support component", "body": "", "num": "88", "d": "10/2014"}, {"title": "support template self directives", "body": "", "num": "87", "d": "10/2014"}, {"title": "instantiate directives using local visibility", "body": "", "num": "86", "d": "10/2014"}, {"title": "implement change detection views", "body": "hook view change detection textnodes get updated", "num": "85", "d": "10/2014"}, {"title": "basic implementation view", "body": "clone protoview viewports create elementinjectors locate textnodes", "num": "84", "d": "10/2014"}, {"title": "support simple view template contains decorators text node bindings", "body": "", "num": "83", "d": "10/2014"}, {"title": "support chained expressions ie ab", "body": "use angulardart parserlexer starting point", "num": "82", "d": "10/2014"}, {"title": "detect changes simple nonchained expressions ie", "body": "use angulardart parserlexer starting point", "num": "81", "d": "10/2014"}, {"title": "ngif fails interpolated value equals n", "body": "sorry filled mistake issue please delete one thanks", "num": "80", "d": "10/2014"}, {"title": "add support const list literals", "body": "works js work dart valid compiletime constant", "num": "75", "d": "10/2014"}, {"title": "dart ctor inherited default", "body": "ctor inherited default see class inherit parent class class ctor parent ctor called class parent constructor foo class child extends parent acts class parent constructor foo class child extends parent constructor args super args equivalent constructor args super args generated dart", "num": "70", "d": "10/2014"}, {"title": "refactor transpiler better support dart js", "body": "currently use either original traceur transpiler dart transpiler inherit traceur transpiler plan augment traceur syntax support ie class fields target architecture probably original traceur transpiler lt angular specific js transpiler lt dart transpiler lt inherits regarding folder structure think thoughts", "num": "69", "d": "10/2014"}, {"title": "ngoptions problem removing setting ngmodel variable", "body": "removing ngmodel variable setting last option problem selected option jsfiddle show nt matter many options", "num": "67", "d": "10/2014"}, {"title": "make fields first class citizens", "body": "currently fields declared class annotation field final name string field final age int const constructor name string age int thisname hello name thisage age annotation usage class foo class annotation name string age int const constructor name string age int thisname hello name thisage age annotation usage class foo based typescript follow whatever allow inline initialization fields generate code set fields null constructor set explicitly", "num": "66", "d": "10/2014"}, {"title": "ngoption issue", "body": "hi people came problem nt taken seriously ngoption nt work properly able compare objects rather put selection different variable see declare parameter example users variable declare user works declare jobs compare property make work around please take seriously time thanks ps really good job", "num": "61", "d": "10/2014"}, {"title": "change named parameter format", "body": "current requires repeat twice proposed syntax", "num": "59", "d": "10/2014"}, {"title": "add throttle argument watch", "body": "snippet code keep copy pasting controllers handling autosaving functionality objects var pendingpromise null set watch auto save cta changes throttled every scope watch myobject function nv ov nv amp amp ov amp amp isequal nv ov pendingpromise timeoutcancel pendingpromise api underlying service talks nt get inundates w requests especially ui components like sliders change model incrementally quickly would wonderful later release angular condensed something like time milliseconds set throttle", "num": "58", "d": "10/2014"}, {"title": "assert exported non", "body": "error private dart exported regardless export keyword source file reason assert top level identifiers exported unless contain prefix", "num": "57", "d": "10/2014"}, {"title": "transpiler js dart", "body": "could probably solved writer level difference seems", "num": "53", "d": "10/2014"}, {"title": "transpiler support dart libraries", "body": "today transpiled file statement library name unique derived file name dart support private members amp functions amp variables private members start prefix private member function variable visible entire library whether accessed class file currently prints warnings prefixed members accessed file hence library would right solution support support statement source code may via possible transform prefixed names short term solution could avoid prefixed names also longer term strategy imo", "num": "52", "d": "10/2014"}, {"title": "transpiler calling super constructor", "body": "class parent constructor arg list class child extends parent constructor arg list super arg", "num": "48", "d": "10/2014"}, {"title": "transpiler handle optional parameters", "body": "compiled", "num": "47", "d": "10/2014"}, {"title": "clarify project", "body": "could please clarify readmemd project course nt mind sharing public", "num": "43", "d": "10/2014"}, {"title": "infer class property types ctor args", "body": "currently infer property types ctor args name could produce wrong results js class constructor number b string notice property amp arg name nt match thisb thisa b gt dart class num string b num string b results wrong types thisb thisa b things stop inferring property types args would always produce valid code types lost write logic infer types infer types based names get type rhs types would always correct requires code keep current logic would probably correct cases would tend go something right rather something mostly right could implement later point time thoughts", "num": "42", "d": "10/2014"}, {"body": "talked misko needed", "d": "10/2014"}, {"body": "prefer readability current proposal issue worked around dropped console testing came witch pretty rough checked comply standards well except enabling attributes exotic names strawman proposal user wants create ngrepeat would possible", "d": "10/2014"}, {"body": "fyi javascript renamer like jscompiler would easier grok rename subsequent usesites also declaration think nt want microsyntaxes likely go additional attributes could default item", "d": "10/2014"}, {"body": "sanderelias think couple problems snippet requires work strings leads xss vulnerabilities also angular works dom elements instead strings get xss security default sure order attributes defined means ca nt really rely one attribute might get ugly side effects feels like hack like syntax much also got used reading design documents mhevery caveat reason first decided use", "d": "10/2014"}, {"body": "angry tweets blogs mean anything seems people nt want new syntax anyways easier similar possible", "d": "10/2014"}, {"body": "pascalprecht sure feels like hack one whipped snippet couple minutes show way around limitation sure order attributes create htmlsnippet functions control something like ends source sure needs check strings xss attacks caitp creating new paths always count resistance part jury still one", "d": "10/2014"}, {"body": "question get new paths change sake change really good even though grammar technically easier write parsers tools writing parsers working angular expressions seems like moot point really sure getting kind win making changes", "d": "10/2014"}, {"body": "unless demonstrate really easier people use would say nt even bother", "d": "10/2014"}, {"body": "caitp hmm win better readable templates less boilerplate parser argument indeed reason whatsoever case however parser gets slower result strawman proposal valid point", "d": "10/2014"}, {"body": "still interested causes original decision use four proposed syntaxes template bindings official discussion team decided use even one two anybody know", "d": "10/2014"}, {"body": "syntax looks much natural use similar dom events syntax current syntax", "d": "10/2014"}, {"body": "must different lefthand syntax binding events every event handler seen function call contains enforces natural limitation event handlers must functions searching righthand side could use syntax binding event two possibilities ngrepeat novel ideas think bubble event syntax click also need work around problems would try keep syntax close javascript possible item", "d": "10/2014"}, {"body": "akircher yes reason angular needs new binding syntax order work elements means native custom new syntax required unifies layer angular nt nt know custom elements custom events written article tries explain", "d": "10/2014"}, {"body": "hey paste proposal google gruups syntax resolves custom elements problem nt break html attributes seen angular plans adopt following syntax data binding please nt break html syntax love angular write templates templating language like slim haml jade ca nt ember react example introducing nonstandard characters attributes makes templating languages unusable well syntax coloring introspection ide also really nt like syntax passing arguments ngrepeatperson people clear allows passing string arguments person people arguments ngrepeat treat one differently severely breaks existing syntax developers used propose use prefix properties need processed angular first use microsyntax instead ugly ngrepeatparameter syntax provide parameters many advantages syntax nt break html syntax ide templating languages support leading attribute names tell whether pass binding angular exact meaning determined angular plugin templating system conflated binding system contrary current choice syntax extensible plugins implement microsyntaxes allows seamless webcomponent integration prefixed properties handles angular renamed passed webcomponent think lot pleasurable read understand proposal angular processes properties beginning angular supports box following microsyntaxes exp string interpolation default include interpolation syntax exp exp javascript expression like onclick exp exp one way bind familiar syntax exp two way bind natural syntax special syntax ngrepeat reinterpreted microsyntaxes plugins future versions angular define microsyntaxes miss something beg consider really love angular decisions far except binding syntax additional notes wanted javascript expression default think string interpolation way html treats attibute values strings default example type text means literally type text type inputtype double binding type inputtype evaluates expression syntax also makes distinction oneway twoway binding current choice nt plugins could create microsyntaxes existing ones similar ngrepeat syntax syntax really pluggable fast angular reads properties beginning passes middleware set functions interface like call e htmlelement attribute string value string", "d": "10/2014"}, {"body": "course reason web component uses use template ps code fragments missing previous comment present", "d": "10/2014"}, {"body": "pascalprecht understand needs generic bindingevent handling syntax order handle custom events web components missing something else post helpful btw saying parser could take seeing expr nt dowork could rewrite", "d": "10/2014"}, {"body": "native functions rewritten work new model js htmlinputelementprototypesetattribute htmlinputelementprototypesetattribute htmlinputelementprototypesetattribute function attribute value azaz test attribute var thisattributes thisattributes name attribute thisattributes value value else thissetattribute attribute value var element documentqueryselector test elementsetattribute value new value", "d": "10/2014"}, {"body": "eisenbergeffect probably missing things still trying catch design decisions understanding idea bind properties attributes guess proposing right sorry nitpicking trying make things clear head", "d": "10/2014"}, {"body": "yes properties sorry note deleted original comment got messed something related sending email added full version fri oct pawel kozlowski notifications githubcom wrote eisenbergeffect probably missing things still trying catch design decisions understanding idea bind properties attributes guess proposing bind property name expression right sorry nitpicking trying make things clear head reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "10/2014"}, {"body": "pretty much agreeing eisenbergeffect proposal also curious caused decision use first place maybe something miss covered eisenbergeffect simple sample actual definition micro syntax would look like component point view", "d": "10/2014"}, {"body": "eisenbergeffect think agree need kind prefix suffix mark attributes need processed angular properties current choice correct html attribute breaks lot things mentioned proposal think little verbose probably already used existing components proposal nt matter angular choose split bindngrepeat two properties matters prefix tells angular process attribute first nt think prefix good choice lot components using onclick similar already could ok well think important change microsyntax double binding default html ie string explained previous comment", "d": "10/2014"}, {"body": "sheerun eisenbergeffect think agree need kind prefix suffix yes necessarily prefixsuffix syntax unifies custom attributesevents declarative dsl yes agree change introduced first place mark attributes need processed angular properties angular nt process attributes properties either binds properties attributes depending particular attribute reflected property binding attribute rather fallback far understood design documents proposal bindvalue something think little verbose probably already used existing components think pretty straight forward nt matter angular choose split bindngrepeat two properties actually matter order simple dsl express things bindonclick could ok imo rather good choice since nt really bind events listen think important change microsyntax double binding exp exp default html ie string explained previous comment find rather confusing since people know css selectors", "d": "10/2014"}, {"body": "wondering take mulifaceted approach core binding capability default binding behavior add event handler string interpolation aligns syntax support microsyntax hook would allow directives like translate two attributes template compilation top core layer add backwards compatibilityconvenience layer support convenience backwards compatibility compilation result removal attribute special debug mode compiler would rewrite could seen dom inspector production attribute would absent avoid cost rewriting support inside html content treated string interpolation exactly backwards compatibility optin via config setting templating engine support optional plugin angular contains directives like would backwards compatibility directive would use microsyntax hook translate new syntax upon release mark expression html content obsolete optional etc directives obsolete planned obsolescence get go help people incrementally port give timeline upgrade new syntax get app running support generalized mechanism binding options built expression syntax example one time binding might example custom trigger twoway binding might note binding options similar filters filters act output expression transforming various ways binding options would act binding object allowing manipulation directly note none proposals support directionality bindings support oneway twoway binding would recommend following expressions use default binding given property default means oneway binding everything except form control values default twoway directive properties would default oneway developer could change default given property using metadata annotations defaults could overridden casebycase basis using binding options mechanism described ie", "d": "10/2014"}, {"body": "eisenbergeffect feel like one way thing scenario something probably want avoid unfortunately obviously nt want stick exactly original style either think definitely try minimize size bridge people cross order learn newfangledangular", "d": "10/2014"}, {"body": "would look one way thing optional backward compatibility layered top meaning support educate ideal syntax core provide extensibility points allow layering different syntaxes top ease migration paths developers large codebases", "d": "10/2014"}, {"body": "means extra set duplicate functionality support also confuse users nt sure one use apps good strongly advise", "d": "10/2014"}, {"body": "tend agree caitp compatibility layers nt come free terms initial coding maintenance mental burden users etc instead providing compatibility layer say ngclick like would imo better come migration tool would help translating existing templates would really prefer figure best syntax first cover migration story afterwards", "d": "10/2014"}, {"body": "teach people default binding behavior add event handler string interpolation hood remove expressions dom prevent various web component issues etc debug mode add back attributes seen inspecting dom add section documentation geared towards existing angular users explains use expression string interpolation html content turning planned obsolescence preferred method also tell set optional directives drop enable ngclick etc also planned obsolescence things provided ease migration experience sidebyside explain temporary migrationpurposed directives map new system documentation advanced section explains create directives microsyntax also explain everything gets converted hood thus used directly desired trivial implement fallback syntax attribute rewriting also much code maintain would planned removal beginning", "d": "10/2014"}, {"body": "nt think rearranging hood making things worse rather better ideally write get limited set constructs write reasonably powerful express meaningful application less imho minimizing burden new old users minimizing cost maintaining framework big win", "d": "10/2014"}, {"body": "nt like syntax makes markup look like markup another abstract convention need learn similar directives example feel adding anything nt start az like underscores agree caitlin sort gain changing part angular know lot criticism decision change part frankly never felt needs addressing string says better abstract notation using also kind abstract singular case", "d": "10/2014"}, {"body": "proposal attempts solve technical issues hand also dealing migration story rather large angular community asking far know proposal either inside outside team attempts handle needs syntax also simplest proposals aligns nicely polymer well let look polymer default binding behavior add event handler string interpolation encode attribute edge cases likely go away next year proposal changes order make stringification explicit necessary since bind properties rather attributes proposal also recommends using meaningful rather attribute name encoding required proposing also improves debugging story rewriting expressions debug mode really little work us", "d": "10/2014"}, {"body": "good discussion glad open people follow understand whatever decision eventually made still keen sounds lot like snake oil think say going possible demonstrate actually possible better", "d": "10/2014"}, {"body": "eisenbergeffect use main issue may clash existing html attribute cases attributes may also want specify without creating binding", "d": "10/2014"}, {"body": "decide always use prefix need keep ngcloak example want leave flash angular kicks also web component consumes angular chance interpolate convert function operates consider always using prefix angular properties attribute wo nt displayed html passed web components angular kicks parses adds property already interpolated text goes passed web component clickable angular kicks assigns property converted function operates proper scope please understand ca nt use plain ca nt use cheers", "d": "10/2014"}, {"body": "lgalfaso mean clash existing html attribute syntax works fine almost every existing databinding library today problem accounted aside already explained solved removing things compilation", "d": "10/2014"}, {"body": "eisenbergeffect without mechanism know binding tell", "d": "10/2014"}, {"body": "sheerun misunderstand compilation process little bit need avoid flash expressions compiler already extracted compilation html contained inside element dormant webcomponents upgraded content cloned based tests see attribute removed primary reason using plain html attributes debugging reasons solved rewriting debug mode", "d": "10/2014"}, {"body": "agree francisc explicit better implicit", "d": "10/2014"}, {"body": "lgalfaso example neither properties bound want bind would", "d": "10/2014"}, {"body": "everything caitp saying", "d": "10/2014"}, {"body": "eisenbergeffect databinding web components document misleads people effect process web component would first flash expression binding literal exp replaced actual expression value clearly desired behavior", "d": "10/2014"}, {"body": "incorrect information yes needs updated incidentally discovered error sorry", "d": "10/2014"}, {"body": "eisenbergeffect good point one question though understanding would partials would live inside tag would one bootstrap application would mean router would point components instead random html chunks", "d": "10/2014"}, {"body": "pkozlowskiopensource currently html contained inside templates bootstrapping application would involve specifying root component allows remove problems ngcloak etc also makes super easy application splash screen things loaded great mobile web still debated see bunch related issues would favor though", "d": "10/2014"}, {"body": "eisenbergeffect ok starts make sense really remove comment design doc effect process web component would first flash expression binding literal exp replaced actual expression value clearly desired behaviour incorrect part made convinced absolutely need prefix based comment nt seem case changes things substantially well still wrapping head around stuff", "d": "10/2014"}, {"body": "added note original document", "d": "10/2014"}, {"body": "eisenbergeffect approach think many developers big help understanding migration must indeed really hard date marks dropoff old stuff personally really like current proposal understand issues", "d": "10/2014"}, {"body": "anyways magic prefixsuffixes think want avoid whole thing users ca nt use start suffix bug long time led making directive api even crazier careful prefixsuffixes make sure nt limit user", "d": "10/2014"}, {"body": "like syntax would use something like original proposal seems little bit far away html always liked angular uses plain html even style current proposed syntax via css selectors eg compilation breaks reason like deactivated js eg even valid css selector would guess needs sort escaping", "d": "10/2014"}, {"body": "bind makes lot sense regarding polymer already seems natural", "d": "10/2014"}, {"body": "per previous comments could someone please explain must separate syntaxes vs bind super clear done event listeners almost always functions bindings almost never think distinction already pretty clear without separate syntaxes example value property click event know value binding bind know click event far cleanest syntax prevents naming collisions righthand side always expression", "d": "10/2014"}, {"body": "angular actually observe functions unfortunately simple fri oct pm akircher notifications githubcom wrote per previous comments could someone please must separate syntaxes vs bind super clear done event listeners almost always functions bindings almost never think distinction already pretty clear without separate syntaxes example value property click event know value binding bind know click event far cleanest syntax prevents naming collisions righthand side always expression reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "10/2014"}, {"body": "observing function properties nt think would problem omit binding mean observe called", "d": "10/2014"}, {"body": "observe called", "d": "10/2014"}, {"body": "means result function yeah would nt make sense observe result ngclick handler though", "d": "10/2014"}, {"body": "would work custom web components eg", "d": "10/2014"}, {"body": "oh okay thanks see reason still seems like type thing handled class though rather template defer ideas hfjallemark would property since explicitly put put would event handler something event", "d": "10/2014"}, {"body": "could always add event listeners javascript could even made nice declarative atscript kind sucks", "d": "10/2014"}, {"body": "spent time discussing igorminar going post update brainstorming shortly", "d": "10/2014"}, {"body": "think embedding variable name attribute name seriously limiting nonextensible understand mapping attribute names property names including property value attribute name seems really fishy want ta make sure bindings starting bind right hand side valid expression good idea example valid expression probably hand righthand side always kind syntax interpreted angular eisenbergeffect proposed microsyntax expression could nice proposed kind expression filters achieve example onetime binding little verbose angular could provide shortcut microsyntaxes gt gt gt could give us clear definition microsyntax simple function transforms string proper expression string microsyntax nt apply microsyntaxes could form middleware preprocessing attribute values sample microsyntax defintion one could specify microsyntax one element like eisenbergeffect think", "d": "10/2014"}, {"body": "lot questions around changing syntax reasoning described", "d": "10/2014"}, {"body": "think likely people might already read issue", "d": "10/2014"}, {"body": "understand reasons changing nt see difference second variant readable predictable still makes possible things like", "d": "10/2014"}, {"body": "nt really compatible microsyntax basically give path property nothing else nt think worth tbh", "d": "10/2014"}, {"body": "thanks caitp clarification well proposed already doc file properties words without microsyntax", "d": "10/2014"}, {"body": "constraints attribute names contain keys pass elementsetattribute key value means special characters key tricking browser setting attribute performance hit may shorthand syntax may get converted canonical syntax html compile debug mode syntax canonical syntax ie may chose translate translate needs syntax yet another syntax need work webcomponents means place expression attribute names attribute name needs escaped somehow need able distinguish string literals expressions without knowing directives active may none see need simple microsyntax violate proposal canonical syntax personname proposal shorthand syntax syntax verbose lets apply shorthand equivalent syntax personname optionally make even shorter opting means alternate equivalent syntax personname", "d": "10/2014"}, {"body": "jamm good question need know literal expression leads us micro syntax problem imagine ide trying validate expression ide knows expressions highlight allow click ide know micro syntax unless parses directive complex ide point view valid expression also valid expression point view framework either either expressions support none parser ca nt change rules particular directive leads us notice two first one expression know expression syntax second string literal know literal lack syntax sucks need better one changing syntax sake changing technical reasons need change rules key must escaped way escaping value good enough expression vs literal interpretation string needs done without knowledge outside template must consistent implication throws serious wrench microsyntax angular cant tell attribute expression literal causes kinds problems one compatible webcomponents", "d": "10/2014"}, {"body": "mhevery think continue debate key must escaped way igorminar sure fundamental requirement remove constraint may options open us let keep thinking", "d": "10/2014"}, {"body": "eisenbergeffect nt escape key break constraint rule debug mode syntax canonical syntax ie may chose translate translate needs syntax yet another syntax", "d": "10/2014"}, {"body": "mhevery yeah know smile guess entirely sure need constraint know removing make things bit asymmetrical sure real problem mainly think attribute valuebased syntax nicer enough justify ducks", "d": "10/2014"}, {"body": "new syntax still need support bubble events eg click longer needed", "d": "10/2014"}, {"body": "akircher yes think still need distinguish bubble bubble", "d": "10/2014"}, {"body": "mhevery make operator evaluates iterator wo nt change way used", "d": "10/2014"}, {"body": "would like javascript compatibility still kind screws filters interesting idea though", "d": "10/2014"}, {"body": "igorminar think something like could still single attribute still explicitly expression binding", "d": "10/2014"}, {"body": "like idea new micro syntax semicolons separators looks native html style declaration converted js object adding string interpolate also escaping maybe let use ng prefix angular core directives prevent users invent custom names directives even help add prefixes manner proposals look like send gift person send gift person nt even break html syntax also want note micro syntax semicolons explicit nt remember order need write variables get result especially things trivial variants writing ngoptions", "d": "10/2014"}, {"body": "micro syntax problem imagine ide trying validate expression ide knows expressions highlight allow click ide know micro syntax unless parses directive complex mhevery ide knows defines new variable without parsing directive solve directionality use microsyntax twoway binding oneway clear personname", "d": "10/2014"}, {"body": "additionally use prefix angular properties ide knows attribute values contain microsyntax personname", "d": "10/2014"}, {"body": "honestly thing really good approach lets people write custom ngrepeats want would work ngoptions want something like repeatable construct consistent syntax fits binding attribute syntax matches javascript syntax sounds like win tbh", "d": "10/2014"}, {"body": "like expand idea given jamm making js object cram features want resolves perfectly valid expression object required alternatively could achieved custom js iterator first proposal like object way much", "d": "10/2014"}, {"body": "even support iterators angular expressions need solve write custom decorators number oneway bindings attributes passing strawman proposals canonical syntax proposal misko proposal separating instantiation directive bindings explicit nonhuman writable note clear reading html alone compiler binding ngrepeat instance properties dom element properties bindings make explicit canonical syntax shorthand syntax proposal given instantiation attribute boolean attributes canonical syntax use value macro macros string maps lists translate follows becomes positional attributes supported becomes note means purely stringbased macros ie expressions keys values evaluated think important make distinction clear someone come better symbol first thing came mind attributes angular etc", "d": "10/2014"}, {"body": "rkirov would macros evaluated difference evaluating", "d": "10/2014"}, {"body": "think could combine iterable name iterator single construct could reused many different directives return function parsed expressions acts evluator expression assignable expressions added property called assign acts assignment path expression vain see iterator expression could become function returns iterator tries subsequently function gets scope name iterator something like js assert expriterator seen new weakmap let item expriterator seenitem item addnewitem expr item else seenset item true let item existingcollection seenget item removeitem item function addnewitem expr item seenset item true var element templateclone elementng exprname item addtodomlater element mean would take bit work fully fleshed basically pseudocode seems like bad pattern", "d": "10/2014"}, {"body": "caitp think like could provide examples syntax would look outside ngrepeat", "d": "10/2014"}, {"body": "fardelian macros turn one stringbased attribute multiple stringbased attributes convenience html author preangular land meaning strings beyond simple constructs maps lists macro understands sense might deceiving write js syntax macro runs compiler takes bind expressions parses full extension angular expression syntax point accept valid expression angular parses passes ngrepeat instance line thought caitp entertaining", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "tbosch look", "d": "10/2014"}, {"body": "added binary operations string literals formatters handing vsavkin continue monday", "d": "10/2014"}, {"body": "issue polyfill clear needs investigation issue chrome bug", "d": "10/2014"}, {"body": "chrome looks like facade nt really used", "d": "10/2014"}, {"body": "ca nt seem reproduce outside angular nt look like traceur map polyfill used maybe overwritten something else thought could weird side effect evaluated call systemjs could nt reproduce like weird", "d": "10/2014"}, {"body": "found overnight using valid dart meaning js switching everything works expected", "d": "10/2014"}, {"body": "trivial case wo leading tag converting might enough needs escape existing easiest way probably use already existing templatelitteraltransformer", "d": "10/2014"}, {"body": "vojtajina look making better igor ideas", "d": "10/2014"}, {"body": "angular uses repo", "d": "10/2014"}, {"body": "closed via", "d": "10/2014"}, {"body": "pr", "d": "10/2014"}, {"body": "landed", "d": "10/2014"}, {"body": "implemented", "d": "10/2014"}, {"body": "implemented", "d": "10/2014"}, {"body": "let push november wait elementinjector aware annotations", "d": "10/2014"}, {"body": "also needed application level di elementinjector need first write tests injectors proving used using construct", "d": "10/2014"}, {"body": "clarify issue support annotations di already uses annotations elementinjector couple days compiletime expressions lists maps others since dart accepts string literal compiletime expression works already dart requires using const keyword declaring compiletime lists maps", "d": "10/2014"}, {"body": "thanks clarifying", "d": "10/2014"}, {"body": "actually use versions original traceur transpiling transpiler transpiler extends traceur javascript transpiler extends traceur dart nt like inheritance propose continue like already use parser javascript dart extends traceur parser different transformers dart javascript special transformations two languages different writers dat javascript one compiler checks flag creates parser right transformers right writer would propose following structure", "d": "10/2014"}, {"body": "mostly agree latest comment discutable point syntax folder parse trees dart specific think folder js dart thinking speaking inheritance js version would support additional syntax dart version additional code deal dart specificities sure litteraly inherit idea would mix solution top level syntax folder would contain common parser least idea discussions need happen", "d": "10/2014"}, {"body": "dartjs specific parse trees would created dartjs specific transformers parser right wednesday october victor berchet notifications githubcom wrote mostly agree latest comment discutable point syntax folder parse trees dart specific think folder js dart thinking speaking inheritance js version would support additional syntax dart version additional code deal dart specificities sure litteraly inherit idea would mix solution top level syntax folder would contain common parser least idea discussions need happen reply email directly view github", "d": "10/2014"}, {"body": "exact output parser always whatever target language specific transformers might create different pt different language constructs", "d": "10/2014"}, {"body": "ok would", "d": "10/2014"}, {"body": "see things", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "nt think work closing issue let know something related work done", "d": "10/2014"}, {"body": "wait refactoring happened yet ie splitting folder", "d": "10/2014"}, {"body": "tbosch think done proactively wait need originally opened issue planned update parser support class property declaration supported traceur however feature might integrated traceur", "d": "10/2014"}, {"body": "ah right saying might additions js rather traceur makes sense ok closing thanks clarifying", "d": "10/2014"}, {"body": "moved", "d": "10/2014"}, {"body": "wrt typescript fields initialized defined fields initialized iff initializer present implicitly set", "d": "10/2014"}, {"body": "add support traceur ts supports goal use ts type syntax inside traceur", "d": "10/2014"}, {"body": "discussion arv rise issue initializers supported dart intialization would need happen ctor time js let say code class parent name stringjoe class child extends parent age int constructor age int thisage age super would needed code work properly would initialized instantiate class called however seems weird call ctor defined would generated compile time initialize fields may best drop support initializers", "d": "10/2014"}, {"body": "depends", "d": "10/2014"}, {"body": "generates constructor extends expression constructor uses generating constructor need ensure super called earlier version class proposal used two phase init one phase initialize properties defined outside constructor second phase call constructor sub class fails call super wrong could make error linter example", "d": "10/2014"}, {"body": "generates constructor extends expression constructor uses constructor args super args interesting thanks deducted code verify spec needed anymore btw dart inherit ctor default update transpiler create ticket traceur mind opened questions wan discuss submit impl pr", "d": "10/2014"}, {"body": "vojtajina sync vicb sync status want get point field annotations removed source base", "d": "10/2014"}, {"body": "vicb update status estimate much left complete", "d": "10/2014"}, {"body": "naomiblack traceur plans support discuss arv see submit pr hope able give estimate eow", "d": "10/2014"}, {"body": "pr traceur working expect updates review available following days concentrate generate dart code", "d": "10/2014"}, {"body": "example illustrate saying would swell", "d": "10/2014"}, {"body": "html controller scopecolors name black shade dark name white shade light name red shade dark name blue shade dark name yellow shade light next line works scopeselected scopecolors next line really need work scopeselected name red shade dark searching everywhere api method nt found please put example api sites could find workarounds thank", "d": "10/2014"}, {"body": "want copy selected object", "d": "10/2014"}, {"body": "well first copying object database trying edit need compare objects", "d": "10/2014"}, {"body": "wrong repo think may want start stackoverflow first angularjs repo", "d": "10/2014"}, {"body": "vojtajina tbosch think", "d": "10/2014"}, {"body": "would code look like type annotations default values", "d": "10/2014"}, {"body": "igorminar aware syntax could point spec syntax described", "d": "10/2014"}, {"body": "igor right would work forbid parameter name renaming otherwise valid programs valid atscript programs fri oct pm mi\u0161ko hevery notifications githubcom wrote igorminar aware syntax could point spec syntax described reply email directly view github", "d": "10/2014"}, {"body": "whatever typescript case", "d": "10/2014"}, {"body": "tbosch typescript nt solved yet", "d": "10/2014"}, {"body": "wrong repo think may want start stackoverflow first angularjs repo", "d": "10/2014"}, {"body": "oops sorry", "d": "10/2014"}, {"body": "vsavkin mean looking info ctor inherited js nt found yet default ctor inherited dart may issue relates", "d": "10/2014"}, {"body": "dart called initializer list currently transpiler leaves super call constructor body incorrect", "d": "10/2014"}, {"body": "done part pending pr const ctor may reassign", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "duplicate", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "due time", "d": "10/2014"}, {"body": "generates file every module within runs parallel", "d": "10/2014"}, {"body": "mhevery could discuss relates", "d": "10/2014"}, {"body": "closed duplicate yes let chat tomorrow mock interview", "d": "10/2014"}, {"body": "make test pass", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "vicb commit", "d": "10/2014"}, {"body": "apparently fixed pr", "d": "10/2014"}, {"body": "current solution workaround moved also transpiler changed automatically refer nt need import", "d": "10/2014"}, {"body": "yes add browsers probably angularjs angulardart cause travis digestion problems limited amount granted vms tuesday september rob eisenberg notifications githubcom wrote would certainly vote think emphasizing mobile community want keep honest probably start testing front tue sep caitlin potter would make sense bring mobile browsers early benchmarks pressure reply email directly view github rob eisenberg president blue spire wwwdurandaljscom reply email directly view github", "d": "10/2014"}, {"body": "vsavkin update", "d": "10/2014"}, {"body": "created pr adding required infrastructure simple benchmark currently pr blocked issue benchpress resolved soon", "d": "10/2014"}, {"body": "closed via", "d": "10/2014"}, {"body": "vsavkin provide update", "d": "10/2014"}, {"body": "done doc ported di module works", "d": "10/2014"}, {"body": "ca nt start done may need break subtasks revisit", "d": "10/2014"}, {"body": "closing duplicate", "d": "10/2014"}, {"body": "hi vojta could add details parts transpiler need tests already monday september vojta jina notifications githubcom wrote reply email directly view github", "d": "10/2014"}, {"body": "one thing discussed vojtajina unit test transformers like done traceur advantages could help understand code easy review pr realized tried review pr vsavkin currently integration tests unit test ie assert transformer fail amp could add disabled test todo features", "d": "10/2014"}, {"body": "moved traceur", "d": "10/2014"}, {"body": "implemented need get merged", "d": "10/2014"}, {"body": "update", "d": "10/2014"}, {"body": "depends latest version traceur pushed update lands", "d": "10/2014"}, {"body": "done released traceur", "d": "10/2014"}, {"body": "specs run dart use dart suffix write dart specs run js use suffix monday september victor berchet notifications githubcom wrote today test transpiler running spec js dart good start room improvement asserting code snippets fail given error message could also really help improving test suite example could generation const constructor dart constructor could body initializer list asserting case fails comprehensible error message would really helpful reply email directly view github", "d": "10/2014"}, {"body": "keeping one compiler different things based outputlanguage traceur already outputlanguage latter removes annotations types tuesday september victor berchet notifications githubcom wrote voltajina closed issue pushing refactoring fix master think great master build upon probably create new issue refactoring needed thanks reply email directly view github", "d": "10/2014"}, {"body": "already work syntax js source export bar foo export foo sunday september mi\u0161ko hevery notifications githubcom wrote often times useful able reexport facade types requires support rexporting import foo bar export foo export bar show foo reply email directly view github", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "already transformer else needed", "d": "10/2014"}, {"body": "yes think done refactored code added spec", "d": "10/2014"}, {"body": "vicb sounds good also agree vojtajina making optional", "d": "10/2014"}, {"body": "duplicate", "d": "10/2014"}, {"body": "traceur added support generics see", "d": "10/2014"}, {"body": "fixed", "d": "10/2014"}, {"body": "karma dart fixed", "d": "10/2014"}, {"body": "nice", "d": "10/2014"}, {"body": "btw could update readmemd still contains hint dart tests gulp build required", "d": "10/2014"}, {"body": "use module loader see configuration details", "d": "10/2014"}, {"body": "achieve using error reporter transformer ie retrieved parse tree", "d": "10/2014"}]