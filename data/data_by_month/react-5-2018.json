[{"title": "c", "body": "", "num": "12953", "d": "5/2018"}, {"title": "flowconfig editing vscode", "body": "want request feature report bug neither think ask question relating codebase floweditor config current behavior git pull react yarn install navigate project root directory upon flow type checking work vscode even though flowforvscode extension installed enabled typescript disabled per docs flowusenpmpackagedflow setting set true reason seems lack file project root adding empty reloading vscode makes work albeit loads linting errors mainly errors saw several different along scripts appear get run understand functions fine want flow work ineditor open project root directory correct way generating necessary file tried copypasting one still resulted bunch errors current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior ineditor flow type checking code referencing etc work opening fresh pull code zero linting errors versions react browser os affected issue work previous versions react na", "num": "12952", "d": "5/2018"}, {"title": "allow attribute custom elements", "body": "want request feature report bug feature current behavior creating custom element attribute currently possible interprete attribute special sense expected behavior like would great alias allows creating attribute custom element versions react browser os affected issue work previous versions react", "num": "12951", "d": "5/2018"}, {"title": "get warning adding strictmode redux application", "body": "upgrading added component root component const app props gt reactdomrender documentgetelementbyid app unsafe lifecycle methods found within strictmode tree router created browserrouter browserrouter created app provider created app created app muithemeprovider created app app componentwillmount please update following components use componentdidmount instead route switch componentwillreceiveprops please update following components use static getderivedstatefromprops instead connect withstyles translate maindrawer connect withstyles translate snackbar route switch componentwillupdate please update following components use componentdidupdate instead connect withstyles translate maindrawer connect withstyles translate snackbar learn warning strictmoderedux os ubuntu browser chromium react reactdom redux", "num": "12949", "d": "5/2018"}, {"title": "wrong eventtargetvalue", "body": "want request feature report bug bug current behavior given input field typeemail type valid email address type \u0441yrillic letter mailcom type \u0434 test copy paste result mailxn compdd cursor start input field expected behavior mailcom\u0434 input field change versions react browser os affected issue work previous versions react react browser chrome simple example", "num": "12948", "d": "5/2018"}, {"title": "event listener leak", "body": "want request feature report bug bug current behavior accumulating listeners interacting input elements unmounting elements interacted listener garbage collected correctly screenshot accumulation production build current behaviour bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example use either following repros follow reproduction instructions commentsreadme convenience reproduced better illustrated pulling repro less going expected behavior accumulation event listeners versions react browser os affected issue work previous versions react macos chrome react reactdom", "num": "12947", "d": "5/2018"}, {"title": "react class strict mode reserved word", "body": "webpack uglify tools compression appeared class reserved word code android strict mode reserved word", "num": "12945", "d": "5/2018"}, {"title": "fix recursive flow types", "body": "landed change flow types making types various types recursive properties pr may running older version flow luck finding record flow ran pr sure case pr merged even though recursive flow type definitions plus one flow errors unrelated detected problem recursive type definitions recent versions flow go infinite loop try infer types recursive solution may add detail types unblock things temporarily made looser type definitions", "num": "12941", "d": "5/2018"}, {"title": "reactrouter matching regex params minified react build", "body": "want request feature report bug bug current behavior using webpack bundle react application routing works perfectly react dev package stops working production build route file class rootclass extends component componentdidmount render return react dev build url matches path whereas production build matches glob matching redirect home component prod webpack const path require path const webpack require webpack const htmlwebpackplugin require htmlwebpackplugin const extracttextplugin require extracttextwebpackplugin const autoprefixer require autoprefixer const staticsourcepath pathjoin dirname static const sourcepath pathjoin dirname client const buildpath pathjoin dirname public moduleexports devtool cheapmodulesourcemap entry app clientappjsx output path buildpath filename name hash js resolve extensions webpackloaderjs webloaderjs loaderjs js jsx modules sourcepath pathresolve dirname nodemodules plugins new webpackdefineplugin processenvnodeenv jsonstringify production new webpackoptimizeuglifyjsplugin new webpackloaderoptionsplugin options postcss autoprefixer browsers last version ie gt context staticsourcepath new webpackhashedmoduleidsplugin new htmlwebpackplugin template pathjoin dirname indexhtml path buildpath filename indexhtml minify collapsewhitespace true collapseinlinetagwhitespace true removecomments true removeredundantattributes true new extracttextplugin filename name contenthash css allchunks true module rules test json loaders jsonloader exclude nodemodulesserver test jsx loaders babelloader plugins transformdecoratorslegacy plugins reacthotloaderbabel plugins emotion exclude nodemodulesserver test scss exclude nodemodules use extracttextpluginextract fallback styleloader use loader cssloader options minimize true postcssloader resolveurlloader sassloader test eot svg ttf otf woff use fileloader nameassets name hash ext test pnggifjpgsvg use urlloader amp nameassets name hash ext include staticsourcepath dev webpack const extracttextplugin require extracttextwebpackplugin const htmlwebpackplugin require htmlwebpackplugin const webpack require webpack const path require path const buildpath pathjoin dirname public function getentrysources sources processenvnodeenv production sourcespush webpackdevserverclient sourcespush webpackhotonlydevserver return sources moduleexports entry app getentrysources clientappjsx devserver historyapifallback true hot true inline true host disablehostcheck true port output filename public name js resolve extensions js jsx module rules test json loaders jsonloader exclude nodemodulesserver test jsx loaders babelloader plugins transformdecoratorslegacy plugins reacthotloaderbabel plugins emotion exclude nodemodulesserver test scss loaders styleloader cssloader resolveurlloader sassloader exclude nodemodulesserver test eot svg ttf otf woff exclude nodemodulesserver loader fileloader options name path name ext devtool sourcemap plugins new webpackloaderoptionsplugin debug true new htmlwebpackplugin template pathjoin dirname indexhtml path buildpath filename indexhtml minify collapsewhitespace true collapseinlinetagwhitespace true removecomments true removeredundantattributes true new extracttextplugin publicstylecss allchunks true current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior route match way prod react build dev versions react browser os affected issue work previous versions react react reactrouter chrome version official build", "num": "12940", "d": "5/2018"}, {"title": "client server rendering desynchronized documentation", "body": "server renders page properly client overwrites message", "num": "12938", "d": "5/2018"}, {"title": "classname converted", "body": "want request feature report bug bug current behavior html tags include dash convert rendertostring current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react react", "num": "12935", "d": "5/2018"}, {"title": "using electron ipc react", "body": "use electron renderer ipc react component js file wrote const electron require electron import electron electron nt work error reports module found ca nt resolve electron config webpack something stuck really days thank", "num": "12934", "d": "5/2018"}, {"title": "broken fixtures", "body": "want request feature report bug bug current behavior two fixtures broken due reference bundle reference introduced pr landed fixing see current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open either fixture firefox note error console page nt update expected behavior react andor schedule module running js page versions react browser os affected issue work previous versions react master", "num": "12930", "d": "5/2018"}, {"title": "webpack react running production mode dead code elimination applied", "body": "want request feature report bug report bug current behavior compiled production error thrown current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example related compilingbundling would substantial number dependencies react expected behavior nt throw error compiling webpack following guide given link development code included used set configured run files note license comments bundle suggest well included along could webpack configuration issue however entire bundle seems uglified packages seem exhibit anything production behavior want peck around bundle please enjoy versions react browser os affected issue work previous versions react nt issue webpack configuration", "num": "12929", "d": "5/2018"}, {"title": "possibly include field packagejson indicate dist file", "body": "want request feature report bug feature current behavior per react reactdom nt include field npm packages include directories production development umd builds prior discussion concluded development production builds different clear whether unpkg default dev production react nt include field leaves consumers bias working observable uses include modules people type resolves redirects webcompatible distribution people type hard figure one look unpkg hunt around umds considering hardcoding workarounds react amp reactdom popular modules people figuring require creating react wrapper sets field repoints react submitting another pr react reproposing default export expected behavior react reactdom would provide default indication files meanings versions react browser os affected issue work previous versions react thanks yall work react excellent", "num": "12928", "d": "5/2018"}, {"title": "preserve property getters state updates", "body": "want request feature report bug bug current behavior state updates property getters transformed literals eg code example expected behavior getters still available state updates versions react browser os affected issue work previous versions react", "num": "12927", "d": "5/2018"}, {"title": "event nt trigger direclty clicking maximum value", "body": "want request feature report bug bug current behavior directly loading choose maximum value input type range event nt fire onchange event fire maximum value input sandbox click maximum right input type range message console displayed value nt change expected click value input message displayed console value change click last value displayed expected behavior event trigger directly click maximum value input type range versions react browser os affected issue work previous versions react testing macos high sierra firefox safari chrome react get around behaviour change onchange oninput add blanck onchange still get drag behaviour safari iphone see codesandbox", "num": "12926", "d": "5/2018"}, {"title": "keep using legacy context api achieve new api", "body": "want request feature report bug like feature current behavior currently using legacy context api heavily typical component tree app might look bit like heavily nested component tree use context time pass functions booleans objects whatever without use props time trying avoid prop drilling much possible additionally context vars might set lifecycle methods first render maybe hoc provided data basically place expected behavior question ca nt see proper solution achieve next context api huge pain achieve make code completely unreadable way keep using legacy context api maybe react team could provide extra package maybe someone better idea achieve without pretty bad prop drilling place looking forward answers best patrick", "num": "12924", "d": "5/2018"}, {"title": "getderivedstatefromprops broken", "body": "want request feature report bug believe bug react regarding current behavior trying set state based props kind overrides state forever makes impossible edit later current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example example follows add item click try edit expected behavior work like react versions react browser os affected issue work previous versions react think happens react seems work fine code different react version", "num": "12922", "d": "5/2018"}, {"title": "error element ref specified string owner set using npm linked library", "body": "want request feature report bug bugerror current behavior element ref specified string error using npm link current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior nt error versions react browser os affected issue work previous versions react react osx chrome doesnt matter hello really sorry reporting issue got nowhere else turn help identify problem webpack lib due reactbootstrapuncontrollable help understand wrong googled two days people seem issue one received answer solution npm ls react shows one line im sure takes account npm linked package believe issue related least similar", "num": "12921", "d": "5/2018"}, {"title": "node removed child node createportal", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12918", "d": "5/2018"}, {"title": "think used setstate", "body": "invented new design pattern work async code react look example thissetstate async updatemember gameid thisplayerid data closedd im need beginning performed updatemembers run closedd think pattern", "num": "12917", "d": "5/2018"}, {"title": "bug getderivedstatefromprops invoked change state component", "body": "bug getderivedstatefromprops invoked change state component codesandbox example see elementone clear state change state component static function getderivedstatefromprops invoked guide static getderivedstatefromprops lifecycle invoked component instantiated well receives new props elementone received new state elementtwo component willreceiveprops behavior ok react reactdom", "num": "12916", "d": "5/2018"}, {"title": "suspense timeout expiration siblings rendering issues", "body": "want request feature report bug bug current behavior code reproducing also deployed example zeit basic example using react suspense simple cache provider postponing text rendering showing loading spinners necessary see use nt really care passing always become expired right render open page loading bar appears immediately despite delay content placed next async component one going suspended looking react suspense tests assumed sibling elements rendered way expected behavior component shows placehold expired sibling content shown even async component suspended built sources current master updating flag also used nt seem make difference overall really satisfied feature hope code correctly shows real bug", "num": "12915", "d": "5/2018"}, {"title": "questions regarding propschildren", "body": "want request feature report bug questions questions regarding propschildren official react documentation reactchildren read opaque data structure mean exactly think general three possibilities transparency data structure case every aspect data structure open well defined right term opaque data structure would completely wrong therefore case obviously case case aspect data structure open clear would mean whenever use always use combination one mmmh really one knows actual data structure would imply neither allowed use examples common seems case obviously also case case aspects data structure open well defined would open possibility one even examples case valid would mean exact specification aspects well openly defined aspects really opaque maybe missed something react documentation think really exactly specified last least question exactly nt case children one ore always array done preact example would make things much easier would nt many thanks advance clarifications", "num": "12913", "d": "5/2018"}, {"title": "broke", "body": "recent blog post announced bugfix getderivedstatefromprops called every time component rendered regardless cause update reality broke realworld library gets called every rerender suppose component watches property change recommended approach store property value like user changes input value property must updated js onchange event gt thissetstate value thispropsonchange static getderivedstatefromprops props state propsvalue statevalue return value propsvalue return null timeline first handler triggers calls state got updated called new react nt updated yet condition triggers hence gets reset condition becomes already bug single source truth per official react recommendations next line executes updates turn calls condition triggers becomes case actually breaks phone number input component design requirement let user set externally turn must update country flag icon worked react react though gets called internal state update resulting country flag reset every time user types character incomplete phone number ca nt source country flag eg usa canada start mention whole nanpa region", "num": "12912", "d": "5/2018"}, {"title": "get render function html multi page traditional website", "body": "want request feature report bug think feature like question current behavior hello possible somehow get render function script tag html multi page site would useful asking want edit pages admin panel method could insert html would nt rebuild whole project get new javascript chunks pages rebuilds code splitting buildjs file would contain components vuejs create build get content html like javascript mainjs import app appjs new vue el app render h gt h app appjs export default vuecomponent app template pagetemplate data return world world mounted components html hello world", "num": "12907", "d": "5/2018"}, {"title": "reactdom calls component constructor render function twice strict mode", "body": "either bug intentional behavior sure render component wrapped tag component constructor render functions get called twice nt cause noticeable problems send wild goose chase debugging session codepen reproduces issue using reactreactdom", "num": "12906", "d": "5/2018"}, {"title": "htmlfor attribute labels working voiceover safari", "body": "want request feature report bug bug current behavior attribute behaving consistently across browsers voiceover enabled chrome label value announced voiceover input receives focus expected safari however label value announced voiceover able get voiceover announce expected label safari adding attribute inputs expected behavior using suffice get voiceover read expected label value across browsers versions react browser os affected issue work previous versions react react chrome safari macos high sierra voiceover enabled", "num": "12905", "d": "5/2018"}, {"title": "extract react prop ref", "body": "hello following problem wondering documentation issue react nt support behavior let say following html library allows specify child node namely passing following function library would render following use following click event nt happening tried many variations tried using instead behavior nt change sure two attributes different anymore problem inability refer react prop using ref thanks anything explanation confusingunderclarified please let know", "num": "12903", "d": "5/2018"}, {"title": "synthetic keyboard events nt implement code property", "body": "want request feature report bug feature current behavior undefined expected behavior useful part keyboardevent spec versions react browser os affected issue work previous versions react react saw mention today changelog", "num": "12902", "d": "5/2018"}, {"title": "pointer event nt registering touch ios using safari chrome", "body": "want request feature report bug believe bug current behavior nt registering using chrome safari mobile viewing mobile within chrome dev tools works fine log mobile unresponsive codesandbox logs pointertype expected behavior register contact events still covering mouse events quick gif showing correct behavior screen amp console url nt running versions react browser os affected issue work previous versions react browsersos working ios either safari mobile prior versions pointer events new feature introduced react blog post", "num": "12901", "d": "5/2018"}, {"title": "elements inside fragment get added one time", "body": "want request feature report bug believe bug current behavior adding multiple elements inside fragment get added one time current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example setup demo app steps repro click edit button first card watch happens visually dom break subtree modifications helpful see cancel button briefly hover state background red also see dom using break subtree modifications parent div cancel button gets added save button gets added second render behavior depends browser cancel button briefly hover state appears red cancel button gains hover state keeps red move mouse firefox visually behaves expected using firefox browser would detected issue expected behavior clicking edit button save cancel buttons get added dom time hover state buttons always properly applied see clicking edit second card uses span instead fragment versions react browser os affected issue work previous versions react react unsure worked previous version", "num": "12899", "d": "5/2018"}, {"title": "minor release causes breaking changes getderivedstatefromprops", "body": "according semver nonbreaking changes supposed go minor patch version releases release made breaking changes entire codebase running perfectly dumpster fire soon raise dependency thing changelog breaking change properly call getderivedstatefromprops regardless reason rerendering acdlite please revert change save provide proper documentation change actually entails use adjusted already implemented", "num": "12898", "d": "5/2018"}, {"title": "error boundary treat thrown js error", "body": "want request feature report bug question current behavior error boundary successfully intercepts javascript errors displays fallback ui seems javascript errors still gets thrown appear red browser console caught cypress tests making fail expected behavior nt know asking error boundary throw original js error lets js throw would normally error boundary catches original thrown error prints using designed behaviour error boundary regarding original javascript thrown error versions react browser os affected issue work previous versions react use google chrome react", "num": "12897", "d": "5/2018"}, {"title": "poc resolve minified react errors devtools using svg images", "body": "want request feature report bug feature current behavior currently react production mode errors thrown display link view unminified error utilizing chrome custom formatter attribute possible load image custom url using svg nodes possible recreate full error message proof concept would require server parse error messages output svg would provide concise error messages without leave devtools would nt affect existing bundle size sideeffects ie svg load devtools open retains behaviour browsers firefox devtools nt support displaying images", "num": "12896", "d": "5/2018"}, {"title": "react context providers cause consumers rerender even value nt changed", "body": "want request feature report bug bug current behavior documentation react context states consumers descendants provider rerender whenever provider value prop changes changes determined comparing new old values using algorithm objectis example shows case provider rerendered identical value indicated counter consumer rerenders every time provider rendered regardless whether value changed misunderstanding docs intended behavior context used efficiently expected behavior would indicate one initial render subsequent renders would cause consumers rerender value nt changed case types values scalar object function etc versions react browser os affected issue work previous versions react observed", "num": "12888", "d": "5/2018"}, {"title": "bug eventnativeeventcurrenttarget null", "body": "hello issue onclick evt evttarget evtnativeeventtarget evtcurrenttarget evtnativeeventcurrenttarget fact eventnativeeventcurrenttarget shows null completely different object nt expected equal someone clarify happening", "num": "12885", "d": "5/2018"}, {"title": "reactistypeof nonelements", "body": "current behavior currently works element types allow pass raw know type use case need special cases forwardrefs need know type source target components currently would need turn elements first functions also issue since use function internally js const forwardcomponent reactforwardref gt reactistypeof forwardcomponent undefined reactistypeof reactcreateelement forwardcomponent symbol reactforwardref expected behavior ideally could pass component get type versions react browser os affected issue work previous versions react reactis", "num": "12882", "d": "5/2018"}, {"title": "support pointer events", "body": "pointer events currently unknown event handler properties react current behavior js fiddle shows attaching event div produces warning console expected behavior although pointer events supported apple still useful developers targeting platforms perhaps good middle ground would allow print console warning saying may work happy put together pr someone points right direction", "num": "12881", "d": "5/2018"}, {"title": "efficiently ignore irrelevant updates context", "body": "using context represent user focus large app app many hundreds focus routes listen focus location app much like routes react router focus transitions irrelevant routes routes lose focus gain unaffected today context consumer route component computes derived state eg etc provides derived state props wrapped component wrapped component optimized problem hitting react appears meaningful amount work every time context consumer rerendered even though wrapped component nt rerender adds quickly across focus routes next step better profiling production mode dev appears per route problematic need way efficiently prevent subscribers rerendering new value focus location case nt relevant feature almost right us limitation unsuitable scenario unbounded list booleans example could use update invalidated components alternatively took hook could use consider plug restricted alternative nothing like forthcoming likely revert using emittersubscriber model batched update nonideal us however state need propagate new components single render pass context particularly good", "num": "12876", "d": "5/2018"}, {"title": "index ca nt key react element arrays", "body": "index ca nt key react element arrays thanks", "num": "12873", "d": "5/2018"}, {"title": "submitreset inputs lose text valueundefined", "body": "want request feature report bug bug current behavior creating results button text behaviour seen pr open proposed fix expected behavior input use browser default value input submit en etc versions react browser os affected issue work previous versions react react chrome macos works react unsure earlier versions", "num": "12872", "d": "5/2018"}, {"title": "broken link reactreconcilerreadmemd practical examples react native", "body": "readmemd link react native practical example broken", "num": "12870", "d": "5/2018"}, {"title": "dynamic components rendering object object", "body": "want request feature report bug report bug current behavior description done small util lazy load components approach store lazycomponent state import componentdidmount callback triggering rerender simplified example seen problem lazycomponent loaded component updated new children set text instead children resulting object object remarks behaviour different depending react version build tool works works nodeenv production works nodeenv development fails therefore assume something different handle environment variables replacement thing works totally fine using think bug steps reproduce download sample repository install dependencies run build app start http server go file choose wich version app load fails works go file render method component choose render rendering result uncaught domexception failed execute removechild node node removed child node navigate page click expected behavior render lazyloaded component independently tool used building app environment variable value moreover keep working since previous versions react versions react browser os affected issue work previous versions react issue affectes version react nt affect previous versions browser google chrome official build os linux mint thanks", "num": "12866", "d": "5/2018"}, {"title": "app unmounts caught error", "body": "want request feature report bug bug current behavior basically levels components shelltsx catches tsx class shell extends reactcomponent state shellstate alerts someviewtsx always throws render tsx class someview extends reactcomponent fires thing new errors thrown app still unmounts anyway understand happening someview render always throws error componentdidcatch handles error shell rerenders someview throws apparently react shuts probably easy way avoid endless loop expected behavior app unmount abortblacklistignore miscreant component could nlevels deep app expect work like codepen example versions react browser os affected issue work previous versions react react explode use less colourful language deserves react componentdidcatch neat horrendous neat mostly standard way catch handle errors horrendous unmounts entire app creating unrecoverable state seen spotify lately anything unmounting developmentonly bugpretendingtobeafeature disabled hella annoying cursory google search clearly shows countless hours wasted", "num": "12865", "d": "5/2018"}, {"title": "update readmemd", "body": "replace since component logic written javascript instead templates easily pass rich data app keep state dom since component logic written javascript instead templates easily pass rich data app keep state dom", "num": "12864", "d": "5/2018"}, {"title": "feature request allow fragments accept classname prop", "body": "use case set elements wrapped class depending certain scenarios example test component jsx import react react class test extends reactcomponent render const wrapper thispropswrap div reactfragment export default test scenario html child child scenario jsx html child child even though examples actually output way intended error still thrown solution allow prop fragments simply ignore nt anything course many way achieved without using fragments think approach really clean", "num": "12860", "d": "5/2018"}, {"title": "provide hoc new context api", "body": "find needing higherorder component every using render props get stuff context lifecycle methods pretty easy create hoc render prop wondering open yall would adding hoc new context api already userland little helper js function withcontext context component return props gt return context gt const appwithcontext withcontext mycontext app would useful builtin new context api something like js const mycontext reactcreatecontext const appwithcontext mycontextprovide app optionalnameoftheprop second argument prop name could default anyway thought open discussion making actual pr adds thanks consideration edit removed example using", "num": "12859", "d": "5/2018"}, {"title": "reactstrictmode causes setstate fire twice", "body": "want request feature report bug bug current behavior wrapping fired twice current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example jsfiddle clicking title checking console see called twice callback however called expected behavior sure might related behaviour might intended using previous state set new one component breaks fired twice instance toggle components nt work versions react browser os affected issue work previous versions react react", "num": "12856", "d": "5/2018"}, {"title": "const id options error installing reactjs", "body": "want request feature report bug bug current behavior ca nt run reactjs current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react latest version node version npm version codes found followed tutorial", "num": "12855", "d": "5/2018"}, {"title": "feature need error message state modified misuse spread operator", "body": "want request feature report bug feature current behavior see fiddle click cities check console nt modified directly state without knowing misuse spread operator side thus error came telling modifying state directly expected behavior error like even maybe lesson spread operator time versions react browser os affected issue work previous versions react use last version react expect previous versions react", "num": "12854", "d": "5/2018"}, {"title": "getderivedstatefromprops called instantiation used ssr", "body": "want request feature report bug probably bug current behavior standard cra app getderivedstatefromprops called render time new props passed component expected code run trough reactdomserverrendertostaticmarkup ssr render method called getderivedstatefromprops documentation getderivedstatefromprops invoked component instantiated well receives new props thank versions react browser os affected issue work previous versions react react", "num": "12848", "d": "5/2018"}, {"title": "setstate async", "body": "heard method async confused demo log console anyone know", "num": "12840", "d": "5/2018"}, {"title": "cursor jumps backspacing input typeemail space character", "body": "want request feature report bug bug current behavior hit backspace value space character removing cursor jumps beginning input simple demo repro expected behavior cursor remains end input versions react browser os affected issue work previous versions react tested react possible related issue", "num": "12832", "d": "5/2018"}, {"title": "unsafe lifecycle functions longer defined via mixins", "body": "want request feature report bug bug current behavior unsafe lifecycle function aliases merged defined mixins triggering error uncaught error reactclassinterface attempting define component conflict may due mixin reproduce rename cwm cwrp cwu functions unsafe versions project mixins cause functions duplicated expected behavior lifecyle function continue work expected called via unsafe aliases supposed regard redefiningmerging migration path documentation updated indicate", "num": "12830", "d": "5/2018"}, {"title": "callback reacttestrenderer component changes", "body": "want request feature report bug feature current behavior many react components render multiple times automatically take graphql component first render loading spinner data fetched reacttestrenderer difficult get snapshot consistently render types components currently set interval timer check component tree see data loaded thus rendered approach results bunch unnecessary checks slows tests interval timer run component rendered expected behavior would expect reacttestrender allow callback invoked time component component tree changes basically component ran would expect api like would useful reactdom reactnative versions react browser os affected issue work previous versions react proposal new feature nt affect existing react versions", "num": "12827", "d": "5/2018"}, {"title": "custom element size attribute nt rendered", "body": "want request feature report bug report possible bug current behavior custom element attributes render attribute appears stripped react current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example testing web component integration react given collection possible attributes values test map create multiple buttons attributes rendered value expected however attribute missing expected behavior attribute value rendered versions react browser os affected issue work previous versions react react google chrome custom element attributes function expected integrated angular vanilla setup react", "num": "12825", "d": "5/2018"}, {"title": "despite followed react components creation standards style class gives deprecation warning", "body": "using react ver created react js components using style class patterns using reactcreateclass anywhere app still client side node server getting deprecation warning like shown screenshot react component code per class style need worry warning created react component per standard guideline mentioned link import react component react class app extends component static contexttypes static proptypes render return componentdidmount const params location actions thisprops export default app please guide remove warnings nt want use createreactclass dropinreplacement want stick pattern class existing react ver without upgrading react please enlight approaches follow", "num": "12819", "d": "5/2018"}, {"title": "map defined", "body": "using react device galaxy note using native browser error uncaught referenceerror map defined working browsers device load page within application wrong use default browser", "num": "12816", "d": "5/2018"}, {"title": "rendertostaticmarkup output inconsistent attributes case", "body": "hey seems minor issue web since browsers normalises attribute cases end eg major issue emailtargeted markup results buggy behaviour across clients want request feature report bug potential bug current behavior attribute names converted lowercase js import react react import rendertostaticmarkup reactdomserver sample usecase actual code notice first props lowercased result next consolelog rendertostaticmarkup code outputs next result html current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior attribute names lowercased eg html based supported html attributes docs section could nt find pattern whenever react decides lowercase name listed first one outputted expected versions react browser os affected issue work previous versions react nt tried older react reactdom versions updated found related issue argument would compat issues mails definitely edge case thought", "num": "12815", "d": "5/2018"}, {"title": "reactforwardref element type invalid react native", "body": "want request feature report bug help reactforwardref api bug possible may issue react native wanted check first incase use forwardref api incorrect docs explain intent api well implementation little confusing current behavior following code results error executed import react react import textinput reactnative const custominput reactforwardref props ref gt return export default class app extends reactcomponent render return error reported invariant violation element type invalid expected string builtin components classfunction composite components got object check render method app versions react browser os affected issue work previous versions react", "num": "12814", "d": "5/2018"}, {"title": "purecomponent almost component nt shouldcomponentupdate method", "body": "version purecomponent almost component nt shouldcomponentupdate method", "num": "12812", "d": "5/2018"}, {"title": "provide ways postmortem analysis maximum update depth exceeded error production", "body": "want request feature report bug feature current behavior error logging systems reporting error production maximum update depth exceeded happen component repeatedly calls setstate inside componentwillupdate componentdidupdate react limits number nested updates prevent infinite loops however reliably reproduce error affects small percentage users moreover inhouse components several thirdparty components impractical audit every single component find caused expected behavior would much easier us debug nested update count exceeds current nestedupdatelimit could see components involved nested update chain versions react browser os affected issue work previous versions react using react", "num": "12811", "d": "5/2018"}, {"title": "causes classname translate classname class", "body": "want request feature report bug bug current behavior add attribute button element jsx along classname attribute classname translated classname instead class causes cssinjs engines fail style button well keeping css styling using within chromecast sender app breaks behavior chrome looking replication case courtesy materialui team found ca nt fix nt something triggered expected behavior classname becomes class behaviors added button chromecast framework apply correctly react involved versions react browser os affected issue work previous versions react yes app worked fine", "num": "12810", "d": "5/2018"}, {"title": "componentdidcatch method called via reacttestrenderer", "body": "want request feature report bug may request feature current behavior componentdidcatch handled reacttestrenderer current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior like test componentdidcatch handler inside jest enzyme way could make behaviour componentdidcatch handler configurable versions react browser os affected issue work previous versions react latest version react enzyme framework", "num": "12803", "d": "5/2018"}, {"title": "try remove deprecation warning react getting error typeerror serializing native function bound oncewrapper", "body": "try remove warning accessing createclass via main react package deprecated app version react per steps included createreactclass npm package react app made according changes react component giving mentioned serialize typeerror error typeerror serializing native function bound oncewrapper stringreplace serialize please help missing code going wrong component code per new createreactclass guidelines changed code main rendering component react ssr application ie htmljs import react proptypes react import component createreactclass import reactdom reactdomserver import serialize serializejavascript import helmet reacthelmet var html component proptypes render const bundle thisprops const content component reactdomrendertostring component const head helmetrewind export default html want remove deprecation warnings app react without upgrading react please help removing errors", "num": "12799", "d": "5/2018"}, {"title": "reactart react context api working correctly", "body": "want request feature report bug bug current behavior use rendrer picking default value defined initial creation context rather values provided provider actual behabiour initial value javascript import react react import render reactdom var reactart require reactart var group reactartgroup var shape reactartshape var surface reactartsurface var reddotpath z const consumer provider reactcreatecontext x const app gt x gt return render documentgetelementbyid root demo expected behavior provided value", "num": "12796", "d": "5/2018"}, {"title": "deepextend sequrity", "body": "want request feature report bug bug current behavior see problem turns mass moment problem said projects world fact packages kernel level think need fix check packages publishing turns core converts packets one single entity called react develop study react like react expected behavior fearfully versions react browser os affected issue work previous versions react react latest windows", "num": "12794", "d": "5/2018"}, {"title": "rename", "body": "want request feature report bug bug current behavior method used enqueue state change labelled semantically meaning set state implicitly usually wrongly understood expected behavior perhaps taking hard stance semantics probably get controversy well believe current method actually treated bug api naming think renamed something lines perhaps someone else come nicer name seen even people quite experienced react make rookie mistake like synchronous function go bughunting guilty well deeply nested contexts always obvious react fiber think important stay relevant let bite bullet breaking change please lifecycle method deprecations quite magnitude done one would think done hard people find amp replace fact sure beginners would even end fixing undiscovered errors breaking change pros good things cons make people hold grudge function called whatever application logic painstakingly change cursing rearranging logic extremely large organisations like facebook going spend time unmaintained projects still sure con would make code expresses clearly newcomers would less prone mistakes type extra characters strike sane use autocomplete versions react browser os affected issue work previous versions react lt far", "num": "12790", "d": "5/2018"}, {"title": "synthetic events violate nonbubbling event specification", "body": "want request feature report bug bug current behavior native blur focus events bubble synthetic events violates nonbubbling event specification currently implemented react behaves like native focusout event behaves like native focusin event demos react demo react demo expected behavior synthetic events bubble tested os mac os affect bug browsers chrome firefox affect bug react versions bug present versions", "num": "12786", "d": "5/2018"}, {"title": "guys particularly like react", "body": "want safe yes current behavior flight excellent given use good ide phpstorm webstorm difficult future support project use full power react redux doubly difficult github recognize jet inserts html distinguishes red personally fought insertions lot meat comes uncontrollability project central page react initially structure project unknown understand react needed exactly gives except view described gives angular employee angular want show beautiful relatively simple angular expected behavior convince follow path react versions react browser os affected issue work previous versions react react latest windows debian regards", "num": "12783", "d": "5/2018"}, {"title": "react setstate parent onmouseenter child incredibly sluggish", "body": "issue type bug current behavior refactoring code graph components built using composition create instance looks somewhat like defined method vizzy lets set current index data shown graph passing function child components like class vizzy extends component state currentactivedata value setactivedata dataindex gt thissetstate currentactivedata dataindex render const currentactivedata thisstate const setactivedata thissetactivedata gets passed child vizzysvg need method run onmouseenter little bit prop drilling make look like data vizzy state gets passed vizzylegend ultimately need data available class vizzysvg extends component state vizzywidth vizzyheight componentdidmount gt thissetstate vizzywidth thisrefsvizzyrefoffsetwidth vizzyheight thisrefsvizzyrefoffsetheight render const vizzywidth vizzyheight thisstate const setactivedata currentactivedata thisprops barsjsx call method onmouseenter major issue extremely sluggish slow even causing issues css transition put method onclick problem gone however eliminates intended behavior going constructing similar graph using old component built handle interaction updating dom problem nt arise code less scalable maintainable need get refactor work also use inside barsjsx console updates expected animation fluent issues css whatsoever would expect data get updated fluently using onmouseenter setstate like updating dom using even jquery would figured drilling props levels would issue albeit ideal running react ubuntu nt know behavior older versions react started refactor updating edit may issue version firefox reason behavior chrome much smoother check updating firefox helps edit seems updating firefox helped longer considered bug performing pretty much par chrome yet still slower using directly manipulate dom using much expect using prop drilling setting state nested components using react", "num": "12782", "d": "5/2018"}, {"title": "strange lifecycle forwardref children", "body": "want request feature report bug bug demo code jsx import react component forwardref react class inp extends component state value static getderivedstatefromprops nextprops prevstate consolelog receive props return value nextpropsvalue onchange e gt consolelog onchange thissetstate value etargetvalue gt consolelog setstate render const value onchange others thisprops const inpwithref forwardref props ref gt class test extends component render return current behavior type something trigger gt gt gt see console current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example demo expected behavior expected behavior gt gt gt versions react browser os affected issue work previous versions react", "num": "12781", "d": "5/2018"}, {"title": "clarifying key warning fragments", "body": "apologies discussed searched nt find anything currently create array elements without keys get key warning message create fragment elements without keys today assumed meant ah react introduced clever new tech obviated need keys learned today case right believe make dynamic list elements throw fragment get key warning message bad performance nonstable updates best tell reason difference behavior fragments expected understood different semantic meaning arrays used static content relying expectation avoid major gotcha would assume would explicitly mentioned docs fragments prominently featured warningstyle yellow box instead nt believe mentioned dual behaviors make lot sense react ca nt figure whether siblings need keys great us way explicitly tell nt seems important subtle nuance would call lot documentation instead none find please let know misunderstood figure likely", "num": "12776", "d": "5/2018"}, {"title": "getting error using component another component separate files", "body": "uncaught typeerror read property schema undefined current behavior jsfiddle", "num": "12775", "d": "5/2018"}, {"title": "thisstate nt get current state properly", "body": "related issue found work around checking state onchange ca nt figure behaves like first place example", "num": "12774", "d": "5/2018"}, {"title": "video tag issues playing video continuously", "body": "want request feature report bug current behavior running drag drop control setup property particular control structure looks something like left side controls center draggable area right side properties control controls one video tag dragging draggable area everything works fine till video control inside draggable area one checkbox properties area named check video plays automatically code return current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior rerender whole video change property property changed rerenders whole video starts use third party html parser video nt restart playing versions react browser os affected issue work previous versions react chrome latest version", "num": "12773", "d": "5/2018"}, {"title": "reacttestutilssimulate regression react", "body": "want request feature report bug bug current behavior testutils module react nt immediately flush updates dom like used version previous current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example made gist readytogo html files open either one browser expected behavior behavior triggered via module state flushed dom immediately assertions may made next line versions react browser os affected issue work previous versions react react affected issue yes used work version previous could immediately assert next line changes flushed dom searched react tests test actually making style assertion updates actually flushed dom could nt find anything", "num": "12772", "d": "5/2018"}, {"title": "multiple refs nt work stateless component", "body": "hello want request feature report bug report bug stateless component like const demo props gt let input span current behavior second span always first one input okay expected behavior multiple refs work p versions react browser os affected issue work previous versions react nt know thanks", "num": "12771", "d": "5/2018"}, {"title": "es release aside cjs umd", "body": "rollup rollupplugincommonjs struggling even working import reactdom also support esmodules could es release well one minute making repo demo ah thanks dan actually works sure issue project", "num": "12769", "d": "5/2018"}, {"title": "defaultchecked prop sets checked attribute", "body": "type common use cases projects relying correct dom emissions description unclear following known issue take consideration snippet current behavior setting prop inputs types sets attribute dom element setting prop inputs type attribute correctly set leaving attribute unchanged expected behaviour like mentioned expected behavior would prop set attributes corresponding dom node like case prop", "num": "12765", "d": "5/2018"}, {"title": "throws", "body": "want request feature report bug bug current behavior handler svg element handler sets state property causes element hidden via css makes throw line seems removed trycatch protection working around problem stubbing focus like versions react browser os affected issue work previous versions react worked", "num": "12763", "d": "5/2018"}, {"title": "cursor jumps end input onchange nt call setstate", "body": "current behaviour input function returns value equalling prior value causes cursor jump end input comment formally raised feature request repro sandbox code javascript import react react import render reactdom class input extends reactcomponent state value typeanumber onchange e gt let nextvalue etargetvalue render return render documentgetelementbyid root expected behavior like cursor jump special case returned changed value rejected change ie noop change understand fully react predict cursor position value changed however currently find npm module allows freelength regex filters vs fixed length mask way implement filter without cursor jumping case regarding nonclarity deal general case nonjumping cursors think modernized best practice example would ideal discussion still lives totally fine issue closed assisting instead education handling general case though would still nice api possible", "num": "12762", "d": "5/2018"}, {"title": "add twitter card meta tag using reacthelmet render data dynamically react app", "body": "", "num": "12761", "d": "5/2018"}, {"title": "typos reactpurecomponent hard debug", "body": "want request feature report bug feature current behavior typo get unhelpful error message nt give idea error occurring eg generate error normally would notice right away reason typo occurs nt see immediate render result good luck finding took hours current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior would expect error message identifies location syntax error versions react browser os affected issue work previous versions react react chrome mac os", "num": "12759", "d": "5/2018"}, {"title": "open react application phone show error", "body": "current open react application phone show warning failed prop type invalid prop supplied expected reactnode switch warning failed prop type invalid prop supplied expected reactnode hashrouter warning failed prop type invalid prop type supplied expected single reactelement provider react reactdom reactredux reactrouterdom redux", "num": "12758", "d": "5/2018"}, {"title": "best practice meaningful componentstack production", "body": "using sentry bug reporting production build often encounter like course help locate problem wondering best practice get usable information errorboundaries componentstack following options seem available set uglify increases bundle size works set manually components usually feasible use babel plugin somehow misses majority components write tool resolves names using sourcemaps curious hear people using first option works well feel like elegant solution", "num": "12757", "d": "5/2018"}, {"title": "give attribute developer ask react patch rendered content identical server client", "body": "want request feature report bug feature current behavior react expects rendered content identical server client intentionally need render something different server client twopass rendering like attribute derived screen size since nt know real screen size server side might pass rendering like following constructor props super props thisstate hasmounted false thisstyles objectdefineproperties container get gt typeof window undefined return height let height thispropsviewsizeheight return thisstatehasmounted height height height componentdidmount thissetstate hasmounted true render let thisstyles return code demonstrate intentionally render wrong height initially browser update second run dom keep inconsistent vdom pass renderings keep unchanged react wo nt update dom expected behavior give attribute developer ask react patch single element attribute text content unavoidably different server client hydrating lucky rendered content identical server client nothing", "num": "12754", "d": "5/2018"}, {"title": "expose way creating reacttestinstance react dom nodes", "body": "want request feature report bug would like request new feature current behavior moment way create instance would love able something like libraries enzyme used test react components full dom rendering providing api find components get information far know way querying component tree created without relying internals react nodes means enzyme order support full dom rendering querying api interact react nodes directly reliance causes problems enzyme whenever react adds new node type forwardref contextproviderconsumer example started rfc proposes enzyme uses layer top react node objects allows library decoupled internals react solution proposed rfc relies able create component tree please let know something would consider", "num": "12753", "d": "5/2018"}, {"title": "requestanimationframe supported error unit testing transition react component", "body": "use transition react component similar example transition happens button click unit test const graphdata data const transactiondetail displayfrom displayto const component shallow describe timelinegraph function test render svg function expect componentfind svg tohavelength test handle click anchor tag gt const handleclick componentfind first expect handleclickproplength toequal test suite failed run test component get exception issue thrown even try use timer way overcoming thrown exception removing thrown exception code mentioned issue info react enzyme os windows", "num": "12752", "d": "5/2018"}, {"title": "development log console object triggering errorwarning", "body": "feature request often time consuming determine deeply nested component triggered warningerror logging issue objectfunction console well way least look name id whatever props help identify development mode much info possible wanted", "num": "12750", "d": "5/2018"}, {"title": "ie prompt remember password regression bug since", "body": "note issue seems solved edge ie see issue already raised since closed opening new one get traction still issue ie edge works nt work nt work nt work order test effectively follow steps using edge go settings gt gt view advanced settings privacy services make sure offer save passwords enabled make sure nt passwords saved codesandboxio domain steps reproduce works go sandbox type username password hit submit see confirmation panel saving passwords refresh page type another username password hit submit see another confirmation panel saving passwords refresh page click first input see list previously used usernames steps reproduce nt work remove previously saved passwords codesandboxio domain go nonworking sandboxes type username password hit submit password confirmation panel refresh page click first input list previously used usernames", "num": "12749", "d": "5/2018"}, {"title": "warning message recommends using soon deprecated lifecycle methods", "body": "versions react browser os affected issue work previous versions react react current behavior warning message recommends using soon tobe deprecated lifecycle method warning content rendercomponentwillmount expected behavior warning messages inline deprecation plans", "num": "12748", "d": "5/2018"}, {"title": "render children use singletons", "body": "proposed feature returns unique react component could used anywhere children would get rendered single time every location returned singleton used useful declaring svg filters combined anything else including portals fragments use case ripple component similar materialui could get applied anything including ripple effect makes use svg filter gooey effect easy us bake svg ripple component need svg rendered anywhere dom make use singleton component handle rendering svg component rendering svg gets destroyed responsibility falls upon next component list example jsx const filtersingleton reactcreatesingleton const fancyeffect gt return used throughout application svg rendered dom implementation jsx reactcreatesingleton function const instances", "num": "12744", "d": "5/2018"}, {"title": "warning received nonboolean attribute", "body": "want request feature report bug report current behavior pass boolean prop say get warning prop nt happening react need use prop true prop true current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior getting warning versions react browser os affected issue work previous versions react react google chrome", "num": "12741", "d": "5/2018"}, {"title": "componentdidcatch working properly react", "body": "using componentdidcatch method catch errors child component show error msg instead broken ui sample code ca nt share client code base created sample code see error ui second second ui breaking giving error error crashed childrender c render thisstatecounter simulate js error throw new error crashed return thisstatecounter packagejson file dependencies react reactdom reactrouter reactrouterdom reactscripts import react component react import errorboundary errorboundary import child child class app extends component constructor props super props thisstate child components go inside errorboundary render return counter inside error boundary crashes error boundary replace export default app import react component react class child extends component constructor props super props thisstate counter thishandleclick thishandleclickbind handleclick thissetstate counter gt counter counter render thisstatecounter simulate js error throw new error crashed return thisstatecounter export default child import react component react class errorboundary extends component constructor props super props thisstate error null errorinfo null componentdidcatch error errorinfo catch errors components rerender error message thissetstate error error errorinfo errorinfo also log error messages error reporting service render thisstateerrorinfo error path return something went wrong thisstateerrorinfocomponentstack normally render children return thispropschildren export default errorboundary", "num": "12740", "d": "5/2018"}, {"title": "react js version going deprecated one please enlight steps migration version", "body": "react js version going deprecated one please enlight steps migration version", "num": "12739", "d": "5/2018"}, {"title": "createreactclass missing interface constructor class", "body": "want request feature report bug feature current behavior react deprecated liftcycle method released used define compoent properties like method could define properties like use createreactclass expected behavior add interface named constructor createreactclass", "num": "12737", "d": "5/2018"}, {"title": "forwardref causes componentwillreceiveprops setstate", "body": "want request feature report bug bug current behavior inside calling causes called completed see demo expected behavior docs nt seem forbid behavior calling thissetstate generally trigger unsafecomponentwillreceiveprops sure technically bug however cause older code nt yet use reducer syntax stop working wrapped caused headscratchers refactoring old code reporting case versions react browser os affected issue work previous versions react appears given specific forwardref nt apply older versions", "num": "12736", "d": "5/2018"}, {"title": "use set component state within setinterval function", "body": "question apologize nt best place ask trying work component internal state within setinterval function know asynchronous problems need aware also know pass setstate function would help protect async problems ca nt need use changed state within setinterval function safe working different way around problem seen following nearly answers question trouble visualizing adapting maybe behavior fine stackoverflow answer sectiontimerhandler gt const elapsedsectiontimems thisstateelapsedsectiontimems stuff elapsedsectiontimems thissetstate elapsedsectiontimems restartsectiontimer gt thissectiontimeintervalid windowclearinterval thissectiontimeintervalid thissectiontimeintervalid windowsetinterval thissectiontimerhandler thissetstate elapsedsectiontimems would something like following bettersafer even though using earlier function", "num": "12735", "d": "5/2018"}, {"title": "child component correctly deletes parent state object entry wrong child unmounted upon rerender", "body": "component keeps javascript object renders components child also receives callbacks operate parent state getting behavior javascript object updated correctly delete wrong node unmounted video relevant code export default class order extends component constructor props super props commit gt consolelog thisdata thisdatatrim length gt socketemit article client insert name thisdata addneworderitem async gt let thisstatenewitems thisstatenewitems deleteneworderitem async id gt let thisstatenewitems updateneworderitem async id value gt let thisstatenewitems id value rendernewitems thisstatenewitems return null render const data export default class orderitem extends reactcomponent state null constructor props super props thissetdata props componentwillunmount consolelog unmount thispropsid setdata props thisdata props delete thisdataondelete delete thisdataonupdate handleimageinsert event gt let objectfile eventtargetfiles objectfile return handleunitarypricechange e gt let newprice parsefloat etargetvalue newprice nan thisdataarticledataunitaryprice newprice thisupdatedata handlebriefchange e gt thisdataarticledatabrief etargetvalue thisupdatedata handletablechange update gt thisdata thisdata update thisupdatedata updatedata gt thispropsonupdate thispropsid thisdata confirmdelete gt thispropsondelete thispropsid render const data articledata", "num": "12734", "d": "5/2018"}, {"title": "consumer provider properties consumer", "body": "higher meaning properties type reactconsumer type convenient usually use provider jsx import mycontext mycontext jsx import mycontext mycontext would interested knowing documented preferred way whether use full legit simplify", "num": "12733", "d": "5/2018"}, {"title": "context api bitmask related questions", "body": "playing context api bitmask feature bail unwanted rerender dynamic model json object context value dynamic meant number keys structure json object unknown json object changed know key changed seems difficult turn unknown keys static predefined bitmasks thought use case common bailout feature handle easily matching key also notice default changedbits observedbits mean limitation type context change", "num": "12732", "d": "5/2018"}, {"title": "hovering specific element affects elements", "body": "constructor props super props thisstate ishovered false thishandlemenuhover thishandlemenuhoverbind handlemenuhover thissetstate ishovered thisstateishovered render const menuactive thisstateishovered active return like add class specific div hover affects elements nt know happening", "num": "12731", "d": "5/2018"}, {"title": "react context consumer hoc", "body": "want request feature report bug feature versions react browser os affected issue work previous versions react react wanted put idea feedback see would something useful using new context api bit noticed repeating pattern lot components look something like javascript const mycontext reactcreatecontext foo const mycomponent ownprop gt myprop gt myprop ownprop export default mycomponent got wondering consumer could exposed hoc javascript const mycontext reactcreatecontext foo const mycomponent myprop ownprop gt myprop ownprop export default mycontextisconsumedby mycomponent similar redux reactrouter context value injected hoc write hoc using existing consumer component context api thought put possible inclusion api thoughts", "num": "12724", "d": "5/2018"}, {"title": "findbytype method reacttestrenderer nt find refforwarding components", "body": "want request feature report bug bug current behavior tests component passed created using ca nt found use loop nodes log see refforwardingcomponent skipped entirely current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expect second test work like first however second test failing expected behavior may way works reason expected work using make wrapped controls like example documentation writing tests want able find test besing passed correct props check dom rendered correct already tested versions react browser os affected issue work previous versions react using react failing chrome node tried versions codesandbox failed", "num": "12723", "d": "5/2018"}, {"body": "intentional setup bit complicated unfortunately single flow config wo nt work us nt support running ide integrations run use console output sorry inconvenience", "d": "5/2018"}, {"body": "put strictmode component app separately avoid warning due different packages redux purpose strictmode assess ready whole application subtree async rendering rely packages ready yet need wait become compatible using strict mode", "d": "5/2018"}, {"body": "issue react", "d": "5/2018"}, {"body": "puting inside setstate happened", "d": "5/2018"}, {"body": "fix ok", "d": "5/2018"}, {"body": "whsdothk changed setstate calls realise nt referencing directly function otherwise nt anything wrong piece code far tell understanding want reference component internal state call function must used unsafe pulled changes nt stop leak instructions repo explaining reproduce leak chrome dev tools go testing fix works note accumulation listeners performance chart", "d": "5/2018"}, {"body": "first read source yesterday think found event listeners getting added failed find code tidies assume listeners events bubble added elements apologies way first timer anyone could help show listeners removed component unmounted would awesome", "d": "5/2018"}, {"body": "current web browsers support using reserved words object literals context need target browser nt react even supports something old works even minifier making change need fix minifier uglify may called", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "please file docs bugs thanks", "d": "5/2018"}, {"body": "custom elements currently get attribute without mapping guess mean need pass", "d": "5/2018"}, {"body": "placidodomingo found medium article may use looks like may cover topic asking", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "fantasitic works solution html file windowrequire require react js file const electron windowrequire electron", "d": "5/2018"}, {"body": "dom fixtures also broken trying figure broke something", "d": "5/2018"}, {"body": "see help without seeing reproducible example config create new project experience something wrong particular setup", "d": "5/2018"}, {"body": "said bundle full code like means process env checks get properly eliminated think declaration incorrectly specifies whole object instead individual properties please update exactly recommend work", "d": "5/2018"}, {"body": "think defineplugin declaration incorrectly specifies whole object instead individual properties gaearon works object thank taking look", "d": "5/2018"}, {"body": "gaearon fyi exactly changed flat paths production bundle errors anyone else comes across make flat path structure easily maintainable flatten convert values", "d": "5/2018"}, {"body": "sure much explicit could get module format folder name use cjs folder contains commonjs builds umd folder contains umd builds eventually add esm mjs folder es modules builds plans change scheme please feel free hardcode choose appropriate dev prod version depending environment help", "d": "5/2018"}, {"body": "adding people often wish use libraries depend react semiotic use react directly load semiotic via amd library amd implementation thus needs know find react like work box need convention library authors declare browsercompatible umdamd bundles live implementation first loads semotic packagejson default unpkg determines acceptable semver range react loads react packagejson find browser amdcompatible entry point currently ordered list supported entry points indexjs currently make assumptions umdamdcjs bundle resides within repository seems vary widely rather use entry point packagejson also using file name would potentially require additional queries unpkg determine whether particular file exists introducing latency", "d": "5/2018"}, {"body": "single file resolve development production version neither reasonable default decision needs always explicit see us something support amd better specifically worth investing effort point understand may legacy systems depend lost sort relevance outside systems", "d": "5/2018"}, {"body": "want pick one packages default minified bundle intended production declaring entry points packagejson software consumes library could know bundles published rather needing make assumptions directory structure would likewise great react included es module entry point packagejson standard one would", "d": "5/2018"}, {"body": "intentional state updates merged getters really work great many scenarios", "d": "5/2018"}, {"body": "workaround using instead works well react thinks field uncontrolled shows warning without react issue listener range input", "d": "5/2018"}, {"body": "brainlulz found one interesting thing range work remove max attribute see may related react set attributes rendering dom", "d": "5/2018"}, {"body": "looks like happens equal less whsdothk removing attribute range works defaults", "d": "5/2018"}, {"body": "value range integer everyone expected string edited", "d": "5/2018"}, {"body": "nt change anything issue described use html native properties string anyway", "d": "5/2018"}, {"body": "compare fire event input click max value one fire input change event", "d": "5/2018"}, {"body": "changing code binding default oninput onchange possible drawbacks", "d": "5/2018"}, {"body": "sounds like something easy fix anyone wants look happening", "d": "5/2018"}, {"body": "gaearon currently working", "d": "5/2018"}, {"body": "sorry explained happening marked bug reason happening inputs default default value halfway specified minimum maximum actually less minimum case default set value min attribute track input value read property initializing tracked value default case defaults order properties assigned input element created defaults attribute set stays attribute set changed since greater new max track input value define gettersetter value attribute correct tracked value next time updated since current value nt empty skip setting value set nt update tracked value go update input setting max nt actually update thinks tracked value already max couple solutions would add special case checks element range input update updates tracked value set well first option likely easiest solution sure effects updating might could relying tracked value defaultvalue different cases", "d": "5/2018"}, {"body": "illu fix locally submit want give try feel free defer", "d": "5/2018"}, {"body": "aweary thanks man give try", "d": "5/2018"}, {"body": "aweary may present test case wrote mine already said order test case wrote value always correct", "d": "5/2018"}, {"body": "context essentially global variable scoped subtree saying sounds bit like want avoid passing arguments functions made variables global never recommended use context even legacy one specifically old context documentation page say use context want application stable nt use context experimental api likely break future releases react nt experienced react developer nt use context usually better way implement functionality using props state insist using context despite warnings try isolate use context small area avoid using context api directly possible easier upgrade api changes think fair warning situation think two possible options may want refactor app nothing wrong passing props like nothing wrong passing arguments functions yes go multiple levels deep feel like passing many props get used certain components might mean need make accept propschildren shortcircuit prop passing children use figure way polyfill something similar old context using new one think seen utility wild yet think time somebody might write one could imagine could use single new context pair hood maybe pair per key wrap every component hoc injects related context parts props reply specific points trying avoid prop drilling much possible think wise leads behavior hard understand think might better optimize readability terseness course neglect use abstractions like passing children design components additionally context vars might set lifecycle methods first render maybe hoc provided data sure would problem new context keep value state pass provider new context supports existing use cases basically place sounds like real problem legacy context intended use way quote old doc insist using context despite warnings try isolate use context small area avoid using context api directly possible easier upgrade api changes sorry frustrating never meant api replace passing props", "d": "5/2018"}, {"body": "guess duplicate see blog post details", "d": "5/2018"}, {"body": "yes exactly thank posted fast please close", "d": "5/2018"}, {"body": "full text error believe link page explains happen duplicate react bundle think npm link workflow probably causes problem pick react app library nodemodules try deleting library nodemodules link back app copy", "d": "5/2018"}, {"body": "gaearon dan genius would never think removing nodemodulesreact nodemodulesreactdom inside library removed build process application still worked fine library already built anyway proved error message seeing element ref specified string owner set multiple copies react loaded true experiment webpack builds make sure library pull another copy react library", "d": "5/2018"}, {"body": "let know way make time spent issue", "d": "5/2018"}, {"body": "spent seconds relatively common problem thanks offer though", "d": "5/2018"}, {"body": "sure exactly asking definitely use callback wait flushed", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "seems changed fire localstate changes fixed something like sure best solution", "d": "5/2018"}, {"body": "duplicate please refer thread instead", "d": "5/2018"}, {"body": "closing duplicate explain change broke code means already bug code notice sorry disruptions generally try make dormant bugs visible people fix case exception implementation bugs change affect", "d": "5/2018"}, {"body": "hmm sure supposed work way react wo nt break tree several parts ready earlier would lead jumpy behavior different siblings children suspend different periods time preventing appearing everything ready arguably main point feature break explicitly think timeout gate everything ready displays children otherwise displays fallback even one two siblings ready timeout still show placeholder whole thing want go granular need use nested timeouts explicitly say try waiting n particular subtree takes long nt wait show nested placeholder instead make sense", "d": "5/2018"}, {"body": "initially assumed may work based saw test think may understood incorrectly react wo nt break tree several parts ready earlier would lead jumpy behavior different siblings children suspend different periods time preventing appearing everything ready arguably main point feature sound reasonable thanks tip using timeout gate try play", "d": "5/2018"}, {"body": "gaearon saw added label one case described ticket related fallback content shows early verify bug understand seems reasonable fallback content show delay necessary promise resolved yet", "d": "5/2018"}, {"body": "test note difference assertions result correspond logs render methods emit see screen even call render method sibling cpu work eagerly want show yet regarding fallback showing early think maybe initial render recall exactly guess higher priority try adding suspense state transition instead wrap make low priority", "d": "5/2018"}, {"body": "regarding fallback showing early think maybe initial render recall exactly guess higher priority try adding suspense state transition instead wrap unstabledeferredupdates make low priority could use make tree async initial render well", "d": "5/2018"}, {"body": "even call render method sibling cpu work eagerly want show yet thanks clarification regarding fallback showing early think maybe initial render recall exactly guess higher priority try adding suspense state transition instead wrap unstabledeferredupdates make low priority work implemented component way nt render anything triggers state change use javascript class fallback extends reactcomponent state shouldrender false componentdidmount reactdomunstabledeferredupdates gt thissetstate shouldrender true render let ms placeholder children thisprops return thisstateshouldrender null least enough sandbox works expected could use reactdomunstablecreateroot make tree async initial render well aweary actually tried use page static content root async content bit deeper reasons whole tree rendering nested timeout expired", "d": "5/2018"}, {"body": "opaque data structure refers fact lot things arrays fragments single elements string literals etc reactchildren contains methods allow work different kinds unified way definitely way interacting exactly nt propschildren case children one ore always array done preact example fact shorthand jsx property like fact specify react needs update dom would much expensive tell whether two singleitem arrays whether two primitive values eg strings said think reactchildren documentation might expanded bit issue log reactjsreactjsorg repository article may clarify things bit", "d": "5/2018"}, {"body": "many thanks danburzo answers clarifications answer clear completely misuderstood word opaque react documentation wanted say data structure completely welldefined union type varies concrete representation union types always found older issue addressed exactly topic wonder happend changes opened issue reactjsorg gt reactjsreactjsorg nevertheless would still like ask second question propschildren array case exactly one child really seems violation principle least astonishment know background gt name children items tokens normally expect collection really performance reasons really see calculation checkresult time consuming javascript const arrayisarray arrayisarray checkresult amp amp amp amp amp amp amp amp sorry asking seems bit annoying would really love know exact reason design decision", "d": "5/2018"}, {"body": "glad could help first part question unfortunately single children represented singleitem array nt exact answer however trying point still validly pass single child normal prop rather jsx shorthand fact accidentally obscured hypothesis related performance", "d": "5/2018"}, {"body": "danburzo thanks answer mmh frankly hoped maybe someone react team would remember actual reason design decision really subtle issues children prop handling react example ask react newbie whether components following example behave react pro know answer gt warn dev missing keys really would expect newbie javascript const h reactcreateelement gt h div null h br h br gt h div children h br h br reactdomrender h div null h h documentgetelementbyid container way would allowed would subtle performance benefits implementing replacements like hyperscript function example another example ask react newbie children proptypes would look like requirement children satisfy certain condition think would easy answer least newbie react team reasons design decision question really known maybe matter taste course feel free close issue", "d": "5/2018"}, {"body": "made mistake code static method call methods like return changed state right way js static getderivedstatefromprops props state propsvalue statevalue return value propsvalue return null", "d": "5/2018"}, {"body": "please refer", "d": "5/2018"}, {"body": "davidbadura true corrected code samples issue still persists though anyway rewrite code way works", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "yep intentional documented happens development mode", "d": "5/2018"}, {"body": "actually bug vo safari pairing nt get announced within dialog context ca nt recall ever see demo codepen", "d": "5/2018"}, {"body": "sounds like react issue let know missing something", "d": "5/2018"}, {"body": "react anything special dom nodes able get reference dom node judging fact said property exists react job point question becomes question dom apis exactly method maybe expect good question unrelated react might better asked q amp forums like stackoverflow experts dom hang see react bug please create reproducing fiddle take look thanks", "d": "5/2018"}, {"body": "hey bsmithcycorp ui events spec linked currently working draft means officially recommended yet since new addition suite event specs also nt great browser support yet means polyfill nt think could rarely add support events event properties ca nt provide consistently try using work browsers support", "d": "5/2018"}, {"body": "know good escape hatch thanks", "d": "5/2018"}, {"body": "safari support pointer events", "d": "5/2018"}, {"body": "deliberately decided polyfilling pointer events unsupported browsers read release blog post unfortunately expected behavior chrome ios also using safari rendering engine webkit behind scenes thus see behavior google chrome browser macos one solution use third party polyfill example pep solutions come gotchas well case pep look work fine simple use cases", "d": "5/2018"}, {"body": "looks like react calls element fragment would possible use documentfragment", "d": "5/2018"}, {"body": "chrome problem related documentfragments simple native reproduction cause red flicker used without documentfragments", "d": "5/2018"}, {"body": "thanks report nmain example nt actually reproduce react case react reuse existing button dom element instead recreating accurate version react see exhibits flashing behavior looks like since react reusing dom element browsers retain focus state guessing undefined behavior far dom spec goes using document fragment would mean react could nt reuse existing dom elements really useful optimization common case work around using element inside fragment force react recreate dom elements working example since supported workaround going close result heuristic react uses make rendering faster fixing would require removing changing heuristic would likely net loss performance general let know questions", "d": "5/2018"}, {"body": "thanks aweary makes sense explained also made realize slight misunderstanding keys well seems efficient approach example give save edit button key", "d": "5/2018"}, {"body": "glad makes sense clarify want give different keys key dom node reused different keys react create new dom elements", "d": "5/2018"}, {"body": "meant javascript isediting cancel save edit buttons switch edit button becomes save button saving one button creation understand correctly would save one button creation cost slightly odd looking code", "d": "5/2018"}, {"body": "nt think elements reused mostly implementation detail using unique keys force elements recreated generally safe work around react assume elements different keys different ca nt reused nt get guarantee identical keys react probably reuse elements might implementation detail could reasons elements need recreated example switch new element created rely unique keys forcing elements recreated ca nt rely identical keys forcing elements reused make sense", "d": "5/2018"}, {"body": "yup makes sense thanks aweary", "d": "5/2018"}, {"body": "update see comment bottom thread conclusion tldr change broke code moved code already buggy subtle ways change react made bugs product code occur often fix consider making existing bugs code reproduce reliably breaking change coming issue thirdparty library works nt work hitting react bug issue complaint bug getting fixed however think fixing right choice recommend everyone upgrade react later details walkthroughs demos see comment bottom thread sorry broke things show relevant code please aware change cause issues rare cases documented blog post unfortunately making change also leads buggy behavior although less obvious deterministic maybe bump yet see point fixing breaking case hope also see fixing bug considered breaking code relied code relied old behavior work new one worked accident fault overlooking release took month us discover problem bug reports facebook function takes two arguments props state runs one updates really make sense oversight initial implementation fixed issue facebook learned reason behind numerous bugs one component relied buggy behavior broke like case one component thousand decided better long term make fix allow components written rely bug sorry caused issues seeing code would helpful", "d": "5/2018"}, {"body": "documentation previous blog post seems completely contradict changes made perhaps note added prevent confusion", "d": "5/2018"}, {"body": "chase specific see contradiction fires often examples post still work way", "d": "5/2018"}, {"body": "really make sense oversight initial implementation gaearon expand spec behavior rfc never mentioned seems like issue initial api design implementation", "d": "5/2018"}, {"body": "yeah also surprised old behavior waht guessed behavior would reading rfc", "d": "5/2018"}, {"body": "rfc say note react may call method even props changed nt want overspecify exactly happens might multiple reasons meant one missed part left vague rfc realized omission seeing bug reports caused new behavior critical making safe async mode migration would largely pointless none intended usage examples provided rfcs blog posts docs would break new behavior", "d": "5/2018"}, {"body": "sure understand benefit reasoning method called every single change go back write much logic handle internals method calls change feels like boilerplate code framework handling add noise bloat components version acted lines former method replaced behavior much easier migrate deprecated new blog post provided chase states new static getderivedstatefromprops lifecycle invoked component instantiated well receives new props exactly expected operated much cleaner opinion side note personal level never liked deprecation complained internally many coworkers however understand sideeffects trying edged changing methodologies lifecycle works said react group feels new behavior introduced wish work would like suggest another lifecycle method introduced line worked undeprecating method putting protections around try edge issues intended prevent course architect employee facebook member react development team changes around lifecycle particular area extremely frustrating developer", "d": "5/2018"}, {"body": "want continue discussion let start talking specific code examples code got broken please show let talk", "d": "5/2018"}, {"body": "version acted lines former shouldcomponentupdate method replaced behavior much easier migrate deprecated shouldcomponentupdate new getderivedstatefromprops sorry seems like significant confusion side never deprecated also nothing response typo edited", "d": "5/2018"}, {"body": "also like ask everyone keep mind changes piss people want best apps longer term care adding extra boilerplate deeply sorry churn caused make another blog post next week seems like people use expected likely due misunderstanding purpose example might code relied always getting updated whereas memoization lifting state would appropriate show appropriate strategies nt introduce kind boilerplate concerned continue discussion need code examples see otherwise immediately turns abstract vague", "d": "5/2018"}, {"body": "gaearon confusion poor copypasting immediately edited thanks", "d": "5/2018"}, {"body": "could post example code got broken new behavior", "d": "5/2018"}, {"body": "simplest example provide morning refactoring support update called prop changes static getderivedstatefromprops nextprops analyticspageview nextpropsdocumentid refactored called every change static getderivedstatefromprops nextprops prevstate prevstatedocumentid nextpropsdocumentid analyticspageview nextpropsdocumentid point never change previously reason include state additionally needed wrap additional logic statement around entire thing specific example small see big deal attitude people may give based much larger refactors change caused", "d": "5/2018"}, {"body": "believe code already bug surfaced let demonstrate point documentid never change may true particular case prop never changes pretty fragile assumption component point able work new maybe reasonable intentional limitation component api still parent component could rerender time eg call one parents could even parent component thirdparty library eg router adds call patch minor version hard tell whether happen without checking source every single component tree even happen right code chances high might happen future working completely unrelated feature problem parents rerender would also get called component example even react parent rerender would reset selection values though document id changed analytics call would also fire twice code already bug change react helped uncover even none components currently ever rerender implicit assumption makes every component fragile code relies nothing ever updating see really work promise encapsulated component model people generally expect safe add state components move component different tree exactly kind broken assumption led bugs facebook led us change react calls often surfaces bugs already exist code conversely implementations contain bug work correctly react react note blog post explicitly demonstrated need keep previous values state use cases like like ended example would nt problem note additionally intended pure method appropriate place side effects like analytics call use instead get duplicate analytics events every rerender sorry clear docs main bug code figured mention finally also subtle issues would happen async mode code like since whole point migrate asyncunsafe patterns would pointless allow people keep relying fix bug gained anything migration", "d": "5/2018"}, {"body": "worth none code broke update specifically based example blog based changes mentioned newest post assumed would longer behave expected javascript static getderivedstatefromprops nextprops prevstate store previd state compare props change clear previouslyloaded data nt render stale stuff nextpropsid prevstateprevid return externaldata null previd nextpropsid", "d": "5/2018"}, {"body": "see example would break update missing something far tell conditional check would false stateonly updates would return null", "d": "5/2018"}, {"body": "still error project", "d": "5/2018"}, {"body": "royalhunt please use thread discuss completely unrelated problem believe bug please file new issue reproducing example", "d": "5/2018"}, {"body": "suppose fact looked similar blog post states breaks threw similarity superficial", "d": "5/2018"}, {"body": "given explanation change made reasonable seems separate issue fact change released without major semver bump breaks generally understood correct behavior hear intentional ambiguity spec nt change folks understood work glad none code broke project widely adopted react seems reckless ship breaking change guise bugfix understand may inconvenient outofstep bad marketing release new major version sudden flipside makes react versioning less reliable makes bit hesitant upgrading new react versions", "d": "5/2018"}, {"body": "actually breaking problems well using apollo solved next code", "d": "5/2018"}, {"body": "gaearon nt code examples even installed yet wanted comment said earlier seems like people use expected likely due misunderstanding purpose example might code relied always getting updated whereas memoization lifting state would appropriate surprised surprised fully expected people use method simply core methods sure many relied upon previously removed namely allow us tell props change externally personally got impression almost new reading docs use case components receive objects edited external sources usually redux via store data local state done ca nt edit property values directly also usually type callbacks mapped via triggered updated data needs persisted callbacks result new data pushed current component props local state updated existed check presence changes data could available construction alternatively might necessary load first meaning would become available one eventual calls obviously godsend regard makes code much cleaner neater personally ca nt see way implement behaviour similar described would definitely interesting see memoization lifting state would appropriate said pretty sure looked options could nt find solution would work use cases used occasions sometimes late things need checked something gets changed", "d": "5/2018"}, {"body": "hear intentional ambiguity spec nt change folks understood gdsfp work original implementation flawed worth rfc spec getderivedstatefromprops make mention note react may call method even props changed calculating derived data expensive compare next previous props conditionally handle changes examplesrecipes recommended comparing new previous prop values updating state failed community warning clearly enough api reference docs apologize personally got impression almost new reading docs need better job communicating appropriate techniques would better see tweet example plan publish another blog update next week two covers detail would definitely interesting see memoization lifting state would appropriate said sure include several examples upcoming update", "d": "5/2018"}, {"body": "bvaughn looking forward article one thing suggest comment colleagues expressed lots important documentation actually seems blog posts api pages would personally prefer see documentation expanded blog posts linking quoting parts stands things logic suggestions exceptions available blog posts", "d": "5/2018"}, {"body": "good point codeaid difficult strike right balance much little detail think current reference section definitely needs work hope eventually create recipes section site shows common tasks suggested patterns unfortunately couple us though sort thing pretty time consuming appreciate feedback try keep mind make small edits next couple weeks", "d": "5/2018"}, {"body": "bvaughn ask mark give people ridiculous library popular globally getting resources", "d": "5/2018"}, {"body": "assign mark code reviews least", "d": "5/2018"}, {"body": "one ca nt grasp naming param names method called params totally made sense literally getting derived state props new props thus nextprops prevstate params yeah kind new componentwillreceiveprops least naming made sense particularly going diagram two days ago method fire setstate forceupdate totally confused need setstate get newstate case prevstate useful case deriving need forceupdate", "d": "5/2018"}, {"body": "would help say arguments called represent current props state thought prefixes would helpful see confusing need understand question use cases changed needed method code bugs one described also work need reason needed need cool intended commonly used already noted times thread hard say whether need show particular snippet code", "d": "5/2018"}, {"body": "one dubbha andrew talking earlier week decided update docs like recent blog example guess neither us made change yet edit docs updated via", "d": "5/2018"}, {"body": "royalhunt actually breaking problems well using apollo looking code exact bug described react break code helped find bug already existed previously unnoticed code manifested less deterministically sounds like good thing", "d": "5/2018"}, {"body": "correct understanding updated version diagram would gdsfp stretching right setstate also trigger forceupdate also would sensible way general mimic behavior nt want gdsfp anything props change basic object reference equality comparison props object rather comparing specific props solve problem general sense add background methods would used components setstate value call propsonchange method setstate callback parameter bubble change real source truth may top level state redux store needs copy value kept local state user experience reasons changes come needs able respond", "d": "5/2018"}, {"body": "gaearon bvaughn first thank answers would help say arguments called props state represent current props state yes helps least obvious getting second argument case current newstate prevstate instead use cases changed needed method code bugs one described also work need reason needed need cool intended commonly used already noted times thread hard say whether need show particular snippet code asking need question mostly trying think new use cases method covers use cases perfectly thinking use case use case course code show nothing broken getting method could useful latter two cases ca nt think use cases would deriving tolgeros correct understanding updated version diagram would gdsfp stretching right setstate also trigger forceupdate nope also fires skips shouldcomponentupdate", "d": "5/2018"}, {"body": "example case triggers thus always default value prop value javascript class rangeinput extends reactcomponent state value thispropsvalue static proptypes value proptypesnumberisrequired static getderivedstatefromprops nextprops prevstate nextpropsvalue prevstatevalue return value nextpropsvalue onchangerange e gt thissetstate value parsefloat ecurrenttargetvalue render const value thisstate reactdomrender documentqueryselector app another workaround", "d": "5/2018"}, {"body": "tolgeros also would sensible way general mimic behavior yes think looks equivalent recommend writing code like though fragile let expand needs copy value kept local state user experience reasons changes come needs able respond clarify page realize rerendering parent reason whatsoever counts change example wrap component popup container passes prop child function different every render equality checks redux containers stop popup calls component rerender blow away user input think code tries distinguish change comparing whole props objects instead individual props past relying method gets called lead bugs like implement something like described would make sense least determined change comparing explicit marker coming redux store eg id version field explicitly gets incremented intend blow away local state see mean dubbha yes helps least obvious getting second argument case setstate current newstate prevstate instead well yes reason called docs returning state already input state definitely older creating right worried people would attempt mutate state object called asking need question mostly trying think new use cases method maybe wrong think change intended cover new use cases intended uncover dormant bugs existing use cases seen already three times thread issue described comment use cases use method supported ways need make adjustments code bugs became prominent need fix code follow supported patterns like documentation blog posts andrewbalekha example case getderivedstatefromprops triggers setstate thus always default value prop value code also problem three cases described even react user inputs something parent component rerenders different reason blow away user input match state every component need decide value controlled uncontrolled part component api design controlled use value props attempt mirror state want change something need ask parent called lifting state described detail documentation scenario need uncontrolled take prop like first render point use local state keep value rerendering reset scenario need combining controlled uncontrolled behavior using means possible extremely errorprone strongly suggest see three previous bug descriptions thread leads mistake completely unrelated parent rerender blow away state instead want blow away state something changes parent need figure exactly serve trigger blowing away local state example maybe parent state like changes case either pass state child use decide blow away existing local state give child id changes forced unmounted mounted new props ensure clean slate without blow away existing dom fact might exactly need conceptually current item changed want preserve things like focus uncontrolled input state scroll positions explain problem little bit sure explanations clear enough keep describing problem application code every new example thread demonstrates desired behavior", "d": "5/2018"}, {"body": "gaearon thanks got problem example code failing well", "d": "5/2018"}, {"body": "simpler example issue seems like coming componentwillreceiveprops getderivedstatefromprops easy refactor code something stopped working properly", "d": "5/2018"}, {"body": "karolk code already work properly react believe explained detail code like buggy several comments get chance read yet missing reason example different already suffer issues described even currently away keyboard create demo fiddle work comments unconvincing", "d": "5/2018"}, {"body": "karolk dan already mentioned would nt work comments essentially boils user inputs something parent component rerenders different reason blow away user input match state example even react component rerendered prop changed eg type callback would overridden mixing awkwardbroken edge cases even going quote dan comment right great summary every component need decide value controlled uncontrolled part component api design controlled use value props attempt mirror state want change something need ask parent called lifting state described detail documentation scenario need uncontrolled take prop like first render point use local state keep value rerendering reset scenario need combining controlled uncontrolled behavior using means possible extremely errorprone strongly suggest see three previous bug descriptions thread leads mistake completely unrelated parent rerender blow away state", "d": "5/2018"}, {"body": "gaearon think example slightly different updated fiddle demonstrate behaviour going trying box type paste anything value meeting certain criteria ends store comes back prop aware achieved differently maybe using gdsfp way similar cwrp point go wrong even assume gdsfp fire many times", "d": "5/2018"}, {"body": "bvaughn went combination parent controlled state seems depend implementation detail nt think anything nt get gaearon explanation thank time appreciate quick response twitter", "d": "5/2018"}, {"body": "karolk chance read reply sections dan reply highlighted sorry comments posted time seems like aiming uncontrolled component case strongly recommend nt try mirror like component instead initialize default value like js class test extends reactcomponent constructor props super props changetext newtext thissetstate text newtext gt notify store text change criteria met thisstatetextmatch dg null dispatch thisstatetext render return even react mirroring way fiddle shows recommended result confusing api confusing runtime behavior source truth two disagree unexpected rerenders changes unrelated like callback functions inline styles often recreated inline render could blow away unintentionally reset every time component rerenders entirely unnecessary use value instead updated specific field changes parent component way forcefully reset previous value without rendering twice first change value arbitrarily change back target", "d": "5/2018"}, {"body": "going close conclusion change exhibits bugs code react code already buggy react subtle less deterministic ways support claim refer five examples posted thread already buggy react explained analysis convinced explanation let take demo indeed first glance seems like version using react edit anything version using react code runs fine original code free bugs fiddle using react rerender parent component every second see input resets every second clearly intended examples thread got broken react already exact bug whenever parent rerenders state gets unintentionally reset pretty hard debug components decoupled whether see bug depends lucky react helped surface bug code fix instead keeping app broken cases reproduce less reliably mentioned follow another post edit live describes use already shared thoughts component api design part maintain making existing bug app reproduce consistently breaking change helpful way help find fix bug sorry clear enough documentation guidance using method amend posting coming week edit post live finally agree method kinda hard wrap mind around think flaw api statebasedonprops always hard think complexity hidden due imperative nature even bugs like existed apps might able reliably reproduce every time new method makes complexity trying explicit verbosity helps realize perhaps good solution particular problem clear whether value controlled uncontrolled lifting state necessary better readability correctness perspectives follow guidance thanks everyone discussion hope helpful missed anything please let know", "d": "5/2018"}, {"body": "goyney help noticing downvoted last comment something explanations clear seems wrong tried best explain change uncovers existing bugs making existing broken codepaths reproducible code bugs old behavior also new behavior breaking change something still unsatisfactory could better improve aside publishing blog post plan understand frustrating version update leads seeing bugs bugs already existed app perhaps consolation see clearly every time opportunity fix", "d": "5/2018"}, {"body": "broke semver plain simple understand explanations understand reasoning disagree get latest minor release stuff nt stop working minor patch version dependency change plan simple changes good intended major sticking point", "d": "5/2018"}, {"body": "goyney every bug fix potential break code relying buggy behavior true bug fix little likely break code nt hard line bug fix breaking change much spectrum looked felt closer bug fix", "d": "5/2018"}, {"body": "semver social contract think clear cut may seem code may randomly break unbreak every single react release mean never change implementation possible change would break semver probably silly example course code like technically anything react throws error browsers support react mean adding support pointer events breaking change code also looks silly although maybe version tiny bit less farfetched js const handlers ongotpointercapture const x somethingthatreturnsnull xfoo somewhere foo maybe somebody could write something like assuming pointer events already supported notice warning code would break release think still implausible argue kind change chance exists code happens rely old behavior wanted respect semver strictest almost mathematical sense make every single release major course defeats purpose semver coming back original point semver social contract try hard break things broken given choice break already broken code strictly ensure broken code get written keep broken code working cases allow broken code written less clear cut case decided worse ecosystem endure pain fixing later meantime live bugs hard reproduce make existing hidden bugs apparent change fix categories bugs well make existing bugs prominent scenario see arguments way hope see", "d": "5/2018"}, {"body": "read comments thread still quite sure understanding planned changes correctly understand instead triggered external properties changed get triggered every external internal update right case alternative actually listening external changes without compare props state time saying bugs surface however nt see use case described comment earlier covered even achievable recap problem top level components talk redux get state data pushed via props using redux receives new data components pretty much top level components way lift state meaning accept props stored local state edit therefore requirement able tell something changed externally replace local state nt care blow user data away exactly point replace local state fresh data api suppose could say way new props coming redux compared parent component rerendering blow away internal state however whole point components edit stuff trigger action make api call get new data redux replace current state oftentimes late lifecycle good get triggered change never able tell something change encountered problem updating components way latter one worked logical change even sure proceed", "d": "5/2018"}, {"body": "edit stuff trigger action make api call get new data redux replace current state determine data coming new understand part judging description compare ids anything hoping components never get rerendered unless something specific happens redux side eg data fetch fragile assumption far tell adding single alwayschanging value result eg cause component always rerender action ones care always reset state bad adding property selecting data redux might change often toplevel data selecting break component words seem relying performance optimization react redux currently bails rendering shallowly equal props correctness sounds like become bigger problem later eg react redux stops using shallow equality checks everywhere hard say without seeing code basic idea solve issue correctly believe gave pointers need kind behavior need explicit marker tells data actually new eg id version field different needs replaced components resilient rerendered seeing sandbox minimal code example would help", "d": "5/2018"}, {"body": "semver social contract contract company like facebook probably following especially huge community developers utilizing dare say standard frontend development point time functionality nonalphanonbeta release wild two months cited documentation stating lifecycle behavior made claims deprecation suggested developers start moving new modal soon possible prepare eventual removal deprecated code would assume means proper unit contract testing piece lifecycle including almost bet point development tests added changed behavior changed fact see test file changes red flag breaking change made change fundamental lifecycle react big deal really bug yeah think based discussions thread explanations classified unintended behavior nt launchday slip two months release breaking change warranted headsup community saved one change wasted collective community probably several hundred hours productivity time figure code stopped working know took two developers least two hours track everything quit working since specific change omitted errors also understand sometimes accidents happen breaking change pushed unintentionally everything stated thread indicate intentional knew extremely unprofessional good way upset base users something like especially happens easily push someone competing framework listen like react took long time ramp feel really comfortable like going go bashing stuff like small petty frankly code need writing arguing people interwebs something like asking vigilant release breaking changes future", "d": "5/2018"}, {"body": "thanks elaborating think disagree much rings true warranted headsup community take feedback heart stand saying poorly communicated bugfix also poorly communicated feature rather semvermajor change could definitely explained better retrospect fault worth mention blog post unsupported patterns worked cases others accident would break consistently see saying annoying debug like made change silently fact large part text blog post dedicated exact change saw breakage upgrading would make sense search code patterns described post rather try find bug two hours without context sure whether happened definitely saying fault make effort explain issues may run appreciate everyone willingness engage conversation sorry let original version stay enough time start depending buggy behavior fact biggest reason scrambled get sooner realized mistake weeks ago testing impact fix past two weeks gave us confidence change scoped enough existing bugs uncovered important enough ship fix", "d": "5/2018"}, {"body": "gaearon nt knowingly upgrade nt even aware dropped someone team said hey look react version changed company policy automatically got latest version next fresh pull subsequent codebase happened night normal circumstances may discovered issue days point time sure one us would saw release announcement would attacked things different way", "d": "5/2018"}, {"body": "oh see assumed using lockfiles since mentioned yarn npm uses lockfiles default understand sentiment better think general using lockfiles desirable apps infallible always chance could introduce bug regression release totally understand policy though affect", "d": "5/2018"}, {"body": "gaearon hi realworld use case albeit nascent library breaks react write investigating refactor code goal simply provide example something broke kohlmannjlimina implemented custom scrollview component sighhh nt ask working demo component branch storybook build uses react writing try clicking dragging scroll bar caps shown tweet interaction corresponds one another call within higherorder method sic whose returned event handler attached windowmousemove also implemented getderivedstatefromprops static method serves following purpose component exposes used derive initial thisstatescalex thisstatescaley values incoming numbertype props changes replace corresponding value supports need interactively rescaleable scroll view either used uncontrolled standalone form future controlled parent component sure guess going theory indeed fixed lifting state certainly consider refactor since actively developing component ui library still considering implications uncontrolled scrollview entirely manages internal state vs controlled version discovered breakage code react upgraded started storybook navigated back resizeable kitten story found component longer responded dragging scroll bar caps reference commit seems though call within event handler effect since called whenever component updates thereby repudiating update sure enough temporarily commented found component reacted dragging scroll bar caps anyway mentioned look refactoring code major inconvenience hope use case explanation thereof helps team better understand might used wild additionally lockfile place voluntary upgrade finally personally feel satisfied mantralike albeit relevant recommendation lift state", "d": "5/2018"}, {"body": "probably could renamed stop confusing emphasize nt depend props change literally derives state render props change", "d": "5/2018"}, {"body": "klimashkin interesting true went updates thinking less dropin replacement look proposed naming make wonder visual pattern recognition seeing end method name threw rather rename though perhaps react docs could minimum emphasize need holistically consider component state management strategy transitioning away might also help point especially nature updated behavior react used component exclusively derives state props rather state management strategies deriving state updates event handlers sure heuristic example exactly correct merely asking holistically consider component state management clarified things", "d": "5/2018"}, {"body": "kohlmannj bug react case two pieces code equivalent cwrp comparing old prop value new one gdsfp comparing derived value going change inside component think gdsfp save old scalex value state able compare new prop correct", "d": "5/2018"}, {"body": "dema ah see mean thanks analysis implemented change identical described except felt comfortable naming state properties", "d": "5/2018"}, {"body": "catamphetamine already asked refrain namecalling month ago another thread please stop blaming people code buggy sorry came across way pointing bug running already existed code new one analyzed detail thread including providing demo value judgment code want discussion fruitful think might help separate technical details emotions true snippet react phone input would completely reset callback nt immediately set state parent component rerenders another reason turn fiddle happy demonstrate sorry bug surfaced change frustrated already exists code wrote react trying blame make feel bad stating fact code mentioned earlier consider making existing bugs code occur often breaking change definitely could better communicating use without introducing bugs blog post plan write hopefully help peace", "d": "5/2018"}, {"body": "gaearon ok thx removed comment heard means opressed doublecheck good react renaissance evolving instead dying like yet another usedtobesohyped framework changes controversial fine", "d": "5/2018"}, {"body": "thanks btw happy look issue input component earlier tuesday due holidays", "d": "5/2018"}, {"body": "gaearon nice certainly would nt waste time something like nt even know stay productive taking part every discussion github handle fix seems straightforward actually could nt simply pass engaging discussion silently heated discussions fun", "d": "5/2018"}, {"body": "kohlmannj regarding pattern described wanted reiterate concern case helpful nt exactly related overall pattern described component component exposes used derive initial thisstatescalex thisstatescaley values incoming numbertype props changes replace corresponding value supports need interactively rescaleable scroll view either used uncontrolled standalone form future controlled parent component concern mixing controlled uncontrolled behavior like leads confusing api andor confusing runtime behavior high level clear source truth props state values disagree practically speaking two variants pattern usually takes downsides variant state always reset props component rerendered recent change highlights one downside approach problem also existed version well older versions built top problem unexpected rerenders override component state unintentionally includes changes unrelated props like callback functions inline styles often recreated inline render bypass purity checks variant state reset props value changes pattern compares incoming props previous props updates state value changes externally done avoid unexpected rerender problem mentioned however also downside good way parent reset property previous value example scenario component like used render lot form fields underneath submit button user fills fields tries submit error one field application renders automatically scroll field error user see user modifies field scrolls submits still error field application renders scroll back problematic field user knows still error nothing happens state updated nt changed would confusing user developer trying debug problem work arounds set new recreate component entirely works okay small components like form fields expensive components contain lot children like rerender twice eg null prop second time original prop order force inner component reset state recommend designing components either fully controlled fully uncontrolled avoid cases fully controlled component avoids problems state reset fully uncontrolled component lighter weight use since generally requires fewer callbacks case props used initialize default state values never update state afterwards reasons like ones outlined case also suggest prop names clear like etc need ability forcefully reset uncontrolled component could add instance method called via", "d": "5/2018"}, {"body": "bvaughn excellent notes thank much happens tentatively considered change fully uncontrolled based discussion work entirely separating controlled uncontrolled behavior continue development", "d": "5/2018"}, {"body": "bvaughn thanks writing love thread helped crystallize problems head vaguely aware hard articulate exactly broken apis looking forward blog post", "d": "5/2018"}, {"body": "edited could provide another example could potentially changed fully controlled one phone number input component country select flag icon phone number input field able set externally point time country select flag must update accordingly say one tries make component controlled one case taken country flag stored must contstantly reverified order pair stay consistent computing keystroke already called handler viewed computationallyheavy function slows performance parse things compare lot regular expressions order find suitable country phone numbering plan entry one may say controlled approach makes component times slower making compute two times one time inside handler time inside reality could memoized limit arguments call inside free looks like memoization really saves purefunctional approach performance realworld scenario simplified example though reality slow performed keystroke inside handler inside handler another lite reduced function called operates within bounds selected country saves performance actually make impact inside still specific case exclusion general case maybe still keep component stateful wo nt transition purely stateless function optimize performance", "d": "5/2018"}, {"body": "catamphetamine example code show looks like controlled component store current phone number value state gets props example show nt actually need use component state core deriving something flag show props way performs well need sort thing memoization wrapper think otherwise answer nt write lengthy comments", "d": "5/2018"}, {"body": "want add note forget variant state reset props value changes pattern compares incoming props previous props updates state value changes externally done avoid unexpected rerender problem mentioned however also downside good way parent reset property previous value another scenario bad solution often people want keep edits form local state like commit place redux store event like button click let say ui like button view previous button view next edit value input value button save navigate items previous next buttons text input reset current values click save save edits implement people sometimes try use logic goes like initialize changes want throw away local edits assume change comes due previous next click however logic buggy consider case navigate two items buttons values different sure rerender reset field two neighbor items value condition using determine something like false keep local edits even though current item changed valid anymore hand condition looks like compares current input value apart code breaking would also get buggy behavior described earlier comments every parent rerender would blow away state make pattern work really best way avoid instead explicitly make component fully controlled state managed component must something like accept prop like current item id keep previous id state know current item changed need reset state current value changing really tell enough make decision", "d": "5/2018"}, {"body": "make pattern work really best way avoid instead explicitly make component fully controlled state managed component must something like accept prop like current item id keep previous id state know current item changed need reset state current value changing really tell enough make decision another option implement getderivedstatefromprops meaning child component wo nt reset move next item specify child parent determines using id item mean keyid changes child completely remounted note may worse performance cases quite possibly semantics want depends use case though essentially boils use getderivedstatefromprops componentwillreceiveprops component guessing happened based old new values even store old new values compare properly suggesting thread making guess parent wanted many cases wo nt cause problems pair may child always guess correctly parent may change state certain ways fully reusable child good idea use methods pull new parent behaves differently might wrong thing", "d": "5/2018"}, {"body": "smaller examples counter someone prefers see code using demonstration code already bug click demonstrate bug see completely unrelated parent blows away child state correct solution needs neither instead lifts state parent decide either case note forced deal complexity ui example explicitly decide needs happen edit initial value field interacting counter implementation ignore edits something else important part explicit", "d": "5/2018"}, {"body": "nt think huge problems controlleduncontrolled handling solvable side nt understand purpose say lift state assume nt matter upper state holder another component redux selector follow lift state nt need local component state anywhere nt need ever well react team make components stateless thisless get rid classes force approach last option react team considering early bird let us know change mindset advance also quote docs invoked right calling render method quite correct shouldcomponentupdate make people think move derive logic directly render method access", "d": "5/2018"}, {"body": "klimashkin react team make components stateless thisless get rid classes force approach last option react team considering getderivedstatefromprops early bird let us know change mindset advance always considering alternatives classes done past four years local component state essential feature react pretty much important one going away anywhere think might taking comment extreme intend side nt understand purpose getderivedstatefromprops say lift state assume nt matter upper state holder another component redux selector follow lift state nt need local component state anywhere mean always lift high possible meant bad duplicate sources truth disagree particular value lifting state solve problem basically forces choose one source truth get data flowing say lift way enough solve practical issue even lift shared ancestor still local state component owns two local states two components really supposed represent conceptual value syncing pain sign lifting state common ancestor higher necessary resolve ambiguity bugs causes lifting state panacea either suggesting solution literally trying sync two values think prop state field named way good rule thumb might ideal solution symptom duplicate source truth legit cases solved lifting state sometimes state really local derivative example may want reset displayed suggestion list user changes field suggestions might implementation detail component might want lift thus causing every parent manage think would legitimate case using reset local state response prop change parent need aware derived value even exists come checklist using makes sense would something like derived state truly local component directly map data parent already managing state rederived specific prop changes rerendering parent arbitrary times blow away child state effectively means one two options either state accumulated prop changes eg state accumulated changes props accumulated per prop value eg autosuggest items displayed current field need reset whenever field changes", "d": "5/2018"}, {"body": "described doc error boundaries react components catch javascript errors anywhere child component tree log errors display fallback ui instead component tree crashed quite sure whole thing works hood searched keywords codebase piece snippets might give clue wrt question think intention error boundary catches original thrown error prints using consoleerror", "d": "5/2018"}, {"body": "thanks help pointing code helpful however still sure seems original error still thrown cypress reasons comment file developer assumes browser prints original error maybe actually throws prints means cypress caught error tests also ed something cypress catched far read cypress listens docs say gets triggered javascript runtime error including syntax errors exceptions thrown within handlers occurs think harmless notsilenced triggers uncaught exception", "d": "5/2018"}, {"body": "seems like clipped safari devtools probably fixable", "d": "5/2018"}, {"body": "haroenv yep svg generator need work example provided svg makes stuff like wrapping text pain especially logging image requires fixed size maybe calculations screen viewport approximate width available space inside devtools could calculated making responsive", "d": "5/2018"}, {"body": "would require server parse error messages output svg cool idea think makes nogo added complexity dynamically render svgs nt seem worth click link nt much work plus directing users official docs site good thing way know look thanks though", "d": "5/2018"}, {"body": "providers wo nt anything special block updates think normal react components react component tree rerenders completely render due want block updates specific context tools disposal always andor context update propagate value changes anything prevent tree rerendering like happens normally react", "d": "5/2018"}, {"body": "gaearon thanks quick reply help clarification able get desired behavior", "d": "5/2018"}, {"body": "gramila assume event pooling syntheticevent pooled means syntheticevent object reused properties nullified event callback invoked performance reasons access event asynchronous way read", "d": "5/2018"}, {"body": "react binds events document level better performance uses event delegation code point view makes sense div reality native event document time nt worry use react gives", "d": "5/2018"}, {"body": "hey mridgway thanks bringing understand intention reads types different elements meant type check values returned also tells whether value passed certain symmetry changing return type element type elements could create problems anyone relies return values things rendered things returned maybe ok case sure sounds like want hybrid two tells type element types think api like would suffice use case bvaughn think", "d": "5/2018"}, {"body": "understand intention reads types different elements meant type check values returned correct see usefulness method like one aweary describes nt really strong thoughts sharing brandon concern backwards breaking change make existing methods", "d": "5/2018"}, {"body": "aweary yes think api would sufficient use case specifically would something like way without reach would fine", "d": "5/2018"}, {"body": "way without reach component typeof would fine", "d": "5/2018"}, {"body": "yeah seems bit roundabout though also introduces dependency would nt need contained logic edit realized clown icon show mac", "d": "5/2018"}, {"body": "took stab implementing", "d": "5/2018"}, {"body": "recently merged", "d": "5/2018"}, {"body": "awesome thanks", "d": "5/2018"}, {"body": "let profile production first expect difference significant", "d": "5/2018"}, {"body": "hi gaearon indeed expected production faster lot faster happy share numbers clean results likely make performant enough also optimizations looking hash routes use dirtybits sibling routes get rerendered feels rather arbitrary ability optimize way limited length bit number probably performant enough needs without dirty bit hack dev speeds likely problematic waste time chasing phantom perf problems however dirty bits optimizations expect make palatable well seems community adopts new context api reduxlike containers routing theming etc going see huge numbers context consumers app page renders couple thousand components might also render hundreds consumers focus framework pushes bit extreme focus routes around components care focus buttons menus modals etc opinion outside intended usecase context widespread use seem within intended usecase latter expect better dirty bits alternative might still widely useful follow concrete outcome couple days get approach results cleaned", "d": "5/2018"}, {"body": "sorry delay follow bunch profiling unsurprisingly found several inefficiencies code contributing performance issues eliminated created scientific experiment found update times rending routes page observed bits without observed bits production ms ms dev ms ms testing time transition route active route active routes notified change basically work without observed bits case context consumers receive update return identical props child component returns withobservedbits case work make results observed bits hash hash makes irrelevant routes hear update clean test though minimal amount work every handler recompute derived data props inner component unclear savings avoiding work avoiding work react end rendering inner component running check ran time run profiles regardless dirty bits api nice way avoid spurious updates without bespoke caching logic every consumer otoh dirty bits api unstable subject bit limitation improvements api would still benefit us takeaways us react context quite fast without optimization fine uses feature useful avoiding needless work dev many times slower prod initial request nicer api dirty bits still relevant probably relatively small group users needs thanks great work going react please leave open close discretion", "d": "5/2018"}, {"body": "bad idea use array index since nt uniquely identify elements cases array sorted element added beginning array index changed even though element representing index may results unnecessary renders", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "please check documentation", "d": "5/2018"}, {"body": "imho done outside react like let also listen people opinion", "d": "5/2018"}, {"body": "possibly hoping able rely browser default text nt worry creating localised text button", "d": "5/2018"}, {"body": "actually second thought though bare html would also show button text well consistentwise think case react bothers extraneous work give default value", "d": "5/2018"}, {"body": "ah remember bare attribute mean html usually gets interpreted supply attribute jsx nt assign anything basically saying want used linter telling redundant words setting almost opposite setting", "d": "5/2018"}, {"body": "another way expressing said jsx jsx hello world computes following html html hello world believe behaviour situation described issue", "d": "5/2018"}, {"body": "recommend using undefined uncontrolled inputs using nt affect value input since worked react breaking change undocumented likely unintentional fix", "d": "5/2018"}, {"body": "know regressed", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "fix simply bailearly reactdominput behavior applying submitreset inputs wonder would happen switched", "d": "5/2018"}, {"body": "looks like rollup bug please file issue specifically see block code expected js calculate diff two objects function diffproperties domelement tag lastrawprops nextrawprops rootcontainerelement validatepropertiesindevelopment tag nextrawprops var updatepayload null var lastprops void var nextprops void switch tag case input lastprops gethostprops domelement lastrawprops nextprops gethostprops domelement nextrawprops updatepayload break case option lastprops gethostprops domelement lastrawprops nextprops gethostprops domelement nextrawprops updatepayload break case select lastprops gethostprops domelement lastrawprops nextprops gethostprops domelement nextrawprops updatepayload break case textarea lastprops gethostprops domelement lastrawprops nextprops gethostprops domelement nextrawprops updatepayload break default lastprops lastrawprops nextprops nextrawprops typeof lastpropsonclick function amp amp typeof nextpropsonclick function todo cast may sound svg mathml custom elements trapclickonnoninteractiveelement domelement break assertvalidprops tag nextprops getstack var propkey void var stylename void var styleupdates null propkey lastprops nextpropshasownproperty propkey lastpropshasownproperty propkey lastprops propkey null continue propkey style var laststyle lastprops propkey stylename laststyle laststylehasownproperty stylename styleupdates styleupdates styleupdates stylename else propkey dangerouslysetinnerhtml propkey children noop handled clear text mechanism else propkey suppresscontenteditablewarning propkey suppresshydrationwarning noop else propkey autofocus noop nt work updates anyway else registrationnamemoduleshasownproperty propkey special case listener updates need ensure current fiber pointer gets updated need commit update element updatepayload updatepayload else deleted properties add queue use whitelist commit phase instead updatepayload updatepayload push propkey null propkey nextprops var nextprop nextprops propkey var lastprop lastprops null lastprops propkey undefined nextpropshasownproperty propkey nextprop lastprop nextprop null amp amp lastprop null continue propkey style nextprop freeze next style object assume wo nt mutated already warned past objectfreeze nextprop lastprop unset styles stylename lastprop lastprophasownproperty stylename amp amp nextprop nextprophasownproperty stylename styleupdates styleupdates styleupdates stylename update styles changed since stylename nextprop nextprophasownproperty stylename amp amp lastprop stylename nextprop stylename styleupdates styleupdates styleupdates stylename nextprop stylename else relies mutating styleupdates updatepayload updatepayload updatepayloadpush propkey styleupdates styleupdates nextprop else propkey dangerouslysetinnerhtml var nexthtml nextprop nextprop html undefined var lasthtml lastprop lastprop html undefined nexthtml null lasthtml nexthtml updatepayload updatepayload push propkey nexthtml else todo might late clear children inserted already else propkey children lastprop nextprop amp amp typeof nextprop string typeof nextprop number updatepayload updatepayload push propkey nextprop else propkey suppresscontenteditablewarning propkey suppresshydrationwarning noop else registrationnamemoduleshasownproperty propkey nextprop null eagerly listen even though nt committed yet true amp amp typeof nextprop function warnforinvalideventlistener propkey nextprop ensurelisteningto rootcontainerelement propkey updatepayload amp amp lastprop nextprop special case listener updates need ensure current props pointer gets updated need commit update element updatepayload else property always add queue filter using whitelist commit updatepayload updatepayload push propkey nextprop styleupdates updatepayload updatepayload push style styleupdates return updatepayload collapsed brevity specifically part look rollup output part completely missing js calculate diff two objects function diffproperties domelement tag lastrawprops nextrawprops rootcontainerelement validatepropertiesindevelopment tag nextrawprops along bunch logic function", "d": "5/2018"}, {"body": "regression rollup filed issue", "d": "5/2018"}, {"body": "think description recommend use error boundaries fairly explicit yes intentional behavior nt recommend rerender component indeed likely fail instead recommend rendering unobtrusive placeholder notifies user something went wrong case instead displaying alert solution would wrap individual views boundaries level granularity even placeholder somehow buggy suggest writing tests ensure error fallbacks solid still several error boundaries way app yes bugs app unmount sounds like big problem code buggy even error recovery causes errors every step points bigger problems app thinking keeping dom place graceful recovery empty comfort practice app stay broken assumptions held code longer true subtle ways like sending message wrong person displaying wrong product price etc losing user data input unmounting consider happens user accidentally closes tab battery dies indicative bigger problem need fix anyway error boundaries lowlevel mechanism definitely guard every little thing want like wrap every line code however nt necessarily result better experience instead might worth intentionally designing failure states different parts app investing unit tests error boundary components make sure nt fail good error reporting system actually know bugs happen fix", "d": "5/2018"}, {"body": "gaearon sure spotify thrilled app unmounting icon ca nt found thank god app would completely unusable without icon say level granularity bomb implanted every app disagrees order know problem triggered sentinel zealot essentially requires wrapping every component anything especially since components ca nt handle presumption impose everyone anything goes wrong disaster fact time trivial easily recoverable decide disaster thinking keeping dom place graceful recovery empty comfort fallacy viewa throws viewsb z fine nav unaffected react nt explode user navigate views fine perhaps think way chrome freezes expect os explode course definitely bug design flaw prefer understand unit tests etc understand problem fixed anyway however entire team department etc nt need blocked bricked app whilst someone tries find missing icon nt work spotify hypothetical could easily see happening", "d": "5/2018"}, {"body": "sure spotify thrilled app unmounting icon ca nt found thank god app would completely unusable without icon need sarcasm technical discussion without making strawman arguments single error boundary app bad practice describe would happen essentially requires wrapping every component anything especially since components ca nt handle confused statement error propagates tree need wrap every individual component yes good idea wrap big parts app navigation bar sidebar content area maybe granular ones eg message input presumption impose everyone anything goes wrong disaster fact time trivial easily recoverable decide disaster see reading exactly point easily recoverable wrapping part ui boundary like trycatch unclear errors propagate tree documentation works like trycatch", "d": "5/2018"}, {"body": "sorry perhaps sarcasm came across strong think core appropriate trivial issue brings entire site confused statement error propagates tree need wrap every individual component nt want missing icon explode whole big part asynchronous convo bit longform post summary meet week next week", "d": "5/2018"}, {"body": "nt necessary since referring component logic abstract", "d": "5/2018"}, {"body": "ca nt use another variable wrapper template mean ca nt write javascript import react react class test extends reactcomponent render const div const wrapper thispropswrap div reactfragment export default test ps use form import react instead interested", "d": "5/2018"}, {"body": "dom property added actual nodes fragments nt map case would suggest render function clean intuitive enough", "d": "5/2018"}, {"body": "think solution best workaround use case adding dom attributes fragment would probably confusing people", "d": "5/2018"}, {"body": "think position generally hoc approach lot think based wanting api injects props due obvious pitfalls add special property neat though likely gon na conflict legacy api time would nt work function components forwardref components etc also run problem deal multiple contexts conflicts eg tend think useful hoc anyway hoc intentionally turns context relevant props underlying component dumb component also makes resilent anyway since nt need tightly coupled instance property", "d": "5/2018"}, {"body": "thanks weighing jquense could prop name maybe separate argument akin added benefit react could possibly warn prop naming collisions like back days mixins", "d": "5/2018"}, {"body": "difference context comes prop ie instead probably best remains userland solution adding another api relies accessing data instance method seems like runs counter longterm goal asyncsafe api nt rely classes", "d": "5/2018"}, {"body": "agree aweary react moving away instance properties still think nice method context objects providing context prop", "d": "5/2018"}, {"body": "react applications store language stuff new context api code mess every component new consumer render prop inside const component props context gt contextcontenttitle componentcontexttypes content proptypesobject became yes pretty one single file components lines use context almost components workaround", "d": "5/2018"}, {"body": "thismarcoantonio use lot stuff context api locale relay environment routes isolation allows care context pollution always know scope bit indentation nt matter usually solve context combiner works flow types example", "d": "5/2018"}, {"body": "updated original post removed example uses sake future discussion", "d": "5/2018"}, {"body": "callback fired twice nt see behavior talking toggle components working add logging rendering example see toggle fact work correctly", "d": "5/2018"}, {"body": "expected setstate updaters run twice strict mode development helps ensure code nt rely running single time would nt case async render aborted alter restarted setstate updaters pure functions nt affect logic application", "d": "5/2018"}, {"body": "gaearon consider example say piece code triggered clicking button updater function called multiple times guarantee increments per click actually real example project button triggered clicked button noticed updater function called twice resulting inconsistency", "d": "5/2018"}, {"body": "franklixuefei updater called twice state example called twice returning cases also believe one invocations actually cares value returned react nt processing state update twice calling function twice help surface issues related side effects state updater methods pure", "d": "5/2018"}, {"body": "aweary thanks answering question however case take look reallife example project array objects noticed example updater function called twice seen console log second time updater function called contains one fewer element first time trust banging head bug last night", "d": "5/2018"}, {"body": "mutates array looks like type impurity strict mode intended catch smile", "d": "5/2018"}, {"body": "iamdustan noticed look closely created new array end oh wait right modified original array even though returned new array surprised nt even think first shame realized great thanks iamdustan aweary", "d": "5/2018"}, {"body": "need newer version node least run code", "d": "5/2018"}, {"body": "nt recommend following tutorial nt specify versions get broken point maybe already follow suggested installation steps website instead", "d": "5/2018"}, {"body": "fiddle hello world could post updated link", "d": "5/2018"}, {"body": "react ca nt warn deep mutation state way react check also technically allowed mutate state deeply escape hatch use packages like enforce immutability development many immutability helper libraries eg updating", "d": "5/2018"}, {"body": "fiddle hello world could post updated link bad updated gaeron got go external libraries thanks", "d": "5/2018"}, {"body": "please provide example reproducing issue tested seems working expected", "d": "5/2018"}, {"body": "hmm thats strange try provide example using apollo hoc fetch data ssr got data props loaded constructor code run cra constructor data ready yet anyone else issue workaround js constructor props super props thisstate yourstate", "d": "5/2018"}, {"body": "likely issue apollo figure minimal reactonly reproducing case let us know", "d": "5/2018"}, {"body": "setstate currently synchronous outside event handlers likely change future", "d": "5/2018"}, {"body": "works fine firefox jumps chrome think related mentioned issue", "d": "5/2018"}, {"body": "demo provided using input type known issue email inputs related chrome reports value email inputs see thanks", "d": "5/2018"}, {"body": "yeah think merging bvaughn acdlite recall reason nt vaguely remember discussion might confusing something else", "d": "5/2018"}, {"body": "version createreactclass using thought fixed pr version", "d": "5/2018"}, {"body": "sorry maybe misunderstanding reported apologies little context would helpful", "d": "5/2018"}, {"body": "ah shoot yeah somehow behind createreactclass makes sense thought odd could nt find anyone else hit thanks sorry trouble", "d": "5/2018"}, {"body": "problem glad hear", "d": "5/2018"}, {"body": "found preexisting issue pr fix intimately familiar react release cycles likely release want figure work around code time published soon within month wait otherwise might need work around problem", "d": "5/2018"}, {"body": "within month definitely", "d": "5/2018"}, {"body": "awesome thanks much", "d": "5/2018"}, {"body": "fixed react", "d": "5/2018"}, {"body": "warning stack trace point called console nt show stack traces warnings open react source code nodemodules comment part code would actually crash hopefully see stack trace specifically likely coming thirdparty library", "d": "5/2018"}, {"body": "adding following indexjs resolved issue import import import rafpolyfill", "d": "5/2018"}, {"body": "going defer reactdom meant render html according html spec attributes case insensitive mail clients nt respect noncompliant spec intention make reactdom general xml renderer always make htmllike renderer", "d": "5/2018"}, {"body": "reference seems working react webdom ok", "d": "5/2018"}, {"body": "supported react native yet next stable version", "d": "5/2018"}, {"body": "uses internal flag instead", "d": "5/2018"}, {"body": "hey dtinth would much easier us debug nested update count exceeds current nestedupdatelimit could see components involved nested update chain could include name component worked error thrown minifying production build hopefully would probably useless anyways also track component stack get warnings dev data nt available include error message bvaughn could production profiling build maybe way help narrow errors production cross reference timing profiling data error logs", "d": "5/2018"}, {"body": "hello thanks reply component names codemod babel react components include property last resort eg library dumping component function source code might helpful even minified form since seems increment would great know component corresponds component stack case component rendered dom dom hierarchy eg tag name root would also useful us pinpoint problem since also include useful debugging data app dom", "d": "5/2018"}, {"body": "also track component stack get warnings dev data nt available include error message bvaughn could production profiling build maybe way help narrow errors production cross reference timing profiling data error logs sure useful would nt think would want add devonly behavior profiling build profile times purpose build almost fast production callback used narrow cause error maybe callback would nt fired actual render fails render would never committed best might able determine something last time callback fired", "d": "5/2018"}, {"body": "nt think would want add devonly behavior profiling build profile times purpose build almost fast production yeah nt suggesting adding devonly behavior like component stack crossreferencing timestamp profile data error logs using id narrow rendering error occurred looks like would nt really work well nevermind dtinth component names codemod babel react components include displayname property last resort eg library dumping component render function source code might helpful even minified form users nt regress production debug issues include every build would definitely increase bundle sizes slow things", "d": "5/2018"}, {"body": "woops clicked close comment done dumping component render function source code might helpful even minified form imagine would confusing helpful people compiled minified source code would difficult identify cases since nestedupdatecount seems increment previousflushedroot highestpriorityroot would great know component corresponds highestpriorityroot root nt correspond single component think essentially suggesting thing mentioned could include name component worked error thrown run issue component name minified component stack case component rendered dom dom hierarchy eg tag name id class datatestid root would also useful us pinpoint problem since also include useful debugging data app dom able without react right already using error reporting service able read dom include whatever debugging data want case react wo nt unmount application markup still", "d": "5/2018"}, {"body": "users nt regress production debug issues include displayname every build would definitely increase bundle sizes slow things making bit tradeoff including component display name probably adds around app size gzip gain ability introspect app running production value put situation context members team experienced js react sometimes code eg calls dangerous places gets slipped codebase admit tests perfect likely get unanticipated frontend errors production happening unanticipated error production affects small percentage users reliably reproduce compensate better us happens track component caused far prereact react hardest track javascript stack trace provide information us pinpoint problem imagine would confusing helpful people compiled minified source code would difficult identify cases agree illustrating extreme case grep bundle minified source find culprit able without react right already using error reporting service able read dom include whatever debugging data want unfortunately without react telling component dom element corresponds component culprit example box causing nested update loop react could tell us error occurred dom element would helpful", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "expected attribute says normal dom element custom element related web component specs case react assume naming convention passes props attributes", "d": "5/2018"}, {"body": "ok bug part gotten used using classname everything components elements together forgot one could still use class standard elements worries", "d": "5/2018"}, {"body": "end integrating web components valid solution either seems directives nt processed added via innerhtml setattribute way get web component instantiate dynamically add createelement appendreplace child way involves creating ref made much easier work thank appending element dom componentdidmount write publish blog get fully working", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "part optimizations moved using innerhtml true neither react react construct elements dom apis", "d": "5/2018"}, {"body": "apologies edited changed honest know time nt working situation strictly guessing perhaps parsingtranslating dom treating like normal attribute rather passing value second parameter createelement case would nt perhaps bug react part handling changed like said working", "d": "5/2018"}, {"body": "hmm maybe actually bug chrome following spec nt work yet former right syntax according sake backwards compatibility chrome accepts forms though string form deprecated mozilla page yet nt seeing include object property nt work", "d": "5/2018"}, {"body": "chrome bug pen able flip quickly syntax straight string never worked file bug apologies taking time", "d": "5/2018"}, {"body": "problem", "d": "5/2018"}, {"body": "issue react error message coming library called passing library complains something inside store javascript function called definitely defined mistake must somewhere else probably put logs code see reaches function store state much help ca nt debug encourage share full project reach support resources", "d": "5/2018"}, {"body": "tried master think fixed although solution bit gross work need specify whether renderer primary secondary two work", "d": "5/2018"}, {"body": "assume fixed let know", "d": "5/2018"}, {"body": "gaearon issue fixed new updated deps demo result", "d": "5/2018"}, {"body": "gaearon looked renders surface element case calls artrendererupdatecontainer component mounts reactdom commits consumer rendered walks tree pops context provider consumer eventually rendered falls back default value since provider popped seems like popping context provider nt safe child might call secondary renderer primary renderer commits", "d": "5/2018"}, {"body": "acdlite fabric", "d": "5/2018"}, {"body": "gaearon context shared successfully renderers reactdom primary renderer believe reason nt caught test added reactart renders provider inside component managing provider value nt passed renderer boundary example lavrton renders provider outside component change provider rendered child works", "d": "5/2018"}, {"body": "issue reported webpack repo related reactscripts package thats used createreactapp somebody already reported issue repo used bug reports feature requests react", "d": "5/2018"}, {"body": "case likely use react integrity security", "d": "5/2018"}, {"body": "sorry hear react take security seriously use extensively facebook vested interest making sure secure issue reported nt affect react directly way issue indirect dependency part low severity issue according report well sure get resolved reasonable timeframe severity", "d": "5/2018"}, {"body": "also interested making world better making world react better safer beginning practice promoted idea jet house time taken hostile succeeded delighted", "d": "5/2018"}, {"body": "hey thanks writing plan move away naming future part larger set new apis given going happen anyway nt see benefit making change definitely something watch next set apis", "d": "5/2018"}, {"body": "known intentional deviation native event propagation behavior possible may change future see information", "d": "5/2018"}, {"body": "aweary documented nt mention anything events deviating native event bubbling", "d": "5/2018"}, {"body": "cool like world big would boring everyone used thing use issue tracker bugs feature requests close maybe find somebody interested try change mind forumschats cheers", "d": "5/2018"}, {"body": "talk explains nt think bad edit response comment deleted author claimed react bad mixing markup logic", "d": "5/2018"}, {"body": "react also cool lot work effort invested react cool like react react liked following technical support block account due adequate logic cool gaearon convinced use jet houses thanks regards", "d": "5/2018"}, {"body": "sorry hard guess without actually running code", "d": "5/2018"}, {"body": "oops mean close close provide example could run try", "d": "5/2018"}, {"body": "attempt provide example tomorrow unfortunately got time wednesdays thursdays work project moment", "d": "5/2018"}, {"body": "update seem pretty much resolved issue using vizzysvg performance level expecting epiphany strikes yet next step would try implement either context redux lift state management root component possibly using sort namespacing needed would least case redux far able find closing issue", "d": "5/2018"}, {"body": "fixed master", "d": "5/2018"}, {"body": "learned today case right believe make dynamic list elements throw fragment get key warning message bad performance nonstable updates provide example rendering array elements fragment still warn nt keys example maybe misunderstanding saying", "d": "5/2018"}, {"body": "referred believe two divs identical content one fires react warning", "d": "5/2018"}, {"body": "thanks jsfiddle aweary shocked see fragment giving key warnings never seen behavior new since version revisited code able reproduce behavior get key warning array key warning fragment nmain thanks also jsfiddle think exactly problem also clearly person confused post using fragment component accomplish without array syntax without using keys emphasis mine post post return ing array elements problems add key property element avoid react warnings fragments solve problem aweary understanding partly based dan excellent comments issue references idea separate syntax could let react distinguish case keys necessary dynamic lists static lists", "d": "5/2018"}, {"body": "maximum clarity code comparing give key warning give key warning given renderthumbnail returns div without attribute", "d": "5/2018"}, {"body": "reason nmain example nt warn call nt passing array children using argument spread syntax pass item additional argument since spreading would equivalent referring back comments see would nt warn static set children react perspective pass directly like would equivalent react perspective potentially dynamic array case would receive key warning using jsx hard distinction understand track throughout codebase using helper functions check see call handled mapping dynamic children passing array using argument spread pass separate arguments suspect make reconciliation quicker long key children make sense ialexryan", "d": "5/2018"}, {"body": "oh good point missed spread operator jsfiddle decided dark grey text slightly darker grey good idea never know problem take look code sample added code samples blog posts linked talking thanks response", "d": "5/2018"}, {"body": "oh wait think missed bombshell comment understand correctly confirming react wo nt give key warnings fragments fragments semantically assumed static children would take confusion back original post relying expectation avoid major gotcha would assume would explicitly mentioned docs fragments prominently featured warningstyle yellow box instead nt believe mentioned accurate nt see mention distinction announcement blog post docs really anywhere except longclosed github issue thread", "d": "5/2018"}, {"body": "understand correctly confirming react wo nt give key warnings fragments fragments semantically assumed static children correct fragments work elements etc components arrays elements need keyed li elements first second would expect required itemsmap item gt item applies child array elements elements must keyed nt need li elements first second keys required array elements itemsmap item gt accurate nt see mention distinction announcement blog post docs really anywhere except longclosed github issue thread docs link post discusses keys use way use element without changing way write jsx commas keys quotes since nt seem bug going close feel free ask clarifying questions", "d": "5/2018"}, {"body": "ok think narrowing issue thanks much bearing makes sense case keys usefulneeded would involve array point since probably comes operation something like fact produce key warning seems fine confuses also produce key warning seems bad made except said create key warning jsfiddle seems back think likely experience nonstandard thus nt big issue thought figure", "d": "5/2018"}, {"body": "problem using helper functions like would look see passing children", "d": "5/2018"}, {"body": "read mind dug react factories sure enough darn spread operator specialcase factory fragment makes sense thanks much patience clarity", "d": "5/2018"}, {"body": "yes spread operator example intentional apologize jsfiddle coloring looks like whoever made factory thought used spread fragments code situations array know really staticish nt going insertsdeletes done future render clearly state intent", "d": "5/2018"}, {"body": "error component called designer see reasons believe react", "d": "5/2018"}, {"body": "import react react import workplace objectbrowser reactdesignercore import splitpane reactsplitpane import dock reactdock import lodash import binder reactbinding import widgets widgets import widgetrenderer widgetrenderer import toolbar toolbar import objectpropertygrid objectpropertygrid import preview preview import toolbox toolboxtoolbox import modal reactoverlays import modalstyles modalstylesjs import filepickerdialog filepickerdialog let fixedheader props gt return export default class designer extends reactcomponent constructor props super props thisstate data clonedeep propsstateschemaprops amp amp propsstateschemapropsdefaultdata current node propsstateschema snapgrid currentchanged currentnode path currentnode undefined return var parent currentnodeparents var parentnode parentlength parent parents undefined thissetstate current node currentnode parentnode parentnode path path undefined thisstatecurrent amp amp thisstatecurrentpath path addnewitem elname itemtoadd var current thisstatecurrentnode current undefined return reloadschema objectschema var updated thispropsstateschemareset objectschema thispropseditorstateclearhistory thiscurrentchanged updated render var schema thispropsstateschema var editorstate thispropseditorstate", "d": "5/2018"}, {"body": "know issue designerjs nt know happening", "d": "5/2018"}, {"body": "uploaded complete file code designerjs", "d": "5/2018"}, {"body": "gaearon check image please", "d": "5/2018"}, {"body": "state changes put queue react rerender immediately one component may call event handler first calls calls would wasteful start rerendering child work parent rerenders instead react lets call event handlers applies exits browser event handler knowing calls handle hope helps", "d": "5/2018"}, {"body": "also get current state react gets current renderered state right give pending state explained intentional", "d": "5/2018"}, {"body": "thanks lot great explanation", "d": "5/2018"}, {"body": "think might need provide simplified working example jsfiddlecodesandbox property changed rerenders whole video starts component rerender props state change prevent shouldcomponentupdate lifecycle method without seeing code perhaps possible solution store current playback position state move update", "d": "5/2018"}, {"body": "poxrud thanks reply actually ca nt store current position state see code html fetched api happens use use pure jsx propery change working fine video plays stopped suggestions react reconciliation working working jsx using", "d": "5/2018"}, {"body": "using means want render markup react wo nt control makes dangerous react sort reconciliation markup pass component using rerenders markup rerendered scratch need avoid using want dynamically manage state elements react make sure markup passed dynamically updated lastly use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "thanks please give sort example set make sure markup passed html dynamically updated markup passed html see code", "d": "5/2018"}, {"body": "markup something control something dynamically update eg coming another service control could update component updates markup ca nt control user provided wo nt possible", "d": "5/2018"}, {"body": "markup something control something dynamically update eg coming another service control could update component updates work update markup everytime component updates create flicker nt want please provide sort example achieve without flicker understand src changes video rerender nt want rerender case properties lets say height width etc", "d": "5/2018"}, {"body": "testutils simulate module react nt immediately flush updates dom like used version previous think accurate description immediately flush called lifecycle react process rendering works expected update example move call wrap around although still illustrates change behavior", "d": "5/2018"}, {"body": "oh interesting thanks taking look bvaughn case looks like may difference argument called always interpreted like looks like slightly different meaning", "d": "5/2018"}, {"body": "even exactly like sure whether would nt flushed immediately react rendering reentrant means inside lifecycle nothing make react start rendering components react calling lifecycles extra updates scheduled helped fix bunch obscure bugs pretty much hard constraint fiber implementation inconvenient corner cases", "d": "5/2018"}, {"body": "say works expected related breaking change says reactdomrender reactdomunstablerendersubtreeintocontainer return null called inside lifecycle method work around use portals refs happy accept pr rewording bit general rerendering happens lifecycles fired", "d": "5/2018"}, {"body": "think biggest takeaway change log note bit ambiguous nonobvious comes things like", "d": "5/2018"}, {"body": "thanks clarifying gaearon reread said times think got basically call inside callback wo nt work way outside callback rerendering happens lifecycles finished always liked fact able force component rerender understand hard constraint fiber makes little less useful wonder could take callback like", "d": "5/2018"}, {"body": "could elaborate need specifically testing click even initial async render move call next line call render like mentioned assume overlooking use case", "d": "5/2018"}, {"body": "guess time useful using inside one lifecycles already something really supported maybe better approach would warn throw using inside lifecycle going expect", "d": "5/2018"}, {"body": "since simulate testonly api confused call lifecycle would nt expect testonly code exist inside tested components using simulate actual app logic really supported either", "d": "5/2018"}, {"body": "sorry mistake", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "also found problem distressed ask", "d": "5/2018"}, {"body": "put together reproduction demonstrating issue", "d": "5/2018"}, {"body": "meantime please feel free send pr adding trycatch explanation comment", "d": "5/2018"}, {"body": "thanks request danielrob would nice selection state nt jump input nt updated track restore cursor position element nt change render cycle restore selection mainly account case input may moved somewhere else dom could consider relaxing condition always restore selection state exists sure downsides would workaround specific example store update selection range manually using", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "must something related bundler setup tried project generated create react app points exactly error happens console error even coming react coming babel class definition sure specifically causes js stack get lost confused bundler configuration think something needs solved react", "d": "5/2018"}, {"body": "ok thanks", "d": "5/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "gaearon find info community support resources", "d": "5/2018"}, {"body": "ones tried", "d": "5/2018"}, {"body": "folks discord chat friendly able help", "d": "5/2018"}, {"body": "search switch hashrouter provider community support resources find resources related problem", "d": "5/2018"}, {"body": "sounds like enabling really bad user experience strongly recommend even babel plugin automatically adds would much better disabling mangling nt work would look tests see code expecting different code maybe even send fix fb currently include filenames inefficiently currently module names strings production fix probably change ids write tool matches ids back readable names", "d": "5/2018"}, {"body": "cool thanks feedback gaearon elaborate mangling results really bad user experience intuitively affect bundle size added compression top effect rather small", "d": "5/2018"}, {"body": "guess depends good compression ends case measured difference experience mangling still ends significant moreover compression helps network affect parsing time", "d": "5/2018"}, {"body": "measured size think went guess right nonfb scale app sounds good keep parsing time mind well right meaningful bug reports critical fast page loads future switching babel plugin sounds like good solution unless sourcemaps supported component stack", "d": "5/2018"}, {"body": "please create rfc nontrivial behavior change", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "get filename even line number include babel plugin development example default development create react app recommended starter kit", "d": "5/2018"}, {"body": "thanks gaearon know source thing react follow discussions contribute improve great work", "d": "5/2018"}, {"body": "anybody know workaround", "d": "5/2018"}, {"body": "want send fix", "d": "5/2018"}, {"body": "yes take issue send pr", "d": "5/2018"}, {"body": "hey dkrutsko like propose new api react via rfc process find thanks", "d": "5/2018"}, {"body": "get warning passes props including boolean one dom element like fix stop passing props real dom props problem solved hard say without running code example", "d": "5/2018"}, {"body": "exactly happening passing dom element make flexible possible problem solved thanks", "d": "5/2018"}, {"body": "using similar see", "d": "5/2018"}, {"body": "thanks pointing hope production errorboundary ui show hide development mode errorboundary ui show hide problem seeing problem development mode deployed production yet understanding correct", "d": "5/2018"}, {"body": "screen seeing explicitly says bottom appear production show intentionally want make hard accidentally ignore errors error boundary caught display properly offscreen", "d": "5/2018"}, {"body": "version deprecated mean anything tend work one major version time new features developed react right technically nothing prevents using react long need although time might find difficult find packages compatible unless also use older versions always post migration instructions blog react exception react blog post includes information preparing changes also includes links automated scripts codemods migration hope helps", "d": "5/2018"}, {"body": "add regular key value pair object defining component jsx const mycomponent createreactclass initialize thisref ref reactcreateref componentdidmount values initialized available consolelog thisref render return see working example", "d": "5/2018"}, {"body": "see working example work special understanding would clone every instance shares see modification example console output", "d": "5/2018"}, {"body": "ah see special understanding sounds like would really value set object ie would shared well could optionally store refs", "d": "5/2018"}, {"body": "hamlim thanks solution thanks nmain points principal problem use example rather others like think interface necessary createreactclass nt think good solution use handles refs", "d": "5/2018"}, {"body": "dexbol fact nt understand exist nt use class actually syntactical sugar javascript existing prototypebased inheritance react perfect traditional prototype inheritance javascript maybe try traditional prototype inheritance way said might look like following use strict const react require react const inherits require inherits inherits mycomponent reactcomponent moduleexports mycomponent const prototype mycomponentprototype function mycomponent props reactcomponentcall props thisstate thisref reactcreateref prototyperender function return", "d": "5/2018"}, {"body": "pretty sure fixed master", "d": "5/2018"}, {"body": "fixed react", "d": "5/2018"}, {"body": "ca nt need use changed state within setinterval function problem way interval function might still old state even though called guaranteed run right away fact several even batched together time interval function runs could many none calls take look setstate docs perfectly explain also know pass setstate function would help protect async problems need pass second optional function run actually gets called per docs second parameter setstate optional callback function executed setstate completed component rerendered generally recommend using componentdidupdate logic instead hope helps", "d": "5/2018"}, {"body": "think got thanks clarification pretty interesting use case documentation good hard time wrapping head around plugging pieces together might good example officially put somewhere case others kind issue nt even know something wrong close feel free close question validated code post best practice", "d": "5/2018"}, {"body": "close feel free close question validated code post best practice remember clear interval callback", "d": "5/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "official flow types nt support usage", "d": "5/2018"}, {"body": "andrew says motivation reduce allocation intended public api per se would nt rely", "d": "5/2018"}, {"body": "bailout feature intended advanced libraries like relay userfriendly compromise necessary make really fast indeed limited type context change nothing prevents using one bit several fields many", "d": "5/2018"}, {"body": "thanks prompt response maybe concept like selector function redux mapstatetoprops could introduced ie contextconsumer accept selector function memoized well select concerned part context", "d": "5/2018"}, {"body": "intentionally using something like consumers means arbitrary code would run traversal inevitably end slow cool thing bitmask api user code runs per consumer keeps traversal fast regular memoization strategies like build system based selectors top eg although need carefully benchmark ensure making slower", "d": "5/2018"}, {"body": "wow expect instant reply got point arbitrary code traversal though fully convinced shouldcomponentupdate arbitrary code well critical traversal path well still think put selector function level unstableobservedbits better example use shouldcomponentupdate component bailout rerender reactdevtool highlight updates see consumer still flashing use unstableobservedbits bailout clean concern component flashing check awearyreactcopywrite got time cheers", "d": "5/2018"}, {"body": "look awearyreactcopywrite feeling bailout feature unstableobservedbits offers essential context api use case kind universal let people try hard go far use hope give second thought make context api support selector function natively", "d": "5/2018"}, {"body": "applying class four elements whenever mouse enter leave working version", "d": "5/2018"}, {"body": "working sir", "d": "5/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "5/2018"}, {"body": "realized already idea actual context api documentation sorry duplication", "d": "5/2018"}, {"body": "maybe related", "d": "5/2018"}, {"body": "far see", "d": "5/2018"}, {"body": "turned complicated thought add console logs indeed see first spancreating function gets reexecuted interval fires first example rendered component calls starts regular react rerender wo nt anything special block rendering children component calls function create children therefore every rerender render prop new element needs reconciled special logic react handling render component code called component rerendering react anything prevent counts update second example also rendered component calls also starts normal rerender however returns example children always referentially even though something inside react knows go deeper reason would go deeper rather skip components context provider prop changed happened explains second example render prop get called note actually getting bit complicated practice practice react devtools highlight remove first empty text child empty first child provider case childrenasfunction consumer variants refresh setstate mean react rerenders though verify putting console logs happening toplevel component contains updated cases need highlight something indicate currently strategy highlight first closest child dom node means nt work well fragments nodes like context providers may multiple children remove text node example tree closest node component rerenders span cases text node beginning end highlighting even cases even though rerendered text node beginning tree looks like first row want show rerendered find first dom text since nt dom measurement api suppose nt highlight anything ideal hand component renders text node likely expensive anyway second row want show rerendered find empty text node nt highlight anything actually find see highlighted question count updated second example supposed rerendered hunch false positive caused check file issue react devtools sum part confusion caused another part probably false positive react devtools look thanks reporting", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "think seeing difference note first string literal within jsx expression second regular jsx text two things subtly different also still happens html elements like span get around control encoded characters instead storing strings wrap nt control characters ie coming api response need use like", "d": "5/2018"}, {"body": "let elaborate case first use ensure always enough deferred update queue invoke normal button click callback javascript refresh gt consolelog round thisstatecount thisr thissetstate prevstate gt consolelog round prevstate return count prevstatecount function consolelog round thisr thisstatecount render const e performancenow performancenow lt e artificially long execution time return expected callback function interrupt deferred updates trigger imediately unexpected behavior state prevstate function thisstate prevstate digged source code found react update component instance get interrupted event callback state still updated state update queue use since last work commited see call stack beginwork updateclasscomponent updateclassinstance think unexpected behavior devlopers may write code like may get confused neither current visible state screen suggest store computed next state attach see anything else issue please let know gaearon", "d": "5/2018"}, {"body": "issue seems fixed master probably example running master build correct behavior", "d": "5/2018"}, {"body": "\u8fd9\u4e0d\u662f\u4e00\u4e2abug virtual dom virtual dom property disabled still true fire event handle belongs virtual dom", "d": "5/2018"}, {"body": "mouse events manually prevented firing syntheticevent system interactive elements like buttons based props example forces react sync dom internal check using props value dom one event nt firing generally nt really support sort interop setting properties directly dom node well via props one completely either control value via ref entirely stateprops", "d": "5/2018"}, {"body": "since update going assume issue resolved close", "d": "5/2018"}, {"body": "gaearon take", "d": "5/2018"}, {"body": "fixed react", "d": "5/2018"}, {"body": "thanks use case clear nt want omission pr fix welcome", "d": "5/2018"}, {"body": "petegleeson essentially tweak pr enzyme pr lol", "d": "5/2018"}, {"body": "fixed", "d": "5/2018"}, {"body": "appreciate speedy response gaearon jquense would great talk enzyme could use directly rather version", "d": "5/2018"}, {"body": "agree tho conversation enzyme maintainer guy sends prs times practically moment feasible totree behavior different enzes format", "d": "5/2018"}, {"body": "thanks everyone would happy create pr got done quickly", "d": "5/2018"}, {"body": "reproduce however reproduce jsfiddle since dev tools inspects main window aggregate dom nodes frames took long figure noob react internals take look", "d": "5/2018"}, {"body": "someone experience using fiber debugger might want take look seems dom nodes mounted time textarea autofocus attribute set leak dom nodes fibernodes perhaps autofocus happens scheduling work done initial mount nodes see commitmount finalizeinitialchildren", "d": "5/2018"}, {"body": "fixed react", "d": "5/2018"}, {"body": "also wondering necessary experiencing case would break type system code expects array certain values based props actually throws error prop nt supplied example js const state foo array lt const props string string component state foo later throws error expecting populated static getdrivedstatefromprops nextprops const foo objectkeys bar foolength throw new error gurantee foo populated", "d": "5/2018"}, {"body": "case maybe checkbox id checkbox fire onchange event jquense know fix could please explain", "d": "5/2018"}, {"body": "humm see example react work well configure addeventlistener trigger callback bubbling phase still bug capture phase flag set direction propagate event", "d": "5/2018"}, {"body": "think react suspense capabilities released npm", "d": "5/2018"}, {"body": "since nt discussion unsure move forward confident moving forward creating rfc since approach still unclear realize initial post quite long perhaps slightly vague input clarifying questions welcomed", "d": "5/2018"}, {"body": "callreturn package deleted longer applies thanks detailed report though", "d": "5/2018"}, {"body": "likely want feedback though start working replacement use cases appreciate write", "d": "5/2018"}, {"body": "thanks headsup way join discussion would happy believe api area could really strengthen abstractions trying make layout one cases", "d": "5/2018"}, {"body": "following thread reactnavigation issue reactnative issue seems react issue old issues reference ismounted deprecated looks like fixed long time ago confused seems suddenly become problem many react native projects", "d": "5/2018"}, {"body": "likely react native issue case let continue discussion", "d": "5/2018"}, {"body": "hi ca nt get prev state getderivedstatefromprops second param gives empty object always", "d": "5/2018"}, {"body": "sulsummer means component rather getting created", "d": "5/2018"}, {"body": "hi sulsummer issue closed sounds something reporting please file new issue repro steps think found bug react thecodejack mentions please rule fact component recreated iwth fresh", "d": "5/2018"}, {"body": "thanks guys thecodejack bvaughn really new react seems child component created twice least ca nt tell passing data child component via props get done time finally prevented use getderivedstatefromprops", "d": "5/2018"}, {"body": "returning empty object work terms updating state follow code path returning follows cost anything extra ask seems natural natural every time big deal since small detail curious empty object would considered explicit way saying updates necessary", "d": "5/2018"}, {"body": "currently returning empty object pretty much returning would shallow merge empty object properties none proceed normal", "d": "5/2018"}, {"body": "three ones missing issues without pr anything blocking pr feel free make one ping try merge", "d": "5/2018"}, {"body": "problem", "d": "5/2018"}, {"body": "file new issue reproducing case thanks", "d": "5/2018"}, {"body": "fixed react", "d": "5/2018"}, {"body": "tag", "d": "5/2018"}, {"body": "hi acdlite gaearon sorry delay update pr nt well recently start working pr sorry delay", "d": "5/2018"}, {"body": "necessarily looking find npm package update useful identifying unnecessary rerenders", "d": "5/2018"}, {"body": "trysound idea second argument always available possible passing previous props always initialize state passed gdsfp could add necessary check without checking existence understand reasoning without checking existence important consider synthetic typescript snippet sorry nt know flow well enough ts class foo bar bar interface props foo foo interface state foo foo trimmedbar string class extends component static getderivedstatefromprops nextprops props prevstate state null state null prevstate amp amp nextpropsfoo prevstatefoo return null return foo nextpropsfoo trimmedbar nextpropsfoobartrim render return thisstatetrimmedbar fix ts function propstostate props props state return foo propsfoo trimmedbar propsfoobartrim class extends component state propstostate thisprops static getderivedstatefromprops nextprops props prevstate state state null nextpropsfoo prevstatefoo return null return propstostate nextprops render return thisstatetrimmedbar extra cognitive load course exaggeration example talking two places state touched instead one gain pov alternative letting undefinable initializing state whole new worms typescript think actually undefined throughout component time programmer knows window undefined narrow pattern almost thing mount prop updates afaik widespread exception rule significant differences written sure anymore significant differences state initialization derivation uncommon would nt suggest going far recommending people cram everything staterelated however still think relaxing warning worth replace something along lines custom supplied first invocation returns print warning would document indeed missing footgun", "d": "5/2018"}, {"body": "commit causes issue changing line source makes work let target nativeeventtarget nativeeventsrcelement window trying find ways around", "d": "5/2018"}, {"body": "issue thanks leadinglight downgrade react ok", "d": "5/2018"}, {"body": "additional observation might help onchange returns window character typed input field whereas deleting character backspace delete returns htmlinputelement onkeyup returns htmlinputelement", "d": "5/2018"}, {"body": "everyone previous comment sorry nt help us solve issue seeing upgrading higher please file new issue minimal reproducing case extracted project helpful everyone able quickly diagnose fix", "d": "5/2018"}, {"body": "issue gaearon using reactrails expected behavior application render wheel graph graph key component clicking section graph focuses section updates forst key key component happens instead clicking section receive error error minified react error object object key component ends elements instead console logged keys way onclick listener rendering key component keys prop ever show array items like component adding new props instead replacing issue occurs production local tried tracking error best could minified src got", "d": "5/2018"}, {"body": "savybrandt thanks extra info helps ask take screenshot like every call stack frame sorry annoying ie click call stack debugger screenshot argument passed would helpful", "d": "5/2018"}, {"body": "also need know version react using", "d": "5/2018"}, {"body": "full call stack using reactrails version", "d": "5/2018"}, {"body": "version react version come tell", "d": "5/2018"}, {"body": "second frame interesting call seems assume different function really look actual react code published npm example react production commonjs bundle piece code looks like original code calling function defined right bundle calling completely different function prints invariant appreciate could paste larger chunk bundle around second call frame mentioned maybe could help illuminate happened actual function wanted call overall guess bug uglify whatever react rails using minification need reproducing project confirm least need know versions webpack uglify using", "d": "5/2018"}, {"body": "couple blocks rest block contains function call frame function dn e n r function e n var texpirationtime tchild null e ao null n echild n function e var n tref null n e amp amp eref n teffecttag function l e n e n return amp amp e n tstatenode zrcurrent var r nrender return teffecttag e r tmemoizedstate nstate tmemoizedprops nprops amp amp tchild function c e var estatenode tpendingcontext tn e tpendingcontext tpendingcontext tcontext tcontext amp amp tn e tcontext g e tcontainerinfo function e null e amp amp tchild echild void null tchild e tchild var n sn e ependingprops eexpirationtime tchild n nreturn null esibling e esibling n nsibling sn e ependingprops eexpirationtime nreturn nsibling null return tchild function u e switch ttag case c break case rn break case g tstatenodecontainerinfo return null var h eshouldsettextcontent p eusesyncscheduling f eshoulddeprioritizesubtree tpushhostcontext g tpushhostcontainer v nenterhydrationstate nresethydrationstate b ntrytoclaimnexthydratableinstance e cn r function e ememoizedprops function e ememoizedstate var eadoptclassinstance w econstructclassinstance x emountclassinstance k eupdateclassinstance return beginwork function e n texpirationtime texpirationtime gt n return u e switch ttag case null e void var r ttype tpendingprops c kt return c zt c r r c teffecttag object typeof r amp amp null r amp amp function typeof rrender ttag rn r x n l e ttag e r tmemoizedprops tchild case e ttype n tpendingprops r tmemoizedprops mocurrent null n amp amp n r else null n r n e break e r kt r zt r n r teffecttag e tmemoizedprops n tchild return case return rn r void null e tstatenode w tpendingprops x n r r k e n l e r case return c tupdatequeue null r tmemoizedstate xn e null null n r e r oelement c tstatenode null e null echild amp amp chydrate amp amp v teffecttag tchild ao null r n e r tmemoizedstate tchild e case null e amp amp b ttype var tmemoizedprops return r tpendingprops null r amp amp r null r void c null e ememoizedprops null mocurrent null r amp amp r rchildren h r null c amp amp h c amp amp teffecttag e n amp amp p amp amp f r texpirationtime null e tmemoizedprops r tchild e case return null e amp amp b e tpendingprops null e amp amp e tmemoizedprops tmemoizedprops e null case ttag case return tpendingprops mocurrent null amp amp e amp amp ememoizedprops null void null amp amp tmemoizedprops tmemoizedprops r ochildren tstatenode null e ao tstatenode r n tstatenode r n tmemoizedprops tstatenode case return null case e g tstatenodecontainerinfo tpendingprops mocurrent null amp amp e amp amp ememoizedprops null void else null tmemoizedprops e break e null e tchild null n e tmemoizedprops tchild return case e n tpendingprops mocurrent null n amp amp n tmemoizedprops else null n tmemoizedprops n e break e e n tmemoizedprops n tchild return default beginfailedwork function e n switch ttag case rn break case c break default return teffecttag null e tchild null tchild echild amp amp tchild echild texpirationtime texpirationtime gt n u e tfirsteffect null tlasteffect null tchild null e ao null null n echild null n ttag amp amp e tstatenode tmemoizedprops eprops tmemoizedstate estate tchild function en e n function r e eeffecttag var ecreateinstance ecreatetextinstance eappendinitialchild l efinalizeinitialchildren c eprepareupdate epersistence u tgetroothostcontainer h tpophostcontext p tgethostcontext f tpophostcontainer npreparetohydratehostinstance g npreparetohydratehosttextinstance v npophydrationstate void b void void return emutation function b function e n tupdatequeue n amp amp r function e n n amp amp r completework function e n var tpendingprops switch null tmemoizedprops texpirationtime amp amp n tpendingprops null ttag case return null case return en null case return f gt mo gt fo tstatenode dpendingcontext amp amp dcontext dpendingcontext dpendingcontext null null e amp amp null echild v teffecttag amp null case h n u var w ttype null e amp amp null tstatenode var x ememoizedprops k tstatenode c p k c k w x n c b e k w x n eref tref amp amp teffecttag else return null tstatenode void null e p v n e amp amp r else e w n e e x tchild null x xtag xtag e xstatenode else xtag amp amp null xchild xchildreturn x x xchild continue x break null xsibling null xreturn xreturn break e x xreturn xsiblingreturn xreturn x xsibling l e w n amp amp r tstatenode e null tref amp amp teffecttag return null case e amp amp null tstatenode e ememoizedprops else string typeof return null tstatenode void null e u n p v g amp amp r tstatenode e n return null case tmemoizedprops void ttag w e x tstatenode amp amp xreturn null x xtag xtag xtag else xtag wpush xtype else null xchild xchildreturn x x xchild continue null xsibling null xreturn xreturn break e x xreturn xsiblingreturn xreturn x xsibling return x dhandler x dprops w tchild null e echild null n tchild case return ttag null case return null case return null case return f null case default function mn e function n e switch function typeof vn amp amp vn e etag case e var n estatenode function typeof ncomponentwillunmount try nprops ememoizedprops nstate ememoizedstate ncomponentwillunmount catch e break case e break case r estatenode break case l amp amp e function r e var e n null tchild l amp amp ttag e break null tsibling null treturn treturn e return treturn tsiblingreturn treturn tsibling else tchildreturn tchild function e return etag etag etag function e var e void void treturn e switch null void otag case ostatenode break e case ostatenodecontainerinfo break e case ostatenodecontainerinfo break e oreturn ttag ttag r tstatenode v tstatenode else ttag tstatenodecontainerinfo n null tchild tchildreturn tchild continue e break null tsibling null treturn treturn e return treturn ttag amp amp tsiblingreturn treturn tsibling react version using webpack using rails asset pipeline uglifier uglifier version", "d": "5/2018"}, {"body": "find list uglify options using", "d": "5/2018"}, {"body": "also know uses umd commonjs build reactdom", "d": "5/2018"}, {"body": "nt custom options set default listed gt sure umd vs commonjs try find", "d": "5/2018"}, {"body": "version", "d": "5/2018"}, {"body": "uglifier version", "d": "5/2018"}, {"body": "gaearon heads removed uglifier pushed test environment works obviously ca nt push production like least see uglifier indeed issue", "d": "5/2018"}, {"body": "fixed replaced productionrb support thanks help dan", "d": "5/2018"}, {"body": "decided take crack tell react exactly expect setup scenario memory leak pronounced exists class app extends component state toggling false show false togglingon gt thissetstate toggling true togglingoff gt thissetstate toggling false render thisstatetoggling settimeout gt thissetstate show thisstateshow return thisstateshow amp amp letting run chrome bit watched performance tab allocations garbage collections things look like expect eventual garbage collection represent seconds selftoggling every see gc eventually catching reaping detached nodes ran times result also nt seem matter whether text input password", "d": "5/2018"}, {"body": "exact problem right working prosemirror react two fit together well right would nice option render react component synchronously prosemirrormanaged domnode either work asynchronously", "d": "5/2018"}, {"body": "bring prosemirror see stance", "d": "5/2018"}, {"body": "understanding prosemirror stance adding asynchronous rendering would overcomplicate already complicated state update view update logic prosemirror render cycle view framework agnostic needs know specific dom positions synchronously order map dom positions pieces state done part dom updates occur way native browser behavior interpreted correctly according lastknown concept dom patsimm worth workaround successful making react prosemirror play nicely prosemirror nodes children create hoc ref denotes insertion point nodeview renders manually create dom node give prosemirror insert dom node child whichever rootparent node rendering react element listen reactrender callback replace hocrendered node ref artificially created node step bit hack neither prosemirror react seem complain agreed would little easier still possible guarantee synchronous render nested react renders like", "d": "5/2018"}, {"body": "gaearon thanks lot save day", "d": "5/2018"}, {"body": "make sure use plan use react client make markup interactive use method instead use rendertostring server reactdomhydrate client", "d": "5/2018"}, {"body": "inlined host configs probably wo nt much valuable impact anymore", "d": "5/2018"}, {"body": "clearly walked trap apparently mentioned docs benchmarking experiencing performance problems react apps make sure testing minified production build", "d": "5/2018"}, {"body": "thanks gaearon yes appears dev acting intended encountered profiling dev environment concerned reviewed optimizing performance docs", "d": "5/2018"}, {"body": "still unstable mode", "d": "5/2018"}, {"body": "really happy api might something better long term", "d": "5/2018"}, {"body": "resurrecting question question looking docs think quick sentence stating use setstate function would helpful", "d": "5/2018"}, {"body": "want send pr docs probably better idea missing doc page contains edit link bottom", "d": "5/2018"}, {"body": "yup getting screenshot would love contribute project wiki", "d": "5/2018"}, {"body": "maybe nice problem think reality still using", "d": "5/2018"}, {"body": "andrastothtw found older version react included externally aliased webpack", "d": "5/2018"}, {"body": "people still problem even though find older version try removing folder installing packages", "d": "5/2018"}, {"body": "message clear think might mixed default named imports use", "d": "5/2018"}, {"body": "mean complains directly tag", "d": "5/2018"}, {"body": "trysound course made stupid error bug reports maybe know react making bug reports asked help somewhere instead cleared comments people nt think wrote sorry taking unnecessary time space thank trysound answers", "d": "5/2018"}, {"body": "update state value please help thissetstate entityarray resultentities gt consolelog thisstateentityarray entityarray", "d": "5/2018"}, {"body": "problem using portal would like attach ref calback children portal currently impossible bug", "d": "5/2018"}, {"body": "pleasantly surprised react correctly avoids firing events ancestors moving mouse portal host content simulating nonportal behavior nice looks like react nt fix focusblur think ideally would quite useful able treat portals exactly like child means event caused moving focus portal would nt bubble portal ancestors think full list events need special handling might eg update think latter bit nt true since react always uses hood bubble parents perhaps case also pointer drag events consider", "d": "5/2018"}, {"body": "sent pr think approach could use little refinement believe covers edge cases send value attribute serverside password inputs hydrate value property clientside set update value attribute clientside rendering respect new value property passwords user interacts password hydration", "d": "5/2018"}, {"body": "magicmark last commit fix issue since tests seem pass make pr", "d": "5/2018"}, {"body": "robgietema pr", "d": "5/2018"}, {"body": "currently two react renderers used time way described exception sort exists intend support cross render portals yet built reason fails mentioned container types different expects dom element eg children appended using expects wrapper object array adds children calling think possible support better way see pr", "d": "5/2018"}, {"body": "adding bit information examples based ones hyperknot fritzc problem google translate replaces text nodes tags containing translations react keeps references text nodes longer dom tree react throws following cases text node conditionally rendered child parent react calls text node removed throws longer child conditionally rendered text node child parent react nt throw node text node conditionally rendered react calls node inserted throws long child js case condition amp amp welcome something nt throw condition amp amp welcome case condition amp amp something welcome workaround avoid errors invalidating conditions easiest workaround wrap text nodes nodes referenced react stay dom tree even though contents replaced tags js workaround case condition amp amp welcome something workaround case condition amp amp something welcome", "d": "5/2018"}, {"body": "using react still experiencing problem callback setstate access old state", "d": "5/2018"}, {"body": "also experiencing setstate callback nt work expected reopen", "d": "5/2018"}, {"body": "see solution", "d": "5/2018"}, {"body": "new react still learning ropes surprised controlled components allow nulls coming sql background fundamental concept small database often unused field store empty string value nt problem table millions records record occupies drive space millions single empty string bytes really thus increasing drive space degrading performance another example averages sums aggregate calculations part calculation query calculates accurate workaround shortcoming react created shadow property flags fields null logic commit time use null empty fields marked shadow properties nullable point nt value meaning many contexts especially backend datastore supports nulls benefits greatly use", "d": "5/2018"}, {"body": "running similar scenarios described api returns object null property values looking go solution ryannerd proposing nt feel right alternatively change input change setstate call converts back default ideal scenario may enough avoid breaking existing projects would possible perhaps attribute allowed specify input controlled regardless value new react know little internals throwing something", "d": "5/2018"}, {"body": "understand sophiebits concern changing react suddenly start treating legitimate value controlled components may impact react like ernestopye suggestion using propertyattribute control would let developers optin controls support feature perhaps future version react requiring", "d": "5/2018"}, {"body": "dalhorinek solution ended going case async componentdidmount modified like", "d": "5/2018"}, {"body": "trueadm regarding comment example way achieve without lets say component nt know type children receive want attach wrap capture clicks related children code example class externalclick extends reactcomponent state clickedoutside false", "d": "5/2018"}, {"body": "kind api provide callback ref children arguments js class externalclick extends reactcomponent state clickedoutside false", "d": "5/2018"}, {"body": "trysound thanks yeah thought option think ideal user perspective would nt want force user use api though benefit approach user decide exactly node targeted within child component think nice extra feature option core implementation", "d": "5/2018"}, {"body": "gaearon sorry still new ssr wondering approach still work react render different things server client need update dom style ssr ssr height nt know screen height client want update based real screen height said height tried style keeps unchanged wrap settimeout gt thissetstate hasmounted true seconds still nt work change works means components mounted via never update", "d": "5/2018"}, {"body": "hi seem issue updates related libs", "d": "5/2018"}, {"body": "updates would issue read discussion see need reproducing case", "d": "5/2018"}, {"body": "seems really unintuitive react calls reality catching context scenario causing issues us added intelligent error boundaries app want start using boundary handle api error throwing hit api error bubbles nearest error boundary handled like error unfortunately dev causes redbox appear since dev environment complex couple api calls pretty regularly fail redbox appearing couple seconds every page load extremely frustrating", "d": "5/2018"}, {"body": "actually rather intuitive name catch error produced one descendants api actually producing errors defined application error state given certain api call results error boundary red box happening much dev workaround could set dev env var basically suspend error throwing specific api calls routinely falsely fail dev", "d": "5/2018"}, {"body": "hey wuweiweiwu absolutely zero obligation make headway wanted follow see questions hit snags blocked making headway worries check three weeks", "d": "5/2018"}, {"body": "course ive taking time get familiar codebase progress soon thanks", "d": "5/2018"}, {"body": "please make option disable behavior want use performance compatibility switch get duplicate error console", "d": "5/2018"}, {"body": "cvarisco problem figure problem", "d": "5/2018"}, {"body": "updating version react solve issue probably related env sorry man", "d": "5/2018"}, {"body": "problem", "d": "5/2018"}, {"body": "typescript users noticed typescript complains pass empty string value getting around passing renders hope helps", "d": "5/2018"}, {"body": "working version facing issue case shortcut ctrlv seems like jquery issue", "d": "5/2018"}, {"body": "able fix js const getref ref gt ref refdefaultvalue demo react jsfiddle", "d": "5/2018"}, {"body": "interesting cases mentioned get curious part possible synchronizing value attribute messing value property reported safari clearing value wonder removing attribute syncing local build would alleviate problem guess race browser react ca nt really reason looks like dig bit", "d": "5/2018"}, {"body": "nhunzaker click clear chrome reset value empty string safari reset value initial value setting empty string force safari reset value empty string issue reproduced without react html vanilla js specifics safari", "d": "5/2018"}, {"body": "problem link give help gaearon", "d": "5/2018"}, {"body": "nhunzaker believe fixing uncontrolled inputs example controlled one validation still firing", "d": "5/2018"}, {"body": "ah correct thank send pr shortly", "d": "5/2018"}, {"body": "sent new pr start checking list browsers test pr description", "d": "5/2018"}, {"body": "merged issue next release thanks test case super helpful", "d": "5/2018"}, {"body": "thank nhunzaker enormously fast solution", "d": "5/2018"}, {"body": "hello guys similar issue indexjs used issue resolved", "d": "5/2018"}, {"body": "eliseumds thats fine third party ads library might adding multiple dom nodes adding dom attributes etc application way knowing beforehand possible markup rendered server side scsherwood luck facing exact issue ads library modifies dom react client side hydration react fine react goes removes dom nodes altogether nt want wait till go actually render ads dom nodes freaking slow think way tell react lots use cases real world applications requirement", "d": "5/2018"}, {"body": "another vote option", "d": "5/2018"}, {"body": "alternative solution", "d": "5/2018"}, {"body": "solution find valid workaround specific usecase link seems dead unfortunately exactly specific issueconditions hope help", "d": "5/2018"}, {"body": "demanzonderjas need break conditions break one enough eg remove hover rule break condition remove adjacent sibling rule break condition restructure dom around element break condition", "d": "5/2018"}, {"body": "hi greeting chromium team ran across bug webcompat work involving react filed get underlying issue chromium fixed glad report tkent fixed onwards modifying defaultvalue chrome android cause ui refresh", "d": "5/2018"}, {"body": "small update also landed patch webkit fix issue safari ios chrome ios however insight change would make release", "d": "5/2018"}, {"body": "rough fiddle multiple items err mean codesandbox", "d": "5/2018"}, {"body": "update state value please help thissetstate entityarray resultentities gt consolelog thisstateentityarray entityarray", "d": "5/2018"}, {"body": "try instead casts boolean falsey false everything else true works like ternary operator", "d": "5/2018"}, {"body": "going close suspense api designed exactly purpose merged master going available usable later year need keep issue open initial solution codebase keep iterating fully ready read react blog", "d": "5/2018"}, {"body": "think particular warning anymore react instead detect development builds react devtools gaearon project open reintroducing console warning use electron without react devtools nt bundle prod build found development build react used long time without warning", "d": "5/2018"}, {"body": "using library requires html accept react component documentation explicitly says use return value way callback work good way handle suppose could create promise return future value promise add callback complete promise callback would work would create possibility deadlock", "d": "5/2018"}, {"body": "super unpredictable confusing ran suggest least warn updates know problematic go background backgroundsize b background c backgroundsize b warn backgroundsize overridden backgroundsize changes time nt warn property shorthands know whether problematic property enumeration order", "d": "5/2018"}, {"body": "marking good first issue let add devonly warning per comment think good place begin investigating would like take please comment nt two people working", "d": "5/2018"}, {"body": "sophiebits happy work one", "d": "5/2018"}, {"body": "supertinou", "d": "5/2018"}, {"body": "problem cc dvajs antdesign sorrycc related plain error uncaught typeerror elemnodenametolowercase function shouldusechangeevent objectextractevents extractevents jsx const formfields input text title \u8282\u70b9\u540d\u79f0 key nodename required true workaround avoid naming keyword js const formfields form input namenodename breaks onsubmit event handling input text title \u8282\u70b9\u540d\u79f0 key nodenamefix required true function toeditmodel obj const ret clonedeep obj nodename foreach k gt const v ret k ret v return ret function fromeditmodel obj const ret clonedeep obj nodename foreach k gt const v ret ret k v return ret", "d": "5/2018"}, {"body": "tried works thanks much gaearon display line numbers react render errors answer question every react beginner tutorial shown error message", "d": "5/2018"}, {"body": "well recommend using create react app beginner tutorials including website", "d": "5/2018"}, {"body": "problem trying get width dropdown menu order put header width base email length inside componendidmount getting slightly different width could use settimeout nt feel comfortable code", "d": "5/2018"}, {"body": "gaearon deprecated could deal apimethod want call children mounting using api sequence deepest child child parent need sequence parent child deepest child", "d": "5/2018"}, {"body": "please explain detail need kind bookkeeping move logic constructor effectively componentwillmount nearly equivalent constructor side effects supported though hard say without seeing actually trying", "d": "5/2018"}, {"body": "gaearon thanks advice use works case parent component make api request get path restapi server parents children mounting know path restapi anyway fixed problem", "d": "5/2018"}, {"body": "sat may yozhezhi notifications githubcom wrote r gaearon thanks advice use constructor cit works case issuer employer identification number ein r c component make rgetbaseurl api request get path restapi serverc parents children mounting know path restapi anyway fixed problem receiving rthis subscribed threadcrc reply email directly view github mute thread rr sent gmail mobile", "d": "5/2018"}, {"body": "yozhezhi understand need rely order though calculate paths pass props use context want pass explicitly", "d": "5/2018"}, {"body": "hello gaearon actually encountered issue could deal apimethod want call children mounting using componentdidmount api sequence deepest child child parent need sequence parent child deepest child yozhezhi mentioned want sequence however difference issue api related need instead implementing doubleclick ads simplified structure would pagecomp want setup general config first defineslot issue available config setup stuff suggestion thank advance", "d": "5/2018"}, {"body": "handlechange index event const name value eventtarget const list concat thisstatesomearray list index name value thissetstate somearray list use handler nt forget name thisstatesomearraymap item index gt return onchange thishandlechangebind index wrote mobile sorry typo", "d": "5/2018"}, {"body": "sophiebits issue reopened tutorial series accessible data tables fully compliant wcag standards makes mention elements examples look examples showing prepare tables irregular multilevel headers see use andor actually becomes hindrance making tables fully accessible please please consider reevaluating warning", "d": "5/2018"}, {"body": "strange issue big forms rendering state dropdowns check populating dropdowns value exist exist update child dropdown right values store changements variable componentdidmount state update dropdown stored variable cause infinite loop", "d": "5/2018"}, {"body": "see code sample cause infinite loop assuming state change checks setstate inside componentwillupdate setstate inside componentdidupdate setstate inside render usually accidental setstate inside getsnapshotbeforeupdate make sure nt see infinite loop", "d": "5/2018"}, {"body": "also facing similar issue mikkoh passing parent function props called button inside child component going infinite loop handlesomething value thissetstate something value render return calling thispropsoncallback button inside child help", "d": "5/2018"}, {"body": "depends exactly calling thisprropsoncallback inside button could provide information", "d": "5/2018"}, {"body": "parent component render", "d": "5/2018"}, {"body": "nt call init within onclick declaration since know mrecord within parent could bind initmodal inside parent constructor", "d": "5/2018"}, {"body": "multiple elements different values nt know mrecord parent figured issue instead", "d": "5/2018"}, {"body": "use react native flex radio button inside loop", "d": "5/2018"}, {"body": "probablyup thank pointer struggled ssr site days attach scroll event able fire works", "d": "5/2018"}, {"body": "tomitrescak ever figure seeing behavior windows browsers works macos browsers", "d": "5/2018"}, {"body": "false alarm event handler prior reacts", "d": "5/2018"}, {"body": "workaround", "d": "5/2018"}, {"body": "investigated issue seems chrome edge firing mouseleave removed dom nodes correct according ui events spec event target eg target element removed dom mouse events sequence remaining events sequence must fired element filed bugs firefox safari incorrect behavior", "d": "5/2018"}, {"body": "mnpenner evpozdniakov validation messages things want wait stop typing use debounce event handler instead waiting onblur", "d": "5/2018"}, {"body": "nt high priority onchange firing frequently rarely causes problems causing problems app", "d": "5/2018"}, {"body": "sophiebits sorry accidentally clicked x degrade performance filtering operations server callbacks used change event handlers approach shown fine workaround uncontrolled native inputs nt map well react controlled inputs seems like thread tried develop pr found internals bit complex maybe engineer team could make quicker work much better description real issue imo", "d": "5/2018"}, {"body": "longer appears issue", "d": "5/2018"}, {"body": "gaearon sure hear frequently enough guys great job appreciate work", "d": "5/2018"}, {"body": "months ago gave talk jsconf iceland describes upcoming async rendering features react see second part clientside data fetching acdlite gave talk concepts apply enable asynchronously waiting data server react components progressively flushing markup ready hope enjoy watching talks think year might able close issue official strategy", "d": "5/2018"}, {"body": "new change try according chrome stops autoplay video nt muted property", "d": "5/2018"}, {"body": "would nt easier use key mirror following way instead", "d": "5/2018"}, {"body": "see comment june answer question keymirror nt never supported api react going lock conversation reduce noise", "d": "5/2018"}, {"body": "could ask saw snippet many sources nt make sense would use", "d": "5/2018"}, {"body": "think react internal use instead processenvnodeenv get statically replaced therefore uglify step completely remove portion code helps making lighter prod bundle", "d": "5/2018"}, {"body": "also problem radio firing radios whether selected radio value changed contrary fires though also works change input type", "d": "5/2018"}, {"body": "problem please post new issue impossible keep track old closed issues", "d": "5/2018"}, {"body": "many properties supported quotes one different inconsistent", "d": "5/2018"}, {"body": "please disregard reason finally seeing errors styles used dash camel case standard", "d": "5/2018"}, {"body": "warning since react one gaearon first prs", "d": "5/2018"}, {"body": "use standard way tools associate data element specifically use utility saves restores form data form elements labeled key problem could solved entirely using reactbased tools react standard interface dom standard dataset support", "d": "5/2018"}, {"body": "klarnaui team interesting hack deal issue exploiting event pseudo class described article used hack applications works fine could test chrome try come shim using technique generic", "d": "5/2018"}, {"body": "update issue", "d": "5/2018"}, {"body": "sophiebits posted tibbus request first class issue incidentally roads seem lead back issue searching area issue seems point comment november longer exists seems understandable react predict case simply places cursor end would ideal best practice overcome desired change value onchange tried many solutions posted avail perhaps due changes react brings also found workarounds setting cursor position manually conflict react perhaps renders long even resetting cursor position next tick causes noticeable cursor jump", "d": "5/2018"}]