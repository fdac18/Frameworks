[{"title": "change config rollupbuildjs set sourcemap ture build error", "body": "sourcemap likely incorrect plugin used transform files nt generate sourcemap transformation consult plugin documentation help", "num": "13292", "d": "7/2018"}, {"title": "object nt support property method remove", "body": "facing following issue react web application debugged code found function dispose settimeout function wrapper settimeout function return wrapperremove unmountdelay throwing error line return wrapperremove unable change code react library hint resolve following problem", "num": "13291", "d": "7/2018"}, {"title": "bug flexbasis style property converts numericvalue pixelsvalue default", "body": "current behaviour output conversion happening even provide output expected behaviour output since valid cssvalue prop", "num": "13290", "d": "7/2018"}, {"title": "phpdesktop autofill onchange event working", "body": "", "num": "13289", "d": "7/2018"}, {"title": "setting rendering mode component reactart", "body": "want request feature report bug feature current behavior canvas mode svg mode used document time expected behavior two components modes used document time currently developers set one rending mode globally reactart using module way use canvas mode svg mode document together hand internally used provides way use modes together directly importing corresponding modules eg svgjs svg mode canvasjs canvas mode lib would like suggest way set rendering mode per instance component new property feature makes canvas mode svg mode used together document like following javascript const surface group shape require reactart class testcomponent extends reactcomponent render return property set works canvas mode compatibility made pr feature show work use check feature fixture pr feel free discuss feature", "num": "13288", "d": "7/2018"}, {"title": "using server side js classes react app", "body": "sensible way include use classes run nodejs server react app tried adding symlink source directory server code attempt directly reference node js files containing classes nodejs server side code uses instead get errors like domainmodel contain export named util guess caused mixing two syntaxes sensible way achieve two code bases single repo nt care difference happy use either tried converting server code files react nt seem recognise honest staggered difficult found share code written language ca nt possibly hard last resort tried yet try using mjs files server symlink individually appear react code base change file extension js crazy", "num": "13287", "d": "7/2018"}, {"title": "discussion synchronous state management async react", "body": "react team put fair amount info upcoming async react concepts including time sliced rendering suspense also contact various state management library teams redux mobx apollo give us early headsup libraries might need change work correctly async react point personally feel like still partial understanding types changes needed quoting discussion dan best understanding problems reactredux faces trying work async react react timeslicing means possible browser events occur slices update work react might half component tree diff calculation done pause let browser handle events something else might happen time like redux action dispatched could cause different parts component tree read different values store known tearing rather components rendering based store contents diff calculation timeslicing react also ability set aside partiallycompleted tree diffs higher priority update occurs middle would fully calculate apply changes higherpriority change like textbox keystroke go back partiallycalculated lowpri diff modify based completed highpri update finish calculating applying lowpri diff words react ability reorder queued updates based priority also start calculating lowpri updates soon queued redux works box dispatch dataloaded action textupdated action data load causes new store state right away ui eventually look right sequence calculating applying updates optimal redux pushed state updates react order came also relevant discussion twitter swyx anything async react absorbs platform tricky parts state mgmt accurately creates priority queue ui interactions pushes async deps whatever cache lib people end using haha guess im eagerly taking granted danabramov yeah best desired experience needs control apply updates version state render lib wants missing although could work getting deoptimized sync mode mweststrate inspiration abstract write complete overview conceptual operations need supported fully support async fork replay changes made forks suffices hints conflicts resolution danabramov paging acdlite currently working make relay work danabramov think main idea either thing meant ui state changes interactions need way route needs provide reducer like data cache case storage fine immutable danabramov third option mutable data cache relay end means deopts sync mode cases sebmarkbage downstream recommendations first principles first principles need able read consistent old versions parent passes data child needs able read version parent passed even changed later sebmarkbage another first principle need able make edits old versions also make edit latest version rebase danabramov would without letting react manage state nt explicitly tell libs time rebase mweststrate would need kind hooks react tells want fork rebase prop phrase deopts sync mode explained brian state updates scheduled componentdidmount componentdidupdate processed synchronously flushed user sees ui update important certain use cases eg positioning tooltip measuring rendered dom element case describing means users application never even see temporary stale value react process new value synchronously yielding might sound like good thing rerender includes lot components slow reason might impact frame rate cause application feel unresponsive referring say createsubscription deopts synchronous rendering mode cases also andrew commented learned work making relay interop async react share soon finally related discussion point would particularly appreciate info exactly constraints normallysynchronous state management lib like redux mobx needs comply order work correctly async react behavior suggestions possible implementations would also extremely beneficial could come demo apps specifically demonstrate problematic interactions async react synchronous state management logic use points reference ensuring new versions libraries work correctly going forward paging gaearon acdlite bvaughn timdorr jimbolla cellog mweststrate peggyrayzis jbaxleyiii thoughts participation", "num": "13286", "d": "7/2018"}, {"title": "question rendering react internal attributes possible browser environment", "body": "option pass reactdomrender order extra dom attributes react uses internally datareactroot serializing dom gives result calling reactdomserverrendertostring thanks", "num": "13283", "d": "7/2018"}, {"title": "failed execute insertbefore node", "body": "want request feature report bug bug shure bug code anything else got next error message client logs nt use library manipulate dom unfortunatly ca nt figure part code throw failed execute insertbefore node node new node inserted child node appreciate advices possible sollution versions react reactdom", "num": "13278", "d": "7/2018"}, {"title": "macbook pro ios simulators nt connect bundler", "body": "want request feature report bug bug current behavior macbook pro installed requirements react native latest xcode node watchman reactnativecli upon running even brand new app get bundle url present error running physical ipad works android emulators current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example complete process expected behavior ios simulators connect metro bundler versions react browser os affected issue work previous versions react react native macos process works macbook pro without issue", "num": "13277", "d": "7/2018"}, {"title": "reactdomserverrendertostaticmarkup fatals nodeenv set production", "body": "want request feature report bug reporting bug current behavior main issue exception get thrown try call reactdomserverrendertostaticmarkup nodeenv set production reactdebugcurrentframegetcurrentstack getstackaddendum typeerror set property getcurrentstack undefined setcurrentdebugstack reactdomserverrendererread objectrendertostaticmarkup objectimportsserverstaticwriterjs webpackrequire rendeconfigfeenvironmenttargetsjsonmoduleexportslocalapi object modulecompile objectmoduleextensionsjs moduleload error command failed node usersalpjordocumentscoderenderendeclientbuildstaticwriterjs checkexecsyncerror objectexecfilesync asyncserieshookeval callasync eval create asyncserieshooklazycompilehook callasync emitrecordserr compileremitrecords emitassetserr hooksafteremitcallasyncerr asyncserieshookeval callasync eval create asyncserieshooklazycompilehook callasync asynclibforeacherr done fsreqwraponcomplete long change nodeenv anything production things work fine prod happens use repo provided reproduce error issue seems stem reactdebugcurrentframe defined production yet reactdomserver tries access nodeenv prod error happens right break reactdomserver renders script run nodeenv prod hack reactdomserverrenderstaticmarkup nt thrown called nodeenv production const newenv objectcreate processenv isproduction newenvnodeenv dev triggering lines staticwriterjs fswritefilesync pathjoin dist indexhtml n reactdomserverrendertostaticmarkup reactcreateelement rendeindex javascript js css css fswritefilesync pathjoin dist manifesthtml n reactdomserverrendertostaticmarkup reactcreateelement rendemanifest see issue chinese seems new react current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior would expect able call reactdomserverrendertostaticmarkup nodeenv production work turn react classes html string document versions react browser os affected issue work previous versions react think new", "num": "13276", "d": "7/2018"}, {"title": "conditionally rendered inputs pass values eachother", "body": "want request feature report bug report bug current behavior inputs conditionally swap another input value first field passed newly rendered input seemingly overridden custom prop nt seem though changing affect nothing seems change behavior besides wrapping secondarily rendered input aditional div tag current behavior bug please provide steps reproduce possible minimal demo problem see fix expected behavior newly rendered input completely independent rendered value first input versions react browser os affected issue work previous versions react react version tested previous versions", "num": "13275", "d": "7/2018"}, {"title": "question bind work update state setstate", "body": "tell beforehand know lot questions setstate work stackoverflow read however solve problem believe update state setstate want update cardmodalopen state close modal add bind still work modal opened click card component however setstate cardmodalopen false closemodal function still true even render method called someone please explain wrong code indexjs import react component react import button card image header modal form input semanticuireact class app extends reactcomponent state modaldetailjs import react component react import button card image header modal form input semanticuireact class detailmodal extends component render export default detailmodal", "num": "13273", "d": "7/2018"}, {"title": "add esm build reactis", "body": "want request feature report bug feature current behavior unable import individual modules package expected behavior context issue arose trying make work see pr evidently nt allow importexport esm enable tree shaking capabilities understanding issue following comment tried solving totally failed realised anything esm head creating issue see follows", "num": "13272", "d": "7/2018"}, {"title": "versions reactaddonstestutils appear deleted npm registry", "body": "would like test reactredux react nt possible atm older versions reactaddonstestutils needed enzyme missing npm npm err code npm err found reactaddontestutils versions list among others", "num": "13268", "d": "7/2018"}, {"title": "extend reacttestrenderer inline external css", "body": "currently looking testing jest reacttestrenderer wondering reacttestrenderer could extended make inline external css creating snapshots snapshottestiong components great optionally inlining css snapshottesting would even better", "num": "13266", "d": "7/2018"}, {"title": "constructor call fired try dispatch action navbar component", "body": "want request feature report bug yes current behavior current behavior try dispatch action navbar component route components abc xyz entry constructor call firing results resetting components initial state expected behavior expected behavior dispatch action form navbar component versions react browser os affected issue work previous versions react behavior react versions using google chrome mac os", "num": "13263", "d": "7/2018"}, {"title": "uncaught referenceerror reactdomserver defined", "body": "hello everyone work java web project using react jquery render dynamic web pages wanted use function reactdomserverrendertostaticmarkup element retrieve html nodes related html element receive error uncaught referenceerror reactdomserver defined also searched net find cdn reactdomserver correct error errors occur sample code", "num": "13262", "d": "7/2018"}, {"title": "react classname reconciliation problem classnames updated render despite changing", "body": "want request feature report bug report bug current behavior hi come across looks like bug react reconciliation rendering browser existing version component rendered server appears happen react reactdom tried display behaviour whereas react amp reactdom seem work expected take simple rather contrived component example headerjs javascript import react react export default props gt const classes return propsname server side render like javascript import rendertostring react import header header rendertostring get something like html leonardo later browser javascript import reactdom reactdom import header header const mount documentgetelementbyid themount reactdomrender mount component updates html donatello note class value changed despite driven prop content updated incorrect expected behavior would expect see following render call browser html donatello versions react browser os affected issue work previous versions react replicate multiple versions react reactdom however see expected behaviour", "num": "13260", "d": "7/2018"}, {"title": "void elements contain empty fragments", "body": "want request feature report bug sure possibly either possibly neither think ok current behavior intended current behavior reactdom throws error rendering contains empty fragment child current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior might expected code created fragments instead would return fragment empty work around fixed removed special case returned empty fragments instead worked many cases one think code better distinguish void regular elements requesting change react posting case desired versions react browser os affected issue work previous versions react seems happen well using arrays instead fragments", "num": "13259", "d": "7/2018"}, {"title": "second argument getderivedstatefromprops lifecycle", "body": "earlier find problem react demo second argument gdsfp behaves like nextstate previous issue get answer checked react documentation gdsfp two arguments props state source code makes wonder like prevstate", "num": "13258", "d": "7/2018"}, {"title": "render single react component instead complete application server", "body": "went many articles server side rendering react following common server route renders complete html page div wraps root react component like traditional react code also includes reference bundlejs called browser skeleton loaded view rerenders javascript functionality approach always leads download whole frontend app one go way selectively render react components divs mean say example graph gives graph component table gives table component etc embed react components preexisting webapp response routes smaller components instead whole outer root component know react embedded web apps case client side rendering wondering thing achieved server side rendering thanks", "num": "13257", "d": "7/2018"}, {"title": "bug style undefined setvalueforstyles edge", "body": "current behavior minimal repro viewed issue reproduced react using edge windows tested previous framework browser versions react component rendering generates following errors unable set property width undefined null reference error occurred one react components created app div created app svg created app app edge expected behavior maybe nothing needs change html elements nt valid user error right issue could enough document others bug certainly obvious error message unrelated fact elements using different namespaces fact invalid currently place", "num": "13256", "d": "7/2018"}, {"title": "getderivedstatefromprops lifecycle abnormality", "body": "recently found problem react demo setstate second argument lifecycle prevstate actually like nextstate reactdom version", "num": "13255", "d": "7/2018"}, {"title": "onpaste preventing eventpreventdefault", "body": "hello guys trying prevent user paste value input preventdefault actually working value still pasted field someone help code", "num": "13252", "d": "7/2018"}, {"title": "getting ssr work react context api", "body": "basically module reads client data server side render supposed provide data rendertostring data found client renders would want use global express route server service looks like last least provider problem seems set data function fine use component seems contain nothing contain data passed provider context api worked beautifully need client side seems failing server side reactreactdom originally posted", "num": "13251", "d": "7/2018"}, {"title": "build production without using serviceworker", "body": "due ongoing problems react applications built using createreactapp working packaged versions electron see electronelectron trying find build production versions react application without using service worker possible", "num": "13246", "d": "7/2018"}, {"title": "grid display handle flexible lengths", "body": "looks like react ignores fr grid flexible length attribute middle row fill page top bottom row", "num": "13245", "d": "7/2018"}, {"title": "react script rendering ie", "body": "bfr undefined syntax error", "num": "13243", "d": "7/2018"}, {"title": "react state change try change immuable way calling setstate", "body": "hi got issu code state mutate changing copy immuable way object state could happen changing state immuable way setstate take effect either thak helping", "num": "13239", "d": "7/2018"}, {"title": "using keyboard events impedes media recordings", "body": "want request feature report bug bug current behavior attaching event handler window document body anything else seems fire keyboard events startstop recording recordings trimmed beginning current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example codesandbox use web audio api seems hosted app github pages access source code repository steps click start recording say word click play audio file problem using arrow keys use left arrow key start recording say word use right arrow key stop recording play audio file beginning speech trimmed note nt happen every time seems may depend word pronounced french following fake words induce problem nt know word causes problem english expected behavior recordings whether use arrow keys buttons start recording versions react browser os affected issue work previous versions react sample provided version originally face issue project using version working windows chrome", "num": "13238", "d": "7/2018"}, {"title": "single node hydration", "body": "far could see way force hydration node somewhere tree right hydrate react instance chances hydrate specific dom node insert existing react instance much easier case portal", "num": "13229", "d": "7/2018"}, {"title": "rerender child component", "body": "load child send data parent component set state passed backbutton child backbutton child return props back parent clicked parent set state based return data pass back load child component problem couple clicks works fine stops rerendering load child component parent logs shows receiving data backbutton child somehow show logs load parent class app extends component constructor props super props thisstate loaddirs backdirs getload info gt thissetstate loaddirs info goback instruct gt thissetstate backdirs instruct gt consolelog thisstatebackdirs render return backbutton child class backbutton extends component constructor props dirs super props dirs export default backbutton load child", "num": "13228", "d": "7/2018"}, {"title": "using context control user logged true false", "body": "want request feature report bug using context implement user login log feature getting following error current behavior warning context consumer rendered multiple children child nt function context consumer expects single child function pass function make sure trailing leading whitespace around current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior want change slide menu either log log link another page menu also tried using ternary work either menu get word change link versions react browser os affected issue work previous versions react using react react context api noticing though context robust enough control state passing render could straightforward esp documentation see code import react component fragment react import menucss import link reactrouterdom import searchdata searchdatacontext searchdata class menu extends component constructor props super props thisuserauthentication thisuserauthenticationbind export default menu", "num": "13226", "d": "7/2018"}, {"title": "seal prevent extensions pooled events", "body": "going revert reverted confusing see proxies console warning worth debugging impediment future consider sealing preventing extensions pooled events getting rid pooling altogether would breaking change", "num": "13224", "d": "7/2018"}, {"title": "identify different instances react component performance measures", "body": "want request feature report bug feature fiberdebugid also part performance measure label along component namedisplayname distinguishtrack multiple instances react component performance measures please let know way already available achieve", "num": "13223", "d": "7/2018"}, {"title": "select multiple scroll selected item items", "body": "bug react could set value defaultvalue selected element scrolled view react work", "num": "13222", "d": "7/2018"}, {"title": "discuss ssr put render server", "body": "code address hi found react render differently browser server side rendered server side insert code snippet could anybody please tell benefit", "num": "13221", "d": "7/2018"}, {"title": "inline style border bordercolor diff error", "body": "want request feature report bug report bug current behavior alternating inline styles merge white border painted first render black border painted property removed stackblitz example expected behavior going back white border like first render versions react browser os affected issue work previous versions react react macos google chrome safari", "num": "13217", "d": "7/2018"}, {"title": "array checkboxes keys reordered", "body": "want request feature report bug bug current behavior render array checkboxes unique keys reverse button via reverse array rerender using dom nodes reordered test checking checkboxes codesandbox clicking reverse checkboxes uncontrolled keys given react emits usual keys warning expected behavior dom nodes reordered reordered array rendered get expected behavior wrapping array div see codesandbox versions react browser os affected issue work previous versions react tested chrome mac os versions issue", "num": "13214", "d": "7/2018"}, {"title": "errorboundary fails catch error passing props component", "body": "want request feature report bug possibly current behavior currently error boundaries catch error passing props component tl dr paste link jsfiddle codesandbox example created small public repository show current behavior find expected behavior wish catch kind error wrong code anywhere component rendering cycle even passing props wish able control error current repository invalid code obviously wrong could fixed developer dynamic code versions react browser os affected issue work previous versions react react reactdom reactscripts", "num": "13213", "d": "7/2018"}, {"title": "investigate ieedge select rendering bug", "body": "follow issue related change events selects ieedge looks like longer issue visual regression ieedge might avoidable reproduction observation jasonwilliams change mouseup fire microsoft edge nhunzaker although rendering select box weird nt appear expand click need capture gif behavior documentation purposes live thread reproduce test case outside react isolate mechanics involved fix", "num": "13212", "d": "7/2018"}, {"title": "list items unique get rerendered order items changes", "body": "want request feature report bug bug current behavior rendering list items set unique property item element order items changes previous render item elements whose indexes changed rerendered new instance created instead reusing existing instance mapped via key eg rendering list box amp props every update values elements inside array updating order elements nt change every box animates new position however uncomment line shuffles boxes elements retain position previous render animate new positions observe behaviour sandbox sometimes boxes jump new positions always animate current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior regardless order box elements animate new positions since unique property set versions react browser os affected issue work previous versions react react amp chrome macos", "num": "13209", "d": "7/2018"}, {"title": "shouldcomponentupdate difficult override good shouldcomponentupdate method", "body": "want request feature report bug feature current behavior want prevent component rerendering special props changed performance bad android find difficult make prefect iv read official document looks like hard negative comparison iv tried lodash failed method lodash compare dom node propschildren dom node change special props component instance method anyone help", "num": "13207", "d": "7/2018"}, {"title": "umbrella releasing suspense", "body": "let use issue track remaining tasks releasing suspense open source initial release mvp core x api read context within render phase function acdlite hide timedout content instead deleting acdlite automatic injection context providers per react root acdlite remove prefix maybe support synchronous thenables promises resolve render phase complete confirm synchronous thenable throws error handled correctly confirm works clicking several detail links fixture one one eventually causes big placeholder even wait less placeholder delay clicking next one see tweet simple cache provider cache invalidation acdlite subscriptions acdlite decide actual name code splitting x support promise component type x maybe open source test renderer finalize public apis etc tentative plan publish custom matchers major testing frameworks la docs blog post simplecacheprovider unnamed codesplitting library follow ups soft expiration implement api inplace loading indicators nt ancestors make sure way avoid flashing inline spinner fast enough streaming server renderer implement streaming server renderer like one acdlite zeit talk partial hydration related time slicing umbrella", "num": "13206", "d": "7/2018"}, {"title": "longterm support internet explorer", "body": "feature like know current roadmap support internet explorer namely time frame react guarantees ie support yes long best regards thanks answer", "num": "13204", "d": "7/2018"}, {"title": "deep react state context api", "body": "considering total rewrite decentsized application got idea brewing wondering scale changes make planning stage specifically different contexts offer advantage case like provided root consumed far different frequencies words consolidate even though nt interested state terms rendering also though less context concern keeping app state top level cause unnecessary renders guess comes back ageold question redux connectors vs efficiency purecomponents nt think app scale really needs sort optimization redux think use purecomponents key areas speed gains really comes would nice hard data available somewhere consider alternative even rough", "num": "13203", "d": "7/2018"}, {"title": "warning logged error", "body": "warning child array iterator unique key prop expected consolewarn fallback consoleerror", "num": "13202", "d": "7/2018"}, {"title": "use reactdomcreateportal reactdomunmountcomponentatnode memory leak", "body": "want request feature report bug bug current behavior click destroy button page expected become blank check chrome memory see detached element think memory leak expected behavior detached element versions react browser os affected issue work previous versions react react reactdom code like js import react react import reactdom reactdom const app documentgetelementbyid app element class portaltest extends reactcomponent render return reactdomcreateportal test documentbody class portalapp extends reactcomponent render return hello reactdomrender app", "num": "13191", "d": "7/2018"}, {"title": "consoleerror throws reporting error react enter invalid internal state", "body": "want request feature report bug bug current behavior exceeds update count throws invariant update leaving dirty state fixed pr yet released interest concern began explore concerns around whether reactdom fiber really maintaining state fact left dirty least error cases indeed concern considered community might fixed ca nt imagine state value could issues current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example created repo demonstrates concern observe test failures componentone indeed poorly written componenttwo quite simple ok skipping componentone componenttwo passing expected behavior fail example versions react browser os affected issue work previous versions react unclear", "num": "13188", "d": "7/2018"}, {"title": "meant within readme async limitations clarified", "body": "meant within readmemd createsubscription async limitations full compatibility asynchronous rendering including timeslicing react suspense suggested longer term solution move one patterns described previous section patterns described reduxflux stores use context api instead io subscriptions eg notifications update infrequently use simplecacheprovider instead complex libraries like relayapollo manage subscriptions manually techniques library uses hood referenced way optimized library usage nt think suit use case high performance websocket stream produces price quotes rendered directly components application domain realtime trading application investment bank consulting ideally want price quotes passed straight component little ceremony possible state transient nt see need use kind state management solution store somewhere nt think need use pass data tree since import service wherever want code pass callbacks begin receiving data latter seems simpler less ceremony make easier differentiate different streams price updates seems exactly need however comment async limitations worries something missing could clarified readme priority think ideally wish price updates treated high priority would prefer decrease likelihood clients interacting stale data", "num": "13186", "d": "7/2018"}, {"title": "h", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13185", "d": "7/2018"}, {"title": "test", "body": "test closed", "num": "13184", "d": "7/2018"}, {"title": "hydrate injects content wrong node", "body": "want request feature report bug bug current behavior calling hydrate component injects content wrong dom node current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior expect hydrate correctly hydrate component inject incorrect html versions react browser os affected issue work previous versions react react reactdom chrome browser", "num": "13183", "d": "7/2018"}, {"title": "test fails render method arrow function", "body": "versions getting running test component nt using arrow function render method fails import react component react import text reactnative import shallowrenderer reacttestrenderershallow class testcomponent extends component render return hello describe consultmessages gt let props let renderer const render gt renderer renderer new shallowrenderer rendererrender return renderer passes import react component react import text reactnative import shallowrenderer reacttestrenderershallow class testcomponent extends component render gt hello describe consultmessages gt let props let renderer const render gt renderer renderer new shallowrenderer rendererrender return renderer reproducible repo link", "num": "13182", "d": "7/2018"}, {"title": "safari yell using createref createelement consolelog refcurrent", "body": "want request feature report bug safari strange behavior current behavior please see minimum example using safari javascript import render reactdom import react component react class app extends component constructor props super props thisref reactcreateref componentdidmount consolelog thisrefcurrent render return render documentgetelementbyid root safari yell react reactdom reactscripts", "num": "13179", "d": "7/2018"}, {"title": "reactdomrender context api warning detected multiple renderers concurrently rendering context provider", "body": "want request feature report bug bug assume current behavior steps reproduce behavior see readme get rid error expected behavior warning guess versions react browser os affected issue work previous versions react node npm yarn react reactdom reacttestrenderer", "num": "13177", "d": "7/2018"}, {"title": "needless checkbox warning using onclick instead onchange", "body": "want request feature report bug minor bug current behavior using checkbox get following warning failed prop type provided prop form field without handler render readonly field field mutable use otherwise set either checkbox works well actually better solution according expected behavior warning set versions react browser os affected issue work previous versions react react thanks good software", "num": "13171", "d": "7/2018"}, {"title": "svg tag leads uncaught typeerror", "body": "coderpad replicates issue take peek console runs outputs errors replicate versions tried also popped tag ancient version found coderpad template threw error well", "num": "13170", "d": "7/2018"}, {"title": "defaultchecked checked", "body": "sorry english soso code js import react react const const b const arr class checky extends reactcomponent render return class home extends reactcomponent state arr render return arrmap item index gt return export default home online demo use attr change home state ca nt change input checked input element readonly use attr change input checked ca nt change home state rerender working want working", "num": "13167", "d": "7/2018"}, {"title": "microdata html attributes camelcase server render", "body": "want request feature report bug bug current behavior reactdom render methods rendertostaticmarkup rendertostring etc generate camelcase microdata attributes current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior microdata attributes rendered lowercase etc versions react browser os affected issue work previous versions react related google structured data testing tool recognizes camelcase props index structured data disappeared switching lowercase camelcase appease linter definitely google problem react one easily solved calling react renderers switched back lowercase attributes today see resolves issue google", "num": "13162", "d": "7/2018"}, {"title": "dom elements divs incorrect properties componentdidmount", "body": "need render list items inside flexbox column every item div arbitrary height list items huge tactics render initially one item check available space save refs parent div item div access clientheight offsetheight properties free space add one item rerender whole thing process repeated whole column filled problem try immediately calculate available space componendidmount got incorrect value child div offsettop ie following method work add small pause works method componentdidupdate works excellently without delays seems like rendering parallel going componentdidmount invoked refs could incompleteincorrect process finished reference typescript private calcvisiblecount const nlpdialog thisprops const showfrom showto recalc thisstate public render const nlpdialog thisprops thisshownitems return iwho itext gt thissetstate text etargetvalue", "num": "13154", "d": "7/2018"}, {"title": "enzyme context api warning detected multiple renderers concurrently rendering context provider", "body": "want request feature report bug bug guess current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example steps reproduce behavior expected behavior warning versions react browser os affected issue work previous versions react react browser affected error nodejs open issue happens enzyme code unreleased copypasted master looking advice clue fix would able create pr enzyme repo react repo case thank", "num": "13150", "d": "7/2018"}, {"title": "changes warning infrastructure", "body": "posting keep forgetting order wanted x fix pr figure always stack warning x yes checked kind x start passing x start enforcing tests x separate usage code outside interpreter isomorphic events setstateforceupdate x nt detect lack printable stack complete lack stack x figure edge case means thanks pastme adding comment x append stack automatically remove append hand x clean tree hook current frame current fiber setup confusing associate strict mode warnings strictmode fibers specifically pass component stack strictness richer format", "num": "13149", "d": "7/2018"}, {"title": "better feature detection devtools profiler plugin", "body": "regarding experimental api pr changed behavior react profiling builds opt host roots react devtools extension detected necessary order accurate tree base time measurements visual flame graphs profiler plugin devtools feature detection determine enabled looking root seeing fibers contain attribute problem attribute present fibers predate pr result profiler ui may enable versions react work correctly perhaps easy solution would rename one fiber attributes prior next minor release eg change devtools profiler feature check using new name instead", "num": "13148", "d": "7/2018"}, {"title": "npm run build failed", "body": "hi react application running fine npm start try create build prod deployment taking long prepare build finally error thrown tried options install node modules cleared cache new install also tried updating npm latest version running application form fresh folder new npm installations nothing seems helpful resolve issue kind stuck kind help suggestions really helpful appreciated error reported fatal error callandretrylast allocation failed javascript heap memory complete error details lightbootstrapdashboardproreact build e santoshremitrixwebuiremitrixdatta npm run buildcss amp amp reactscripts build lightbootstrapdashboardproreact buildcss e santoshremitrixwebuiremitrixdatta nodesasschokidar includepath src includepath nodemodules src src wrote css files e santoshremitrixwebuiremitrixdattasrc creating optimized production build lt last gcs ms marksweep mb ms last resort gc old space requested lt js stacktrace js stack trace security context anonymous aka anonymous optimize compres fatal error callandretrylast allocation failed javascript heap memory nodemoduleregister internal fatalprocessoutofmemory internal fatalprocessoutofmemory internal factory newcoderaw internal factory newcode internal modulo internal compiler controlflowoptimizer trybuildswitch internal zonevector zonevector internal compiler pipeline allocateregistersfortesting internal compiler valuenumberingreducer operator internal compilationjob finalizejob internal compiler instructionselector isolate internal compiler finalizecompilationjob internal optimizingcompiledispatcher installoptimizedfunctions internal stackguard handleinterrupts internal wasm wasmopcodes trapreasonmessage npm err code elifecycle npm err errno npm err lightbootstrapdashboardproreact build npm err exit status npm err npm err failed lightbootstrapdashboardproreact build script npm err probably problem npm likely additional logging output npm err complete log run found npm err absolute", "num": "13147", "d": "7/2018"}, {"title": "add debug info conflicted component keys", "body": "want request feature report bug feature current behavior iteration components conflicted console report useless knodwing conflicted components remove iteration components expression one one locate problem expected behavior warning message contains extract components keys versions react browser os affected issue work previous versions react react", "num": "13146", "d": "7/2018"}, {"title": "global event handlers documentbody", "body": "related need implement global keyboard handler currently onkeydown handler maincomponent fills whole page however default tag focus therefore handler maincomponent see keyevents thinking adding onkeydown handler document case would add handler native events would however like use handler react synthetic events searching web shows many people issue find real solutions far see currently solutions add handler maincomponent make sure maincomponent gets focus instead tag problem need make sure time maincomponent gets focused add hander document handles native events however seem problems stoppropagation preventdefault called native events relation react already good solution anything planned", "num": "13142", "d": "7/2018"}, {"title": "reacttestrenderer shallow sfcs get", "body": "want request feature report bug bug current behavior addresses bug line invokes sfc value believe needed createreactclass components needs separate branch sfcs expected behavior inside strictmode sfc element versions react browser os affected issue work previous versions react react bug exists bug ideally fixed understand highly unlikely would backported lines wrap around reliable way versions distinguish sfcs createreactclass components", "num": "13141", "d": "7/2018"}, {"title": "make use new react context api ssr", "body": "hello everyone running small project gatsbyjs using redux manage shared state values multiple components across react dom tree release new context api thinking replacing redux bit overkill project made tests working really fine runtime however build project via serverside rendering context seems made lot searches web issue much informations probably young age issue think related nextjs static website generator aswell nt solution neither gt new context api compatible ssr resources examples", "num": "13138", "d": "7/2018"}, {"title": "update state child component parent component", "body": "hey issue library nt worry facing issue cant seem solve life trying get assistance problem community form submit uses fetch api post works woo however add additional contacts want update state contactjs child component tired everything know far learning react struggling get simple task done adding contacts current build addcontact event gt know need thissetstate nt know set child states method used add contacts appjs project link sorry posted wrong place cant seem post stack overflow due formatting issues cheers advance", "num": "13137", "d": "7/2018"}, {"title": "server side rendering parameter state string containing rendered page broken", "body": "server side rendering state parameter string inside got broken page page piace state object string", "num": "13136", "d": "7/2018"}, {"title": "select html element event target type selectone", "body": "current behavior event target type selectone intended naming convention expected behavior html type convention whenever possible html good follow convention like xaml gtk others really familiar gui ecosystem history good constructive opinion one library work better convention better every library perfect convention specification versions react browser os affected issue work previous versions react demo code codesandbox", "num": "13135", "d": "7/2018"}, {"title": "history props push work", "body": "actually using reactrouterdom try use thispropshistorypush error read property push undefined currently reactrouterdom nt support method kind regards", "num": "13134", "d": "7/2018"}, {"body": "hey cisankity code nt part react could try inspecting source see function gets called questions please check community support resources best luck", "d": "7/2018"}, {"body": "thank aweary", "d": "7/2018"}, {"body": "fact take look mozilla docs flex basis also applied fixed width determined", "d": "7/2018"}, {"body": "flxwu hmm true even devtools chrome marks invalid value seems works properly numeric value nt fully sure browsers treat value number anyway closing issue thanks clarification docs", "d": "7/2018"}, {"body": "ca nt help provide literally information please open blank issues think found actual bug react please provide requested information issue template question please check community support resources", "d": "7/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "7/2018"}, {"body": "hey manubb option include attributes meant internal use avoid relying presence thanks", "d": "7/2018"}, {"body": "hi aweary thanks answer sorry insist would like ssr browser controlled server eg puppeteer jsdom without option possible chance feature added future release", "d": "7/2018"}, {"body": "use reactdomserver within browser function return thing would run nodejs", "d": "7/2018"}, {"body": "need reproducing example", "d": "7/2018"}, {"body": "looks like using production version package development version package supported looked repo yet hope helps", "d": "7/2018"}, {"body": "gaearon thank right compiled staticwriter dev version called nodeenvproduction fixed compile right nodeenv environment da bes", "d": "7/2018"}, {"body": "happening react thinks swap components inputs first position div reconciles instead creating new one words input position tree input swap react ca nt tell supposed distinct inputs type updates vis versa workaround given inputs distinct prop hints react", "d": "7/2018"}, {"body": "believe thread deals issue", "d": "7/2018"}, {"body": "seems work fine nt see opening modal added button component", "d": "7/2018"}, {"body": "thanks advice raunofreiberg however still solve code sandbox use array think occurs strange behaviors", "d": "7/2018"}, {"body": "child handler opens modal fire whenever click inside modal including close button modal react issue", "d": "7/2018"}, {"body": "ohhhhh thank u exactly notice", "d": "7/2018"}, {"body": "figured hte missing addons closing time get sleep", "d": "7/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "7/2018"}, {"body": "trying run browser need use correct build regular file contain want reactdomserverbrowserdevelopmentjs umd build also deploy production make sure using production build", "d": "7/2018"}, {"body": "thank much tested works properly thanks", "d": "7/2018"}, {"body": "seems work", "d": "7/2018"}, {"body": "nmain difference using hydrate rather rendertostring well versed translates ssr client rendering bonus points using correct colours though put together example closer see bug replicated introduce babel webpack could issue set although im struggling find screenshot although curiously react tools chrome thinks classname updated firefox safari show", "d": "7/2018"}, {"body": "installing react reactdom makes example work expected", "d": "7/2018"}, {"body": "ok think difference requiring called client side hydration props whereas done versions prior sensitive changes perhaps reduction checking attributes one ways speed improved change client side code first hydrate props ssr works expected javascript import react react import reactdom reactdom import header header const mount documentgetelementbyid themount reactdomhydrate mount settimeout gt reactdomrender mount however obviously results two calls one render hydrate docs notes effect react expects rendered content identical server client patch differences text content treat mismatches bugs fix development mode react warns mismatches hydration guarantees attribute differences patched case mismatches important performance reasons apps mismatches rare validating markup would prohibitively expensive intentionally need render something different server client twopass rendering components render something different client read state variable like thisstateisclient set true componentdidmount way initial render pass render content server avoiding mismatches additional pass happen synchronously right hydration note approach make components slower render twice use caution looks like intentional ideal behaviour certainly different equivalent functionality previous versions case nt care server render avoid hydrate two pass rendering would assume answer would remove contents container calling render hydrate something want wholesale replace seems inefficient especially side effects potentially nasty example hydrate done different mismatched data classname updated content per hydrate docs however additional side effect causes classname replaced future render calls new content afterwards could nasty unless passing entire ssr state client hydration even know irrelevant example javascript import react react import reactdom reactdom import header header const mount documentgetelementbyid themount reactdomhydrate mount settimeout gt reactdomrender mount perhaps better workaround clearing parts dom manually maybe full state hydration cost pay", "d": "7/2018"}, {"body": "yes think idea example assuming serverside rendering already happened included markup static html fiddle first clientside call hydrate render", "d": "7/2018"}, {"body": "case nt care server render avoid hydrate two pass rendering would assume answer would remove contents container calling render hydrate something want wholesale replace seems inefficient especially side effects potentially nasty want completely throw away serverrendered markup twopass rendering likely much faster throwing markup assuming clientrendered markup mostly existed would use hydrate behavior removed currently react uses heuristic detect called serverrendered markup logs warning still tries hydrate want avoid need manually remove markup container rendering", "d": "7/2018"}, {"body": "aweary case server rendered markup client rendered quite different component although might quite edge case data powers ssr nt passed client store ever going replaced wholesale however replace wholesale correctly need hydrate requires data passed store throw ssr hydration away calling render appreciate likely edge case found prototyping might manifest often real world think theres horrible gotcha waiting people future anyway thanks replies", "d": "7/2018"}, {"body": "hey nmain curious use case needs render fragments children element seeing react warning something might bug end html spec makes pretty clear elements never content although said empty fragment technically content", "d": "7/2018"}, {"body": "render particular markup xml contains subset xhtml combined special elements contain interactive behavior recursively transform react nodes code looks something like example given simple would remove extra fragment pass directly first call real thing complicated extra layers indirection basic idea accept change code explicitly calls fact certain elements void handles appropriately instead working chance created bug report see behavior react team interested changing", "d": "7/2018"}, {"body": "thanks additional information makes easier understand needs believe use case special probably better fixing adhering spec prevent empty elements ever children first place adding special case validation code allowing empty fragments void elements would create additional complexity might worth given specific use case could wrong", "d": "7/2018"}, {"body": "yeah expected behavior reactdom nt meant generic xml renderer adheres html spec enforces behavior defined want render arbitrary xml always look using reactreconciler create renderer still early stages though cautious", "d": "7/2018"}, {"body": "good job", "d": "7/2018"}, {"body": "quite sure question next props state passed gdsfp variables named source nt important interest tho prevstate called yet committed component current pending state regardless name date state value", "d": "7/2018"}, {"body": "hey render much little content like server rendering want render multiple react roots totally doable facebook include call root want interactive future reference use issue tracker bug reports feature requests question please check community support resources", "d": "7/2018"}, {"body": "aweary thanks pointing right direction", "d": "7/2018"}, {"body": "thanks report desbrowne appear expected behavior div element svg namespace essentially undefined behavior dependent different browsers handle want add warning invalid nesting inside svg tags tracked love pr since expected already issue tracking preferred solution going close let know questions", "d": "7/2018"}, {"body": "code js class indexpage extends reactcomponent constructor props super props thisstate num consolelog constructor unsafecomponentwillmount consolelog willmount thisstate componentdidmount consolelog didmount thisstate thisstate unsafecomponentwillreceiveprops nextprops consolelog willreceiveprops thisstate static getderivedstatefromprops nextprops prevstate consolelog getderivedstatefromprops prevstate prevstate return null shouldcomponentupdate nextprops nextstate consolelog shouldcomponentupdate thisstate thisstate return true unsafecomponentwillupdate consolelog willupdate thisstate getsnapshotbeforeupdate prevprops prevstate consolelog getsnapshotbeforeupdate thisstate thisstate prevstate prevstate return null componentdidupdate consolelog didupdate thisstate thisstate componentwillunmount consolelog componentdidunmount add thissetstate state gt num statenum consolelog setstate addbydelay settimeout gt debugger thissetstate num thisstatenum thissetstate num thisstatenum render consolelog render return thisstatenum", "d": "7/2018"}, {"body": "look getderivedstatefromprops documentation see argument nt called reason gdsfp called props change state updated argument always current state check blog post probably nt need derived state information", "d": "7/2018"}, {"body": "ok thanks answer see reactdomjs prevstate aweary", "d": "7/2018"}, {"body": "guys found problem nt react lib using mask removed worked", "d": "7/2018"}, {"body": "using consumer", "d": "7/2018"}, {"body": "provide complete isolated example could run please", "d": "7/2018"}, {"body": "gaearon code aside express server part part closed source project working hoping open source next couple weeks provide aside code help debugging issue working better part day half got closer started", "d": "7/2018"}, {"body": "gaearon helps real function goes react tree call functions react components basically using like example code", "d": "7/2018"}, {"body": "gaearon example repo using unreleased lib", "d": "7/2018"}, {"body": "basically renders page data renders instead rendering data already", "d": "7/2018"}, {"body": "quick example could get show issue fullest", "d": "7/2018"}, {"body": "give minutes try clean without extra code", "d": "7/2018"}, {"body": "maniator cloned example ca nt reproduce issue described context consumer correctly rendering state pulled see issues though relies internal propertiesapis nt using reason setting currentvalue react context element risky thing ca nt account libraries mutate internal values code also relying internal context properties forks render based internal currentvalue please use context api officially supported documented believe issue react please try reduce example exclude thirdparty libraries clarify behavior expecting", "d": "7/2018"}, {"body": "filed definitely unsupported get worse future probably worth warning libraries depend", "d": "7/2018"}, {"body": "prevent client side js running disable dev tools see context correctly works server render issue may running never render provider hydrate client means end rendering consumer falls back default context value example aweary stated second bullet point run issue specifically always truthy ssr phase client side hydration phase", "d": "7/2018"}, {"body": "gaearon added code recent commit already working tree walker commit suggest use walk react tree call apis etc suspense ready yet", "d": "7/2018"}, {"body": "aweary hamlim added code recent update never truthy running real application", "d": "7/2018"}, {"body": "think drop actually service worker function call anyway", "d": "7/2018"}, {"body": "finding application blank within electron see sources loaded referenced errors console nothing happening notice code reference hot modules likely lack implementation causing issue", "d": "7/2018"}, {"body": "look like question react react absolutely relation service workers dependency seem asking create react app separate repository would better place ask user guide also includes instructions unregistering service worker tldr remove service worker registration react need way hope helps", "d": "7/2018"}, {"body": "problem react nt remaining space container gridlayout try setting container height see fr working suggest take much time css", "d": "7/2018"}, {"body": "even plain html would nt work react issue", "d": "7/2018"}, {"body": "clear anything react code snippets pointing syntax error", "d": "7/2018"}, {"body": "helpful information please open issue good reason believe bug react think bug please provide information issue template question please check community support resources", "d": "7/2018"}, {"body": "hi got answer thank", "d": "7/2018"}, {"body": "try reproducing problem without react using dom apis directly", "d": "7/2018"}, {"body": "tried could reproduce", "d": "7/2018"}, {"body": "please share tried attempt reproduce well", "d": "7/2018"}, {"body": "nt think possible tried attaching id dom node hydrating specific react component", "d": "7/2018"}, {"body": "hitting react bug missing something", "d": "7/2018"}, {"body": "much confused render load child completely props changes per react doc using componentdidupdate lifecycle without luck would really grateful someone help fix issue long time figure thinking use refs call load method thisallfetch inside parent recommended way per react docs", "d": "7/2018"}, {"body": "hi jazkh think need bind parent component first like class app extends component constructor props super props thisstate loaddirs backdirs need thisgetload thisgetloadbind thisgoback thisgobackbind child component stateful component mean component state call getload goback execute command try set state via mean self need bind first told function know command mean app instead component stateless component appear error message like stateless component nt setstate hope help", "d": "7/2018"}, {"body": "jazkh component fix constructor like following part props case initializing react component undefined prop available", "d": "7/2018"}, {"body": "follow instructions warning warning context consumer rendered multiple children child nt function context consumer expects single child function pass function make sure trailing leading whitespace around code posted looks like might trailing whitespace function passed hard say without runnable example reproducing issue please follow instructions issue template opening issue see links templates use template paste link jsfiddle codesandbox example believe warning occurring nt please use one templates provide minimal example reproducing issue seems like mostly asking usage question case use issue tracker bugs feature requests question please check community support resources use post", "d": "7/2018"}, {"body": "follow assume comment fixed problem close", "d": "7/2018"}, {"body": "guess original proposal anyway", "d": "7/2018"}, {"body": "intriguing wonder change selected item assigned react", "d": "7/2018"}, {"body": "tried take look files sadly nt able find much difference sorry lack help interested seeing resolved looking wrong place", "d": "7/2018"}, {"body": "worries first places look one difference see react assigns wonder throwing react able test moment wonder see scroll change set breakpoint stepped loop", "d": "7/2018"}, {"body": "hello nathan exploring issue hours installed react able follow program execution breakpoints seems like function updateoptions set one option attributes select true good also selectedindex set also good able see element printed way parameters seem okay also saw difference assigning", "d": "7/2018"}, {"body": "ran debugger depending use correctly set attributes appropriate dom element example still select value passed nt scroll would somewhere else look renderer value attribute assessedchecked behavior changing poked around lot code parse", "d": "7/2018"}, {"body": "sure much helps small test using link supplied find build react issue first started occurring test uninstalled reinstalled version react using interface codesandbox observed everything release caused issue occur knowing working decided look prerelease builds leading issue first started occurring found select stopped scrolling value supplied select element build test fixed later build figured first point failure could help way", "d": "7/2018"}, {"body": "good afternoon think identified causes undesired behavior need time investigate proper fix nobody mind would like take issue first commitment project", "d": "7/2018"}, {"body": "update appears issue bit complicated thought sure behavior introduced react fiber architecture keep trying fix though nt know much time take get implementation details take time", "d": "7/2018"}, {"body": "sorry lot travel sounds like really tough issue segoddnja assign pressure burn lot time let try figure hypothesis maybe work together resolve", "d": "7/2018"}, {"body": "curious something happening select ahead time could cause scrolling stop wonder order propertyattribute assignments could changed would lead scrolling stopping", "d": "7/2018"}, {"body": "interesting phenomena let say following steps happen given options select first option select option deselect first option scrolling still focused first option even though option one selected appears chrome anyway scrolls first selected value assigned unassigned maybe related", "d": "7/2018"}, {"body": "nhunzaker yep thanks think right direction browser scrolls first option got selected property true changes nt cause scroll discovered react creates bare node appends options bare first appended option automatically gets switching multiple mode updating options selection nt cause scroll think necessary set attribute value appending options", "d": "7/2018"}, {"body": "text nodes appear separate match client one one hydrate existing dom", "d": "7/2018"}, {"body": "nt think react much leeway anything else long diff style object consider following nonreact code cause exact issue provide multiple keys style object nt actually independent short forms include happen", "d": "7/2018"}, {"body": "hey thanks example makes lot sense react consistent would happen nonreact environment mind closing issue react bug thanks", "d": "7/2018"}, {"body": "cool thank nmain", "d": "7/2018"}, {"body": "two codesandboxes seem contain exact code anyway react skipping child reconciliation see fixed version general bad idea mutate sorts things nt know expected behavior", "d": "7/2018"}, {"body": "yes expected behavior inplace mutation means react tell updated creating new array reversing recommended approach get expected behavior wrapping checkboxes array div works div element recreated every render returns new object nt maintain referential equality means react ca nt bail render like return array", "d": "7/2018"}, {"body": "caught next level think behavior makes perfect sense may use nt know care task projecting something render process error like error boundary errors must caught one level", "d": "7/2018"}, {"body": "hello thank answer alright explaination makes sense case case appjsx render return somecomponentjsx render return still use case sure understand reasoning behind edit tried fiddle works might something wrong code right ca nt figure keep digging thanks help", "d": "7/2018"}, {"body": "new example give would seem like catch error error occurs method ca nt sure complete runnable example", "d": "7/2018"}, {"body": "spent day tinkering testing something weird seems happen expose code directly make working jsfiddle react router however noticed errorboundary component render right view ie seconds default development mode view ugly white red screen stack trace appear instead checking logs error thrown enter componentdidcatch function rerender children anything error caught sorry ca nt provide code right thank time mention use reactrouter redux error thrown render method component redux much concern", "d": "7/2018"}, {"body": "default development mode view mean something like react nt anything like built", "d": "7/2018"}, {"body": "yes exactly create app using know included react thanks clarification helped lot found help issue thought still something wrong close issue thanks lot help", "d": "7/2018"}, {"body": "attempted run example changed setstate handlemouseup change title constant select box expanded successfully edge first attempt problem appears mathrandom extent sure", "d": "7/2018"}, {"body": "hey seems limitation dom demonstrate created jsfiddle changes order two dom nodes applies class trigger transition turns work around issue triggering reflow changing order updating animation properties added bit code codesandbox make visible component recreated react changing class component creating unique id constructor see id stay consistent addition applied reflow workaround example splitting update two first one change order trigger reflow afterwards change position seems work fine chrome firefox safari edge codesandbox support could test browser", "d": "7/2018"}, {"body": "hey philippspiess thanks clarifying issue examples workaround", "d": "7/2018"}, {"body": "urgently need changed props", "d": "7/2018"}, {"body": "nt understand asking use want shallow comparison general use issue tracker bug reports feature requests question please check community support resources", "d": "7/2018"}, {"body": "shouldcomponentupdate bad feature", "d": "7/2018"}, {"body": "expose maybe nt already exposed", "d": "7/2018"}, {"body": "meant remove", "d": "7/2018"}, {"body": "looking forward open source unnamed codesplitting library", "d": "7/2018"}, {"body": "mean umbrella", "d": "7/2018"}, {"body": "mean feature impact several projectspackagestools", "d": "7/2018"}, {"body": "ghoullier see thank much", "d": "7/2018"}, {"body": "hey acdlite question best prepare asking expecting kind timeline wondering currently expecting features drop react easy adopt incrementally like new context api landed thinking something pushes react require work adopt asking working roadmap crosses significantly pretty much everything list trying work best deal also tips best prepare terms code written today wants future compatible improvements react polyfills techniques etc apologies questions answered elsewhere missed", "d": "7/2018"}, {"body": "adding another question jedwatson questions also nt needexpect get timeline stable release would possibleuseful get new prerelease afaik newest release february thank", "d": "7/2018"}, {"body": "imo provide blog post like landed think nt need prepare much breaking change many features maybe would seems differentconflict current practices like redux fetch suspense codemod easy encapsulation know fb components watch talk acdlite ssr suspense zeit gaearon client suspense iceland know nt need worry much invasive way search key umbrella repo find info like afaik newest release february iirc misoperation", "d": "7/2018"}, {"body": "jedwatson comment helped understand developer must help ensure application async safe", "d": "7/2018"}, {"body": "working rolling suspense module new apis facebook case acdlite busy something else like share thoughts experience facebook answer questions jedwatson currently expecting features drop react easy adopt incrementally like new context api landed sure come react according react team likely released end year depends well runs facebook related api ready codewise happy say would easy adopt experimenting quite facebook suspense feature still work existing codebase additional changes like async rendering bonus new feature bring tips best prepare terms code written today wants future compatible improvements react polyfills techniques etc say migration rather incremental progressive like nesmalltown said nt want introduce breaking changes would also painful roll facebook large codebase far roll smooth nt require additional changes", "d": "7/2018"}, {"body": "jedwatson currently expecting features drop react easy adopt incrementally like new context api landed incrementally always incrementally otherwise way able ship facebook expecting client serverside rendering suspense works everywhere constraints existing server renderer async rendering optin using constraints existing server renderer sync mode always placeholders show immediately suspense work without changes existing components one point thought might require compatibility internal testing discovered one best ways upgrade strict mode use suspense chickenegg dilemma found way make work even outside strict mode idea users start migrating suspense even ready migrate asynchronous rendering subtree ready optin wrapping new apps though story different go async default introduce new root api replacement async awkward period initial release many thirdparty frameworks redux apollo react router may work properly async mode might hurt adoption idea new features compelling wo nt take long libraries either adapt superseded asynccompatible alternative also tips best prepare terms code written today wants future compatible improvements react polyfills techniques etc wrap everything make sure warnings detailed migration guides get closer release", "d": "7/2018"}, {"body": "awkward period initial release many thirdparty frameworks redux apollo react router may work properly async mode apollo nt awkward ready seriously though heart things react making sure inline changes initial release high priority also something super excited thanks amazing work acdlite", "d": "7/2018"}, {"body": "chime say redux team working async compat reactredux laid potential roadmap tl dr reactredux hopefully work warnings current pr internal rewrite use new context api add ref forwarding possibly changes try keep much current public api possible ie see well works async rendering figure best path forward prior proofofconcept pr probably redo based lessons learned work likely release would require react minimum due need new context probably also asyet unreleased read context lifecycle methods pr merged open ideas different reactredux api yes yes possibly includes render props people appreciate eyes wip hopefully people give us feedback discussion looking using redux react suspense async rendering make sure use cases get covered properly also hoping discussions react team exactly constraints need work helpful could get sample apps would let us see problems need solve work correctly", "d": "7/2018"}, {"body": "looking forward release async rendering suspense", "d": "7/2018"}, {"body": "acdlite also question suspense async rendering question introduced one starts writing apps new version react mean react api way people code react change even nt plan use features suspense async rendering assume trickier write react code suspense async rendering maybe due new api constraints nt need force use react new way allow code react way", "d": "7/2018"}, {"body": "assume trickier write react code suspense chance watch second half talk say quite opposite way less trickier use suspense data fetching anything else including redux local state library", "d": "7/2018"}, {"body": "gaearon nt speaking theory imagine already set people know react people nt need feature async rendering suspense force learn new react especially new react tricker use well informed might wrong say trickier part sharing thoughts way saying apps need feature suspense async rendering cases force people learn new react might wrong since nt gather much info suspence async rendering yet", "d": "7/2018"}, {"body": "think hard conversation nt looked demos yet clear new react features nt break existing patterns additive nt need write code completely different way use features either although work use modern lifecycle methods directly related concern disagree trickier use think suspense much simpler use loading mechanism currently exists reason excited nt use new features nt want old patterns keep working really recommend watching talk sure make lot sense see features action", "d": "7/2018"}, {"body": "gaearon old patterns keep working thanks feedback dan yeah thought suppose people nt need features able write way used features added good luck", "d": "7/2018"}, {"body": "hello presently support knowledge official stance timeline support aweary anything like know", "d": "7/2018"}, {"body": "nhunzaker hi thanks fast reply give background working bigger project adressing really heterogeneous customer crowd ie users make considerable share customers using ie bound therefore bound support ie long time come", "d": "7/2018"}, {"body": "official timeline browser support matrix unfortunately usually discuss browser support terms facebook browsers needs support maybe sophiebits provide insight know discussed dropping support near future still pretty common expect supported awhile clear stop supporting browser means wo nt explicitly work around browserspecific bugs lot cases expect modern browsers including continue work far past support period also see", "d": "7/2018"}, {"body": "issue", "d": "7/2018"}, {"body": "quite issue split app state many contexts example modals relay locales data management yes need kind selectors mechanism think react copy write work fine", "d": "7/2018"}, {"body": "ok thought little think close nested child wrapped eg receives prop rerenders often parent purecomponent wo nt even rerender props nt change even advantage edges advantage splitting context like performance win", "d": "7/2018"}, {"body": "hey react warnings use consoleerror intentionally visible react warnings also generally considered really errors much makes sense crash program things really fixed consolewarn reserved less serious api deprecation warnings", "d": "7/2018"}, {"body": "go one level errors erros warnings things really fixed infos less serious api deprecation warnings", "d": "7/2018"}, {"body": "brokentone please try reproduce without enzyme latest stable enzyme release nt yet full support react also harder isolate issue react", "d": "7/2018"}, {"body": "proceeding paragraphs explain limitations however achieves correctness sometimes deopting synchronous mode obviating benefits async rendering effect deopting sync mode main thread may periodically blocked case cpubound work placeholders may appear earlier desired case iobound work means might get jank processing subscription updates since main thread gets blocked using suspense loading state might rendered sooner would otherwise nt think suit use case case third pattern suite use case complex libraries like relayapollo manage subscriptions manually techniques library uses hood referenced way optimized library usage always start using feel fits use case implement custom solution end needing advanced control websocket subscriptions use reference subscription component", "d": "7/2018"}, {"body": "aweary clear question deopt causes deopt already read readme understand limited implications still understand causes limitations within advanced gist various comments like could related however also general code looks similar understand causes async deopts write code avoids edit saw link bottom gist apparently johnlindquist conversation bvaughn ensuring async safe however clear package able safe allegedly nt", "d": "7/2018"}, {"body": "hi clear question deopt causes deopt conceptually react work two phases render phase determines changes need made eg dom phase react calls compares result previous render commit phase react applies changes case react dom react inserts updates removes dom nodes react also calls lifecycles like phase react organize work way provides couple benefits error happens rendering component react safely throw away inprogress work let error boundary decide render lot components render react split work processed smaller chunks order avoid blocking browser components rendered react synchronously commit work eg update dom gist new experimental async rendering mode react prioritize work higher priority work scheduled lower priority work progress react safely set aside lower priority work later start working higher priority work instead since react applies updates eg dom commit phase never worry leaving application partially updated broken state order react safely leverage benefits important components cause side effects render phase includes subscribing something eg adding event handler adding subscription done commit phase order avoid potential memory leaks related question smile consider following async rendering scenario application event dispatcher components subscribe new component created event dispatcher target passed prop component first renders reads current value target uses react lot components process part current render yields completing work yielded time target dispatches new value since component yet subscribed notified value react later resumes rendering work finishes commits component subscribes target already missed event dispatched render subsequent commit createsubscription handles possible case checking value rendered sync latest value scheduling new render calling ensures component nt display stale data state updates scheduled processed synchronously flushed user sees ui update important certain use cases eg positioning tooltip measuring rendered dom element case describing means users application never even see temporary stale value react process new value synchronously yielding might sound like good thing rerender includes lot components slow reason might impact frame rate cause application feel unresponsive referring say createsubscription deopts synchronous rendering mode cases", "d": "7/2018"}, {"body": "circle back initial point confusion sebinsua think language readme slightly confusing advanced template use techniques maintain correctness async rendering deopt cases section full compatibility asynchronous rendering including timeslicing react suspense suggested longer term solution move one patterns described previous section mainly referring two common uses cases external state store lowfrequency io subscriptions opt use template control subscription asyncsafety nt need control use clear package able safe createsubscription allegedly isnt async safe deopts synchronous rendering scenarios order maintain safety", "d": "7/2018"}, {"body": "excellent answers thanks lot help edit sum understanding anybody reading nt cause sideeffects renderphase since guarantees often methods within phase run basically order avoid memory leaks subscriptions created unsubscriptions happen former guarantees latter happen calls within commit phase eg synchronous therefore createsubscription advanced template mentioned deopt synchronous mode value subscription became stale rendering component mounted b updated new behaviour seems exists correct situations components yield components rendered later resume rendering stale data", "d": "7/2018"}, {"body": "closing since appears issue end seems hydrate needs container element hydrate demonstrated follow unfortunate since app using react entire page need wrap react components siblings extra extra container element", "d": "7/2018"}, {"body": "code two examples identical", "d": "7/2018"}, {"body": "render method class different", "d": "7/2018"}, {"body": "ah see related sure", "d": "7/2018"}, {"body": "works fine use arrow functions nt mean babelplugintransformclassproperties working get error running tests app runs fine otherwise", "d": "7/2018"}, {"body": "fhadsheikh could create repo clone reproduce issue setting repo dependencies time consuming us able help quicker nt meantime share version full stack trace error", "d": "7/2018"}, {"body": "hi aweary added rn version stack trace link repo reproduce bug issue thanks help", "d": "7/2018"}, {"body": "whatever issue likely nt react shallow renderer method receives element initializing returns instance without method defined could issue nt see anything maybe someone experienced chime", "d": "7/2018"}, {"body": "hi running project upgrades updating run issue aweary tried converting component one failing tests method arrow function suggested fixed issue wo nt long term solution though also discovered issue occurs stateless functional components ie", "d": "7/2018"}, {"body": "also running issue react native project running ios android rather running web using", "d": "7/2018"}, {"body": "may related babelbabel", "d": "7/2018"}, {"body": "strange version safari using rockmandash ca nt repro might browser bug looks like weird codesandbox issue", "d": "7/2018"}, {"body": "looks like someone found root issue something safari team fix already fixed probably wont attempt workaround", "d": "7/2018"}, {"body": "maybe fix making getter nonenumerable", "d": "7/2018"}, {"body": "gaearon behavior nonenumerable properties", "d": "7/2018"}, {"body": "one hacky workaround would create error check call stack internal methods safari console uses opened bug report webkit issue tracker", "d": "7/2018"}, {"body": "aweary using safari version", "d": "7/2018"}, {"body": "fyi current bug related", "d": "7/2018"}, {"body": "jaykan related root issue nt working together context issue seeing fixed included next release", "d": "7/2018"}, {"body": "worth pointing much answer refers bug internet explorer actually fixed react dom nt support lower anyway", "d": "7/2018"}, {"body": "ya pending pr", "d": "7/2018"}, {"body": "onclick better solution according answer nt apply react fact react internally uses precisely reason nt need worry keep using equivalent scenario warning encourages consistency nt hurt follow", "d": "7/2018"}, {"body": "however revisit time merge", "d": "7/2018"}, {"body": "think problem lies", "d": "7/2018"}, {"body": "browser using example runs fine chrome firefox safari macos", "d": "7/2018"}, {"body": "aweary tried work laptop error lead compare home machine work machine json viewer awesome extension causing gon na go ahead close thanks apologies wasting time", "d": "7/2018"}, {"body": "guess better use stackoverflow questions state reside one place must decide work time must decide handler changes state never gets used using code mostly fixed note state representation wrong unless want keep track order boxes checked use set object like", "d": "7/2018"}, {"body": "many microdata props support", "d": "7/2018"}, {"body": "words talking fixing one attribute like", "d": "7/2018"}, {"body": "itemscope itemtype itemid itemprop itemref", "d": "7/2018"}, {"body": "spec reference", "d": "7/2018"}, {"body": "spec nt seem say anything casesensitive maybe find someone google shed light", "d": "7/2018"}, {"body": "currently lowercase itemscope microdata attribute none others special case", "d": "7/2018"}, {"body": "boolean", "d": "7/2018"}, {"body": "oh right casesensitivity nt specdefined better get vendors like google speccompliant mikemarcacci structured data test tool case problem", "d": "7/2018"}, {"body": "testing tool acts correctly sees camelcase props index disappeared another react user switching camelcase switched back use lowercase string props today probably wait tomorrow see index recovering definitely possibility google changed something internally time switch camelcase microdata props camelcase nothing index loss definitely keep issue updated", "d": "7/2018"}, {"body": "fwiw would definitely prefer leaving react asis seo footgun waiting happen", "d": "7/2018"}, {"body": "going close test kept lowercase microdata names pages camelcase others without changing anything else related structured data google begun pick sets chock coincidence superstitious nature everything seo apologies noise", "d": "7/2018"}, {"body": "sounds good thanks checking", "d": "7/2018"}, {"body": "yes thank posting issue think writeup useful reference future comes", "d": "7/2018"}, {"body": "could provide simple selfcontained reproducing case jsfiddle similar difficult say exactly things going wrong otherwise", "d": "7/2018"}, {"body": "closing reopen reproducible example", "d": "7/2018"}, {"body": "break issue happens ie causes sigils differ", "d": "7/2018"}, {"body": "one test file works fine breaks one guess sigil never cleaned first place pure guess familiar enough code base give better explanation continue investigation", "d": "7/2018"}, {"body": "put console logs places give complete picture", "d": "7/2018"}, {"body": "huh figured issue happens use enzyme test file sure needed fixed", "d": "7/2018"}, {"body": "enzyme mount wrapper right reduce test case without enzyme", "d": "7/2018"}, {"body": "clear use ok use ok issue happens try use snapshot testing actual testing like simulating clicking buttons etc enzyme mount wrapper reactdom right yes found solution use instead snapshot testing close issue nt mind example fixed", "d": "7/2018"}, {"body": "would nt call solution ignoring problem working around maybe nt need fixed somebody else fine nt want keep looking sound like bug fix", "d": "7/2018"}, {"body": "gaearon example reproducing issue without enzyme believe issue configured primary renderers since bundle copy warning gets triggered", "d": "7/2018"}, {"body": "oh right make secondary", "d": "7/2018"}, {"body": "actually still nt fully understand nt reset pop topmost provider benefit continuing track catch cases would nt catch otherwise", "d": "7/2018"}, {"body": "async rendering assume context nt mutated another renderer idle periods", "d": "7/2018"}, {"body": "potential problem marking renderer secondary typically used primary renderer fix also interesting warning concurrent renderers warning still fire renderers used sequentially sigil reset gets unmounted edit beat", "d": "7/2018"}, {"body": "async rendering assume context nt mutated another renderer idle periods clue idle periods least sigil reset provider longer mounted tree right currently persists even", "d": "7/2018"}, {"body": "aweary wan na send pr marks secondary acdlite thinks probably fine", "d": "7/2018"}, {"body": "note self isomorphic callsites like element validator nt always stack might happen outside interpreter make separate warning module", "d": "7/2018"}, {"body": "hi use issue tracker bug reports feature requests react please file issue instead thanks", "d": "7/2018"}, {"body": "something nt wo nt try still nt mean functional could return object render method least nt happy take fix", "d": "7/2018"}, {"body": "class createreactclass components isreactcomponent spec providing receiver things assumption correct unless newed lack receiver", "d": "7/2018"}, {"body": "nextjs issue specific nextjs read issue linked nt know problem gatsby suggest filing issue new context api expected work server rendering general come example nt please share us take look specific resources examples nothing special need make work", "d": "7/2018"}, {"body": "gaearon created issue gatsby repo order give practical example behavior created dedicated repository reproduces react context stores value boolean updated via method also context working fine via ssr renderwrappedcomponent context const contextproperties propertiesreduce accu property gt accu property context property return accu webpackerror typeerror read property ispoweron undefined", "d": "7/2018"}, {"body": "sounds good reproduce react alone gatsby let know", "d": "7/2018"}, {"body": "error message react context really nt related fixed", "d": "7/2018"}, {"body": "againksy please provide information requested issue template deleted including example reproduces issue", "d": "7/2018"}, {"body": "ca nt reproduce follow assuming resolved", "d": "7/2018"}, {"body": "interesting looks like standard browser behavior least firefox safari chrome javascript let select documentcreateelement select consolelog selecttype selectone let multiselect documentcreateelement select multiselectmultiple true consolelog multiselecttype selectmultiple could nt find uncover something type form control string selectmultiple multiple attribute true string selectone false nt know much use case trying access event type could use wanted know tag type could use going close nt think issue react hope helps", "d": "7/2018"}, {"body": "react issue open please", "d": "7/2018"}, {"body": "hello", "d": "7/2018"}, {"body": "hi sorry nt gotten issue yet thank submitting reproduction case make much easier identify going next steps need identify similar prior issues might inform going come hypothesis issue figure anyone bandwidth work sometimes community member volunteer first hunch something enterleaveplugin wonder svg earlier behaves differently way", "d": "7/2018"}, {"body": "nearly identical use case resolving kludge component rendered portal render self detect duplicate delete show self", "d": "7/2018"}, {"body": "hydrate initial render match server render portals currently supported server therefore hydrating portal nt make sense current limitations think want something like js state mounted false componentdidmount thissetstate mounted true render return thisstatemounted amp amp reactdomcreateportal make sense workaround need use client render nt match", "d": "7/2018"}, {"body": "thanks following dan ca nt speak max use case intention rendering portals server obviously concept makes little sense without real dom portal like use multiroot approach server comes time hydrate client declare serversiderendered roots special root component hydrate portal client end single react root inbrowser case described fiddle linked initial render match server render want hello world test div mechanism server creating portal divs external react client case portal rendering components client yields thing hypothetical serversiderendered markup original fiddle rendering portal mount nt really help misses opportunity hydrate various serverside rendered components respective dom roots", "d": "7/2018"}, {"body": "well use case somewhat convoluted true hydration loading foreign page jsp wordpress sort thing wants instantiate multiple react subapplications aware smooth load experience let google see content page contains copy initial dom recorded browser call poor man ssr final decision subapplications instantiate belongs page implement handshake protocol build single vdom tree redux store etc decide go portals thus really rerendering container node portal stick cleaning siblings render edit read marcusdarmstrong comment think use cases indeed similar except toplevel embedding mechanism", "d": "7/2018"}, {"body": "case described fiddle linked initial render match server render want hello world test div see coming explain current behavior nt much bug missing feature react point view initial render match server render portals supported server therefore portal encountered client considered new thing needs inserted rather hydrated agree hydrating portals could useful even react ssr supports", "d": "7/2018"}, {"body": "could explicitly told yes portal element already contain prerendered dom need diff nt sort passes flag overrides check existing copy dom understand would bit kludge place responsibility squarely user shoulders yet another feature probably much easier implement serverside portals entirety", "d": "7/2018"}, {"body": "think somebody implements take look pr priority us likely increase code size current ssr implementation support adds disparity work around multiple calls preserve context server either plans different ssr implementation would support modern features like error boundaries suspense think would make sense add full support portals time client server parity somebody sends pr take look interesting places code rendererindependent code tracks hydration state rendererindependent code enters hydration code path domspecific implementation hydration traversal", "d": "7/2018"}, {"body": "gaearon fair enough thanks lot pointers probably stick simple kludge unless synchronous replacement tree opposed true hydration proves issue", "d": "7/2018"}, {"body": "still hydrate nt use portals instead perform several calls mounting app", "d": "7/2018"}, {"body": "thanks hints suspected might design type thing go ahead add internal ticket subject possible somebody team might go ahead take look biggest motivations us use local state rather module state context objects really optimization anything else see prioritization goes", "d": "7/2018"}, {"body": "still hydrate nt use portals instead perform several hydrate calls mounting app guess nt quite understand get case would nt result multiple independent vdoms instead single common one build clearly contexts independent well common instances every subapp would wrapped separately proper sharing global resources redux store et al ensured wrapper components sounds bit scary ca nt sure offhand use case supported service libs currently use", "d": "7/2018"}, {"body": "maxmotovilov worth onpage runtime handles wrapping everything providers whatnot pointing store instance hydrating", "d": "7/2018"}, {"body": "clearly contexts independent well common instances right nt problem server anyway since ssr nt support portals", "d": "7/2018"}, {"body": "generally less problem server least contexts nt mutate server", "d": "7/2018"}, {"body": "marcusdarmstrong router lib use problems use case gaearon nt use ssr many htmlproducing legacy backends take care concern related single pagewide context frontend code managing commonglobal resources", "d": "7/2018"}, {"body": "routing internationalization approaches quite custom fundamentally work via mechanism shared store provided multiple roots runtime coordinates roots page", "d": "7/2018"}, {"body": "marcusdarmstrong makes sense still appears current approach building common vdom part handshake suffice time said hydrating vs replacing subtrees mostly matter optimization thanks lot feedback", "d": "7/2018"}, {"body": "running two independent dom nodes far childrenparents either even siblings parent update one forces update another leading believe feature singleton global context please advise gaearon", "d": "7/2018"}, {"body": "similar situation getderivedstatefromprops working company code ca nt share code explain seeing parent component state change turn passed along child component bool value passed adding getderivedstatefromprops child component caused child update anymore whenever new prop values passed parent value passed nothing anything set getderivedstatefromprops method looking dev console see bool value parent updated button clicked also running gdsfp method well nothing updating actually show component removing getderivedstatefromprops method child allowed start seeing updated props passed using react", "d": "7/2018"}, {"body": "usecase reusable vanilla js widgets accept custom content react subtree trivial example currently integration done method nt seem covering functionality called render function however widgets usecase target portal rendering ready moment anyone else trying integrate nonreact ui components react content", "d": "7/2018"}, {"body": "hey justboris issue solved storing reference vanilla js element inside component state way component rerender element become ready access inside render function forked codesandbox demonstrate behavior check", "d": "7/2018"}, {"body": "thank philippspiess checked approach also works multiple portals within component example rendering vanillajs table may accept react content cells consider sort official recommendation integrate vanillareact components together", "d": "7/2018"}, {"body": "react assumes use standard node resolution algorithm support packages requiring without listed dependencies use custom build environment support functionality", "d": "7/2018"}, {"body": "feature test using manual event dispatching seem work used test thinking bail maybe happens safari hitdetection logic could feature detect using elementfrompoint also behaved correctly", "d": "7/2018"}, {"body": "hello would correct surmising may plausibly good first contribution nt really dug sufficiently looks doable one nt already working chance could assign", "d": "7/2018"}, {"body": "slimhmidi ever get resolved", "d": "7/2018"}, {"body": "hamlim solution worked searched packagelock found class decorator old version dependency well updated dependencies like used old versions", "d": "7/2018"}, {"body": "great slimhmidi assume issue similar resolved please follow reproducing example thanks", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "writing lead infinite loop always asynchronous request solve problem", "d": "7/2018"}, {"body": "explained api reference componentdidupdate blog post always make comparison decide whether something", "d": "7/2018"}, {"body": "piece code follows change tried using getderivedstatefromprops componentdidupdate went infinite loopi", "d": "7/2018"}, {"body": "tried using getderivedstatefromprops componentdidupdate went infinite loop please show tried", "d": "7/2018"}, {"body": "solved problem thank anyway", "d": "7/2018"}, {"body": "checking since seem like movement adding api able check types without creating elements implementing changes using brings question compatibility currently plans future need add dependencies loosely version tightly version continue version lockstep previous versions support", "d": "7/2018"}, {"body": "previous versions react support support versions relies added support lt", "d": "7/2018"}, {"body": "looks like using also problematic since creates warnings nt correct props added", "d": "7/2018"}, {"body": "follow chromiumchrome finally confirm issue fixed week new web component syntax googlecastlauncher syntax set react component render method without issue styled using class instead classname mentioned working web components react per comment passes props attributes unchanged also created properly using createelement attaching ref within component better", "d": "7/2018"}, {"body": "cool thanks following", "d": "7/2018"}, {"body": "fixed", "d": "7/2018"}, {"body": "would consider making exception clear bug regression", "d": "7/2018"}, {"body": "gaearon assign investigate submit pr", "d": "7/2018"}, {"body": "xgqfrmsgildata hi \u6211\u4e5f\u9047\u5230\u8ddf\u4f60\u4e00\u6837\u7684\u95ee\u9898 \u6211\u7684\u89e3\u51b3\u65b9\u6848\u662f \u5728\u6240\u6709js\u4e4b\u524d import babelpolyfill \u5728webpackconfigjs \u52a0\u5165 work", "d": "7/2018"}, {"body": "issue select input however instead attaching mouse case div component attach window working user dragsmouse mouse moves chart need capture still nt access parent renders canvas benclive example add event handler everything work expected case provided window event handlers ca nt persist looking help resorted putting handler components render", "d": "7/2018"}, {"body": "following statement logo mit license", "d": "7/2018"}, {"body": "fixed part buggy thanks report", "d": "7/2018"}, {"body": "jquense kind makes hard overcome change onchange handler longer report true true adding empty function seems kind hacky", "d": "7/2018"}, {"body": "ran well structured data testing tool continued recognize camelcase props index puked results definitely google problem react one raises different question react passes unknown attributes hard coded seems omitting would clearer behavior save small amount size react bundle save small amount processing checking known prop names", "d": "7/2018"}, {"body": "attributes hard coded nt understand question troubles practical reasons one said earlier please file new issue proposed changes specific attributes causing issues thanks", "d": "7/2018"}, {"body": "react maybe development actually aware etc attributes even suggests use alllowercase attributes given real use rendering html attributes react passes unknown attributes curious lines deleted", "d": "7/2018"}, {"body": "lines nt exist production version first match fixture test use second one devonly helper mapping eliminated production", "d": "7/2018"}, {"body": "ah gotcha thx info opened micro data case per suggestion", "d": "7/2018"}, {"body": "hey everyone need context data lifecycle methods followed hoc approach seeing first comments passed context data props everything working expected want write unit test cases components unable would really appreciate someone could share write test cases scenario using enzyme jest troubles", "d": "7/2018"}, {"body": "amnarora company work following note might consensus export naked component well import tests manually pass props eg jsx mycomponentjs export class mycomponent extends component export default hoc mycomponent mycomponentspecjs import mycomponent othercomponentsjs import mycomponent also adding discussion encountered issue created consumes multiple context", "d": "7/2018"}, {"body": "everything working expected want write unit test cases components unable amnarora unable write unit test tried error seeing", "d": "7/2018"}, {"body": "pgarciacamou firstly thanks quick reply well finding anything web posting query came solution mentioned test cases working seems like work around take look discuss team thanks", "d": "7/2018"}, {"body": "bvaughn thing earlier using redux state management shallow copied component used dive instance methods get instance component none methods available using context api nt using methods getting following error unknown node tag", "d": "7/2018"}, {"body": "gotcha sound like issues version enzyme using properly supporting new context api unfortunate", "d": "7/2018"}, {"body": "fixed", "d": "7/2018"}, {"body": "binding tour function try bind constructor like constructor props super binsings thismyfunction thismyfunctionbind binding render create function render cause small performance issue best practice bind class constructor instead", "d": "7/2018"}, {"body": "hello gaearon big fan react buti work vue work working vue months still prefere react today found keepalive first time found something better react react feature anyway think something really increreble maybe something react could nt know doc help know", "d": "7/2018"}, {"body": "wanted see movement bug persists mobile safari ios issue languishing really great see resolution", "d": "7/2018"}, {"body": "thanks prod circle brandon see next steps", "d": "7/2018"}, {"body": "hitting", "d": "7/2018"}, {"body": "itssumitrai issue problem tag please file new issue reproducing example dgrcode knowing hit nt add anything conversation comments notify everybody subscribed thread best avoid commenting nt add new info like share details help get fixed please let us know", "d": "7/2018"}, {"body": "someone wants take another look specifically welcome likely lead us closer fixing", "d": "7/2018"}, {"body": "gaearon hi dan would like investigate problem try help fix", "d": "7/2018"}, {"body": "sounds great good starting point", "d": "7/2018"}, {"body": "gaearon hi dan research moment basically confirm kevinzwhuang conclusions fiber text inside option contains without parentnode happens flattening children bug nt reproduced replace children flattening filtering array produce new bugs tests failed nt fit decision also bug nt reproduced use construction like mean use think easiest solution would changing flattening replacing right way get expects one string child sure need fiber landed way cool dip react sources", "d": "7/2018"}, {"body": "think easiest solution would changing flattening replacing right way sounds good wan na try", "d": "7/2018"}, {"body": "yeah course", "d": "7/2018"}, {"body": "tried change flattening nt fix problems became reason new issues flattening cause different states dom flattened children fiber contains children possible solution allow react set text content option textarea solves problems warning incorrect children inside validatedomnesting called", "d": "7/2018"}, {"body": "gaearon hi dan created pr solves issue added example fixtures would easy test let discuss solution", "d": "7/2018"}, {"body": "complicates testing want assert specific input focused assert must workaround", "d": "7/2018"}, {"body": "please provide solution problem", "d": "7/2018"}, {"body": "magicmark gaearon found way work around issue avoid using dangerouslysetinnerhtml using html parser package reacthtmlparser basically parses html outputs react elements using dangerouslysetinnerhtml", "d": "7/2018"}, {"body": "curious anyone found existing eslint rule warns errors sentry logs filled errors months great identify issue sure able team remember convention though seems lintable", "d": "7/2018"}, {"body": "react common behaviour dealing modified dom trees assume override changes regain certainty dom state would ok fully invalidate rerender fails", "d": "7/2018"}, {"body": "hosted version repro using latest release see issue still occurring", "d": "7/2018"}, {"body": "dropping comment thread nt really mentioned specifically situation using bundler want import react various components use natively browser ie tell nt possible today instead include umd version react via tag cdn assume presence window module write mypagehtml mycomponentjs import anothercomponent assetsscriptscomponentsanothercomponentjs windowreactdomrender windowreactcreateelement anothercomponent documentgetelementbyid root anothercomponentjs export default class anothercomponent extends windowreactcomponent react import cdn would fantastic would make prototyping browser quick easy still able maintain separation files one thing always felt sacrificing using react without bundler ability separate components utility functions etc file browser support native es modules write react components separate files browser consume written granted using jsx even using jsx could transpire files place via build step imports would still work browser js assetsscriptsentryjs import react import react import relatedposts assetsscriptscomponentsrelatedpostsjs reactdomrender reactcreateelement relatedposts documentgetelementbyid root assetsscriptscomponentsrelatedpostsjs import react import listitem assetsscriptscomponentslistitemjs export default class mycomponent extends reactcomponent componentdidmount fetch data render return reactcreateelement ul thisstateitemsmap item gt reactcreateelement listitem item item assetsscriptscomponentslistitemjs import react export default function listitem props return reactcreateelement li null sure people would argue typing cdn url time problem problem people trying fix tradeoffs worth changingupdating url simple findreplace use case outweighs trouble setting bundler react support something like would need tooling using browser could ship code like personal projects assume modern browsers use react progressive enhancement page makes fantastic come back code base months nt change bunch tooling apis even npm package manager using apis browser nothing else fwiw ifwhen react ship support like think could valuable show could use react like docs teaching leverage react component model separating components logic via file nt need bundler use native import react cdn local copy", "d": "7/2018"}, {"body": "interested", "d": "7/2018"}, {"body": "status input types utilize dom update number", "d": "7/2018"}, {"body": "think could cool things figure react handle presence react handle converting value attribute like assign react set value attribute like happens assign nonnumber input likewise domexception raised browser allowed throw react sift work might good candidate rfc think", "d": "7/2018"}, {"body": "react handle presence personal suggestion would extend value prop also accept date number values input datetimedatetime input prop date set input number input prop number set otherwise call input set value way nt worry attribute takes precedence react handle converting value attribute like assign react set value attribute like think would simplest happens assign nonnumber input likewise domexception raised browser allowed throw react sift first suggestion would take care issue work suggest giving treatment value", "d": "7/2018"}, {"body": "jquense problem fiddle actually uses produces following console warning use props instead setting option", "d": "7/2018"}, {"body": "come across long time web dev recent react user nt possible without complained console", "d": "7/2018"}, {"body": "submitted patch exactly", "d": "7/2018"}, {"body": "still causing tons noise unit tests anyone working", "d": "7/2018"}, {"body": "aweary good stuff mate little problem called new tab opened programmatically works well every browser except ie help making work awful browser many thanks stacko", "d": "7/2018"}, {"body": "solved project hacky way attaching onblur event listener via input ref remove changing input type number using settimeout jump js processing thread reattach event listener javascript render const step thispropsstep thisgetstep let hasfocusprops thisdomnode amp amp thisdomnoderemoveeventlistener blur thisonblur thisstatehasfocus hasfocusprops step type number min step settimeout gt thisdomnodeaddeventlistener blur thisonblur false else hasfocusprops type text return componentwillunmount thisdomnode amp amp thisdomnoderemoveeventlistener blur thisonblur", "d": "7/2018"}, {"body": "hi guys see use ssr need use react turn bundlejs work simple page routes cool nt state", "d": "7/2018"}, {"body": "wuweiweiwu following twitter able reproduce form restore effect following example example likes open wrong html file might view basically enter information submit form form fields cleared click back button form fields restored history pops back original form history entry works sending postmessage event form document effectively letting see behavior without navigating backandforth main window wonder could demonstrate react far tell change input events fired click back", "d": "7/2018"}, {"body": "wonder render straight iframe", "d": "7/2018"}, {"body": "trycatching rendertostring method also helpful server side mentioned following issue", "d": "7/2018"}, {"body": "use dllreferenceplugin problem happen tried ways none works", "d": "7/2018"}, {"body": "nt end adding pushpop debugframe relying would break reactdomserver react example reconsider later keeping track reentrancy reactdomserver restore outer stack implementation exit outermost reactdomserver call later probably something similar crossrenderer calls client except simpler reentrancy within one renderer instance", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "fatfisz kentcdodds could please show radio inputs", "d": "7/2018"}, {"body": "think label issue changed good first issue good first issue taken working quite time reached quite progress", "d": "7/2018"}, {"body": "seanmadsen works less obtrusive workaround nt necessary according spec preventing default cancel click event since requires pointer start pointer end updates react folks nhunzaker", "d": "7/2018"}, {"body": "sorry let slide wonder event plugin getting way investigate event plugins fire touch", "d": "7/2018"}, {"body": "thanks", "d": "7/2018"}, {"body": "fun looks like set syntheticevent native event reason synthetic eventpreventdefault event implementation nt working preventdefault function thisdefaultprevented true const event thisnativeevent event return figure", "d": "7/2018"}, {"body": "think see issue react attaches events document looks like chrome anyway setting set event attached document also true maybe another reason revisit attach event per react container root rather document change like serious wonder another way could achieve cc philippspiess", "d": "7/2018"}, {"body": "nhunzaker think problem react adds event listeners passive new default passive event listeners allow calling also check checking example makes pretty clear following line console tap times message pop index intervention unable preventdefault inside passive event listener due target treated passive see update example mark event listeners works like expected overlooking something simple workaround react add native event listener using option also possible featuredetect passiveevent listener support", "d": "7/2018"}, {"body": "good reasoning introducing temporary api meantime best way make pure sfc create purecomponent class wraps sfc point sfc wrapping class style component", "d": "7/2018"}, {"body": "one thing noticing newer react apis nt play well classbased components needs passed function hoc must used workaround granted nt affect application code much library based stuff ca nt use classbased lifecycle methods unless create yet another hoc workaround sfcs treated pure wary using", "d": "7/2018"}, {"body": "something similar happens default value nt let erase zero would natural erased start typing digits stays even though nt present model jsfiddle noticed already referenced far know nt fixed somebody still looking quick solution nt parse value fixed integers interpreting empty string view model vice versa although still possible leading zeros way try hard first typing nonzeros typing leading zeros real issue integers number saved correctly long parsed parseint otherwise saved disadvantage see never type first digit input value falls back confusing user", "d": "7/2018"}, {"body": "thanks lot", "d": "7/2018"}, {"body": "think boolean attributes allowed declared css framework detects custom attributes type instead kinda annoying take look", "d": "7/2018"}, {"body": "guess biggest performance hit would stuff ref element causes layout reflow browser pretty much stuff would want access ref element", "d": "7/2018"}, {"body": "update", "d": "7/2018"}, {"body": "adamnoakes fbjs dependency removed entirely", "d": "7/2018"}, {"body": "ah believe closed thanks ping", "d": "7/2018"}, {"body": "gaearon please forgive wrong hard time understanding code keeps references original children rendered cloned version right old children closed yes makes call non rendered original children", "d": "7/2018"}, {"body": "think still valid since using localonly store global state tree hmr wants rehydrate needs way determine exactly store looking new component rendered still think access tree structure react unique stable key represents path current component would give us right solution would also help sense could use tree paths react gives externalize state tree somewhere would generic tied statesetstate current solution hacky buggy relies dom structure changes based state really love way access would would almost year ago make day day hell lot efficient", "d": "7/2018"}, {"body": "would get benefit react responsible generating unique instead manually multiple forms page cases nt useful anything great react could take ref automatically handle ing", "d": "7/2018"}, {"body": "reactify nt work use override instead extends extdefine", "d": "7/2018"}, {"body": "gaearon wondering motivation behind restriction regards tech side except conceptual collision", "d": "7/2018"}, {"body": "work around issue tried updating react didnt fix issue", "d": "7/2018"}, {"body": "abbybhat oh send reproduction case", "d": "7/2018"}, {"body": "nhunzaker reproduction case already provided luisrudge updated password prompt ie showing password prompt ie showing", "d": "7/2018"}, {"body": "usecase got togglebutton component works way radio button however like create new syntheticevent togglebutton prop api components consistent right way far know create true syntheticevent let togglebutton render additional radio button offscreen trigger create dispatch events exactly pretty", "d": "7/2018"}, {"body": "seems broken react experiencing bug", "d": "7/2018"}, {"body": "firefox issue tracker appears quirk longer appears case firefox current firefox esr version using jsfiddle react anyway keyboard events trigger onchange going go ahead close specific issues way react handles file followup issue", "d": "7/2018"}, {"body": "far test using new jsfiddle react still issue", "d": "7/2018"}, {"body": "unfortunately facebook inapp browser whatever sends user agents like nt seem stick spec giving us thousands access log entries per day nonunescaped query parameters image urls ironically escaping done react servers", "d": "7/2018"}, {"body": "made package render video tag using pretty specific use case animated gif like videos feel free send pr open issue want something else", "d": "7/2018"}, {"body": "keitig working fork vueloader designed react", "d": "7/2018"}, {"body": "makes sad", "d": "7/2018"}, {"body": "ran issue working windowgetselection workarounds onmouseout onmouseup documentonselectstart would nice input onfocusout grab selection event time", "d": "7/2018"}, {"body": "circling back years seems like root problem remains input value reports trimmed spaces without way detect additional white space far see control implementation tracked user input sophisticated keypress system feels fraught edge cases going close let keep conversation going new idea approach comes", "d": "7/2018"}, {"body": "perf benchmarks found string compares sometimes quite slow stringcompares propnames predefined values need handle specially nt even arbitrarily long data compares jimfb share benchmark maybe things changed since appears string comparison quite fast js implementations use string interning", "d": "7/2018"}, {"body": "even better approach one mentioned", "d": "7/2018"}, {"body": "yes use navigation frameworks documentation twice size react native professionel", "d": "7/2018"}, {"body": "hi facing issue check box fix using defaultchecked instead checked makes clickable html rerendering", "d": "7/2018"}, {"body": "hey deepaa order give problem visibility could file new issue provide test case using code sample template react code sample template", "d": "7/2018"}, {"body": "nermand expecting see already rendered component", "d": "7/2018"}, {"body": "use case need call function dom element created stateless component dom loaded would normally put within ended works perfectly seems bit hacky jsx const carousel slides init props gt let carousel edit since come learn also possible simply frankly arrived throwing ton proverbial shit wall seeing sticks nt understand works still suspecting recommended way achieve desired outcome", "d": "7/2018"}, {"body": "test cases aweary updated native js repeating click events firefox developer edition microsoft edge internet explorer windows event chrome version official build safari version potentially related bug submitted blink webkit spec issue raised rather introducing patch might worth us closing ticket letting whatwg decide right approach take may inconsistent vendors issue affecting react users disproportionally", "d": "7/2018"}, {"body": "rather introducing patch might worth us closing ticket letting whatwg decide right approach take may inconsistent vendor issue affecting react users disproportionally agree say wait see whatwg decides also avoids possible regressions change event plugin historically difficult regression test", "d": "7/2018"}, {"body": "closing happy pick discussion whatwg makes decision", "d": "7/2018"}, {"body": "fuck u cuzz sat jul pm nathan hunzaker notifications githubcom wrote closed receiving subscribed thread reply email directly view github mute thread", "d": "7/2018"}, {"body": "fire microsoft edge nhunzaker although rendering select box weird nt appear expand click", "d": "7/2018"}, {"body": "jasonwilliams confirm wonder close focus renderingexpansion issue separately", "d": "7/2018"}, {"body": "nhunzaker fire internet explorer rendering issue edge think close open new issue", "d": "7/2018"}, {"body": "sounds good made quick write travel bandwidth issues make hard look much least start talk thanks everyone weighing", "d": "7/2018"}, {"body": "reminder three years still progress would really really help day day working impressively hacky buggy workarounds keep spending days patching simple keypath hook exposed react would go away could finally reach development nirvana brett victor showed us years ago", "d": "7/2018"}, {"body": "natew anything written solution use experience test renderer devtools really difficult keep stable api", "d": "7/2018"}, {"body": "sebmarkbage bit embarrassing basically using dom path view mounts check past state course gets blown away many cases sort rehydrate rerender tree subcomponent recheck rehydrate etc still breaks quite cases using reacthotloader essentially store system outside setstate checked see could persist dom key path generate reacthotloader wrapped parent component check remount use find right key weirdly nt see state preserved even setstate need bit time set better isolated example work way rhl preserved state across hot reloads could piggy back like would probably good enough edit actually experimentation found react import rhl always logging error causing state reset many trees somehow worked around nt even notice nt use setstate much breaking things working back discovered import order bug patching let simplify rely hoc simple unique id state passes store provider components seems working well", "d": "7/2018"}, {"body": "bhamodi hey ever completed", "d": "7/2018"}, {"body": "marissajasso yes done check style guide", "d": "7/2018"}, {"body": "sure best practice author always call base class constructor may arguments may good idea implementation component", "d": "7/2018"}, {"body": "code returns array nodes given text pattern js const highlightpattern text pattern gt const splittext textsplit pattern splittextlength lt return text const matches textmatch pattern return splittextreduce arr element index gt matches index arr element matches index arr element", "d": "7/2018"}, {"body": "saw closed appears documentation remains unchanged jimfb pr seems merged sure ever became since years ago perhaps language reverted original form think important takeaway pomax original post documentation always explicit possible fact two people react team responded saying things along lines fact lets operate updated dom implies postrender highlights problem nothing widely used ever implied lends assuming reader knowledge understanding code people wrote", "d": "7/2018"}, {"body": "chime componentdidupdate called regardless whether dom changes case render runs change dom virtual dom componentdidupdate still fire sorry obvious", "d": "7/2018"}, {"body": "nt work", "d": "7/2018"}, {"body": "right seems work pretty sweet js describe gt beforeall gt jestspyon console error mockimplementation error gt throw error afterall gt consoleerrormockrestore testing convert every", "d": "7/2018"}, {"body": "getting url backend made new tab opening blocked switching source url frontend open window seems trick", "d": "7/2018"}, {"body": "case want download file opening url new tab requesting url backend async window would nt work ideas franciscopinvast", "d": "7/2018"}, {"body": "case want download file opening url new tab requesting url backend async window would nt work ideas dancherb make backend endpoint httpredirects url quick get jsredirects print js end body flush spinner server immediately downloading page nt feel empty correct url url ready open endpoint new tab immediately let hang", "d": "7/2018"}, {"body": "anyone looking decent solution reactdebounceinput works nicely debounces onchange event handler nt triggered data entry stopped timeout period tried text inputs far", "d": "7/2018"}, {"body": "best trick moment", "d": "7/2018"}, {"body": "ericflo sophiebits", "d": "7/2018"}, {"body": "issue still seems persist updates", "d": "7/2018"}, {"body": "pixelatex aarbel see answer bit basically react listens event one onchange answer listens", "d": "7/2018"}, {"body": "dominictobias tried need actual click somewhere page make work event nt register", "d": "7/2018"}, {"body": "struggling issue day total definitely list work desktop chrome react fires prematurely form filled yet combination css transition fires time ca nt wake page pixelatex mentioned even fire click page fire event solutions work unfortunately html contain autofilled value unless poke page closest one type console wake page far programmatically work dominictobias solution works desktop chrome", "d": "7/2018"}, {"body": "actually dirty hack use solution prev comment rely comes dirtyness saved form data valid data catch transition autofill completed event enable submit button let say css constructor inside react component class inside jsx ps basic components like use prop instead", "d": "7/2018"}, {"body": "latest chrome desktop ios safari wrapping elements cause autocomplete emit onchange event", "d": "7/2018"}, {"body": "rxb wrapping", "d": "7/2018"}, {"body": "basarat sorry forgot code markdown tag disappeared tag", "d": "7/2018"}, {"body": "days research got solution headache problem solution make unique id props react", "d": "7/2018"}, {"body": "reproducable example", "d": "7/2018"}, {"body": "slowing development time", "d": "7/2018"}, {"body": "try ant design kit see issue present", "d": "7/2018"}, {"body": "htmlfor son redacted took hour find hehe", "d": "7/2018"}, {"body": "seen console warning pointing problem", "d": "7/2018"}, {"body": "sophiebits looking console would way easy sure really convinced written styledcomponent went road aha moment remembering react new nt always use html attribute names felt real dumb", "d": "7/2018"}]