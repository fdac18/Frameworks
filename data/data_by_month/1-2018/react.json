[{"title": "datareactid property", "body": "hi many projects written reactjs one project datareactid property existing others existing", "num": "12128", "d": "1/2018"}, {"title": "fix secure origins allowed nginx", "body": "nt want use thanks", "num": "12125", "d": "1/2018"}, {"title": "unexpected dom elements list rendering duplicate keys", "body": "want request feature report bug reporting bug current behavior unexpected dom elements list rendering current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example switch tabs unexpected dom elements expected behavior unexpected dom elements versions react browser os affected issue work previous versions react tested react gt extra elements react duplicate keys mistakes dom elements anyway", "num": "12124", "d": "1/2018"}, {"title": "concating react resources", "body": "hi want use many libraries frameworks project concat react framework like angular vue ember", "num": "12122", "d": "1/2018"}, {"title": "add seo support reactjs without using ssr", "body": "hi team currently working seo reactjs applicationso thinking add different meta tags route figured using ssr converting applications use ssr seo support good option tia", "num": "12121", "d": "1/2018"}, {"title": "know onerror resons", "body": "", "num": "12120", "d": "1/2018"}, {"title": "error deployed react website using react error", "body": "visit full message use nonminified dev environment full errors additional helpful warnings", "num": "12119", "d": "1/2018"}, {"title": "automatically assigning keys", "body": "want request feature report bug want request feature current behavior currently developer manually assign key element array even knows elements array order change expected behavior simply prefer fourth methods second method may lead conflicts third method makes feel dirty things touching internal cogs react versions react browser os affected issue work previous versions react react browser os relevant", "num": "12113", "d": "1/2018"}, {"title": "error save component ref state", "body": "want request feature report bug bug current behavior error save component ref state current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior seems like ref callback called many times every time different argument fix problem nt know versions react browser os affected issue work previous versions react react", "num": "12112", "d": "1/2018"}, {"title": "document use setstate componentwillunmount", "body": "want request feature report bug feature current behavior excerpt documentation componentwillunmount invoked immediately component unmounted destroyed perform necessary cleanup method invalidating timers canceling network requests cleaning subscriptions created componentdidmount docs nt mention used consider following example undone timer time since timer invalidated place reset state class helloworld extends component state showgreeting false onclick thissetstate showgreeting true componentwillunmount cleartimeout thistimer legal call given asynchronous feels may invoked component actually unmounted may produce warning understanding actually pumps state dispatch queue manually ensure state changes land component late current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior sure versions react browser os affected issue work previous versions react webkit", "num": "12111", "d": "1/2018"}, {"title": "router react", "body": "hi using packages like reactrouter reactrouterdom react default router npm packages like reactrouter reactrouterdom part react", "num": "12110", "d": "1/2018"}, {"title": "input accounted form", "body": "want request feature report bug bug current behavior inputs rendered react controlled uncontrolled accounted submitting forms instance html amp whereas html jsx function myinput props return ca nt get fully working example codesandbox requires looking resulting http request jquery serialize form expected behavior second example produce react components usable regular forms note browser inspectors show expected react rendered inputs however seems attribute uses getters setters inputs whereas plain html inputs strings versions react browser os affected issue work previous versions react react tested chromium firefox archlinux", "num": "12108", "d": "1/2018"}, {"title": "reacttestrenderer totree yet know handle nodes", "body": "want request feature report bug bug current behavior invariant violation totree yet know handle nodes expected behavior returns tree versions react browser os affected issue work previous versions react", "num": "12106", "d": "1/2018"}, {"title": "ca nt edit wiki", "body": "hello ca nt edit wiki add website list editing disabled", "num": "12104", "d": "1/2018"}, {"title": "setstate callback never called component state nt update production", "body": "using react running strange behavior things work fine locally production using meteor stops working noticed callback never called dom nt reflect changes devtools nt reflect changes calling nt anything hand returns object correct updated state returns object correct updated state sure problem side somehow fairly complex component nt even write make matters worse thought maybe could get tips go along debugging frustrating issue", "num": "12102", "d": "1/2018"}, {"title": "access component child instance", "body": "creating small generic state management based object writing react helper found issue create hoc need access react looking source code component nt seem like canshould standalone function library able used independently making everyone download react feasible navigated official hoc documentation past issues google could nt find way retrieve passed component hoc code working yet repo linked js load whole react independently project type import component react const connect opts gt passed gt return class withstate extends component export default connect find hack make work seems like one fragile pieces code ever written relying differences modules commonjs js const connect opts gt passed gt const react require react return class withstate extends reactcomponent export default connect way import react used reactexclusive helper library questionfeature request possible access constructor parent child could make possible somehow something like would ideal think way javascriptreact works figured ask since chances know way better whether something like possible want request feature report bug request feature think", "num": "12101", "d": "1/2018"}, {"title": "extend classname manipulation", "body": "currently string manipulation outside react starring classnames works perfectly writing code feels little verbose jsx prop plain string directly mapped dom element property let create polymorphic frankenstein keep close pure jsdom possible suggestion changing adding since long time ago microsoft dom element method works greatly direct manipulation would nt fit jsx declarative syntax extending components prop would work pretty much like classnames mapping class names keys conditional values upon rendering component react would merge single string passed render good old plain string angular something like long time prop plain string ngclass directive makes magic", "num": "12099", "d": "1/2018"}, {"title": "ca nt use reactfragment", "body": "want request feature report bug bug current behavior broken runtime current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example use syntax render mapped fragments try render component get met error expected behavior expect component render works fine rendering array nt want type comma elements also works fine use semantically correct versions react browser os affected issue work previous versions react react chrome version official build mac", "num": "12097", "d": "1/2018"}, {"title": "typeerror read property state undefined createreactclass", "body": "currently attempting create button red text yes click button changes green color text confirm final stage action takes place currently defining state changes click button initial color final color click however currently getting error typeerror read property state undefined pointing line whenever code compiled webpage defining initial state behavior click code inside table render anyone ideas brand new react apologize obvious also learned react using createclass trying piece together make work new package advice greatly appreciated react chrome", "num": "12096", "d": "1/2018"}, {"title": "trying run createreactapp command", "body": "f createreactapp helloworld creating new react app f installing packages might take couple minutes installing react reactdom reactscripts npm err unexpected end json input parsing near dirrecursive npm err complete log run found npm err c aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed deleting generated file packagejson deleting helloworld f done npm version", "num": "12095", "d": "1/2018"}, {"title": "error event fired twice development mode", "body": "want request feature report bug bug current behavior error event fired twice development mode example see gt gt gt gt gt error logged twice expect see note issue nt happen production version react current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example codepen demo static html reproducing problem hello world", "num": "12093", "d": "1/2018"}, {"title": "native ecmascript module react reactdom", "body": "want request feature report bug probably feature request since root considering build tooling questions proceed efforts current behavior native ecmascript module output current build tools nt easily allow adding native ecmascript module build target investigating workflow using native ecmascript module version react reactdom browsers found implementation outputs native ecmascript modules one use wrapped version transpiled versions added export statements transpiling would necessary browsers supporting ecmascript modules natively even spread operators supported browsers although fully supported ast generators tools due fact spec nt finalised test projects different build tools built simple proof concept outputs ecmascript modules used modern browsers challenge question tools settings used poc contradict current build settings tools wondering something added build target something better suitable external repo time would love make happen would like hear something deemed worth would preferred way implementing investigation find easy way without changing considerable amount code build tooling making relatively high risk endeavour webpack vs rollup different settings needed babel named exports instead commonjs moduleexports pattern name effects build process make somewhat complex clarify things links poc repo outputs native ecmascript modules react reactdom repo minimal setup test working app made modules browser expected behavior preferably build target native ecmascript modules versions react browser os affected issue work previous versions react relevant", "num": "12091", "d": "1/2018"}, {"title": "use setstate componentwillreceiveprops", "body": "use js componentwillreceiveprops nextprops thissetstate key value thisdowhatever dowhatever const thisprops new propsold propsnextpropsthisprops", "num": "12090", "d": "1/2018"}, {"title": "debug renderphase side effects strictmode dev", "body": "relates pr currently doubleinvoke component reducer functions feature flag also inside subtree however likely new element present production apps believe important negatively impact performance strict warnings like warnings impact dev mode doubleinvoked lifecycles impact dev prod actually good thing facebook since helps us identify potential bugs production easily limit impact developers think would complicate story external users negative performance impact propose continue observe flag dev prod since impacts facebook doubleinvoke strict mode dev enabling behavior greatly complicates incremental rendering tests see also converting internal explicitly override featureflag running think okay since tests break use nooprenderer published npm", "num": "12089", "d": "1/2018"}, {"title": "question react app embedded div container setstate refreshes container", "body": "observed peculiar behavior unsure whether design issue specific environment basically react app rendering div included web container trigger component local state change calling setstate whole web component page refreshed thus loading react app scratch loosing app state expecting setstate refresh app whole page nt expected behavior proper way react scenario thanks advance", "num": "12087", "d": "1/2018"}, {"title": "remove componentchildcontexttypes componentcontexttypes proptypes requirements context", "body": "since currently undergoing work context api feel like may good time bring projects design decision use internal components made early assumption use may well go whole way use well enforcing declaration single react feature nt make much sense optional required get around enforcement components end looking like following javascript makecontextjs import proptypes proptypes const makecontext keys gt const obj keysforeach key gt obj key proptypesany return obj export default makecontext javascript contexttypesjs import makecontext makecontext export default makecontext somevalue someothervalue javascript parentcomponentjs import contexttypes contexttypes import childcomponent childcomponent class parentcomponent extends reactcomponent getchildcontext return somevalue someothervalue false render return parentcomponentchildcontexttypes contexttypes javascript childcomponentjs import contexttypes contexttypes const childcomponent props somevalue gt somevalue childcomponentcontexttypes contexttypes see declaration essentially pointless yet forced api enforces seems much like developer decide whether rule enforced", "num": "12086", "d": "1/2018"}, {"title": "feature request middleware", "body": "incomplete draft feature think could really cool replace higher order components context way think component spirit react know feature feasible desirable react especially would lead bigger api surface proposal written documentation give feel would use react middleware middleware applied somewhere component tree instantiated child components instantiated mount context child components means child components depth middleware used like normal components works slightly differently middleware element used added middleware stack already middleware stack removed stack pushed end innermost props simplified example addition actual classes stack also includes recent props roughly works lifecycle methods additions existing lifecycle methods mounting new middlewareshouldmiddlewaremount new middlewareshouldmiddlewarepropagate component constructor new middleware constructor new middleware middlewarewillmount component componentwillmount component render new middleware interceptrender component componentdidmount unmounting new middleware middlewarewillunmount static shouldmiddlewaremount reactcomponent determine current middleware apply component method nt implemented middleware always applied middleware middleware stack method called every time component constructed example javascript class transforminlinestyles extends reactmiddleware mount middleware set transforminlinestyles truthy value children given component still enable middleware static shouldmiddlewaremount component return componenttransforminlinestyles const props gt const b props gt btransforminlinestyles true const app gt applied applied b static shouldmiddlewarepropagate reactcomponent determine whether middleware remain middleware stack excluded subtree given component specified returns false words default behavior middleware propagate useful want limit middleware affecting deeply nested children also useful giving middleware access immediate children example javascript import react react class providetheme extends reactmiddleware static stoppropagation props gt propschildren static shouldmiddlewarepropagate component return component thisstoppropagation const app gt middleware stack providetheme middleware stack b middleware stack c providetheme middlewarewillmount reactinstance called child component calls componentwillmount good place initialize state middleware instance middlewarewillunmount reactinstance called child component calls componentwillunmount example na\u00efve example could used trigger automatic updates mobx javascript class observer extends reactmiddleware middlewarewillmount reactinstance thisdispose autorun gt middlewarewillunmount reactinstance stop listening changes mobx thisdispose interceptrender children interceptrender called result render function component resulting value used render dom example example middleware transforms object classes string result works similarly ngclass works angularjs javascript class objectclassnames extends reactmiddleware life cycle method intercept render method recursively loop children performing thistransformprops props interceptrender children return reactchildrenmap children child gt reactisvalidelement child return child return child props thistransformprops childprops children thisinterceptrender childchildren child object classname call thistransformclassname transformprops props props propsclassname typeof propsclassname object return props concatenate truthy keys classname object string transformclassname classname const result const widget props gt const app gt middleware react middleware replace two problematic patterns used react context context react docs says use context context however useful feature people continue use abuse forseeable future react router started abusing context recent version shows clearly need middleware propose would able inject props arbitrary subtree app performance implications would ideal scenario libraries react router relevant props context rarely changes middleware shouldcomponentupdate still function like would expect higher order components primal rule programming dry using mobx react must use observer decorator reactive classes nt really big deal include would reduce size every single observer component two lines importantly would nt forget creating higher order component static properties longer available package hoistnonreactstatic designed able access static properties higher order components transparently static property initialized lifecycle methods component however proxied creating higher order components also messy affair middleware could achive thing react way replace connect reactredux could set shouldmiddlewarepropagate return false would affect one component alternatively could use static properties mapstatetoprops mapdispatchtoprops", "num": "12085", "d": "1/2018"}, {"title": "automatically fix javascript errors pull requests", "body": "run sticklerci service aimed improving code quality simplifying code review automating code feedback pull requests launched autofixing javascript pull request commits javascript open source project service save time brain power automatically fixing style errors interested trying product submit pull request configuration file maintainer need enable webhooks logging enabling webhook thank", "num": "12079", "d": "1/2018"}, {"title": "image srcset bug", "body": "hi problems img tag srcset inside small components function latestgriditem item const id itemid const title itemtitle const name itemname const posterpath itembackdroppath const testposterpath const postersrc const srcset return processenvpublicurl movie id gt title undefined title name failed parsing srcset attribute value since unknown descriptor setvalueforattribute setvalueforproperty setinitialdomproperties setinitialproperties finalizeinitialchildren completework completeunitofwork performunitofwork workloop callcallback invokeguardedcallbackdev invokeguardedcallback renderroot performworkonroot performwork requestwork scheduleworkimpl schedulework enqueuesetstate nodemodulesreactcjsreactdevelopmentjscomponentsetstate anonymous anonymous promise resolved async srcapitmdbapijstmdbapigetmoviesnowplaying homethisgetnowplayingmovies componentwillmount callcomponentwillmount mountclassinstance updateclasscomponent beginwork performunitofwork workloop callcallback invokeguardedcallbackdev invokeguardedcallback renderroot performworkonroot performwork requestwork scheduleworkimpl schedulework scheduletoplevelupdate updatecontainer anonymous unbatchedupdates rendersubtreeintocontainer render srcindexjs webpackrequire bootstrap fn bootstrap mediascss webpackrequire bootstrap anonymous bootstrap anonymous bootstrap dropped srcset candidate autoprefixer babelcore babeleslint babeljest babelloader babelpresetreactapp babelruntime casesensitivepathswebpackplugin chalk cssloader dotenv eslint eslintconfigreactapp eslintloader eslintpluginflowtype eslintpluginimport eslintpluginreact extracttextwebpackplugin fileloader fsextra htmlwebpackplugin jest lodash nodesass objectassign postcssflexbugsfixes postcssloader promise raf react reactautosuggest reactdevutils reactdom reactgooglematerialicons reacthelmet reactrouterdom reacttransitiongroup sassloader styleloader swprecachewebpackplugin urlloader webpack webpackdevserver webpackmanifestplugin whatwgfetch need help thank", "num": "12077", "d": "1/2018"}, {"title": "update rolluppluginnoderesolve", "body": "want request feature report bug feature current behavior update rolluppluginnoderesolve external option instead noderesolve getplugins createbundle rimraf processtickcallback expected behavior like use rolluppluginnoderesolve debian packaging react dependency gitlab aptget install gitlab works setup gitlab server pr removed option versions react browser os affected issue work previous versions react dependent react version build dependency", "num": "12076", "d": "1/2018"}, {"title": "expose component methods", "body": "want request feature report bug request feature current behavior methods components exposed expected behavior would like able expose methods component used container component done attribute similar ref like example expose example imagine car component wheel component car would like rotate wheels using method wheels expose cars something like class car extends component constructor props super props rotatewheels thiswheelsrotate render return class wheels extends component constructor props super props thisstate wheelrotation rotatewheels angle thissetstate wheelrotation angle render const wheelstyle transform return versions react browser os affected issue work previous versions react versions browsers", "num": "12074", "d": "1/2018"}, {"title": "fabric todos", "body": "notes spillovers fabric renderer commit update currentprops updates commit phase needs host effect marked need hook host updates persistent mode x actually use currentprops extracting events component tree resuming need able reuse host nodes used another thread always clone direct siblings changed node case relayout", "num": "12073", "d": "1/2018"}, {"title": "controlled fields rerender setstate call even though data changed", "body": "want request feature report bug reporting bug current behavior basically many controlled fields app currently developing normally want rerender values changed onchange event rerender every time setstate gets called anywhere within component parent component even tried creating custom component contains setting shouldcomponentupdate return false seems ignore command completely weird case consolelog child component render function nt get executed field gets rerendered nonetheless issue causing major performance problems app hope someone addresses issue fast possible continue working react project maybe someone provide temporary workaround please let know something missing using field incorrectly current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example isolated problem new empty app see behavior following gif code simple recreate problem creating controlled fields one another go browser inspect element input something basic input field rerender every new typed letter field way around javascript import react component react import logo logosvg import appcss class app extends component constructor props super props thisstate thishandleinputchange thishandleinputchangebind export default app expected behavior field rerender data changed versions react browser os affected issue work previous versions react able recreate problem react versions latest test versions sure worked correctly using chrome latest firefox latest ubuntu", "num": "12072", "d": "1/2018"}, {"title": "question react fiber using gpu", "body": "hi react team clovispro react want enhance react performances quite old phones tablets sometimes multicomponent updates could slow phone make ux uncomfy normal basic javascript uses cpu old hardware low cpu enhance react performances made update react fiber directly allow javascript run gpu know libraries make global hack thanks wink ps gpu already used css make animations smoother", "num": "12071", "d": "1/2018"}, {"title": "react bug", "body": "want request feature report bug report bug current behavior upgrade react safari browser console print bug undefined object evaluating jareactcurrentowner map constructor accept arguments current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example react safari browser look console bug expected behavior nt console mistake versions react browser os affected issue work previous versions react react", "num": "12070", "d": "1/2018"}, {"title": "react test utils nt reset form inputs upon simulated reset button click", "body": "want request feature report bug bug current behavior one components form inputs reset button tests find button simulate click none inputs reset reproduction see component shows test shows expected behaviour nt occur expected behavior simulated click reset button causes inputs form reset versions react browser os affected issue work previous versions react react reactdom testing jest", "num": "12067", "d": "1/2018"}, {"title": "rendering via jsx vs function call", "body": "rendering via significantly faster plans near future within next months perhaps optimise functional components perform optimisation avoiding jsx nonhtml elements", "num": "12066", "d": "1/2018"}, {"title": "problem input type changes email text", "body": "want request feature report bug bug current behavior input field changes email text exception typeerror thrown setselection reproduction see expected behavior crash uncaught exception versions react browser os affected issue work previous versions react master firefox would proposed change fix issue", "num": "12062", "d": "1/2018"}, {"title": "onchange event checkbox firing circumstances", "body": "sure likely lack knowledge fact started fiddling react couple weeks ago might hint anyway code meant display checkbox javascript import react react import connect reactredux import fetchsettingsifneeded updatesetting actionssettings class adjustids extends reactcomponent settingkey autoadjustids function mapstatetoprops state const settings settingsreducer state const isfetching didinvalidate settingsreducer isfetching true const mapdispatchtoprops dispatch gt fetchsettings key defaultvalue gt dispatch fetchsettingsifneeded key updatesetting key value gt dispatch updatesetting key value export default connect mapstatetoprops mapdispatchtoprops adjustids even probably relevant clarity data read written rest calls code mostly based back specific case checkbox supposed fire event clicked happens long initial state case every time click checkbox called instead initial state click called clicking call moment everything works flawlessly callbacks called data updated refreshed expected problem initial state tried many possible combinations see different scenario may cause problem seems case tried check something wrong controlleduncontrolled components far freshness react allows looks like supposed handle versions react browser os affected issue work previous versions react current dependencies need cleanup tried chrome firefox let know need additional detail thought probably needed also share project would nt work box work extend backend wordpress plugin", "num": "12061", "d": "1/2018"}, {"title": "source makes component stack less useful", "body": "want request feature report bug somewhere current behavior enable automatically add prop every component development component stack displayed certain react warnings changes displaying inferred name rendering component displaying filename line number occurrence react also access file path stripped filename included seems based assumption name file always maps exactly name component exports practice many people place components currently makes stack less useful example compare expected behavior would like stack include full file path least include inferred component name alongside filename would accept pr either option versions react browser os affected issue work previous versions react react introduced", "num": "12058", "d": "1/2018"}, {"title": "prop never invoked", "body": "want request feature report bug bug current behavior never invoked cc belak jquense current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example reported back closed issue appears present react able reproduce simple case least chrome expected behavior invoked result log well value displayed beneath input codesandbox link versions react browser os affected issue work previous versions react reproduces issue appears date back earlier based prior issues thanks let know anything else clarify", "num": "12056", "d": "1/2018"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12055", "d": "1/2018"}, {"title": "simple react page working", "body": "created helloworld app using react typescript outputs correctly chrome firefox etc view app nothing appears upon checking devtool ie also blank nt really know working code import babelpolyfill import import react react import render reactdom export class helloworld extends reactcomponent lt gt render return hello world render documentqueryselector app webpackconfigjs const webpack require webpack const cleanwebpackplugin require cleanwebpackplugin moduleexports entry srcapptsx output filename appjs path dirname dist c workspacerucwebtflgovuksourcetflrucwebcdnstaticscriptsulezsamplecodehelloworldtsx enable sourcemaps debugging webpack output devtool sourcemap", "num": "12052", "d": "1/2018"}, {"title": "event handlers fragments", "body": "use case abstraction wants listen event bubbling intercept event somehow perhaps state context involved works fine today long wrap however ca nt necessarily always hear relaxed conceptually think constraints remain many environment nt want wrapper element around js b js b b would nice able use fragments easy implement synthetic event system suspect doable approaches including inserting element called dom implement need somewhere store current props use fragment fibers hold also need schedule commit phase effects whenever set event handlers fragment changes commit phase update statenode fibers hold current props way bubble fiber return pointers know statenode holds current set props ones extract event handlers", "num": "12051", "d": "1/2018"}, {"title": "write blog post showing recommended asyncsafe coding patterns", "body": "follow item pr relates show examples accomplish common tasks asyncfriendly way using new component api also show examples illustrate pitfalls eg calls", "num": "12048", "d": "1/2018"}, {"title": "write blog post new async unsafe static lifecycles", "body": "follow item pr blog post correspond release primary purpose let people know prepare subsequent release application developers post explain run codemod rename deprecated methods well general strategies use new lifecycle instead library maintainers provide recommended update release strategies including kinds code moved remain backwards compatible vs needs either remain moved new method peer dependency version changes required versions react support new methods", "num": "12047", "d": "1/2018"}, {"title": "update debugrenderphasesideeffects behavior", "body": "follow item pr x phase within context async tree doubleinvoke following methods updater functions current implementation also doubleinvoke several additional methods eg willmount willupdate scu etc behavior removed x phase also add devwarning detect components within async tree contain following methods", "num": "12046", "d": "1/2018"}, {"title": "npm recognized internal external command operable program batch file", "body": "current behavior createreactapp myapp creating new react app c usersswoledaddybuffneckmyapp npm recognized internal external command operable program batch file installing packages might take couple minutes installing react reactdom reactscripts npm recognized internal external command operable program batch file aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed tried everything sun including uninstalling reinstalling node npm createreactapp package switching different version every variation add npm path could find internet dont usually issues npm use several projects seems work fine figure happening could actually install react reactdom manually tried installing reactscripts didnt output anything ctrlc get console back understand forum npm described dont issue projects works fine literally anything else help would greatly appreciated", "num": "12045", "d": "1/2018"}, {"title": "coalesce warnings deprecated lifecycle hooks", "body": "coalesce warnings deprecated lifecycle hooks print single message reconciliation rather one per componenttype relates pr comment", "num": "12044", "d": "1/2018"}, {"title": "highlight production bundles bold danger integration comment", "body": "added integration danger shows bundle size difference prs like change output production bundles bold results think also remove red triangle increase development bundles important", "num": "12043", "d": "1/2018"}, {"title": "strange warning proptype marked required format", "body": "component following proptypes javascript componentproptypes media proptypesshape proptypesany componentdefaultprops media initially set prop required changed nonrequired still console show warning see prop name identifying required option adding isrequired think bug faced several times app never got working properly work arround change proptypes help idea great", "num": "12042", "d": "1/2018"}, {"title": "suppress message download react devtools", "body": "featurebug current behavior react library logs either download react devtools better development experience logs warning installed version react devtools old work current version react please update react devtools previous fix employed reproduce run react site without production flag without react devtools extension installed expected behavior log output versions react react tried according comment following work react gt however changes log warning installed version react devtools old work current version react please update react devtools fixes stackoverflow yield results also plugin nt work installing nt option least tldr loving react logging install note tad annoying previous fixes nt seem work please provide option disable log", "num": "12041", "d": "1/2018"}, {"title": "react support feature like keepalive vue", "body": "found issue sophiebits said react never reuses instance unmounted means react never support feature like keepalive vue way maintain component state", "num": "12039", "d": "1/2018"}, {"title": "add reactisfragment api verifying fragment", "body": "want request feature report bug want request feature current behavior api verify reactnode react fragment though use distinguish verbose seems uncertianly right expected behavior add api verifies object reactfragment returns true false versions react browser os affected issue work previous versions react react", "num": "12038", "d": "1/2018"}, {"title": "bug createportal element children nt print correct clientheight properties etc", "body": "want request feature report bug could bug current behavior children div inside element created using createportal show correct clientheight scrollheight properties shows scrollheight consolelogged demo current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior get correct scrollheight etc properties versions react browser os affected issue work previous versions react", "num": "12035", "d": "1/2018"}, {"title": "componentdidupdate fires ref set react", "body": "want request feature report bug bug current behavior fires current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open console see going pasting code safekeeping jsx import react react import reactdom render reactdom import hello hello const styles fontfamily sansserif textalign center const app gt componentdidupdate vs ref timing issue class combobox extends reactcomponent class bodyend extends reactpurecomponent render documentgetelementbyid root expected behavior fire example open console see supposed reference nt set yet supposed fire component rendered called versions react browser os affected issue work previous versions react react chrome ubuntu yes worked fine react details sounds lot like issue reported bountysource reactbootstrapreactbootstrap gaearon commented nt look like filed issue react manage produce sscce reporting", "num": "12034", "d": "1/2018"}, {"title": "refs must owner warning", "body": "reporting bug problem interplay several packages feel package actually something wrong react versions react also happened nodejs electron windows current behavior get error message although none three explanations true actually react loaded twice version little prevent happens far understand application imports react two ways application react application nodemodulesmyapi react get react module path however myapi module installed via yarn link caseinsensitive filesystems yarn link cause file path different caseing ie application c application resolved link node uses via require c application case drive letter changes api everything required api even though call require react times end importing c applicationnodemodulesreact c applicationnodemodulesreact obviously thing yet means react loaded twice ref triggering error also added reactbootstrap adds stringref code bug using different react versions different case importing react code reactbootstrap nt anything wrong string refs still allowed node nt anything wrong since documents require nt guaranteed always return instance yarn nt anything wrong caseinsensitive filesystem nothing wrong using different cases drive letter link source link target react however relies require always returning instance ca nt expected behavior react nt rely behavior documented unreliable", "num": "12033", "d": "1/2018"}, {"title": "onpaste event firing wrong target", "body": "want request feature report bug bug current behavior pasting string either input fields one type date text result console pasting either input eventtarget input typetext expected behavior event target input type date pasting date input likewise type text versions react browser os affected issue work previous versions react chrome version official build firefox paste event trigger input typedate", "num": "12031", "d": "1/2018"}, {"title": "children treat reactfragment array", "body": "traversing children treats fragments standalone elements instead traversing children impression convenience equivalent arrays traversed", "num": "12026", "d": "1/2018"}, {"title": "possible set optional property purecomponent using typescript", "body": "bug current behavior creating interface optional key trying set type props also using datails stackoverflow expected behavior possibility set somehow optional props versions react browser seems extends require type allows optional keys like instead", "num": "12022", "d": "1/2018"}, {"title": "add referrerpolicy iframe react", "body": "property referrerpolicy exist type detailedhtmlprops htmliframeelement see react reactdom", "num": "12021", "d": "1/2018"}, {"title": "time parent component updated passed child component different", "body": "version reactfiberclasscomponentjs piece code think logic judge called test class app extends reactcomponent static proptypes name proptypesstring componentdidmount call setstate make app update thissetstate test nothing render return class child extends reactcomponent constructor super thisstate equal true componentwillreceiveprops nextprops nextprops thisprops thissetstate equal false render return newprops oldprops equal thisstateequal reactdomrender documentgetelementbyid container newprops oldprops equal truethe newprops oldprops equal falseprops passed child component different", "num": "12018", "d": "1/2018"}, {"title": "custom html tags", "body": "want request feature report bug bug current behavior upgrading react getting lot warnings custom html tags expected behavior warnings appear versions react browser os affected issue work previous versions react browser working", "num": "12016", "d": "1/2018"}, {"title": "bug wrong render output children textnode", "body": "seems bug react child node textnode render correct output steps reproduce jsfiddle expected output hello hello hello react rendered hello hello hello rendered output matching console log however textnode removed working expected see fiddle adding text node hello numbers causes unexpected output tested react", "num": "12015", "d": "1/2018"}, {"title": "fragments support dangerouslysetinnerhtml", "body": "addition fantastic helps keep html semantic clean unfortunately still way inject html without wrapping tag jsx const html hello world render html hello world would mostly helpful rendering html jsx back end rather spa context seems ideal candidate support may inject html without wrapping elements jsx const html hello world would render simple obvious aligned current api", "num": "12014", "d": "1/2018"}, {"title": "value input updatedcleared undefined value", "body": "trying clear values inputs undefined values setup demo page basically set render button clears input nt put default value searching issues nt find similar issue use case huge form predefined values update form try reset inputs cleared thanks help", "num": "12013", "d": "1/2018"}, {"title": "reactchildrentoarray reactcloneelement work portal elements", "body": "want request feature report bug bug undefined behaviour current behavior fails namely following complete snippet fails jsx import react react import render createportal reactdom const renderchildren children gt children reactchildrentoarray children return renders children toarray children const app gt createportal rendered portal documentgetelementbyid portal render documentgetelementbyid root following one wraps portal another element works fine jsx import react react import render createportal reactdom const renderchildren children gt children reactchildrentoarray children return renders children toarray children const app gt createportal rendered portal documentgetelementbyid portal render documentgetelementbyid root createportal new feature best case scenario possible use everywhere valid nodes accepted thing happening probably weird try clone portal maybe specify documentation cloned least open pr let know thoughts versions react browser os affected issue work previous versions react using react", "num": "12012", "d": "1/2018"}, {"title": "create property nonextensible object syntheticevent ie", "body": "want request feature report bug bug current behavior error thrown ie error message states create property nonextensible object originates following location file reactpackageseventssyntheticeventjs current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior errors versions react browser os affected issue work previous versions react version number reactdom possibly related", "num": "12011", "d": "1/2018"}, {"title": "events missing master simulatenative", "body": "see comment really documented people might rely need fix", "num": "12009", "d": "1/2018"}, {"title": "angularjs injector equivalent", "body": "current behavior documented way easily manipulate componentsstateprops thirdparty perspective expected behavior expected behavior mechanism similar angularjs injector allows additional compilation bootstrapping versions react knowledge affected issue tried reverseengineering react dev tools browserifying longterm sustainable solution constant updates made react codebase use cases time enterpriselevel multiparty deployment thirdparty wants modify presentationdata eg deploying ab tests clientside would ideal integrate code part mainbackend deployment unless ab test performs better control easily allowing thirdparty integrations eg browser extensions editing clientside presentation utilizing model data time something needs deployed frontend quickly without tied release cycles backend code time third party wants modify something without required onboarded contractor due sensitive sensitive private data ie pii hipaa etc frontend unit testing", "num": "12007", "d": "1/2018"}, {"title": "getting minification warnings even defineplugin uglifyjsplugin", "body": "hello scoured issues ca nt figure warning still around feels like done everything setup build scripts var config extend baseconfig configpluginspush new webpackdefineplugin processenvnodeenv jsonstringify production new webpackoptimizeuglifyjsplugin mangle true compress warnings false output comments false exclude minjs gi new webpackoptimizededupeplugin plugins using react webpack sure missing defineplugin uglifyjsplugin seem declared properly set production script help would greatly appreciated thank", "num": "12003", "d": "1/2018"}, {"title": "add reactchildrenisrenderable", "body": "want request feature report bug feature motivation given component gets props eg accepts props redux store via hoc renders either react node condition based data context would helpful know outside component whether renders markup would let us render wrappers component visible usage example let say wraps every child add margins borders animation etc nt accept props gets everything without checking renders markup get empty visible wrapper first third children thus break styling reactchildrenisrenderable would allow us easily filter children without ui x could achieve behavior passing handler condition switch connected component approach would break encapsulation suitable library components toggle renderability internally theoretically could use css pseudo selector though supported yet browser setting property would result rendering invisible nodes wrapped would nt able hide styling could try manually find node dom nt exist remove sound messy violates react declarative nature also data dynamic usually would hide components data still way server might never reveal loaded maybe could mess", "num": "12002", "d": "1/2018"}, {"title": "dangerouslysetinnerhtml", "body": "dangerouslysetinnerhtml currently uses according googles recommendations better replaces something like affect performance could done versions react browser os affected issue work previous versions react react os ubuntu browsers think", "num": "12001", "d": "1/2018"}, {"title": "react copies default checkbox value attributes", "body": "want request feature report bug report bug current behavior react sets via attributes defaultvalue inputs value current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example actual react expected vanilla dom expected behavior value attribute empty unless passed via props versions react browser os affected issue work previous versions react react browser", "num": "11998", "d": "1/2018"}, {"title": "npm test fails using expectcreatespy reacttestutilssimulatesubmit", "body": "want request feature report bug report bug current behavior npm test fails using expectcreatespy reacttestutilssimulatesubmit current behavior bug please provide steps reproduce possible minimal demo app countdownform component component creates input form input number total number seconds component returns formatted version number minutes seconds component works fine project giving desired output test fails code countdownform component import react react import createreactclass createreactclass contents test file component following reacttestutil simulate doc expectcreatespy doc import react react import reactdom reactdom import expect createspy spyon isspy expect import jquery import countdownform countdownform import reacttestutils reactdomtestutils describe countdownform gt call onsetcountdown valid seconds entered gt var spy expectcreatespy var countdownform reacttestutilsrenderintodocument var el reactdomfinddomnode countdownform npm testreacttestutilssimulatesubmit elfind form summary tests completed tests failed failed tests countdownform call onsetcountdown valid seconds entered chrome linux error script error objectinvokeguardedcallbackdev webpackinternal objectinvokeguardedcallback webpackinternal objectinvokeguardedcallbackandcatchfirsterror webpackinternal executedispatch webpackinternal executedispatchesinorder webpackinternal executedispatchesandrelease webpackinternal executedispatchesandreleasesimulated webpackinternal foreachaccumulated webpackinternal objectprocesseventqueue webpackinternal warn launcher chrome killed ms sending sigkill versions react browser os affected issue work previous versions react using ubuntu chrome version official build packagejson", "num": "11997", "d": "1/2018"}, {"title": "symbols keys children arrays iterators", "body": "want request feature report bug want request feature current behavior using element keys throws type error current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example using get following codesandbox expected behavior using keys work seamlessly opinion element keys perfect usecase versions react browser os affected issue work previous versions react using react browsers affected safari chrome firefox osx pretty sure browser dependent matter implementation thanks", "num": "11996", "d": "1/2018"}, {"title": "need learn", "body": "need learn get started react js", "num": "11994", "d": "1/2018"}, {"title": "warn server renderer class nt extend reactcomponent render method", "body": "server renderer look implementation something similar", "num": "11991", "d": "1/2018"}, {"title": "grabbing pending state value", "body": "assume write assume state nt updated yet result call write see value basically question pending state update normal functional setstate previousstate receive functional setstate capture pending value", "num": "11989", "d": "1/2018"}, {"title": "forked props isolated", "body": "fork prop like class newordercontainer extends component constructor props super props thisstate orderform propsorderform proceed update state mutates original prop specifically state component passing prop orderform mutations state forked prop isolated", "num": "11988", "d": "1/2018"}, {"title": "react componentdidupdate warning scheduled cascading update", "body": "want request feature report bug bug current behavior react componentdidupdate warning scheduled cascading update question current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react react", "num": "11987", "d": "1/2018"}, {"title": "lifecycle methods reactdomhydrate", "body": "want request feature report bug feature current behavior way distinguish lifecycle method called response call expected behavior component scrolls top page componentdidmount makes sense component first created within client however nt make sense component hydrated called content already visible possibly user already scrolled would possible add lifecycle method could something like achieve desired behavior versions react browser os affected issue work previous versions react", "num": "11985", "d": "1/2018"}, {"title": "debian onmousemove onmouseenter onmouseleave firing chrome", "body": "want request feature report bug report bug current behavior google chrome element onmousemove onmouseenter listeners fire events unless clicked likewise onmouseleave fire unless mouse clicked area occupied listening element current behavior bug please provide steps reproduce possible minimal demo problem following jsfiddle reproduces bug reproduce simply create element listeners test behavior chrome expected behavior onmouseenter onmousemove onmouseleave listeners fire chrome without mouse needing clicked versions react browser os affected issue work previous versions react tested react development server also react jsfiddle cases problem occurs using debian kernel version chrome version reproduce error tried reproduce issue windows major version chrome seems work properly", "num": "11984", "d": "1/2018"}, {"title": "drawer reactmaterialui", "body": "beginner react problems applying drawer project case appbar configured drawer open working presenting following errors reactcreateelement type invalid expected string built components class function composite components got undefined might mixed default named imports handletoggle assigned value never used handleclose assigned value never used ps sorry bad english brazilian code", "num": "11978", "d": "1/2018"}, {"title": "warning stateless functional high order component", "body": "want request feature report bug bug current behavior warning stateless functional high order component current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior warning versions react browser os affected issue work previous versions react react yes worked previous versions", "num": "11976", "d": "1/2018"}, {"title": "reenable coverage", "body": "see jest oom disabled", "num": "11975", "d": "1/2018"}, {"title": "add reactcreateref migration path string refs", "body": "creating issue track intend close pr outdated probably want turn real rfc potentially get", "num": "11973", "d": "1/2018"}, {"title": "consider removing mouseentermouseleave polyfill", "body": "suggested sure want decided create issue track future attempts pr stale", "num": "11972", "d": "1/2018"}, {"title": "need listen click change events", "body": "presently listen click events detect changes radio buttons checkboxes still need looks though curious remove click dependency change events update comments better document include click events", "num": "11971", "d": "1/2018"}, {"title": "add method remount component", "body": "want request feature report bug feature imagine might brought could nt find discussions extensive searching current behavior working certain nonreact party libraries sometimes require remount domnode ie dumping creating scratch currently way seems change prop either incrementing generating random uid however feels like hacky way implementing behavior issue working youtube player api svgdrawer library wish cleaner reactway expected behavior would nice could something like perhaps better parent via refs would effect changing said components prop", "num": "11969", "d": "1/2018"}, {"title": "add", "body": "", "num": "11968", "d": "1/2018"}, {"title": "state initialization disparity shallow renderer reactdom", "body": "want request feature report bug bug current behavior shallow renderer defaults class component state empty object set real renderers nt seem component render successfully shallow renderer fail runtime browser null reference error current behavior bug please provide steps reproduce possible minimal demo problem reactdom behavior crashes reading uninitialized state value shallow renderer behavior component able render expected behavior initialize state way versions react browser os affected issue work previous versions react react nt issue react", "num": "11964", "d": "1/2018"}, {"title": "running yarn start npm start fixtures throwing error", "body": "want request feature report bug bug current behavior running npm start yarn start reactfixturesdom throwing errors terminal current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example reactfixturesdom run yarn start npm start following errors seen terminal gt reactfixtures prestart homegmadminpracticereactfixturesdom cp builddist react reactdom developmentjs public cp stat builddist react reactdom developmentjs file directory npm err code elifecycle npm err errno npm err reactfixtures prestart npm err exit status npm err npm err failed reactfixtures prestart script npm err probably problem npm likely additional logging output npm err complete log run found npm err note already run npm run build react parent directory see reactdevelopmentjs reactdomdevelopmentjs reactbuilddist running cp builddist react reactdom developmentjs public command terminal works fine fails run prestart command packagejson expected behavior copying happen successfully npm start successfully turn server versions react browser os affected issue react version kernel gnulinux os info distributor id linuxmint release codename serena work previous versions react nt know bug let work", "num": "11963", "d": "1/2018"}, {"title": "setstate callback called even state nt changed", "body": "want request feature report bug bug current behavior react breaking changes setstate callbacks second argument fire immediately componentdidmount componentdidupdate instead components rendered setstate documentation second parameter setstate optional callback function executed setstate completed component rerendered assume component nt rerendered setstate callback wo nt called well current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior setstate callback wo nt called versions react browser os affected issue work previous versions react react nt try previous versions", "num": "11961", "d": "1/2018"}, {"title": "syntactic sugar like", "body": "easy access attributes want know problem new reacter tks", "num": "11960", "d": "1/2018"}, {"title": "render pure pure", "body": "write return result every time render function pure meaning modify component state returns result time invoked next part write never return result next state props update function return different tree react elements pure pure", "num": "11959", "d": "1/2018"}, {"title": "expected find host parent", "body": "want request feature report bug bug current behavior specific order unmounting remounting causes invariant violation reproduce following sandbox example crashes invariant violation props odd numbers greater zero expected behavior app crash cycles number items list versions react browser os affected issue work previous versions react versions newer version", "num": "11955", "d": "1/2018"}, {"title": "syntactic sugar", "body": "syntactic sugar like tks", "num": "11953", "d": "1/2018"}, {"title": "settimeout working initial render", "body": "want request feature report bug bug think unless behavior intentional current behavior see basically trying batch set ajax calls wrapping promise calls settimeout replaced actually ajax calls calls consolelog affect first time update function called see console log statement within single ms statement next time update function called seconds later see console log statements delayed expected expected behavior expect sleep function work first time called stands ui broken interval calls update function minutes production understand async stuff react lil funky definitely nt know react works hood could intentional behavior somehow needed workaround get behavior need thanks guys keep great work versions react browser os affected issue work previous versions react react believe happens react well firefox developer edition", "num": "11950", "d": "1/2018"}, {"title": "output junit xml test metadata circleci", "body": "benbraou claimed issue please give chance work screenshot circleci build another private project part clearly highlights parts build failed contrast see one builds one scriptscircleciuploadbuildsh step failed need scroll output significant amount see part custom entry point ci steps scriptscirclecitestentrypointsh make easier us parallelize build steps like us change testentrypointsh script output junit xml metadata circleci described believe circleci build results page show exactly step failed bonus show individual jest tests would even cooler think important part breaking jest vs flow vs prettier etc separate chunks", "num": "11949", "d": "1/2018"}, {"title": "reactnativecustomtabs return response", "body": "created button open custontabs use external url reactnative app external url forms submitted return array response another page ie success page want get response success page app customtabs would close automatically code custom tab", "num": "11947", "d": "1/2018"}, {"title": "reactwebpacktypescript fine react fails resolve reactdom react", "body": "tsconfigjson webpackconfigjs apptsx import react react import reactdom reactdom reactdomrender hello documentgetelementbyid reactapp dependencies typesreact typesreactdom typeswebpackenv react reactdom tsloader typescript webpack webpack hash version webpack time asset size chunks chunk names bundlejs kb emitted big main apptsx bytes built hidden modules typesreact typesreactdom react reactdom webpack hash version webpack time asset size chunks chunk names bundlejs kb emitted main apptsx bytes built hidden modules error apptsx module found error ca nt resolve reactdom homedmitryprojectsfails apptsx npm v amp amp node v amp amp cat etcdebianversion", "num": "11946", "d": "1/2018"}, {"title": "get response customtabs reactnative", "body": "created button open custontabs use external url reactnative app external url forms submitted return array response another page ie success page want get response success page app customtabs would close automatically code custom tab get response customtabs app close customtabs closed reactnative app", "num": "11945", "d": "1/2018"}, {"title": "curly braces pointless ugly", "body": "want request feature report bug feature current behavior curly braces required delimit javascript expressions jsx attributes desired behavior javascript expressions expressed without need hello name onclick gt thisandthat short requiring around unnecessary although last one bit ugly gt thing", "num": "11944", "d": "1/2018"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11943", "d": "1/2018"}, {"body": "hey welcome try keep react issue tracker focused feature bug reports general questions support try various support avenues", "d": "1/2018"}, {"body": "samkhachatryan related version project", "d": "1/2018"}, {"body": "removed clientside render react serverside render react", "d": "1/2018"}, {"body": "use create react app see message related service workers either ignore opt caching", "d": "1/2018"}, {"body": "thanks report intellild check console see warning message get mentions possibility emphasis mine keys unique components maintain identity across updates nonunique keys may cause children duplicated andor omitted behavior unsupported could change future version using duplicate keys supported result behavior seeing react elements nonunique keys omitted nt mean behavior supported expected remain consistent across versions definitely want heed warning make sure keys always unique hope helps anything make warning clearer love hear feedback thanks", "d": "1/2018"}, {"body": "aweary tried fiddle switch tabs cause wild elements", "d": "1/2018"}, {"body": "yes looked fiddle behavior seeing children duplicated causes issues react reconciles children using nonunique keys unsupported continue result inconsistent unexpected behavior react continues change please make sure follow advice warning ensure keys always unique nt deal strange issues like", "d": "1/2018"}, {"body": "hey samkhachatryan little mindfulness planning react integrate almost view library including ones listed please see integrating libraries page docs information thanks", "d": "1/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "1/2018"}, {"body": "error message includes link copied please visit includes full message", "d": "1/2018"}, {"body": "fragment syntax supported babel lets exactly need something like equivalent spreading end essential avoid warning", "d": "1/2018"}, {"body": "getting error trying open link please post service nt limitations eg codepen codepan", "d": "1/2018"}, {"body": "seems like ref callback called many times read part", "d": "1/2018"}, {"body": "gaearon sorry nt notice doc", "d": "1/2018"}, {"body": "supported useful happy take pr documenting sure trying achieve component unmounted need reset state component ca nt resurrected gets unmounted state irrelevant rest program", "d": "1/2018"}, {"body": "gaearon aha makes sense impression hold onto instance react component actually mount conditionally thought didmount willunmount view appeared disappear never actually always assumed somebody thus good citizen supported clean fashion thanks clarification", "d": "1/2018"}, {"body": "see anywhere docs could made clearer", "d": "1/2018"}, {"body": "think makes sense reconciliation guide explains principle well rtfm key sure mention since need clean instance dropped thank", "d": "1/2018"}, {"body": "maybe could add notice doc component unmounted never remounted", "d": "1/2018"}, {"body": "react doest defaultinbuilt router vuejs part reactrouter react", "d": "1/2018"}, {"body": "part react however good packages know talk authors coordinate changes might affect", "d": "1/2018"}, {"body": "hey thanks report tried reproducing issue nt able made jsfiddle renders single input inside regular old html form form submitted failed network request contains values html input react input need able reproduce issue consistently order diagnose problem could take look jsfiddle made try tweak reproduces problem great thanks", "d": "1/2018"}, {"body": "thanks taking time look make sure provide jsfiddle next time investigating end keep updated", "d": "1/2018"}, {"body": "turns happens html markup invalid eg sure considered bug definitely confusing fail realize markup invalid thanks", "d": "1/2018"}, {"body": "thanks following agree confusing behavior seems like field data missing element dynamically added dom adding second element html markup still works unfortunately react ca nt anything validating container rendered inside valid markup close thanks", "d": "1/2018"}, {"body": "look like bug rather missing functionality would like send pr", "d": "1/2018"}, {"body": "would give try", "d": "1/2018"}, {"body": "thanks maciejka", "d": "1/2018"}, {"body": "nt think post screenshot", "d": "1/2018"}, {"body": "sachag show example code", "d": "1/2018"}, {"body": "obvious would happen think need minimal reproducing case", "d": "1/2018"}, {"body": "honest think easier eventually rewrite component entirely code component much go wrong think isolating problem create reproduction would probably take even longer rewriting scratch close", "d": "1/2018"}, {"body": "asking gave idea look found alternative way accessing pure function risk needing exact structure wo nt happen pure componentsfunctions idea", "d": "1/2018"}, {"body": "hacky gives", "d": "1/2018"}, {"body": "exactly situation would work pure functions three really hacky ways far clean futureproof one go rofl", "d": "1/2018"}, {"body": "oh posible solutions think great one would lodash style since way tree shaking coule applied", "d": "1/2018"}, {"body": "franciscop nothing treeshake react use one thing use also treeshaking handling imports one entry point opposed file splitting", "d": "1/2018"}, {"body": "even try read dynamically like attempted practice bundler still finds statically build time nt really make lot sense think want separate entry point library react users inside freely import react people use entry point clearly react users side separating component nt really valuable whole react bundle small unlike reactdom splitting increases friction without benefits case react users already react nt worry getting one export react would nt able use without react apis anyway", "d": "1/2018"}, {"body": "hi dan thanks tip look bundling actually never seen size react vs reactdom nt work probably go dynamic import something similar already translate got good results bundler least rollup find types require dynamically simply would find", "d": "1/2018"}, {"body": "look bundling react think mistake bundling case leave en exact option depends bundler use leave compiled bundle user nt get two copies react", "d": "1/2018"}, {"body": "totally right try", "d": "1/2018"}, {"body": "past movement nt reached consensus since api change discussed many times past shot different reasons perhaps would better could create rfc thanks", "d": "1/2018"}, {"body": "check nodemodules make sure react", "d": "1/2018"}, {"body": "maybe older need", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "reproduce fiddle might kind local cache system messing please provide reproducing project", "d": "1/2018"}, {"body": "let try reproduce somewhere another clue use syntax", "d": "1/2018"}, {"body": "gaearon seems like fragments syntax", "d": "1/2018"}, {"body": "mentioned blog post syntax support expected come tools soon need wait seems irrelevant problem describing initial post though", "d": "1/2018"}, {"body": "understandable ca nt understand getting similar errors anything else need", "d": "1/2018"}, {"body": "gaearon looks related", "d": "1/2018"}, {"body": "one anything else need react reactdom verify post content please", "d": "1/2018"}, {"body": "gaearon second thing tried looking haha ya go name react description react javascript library building user interfaces keywords react version homepage bugs license mit files license readmemd indexjs cjs umd main indexjs repository facebookreact engines node gt dependencies fbjs looseenvify objectassign proptypes browserify transform looseenvify", "d": "1/2018"}, {"body": "ok best guess accidentally two react bundle one older version try running inspect sources chrome devtools look many files called show nt think help nt reproduce new project definitely issue project set either two reacts aggressive caching turned accidentally work older version", "d": "1/2018"}, {"body": "please provide full code otherwise hard tell", "d": "1/2018"}, {"body": "hi gaearon import react react import table reactbootstrap var createreactclass require createreactclass var customers createreactclass getinitialstate function return buttoncolor handleclick color consolelog button color state thisstatebuttoncolor thissetstate buttoncolor color render return customer name username addl username remove thispropscustomersmap function customer index return index customername customerfbun customeremun export default customers", "d": "1/2018"}, {"body": "dallashuggins replace fix keyword switches context whatever object function bound case undefined arrow functions added javascript behavior since change context also future reference issue thats better place like stack overflow threads tracking bugs", "d": "1/2018"}, {"body": "problem js get preserved way want keep value render method use arrow function hope helps", "d": "1/2018"}, {"body": "oh answer also right missed use arrows cases", "d": "1/2018"}, {"body": "worked thank much", "d": "1/2018"}, {"body": "seems like issue network json corrupted perhaps behind proxy bad connection unfortunately nothing could try another network", "d": "1/2018"}, {"body": "currently network working properly issue", "d": "1/2018"}, {"body": "message says network response invalid maybe try luck yarn", "d": "1/2018"}, {"body": "think something invokeguardedcallback mode dispatch fake event preserver devtool behaviour comment block would give better idea like intended behavior bug", "d": "1/2018"}, {"body": "hey aulisius thanks reply understand intention preserving expected pause exceptions behaviour dev tools doubt react developers expect user defined error event listener invoked twice instance error though even sure culprit user callbacks executed next message event loop nt see extra throw happening try dig better react code asap extra info also noticed error events fired twice unhandledrejection events behave correctly", "d": "1/2018"}, {"body": "think duplicate", "d": "1/2018"}, {"body": "seems like duplicate", "d": "1/2018"}, {"body": "somehow turn former searches thanks pointing overlap point linked issue different nature believe misses build target without transpiling much less focus biggest reason incompatibilities current build process one poc curious think", "d": "1/2018"}, {"body": "size differences bundles benchmark bundles performance afaik big deal using untranspiled version sure performance regressions code browsers fast adding esm version makes sense browsers bundlers discussed linked thread providing also untranspiled version without significant benefits introduce lot mess users", "d": "1/2018"}, {"body": "nt compared transpiled untranspiled versions checking react versions disk yields umd unminified version vs bytes unminified untranspiled one poc difference bytes highly unscientific comparison focussing file size really favour two actual effects parsing remains investigated random reasons wanting build target native esm greatly simplifies development setup lowering threshold new developers might prevent gap webpack approach doable natively browsers getting bigger done natively progresses web platform keep using transpiled versions code browsers incentive optimise new use cases really curious mess would add users would believe significant benefits", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "closing overlapping", "d": "1/2018"}, {"body": "ah one also lot overlap still completely cover issue believe misses esm native export import functionality support greatly improved since combined issues linked mean give efforts get native ecmascript module build target reality another point trying make ah clear since issue closed typing", "d": "1/2018"}, {"body": "add module entry packagejson means esm native export import functionality", "d": "1/2018"}, {"body": "try issues covering problem precisely esm impossible fix issues already exist see value yet another one open edit fixed links", "d": "1/2018"}, {"body": "trysound gaearon thanks clearing monitor try participate issues", "d": "1/2018"}, {"body": "question think ask stackoverflowcom helpful react two concepts normally setstate change", "d": "1/2018"}, {"body": "ruoru react minimal api something passed taken component instance prev props thisprops new props", "d": "1/2018"}, {"body": "stephenkingsley trysound thank much reply said", "d": "1/2018"}, {"body": "callback fires updates flushed dom new props current point dowhatever thisprops new props old props get new props nextprops become thisprops react rerenders component", "d": "1/2018"}, {"body": "pick pr lands", "d": "1/2018"}, {"body": "broader impact tests like example makes tests like reactincrementalupdatestest reactincrementaltest reactincrementalsideeffectstest harder follow", "d": "1/2018"}, {"body": "think going need disable tests least default tests hard follow otherwise", "d": "1/2018"}, {"body": "think right thing feature also disable production mode", "d": "1/2018"}, {"body": "issue solved calling preventdefaults within onclick function closing", "d": "1/2018"}, {"body": "dwjft new context api wo nt require proptypes", "d": "1/2018"}, {"body": "see rfc use proptypes", "d": "1/2018"}, {"body": "note actively working fixing context embrace supported api", "d": "1/2018"}, {"body": "appreciate detailed writeup overall think proposal counter think react really see happening fixing context least part motivation solved using systems like mobx wrap data structures possible react nt necessarily want encourage style programming nt think making even automatic something want think biggest drawback proposal implicit powerful try combine implicit api context even affects data behavior also optin passes grep test middleware api ca nt pass affects components indirectly essentially changes contract components saying props unless middleware stack case knows really get props defies potential optimizations react could make including compilation techniques currently exploring", "d": "1/2018"}, {"body": "totally understand", "d": "1/2018"}, {"body": "thanks enforce styling via prettier nt really need linter bot", "d": "1/2018"}, {"body": "understand trying react build dependencies affect react users way", "d": "1/2018"}, {"body": "gaearon building react source github tarballs every package debian main built source using tools available debian like keep one version librarytool debian already newer version rolluppluginnoderesolve extreme measure include multiple versions try avoid", "d": "1/2018"}, {"body": "nt sound sustainable even fix outdated dependency eventually bound npm world dependencies meant perpackage isolated case happy take pr updating particular dep wo nt working near future removal version reason stayed earlier version might unnecessary welcome experiment", "d": "1/2018"}, {"body": "gaeron agree indeed lot work many cases send pr upstream keep dependencies sync think effort worth give languageagnostic uniform interface managing applications system apt every software actually bridging two diverging cultures able build commenting skip option though prints lot warnings see improve add external option rollup familiar rollup may take time", "d": "1/2018"}, {"body": "react example typically implemented lifting state refs provide specific example hard implement lifting state", "d": "1/2018"}, {"body": "luisaccedo contradict methods components exposed done attribute similar ref request", "d": "1/2018"}, {"body": "thank gaearon understand advantages lifting state already done way probably wrong try explain usecase exposed method maybe makes sense reusable carousel component lot methods control pagination animations responsiveness basically receives array items config options takes care rest instances component used inside components pass items state carousel example current page number pages responsibility carousel component dynamically calculated based items array carrousel width nextpage method previouspage gotopage modify current page state parameter carousel good solves scenarios scenario would useful able set page outside carousel exposing gotopage method lift state lift methods transform state containers carousel component seems exposing method would create cleaner pattern trysound right second sentence quote could done idea currently possible", "d": "1/2018"}, {"body": "trysound right second sentence quote could done idea currently possible elaborate assign ref component get instance component exposes class methods example able generally speaking much fewer headaches rearchitect componnts receive inputs declaratively props parent components calculate derived properties child rather trying expose imperative interfaces components higher tree", "d": "1/2018"}, {"body": "generally speaking much fewer headaches rearchitect componnts receive inputs declaratively props parent components calculate derived properties child rather trying expose imperative interfaces components higher tree agree maybe sometimes able expose methods might useful", "d": "1/2018"}, {"body": "luisaccedo wrong instance ref future private class fields even able hide methods", "d": "1/2018"}, {"body": "even store instances thisconstructor want cross component communication done", "d": "1/2018"}, {"body": "responsibility carousel component dynamically calculated based items array carrousel width nextpage method previouspage gotopage modify current page state parameter carousel typically react solve providing declarative api props instead example instead method would implement numeric prop way controlled state component higher tree", "d": "1/2018"}, {"body": "luisaccedo wrong instance ref future private class fields even able hide methods far know instance ref nt allow access component instance methods possible", "d": "1/2018"}, {"body": "instance ref lets access instance methods still right way implement react cases provide declarative api mentioned", "d": "1/2018"}, {"body": "want look happens", "d": "1/2018"}, {"body": "love help sure would able locate bug source code guessing something react diffing algorithm updating component although could wrong", "d": "1/2018"}, {"body": "investigation", "d": "1/2018"}, {"body": "try set key input textarea", "d": "1/2018"}, {"body": "looks like due updatewrapper reactdomtextarea setting exist triggering update token also set nodedefaultvalue propsdefaultvalue defined matter updating causing element reattach text node child", "d": "1/2018"}, {"body": "martintasevski think pr resolve problem thanks aweary tip", "d": "1/2018"}, {"body": "eta change pushed master released", "d": "1/2018"}, {"body": "nt think possible run javascript directly gpu exist javascript libraries allow use gpu accelerate calculations nothing lets run js gpu though react communicates dom gpu directly believe browser job asking adding capability run js gpu issue react nt really belong", "d": "1/2018"}, {"body": "yeah nt anything like react also runs compatibility mode nt expect drastic changes keep eye blog announcement related async react still related gpus though", "d": "1/2018"}, {"body": "undefined object evaluating jareactcurrentowner probably mixing different versions must one use recent one map constructor accept arguments read blog post always upgrading mentions new javascript environment requirements want react work older browsers need polyfill", "d": "1/2018"}, {"body": "agree api confusing nt actually simulate browser event simulates react event builtin browser behaviors wo nt happen automatically achieve want able simulate browser event using browser apis like js function onclick const container documentcreateelement div reactdomrender container const node containerfirstchild nodedispatchevent new mouseevent click bubbles true cancelable true note works node document", "d": "1/2018"}, {"body": "looking optimizations like context prepack nothing going immediately useable next couple months within year two might something note unless creating thousands elements performance difference wo nt noticeable also unless components flat simple pure win optimization likely much less relevant practice", "d": "1/2018"}, {"body": "dang gut triage think happening react trying restore selection input actually changes types ever reason email number inputs support text selection api order operations sync great catch", "d": "1/2018"}, {"body": "circling back thanks providing possible fix want make sure checking type sufficient instead compare value selectionstart example javascript var input documentcreateelement input inputselectionstart inputtype email inputselectionstart null inputselectionend null would awesome make dom test fixture something like take", "d": "1/2018"}, {"body": "ping adrianimboden", "d": "1/2018"}, {"body": "sorry little bit busy nt know free time implement proper fix tests someone wants pick matter would disappointed", "d": "1/2018"}, {"body": "pick would ok adrianimboden", "d": "1/2018"}, {"body": "leonascimento regarding tests idea could located nt tests maybe creating option explicitly test function otherwise want test integration level extend tests", "d": "1/2018"}, {"body": "would need value input start basically first click applies value forward value change", "d": "1/2018"}, {"body": "value checkbox checked l oading page value comes db actually store uses rest api get update data fear nt clear enough maybe misunderstood comment uploaded screencast issue", "d": "1/2018"}, {"body": "sorry nt clear enough nt anything react dom node value property try adding element", "d": "1/2018"}, {"body": "also something tried posting seems forgot mention soon set value attribute checkbox always displays unchecked matter original value db tried know silly value checkbox read props effect checkbox always loads unchecked even value verified logging props console least always gets fired ca nt use way course removing make change ca nt use attribute either obviously would cause component changing uncontrolled input type checkbox controlled warning even though use checkbox correctly loaded checkedunchecked state", "d": "1/2018"}, {"body": "related discussion help looks like sort correct part falsey value set checkbox btw nt feel like bug instead area react behavior could normalized little better good luck cheers", "d": "1/2018"}, {"body": "thanks helped seems trick quite unintuitive least works", "d": "1/2018"}, {"body": "pr improves sure want take particular approach however maybe add special case specifically feel safer merging", "d": "1/2018"}, {"body": "ie proposing filename also include closest directory name seems like would sufficient practical purposes", "d": "1/2018"}, {"body": "sorry missing searched issues rather prs think approach removing common head like even better either option proposed including closest directory name works happy rebase pr either way", "d": "1/2018"}, {"body": "sure really worried might make warnings way long projects lot folder nesting would prefer smaller fix first maybe look", "d": "1/2018"}, {"body": "ok submit pr smaller fix thanks discussion incidentally looking whether enable could nt find uses codebase maybe used prefiber mistaken gets attached never used", "d": "1/2018"}, {"body": "used yet plan use see callback ref owner would different string ref owner would useful deprecated string refs different plan though", "d": "1/2018"}, {"body": "looks like chrome wo nt trigger change event valid date entered test case pass valid date completely entered closing", "d": "1/2018"}, {"body": "issue ie javascript settings close issue", "d": "1/2018"}, {"body": "need something like order actually insert dom node clear really feasible without synthetic event system afaict", "d": "1/2018"}, {"body": "believe plans allow forms browsers even normal dom node solution nt work plausible future addition would first class fragment nodes trueadm really passionate think least plausible future capability works natively however even without nt use full synthetic event system also intercept redirect locally probably want anyway batchingcontrolleddefault priorities local event handler attached dom node also call parent fragments enterleave would extra enterleave big deal since noticed typically want timeout uses anyway", "d": "1/2018"}, {"body": "perhaps missing something nt inserting element called dom mean still adding wrapper element", "d": "1/2018"}, {"body": "yes post nt say necessary technically possible without synthetic event system", "d": "1/2018"}, {"body": "sure idea comes web personally feel fragments events users stick using elements need events always envisaged originally proposed spec native dom fragment special nodes layoutstyling properties meaning could nt events attached example mouse events even interact something positional rectangle meant act much like documentfragments textnodes instead elements", "d": "1/2018"}, {"body": "example mouse events even interact something positional rectangle would assume event listeners fragments listen events dispatched children either capture bubble phase would concept event dispatched fragment directly", "d": "1/2018"}, {"body": "aweary nested fragments within fragments portals within fragments would work work fragments generally curious solved synthetic event space could help create native fragment polyfil implementation idea", "d": "1/2018"}, {"body": "trueadm nt given idea lot thought conceptually fragment events could synthetic aggregates let signal synthetic event system want listen set events children fragments fragment listening events would register listener appropriate elements rendered subtree maybe using ancestor tracking know fragment contained within nested fragments event would move updown tree matching fragments would triggered like works dom elements think primary use case wrapping direct children like nested fragments could potentially restricted somehow causes problems sure sure portals", "d": "1/2018"}, {"body": "filing would probably appropriate get lost repo obvious fix mind maybe could try installing yarn see works instead another thing worth trying", "d": "1/2018"}, {"body": "assuming mean run lines ran first line returned however run regedit see could manually delete value doesnt appear mean think maybe best option get started asap accept defeat makes scratch head wonder things like occur nowhere", "d": "1/2018"}, {"body": "also opened issue createreactapp thread facebookincubatorcreatereactapp", "d": "1/2018"}, {"body": "closing favor", "d": "1/2018"}, {"body": "would like give try", "d": "1/2018"}, {"body": "got", "d": "1/2018"}, {"body": "fixed", "d": "1/2018"}, {"body": "nt think takes proptypes function mean use ends happening case property called passing basically forcing props shape", "d": "1/2018"}, {"body": "use forbidden proptypes thanks lot nt remember behavior", "d": "1/2018"}, {"body": "nt understand mean think might misunderstanding proptypes work nt take another proptype argument takes object wrong right", "d": "1/2018"}, {"body": "also clear mean forbidden proptypes show full example problem maybe help", "d": "1/2018"}, {"body": "also plugin nt work facebookreactdevtools installing nt option least star issue ask chrome team fix nothing unfortunately caused chrome regression however changes log warning installed version react devtools old work current version react please update react devtools see source code condition exit log created project create react app ejected added configuration removed log need reproducing project say nt work", "d": "1/2018"}, {"body": "wow quick response try get reproducible project tomorrow", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "okay bad gt focusing main react package newer reactdom package contain feature pr thank thanks redux apologies false issue perhaps worth updating comment issue states reactdom gt", "d": "1/2018"}, {"body": "ah okay reference always recommend matching versions react packages", "d": "1/2018"}, {"body": "describe feature someone know vue imagine working react", "d": "1/2018"}, {"body": "vue api said wrapped around dynamic component component toggled inside primarily used preserve component state avoid rerendering basic usage give users great experience scenarios like news webapp", "d": "1/2018"}, {"body": "keep component cache route next component instead recreating new one reuse cached component avoid refetching data via network fulfill component act like stack", "d": "1/2018"}, {"body": "react usually solved one two ways keep data cached separately component example lift state ancestor nt get mounted put sideways cache like redux also working firstclass api support nt unmount views want keep alive hide", "d": "1/2018"}, {"body": "first way way make things done sometimes heavy eg use sate record whether component exposed suitable use state seems strange lift state store redux second way problem hide element enough event listeners removed usually implemented gaearon could please explain details firstclass api", "d": "1/2018"}, {"body": "second way problem hide element enough event listeners removed usually implemented componentwillunmount also intercept change propstate change leads event listeners clean easily going attach listeners effectively making component inactive maintaining component state use case keeping instance alive", "d": "1/2018"}, {"body": "bjrmatos suggestion practical ways work around think perfect clean since write component concern react lifecycle something like page lifecycle nt", "d": "1/2018"}, {"body": "suggestion practical ways work around think perfect clean suggestion work around react way things reacting stateprops changes something whole react model would say clean way things done react concern react lifecycle something like page lifecycle nt describing react component lifecycle concern component component matter whole page need use available lifecycle hooks thing even create component logic never bother app nt know vue approach keep alive feature react sounds dirty traditional way reacting changes normal react lifecycles", "d": "1/2018"}, {"body": "could please explain details firstclass api post soon stay tuned prs", "d": "1/2018"}, {"body": "bjrmatos keypoint pagecomponent inform descendant component remove event listeners except component visible", "d": "1/2018"}, {"body": "already progress maybe take", "d": "1/2018"}, {"body": "implements along number related introspection utilities", "d": "1/2018"}, {"body": "aweary yep looks like seb abstraction excessive dan nt approve want merge later want tell zheeeng copy use projects fine close", "d": "1/2018"}, {"body": "bad needed read part carefully comments", "d": "1/2018"}, {"body": "perhaps noted fixed portal jsx export default class bodyend extends reactcomponent working react seems like regressionbackwardscompatibility bug", "d": "1/2018"}, {"body": "major versions backwardscompatible majors looked example detail hunch known intentional limitation comes nested calls solves many issues recommendation use portals", "d": "1/2018"}, {"body": "gaearon right said something nt mention breaking changes blog post broken probably bug please report bugs us nt try work around assume meant broken assume referring post perhaps mistaken one bullet points covers scenario otherwise nt see listed encountered problem upgrading project nt warnings assumed safe big deal able work around converting component use portal party component would much bigger problem maybe misusing lifecycle hooks react never provided guarantees first place anyway let guys decide", "d": "1/2018"}, {"body": "agree called specifically still know bug time look issue yet probably point thinking reactdomrender reactdomunstablerendersubtreeintocontainer return null called inside lifecycle method work around use portals refs match description think might root cause internal description change could react longer reentrant possible begin rendering component tree already rendering component tree hard understand provided one possible effect might helping us discover general recommendation use nested calls instead use portals", "d": "1/2018"}, {"body": "understand frustration way react coordinate two different react instances without introducing globals environment also bad string refs require coordination one reasons encourage people avoid using two reacts tree supported reason use webpack plugin help failing build whenever situation occurs least know problem nothing wrong module assuming wo nt produce two copies pretty sure many modules write also make assumption nt bump nt extract libraries symlink also issue mutable shared state modules", "d": "1/2018"}, {"body": "using global bad infinitely better relying behaviour even documented work like require cache nt guarantee module singleton fact nt really matter many modules nt define spectre notabug many processors problem nt knowingly write code makes incorrect assumptions like accidentally someone told would understand error use webpack option either good discourage using string refs nt use string refs code third party modules string refs removed react point case reactbootstrap would incompatiblebugged fault lies react", "d": "1/2018"}, {"body": "sorry feel frustrated issue welcome propose solution trying shift blame saying global state aware right way store rather module think solve declaring global variable run issues example environments might allow eg global object could frozen another issue may arise several nonconflicting react trees page eg two independent thirdparty widgets happen use react execute page context steal refs share global environment really bad case least control problem whereas two thirdparty widgets would impossible fix either side hope see trivial problem see point well written react apps bumped issue please think dismissing issue aware way solve encourage also approach open mind think specific use case effects solution mind ideas including adding caveats string refs docs love know docs open source send pr", "d": "1/2018"}, {"body": "well oldschool cc developer taught globals bad whether call global wrap singleton attempt hide fact global nt really matter intuitively nt looked react code solution would global data modules global state instead pass kind react context object along ie user would call const context reactmakecontext later reactdomrender context code would previously access global data would access context instead could even put version context object warn version code run differs context object actually know data function nt match would also solve problems multiple distinct react trees could create multiple context objects confident wo nt interfere anything matter use module cleaner solves problems global variables better testing obviously would nt want call context avoid confusion existing thing although tightly related may want consider merging usercontrolled system part context worried transition period still fall back using modulescope variable fallback context object undefined admit nt fully understand part response example environment nt allow adding attributes global sounds like inviting trouble please nt misunderstand response proper solution nt possible wide range platforms need support ca nt change api time even proper solution worth effort string refs phased anyway live know work severe limitations bothered first reply dismissive tone essentially line nothing wrong module assuming requires wo nt produce two copies triggered may least worst alternative given restraints obviously something wrong code nt bugs breaks globals including module variables singletons always hack never even good solution anything also say pretty crappy coding part nodejs base require cache resolved file names instead say inode number alternatives exist almost filesystems", "d": "1/2018"}, {"body": "intuitively nt looked react code solution would global data modules global state instead pass kind react context object along problem existing string ref api one like see fixed already object api contract magically remembers get attached currently rendered component possible unless keep track currently rendered component fully agree bad design precisely reason string refs marked legacy documentation eventually get deprecated removed learned mistake design new apis consider constraint avoiding need shared mutable state response proper solution nt possible wide range platforms need support ca nt change api time even proper solution worth effort string refs phased anyway aware proper solution one proposed earlier using globals creates issues explained another issue may arise several nonconflicting react trees page eg two independent thirdparty widgets happen use react execute page context steal refs share global environment really bad case least control problem whereas two thirdparty widgets would impossible fix either side solve problem people create issues new problems caused change solution mentioned change api exactly string refs marked legacy docs encourage writing new code relies deprecate yet callback refs quite ergonomic many developers including fb ready rewrite code works fine today considering solutions pitfalls string refs annoying use callback refs see solutions", "d": "1/2018"}, {"body": "problem existing string ref api one like see fixed already object api contract magically remembers get attached currently rendered component possible unless keep track currently rendered component see part nt know react internas understanding setting stringref react accesses reactcurrentowner global since global module variable module generating div different code set reactcurrentowner one generating module nullundefined time ca nt opt reactcurrentowner global context object gets passed around automatically know context object already already get passed entire tree automatically right stopping changing code like reactcurrentownercurrent contextreactcurrentowner globalreactcurrentowner reactcurrentowner current obviously supernaive would allow user control store global without breaking compatibility solve problem people create issues new problems caused gt change suggesting break anyone else obviously solution would either support every existing case optional solution mentioned change api exactly string refs gt marked legacy docs encourage writing new code relies yeah sorry changing api microsoft deprecated api functionality windows windows years ago find new software written using api even today tutorials suggest use want get rid unwanted api remove matter long gave users switch api always someone unhappy get see solutions tbh like string refs user perspective nice specify name access ref api requires bare minimum information user clutter overhead would nt store directly owning react object track global instead force user pass ref holder reactcreateelement ref holder could passed automatically using jsx contexta hoc user could even customize ref holder works maybe collect hierarchical ref tree higher tier component ref holder undefined try resolve string ref well caller nt care ref would nt able access anyway skip error", "d": "1/2018"}, {"body": "part nt know react internas nt necessarily need follows directly react public api show example ca nt opt reactcurrentowner global context object gets passed around automatically know context object already already get passed entire tree automatically right stopping changing code like reactcurrentownercurrent contextreactcurrentowner globalreactcurrentowner reactcurrentowner current reason nt similar problem context parentchild relationship enough establish nt actually need user pass around keep track tree nesting refs different unlike context ref parent nt necessarily match tree parent consider example js function frame props return propschildren class button extends reactcomponent render return class framedbutton extends reactcomponent render return rendering react knows resulting rendered tree structure reimplement react scratch could still keep track tree structure algorithm would something like take topmost element type create instance class call function function get result element recurse note feature like context nt actually care elements created fact walk tree top bottom call functions gives path point time calculate current context traversing path merging contexts provided components order however refs different path alone way infer owns essential difference way know current string ref api react hypothetical reimplementation write currently executing component somewhere call render method read exit late js pseudocode reactdom function renderclasscomponent instance sharedbetweenreactandreactdomcurrentowner instance instancerender sharedbetweenreactandreactdomcurrentowner null pseudocode react function createelement type config let ref configref typeof ref string let capturedowner sharedbetweenreactandreactdomcurrentowner ref inst gt capturedowner ref inst nt implementation detail way implement exact string ref api two packages want fix anything change api example passing explicit argument something like would solve issue explicit link element owner component instance api change microsoft deprecated api functionality windows windows years ago find new software written using api even today tutorials suggest use look react blog see afraid changing api every major version prune deprecations soon viable migration path particular case string refs deprecated yet dedicate time expect following year deprecate support gone next major would nt store directly owning react object track global instead force user pass ref holder reactcreateelement believe pretty much proposed tracked pretty likely indeed solution go urgent changes right come back issue likely hope helps", "d": "1/2018"}, {"body": "peonmodel bug try reload page select input date first paste string wo nt work cause ca nt chrome choose input type text first paste works fine problem still passing string type text type date get output time", "d": "1/2018"}, {"body": "closing per comment nt checked sure react bug please prepare runnable examples eg fiddles without react demonstrate issue specific react", "d": "1/2018"}, {"body": "related", "d": "1/2018"}, {"body": "yep please see thanks", "d": "1/2018"}, {"body": "ones maintaining typescript definitions react ca nt help sorry", "d": "1/2018"}, {"body": "error quoting comes typescript react", "d": "1/2018"}, {"body": "yes otherwise would nt able compare new old ones", "d": "1/2018"}, {"body": "compare specific prop", "d": "1/2018"}, {"body": "html notion custom tags like rely app break future browsers add tag name could potentially use custom elements supported browser feature dash name ensure tag later reclaimed browser hope helps", "d": "1/2018"}, {"body": "think normal array mutable object javascript time create component array gets reversed", "d": "1/2018"}, {"body": "nanomosfet yes expected see consolelog use debugger incorrect behavior array data match rendered output first fiddle match second code except text node", "d": "1/2018"}, {"body": "havunen oh okay see talking extra text makes render differently", "d": "1/2018"}, {"body": "havunen would use case react docs link reference docs says props supposed read guessing child component considered prop accessing therefore think good idea rethink approach handling array could make state observing function lets top components know changed changed change state accordingly", "d": "1/2018"}, {"body": "docs page linked react components must act like pure functions respect props mutating prop calling pure function case behavior anything react make guarantees around calls thus mutations would happen want reverse child order copy first using like fiddle result safe mutate new every time thus even though technically mutation code could break", "d": "1/2018"}, {"body": "second achieving currently requires thirdparty support via libs like somewhat undermines simplicity fragments", "d": "1/2018"}, {"body": "nt seem quite right put something like since domspecific eg works react native think essentially asking standalone sounds bit like maybe something like would make sense current api js import rawhtml reactdom const content dangeroushtml hi content also inspired know hard would implement something like", "d": "1/2018"}, {"body": "gaearon essentially htmlreactparser accomplishes however purposes behind intentionally uglyrepetitive procedure actually serve reminder dangeroushacky thing docs set html directly react type dangerouslysetinnerhtml pass object html key remind dangerous feel like adding maintains notion dangerous amp hacky originally intended example association htmlreactparser could used way could conveniently disguise fact dangerous leaving future maintainers code indication potential vulnerability", "d": "1/2018"}, {"body": "jonnyasmar please refer discussion intentionally kept object property name part supposed tainted rather prop name", "d": "1/2018"}, {"body": "gaearon combing issue still entirely convinced best approach partially due scenarios like following much following code please stick let say two developers dev amp dev b work project dev senior dev well acquainted xss vulnerabilities dev b junior dev knows xss vulnerabilities necessarily wellversed enough recognize dev creates following component know import rawhtml reactdom export class injecthtml extends reactcomponent props html string render const content dangeroushtml thispropshtml dev b comes along discovers source code neat little component called hold beer import injecthtml componentsinjecthtml export class coolcomponentwithhtml extends reactcomponent render return may asking keep happening ops suggested fragment approach absolutely nothing thanks react unprecedented versatility could create sort dangerously deceptive html injecting component benefit fragment approach simplicity allowing functionality component think avoid encouraging overlydry implementations like dev came consistency utilizing also avoid implement two different components accomplish thing wrapperless rendering purpose avoid using also avoid changing behavior devs already used simultaneously creating predictable implementation devs like op rightfully assumed would work regarding react native gracefully degrade necessary nothing sure see problem opinionated future personally love disposal really interested see kind cool functionality afford little gem key attribute passed future may add support additional attributes event handlers idea event handlers would awesome really think try encourage way making robust feature react unnecessarily wrap things probably thing regularly react makes cringe say let make famous", "d": "1/2018"}, {"body": "finding issue struggling find solution see react way inject html without wrappers js generator code use write disk clean react output silly wrapping divs param string html html generated react return string cleaned html export const parsehtml html gt typeof html string return html replace g replace lt cuttlebellesillywrapper g else return html createfile pathtofile parsehtml html", "d": "1/2018"}, {"body": "value nt cleared input cleared state reset resets left nothing cleared", "d": "1/2018"}, {"body": "updated example", "d": "1/2018"}, {"body": "found underlying issue proxypolyfill reactdom attempts use fails issue located", "d": "1/2018"}, {"body": "wbern clarify react use development build developing seeing production production might accidentally running dev build production could try add heuristic detecting bad polyfills typically people develop using browser already supports nt think high priority", "d": "1/2018"}, {"body": "case want able run tests locally development build indeed right dev build proxy polyfill seems function ca nt assigned properties sure guess something could checked whether function thanks reply", "d": "1/2018"}, {"body": "function intentionally call think conclusion react expects real proxy polyfill implements limited subset incompatible react uses two possible solutions see stop using polyfill together react wo nt work together could change logic handle polyfill specifically feel like really responsibility fix also easy fix nt mind much expect people might start using polyfill widely future proxies become used libraries maybe good compromise fix side could please verify solves issue side", "d": "1/2018"}, {"body": "looks exactly way solve ok case turned want proxy polyfill sealed need turn babel polyfill little shape still think considering proxy polyfill lot people using taking best approach thanks much", "d": "1/2018"}, {"body": "fixed", "d": "1/2018"}, {"body": "fixed merger", "d": "1/2018"}, {"body": "alexfromapex mind angular injector pain tried get rid never use show example injector behaves better es modules", "d": "1/2018"}, {"body": "bit hard discuss without specific use case add something lets arbitrarily break encapsulation components however something similar achieved aliasing modules bundler eg webpack option override specific module fork could move overridable data andor components files context basically di mechanism based parent component tree hope helps", "d": "1/2018"}, {"body": "trysound gaearon added use additional use cases explored many avenues including aliasing modules problem always requires backend team modify deployment instead frontend simply hooking manipulating output deployment solution could even documented way manipulate data inject components without modifying current codebase necessarily code updates people problem", "d": "1/2018"}, {"body": "would solve problem generic javascript code eg ca nt modify functions libraries components different functions respect", "d": "1/2018"}, {"body": "might find way diagnose helpful", "d": "1/2018"}, {"body": "helpful thanks look like react rendered twice copy development one production look", "d": "1/2018"}, {"body": "might help try case accidentally duplicate could also bad webpack config eg accidentally including twice clever aliasing bad bundle splitting config", "d": "1/2018"}, {"body": "haha yeah three copies great starting point pull duplicates thanks help", "d": "1/2018"}, {"body": "since determined nt issue react going go ahead close", "d": "1/2018"}, {"body": "please create rfc thanks", "d": "1/2018"}, {"body": "ok thank", "d": "1/2018"}, {"body": "use", "d": "1/2018"}, {"body": "cc nhunzaker aweary", "d": "1/2018"}, {"body": "think happens default value reported checkboxes radios absence value propertyattribute unfortunately controlled text input code detatches value assigning updates master prevent prep test case send also working pr isolates controlled checked controlled value code help prevent accidents like future", "d": "1/2018"}, {"body": "sent lucky number", "d": "1/2018"}, {"body": "test confirm works intended master land next release react", "d": "1/2018"}, {"body": "provide complete example run please", "d": "1/2018"}, {"body": "gaearon github repo project test file failing", "d": "1/2018"}, {"body": "hi welcome glad want learn react lots resources around maybe good place start documentation support avenues want keep issue tracker clear bugs feature requests close good luck", "d": "1/2018"}, {"body": "hi dan like take direction put check determine component extended correctly tried putting reactpartialrendererjs server tests threw warning nt think right", "d": "1/2018"}, {"body": "maybe want right line", "d": "1/2018"}, {"body": "thanks think got pointed right direction ended case branch pr incoming shortly", "d": "1/2018"}, {"body": "yes conceptually equivalent", "d": "1/2018"}, {"body": "gaearon ah means functional setstate really get latest state including pending one coming non functional setstate doc nt say explicitly though", "d": "1/2018"}, {"body": "open rewordings docs feel free send prs important tradeoff keep docs readable people nt care details much", "d": "1/2018"}, {"body": "objects work javascript react anything magic mutate object object changes sharing object two parts code mutations seen suggested solution avoid mutation example hope helps", "d": "1/2018"}, {"body": "got thanks", "d": "1/2018"}, {"body": "bug warning telling scheduled extra update sometimes unavoidable eg layout measurement many cases completely avoidable causes performance issues unfortunately react redux currently written way triggers warning nothing side plan update react redux future versions", "d": "1/2018"}, {"body": "hello im rookie would like contribute learn something would great could help thanks", "d": "1/2018"}, {"body": "rockieroshan watch issues tagged good first bug label please nt post unrelated questions issues keep discussion focused", "d": "1/2018"}, {"body": "call cwm constrcutor need run something like scroll listen scroll event user see component give offset", "d": "1/2018"}, {"body": "nesmalltown ended something pretty similar thought would make cleaner would eliminate need pass similar component via props", "d": "1/2018"}, {"body": "following jsfiddle reproduces bug nt run sure url correct", "d": "1/2018"}, {"body": "using settings vm running either", "d": "1/2018"}, {"body": "apologies appears messed something fiddle sending one sadpandabear sent accurately reproduces bug", "d": "1/2018"}, {"body": "verify happens similar setup without react osspecific likely browser bug", "d": "1/2018"}, {"body": "ran vanilla js test jsfiddle using oschrome configuration achieved results looks like upstream issue chrome aweary suggested anyone wondering discussion bug opened following chromium issue", "d": "1/2018"}, {"body": "brandonrninefive thanks following chromium bug report close since issue react", "d": "1/2018"}, {"body": "hey welcome react try keep react issue tracker focused react bugs feature requests general support try one many avenues support noted docs", "d": "1/2018"}, {"body": "check line happens probably forgot import component imported wrong way like error message tries tell", "d": "1/2018"}, {"body": "please provide complete example reproduces issue far wrote enough", "d": "1/2018"}, {"body": "yeah tried reproducing codepen using createreactapp unable hoping insight", "d": "1/2018"}, {"body": "judging warning somehow gets method attached probably code maybe bad hoc something like", "d": "1/2018"}, {"body": "turns roll react redbox lingering around causing problem removed good", "d": "1/2018"}, {"body": "alternative adding new react api could moved userspace op could amend example js import createref createreactref class mycomponent extends reactcomponent render return componentdidmount thisrefsdivvaluefocus really dumb implementation js export default function createref inst refname instrefs instrefs inststringreffuncs inststringreffuncs inststringreffuncs refname inststringreffuncs refname c gt instrefs refname c return inststringreffuncs refname may literally work asis given think touching weird still seems like api could live outside react core would even possible write babel transform automatically", "d": "1/2018"}, {"body": "alternatively js function createref function ref c refvalue c return ref nt know edge cases exactly match live userspace nt require changes reconciler unless per intention users vanilla function refs migrate scheme well", "d": "1/2018"}, {"body": "benefit moving file size presumably would small enough vast majority libs would need anyway", "d": "1/2018"}, {"body": "sure nt quite follow conclusion idea going forward ref users use rather attaching callback ref convenience thing people currently using string refs going forward people still mostly use callback refs convenience thing seems like putting user space reduces react api surface area", "d": "1/2018"}, {"body": "think idea people use callback refs relegated power user feature since cumbersome harder explain", "d": "1/2018"}, {"body": "makes sense thanks", "d": "1/2018"}, {"body": "also related", "d": "1/2018"}, {"body": "main difficulty removing polyfill portal support unlike events nt fall naturally synthetic event system think minimum basic code add portal support back question whether better current polyfill shrug", "d": "1/2018"}, {"body": "jquense think qualifies good first issue someone interested picking would remove click event verify correctness browsers using dom test fixtures possibly remove click event related code changeeventplugin", "d": "1/2018"}, {"body": "past selves way head us p", "d": "1/2018"}, {"body": "dang haha fair enough take another look pr", "d": "1/2018"}, {"body": "ashamed admit many times searched repo find tried solve problem", "d": "1/2018"}, {"body": "additions api please create new rfc thanks", "d": "1/2018"}, {"body": "please follow issue template clear asking", "d": "1/2018"}, {"body": "bug shallow renderer want send fix", "d": "1/2018"}, {"body": "nt know ideas", "d": "1/2018"}, {"body": "try split two ie similarly react dom together", "d": "1/2018"}, {"body": "sounds good wan na", "d": "1/2018"}, {"body": "sure", "d": "1/2018"}, {"body": "gaearon done", "d": "1/2018"}, {"body": "done merge shall close issue", "d": "1/2018"}, {"body": "think existing fix work fine thought fixing like", "d": "1/2018"}, {"body": "think intentional behavior docs correct rather nt detailed enough imply wrong thing", "d": "1/2018"}, {"body": "close please feel free file issue docs instead", "d": "1/2018"}, {"body": "currently possible discussion", "d": "1/2018"}, {"body": "milesj ok cool thanks trap trick writing according javascript render var state thisstate render thisstate return think cause problem caused closures return closure problem remains return ok get real time thisstate use state getter failed thats think know understand mistake thanks sebmarkbage sorry bothering", "d": "1/2018"}, {"body": "hey try keep issue tracker bug reports feature requests please check support resources general questions react thanks", "d": "1/2018"}, {"body": "returns result time invoked change inputs props state change input possible returns different result still pure function somewhat loose definition pure pure functions allowed use state outside function react encourages patterns approximate purity much reasonable long side effects calls pure functions pure enough react", "d": "1/2018"}, {"body": "hope helps", "d": "1/2018"}, {"body": "performing sequence mounts unmounts causes error appears bug occurs reconciler", "d": "1/2018"}, {"body": "wan na try digging bug", "d": "1/2018"}, {"body": "tagging good issue get easy one", "d": "1/2018"}, {"body": "yes love dig", "d": "1/2018"}, {"body": "sounds good probably want look beginwork completework childfiber handle calls returns let know aspects confusing try explain", "d": "1/2018"}, {"body": "seems like minor mistake reconciling children causing duplicate deletions cases opened pull request changes", "d": "1/2018"}, {"body": "fixed likely bugs callreturn try stresstest feature find would great", "d": "1/2018"}, {"body": "nt jsx moment though discussion around adding jsx spec repo sorry phone otherwise link case less react jsx features", "d": "1/2018"}, {"body": "personally think try start maybe great", "d": "1/2018"}, {"body": "think related react nt override globals like", "d": "1/2018"}, {"body": "nt understand description expected behavior first time update function called see console log statement within single ms statement next time update function called seconds later see console log statements delayed expected delayed see calls within ms first time another calls within ms second time etc exactly expect code nt explain unexpected obvious expect sleep function work first time called work mean definitely second pause calls check putting say work stands ui broken interval calls update function minutes production nt help either nt stated exactly consider broken", "d": "1/2018"}, {"body": "gaearon assuming something react sure else would causing delayed production expect happen essentially wait second make api call component renders nt happen get rate limited minutes happens call per second rate limited work mean definitely second pause update consolelog calls check putting consolelog update say sleep work clarify trying delay update method trying delay network calls happen update method happen approximately second nt happen initial render ie nt work happening per second second time method called happen confident absolutely nothing react trust judgement look elsewhere solution", "d": "1/2018"}, {"body": "think mental model works slightly wrong try mentally translate callbacks probably see mistake make outer function async replace regular loop get desired behavior", "d": "1/2018"}, {"body": "might help", "d": "1/2018"}, {"body": "btw would understood original issue wrote expect one second interval items rather", "d": "1/2018"}, {"body": "would like work issue first contribution", "d": "1/2018"}, {"body": "benbraou", "d": "1/2018"}, {"body": "working issue weekend", "d": "1/2018"}, {"body": "overview changes updating comment subtasks issue get implemented subtasks x handle jest junit reports generation jestjunit reporter used output junit report reports junitjestresultsxml example circleci build insight based generated junit report found testentrypointsh calling several times unit test failure duplicated build summary x handle eslint junit reports generation every eslint run temporary junit report file created temporary generated files merged synchronously enhanced needed asynchronously one file finally temporary files removed synchronously introduced new file groups utilities around eslint junit formatting eslint script either use default formatter formatter example react circleci build insight based generated junit report found shows problems warning report currently broken multiple tests assessment whether better approach vs single test done x handle flow junit reports generation flow result treated single test single test output added exports method allowing writing single test junit repot example react circleci build insight based generated junit report found x handle prettier junit reports generation example react circleci build insight error prettier returns warnings x handle checklicensesh junit report generation refactoring new shell script writejunitreportsh create simple report example react circleci build insight error patent keyword used x handle checkmodulessh junit report generation example react circleci build insight error keyword used x testprintwarningssh nothing done script simply used extract messages warning x handle trackstats junitsh report generation also includes refactoring junit mode environment variable one entry point write junit reports x handle buildsh junitsh report generation x handle uploadbuildsh junit report generation example react circleci build insight error upload fails found x squashing commits fix upload failure x added junit report generation coveralls", "d": "1/2018"}, {"body": "sophiebits would like check proposal flow junit report generation start implementation flow supports json output propose flow script run normal dev mode normal output logged console case circleci build flow run option json output provided transformer implement generate junit output transformer could also used generate reports based return build scripts uploadbuildsh testprintwarnings think", "d": "1/2018"}, {"body": "think flow fine treat single test single output use formatted output sure much advantage try split flow multiple tests", "d": "1/2018"}, {"body": "see thank", "d": "1/2018"}, {"body": "pull request submitted summary currently build fails way know happened going logs circleci goal pr output junit xml metadata every build step allows circleci summary page display exactly step failed pr handle jest junit reports generation jestjunit reporter used output junit report reports junitjestresultsxml warning calling several times unit test failure duplicated build summary handle eslint junit reports generation eslint script either use default formatter formatter warning junit mode eslint results xml format written report fils also logged console may noise build logs warning tasks described package used initially writing junit report handle flow junit reports generation flow result treated single test single test output handle prettier junit reports generation handle checklicensesh junit report generation handle checkmodulessh junit report generation testprintwarningssh nothing done script simply used extract messages warning handle trackstats junitsh report generation handle buildsh junitsh report generation handle uploadbuildsh junit report generation handle junit report generation coveralls handle junit report generation danger", "d": "1/2018"}, {"body": "hi use issue tracker bug reports feature requests react question please check community support resources", "d": "1/2018"}, {"body": "please provide full project reproducing unfortunately typically people post separate files instructions reproduce issue ends unreproducible ask publish complete project github verify following instructions still reproduces thanks", "d": "1/2018"}, {"body": "git clone cd reactreproduce cd builds npm install node nodemoduleswebpackbinwebpackjs ok cd fails npm install node nodemoduleswebpackbinwebpackjs fails", "d": "1/2018"}, {"body": "works", "d": "1/2018"}, {"body": "figure", "d": "1/2018"}, {"body": "since works look trouble somwhere else", "d": "1/2018"}, {"body": "look discovered strange reason reactdom nodemodulesreactdom contains packagejson try", "d": "1/2018"}, {"body": "definitely exists likely either npm bug behind bad npm proxy try updating npm using yarn instead", "d": "1/2018"}, {"body": "helped thank enthusiasm help", "d": "1/2018"}, {"body": "awesome cc zkat case nt normal heard cleaning cache never necessary fix", "d": "1/2018"}, {"body": "reasonable issues hash picking http caches clearing cache using latest npm probably easiest solution", "d": "1/2018"}, {"body": "please see", "d": "1/2018"}, {"body": "react issue jsx one let keep track right repository", "d": "1/2018"}, {"body": "thanks pointer", "d": "1/2018"}, {"body": "provide working reproduction please thanks", "d": "1/2018"}, {"body": "looks like works maybe accidentally wrote wo nt work close provide info nt work happy fix right repository would probably", "d": "1/2018"}, {"body": "thanks looking right onclick propsonclick works bad use onclick gt propsonclick work onclick gt propsonclick close", "d": "1/2018"}, {"body": "thanks sweet", "d": "1/2018"}, {"body": "thanks everyone involved makes every day life much better", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank using react time enjoying hard work much appreciated", "d": "1/2018"}, {"body": "yes many thanks use many facebook excellent tools frameworks every day made development experience immeasurably enjoyable keep", "d": "1/2018"}, {"body": "thank made web development fun used jquery past nightmare synchronize ui app internal state react redux ui automatically synchronized state code less cluttered synchronization code using react code single js file introduced react learned split code smart components dumb components actions reducers vendor files made code easier search hit ctrl p jump part need work sincerely appreciate work make web development enjoyable easy human brains", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank much pleasure work environment", "d": "1/2018"}, {"body": "thanks making happen", "d": "1/2018"}, {"body": "guys unthinkable made convert ios native diehard platform agnostic reactnative evangelist everybody behind react reactnative flow jest kudos thank keep good work beyond", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank happy new year", "d": "1/2018"}, {"body": "react one first javascript frameworks looked nt get time understand properly fallen love huge thank also happy new year", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank happy new year learned lot amazing community", "d": "1/2018"}, {"body": "thank hard works guys inspired lot keep awesome clap tada", "d": "1/2018"}, {"body": "thank hard work happy new year open source come", "d": "1/2018"}, {"body": "thank inspiration happy new year", "d": "1/2018"}, {"body": "thank much everything", "d": "1/2018"}, {"body": "thank everyone made react made open source one resolution year atleast raise one pr react merged", "d": "1/2018"}, {"body": "thanks facebook make react ecosystem open source thanks contributors make react ecosystem better", "d": "1/2018"}, {"body": "thank learn lot", "d": "1/2018"}, {"body": "thank guys making one intuitive gamechanging libraries since jquery massive respect work guys open source community mindboggling much advanced webdevelopment whole sure angular might first around vue might simpler cases opinion react really hits sweetspot amount complexity combined functionality using library year honestly think one amazing things webdevelopment long long time happy around see one amazing libraries change way frontend industry works guys straightup game changers accomplished incredible things industry community instead keeping private use facebook guys decided make open source help advancement technology whole want thank guys amazing library guys brought us please keep good work wish amazing new year", "d": "1/2018"}, {"body": "thanks lot gabegreenberg awesome work reactjs wish", "d": "1/2018"}, {"body": "thank team react", "d": "1/2018"}, {"body": "thank facebook reactteam making webnative development joy", "d": "1/2018"}, {"body": "thank react team", "d": "1/2018"}, {"body": "thank react team love awesomeness", "d": "1/2018"}, {"body": "thank react team", "d": "1/2018"}, {"body": "thank react team coming years great", "d": "1/2018"}, {"body": "muchas gracias", "d": "1/2018"}, {"body": "thank providing platform productive fun made job better every day years", "d": "1/2018"}, {"body": "thank much hard work appreciated looking forward brings", "d": "1/2018"}, {"body": "thank everyone react team", "d": "1/2018"}, {"body": "thank lot hard work", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank guys awesome", "d": "1/2018"}, {"body": "thanks amazing incredible come", "d": "1/2018"}, {"body": "thank facebook", "d": "1/2018"}, {"body": "really grateful prepack partial evaluation symbolic execution abstract interpretation advanced concepts learnt theory seeing action open source project made program specialisation techniques accessible everyone specially without formal education thank much ofcourse thank react new direction new ideas though conflicting sometimes making everyone rethink javascript web frontend toes constantly correcting thanks open source work facebook done react related projects golden days would say", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank react team really love guys hard work much appreciated", "d": "1/2018"}, {"body": "thank react team facebook opensource team making react ecosystem", "d": "1/2018"}, {"body": "thanks open source developers", "d": "1/2018"}, {"body": "thank react team", "d": "1/2018"}, {"body": "thank guys great tools wish best new year", "d": "1/2018"}, {"body": "thank much", "d": "1/2018"}, {"body": "thank react team opensource contributors", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "huge thanks entire storybook team awesome software support", "d": "1/2018"}, {"body": "want thank great team making amazing work keep great work hearteyes hearteyes", "d": "1/2018"}, {"body": "thank react team making learning easy", "d": "1/2018"}, {"body": "thanks rock react awesome", "d": "1/2018"}, {"body": "thank rock", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank making development easier effective contributors great years ahead", "d": "1/2018"}, {"body": "thanks hard work", "d": "1/2018"}, {"body": "thanks lot making framework help development easier indonesia grateful react team contributors hard works keep", "d": "1/2018"}, {"body": "thanks awesome work", "d": "1/2018"}, {"body": "thank guys open sourcing tools makes everyday job pleasant efficient", "d": "1/2018"}, {"body": "thank react guys keep awesome work heart sparkles fire tada metal", "d": "1/2018"}, {"body": "thanks everything guys happy new year per\u00fa", "d": "1/2018"}, {"body": "thanks everyone", "d": "1/2018"}, {"body": "thank react changed career love", "d": "1/2018"}, {"body": "thanks everything guys hard work us", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "thanks working hard", "d": "1/2018"}, {"body": "thanks lot really enjoy working technologies every day ca nt see working without", "d": "1/2018"}, {"body": "really great inspiring work folks keep coming", "d": "1/2018"}, {"body": "thanks everything", "d": "1/2018"}, {"body": "thanks one", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank smile", "d": "1/2018"}, {"body": "thanks farreaching good work", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thank making development lot fun keep awesome work", "d": "1/2018"}, {"body": "thank everyone facebook every contributor across facebook oss", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "onya team", "d": "1/2018"}, {"body": "many thanks", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "spending per day react since years still enjoying thanks looking forward future evolutions", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "thank hard work react", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks open source", "d": "1/2018"}, {"body": "thank work", "d": "1/2018"}, {"body": "thank fantastic open source hard work keep way", "d": "1/2018"}, {"body": "thanks lot team", "d": "1/2018"}, {"body": "thanks team facebook hard work put react great way tying thmlcssjs together beautiful looking functioning system shipit", "d": "1/2018"}, {"body": "thanks team happy new year", "d": "1/2018"}, {"body": "thanks lot facebook team", "d": "1/2018"}, {"body": "guys inspiration thank", "d": "1/2018"}, {"body": "hello world", "d": "1/2018"}, {"body": "thank much work", "d": "1/2018"}, {"body": "thank much work", "d": "1/2018"}, {"body": "happy new year lets rock", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thank amazing work", "d": "1/2018"}, {"body": "thank hard work keep", "d": "1/2018"}, {"body": "thanks guys thanks dan", "d": "1/2018"}, {"body": "thanks work done make cool products react also jest immutable available everyone", "d": "1/2018"}, {"body": "thanks facebook team made something amazing lt", "d": "1/2018"}, {"body": "thaaaaaaaanks", "d": "1/2018"}, {"body": "thank contributing open source universe hardwork appreciated globe", "d": "1/2018"}, {"body": "long christmas holiday", "d": "1/2018"}, {"body": "us back today think close thanks hoping disappoint year either", "d": "1/2018"}, {"body": "nice see dan miss lot", "d": "1/2018"}, {"body": "learning react redux since would like contribute learn things way sorry sounds dumb", "d": "1/2018"}, {"body": "thank effort hard work guys amazing happy new year", "d": "1/2018"}, {"body": "thank happy", "d": "1/2018"}, {"body": "thank great work happy", "d": "1/2018"}, {"body": "jishaal notifications githubcom sent monday january pm subject facebookreact facebook engineers thank facebookreact react noreplygithubcom cc subscribed subscribed noreplygithubcom thanks lot team receiving subscribed thread reply email directly view github mute thread", "d": "1/2018"}, {"body": "would like contribute learn things", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "d\u011bkuji", "d": "1/2018"}, {"body": "thank guys", "d": "1/2018"}, {"body": "thanks hard work", "d": "1/2018"}, {"body": "thank much feature", "d": "1/2018"}, {"body": "great work", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thank love react great work", "d": "1/2018"}, {"body": "thank best open source community", "d": "1/2018"}, {"body": "thank react great", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks facebook engineers working hard within open source met many great people year looking forward working next year", "d": "1/2018"}, {"body": "humbly thank appreciate engineers facebook many great projects would nt possible without endless efforts thank", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "thank awesome cheers better internet", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thanks lot", "d": "1/2018"}, {"body": "massive thank time energy amp passion", "d": "1/2018"}, {"body": "cheers thank great", "d": "1/2018"}, {"body": "thanks making react today owe guys one p", "d": "1/2018"}, {"body": "respect guys thank hard work energy passion wish awesome", "d": "1/2018"}, {"body": "big thank entire team facebook gaearon acdlite sophiebits bvaughn sebmarkbage tomocchino tireless efforts towards making react loved library", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks open source team facebook keep great work front end changed much react good way", "d": "1/2018"}, {"body": "thank contribution community stand shoulders many giants react", "d": "1/2018"}, {"body": "guys amazing thanks project many people life changed", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "thanks ton wonderful library highly appreciate", "d": "1/2018"}, {"body": "thank hard work really appreciate react community", "d": "1/2018"}, {"body": "thank astonishing work", "d": "1/2018"}, {"body": "thanks ton everyone pushing react awesome tool happy user", "d": "1/2018"}, {"body": "thank making react mit", "d": "1/2018"}, {"body": "last two years react coming thanks lot", "d": "1/2018"}, {"body": "thank making react keeping mit completely changed way work frontend loving", "d": "1/2018"}, {"body": "thank much", "d": "1/2018"}, {"body": "thank creating react making mit cc jordwalke", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "happy new year aweary thank helping issue", "d": "1/2018"}, {"body": "function", "d": "1/2018"}, {"body": "maybe child array iterator unique key prop received put actual value", "d": "1/2018"}, {"body": "hey working see tests enhace far well realised tests considering null keys proceed way test eventually values perhaps open pr later guys give thoughts", "d": "1/2018"}, {"body": "close clear would accomplish reply happy continue discussion", "d": "1/2018"}, {"body": "eh nt know", "d": "1/2018"}, {"body": "pr merged upstream", "d": "1/2018"}, {"body": "progress", "d": "1/2018"}, {"body": "gaearon experienced regression yesterday upgrading simple repro problem seeing issue different error message sure still working fix take closer look later today anyone else experiencing problem workaround found far remove conditional logic least fix found", "d": "1/2018"}, {"body": "kevinzwhuang would like work figuring fix", "d": "1/2018"}, {"body": "sure gaearon work finding fix digging devtools findings note childnodes single element flattened text removed since mismatch flattened childnodes seeing elements childnodes array instead single flattened text element might something like jorrit mentioned", "d": "1/2018"}, {"body": "kevinzwhuang make video blog post u solve issue u solved try make video possible", "d": "1/2018"}, {"body": "getting closer finding root problem running code looks like changed operation would execute update text cases executes whatever variation operation reactdom assumes text nodes added removed fact nt child node flattened option text nodes also flattened flattening might issue whereas normal set operations generic components text nodes nt flattened components gaearon think solution something going back old behavior updates sure yet go yet step closer finding", "d": "1/2018"}, {"body": "sounds good really nt dug code happy review pr something works", "d": "1/2018"}, {"body": "think function something strange correct use instead like options problem contain solution js reactdomfiberoptionjs file function flattenchildren children let content documentcreateelement span flatten children warn nt strings numbers invalid types ignored silently skip invalid dom nesting warning catches cases fiber reactchildrenforeach children function child child null return return content", "d": "1/2018"}, {"body": "gaearon would please code review", "d": "1/2018"}, {"body": "probably provide better error message component type undefined", "d": "1/2018"}, {"body": "one working today tomorrow also happy new year", "d": "1/2018"}, {"body": "sure", "d": "1/2018"}, {"body": "closing could nt reproduce us problem please provide full reproducing example", "d": "1/2018"}, {"body": "tags capitalized already rendered inside svg one possible cause would tags created outside react mistakingly created using rather", "d": "1/2018"}, {"body": "misunderstood aweary comment thought repro original example decided try spent minutes spinning new react project try original code unfortunately realized code provided actually runnable asis wrap component recharts container provide expected props etc tried putting inside best guess trying reproduce unfortunately productive minutes future reporting bugs please provide examples people actually run somebody goes ten issues issues requires six minutes verify turns unreproducible hour spent nothing much appreciate time took file issue sad could fixed instead go issues know able look assuming reproducing case future thank", "d": "1/2018"}, {"body": "get right implementation close stale reference issue", "d": "1/2018"}, {"body": "think better solution disagree would like change api behavior suggest file rfc obvious behave eg objects start making exceptions rfc would let expand", "d": "1/2018"}, {"body": "closed", "d": "1/2018"}, {"body": "backspace fire topkeydown topinput topkeyup three event think problem event", "d": "1/2018"}, {"body": "also clemmy might context behavior chosen", "d": "1/2018"}, {"body": "mentioned children traversal semantics treats element syntax created shorthand pretext semantics exist since simply desugaring proposed changes semantics switching longer nonbreaking change think interesting idea fact take different component implement leading complexity breaks compatibility compelling response amannn patch change semantics separate behaviour klimashkin requesting behavioural change", "d": "1/2018"}, {"body": "think changing behavior might reasonable wo nt get much issue please submit rfc proposal", "d": "1/2018"}, {"body": "going close likely react bug probably affects nt actively working anymore welcome try updating react see issue persists", "d": "1/2018"}, {"body": "think accepts component instance first argument div agree api confusing practice people using enzyme days nt think invest much work fixing encourage try enzyme", "d": "1/2018"}, {"body": "reason need thisstate immutable componentwillmount runs feels like much understand mounting starts nt really get working enabling asynchronous rendering likely change assumptions lifecycles work particular want able abort rebase rendering work might fire multiple times mutations problematic fact trying softdeprecate methods favor alternatives safe async sorry detailed answer still figuring would work case api likely become constrained side effects mutations rather relaxed nt come across particularly supportive around sorry", "d": "1/2018"}, {"body": "say unlikely remove existing warning might consider adding separate method declare initial state would need rfc review detailed design proposal please create one interested sorry could nt help", "d": "1/2018"}, {"body": "reporting problem hot reloading supported feature react package using deprecated recommend removing webpack config waiting official hot reloading solution working", "d": "1/2018"}, {"body": "thank", "d": "1/2018"}, {"body": "sure reproduces problem nt third party dependencies", "d": "1/2018"}, {"body": "close since nt full repro create one please reopen file new issue thanks", "d": "1/2018"}, {"body": "alright solved last week thought post solution incase someone else stuck attempting code splitting route level eg bundles bundles dynamically imported async nature brief moment call screen would flicker go blank caused warning cause warning thrown dom tree server client different solution call inside promise bundle loaded follow docs really good explains step step", "d": "1/2018"}, {"body": "interested taking stab", "d": "1/2018"}, {"body": "help tried replicate issue local mission fixtures getting error like code import polyfills import loadreact reactloader loadreact gt import componentsapp app gt const react reactdom window reactdomrender reactcreateelement appdefault documentgetelementbyid root class numberinput extends reactpurecomponent constructor props super props thisonchange thisonchangebind thisstate value", "d": "1/2018"}, {"body": "avinashdvv afaik issue happening way babel typically transpiles classes might need add plugin like order work correctly", "d": "1/2018"}, {"body": "somebody search file chrome bug report please", "d": "1/2018"}, {"body": "could nt find related issue created new one", "d": "1/2018"}, {"body": "someone chrome team responded sounds like intentional change introduced commit like investigate see way work around react", "d": "1/2018"}, {"body": "looked issue found information seems react blur event nt getting dispatched event emitter disabled chrome native blur event triggered reactdom method disabled method enabled chrome native blur event seems triggered window time description chrome commit referenced says blur immediately attribute change made element unfocusable really sure immediately means context blur event used triggered also sure differs browsers interestingly commented line reactdom disables event emitter solved problem also ran tests everything passed maybe gaearon someone else react team provide insight event emitter needs disabled commit", "d": "1/2018"}, {"body": "point exactly say events work example fiddle would also help", "d": "1/2018"}, {"body": "bad nt chrome blog post changes mentions able reproduce issue attach handler target element using vanilla javascript distinctly observed firing properly circumstances open bug reports unrelated projects regarding similar issues interest also", "d": "1/2018"}, {"body": "close issue reproducing case react fault react something nt please reopen file new issue look thanks", "d": "1/2018"}, {"body": "welcome last checked react nt implementuse might worth mapping mouse touch events seemingly bettersupported modern way case", "d": "1/2018"}, {"body": "please create rfc otherwise hard progress issue like thanks", "d": "1/2018"}, {"body": "discussing comments determined containers need polyfill removed time closing issue action items open new issue", "d": "1/2018"}, {"body": "issue may specific draft someone wants investigate determine exactly problem maybe remove code react", "d": "1/2018"}, {"body": "issue div anyone using type input would need polyfill draftjs example div really want remove avoid gotcha users would want devonly warning use would want provide examples use polyfill outside react", "d": "1/2018"}, {"body": "yes selectionstart exist need order restore selection may need draft moved logic draft could skip selection restoration logic contenteditable already warning contenteditable saying unsupported", "d": "1/2018"}, {"body": "officially supported endorsed project using taking experimental tech everything comes", "d": "1/2018"}, {"body": "add issue removing reacthotloader resolved addition issue happened outputting react components classes downcompiling classes functions also resolved issue", "d": "1/2018"}, {"body": "please file issues maintainers wo nt know nt let know", "d": "1/2018"}, {"body": "works sounds like already solved userland sure react could better given focus bundle size see us adding utilities reactdom api proposal please file discuss detail otherwise actionable closing", "d": "1/2018"}, {"body": "prepare reactless reproduction file bug edge solved latest edge", "d": "1/2018"}, {"body": "fixed keep open next action item prepare minimal reproduction nt involve react", "d": "1/2018"}, {"body": "gaearon sure", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "glad fixed way make release soon", "d": "1/2018"}, {"body": "likely cut release week", "d": "1/2018"}, {"body": "meantime blocking master grab builds", "d": "1/2018"}, {"body": "dereklieu use package new version released", "d": "1/2018"}, {"body": "gaearon update expecting fix land npm", "d": "1/2018"}, {"body": "danwad cmon build react package release several lines webpack config", "d": "1/2018"}, {"body": "plan release within week", "d": "1/2018"}, {"body": "resolved start working sorry new open source", "d": "1/2018"}, {"body": "think issue still exists consistent", "d": "1/2018"}, {"body": "reference call dibs bug", "d": "1/2018"}, {"body": "got", "d": "1/2018"}, {"body": "encounter practice cases matter speed downsides prooosal", "d": "1/2018"}, {"body": "encounter practice cases matter matter cases need print component b change case propagate value component get expected personally nt care much like unexpected behavior case b change component using comparison behavior case expected treated value expect rerender occurs though behavior case unexpected ok rerender still expect component print speed downsides prooosal see actually two problems two proposals proposal fix case sure speed downsides nt expect react slowdown proposal fix double render case b using samevaluezero instead samevalue expect work least slower current objectis polyfill shipped fbjs package compare also nt expect much downgrade stop ship polyfill additional checks hood current polyfill", "d": "1/2018"}, {"body": "mean end sequence prop practice curious real world use case", "d": "1/2018"}, {"body": "example xy x equals negative number", "d": "1/2018"}, {"body": "alternatively nt evaluate inside react happen", "d": "1/2018"}, {"body": "idk yet let check", "d": "1/2018"}, {"body": "turns react issue evaluates injecting dom think better keep things someone whants render done userland seems prevent rerendering changing polyfill samevaluezero fbjs impossible print negative zero example bellow immediate change positive zero", "d": "1/2018"}, {"body": "think everything works expected great dive spec react enjoyed sorry bothering", "d": "1/2018"}, {"body": "closing per lack response", "d": "1/2018"}, {"body": "also experiencing double click disabled radio inputs", "d": "1/2018"}, {"body": "think check element click disabled current target set event stoppropagation prevent bubble", "d": "1/2018"}, {"body": "could please turn rfc", "d": "1/2018"}, {"body": "close issue trying funnel specific api proposals rfc repo please open one interested thanks", "d": "1/2018"}, {"body": "truth really longterm roadmap watching participating probably best way stay informed changes making next months", "d": "1/2018"}, {"body": "struggling understand exactly want questions react encourage check community support resources inside produce one rerender intentional clear whether want two renders instead practical example would probably help", "d": "1/2018"}, {"body": "gaearon took sometime make codesandbox demo illustrate mean yesterday coding complex js animation react project finding watcher helpful many cases want watcher vue watcher love react two things think vue better watcher animation essentially react automates headache part work state changes ui changes accordingly kind watcher inevitablly cases state changes want simple ui rerender natural react could take care elegant manner watcher understand life cycle sort nail twitts really makes feel confusing life cycle ever react projects apart loading data backend use case life cycle watch certain state props changes something exactly watcher honest watcher helps coding clearly think rather worrying one two life cycle write code ps possible really love suggestion thank much", "d": "1/2018"}, {"body": "react use compare anything like agree separate watcher declaration specific value better watchers created individual values logic complex example want fire single side effect either two values change created two watchers deduplicate requests later similarly might need access current previous values properties one determine eventually need something like anyway least react gives immediately instead leaving scratch head later requirements match limited api suggested api friendly static typing typescript flow easily type props state right types throughout component including lifecycle methods watcher api proposed manually type individual watcher methods make sure diverge propsstate type definitions", "d": "1/2018"}, {"body": "fixed", "d": "1/2018"}, {"body": "issue still need fixing", "d": "1/2018"}, {"body": "knowledge yes", "d": "1/2018"}, {"body": "want work fix point undefined props overwritten later ensures objects shape helps performance", "d": "1/2018"}, {"body": "course tried failed following point currently code concats strings leaves children tags effect babysitting developer bit child option tag single string special code path followed nt followed child array strings could get client tests reactdom working push changes made far maybe another experienced dev guide additional changes necessary", "d": "1/2018"}, {"body": "btw thanks performance explanation", "d": "1/2018"}, {"body": "work progress send pr try take", "d": "1/2018"}, {"body": "done thanks", "d": "1/2018"}, {"body": "hi issue seems unassigned take one would love help", "d": "1/2018"}, {"body": "progress far concerned welcome fork continue pr hope get working properly", "d": "1/2018"}, {"body": "great thanks", "d": "1/2018"}, {"body": "hello sent pr fix apparently caused regression introduced integration fiber method overwriting children nodes options setting selected option resulting bug seen previous version feature set prop since bug related removedaltered previous pr unable fork", "d": "1/2018"}, {"body": "thanks faling testcases accidently referenced twice actually meant working pr", "d": "1/2018"}, {"body": "yes needed update tests conditional serverrender streamrender need extra block seemed better place since tests inputs textareas selects also updated clientcleanrender test returns one text node besides also tested using fiddle provided ssr sample project created reproduce warning error confirm issue resolved", "d": "1/2018"}, {"body": "thanks lot", "d": "1/2018"}, {"body": "please refile still problem thanks", "d": "1/2018"}, {"body": "going close favor", "d": "1/2018"}, {"body": "related gaearon", "d": "1/2018"}, {"body": "reply however bigger issue portals featurecomplete ideally want add support server rendering way eg letting container string also wanted support crossrenderer portals thought point would move api react namespace since would longer dom specific think overall agree needs done prefer time changes make reactportal nt think changes trivial though require discussion issue tracking isomorphic portals point might well make ergonomic use", "d": "1/2018"}, {"body": "hey aweary apologies appreciate self assigned day ago timeframe could released", "d": "1/2018"}, {"body": "still support", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "ways make support", "d": "1/2018"}, {"body": "dropped support two years ago fork try get state works may need many changes wo nt supporting officially", "d": "1/2018"}, {"body": "issue still available love tackle contribute open source project use every day adding props often declared objects later read transformed passing dom would provide little clarity camelcase preferred rather ensuring js reserved words used", "d": "1/2018"}, {"body": "another weeks issue still going anyone review proposed solution sorry end year scrambling finish current projects went holidays issue got attention filed think prerequisite really fixing want help please chime easy task", "d": "1/2018"}, {"body": "problem gaearon", "d": "1/2018"}, {"body": "problem snapshot tests components use using latest version updates related error gaearon", "d": "1/2018"}, {"body": "close think general happy take prs docs faq section different tools", "d": "1/2018"}, {"body": "wanted let guys know sometimes get violation even scripts present page suspected caused addons see", "d": "1/2018"}, {"body": "error also occurs use translation assuming since manipulate dom react ca nt reconcile changes took forever track putting case anyone else trying use localizejs issue localizejs workaround add tags containers react components localize nt mutate dom obviously stop getting translated localizejs comes fix js import render reactdom const approot documentgetelementbyid app approotsetattribute notranslate true render approot update localizejs support confirmed bug end working fix meantime solution using usage translate string translate string expressions translate string expressions translate expressions aka variables", "d": "1/2018"}, {"body": "closing browser issue per discussion someone finds related react please file new one two examples react nonreact ones see react wrong", "d": "1/2018"}, {"body": "gaearon maybe really chrome issue maybe react using something leads", "d": "1/2018"}, {"body": "nt keep issues forever open maybe something wrong want investigate happens please help far people investigated could nt find anything react find browser issues nt see reason keep issue open unless see specific thing wrong react case happy take fix", "d": "1/2018"}, {"body": "thoughts complete response means maybe still helpful saying nothing first think agree delaying reconciliation order batch updates beneficial agree rerendering synchronously would inefficient many cases better batch updates know likely get several ones example inside browser handler call want rerender twice instead prefer mark dirty rerender together exiting browser event asking exact thing batching write updates immediately without waiting end reconciliation think one obvious answer either solution tradeoffs reasons think guaranteeing internal consistency even updated synchronously know rerender parent component synchronously batching goes window right objects provided react internally consistent means use objects guaranteed refer fully reconciled tree even older version tree matter use state flushed synchronously proposed pattern would work however say state needs lifted shared across components move parent want highlight typical react apps rely single common kind reactspecific refactoring would daily basis however breaks code model proposed would flushed immediately immediately flush without rerendering parent means would give batching depending case degrade performance significantly also subtle cases break eg mixing data yet flushed proposed flushed immediately create new state refs present problem examples theoretical fact react redux bindings used exactly kind problem mix react props nonreact state know mobx users bumped intuition might bumping scenarios consider fault maybe read much instead read directly mobx mutable objects instead react solve today react update reconciliation flushing would see printed refactoring makes lifting state safe yes inconvenient cases especially folks coming oo backgrounds want mutate state several times instead thinking represent complete state update single place empathize although think keeping state updates concentrated clearer debugging perspective still option moving state want read immediately sideways mutable object especially use source truth rendering pretty much mobx lets also option flush entire tree know api called think documented yet definitely point release cycle note actually forces complete rerendering updates happen inside call use sparingly way break guarantee internal consistency sum react model always lead concise code internally consistent ensures lifting state safe enabling concurrent updates conceptually react behaves single update queue per component discussion makes sense discuss whether apply updates immediately doubts updates applied exact order however case haha recently talking async rendering lot admit done good job communicating means nature r amp go idea seems conceptually promising really understand implications spent enough time one way explaining async rendering react could assign different priorities calls depending coming event handler network response animation etc example typing message calls component need flushed immediately however receive new message typing probably better delay rendering new certain threshold eg second let typing stutter due blocking thread let certain updates lower priority could split rendering small chunks milliseconds noticeable user know performance optimizations like might sound exciting convincing could say need mobx update tracking fast enough avoid rerenders think true cases eg matter fast mobx still create dom nodes rendering newly mounted views still true consciously decided okay always wrapping objects specific javascript library tracks reads writes maybe benefit optimizations much asynchronous rendering performance optimizations think fundamental shift react component model example consider case navigating one screen another typically show spinner new screen rendering however navigation fast enough within second flashing immediately hiding spinner causes degraded user experience worse multiple levels components different async dependencies data code images end cascade spinners briefly flash one one visually unpleasant makes app slower practice dom reflows also source much boilerplate code nice simple renders different view could start rendering updated view background imagine without writing coordination code could choose show spinner update took certain threshold eg second otherwise let react perform seamless transition async dependencies whole new subtree satisfied moreover waiting old screen stays interactive eg choose different item transition react enforces takes long show spinner turns current react model adjustments lifecycles actually implement acdlite working feature past weeks post rfc soon note possible flushed immediately flushed immediately way start rendering new version view background old version still visible interactive independent state updates would clash want steal thunder acdlite regards announcing hope sound least bit exciting understand still might sound like vaporware like really know hope convince otherwise coming months appreciate flexibility react model far understand least part flexibility possible thanks flushing state updates immediately", "d": "1/2018"}, {"body": "wonderful depth explanation decisions behind architecture react thanks", "d": "1/2018"}, {"body": "mark", "d": "1/2018"}, {"body": "thank dan", "d": "1/2018"}, {"body": "issue awesome question awesome answer always thought bad design decision rethink", "d": "1/2018"}, {"body": "thank dan", "d": "1/2018"}, {"body": "call asyncawesome setstate smile", "d": "1/2018"}, {"body": "tend think everything implemented async first find need sync operation well wrap async operation wait completion much easier make sync code async code need wrapper reverse basically requires complete rewrite unless reach threading lightweight", "d": "1/2018"}, {"body": "gaearon thanks extensive explanation nagging long time must good reason nobody tell one makes total sense see really conscious decision thanks lot extensive answer really appreciate maybe read much props instead read directly mobx mutable objects instead think quite true indeed mobx props typically used component configuration domain data typically captured props domain entities passed around components thanks lot", "d": "1/2018"}, {"body": "gaearon thanks detailed great explanation though still something missing think understand want sure event registered outside react means maybe ref example batching taking place consider code class app extends reactcomponent constructor props super props thisstate count componentdidmount thisrefbtnaddeventlistener click thisonclick componentwillunmount thisrefbtnremoveeventlistener click thisonclick onclick gt consolelog setstate thisstatecount thissetstate state gt count statecount consolelog setstate thisstatecount render return setstate setstate setstate setstate small research browsing source code think know happens react ca nt fully control flow event ca nt sure next event fire panicmode trigger state change immediately thoughts thinking", "d": "1/2018"}, {"body": "although bit related probably clearer open new issue new questions use somewhere description link one", "d": "1/2018"}, {"body": "gaearon given terse reply think take would also answer concretely", "d": "1/2018"}, {"body": "mweststrate thought opening new issue realized directly related question asynchronous discussion decisions made making async well thought add making sync nt mind opening new issue nt convince post related issue wink", "d": "1/2018"}, {"body": "kaybarax becuase question sync sync mentioned post think know want sure get official answer hehe smile", "d": "1/2018"}, {"body": "react ca nt fully control flow event ca nt sure next event fire panicmode trigger state change immediately sort although exactly related question updating asking cases react enable batching react currently batches updates inside event handlers managed react react sits top call stack frame knows react event handlers run point flushes update event handler set react currently makes update synchronous know safe wait updates happen soon future versions react behavior change plan treat updates low priority default end coalesced batched together eg within second optin flush immediately read", "d": "1/2018"}, {"body": "awesome", "d": "1/2018"}, {"body": "question amp answer documented somewhere reachable thank guys enlightening us", "d": "1/2018"}, {"body": "learned lot thanks", "d": "1/2018"}, {"body": "iamdustan find solution problem gaearon made simple reproduction issue seems like updates top level container blocked intermediate still continues hierarchy child somewhere deeper sets state based listener attached seems really wierd started noticing made links update using subscription model", "d": "1/2018"}, {"body": "turn failing unit test react repo", "d": "1/2018"}, {"body": "could try narrowed seems like happens child parent component updated within tick parent defines", "d": "1/2018"}, {"body": "added failing test repo sure put react repo would mind look", "d": "1/2018"}, {"body": "search files ending contain", "d": "1/2018"}, {"body": "whosesmile way get work selectedindex instead value general even applying change value working", "d": "1/2018"}, {"body": "nubunto still interested", "d": "1/2018"}, {"body": "clemmy still want lmk sure long backlog", "d": "1/2018"}, {"body": "gaearon prioritizing studies next months please feel free assign task someone else", "d": "1/2018"}, {"body": "sounds good clemmy good luck studies", "d": "1/2018"}, {"body": "tracking issue since chime current usecase thoughts long post background necessary think use mainly abtesting cases want determine bucket client render component often still want provide default variant noscripttag people without js graceful degradation cases js crashed providing noscriptfallback conditional functionality determined client might bit niche uncommon either could easy make work fully server render default component rendertostaticmarkup including using couple providers make redux reactrouter work remove nested noscripttags resulting string quite common us since also use noscriptfallbacks lazyloaded images use dangerouslysetinnerhtml client alias reactdomserver noop instead rendertostaticmarkup read existing textcontentinnerhtml noscripttag use dangerouslysetinnerhtml js crashes bucket set catch error replace relevant noscripttags divs set innerhtml innerhtml noscripttag tl dr leads two reflections proposed solution ignore content noscripttags client perfect long still keep existing content really really awesome react handles want really great story around noscript say automatically removing nested noscripttags per suggestion key would doable new codebase either way separate issue", "d": "1/2018"}, {"body": "issue hand though trying start digging investigating codebase supressing hydration warning seem hard glance quite figure best place would ignore subtree noscripts guess live reactdom would also like make sure reconciler waste time subtrees currently valid place reconciler api could achieve", "d": "1/2018"}, {"body": "oh clear saying valid usecase using noscript content even js turned manually simulating noscript currently graceful degradation cases choose load reactapplication performance reasons older devices one ever use content provided server cases though think proposed solution good one", "d": "1/2018"}, {"body": "naive way solve issue javascript clientreactdomjs shouldsettextcontent type string props props boolean return type textarea type noscript lt new typeof propschildren string typeof propschildren number typeof propsdangerouslysetinnerhtml object amp amp propsdangerouslysetinnerhtml null amp amp typeof propsdangerouslysetinnerhtmlhtml string solves hydration warning makes reconciler ignore everything inside keeps content dom since already current tests passing sure side effects notice react devtools acting bit weird nt show content since react nt really know said children looked like sure anything indicative something undesirable new codebase thought mention fix feedback since might way would happy submit pr discussion seems feasible course", "d": "1/2018"}, {"body": "hey ephem still working fix would like give go let know thanks", "d": "1/2018"}, {"body": "hey muhammadinam since unsure direction fix suggested good waiting feedback pr maybe gaearon active thread could chip last post relevant regards fix rest background context around use noscript bit walloftexty sorry basically think questions late place solve optimally since reconciler already knows children props etc saying contains text kind true client solves problem bad consequencessideeffects obviously bad direction happy let go let work muhammadinam terrible first glance happy open pr continue discussions", "d": "1/2018"}, {"body": "current thinking would make sense make rfc", "d": "1/2018"}, {"body": "would maybe merge createref rfc maybe sure get time start another rfc things right pretty busy working compilation work maybe someone else would like push", "d": "1/2018"}, {"body": "write rfc going follow along bit first though op still reflect thinking matter", "d": "1/2018"}, {"body": "although need incrementally move better ref system rather surprising users believe adding createref deprecated string refs good first step towards getting point", "d": "1/2018"}, {"body": "trueadm believe copying pr good rfc got purpose", "d": "1/2018"}, {"body": "decided opposite fix would completely disable patterns since never intentionally supported iterable functions treated functions iterables", "d": "1/2018"}, {"body": "action item send pr completely disables functionality", "d": "1/2018"}, {"body": "hey new opensource help", "d": "1/2018"}, {"body": "sure probably easiest issue like give try please go ahead", "d": "1/2018"}, {"body": "gaearon would suggest bug feature request number new bugs caused mouse events bubbling portals previously using ca nt fixed even extra div layer filter mouse events eg rely mousemove events propagating document implement draggable dialogs way workaround addressed future release", "d": "1/2018"}, {"body": "think called feature request current bubble behavior portals expected intended goal subtree act like real child parents would helpful additional use cases situations like ones seeing nt feel served current implementation difficult workaround", "d": "1/2018"}, {"body": "understand behavior intended think significant bug disableable", "d": "1/2018"}, {"body": "mind library working dom preserve dom implementation behavior break example jsx class container extends reactcomponent shouldcomponentupdate gt false render gt class root extends reactpurecomponent state container null handlecontainer container gt thissetstate container render gt thisstatecontainer amp amp reactdomcreateportal portal thisstatecontainer work dom expect receive events like dom implementation example events propagated portal working around dom parents considered bug", "d": "1/2018"}, {"body": "folks thanks discussion however nt think helpful argue whether something bug instead productive discuss use cases examples met current behavior better understand current way best way future general want api handle diverse set usecases hopefully overly limiting others ca nt speak core team imagine making configurable likely solution generally react leans consistent api configurable ones also understand behavior dom works nt think good reason say nt way lots reactdom behavior different dom works may events already different native version instance completely unlike native change event react events bubble regardless type unlike dom", "d": "1/2018"}, {"body": "instead productive discuss use cases examples met current behavior two examples broken us migration react first draggable dialog launched button attempted add filtering element portal use called stoppropagation mouse key events however rely able bind mousemove event document order implement dragging functionality common user moves mouse significant rate cursor leaves bounds dialog need able capture mouse movement higher level filtering events breaks functionality portals mouse key events bubbling inside dialog button launched causing display different visual effects even dismiss dialog nt think realistic expect every component launched via portal bind event handlers stop event propagation second popup context menu launched either primary secondarymouse click one internal consumers library mouse handlers attached element launches menu course menu also click handlers handling item selection menu reappearing every click mousedownmousedown events bubbling back button launches menu ca nt speak core team imagine making configurable likely solution generally react leans consistent api configurable ones implore team reconsider position particular case think event bubbling interesting certain use cases although ca nt think offhand think crippling others introduces significant inconsistency api never supersupported everyone used render outside immediate tree nt work way officially deprecated favor portals portals break functionality critical way nt seem easy workaround think fairly described quite inconsistent also understand behavior dom works nt think good reason say nt way understand coming think case fundamental behavior b currently workaround think dom nt work way strong argument completely convincing one", "d": "1/2018"}, {"body": "clear request considered bug mostly gets prioritized fix sooner rather later", "d": "1/2018"}, {"body": "mental model portal behaves place tree avoids problems overflow hidden avoids scrolling drawinglayout purposes many similar popup solutions happen inline without portal eg button expands box right next take example pick reaction dialog github implemented div right next button works fine however wants different zindex lifted area contains comments need change dom position change safe unless things like event bubbling also preserved styles popups pop outs legit would solve problem component inline layout opposed floating outside", "d": "1/2018"}, {"body": "workaround worked calling directly portal rendering works great since single abstraction component uses portals otherwise need fix calls", "d": "1/2018"}, {"body": "methyl assumes know every event need block bubbling tree case mentioned draggable dialogs need bubble document bubble render tree", "d": "1/2018"}, {"body": "styles popups pop outs legit would solve problem component inline layout opposed floating outside sebmarkbage sure question makes sense problem inlining component would nt inline", "d": "1/2018"}, {"body": "think problem use cases ported two methods conceptually different things concept portal overloaded think agree modal dialog case almost never want modal act like child button opened trigger component rendering controls state think tho mistake say portal implementation therefore wrong instead saying button right tool case modal child trigger nt rendered one possible solution keep using another userland option near app root handles rendering modals passes via context method render arbitrary modal element need root", "d": "1/2018"}, {"body": "ca nt called inside lifecycle methods react pretty much precludes use cases discussing fact components completely broke migration portals official recommendation agree concept portals might ended overloaded sure love solution global component context though seems like could easily solved flag createportal specifying whether events bubble would optin flag would preserve api compatibility", "d": "1/2018"}, {"body": "try clarify usecase portals would love see option stopping events propagation manychat app using portals create layers layer system whole app used several types components popovers dropdowns menus modals every layer expose new layer eg button second level menu trigger modal window button open popover cases layer new branch ux solves task new layer open user interact new layer others bottom system created common component rendering layer javascript class rendertolayer extends component stop e gt estoppropagation render const open layerclassname uselayerforclickaway render renderlayer thisprops component stops propagation event types react docs allowed us update react", "d": "1/2018"}, {"body": "need tied portals rather sandboxing portals example", "d": "1/2018"}, {"body": "even seems needlessly complex simply add optional boolean flag createportal allowing bubbling behavior blocked", "d": "1/2018"}, {"body": "gaearon pretty unfortunate situation certain slice us could someone dear look", "d": "1/2018"}, {"body": "add current thinking use cases supported really use cases need context flow current parent subtree subtree act logical child terms dom complex modals best example almost never want events form modal window propagate trigger button almost certainly need context passed themes etc say usecase could mostly solved modalprovider closer app root renders via high enough event propagation nt affect anything starts feel like workaround opposed well designed architecture also makes library provided modals annoying users since longer self contained", "d": "1/2018"}, {"body": "would add tho terms api nt think modal case really wants use old skool pretty close distinct tree except context propagation often needed", "d": "1/2018"}, {"body": "please file new issue maintainers almost never read old issues hard track clear real problem misunderstanding", "d": "1/2018"}, {"body": "option best option far work ssr explain idea far options except either create high maintenance burden everyone outside react source force custom element authors entire universe abide reactspecific rules universal rules agree setting attributes standard way universe passing data elements way matches declarative html attributes work time law universe therefore guaranteed way pass data elements people nt happy designed strings elements repeat elements accept values via object properties map certain attributes something relied time people like object properties accept nonstrings bare minimum react wants work every single custom element universe burden people react needs realize nt god many libraries people use besides react therefore react shoud default pass data via standard react accept fact custom element authors extendoverride methods class definitions making accept things strings prime example libraries like aframe react accept custom element author wants custom element work every possible library react author rely make element default compatible everything default libraries rely attributes whole universe work ifs ands buts unless makes big changes soooooooo said least fix redirected realize gets us simply closer standards think implications elements sometimes objectproperty api developers choice use knowing work time developers sometimes take advantage object properties developers always aware whether objectproperty interface exists given element custom objectproperty interfaces alternative interface nt necessarily map attributes knowledge attributes vs properties solution react wishes augment standard respect laws universe allow attributes work time default means default map pass value along unchanged nonbreaking change fact fixing change would otherwise result meaningless string passed come alternative way let react user optionally use props user conscious objectproperty interfaces exist wants explicitly use interfaces seems like option using sigil extra syntax honestly hard learn solution gets closest ideal based question available symbol though settling something like escapable form perhaps like readable example want prop specifically characters covered whatwg html syntax spec work hope another topic option best option far ssr work serialize prop data known limitations set object properties client side hydration hydration nt used client therefore props nt make sense ssr oh well never worked nt need work phpstyle javastyle ssr sends static html hydration rely attributes goes say use react ssr probably use clientside hydration nt want hydration simply aware fact nt use props case simple web works react make caveat clear documentation still include features option give people control api like option people configure attributes map props props map attribues help people make ssr work even nonhydrating type ssr let people define attribute written actually pass prop ssr nt pass prop pass prop attribute ssr otherwise specified using sigil etc end following seems like solution would work option used default behind scenes fix react nt get people way api like option tuning really need including ways tune ssr client happy new year", "d": "1/2018"}, {"body": "want respond points fear thread already incredibly long sorry making longer p universal rules agree setting attributes setattribute standard way universe passing data elements way matches declarative html attributes work time law universe therefore guaranteed way pass data elements nt entirely true nothing platform enforce custom element expose attributes interface could easily create one accepts js properties guaranteed way pass data lack enforcement mechanisms means ca nt rely either style html attributes js properties certainty people nt happy designed strings elements repeat elements accept values via object properties map certain attributes something relied time encourage folks even bother creating attributes properties accept rich data like objectsarrays data serialized back attribute string example one object properties reference dom node ca nt actually stringified also stringify reparse object loses identity meaning reference another pojo ca nt actually use reference since created entirely new object people like object properties accept nonstrings therefore react shoud default pass data via setattribute standard javascript properties equally standard html elements expose attributes corresponding properties interface example htmlimageelementsrc react accept fact custom element authors extendoverride setattribute methods class definitions making setattribute accept things strings authors could actually seems way nonstandard using js properties may also expose weird issues related parsing cloning element react accept custom element author wants custom element work every possible library react author rely setattribute make element default compatible everything default libraries rely attributes whole universe work ifs ands buts unless makes big changes sure arrive conclusion libraries prefer setting js properties custom elements angular example maximum compatibility authors back attributes js properties cover largest surface area possible uses elements created polymer default allow attributes work time default means default map setattribute pass value along unchanged nonbreaking change fact fixing change would otherwise result meaningless object object string passed think react actually passing value unchanged calling results unless proposing call object object nt unchanged think maybe relying author overridden may plausible encourage create corresponding js properties instead monkeypatching dom", "d": "1/2018"}, {"body": "think react actually passing value unchanged calling results react coercing values string passing basically agree said agree people things ways standard forces everyone one way still think option used default sigil specifying use instance properties fix react nt coerce args strings option api fine tuning option done well hydration ssr solutions map data either attributes props specified use option api", "d": "1/2018"}, {"body": "react coercing values string passing setattribute see since folks nt define custom defaults", "d": "1/2018"}, {"body": "since folks nt define custom defaults like result html obviously web developers aware happens pass nonstrings element attributes example aware pass nonstrings aframe elements free without library getting way", "d": "1/2018"}, {"body": "react needs realize nt god many libraries people use besides react unnecessarily snarky note thread care many different options visions take custom element design certainly obvious done", "d": "1/2018"}, {"body": "sebmarkbage sorry nt mean snarky think react nice lib thought words carefully especially everyone religion meant react popular react potential sway people things certain way may work places fe could tell people rely instance properties custom elements would nt work custom elements react currently converts values passed element attributes strings react done example would need aframereact works around string problem even exist react let us ability make choice pass data elements like plain javascript make satisfied user sorry choice words double think next time", "d": "1/2018"}, {"body": "close since little activity issue nobody created small reactonly example demonstrates indeed issue react", "d": "1/2018"}, {"body": "also run example ca nt understand description exactly steps supposed perform demonstrate issue screenshot devtools help exactly supposed see", "d": "1/2018"}, {"body": "gaearon fiddle define child component crashes fetch resolved fixed example makes explanation obvious anyway thanks lot", "d": "1/2018"}, {"body": "bit vague hard address kinds suggestions best submitted rfcs require think detail welcome submit one thanks", "d": "1/2018"}, {"body": "since creating higher level wrapper might well provide provides semantics", "d": "1/2018"}, {"body": "thanks gaearon answer unfortunately createfactory job desired logic support three cases component class constructor simple component function component factory createelement function nowhere else course createelement wrapper job besides bunch stuff want use jsx use wrapping kind alien createelement counterpart instead react createelement jsx pragma value transformreactjsx complete nogo main reason described ui library abstraction provide way implement base components like combobox datepicker etc uilibraryagnostic way used later programmers real react components real vue components depending whathever programmers prefer without know anything alien wrapper library used implement given uilibraryagnostic components make long story short course technically problem export representations component react class constructor also react factory user decide import version wants nevertheless makes things unnecessarily confusing anyway facebook whatever reasons want add direct support react factories react createelement function okay course close github issue go mentioned workaround frankly would understand big deal adding support react factories react createelement function easy implement would make react much flexible surely useful many use cases besides kinda feels natural use component factories main component representations", "d": "1/2018"}, {"body": "sorry frustrating skeptical goal completely agnostic components still reactspecific concepts like refs keys may directly map vue others work think still want control time custom pragma feel alien specified babel plugin option even tell users alias react package like preact feel like better solutions understand seems big deal add support us committing support something means taking large burden especially something used tiny minority cases works may need coded tools eg optimizing aheadoftime compiler even small additions like make optimizations harder impossible impractical still feel strongly encourage file rfc", "d": "1/2018"}, {"body": "hi gaearon something", "d": "1/2018"}, {"body": "hi anyone help continue reactbrowsereventemittertestjs test busy working time keep going pr thank much", "d": "1/2018"}, {"body": "meh things checklist come might", "d": "1/2018"}, {"body": "suggestion extremely fragile really hope using practice also give wrong values cases set rfc process proposed api changes like welcome participate close issue glad see rfc", "d": "1/2018"}, {"body": "closing favor honest sure release happen given dedicating effort persuade nhunzaker jquense maybe licensing issue running rebuild underlying npm modules already updated mit rebuilding give files fully mit could use npm entry point use fully mit code", "d": "1/2018"}, {"body": "worked around adapting npm shrinkwrap npm predecessor packagelockjson explicitly pull mitlicensed fbjs using npm means using contents dist rather contents one lib folder webpack packages", "d": "1/2018"}, {"body": "yep fair enough", "d": "1/2018"}, {"body": "close please feel free file detailed rfc want", "d": "1/2018"}, {"body": "ianstormtaylor know reliable way detect natively supported looks like logic currently use event support detection wo nt work case includes spec properties extremely helpful hard think would polyfill spec properties browsers usually nt include event properties ca nt provide consistently", "d": "1/2018"}, {"body": "aweary current logic nt work use seems like similar detection method right although honest sure reliable needed react much broader browser targets polyfilling spec properties sure think would hard actually advise instead trying polyfill properties toplevel properties synthetic events users reach retrieve think might larger issue react currently browser spec seems like react concerned explicitly inserting characters text whereas browser spec things like nt insert text would result keys like super familiar react events seems like existing really named leaving open option add full place", "d": "1/2018"}, {"body": "ianstormtaylor tested detection method return latest chrome seems like events triggered though sure nt work polyfilling spec properties sure think would hard actually advise instead trying polyfill properties toplevel properties synthetic events users reach nativeevent retrieve seems fine better browser support think might larger issue react onbeforeinput currently browser spec beforeinput seems like react concerned explicitly inserting characters text whereas browser spec things like formatbold formatitalic nt insert text would result keys like cmdb nt implement spec behavior could potentionally see could update event plugin nt think inconsistencies intentional", "d": "1/2018"}, {"body": "aweary ah gotcha might chrome nt implement spec fully yet sure one updating could good nt know enough internals able suggest things think issue right text input whereas newer specs result used events nt necessarily characterinserting", "d": "1/2018"}, {"body": "seems like best offer monkey patching consoleerror seems like way whatever hooks expose would end looking similar talked alternative way intercept warnings generic way maybe way", "d": "1/2018"}, {"body": "gaearon would work development since messages displayed production builds react lingyan opened issue last summer requesting ability production subsequently closed react release believe feature still warranted given scenarios mentioned original description correct wrong given fiber knows markup reused would much additional work either add attribute markup provide hook either via consoleerror ability apps listen", "d": "1/2018"}, {"body": "would work development since consoleerror messages displayed production builds react yes explained even know mismatch cases production extra work eg comparing attributes even hook existed consistent", "d": "1/2018"}, {"body": "gaearon mean extra work done development case allow applications enable extra work production configure hook report applications enabling understand performance impact react know mismatches reliably even development yes agree wont reliable way detect mismatch", "d": "1/2018"}, {"body": "mean extra work done development yes case allow applications enable extra work production configure hook report nt really see us adding global configuration options like avoided need years seems odd first one ideally want sane behavior everyone feel strongly please create rfc gets enough support consider", "d": "1/2018"}, {"body": "following conversation twitter rough story far naively thought react renderrelated callbacks amp dom updating would debounced using requestanimationframe nt appear case way opt missing something gaearon currently batching different setstate within one event handler everything flushed exit many cases works well enough pitfalls using raf every update also looking asynchronous rendering default raf really help much rendered tree large instead want split noncritical updates chunks using ric ready flushed could result lot extra work updating mousemove couple things land frame eg network response mouse click pitfalls seeing raf gaearon yes use concept expiration updates coming interactive events get short expiration time must flush soon network events get time wait based decide flush timeslice raf play well browser stuff like inputs need flush updates immediately event point back talking priorities updates needed flush immediately fwiw chrome amp firefox moved input events render steps eg mousemove already eg touchmove scroll resize intersectionresize observers gaearon cases really need always use raf flush callback beneficial scenarios animation exact amount blocking work update synchronously help much pitfalls controlled inputs need flush synchronously else value gets sync true sort stuff totally easy manage especially across components examples component updating interval like also runs decorative animation using end two dom updates single frame one interval one raf includes diffing actual dom update updating component based listener mean updates per frame eg edgesafari wired mouse call within mouse move events still get dom updates need make sure scheduling one raf per frame hard guess component running animation containing component also running animation inner component dom gets modified twice per frame another animating component within one gets modified three times per frame demo suppose would reduce computation nice nt issue feels like react updating raf know three components pending updates run single update starting parentmost element needs updating really excited ric stuff coming react thought pitfalls already solved update state tasks rendering render react ensure nt work necessary keen hear makes tricky especially something find spec solution", "d": "1/2018"}, {"body": "reopening discussion", "d": "1/2018"}, {"body": "today us holiday asked acdlite bring date thinking actually raf schedule priority earlier async implementation later cut fully remember happened reply learn forget please ping lot stuff going accidentally miss old issue", "d": "1/2018"}, {"body": "gaearon suggested controlled inputs could issue eg user types text input task queued fire update event component state updated reflect new input given browser may render tasks possible happen task executes meaning old state reapplied text input unless missing something feels like could happen without raf input value changed task queued fire possible item earlier queue update state trigger rendering create issue could nt recreate issue flooding task queue makes think html spec nt quite right likely single task queued update input value fire event case raf nt problem either rbyers shine light browser behaviour possible user type text input raf happen change input event dispatched", "d": "1/2018"}, {"body": "ca nt speak scheduling fairly familiar limitations around input value setting main one updates async boundary cursor position reset update nt synchronous making typing impossible since react forcibly keeping value value vs typed value input value reset synced value update untilunless user updates prop value match oninput reported value", "d": "1/2018"}, {"body": "jquense trouble recreating missing", "d": "1/2018"}, {"body": "gaearon working totally separate nonreact project trialing using purpose found edge seems schedule callback poorly noticeable delay dragging stuff cursor vs using nt think figured yet one part problem callback seems called immediately vsync events occurred means effectively rendering mouse data previous frame mouse events also triggered many times within frame computer mouse move triggered times per frame means add delay seems noticeably worse would estimate doubles visual latency probably apply clickingtypingetc maybe pressure edge fixing tradeoff worth nt live promise better seems edit scheduled vsync events emitted obviously incur delay rendering changes immediately chrome still feels faster maybe another delay somehow caused edge well pushes feel sluggish chrome", "d": "1/2018"}, {"body": "syranide think safari scheduling bug file one edge webkit bug edge bug", "d": "1/2018"}, {"body": "jakearchibald nice nt think description edgeissue entirely correct though sure either scheduling vsync correct events emitted edge seems emit events come rather beginning frame means clickevent received milliseconds animation callback executed next paint", "d": "1/2018"}, {"body": "syranide callbacks called within render steps vsync style calculation paint raf callbacks step style calculation happens part paint happens part", "d": "1/2018"}, {"body": "jakearchibald ah guess saying thing end ultimately seems current event model emitting events come edge incompatible spec could fix without changing event model would incur delay everything end rerendering multiple times per frame iirc correctly edge already plays badly caps yeah", "d": "1/2018"}, {"body": "sorry bit loop problem something like pseudoish code ie store simple values move heavy lifting raf something react prohibits solution app side eg maybe setstate miss window", "d": "1/2018"}, {"body": "copypasting acdlite response messenger understanding jake suggesting default noninput events animation priority users nt think optinginto mode probably better today default sync would breaking change subset reasons async breaking change would nt get interruptions would still stale issue dan means would happen earlier like enable async mode yet think default priority noninput events low priority dan call flush within second two low priority model opt animation mode anyway might well call use dan new api forces synchronous update also integrating another library may already nt want call inside one react wo nt update next frame point want anyway far requests browser vendors thought would cool way know event fired target way could flush pending interactive updates dom browser decides interpret event right best wrap userprovided event handler time wrapped handler called late", "d": "1/2018"}, {"body": "think enough context answer questions keep rolling", "d": "1/2018"}, {"body": "mouse moves fairly unique almost always safe drop event least also drop corresponding mouse overout tell one dropped events intentional require permanent effects two clicks happening event loop need result first happen second one since events happen multiple times single frame raf batching really suitable fix problem effect happens os driven sequence synchronous text input many effects deferred later next frame main strategy requestidlecallback things dependent per frame level mouse moves animations scrolling touch handling often important coordinated happen also safe drop extra events also often necessary update even events time eg inertial scrolling special strategy mentioned tricky problem set coordinators two parts app libraries set raf difficult determine one happen first letting user schedule one raf react schedule another flush work set one difficult guarantee frame flush setstate setstate flush likely better model actually set state react changes global states like mouse position time state cause permanent change change inertia application state follow rules perframe rules dropped", "d": "1/2018"}, {"body": "gaearon understanding jake suggesting default noninput events animation priority users nt think optinginto mode hmm quite talking debouncing event handling render steps idea call frequently want resulting render steps would debounced point rendering frequently display capable displaying debouncing events might also useful something browsers starting think separate thing also tricky comes etc far requests browser vendors thought would cool way know event fired target way could flush pending interactive updates dom browser decides interpret event right best wrap userprovided event handler time wrapped handler called late something flush ui task queue sounds doable nt really understand problem yet sure right fix problem right seems react nt debounce rendering raf due one following design choices react browser bugs raf missinginsufficient standards stuff around input updating makes feel like issue could nt able recreate issue think mechanism cause issue recreation issue anywhere either reduction version react problem like poke around get grips issue sebmarkbage events intentional require permanent effects two clicks happening event loop need result first happen second one since events happen multiple times single frame raf batching really suitable fix problem nt quite follow unless talking debouncing events nt mean network response landed update data current view click received change view happened next render react currently updates dom twice update current view network request change view click feels like rendering debounced called twice result rendered since user going able see one outcome anyway assumption much cheaper rendering including actual dom update rendering mean component function various callbacks related rendering things dependent per frame level mouse moves animations scrolling touch handling often important coordinated happen unless missing something model thinking would give free various events update state cheaply perhaps times frame resulting render would happen frame state would result changes made events two parts app libraries set raf difficult determine one happen first letting user schedule one raf react schedule another flush work set one difficult guarantee frame flush setstate setstate flush true wonder much issue would practice react could provide raf flush queued callbacks", "d": "1/2018"}, {"body": "tried create reduction input sets state updates seeing anything go missing maybe particular browser happens", "d": "1/2018"}, {"body": "jakearchibald various events update state cheaply perhaps times frame resulting render would happen frame state would result changes made events possible albeit unlikely scenario consider might tracing path mouse imagine entire motion took place frames debounce would final position rather whole path since setstate would nt inherently accumulate updates accumulate would wasteful scenarios mistaken ends losing optimization anyway since want process events next tick saying likely something react needs concern possible gotcha idea call setstate frequently want resulting render steps would debounced requestanimationframe point rendering frequently display capable displaying another edge case consider would render target audio hardware raw data something visual ticks terms missed events specifying limiter raf points way outside norm react usage ca nt things people felt worthwhile think things loud", "d": "1/2018"}, {"body": "dakom possible albeit unlikely scenario consider might tracing path mouse imagine entire motion took place think unrelated chromefirefox already debounce render steps chrome exposes full series events using getcoalescedevents cases need full frequency mouse positions better taskbased model edgesafari uses chrome still deliver full series event objects even main thread busy built demo want experiment kind event timing even would nt need maintaining array points nt lose data next unless missing something idea react able describe content component scratch based props state another edge case consider would render target audio need realtime audio processing really needs main thread eg audio worklets", "d": "1/2018"}, {"body": "understanding jake suggesting default noninput events animation priority users nt think optinginto mode hmm quite talking debouncing event handling render steps idea call setstate frequently want resulting render steps would debounced requestanimationframe point rendering frequently display capable displaying think meant thing andrew concise default noninput events means priority setstates originate inside noninput events flushed", "d": "1/2018"}, {"body": "events intentional require permanent effects two clicks happening event loop need result first happen second one since events happen multiple times single frame raf batching really suitable fix problem nt quite follow unless talking debouncing events nt mean think sebastian saying think saying important result every click event flush next click event consider button sets sets product developer expectation fire otherwise two fast clicks send money twice errorprone conceptual model think important treat inside interactive events clicks differently inside example network responses understanding plan flush interactive updates like clicks end event flush updates including network low priority chunked andrew earlier point switch approach using animation practical default react flush second fix user would need move calls special call flushes immediately called opts processed synchronously since important happens think would user responsibility put call inside however exclude providing hook coordinate libraries sum think delaying flushing raf breaks react rendering model developer expectations cases value event handler depends state event handlers read state plan keep inside interactive events click acting like flushing browser event boundary nevertheless plan downgrade calls low priority meaning comes network request noninteractive event processed separately split flushed within second two offer new method opt asyncbydefault behavior called inside flushed right exits important escape hatch scenarios really need manually flush update react considers necessary example click handler want measure dom node use information final rendering result making lowpriority outside events decided must flush like clicks break users use animation updates flushed inside events like exact scenario happy migration path ask call inside callback want callback ones might want use therefore user control help might made mistake somewhere ask andrew seb verify understanding fifth point final decision gotten yet might use strategy bit obvious user less errorprone intended takeaway see could use rafs clicks already efficient strategy work nonclicks ric adding raf mix make better need think animationspecific use case likely build top flexible flushsync promitive expose anyway user get overrendering animation default worried instead animation flush rarely leading research right raf solution document provide convenience api", "d": "1/2018"}, {"body": "gaearon consider button sets disabled thisstatehassent onclick thisstatehassent null thissendmoney sendmoney sets hassent true product developer expectation onclick fire otherwise errorprone conceptual model ahhhhh yes makes total sense understanding plan flush interactive updates end event flush updates including network low priority chunked ric yeah given model makes sense rest summary making setstate lowpriority outside events decided must flush like clicks break users use animation updates flushed inside exact scenario happy migration path ask call setstate inside flushstate requestanimationframe callback want callback ones might want use therefore user control guess also break things anyone already using raf debounce throttled ric instead guess would break clock demo timing important still case nested components animations maybe answer nt pipe animations react seems sensible folks tried convince otherwise past say provide specific optin schedule render debounced raf reactaware way parent amp child render thank going reasoning amp future scheduling react", "d": "1/2018"}, {"body": "product developer expectation onclick fire interesting thing least exact situation happen mention react developer expectation already ca nt trust react flush state changes fast enough prevent double clicks", "d": "1/2018"}, {"body": "interesting thing least exact situation happen happens sounds like bug rather intentional decision nt seen reproduce please file issue look state changes enqueued inside event handlers always flushed exiting event handlers react imagine react could sort issues multiple roots edge cases like react solves completely forbidding reentrance algorithm adding portals bug assume solved", "d": "1/2018"}, {"body": "cryrivers wo nt affected event handlers nt deferred", "d": "1/2018"}, {"body": "nt read whole thread apologies miss something replying rbyers shine light browser behaviour possible user type text input raf happen change input value update event dispatched update event assume mean change right raf happen mean raf callback invoked yes believe possible follows main thread could busy processing task input task arrives queued raf task arrives queued input task processed queues task dispatch task gets chance run previously queued raf task runs raf callback sees updated value input event dispatched cc dtapuska knows", "d": "1/2018"}, {"body": "rbyers bad mean input keydown rather change could nt recreate issue nt mean nt possible", "d": "1/2018"}, {"body": "gaearon offer new flushsync fn method opt asyncbydefault behavior setstate called inside fn flushed right exits important escape hatch scenarios really need manually flush update react considers necessary example click handler want measure dom node setstate use information final rendering result could use simulate work ie class app extends reactcomponent constructor props super props componentdidmount settimeout gt thissetstate barvalue consolelog render consolelog reactdomrender documentgetelementbyid root output", "d": "1/2018"}, {"body": "going synchronous always wait timeout whereas needs future versions plan make timeout async default", "d": "1/2018"}, {"body": "default right path synchronous even sometimes specifically code must execute different stack triggered must push manually eg via settimeout", "d": "1/2018"}, {"body": "depends call react call inside react event handler flushed react exits browser event handler synchronous happens toplevel stack react call outside react event handler flushed immediately", "d": "1/2018"}, {"body": "please see reply", "d": "1/2018"}, {"body": "michaelbenin react still use correct attribute names example emit see nt please file separate issue", "d": "1/2018"}, {"body": "yet another way work around", "d": "1/2018"}, {"body": "browser shows errors thrown like jsdom file issue jsdom answering question jsdom show errors updating jest surfaced test suite even ignored react would still show tests logs turns event handler object prevent browser jsdom logging error know think would make sense react minimal patch react would diff apackagessharedinvokeguardedcallbackjs bpackagessharedinvokeguardedcallbackjs dev use track whether error event ever called let didseterror false let iscrossoriginerror false let shouldignoreerror false dev error null amp amp eventcolno amp amp eventlineno iscrossoriginerror true eventdefaultprevented shouldignoreerror true dev thishascaughterror false thiscaughterror null shouldignoreerror amp amp error null errorsuppressreacterrorlogging true great though relies setting undocumented field error object thereby mutating added field nt know convention preventing logging intentionally swallowed errors think course action remove support custom property instead check event handler default prevented store error muted similar currently store change logic log muted errors according new flag set handler tests calls thus silences logs make possible disable behavior tests actually verify logging probably motivated enough follow somebody else wants take happy discuss", "d": "1/2018"}, {"body": "like idea replacing", "d": "1/2018"}, {"body": "tagging good issue look promising merge solution worth investigating proposed implementation plan", "d": "1/2018"}, {"body": "take issue first contribution", "d": "1/2018"}, {"body": "sure", "d": "1/2018"}, {"body": "hi able reproduce issue code output later adding tests error boundary warning gone code approach remove custom following comment questions removing property sure code changes required remove custom property thinking remove reactfibererrorlogger reactfiberscheduler going right", "d": "1/2018"}, {"body": "going right sounds like good first step need use decided whether error suppressed expose information scheduler comment outlined strategy", "d": "1/2018"}, {"body": "sounds great think could start pr get things rolling", "d": "1/2018"}, {"body": "sure got little stuck trying get node bundles working gcc seems stripping part planning fix run buildprod tests determine much work needed would useful see progress far start pr", "d": "1/2018"}, {"body": "think pr would helpful even incomplete", "d": "1/2018"}, {"body": "alright start one tonight", "d": "1/2018"}, {"body": "reactproptypes moved different package since react please use proptypes library instead import proptypes proptypes", "d": "1/2018"}, {"body": "seems like consider error user code plan fix", "d": "1/2018"}, {"body": "seems like practically enough demand leave", "d": "1/2018"}, {"body": "issue still need taken care take stab", "d": "1/2018"}, {"body": "hey facebook using stuffs onthefly transpiles build scripts right issue scripts command spent five years everything ended wrong github best evidence using years baffling facebook something like also transpiles rollupconfigjs since rollup uses buble instead babel thereby missing many language features call approach tripletranspile reason never met got nose site often recognize", "d": "1/2018"}, {"body": "noticed react went nodejs order avoid transpiling build scripts one actions suggested facebook instead regretting use code months nodejs transpilation months commandline utilities want point facebook transpiling esnext node practically looks like source code easily debugged production without source maps method allows take properly structured code aka classes java people like convenient singlefile executables native modules need apply tripletranspile awesome rewrote zero transpiler ecmascript esnext bash published documented freckin great use transpilation simple packages petition facebook appropriate idea use everywhere benefiting insane amount time spent figuring", "d": "1/2018"}, {"body": "trying funnel api proposals rfc repo please feel free create pull request review close one appreciate discussion", "d": "1/2018"}, {"body": "decided fix bug technically html allows attributes casing strictly less work react side nt make sense work make output aesthetically consistent feel strongly welcome provide realworld benchmarks sites heavily using ssr demonstrate impact perf could take", "d": "1/2018"}, {"body": "found issue trying figure reactjs atom logo got since chemical substance reacts chemical reaction result arrangement electrons changed around atoms name logo reactjs really fits concept behind", "d": "1/2018"}, {"body": "lock since resolved matter thanks everybody participated", "d": "1/2018"}, {"body": "seems like use case really supported past either led errors think say missing feature portal api easily broken existing old api specific api suggestions around problem please create rfc thanks", "d": "1/2018"}, {"body": "close stale say unlikely work fix unless dig happened progress closing", "d": "1/2018"}, {"body": "complete reproducing example fiddle closing takes lot time investigate reports unfortunately focus ones provide reproducing code ready run", "d": "1/2018"}, {"body": "sorry mate forgotten try put together fiddle find time reopen later", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "related might also want consider renaming", "d": "1/2018"}, {"body": "ran similar issue updating code hopefully helps someone future nt interpret way used easy work around confusing first", "d": "1/2018"}, {"body": "fixed", "d": "1/2018"}, {"body": "hmmm totally agree mweststrate wasted half day researching adding error boundaries app live testing seeing errors get caughthandled fallback element nt rendered instead error propagated app crashed nt expected behavior based error boundary description perhaps mentioned docs design fallback gets rendered production wanted test fallback rendering invalid prop passed child component child component falls able test error boundary branching control flow since actually within dev environment edit must revise complaint app nt crashing fallback element getting rendered full screen error pops covering app nt immediately overtly clear could dismissed knowing intended behavior nt issue docs could little informational regarding", "d": "1/2018"}, {"body": "still getting well matter webpack settings", "d": "1/2018"}, {"body": "someone comes looking solution jsdom related links", "d": "1/2018"}, {"body": "gaearon could clarify mean running app production mode webpack etc see duplicate errors console sent bugsnag app config specifies boundary provider", "d": "1/2018"}, {"body": "jgentes error stuff logged development seeing symptoms please file new issue example", "d": "1/2018"}, {"body": "nt seem like anything us close fault let us know", "d": "1/2018"}, {"body": "problem anymore probably fixed specifically", "d": "1/2018"}, {"body": "jquense fix make sense", "d": "1/2018"}, {"body": "last attempt nt review time grew stale much simpler solution maybe something like instead somebody wants pick let know easiest task relatively comfortable working discussing proposed implementation issue jumping code particular need figure ux ergonomic problem", "d": "1/2018"}, {"body": "gaearon hi like take stab easiest task sounds great least poke around learn react internals handson particular preference thoughts desired ux implementation mine dump text diff via like pros text easy copy share post chat ticket transfer network automatic reporting hooking console test ci environment text easier compare tests text console log available reliable every browser platform text console log searchable filterable cons harder distill relevant subset information mismatch additional context needs looked text manually dump element reference via like pros browser developer tools highlight mismatching element user explore surrounding dom whatever extent necessary user navigate react developer tools explore surrounding vdom cons element references console log usable browser developer tools mind tools tests ci error reporting hook console methods record detect report anomalies browser developer tools display element references differently may available necessarily provide reliable navigation surrounding dom react developer tools may available every browser platform text diff element reference pros cons code tests develop support information flushed onto user may harder scan heavier development bundle", "d": "1/2018"}, {"body": "gaearon working discovered warn props mismatch serverside prop missing browserside prop set explicitly expected behavior jsx warn hydrated element extra prop gt const div documentcreateelement div const markup reactdomserverrendertostring divinnerhtml markup fail packagesreactdomsrctestsreactmounttestjs reactmount warn hydrated element extra prop", "d": "1/2018"}, {"body": "started adding existing component stack trace already adds value warnings components named properly yall think", "d": "1/2018"}, {"body": "one closely related problem vagueness simply listing large complex views words warning vague debug concept branch converts would love feedback whether useful brush happy open separate tightly focused issue preferred thank", "d": "1/2018"}, {"body": "gilesv oh looks nice love merge component stack pr somehow keeping us contributors", "d": "1/2018"}, {"body": "sompylasar thanks glad makes sense could add pr initial inclination since nt depend would neater keep prs atomic possible let clean anyway open pr either master branch", "d": "1/2018"}, {"body": "gilesv noticed changed warnings missed two sets similar functions top bottom reactdomfibercomponent file would great found warnings appear found top ones called added tests like add component stack tests bottom ones", "d": "1/2018"}, {"body": "sompylasar awesome check probably try highlight called via test merge work", "d": "1/2018"}, {"body": "latest thinking close outdated review pr described", "d": "1/2018"}, {"body": "congrats switching react es modules", "d": "1/2018"}, {"body": "action item reproduce false positive mixing development production versions described figure happens check source code branch described probably happens set flag development figure fix", "d": "1/2018"}, {"body": "try looking one update unable make progress thanks", "d": "1/2018"}, {"body": "opened pr warn null sets development mode think set removed check running test suite shows everything passing still warns uncertain add production script dev build test used reproduces error spyon console error var altcreatereactclass require createreactclassjs processenvnodeenv production altcreatereactclass require createreactclassminjs", "d": "1/2018"}, {"body": "sorry pretty busy wrapping things holidays try pass prs next days", "d": "1/2018"}, {"body": "worries know ton stuff plate briefly chatted nhunzaker twitter happy carry working guidance", "d": "1/2018"}, {"body": "read article seems disagree conclusions issue guys mind give opinion goes", "d": "1/2018"}, {"body": "best practice imo never use arrow function class property harms testability limits engine optimize", "d": "1/2018"}, {"body": "really see issue progressing without rfc someone feels strongly please create one thanks", "d": "1/2018"}, {"body": "mjackson see point trying understand boat using formik react form library sure heard project thing bothersome pass props passed parent component form create bunch repetition overall feels outright wrong know formik parent component could pass props form inputs also makes component file longer read wanted avoid formik reason started writing form library would pass repeated properties children however trying solve problem think came reason formik passing props input elements nt think easy way filter manipulate potentially deeply nested children without recursively look entire childrens prop tree could potentially nested pass props conditions match better way definitely case sort find manipulate functionality would bring lot value like think think another edge case maybe dreading work recursively traversing honestly hoping probably better way want still trying understand formik nt done first place gaearon see merit comment would definitely creating rfc thoughts would super appreciated", "d": "1/2018"}, {"body": "update nearly eight months still issue able work around solution similar one suggested ozhurbenko would really nice see fixed", "d": "1/2018"}, {"body": "convinced important abstraction bit leaky anyway nt think necessarily normalize sure real world scenarios actually care adding bytes support nt seem worth", "d": "1/2018"}, {"body": "wrote thoughts react works way", "d": "1/2018"}, {"body": "gravitymsc babel fix problem", "d": "1/2018"}, {"body": "updates", "d": "1/2018"}, {"body": "proposed context api solves nt plan changes existing one think relevant anymore", "d": "1/2018"}, {"body": "workarounds listed far nt work following worked perfectly though ref needed", "d": "1/2018"}, {"body": "zpao still wan na", "d": "1/2018"}, {"body": "repro", "d": "1/2018"}, {"body": "thanks letting us know close", "d": "1/2018"}, {"body": "zuimeiaj approach instantly closes ime composition box completely blocks input using google japanese ime ubuntu chrome eyesofkids completely right saying found different results events fired sequence least different browsers definitely inconsistency browser implementations many times fire startchangeend may implications regards react onchange also worth mentioning software keyboards mobile devices also fire composition events autocomplete suggestions note even normal english input latin characters general problem nt necessarily restricted chinese japanese etc ime composition", "d": "1/2018"}, {"body": "static value property key must meaning never update working expected nowhere say documentation please check docs see keys", "d": "1/2018"}, {"body": "u please tell actual issue warnings call onreachend method flatlist", "d": "1/2018"}, {"body": "started happening last week ive resolved bug past using suggestions error", "d": "1/2018"}, {"body": "seems like nt need enforce files nt need files using esm correctly enforced", "d": "1/2018"}, {"body": "similar need passing arbitrary context without validation ca nt use need mix react subtrees use different major versions react trying incrementally migrate projects react ways gaearon", "d": "1/2018"}, {"body": "quite sure asking hard answer could wrap whole child tree component provides every context property might consumed tree would help know know constraints better", "d": "1/2018"}, {"body": "sorry lack detail short building plugin framework provides utility react components plugin hosts well plugin implementors trying build generic component plumbs arbitrary context react tree boundary trees different sides boundary different major versions react could wrap whole child tree component provides every context property might consumed tree yeah work ideally like implementation nt need know possible context properties ahead time though think cover majority use cases static set keys uses store storesubscription default thanks quick response", "d": "1/2018"}, {"body": "follow though think cover majority use cases static set keys reactredux uses store storesubscription default nt actually work since nt work react seems like react nt know handle contexts constructed react unable mix trees preserving context", "d": "1/2018"}, {"body": "example top level component providing context would react component context value object react version associated sure mixing react versions one tree work", "d": "1/2018"}, {"body": "sure right fix would tagging good first issue somebody investigate", "d": "1/2018"}, {"body": "issue seems effects called effects latter effect mounting although issue sure would work assuming ensure refs guaranteed mounted seems make sense offchance nt guarantee react provides could flip order effects processing although breaks two tests around refs called correct time suggesting hard constraint otherwise seems autofocussing would need broken away mounting process solve issue seems like odd thing reasons edit clear update gets marked returns true host component needs autofocus gets fired reconciler makes sense", "d": "1/2018"}, {"body": "seems like went alternative", "d": "1/2018"}, {"body": "may looking", "d": "1/2018"}, {"body": "technically react attach nonreactgenerated markup although pretty fragile", "d": "1/2018"}, {"body": "seeing reopen", "d": "1/2018"}, {"body": "sounds like trying work around real problem hoc pattern pollutes props solution obscures looking revamping context api way present problem would help", "d": "1/2018"}, {"body": "ah yeah cool nt want use context current api nt really seem much better props since still deals naming collisions nice proposal", "d": "1/2018"}, {"body": "lovely proposal proposal uses symbol props translate using contexts instead sometimes want locality actual props provide use cases something components intentionally coupled eachother meant used together coherent set sometimes works best contexts eg forms fields times communication really happen parent direct children eg way work generally use components mechanism passing specific data specific parent components going way well sometimes parents need inject specific data privately specific children eg parent needs facilitate coordination children came personally custom layout systems sure broader examples", "d": "1/2018"}, {"body": "rough ideas solving use cases without notion private props", "d": "1/2018"}, {"body": "oh heck yeah would much better context proposal one yeah believe covers every use case ran", "d": "1/2018"}, {"body": "also issue react", "d": "1/2018"}, {"body": "problem changed content tag slot work", "d": "1/2018"}, {"body": "flarnie aweary mbrookes gaearon chance possible fix cant update version unfortunately using onblur along onchange", "d": "1/2018"}, {"body": "ca nt fix something older minor", "d": "1/2018"}, {"body": "gaearon suggestion better performance problem imagine email application needs temporarily highlight number unread emails come could also see something like application notifications increment small animation draw attention using pluginlibrary achieve recommend writing scratch thanks", "d": "1/2018"}, {"body": "issue specific css transition plenty work around suggest checking libraries handle zepto good reference lib basically tho nt need changes happen separate ticks need reflow browser changes", "d": "1/2018"}, {"body": "jquense thanks jason looking specificsuggested react way think would helpful thread new visitors searched quite bit nt seen many good solutions key libraries react opinionated behavior since impacts performance would love see examples developers approach properly react applications tricky use case since component mounted css animation needs rerun every incrementdecrement since class react register change solid example would awesome", "d": "1/2018"}, {"body": "might optimal solution solved duplicate elements divs assign css class flash alternately eg javascript somethinghappened thissetstate toggle thisstatetoggle render return", "d": "1/2018"}, {"body": "thing affects performance intentionally destroying remounting elements via change point correct solution regardless whether react angular backbone need deal idiosyncrasies css animation js original example working", "d": "1/2018"}, {"body": "case dropdown element dropdown changes animation pop dom element boolean state variable basically decides class set variable true set class otherwise empty onclick event dropdown render method", "d": "1/2018"}, {"body": "think right solution attach event listeners per root solves issues", "d": "1/2018"}, {"body": "use global events lot always hacks required get two event systems sync suggestion api js const popover props gt let container const handleclick e gt containercontains etarget propsonclose const setref r gt container r return experiment attaching events root react node keep root node focused see would definitely like try something less hacky", "d": "1/2018"}, {"body": "headers look like enough", "d": "1/2018"}, {"body": "gaearon running problem nt access child components make props optional give defaults whole point accepts children work component dynamically puts props children provide access composition children values props", "d": "1/2018"}, {"body": "sure help", "d": "1/2018"}, {"body": "adding voice issue point would nice react could support usecase", "d": "1/2018"}, {"body": "react actually diff dom since also provide attribute mark intentional differences use serverside react rendering normally warning server client render different content however rare cases hard impossible guarantee exact match example timestamps expected differ server client set react warn mismatches attributes content element works one level deep intended used escape hatch overuse read hydration reactdomhydrate documentation bit different describing though hard answer specific question without seeing small example reproduces exactly case seeing close let know still relevant", "d": "1/2018"}, {"body": "please like see fixed please help figure happens andor contribute fix", "d": "1/2018"}, {"body": "experiencing issue well tags trying listen whether pdf loaded least started loading", "d": "1/2018"}, {"body": "reason nt dispatch event dispatched browser synchronously iframe appended parent since happens commit phase event ignored since disable synthetic event system committing context ambiguity spec around events iframes nt see behavior every browser outside waiting watwg browser vendors resolve ambiguity resolving would probably involve implementing event queue enqueues subset events commit phase dispatches afterwards", "d": "1/2018"}, {"body": "closing per lack response", "d": "1/2018"}, {"body": "see us investing effort supporting past years browser vendors avoiding using prefixes new features understand still bit pain eventually go away historically browsers relied vendor prefixes eg ship experimental features web developers approach harmful compatibility web content comes rely upon vendorprefixed names going forward instead enabling feature default vendor prefix instead keep unprefixed feature behind enable experimental web platform features flag feature ready enabled default exposed limited duration origin trial blink current consensus among browser implementors whole prefixed properties hurt helped webkit new policy implement experimental features unprefixed behind runtime flag runtime flags allow us continue get experimental features developers hands avoiding various problems vendor prefixes runtime flags also make easier us different default settings stable builds preview builds safari technology preview webkit worth current trend inside mozilla avoiding vendor prefixes either turning things shipping shipping unprefixed stable enough least general policy specific cases might merit exceptions firefox microsoft also getting rid vendor prefixes edge means order developers take advantage special css features use specific edge prefix instead code web standards edge code suffers today still relies prefixes features quite supported browsers yet encourage either use css classes create utility pick right prefix based supported browser example use create dom node assign see sticks reading whichever sticks one need use future code cache property name keep using used problematic serverside rendering react used compare markup pick specific prefix server side problem anymore react allows mismatches server client use prefixes server specify new react turn markup mismatch warning cases sorry satisfactory resolution seem worth change api introduce extra runtime checks something irrelevant couple years", "d": "1/2018"}, {"body": "romulof lencioni elmoaloloco wheel listeners still passive even scroll listeners nt think may source confusion", "d": "1/2018"}, {"body": "sebmarkbage think passive event listener support make way react sometime", "d": "1/2018"}, {"body": "see issue still open anyone update us progress please need run things user focuses whole element opposed fire child gets focus meanwhile workarounds", "d": "1/2018"}, {"body": "example would use toggle user experience example used events trigger classname change parent element parent contains two visible controls focus either control trigger reveal additional siblings additional elements revealed focus original controls newly revealed elements without changing focused state parent element also focus elements trigger hide additional elements making things appear", "d": "1/2018"}, {"body": "still interested think need rfc continue discussion", "d": "1/2018"}, {"body": "interested please create rfc review specific proposal close issue unlikely progress without rfc", "d": "1/2018"}, {"body": "interesting side note html supports", "d": "1/2018"}, {"body": "maybe serverside rendering server could scan generated html style attributes automatically add hashes attribute values csp header response", "d": "1/2018"}, {"body": "see kind ids could provided react determined user code simple incrementing counter nt work ppl nt usually render exactly thing client server sounds like crux problem rendering different things client server supported least first clientside render nothing prevents however first rendering subset app client server later show parts clientonly mismatch case problem running however causes id attributes generated clientside mismatch sent server clientside fieldcounter restarts every load whereas serverside reference obviously keeps growing solution isolate counter ssr roots example providing via context roughly suggested think close", "d": "1/2018"}, {"body": "gaearon nt know issue ca nt solved outside react react implementing go long way towards improving ergonomics implementing react apps instance react api could use reactbootstrap require user add seeminglytothem unnecessary umpteenth provider component root use rb ui components plus others going thats x components admittedly anyway dx thing think really important adjacent things web already uphill battle sadly give indefinitely defer later unified way identify components would go long way reactdom reducing one big hurdles folks implementing even basic support needing invent consistent globally unique semantically meaningless identifiers clear point react necessarily better positioned provide said identifiers think past bit certainly help reduce friction way userland solutions sort ca nt", "d": "1/2018"}, {"body": "think progress would need rfc kind vague right hard discuss someone directly motivated fix eg rb maintainer could think api could discuss maybe even find use cases well agree annoying many providers acdlite also mentioned context weeks ago", "d": "1/2018"}, {"body": "fair see get time put proper rfc together", "d": "1/2018"}, {"body": "jquense love involved rfc well vested interest seeing something like come fruition", "d": "1/2018"}, {"body": "want take lead happy contribute particularly rich time moment happy help", "d": "1/2018"}, {"body": "okay see come send around feedback", "d": "1/2018"}, {"body": "ca nt reproduce react", "d": "1/2018"}, {"body": "tagging good first issue nt know bug need investigate happens whether still reproducible react", "d": "1/2018"}, {"body": "seem still repro question whether bug nt know questions issue please post", "d": "1/2018"}, {"body": "hello love make first contribution begin looking asap", "d": "1/2018"}, {"body": "sounds great", "d": "1/2018"}, {"body": "digging believe isolated issue following loop since loop end array beginning causes onmouseenter events fire reverse order expected sure intentional since first contribution also sure changing code would unintended side effects turns unintentional would nt negative side effects gladly submit pr fix already tested reversing direction loop produces expected event order", "d": "1/2018"}, {"body": "seems intended function according docs onmouseenter onmouseleave events propagate element left one entered instead ordinary bubbling capture phase event travels closest common ancestor inclusive back entering node nt know enough code base opinion whether changed though", "d": "1/2018"}, {"body": "jadsayegh may correct could use set state prop persisted child component eg assume child return active parent mounted render update active state true", "d": "1/2018"}, {"body": "encountered bug chrome version debian kernel version events firing mouse clicked enterexit element mouse enterleave listener happens jsfiddle previous comment well noticed chromium issue posted closed confirm issue still exists switching firefox produced correct behavior", "d": "1/2018"}, {"body": "please file new issue", "d": "1/2018"}, {"body": "created following issue", "d": "1/2018"}, {"body": "worth anyone reads understanding react call return could used solve problem though production ready yet", "d": "1/2018"}, {"body": "see happening time soon way react typings implemented flow flow react practice keeping typedefs located change constraint make harder flow folks iterate someone flow team willing help us would awesome aware anything similar priority close", "d": "1/2018"}, {"body": "gaearon wanted thank tip extremely helpful saved boat load time", "d": "1/2018"}, {"body": "meh see us fixing rely places even provided cases would still broken arguably even worse would narrow cases breaks completely fix suggestion use symbol polyfill ensure one used globally throughout code happy accept prs emphasizing documentation", "d": "1/2018"}, {"body": "action would still relevant simply return true reactelementisvalidelement global symbol input object property real security environments without global polyfill unless willing claim infinity even nt save us structured cloning vectors magicnum trivially bypassed via useragent detection determined adversary targeting xss react causes problems solves", "d": "1/2018"}, {"body": "input object typeof property would technically right would use values one elements", "d": "1/2018"}, {"body": "perhaps another way ducktype point xss detection without polyfill broken nt failclosed mismatch", "d": "1/2018"}, {"body": "point wrong include polyfill polyfill symbol globally case", "d": "1/2018"}, {"body": "browsers check work completely fine modern browser practically devs using work go unnoticed unless something drastic like require global shim optout option transform create loud warning nt love either mitigation particularly useful work begin browsers", "d": "1/2018"}, {"body": "use places alone would still broken think looking issue point view particular transform depends logic whereas looking perspective able use codebase general go unnoticed unless something drastic like require global shim optout option transform create loud warning mean babel plugin particular imo expected people read readme plugin adding trusted trusted enable production similarly enable plugin development", "d": "1/2018"}, {"body": "hi gaearon saw splitpane example stateless component splitpane wraps component like chat usually chat component stateful ends stateless component wrap stateful component good practice mean told stateless component stateful child thanks", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "seems like people pretty happy enzyme think close specific api proposals react please create rfc", "d": "1/2018"}, {"body": "attaching event parent element started problems upgraded edge edgehtml problem attaching listener manually directly either using seems like jquery issue related", "d": "1/2018"}, {"body": "problem react sure browser problem please file new issue nt read act closed issues", "d": "1/2018"}, {"body": "boolean properties tend use truthy optimistic use case map isvisible redux state like", "d": "1/2018"}, {"body": "cubiccompass simplify", "d": "1/2018"}, {"body": "locking making circles solution works nt think necessary add magic prop use js expression already know use everywhere else code", "d": "1/2018"}, {"body": "suggest using unit tests instead days", "d": "1/2018"}, {"body": "never mind last comment wrong nt return failures also deduplicates maybe expose something nt", "d": "1/2018"}, {"body": "madlittlemods attribute others without attribute override child get child", "d": "1/2018"}, {"body": "ended writing solve problem arbitrarily proxy methods defined class wrapped element feel dirty works inside hoc wraps native element like input definitely fully precise good enough usecases use custom transpiler transparently capturereplay testing across react app javascript elementref node gt thischildnode node const oldproto thisproto thisproto new proxy get object key oldproto key return oldproto key node amp amp node key typeof node key function return node key bind node return node key return undefined", "d": "1/2018"}, {"body": "bunch tests using shallow renderer also new shallow renderer nt use anyway", "d": "1/2018"}, {"body": "progress talks reparenting throw two cents couple use case examples declarative ui application built built using backbone ongoing attempt converting react application splittable container dynamically loaded sub items container split contain items deep structure splittable containers containing dynamic items leaves whenever container split item added item contained gets reparented new splittable container newly added item causes sub item lose state might eg button component sub item holds animation state reparenting animation disappears naturally draggable drag amp droppable popups ui application originally opened freely float ui frame moved held list popups currently done reparenting popup component list naturally popup item unmounted remounted reparenting state lost imagine least solvable smart usage reactdnd portals however seems straight impossible without eg generating dom nodes react trees rendered appended container els amount portals sound like enough dom element references generated containers would unmounted causing portals called null containers remounted portals rendered fresh references feel like sort reparenting support would beneficial react although definitely goes base tenets ways would still argue far better option eg force component state application state opaque state object passed high enough survive reparenting", "d": "1/2018"}, {"body": "wrote thoughts react works way", "d": "1/2018"}, {"body": "close since discussion pretty stale people like approach mobx good job", "d": "1/2018"}, {"body": "static get defaultprops return car mercedes", "d": "1/2018"}, {"body": "inefficient creates new object every time element created strongly advise use either assign property use experimental static class properties syntax js class mycomponent extends reactcomponent static defaultprops need babel plugin lock issue prevent incorrect suggestions show google results", "d": "1/2018"}, {"body": "note might getting browser nt emit events invalid dates", "d": "1/2018"}, {"body": "use instead since nt exist yet", "d": "1/2018"}, {"body": "react notion current mode anymore issue still see react please provide reproducing project", "d": "1/2018"}, {"body": "believe enzyme probably provides encourage everyone check nt see us expanding current testutils apis since pain work people tend prefer enzyme", "d": "1/2018"}, {"body": "extend class components vincnetas instead wrap original button hoc overload existing defining version info hoc info eggheadio", "d": "1/2018"}, {"body": "use conjunction shouldcomponentupdate wish update component state rerender need thisprops using latest props manual script work props received work around set thisprops new props running desired function", "d": "1/2018"}, {"body": "might still want implementation proposal clearly explain mutations dangerous detect avoid false positives closed since nt attempt", "d": "1/2018"}, {"body": "closing appears like issue affect vast majority users strong opinion fixing welcome propose plan change usage link used longer works finding difficult guess meant thanks", "d": "1/2018"}, {"body": "yay lovely thank great work", "d": "1/2018"}, {"body": "still true hood react uses onclick trigger onchange event struggling checkbox implementation edge seems fire onchange event checkbox indeterminate mode made workaround using using onclick event handler nt necessary", "d": "1/2018"}, {"body": "yes think still true", "d": "1/2018"}, {"body": "yep using click event maybe revisit looks like might also eliminate issues make issue", "d": "1/2018"}, {"body": "kind strange fix issue checkboxes indeterminate mode", "d": "1/2018"}, {"body": "know old issue also issue rendering list countries slow although case react native increase speed js const countriesmap countries amp amp countriesmap country gt countryname", "d": "1/2018"}, {"body": "tried props passed constructor immutable passing another object merged props triggers warning passing props super", "d": "1/2018"}, {"body": "acdlite landed pr new context api think consider closed new api nt problem old api ca nt fixed deprecate point major libraries upgrade new api new api available documented one next minor react releases", "d": "1/2018"}, {"body": "outlined possible solution works today close issue feel strongly needs separate api change behavior please file rfc describe think work thanks", "d": "1/2018"}, {"body": "managed solve using via webpack basically main idea load noncritical components client side lazily decorator looks like jsx const asyncloader loader gt class asyncloader extends component constructor super return asyncloader use make component async jsx pathtocomponentindexjsx const anycomponent gt export default anycomponent pathtocomponentasyncjs export default asyncloader loader gt import index imported key components need rendered full glory ssr seo mostly care simple stuff like meta tags text users generally okay seeing fold fast feedback even though incomplete hence components requires polyfill big dependencies delayed loaded async would also help improving initial bundle size faster page load", "d": "1/2018"}, {"body": "also trying override semanticui may semantic great css ended wrapping div styles inside offending element", "d": "1/2018"}, {"body": "timosolo alternative solution method used lately use styledcomponents wrap semantic ui elements apply custom styling eg import styled styledcomponents import input reactsemanticui export const styledinput styled input way jsx still looks relatively neat get opportunity apply actual css classes onto semantic elements rather using additional elements embedded css like original solution", "d": "1/2018"}, {"body": "question reading thread destructuring props ie beginning render method considered bad practice read absolute guarantee lot examples use way make code readable kinda lost best practice", "d": "1/2018"}, {"body": "dispix produces always", "d": "1/2018"}, {"body": "bad assumed comment also applicable props although bad practice write", "d": "1/2018"}, {"body": "dispix write time nt take new line add new variable saying questions really js nt belong", "d": "1/2018"}, {"body": "change event emitted chrome wrap inputs element confirm solution works chrome autofilling phone numbers via", "d": "1/2018"}, {"body": "everyone still finding issue wondering use code look article tl dr", "d": "1/2018"}, {"body": "wrote thoughts react works way", "d": "1/2018"}]