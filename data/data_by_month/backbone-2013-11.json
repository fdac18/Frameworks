[{"title": "collectioncreate expects http response instead http", "body": "receiving http created response collectionget add event get triggered model get added collection would good support response codes", "num": "2898", "d": "11/2013"}, {"title": "send custom headers worse legacy servers", "body": "glad see legacy server support sync hostings accept options method backbone sends xoverridemethod header browser sends options request cors work browser forbids would add another option backboneallowcustomheaders could true default set false would prevent custom headers sent need create pull request", "num": "2896", "d": "11/2013"}, {"title": "examples list moved end documentation", "body": "examples list current form shadow faq section several time mistaken beliving examples end documentation faq important info difficult actually see faq section one scroll throught long list assume ever increasing list examples could actually last item documentation changelog examples nice useful developing faq come particularly true since flowing documentation meant read scrolling", "num": "2894", "d": "11/2013"}, {"title": "regression locationsearch ignored routing via historystart", "body": "use backbonehistorystart pushstate true document ready modern browser ie firefox routes processed badly ones contain get parameters working though routes working try use routernavigate issue introduced code working dived issue found locationsearch part dropped url routes checked execution plan backbonehistorystart checks finally call last line function backbonehistoryloadurl get fragment using backbonehistorygetfragment backbonehistorygetfragment uses locationpathname hash calculate fragment locationsearch ignored incomplete fragment used iterate routes backbonehistoryloadurl wrong route used need fix could use routes works query params proposed fix probably need better solution", "num": "2893", "d": "11/2013"}, {"title": "brew doctor", "body": "hello begun exploring world development course already issue following installation phase ror tutorial lyndacom appears basic something comprehend message receive inputing brew doctor anyone help would tremendously appreciated michaeldang brew doctor warning directories usrlocalshareman nt writable happen sudo make install software nt managed homebrew brew tries add locale information one directories install fail link step probably warning unbrewed dylibs found usrlocallib nt put purpose could cause problems building homebrew formulae may need deleted unexpected dylibs warning unbrewed pc files found usrlocallibpkgconfig nt put purpose could cause problems building homebrew formulae may need deleted unexpected pc files usrlocallibpkgconfigtclpc usrlocallibpkgconfigtkpc warning unbrewed static libraries found usrlocallib nt put purpose could cause problems building homebrew formulae may need deleted unexpected static libraries", "num": "2892", "d": "11/2013"}, {"title": "backbone amd module nt return factory", "body": "recent amd support added definestatement nt return factory means requirecall backbone nt get factory returned nt intention expose backbone global object still return factory follow umd convention would make following change instead", "num": "2891", "d": "11/2013"}, {"title": "follow semver", "body": "backbonejs project large following regular minor versions eg break compatibility existing backbone codebases make easier developers determine new version backbone includes backwardscompatible features vs backwardsincompatible api changes backbone versioning scheme follow semantic versioning semver gist semver follows given version number majorminorpatch increment major version make incompatible api changes minor version add functionality backwardscompatible manner patch version make backwardscompatible bug fixes additional labels prerelease build metadata available extensions majorminorpatch format would make existing version version changes broke existing api would clearly indicate developers api different allow developers utilise npm wildcard versions eg", "num": "2888", "d": "11/2013"}, {"title": "infinite loop change event", "body": "following code produce infinite loop backbone probably older versions well understand code problem lies use changing pending counting semaphores booleans plus actual logic fire events imho recursive calls set fire event end code exactly fires change attribute events change events recusrion case handle attribute changing twice aware issue anybody working try fix please let know code", "num": "2884", "d": "11/2013"}, {"title": "add favicon backbonejsorg", "body": "use chrome pin tab feature makes things look like one tabs ca nt tell unless remember favicon use", "num": "2883", "d": "11/2013"}, {"title": "set default sort arrow column grid loaded", "body": "hi want set arrow icon column grid reloaded loaded first show gird sorted column order possible", "num": "2882", "d": "11/2013"}, {"title": "fragment fragmentreplace pathstripper querystring support", "body": "hello first want say thanks greet library awesome work line navigate function fragment fragmentreplace pathstripper querystring support striping fragment pathstripper current fragment example test want navigate navigate test triger true work line thisfragment fragment return want able navigate changing querystring thanks", "num": "2881", "d": "11/2013"}, {"title": "convert synchronous ajax call asynchronous", "body": "hello experts validating availability user using jquery user form using jquery validationengine checkuseravailability function field rules options var result noerror ajax type post url registrationformaspxcheckuseravailability data jsonstringify userid fieldattr value contenttype applicationjson datatype json async false success function data status callerror datad failure function data status error function data status convert synchronous ajax call asynchronous make async true code working want make code asynchronous time return optionsallrulescheckuseravailabilityalerttext checkuseravailability function thanks", "num": "2880", "d": "11/2013"}, {"title": "model reset", "body": "would convenient method modereset model reset default values defined modeldefaults", "num": "2879", "d": "11/2013"}, {"title": "unable populate collection raw data", "body": "causes backbone underscore lodash", "num": "2877", "d": "11/2013"}, {"title": "clarify underscore gt vs gt", "body": "currently discrepancy backbonejsorg website packagejson required backbone packagejson gt website backbone hard dependency underscorejs gt please clarify", "num": "2874", "d": "11/2013"}, {"title": "model attribute named constructor lost starting", "body": "code outputs test outputs model constructor function could find documentation explaining change could find diff causing change note outputs test versions", "num": "2873", "d": "11/2013"}, {"title": "routernavigate trigger false still triggers routes used hashchange mode", "body": "hi apologize covered search issues nothing seemed address app developed using backbonerouter hashchange mode without pushstate true order support older browsers backbone doc seems say pushstatemode hashchangemode work way particular ca nt seem avoid triggering route every time call routernavigate adding trigger false ineffective case anyway false meant default find nothing doc warns bunch reassurances pushstate hashchange modes work exactly took us understand happening definition way avoid triggering hashchange event changing hash part url local solution would wrap backbonenavigate backbonecheckurl first set clear kind ignoreonehashchangeevent flag hashchange event triggered navigate silently ignored approach could added direct backbone gladly contribute code good idea hand ca nt believe ones problem wonder something wrong advice appreciated particular nt able call navigate without triggering route somehow incorrect undesirable thanks mykle", "num": "2872", "d": "11/2013"}, {"title": "trailing slash default route", "body": "backbone keeps adding slash end default route explanation backbone routes like assuming root url routes say routernavigate test trigger true url changes routestest similar way call routernavigate testing trigger true url changes routestesting call routernavigate trigger true url changes routes know nt expect end never passed back root url ie routes adding end makes lot differencemeaning checkout fix ie end default route source", "num": "2871", "d": "11/2013"}, {"title": "inconsistent docs regarding arguments error callbacks", "body": "according documentation accepts success error callbacks options hash passed model response options model xhr options arguments respectively accepts success error callbacks options hash passed model response options arguments far could tell looking code error callbacks basically treated way cases receive second argument ultimately depends transport naming issues aside vs current documentation seems imply unintentionally difference error callbacks fetch vs savedestroy behave none nt docs unified respect avoid confusion please correct wrong also come across attempts fix looks like never merged reasons maintaining generic naming opposed going jquery specific xhr hand done docs source even", "num": "2866", "d": "11/2013"}, {"title": "targetmodelprototype returns undefined", "body": "trouble fetching collection array model attributes server backbonejs line returns uncaught typeerror read property idattribute undefined chrome returns id", "num": "2863", "d": "11/2013"}, {"title": "global events delegation", "body": "hi use case developer wants bind event specific element unrelated view example implementing custom select box developer want close select area click happens anywhere else currently possible overloading methods manually attach detach events however approach bit complex errorprone standard mapping proposal would allow special tag would basically say nt want stay scope view take select box example could kind event definition thing would multiple benefits would allow easy global event handling whole point would break backward compatibility neither mess jquery sizzle would selfdocumented reader would immediately know selector viewlimited would inconvenients bit code check selector starts keyword nt think performances would affected call especially harmony developers could encouraged use global event instead viewlimited ones without good reason however thing sayed almost everything using keyword allows sure developer aware implications write draft implementation wish", "num": "2861", "d": "11/2013"}, {"title": "interested dropping dependencies underscore jquery", "body": "zepto shit nt even work pretty modern used smartphones also many strange bugs jquery reasonable library use backbone currently big increases latency mobile devices totally cool backbone fork exoskeleton w decided try dropping dependencies worked well instead including gzipped javascript need include five times less noticeable shitty networks important part dropping jquery relying native methods performance apps develop usually complex interacting dom natively allows increase speed times chrome proofs website dom total bottleneck unfortunate jquery slows several magnitudes mobile devices even bigger deal since slow would interested dropping dependencies maybe jquery folks may defend status quo cool users want freedom look like todos example native methods commit removes deps random web app", "num": "2859", "d": "11/2013"}, {"title": "problem change event firefox", "body": "reason happens firefox tested ff ver var v backboneviewextend el body events change cardselector selectcard selectcard function e elappend cardselector val event backbone view call selectcard select box changes something missing working chrome jsfiddle tried ff windows thanks", "num": "2855", "d": "11/2013"}, {"title": "tests failing", "body": "bb dropped support", "num": "2850", "d": "11/2013"}, {"title": "key changed attribute", "body": "hello listening find attr wich trigger event nt pass object insteadof value enhancement possible things like modelon change attr function model changed options consolelog event fired changedkey value gt changedvalue moment nt know without big mess modification", "num": "2848", "d": "11/2013"}, {"title": "collection item undefined id method get returns item regardless param", "body": "javascript var person backbonemodelextend talk function consolelog name thisget name id thisid var persons backbonecollectionextend model person var gang new persons name alice id hello name bob id undefined gangfindwhere id hello talk gangget hello talk returns tested know usual undefined id", "num": "2847", "d": "11/2013"}, {"title": "nested change events fired incorrect options", "body": "set model inside model change callback options passed set call discarded favor original options trigged model change event ie second change event fired change get vs expected behavior model set events always trigger change events options passed set ie second change event get reason happens second set call resets pending true causes us stay loop fire second change event options closure first set call idea fix would look like setting silent option docs advise since want callbacks fired result change pass flag prevent function getting called since wrong options passed nt help sorry writing test later look backbone testing jsfiddle demonstrates behavior seeing expected behavior would result output originaloption followed skipchange actual output originaloption twice", "num": "2846", "d": "11/2013"}, {"title": "register events initial page slient true passed backbone history start", "body": "building app client side server side rendering initial page rendered server rest backbone client passing silent true client history start method dont want route executed initial page want register events initial page", "num": "2845", "d": "11/2013"}, {"title": "firefox bug", "body": "app cracked useing firefox find firefox spider monkey set variable prototype prototype used like child function parentapply arguments function surrogate thisconstructor child thiscname nan surrogateprototype parentprototype childobjpropertyisenumerable prototype call enumerable false childprototype new surrogate var enumerable childobjpropertyisenumerable prototype true fix problem", "num": "2844", "d": "11/2013"}, {"title": "enhancement modelset mechanism", "body": "currently modelset would cause attributes key value simplest explanation however would worthwhile extend mechanism query attributes key set method available use method delegate attribute update allow nested attributes without going hoops idea sounds interesting work details similar done modelget mechanism well", "num": "2843", "d": "11/2013"}, {"title": "collection semantics ambiguous", "body": "parse semantics model collection somewhat confusing suppose one provides custom parse collection model deal raw response eg response server always form success truefalse data errormsg modelfetch would work fine parse method able parse correctly however would fail case first able parse response correctly return list model attributes method fail call model repeatedly one deal error modify custom parse collection wrap attribute format modelparse expects clumsy opinion collectionfetch responsible complete valid parsing return valid attributes list model subsequent model attribute necessary keeps semantic clean however requires patch collectionfetch set optionsparse true call passing collectionset make changes desired", "num": "2842", "d": "11/2013"}, {"body": "backbone nt internally distinguish status codes collectioncreate adds model collection prior syncing unless passed option might want check response including right data seeing success callback trigger create", "d": "11/2013"}, {"body": "result jquery handling workaround found perhaps could incorporated", "d": "11/2013"}, {"body": "thanks following one thing post stuck however backbone uses jquery ajax method treat anything nt code error unfortunately true jquery treat status code success take peek relevant line jquery", "d": "11/2013"}, {"body": "nope request actually nt something backbone control hook override need tell jquery specifically need way headers", "d": "11/2013"}, {"body": "find change log faq much useful regular basis", "d": "11/2013"}, {"body": "concur", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "solid meh current format doesnt displease much use sidebar table contents browser find jump later sections", "d": "11/2013"}, {"body": "sounds fine feel free move faq", "d": "11/2013"}, {"body": "hi tonnzor already discussed patched would mind looking see would satisfy requirements", "d": "11/2013"}, {"body": "hey try stackoverflow answer question others might welcome world programming", "d": "11/2013"}, {"body": "hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers", "d": "11/2013"}, {"body": "lot learning experimenting first many concepts higher barier entry others try go meetup city ask techie friends advice good luck nov notifications githubcom wrote hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers reply email directly view github", "d": "11/2013"}, {"body": "nope passing object basis see first line factory function define call need return object make requireaware test", "d": "11/2013"}, {"body": "curious logic determining module exports lives function requirejs", "d": "11/2013"}, {"body": "absolutely right thanks clarification", "d": "11/2013"}, {"body": "thanks strictly following semantic versioning would nt work well backbone given project almost surface area little internals almost given change patch pull request backbone breaks backwardscompatibility small way even folks relying previously undefined behavior strictly followed semantic versioning would probably backbonejs nt help anyone evaluate actual progress project like joke semantic versioning romantic versioning given version number majorminorpatch increment major version make major new release significantly update andor stabilize api minor version add minor new features patch version make tiny changes likely go unnoticed allows folks immediately upon hearing new release get rough sense scope backwards compatibility ideally every release even major ones backwardscompatible ca nt api changing done way nt difficult upgrade avoiding change api waiting major release ready would terrific impediment progress alternative frequently incrementing major version number incredibly unhelpful honestly prefer simpler scheme used version numbers like desktop applications worry breaking package managers tooling", "d": "11/2013"}, {"body": "problem backbone sent chrome", "d": "11/2013"}, {"body": "spadgos question version numbers arbitrary reason agile web apps trying keep within ranges oses many apps freak going past projects modeling windows linux etc yearmultiyear dev cycles release big deal agile project moves quickly incrementing quickly makes sense", "d": "11/2013"}, {"body": "also disagree reasoning behind marionette right best follow strict semantic versioning far nt issues even though surface area well added new features fixed bugs still compatible deferred tickets release api expected behavior breaking changes major releases breaking changes nt happen every week pull request accepted pooled major release encompass enough value large release major version bump stands breaking compatibility release causes lot pain plugin addon developers like marionettejs team backfill behaviors patches code remain viable fun situation ripple effects core library like backbone breaking changes enormous backbone affected", "d": "11/2013"}, {"body": "agree seems like case nt want rather ca nt breaking changes real sense urgency could waited major version update nt want problem biggest problem backbone respecting semver among things teaching evangelizing backbone great tell group students potential customers everything stack going work certain way except backbone always two huge caveats evangelizing backbone amd box nt respect semver nt take version numbers seriously one fixed let fix", "d": "11/2013"}, {"body": "honestly prefer simpler scheme used bigsmall version numbers like desktop applications worry breaking package managers tooling jashkenas could always leave digit probably map semantically semver little closer right maybe tamp passiveaggressive cryptopolitical sniping somehow technically wrong follow semver think bob point right important clearly articulate system follow irrespective system follow ps mean imply keithamus issue passive aggressive sorry came way definitely legit discuss backbone communicates changes users", "d": "11/2013"}, {"body": "semver primarily interested version given piece software index progress compatibility generally expect things mostly stable working version numbers largely meaningless indicators progress software x version may much less mature fewer features software version want know progress piece software look changelog roadmap knowing backbone whatever means nothing terms features however mean upgrade without anything breaking", "d": "11/2013"}, {"body": "hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms", "d": "11/2013"}, {"body": "haha never something happening real code app probably something wrong", "d": "11/2013"}, {"body": "find response strange happening five lines code anything illegal according docs point point library misused really want tolerate hole easily fixable brad dunbar mailto notifications githubcom sent tuesday november pm jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one", "d": "11/2013"}, {"body": "turns spoke quickly probably never simple solution case posted creates race condition would require redefinition change event even addressable let alone solvable sorry brad dunbar mailto notifications githubcom sent wednesday november jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "hi agree issue feels wrong unexpected nevertheless completely rational realize happening happens events actually async let explain little set methods finishing trigger change event get computed finishing change callback basically change event gets fired time creating infinite loop seeing couple solutions issue code looks like want create computed property property depends get value case try reacting change also silence setting avoid behaviour like finally passed using attributes directly personally would nt getting way things turn get hard debug later hope help cheers", "d": "11/2013"}, {"body": "good catch docs page generated docco far tell nt accept custom favicon without using custom template might worth adding feature", "d": "11/2013"}, {"body": "underscoreorg faviconico file domain root backbone subdir behavior deprecated little cleaner put rest docs assets nt see harm moving root objections anyone edit dminkovsky pointed favicon shows underscoreorg annotated docs", "d": "11/2013"}, {"body": "moving root", "d": "11/2013"}, {"body": "thanks much", "d": "11/2013"}, {"body": "looks really backbone related issue looks like question another lib jquery related maybe try", "d": "11/2013"}, {"body": "think wrong project", "d": "11/2013"}, {"body": "maybe looking", "d": "11/2013"}, {"body": "hi ygaradon unfortunately one discussed several times likely change please see good summary issues involved", "d": "11/2013"}, {"body": "interesting idea nt think good", "d": "11/2013"}, {"body": "oh nt know could yes good", "d": "11/2013"}, {"body": "nt work defined function opposed hash seems like would safer also attributes nt default value changed might want call first going trigger bunch needless change events", "d": "11/2013"}, {"body": "forgot put front", "d": "11/2013"}, {"body": "oops silly guess happens code several languages simultaneously forget little significant things every thank much help", "d": "11/2013"}, {"body": "due gt", "d": "11/2013"}, {"body": "hi joaonuno backbone attributes javascript objects hood meaning property exists empty object used attribute key see issue details", "d": "11/2013"}, {"body": "ok see problem would get constructor attribute even without setting js works issue pointed year old issue reporting appeared month ago implying backbone allow constructor attribute js objects also instance outputs test expected nt js new backbonemodel constructor test mget constructor gets object constructor function vs new backbonemodel mset constructor test mget constructor gets test thank", "d": "11/2013"}, {"body": "interesting seems caused change whereas previously see behavior set defaults model see regardless despite bug still think current behavior correct js object nt hash reverting old behavior would make bug appear time also undesirable hinted issue changing use ultimate longterm solution oldie support final say", "d": "11/2013"}, {"body": "myklemykle think something wrong implementation nt need pass trigger false default trigger route logic simply update url history perhaps using links like blah case browser trigger route unless default prevented happening need catch click using events hash view eventpreventdefault stop route triggering update url history routernavigate hope helps", "d": "11/2013"}, {"body": "agreed route logic triggered trigger false default nt passed pass pass makes zero difference happens call routernavigate somepath code clicking happening point trying add history however routernavigate updates url hash causes browser issue hashchange event historystart called without pushstate true installed hashchange listener router catches hashchange event triggers route even though supposed trigger route", "d": "11/2013"}, {"body": "myklemykle check leading slash see", "d": "11/2013"}, {"body": "using leading hashes though prevent browser window dancing around", "d": "11/2013"}, {"body": "add working version change log says many optimizations bug fixes including url overrides mutation options bulk ordering trailing slashes edgecase listener leaks nested model parsing already solved latest version change log nt clarify detail", "d": "11/2013"}, {"body": "solved released", "d": "11/2013"}, {"body": "thanks noticing", "d": "11/2013"}, {"body": "perhaps misunderstand misunderstanding question docs unified respect avoid confusion case would try contribute improvement previous pull request corrected issue end merged makes unclear guess thanks noticing means yes", "d": "11/2013"}, {"body": "patch linked fix issue eyes feel free send pull request", "d": "11/2013"}, {"body": "misunderstanding turns thanks", "d": "11/2013"}, {"body": "targetmodel", "d": "11/2013"}, {"body": "changing false pending false previousattributes object attributes object changed object cid id null proto surrogate attributes default properties defined model id null title default title", "d": "11/2013"}, {"body": "really meant nt breaking unless setting something strange collection model property feel free send pr reproducible failing test case like pursue otherwise better luck irc stackoverflow mailing list", "d": "11/2013"}, {"body": "looks like setting instance rather constructor function target model try passing instead example also see docs", "d": "11/2013"}, {"body": "hi arcanis one proposed several times still nt think direction go event handlers hash cleaned removing element dom via large part convenient global events would cleaned would require special dispensation given rarity sort thing departure current semantics think best bind manually", "d": "11/2013"}, {"body": "well quick thanks", "d": "11/2013"}, {"body": "would interested dropping dependencies maybe jquery certainly happy try optionally dropping jquery patchedin versions work properly even browsers like case", "d": "11/2013"}, {"body": "need investigate support support keep mind bring board backboneutilsajax backboneutilsmatchesselector view delegate undelegate native methods increase lib size take look exos source code implemented", "d": "11/2013"}, {"body": "fine except use native matchesselector means support correct", "d": "11/2013"}, {"body": "right guess polyfill", "d": "11/2013"}, {"body": "elementparentnodequeryselector example", "d": "11/2013"}, {"body": "problem jquery basically set great polyfills tightly coupled together jquery core takes lot time extract one need", "d": "11/2013"}, {"body": "true use queryselectorall mean dropping support", "d": "11/2013"}, {"body": "could nt people even use bare sizzle fallback jquery need ie lt compat something", "d": "11/2013"}, {"body": "right people could use jquery interested see pull request might look like", "d": "11/2013"}, {"body": "discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie", "d": "11/2013"}, {"body": "invalid argument since benchmarks size footprint reduce maybe nov phil freo notifications githubcom wrote discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie reply email directly view github", "d": "11/2013"}, {"body": "pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like", "d": "11/2013"}, {"body": "nope would mean including another pseudojquery library functional think firstclass support native dom alternative better nov brad dunbar notifications githubcom wrote pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like backbone whateveryoulike reply email directly view github", "d": "11/2013"}, {"body": "agree paul ever tried create small subset jquery would compatible ajax events api example apis crucial backbone application easier go jquery reason jquery api bloated contains much parameters covers much cases would nice backbone define smaller subset jquery api would much easier create shim", "d": "11/2013"}, {"body": "afraid still nt understand different using instead bikeshedding relative merits jquery api define whatever subset jquery api like", "d": "11/2013"}, {"body": "braddunbar saying", "d": "11/2013"}, {"body": "main point good minimal shims existence follow requirement jquery api compatible backbone nt need compatibility anyway declaration bit frustrating developers really want go minimum total size ca nt sure shim craft enough better minimal show subset jquery api really needed ie params actually required url optionssuccess returning promise required etc goes events api element creation api could way check ajax present use provide minimal functional fallback", "d": "11/2013"}, {"body": "braddunbar propose create library emulates jquery api still wrapper simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone example marionette may use strange jquery method undefined simple plugins use native methods wrapper unnecessary slowdown still need create views time", "d": "11/2013"}, {"body": "could way check ajax present use provide minimal functional fallback would nt mean case defined would use jquery api sort defeats purpose dropping jquery api completely favor builtin solution would things differently potentially faster", "d": "11/2013"}, {"body": "simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "foxbunny use jquery api parameters cases builtin solution faster much less code allow drop jqueryzepto dependencies add really need features builtin solution provides", "d": "11/2013"}, {"body": "agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "speed red herring doubt going find meaningful difference actually compatible comparison sending pull request jquery interesting idea would backbone potentially ship functional state without load jquery nt need dom manipulation backbone box seems like might possible finally braddunbar quite right could either take form set internal functions value implements exactly thing nothing magic naming practice two approaches equivalent", "d": "11/2013"}, {"body": "also worth pointing jquery dom manipulations ajax xhr wrapper pretty important nontrivial", "d": "11/2013"}, {"body": "ajax xhr wrapper pretty important nontrivial fifty lines code enough production systems", "d": "11/2013"}, {"body": "doubt going find meaningful difference wat stuff takes takes without jquery noticeable users", "d": "11/2013"}, {"body": "arguments file size dom performance pretty weak seemed contrived micro benchmarks provide real world implications something takes jquery nt intentionally poorly designed refactoring jquery would noticeably increase performance thoughts hugely breaking change sure get unit tests pass explicit contract implicit one promised documentation real world usage basically remove jquery becomes useless backwards breaking deferreds gone breaking implicit contract sure could add stuff back bother jquery already significantly better tested widely accepted anything could write", "d": "11/2013"}, {"body": "woundt first backwardsincompatible change hurt someone code", "d": "11/2013"}, {"body": "solid point thanks", "d": "11/2013"}, {"body": "plus could always wrap jquery wish possibly subclass monkey patch class either standard cure backwardsincompatible changes backbone nt bad get used", "d": "11/2013"}, {"body": "everything tbranyen said woundt first backwardsincompatible change hurt someone code let play hurt feelings game guys removing substantial extreme change ignored imho think healthy project something like exoskeleton makes api work without extra deps pull logic without really good reason would harmful project", "d": "11/2013"}, {"body": "substantial extreme change use jquery like substantial remove actually using gone", "d": "11/2013"}, {"body": "nt get exist currently jquery wo nt exist projects without jquery cares", "d": "11/2013"}, {"body": "paulmillr think valid concerns api consistency related upstream dependencies point examples widely used libraries frameworks optin pieces api based deps present", "d": "11/2013"}, {"body": "understand one introduced something new nt invent good point", "d": "11/2013"}, {"body": "paulmillr nt think asking unreasonable question need try ravage rapier wit seriously though api optional components based dependencies included seems make code documentation complex", "d": "11/2013"}, {"body": "every change comes sacrifice slightly complex docs api code sacrifice willing make produce real value real apps app speed page load speed want backbone stay current state instead evolving fine", "d": "11/2013"}, {"body": "want backbone stay current state instead evolving fine paulmillr nt need ad hominem anything interested finding precedent elsewhere taking added complexity crusade type prefer speak point pretty clear guess totally prerogative", "d": "11/2013"}, {"body": "also original request still stands lots talk proof someone word", "d": "11/2013"}, {"body": "need worry nothing ticket yet nothing real debate tranquilo ya asked paulmillr submit exoskeleton ideas pr kind enough particular idea allow backbone function including views ajax without mandatory inclusion jquery might turn well might let wait see pull request jumping conclusions would nt backwardsincompatible features api would stay exactly jquery present page closing ticket gone rails bit looking forward first draft pull request", "d": "11/2013"}, {"body": "paulmillr using ender backbone projects works beautifully build jquery using components backbone needs weighs around vs jquery", "d": "11/2013"}, {"body": "another approach could really nice without adding loc backbone people want include jquery would determining exactly jquery modules necessary backbone function optional instructions custom build jquery required modules see also example including modules able build jquery version comes lt gzipped", "d": "11/2013"}, {"body": "think point great web community run jquery parallel standard vanilla js even gzipped great could get extra paul pull adds loc", "d": "11/2013"}, {"body": "oh sadness late party glad someone else attempting address issue well read comment skipped apologize advance long comment need relay experience performance drop using jquery real especially collection views create large number backboneview instances naively eager creation new jquery context every backboneview initialization slows things enormously agree probably nt many applications create large number gt view instances horrible performance degradation jquery brings affect types apps quite negatively note taking desktop browsers mobile creating around view instances introduce quite noticeable lag real world example try sorting backgrid example grid jquery contexts backing sorting right destroy recreate could done smarter way without recreating views probably guess backgrid refresh automatically upon resetting backing collection collection reset rows cells destroyed recreated anyway creating measly number jquery contexts takes gt fast laptop gt takes total time spent js chrome according halfass attempt reimplement mostly compatible backboneview get rid jquery found hardest things reimplementing compatible method native methods nt support namespacing problems bookkeeping works everything implementation works except event delegation compatibility breaks lot things crucial get right compatible think doable necessary introduce flag view allow opting jquery large apps jquery mostly works fine except portions portions opt use native code speed things default opt nt assume always chainable anymore delegate view nt using jquery make jquery optional picks uses automatically default like let introduce another deferredpromisefuture whatever may chainable anymore pointless backbone nt use successerror callbacks already nt want jquery need deferred drop instead embedding yet another deferred object backbone large enough app probably half dozen incompatible versions embedded different libraries anyway however jquery detected automatically access like create eagerly view opts jquery andor create view instance nt using jquery nt whole point people replace point people one many jqueryajax extractions docs people want use backbone without jquery still default jquery detected need reimplement jqueryajax nt big bearing performance issues result largely compatible backbone interface slightly larger backbone file size reimplementation allows possibility much much faster backboneview instance creation much smaller total js file size btw similar attempts removing jquery dependency done lot like implementation much less ambitious line backbone philosophy", "d": "11/2013"}, {"body": "nt whole point backboneajax people replace point people one many jqueryajax extractions docs people want use backbone without jquery backboneajax still default jquery detected need reimplement jqueryajax nt big bearing performance issues great point might make sense leave ajax backbone proper using jquery works going vanilla route recommended dropin nt assume always chainable anymore delegate thiselqueryselectorall view nt using jquery think best leave find using jquery use native qsa nt use jquery nt use overwrite let introduce another deferredpromisefuture whatever leave ajax wo nt interested performance implications backbonenative since essentially implementing small surface area jquery minus sizzle promises namespaces etc etc also creating new contexts also one layer abstraction native dom methods simply comply basics backbone api needs means always going fail level abstraction either complex complete enough", "d": "11/2013"}, {"body": "reserved jquery fine may confuse people already know delegates jquery might think aliases delegates ok keeping reserved jquery long jquery context created constructor branch native code jquery play instance completely reimplement use native dom methods maintain compatibility existing code", "d": "11/2013"}, {"body": "names native methods since spec replacing nt implemented widely makes sense consistent short concise names backbonenative supports nt like layers dom abstraction backbone reasons mentioned", "d": "11/2013"}, {"body": "also agreed putting extra dom helper methods replacing qs qsa accept different arguments behave differently return different things also even draft status damn long calling succinct concise understood immediately without creating confusion like calling variables xmlhttprequest", "d": "11/2013"}, {"body": "added exoskeleton support backgrid benchmark resorting example table clicking first row resort env things slower see jquery natively exoskeleton took five minutes searchandreplace make changes backgrid yields perf increase optimised done today production app ofc take bit time wrappers shit nothing", "d": "11/2013"}, {"body": "pretty much done perf branch haha goal get less ca nt happen eagerly creating jquery context within constructor jquery also culprits majorly slow things", "d": "11/2013"}, {"body": "wyuenho results branch main env results env exoskeleton less", "d": "11/2013"}, {"body": "nice", "d": "11/2013"}, {"body": "try stackoverflow mailing list kind question answer says change event wo nt fire select element loses focus", "d": "11/2013"}, {"body": "even select element lost focus dom event truly fired event handler attached view events option wo nt called attach event handler using ways works fine ps case occurs firefox maybe old browsers even works well nt matter kind element use select text field text area", "d": "11/2013"}, {"body": "let tag em close em", "d": "11/2013"}, {"body": "tests", "d": "11/2013"}, {"body": "fixed small omission indicate drop support", "d": "11/2013"}, {"body": "hi well use syntax know attributes changed since event triggered changed", "d": "11/2013"}, {"body": "dynamic assignment assuming arguments passed change attribute event model gt model changed gt instead value key attributekey value attributevalue options gt options javascript var myhandler function model changed options switch changedkey case pos case deep dosomething model changed options break case distance case height dosomethingelse model changed options break case x case break default dosomethingbydefault model changed options modeldefaults foreach function v k modelon change k myhandler mycontext moment achieve create handler case", "d": "11/2013"}, {"body": "case alshten hinted still access key scope closure give try see works", "d": "11/2013"}, {"body": "well case still loop way javascript var myhandler function model attributevalue options attributekey modeldefaults foreach function v k modelon change k partial myhandler k mycontext ca nt see case would want case would always prefer manually adding handler attribute rather writing loop", "d": "11/2013"}, {"body": "thanks every model nt fixed sometimes add remove attribute ca nt always manually add handler using partial could solution hack term perfomance without preferable stop listening test case need examples need store reference association play hash something stop listening aim reduce mess augment nt understand pass key value good choice even listening one model full model passed argument part even store options options passed arguments good points changed attribute treated differently pass full attribute part value give model key able find value store every changed attributes new value previous value make evry comparaison need pass key value impossible find key think better full information key value semi information value", "d": "11/2013"}, {"body": "considered attaching handler event using javascript var myhandler function model value options modelhaschanged pos modelhaschanged deep dosomething model value options return modelhaschanged distance modelhaschanged height dosomethingelse model value options return modelhaschanged x modelhaschanged return dosomethingbydefault model value options modelon change myhandler mycontext never used assume use way saying passing key value bad design point ca nt see relevant example would want dynamically assign handler attribute change event nt know name since think generating attribute names dynamically would bad design cases least never experience interested see real world example would", "d": "11/2013"}, {"body": "seem focalized test case better understanding need test case simplicity know advance attribute name case create remove attributes flow attach event detach event change different actors modify model instead looping find changed attribute using different lot functions easier provide key value better performances see examples simple way achieve logic tell made change give modified object modified value fend find held imagine changed town name usa new name great town possible find moment localy modified source add line private event name achieve ultime solution cause ultime solution come source demand regression functionality removing adding performance client side see many propattrfunction exist backbone related retreive changed attributes easily best thing according provide spirit rest gt complete model complete options please complete attribute", "d": "11/2013"}, {"body": "said previous message handler also use retrieve fields changed looks like exactly need without changing value parameter passed callback still think nt make sense attribute key parameter using syntax either use event get changed attributes use syntax handler listening one attribute means know attribute changed", "d": "11/2013"}, {"body": "wrote another test case collection objects kind updated timessecond key provided would allow avoid lot mess increase performance backbone loop changed attributes providing loop backbone loop need create contexted function preserve find key play hash key function stop listening key provided maybe unusual way use model works like need key becomes argument perfect still think nt make sense attribute key parameter using change attr disagree think staying phylosophy provide model listening provide complete attribute key value even listening key callback nt know key listening nt understand nt make sense trying model still think nt make sense model parameter using modelon making sense means know attribute changed sorry human know callback nobody know providing key permit one handler many keys impossible providing value force people use many functionshandlers keys launch common functions thinking everything goes value also based keys provide key nt use function attributes property etc find key set complete model model keys loop search attributes find one need provided another example logical backbone write event triggered times know wich one triggered event need search create routine find one attra attrb together passing key nt search spend superflus things avoided", "d": "11/2013"}, {"body": "hello see tagged invalid explications invalid want know understanding thanks", "d": "11/2013"}, {"body": "question nt appropriate bug tickets", "d": "11/2013"}, {"body": "ok thank answer agree bug means longer think question closed invalid hope", "d": "11/2013"}, {"body": "used either model passed model directly search property case since undefined property dutifully return object id shortcircuiting rest evaluation got good use case might make sense change internal behavior otherwise might try using null another placeholder id attributes", "d": "11/2013"}, {"body": "oops nt see caseywebdev edit bus wifi nicely done", "d": "11/2013"}, {"body": "think temporary workaround nt cause unexpected behavior guarantee dealing pretty fundamental internals setting nested set call nested set gives expected behavior change callback cares single nesting think work set events trigger deeper nesting well nt tested using example would look like technically case single nesting setting pending false set event right thing confident incorrect cases people want nest fire oncehave chained change callbacks", "d": "11/2013"}, {"body": "sorry lean braddunbar got bright ideas believe used recursive bit used work property even things", "d": "11/2013"}, {"body": "diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs changeslength thispending true changeslength thispending options var l changeslength lt l thistrigger change changes current changes options changing return silent thispending options thispending thispending false thistrigger change options nt test came head reading issue", "d": "11/2013"}, {"body": "interesting bandwidth moment take look", "d": "11/2013"}, {"body": "caseywebdev would simply reverse wrongness options passed callback think external one needs first options inner one second", "d": "11/2013"}, {"body": "jashkenas added test case unless test wrong seems work", "d": "11/2013"}, {"body": "nicely tested indeed", "d": "11/2013"}, {"body": "good stuff clear though still fail one call since last win probably acceptable though", "d": "11/2013"}, {"body": "braddunbar curiosity failing case described look like", "d": "11/2013"}, {"body": "test still passes notice never passed event", "d": "11/2013"}, {"body": "ahh gotcha", "d": "11/2013"}, {"body": "quoth braddunbar interesting bandwidth moment take look know congratulations brad beautiful addition already beautiful family hopefully wo nt seeing much around github parts", "d": "11/2013"}, {"body": "congrats brad", "d": "11/2013"}, {"body": "thanks much lots fun", "d": "11/2013"}, {"body": "braddunbar congrats", "d": "11/2013"}, {"body": "sounds like question better suited", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "tgriesser jashkenas close please answer really stuck right", "d": "11/2013"}, {"body": "hmm sure getting running tests firefox prototype appears enumerable would mind submitting small snippet illustrating problem", "d": "11/2013"}, {"body": "necessary commit firefox backbone extend function returns child class enumerable prototype extend amodel bmodel staticprops override amodelsprototype bmodelprototype jus change extend function var extend function protoprops staticprops var parent var child extend definition defaulted us simply call parent constructor protoprops amp amp protoprops constructor child protopropsconstructor else child function return parentapply arguments call make child prototype enumerable firefox childpropertyisenumerable prototype add static properties constructor function supplied extend child parent staticprops set prototype chain inherit without calling constructor function var surrogate function thisconstructor child surrogateprototype parentprototype childprototype new surrogate add prototype properties instance properties subclass supplied protoprops extend childprototype protoprops set convenience property case parent prototype needed later childsuper parentprototype return child", "d": "11/2013"}, {"body": "oh see missing point odd bug indeed", "d": "11/2013"}, {"body": "fixed", "d": "11/2013"}, {"body": "want get set funky way always write setmyproperty function model practice usually want keep getset simple javascript object many use cases enough listen change event property model react set", "d": "11/2013"}, {"body": "looked following extension", "d": "11/2013"}, {"body": "usual way things always writing separate setmyproperty reacting change event etc usual way extension also overtly complicated spirit keeping things simple minor extension mechanism effects powerful imagine one attribute model model naturally provides method changes propagate next level without much effort", "d": "11/2013"}, {"body": "use case describe would common mymodelget submodel set use nesting plugin mymodelset submodelprop still think thee need somehow propagate call set need specify good concrete examples think", "d": "11/2013"}, {"body": "ideal world nt need parse data backbone provides parse function extension collection model use like also believe always pass parse truefalse setfetch method get behaviour require", "d": "11/2013"}, {"body": "issue parse functionality used collection go collection well model would ideally want go collection", "d": "11/2013"}, {"body": "another good option passing flag testing existence property determine context collection model model parse method think current behavior correct one cases model schema whether requesting single model collection models said suggestion make parse documentation clearer feel free send pull", "d": "11/2013"}, {"body": "would ideally want go parse collection used work changed consistent nt change back", "d": "11/2013"}, {"body": "happy submit pull request clarity either changes would lovely yes please general trying prevent invalid models created first place case side effects think change best", "d": "11/2013"}, {"body": "hi wondering changed behaviour part change log could lead painful app upgrade process", "d": "11/2013"}, {"body": "totally send pull documentation update happy merge", "d": "11/2013"}, {"body": "many tweaks optimizations bugfixes relating backbone including url overrides mutation options second thought already someone needs specifics search issues", "d": "11/2013"}, {"body": "makes sense", "d": "11/2013"}, {"body": "correct supposed work backbone send attributes pass directly save call took attributes instead would defeat whole point ca nt expect every function look magic property", "d": "11/2013"}, {"body": "another parse function parse function sending data real problem control data sent server way current version working patch", "d": "11/2013"}, {"body": "ok makes sense anyone else opinion proposed fix", "d": "11/2013"}, {"body": "issue dealing tabs tab selected appends search query without trigger think case pushstate way go backbone extending router method hardcores history like changing queries fragment context", "d": "11/2013"}, {"body": "understand confusion caused issue comes maintaining hashchange support opinion breaking applications acceptable tradeoff reducing developer confusion measure noted perceived issues resolved using appropriate route patterns allowing developer handle query strings interest full disclosure application broken change downgrade backbone compensate refactoring accomodate change costeffective us", "d": "11/2013"}, {"body": "drrcknlsn apologies breakage certainly nt intent discussion patch going would mind checking see fits needs", "d": "11/2013"}, {"body": "braddunbar apologies needed certainly appreciate work effort going project first glance seems like good compromise", "d": "11/2013"}, {"body": "thanks help took example addy osmani book backbonejs application published oreilly changed libs underscorejs version backbonejs failed wrote issue tried rebuild example show failure message firebug recognizable mistakes something wrong another part work used newest versions backbone underscore without problems sorry used time", "d": "11/2013"}, {"body": "developing wordpress theme based backbone using pretty permalinks assuming root route multisitename automatically remove trailing slash problem case cause home page url becomes instead refresh web browser loading extra time cause wordpress redirects", "d": "11/2013"}, {"body": "zowens check exoskeleton real fork much amd support speed improvements optional dependencies etc", "d": "11/2013"}, {"body": "paulmillr awesome looks legit may even contribute", "d": "11/2013"}, {"body": "reopening reconsidered", "d": "11/2013"}, {"body": "self support componentio see use easy", "d": "11/2013"}, {"body": "use case adding special amd registration code backbone using shim configuration read post however remember requirejs shim configuration allows specify library dependencies solve issue requirejs user already faced problems libraries registering requirejs andor requesting libraries named usual example always register libraries vendors namespace etc library tries something like fails solve use requirejs map configuration would nt issue library used exported globals mean nt single use case seems inevitable us write bit code loader configurations amd explicitely registered libraries rather amd supporting external libraries without additional code since possible maybe jrburke could help us", "d": "11/2013"}, {"body": "arcanis one difference wrapping shimming excluded dependencies eg jquery via cdn cause wrapped code break build shimmed libraries known fail case", "d": "11/2013"}, {"body": "agreed using map configuration friendly use cases using rjs build also appealing able avoid globals altogether", "d": "11/2013"}, {"body": "foxbunny see thanks example", "d": "11/2013"}, {"body": "amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amen brother preach", "d": "11/2013"}, {"body": "think know web dev community wo nt converge module system working groups browser vendors force something us finally standard modules able enjoy benefits able make assumptions thirdparty code community encouraged write smaller neatly packaged singlepurpose modules care dependency tree rather script tag insertion tool making assumptions module format handling us also easy see building lot simpler everyone standard module format amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amd attempt build standard modules wgs browser vendors figure us everyone embraces standard everyone start making beneficial assumptions codebase requirejs figure load nonamd code code black box regards assumptions made dependency graph must explicitly stated application configuration assumptions made exports must explicitly stated said would great everyone adhered way thinking clearly best going happen completely understand everyone got ideas modules approached community fragmented amd attempt unify fragmentation suppose wait harmony everyone get boat", "d": "11/2013"}, {"body": "hello backbone dependencies jquery underscore templates engine import backbone", "d": "11/2013"}, {"body": "sorry gravedig reopen dealing problem coffeescript mariomodule deviseappregister register app backbone marionette class registernew extends marionetteitemview template deviseregistertemplatesnew debugger session opens get following see returned params object param seems ok nowhere found", "d": "11/2013"}, {"body": "hi ellmo put fiddlegistjsbin glad take look", "d": "11/2013"}, {"body": "braddunbar change threw baby bath water already possible resolve using appropriate route pattern developers want query string support parameterization forcing router strip query string patterns option disable behavior big mistake one prevents upgrading unfortunately please reconsider", "d": "11/2013"}, {"body": "drrcknlsn looked though discussion somewhat disjointed point repeating quite bit respond would appreciate", "d": "11/2013"}, {"body": "jashkenas master charset content type", "d": "11/2013"}, {"body": "going chime try revive thread usecase well jashkenas address question asked replies back exactly create event specific ca nt use add sync generic ca nt use singular success callback use case actually want trigger collection add event new model created need know new model created want code coffeescript class occontact extends backbonemodel class occontacts extends backbonecollection model occontact class occontactslistview extends backboneview initialize opts gt optscollection new occontacts occontacton create instance gt optscollectionadd instance could accomplished explicit success callback save happens many cases preferable would argue organize logic events problem using sync event case fired every time model interacts server includes updates deletes thanks", "d": "11/2013"}, {"body": "afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right", "d": "11/2013"}, {"body": "yea apologies pseudocode correct event listener constructor exist convenient imho hand posting saw suggested solution documentation site via backbonecollectioncreate seeks like may better solution global thanks quick reply alex nov pm jeremy ashkenas notifications githubcom wrote afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right reply email directly view github", "d": "11/2013"}, {"body": "seeing android mobile safari user agent strings offending browsers noticed fix users", "d": "11/2013"}, {"body": "adambom get exact error tried apps android device nt issue far would mind paste stack trace", "d": "11/2013"}, {"body": "yeah basically personally seeing recorded sent log using windowonerror also seeing chrome guess people still running version backbone version unfortunately windowonerror nt capture stack traces error sorry minified code beautified version", "d": "11/2013"}, {"body": "documentation clarity reset parameter trying figure backbone behaviour fetch documentation nt forthcoming hence arriving glad default behaviour nt want backbone clobber client state different semantic serverpersisted state vs clientephemeral state model know better anything passing reset option fetch bad design assumes external caller knows model modelattributes merges state single object ability override tojson control gets persisted minor effort using approach similar aratlas fetch get semantics clear attributes want fetch however easy obvious whilst backbone provides raw tools work one would like appears common use case indeed core backbone design decision ie nt clobber client state general approach would perhaps whitelist option model grunt work us warning untested ideaexample code ahead save whitelist filter attributes ensure serverside attributes get persisted fetch override parse update server attributes ensure server ca nt accidentally clobber clientephemeral state functionality would minor change backbone seems like common use case given backbones default behaviour clobber client state also easily implementable generic model class extends backbonemodel doubt others want blacklist instead different fetchsave lists finer control lists different api versions trying things creates bloat may better extensionplugin leave backbone", "d": "11/2013"}, {"body": "well given backbone provides reset true option entire collection think reasonable provide model well geting model server implies getting updated version server attributes deleted important information nt lost storing ephemeral client side data mixed attributes think ephemeral data stored wrong place request reopening ticket", "d": "11/2013"}, {"body": "change implemented", "d": "11/2013"}, {"body": "tauren solution go end comma delimitated routes pretty much mind wondering achieve writing routing system", "d": "11/2013"}, {"body": "without investigating apply used instead call see reference backbone model constructor var baseview backboneviewextend prototype properties baseviewextend function alert extend called return backboneviewextendapply arguments lt use apply var subview baseviewextend alert shown", "d": "11/2013"}, {"body": "goranvukovicoskyinteractive absolutely thanks catching", "d": "11/2013"}]