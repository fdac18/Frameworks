[{"title": "make view options arguments available methods called ensureelement", "body": "noticed etc functions good ca nt use datat gets passed initialize would like able something like right function get called nt provide context", "num": "2052", "d": "12/2012"}, {"title": "caching updated js files", "body": "problems prior updating js file uploading server app would fail initialise next page refresh due js errors seemed related caching page refreshes would clear even though cache disabled chrome console fixed stable file updates immediately reflected next page refresh buggy references view model files fail page refreshes gone back fine mainjs app fails reach consolelog app ready shim underscore exports underscore jquery exports jquery bootstrap exports bootstrap deps jquery jqueryui exports jqueryui deps jquery plugins deps jquery backbone deps underscore exports backbone consolelog start define function require use strict consolelog app ready var rootview require app new rootview", "num": "2046", "d": "12/2012"}, {"title": "make remove autocleanup events", "body": "understanding events nt auto cleaned created like change event never fired second scenario fixed people use instead seems like easy way events currently cleaned possible proposals add method add like original dispose implementation take care cases like automatically would autocleanup usages places people use instead listento make automatically get added events get removed viewstoplistening called", "num": "2045", "d": "12/2012"}, {"title": "eventsonce nt properly remove", "body": "see calls passes event anonymous function attaches original callback callback see inside function decides events keep always returns callback case passing anonymous function causes removed probably checking callback callback separately line line", "num": "2044", "d": "12/2012"}, {"title": "backbone polymorphism support two models id", "body": "following polymorphic collection instructions seems issue two different models types saving two different urls ultimately two different database tables js collection new appcollectionspaymentscollection id amount classname creditcard id amount classname echeck collectionmodelslength collectionmodels creditcard understand collection would want remove duplicate models identical objects think reasonable use case polymorphic collection may models different classes id main sticking point seems collectionget collectionadd uses duplication check opinions best way handle polymorphism use case one issue solution felt easy elegant", "num": "2043", "d": "12/2012"}, {"title": "adding filter tojson causes error", "body": "demo returns method tojson error", "num": "2042", "d": "12/2012"}, {"title": "properly setting object properties array elements models", "body": "let say model like var book backbonemodelextend defaults function return title authors publishinfo publisher isbn year month initialize function thison change function model options consolelog change model literally way change properties inside object also fire event something like defeats purpose using models change event fired similarly way change elements inside array var b new book works fine bset title test replaces entire publishinfo object instead updating bset publishinfo bset authors mike replaces entire array author mike vanished bset authors jane hence need way set object properties array elements something like object instead replacing pass option replace default extend bset publishinfo replace bset publishinfo replace true similarly arrays appends bset authors jane prepends bset authors jane replaces bset authors jane replace true", "num": "2036", "d": "12/2012"}, {"title": "number change events fired possibly inconsistent", "body": "following made tests show inconsistency number times change event fires believe existing tests contradict javascript test one change fired two sets function var model new backbonemodel modelon change property function modelset property bar modelon change function ok true modelset property foo test two change events fired second silent set event though happens second non silent set function var model new backbonemodel modelon change property function modelset property bar modelon change function modelset another cat silent true ok true modelset property foo test fires extra change event function var count var model new backbonemodel modelon change function ok false modelon change function switch count case modelset true silent true ok true break default ok true modelset x true existing tests think conflicting expectations change silent hand run final event always fired regardless interim changes lastly test made think something wrong setchange attrmodelset z true silent true triggers second change last set fires step last test see happens understanding current functionality regardless whether set happens inside kind change event fire one event silent sets never fire event bunch silent sets non silent set still one change event note state affairs pull request sure wrong something wrong thought bring attention", "num": "2034", "d": "12/2012"}, {"title": "backbonejs facebook api direction required", "body": "hi guyz app facebook developed codeignitor backend front end simple ajax calls used update page page html created dynamically code ignitor app grown much needed shift code client side framework found backbonejs good client side frameworkbut problems choosing shift translate code changes need make current client side php code use backbonejs also confusion currently page html built dynamically codeignitor passed ajax call displayed backbone work dynamically created html far learnt backbonejs work templates underscore dynamic html template also studied requirejs javascript module loader load template js files get direction move current design something client side framework necessary ca nt leave option use backbonejs make things simple restful plz help guyz thnx", "num": "2032", "d": "12/2012"}, {"title": "unable override sync error behavior", "body": "longer possible override behavior error handler augment consequence possible prevent error responses triggering model yes ideal world would probably want happen services tiers created equal worse error handler signature changed two versions making breaking change code used backbonesync directly provided error handler", "num": "2031", "d": "12/2012"}, {"title": "validate method nt raise events invalid value set back original value", "body": "setup model property called name example setup validate method model returns invalid value greater characters windowtask backbonemodelextend consolelog validating validate function attrs attrsnamelength gt return long wire view textbox case sets name object bind method catch events object set name change event gets raised expected validating logged console set name error event gets raised expected validating logged console set name back event raised validating logged console set name change event gets raised validating logged console", "num": "2030", "d": "12/2012"}, {"title": "using backbone view node", "body": "wonder use backbone view render node", "num": "2025", "d": "12/2012"}, {"title": "routing query string stopped work", "body": "routing table routes like root page create new item page etc previous version user navigates page rooturl create opening new link backbone triggers second route shows new item page second route triggered see root page need test case try provide bit later", "num": "2023", "d": "12/2012"}, {"title": "case insensitive id", "body": "json payload returned server working returns payload id property capitalized hydrating model specific json payload nt set model state correctly isnew returns true would good idea treat properties coming back server case insensitive", "num": "2020", "d": "12/2012"}, {"title": "http status code content", "body": "recognized currently backbonejs tries update model also case content http status code validation update functions called without data finally returns error behavior desired backbone recognize special status code", "num": "2017", "d": "12/2012"}, {"title": "issue listentostoplistening context", "body": "kpdecker brought issue wo nt work one context since context nt stored alongside listening object two contexts makes impossible call listeners properly removed js test bulk stoplistening context function var extend backboneevents var b extend backboneevents var ctx var calledwithcontext false var calledwithoutcontext false", "num": "2015", "d": "12/2012"}, {"title": "ability use datasetting operations", "body": "current functionality understand correctly one purposes parse certain data types data example parse latitudelongitude number pairs object converting unix timestamps objects question implement behavior way see functionality accessible outside backbone ecosystem adding data model personal example application need load large amounts geographical information view via custom xhr request receives compressed data server client side data expandedparsed set model instances manually added collection ca nt use way unfortunately", "num": "2013", "d": "12/2012"}, {"title": "charset problem safari und chrome", "body": "hi sync function found problem charsets firefox ie send automaticly charset safari chrome site send new data model api data come bad change following works paramscontenttype applicationjson paramscontenttype applicationjson think correct thierry", "num": "2011", "d": "12/2012"}, {"title": "fetch add calls require additional parameters", "body": "call worked ajaxappend data upgrading started failing causing entire collection contents replaced secondary fetch contents workaround comments still lead one believe add field required append data collection", "num": "2008", "d": "12/2012"}, {"title": "new view string returns error upgraded", "body": "initialize parameter string instead json object got following error uncaught typeerror use operator search model pick eachforeach pick extendconfigure backboneview child child looked changes configure found using pick nt check passed parameter object string got error consider change new view calls string json object usage viewpoint regression issue quick fix add check pick typeof obj object return", "num": "2007", "d": "12/2012"}, {"title": "backbonesync inconsistent arguments", "body": "issues app related seems inconsistent call original arguments passed jquery change signature error callback javascript var success optionssuccess optionssuccess function resp status xhr success success resp status xhr modeltrigger sync model resp options nt one styles chosen either preserve jquery call signature convert style model events", "num": "2003", "d": "12/2012"}, {"title": "validate never runs set method model", "body": "use set method without options second line never executed validate method course", "num": "2000", "d": "12/2012"}, {"title": "nt also listener context", "body": "see question issue nt listento also bind listener context see probably others kind thing inside views initialize function bindall onreset onadd bind listener instance could save write", "num": "1999", "d": "12/2012"}, {"title": "save firing sync view silent true", "body": "hi wrote issue feature fiddle opinion sync must also muted set silent true", "num": "1992", "d": "12/2012"}, {"title": "changelog correct", "body": "information changelog changes set method model triggers change attribute events even changes example", "num": "1989", "d": "12/2012"}, {"title": "optimized backboneview methods delegateevents undelegateevents", "body": "use instead bind unbind delegate exactly faster havent tested zepto think work well attached code sample implement backward compatibility best regards elob", "num": "1988", "d": "12/2012"}, {"title": "options could undefined collectionadd", "body": "nt pass object triggered handlers receive options even pass empty object set", "num": "1987", "d": "12/2012"}, {"title": "setting models attributes checking new current value differ correctly", "body": "method models used call check new current value differ useful models value array object would check difference", "num": "1985", "d": "12/2012"}, {"title": "new model attributes loses attributes upon saving", "body": "create new model callback server received meat attribute longer worked fine version nt see changes documentation regarding save overwriting existing attributes note nt happen following instead javascript var model new burrito modelset meat true modelsave name classic", "num": "1984", "d": "12/2012"}, {"title": "haschanged returns true change called", "body": "changing value silently haschanged return true behavior expected calling change model haschanged still returns true would expect haschange return false change called javascript var model new backbonemodel name tim age modelhaschanged returns false set value silently modelset name rob silent true modelhaschanged returns true modelchange modelhaschanged returns true would expect return false set value thing time silently modelset name rob modelhaschanged returns false", "num": "1982", "d": "12/2012"}, {"title": "save attributes", "body": "validate happens actual save call probably treated currently validation running set taking place also necessary determine fits mean validates presave state", "num": "1981", "d": "12/2012"}, {"title": "route syntax optional parts fragile", "body": "adding route produces something along lines checks current set routetoregexp transformations looking docs tests pull request original issue remains rather unclear whether bug known limitation perhaps parentheses route syntax primarily intended method optionalizing named params however given example seems toosimpletofail would fix desirable", "num": "1980", "d": "12/2012"}, {"title": "inconsistencies persist documentation backbonejs", "body": "see reported year ago issue still inconsistencies inline documentation backbonejs regarding parameter looking specifically initial setup section corrected documentation forked branch nt issued pull request assume want correct documentation", "num": "1979", "d": "12/2012"}, {"title": "confusing documentation url urlroot", "body": "documentation mentions starting slash set actually remove starting slash docs match code", "num": "1978", "d": "12/2012"}, {"title": "collectionadd merging thismodel defaults current values overwritten", "body": "trying merge incompleteadditional data existing model missing values filled defaults effectively overwriting previously set values consider example basic idea changing behavior commit breaks test probably clone attributes", "num": "1977", "d": "12/2012"}, {"title": "thiscollectionon fetch methodname longer working", "body": "thiscollectionfetch thiscollectionon fetch thisrenderloading since updating renderloading longer gets called bug intentional", "num": "1976", "d": "12/2012"}, {"title": "code coverage suggestion", "body": "suggestion could nt see coverage tool source tried jscover interested run something like point browser get line coverage branch", "num": "1974", "d": "12/2012"}, {"title": "give events global backbone object tracking savingdeleting", "body": "would really nice global events object utilize notify object started savingstopped saving started deleting stopped deleting different ajaxsync would modifying objects loadingfetching would used provide saving dialog somewhere page register onunload handler everything site saving state", "num": "1973", "d": "12/2012"}, {"title": "listento events hash", "body": "could accept hash events docs need updating backbone event methods also support event map syntax alternative positional arguments", "num": "1967", "d": "12/2012"}, {"title": "changelog indicate removal wraperror function", "body": "commit last august current wraperror function referenced made part public api removed nt mentioned changelog searching figuring error handling nt working anymore would nice could retroactively added changelog people may less headaches upgrade project simply override wrap backbonesync", "num": "1966", "d": "12/2012"}, {"title": "model change events swallowed selfreferential change handlers", "body": "minimal case make change handler updates model listens general change event model suppressed second change event nt fired avoiding loop still get model change event seems like weird edge case breaks associations code rdy backboneextensions library specifically regard interaction modelbinder", "num": "1964", "d": "12/2012"}, {"title": "model instantiation fails silently invalid attributes passed constructor", "body": "clear supposed catch validation errors initializing model attributes studied source code figure catch validation error cases instantiation fails silently see jsfiddle example problem", "num": "1961", "d": "12/2012"}, {"title": "new patch option behavior nt match previous save behaviors", "body": "seems like using patch true option save requires attrs object passed attrs object simply passed server think happen patch true apply attrs model sync simply send attributes changed since last sync since sync events triggered readwrite request event server would allow call modelsave null patch true patch without first figuring attributes changed course one could also modelsave modelchanged patch true would result separate behaviors since currently modelsave null results entire representation sent server", "num": "1960", "d": "12/2012"}, {"title": "partial set method model", "body": "model method inside assuming model empty filled form fields changed view listening event propagate model set called ask validation method validate state whole model might completed yet assume need fill fields make valid save change would propagate model override need something like commonly see pattern code write make sense special option set method would allow something like namely set one field without requesting model completely valid moment something like thismodelset field field partial true thismodelsetpartial field field silently set field call validation field value valid raise change event", "num": "1959", "d": "12/2012"}, {"title": "event request missing", "body": "catalog events says request event models true", "num": "1953", "d": "12/2012"}, {"title": "getbycid longer available", "body": "function getbycid longer available version", "num": "1952", "d": "12/2012"}, {"title": "collection add event handlers longer receive optionsindex", "body": "great release guys thanks improvements backbone noticed optionsindex still provided handlers remove event add event chance could get explanation change made", "num": "1948", "d": "12/2012"}, {"title": "", "body": "would say context param added listento function object events callback", "num": "1946", "d": "12/2012"}, {"title": "calculating changed attributes backwards incompatible", "body": "tried upgrading rather large backbone application latest release immense sadness discovered fairly fundamental line code changed namely backbone uses determine equality whereas older versions backbone used isequal performed deep equality issue course code slowly grew depend seemingly minor feature acting differently breaking many difficult track ways feel like least warrants mention changelog perhaps consideration might time bump realize semvar special cases seriously guys pretty large userbase consider", "num": "1943", "d": "12/2012"}, {"title": "backboneview rendering tree", "body": "hi found represent tree collectionmodels added recursively render backkboneview underscore function template", "num": "1942", "d": "12/2012"}, {"title": "parse longer passes xhr object", "body": "first congrats thanks bounty great changes one issue encountering project previously based longer passes xhr object models use case client side fetching paginated collection remote api returns total length collection xhr headers app display total count user lazily fetch extra pages better way implement behavior client side without relying xhr passed wanted clarify reverting behavior backbone", "num": "1939", "d": "12/2012"}, {"title": "annotated source issues chrome", "body": "following two inline comments render properly chrome big ensure history used outside browser browsers require hash contains leading", "num": "1937", "d": "12/2012"}, {"title": "listento jquery objects", "body": "started upgrade event listening listento great addition backbone question usage though listen click events dom objects cases attempted translate listeners div event callback viewlistento div event callback nt seem work using jquery getting following error listento function work jquery objects fine nt sure uncovered bug thanks update tim", "num": "1935", "d": "12/2012"}, {"title": "different event firing behavior silent model changes", "body": "problem backbone existing application firing certain events previously got fired javascript var model new backbonemodel selected false calls modelon change selected function calls modelset selected true silent true modelset selected false calls backbone calls backbone modelcomputechanges responsible behavior obviously performance optimization firing events nt need fired wonder really right behavior imagine backbone view subviews many models selected state user select multiple items clicking items select multiple single items problem functionality select deselect items sets selected value model silently wo nt trigger rerender subview loop would make sense backbone documentation states way passing silent true option defer validation event useful want change attributes provisionally rapidly without propagating change rest system said silent nt mean change event wo nt happen merely silenced next change next change different previously change change model value correct imho change change model value previous nonsilent change huge difference affect code expected previous behavior select deselect example problem user ca nt change single items anymore select deselect bulk changes got executed silently execute custom event rerender whole view instead subview performance reasons user tries change single item change made model events wo nt get fired anymore subview wo nt get rerendered", "num": "1934", "d": "12/2012"}, {"title": "model constructor triggers validation initialize called", "body": "model constructor calls silent true always triggers validation gets called models means custom validation falls relying certain things set like idea validation always running prevent bad defaults think would make sense triggered initialize completes would nt compatible silent triggering validation could workflow instead something like model constructor runs setting attributes triggering validation binds oneoff event initialize call validate passing attrs initialize gets called triggers initialize validate gets called specificacase hacky put initialized flag initialize silently return validate yet set try mess around overriding backbonemodel constructor", "num": "1932", "d": "12/2012"}, {"title": "document backbone mixes events", "body": "new pubsub facilities found change log mentioned document extra pointer let folks know would nice", "num": "1931", "d": "12/2012"}, {"title": "silent mode work modelset validation", "body": "check want disable validation", "num": "1930", "d": "12/2012"}, {"title": "changelog parse function always run defined mean", "body": "run exactly changed previous version always run nt clear", "num": "1929", "d": "12/2012"}, {"title": "event documented", "body": "event introduced neither documented catalog builtin events sync documentation probably also mentioned change log", "num": "1928", "d": "12/2012"}, {"title": "backbonesync requires actual model sent", "body": "previously real dependency second argument real model sounded like duck etc changes event triggered model piling dependency least something extend backboneevents used sync method extensively duck type requests pass overriden sync handler allows us elegantly filter requests common errors like user logged making request think kind behaviour still supported", "num": "1927", "d": "12/2012"}, {"title": "document optionssort collection add", "body": "document change log seems left change", "num": "1925", "d": "12/2012"}, {"title": "document", "body": "nt think collection fetch option docs fyi", "num": "1924", "d": "12/2012"}, {"title": "listento stoplistening discussion", "body": "inclusion new methods ca nt see using much almost event binds done inside views use frequently like see shorter names think using shorter alias methods alias alias alternatively following jquery pattern reverse application append appendto alias alias fwiw like others pattern implemented chose hook methods would track event third context argument passed", "num": "1923", "d": "12/2012"}, {"title": "removal bc break documented changelog documentation", "body": "still docs changelog needs updating also would nice caused version bump bc break projects", "num": "1922", "d": "12/2012"}, {"title": "model defaults overriding defaults model construction broken", "body": "var testmodel backbonemodelextend var x backboneviewextend initialize function options consolelog text optionsmodelget text render function return var x new x model new testmodel text abcdef code expect see abcdef console right nt instead see empty string remove text model defaults everything works fine", "num": "1919", "d": "12/2012"}, {"title": "pretty photo drop menu run together", "body": "driving crazy done want use navbarinverse collapse drop pretty photo gallery ca nt get run together way addd code bottom body nav bar works like pretty photo run brings photos different window new sure explain think missing something trying call jquery", "num": "1918", "d": "12/2012"}, {"title": "parse change introduces flow bug parsing response beforehand", "body": "fix change introduced flow bug method using fetch whereas parse called fetch method case introduces flow bug probably javascript update function models options optionsparse models thisparse models", "num": "1915", "d": "12/2012"}, {"title": "recent change escaped attributes causing downstream errors", "body": "motivation change previous behavior breaking something use backbone deep model change causing problems backbone deep model get htmlescaped value attribute var val thisget attr return escape val null val return escape thisget attr", "num": "1914", "d": "12/2012"}, {"title": "assigning model defaults uses extend instead defaults", "body": "scenario get json object couple attributes set null class font extends backbonemodel defaults fontcolor red attrs fontcolor null fontsize font new font attrs fontget fontcolor returns null believe due line using extend use defaults instead let know missing something", "num": "1913", "d": "12/2012"}, {"title": "collection fetch parses twice", "body": "issue manifests using bleeding edge version new parse option true default calling fetch success callback call either reset update method passing options contains parse true turn parses models means argument passed parse method hold different representations consider following example collection second parse pass response array already processed models", "num": "1912", "d": "12/2012"}, {"title": "expose methodmap use put patch requests", "body": "could make publicly accessible like change lame override nice say", "num": "1908", "d": "12/2012"}, {"title": "site backbonejs version missing validation save", "body": "hi guys breaking head invalid models persisted server today looked github version backbonejs noticed site version following lines save method missing nt seem ok nt", "num": "1906", "d": "12/2012"}, {"title": "strange behavior collectionadd remove", "body": "say one collection models one two javascript collectionremove one collectionmodelslength collectionbyid still holds model one get collectionget idofone undo function app executed fail javascript collectionadd one add back somewhere collectionmodelslength still collectionbyid model one collection regards model one duplicate record backbone version suggestion thanks advance update following code lines give correct results javascript collectionremove one silent true collectionadd one silent true", "num": "1904", "d": "12/2012"}, {"title": "jquery shadowed", "body": "backbone code makes assumption equal scope containing jquery usecase kanso nt true code breaking left undefined even though defined globally setting instead directly would fix problem better fix maybe", "num": "1902", "d": "12/2012"}, {"title": "performance problems collection sort automatically", "body": "months late party filing new ticket number concerts regarding pr fact called automatically instead manually welldocumented feature incredibly useful syncing additions across collections mutually listening add events stands removal breaks number existing code end returning adds constant time problem fails address added back api preserved called automatically place immediately adds n log n running time number operations sparse arrays nt exactly performant either performance concern breaking api ok remove automatically calling methods next major version put back adds constant time nt think unreasonable expect users call future version addition removal implied element insertion removal might break ordering unless happen right place user know thoughts jashkenas caseywebdev braddunbar philfreo", "num": "1894", "d": "12/2012"}, {"title": "mixin events backbone module", "body": "becomes officially blessed way pubsub backbone would alleviate major pain point many backbone apps need deciding pubsub strategy also would reduce need relying jquerydom events locally broadcast events dom subtreesviews", "num": "1888", "d": "12/2012"}, {"title": "investigate using jquery events", "body": "suggested", "num": "1887", "d": "12/2012"}, {"title": "change log upcoming release", "body": "response question updated master started rough draft changelog gt one pass commit history since march bound missing stuff ignored documentation changes relegated minor commitsfixes referenced issue best possible instead making bunch pull request noise thought would good hash issue especially given numbers features bug fixes etc without ado change log gt model save accepts patch true option collection sort triggers event instead added backbonecollection update backbone extends events object added optional groups route syntax add backbone events backboneevents supports jquerystyle event maps reset events include previous list models added convenience validation always happens even silent true passed options hash backboneview bump require underscore add backbonehistory used outside browser backbonesync accepts options backbonerouter navigate chainable backbonecollection aliases underscore proxies collect foldl inject foldr head take tail backbonemodel parse run initialization normalizing trailing leading slash behavior routes added backboneview dispose backboneview remove calls dispose event cleanup falsy values collection comparator override default value null undefined invalid model ids merge true option collection add backbonecollection clone backboneview options backboneview el backboneview tagname provided functions added backboneajax overriding default ajax implementation prefered backbonemodel destroy returns false modelisnew backboneview make accpets falsy values argument remove ender support collection reset call collection parse function well model parse true bugfixes", "num": "1885", "d": "12/2012"}, {"title": "backboneview setelement updating id classname", "body": "method sets view root element dom element myview backboneviewextend v new myview vsetelement someelem get consolelog vel consolelog v el div someelem consolelog vtagname div consolelog vid undefined consolelog vclassname undefined", "num": "1884", "d": "12/2012"}, {"title": "problem sorted models collection detected version", "body": "displays error page number expected backbonejs line sort function code char use sorted collection pageno integer model error nt occur firefox every time workaround throw comparator function use clauses find correct model", "num": "1883", "d": "12/2012"}, {"title": "appropriate form calling submethods model", "body": "rest api ability call methods context model example usecase model execute action model api example stripe created method extends default backbone model later model instance use like question searched backbonejs documentation ca nt seem find similar method missing part core part core thoughts adding interest part core let know add core write proper tests create pull request", "num": "1882", "d": "12/2012"}, {"title": "ca nt access newly added models collection using fetch add true", "body": "saw issue thought would make sense bring issue well calling immediate way acces newly added models collection among things useful infinite paging page rather binding collection add event rendering one item time would able render new models modify dom", "num": "1877", "d": "12/2012"}, {"title": "applicationjson vs applicationjson", "body": "modelsync resets encoding set workaround pass option every call", "num": "1875", "d": "12/2012"}, {"title": "push search history", "body": "developing first backbone project requirement sure meet router one route maybe problem three views defines view search form appsearchview backboneviewextend appsearchview defines view search form showing results appresultssearchview backboneviewextend appresultssearchview defines view query results appgridview backboneviewextend initialize function options var resultsdata new appresults resultsdataon reset function collection appgridview issue want users able use back button navigate back initial search also able move forward search results idea assistance would huge help thanks", "num": "1874", "d": "12/2012"}, {"title": "need able define want updates server save", "body": "rarely want updates server saving usually specific fields like primary key date modified etc plenty times resetting model save screws things especially slow response like responsive show views right away nt wait server finish saving nt want make changes changes get reset response server comes back currently hack nt want attributes updated calling copy save awihle want attributes come back", "num": "1872", "d": "12/2012"}, {"title": "read property tagname null android", "body": "hey got bug words android android browser indeed sentry system often reports bug idea unfortunately information plus nt personnaly android sorry", "num": "1868", "d": "12/2012"}, {"title": "feature request analogue modelisnew collections", "body": "find quite frequently checking collection empty order invoke certain functionality would convenient cases establish collection empty nt ed yet ed returned empty similar modelisnew used determine model synced server happy write wanted get ideasfeedback approach embarking immediate thought something like set flag collection set true successful fetch something like sure others may better way", "num": "1864", "d": "12/2012"}, {"title": "routernavigate wo nt trigger url current one even overridden", "body": "wo nt trigger url current url like backbone ignore caching explicitly tell trigger route", "num": "1863", "d": "12/2012"}, {"title": "elements ui hash backbone", "body": "apologies advance already ticket related question find one searching reasoning behind including elements spine ui backbone marionette hash backbone proper fetches saves references elements within el based selectors example way works marionette myview backboneviewextend events keydown namevalue valuefldonkeydown view rendered find el namevalue thisuivaluefld see marionette docs discussion would make small changes implementation seems basic concept would useful close people using backbone ruled compelling reason also useful features could explored implemented happy elaborate direction dead water thanks much", "num": "1862", "d": "12/2012"}, {"title": "backboneevents really part underscore", "body": "backboneevents generic event aggregator particularly related browser dom anyway many times people use jquery underscore want minimal pubsub", "num": "1861", "d": "12/2012"}, {"title": "backbone fragment pushstate behavior straight", "body": "newbie backbonejs try write demo understand backbonejs problem backbone fragment set pushstate true backbone history case javascript var workspace backbonerouterextend address localhostusersfriends press lt href hello gt hello lt alert two twice usersfriends usersfriends hello want call routes usersfriends see regular expression nt know happen find around backbonejs site googles help", "num": "1860", "d": "12/2012"}, {"title": "utility filter collection fly according different search keywords", "body": "wrote quick utility implement searchasyoutype kind feature application working wondering something worth integrating back main branch jeremy", "num": "1859", "d": "12/2012"}, {"title": "backbonejsorg license", "body": "hi would like translate backbonejsorg polish language publish ghpages ca nt find information license know backbone mit website documentation", "num": "1858", "d": "12/2012"}, {"body": "see signature removed backbonewraperror helper method overriding sync work better particular use cases change log", "d": "12/2012"}, {"body": "views keeps options passed constructor need extra argument view constructor documentation actually mentions creating new view options pass merged default options already present view attached view thisoptions future reference", "d": "12/2012"}, {"body": "hi jessehouchins functions etc called context context function calling case would view object functions view prototype js var foo backboneviewextend id function return foo thismodelid view var new backbonemodel id var foo new foo model would create view id let know works reopen", "d": "12/2012"}, {"body": "changed recently forked wrote test indeed pass production app think looks viewel html element", "d": "12/2012"}, {"body": "nt believe example case", "d": "12/2012"}, {"body": "backbone nt anything much browser caching chrome certainly aggressive caching static assets make sure version urls properly use appropriate headers avoid", "d": "12/2012"}, {"body": "put plugin dependencies backbone requirejs amd loader issue check support", "d": "12/2012"}, {"body": "thanks tgriesser jquery missing dependency backbone seemed happy without error added jquery dep back cheers", "d": "12/2012"}, {"body": "think would foolproof relying view", "d": "12/2012"}, {"body": "vote used outside view", "d": "12/2012"}, {"body": "one question wanted check events properly cleaned view listening", "d": "12/2012"}, {"body": "seems see", "d": "12/2012"}, {"body": "fills gap think enhancements including model collection unbindings left implementors choose use", "d": "12/2012"}, {"body": "adding kind onremove method views default noop onremove called automatically remove ontop existing functionalities provided remove alternatively remove could also emit event listened optionally would allow implementors tack additional cleanup routine gets called automatically usecase would simplify cleanup nested views without overriding default remove method", "d": "12/2012"}, {"body": "adding kind onremove method views default noop onremove called automatically remove ontop existing functionalities provided remove alternatively remove could also emit event listened optionally nt seem like much benefit overriding", "d": "12/2012"}, {"body": "really good point consider people upgrading layoutmanager may still syntax instead continue clean", "d": "12/2012"}, {"body": "related also wondering properly cleaning events events automatically cleaned using everywhere cases wanting use need worry manually cleaning events presumably event fired autocleaned cases event never fired", "d": "12/2012"}, {"body": "please submit failing test case js test function var f function ok true var obj extend backboneevents objonce event f objoff event f objtrigger event passing currently", "d": "12/2012"}, {"body": "philfreo stoplistening clear events like events even nt called events called automatically removed", "d": "12/2012"}, {"body": "caseywebdev thought cleaned things attached via rather view context wrong", "d": "12/2012"}, {"body": "ah yes misread override event wonder common use", "d": "12/2012"}, {"body": "case one add like original implementation take care cases like automatically would autocleanup usages places people use instead make automatically get added events get removed called", "d": "12/2012"}, {"body": "failing spec", "d": "12/2012"}, {"body": "thanks pivotalleopold", "d": "12/2012"}, {"body": "sorry hijacking issue opened new one", "d": "12/2012"}, {"body": "looks like need composite key created plugin nt updated", "d": "12/2012"}, {"body": "specific temporary solution think override method run collection accounts class type id long term solution perspective concerned may require much knowledge internals collection duplication filtering works especially given functionality seems changed recently latest master branch also uncertain performance impact scenarios collection several models", "d": "12/2012"}, {"body": "caseywebdev plugin looks like workable solution problem give shot thanks", "d": "12/2012"}, {"body": "plugin may unexpected side effects feel free modify account new changes", "d": "12/2012"}, {"body": "returns array collection though", "d": "12/2012"}, {"body": "hi believe philfreo correct returns array rewrap collection want use hope helps", "d": "12/2012"}, {"body": "see one solution", "d": "12/2012"}, {"body": "philfreo correct backbonedeepmodel would good way go something like good idea want change properties objects amp arrays models outside scope simple interface backbone provides model", "d": "12/2012"}, {"body": "hi adriaanlabusc think maybe fundamental misunderstanding particular understanding current functionality set regardless whether set happens inside kind change event fire one change event silent sets never fire change event entirely correct change made another change one event fired instance clear things", "d": "12/2012"}, {"body": "case nested set happens something like happens tests would fire change twice notice second test silent set javascript test change fires twice set run change function var model new backbonemodel modelon change function modelset b true ok true modelset true test nested set multiple times diff function var model new backbonemodel modelon change function modelset b true silent true ok true modelset true supposed happen", "d": "12/2012"}, {"body": "first example correct events continue triggered long nested changes second example however silent changes trigger changes address pull request", "d": "12/2012"}, {"body": "believe tgriesser fixed one please let us know case", "d": "12/2012"}, {"body": "hi abdulmannan probably get help documentcloud irc room backbonejs mailing list github issues issues improvements specific library also might want check tutorials blog posts example sites wiki", "d": "12/2012"}, {"body": "tgriesser posted looking backbone community answer question whereever see thnx", "d": "12/2012"}, {"body": "hi kpdecker would mind elaborating use case bit particular need suppress event right handler signature think change best previous signature include model like events", "d": "12/2012"}, {"body": "error custom error handler added concept ignored error background processes etc would trigger user facing error handlers signature success nt even match pattern adding model error callback echo ajax callbacks actually masks parameters ajaxlayer complete left raw ajax callbacks agree consistency argue mirror ajax callback apis rather trying thing", "d": "12/2012"}, {"body": "think probably still ignore error via custom option think probably best way passed error callbackhandler check callback signature please check updated version posted post commentsquestion", "d": "12/2012"}, {"body": "success error maybe beforesend split static properties sync object js backbonesync function backbonesyncerrorcall backbonesyncsuccesscall backbonesyncerror function backbonesyncsuccess function way could easily replaced user", "d": "12/2012"}, {"body": "success error handlers really little trigger event modelcollection normalize arguments fit backbone patterns passing model callback fairly easy ignore events get whatever options need rather complicate customization hooks completely necessary", "d": "12/2012"}, {"body": "guess use case hacked together using feels lot fuglier rather overriding instances mattered", "d": "12/2012"}, {"body": "kpdecker provide needed hook", "d": "12/2012"}, {"body": "seeing change filtered following method computechanges function loud thischanged var already var triggers var current thiscurrentattributes var changes thischanges", "d": "12/2012"}, {"body": "hi amirrajan thanks bringing issue changes implementation validation change functionality since change amp validation pieces gone pretty big overhaul see validate changes take look ticketschanges see behavior master expecting reopen", "d": "12/2012"}, {"body": "hmm updated master validation nt raised set method executed lem step provide info reopen", "d": "12/2012"}, {"body": "amirrajan validate nt called anything except unless pass option", "d": "12/2012"}, {"body": "jsfiddle reproducing issue pointing latest version backbone windowamodel backbonemodelextend validate function attrs consolelog validating attrsname amp amp attrsnamelength gt consolelog invalid return long windowaview backboneviewextend initialize function windowappmodelbind thislog log function e consolelog event raised e windowapp windowappmodel new amodel windowappview new aview consolelog begin consolelog setting name windowappmodelset name validate true consolelog setting name windowappmodelset name validate true consolelog setting name windowappmodelset name validate true consolelog change event message nt consolelog setting name windowappmodelset name validate true consolelog end", "d": "12/2012"}, {"body": "cleaned fiddle bit nt look like change event triggered mentioned one call current value model value nothing changing values invalid value never persisted model", "d": "12/2012"}, {"body": "specific scenario save button appear value changed model error hide save button show error notification return value back original value event raised leaving view invalid state showing error", "d": "12/2012"}, {"body": "js fiddle showing particular scenario start typing text box save button appears expected type one number puts invalid state see button disappear error div appear remove additional number event raised continue remove numbers change name event raised", "d": "12/2012"}, {"body": "amirrajan think best approach would use validate particular case validate custom function see jsfiddle validations used check invalid attributes persisted rather deal ui updating", "d": "12/2012"}, {"body": "gotcha one thing note step change change name events raised however validation every subsequent edit step change name event raised inconsistent", "d": "12/2012"}, {"body": "ah great call exiting early validate leaves internal changing flags incorrect state pushed fix move higher call take care thanks pointing amirrajan", "d": "12/2012"}, {"body": "adding link commit reference", "d": "12/2012"}, {"body": "definitely though need dom sort eg jsdom also reuse templates server side leaving rendering extension client", "d": "12/2012"}, {"body": "speaking braddunbar jashkenas feel changing look like instead unnecessary dependency makes implementing environments little harder since longer relying dom library", "d": "12/2012"}, {"body": "layoutmanager fully working nodejs method override change one line", "d": "12/2012"}, {"body": "simple repro use strict var router backbonerouterextend routes create var router new router backbonehistorystart pushstate true root c", "d": "12/2012"}, {"body": "mornin macewindu seems escaped change log ignore query string parameters check background subject update change log accordingly", "d": "12/2012"}, {"body": "added change log", "d": "12/2012"}, {"body": "key names json case sensitive however override keyname backbone uses model ids setting idattribute option", "d": "12/2012"}, {"body": "got", "d": "12/2012"}, {"body": "function however want deal", "d": "12/2012"}, {"body": "seems like valid usecase backbone handle correctly already handles error codes differently example", "d": "12/2012"}, {"body": "would nt handling status codes jquery issue pindar running error version backbone jquery using", "d": "12/2012"}, {"body": "caseywebdev suggestion working also agree philfreo could backbone task tgriesser save function line set function tries set empty string therefore returns false write little test next days jquery works right point calls success callback think either backbone handle special case user copy attributes like caseywebdev suggestion jquery backbone", "d": "12/2012"}, {"body": "pindar taken care let know works thanks pointing issue", "d": "12/2012"}, {"body": "cleanest solution would remove option otherwise housekeeping passed contexts still looks weird like nt really listening anything merely mediating", "d": "12/2012"}, {"body": "liked implicit context better plus makes job way cleaner always another context really", "d": "12/2012"}, {"body": "agree caseywebdev gsamokovarov", "d": "12/2012"}, {"body": "ditto context argument makes little sense monday december tim griesser wrote agree caseywebdev gsamokovarov reply email directly view github brad", "d": "12/2012"}, {"body": "lovely", "d": "12/2012"}, {"body": "purpose pretty clear convert raw server responses attributes modelcollection saying seems like valid use case mutators though computed fields setter support check backbonemutators simple gist wrote liking parts backbonemutators whether type feature might ever end backbone core debate always override model set bind one model additional work manually", "d": "12/2012"}, {"body": "yeah implemented similar functionality project back reason brought figured converting json responses meaningful data model convert back send wire implement across board make flexible saying nt mix parsing mutating purposes align", "d": "12/2012"}, {"body": "yep philfreo right idea really need parse data always think would situation describe", "d": "12/2012"}, {"body": "nt think need manually send charset perhaps problem serverside configuration anyone else confirm", "d": "12/2012"}, {"body": "looking spec think technically braddunbar talking maybe basing allowing option override", "d": "12/2012"}, {"body": "question anyone else encountering problem would thought would raised head long ago real never seen backbonerails apps", "d": "12/2012"}, {"body": "never encountered apps work use exclusively", "d": "12/2012"}, {"body": "views passed options object string passing string undefined behavior", "d": "12/2012"}, {"body": "yes inconsistencies ideal vote stick backbone style callbacks stay agnostic possible available needed", "d": "12/2012"}, {"body": "seems like fine change since style exposed etc fact even used backbone internally pauluithol custom override", "d": "12/2012"}, {"body": "like caseywebdev change well keeping model first argument callbacks events would much cleaner", "d": "12/2012"}, {"body": "braddunbar yes nt really preference either resolution although always related model would nice noticed discrepancy got errors old plugin expected first argument", "d": "12/2012"}, {"body": "sounds good feel free pr merge change", "d": "12/2012"}, {"body": "coming right", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "one access remaining error handler options code changes nt complete api success error", "d": "12/2012"}, {"body": "options need access xhr stored think everything accessible sure mean complete though would mind expanding", "d": "12/2012"}, {"body": "kpdecker realized posting referring option backbone handles passed nt considered think alright pass also documented way", "d": "12/2012"}, {"body": "braddunbar zepto error include additional data explaining exact error issue http stack ajax stack ex type things like timeout parsererror others error handler place error information silently discarded way us access short zepto global ajax events without drawbacks regarding complete handler seems like consistent one way ajax callbacks either augment augment parameters data object", "d": "12/2012"}, {"body": "check discussion", "d": "12/2012"}, {"body": "decided optin must pass want force validation place validation happens default idea invalid models locally still changing never try persist invalid model", "d": "12/2012"}, {"body": "let tag em close em folks", "d": "12/2012"}, {"body": "top bottom code act identically", "d": "12/2012"}, {"body": "nt inside collection instead view", "d": "12/2012"}, {"body": "clear", "d": "12/2012"}, {"body": "looks like wrong great news thank", "d": "12/2012"}, {"body": "problem", "d": "12/2012"}, {"body": "afraid going away soon nt issue within day two thanks", "d": "12/2012"}, {"body": "closed normal sync firing", "d": "12/2012"}, {"body": "moszeed need ignore event", "d": "12/2012"}, {"body": "braddunbar want fire save success set params save sry bad english", "d": "12/2012"}, {"body": "nt fired success callback effect right", "d": "12/2012"}, {"body": "using seem happen see", "d": "12/2012"}, {"body": "able reproduce jsfiddle using release something missing", "d": "12/2012"}, {"body": "well look used isequal set method model", "d": "12/2012"}, {"body": "apsavin correct regression brought fixed grabbing latest master fix issue time", "d": "12/2012"}, {"body": "well isvalid method latest master", "d": "12/2012"}, {"body": "apsavin validation going back different form see ticket", "d": "12/2012"}, {"body": "update", "d": "12/2012"}, {"body": "hi elob thanks pointing understand aliases would nt significant speed gain using newer form indeed case probably continue use maintain much backward compatibility possible unless deprecated currently said seem unlikely someone using latest version backbone would using jquery lt", "d": "12/2012"}, {"body": "right alias still got speed gain made change use newest jquery project iam currently developing ive done lot optimization instance aproxmatly views think maybe proxy instead bind made speed gain iam work right dont code base post benchmark later", "d": "12/2012"}, {"body": "cool using bumping jquery requirement bumped underscore latest release", "d": "12/2012"}, {"body": "agreed anyone using latest backbone likely going using jquery", "d": "12/2012"}, {"body": "speed gain would nice well", "d": "12/2012"}, {"body": "simple perf", "d": "12/2012"}, {"body": "tgriesser pr updated jquery dep docs", "d": "12/2012"}, {"body": "jashkenas cool bumping dependency guess", "d": "12/2012"}, {"body": "first birthday", "d": "12/2012"}, {"body": "bump whatever appropriate fine added said pr change vendor copy jquery latest stable version", "d": "12/2012"}, {"body": "moved bumped vendored copy discussion move", "d": "12/2012"}, {"body": "removed increase performance seem inconsistency open pr discussion", "d": "12/2012"}, {"body": "see think change mentioned changelog", "d": "12/2012"}, {"body": "believe addressed try pulling branch", "d": "12/2012"}, {"body": "sweet thank", "d": "12/2012"}, {"body": "nejj thanks issue although able reproduce jsfiddle something missing", "d": "12/2012"}, {"body": "tgriesser sure going tried code morning worked fine thanks quick response though", "d": "12/2012"}, {"body": "closing discussion moved", "d": "12/2012"}, {"body": "fine use also would using two routes exactly function distinction callbacks would receive one argument thing fixes nt think necessary", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "nice would really like see merged leads expected behaviour think", "d": "12/2012"}, {"body": "yep agree caseywebdev case bit contrived think viable use cases", "d": "12/2012"}, {"body": "afraid able reproduce error added test case commit give look let know misunderstanding like reopen ticket feel free send pull request adds failing test case test suite", "d": "12/2012"}, {"body": "set collection", "d": "12/2012"}, {"body": "sorry double commit issues local repository added testcase fail opinion", "d": "12/2012"}, {"body": "thanks bringing tjoekbezoer work expected", "d": "12/2012"}, {"body": "took time find app nt working expected glad able help backbone pure awesome sauce", "d": "12/2012"}, {"body": "yea think one got introduced new use constructor", "d": "12/2012"}, {"body": "makes difference", "d": "12/2012"}, {"body": "nt believe ever event looking", "d": "12/2012"}, {"body": "ah appears previous developer added fetch override base collection handle loading image error handling thanks", "d": "12/2012"}, {"body": "neat stuff thanks sending note", "d": "12/2012"}, {"body": "use new event", "d": "12/2012"}, {"body": "really want truly global jquery already got covered", "d": "12/2012"}, {"body": "yup works", "d": "12/2012"}, {"body": "fwielstra thanks pointing opened pull request adds change log take look let know mind", "d": "12/2012"}, {"body": "indeed weird edge case change property listening inside event triggers listener final change called change nt occurred time final change hits change suppressed example following works makes sense would change event fired regardless added test provided fix", "d": "12/2012"}, {"body": "thank", "d": "12/2012"}, {"body": "oh spoke soon fix causes event triggered value changedattributes incorrect updated testcase", "d": "12/2012"}, {"body": "thanks updated case one sure value accurate loud change fired twice inside change loop item reflect changes time hits last event see case illustrated specific reason need trigger loud change inside listener attribute", "d": "12/2012"}, {"body": "guess expect general change event include changedattributes well individual item change events way listen either event something new data case works specific use case trying use modelbinder bind dom elements calculated model values values calculated response model item change events modelbinder binds general change event determine elements update", "d": "12/2012"}, {"body": "raindrift case loud change inside callback achieve could nt accomplished changes nested change callback", "d": "12/2012"}, {"body": "mean like need one change handler able access changedattributes since change handlers nt even mine inside packages things like dom binding autosave stuff moment first handler makes nested model change eats changedattributes subsequent handlers thanks working tricky case explain", "d": "12/2012"}, {"body": "raindrift like nt firing loud changes inside individual change handlers", "d": "12/2012"}, {"body": "oops linked wrong fiddle suggestion make decent workaround though watch model changes instead item changes seems work case since running handlers extra times nt hurt anything behavior little weird though example second change event fired twice without changedattributes times change event fire nothing changed case think make code work way though behavior definitely changed others may run problem also", "d": "12/2012"}, {"body": "gave try closer one item set inside change handler changedattributes ever contains final one example", "d": "12/2012"}, {"body": "happening fiddle sets first change handler callback invoked another loud called model currently listening turn changes state second change b handler callback level first invoked new recent set change item two called reset loud change called time change change fired amp b wo nt called third time also reset empty b triggered level empty also see related discussion nested changes conclusion nested changes difficult probably avoided particularly need know changed since guaranteed next change let know clears things ideas better solution cases", "d": "12/2012"}, {"body": "thanks explaining detail gathered reading source fwiw writing new code attempts rather bunch existing code working fine upgraded last version able sure decision replace code wellconsidered still wonder differently moment managed work around moving calculated model changes api layer little sad since adds server roundtrip cleaner anything work around client see find personal time coming week work implementation duplicates behavior thanks help", "d": "12/2012"}, {"body": "sure thing feel free open pull request something think might help similar cases", "d": "12/2012"}, {"body": "hang sec close love braddunbar done lot thinking desired semantics behavior nested changes take look specifics", "d": "12/2012"}, {"body": "thinking back regression likely introduced changecenter series commits might worth bisecting going back compare difference approach", "d": "12/2012"}, {"body": "one note playing test case bit desirable work properly second change handler nt miss attribute changes unrelated inner changes happened happen current implementation tweaked allow better go back implementation fix", "d": "12/2012"}, {"body": "issue glad found thread revert", "d": "12/2012"}, {"body": "raindrift monken pretty big changes simplify events specifically changes longer queued triggered later rather silenced entirely makes easier keep track changing attributes cases like one mentioned fiddle working take look see takes care issues reopen one", "d": "12/2012"}, {"body": "result changes modelchange gone good", "d": "12/2012"}, {"body": "monken seems consensus find little discussion feel free chime good use case needing", "d": "12/2012"}, {"body": "perfectly fine build object pass modelset instead perfectly fine", "d": "12/2012"}, {"body": "jashkenas recently said idea behind method ensure model never exists invalid state beauty method though determine exactly invalid state case probably better running even creating new invalid model", "d": "12/2012"}, {"body": "documentation says validate called set save could define properties set call instantiation error handling setup javascript var validationtestmodel backbonemodelextend validate function attrs attrsfoo foo return foo foo", "d": "12/2012"}, {"body": "caseywebdev dperrymorrow thanks replies nt think either reasonable solutions following reasons current implementation actually allows create model invalid state define invalid state missing required field must one common validation scenarios directly call prototype method every instatiation smells besides ca nt get correct context value validatemethod nt instance call also smell create model without attributes setting attributes separately nt allow create model invalid state forces define validation rule states model must defined backbone supports constructor initialization explicitly require workaround new strict handling validation breaking change many use cases codebase models created attributes often think clearer seems constructor initialization fail silently without reasonable way handling nt usage problem bug", "d": "12/2012"}, {"body": "saying define validation rules feel following happen javascript var validationtestmodel backbonemodelextend validate function attrs attrsfoo foo return foo foo var instance new validationtestmodel foo bar consolelog instance gt undefined everyone agreement could pull request", "d": "12/2012"}, {"body": "added proposed fix error function constructor options called handle error case", "d": "12/2012"}, {"body": "dperrymorrow good question happen sure even possible return constructor using consider function foo return undefined fooprototypeprotoproperty bar var isntance new foo instanceprotoproperty gt bar instantiation must fail throwing error use case might appropriate would prevent creating models partial attributes sure common use case imo changes validation handling rolled back especially validation constructor level removal", "d": "12/2012"}, {"body": "tgriesser thanks solution would fix immediate issue catching error however nt address inconsistency whole validation scheme outlined previous comment still entirely possible create invalid models required fields whose presence validated", "d": "12/2012"}, {"body": "agree fencliff dperrymorrow validation construction time breaks many common valid use cases often models constructed incomplete data data added model saved automatic enforced validation occur prior save change breaks apps imagine would break many others", "d": "12/2012"}, {"body": "think common use case minimal validation something like", "d": "12/2012"}, {"body": "tbranyen yes great example common pattern broken fleshing var usermodel backbonemodelextend validate function attrs attrsusername return username required var user new usermodel id gt id never set username missing userfetch gt fails userid undefined", "d": "12/2012"}, {"body": "yep thing tbranyen mentioned lot guess nt validations issue yet great point", "d": "12/2012"}, {"body": "relative", "d": "12/2012"}, {"body": "use pattern validate values exists actually want validate user input ensure least empty string passed validation occurs easy forms default simply run validation works", "d": "12/2012"}, {"body": "sure concrete issues solved validation changes seems stricter validation rules causing problems solving limit use cases general make difficult upgrade particular aware jashkenas position would ask reconsider changes aware reasoning behind original change nt great suggestion solve less obtrusively", "d": "12/2012"}, {"body": "fencliff think stemmed", "d": "12/2012"}, {"body": "well significant change meaning valid means state model never whereas previously referred state could persisted would guess people would assume expect previous meaning least new validate much less useful", "d": "12/2012"}, {"body": "agree andornaut consider following ruby rails pretend class person validates make sure name blank ruby person personnew name gt personsave gt false personisvalid gt false create object invalid andornaut said cant persist", "d": "12/2012"}, {"body": "think behavior accepted constructor used option good way handling issue could return previous implementation issue could solved easily although elegantly additional option would override used internally follows effect would lead api behavior compliant enable versatility usage admit ugly", "d": "12/2012"}, {"body": "fencliff curious model validation allow", "d": "12/2012"}, {"body": "wyuenho currently allow still using nt trigger validation constructor many models validation would fail triggered andornaut put well made assumption validation prevent persisting model creating", "d": "12/2012"}, {"body": "slightly different interpretation clientside validation completely different serverside validation serverside validation typically validates data whole disallows persistence data whole nt valid clientside validation different typically validate partial data user fills form form fills field correctly valid clientside user proceed next field invalid serverside data whole incomplete guess case actually serverside validation clientside right validation clientside typically caseywebdev find quite tedious longer forms days nt even use anymore serverside validation lazy", "d": "12/2012"}, {"body": "changed semantics nothing cause error tried call would something folks would generally approve", "d": "12/2012"}, {"body": "definitely use validations make optional default true use default constructor", "d": "12/2012"}, {"body": "changed validate semantics nothing set cause error tried call save would something folks would generally approve nt necessarily know better able use backbone validation often revert app changes make case", "d": "12/2012"}, {"body": "jashkenas yes definitely caseywebdev one issue used constructor imo validation run inside constructor several reasons enumerated would require workaround object construction", "d": "12/2012"}, {"body": "andornaut said use constructor", "d": "12/2012"}, {"body": "caseywebdev sounds good", "d": "12/2012"}, {"body": "jashkenas would much approve support caseywebdev presumably many others use case validation configurable default support backwards compatibility addition passing would great default would configurable prototype something like disable globally backbonemodelprototypevalidateset false disable specific model var foomodel backbonemodelextend validateset false would make consumer code much terse less kludgey application know models model never validated", "d": "12/2012"}, {"body": "jashkenas think calling save would definitely lot less confusing fits people typically think validation consistent wo nt case data valid everywhere except bootstrapping case data invalid time persist valid people seem use validation lot nt validate much preference", "d": "12/2012"}, {"body": "folks thread want really super helpful would great yall would take tgriesser patch try apps let us know works well", "d": "12/2012"}, {"body": "tested seems work covers problems discussed issue also tested previously closed regressions seems work also passing thanks", "d": "12/2012"}, {"body": "looks like good", "d": "12/2012"}, {"body": "seems like using patch true option save requires attrs object passed attrs object simply passed server yes works reason nt track changes sync send potential changes state may changed server side well ca nt assume backbone model knows sure state server times want something robust going account given limitation think current semantics nice complement want update complete representation want update specific subset attributes define cases sent never doubt", "d": "12/2012"}, {"body": "seems like using patch true option save requires attrs object passed attrs object simply passed server think happen patch true apply attrs model sync simply send attributes changed since last sync clear still sending server", "d": "12/2012"}, {"body": "nope see previous tickets nt use backbone model validation validating forms use ensure model never allowed enter invalid state validating forms often easiest use simple function knows partial validity instead adding properties model may need rolled back later really want use model add function instead using builtin", "d": "12/2012"}, {"body": "true", "d": "12/2012"}, {"body": "tag em close em please", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "yeah noted changelog lookup", "d": "12/2012"}, {"body": "hi cdata background discusses change reasons since sorts via way retrieve index model without traversing entire collection using currently", "d": "12/2012"}, {"body": "thanks response background optimization makes sense checking index added model minority use case work using facilitate insertion new item views list component recycles item elements scrolls index easily determined time handling add event disparity add remove case suggested change might unintended", "d": "12/2012"}, {"body": "also remove event", "d": "12/2012"}, {"body": "way figure index model without event", "d": "12/2012"}, {"body": "ah ha good point gone really dislike asymmetry two anyone brilliant ideas address", "d": "12/2012"}, {"body": "symmetry fwiw", "d": "12/2012"}, {"body": "nope whole idea object calling context context", "d": "12/2012"}, {"body": "adding optional context would definately speed things kind callbacks instead write manually trivial functions view delegate exact jquery method el think", "d": "12/2012"}, {"body": "maybe", "d": "12/2012"}, {"body": "using context means events easily removed cleaned view destroyed another context would mean would nt happen need manually clean events like", "d": "12/2012"}, {"body": "yeah ok makes sense way tbranyen solution perfect ty", "d": "12/2012"}, {"body": "believe bug pull", "d": "12/2012"}, {"body": "yep really bad regression introduced let cut new release soon possible", "d": "12/2012"}, {"body": "give irc channel mailing list try nt issue", "d": "12/2012"}, {"body": "removal object promote agnosticness backbone regarding server side communication using socketio example object nt make sense pass extraneous data need response body along collection data", "d": "12/2012"}, {"body": "make response carry metadata example bulk response look something like", "d": "12/2012"}, {"body": "nah caseywebdev beat", "d": "12/2012"}, {"body": "thinking issue well many public apis support pagination way sending headers eg github nt apis users backbone control changing server api question removing make old code overrides longer works answer people override also parsing headers", "d": "12/2012"}, {"body": "working solution stay tuned", "d": "12/2012"}, {"body": "understand desire stay transit agnostic use backbone localstorage frequently hand sending metadata headers seems somewhat common others trying deal change api nt control workaround less elegant fairly simple overriding collection method javascript sync function var xhr xhr backbonecollectionprototypesyncapply arguments pass xhr first reset event thisonce reset function thisonreset xhr return xhr onreset function xhr stash arbitrary headers thiscount xhrgetresponseheader count", "d": "12/2012"}, {"body": "hmmm removing seems create trouble worth see ways getting one override like use like unfortunately method works jquery moment zepto yet return like dmotz processes headers parsing ca nt conditionally parse response data according information provided headers left old code wo nt break need contortions like methods really ca nt think reason causing trouble used used convenience users need purist think go back", "d": "12/2012"}, {"body": "passed object default method add hash accessible way method keeps ajax specific code inside default function still allowing access object also opens door useful information passed overridden methods opened pr", "d": "12/2012"}, {"body": "sorry listento applies objects backboneevents mixed would work jquery object", "d": "12/2012"}, {"body": "right backboneevents methods work backboneevents dom events got jquery", "d": "12/2012"}, {"body": "thanks quick response", "d": "12/2012"}, {"body": "chrizel discussed mostly along seeing performance boost actually put place fix incorrect functionality idea change events triggered event loudly changed changing b silent trigger change said see application functionality would issues presents changes reading example sounds like select functionality actually set changing update selected state model also view attached model nt provisional change performance reasons mention custom rerender significant enough need need rerender whole view rather letting subviews render independently", "d": "12/2012"}, {"body": "particular example bug state change nt change particular use case probably number good ways model let know want explore", "d": "12/2012"}, {"body": "important use case also feel always valid state change makes valuable passing flag one work around might easier instead putting attribute preparation logic using flag overriding constructor work well", "d": "12/2012"}, {"body": "think change deliberate see commit change log also mentions", "d": "12/2012"}, {"body": "yeah saw", "d": "12/2012"}, {"body": "nt able force invalid state model still disable validation temporarily detaching validator like behavior less surprising", "d": "12/2012"}, {"body": "related pull", "d": "12/2012"}, {"body": "yep intentional change model invalid state still able invalid data nt make much sense least way backbone validation intended work easier use ensuring models never able enter invalid state want arbitrary function use different function", "d": "12/2012"}, {"body": "example nt run time would want instantiate new modelcollection child object model would instantiate child object parse true force call parse modelcollection", "d": "12/2012"}, {"body": "quite right description nature change incorrect", "d": "12/2012"}, {"body": "sorry nt get use new feature work nested child model fetch parent nt work parent json response models javascript var childmodel backbonemodelextend var parentmodel backbonemodelextend initialization fetch right place get help thanks", "d": "12/2012"}, {"body": "nope nt seem right starters prototypes work try mailing list irc room help", "d": "12/2012"}, {"body": "thought parse high level ie related prototypes feature would bubble children models fetching data parent model level thanks anyway hard useful work quick feedback", "d": "12/2012"}, {"body": "could use something like", "d": "12/2012"}, {"body": "wow event awesome documenting", "d": "12/2012"}, {"body": "definitely one product lot good discussion", "d": "12/2012"}, {"body": "thanks fell cracks", "d": "12/2012"}, {"body": "related", "d": "12/2012"}, {"body": "huh previously would already trigger events passedin model case worked nt", "d": "12/2012"}, {"body": "previously could call stand alone thing necessary second argument could stringified think issue", "d": "12/2012"}, {"body": "even events added", "d": "12/2012"}, {"body": "triggered instead consolidated brad fri dec jeremy ashkenas notifications githubcomwrote even sync error events added reply email directly view github", "d": "12/2012"}, {"body": "nervetattoo share us code specific details use case really something nt better handled", "d": "12/2012"}, {"body": "sorry unclear change migrating code indeed somewhat js var handleuserloggedout function response type xhr var def deferred resperror error render view user log back track failed requests reapply later return defreject resperror return defresolve resp backbonesync backbonesync backbonesync function method model options csrf token var formtoken configformtoken method read amp amp formtoken optionsdata optionsdata defaults optionsdata csrftoken formtoken need override sync method attaching stuff every request well piping success requests error requests different errors", "d": "12/2012"}, {"body": "playing around bit sure think wise us quite agnostic sync already nt work arbitrary objects least defined unusual data objects specific purposes adding csrf token global wrapper function recommend using jquery global ajax options instead overriding backbone sync", "d": "12/2012"}, {"body": "worse yet longer works", "d": "12/2012"}, {"body": "behavior expect jed", "d": "12/2012"}, {"body": "uh behavior written docs", "d": "12/2012"}, {"body": "think better keep option available thing quite silly make priority line something like follow need document verbosely let say true collection performs specified true performs nether option nt performs", "d": "12/2012"}, {"body": "sorry slipped cracks documentation commit take look patch let know writing nt clear enough", "d": "12/2012"}, {"body": "right give desired effect like see default behavior letting etc", "d": "12/2012"}, {"body": "nt get last comment mikeknoop calling view would remove events related event view context", "d": "12/2012"}, {"body": "omitted code since tracks exactly", "d": "12/2012"}, {"body": "totally get thanks", "d": "12/2012"}, {"body": "one listen unlisten", "d": "12/2012"}, {"body": "worth adding lm nevermind prefer", "d": "12/2012"}, {"body": "nt see many use cases anymore want views referencing model change something model changes removed view removed remains oneoff use cases addition takes care missing something backbone gradually going deprecate", "d": "12/2012"}, {"body": "look code actually calls calling storing reference event ways bound object context prefer consolidated syntax calling passed instead way around requires source modification function name callback context eventsapi name callback context amp amp callback return thisevents thisevents var list thisevents name thisevents name listpush callback callback context context ctx context isobject context amp amp contextlistento null contextlistentocall context name callback return listento function object events callback var listeners thislisteners thislisteners var id objectlistenerid objectlistenerid uniqueid l listeners id object objecton events callback return nice tediously move arguments around hundreds changes app fact already implementing get cleanup benefits free", "d": "12/2012"}, {"body": "seems like lot forms time familiar would tough see go one thing shorter opposed also something cool sides inversion available use forms sticking around yet another option would going back recommending using aliases", "d": "12/2012"}, {"body": "one thing found performancewise significantly worse layoutmanager wanted use event bubbling nt option added additional seconds run tests", "d": "12/2012"}, {"body": "tbranyen actually main reason proposing use implicit tremendously less expensive terms complexity performance", "d": "12/2012"}, {"body": "shorter best let drop put functionality rather prefer let sniff type second argument rather create new api happily using jquery api performs differently based argument type length", "d": "12/2012"}, {"body": "changing naming makes sense good enough asis braddunbar plenty room perf optimization", "d": "12/2012"}, {"body": "one thing found performancewise significantly worse wut faster", "d": "12/2012"}, {"body": "works anything extended dom events outside scope eg views bind window document currently events wo nt caught either could hash extended support event delegation elements eg", "d": "12/2012"}, {"body": "meleyal extend cases js var myview backboneviewextend delegateevents function window scroll thisonscroll myviewsuperdelegateeventsapply arguments undelegateevents function window scroll thisonscroll myviewsuperundelegateeventsapply arguments", "d": "12/2012"}, {"body": "caseywebdev thanks still propose extending events hash would nicer api", "d": "12/2012"}, {"body": "nice discussion nt see clear proposal going keep names designed avoid much confusion possible certainly deprecated going away basic primitive event binding inversionofcontrol versions may convenient specific cases always appropriate going inherently bit overhead using inverted versions track state ends would nice slim much possible", "d": "12/2012"}, {"body": "throw one comment love total elegance framework seems faint sense confusion many ways skin cat appropriate use form imagine people new backbone confronted similar sense confusion clear documentation appropriate use cases consensus would helpful also given sticking around reiterate would helpful names clearly suggest inversion control terms concrete proposal mine double symmetry much desirable opposed doubly asymmetric breaking changes one extra alias documentation update", "d": "12/2012"}, {"body": "whoops thanks", "d": "12/2012"}, {"body": "wow report issue", "d": "12/2012"}, {"body": "fixed last half hour try", "d": "12/2012"}, {"body": "fixed master min ago", "d": "12/2012"}, {"body": "better thanks", "d": "12/2012"}, {"body": "well nt know formsite works guess figured fixed problem got jquery working code always short adding noconflict helped", "d": "12/2012"}, {"body": "also whereas sure pass models methods response well wondering rename primary use", "d": "12/2012"}, {"body": "got failing test case include", "d": "12/2012"}, {"body": "hi evadnoob version underscore using change requires use", "d": "12/2012"}, {"body": "try upgrading", "d": "12/2012"}, {"body": "upgraded underscorejs problem uncaught typeerror read property user undefined getnested backbonemodelextendset backbonemodel child", "d": "12/2012"}, {"body": "ok odd may backbone deep model use thisescapedattributes subsequent call get escapedvalue never uses escapedvalue variable commented backbone deep model rolling", "d": "12/2012"}, {"body": "ah yes uses changed moving forward glad got worked", "d": "12/2012"}, {"body": "yes model defaults nt value set value would work expected nt set", "d": "12/2012"}, {"body": "understand working intended based tests however expected opposite defaults means underscore expected mean thing makes defaults less useful case push defaults back application level thanks quick response", "d": "12/2012"}, {"body": "agree tbranyen disconcerting work", "d": "12/2012"}, {"body": "braddunbar complaint naming method underscore think semantics need changed", "d": "12/2012"}, {"body": "would also problem assume created initial model like morganick original example instead passing constructor used behavior exist well", "d": "12/2012"}, {"body": "jashkenas like name wondering semantics different seems discussed tangentially documentcloudunderscore documentcloudunderscore", "d": "12/2012"}, {"body": "confusing part defaults whether null value according undefined value truly available object null considered personally json consuming always gives keys sets value treat however understand would make impossible initialize model attribute value default value", "d": "12/2012"}, {"body": "think probably change worth making mostly use case described make defaults little useful anyone really wants set nulls set em", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "thanks guys high fives around", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "going rethink parse bit think muddled moment really apply remote endpoint clientside data model case", "d": "12/2012"}, {"body": "like change patch put patch true nt mind asking", "d": "12/2012"}, {"body": "working api supports partial updates via concept already using direct xhr calls would probably easy add support api framework perhaps importantly aws elbs load balancers nt allow also rules using heroku right rails also started partial updates via eventually moving kept backwards compatibility lot apis support partial update via far fewer actually work use even technically correct http method name", "d": "12/2012"}, {"body": "looking oneliner change plus optionally documentation", "d": "12/2012"}, {"body": "aws supporting might good reason avoid patch altogether partial put anyone else opinion", "d": "12/2012"}, {"body": "although maybe included backbone aws forced finally get act together support seriousness nt think worth dropping supported particular vendor maybe adding line mentioning docs changes also philfreo believe achieve functionality looking overriding options", "d": "12/2012"}, {"body": "nice workaround", "d": "12/2012"}, {"body": "works sucks every case would handle everywhere", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "ok cool thanks", "d": "12/2012"}, {"body": "bug copying since missing return statement adding correct code case anyone else copypasting", "d": "12/2012"}, {"body": "yes feel free use master meantime", "d": "12/2012"}, {"body": "something strange going code base sure help debug rest assured remove model collection want pursue please include reproducible test case jsfiddle folks look", "d": "12/2012"}, {"body": "backbone loaded cases root global object nt called window like server side see previous tickets better way load different js environments love hear get pull request also environment loading code way nt evaluate reference global object probably break variety things", "d": "12/2012"}, {"body": "thanks providing different method detect server vs browser would problem however ensuring function return returns global object problem kanso module loading scheme mimics node request facility apparently nt modeling behavior ask fix", "d": "12/2012"}, {"body": "could nt work", "d": "12/2012"}, {"body": "good point thing use master", "d": "12/2012"}, {"body": "um", "d": "12/2012"}, {"body": "nt realize wound shipped master", "d": "12/2012"}, {"body": "master worked anyone else code must", "d": "12/2012"}, {"body": "would code define jquery", "d": "12/2012"}, {"body": "blowing require gets code work kanso project fix tue dec pm casey foster notifications githubcomwrote would code define jquery backbone windowjquery app starts reply email directly view github", "d": "12/2012"}, {"body": "ok nevermind think see removed chasing couple issues comments way speed item still stands", "d": "12/2012"}, {"body": "hi wyuenho thanks bringing sort called automatically place immediately adds n log n running time number operations called one place comparator defined remove comparator automatically calling sort methods next major version put optionsindex back adds constant time add nt think unreasonable expect users call sort comparator future version addition removal could already optional want control nt use right", "d": "12/2012"}, {"body": "operations indirectly call also calling comparator defined right solution detach comparator attach back collection call sort afterwards little awkward mean say really expect new model added end instead resorted middle collection calling cause surprising behavior careful", "d": "12/2012"}, {"body": "hmm seem odd would trigger sort especially given send pull request fix", "d": "12/2012"}, {"body": "ok addresses issue places sorting", "d": "12/2012"}, {"body": "thx quick fix however nt understand closed guess confused user expect called mean expect constant time operation inserted well known place instead call please please consider removing comparator automatic sorting next major release please api like array anyway", "d": "12/2012"}, {"body": "understand point nt think going anywhere handy fairly easy opt abstractions cost try minimize", "d": "12/2012"}, {"body": "wyuenho yes nt use comparator unless actually want hardly ever use point collection maintains sorted order times naturally expensive thing much like validate want always apply cost continual validation models damned", "d": "12/2012"}, {"body": "wyuenho pass option collection methods use sorting done iterator cake eat", "d": "12/2012"}, {"body": "let discuss pr", "d": "12/2012"}, {"body": "noooooo jquery vs patch mention extra serverside dependency", "d": "12/2012"}, {"body": "yeah give big using jquery events would really limit ability use bb modelscollections microframework environments outside node browser plus hard dependency nt control unlike underscore unless fallback internal backbone events even caseywebdev improvements look pretty solid", "d": "12/2012"}, {"body": "speed test right looking thanks casey early days backbone jquery events nt support arbitrary objects since known performance vaguely thought would worth looking thanks jsperf", "d": "12/2012"}, {"body": "merely sake accuracy believe jquery supported events arbitrary objects backbone entire lifetime nt well known", "d": "12/2012"}, {"body": "ah ha thanks correction alex", "d": "12/2012"}, {"body": "jashkenas jquery faster object event emitters would make attractive use cc ajpiano others reported problems jquery object event emitter perf jquery ui maybe", "d": "12/2012"}, {"body": "yep able rapidly trigger events many callbacks rest system update single perfimportant bit backbone view creationdelegation much stuff ajax urls performance nt consideration said think good arguments depending jquery keep backbone events working folks using models server side faster implementation would certainly attractive", "d": "12/2012"}, {"body": "nice wookiehangover another change think worth taking note optional routes syntax", "d": "12/2012"}, {"body": "reset events include previous list models added convenience unless triggered sort reason believe trigger sort instead reset different things", "d": "12/2012"}, {"body": "ooh saves ton work many thanks getting started", "d": "12/2012"}, {"body": "another change collection reset call collection parse function well model", "d": "12/2012"}, {"body": "wookiehangover also might want clarify remove ender support know tests dropped still assigned", "d": "12/2012"}, {"body": "added backboneview dispose assuming details still discussion per comments reword changelog warning added backboneview dispose unbind view model collection automatically called backboneview remove", "d": "12/2012"}, {"body": "philfreo imagined new features would link documentation rather trying explain detail tgriesser good point wonder worth mentioning also added note gsamokovarov ahh good catch jashkenas problem editing original post relevant updates arise please feel free make edits see fit", "d": "12/2012"}, {"body": "philfreo imagined new features would link documentation rather trying explain detail yes adding new method hardly accurate current state way works totally changed backwards incompatible imo unwise way", "d": "12/2012"}, {"body": "philfreo point longer form discussion appropriate documentation remove dispose fwiw added note remove behavior changing eventually would also link relevant documentation", "d": "12/2012"}, {"body": "added note remove behavior changing thanks definitely necessary", "d": "12/2012"}, {"body": "also like know exactly changed regarding querystrings routes", "d": "12/2012"}, {"body": "wookiehangover object supports global events", "d": "12/2012"}, {"body": "paulmillr added", "d": "12/2012"}, {"body": "core confettiball", "d": "12/2012"}, {"body": "caseywebdev tada", "d": "12/2012"}, {"body": "added new event", "d": "12/2012"}, {"body": "nice work wookiehangover think need upgrade guide gt goes detail changelog", "d": "12/2012"}, {"body": "yes put little upgrading section top docs", "d": "12/2012"}, {"body": "perfect", "d": "12/2012"}, {"body": "addyosmani actually started work something approaching last night list broken categories new features enhancements minor changes potentially breaking changes last category good diving rod upgrade guide", "d": "12/2012"}, {"body": "upgrading guide addyosmani proposed wookiehangover jashkenas", "d": "12/2012"}, {"body": "names pending got nice speed boost", "d": "12/2012"}, {"body": "needs note", "d": "12/2012"}, {"body": "great work wookiehangover", "d": "12/2012"}, {"body": "needs note removed handle lookups cid also", "d": "12/2012"}, {"body": "backbonemodel parse run initialization believe true pass options", "d": "12/2012"}, {"body": "attributes replaced default values specified constructor", "d": "12/2012"}, {"body": "wookiehangover confident list reasonably complete want read commits double check", "d": "12/2012"}, {"body": "happy able close ticket", "d": "12/2012"}, {"body": "fireworks woo", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "jashkenas looks like got around yes feel like reasonably complete list definitely helped sitting issue tracker couple days thanks philfreo caseywebdev paulmillr et al helping make accurate", "d": "12/2012"}, {"body": "properties designed setters getters would hard keep sync vote want id classname could simply", "d": "12/2012"}, {"body": "getting updated moreover docs say also create cached el reference move view delegated events old element new one clearly lot attach view element ca nt also update also understand problem element multiple classes right add classes view case take second argument specifying class name attach", "d": "12/2012"}, {"body": "getting updated nt div default clearly lot attach view element thing besides update cached el event delegation element related properties accessed plus two characters type", "d": "12/2012"}, {"body": "ok missed big point even getting updated think ok access directly", "d": "12/2012"}, {"body": "want comparator function nt called model context called collection context passed model first argument however want", "d": "12/2012"}, {"body": "works well thank advise", "d": "12/2012"}, {"body": "actually pretty sweet sugar ask", "d": "12/2012"}, {"body": "anything backbone multiple ways go looking believe simplest approach would create function directly calls taking options param pass errorsuccess callbacks data needed custom calls would application specific nt think anything else would added core might want check backbonesync docs take look sync handled see calloverride purposes", "d": "12/2012"}, {"body": "yep makes lot sense best way define methods models appropriate actions different folks different rest endpoints different ways communicating nt think much common ground provide beyond plus", "d": "12/2012"}, {"body": "thanks response guys", "d": "12/2012"}, {"body": "check could js var collection new mycollection store new models collectionnewest add fired new model collectionon add function model thisnewestpush model update would called new models added collectionon update function updatedomherewiththesemodels thisnewest thisnewest get models collectionfetch remove false course simplicity pr merged wink task would involved current", "d": "12/2012"}, {"body": "aye would handled pr could also handled current master taking action success callback called hoping something nt require binding add event ie return response success callback trigger new event change returns new models think definitely weakness collectionfetch method called event backbone provides act newly added models provide new models", "d": "12/2012"}, {"body": "hswolff updated pr pass models update trigger would let manually want ed models listening event", "d": "12/2012"}, {"body": "patch merged handle use case still get granular events use lazily render render wish", "d": "12/2012"}, {"body": "thanks update jashkenas however issue nt resolved main issue bind individual events event bind completed best point use callback", "d": "12/2012"}, {"body": "still work coffeescript pending collectionon add model gt pendingpush model collectionfetch update true success gt render pending", "d": "12/2012"}, {"body": "aye currently however think adding event calling would good include like event exists support updating collection bulk event exist similar reason reason type behavior best left callback opposed triggering event", "d": "12/2012"}, {"body": "event would nt know tell case clear collection composed new set models go ahead rerender case already received series granular events app responded would nt clear upon getting event without information added removed changed said want one feel free", "d": "12/2012"}, {"body": "bugging revised example without event js var collection new mycollection store new models collectionnewest add fired new model collectionon add function model thisnewestpush model updatedom var updatedom debounce function contains recently added models update dom collectionnewest get models collectionfetch remove false update true", "d": "12/2012"}, {"body": "aye many ways implement behavior thanks alternative attempt caseywebdev really think adding event calling common want batch work collections definitely way jashkenas outlined included backbonejs core something think would benefit wide range users passed event would collection array new models added array add behavior simple modifying would also save performance drag jashkenas method would add food thought", "d": "12/2012"}, {"body": "known issue fixed branch", "d": "12/2012"}, {"body": "luck stack overflow backbone irc channel github issues development backbonejs troubleshooting specific applications", "d": "12/2012"}, {"body": "thanks", "d": "12/2012"}, {"body": "server response determine want send back nt ever want sync attributes clientside never return anything want subset attributes return subset attributes", "d": "12/2012"}, {"body": "get better help debugging irc channel mailing list", "d": "12/2012"}, {"body": "neat idea afraid concept fetched yet nt clear one many backbone apps talking singleuser app sure possible assume collection fetched guaranteed sync server soon one user potentially able collaborate system longer question fetched stale changed server since fetched given differing semantics best person determine whether collection sync backbone recommend setting appropriate flag collection", "d": "12/2012"}, {"body": "surely exact issues models still exists technically data potentially sync still make effort track relative state things like etc seems odd models collections thanks feedback though", "d": "12/2012"}, {"body": "nope different concept means model exists client server something possible know note model fields", "d": "12/2012"}, {"body": "maybe nt explained well described almost exactly want happy keep extending objects anyway nice contribute", "d": "12/2012"}, {"body": "lennym primary internal use determine url use ie post put collections id thus need distinction", "d": "12/2012"}, {"body": "braddunbar maybe nt", "d": "12/2012"}, {"body": "lennym nice contribute many things nt quite fit core backbone great folks package simple plugins want add models collections would great", "d": "12/2012"}, {"body": "hi kitanata one discussed quite times example please give comment still disagree thanks", "d": "12/2012"}, {"body": "see problems functionality core since jquery selector nt live caching layer subject invalidation dom structure within view changes drastically would open door issues confusion vain selectors go rerendered selector caching performance real point please correct bad assumption keep mind jquery keeps internal cache last accessed selectors within sizzle imagine folks real benefits lean towards trivial side overallperformance scale would benefit apps frequently access unoptimized slow selectors leads conclusion great functionality plugin extend backbone net benefits end negligible apps less typing really real benefit letting reference cached selectors cache eg", "d": "12/2012"}, {"body": "agree wookiehangover let leave plugins extensions", "d": "12/2012"}, {"body": "agree reasoning see clean another issue views may attached existing dom elements ui hash would need filled initialize whereas cases would need filled render appreciate clean backbone important keep way aware jquery caching however counter point although people could create hash whenever appropriate render initialize reality people new backbone end retyping selectors time want reference element sure agree bad practice work backbone might change something like code provided however elegance structure declaring dom elements property view lacking moreover still repeating selectors due events hash javascript events click input namevalue valuefldonclick render function thisui valuefld input namevalue another approach record solves redundancy issue perhaps little cleaner first approach selectors property could map element names jquery selectors names could used place selectors events hash separate property example selectors function evaluates selectors fly since jquery apparently caches us consideration dom changes return appropriate jquery object javascript selectors valuefld input namevalue events click valuefld valuefldonclick render function selectors valuefld focus shorten use els instead selectors seems like common access dom elements inside view keystroke significant principle advantages see less typing eliminate redundancy issue jquery selectors added structure help newbies avoid bad practices", "d": "12/2012"}, {"body": "conversation interesting leads believe developers making small enough views many cases find writing code like javascript events click button doaction doaction function ev var formdata form serialize little selector lookup since everything scoped view get away easily looking button totally see situational though definitely cases repeated actions single jquery object like jquery past taught cache locally javascript doaction function ev var form form formon submit function formattr action something formsubmit anyways mostly commenting saw tutorial recently marionette found rather odd lookups done declaratively way", "d": "12/2012"}, {"body": "interesting find selector lookup constantly also edited original comment oversights errors selectors evaluated fly avoid problem described wookiehangover selectors would clearly need function curious braddunbar additional thoughts cool see ideas evaluated big thanks helping awesome library", "d": "12/2012"}, {"body": "considering plugin route drop support ie implement getters way could keep declarative binding object instead function lookupscache transparently", "d": "12/2012"}, {"body": "main concern trading little typing added complexity wookiehangover says vs see savings typing already fairly short lose bit flexibility feel though hack around often agree tbranyen point many selectors usually though always sign view split", "d": "12/2012"}, {"body": "eliminating redundancy events hash added structure also significant benefits would say definitely hear added complexity concern though appreciate effort goes keep backbone light weight thanks also future reference appears question weather jquery actually caches selectors", "d": "12/2012"}, {"body": "dgbeck looks like question sizzle nt introduced core lot improvements since edit looks like sizzle cache length might recent jquery", "d": "12/2012"}, {"body": "ah cool although looks like sizzle caches compiled selector functions elements makes sense considering dom manipulation could invalidate cache elements taking step back though sure much caching elements impacts real world performance always using select elements image pretty quick go search view element food thought feature implemented would easy enough write plugin adds view option cache actual dom elements instead always evaluating selectors fly", "d": "12/2012"}, {"body": "greengit using jquery used pretty easily minimal pubsub without reliance dom would nice able something like focus underscore seems mostly functional programming helpers sure event aggregator fits well", "d": "12/2012"}, {"body": "tgriesser agree pubsub jquery also think nondom utilities available one library underscore fits bill well environments like node rhino one would generally use jquery friends think underscore providing event emitter would nice", "d": "12/2012"}, {"body": "greengit ca nt speak rhino node already nice much full featured event emitter looking minimal stand alone pubsub enough solutions many might nice nt really fit well functional nature library event mechanism would oo avoided underscore outside oop wrapper", "d": "12/2012"}, {"body": "tgriesser thanks nt know node programmer would still want underscore pubsub ability see utility library functional programming toolbox javascript example underscore methods like general purpose methods ratelimit execution function nt think anything functional programming think pubsub general useful part utility library like underscore feel nt belong backbone", "d": "12/2012"}, {"body": "greengit thanks opening issue understand sentiment entirely going close reasons proposed functionality underscore opened issuepull request backbone would nt able take advantage moving events object upstream actually exists anyway echoing tgriesser comment lots options event systems javascript client server furthermore really pining backbone exact events functionality reasonably well isolated easy enough pull use independently relavent lines look tgriesser using jquery events absence backboneevents done several projects even sample implementation backboneesque model events laying around also happened gist node eventemitter ported client side throw looking decent events implementations", "d": "12/2012"}, {"body": "agree first point opened", "d": "12/2012"}, {"body": "let tag em close issues folks", "d": "12/2012"}, {"body": "get help try irc room mailing list instead opening bug ticket", "d": "12/2012"}, {"body": "hi coodoo thanks patch think better served using plain array separate collection nt think introduce second set models", "d": "12/2012"}, {"body": "website mentions license check last sentence second paragraph", "d": "12/2012"}, {"body": "yes read nt include website", "d": "12/2012"}, {"body": "ah get really asked sorry nt know site autogenerated code documentation contained code right correct think includes site", "d": "12/2012"}, {"body": "site autogenerated still licensed mit feel free whatever like looking forward seeing translation", "d": "12/2012"}, {"body": "status update tickets left one bigish thing like take another deep think current implementation eye toward simplification semantics possible got start branch folks want take stab welcome", "d": "12/2012"}, {"body": "zero tickets briefly back still things including polishing hopefully simplifying setchange closing ticket favor running changelog", "d": "12/2012"}, {"body": "genexp", "d": "12/2012"}, {"body": "provide failing test case demonstrates undesirable behavior", "d": "12/2012"}, {"body": "afraid nt help even equality considered distinct different criteria still communicate change feel free work particular semantics want nested models different equality send pull request moment request nebulous", "d": "12/2012"}, {"body": "changes two lines code needed added backbonemodel backbonecollection", "d": "12/2012"}, {"body": "sure really follow ticket asking seems like mostly request add additional empty methods initialization step add code various subclasses without ever call response would call said something want add base model pretty easy basemodel backbonemodelextend configure function constructor function thisconfigure backbonemodelapply arguments", "d": "12/2012"}, {"body": "afraid nt minimal enough test case us work probably explains nt much luck getting response let know still seeing problem using latest master version backbone please post reproducible minimal test case ticket", "d": "12/2012"}, {"body": "working", "d": "12/2012"}, {"body": "think leave uppercasing take look methods todosjs file reason todos collection items added changed kick things loading preexisting todos might saved localstorage initialize function", "d": "12/2012"}, {"body": "record backbone universally discarding query params routes", "d": "12/2012"}, {"body": "current master router patch leaves things encoded much possible fix things let us know", "d": "12/2012"}, {"body": "jashkenas fixed yet see test", "d": "12/2012"}, {"body": "braddunbar time take peek let know", "d": "12/2012"}, {"body": "bug test case routes different urls twice action see update version", "d": "12/2012"}, {"body": "yahasana bug comments line triggered twice error param use nonascii path click link ok", "d": "12/2012"}, {"body": "yup encoded browser", "d": "12/2012"}, {"body": "yahasana yes bug decoded", "d": "12/2012"}, {"body": "bug decode encoded hash done browser raw one router callback trigger twice hash ascii", "d": "12/2012"}, {"body": "yahasana updated test case using older backbone", "d": "12/2012"}, {"body": "philfreo oops update old one renew master clear bug", "d": "12/2012"}, {"body": "one inconsistent thing events different route set object see", "d": "12/2012"}, {"body": "jashkenas looked one several times able duplicate behavior", "d": "12/2012"}, {"body": "closing braddunbar good authority prs adding valid test cases test suite still warmly welcome", "d": "12/2012"}, {"body": "please check jsfiddle firefox definitly bug", "d": "12/2012"}, {"body": "log firefox", "d": "12/2012"}, {"body": "new clear test case work chrome ie opera work ff lt seem firefox encode url characters default", "d": "12/2012"}, {"body": "digging one time appears firefox bugs surrounding given url chrome js locationhref locationhash \u4e2d\u6587 firefox js locationhref locationhash \u4e2d\u6587 given results would appear use instead currently however added fix firefox bug hash always decoded going digging regarding correct behavior least bug clear chuangbo thanks patience help getting resolved", "d": "12/2012"}, {"body": "seems recently location always encoded router really sure correct behavior required add every parameter router methods good least clarify exactly", "d": "12/2012"}, {"body": "reason fragment always handled encoded router ca nt meaningfully compared decoded take instance following router given encoded fragment arguments would however decode fragment arguments would incorrectly", "d": "12/2012"}, {"body": "pardon ignorance case nt leave encoded split per parameter decode parameter passing route methods end", "d": "12/2012"}, {"body": "philfreo like idea reason already implemented splats include multiple uri components perhaps could treat splats differently though", "d": "12/2012"}, {"body": "would assume example get since seems like people using splats want ones manually split upon seems doable splats appear end route", "d": "12/2012"}, {"body": "would take extra bookkeeping probably doable seems would nice get decoded params since usually want anyway work patch", "d": "12/2012"}, {"body": "posterity bug", "d": "12/2012"}, {"body": "entered bug", "d": "12/2012"}, {"body": "response locationhref bug boris zbarsky points fact bug still certain correct reading spec certain boris expertise since firefox escaping unicode characters special characters safely decode fix chuangbo many thanks persistence getting fixed", "d": "12/2012"}, {"body": "braddunbar still planning making pr prevents routes cases described nt seem", "d": "12/2012"}, {"body": "philfreo definitely already working locally need polish bit pushing", "d": "12/2012"}, {"body": "yes current comparator switcheroo explicitly convenience fallback folks thing would done deprecate old style entirely said want oneargument optin check allows arity use new style may even remove future folks trying use new style run problems", "d": "12/2012"}, {"body": "jsperf looks like nt decrease speed think likely fixed", "d": "12/2012"}, {"body": "nt anything far tell jsperf reassuring thanks casey", "d": "12/2012"}, {"body": "thought number times fix seems like simplest way address issue without changing api follows specification response entity body", "d": "12/2012"}, {"body": "hrm second thought probably respecting jquery behavior sure assuming error response code response content type longer replies server trying give json got error instead something along lines jquery case", "d": "12/2012"}, {"body": "somehow event wondering bug feature since see change log mentions", "d": "12/2012"}, {"body": "legnaleurc added change log", "d": "12/2012"}, {"body": "jashkenas new take see comment regarding managed skim delta far looks like still validation attributes every without possibility skipping validation eg incrementally set model attrs saving change log validation occurs even silent changes change means method removed", "d": "12/2012"}, {"body": "jacobk actually topic discussion recently looks like validation actually going different find details see works cases using validate", "d": "12/2012"}, {"body": "tgriesser awesome surprised nt find recent issue topic", "d": "12/2012"}, {"body": "causing big problem mailchimp email campaign drives traffic site mailchimp adds google analytics query string site aid ga tracking referrals query string adds end link site utmsourcepopsweepsnewmembers amp amp utmmediumemail trying drive traffic homepage site firing index route running bb", "d": "12/2012"}, {"body": "duro tried changes last saw fixed", "d": "12/2012"}, {"body": "caseywebdev api compatible going troubleshoot bunch issues edit far good", "d": "12/2012"}, {"body": "api largely new features test suite would try running", "d": "12/2012"}, {"body": "duro glad hear upgrade going well attempt answer changed master question change log gt", "d": "12/2012"}, {"body": "braddunbar idea next version backbone released would great feature well features fixes done since came around months ago", "d": "12/2012"}, {"body": "mindscratch soon see", "d": "12/2012"}, {"body": "yep soon", "d": "12/2012"}, {"body": "kind problem javascript var winnermodel backbonemodelextend defaults id date lastname firstname city var winnerscollection backbonecollectionextend model winnermodel var collection new winnerscollection responsefind getpartieswinnersresult function item var data item find data data find winner function item iterate passed collection create view item collectioneach function model consolelog model collection length replace lines works normally collectionlength etc nt know var collection new winnerscollection var collection new backbonecollection collectionadd collectionpush missing something thanks", "d": "12/2012"}, {"body": "found solution id rename id wathever works think conflict beacause backbone using id property", "d": "12/2012"}, {"body": "still love worried ready primetime yet aware web app frameworks support jsonpatch spec yet stilltk rails implementation sounds like basic partialput patch deleting keys etc want push forward let start pull request someone thinks good proposal simple interoperable version patch might work probably research project django rails play lift etc might able handle code thing", "d": "12/2012"}, {"body": "agreed lot work going json patch spec maintaining general purpose javascript implementation applying patches already written utility creating valid patch document given two objects question backbone patch gets applied restart conversation changes patch document syntax slows dec pm jeremy ashkenas notifications githubcom wrote still love worried ready primetime yet aware web app frameworks support jsonpatch spec yet stilltk rails implementation sounds like basic partialput patch deleting keys etc want push forward let start pull request someone thinks good proposal simple interoperable version patch might work probably research project various web frameworks code thing reply email directly view github", "d": "12/2012"}, {"body": "actually gone pushed little patch supports simple use case would send whatever pass server patch request instead complete model representation", "d": "12/2012"}, {"body": "nt know complete patch support lot web frameworks api working uses partial updates via put patch welcome", "d": "12/2012"}, {"body": "simple case current use case patch", "d": "12/2012"}, {"body": "jashkenas certainly start likely good enough people customize patch format overridden ie diff model attributes passed", "d": "12/2012"}, {"body": "missing something trying test patch overriding backbonesync use case issue chrome dev tools second xhr request nt seem attributes sent request body would expect request body", "d": "12/2012"}, {"body": "philfreo yeah following guess might need check type rather method allow trying work", "d": "12/2012"}, {"body": "philfreo fix", "d": "12/2012"}, {"body": "actually trailing slashes nt dev problem user problem users type trailing slashes damn time miss yes technically two separate resources users nt care practice never kind flag router would good like accepttrailingslashes true would nice make backbone seem lot sane route handling", "d": "12/2012"}, {"body": "abritinthebay use provide optional trailing slashes hope works", "d": "12/2012"}, {"body": "strip trailing concurrent slashes redirect retrigger nt want spiders caching people sharing urls slashes end p surprised github nt redirect google said treats separate resources", "d": "12/2012"}, {"body": "going try solve problem submit pull request tests central issue need return like object request nt made yet best approximate return promise includes abort method easiest thing would create backbone deferred patch abort method return unfortunately zepto nt support deferreds quite yet although looks like coming best proceed use backbone deferred try create small version promise within backbone please let know get pull request asap thanks", "d": "12/2012"}, {"body": "see response glad look pull request attempts address different use cases cohesive way moment think something code best equipped handle", "d": "12/2012"}, {"title": "override default application template", "body": "since sha overriding default application template via applicationview work example expected using template name example breaking using template name overridden applicationview working last night pull morning things stopped reason need functionality due way use commonjs build app templates named", "num": "1638", "d": "12/2012"}, {"title": "nonsingleton controller discussion", "body": "want open discussion around could possibly implemented api would look like especially light new injection container router canonical use case conjunction helper requires objectcontroller item stands think two ways implement use custom subclass wraps item controller subclass intercepts array change events handle bookkeeping controllers method currently use apps use injection container nonsingleton controllers simply register controller container nonsingleton lookup normal open problem cleanup controllers option mind consider following handlebars snippet assumes existence helper see also think would good eventually give render semantics snippet helpful discussion controller registered nonsingleton container snippet hypothetically function expected fact added benefit things like could entirely agnostic whether singleton nonsingleton controller backing problem nonsingleton controllers never destroyed therefore order option viable needs mechanism track controllers clean appropriate three possibilities immediately come mind bookkeep view layer bookkeep route level bookkeep content layer eg permodel basis view layer poor option due fact controller would destroyed rerender route level could plausible seems unnecessarily tied routing system perhaps bookkeeping permodel basis best option render semantics could nonsingleton controllers listener created destroys controller time model destroyed emberdata sort storecache clearing mechanism see making lot sense also ways similar using thoughts", "num": "1637", "d": "12/2012"}, {"title": "handlebars linkto helper propagate click event", "body": "linkviewclick returns false calling emroutertransitionto preventing click event bubbling dom problem using linkfor within popup dropdown menus come bootstrap menu dismissed click event propagate returning true linkviewclick fixes sure negative sideeffects", "num": "1636", "d": "12/2012"}, {"title": "context associated controller early", "body": "currently connection controller content occurs nt controller matches template get generic controller routes model content later implementing custom specify custom controller use content never set model", "num": "1635", "d": "12/2012"}, {"title": "uncaught error object path controller could found destroyed", "body": "router api merged get following error try spin simple ember app uncaught error object path controller could found destroyed setpath set emberobservableembermixincreateset codecampsessionsrouteemberrouteextendsetupcontrollers superwrapper emberrouteemberobjectextendsetup eachhandler setupcontexts collectobjects proceed collectobjects routerhandleurl emberrouteremberobjectextendstartrouting emberapplicationembernamespaceextendstartrouting emberapplicationembernamespaceextenddidbecomeready runloopprev emberhandleerrors invoke invokeoncetimer runloopprev emberhandleerrors invoke iter runloopflush runloopend tryable embertryfinally emberrunend autorun drop debugger see new router appear know controller setupcontrollers line seems good starting point remove setupcontrollers route error described goes away ember modelviewcontrollerroute question codecampsession dsmodelextend name dsattr string codecampsessionsview emberviewextend templatename sessions codecampsessionscontroller emberarraycontrollerextend content codecamproutermap function match match sessions codecampsessionsroute emberrouteextend setupcontrollers function thisset controllercontent basic handlebars template session controller sessionname", "num": "1630", "d": "12/2012"}, {"title": "missing docs concatenated properties emberobject", "body": "documentation properties emberview class appears following text reference concatenated properties emberobject docs would love contribute writing english good", "num": "1627", "d": "12/2012"}, {"title": "objectconstructor returns unkown mixin causing failure emberdata", "body": "using ember emberdata master emberdata stops working since url creation uses construtor create url latest ember return type returns unknown mixin", "num": "1625", "d": "12/2012"}, {"title": "difficulty adding new templating engines", "body": "know likely current roadmap interest difficult would integrate different templating engines ember along autoupdating twoway bindings work big siliconvalley company early stages adopting dustjs frontend templating absolutely love push ember used internally experience using side projects extremely positive would dust support get nowhere trying persuade company use different templating engine like handlebars even happy work love get thoughts viable would tightly coupled ember handlebars present thanks input", "num": "1624", "d": "12/2012"}, {"title": "calling viewrendertobuffer view already destroyed", "body": "function dommanager replacing view javascript var dommanager messed replace function view var morph viewmorph get called even object view already destroyed since condition comes late reason order condition put rendertobuffer call use emberviews minor modifications get notified error", "num": "1622", "d": "12/2012"}, {"title": "emberobjectcreate longer supports defining methods call super naive", "body": "merry christmas new ember user started getting message emberobjectcreate longer supports defining methods call super using coffeescript coffee commitdrawcommands documentview output js commitdrawcommands function documentview var draws ranfirstredo undostack thisdrawslength return undostack documentviewget undostack null return draws map thisdraws identity ranfirstredo false undostackpush new function super undocommand return thisdraws used emberobjectcreate see coffeescript uses term super implement extension mechanism ember sees token super throws error check naive better solution required", "num": "1621", "d": "12/2012"}, {"title": "removing already removed observer", "body": "sure bug expected behavior older version ember fine call twice watching counter decremented regardless observer presence jsfiddle illustration", "num": "1620", "d": "12/2012"}, {"title": "test fails latest build cst dec master", "body": "cst dec checked latest version master commit built code test failed following message running package emberrouting f module failed routing basic mapping test failed able map path string assertion failed died test file undefined object evaluating emberroutehandlerextend time total passed failed comment test rest run fine", "num": "1619", "d": "12/2012"}, {"title": "using restadapter expressjs server returning error invalid json", "body": "sure problem express end reason default restadapters function causes express return error modifying default content type fixes issue", "num": "1615", "d": "12/2012"}, {"title": "using arrowmodifier keys textfield bound number property frustrating", "body": "embertextfield always updates values keyup bound ember data model object type number cause value get updated response arrowshiftcontroletc keys desired thus resetting value moving cursor end makes extremely painful edit numeric values fix would change interpretkeyevents call elementvaluedidchange keys actually would modify value arrows modifier keys", "num": "1613", "d": "12/2012"}, {"title": "poor error message emberget undefined path", "body": "", "num": "1612", "d": "12/2012"}, {"title": "super param work superclass", "body": "", "num": "1611", "d": "12/2012"}, {"title": "router able prevent transitions triggered url changes", "body": "ember router presently allows specify valid transitions states via router actions method far know developer totally mercy certain class userinitiated transition requests nt really adhere constraints set router actions course referring url changes explicitly keyboard less via backwards forwards buttons dug around source latestlatest router refactoring around last months nt seem elegant way cancel invalid transition request via url change backforward button eg user finalized onetime signup form nt really want navigating back form app could considered invalid state wondering smart way reign urlbased transitions would decouple urlresponsiveness application state managerconnectoutlets side things particular could give router whatever called responsibility translate url changes actions states decide respond via form basically could still dynamic segments defined similar way old router way new unreleased router way translate requests another state manager connectoutlets sort stuff eg user clicks back button url changes url interpreter translates action calls statemanagersend tofinalizemembership states would actually respond transition rest could safely ignore url interpreter could revert url would also allow things like blocking navigation user filling form etc etc sentence router presently seems little tightly coupled url changes makes hard developers keep apps valid state think ideassuggestions go forth code alternative", "num": "1606", "d": "12/2012"}, {"title": "proxied properties ignored using context", "body": "sure good way write code appbook dsmodelextend title dsattr string appproxy dsobjectproxyextend isviewing false appbookview emberviewextend contextbinding content view view appbookview contentbinding book book proxied book bookviewhandlebars title yields title isviewing yields undef contentisviewing yields false problem ca nt refer properties objectproxy wo specifying content", "num": "1604", "d": "12/2012"}, {"title": "document preferred idiom destructors releasing resources", "body": "see possible places hook dispose resources eg windowglobal event bindings like onbeforeuload web sockets weak references etc would great document approach es isare recommended seem work fine current emberjs sure know enough evaluate proscons well predict future potential changes behavior happy submit pr improved documentation destruction somebody indicate approach preferred overriding coreobjectdestroy destroy function thiscleanupresources thissuper tailcall super case coreobjectdestroy immediately invalidates objects future overriding coreobjectwilldestroy willdestroy function thissuper thiscleanupresrouces observing isdestroyed cleanupresources function use object like normal metadata etc object undefined halfdestroyed state observes isdestroyed", "num": "1603", "d": "12/2012"}, {"title": "sibling outlet cleared exit", "body": "demonstration controlling bootstrap modal state using router outlet connected modal showed correctly switching sibling states view willdestroyelement nt act expected connect new outlet willdestroyelement called", "num": "1600", "d": "12/2012"}, {"title": "emselect multiple true nt work content binding", "body": "simple demonstration data binding selected value nt seem working", "num": "1599", "d": "12/2012"}, {"title": "class name bindings still fire controller change triggers rerender", "body": "view dynamicallycreated controller bound particular property view also class name binding property javascript apppersonview emberviewextend classnamebindings persontype controller function var persontype thisget persontype controllername emberstringclassify persontype controller property persontype example controllers appusercontroller emberobjectcontrollerextend appadmincontroller emberobjectcontrollerextend bound property changed subsequent change controller triggers rerender temporarily puts view prerender state also triggers removal class name binding observer unfortunately seems class name binding observer scheduled run controllertriggered rerender could remove time view put prerender state observer runs attempting modify class name element via function available prerender state causing break line nb far unable build properly failing demo outside application simply changing bound person example view enough advice trigger scheduling class name binding observer controller property rebuild triggers rerender would much appreciated", "num": "1598", "d": "12/2012"}, {"title": "emberrouter transitionto connectoutlets change url", "body": "problems transitioning another state shownew emberroutetransitionto newroot new emberrouteextend route new root emberrouteextend route connectoutlets function router routertransitionto group groupname title group emberrouteextend route groupname connectoutlets function router consolelog connected send action router enter url stay instead works directly transition would like let root route know context pass looks like bug maybe something wrong maybe problem comes multiple calls jsfiddle work transition newroot code show jsfiddle work transition newgroup code show", "num": "1597", "d": "12/2012"}, {"title": "infinite loop objectcontrollers content bound property", "body": "objectcontroller go infinite loop trying get content property content property tries load value bound property consider connectionstatebinding nt actually create property name connectionstate means attempt find property using objectcontroller unknownproperty turn attempt get content property starting everything fiddle workaround problem use computed property instead binding appsomecontroller emobjectcontrollerextend connectionstate function appget connectionstate property appconnectionstate", "num": "1596", "d": "12/2012"}, {"title": "proper pattern updates objectcontrollers content attribute sought", "body": "conceivable objectcontroller subclass would instantiated via router based lazily loaded attribute presumably \u00e0 la ember data would return plain empty js object moments later selfsame js object would updated content would reflected view demonstrates concept use console issue one easily imagine subsituting call call trouble example mind user bears responsibility iterating new data hash example case held better way perform change iteration required better way one used example", "num": "1594", "d": "12/2012"}, {"title": "bindattr working initial view load", "body": "using unless propthatreturnsfalse clearly false unless problem view first loads bindattr adding class myclassname div element notice class somedynamicclass added false condition b yet view first loads unless works perfectly fine printing clearly false course attribute unless bindings work fine property propthatreturnsfalse modified first load bindattr nt seem working false condition injecting class bug ember something wrong jsfiddle", "num": "1593", "d": "12/2012"}, {"title": "default setter induce unexpected wrong behaviour", "body": "default setter introduced induce unexpected behaviour manifests last emberselect computed macros issue setter use overwrite custom getter implementation issue getter dependencies expected behaviour recompute using getter implementation dependency change", "num": "1592", "d": "12/2012"}, {"title": "inconsistent behavior defining computed properties root namespace", "body": "see fiddle demonstrates several surprising behaviors deadly skull assert never fires handlebars call myapproutermagiccontrollerselectedword always works myappmagicword works initial render behavior inconsistent ember complain warn document inconsistencies somehow notification behaving expected", "num": "1591", "d": "12/2012"}, {"title": "handlebars view helper using child context evaluating bindings", "body": "including view template handlebars helper method new context binding passed via helper method invocation value used righthandside context bindings set helper invocation past would bind view context binds view context work around use following working example bisecting appears issue may introduced", "num": "1590", "d": "12/2012"}, {"title": "bindattr amp amp possible", "body": "hi emberjs team possible enable boolean operations within bindattr something like course could create new virtual property include isdisabled isnotallowed nt seem right use cases", "num": "1589", "d": "12/2012"}, {"title": "cannont perform operations metamorph dom", "body": "started running bleeding latest site erratic errors started showing repro", "num": "1588", "d": "12/2012"}, {"title": "testing views children nested properties templates", "body": "testing parent view child view html view appchildview child view context bound controller nested property template html foobar destroying child test teardown getting error deep ember demonstration issue problem stems fact view classes controller dependencies injected test setup without controller context child view defaults gets set context certain lowlevel function calls causes default thus becomes target nested property observers template might argue view classes controller dependencies set instantiating tests nt completely disagree feel raises two issues neither solution problem way obvious error thrown seems sketchy tests one view perform much setup children inclusion template feels like implementation detail prefer test views integrated fashion requires children worktm global would technically solve still seems excessive mention inefficient", "num": "1587", "d": "12/2012"}, {"title": "contenteditable perform operations metamorph dom bug", "body": "contenteditable view focusout get html entered save remove text contenteditable focus get error uncaught error perform operations metamorph dom please see jsfiddle delete text focus anyone help best regards rick", "num": "1582", "d": "12/2012"}, {"title": "html comments handlebars templates cause error", "body": "temporarily commented html template commented code contained couple variables like causes error perform operations metamorph dom error happens view disconnected outlet sure fix often comment html development would say needs handled version", "num": "1580", "d": "12/2012"}, {"title": "loop behave inconsistently", "body": "times array inside change loop temporary solution inverse loop chainsdidchange javascript function chainsdidchange obj keyname arg mhasownproperty chainwatchers return nothing var nodes mchainwatchers nodes nodes keyname nodes return var l nodeslength lt l nodes didchange arg javascript function chainsdidchange obj keyname arg mhasownproperty chainwatchers return nothing var nodes mchainwatchers nodes nodes keyname nodes return var nodeslength gt nodes didchange arg", "num": "1579", "d": "12/2012"}, {"title": "computed setter messes property caching", "body": "computed properties getters setters somehow messes property cache small code triggers problem javascript var obj emberobjectcreate hidden old consolelog set objget test objset test new consolelog set objget test result printed chrome adding property produces right behaviour however properties work tested", "num": "1578", "d": "12/2012"}, {"title": "todos sample work", "body": "ca nt get todos example work todos sample work apparent problem handlebar binding work checkbox uses works well thanks", "num": "1577", "d": "12/2012"}, {"title": "unsafe javascript error chorme iframe js sth else single hyper link", "body": "set sites test site site one static html page hyper link content single link iframe js sth else hyper link href target blanck gt site b site b site b emberjs starterkit site problem click hyper link site site b opened new tab ok also got error chrome console unsafe javascript attempt access frame url frame url domains protocols ports must match confused enter siteb url chrome address bar press enter ok open site b via clicking link sites error aways issue causes flash file uploader work site situation sorry poor english know talking please let know thank help", "num": "1576", "d": "12/2012"}, {"title": "ember nt work uiwebview", "body": "see post reproduce well okay found post ember borked uiwebview may try take stab working issue new ember guidance put guard place successfully would helpful cheers jason", "num": "1575", "d": "12/2012"}, {"title": "issue using emberjs jwplayer", "body": "issue using ember jwplayer flash mode found related issue sent patch jwpayer support team looks like jwplayer thrilled add patch means way use ember something could done ember side also", "num": "1567", "d": "12/2012"}, {"title": "broken", "body": "updated app view seems work anymore example get correct amount items item data fields empty started checking examples examplestodos nt work either works ok replace older version javascript console nt errors code looks like nothing special appuserscontroller view appuserview userbinding", "num": "1566", "d": "12/2012"}, {"body": "digging around code found offending lines remove statement things work expected", "d": "12/2012"}, {"body": "something related worth skimming may guice injection scopes", "d": "12/2012"}, {"body": "stefanpenner essentially already scopes singleton option problem see call nonsingleton scoped controllers", "d": "12/2012"}, {"body": "ghempton would nt scope bound lifecycle object like good fit singleton could viewed scope bound lifecycle entire application", "d": "12/2012"}, {"body": "stefanpenner makes sense opted go nonsingleton controllers lifecycles tied objects could picture implemented sort scope", "d": "12/2012"}, {"body": "literally hourlong discussion lunch today try write thoughts", "d": "12/2012"}, {"body": "tomdale cool looking forward hearing", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "thoughts controllers want remember models store persistent state controllers store application state application state state saved entire runtime application persistent state saved even user closes app later reopens controllers also present models views augmenting model properties application survive destruction particular view let use simple motivating example involving expanded state also case reusable views discuss separately handlebars isexpanded title body contract post else title show would controller like js apppostcontroller emberobjectcontrollerextend isexpanded false function thisset isexpanded true less function thisset isexpanded false example even template torn rerendered expanded state post would preserved general using controllers state ensures state coupled lifecycle view backbone applications people store state like nonpersistable models ember call objects controllers unfortunately like punxsutawney phil groundhog day problem pops try apply similar strategy inside helper case current controller controller expanding single post would invoke action controller property shared across elements loop solve problem today bad options save property model treating model like controller easy solution want use model multiple contexts namespace expanded properties keeping track ends junk drawer application state wrong place define new view class store property approach good want expanded state reset every time leave reenter current route tied view lifecycle cases however would produce subpar user experience override try wrap new object controller approach would work getting exactly right avoiding memory leaks invalidating caches underlying array changes etc tricky realm framework code application code proposed solution ghempton proposed option addresses issue common case want state persist across navigation changes short framework would supply property property set would automatically wrap new contents specified class whenever underlying array changes eg model ed associated would thrown away via frameworkprovided mechanism short would get benefits bad option without pitfalls implementing reusable views reusable views different problem particular really want viewspecified controller class wraps model controller provided parent template example imagine calendar view used thusly default imagine ui framework providing default controller view expects wrapped framework may ask subclass controller order implement certain hooks eg date ranges greyed currently way provide controller class view currently controller template bound would required know many instances template create named instances controller subclass widget instead propose would create instance widget would tied lifecycle widget", "d": "12/2012"}, {"body": "one things everyone thinks contradictory usecase obviously correct going default links actions bubbling add parameter use stop propagation", "d": "12/2012"}, {"body": "got issue", "d": "12/2012"}, {"body": "toranb rockwood one put together failing test case jsfiddlejsbin demonstrate", "d": "12/2012"}, {"body": "passed controller worked fine eg", "d": "12/2012"}, {"body": "interesting true bug router work going forward need update docs show setup controller within route anyone update let us know done", "d": "12/2012"}, {"body": "confirm well w controller passed fabriciotav showed also nice unit testing sake question still remains possible bug initially thought", "d": "12/2012"}, {"body": "approach seems right way gist tom dale updated merging new router uses approach initial code work based section tom code takes similar pattern original code", "d": "12/2012"}, {"body": "gist nt see tom injecting controller fabriciotav suggests see actually working master currently code snippet show explict thisset controllerhours work controller available route", "d": "12/2012"}, {"body": "yeah stumbled upon earlier forked updated gist match original gist made months ago sure api probably evolved since created", "d": "12/2012"}, {"body": "would love contribute opposite problem js ninja yet though native english speaker would happy help however", "d": "12/2012"}, {"body": "javierav want pr first pass would happy edit english", "d": "12/2012"}, {"body": "removing ember booted fixes issue sure classtostring function var namespace embernamespace namespace todo namespace really metal namespace amp amp emberbooted", "d": "12/2012"}, {"body": "issue production build development build fine looks like introduced tomdale ideas", "d": "12/2012"}, {"body": "tightly coupled view function like mature template systems browser handlebars compiles function gets called function must accept object rendering context return string outputted html would job write dust helpers handle live updating areas content updates emberhandelbars uses external library denoting dynamic sections page might get replaced", "d": "12/2012"}, {"body": "bluepnume basically basically reimplement love able advertise multiple templating languages ember though support additional languages would third parties", "d": "12/2012"}, {"body": "bluepnume sure others would agree fwiw easy enough wrap existing html generating language something compiles handlebars template hamlbars example planning writing identationbased templating language ember compile handlebars templates got build process nt really see downside going route", "d": "12/2012"}, {"body": "machty also viable option could see either working depending exact scenario", "d": "12/2012"}, {"body": "commit changed provides context time look later unless someone beats poke poke tomdale wycats", "d": "12/2012"}, {"body": "oh super annoying har har seems like checking rather since super calls usually invoked coffeescript seems use argument variable thoughts", "d": "12/2012"}, {"body": "solution vanilla coffeescript class extension imo still naive could easily define custom class within method emberobject able thissuper totally legally believe could even emberobjectextend object use super legally outer object would complain really sure could fixed said super help one specific case though thanks committing", "d": "12/2012"}, {"body": "reference comment also relevant", "d": "12/2012"}, {"body": "kselden ebryn et al guys look", "d": "12/2012"}, {"body": "tests run fine commit previous one", "d": "12/2012"}, {"body": "sorry wasted time whatever reason checking previous version attempt see point tests might stopped working tests running fine latest build master cloned repo another folder verify run fine well", "d": "12/2012"}, {"body": "worries troll best times mind closing issue", "d": "12/2012"}, {"body": "requests", "d": "12/2012"}, {"body": "filed", "d": "12/2012"}, {"body": "trek yea getting also totally meant submit emberdata project", "d": "12/2012"}, {"body": "pretty sure issue", "d": "12/2012"}, {"body": "wagenet thank", "d": "12/2012"}, {"body": "actually issue worse use arrow keys move middle number value updated type cursor moves end", "d": "12/2012"}, {"body": "solution override interpretkeyevents subclass textfield blank implementation", "d": "12/2012"}, {"body": "going tackle need something light work today", "d": "12/2012"}, {"body": "go town", "d": "12/2012"}, {"body": "would wiser display error nonexistent object primitive datatype return undefined maybe later would consistent considering requesting nonexistent nested property also returns undefined eg", "d": "12/2012"}, {"body": "machty probably lead really hard debug errors used heavily internally already know understand invalid path means something thought object returned get message least referenced typeerror read property foo undefined nt know would get close understanding seeing", "d": "12/2012"}, {"body": "machty definitely think throw", "d": "12/2012"}, {"body": "although interestingly machty suggestion might original implementation untested docs note obj method simply return", "d": "12/2012"}, {"body": "behavior emberobjectcreate changed getting error thrown notifying please refer commit message details", "d": "12/2012"}, {"body": "support idea conceptually router state machine one valuable tools ember kit addressing areas crippled good idea machty suggests kind thing advanced feature stays way nt need", "d": "12/2012"}, {"body": "provide simple example backwardforward breaks app state sure follow", "d": "12/2012"}, {"body": "anytime app calls nonreversible state transition write pretty heroic validation logic per state make sure actually supposed state time already state breaks whole paradigm depriving lot benefits otherwise wellsealed statebased design change url imo much user initiated event mouse click keystroke latter group bound constraints state manager design via router actions change url hand slips right cracks url changed back previous router presently blindly go along perform miracle oneway transitions damned examples include user logs url changes nt able press back see dashboard happens minus validation heroics full page refresh writing bank app user submitted transfer another account url changes success banner top user presses back get quick reassuring glance transfer amount even server validation place preventing duplicate transfers rather displaying confirmation screen might want intersect request transition back confirm transition transaction detail page instead etc etc examples endless think could reduce lot headaches get lot mileage translating urls router actions allowing states decide happen someone attempts perform action last example pressing back would translate action state positively respond state redirect transaction detail page clarify things", "d": "12/2012"}, {"body": "machty looked new router sure addresses worth taking look", "d": "12/2012"}, {"body": "wagenet took look gather concept state machine involved new router way decoupled state machine url recognizer far still seems make jump hoops validate consider user event changing url going think lot ways like new router api seems like accomplish router third confusion also concept funneling user interactions routerdefined actions still seems intact weird zombie pseudo state machine sort way think way step away suggesting convert url changes statemachine actions via ideas swirling head overriding default assumptions design accomplish suggesting need little time familiarize code present certainty", "d": "12/2012"}, {"body": "like machty thinking felt yesterday made simple project involved two urls setups user queries projects focused project accessible login since state client side simply hitting refresh cleans loggedin user result hit refresh url ember transition state since user logged application blows think one way separate url parsing application state machine like application asks router another state url parser also request application state machine transitionto mapped state upto application state machine decide whether state reachable current one transition request denied url parser simply resets url point current active state application proceeds usual right specific problem writing validation manually transitioning safe state error occurs would amazing ember add magic process", "d": "12/2012"}, {"body": "updated title since getting newrouter main goal short newcomers router transitions caused url changes backwardsforwardsetc preventable imo best way would convert url changes actions default transition mappedto route eg url change resolves action default transitions router admin state connectsoutlets etc etc actions overridden prevent certain transitions though seems like newrouter taking step away tight coupling state machine way would worked oldrouter would root level define action would perform authentication redirect appropriate passthru could define state would shared among substates love get tomdale thoughts newrouter way accommodating use case go long way towards sealing currently unchecked leakiness", "d": "12/2012"}, {"body": "seems going things wrong way transitional states uris example uri userisdead information stored elsewhere uri user navigate uri show current state user dead alive take account confirmation example site would handled thus assign uuid account immediately confirmation page handling account simply account uuid user goes page app checks see status account confirmation required displays confirmation page displays account information account deleted displays equivalent perhaps redirect accounts page never store transitional state verb confirm uri violates restful practices system simple matter capturing click back button calling appropriate route rather allowing client display cached page push state hashes anyway right nt see reason complicate router code something like stick rest wrt uris store current state db local andor remote easy also avoid post idempotent app loaded fills queue uuids server queue gets certain number say adds another way uuids generated db consistent instead using post create new item return uuid assign uuid immediately shifting queue put server server simply puts item previous item uuid overwritten none existed new one created manner resubmit request without creating duplicate results problem back button creating second third unwanted result eliminated way create another pull another uuid queue means starting blank form find eliminating post otherwise keeping verbs transitional states uri solves problems robust scalable uuids key encountered lot resistance idea people seem wedded post ca nt seem grasp benefit idempotency really ca nt explain seems like nobrainer", "d": "12/2012"}, {"body": "chasm thank input points unless counting event way capture back button click interpret value hash already changed router nt presently give neat way override hence suggestion convert overridable actions also even assuming events afaik routers old new nt really provide means capture events anything passthru unchecked transition particularly tied example routable uri merely thinking instance something irreversible happened devs would want prevent user say clicking back button back requiring validation within alreadytransitionedto state impractical breaks state machine paradigm totally preventable via action approach brings next point sure wisdom rest applied resourceoriented server api translates frontend apps stateful form add new favorite restcompliant either way linkable uri backforwardbuttonable uri seems like suggesting superstate requires validation route forfeit uri course could also converted still need perform sorts user validation heroics still presently would need take place within router sees alreadytransitionedto state ie ok transitioned newfavorites route let first make sure current user logged dead crap dead lets tell midtransition state machine transition somewhere else definitely number apps call approach suggested immediately assigning ids maintaining transient users db nt default workaround something could easily elegantly prevented firmer adherence overridable state transitions gatekeepers nt want complicate router already handling posttransition validations going usher additional complexity matter currently tools presented break state machine paradigm best practices perform midtransition validations transitions find clever way prevent alreadytransitioned substates running callbacks forfeit linkable refreshable backforwardbuttonable restcompliant uris going gets tough suggesting third tool like others totally optional otherwise transparent right tool need handle situations", "d": "12/2012"}, {"body": "agree conceptually monkey patched router add functionality use primarily prevent someone leaving page unsaved changes found lot users use back forward navigation app nav bar app navigation", "d": "12/2012"}, {"body": "believe preferred", "d": "12/2012"}, {"body": "thanks document submit pr", "d": "12/2012"}, {"body": "wo nt filling specific outlet entering new state use previous state event", "d": "12/2012"}, {"body": "thanks trek precise answer", "d": "12/2012"}, {"body": "data binding working fine trying display array string see", "d": "12/2012"}, {"body": "pivotalmedici last bit read far unable", "d": "12/2012"}, {"body": "aye", "d": "12/2012"}, {"body": "lcoq route needs nested route confused hopefully upcoming new router api less confusing respect", "d": "12/2012"}, {"body": "thanks answer lukemelia completely solve problem moving route route avoid user go url could find state path guess ca nt route state leaf state saw consequently url example would like keep valid url believe could classic scenario handled ember could consider bug", "d": "12/2012"}, {"body": "klaaspieter nt bug property explicitly defined try proxy set proxies obvious infinite loop simpler alternative cp define controller means wo nt proxy see", "d": "12/2012"}, {"body": "fiddle linked work asking would set content controller without connectoutlet controllerset content mycontent asking find controller", "d": "12/2012"}, {"body": "kselden follow fiddle url open console console btw better way accomplish fiddle see behavior default set displayed ms later updated means update using within function question better way update payload iterating elements", "d": "12/2012"}, {"body": "sgharms following steps produce behavior either", "d": "12/2012"}, {"body": "kselden gavacho need make sure running code right iframe context", "d": "12/2012"}, {"body": "sgharms though get fiddle working admit still clue actual issue", "d": "12/2012"}, {"body": "resolved oneonone sgharms", "d": "12/2012"}, {"body": "viewing request guidance means implemented recommended wagenet suggested store data property called provide kvo accessors ultimately strongest recommendation go ember data smile", "d": "12/2012"}, {"body": "produce fiddle", "d": "12/2012"}, {"body": "sorry example missing information modified example added jsfiddle", "d": "12/2012"}, {"body": "accidentally stumbling stackoverflow question understand correct solution unless propthatreturnsfalse clearly false unless listed online documentation anywhere", "d": "12/2012"}, {"body": "wanted chain multiple static classes would", "d": "12/2012"}, {"body": "rukspin able include multiple static classes unless propthatreturnsfalse clearly false unless understanding question please elaborate stackoverflow preferred channel questions", "d": "12/2012"}, {"body": "rukspin bindattr helper nt know anything context since string template nt parsed try parsing jquery solution dgeb said output one class attribute", "d": "12/2012"}, {"body": "indeed documented", "d": "12/2012"}, {"body": "tchak use case custom getter custom setter explicit sets nt want permanent discussing change concluded cases far solution make property custom setter also since tests pass cp setter changes probably least update ticket add failing tests", "d": "12/2012"}, {"body": "use case framework change right", "d": "12/2012"}, {"body": "tchak need failing test emberselect need old behavior leave explicit setter", "d": "12/2012"}, {"body": "kselden tonight app lot properties like object controllers toto function return something property titi tata bound views titi tata usually coming behave unreliably change unless put explicit key value something nt", "d": "12/2012"}, {"body": "tchak way binding coming", "d": "12/2012"}, {"body": "emberselect problem fixed rest intentional", "d": "12/2012"}, {"body": "hey duplicate", "d": "12/2012"}, {"body": "cool thanks pointer embercore place could catch failure type could put guard people bloodying walls head", "d": "12/2012"}, {"body": "hmm perhaps result set problem valid property value", "d": "12/2012"}, {"body": "could tell difference return return undefined could cache input value return", "d": "12/2012"}, {"body": "ran today", "d": "12/2012"}, {"body": "thinking use helper shift context andor make keyword assuming asking way set context view bindings parents context use case revert commit like explicitly tested wycats", "d": "12/2012"}, {"body": "works worked longer works nt tested worked", "d": "12/2012"}, {"body": "helps child view controller often case righthandsides bindings evaluated relative child view matter template view included may writing righthandsides relative context ca nt intuit template alone javascript approuterchildcontroller emberobjectcontrollercreate baz omega appchildview emberviewextend controller approuterchildcontroller even template equals alpha value property child view still set omega suggestion use would nt help controller preempts parent view context words nt appear way refer template controller remove believe crucial functionality feels counterintuitive reading template expect property paths see relative template context may change context temporarily always able trust context see part template", "d": "12/2012"}, {"body": "kselden pointed could use make available view helper righthandsides restores desired functionality however user emberhandlebars clear necessary repetition makes look like noop fact needed makes feel like voodoo", "d": "12/2012"}, {"body": "hi kind feature really good pushes much logic templates would prefer put logic controller example", "d": "12/2012"}, {"body": "correct would go controller perhaps view object highly unlikely handlebars ever include logic exists", "d": "12/2012"}, {"body": "trek thank much answers", "d": "12/2012"}, {"body": "case gist dies repro html lt gt hello emberjs lt gt viewshow viewshow viewthingxxx js javascript var app emberapplicationcreate var thing emberobjectextend appapplicationcontroller embercontrollerextend appapplicationview emberviewextend templatename application show true thing thingcreate approuter emberrouterextend root emberrouteextend index emberrouteextend route", "d": "12/2012"}, {"body": "simple fix", "d": "12/2012"}, {"body": "hi like help solving issue need help contribute somehow please let know", "d": "12/2012"}, {"body": "using actually creates view using metamorph metamorph uses tags mark location change content via end removing tags view goes update content ca nt find tags anymore get error see information metamorphs strongly recommend avoiding using handlebars helpers content", "d": "12/2012"}, {"body": "sure think seen handlebars line comments using could try tell works line comments handlebars see", "d": "12/2012"}, {"body": "yes work problem case noted nt mentioned anywhere find documentation problem html comments allowed handlebars templates perhaps fix easy documenting cause error thrown", "d": "12/2012"}, {"body": "phpaddiction issue handlebars aware surrounding code nt know inside comment sets binding infrastructure master version handlebars support block comments long term best solution use prevent handlebars blocks inside interpreted like add comment issue docs happy pr", "d": "12/2012"}, {"body": "sounds like comment emberjs handlebars docs would good enough couple hour time sink figure perhaps little info debug version exception possible cause error perform operations metamorph dom handlebars site nothing lead think would issue comments resulting output like comments show use html comments gt output comment output anyway thanks taking look", "d": "12/2012"}, {"body": "phpaddiction metamorph issue specific ember however blocks html comments still processed standard handlebars unless wrapped block handlebars comment", "d": "12/2012"}, {"body": "makes sense nt used handlebars outside ember nt sure happy reason avoid", "d": "12/2012"}, {"body": "yeah sorry trouble ideally get useful error message see", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "thing happened today chainswillchange made tests least temporarily loop nodes empty loop copy", "d": "12/2012"}, {"body": "return value setter", "d": "12/2012"}, {"body": "thanks bit weird return value setter going close issue", "d": "12/2012"}, {"body": "problem computed property allowed alter value set need return", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "kselden thanks behindthescenes explanation looking", "d": "12/2012"}, {"body": "examples date limited usefulness probably remove", "d": "12/2012"}, {"body": "wagenet think fast avoid people get confused ember mainly learning yet", "d": "12/2012"}, {"body": "brunocoelho deferring learning emberjs version api stabilizes think lots people kind situation wrong examples suck", "d": "12/2012"}, {"body": "tomdale plate weekend either updating removing got stymied bit friday slow start favor removing public view", "d": "12/2012"}, {"body": "definitely agree remove bring update ready people work get stumped looking old example", "d": "12/2012"}, {"body": "merge pull request community get samples work", "d": "12/2012"}, {"body": "xqiu could definitely work personally think little emphasis api documentation including samples helps lot sample application feel sample application brings people shows around lets make whether want delve deeper still wrapping head around concepts ember already started try put together samples feel help make intricate areas emberjs little easier understand planning setup pr documentation enough go enough confidence work well", "d": "12/2012"}, {"body": "agree karlbright useful good api documentation ember improving days started ember useful api documentation sample applications", "d": "12/2012"}, {"body": "removed outdated examples website repo however still show site sure long github clears cache xqiu find link examples", "d": "12/2012"}, {"body": "wagenet found examples", "d": "12/2012"}, {"body": "ah see examples repo links website", "d": "12/2012"}, {"body": "added deprecation notice examples repo readme", "d": "12/2012"}, {"body": "update chrome browser flash player problem gone tt", "d": "12/2012"}, {"body": "sorry opened still confused want know reason old version chrome updated automaticly new version ca nt reproduce issue fixed", "d": "12/2012"}, {"body": "yaohuiji unable reproduce consider closed", "d": "12/2012"}, {"body": "mean consider fixed able get something consistently reproducible let us know reopen ticket", "d": "12/2012"}, {"body": "older version ember circa working correctly uiwebview appstore app would guess need configure router attempt manipulate url page since url visible guess ought configure router please reopen issue nt resolve problem seeing", "d": "12/2012"}, {"body": "could set false prototype extension really root cause", "d": "12/2012"}, {"body": "limit ember", "d": "12/2012"}, {"body": "nt extend object prototype nt see issue", "d": "12/2012"}, {"body": "please look following file wrapped line block condition objhasownproperty item created custom build fix works example fix flash mode nt work custom build fix", "d": "12/2012"}, {"body": "extending array causes issue adding setting solved conflict", "d": "12/2012"}, {"body": "excellent although missing handy array extensions frowning issue resolved feel free close", "d": "12/2012"}, {"body": "thanks help", "d": "12/2012"}, {"body": "word warning performance impact creating observable arrays another note terrible way iterate array instead submitting patch submit patch loops using vs merits nothing ember", "d": "12/2012"}, {"body": "looks like jwplayer team fixed issue exactly removed legacy code including file patched caused issue next version conflict ember thanks comments", "d": "12/2012"}, {"body": "take look view context changes changed pre old way longer supported snippet short fix use viewuseremail", "d": "12/2012"}, {"body": "ok thanks prompt reply", "d": "12/2012"}, {"body": "verified issue latest master", "d": "12/2012"}, {"body": "also experiencing problem jsfiddle created debugging isue clickhandler example works first time press show view b stops working show view c clicked eimermusic explained view elementid destroyed run loop following creation", "d": "12/2012"}, {"body": "seems resolved latest libraries see times briefly switches never stays", "d": "12/2012"}, {"body": "since view registers emberviewviews needs defined run nt indom state master uses assign semantics instead define call computed property setter instead overriding uses define semantics passed props old create fire change events initial values expected call ones want run proposed adding flag observers opt called init questions around ordering create object initial state point function", "d": "12/2012"}, {"body": "definitely issue", "d": "12/2012"}, {"body": "still issue master", "d": "12/2012"}, {"body": "think would interesting see pr makes support", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "forgotten would make sense override function level level", "d": "12/2012"}, {"body": "mehulkar question exactly expect returned would basic array instance class called something else", "d": "12/2012"}, {"body": "expect instance class called eg", "d": "12/2012"}, {"body": "mehulkar seems bit harder open someone attempting solution", "d": "12/2012"}, {"body": "adaptivdesign trek actually exact issue models apprequest loaded displayed collectionview apprequest hasmany appmaterial every appmaterial belongsto appvendor one appvendor properties name template displays apprequest try display viewcontentmaterialsfirstobjectvendorname fails something tried replace expression inserted dom error see replicate jsfiddle", "d": "12/2012"}, {"body": "turns fairly simple way resolve issue", "d": "12/2012"}, {"body": "sounds like resolved let know mistaken", "d": "12/2012"}, {"body": "still issue latest master indeed look like bug", "d": "12/2012"}, {"body": "using incorrectly intended used getter updated jsbin shows correct usage", "d": "12/2012"}, {"body": "clarify use good number questions caused", "d": "12/2012"}, {"body": "fixed closure copied local var cleared createwithmixins create", "d": "12/2012"}, {"body": "yes bizzaroearth auditing actions ones wrong urls allow transitions states without passing context led user seeing weird page parts showed cases solution action contexts load asynchronously change time trouble thinking way around nt lead unintentional errors", "d": "12/2012"}, {"body": "closing since sounds like wycats wants address another way", "d": "12/2012"}, {"body": "older version ember working least using location history router configuration however stopped working sure ember point javascript approuter emberrouterextend enablelogging true location history nt use routes instead rails pass anything appropriate root emberrouteextend etc javascript appproviderscontroller emberarraycontrollerextend connectproviders function router var loc routerlocationlocationhref var findparams q url loc param q page url loc param page pretty new ember happy take stab fix someone points right direction", "d": "12/2012"}, {"body": "actually appears fixed latest master", "d": "12/2012"}, {"body": "still issue", "d": "12/2012"}, {"body": "lukemelia know stuff refactored still issue", "d": "12/2012"}, {"body": "fixed master", "d": "12/2012"}, {"body": "icholy sure understand bug make jsfiddle latest master demonstrates issue", "d": "12/2012"}, {"body": "updated fiddle master longer reproduce error", "d": "12/2012"}, {"body": "still case though nt see simple fix offhand", "d": "12/2012"}, {"body": "still point confusion actual bug", "d": "12/2012"}, {"body": "wagenet rlivsey said child route runs parent route workaround assign controller data parent route looking weird also load data yeah could check data already loaded simply pass parent dynamic segments children like rails developers assume default", "d": "12/2012"}, {"body": "nt really ember issue probably wise call docs", "d": "12/2012"}, {"body": "still issue kselden knows fix nt time either wait someone consult fix", "d": "12/2012"}, {"body": "yeah tried use emberrequired didnt understand didnt work beeing almost sure something wrong anyway kselden considering time explain fix understand work would happy contribute", "d": "12/2012"}, {"body": "trek think good place", "d": "12/2012"}, {"body": "looks like whole area undergoing changes lets see shakes", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "kselden thoughts still", "d": "12/2012"}, {"body": "kselden thoughts make sure use autoinit consistent recent change reflected", "d": "12/2012"}, {"body": "hi trying run ember precompiler play framework getting affected usage volatile keyword error given rhino orgmozillajavascriptevaluatorexception missing name operator definition computedpropertyprototypevolatile changing language version rhino effect could reconsider changing name", "d": "12/2012"}, {"body": "run closure compiler well add following plovr config experimentalcompileroptions languagein", "d": "12/2012"}, {"body": "seems like resolved new router", "d": "12/2012"}, {"body": "probably changed already change new router lets revisit merged", "d": "12/2012"}, {"body": "seems like still concern", "d": "12/2012"}, {"body": "tchak play new router", "d": "12/2012"}, {"body": "see new router affects", "d": "12/2012"}, {"body": "looks like latest master nt suspect something intend add support said want put together pr support definitely consider", "d": "12/2012"}, {"body": "since given using handlebars agnostic approach templates limiting seems key thing missed starting ember feasible make app crawled search engines point ember suited humble opinion applications websites drew conclusion looked ember homepage nt case ember website would ember ruby tl dr use handlebars makes life much simpler", "d": "12/2012"}, {"body": "sinisterminister possible make searchable sites definitely bit work probably something write", "d": "12/2012"}, {"body": "latest master performance improvements make noticeable difference overall", "d": "12/2012"}, {"body": "learning ember advice amp instruction use emberjs trek solves moving script end file purplegit comment must coincidence change names solved using local files", "d": "12/2012"}, {"body": "still issue", "d": "12/2012"}, {"body": "need issue label come back check thing lands", "d": "12/2012"}, {"body": "confirmed lukemelia still issue", "d": "12/2012"}, {"body": "kselden still think issue know guys made improvements performance sure affects", "d": "12/2012"}, {"body": "largely works described", "d": "12/2012"}, {"body": "pretty sure things behave requested", "d": "12/2012"}, {"body": "painful especially since solved adding meaningless link imho supporting ios box value project especially since took several different google searches find thread", "d": "12/2012"}, {"body": "kselden ebryn could please take look question", "d": "12/2012"}, {"body": "still busted latest master", "d": "12/2012"}, {"body": "nothing done super rare someone bind emberlookup instead key", "d": "12/2012"}, {"body": "normalizing code chains emwatch myappmefoo called", "d": "12/2012"}, {"body": "yeah agree nt high priority still unexpected behavior", "d": "12/2012"}, {"body": "agree mailing lists successful judging sproutcore mailing list would nt much success people qualified respond generally start ignoring mailing list much traffic mailing lists also nt good tracking threads unless use client sort another thing us track think pretty set nt think likely change time soon said want discuss best practices would actually say ok open ticket something need pin write documentation cover documentation issues github nt see could nt cover github issues also gives us good way track discussion publicly available source gets vote", "d": "12/2012"}, {"body": "also reiterate want everything foster good communication given past experience believe mailing list appropriate way time", "d": "12/2012"}, {"body": "thumbsdown mailing lists ones participated always ended like wagenet mentions either novice looking help get reply thus x developers assholes totally unhelpful someone could offer help get overwhelmed yetanothernoobaskingthesamehowdoigetstartedquestionomgwhydonttheyjustgoogleit disengage nt start way rainbows kittens start slowly fall apart basically already reached end game people clamoring mailing list ember contributors politely saying nt time help people looking mailing list disappointed mailing list nt goal tool reach goals got solution works us", "d": "12/2012"}]