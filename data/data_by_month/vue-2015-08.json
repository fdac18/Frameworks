[{"title": "transitions instance initialisation", "body": "currently transitions available using would useful make transitions available components without directives importantly root vue instance use case examples lightbox popup whole content fade creation cases toolbar panels visualstudio like may slide outside window", "num": "1230", "d": "8/2015"}, {"title": "deprecate options param", "body": "problem param common gotcha dealing elements often requires additional formatting source data custom filter limited capabilities customizing rendered options proposal reason existed due internal implementation issues really reason way ux perspective therefore internal refactoring deprecate param instead use normal array objects also bind underlying value directly object using options", "num": "1229", "d": "8/2015"}, {"title": "add check adding plugins", "body": "seems call use every try think would cool vue checked plugin already applied would helpful modular js systems builds browserify", "num": "1228", "d": "8/2015"}, {"title": "\u52a8\u753b\u5217\u961f\u6709\u95ee", "body": "\u5982\u679cn\u4e2a\u5143\u7d20 \u975e\u6570\u7ec4\u5faa\u73af \u8981\u5b9e\u73b0\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u6267\u884c\u52a8\u753b \u6709\u5bf9\u5e94\u7684\u6307\u4ee4\u5417", "num": "1227", "d": "8/2015"}, {"title": "initdata extremely slow since upgrade vue", "body": "quick screen shots results dev tools profiling utility vue vue dig deeper seems merging data instance could nt figure reason slow wondering idea might reason start looking try see isolate problem try reproduce jsfiddle something", "num": "1226", "d": "8/2015"}, {"title": "filters filter gets applied model nt get updated", "body": "", "num": "1224", "d": "8/2015"}, {"title": "ie mustache bug", "body": "variable name typename wanted display page used mustache style html worked fine chrome ie nt show value typename mustache expression opened console developer tool ie errors looked dom found mustache expression divided two lines nt know whether reason causes issue waiting help thanks reading ps use vtext instead mustache expression vtext works fine chrome ie", "num": "1223", "d": "8/2015"}, {"title": "cache computed prop default false configurable", "body": "find default cache computed prop true however case computed props simple enough time changed means caching wasting memory default configurable default false", "num": "1222", "d": "8/2015"}, {"title": "loose element attributes directive binds", "body": "may overlooking something js vuedirective editable bind function html content editable adds attribute contenteditable true element null looked directives thing pick vmodel thanks", "num": "1220", "d": "8/2015"}, {"title": "scope inside vrepeat tag affected component vrepeat", "body": "seems like could problem shared props two vrepeats one affects one please see js fiddle comments", "num": "1219", "d": "8/2015"}, {"title": "feature request debugging reactions", "body": "middle second website love vue made much productive organized however spend significant amount time debugging inside vue code variable working problem shows exception vue code set breakpoints vue code find step even hard tell going gettersetters would like propose debugging tools vue implement end current project would need help though since expert vue code suggesting hook code would good example help debugging aids would fall two categories observing usage vue reactivity think vue operation much like rxfs ie observables subscribers data props observables anywhere dataprops used declaratives instance methods etc subscribers reactions automatic vue makes easeofuse magic makes debugging harder traces could dump reactions either console log log file would one line per automatic variable reaction observation breakpoints could set reaction happens reaction could kind identifier id could come reading log data keypath could watched usage anyone thoughts would anyone find useful", "num": "1218", "d": "8/2015"}, {"title": "vue", "body": "", "num": "1217", "d": "8/2015"}, {"title": "\u4f7f\u7528svg\u65f6\u5bfc\u81f4\u7684\u5185\u5b58\u6cc4\u9732\u95ee\u9898", "body": "\u8fd9\u4e9bstrings\u57fa\u672c\u90fd\u662fsvg\u5b57\u7b26\u4e32", "num": "1216", "d": "8/2015"}, {"title": "call methods outside instance", "body": "extended vue adding additional methods howcome possible call outside instance js mixinjs moduleexports created function thishello methods hello function consolelog hello mixin testjs var mymixin require mixin var component vueextend mixins mymixin var component new component gt hello mixin js mixinjs moduleexports methods hello function consolelog hello mixin testjs var mymixin require mixin var component vueextend mixins mymixin var component new component componenthello componenthello function", "num": "1215", "d": "8/2015"}, {"title": "asynchronous component transfer parameters", "body": "code dynamically load slider vue slider vref slider moduleexports data function return components slider function resolve require componentslidervue resolve point window object sliderslides link image throws question vue webpack bug pass reference", "num": "1214", "d": "8/2015"}, {"title": "way run single unit test", "body": "beers run test separately", "num": "1213", "d": "8/2015"}, {"title": "", "body": "", "num": "1212", "d": "8/2015"}, {"title": "highlighter vue sublime text", "body": "know hard anyway", "num": "1211", "d": "8/2015"}, {"title": "checkbox checked page load updating", "body": "row checkboxes bound filters checkbox checked sets attribute true url hash makes ajax call retrieved data filter applied well page load hash checked filters data fetched accordingly checkboxes bound vmodel set true url value set true worked updated filters work checkboxes remaining checked", "num": "1210", "d": "8/2015"}, {"title": "pluralize bug", "body": "hello sure something wrong bug use pluralize filter", "num": "1209", "d": "8/2015"}, {"title": "macbook esc key ca nt fire dom event chrome", "body": "env yosemite chrome version macbook pro sure vue problem try safari ok try keyboard good also", "num": "1208", "d": "8/2015"}, {"title": "partial template", "body": "tell connect partial template eg layertransitionsettings block found description act done correctly", "num": "1207", "d": "8/2015"}, {"title": "\u53d1\u73b0\u4e00\u4e2a\u7a33\u5b9a\u590d\u73b0\u7684\u62a5\u9519", "body": "\u5728\u4f7f\u7528vrepeat\u548ctrackby\u7684\u65f6\u5019\u53d1\u73b0\u4e2a\u95ee\u9898 uncaught typeerror read property vtrans null", "num": "1205", "d": "8/2015"}, {"title": "set clearified api reference", "body": "instance method need document examples clarify features everyone need array value need update method currently note tutorials", "num": "1204", "d": "8/2015"}, {"title": "possible update template", "body": "possible update template super called need logic work template ca nt use super called wo nt work js export default class basewidget extends vue constructor options ideal js export default class basewidget extends vue constructor options super options", "num": "1202", "d": "8/2015"}, {"title": "move vuejs organization", "body": "mostly logistics please comment anything missing x links docs x links readme x links packagejson x links source code comments x links examples x links forumvuejsorg x package manager bower x cdn jsdelivr x cdn cdnjs x gitter room", "num": "1201", "d": "8/2015"}, {"title": "deprecate favor", "body": "working new version significantly performant current version introduces breaking differences terms scoping order keep backwards compatibility migration new version introduced original left intact current status tests passed test current branch difference required alias alias required using syntax preferred reads naturally also means meta property longer used still available also still refer parent scope index nested loops anonymous child vms previously creates actual child vm instance every repeated block longer case repeated block real partially compiled fragment lightweight intermediate scope greatly reduces overhead result see significant performance improvement initial rendering noncomponent loops rerendering tested dbmonster also means using extra repeat longer creates overhead child instance would work repeated block component longer anonymous child instances created case component scoping part different previously use component get somewhat weird scoping example automatically available inside component parent template want use parent template create wrap repeat addition requires component implementation aware specific external data received via standard interface get expected scoping need explicitly pass external data component makes component implementation longer specific less magical", "num": "1200", "d": "8/2015"}, {"title": "vrepeat\u6e32\u67d3\u7684dom\u4e0einline\u548cinlineblock\u51b2\u7a81", "body": "\u6e32\u67d3\u540e\u7684dom", "num": "1199", "d": "8/2015"}, {"title": "additional planned changes", "body": "longer used prop replacing component default data good pattern deprecate option originally used internal mechanisms longer needed internally api overused lead subtle bugs make state components harder understand deprecate prefer using queryselector may new method querying dom sugar standard interface normal fragment instances renamed", "num": "1198", "d": "8/2015"}, {"title": "object missing child object vue throws error console component", "body": "two issues common scenario data comming server ajax call refer array element template get error console object missing child element predefined vuejs also throws error read property display undefined vueeval eval js fiddle demo best aproach scenario thanks kris", "num": "1197", "d": "8/2015"}, {"title": "ca nt use options without vmodel", "body": "sometimes actually interested twoway binding care listening event however without nt work instead use set watcher works sure even fixed since directive argument could also manually create discouraged framework", "num": "1196", "d": "8/2015"}, {"title": "bug templating", "body": "code clones array element code works correctly template glues source element copied", "num": "1195", "d": "8/2015"}, {"title": "vmodel work hidden input", "body": "code thismeasuretime always empty see value html source code html source code", "num": "1194", "d": "8/2015"}, {"title": "pass params dynamic component", "body": "hava dynamic component example var mainwrapper new vue el mainwrapper components dashboard dashboard wheels wheels wheel wheel pass param dashboard others", "num": "1193", "d": "8/2015"}, {"title": "vrepeat", "body": "way vrepeat limit", "num": "1192", "d": "8/2015"}, {"title": "error resolving repeat component strict mode", "body": "strict asset resolve mode idea repeat component example followed console report component resolved resolving checking modified code something like course try another approach one component needs pass repeated data component ability repeat block lost example however code work without errors result wrong always empty linked within even set instance", "num": "1191", "d": "8/2015"}, {"title": "", "body": "\u66f4\u6362\u6570\u7ec4 listvue dataitemsnewarray newarray", "num": "1190", "d": "8/2015"}, {"title": "make computed property caching optional", "body": "computed properties recalculated change past cached algorithm used make sense people sure least never flushed updated computed properties project actually useless think good documentation flush algorithm would match common sense must feature", "num": "1189", "d": "8/2015"}, {"title": "vue managing check box values", "body": "checkbox status nterpreted vue model using true false values usualy doesnt reflect model values real database storage typical html tag definition looks like value value vue way reflect model value true false values used easy fit database following tag example would expect clicking check box sets model value unsetting value sets model also follow situation several checkboxes bound one model multivalue selection", "num": "1188", "d": "8/2015"}, {"title": "call method vrepeat", "body": "hi tell call method finish vrepeat run", "num": "1187", "d": "8/2015"}, {"title": "using html tags strings inside mustache braces", "body": "reason using html tags strings inside triple mustache work expected example case output html everything including triple braces ps double mustache issue", "num": "1186", "d": "8/2015"}, {"title": "cached linker may lead wrong host unexpected behaviours", "body": "test version cache linker constructor element html however linker relative host means lead hardtodiscover unexpected behaviours example followed wo nt fire events attached program compile link binding directive template directive fetch linker cache whose host directive invoke compile link added list check need fire event however host attached wo nt fire html something", "num": "1185", "d": "8/2015"}, {"title": "vrepeat \u5bf9\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u65e0\u6548", "body": "\u5728 \u91cc\u5e76\u4e0d\u80fd\u5f97\u5230", "num": "1184", "d": "8/2015"}, {"title": "dropdown list value support representing arbitrary javascript objects strings", "body": "example following code currently nt work choose clear choosen chosenticketname chosenticketprice knockoutjs supports extremely useful data binding cascading dropdowns like", "num": "1183", "d": "8/2015"}, {"title": "\u7ec4\u4ef6\u590d\u7528\u4f7f\u7528\u7684\u7591\u95ee", "body": "\u6709\u4e2a\u5206\u9875\u7ec4\u4ef6 vue \u5206\u9875\u6a21\u677f\u7ec4\u4ef6 use strict moduleexports props currentpage totalpage data function return navcount href null computed pagenavs function var total thistotalpage \u6240\u6709\u9875\u6570 var current thiscurrentpage \u5f53\u524d\u9875 var navcount thisnavcount \u6700\u591a\u663e\u793a\u591a\u5c11nav var link thishref var half mathfloor navcount var start start var end current lt half total lt navcount total navcount start else current gt total half total start current half else current half start current half var navs start lt navspush start start return navs disablegofirst function var onoff thiscurrentpage return disabled onoff disablegolast function var onoff thiscurrentpage thistotalpage return disabled onoff showprevmoreflag function var boundary mathceil var onoff thiscurrentpage gt boundary return onoff shownextmoreflag function var total thistotalpage var boundary total mathfloor var onoff thiscurrentpage lt boundary return onoff lastlink function firstlink function \u91cd\u8f7d\u4ed6 js var pagination require \u6307\u5411\u4e0a\u9762\u4ee3\u7801\u6240\u5728\u6587\u4ef6 var postpagination vueextend pagination var pp new postpagination data href posts navcount \u662f\u4e0d\u662f\u8981\u628apagination\u548cdata\u6df7\u5408 exportspostpagination vueextend paination data href posts navcount vue moduleexports components postmain postmain postpagination", "num": "1182", "d": "8/2015"}, {"title": "access corresponding dom element onclick vrepeat item", "body": "got list displayed html username javascript new vue el vue access corresponding element clicked want perform jquery actions thanks lot", "num": "1181", "d": "8/2015"}, {"title": "local scope vue inside component", "body": "component transcludes inner content using hook inner content vue instance example fiddle would expect prop visible html appears show note type bound updates vm get feeling bound make work", "num": "1180", "d": "8/2015"}, {"title": "route", "body": "hello tell read configuring routed need clientside implementation rather server", "num": "1179", "d": "8/2015"}, {"title": "\u5728click\u4e8b\u4ef6\u51fd\u6570\u4e2d\u83b7\u53d6model\u540d", "body": "hi \u600e\u6837\u5728click\u4e8b\u4ef6\u4e2d\u83b7\u53d6\u5f53\u524d\u5143\u7d20\u7684\u6570\u636emodel\u540d \u6211\u60f3\u505a\u4e00\u4e2a\u53ef\u901a\u7528\u7684\u6dfb\u52a0\u6216\u5220\u9664\u7c7b \u73b0\u6709\u505a\u6cd5\u662f \u60f3\u5c06xxx\u53d8\u6210\u52a8\u6001\u83b7\u53d6\u7684 \u6216\u8005\u6709\u4ec0\u4e48\u65b9\u6cd5\u80fd\u5c06click\u4e8b\u4ef6\u4e0e\u5f53\u524dmodel\u7ed1\u5b9a\u8d77\u6765\u4e5f\u53ef\u4ee5 \u6570\u636e\u7ed3\u6784\u662f\u8fd9\u6837\u7684 thanks", "num": "1178", "d": "8/2015"}, {"title": "pass objectsarrays props custom component", "body": "way make work page use generally way pass objectarrays custom component directly view", "num": "1177", "d": "8/2015"}, {"title": "vel working", "body": "double click todo edit focus tried vuenexttick function still working", "num": "1176", "d": "8/2015"}, {"title": "stop propagation default", "body": "problem event system seemed like useful idea first implemented still useful internally found almost never use application code accidental complexity introduce issues behavior relies structure component tree surface decouples components fact still couples quite tightly event relationship set components need stick structure accidentally break event chain moving components around namespacing listen event idea child component somewhere might dispatch event name screw things ca nt prevent events often ab used trigger state changes propagation inside component tree abstract implicit events go ways events flow inside large application quickly gets hard wrap head around becomes even harder understand app state change originated lot times simple global event bus make things centralized thus lot easier understand even adopt flux want go proposal deprecate event methods still remain means vue isntances still event emitters stop propagation default unless user calls second argument expose global utility users construct event bus something like outside core investigate recommendation state management use libraries like vuex redux", "num": "1175", "d": "8/2015"}, {"title": "\u662f\u5426\u6709\u5f15\u7528\u5916\u90e8\u6a21\u677f\u7684\u5185\u7f6e\u65b9\u6cd5\u5462", "body": "hi vue\u4e2d\u6709\u6ca1\u6709\u7c7b\u4f3cangularjs\u7684templatecache\u65b9\u6cd5\u80fd\u591f\u5f15\u7528\u5916\u90e8\u6a21\u677f\u6765\u505aheader thanks", "num": "1174", "d": "8/2015"}, {"title": "make binding syntax consistent", "body": "quick reference latest syntax last updated sep html context currently several types bindings template reactive directives eg amp attribute values directly evaluated expressions current component scope contain mustache tags dynamic literal directives eg amp attribute values treated plain strings contain mustache tags always reactive reactive containing mustache tags two evaluate normal html attributes mustache tags converted internally prop bindings eg props attribute values treated plain strings contain mustache tags prop binding dynamic contains mustache tags directive param attributes eg amp treated almost normal attributes evaluated problem well probably noticed confusing many types attributes clear rule expressions expected mustache interpolations allowed specifically prop syntax could use improvement original intention making props require mustaches tags reactive dynamic prop look different normal html attributes given normal attributes contain mustache tags well still explicit enough also much common use dynamic props literal strings using mustache tags indicate reactivity simply intuitive another problem becomes awkward want pass literal numberboolean prop without mustache tags attribute value string write pass real number boolean currently vue autocasts literal props numbersbooleans possible may always want want pass string numbers proposal last updated pretty radical changes maybe imo conceptually much cleaner goal eliminate inside attribute values categorize syntax purpose text html interpolations handled also places mustaches used vue directives preserve prefix something special binding values always parsed expressions arguments multiple clauses one expression followed one filters previously preserves special syntax html core directives also preserved replaceable interpolations literal syntax core directives either reactive empty sometimes may want pass literal string custom directive instead dynamic expression similar literal directives want make explicit clearly know whether attribute value actually string expression longer concept literal directives use dotequal syntax indicate passing literal value directive directive function called literal string argument event handlers prefixed value always parsed expressions either method name statement eg raised people seemed really like fact starts imo event handlers deserve something different succinct html bind prefix html addition prefix shortened colon totally optional props similar normal attribute bindings nonprefixed props always passed literal strings pass dynamic prop add colon prefix also binding type indicators moved attribute value attribute name right equal sign special attributes including directive params amp literal directives appear together either directive component also use colon prefixes reactive behavior directive params evaluated vue tell dev mode child component element refs previously longer directives dedicated syntaxes see benefits explicit code says simpler smaller set core directives args directives multiple clauses expressions filters confusion mustache inside attributes see prefix always means value expression prefix always plain string eliminates edge cases like causing requests gets thrown away ie also eliminates need note please nt dislike proposal sake many changes changes proposed implemented backwards compatible way deprecation warnings migration unacceptably painful", "num": "1173", "d": "8/2015"}, {"title": "\u5efa\u8bae \u6307\u4ee4\u548c\u7ec4\u4ef6\u6dfb\u52a0\u4f18\u5148\u7ea7\u5c5e\u6027", "body": "vrepeat vrepeat \u4f18\u5148\u7ea7\u4e3a vrepeat \u4e00\u5b9a\u4f1a\u4fdd\u8bc1\u5728 vtap", "num": "1172", "d": "8/2015"}, {"title": "deprecate add", "body": "problem currently somewhat confusing behavior nothing key already exists even pass second argument supposed value hand functionality replaced almost cases seems unnecessary proposal deprecate use instead", "num": "1171", "d": "8/2015"}, {"title": "make strict mode default", "body": "problem currently asset passed component option becomes available component also descendants component view hierarchy although convenient cases encourages child component implicitly rely ancestor providing asset needs looking child component alone becomes unclear dependency comes makes hard locate source dependency impact maintainability large codebases many nested components proposal make strict mode default potentially remove strict config option altogether", "num": "1170", "d": "8/2015"}, {"title": "deprecate component param", "body": "ref discussion problem originally designed control transition timing dynamic components proven confusing cumbersome use declared parent template implemented child components potentially switched pick event name nt conflict anything else chance child component could dispatch event name proposal deprecate introduce new lifecycle hook tentative name called component insertion component inserted user calls passedin callback example activate hook called component inserted dom either static component form custom element dynamic component note called imperatively manipulate instance instance api methods like also component invoke already activated kept alive", "num": "1169", "d": "8/2015"}, {"title": "make alias required vrepeat", "body": "problem currently two ways write without alias withoutalias syntax supported long time issues makes unclear whether property belongs current repeat scope parent scope use magical refer primitive values allowing two different syntaxes complicates internal implementation component used without alias repeated object passed component component also default function fields returned merged passed object essentially mutating raw data array proposal make alias required", "num": "1168", "d": "8/2015"}, {"title": "deprecate favor", "body": "moved discussion tracking core problem context see distribution section tl dr browser vendors agree content distribution api web components current syntax likely replaced post describes two possible new apis imperative one new declarative one vue internal compilation cycle mostly interested new declarative api name slots proposal apple component template html shadow content using component rendered result benefits proposal current api much explicit exposed slots essentially become part component interface thus makes easier compose nested components proposal move api explicit select could coexist", "num": "1167", "d": "8/2015"}, {"title": "warn duplicate propsdata fields", "body": "problem currently props merged instance problems data props declare property name order priority merging clear prop overwrite field name data way around currently props initial values available inside functions field returned data gets overwritten prop merged clear whether component property private state prop passed thus changed parent unless go check component props declaration proposal move props name space example avoids merging problem either make reserved field make makes explicit something prop obtained outside component throw warning user defines duplicate fields", "num": "1166", "d": "8/2015"}, {"title": "value mustache dynamically updated custom directives", "body": "html first get right index value delete value array function executed still passes original index value changes get right index something changes array", "num": "1164", "d": "8/2015"}, {"title": "output values within textarea", "body": "hi whether possible implement using vuejs following problem", "num": "1163", "d": "8/2015"}, {"title": "computed properties calculation results inconsistent", "body": "different code sequence different computed result problem caused cache suggest switch control cache want result example example consolelog results old data new data example consolelog results old data old data new data html read detailcontent example results want javascript vueconfigdebug true vue new vue el demo data content old data methods readcontent function var self example javascript vueconfigdebug true vue new vue el demo data content old data methods readcontent function var self", "num": "1162", "d": "8/2015"}, {"title": "radio buttons vmodel vrepeat explode splice", "body": "hello friends found little problem solvable hour searching something like example code add item button code example code problem add item c two items b splice item b checked state gets exploded items item b work xd item b checked state lost space thats amazing iterate data course addition data correct case strange xd directive didnt help tried uids idea thanks advance nice weekend smiley", "num": "1161", "d": "8/2015"}, {"title": "change value button", "body": "hi actually issue framework rather question help button opens dropdown bootstrap click li dropdown change span text inside button basically simulates select tag jquery function works perfectly trying migrate code vuejs struggling would thing sure simple thing missing something thanks", "num": "1160", "d": "8/2015"}, {"title": "think vchange like angularjs needed vue think", "body": "implemented repo used following codes available like want detect changes even nt need basically define model need define model purposely use think like directive needed vue wrote article sorry written japanese tweet said twitter think agree opinion make pr already ready", "num": "1159", "d": "8/2015"}, {"title": "selected option tag list issue", "body": "state getting compiled help please", "num": "1158", "d": "8/2015"}, {"title": "suggestion add set silent mode", "body": "sure possible situations need alter data object fly dome compiled without firing watch event suggestion would adding silent option ex set foo true result without triggering watchers events", "num": "1157", "d": "8/2015"}, {"title": "add considering keypath", "body": "using set keypath go deep creating nested levels required nt happen using add maybe limitation add combined set documentation states keypath add well assuming work way let know wrong example", "num": "1156", "d": "8/2015"}, {"title": "select defaults recognized empty string", "body": "hi list options value empty string model set empty string well get synced default option empty easier see say check jsfiddle know new default option feature options dynamic situation could empty string option", "num": "1155", "d": "8/2015"}, {"title": "allow checkbox td clickable anywhere td", "body": "problem pretty simple one must simple solution table checkbox row problem works clicking around input within td click input directly automatically gets unselected click surrounding td anyone solution", "num": "1154", "d": "8/2015"}, {"title": "much worry ings", "body": "pretty simple sort going getting error advice anything funky code throwing var sorts foo bar baz new vue el app data category foo items id name one id name two id name three id name four id name five id name six id name seven id name eight id name nine id name ten filters sortbycategory function values category var sortorder sorts category return valuessort function b sortorderindexof aid b sortorderindexof bid return b along demo", "num": "1153", "d": "8/2015"}, {"title": "child cleaned dynamic component changes waitfor event triggered", "body": "click page wait component appear click page click log children see console click page immediately click page loads click log children see console stuck forever parent children array", "num": "1152", "d": "8/2015"}, {"title": "keepalive waitfor work together", "body": "click page click page click page since component cached compiled function called never emits event", "num": "1150", "d": "8/2015"}, {"title": "dynamic select clarification request", "body": "hi got v adding select options tag vrepeat deprecated already started refactoring code could specify attributes inflated repeated options text value example disabled style class attributes thanks", "num": "1149", "d": "8/2015"}, {"title": "auto transform property number even property assert type string", "body": "example followed initialisation warn expected string got number raised html vuecomponent name comp props type string", "num": "1148", "d": "8/2015"}, {"title": "suggestion access wrapped component inline", "body": "sometimes want access wrapped component vm inline example followed want something according value rewrite receive function property watch property context create property common vm html oninvalid invalid gt thisinvalid invalid think vue support feature followed compinvalid element directive create anonymous component like vrepeat meta property inline inlinevalue componentvalue", "num": "1147", "d": "8/2015"}, {"title": "vmodel von click checkbox different priority chrome firefox", "body": "want use vmodel von checkbox like jsfiddle chrome firefox alert different result get thx", "num": "1146", "d": "8/2015"}, {"title": "inherit work use vuerouter", "body": "mainjs file var vue require vue var vuerouter require vuerouter var vueresource require vueresource vueuse vuerouter vueuse vueresource var router new vuerouter history true savescrollposition true routermap require routes var app vueextend data function return isloggedin false name examplecom components appheader require componentsheader appfooter require componentsfooter routerstart app app windowrouter router access isloggedin property header component set inherit true getting undefined error note access components defines routes file routermap require routes", "num": "1144", "d": "8/2015"}, {"title": "", "body": "", "num": "1143", "d": "8/2015"}, {"title": "formatters parsers", "body": "way accomplish vue formatters parsers angular would reasonable request single value could maybe use computed property single nonreusable transformation want run value pipeline well ca nt also value ca nt use computed property anymore create component repeater none ideal current usecase trying convert simple online invoice creator jqueryspaghetti vue see values input elements areshould formatted currency underlying model value number run math", "num": "1141", "d": "8/2015"}, {"title": "try read optional props document fragment", "body": "fiddle js var foo vueextend props optionalprop type number required false new foo el documentcreatedocumentfragment results", "num": "1139", "d": "8/2015"}, {"title": "index available element vrepeat", "body": "fiddle according docs displaying list work js var item vueextend id item props index type number data function return index template index new vue el body components item getting", "num": "1138", "d": "8/2015"}, {"title": "template vif attribute nt render safari vuejs version", "body": "ran issue using vue mobilei using template tag create three layer nested structure vif attributebut innermost layer nt able render correctly safari ran well chrome android jsfiddle link could try running safari amp chrome see different renderings anybody ran issue help appreciated screenshot chrome screenshot safari thanks advance guys", "num": "1137", "d": "8/2015"}, {"title": "force vmodel update value", "body": "sometimes textfield set vmodel change due external javascript process like datepicker cases vmodel nt gets fired way forcing vue fetch actual value binding case changed vue nt notice", "num": "1136", "d": "8/2015"}, {"title": "suggestion clone object utility", "body": "plenty ways clone object however util method much like jquery maybe clone object utility would useful", "num": "1134", "d": "8/2015"}, {"title": "lost semicolon vuejs source code", "body": "hi \u4f51 thanks work vue fantastic add end line source code code compressed appears problem", "num": "1132", "d": "8/2015"}, {"title": "suggestion filter", "body": "hi experimenting vuejs little bit feel really great however opinion filter bit restricted nt allow empty string used country currency symbol popular time get ignored users therefore symbol used place format currency using thousand separator decimal point usual know pass space get rid currency symbol actually use space front currency value ideal think allowing empty string used currency symbol would appropriate space front currency value suggestion thanks excellent work vuejs anyway cheers rati", "num": "1131", "d": "8/2015"}, {"title": "laravue good practice", "body": "found repository called laravue uses laravel backend vue frontend engine question although looks convenient way author constructs app patterns vue uses example references whole app components allows encourages direct access function variables every components across app would potentially cause problems", "num": "1130", "d": "8/2015"}, {"title": "nested templates vrepeat fail silently safari", "body": "tested yosemite safari iphone ios output chrome output safari", "num": "1128", "d": "8/2015"}, {"title": "vshow allowing multiple boolean args", "body": "ability comma separated booleans even multiple booleans minimal logic andor single vshow would great thanks awesome tool", "num": "1127", "d": "8/2015"}, {"title": "index vrepeat orderby", "body": "got list displayed html name phone javascript new vue el vue use access original user however manipulate list ordering andor filtering eg points element ordered list like removing element original users array stated works original filtered ordered lists", "num": "1126", "d": "8/2015"}, {"title": "content select expected contents nt mutual exclusive", "body": "description followed online demo check html", "num": "1125", "d": "8/2015"}, {"title": "vmodel number radio", "body": "casting number using attribute nt work inputs eg", "num": "1124", "d": "8/2015"}, {"title": "\u8bf7\u95ee\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u7ec4\u4ef6", "body": "", "num": "1123", "d": "8/2015"}, {"title": "vue loosing bindings even using set method using keypath props values", "body": "strange behavior upgrading sure going ca nt explain really created simplified fiddle demonstrate sure something wrong looks like vue problems bindings", "num": "1122", "d": "8/2015"}, {"title": "", "body": "html title uppercase start add", "num": "1121", "d": "8/2015"}, {"title": "\u591a\u4e2aselect component\u65f6\u63d0\u793acannot read property childnodes undefined", "body": "read property childnodes undefined", "num": "1120", "d": "8/2015"}, {"title": "outin transition nt work properly three transitioning elements", "body": "component waits component leave component begin animating component replaced component nt wait component leave animates immediately issue nt happen increase second delay test method component started animating component waits animate", "num": "1119", "d": "8/2015"}, {"title": "multiple nested template rendered ios", "body": "issues shown title example inside content rendered ios android ok", "num": "1118", "d": "8/2015"}, {"title": "calling done immediately enter leave hook causes error", "body": "found trying find workaround click one click two get uncaught typeerror read property removechild null", "num": "1117", "d": "8/2015"}, {"title": "transition hangs transition immediately cancelled", "body": "fiddle think transitionend event fired since transition happened using callback enter leave fixes two problems enter animation cancelled still waits callback component leave animation second component start animating leave hook would take account elements current opacity calculate correct timeout eg click button two component page one leaving one entering keep clicking several", "num": "1116", "d": "8/2015"}, {"title": "support object values", "body": "using format dynamic options becomes complex get back display since binds one must run computed property filter get point would possible support syntax like would let us get value back like idea feel free say nay", "num": "1115", "d": "8/2015"}, {"title": "children calling root methods reactive", "body": "wanted build system update entire app change language idea root vm holds current language actually globalize object method change language translation method problem without inherit true child components nt get methods scope nt want add inherit true every component tried write mixin defines methods every component need forwards root vm simplified version edit child components actually children testcase fixed works except children updated change language also looked uses vueprototype add method everything think run issue tried make reactive like came different solution work ok better way", "num": "1114", "d": "8/2015"}, {"title": "use vrepeat inlinetemplate component tr table row within tbody", "body": "following example produces one empty instance tr instead iterating records array html javascript var model new vue template html replace true data records title title components recordrow methods onclick function model mount model appendto divcontainer found workaround situation described would great see fixed least explained possible workaround add declaration component tr set vue replace component descriptor false html javascript var model new vue template html replace true data records title title components recordrow replace false lt set replace false methods onclick function model mount model appendto divcontainer", "num": "1112", "d": "8/2015"}, {"title": "firebase example", "body": "firebase validation example broken adding one user email allow adding new users without validation required", "num": "1110", "d": "8/2015"}, {"title": "data binding updates nt reflected inside textareas", "body": "put tag inside tags former stay sync data bindings latter nt budge fiddle", "num": "1109", "d": "8/2015"}, {"body": "csp branch purpose", "d": "8/2015"}, {"body": "nt use case transition visibility components statedriven managed imperatively", "d": "8/2015"}, {"body": "like except repeating code vue blablabla moduleexports data function return initialized false ready function thisinitialized true would much handy write something like parent template", "d": "8/2015"}, {"body": "meant used parent component though consider use case mentioned popup lightbox sidebar part app whether displayed managed piece state app eg app template something like component also needs able control showhide state pass parent state component twoway prop inside sidebar close setting either case nt see need initialization transitions", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "using component like without alias", "d": "8/2015"}, {"body": "oh might vm observing prefixed properties data contain lot properties", "d": "8/2015"}, {"body": "vast majority properties defined using nt prefixed using properties prefixed define directly vm like however using without aliases using alias significant performance increase vue without aliasing vue aliasing however still quite lot slower vue aliasing try narrow specifically could causing slow", "d": "8/2015"}, {"body": "briefly describe question look like using lot", "d": "8/2015"}, {"body": "commit imagine related try commenting lines local files see makes difference", "d": "8/2015"}, {"body": "wow suspicious seemingly right change commented lines practically restored performance numbers vue vue without looking code something toggle config options answer previous questions using handful times copy paste using", "d": "8/2015"}, {"body": "ok using", "d": "8/2015"}, {"body": "seems caused sync mode merging lot props repeated object every merge called thus forcing entire list reevaluated tested would longer happen", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "read filter affects dom value want limit model value two decimals need still write filter", "d": "8/2015"}, {"body": "filter fiddle removes nonnumeric characters nt round value want round value model filter", "d": "8/2015"}, {"body": "happen every mustache tag provide reproduction", "d": "8/2015"}, {"body": "makes sense although difference terms memory usage pretty small computed properties results less memory cases probably nt need worry", "d": "8/2015"}, {"body": "agree setting default especially since computed properties simple would allow developer finetune application applying caching needed rather removing caching everywhere", "d": "8/2015"}, {"body": "personally debated bit introducing change yeah seems trade memory performance really better default cache default false", "d": "8/2015"}, {"body": "directives compilation priorities default priority custom directive bound already removed able get vmodel value use priority higher", "d": "8/2015"}, {"body": "thanks sorted", "d": "8/2015"}, {"body": "something like mind nt got time great someone wants work said relies lot vue internals maybe first step start ux tool ie present reactivity users component hierarchy would ui like stage think wise start things implementationbound", "d": "8/2015"}, {"body": "forgot document second category showing observable values instead gettersetters chrome extension useful works looking dom means observe declaratives want method looking observable values resolved needs work even stepping code least breakpoint hit could something runs console", "d": "8/2015"}, {"body": "would ui like yes implementation would much easier beginning suggestion ui design ui could run second web page browser based would also mean could run atom editor facebook nuclide later could even sourcebased linking vue user source code like real ide last part would obviously long terms", "d": "8/2015"}, {"body": "markhahn needs sort communication bridge injected app page injecting ui current page", "d": "8/2015"}, {"body": "note lot ideas flowing moment many bad ideas good way start designing needs sort communication bridge injected app page idea node bridge debug api developers hook debuggers chromium apis low level vue could least querying keypaths find observables acting beginning simple gdblike commandline repl interface could used talk debug api api would hard first ui would easy since would map user interaction api calls later higherlevel uis like one probably thinking could implemented api would one pullrequest vue api everything else could decoupled affect vue core injecting ui current page yes could done even api idea api could called anywhere even injected code current page api looks hard drop idea quickly really feel api proven method using debuggers course disagree api idea drop final say ideas would nt work unless agree", "d": "8/2015"}, {"body": "let close move vuejsdiscussion time work nodechromium debug api seems bit lower level mind note gives clean state instead gettersetters even paused break point think would generally useful something along lines ember inspector", "d": "8/2015"}, {"body": "amber example looks quite nice sun aug evan notifications githubcom wrote closed reply email directly view github", "d": "8/2015"}, {"body": "please specific happen upgrade version using previously code look like ca nt expect people help posting screenshot", "d": "8/2015"}, {"body": "previous version updated error", "d": "8/2015"}, {"body": "vuerouter tests working properly need real demo see wrong", "d": "8/2015"}, {"body": "strange works perfectly except messages console project error point", "d": "8/2015"}, {"body": "looked little bit mistake turned certainly find element id error gave router causing falls", "d": "8/2015"}, {"body": "error occurs announcement", "d": "8/2015"}, {"body": "unplugged router error still announcement", "d": "8/2015"}, {"body": "could due fact used nodejs php problems", "d": "8/2015"}, {"body": "using router start app router closing provide repro actual error", "d": "8/2015"}, {"body": "cited example moment code provided example", "d": "8/2015"}, {"body": "turns two errors one vue second vuerouter two identical error reproduce example able arises error", "d": "8/2015"}, {"body": "example nt even using router correctly show error originally described", "d": "8/2015"}, {"body": "router code taken example minor changes", "d": "8/2015"}, {"body": "mounting two vue instances onto element", "d": "8/2015"}, {"body": "even hook selectors disable error still persists", "d": "8/2015"}, {"body": "means example irrelevant error need provide one actually shows error", "d": "8/2015"}, {"body": "link showed code fact used", "d": "8/2015"}, {"body": "showing error screenshot many times explain ca nt help error happens means something wrong setup shown", "d": "8/2015"}, {"body": "new \u4e00\u4e2a vue \u6765\u66f4\u65b0\u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4e0d\u8981\u7528 svg \u5b57\u7b26\u4e32\u8d4b\u503c\u554a vue \u53ef\u4ee5\u76f4\u63a5\u7ed1\u5b9a svg \u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6307\u4ee4\u5728 vue \u91cc\u9762\u76f4\u63a5\u7528", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u53ef\u80fd\u662f", "d": "8/2015"}, {"body": "app cpde async factory function slider component hooks", "d": "8/2015"}, {"body": "part vue concern general recommendations", "d": "8/2015"}, {"body": "btw", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u67e5\u770b\u63a7\u5236\u53f0", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4f60\u770b\u5230 webpack \u7684\u8b66\u544a\u6ca1\u6709 \u4f1a\u5bfc\u81f4 vue", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "figured grabbing value url hash hash value true nt get cast boolean checkbox get checked casting boolean works sure broke", "d": "8/2015"}, {"body": "\u786e\u5b9e\u662f\u4e2a", "d": "8/2015"}, {"body": "pluralize filter follows simple rules handle irregular special cases amp write custom filter type formatting", "d": "8/2015"}, {"body": "please provide reproduction exactly environment working", "d": "8/2015"}, {"body": "fault chrome extension block esc event spent whole afternoon debug sorry wasting time", "d": "8/2015"}, {"body": "\u0442\u0443\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u0437\u0430\u0434\u0430\u044e\u0442 \u0432\u0430\u043c \u0441\u044e\u0434\u0430 \u0438\u043b\u0438 vuejsdiscussion", "d": "8/2015"}, {"body": "azamatsharapov \u0430 \u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044f \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u0430\u043b \u0442\u0430\u043c \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0434\u043e\u043a\u0430\u0445 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0432\u043e\u0434\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442\u0443", "d": "8/2015"}, {"body": "wormen \u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0443 \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u044b\u0445 \u0443 \u0432\u0430\u0441 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0435 bug report \u0438 \u043d\u0435 feature request \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0447\u0442\u043e \u043a\u0443\u0434\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issue \u0433\u0438\u0442\u0445\u0430\u0431 \u0432\u0430\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u044d\u0442\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432\u044b\u0434\u0435\u043b\u044f\u044f \u0435\u0451 \u043a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u0436\u0435 \u0434\u043e\u043a\u0438 \u0442\u0430\u043a \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b \u0447\u0442\u043e \u0432 \u0434\u043e\u043a\u0430\u0445 \u0447\u0435\u0433\u043e \u0442\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0430\u044f \u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044d\u0442\u043e \u0441\u0430\u043c\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043b\u0438 issue \u0442\u0430\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u044c", "d": "8/2015"}, {"body": "\u0430 \u043d\u0430\u0441\u0447\u0435\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u043a\u0438 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u0442\u043e \u0442\u0430\u043c \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f \u043d\u0438\u0447\u0435\u0433\u043e \u043e \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u0430\u0445 selector \u0431\u0435\u0440\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u0432\u0442\u043e\u0440\u043e\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442", "d": "8/2015"}, {"body": "\u044d\u0442\u043e \u044f \u0432\u0438\u0434\u0435\u043b \u0432 \u0442\u043e\u043c \u0438 \u043f\u0435\u0447\u0430\u043b\u044c", "d": "8/2015"}, {"body": "\u8fd9\u91cc\u4f60\u7b49\u4e8e\u628a \u8ddf\u81ea\u5df1\u548c", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "whwnow", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "ca nt directly use class subclass vue use really want classes take look", "d": "8/2015"}, {"body": "think something like js import basewidget basewidget export default class griditem extends basewidget constructor options optionstemplate templatewidgetgriditem html super options", "d": "8/2015"}, {"body": "nice install version via npm", "d": "8/2015"}, {"body": "sdebacker proposal proposing changes people provide feedback", "d": "8/2015"}, {"body": "yes proposed changes already pushed branch", "d": "8/2015"}, {"body": "sdebacker install branch note branch unstable use risk", "d": "8/2015"}, {"body": "thanks returns matches found", "d": "8/2015"}, {"body": "sdebacker version npm using", "d": "8/2015"}, {"body": "upgrade npm via homebrew perhaps need", "d": "8/2015"}, {"body": "weird tried works maybe typo", "d": "8/2015"}, {"body": "great proposal", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "component scoping still compiled parent scope except scope", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "switched zsh bash run", "d": "8/2015"}, {"body": "interpreting correctly deprecation vrepeat lieu vfor create true partials opposed vms within standard use case experience loss functionality passing object back event handlers", "d": "8/2015"}, {"body": "mattymil yet see use case anonymous child vm necessary cases pass event handler data object repeated array", "d": "8/2015"}, {"body": "vue \u7684\u6e32\u67d3\u5f53\u7136\u4e0d\u4f1a\u5305\u62ec \u4f9d\u8d56 inline \u5143\u7d20\u4e4b\u95f4\u7684 whitespace margin", "d": "8/2015"}, {"body": "looking forward breaking changes", "d": "8/2015"}, {"body": "like except worried killing agree good pattern general sometimes useful easiest way handle complex interactionsdata passing tightly coupled components", "d": "8/2015"}, {"body": "davidkhess yet come across situation absolutely needed make work sure make things easy necessarily good way direct parentchild situations always use props multiple nested components big mess performance implications trying share something entire component tree put access", "d": "8/2015"}, {"body": "see like convenience javascript closure visibility everything every parent scope create typically capture couple vars practice overuse closures would bad style certainly come handy patterns code tightly coupled", "d": "8/2015"}, {"body": "davidkhess know like lexical scoping however difference javascript functions need written together get lexical scoping fairly clear understand look file components definition unit isolation often separated different files used together defined template parent component look child component ca nt easily reason context used make components maintainable rely self discipline ie use need exactly want move away want system maintainablebydefault", "d": "8/2015"}, {"body": "use rarely components declared within another component file way visually see nesting implications much like javascript closure mainly playing devil advocate could live without years burned couple times decisions overly restrict system behavior later forced go back open back personally comfortable position got enough vueyears belt yet take strong stance", "d": "8/2015"}, {"body": "base component widget extending multiple variations text widget image widget etc use component select correct widget pass props different widgets would need different props currently place use extend worries hold widgets array main app vrepeat create", "d": "8/2015"}, {"body": "would removing using lead get wrong element example would query result using many components mixins apply behaviors sorry nt seen new query api ignore comment html", "d": "8/2015"}, {"body": "terencez sure understood original usage would query api solve", "d": "8/2015"}, {"body": "sorry nt describe issue clearly problem select element declared template including transcluded elements example html want select element element using easy locate using get result reason ignoring comment assume problem resolved new query api provided", "d": "8/2015"}, {"body": "predefine things need also put things depend certain data inside block", "d": "8/2015"}, {"body": "hi evan thanks quick reply followed advise still get errors console changed push items array using method makes difference missing something updated js fiddle thanks kris", "d": "8/2015"}, {"body": "meant", "d": "8/2015"}, {"body": "worked great thanks however getting really weird behaviour rename todo todotable getting errors console funny enough remove span template error gone", "d": "8/2015"}, {"body": "actually using fine use options warning heuristics bit aggressive ignore also considering improving param since really intuitive", "d": "8/2015"}, {"body": "also somewhat annoying warnings appear even repeating", "d": "8/2015"}, {"body": "dgerber gon na gone warn used inside select", "d": "8/2015"}, {"body": "ok longer necessary allow bind even object", "d": "8/2015"}, {"body": "see", "d": "8/2015"}, {"body": "please provide reproduction code nt show problem", "d": "8/2015"}, {"body": "screenshot submission along array enough", "d": "8/2015"}, {"body": "correctly bag", "d": "8/2015"}, {"body": "enough need actual code reproduces bug like ca nt fix bugs looking screenshots", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "sorry save", "d": "8/2015"}, {"body": "duplicate objects array push clone instead code also quite messy fixed", "d": "8/2015"}, {"body": "vmodel nt work hidden input nt using hidden input using vue store state dom store js directly", "d": "8/2015"}, {"body": "please post questions please read docs opening questions", "d": "8/2015"}, {"body": "use filter please open questions vuejsdiscussion", "d": "8/2015"}, {"body": "\u5982\u679c\u65b0\u65e7\u5185\u5bb9\u6709\u90e8\u5206\u91cd\u590d\u7684\u8bdd\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a index", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "listvue newarray b c", "d": "8/2015"}, {"body": "xiaoyou\u4e0a\u6b21podcast\u91cc\u8bf4\u7684animation\u7684\u94a9\u5b50\u4ec0\u4e48\u7684 \u662f\u6307\u7684\u662f\u5565\u54c7", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u73b0\u5728 \u5bf9\u7528\u6237\u6765\u8bf4\u663e\u793a\u5168\u90e8 \u5c06\u6765\u7684\u7248\u672c\u4f1a\u9488\u5bf9", "d": "8/2015"}, {"body": "please provide reproduction nt work intended", "d": "8/2015"}, {"body": "consider following paginated list multiple columns javascript function entitiesperviewport paginated list child scrollable container var clientheight parent elclientheight return thiscolumns mathround clientheight thisentityheight prior change computed property evaluation always worked must placed docs state computed properties cached lazily reevaluated necessary offer explanation conditions invalidate cache suspect changes tracked invalidates cache", "d": "8/2015"}, {"body": "hmm guess personally use computed properties making view declarative ie bind template never rely imperative code never meant used getter guess lot people teffenellis right cache invalidates reactive dependency changed vue way knowing external dependency like changed make cache optional since makes performance difference computed property unusually expensive", "d": "8/2015"}, {"body": "believe adding config making computed property cache optional might unnecessary clarification documentation help user understand computed property appropriate getter function computed properties cached reevaluated reactive dependency changed thank", "d": "8/2015"}, {"body": "teffenellis could done unobtrusive way default work like without caching really need caching specific scenario enable perproperty basis", "d": "8/2015"}, {"body": "per computed configuration defaulting", "d": "8/2015"}, {"body": "make one step plus boolean value alwayscached alwaysreevaluated properties", "d": "8/2015"}, {"body": "karevn nt really see point making function makes unnecessarily complicated", "d": "8/2015"}, {"body": "hard way function bit overkill may helpful complex cases make work ways function use result mark cache record stale boolean use enabledisable caching", "d": "8/2015"}, {"body": "think making accept function make confusing people may end creating slow apps nt use correctly thing computed properties remember somebody complaining performance evan advising use heavy operations inside computed properties implemented caching", "d": "8/2015"}, {"body": "computed properties evaluated point easier make one computation function handler computed properties smarter removed alltogether sake simplicity tried use current state ended using approaches recomputed data methods could control caching strategy effectively enough imho question make easy use newbies powerful enough advanced usage words make aggressively cached default evan cache option optional function cache advanced usage example current app lots computations related window object dom element sizes would useful control caching one function passed several computed properties least api mark cached computed value stale", "d": "8/2015"}, {"body": "karevn nt think really understand computed properties automagic always uptodate property used compute value based reactive values putting lot windowdom sizes inside computed properties expect act dependencies say using wrong find useful", "d": "8/2015"}, {"body": "got computations based vue reactive values pretty cheap bother caching", "d": "8/2015"}, {"body": "karevn cheap time also say computed property mapfilterreduces huge array slow let suppose additional computed properties rely one calling expensive computed property many times necessary", "d": "8/2015"}, {"body": "agree still think adding control caching hurt", "d": "8/2015"}, {"body": "meant function value option make sure confusion function return value determine cache flush ie returns true keep cached false triggers recalculation", "d": "8/2015"}, {"body": "karevn would useful know call function call reactive dependency changes really different cached", "d": "8/2015"}, {"body": "already implemented shipped next release", "d": "8/2015"}, {"body": "checked release ca nt see change area meant work", "d": "8/2015"}, {"body": "bad overlooked pr writing release note", "d": "8/2015"}, {"body": "suppose add release notes", "d": "8/2015"}, {"body": "actually minor issues regarding feature officially include patch release", "d": "8/2015"}, {"body": "thanks great effort greetings czech republlic evan notifications githubcom actually minor issues regarding feature officially include patch release reply email directly view github", "d": "8/2015"}, {"body": "shipped", "d": "8/2015"}, {"body": "supposed work thought eg clicking checkbox willl sets finished model instead true", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "note vue templates parsed actual html tag template parsed actual tag breaks expression rule thumb never include tags inside mustache expressions vue stringbased template language use either filter computed property case", "d": "8/2015"}, {"body": "thanks detailed report appreciated", "d": "8/2015"}, {"body": "\u76f4\u63a5", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "textarea \u7684 selectionstart selecitonend \u8fd9\u79cd", "d": "8/2015"}, {"body": "\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "duplicate yes going added", "d": "8/2015"}, {"body": "\u4e0d\u60f3\u901a\u8fc7props", "d": "8/2015"}, {"body": "\u63d0\u95ee\u8bf7\u5230 vuejsdiscussion", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "peaktai", "d": "8/2015"}, {"body": "please post questions vuejsdiscussion function access", "d": "8/2015"}, {"body": "merci beaucoup thanks tip vuejsdiscussions", "d": "8/2015"}, {"body": "inserted content follow component scope rules seems looking inlinetemplate", "d": "8/2015"}, {"body": "hi evan looked still getting weird behaviour fiddle shows looks like correctly compiled child scope without needing use note however binding nt update type box fiddle shows happens put component longer compiles component binding still nt update type box sure make", "d": "8/2015"}, {"body": "ah sorry nt look original fiddle careful enough related rather manually mounting vue instance inside another use one toplevel instance", "d": "8/2015"}, {"body": "ok thanks help", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "matmoo understandable interested another time example", "d": "8/2015"}, {"body": "wormen assume english native language understanding question correctly sorry", "d": "8/2015"}, {"body": "matmoo place clear", "d": "8/2015"}, {"body": "decision needed", "d": "8/2015"}, {"body": "wormen people community speak russian nt afraid duplicate messages russian although probably ask questions vuejsdiscussion vue gitter \u0432 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u044e\u0434\u0438 \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u043e\u0440\u0443\u0441\u0441\u043a\u0438 \u0442\u0430\u043c \u0447\u0442\u043e \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u0432 vuejsdiscussion \u0438\u043b\u0438 vue gitter", "d": "8/2015"}, {"body": "simplesmiler thanks", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "try", "d": "8/2015"}, {"body": "perfect thank", "d": "8/2015"}, {"body": "itangog nt work wrapped", "d": "8/2015"}, {"body": "inside wo nt register top vm could many conflicting see handle official todomvc example", "d": "8/2015"}, {"body": "sure read code trying break everything written currently use dispatch event component tell parent selected bound main app broadcasts components message say new component selected works exactly thought made sense could change use way prop start going multiple layers gets bit messy imo still using internally let live add new global emitter people use current system nt work", "d": "8/2015"}, {"body": "use heavily willing rewrite everything really starting feel messy", "d": "8/2015"}, {"body": "start going multiple layers gets bit messy imo wrote something like earlier probably wo nt come soon events use sometimes global utility would useful interesting cases events dev centralizing app data state", "d": "8/2015"}, {"body": "adding global would nice please nt remove current ones find useful know intent improves readability use three heavily mon aug azamat notifications githubcom wrote start going multiple layers gets bit messy imo wrote something like context earlier probably wo nt come soon events use sometimes global utility would useful interesting cases events dev centralizing app data state reply email directly view github", "d": "8/2015"}, {"body": "also heavily rely relied event bus finished projects really felt bit messy eventually time sending events controller instance top handled sometimes another event broadcast chain sort globalized localized system implement something like really love idea please make sure switched custom modules node ecosystem like one thing consider us use sort modularisation like webpack browserify really make sense implement eventbus instance existing eventbus fingertip writing", "d": "8/2015"}, {"body": "markhahn remove anything plenty time migrate honestly think benefits decoupling event system view structure outweighs express intent example global event bus grep know former trigger latter event propagation depends components structured ca nt sure nirazul currently vue instances implement emitter interface already matter exposing internals already totally optional sure use whatever external event library want since without global emitter would common pattern good make sure users using certain build tools still access functionality", "d": "8/2015"}, {"body": "honestly think benefits decoupling event system view structure outweighs express intent broadcast dispatch realized arguing strongly simplicity removing things agree removed mon aug pm evan notifications githubcom wrote markhahn remove anything plenty time migrate honestly think benefits decoupling event system view structure outweighs express intent broadcast dispatch example global event bus grep emit event event know former trigger latter event propagation depends components structured ca nt sure nirazul currently vue instances implement emitter interface already matter exposing internals already totally optional sure use whatever external event library want since without broadcast dispatch global emitter would common pattern good make sure users using certain build tools still access functionality reply email directly view github", "d": "8/2015"}, {"body": "building application global event bus pattern lead app easier manage think building common ui components think useful communicate relative components like structure intend coupled structure information also carried events implicit example closes also let close easy event", "d": "8/2015"}, {"body": "menu closes also let submenus close easy broadcast menuclose event event one name without namespace problems global bus would require awkward namespacing code tue aug pm terencez notifications githubcom wrote building application global event bus pattern lead app easier manage think building common ui components think broadcast dispatch useful communicate relative components like menu menuitem submenu structure intend coupled structure information also carried events implicit broadcast dispatch example menu closes also let submenus close easy broadcast menuclose event reply email directly view github", "d": "8/2015"}, {"body": "terencez markhahn see use case control boundary events right prevent event dispatched go outside remember corresponding event handler contain inserted content nt implicit namespace problem remember manually fragile pattern part unhappy current implementation love see way solve problem keeping usefulness", "d": "8/2015"}, {"body": "control boundary events confused global bus boundaries right must misunderstanding meaning boundary wed aug evan notifications githubcom wrote terencez markhahn see use case control boundary events right prevent event dispatched menuitem go outside menu remember return false menu corresponding event handler boardcast menuitem contain inserted content nt implicit namespace problem remember manually fragile pattern part unhappy current implementation love see way solve problem keeping usefulness reply email directly view github", "d": "8/2015"}, {"body": "markhahn yeah true agree global event bus issues maybe want event listeners default ie broadcasted dispatched event handled stops unless handler explicitly pass would naturally contain events sent within subtree nt accidentally affect parts application", "d": "8/2015"}, {"body": "would prefer keep way clearly personal preference lazy arguments made either default return good coding would make every return explicit grin wed aug pm evan notifications githubcom wrote markhahn yeah true agree global event bus issues maybe want event listeners return false default ie broadcasted dispatched event handled stops unless handler explicitly pass return true reply email directly view github", "d": "8/2015"}, {"body": "like idea defaulting specifying event propagate semantic providing handler callback executed want event propagate something like js handler propagate eventa function data propagate something data handler propagate eventb function data propagate something data propagate", "d": "8/2015"}, {"body": "youngsteveo agreed definitely worth considering", "d": "8/2015"}, {"body": "return true semantic standard used everywhere everyone know means semantic providing easy migration path may seem easy looks like lot unneeded complexity everyone want change something works someone show example current methods nt work break something wed aug pm ryan p kilby notifications githubcom wrote import vue vue vueextend emitters dispatch vuedispatchbus components created function dispatch function data bus propagate methods thething function couple thoughts deprecating existing emitters providing easy migration path different buses provide different behaviors events propagated throughout vue hierarchy thought current dispatch emitter similar dom event bubbling whether good thing nt know familiar mental model regular dom event handlers maybe solution separate emitter behavior bus vues would register multiple buses possiblities dispatch bus vue hierarchy aware sends events vue hierarchy broadcast bus vue hierarchy aware sends events vue hierarchy global bus vue hierarchy agnostic broadcasts events vues registry local bus like current emit could maybe default required bus thoughts emit could take optional bus name specify bus emit message onto defaults local bus otherwise existing dispatch broadcast methods would provided respective buses shortcuts calling emit child vuescomponents automatically register reply email directly view github", "d": "8/2015"}, {"body": "sorry prematurely submitted comment hashing thoughts thought able delete sent email", "d": "8/2015"}, {"body": "markhahn imagine component say includes private child component communicates dispatching event eg want make component reusable nt want events dispatched child leak outside potentially affect higherup component also happens listen event sure avoid namespacing events full control whole application component used someone else unknown environment guarantee dispatched event wo nt accidentally trigger unwanted handler tree ensure event nt leak intercept level current api explicitly return probably people", "d": "8/2015"}, {"body": "good example understand argue reverse return truefalse default continue argue anything complex wed aug pm evan notifications githubcom wrote markhahn imagine component say menu includes private child component menuitem menuitem communicates menu dispatching event eg closed want make component reusable nt want closed events dispatched child leak outside menu potentially affect higherup component also happens listen closed event sure avoid namespacing events thats full control whole application component used someone else unknown environment guarantee dispatched event wo nt accidentally trigger unwanted handler tree ensure event nt leak intercept menu level current api explicitly return false probably people reply email directly view github", "d": "8/2015"}, {"body": "markhahn opinion literal booleans easily become antipatterns used function parameters return values unless function name semantically indicates expecting boolean like something like example boolean parameters make code less semantic example looks like function saving object third param second param would look function definition find params better api would something like pretty much reason saving object want upsert option true nt want log anything semantic regarding make analogies returning indicate really means mean mean event successfully handled mean event propagate mean backend operation successful everyone know means semantic really true pun intended jk everyone knows means expected intrinsic semantic explicit", "d": "8/2015"}, {"body": "agree everything pointed although using less ambiguous call example always seen return false mean stop propagating talking reversing think would really bad would opposite standard would really confuse everyone maybe simple call would unambiguous semantic still argue meaning stop propagation would fine know opinion flipflopping place try think things better typing least stimulating thinking hope btw googling semantic results relating meaning language logic meaning events clearly stop propagating semantic semantic", "d": "8/2015"}, {"body": "markhahn completely agree using event handler stop propagation common however firmly reject semantic meaning events clearly stop propagating semantic knowing thing make explicit subjectively know meaning applying context experience look objectively boolean context beyond would argue would much ugly said guess gets job done end day", "d": "8/2015"}, {"body": "first started working components vue assumed event propagation stopped first component listening got hit thats made sense course carefully reading docs aware return false want propagate something like propagate", "d": "8/2015"}, {"body": "necessary make listening events dispatch check event dispatched handler event attribute optional root component call broadcast stop propagation default", "d": "8/2015"}, {"body": "couple thoughts could fix namespace issue using reverse domain naming instance comexampleclosed kind verbose would work viewmodel could declare terminates event hierarchy leaf node starts new event hierarchy point events nt propagate across broadcast sends event new hierarchy dispatch sends event parent event hierarchy propagate call approach would work used consistently handler would declarative setting viewmodel handlers would nt need worry option could also generalized event bus pattern call option root viewmodel single event bus inherited children hierarchy hitting viewmodel declares everything share new bus actually like option", "d": "8/2015"}, {"body": "davidkhess interesting ideas one problem call event root solution defines upperbound events lowerbound relies child component also declare event root strong guarantee", "d": "8/2015"}, {"body": "true enough ie optin mechanism event forwarding default behavior safer ca nt think way option declaratively without creating lot extra declarative setup least isolated event handlers", "d": "8/2015"}, {"body": "ok problem extra argument events may emit unknown length arguments simply append end argument list handler nt really know one arguments length different guess go although less explicit seems straightforward solution", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "vue \u6709 partial", "d": "8/2015"}, {"body": "probably data become synonym", "d": "8/2015"}, {"body": "azamatsharapov probably libs rely attributes nt know user really wants data attribute prop", "d": "8/2015"}, {"body": "really like proposal way code speaks looks even cleaner", "d": "8/2015"}, {"body": "whilst agree like fact v becasue easy understand vue based attribute rather third party anything else could config value becasue would quite like use u still leaves e looking thml know part vue system", "d": "8/2015"}, {"body": "matmoo literal directives need used together reactive directives eg makes sense also component also used components treated like directive params beginning nonprefixed exception actually never liked since always considering deprecating", "d": "8/2015"}, {"body": "actually suppose makes consistent props component", "d": "8/2015"}, {"body": "hello use von directive one tag bind one event like question please give suggestsforgive poor english", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "azamatsharapov thx", "d": "8/2015"}, {"body": "like proposal especially get nonbreaking way deprecation warnings indeed confusing keeping track literals dynamic literals expressions apply", "d": "8/2015"}, {"body": "overall simplifies understanding code thing personally nt like bullet syntax sometimes clean easy understand example html sample button achieve result new syntax", "d": "8/2015"}, {"body": "gapipro agree string concatenation bit ugly syntax html sample button", "d": "8/2015"}, {"body": "would nt appropriate way handle particular case many attributes behave like", "d": "8/2015"}, {"body": "davidkhess yeah could something like html sample button still clear interpolation syntax", "d": "8/2015"}, {"body": "nt know personally prefer since explicit going", "d": "8/2015"}, {"body": "think go step support object syntax remove addition accept array html", "d": "8/2015"}, {"body": "would nt nicer instead kind object syntax support html expression string", "d": "8/2015"}, {"body": "gapipro find unnecessary difference format data handle expression example", "d": "8/2015"}, {"body": "yes unnecessary like easier notice coding html", "d": "8/2015"}, {"body": "gapipro idea make attribute databindable adding similar better syntax", "d": "8/2015"}, {"body": "oh ok got", "d": "8/2015"}, {"body": "like", "d": "8/2015"}, {"body": "two thumbs", "d": "8/2015"}, {"body": "like somewhat related find always using never advantage likely use one ultimately wondering good case deprecated favor", "d": "8/2015"}, {"body": "vshow showshides element css vif adds removes dom possible use vshow faster think got right", "d": "8/2015"}, {"body": "possible use vshow faster matmoo source fact", "d": "8/2015"}, {"body": "\u73b0\u5728\u5c31\u6709 priority", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "attribute", "d": "8/2015"}, {"body": "agree", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "implemented alpha branch need removal beta", "d": "8/2015"}, {"body": "currently building large application strict turned really beneficial", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "considering would one pass assets parent child imagine slider component lets consumer specify custom transition slides would possible extending component overriding assets currently possible containing component asset provider component hacky gets job done", "d": "8/2015"}, {"body": "simplesmiler imagine component would come set predefined transitions let user pick one although theoretically pass like looks hacky", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "never used pattern would nt want rely", "d": "8/2015"}, {"body": "confirmed deprecation warning implemented alpha option removed beta", "d": "8/2015"}, {"body": "agreed", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "would affect iterating object edit nvm looks like use alias iterating object already alias value property", "d": "8/2015"}, {"body": "cheapsteak yep difference instead", "d": "8/2015"}, {"body": "way alias key well nested repeats", "d": "8/2015"}, {"body": "yeah currently angular really want avoid complicating syntax something", "d": "8/2015"}, {"body": "maybe vrepeat supported objects first place single way order object keys upd guess irrelevant issue still", "d": "8/2015"}, {"body": "single way order object keys list web page always ordered showing series images order tue aug pm denis karabaza notifications githubcom wrote maybe vrepeat supported objects first place single way order object keys reply email directly view github", "d": "8/2015"}, {"body": "simplesmiler", "d": "8/2015"}, {"body": "markhahn dom elements certainly ordered seems like repeat array point message parenthesis imaginary part syntax", "d": "8/2015"}, {"body": "dom elements certainly ordered contents dom nt gave example nt care order images shown tue aug pm denis karabaza notifications githubcom wrote markhahn dom elements certainly ordered vrepeat val object orderby key seems like repeat array point message parenthesis imaginary part syntax reply email directly view github", "d": "8/2015"}, {"body": "guess opened new issue oh well markhahn data unordered sure way user perceives data representation may unordered representation developers working always ordered think abstract far away fact different scenarios things without order sometimes care particular order items visual representation independent order absolutely positioned points scatterplot sometimes care particular order items want ordering stable refresh insertion new item items nt jump around much participants discussion sometimes want items ordered quasirandomly every item given equal exposure sometimes items inherent order may ordered given criteria rows table sortable columns understand may implemented using current syntax think repeating object keys different repeating array repeating object keys without gives false sense stably quasirandomly ordered may improved perfomancewise truly orderindependent data wrong assumption truly orderindependent data less modifications made dom data changes", "d": "8/2015"}, {"body": "simplesmiler object key order defined", "d": "8/2015"}, {"body": "simplesmiler implied behavior repeating object keys without orderby order property enumeration order implemented browser javascript engine order opinion reasonable assumption separating object iteration different syntax implementation complicates issue", "d": "8/2015"}, {"body": "josephsilber thanks aware think transpilation aggressive minification like babel closure compiler break order original minified scripts behave differently fair javascript still think possible write special directive unordered data would outperform general case", "d": "8/2015"}, {"body": "browser implemented yet way know", "d": "8/2015"}, {"body": "closed favor", "d": "8/2015"}, {"body": "looks great behave add component", "d": "8/2015"}, {"body": "exclusive content insertion adding makes sense", "d": "8/2015"}, {"body": "see compiled context", "d": "8/2015"}, {"body": "yes considered child", "d": "8/2015"}, {"body": "could support way compiled local scope inheriting assets consumer take grid component exposing customizable cells one must either name partial component globally use cell use grid component mixin grid template would look like usage", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "sounds great hope especially improve props namespace issue", "d": "8/2015"}, {"body": "calling would make clear reserved", "d": "8/2015"}, {"body": "work way binding present send prop blank data defines defaults works nicely separating would need merge defaults prop data create correct data structure creating component trying make component responsible data app make sense", "d": "8/2015"}, {"body": "matmoo sure get mean declare defaults props directly", "d": "8/2015"}, {"body": "hmm using vrepeat array create components data comes anyway maybe irrelevant", "d": "8/2015"}, {"body": "functions vars passed via parameters local variables space vue stay sun aug pm evan notifications githubcom wrote problem currently props merged instance data problems data props declare property name order priority merging clear prop overwrite field name data way around currently props initial values available inside data functions field returned data gets overwritten prop merged clear whether component property private state prop passed thus changed parent unless go check component props declaration proposal move props name space example thisprops avoids merging problem either make props reserved field make props makes explicit something prop obtained outside component reply email directly view github", "d": "8/2015"}, {"body": "would add syntax things like mustaches one vue biggest features simplicity nt see proposal enough benefit excuse added complexity things like removing great perfection attained nothing add nothing remove antoine de saint exup\u00e9ry", "d": "8/2015"}, {"body": "markhahn yes would make template bit verbose tradeoff conciseness note necessarily simplicity explicitness component stateful state change time different say pure function call could helpful clearly know part state external thus change without component anything said also sure proposal yet would love get feedback others", "d": "8/2015"}, {"body": "could helpful clearly know part state external thus change without component anything objects passed functions also change without function help ca nt tell object string using syntax adding syntax like hungarian notation would horrible adding scope meaning variables using syntax slippery slope vars passed function look different local vars look different closure vars look different global vars", "d": "8/2015"}, {"body": "still sure using way bindings would data prop", "d": "8/2015"}, {"body": "opinion vue one best frameworks ever seen simplicity moving params scope would make structure complex show warning param data property name", "d": "8/2015"}, {"body": "gamperl yeah could work maybe something like nt redefine prop data use prop default value instead", "d": "8/2015"}, {"body": "would actually like separate believe keeps simpler", "d": "8/2015"}, {"body": "warning instead different namespaces time add confusion adding props data attributes name real use case props data name right", "d": "8/2015"}, {"body": "warning sounds like good idea", "d": "8/2015"}, {"body": "embrace probable interference taking next way state info data props specification external interface available higher level component properties created function become defaults props passed outside would also suggest rename props attributes make straightforward see people often confused gitter discussions bad times", "d": "8/2015"}, {"body": "called renamed later sounds better shorter type", "d": "8/2015"}, {"body": "emitting warning name clashes case param data attribute name seems like lead trouble confusion", "d": "8/2015"}, {"body": "azamatsharapov call one letter", "d": "8/2015"}, {"body": "karevn point introducing breaking changes naming preferences objectively shorter easier type people gotten used offer substantial benefits justify change", "d": "8/2015"}, {"body": "implemented branch", "d": "8/2015"}, {"body": "using literal directive also internal flag nt need set provide literal directive automatically dynamic literal really want literal directive html", "d": "8/2015"}, {"body": "thanks misunderstood doc", "d": "8/2015"}, {"body": "misunderstood doc written apps vue great btw still get confused mustache needed needing situations even replacement happening confusing would cool allowed places things evaluated evaluation parser could strip sun aug pm tiga wu notifications githubcom wrote thanks misunderstood doc reply email directly view github", "d": "8/2015"}, {"body": "use computed property", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "please provide debuggable reproduction", "d": "8/2015"}, {"body": "added examples locked professional project ca nt give access evan schrieb please provide debuggable reproduction reply email directly view", "d": "8/2015"}, {"body": "katywings evan asking sscce fiddle start vue", "d": "8/2015"}, {"body": "ahh really missunderstood xd yeah create one today denis karabaza schrieb katywings evan asking sscce fiddle start vue reply email directly view", "d": "8/2015"}, {"body": "okay starting two items b press add item button first item create item c b item b radiuses looses checked state thanks lot help", "d": "8/2015"}, {"body": "sure helps", "d": "8/2015"}, {"body": "found cause insert new instance radio inputs attribute instance updated yet based moment page inputs thus selecting one deselects others suggest simply remove name attribute nt need submit form send array instead getting form", "d": "8/2015"}, {"body": "yeah priority model updates change names impossible fix framework something like pause vmodel computations update vrepeat variables index resume vmodel computations think framework get widely adapted future problem occur like case easy switch form action submit input name elements ajax submit simplesmiler looks easy dancer thank man try workaround strange trackby index helps two days ago tried trackby uid didnt help", "d": "8/2015"}, {"body": "simplesmiler workaround works perfectly thank", "d": "8/2015"}, {"body": "closing found workaround edge case rather nonrecommended pattern nt seem justify amount effort work around", "d": "8/2015"}, {"body": "think worth mention docs fact radio buttons require attribute radio also radio buttons example probably stripped attributes", "d": "8/2015"}, {"body": "simplesmiler yeah good idea", "d": "8/2015"}, {"body": "please post questions vuejsdiscussion instead main repo", "d": "8/2015"}, {"body": "simply", "d": "8/2015"}, {"body": "endaaman thanks suggestion sorry probably misunderstood points article reading used google translate thought problem using together eg getting wrong model value inside listeners seems case josephsilber suggested using simply use inside expressions sorry suggesting open pr due misunderstanding pray directive still nice work ps reserved meta property inside may want pick different name store value", "d": "8/2015"}, {"body": "selected state working", "d": "8/2015"}, {"body": "following valid equivalent true following invalid", "d": "8/2015"}, {"body": "also using select element use dynamic options", "d": "8/2015"}, {"body": "using actually ajax call get traininglist using vmodel ajax method post url modaluserinfo token documentqueryselector token getattribute value data thisuserinfo success function traininglist todome create function repetitive lines thatnextwizard tabindex thattrainings traininglist var trainingpage training text thattrainings function key trng alert trainingpage trngname", "d": "8/2015"}, {"body": "problem get state compiled", "d": "8/2015"}, {"body": "work using", "d": "8/2015"}, {"body": "sorry working browser select last list selected options", "d": "8/2015"}, {"body": "please look example carefully looking multiple select need add multiple attribute", "d": "8/2015"}, {"body": "really recommended breaks reactivity guarantee however call call", "d": "8/2015"}, {"body": "yes course app quite big complex makes difficult understand thanks considering anyway", "d": "8/2015"}, {"body": "well usually advice adding new data properties fly prefer deterministic data model helps reason app gets big", "d": "8/2015"}, {"body": "yes totally right already started moving towards approach", "d": "8/2015"}, {"body": "yeah error doc support paths fact since everything deprecated", "d": "8/2015"}, {"body": "correct use set even object setting exists root", "d": "8/2015"}, {"body": "yeah calls internally note difference vs former accepts paths vm instance method latter accept keys data object enhancement method", "d": "8/2015"}, {"body": "make sense would suggest updating docs avoid confusions deprecating add seems correct thanks evan", "d": "8/2015"}, {"body": "big problem selecting options example", "d": "8/2015"}, {"body": "fiddle works properly latest branch wait next release please", "d": "8/2015"}, {"body": "thanks evan", "d": "8/2015"}, {"body": "purpose checkbox show selectednot selected class state td based claimselected need add hidden input", "d": "8/2015"}, {"body": "please post type questions vuejsdiscussion next time although dirty add listener input stop event propagation future versions also directly", "d": "8/2015"}, {"body": "indeed causing infinite loop mutates array triggers filter applied make sure sort copy", "d": "8/2015"}, {"body": "perfect thanks evan", "d": "8/2015"}, {"body": "supposed destroy previous child since waitfor event happened yet set yet", "d": "8/2015"}, {"body": "yeah saw post discussion currently idea probably need new hook instead called right first insertion hook provide callback also accepts returning promise", "d": "8/2015"}, {"body": "really related discovered accidentally looking code intended usage waitfor could fixed waiting event component reloaded cache component data needs though might stale need wait", "d": "8/2015"}, {"body": "use object format form style classes dynamic options currently supported suggest using selector like style options", "d": "8/2015"}, {"body": "ok thanks property use option object", "d": "8/2015"}, {"body": "maybe making vrepeat options obsolete could reconsidered whenever extend base html select plugins custom directive weird things happen", "d": "8/2015"}, {"body": "checkout official example reason used options makes difficult handle twoway syncing", "d": "8/2015"}, {"body": "seems updating backing options array later respect viewmodel initialization nt work since usually fill select actually ajax return callbacks hard issue work around cry please take look slightly modified official example also design perspective maybe filling text property options view responsibility viewmodel one smile thanks", "d": "8/2015"}, {"body": "example assumes options static instead ing use inside update options", "d": "8/2015"}, {"body": "closing think anyway improve current select syntax", "d": "8/2015"}, {"body": "auto casted cases people want number pass number want literal string numbers", "d": "8/2015"}, {"body": "nt use use", "d": "8/2015"}, {"body": "ok thx try use vrepeat together watch thx", "d": "8/2015"}, {"body": "use components", "d": "8/2015"}, {"body": "likely due router instability please reopen router repo instead", "d": "8/2015"}, {"body": "\u770b\u8d77\u6765\u4f60\u7684\u6570\u636e\u7ed3\u6784\u91cc\u9762\u6709\u5bf9 window", "d": "8/2015"}, {"body": "\u5199\u9053 \u770b\u8d77\u6765\u4f60\u7684\u6570\u636e\u7ed3\u6784\u91cc\u9762\u6709\u5bf9 window reply email directly view github", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u628a\u4ee3\u7801\u548c\u8be6\u7ec6\u7684\u91cd\u73b0\u6b65\u9aa4\u53d1\u7ed9\u6211", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4e0d\u8981\u7528\u538b\u7f29\u7248\u672c\u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "briefly mentioned guide think twoway filters looking", "d": "8/2015"}, {"body": "exactly thing twoway filters nt allow type anything want input unless use want context play fiddle messed many fronts empty input ca nt enter anything anymore stuck since keeps formatting value starts hitting backspace change press backspace many times want nothing change maybe fixed triggering read lazily", "d": "8/2015"}, {"body": "well thing formatting user input tricky thing nt think get expect angular formattersparsers either think trying impossible transform relationship user input value underlying model value gets converted number way know text format back yeah actually want persist user types format user blurs twoway filters created use case generally twoway binding nt make sense case two separate piece state store underlying value display value handle events separately closing formattersparsers wo nt solve issue", "d": "8/2015"}, {"body": "formatters angular invoked model changes source form element prevents issues outlined see example type input field stay way set value button input field set nt call formatter blur think different point important thing formatters called type", "d": "8/2015"}, {"body": "josephsilber ah makes sense would make twoway filters easier use", "d": "8/2015"}, {"body": "sure understand saying think good idea default behavior twoway filters think calling read blur", "d": "8/2015"}, {"body": "josephsilber yes current twoway filter behavior confusing hard use think angular formatter behavior simplifies issue need prevent triggering model view updates user typing", "d": "8/2015"}, {"body": "please reopen issue", "d": "8/2015"}, {"body": "beautiful thank much", "d": "8/2015"}, {"body": "sunglasses", "d": "8/2015"}, {"body": "hmm looks like props skipped case situation would fragment passed instance", "d": "8/2015"}, {"body": "probably useful practical usage trying get vue working framework benchmark", "d": "8/2015"}, {"body": "hah seems lot faster old version", "d": "8/2015"}, {"body": "yeah friend work saying vue lot slower react styleattribute based animations thinking ca nt right even slower ca nt much found benchmarks couple months ago looks like vue twice fast react", "d": "8/2015"}, {"body": "well bottleneck styleattributebased animations almost never framework properties animating", "d": "8/2015"}, {"body": "ing component get limited abilities ca nt access case think evan mentioned somewhere issues wrap tag", "d": "8/2015"}, {"body": "repeated components automatically available inside component template components get limitation component scope rules", "d": "8/2015"}, {"body": "duplicate already fixed", "d": "8/2015"}, {"body": "jsfiddle link", "d": "8/2015"}, {"body": "\u5c31\u6709\u4e86", "d": "8/2015"}, {"body": "patrickhertling nt think solved vue rather external library using jquerystuff depending needs general case custom twoway directives solution might looking", "d": "8/2015"}, {"body": "thank think use directive", "d": "8/2015"}, {"body": "principle vueutil methods must useful vue internal code need specific util methods use lodash lodash also ships standalone versions individual methods", "d": "8/2015"}, {"body": "look code style semicolons unless necessary nt issues minimized vue sources reproduce", "d": "8/2015"}, {"body": "nt write semicolons necessary", "d": "8/2015"}, {"body": "thanks sharing using totaljs vue builtin js compressor totaljs problem webpack code including vue js code one line without semicolon browser blocked seems compressor nt insert semicolon webpack vue code tried use yui compressor tried uglify compress generated code still nt work util modified source code totaljs avoid using builtin compressor better solution used semi add semicolon vue everything came back normal cheers", "d": "8/2015"}, {"body": "seems compressor nt insert semicolon would consider broken follow javascript standard would file issue repo sat aug pm charlie li notifications githubcom wrote thanks sharing using totaljs vue builtin js compressor totaljs problem webpack code including vue js code one line without semicolon browser blocked seems compressor nt insert semicolon webpack vue code tried use yui compressor tried uglify compress generated code still nt work util modified source code totaljs avoid using builtin compressor better solution used semi add semicolon vue everything came back normal cheers reply email directly view github", "d": "8/2015"}, {"body": "moved vuejsdiscussion personally nt like style shown post people whatever like cases want components well encapsulated rely simple props rather entire app state", "d": "8/2015"}, {"body": "fixed", "d": "8/2015"}, {"body": "use inline expressions like need something complex consider using computed property", "d": "8/2015"}, {"body": "ah thanks put pr documentation noting", "d": "8/2015"}, {"body": "ok able remove clicked user following changes html javascript", "d": "8/2015"}, {"body": "remove item directly take either index number actual object remove", "d": "8/2015"}, {"body": "thanks lot fast answer", "d": "8/2015"}, {"body": "actually intended content outlet get content elements match selector regardless appearance order allows block content reused multiple times component sometimes useful also think better rendered result depend outlets ordered use specific selector example", "d": "8/2015"}, {"body": "\u4e0a\u9762\u7528 \u4e0d\u662f", "d": "8/2015"}, {"body": "\u603b\u662f\u628a \u5199\u6210\u4e86", "d": "8/2015"}, {"body": "updated fiddle examples looks like vue loosing bindings even using method using keypath value prop like", "d": "8/2015"}, {"body": "nt initializing created hook returning inside option specifically initializing observed properties", "d": "8/2015"}, {"body": "\u65b0\u589e\u7684\u60c5\u51b5 \u63d0\u4f9b\u4e86 set \u51fd\u6570\u7684 \u4e0d\u662f\u76f4\u63a5 \u8d4b\u503c", "d": "8/2015"}, {"body": "\u4e4b\u524d\u4e5f\u60f3\u8fc7\u7528 \u8ba9\u6211\u8bef\u4ee5\u4e3a", "d": "8/2015"}, {"body": "\u770b\u5230\u6839\u672c\u6ca1\u6709 level \u6539\u6210 \u548b\u6837", "d": "8/2015"}, {"body": "use codes place like selectpackage dl vrepeat items template vif template vif isfirstmonth dt groupname dd vrepeat item von click onchoose itemid skuid isfirstmonth span skuname template vif isfirstmonth dt groupname dd vrepeat item von click onchoose itemid skuid isfirstmonth vshow skuid span skuname", "d": "8/2015"}, {"body": "using latest version fix related nested templates safari still happens please provide jsfiddle reproduction", "d": "8/2015"}, {"body": "vuejs provide new directive like worked maybe concise syntax use instead easy use use scene", "d": "8/2015"}, {"body": "demo", "d": "8/2015"}, {"body": "velse maybe vempty also since composing views three conditions common nothing show something show something different needs adjusting", "d": "8/2015"}, {"body": "thanks unfortunately nt fix issue use settimeout eg chrome never works ms sometimes realistic test case keep clicking link quickly nt able break chrome clicking fast enough able firefox also easier computer swapping firefox entering div also gets pushed leaving one fast enough real app enough time move mouse one menu item one click happen", "d": "8/2015"}, {"body": "testing requestanimationframe setting justentered false next frame always enough firefox fact even nesting two requestanimationframes nt enough settimeout clicking menu items including mouse movement one menu item using backforward mouse", "d": "8/2015"}, {"body": "real reason styles toggle enter leave fast enough opacity nt started interpolating yet still gets applied thus css transition triggered event never fires simple quite unintuitive fix giving tiny value different example", "d": "8/2015"}, {"body": "yeah know hoping would possible fix using requestanimationframe looks like pretty much impossible", "d": "8/2015"}, {"body": "better option might allow option actual object like angular", "d": "8/2015"}, {"body": "yeah would definitely work", "d": "8/2015"}, {"body": "would cool", "d": "8/2015"}, {"body": "installed latest code dev branch still nt work debug code find inside selectjs execute line object object string value", "d": "8/2015"}, {"body": "jfliu course serialized object value works syncing back model", "d": "8/2015"}, {"body": "example code still nt work try", "d": "8/2015"}, {"body": "jfliu build dist folder contains standalone build vuejs however files checkedin release happens dev branch files date", "d": "8/2015"}, {"body": "simplesmiler installed clone repo run build task code works thanks", "d": "8/2015"}, {"body": "would nt perfect use case broadcasting event root view models would listen react", "d": "8/2015"}, {"body": "update bindings", "d": "8/2015"}, {"body": "since picture worth thousand words would think biggest issue running using components view models three separate unrelated view model hierarchies", "d": "8/2015"}, {"body": "yeah though using broadcast like nt want inject globalize object vm prefer solution private data translator object kept away vms pluginmixin essentially becomes service injected vm either automatically vms plugin manually mixin exports functions public api essentially keeping private data separated", "d": "8/2015"}, {"body": "note way using creating children view models body tag view model see fiddle added logging make clear best way get parent child relationships like working use component system", "d": "8/2015"}, {"body": "oh confusing thanks pointing even fix nt work real app actually dynamic component", "d": "8/2015"}, {"body": "two problems first functions components returning second key problem order bind need make sure view model defined otherwise vue binds calls see reference translator therefore ca nt watch causes update created updated later", "d": "8/2015"}, {"body": "right using add works component even though translator nt defined root either work children", "d": "8/2015"}, {"body": "understanding deal setting data components directives compiled executed nt think effect anything already compiled dom point maybe could shed light subtlety", "d": "8/2015"}, {"body": "another reason prefer initializing data properly working verison internally calling vm causes watchers reevaluated new dependency non existing watchers aware essentially forced dirtycheck digest cycle like angular propagates child child normal components derive parent data via also forceupdated digest cycle", "d": "8/2015"}, {"body": "table element restrictions elements appear inside custom elements hoisted render properly cases use component directive syntax docs scroll tip", "d": "8/2015"}, {"body": "fwiw work bind text area value property instead ie", "d": "8/2015"}, {"body": "separate issue looks good though open pr", "d": "8/2015"}, {"body": "use tried adding none select ignoredoverriden nt show", "d": "8/2015"}, {"body": "pdcmoreira released yet", "d": "8/2015"}, {"body": "implemented", "d": "8/2015"}, {"body": "run today love see implemented optional array datakey parameter especially declare advance pass vue component", "d": "8/2015"}, {"body": "array argument good idea expecially passed data parameter k august steve notifications githubcom wrote run today love see implemented optional array datakey parameter filterby filterkey name power especially declare advance pass vue component reply email directly view github", "d": "8/2015"}, {"body": "would good improvement waiting", "d": "8/2015"}, {"body": "proposed solution think bit finegrained make template async basic unit vue apps component", "d": "8/2015"}, {"body": "hi using vuejs environment little key write modules using standard syntax use load main vue module nt require bundling complexities setup look something like following javascript somecomponentjs import vue vue import template pathtotemplatehtml text const somecomponent vueextend template template export default somecomponent javascript somevuejs import vue vue import somecomponent somecomponent vuecomponent somecomponent somecomponent new vue html served client includes following bits html systemimport somevue let know anything better articulated", "d": "8/2015"}, {"body": "like tip work always build final script every change", "d": "8/2015"}, {"body": "like tip work always build final script every change browser caching issue bundle pathname changes per build would get around caching individual module paths static however browser would caching old versions files", "d": "8/2015"}, {"body": "closing inactivity", "d": "8/2015"}, {"body": "warning nt understand written support", "d": "8/2015"}, {"body": "suggest try old version like last version need test", "d": "8/2015"}, {"body": "ran well problem dynamic component components async emit event rendered worked around using nexttick also issue things async cases sync others eg function gets data server clientside data yet available caches calls callback immediately next time", "d": "8/2015"}, {"body": "dhruvio provide example code working nexttick struggling article helpful edit minutes passed realized nt using set", "d": "8/2015"}, {"body": "hey breland waitfor listens events end current event loop iteration run logic inside vue instance follows say current event loop listener wo nt pick event waitfor wo nt listening yet wrote phone apologies formatting weird hope answers question nt understand recommend googling processnexttick works vue nexttick method analogous cheers aug tyler breland notifications githubcom wrote dhruvio provide example code working nexttick struggling article helpful reply email directly view github", "d": "8/2015"}, {"body": "experimentation implementing change actually affects many parts compilation chain requires nontrivial refactoring benefits marginal one always put root template string instead raw html going move forward", "d": "8/2015"}, {"body": "nice feature using beta like vmodel array index mycustomkey working nice", "d": "8/2015"}, {"body": "closed via", "d": "8/2015"}, {"body": "using following syntax vue components written typescript typescript load decorators destruct decorators vuecomponent const createcomponent prop lifecyclehook eventhook vuecomponent transform class demo vue component called demo createcomponent demo vuecomponentbase provides declarations vue provieds component makes sure typescript support type checking autocomplete class demo extends vuecomponentbase put github repo tiny library examples derived original vue examples", "d": "8/2015"}, {"body": "jabher gamperl cool pretty sure nt nt need one official class interface vue components us would subtle preferences beauty easily create interface top vue transpilers", "d": "8/2015"}, {"body": "would disagree every person make good implementation take significant amount time sure something kind something dumb wrapper appear soon anyway deep integration always better least performance speaking vue really looking like made btw gamperl looks like caching anything also bind local componentsdirectivesfilters also objectgetownpropertynames iterating property descriptors sounds like kind bad idea especially serious projects caching help solve fully implementation relying upon event decorators either important using getters setters computed properties methods em methods override constructor using annotations methodsprops using static attributes template inherit looks like one obviously preferable way implement vue would really good idea make bundled default happy help take amount time rewrite parts app actually checking vue code weekend strong feeling following options possible would propose restructure application bit create endpoints one creating classic vue interface another one expose vue class possible though bit complex endpoints footprint rather small maintainability become worse users make", "d": "8/2015"}, {"body": "jabher imo vue ship lean core runs environments anything assumes shipped plugin think possible reference implementation class interface nt want make way use vue", "d": "8/2015"}, {"body": "vue ship lean core runs environments temporary decision long need transpilers would stay effect even widespread native support", "d": "8/2015"}, {"body": "josephsilber call temporary native support pretty dismal moment judging long took universally supported say take another years widespread adoption without need transpilers addition current class interfaces rely stage proposals property initializers part time vue would probably rewritten pure already", "d": "8/2015"}, {"body": "sob", "d": "8/2015"}, {"body": "josephsilber haha something replaces javascript", "d": "8/2015"}, {"body": "webassembly maybe write go smile", "d": "8/2015"}, {"body": "know cool guys actively using babel mostly looking compatibility table best idea guys front making big ecommerce app us company hundreds thousands shops worldwide ember babel internet explorer transpilers already adopted even lot big corps using becoming good practice right", "d": "8/2015"}, {"body": "josephsilber let go clojure yeah smile", "d": "8/2015"}, {"body": "jabher exactly mean need transpilers make work vue core contain parts rely transpilers class interface ship separately", "d": "8/2015"}, {"body": "dammit understood idiot vue supports prototype extension literally make nothing decorators events objectgetownpropertydescriptors stuff javascript class test extends vue test documentbodyinnerhtml working new test el body ready function thistest man needed support decorators even relying upon main app make pr tomorrow nt mind usage something like", "d": "8/2015"}, {"body": "jabher please make standalone module said nt want vuecore installitandyougeteverything eg vuerouter vueresource separate packages vuecore used without used together needed decorators", "d": "8/2015"}, {"body": "jabher implementation feature complete proof concept want separate methods computed properties without using getownpropertynames", "d": "8/2015"}, {"body": "gamperl actually need later becoming prototype properties simply double work hand continuing investigate stuff see everything kind overcomplexified kind blocking implementation details", "d": "8/2015"}, {"body": "try use vueroutervue jsdom app works without jsdom following warning vue throws anyone working jsfiddle sample vue vuerouter ca nt get work", "d": "8/2015"}, {"body": "hi evan starters really loving vuejs great job question possible trigger jquerylike events posted question stackoverflow came across thread thought might help others come across situation", "d": "8/2015"}, {"body": "need event method carries useful information target element click coordinates say better create dedication method corresponding signature call method click handler common use case event nt need call method code nt event first place", "d": "8/2015"}, {"body": "hi according discussion jsfiddle work looks like native events nt trigger data sync vue", "d": "8/2015"}, {"body": "slcodenine vmodel listens event default listens lazy mode", "d": "8/2015"}, {"body": "run reason default nonlazy nt also listen", "d": "8/2015"}, {"body": "cool work thanks josephsilber probably getting triggered focus moved inputelement thanks listening see databinding asyoutype somewhat agree could default listen lazy mode makes sense one expect listen event least technical issues related", "d": "8/2015"}, {"body": "way change several variables without rendering intermediate stages makes ui slow times wrong", "d": "8/2015"}, {"body": "thecotne vue default behavior buffers rendering next event loop described never happen running problems create issue reproduction", "d": "8/2015"}, {"body": "never use prop underscore sure would convert hyphencase version could fri aug pm jason daly notifications githubcom wrote trouble understanding computed property observed child via props vs inherit given following parent view parent vue var parent vueextend data return orders tab current computed scopedorders return thistab completed return thisorders future return thisorders components child child following work using inherit child vue var child vueextend template require sometemplatepathmustache inherit true following using props child vue var child vueextend template require ordersindexmustache props scopedorders specifically template like child using props fetch computed scopedorders property get following error typeerror read property length undefined using inherit instead props child view observes changes scopedorders without problem worth mentioning orders parent updated via ajax response set data initially empty error occurs ajax time finish reply email directly view github", "d": "8/2015"}, {"body": "exact difference circumstances use", "d": "8/2015"}, {"body": "voyga see simply gettersetter proxy", "d": "8/2015"}, {"body": "change template component created default template recompiling", "d": "8/2015"}, {"body": "look forward serverside rendering", "d": "8/2015"}, {"body": "love serverside rendering", "d": "8/2015"}, {"body": "thumbs serverside rendering", "d": "8/2015"}, {"body": "moving wiki", "d": "8/2015"}]