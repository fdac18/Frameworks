[{"title": "called twice", "body": "trying test simple react component using materialui jest stuck looks like calls actual application imported somewhere within materialui module turn imported component code may really bug react per se though one could imagine dependencies somehow loading well causing issue created testcase may provide context", "num": "7386", "d": "7/2016"}, {"title": "binding react", "body": "recently read article medium binding react basically explaining bind functions inside constructor stateful components prevent unnecessary rerenders component shows using arrow function causes function creation spot makes seem like new props received continuously even may bad prevents optimizations according article great know bind constructor binding methods parameters calling stateful stateless components say theres something like following js using stateful components class something extends reactcomponent constructor super thisdosomething thisdosomethingbind dosomething take return take using stateless components function something props throws error call evaluates immediately number function makes sense way around able go around using arrow function run cause unnecessary rerenders article explained could better prevent unnecessary rerenders stateless stateful components", "num": "7385", "d": "7/2016"}, {"title": "implicit returns method", "body": "name bos return fullnames return without using return fullnames", "num": "7384", "d": "7/2016"}, {"title": "add text view components", "body": "default rendering span div browser small change enable universal react components badly need next step port stylesheet browser allow style accept need start", "num": "7382", "d": "7/2016"}, {"title": "write docs reactpurecomponent", "body": "need least update top level api page consider writing something cc spicyj", "num": "7379", "d": "7/2016"}, {"title": "investigate ci failed add file ghpages", "body": "reason failed detect commit new file presumably dirtystate detection failed nt happen previous build also changed files added new ones maybe helped trigger done couple builds jekyll amp new travis container could related", "num": "7378", "d": "7/2016"}, {"title": "jsx shorthand property syntax", "body": "hello searched similar issues nt found one sorry duplicate let say following component code forwarding properties could less verbose shortcut syntax aware spread operator comfortable sometime example nt want revalidate property changed", "num": "7376", "d": "7/2016"}, {"title": "ie bug svg", "body": "hi reccently updated project react issue svg use svg sprites get icon like use crossbrowser support updaiting react started throug exception ie x reactid understand exception fires plugin wich replacing inner polyfill page loads react ca nt find use exeption workaround came react dose nt include virtual dom ca nt complaint better way case rewrite whole lot svg icons", "num": "7375", "d": "7/2016"}, {"title": "way return raw html unmounted component", "body": "asked question seems way use must mounted component first like feed raw html plugin like linked question also like avoid jquery way mount component raw html sure called consolelog html element chrome outputs html sort native html object way imagine using element still mounted", "num": "7374", "d": "7/2016"}, {"title": "bound function access thisrefs", "body": "seemed function bound class longer access see following simple case works nt would expect two behave idea javascript import react component proptypes react export default class sample extends component", "num": "7373", "d": "7/2016"}, {"title": "react automatically remove vendor prefix inline style", "body": "want request feature report bug bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior react render css vendor prefix versions react browser os affected issue work previous versions react tried result", "num": "7372", "d": "7/2016"}, {"title": "reacttestrenderer nt work refs reactdomfinddomnode", "body": "jest snapshot testing uses reacttestrenderer component contains ref uses throws component js import react react export default class link extends reactcomponent render return test js use strict import react react import link link import renderer reacttestrenderer describe link gt renders correctly gt const tree renderercreate tojson stack trace", "num": "7371", "d": "7/2016"}, {"title": "data keyed list mangled unpredictably", "body": "going close issue immediately since nt reproducible test case hit issue exactly know code simple suspect react bug may cause hoping documenting might help someone else stumbles across future want request feature report bug report bug reduced code sample javascript const states alabama al alaska ak arizona az arkansas ar etc class extends reactcomponent render return thisrenderregionfields renderregionfields return country objectkeys states map thisrenderregionoptionsbind renderregionoptions key const abbreviation states key referring module anywhere else application ie pretty certain mutated accidentally expected behavior list states list twoletter state abbreviations order al ak az current behavior list states intermixed unknown data ends looking something like notably nt strings allcaps anywhere codebase nt look like react either versions react browser os affected issue work previous versions react react chrome osx", "num": "7370", "d": "7/2016"}, {"title": "allow disable tag prop warnings", "body": "applies curious first would cause problems theres strong reason allowing people disable warnings would disagreeable would open alternative solutions problem props used lifecycles hoc often render class child componentwillmount something thispropsotherprop render const children props thisprops otherprop gets passed causing error destructuring leaves unused variable render nice either initial thought create helper filters event props verbose potentially heavy lots lookups guess second thought could patch reactcreateelement seems bit hacky well nt see much downside passing props elements though guess could see dangers", "num": "7368", "d": "7/2016"}, {"title": "request toplevel api allow context passing", "body": "hi know context flagged experimental feature hence missing toplevel api find pass context legacycompatible component allow context setting causing hack context cases something like mixin something could looked thanks", "num": "7367", "d": "7/2016"}, {"title": "questions movies react help", "body": "use strict var reactnative require reactnative var stylesheet reactnative var maxvalue import type styleobj stylesheettypes question stylesheettypes come question styleobj function getstylefromscore score number styleobj score lt return stylesnoscore var normalizedscore mathround score maxvalue return color rgb maxvalue normalizedscore normalizedscore var styles stylesheetcreate noscore color moduleexports getstylefromscore could help thank much", "num": "7366", "d": "7/2016"}, {"title": "handle externally injected elements replacedelimitedtext", "body": "mostly preemptive talked right render external tool bolds like entire string bolded updated react first element kept called would say makes sense throw elements away case start scratch perhaps check node type also throw away nt textnode", "num": "7363", "d": "7/2016"}, {"title": "inline svgs rendering ie", "body": "process upgrading project react strangely inline svgs stopped rendering ie upgrade screenshots well svg elements example little red alert icon renders fine ie old react missing new react old react svg element alert icon appears html appears html new react got element missing elements want see action put bogus emailpassword following urls ie old react new react ideas could causing note little g icon google button also inline svg yet renders fine versions react", "num": "7358", "d": "7/2016"}, {"title": "electron webview tag throws unknown property warnings", "body": "electron adds new html tag webview since tag registered via internaltoblink methods nt follow standard web component rules ie name must good place add tag properties list valid properties pr maintainers would willing approve gate electron wo nt affect web apps without pr impossible use attribute react", "num": "7357", "d": "7/2016"}, {"title": "becomes unresponsive updating element inside svg", "body": "bug reproduced ui become unresponsive first update element visit clicktoggle button works fine chromefirefox ie browser becomes unresponsive first click error thrown able reproduce versions windows modernie editions", "num": "7355", "d": "7/2016"}, {"title": "possibility return multiple elements render", "body": "seen extension asking light would possible return array multiple elements maybe strings currently already possible return array mix elements amp strings block jsx could commentwrapping method allow also render methods js hello elementsmap elem gt elem hello motivation sometimes hard get layout work expected one wrap list elements element alternative write plain functions instead react components produce expected result would syntactically nice able componentize multipleoutput components", "num": "7354", "d": "7/2016"}, {"title": "possibility return pure text render without wrapping element", "body": "asking light would possible also return plain text alternative current return type one would wrap element could commentwrapping method allow also render methods motivation sometimes hard get layout work expected one introduce span elements alternative write plain functions instead react components produce expected result would syntactically nice able componentize textonly components way htmlenabled components", "num": "7353", "d": "7/2016"}, {"title": "respect autocomplete values", "body": "bug currently react transforms non value given property example jsx rendered html besides obvious case also semantic detail values valid part spec values passed property respected left alone tested react", "num": "7352", "d": "7/2016"}, {"title": "thistransferpropsto function", "body": "hi help uncaught typeerror thistransferpropsto function react", "num": "7351", "d": "7/2016"}, {"title": "babelnode reactcomponenttreedevtooljs causes reactdomserverrendertostring fail", "body": "following serverside react tutorial encountered runtime error caused reactcomponenttreedevtool specifically purgedeep function seems problematic certain conditions reactlibreactcomponenttreedevtooljs line user code stack trace offending code resolution adding check undefined childids traversal reactlibreactcomponenttreedevtooljs line resolves issue see additional os os x yosemite node run babelnode via babelcli let know additional information provide eg dev dependencies thanks", "num": "7350", "d": "7/2016"}, {"title": "expect componentdidmount timer start render timer still progress another instance", "body": "sure filed bug intended behaviour case would feature request something lost since last versions specific error logging since last version error shows many times without usable stacktrace mainly occurs prop state defined would nt big problem could stacktrace case lead back related component go changed last use stacktrace go back createstore connect related since error shows regardless element undefined property also often accompanied debug error plans improve", "num": "7349", "d": "7/2016"}, {"title": "zindex interaction", "body": "say html put targetcomponent top components impossible interact change order implementation like html come top components something like zindex interaction problem way react works", "num": "7346", "d": "7/2016"}, {"title": "higherorder components reacting change props", "body": "trying implement basic filtering functionality using higherorder components hoc looks like filterjs import react component react export default function filter filteredcomponent return class filtercomponent extends component constructor props super props however typing input element generatelist method called tried using get triggered well though happily passing props search component component using props searchresultsjs import react react const searchresults props gt const listdata propsfilteredlistmap item gt item return search results export default searchresults corresponding container searchresultscontainerjs import connect reactredux import searchresults componentssearchresults import actions import filter enhancersfilter const getsearchterm state gt statesearchterm undefined statesearchterm const mapstatetoprops state gt return searchterm getsearchterm state currencylist statecurrencylist const mapdispatchtoprops dispatch gt return setsearchterm e gt dispatch asetsearchterm etargetvalue const searchresultscontainer connect mapstatetoprops mapdispatchtoprops searchresults export default filter searchresultscontainer", "num": "7345", "d": "7/2016"}, {"title": "stop using imgur images blog post", "body": "using imgur image hosting put site like previous posts making sure maintain control also ensure images served https nt currently could fix updating img srcs probably host anyway", "num": "7337", "d": "7/2016"}, {"title": "documentation links documents text wrong", "body": "want request feature report bug bug current behavior error current behavior bug please provide steps reproduce possible minimal demo problem via similar template open page docs like one click link like see error page expected behavior correct link versions react browser os affected issue work previous versions react problem occurs many doc pages since file names changed include numbers guess", "num": "7334", "d": "7/2016"}, {"title": "use testutilssimulate component created testutilsrenderintodocument", "body": "upgraded react existing tests begun failing due issue apparent cause components created testutilsrenderintodocument tagname therefore testutilssimulate recognise components leaves node null jsfiddle repro", "num": "7331", "d": "7/2016"}, {"title": "ie edge longer prompt remember password controlled form", "body": "want request feature report bug bug regression ieedge current behavior react gt edge prompt user save password form steps reproduce react react expected behavior browser prompts user save password form versions react browser os affected issue work previous versions react react gt worked react ie edge", "num": "7328", "d": "7/2016"}, {"title": "svg react component animating", "body": "seeing issue svg inside react class class follows var react require react var headerloader reactcreateclass render function return moduleexports headerloader renders svg fine path elements nt animating react react dom thanks", "num": "7327", "d": "7/2016"}, {"title": "warn someone using shadydom react", "body": "probably emit warning someone using shadydom instead shadowdom react since cause things break subtly", "num": "7325", "d": "7/2016"}, {"title": "optimizing compiler compiling internals", "body": "optimization renderer specific optimization knowing react process particular component internals inlining internal work user code comes two flavors known host component js function foooptimizedmount props propsdatatype img var img documentcreateelement img imgclassname propsclassname imgsrc propsdatasrc return node img listeners reacteventlistenerstrap img error load var span documentcreateelement span spanclassname propsclassname var children reactchildrenmountnestedchildrenintoparent thispropschildren span return node span children function foooptimizedupdate instance oldprops newprops oldpropsdatatype newpropsdatatype foooptimizedunmount instance return foooptimizedmount newprops propsdatatype img imgclassname propsclassname imgsrc propsdatasrc return instance spanclassname propsclassname reactchildrenupdatenestedchildreninparent thispropschildren instance return instance function foooptimizedunmount instance oldpropsdatatype newpropsdatatype foooptimizedunmount instance return foooptimizedmount newprops propsdatatype img reacteventlistenersrelease instancelisteners reactchildrenunmountnestedchildreninparent instance composite components similarly composite components pick different code branches imperatively update children example known constant value would nt considered comparison single property potentially bail tree although unclear significant benefits two optimizations", "num": "7324", "d": "7/2016"}, {"title": "optimizing compiler component folding", "body": "like final frontier react never really wrote anything figured create issue basically idea utilize information react works constant folding inlining components certain conditions example source knowing foo classes made turn bar component deadcode elimination strips bunch different cases needs bail example need know object object immutable need infer immutable using escape analysis classes bail cases even complex problem current js infrastructure particularly bad kind whole program whole package linking node nt notion per package private modules anything mutate anything default transpilers babel set work single file time nt access source files analysis rollup closer limited small set static primitives however smarter compilers become prevalent js world find ways hack around limitations start building smarter compiler optimizations", "num": "7323", "d": "7/2016"}, {"title": "ie member found", "body": "catch member found exception react input onchange syntheticevent eventcancelbubble true line", "num": "7320", "d": "7/2016"}, {"title": "react polymer child properly rendered web component", "body": "want request feature report bug looking report bugclarify following problem upgraded react found web components rely embed html elements working used react component example usage react component test current behavior resulting dom looks followings test problem button getting correctly selected web component embed place problems getting react polymer working jsfiddle together try create demo problem add expected behavior react dom properly rendered looked like following resulting dom looks followings test versions react browser os affected issue work previous versions react worked react work expected react polymer version used versions react", "num": "7318", "d": "7/2016"}, {"title": "reactcsstransitiongroup transitiontimeout props required undocumented", "body": "used without timeout props warns warning failed proptype transitionleavetimeout nt supplied reactcsstransitiongroup cause unreliable animations wo nt supported future version react see information check render method missing timeout prop however url simply points getting started section animation page code listed use timeout props nothing page explains props necessary fact word timeout appears names props code examples could get explanation docs please", "num": "7317", "d": "7/2016"}, {"title": "facing problem react webpack installation", "body": "followed steps npm install save react reactdom babelpresetreact babelloader babelcore webpack mainjs bundlejs modulebind jsbabelloader got error like shared screen please solve proper installation guide react redux amp webpack", "num": "7315", "d": "7/2016"}, {"title": "", "body": "", "num": "7314", "d": "7/2016"}, {"title": "request optional strict validation valid attributes react native renderer", "body": "want request feature report bug feature request current behavior consider code pass invalid properties node simply skipped expected behavior would like warning using illegal property understood would make much easier determine property trying set taking effect eg misspelled property name property actually nt exist type trying set think looking assert check runs dev true would probably configurable support existing code sets invalid properties nodes turn strict attribute validation default happy put pr add nt see configuration react native renderer code could add property eg versions react browser os affected issue work previous versions react", "num": "7310", "d": "7/2016"}, {"title": "make createelement undefined warning descriptive", "body": "update claimed jin see mistype import useful provide better message cases caused invalid import create page explaining common cases could happen eg mismatching defaultnamed export forgetting export component importing nonexisting named export link page warning", "num": "7307", "d": "7/2016"}, {"title": "proptypes informative warning createelementtypechecker", "body": "want request feature report bug enhancement current behavior element type checker informative ones expected behavior would nice provide actual type prop passed similarly type checkers ie instead invalid prop supplied expected single reactelement say invalid prop type supplied expected single reactelement versions react browser os affected issue work previous versions react seeing think also applicable previous versions know general intention move away prop types nt specific reason current behavior look making pretty", "num": "7302", "d": "7/2016"}, {"title": "updating react reactflexboxgrid throwing lots similar warnings", "body": "want request feature report bug unknown props tag current behavior unknown props tag remove props element details see div created col col created index div created row row created index div created index div created index index created connect index connect index created reactrouterproxy reactrouterproxy created routercontext div created template div created template div created template template created reactrouterproxy reactrouterproxy created routercontext routercontext created router router provider current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7301", "d": "7/2016"}, {"title": "highlight element failed checksum", "body": "moment serverrendered markup nt match clientrendered markup big red error shown difficultimpossible locate element occurred would something logged offending element console considered pull request", "num": "7300", "d": "7/2016"}, {"title": "help getting rid use case timermixin react native", "body": "want request feature report bug help request current behavior want replace react native something else given dan talked downsides using mixins still find solution use case", "num": "7298", "d": "7/2016"}, {"title": "working correctly chrome", "body": "work correctly chrome user type decimal point point disappear caret reset beginning input keep typing twice value input disappear however input defaultvalue seems work fine put together fiddle page demo bug think something internal state management uncontrolled component first typed get chrome may trimmed unnecessary value type react pushing back input causing disappear caret position reset two typed value longer valid number chrome may return causing input reset", "num": "7297", "d": "7/2016"}, {"title": "nwjs app file type onchange event nt fire", "body": "use react node webkit application update react reactdom nt changed code onchange event fire error console log help appreciated", "num": "7295", "d": "7/2016"}, {"title": "attributes html element", "body": "hi new react wanted implement simple feature need accesses html element properties rendered example html code want access mydata mycustomobject two instances rendered different data think possible set attributes mycustomobject replacing div found documentation right thank", "num": "7294", "d": "7/2016"}, {"title": "license clarification", "body": "good morning came across blog post says bsd license react terminated react user competes facebook per patent clause addition seems lot confusion around clause actually means wondering might consider adding tl dr summarizing clause motivation readme would clear lot confusion let everyone focus building cool stuff thanks update maintainers worked legal team post faq addressing common misconceptions", "num": "7293", "d": "7/2016"}, {"title": "checkbox attribute unnecessarily removed dom every render", "body": "want request feature report bug bug current behavior rendering list controlled checkboxes causes reconciler unnecessarily update add remove attribute every render regardless whether value changed table rows needs add highlighted class rows based user interaction another part screen expect table renderer would get called every interaction seeing render times perf tool dug looks like every render reconciler removes checked attribute see jsfiddle attribute row datum never changes always false extracting rows component using fixes slowness seems like bug current behavior bug please provide steps reproduce possible minimal demo problem via similar template two jsfiddles demonstrating issue minimal repro full repro expected behavior reconciler nt touching dom attributes nt changed versions react browser os affected issue work previous versions react mac osx chrome safari firefox react version", "num": "7290", "d": "7/2016"}, {"title": "reactdomcomponenttreeprecachenode triggers render", "body": "react trying optimize application serverside rendering using problem react browser always triggers render methods components even root since page quite big results seconds lag javascript arrives scrolling frozen interestingly happens chrome firefox safari tried track react source returns true mounting jumps looks good still getting initial rerenders expected behavior ca nt find detailed explanation works could provide working example tips prevent initial lag thank", "num": "7289", "d": "7/2016"}, {"title": "docs request adding support new html elements", "body": "eg", "num": "7288", "d": "7/2016"}, {"title": "discussion state immutable default", "body": "taking hard perspective redux component state immutable default would much overhead react side note possibly previously addressed topic nt immutable default realize immutability helpers man syntax hard eyes much sugar vinegar also know section immutabilityjs advanced performance page nt address directly clear least setstate docs whether react already handles returns object containing keys update sorry sidebar wanting get confirmation either way", "num": "7287", "d": "7/2016"}, {"title": "pass parameter click event binding constructor", "body": "binding class constructor like class header extends component constructor props super props thisdosometing thisdosometingbind dosometing id consolelog id write code render onclick gt thisdosometing id right", "num": "7285", "d": "7/2016"}, {"title": "input onchange triggered every time epreventdefault used", "body": "input onchange triggered every time epreventdefault called onchange handler occurs typing fast characters lost react amp", "num": "7281", "d": "7/2016"}, {"title": "oninput firing contenteditable div", "body": "using event event fired work chrome microsoft edge also reproduces react nt seem regression see reproduced maybe related jquense", "num": "7280", "d": "7/2016"}, {"title": "todoapp example main page", "body": "main page stands jsx var todolist reactcreateclass render function var createitem function item return return thispropsitemsmap createitem var todoapp reactcreateclass getinitialstate function return items text onchange function e thissetstate text etargetvalue handlesubmit function e epreventdefault var nextitems thisstateitemsconcat text thisstatetext id datenow var nexttext thissetstate items nextitems text nexttext render function return todo add thisstateitemslength reactdomrender mountnode let look element reason declare inside function would suggest declare function inside function suggestion jsx var todolist reactcreateclass createitem function item return render function think ps sorry could nt find better place post idea", "num": "7279", "d": "7/2016"}, {"title": "colors", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7276", "d": "7/2016"}, {"title": "chrome debugger causes event listeners skipped", "body": "browser chrome mac react component includes function component renders among things functions props unexpected behavior without breakpoints chrome debugger functions run correctly however breakpoint introduced method function entirely skipped sure intended consequence synthetic events reused seems unexpected steps reproduce jsfiddle open dev tools note never runs comment note runs", "num": "7271", "d": "7/2016"}, {"title": "microsoft edge textinput event fires twice ctrla selection keypress crashes draftjs", "body": "issue discovered building editor draftjs see original issue filed edge provides textevent still useful disabling canusetextinputevent react edge fixes draftjs issue reproduce bug draftjs go type hit enter type ctrla select everything type j get javascript error editor actually reactdomcomponent confused state dom component react component points prematurely removed", "num": "7269", "d": "7/2016"}, {"title": "improve warnings refs functional components runtime docs", "body": "trouble get working one composite components inline ref function always called mount unmount like thats statelessfunctional component react print warning one tries use stateless components", "num": "7267", "d": "7/2016"}, {"title": "unknown prop warning ignore undefined", "body": "emitted even property value perhaps treated existing perhaps intended afaik", "num": "7266", "d": "7/2016"}, {"title": "support referrerpolicy attribute", "body": "referrerpolicy defined whatwg html eg elements also see", "num": "7263", "d": "7/2016"}, {"title": "react redux sortable problem", "body": "hello trying sort list elements unique key aplication based react redux sorting using works really good save sort order redux store store changes triggers rerendering elements swap back previous positions probalbly react detect sortable already made change dom works well use mathrandom keys really like avoid force react detect keys displayed list already changed order", "num": "7262", "d": "7/2016"}, {"title": "add dependency ci checks", "body": "dependency ci new service checks status projects dependencies post commit able read dependencies packagejson checks dependencies various metrics eg deprecated unmaintained check license current behavior currently adding updating dependencies check manually expected behavior enabling could give additional metrics dependencies project free fast need integration signing github giving access repo enabling switch large open source repositories like mozilla servo already enabled", "num": "7261", "d": "7/2016"}, {"title": "error messages omitting relevant components displayname", "body": "please forgive appears like rant feature request searched ca nt find explanation error messages displayed without component responsible driving insane every component project explicit specified debugging rendering bunch immutable props changed one prop types see warning using maps children yet fully supported experimental feature might removed convert sequence iterable keyed reactelements instead obviously missed something could easily fixed knew even component name message frustrating taunting know problem wo nt tell feel makes infuriating looking stacktrace behind useless well usual neverending list react function calls mention source files spent countless time hunting errors like would taken moments knew name component responsible would infinitely helpful field appeared debug output", "num": "7257", "d": "7/2016"}, {"title": "react state set set object", "body": "like following code want change set use following code change state directly official note", "num": "7256", "d": "7/2016"}, {"title": "bug backspace input type number behaves badly blink", "body": "appears introduced new chrome version ca nt find reference affectedtested browsers os x chrome opera unaffected browsers safari firefox backspacing input element set causes odd behavior decimal point gone ca nt easily readded example example simply backspaced twice second backspace expect showing input instead reads cursor moved beginning next two jumps attempts add another decimal point fiddle tested react notes occurs set neither set input behaves properly currently working around issue unfortunately setting input value via ref", "num": "7253", "d": "7/2016"}, {"title": "attributes properties custom components", "body": "want request feature report bug feature current behavior custom component properties always set attribute expected behavior maybe react watch static property custom elements decide set attribute instance property otherwise objects array could always passed properties order avoid", "num": "7249", "d": "7/2016"}, {"title": "component specs document nextcontext parameters", "body": "including contexttypes adds parameter signature several component lifecycle functions documented two locations anyone attempting implement plugin react nt made use context would unlikely consider extra parameters since documented slightest componentspecs page leading hardtofind bugs please consider updating reference context parameters", "num": "7244", "d": "7/2016"}, {"title": "expand border style property", "body": "current behaviour passedin style property would translated want shorthand style property remained unexpanded outlook dose support style properties like borderwidth bordercolor etc also found expanding operation react done configurable ideas thanks advanced", "num": "7243", "d": "7/2016"}, {"title": "custom properties set style objects", "body": "using css custom properties inline styles react logs following console dev mode demo logged importantly warning though styles applied elements client side dev production applied server rendering maybe initial client render client side elements taken dom put back state changes see info affects chrome react", "num": "7241", "d": "7/2016"}, {"title": "missing react element debugid warning testing components jest", "body": "want request feature report bug report bug current behavior testing components shown calling current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior according internal warning nt displayed versions react browser os affected issue work previous versions react react reactaddonstestutils reactdom nt receive warning", "num": "7240", "d": "7/2016"}, {"title": "page found", "body": "found want use jsx guide shows set compilation", "num": "7239", "d": "7/2016"}, {"title": "hey", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7237", "d": "7/2016"}, {"title": "date input defaultvalue regression", "body": "chrome browser webview android defaultvalue specified show defaultvalue react works tested multiple devices including tablets phones phone works ok chrome desktop browser react react additionally tap blank date field select date defaultvalue set leaves field blank onchange event triggered test case inspecting elements rendered android device via chrome devtools version renders version renders value element also affects possibly types tested date time", "num": "7233", "d": "7/2016"}, {"title": "unit test failures react", "body": "bug unit tests using shallow rendering fail typeerror read property onsetdisplayname null ca nt seem get testutils jsfiddle build output code snippet import expect expect import testutils reactaddonstestutils import react react import blurinput beforeeach function props value onchange function expectspyon props onchange let renderer testutilscreaterenderer rendererrender instance getinstance renderer componenttree renderergetrenderoutput reflects value underlying input function expect componenttreepropsvalue tobe expect instancestatevalue tobe expected behavior unit test run normally versions react browser os affected issue work previous versions react issue", "num": "7231", "d": "7/2016"}, {"title": "show", "body": "report bug enable react tab developer tools react chrome", "num": "7228", "d": "7/2016"}, {"title": "performance regression removing rows large table", "body": "javascript frameworks benchmark ran performance regression react reproduce open reactjs version open console repeat three times following click create click clear get result like runlots took clear took runlots took clear took runlots took clear took repeat reactjs get something like unlots took clear took runlots took clear took runlots took clear took measurement chrome macos mbp notice clear lot slower first two runs react v third clear run performs react versions source code found repository benchmark", "num": "7227", "d": "7/2016"}, {"title": "deprecation warnings production", "body": "want request feature report bug feature current behavior warnings stripped production build current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior ideally important warnings production namely ones either indicate something broken definitely broken next major version upgrade react react could provide function register callback would called every warning prod callback would responsible whatever wanted eg capturing stack trace amp reporting error server since working react know supported hacked version unfortunately ended split across commits since nt test well pushing implements callback registration main hook next two bugfixes diff got warnings wanted react hack keep stuff debug build really trying use prod exact details nt important give idea flavor things looking broken next version almost certainly bad bug ideally system would also make use new error codes keep warning messages weighing prod build react version since highly selective warnings kept potential save stripping messages anyway might worth effort unless choose keep significantly warnings prod versions react browser os affected issue work previous versions react", "num": "7224", "d": "7/2016"}, {"title": "feature connection react view rctbridgemodule", "body": "connection reactview rctbridgemodule since want create ads like canvas ad facebook find rctbridgemodule callback reactview", "num": "7223", "d": "7/2016"}, {"title": "firefox hack leaky without noop", "body": "want request feature report bug bug current behavior right react provides crossbrowser workaround event firefox selectionchange event nt fire react hacks around evaluating selection smart however nt added handler component part selection listening hack firefox wo nt ever fire means happen something changes selection wo nt caught expected next time fires handler triggered via part hack since react thinks selection changed example place cursor end sentence fires thanks updates selection last character handle deleting character preventing default nt fire change nt taken place yet expected updates selection another character handle deleting another character fires thanks internal state comparing selection updated date expected add noop handler problem goes away since always fire rendering thanks never fire incorrectly due example draftjs onkeyup handler actually nt anything except without handling would nt stay sync firefox expected behavior ideally think event hack would still fire even without developer add noop component versions react browser os affected issue work previous versions react react firefox", "num": "7222", "d": "7/2016"}, {"title": "consider exposing opaque component path somehow", "body": "something thought regard focus hover selection implement hover top level state value currently hovered root component currently focused component anything gets rerendered respond things changing however also means everything gets rerendered previous next path ideal would store path component extract path internal state way quickly rerender previous next path still letting anything react focushover changing maybe generally useful selection bit special might need rerender anything two paths also optimized similarly checking child node corresponds start end path anything selected unselected", "num": "7221", "d": "7/2016"}, {"title": "ship", "body": "estimated date yet wanted make sure something track noncherrypicking actions required set point", "num": "7220", "d": "7/2016"}, {"title": "would like make sure lifecycle react usage jquery datatable react", "body": "hey guys freshman react facing problems like fetch data server show table create features deal loading error statues like render spinner data loading error message error occured datatable everything works perfectly issue place run productrun function initialized datatable tried put componentdidmount componentwillupdate nothing works even trie put render function still got nothing anybody show way let work really appreciate component import react react import contentwrapper componentslayoutcontentwrapper import grid row col panel button table reactbootstrap import productsrun productsrun import link reactrouter import spinner componentswidgetsspinner class products extends reactcomponent componentdidmount thispropsfetchproducts export default products productrun function", "num": "7218", "d": "7/2016"}, {"title": "way let users know invalid type returned", "body": "error message question helpful technically possible show returned", "num": "7215", "d": "7/2016"}, {"title": "feature request merge classname prop outermost container component", "body": "use classname prop html element custom react component requesting support feature simplifies component usage need apply additional styles without wrap component external div mycomponent render return hello expected usage render hello affect achieved mixin nonmounted tests use thispropsclassname find components", "num": "7214", "d": "7/2016"}, {"title": "thisstate constructor thissetstate everywhere else violating uniform access principle", "body": "style creating components react clearly violating uniform access principle general source confusion bugs able set state two different ways must constructor must everywhere else believe much better way set state general universal already accessing state setting state constructor everywhere else behavior could easily replicated proxies", "num": "7212", "d": "7/2016"}, {"title": "onchange firing properly react paste text textarea", "body": "hello copypaste data keyboard textarea onchange firing works fine chrome ff included test link log msg happen copypaste data textarea thanks", "num": "7211", "d": "7/2016"}, {"title": "add afterbatchupdate callback similar", "body": "want request feature report bug feature request discovered would quite useful us able react call userdefined function every batch updates case would like ask datastore remove unneeded data every round updates say user clicks button resulting ui changes done existing lifecycle methods nt seem provide us way achieve behavior currently releasing data datastore unmount components suboptimal new component mount place might ask similar data could react execute callback round updates ui changes quiesce could avoid unnecessary unloadreloads alexcole", "num": "7207", "d": "7/2016"}, {"title": "bot comment prs build size changes threshold", "body": "would nice establish threshold bot comment pr adds number bytes umd build size setup potentially add metrics want track notification", "num": "7205", "d": "7/2016"}, {"title": "reason use null instead undefined default state using default would allow using default values", "body": "really issue reason use null instead undefined default state using default would allow using default values", "num": "7204", "d": "7/2016"}, {"title": "behaviour consistent dom values identical", "body": "created opposite bug react fixed match dom behaviour instead solution proposed see", "num": "7203", "d": "7/2016"}, {"title": "enhancement htmlxml comment support jsx", "body": "feature support xml comments jsx current status currently way insert comments jsx flow wrap js context proposed extension xml like comments would also allow us quickly temporarily comment components jsx flow like", "num": "7201", "d": "7/2016"}, {"title": "weird behaviour prop present", "body": "want request feature report bug bug current behavior example reactdomrender reactcreateelement div key classname foo test documentgetelementbyid container renders test reactdomrender reactcreateelement div key classname foo test documentgetelementbyid renders test see adding prop breaks rendering prop maybe parameters well weird reserved word js got prop another story behaviour definitely weird versions react browser os affected issue work previous versions react chrome tested", "num": "7200", "d": "7/2016"}, {"title": "input elements always rendered attribute", "body": "want request feature report bug bug think current behavior rendering without name attribute render dom current behavior bug please provide steps reproduce possible minimal demo problem via similar template example regression using react expected behavior attribute rendered provided expected behavior react versions react browser os affected issue work previous versions react regression good", "num": "7198", "d": "7/2016"}, {"title": "npm problem", "body": "hello new react testing project whne npm install get lealsmacbookair snapchat manu npm install snapchat usersmanudesktopsnapchat react npm warn reactaddonspurerendermixin requires peer react none installed npm update lealsmacbookair snapchat manu npm update snapchat usersmanudesktopsnapchat reactnativecamera git npm warn reactaddonspurerendermixin requires peer react none installed nt know react packagejson", "num": "7196", "d": "7/2016"}, {"title": "react strips property tag issues warning", "body": "want request feature report bug bug current behavior react flagging warning stripping property tag current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior strip issue warning versions react browser os affected issue work previous versions react chrome", "num": "7192", "d": "7/2016"}, {"title": "bug missing react element debugid triggered reactdomserverrendertostaticmarkup", "body": "react provided fiddle throwing missing react element debugid warning described internal ie userfacing react warning warning present react make claim sane usage pattern exists realworld components unexpected failure case", "num": "7190", "d": "7/2016"}, {"title": "missing react element debugid warning triggering render componentwillmount", "body": "want request feature report bug bug current behavior reported adamryvola react displaying warning another component rendered current behavior bug please provide steps reproduce possible minimal demo problem via similar template js import react component react import reactdom reactdom const container documentgetelementbyid container const menucontainer documentgetelementbyid menucontainer export default class app extends component componentwillmount reactdomrender menucontainer lt trigger warning render return app reactdomrender container jsfiddle expected behavior according gaearon warning internal bugs react meant users source warning triggered versions react browser os affected issue work previous versions react react issue", "num": "7187", "d": "7/2016"}, {"title": "react removes tabindex property", "body": "react removes tabindex property defined like component found working misunderstanding bug update fault proper tabindex property camelcase", "num": "7186", "d": "7/2016"}, {"title": "linkedin react users group proposed angular jobs subcription", "body": "hello subscribed linkedin react users group thought would like know currently administered angular guy proposed look angular jobs subscription really one might expect", "num": "7184", "d": "7/2016"}, {"title": "documentation add schema illustrate component lifecycle", "body": "peter beshai created good cheatsheet illustrate component lifecycle could useful similar schema react documentation page components", "num": "7183", "d": "7/2016"}, {"title": "testutils shallow renderer triggers componentwillreceiveprops nt trigger componentdidupdate", "body": "following test rerender component different props using different methods get different results sure intended behaviour think behaving like expect js import react component react import createrenderer renderintodocument reactaddonstestutils import jsdom mochajsdom import reactdom reactdom class foo extends component componentwillreceiveprops consolelog component receive props describe test gt jsdom triggered triggered shallow renderer sure test feature using think possible would expect triggered shallow renderer well using node react", "num": "7182", "d": "7/2016"}, {"title": "error production devlopment", "body": "idea error occured production version anything wrong many thanks information uncaught invariant violation minified react error visit full message use nonminified dev environment full errors additional helpful warningsreactprodinvariant addcomponentasrefto attachref reactrefattachrefs attachrefs notifyall close closeall perform batchedmountcomponentintonode batchedupdates batchedupdates rendernewrootcomponent rendersubtreeintocontainer render selecthandler firechange onmenuselect onclick onclick invokeguardedcallback executedispatch executedispatchesinorder executedispatchesandrelease executedispatchesandreleasetoplevel foreachaccumulated processeventqueue runeventqueueinbatch handletoplevel handletoplevelimpl perform batchedupdates batchedupdates dispatchevent", "num": "7181", "d": "7/2016"}, {"title": "form submit button empty values", "body": "want request feature report bug bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template using react reactdom expected behavior versions react browser os affected issue work previous versions react extra attributes empty values added submit button form works", "num": "7179", "d": "7/2016"}, {"title": "setstate update existing state transition", "body": "hi guys component count character word component render got lot duplicate warning chrome console tool gt fix problem finally want return states thanks import react react import reactdom reactdom import countable countable class statics extends reactcomponent constructor props super props thisstate paragraphs sentences words characters thiscountercallback thiscountercallbackbind countercallback counter thissetstate paragraphs counterparagraph sentences countersentences words counterwords characters countercharacters counterall render var area documentgetelementbyid editor countablelive area thiscountercallback return thisstatewords words reactdomrender documentgetelementbyid footerstatics", "num": "7177", "d": "7/2016"}, {"title": "svg xmlns attribute", "body": "want request feature report bug bug current behavior following error raised warning unknown prop tag current behavior bug please provide steps reproduce possible minimal demo problem via similar template create component svg tag set xmlns attribute expected behavior warning versions react browser os affected issue work previous versions react", "num": "7176", "d": "7/2016"}, {"title": "range input value set initial render", "body": "want request feature report bug bug current behavior rendering range input element value input nt set initial render call render value get picked current behavior bug please provide steps reproduce possible minimal demo problem via similar template created demo demo includes component called test simply renders range input component passing props update button calls setstate trigger render also consolelog statements show values used render run demo notice click update button twice input value updates strange thing seems something min max attributes input commented line seems work fine initial render references state value nt work expected behavior input value set properly initial render versions react browser os affected issue work previous versions react affects react works fine tested latest chrome", "num": "7170", "d": "7/2016"}, {"title": "run function automatically", "body": "hi guys component proceeded find page render component inner function called wrong tip want search press enter key import react react import reactdom reactdom class quickbar extends reactcomponent constructor props super props thisstate issetfonttoggled false isfindformtoggled false value find type hit enter thistogglefind thistogglefindbind reactdomrender documentgetelementbyid headerquickbar", "num": "7169", "d": "7/2016"}, {"title": "getting warning using reactcsstransitiongroup react", "body": "bug current behavior using reactcsstransitiongroup react warns unknown prop passed dom element created component span demo expected behavior versions react browser os affected issue work previous versions react react v os tested osx el capitan worked previous versions", "num": "7163", "d": "7/2016"}, {"title": "potential issue components imported", "body": "consider following import react react import reactdom reactdom import somecomponent somecomponent export class dashboard extends reactcomponent render return let dashboardelement documentgetelementbyid dashboard dashboardelement null reactdomrender dashboardelement file import react react import reactdom reactdom export class somecomponent extends reactcomponent issue least believe issue nt treated properly react maybe babel get error second import react react import reactdom reactdom class somecomponent extends reactcomponent moduleexports somecomponent everything works unless understanding fundamental level export moduleexports essentially react recognize latter first thing thing", "num": "7162", "d": "7/2016"}, {"title": "language used dangerously set innerhtml document unclear", "body": "document dangerously set innerhtml states intent behind syntax considered typetaint sorts typetaint also like recommend using language nt rely understanding term least supplement definition best create opportunity misunderstanding explaining security measure lest user draw conclusion importance", "num": "7161", "d": "7/2016"}, {"title": "emessagequeuejni javalangoutofmemoryerror", "body": "listview jni leak issue idalvikvmheap forcing collection softreferences allocation idalvikvmheap clamp target gc heap ddalvikvm gcbeforeoom freed free paused total edalvikvmheap memory allocation idalvikvm main runnable idalvikvm group main idalvikvm cgrp idalvikvm schedstat idalvikvm androidutilsparseintarrayput sparseintarrayjava idalvikvm comfacebookreactuimanagereventstoucheventcoalescingkeyhelperaddcoalescingkey idalvikvm comfacebookreactuimanagereventstoucheventinit idalvikvm comfacebookreactuimanagereventstoucheventobtain idalvikvm comfacebookreactuimanagerjstouchdispatcherhandletouchevent idalvikvm comfacebookreactreactrootviewdispatchjstouchevent idalvikvm comfacebookreactreactrootviewonintercepttouchevent idalvikvm androidviewviewgroupdispatchtouchevent idalvikvm androidviewviewgroupdispatchtransformedtouchevent idalvikvm androidviewviewgroupdispatchtouchevent idalvikvm androidviewviewgroupdispatchtransformedtouchevent idalvikvm androidviewviewgroupdispatchtouchevent idalvikvm androidviewviewgroupdispatchtransformedtouchevent idalvikvm androidviewviewgroupdispatchtouchevent idalvikvm comandroidinternalpolicyimplphonewindow decorviewsuperdispatchtouchevent idalvikvm comandroidinternalpolicyimplphonewindowsuperdispatchtouchevent idalvikvm androidappactivitydispatchtouchevent idalvikvm comandroidinternalpolicyimplphonewindow decorviewdispatchtouchevent idalvikvm androidviewviewdispatchpointerevent idalvikvm androidviewviewrootimpldeliverpointerevent idalvikvm androidviewviewrootimpldeliverinputevent idalvikvm androidviewviewrootimpldoprocessinputevents idalvikvm androidviewviewrootimplenqueueinputevent idalvikvm androidviewviewrootimpl windowinputeventreceiveroninputevent idalvikvm androidviewinputeventreceiverdispatchinputevent idalvikvm androidosmessagequeuenativepollonce native method idalvikvm androidosmessagequeuenext idalvikvm androidoslooperloop idalvikvm androidappactivitythreadmain idalvikvm javalangreflectmethodinvokenative native method idalvikvm javalangreflectmethodinvoke idalvikvm comandroidinternaloszygoteinit methodandargscallerrun idalvikvm comandroidinternaloszygoteinitmain idalvikvm dalviksystemnativestartmain native method einputeventreceiver exception dispatching input event emessagequeuejni exception messagequeue callback handlereceivecallback idalvikvmheap clamp target gc heap ddalvikvm gcforalloc freed free paused total idalvikvmheap forcing collection softreferences allocation idalvikvmheap clamp target gc heap ddalvikvm gcbeforeoom freed free paused total edalvikvmheap memory allocation idalvikvm main runnable idalvikvm group main idalvikvm cgrp idalvikvm schedstat idalvikvm javalangabstractstringbuilderenlargebuffer abstractstringbuilderjava idalvikvm idalvikvm javalangstringbufferappend idalvikvm javaiostringwriterwrite idalvikvm javaioprintwriterdowrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterappend idalvikvm javaioprintwriterappend idalvikvm javaioprintwriterappend idalvikvm javalangthrowableprintstacktrace idalvikvm javalangthrowableprintstacktrace idalvikvm androidosmessagequeuenativepollonce native method idalvikvm androidosmessagequeuenext idalvikvm androidoslooperloop idalvikvm androidappactivitythreadmain idalvikvm javalangreflectmethodinvokenative native method idalvikvm javalangreflectmethodinvoke idalvikvm comandroidinternaloszygoteinit methodandargscallerrun idalvikvm comandroidinternaloszygoteinitmain idalvikvm dalviksystemnativestartmain native method emessagequeuejni javalangoutofmemoryerror dandroidruntime shutting vm wdalvikvm thread exiting uncaught exception idalvikvmheap clamp target gc heap ddalvikvm gcforalloc freed free paused total idalvikvmheap forcing collection softreferences allocation idalvikvmheap clamp target gc heap ddalvikvm gcbeforeoom freed lt free paused total edalvikvmheap memory allocation idalvikvm main runnable idalvikvm group main idalvikvm cgrp idalvikvm schedstat idalvikvm javalangabstractstringbuilderenlargebuffer abstractstringbuilderjava idalvikvm idalvikvm javalangstringbufferappend idalvikvm javaiostringwriterwrite idalvikvm javaioprintwriterdowrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterwrite idalvikvm javaioprintwriterappend idalvikvm javaioprintwriterappend idalvikvm javaioprintwriterappend idalvikvm javalangthrowableprintstacktrace idalvikvm javalangthrowableprintstacktrace idalvikvm comumenganalyticsba idalvikvm comumenganalyticsda idalvikvm ualyafa idalvikvm ualyafuncaughtexception idalvikvm javalangthreadgroupuncaughtexception idalvikvm javalangthreadgroupuncaughtexception idalvikvm dalviksystemnativestartmain native method idalvikvm reacting signal idalvikvm wrote stack traces dataanrtracestxt", "num": "7160", "d": "7/2016"}, {"body": "yes please", "d": "7/2016"}, {"body": "bug tracker issues react usage questions please ask stackoverflow irc solution comes mind kind memoization lot ways different trade offs cases memoization could expensive child rerendering", "d": "7/2016"}, {"body": "fun stackoverflow would better place ask thanks", "d": "7/2016"}, {"body": "thank", "d": "7/2016"}, {"body": "went without hitch nt new file actually move git rm amp add keep eye next time add new page docs", "d": "7/2016"}, {"body": "appreciate idea however think point going opt explicitness discussion maintain jsx spec since exists going close", "d": "7/2016"}, {"body": "replace nodes owned react bad idea polyfill must make absolutely sure make react think siblings updated crash still bad idea rely nt recommend either polyfill needs made reactcompatible need way show use still want author react obviously reactive", "d": "7/2016"}, {"body": "binding global assigning property would assume", "d": "7/2016"}, {"body": "confirmed fixed great jobs", "d": "7/2016"}, {"body": "documentbodystylewebkittransform rotate consolelog documentbody lt consolelog documentbodystylewebkittransform lt rotate consolelog documentbodystyletransform lt rotate modern chrome behaves", "d": "7/2016"}, {"body": "thanks well documented issue leave spicyj since hard work", "d": "7/2016"}, {"body": "hm give null ref throw expected reactdomfinddomnode nt work", "d": "7/2016"}, {"body": "definitely let us know hit best guess perhaps something overriding something else modifying dom object obviously replacing values injecting good luck agree nt seem like react", "d": "7/2016"}, {"body": "code smell spread unrelated props dom element better explicit exact use case trying solve spreading", "d": "7/2016"}, {"body": "passing events classname style outer tag", "d": "7/2016"}, {"body": "likely unknown props renderer asis future relying props silently dropped bad idea", "d": "7/2016"}, {"body": "help u need", "d": "7/2016"}, {"body": "might want bring react native repo react one project point", "d": "7/2016"}, {"body": "workaround ux designer create simpler singlepath svg icon new version react rendering without problems still like know wrong original svg however avoid problem future", "d": "7/2016"}, {"body": "svg look like react ie render method looks like might using unnecessary support svg", "d": "7/2016"}, {"body": "indeed using tried switching back original svg without using however getting error using jsx uncaught typeerror reactdomuse function sure enough looks like one supported svg elements still surprising nt working anymore particular svg", "d": "7/2016"}, {"body": "oh yea nt probably wo nt updated might say add want totally agree surprising guessing related way create dom nodes things correctly svg could never worked happened due irregularity", "d": "7/2016"}, {"body": "thanks help prefer less complex svgs anyway reasons like changing fillstroke hover css think continue asking ux designer produce singlepath svgs going forward", "d": "7/2016"}, {"body": "reproduce thing without react think think single call", "d": "7/2016"}, {"body": "zpao totally right one reason love ie trollface thanks quick reply", "d": "7/2016"}, {"body": "planned implemented eventually please see", "d": "7/2016"}, {"body": "think convenient code look like simplify", "d": "7/2016"}, {"body": "disagreeing mindful overusing textonly components components nontrivial overhead could significant performance impact overused", "d": "7/2016"}, {"body": "syranide true benchmark results kinds things inline vs function call vs stateless component vs stateful component", "d": "7/2016"}, {"body": "browser experiencing nt anything special attribute guessing browser might correcting value something confirms spec indicates valid values", "d": "7/2016"}, {"body": "test case appears working expect firefox chrome", "d": "7/2016"}, {"body": "zpao appears right realized noticing setting jsx resulted browser behavior different guess chrome must accepting changing semantic values odd reason think issue closed", "d": "7/2016"}, {"body": "thanks checking", "d": "7/2016"}, {"body": "probably following old tutorial deprecated year half ago since removed instead write", "d": "7/2016"}, {"body": "provide minimal project reproducing thanks", "d": "7/2016"}, {"body": "pulled nodemodules size run npm install npm start navigate reproduce hopefully", "d": "7/2016"}, {"body": "list look fixing week clear warning valuable look earlier error code instead symptom root cause described mainly occurs prop state defined earlier error occurred app scroll console look original error warning", "d": "7/2016"}, {"body": "gaearon scrolling back related error logged react choke strange annoying", "d": "7/2016"}, {"body": "probably means using promise polyfill swallows errors could case", "d": "7/2016"}, {"body": "gaearon might possible sure fix though get occasional errors promise returning anything still find solution", "d": "7/2016"}, {"body": "get exact warning propsstate defined scroll console related error ca nt pin point propstate undefined using bable polyfill asyncawait silly workaround put consoleerror err catch statements least know name propstate undefined", "d": "7/2016"}, {"body": "got error today soon subscribe reducer form different components loaded simultaneously screen trying access reducer throws error using redux", "d": "7/2016"}, {"body": "adityaathavale interesting crossed mind multiple dispatches time nothing might one causes", "d": "7/2016"}, {"body": "got error trying implement dimensional charts using crossfilterjs believe one crossfilter operations causing choke import react react import crossfilter crossfilter import update reactaddonsupdate class dimensionalcharts extends reactcomponent constructor props super props componentwillmount const data range map gt randomgaussian filter crossfilter data index filterdimension gt indexgroup indexgroup reducesum gt value filterdimension gt valuegroup valuegroup reducesum gt filterdimension gt filterall const index value thisstate redrawall storechartsforeach chart gt chartredraw addchart chart const newstate update thisstate charts push chart", "d": "7/2016"}, {"body": "got faulty function", "d": "7/2016"}, {"body": "said warning zero effect errors remove soon absolutely irrelevant ignore nt see real error problem setup adding another comment thread type error caused help us occur error need describe many different ways could cause error javascript specific react redux way help us reproduce warning without error share code trim project publish result instructions reproduce send link take look error swallowed errors swallowed setup us removing warning wo nt fix problem errors keep getting silently swallowed something else hiding nt know please add new comments project showing error gets swallowed thanks", "d": "7/2016"}, {"body": "gaearon sorry posting without info posted getting warning without prior errors thrown issue importing function another file function artifact reference part errors thrown xcode console gist trimmed example code", "d": "7/2016"}, {"body": "browserhtml behavior something react involved also please use github issues react bugsdevelopment use forumstackoverflow general questions", "d": "7/2016"}, {"body": "bug tracker issues react usage questions please ask stackoverflow irc", "d": "7/2016"}, {"body": "indeed show bug react reopen", "d": "7/2016"}, {"body": "actually going fix links", "d": "7/2016"}, {"body": "cc gaearon", "d": "7/2016"}, {"body": "oh sorry brain function well future", "d": "7/2016"}, {"body": "actually big deal shortterm wanted make sure nt lose things ps great work tool post", "d": "7/2016"}, {"body": "thanks", "d": "7/2016"}, {"body": "please read documentation website looking source files relative links nt work written website confusing unfortunately jekyll works", "d": "7/2016"}, {"body": "hey example nt see part specifies animation could explain would animated thanks", "d": "7/2016"}, {"body": "hey keyan adapted svg looks like missing css animations good spot thanks", "d": "7/2016"}, {"body": "actually keyanzhang keyframe animations work react added following sass file outline strokedasharray len strokedashoffset animation anim time linear infinite keyframes anim strokedasharray len strokedashoffset strokedasharray len strokedashoffset strokedasharray len strokedashoffset still nt seem animating", "d": "7/2016"}, {"body": "work could provide jsfiddle good one start demonstrate issue", "d": "7/2016"}, {"body": "hey keyanzhang got working actually total user error part changed attribute bizarre reason lol thanks help", "d": "7/2016"}, {"body": "happy give try", "d": "7/2016"}, {"body": "access files source code established populating full dependency graph tools like browserify webpack systemjs assetgraph give", "d": "7/2016"}, {"body": "munter currently available default set people build systems kind large code base also slow readparse files randomly needs smarter parallelize cache info certainly impossible build nt integrated build get adoption particular transform possible", "d": "7/2016"}, {"body": "illustrate sebmarkbage talking rollup limitations pseudo code example running output rollup thru closure compiler get words precedent certainly rollup treeshaking capabilities improved cover primitives need much optimizations terms react uses components achieve described cc richharris", "d": "7/2016"}, {"body": "reminds bit jeffmo talk using flow treeshaking react europe", "d": "7/2016"}, {"body": "thought lot would probably need sort cursor edit fold fold regarding code size lot folding would logically original component definition could nt fold everything number time folded size folded depending done bundled size could jump lot unless missing something component folding fold one liners webapp high limitations server side rendering build backend desktop apps electron amp stuff", "d": "7/2016"}, {"body": "nt issue master believe change controlled inputs could wrong think avoids creating custom change event really nt know occurs dispatching custom events nt bubble believe ie couple work arounds one perform check like mentioned jquery issue tracker intuition says would hinder bubbling tested chrome firefox safari got pr details", "d": "7/2016"}, {"body": "jimfb know busy things insight", "d": "7/2016"}, {"body": "without looked issue assume used html markup broke switched createelement expect watching changes children probably always brokenunsupported updates anyway think tag removed spec deprecated anyway probably worth effort support", "d": "7/2016"}, {"body": "thanks quick response nt know deprecated since widely used polymer elements", "d": "7/2016"}, {"body": "looks like may replaced may issue maybe want fix anyway mdedys chance using shadydom instead shadowdom experience issue full shadowdom shadydom jsfiddle would next step toward fixing", "d": "7/2016"}, {"body": "would also need know children get added modified via javascript shadow nodes get updated", "d": "7/2016"}, {"body": "yes using shadydom instead standard shadowdom rely polymer takes advantage performance shadydom mentioned blog post experiment", "d": "7/2016"}, {"body": "react specialcased support shadydom likely run lot issues use shadowdom using react probably warn someone using shady dom", "d": "7/2016"}, {"body": "hasanul hoque jim notifications githubcom wrote looks like content may replaced slot may issue maybe want fix anyway mdedys chance using shadydom instead shadowdom experience issue slot full shadowdom shadydom jsfiddle would next step toward fixing receiving subscribed thread reply email directly view github mute thread", "d": "7/2016"}, {"body": "code listed use timeout props hmm think line breaks would help entry explaining added release notes saying easy fault updating docs reflect would like massage doc page send pr", "d": "7/2016"}, {"body": "ah got yeah knowing works thanks", "d": "7/2016"}, {"body": "tried looks like nt even installed take notice error message", "d": "7/2016"}, {"body": "error resolve module means file nt exist folder trying run command could case", "d": "7/2016"}, {"body": "thanks reply milesj amp mxstbr already installed npm install g webpack yes mxstbr add mainjs folder share please proper way installed react reduxwebpack actually new react", "d": "7/2016"}, {"body": "got everything installed perfectly fine add file folder contents work js mainjs var react require react var reactdom require reactdom reactdomrender hello world documentgetelementbyid example", "d": "7/2016"}, {"body": "thanks mxstbr actually get point steps npm init give name package name npm install react reactdom save save dependencys npm install save babelpresetreact babelloader babelcore got error like", "d": "7/2016"}, {"body": "krishbhattacharyya adding local dependency well trick", "d": "7/2016"}, {"body": "thanks usirin npm install webpack savedev supporting operating system vista thanks everybody", "d": "7/2016"}, {"body": "mean supporting webpack works windows", "d": "7/2016"}, {"body": "close", "d": "7/2016"}, {"body": "intend work please write comment change code small effort would spent creating good warning page explaining common problems solutions example warning page one would similar different topic", "d": "7/2016"}, {"body": "look", "d": "7/2016"}, {"body": "sure", "d": "7/2016"}, {"body": "assigning keep track issue", "d": "7/2016"}, {"body": "please include stacktrace worst possible message get big merge absolutely nothing guide problem", "d": "7/2016"}, {"body": "pajn bitten lack information many times especially dealing hoc edit nt manage find time last week work week", "d": "7/2016"}, {"body": "similar", "d": "7/2016"}, {"body": "sounds good", "d": "7/2016"}, {"body": "may take please gaearon except alexzherdev wants tackle course", "d": "7/2016"}, {"body": "yup tuesday july ryan lahfa notifications githubcom wrote may take please gaearon except alexzherdev wants tackle course receiving mentioned reply email directly view github mute thread", "d": "7/2016"}, {"body": "alexzherdev awesome", "d": "7/2016"}, {"body": "react warns unknown properties supplied html tags issue reactflexboxgrid suggest submit issue instead", "d": "7/2016"}, {"body": "indeed bug react would need file issue explains fix problem side cheers", "d": "7/2016"}, {"body": "discussion lets close keep", "d": "7/2016"}, {"body": "use without reactjs behavior similar type dots numbers press updown arrow keys sure handle avoid since natively disapears", "d": "7/2016"}, {"body": "related", "d": "7/2016"}, {"body": "yes duplicate root cause", "d": "7/2016"}, {"body": "zhouce review code created demo onchange event problem javascript indexjs import babelpolyfill import react component react import render reactdom class container extends component constructor super thisonchange thisonchangebind thisstate text onchange e consolelog etargetvalue thissetstate text etargetvalue render return hello react render documentgetelementbyid root packagejson dependencies babelpolyfill react reactdom devdependencies babelcli babelcore babelloader babelplugintransformobjectrestspread babelpresetreact babelregister webpack webpackdevmiddleware", "d": "7/2016"}, {"body": "bug tracker issues react usage questions please ask stackoverflow irc short version already data js need pull dom", "d": "7/2016"}, {"body": "best link post updating open source patent grant ask lawyers anything add cheers", "d": "7/2016"}, {"body": "wonderful thanks quick response", "d": "7/2016"}, {"body": "additional information diff", "d": "7/2016"}, {"body": "reason google microsoft employees allowed use reactjs work according rob eisenberg creator aurelia framework claim false speak author motives simple fact check reveals microsoft recently released actively working react native windows obviously using react developed microsoft employees announced windows blog microsoft allows employees use react also encourages thirdparty developers build apps platform react update new version skype built react google unhappy original patent grant updated response concerns ok apple relevant discussions reddit hn", "d": "7/2016"}, {"body": "indeed lot stupid things said patent grant still nt mean nt couple big issues software patents awfully complex idea would happen court nt want know best solution avoid problems software patents avoid first place developer idea clients business last hour worked large energy provider job make software works usecase something vital many people trust still working next years running proprietary hardware secured locations angularjs imagine chose react knows client subsidiaries going next years nt even work company imagine one bad subsidiary couple years patent troll even hate perfect right business means would lose license use software", "d": "7/2016"}, {"body": "jdubois part facebook entirely private opinion lawyer software patents awfully complex idea would happen court nt want know best solution avoid problems software patents avoid first place industry facebook needs cover asses giving assurance ca nt come even relevant enforceable patents actual nefarious sideeffects extra patent clause fine please bring something concrete actionable interested developers despise patents businesses require means would lose license use software would explicitly license relevant patents facebook even restructure company clever way modify react codebase skirt patents always sue believe end winning hand tallying plus minuses nt bite hand feeds clear would nt even matter used alternative react patents could apply well alternatives decide use frameworks increasingly learn likelihood subset hypothetical patents apply react would likely apply angularjs well framework would implement remotely inspired popular frameworks nt get everyone hung facebook bad guy would much concerned patenttrolls inc vague patent applied react unknown never going get answer show doorstep bsdlicense going protect numerous examples cases involving exactly past right nt mean stir pot business using react extensively tremendous benefit see hundred ways ending shitty legal trouble future suing facebook revoking license patents relevant use react even radar", "d": "7/2016"}, {"body": "nt understand use case let rephrase consultant working big company days month finished work week client supposed use work years maybe part client giant company might sue facebook patent issue point time future probably something totally different react knows giants companies mind case client would nt able use app developed would major issue wo nt able restructure modify react codebase say app deployed secured remote locations would cost insane amount money update think least warn clients delivering app specific license", "d": "7/2016"}, {"body": "think least warn clients delivering app specific license rude nt responsibility license clearly outlined repo client concerns would seem like something discussing legal team starting project understand license confusing developers really meant developers legal document reviewed legal counsel considered case within context companyconsumer legal standings think also important realize clarificationssummarizations license make potentially legally ambiguous understandable facebook might hesitant careful", "d": "7/2016"}, {"body": "rude perfectly agree developer responsibility whole point comment please note reactjs user commented discussion happened retweeted specific blog post matter like people telling read license believe people", "d": "7/2016"}, {"body": "lawyer far see bit article mistaken patent clause allowed anything constitutes competing facebook also seem inaccuracies however bit bold seem true relation patent assertion take legal actions ways challenge facebook license use react immediately revoked extract license pretty easy understand even lawyer license granted hereunder terminate automatically without notice subsidiaries corporate affiliates agents initiate directly indirectly take direct financial interest patent assertion facebook subsidiaries corporate affiliates ii party patent assertion arises whole part software technology product service facebook subsidiaries corporate affiliates iii party relating software long unlikely make patent assertion facebook license unlikely ever revoked least understand", "d": "7/2016"}, {"body": "interpret license hereunder patents file referring license another file", "d": "7/2016"}, {"body": "noob license issues assertions might look dumb crazy react recent license confusions getting infer compete facebook wont terminate use react initiate patent assertion facebook terminate use react confused violate patent facebook terminate use react", "d": "7/2016"}, {"body": "gaearon license hereunder patents refers software turn means react software distributed facebook inc stated sure suggesting otherwise", "d": "7/2016"}, {"body": "nadimtuhin mentioned lawyer understanding opinion compete facebook wont terminate use react correct initiate patent assertion facebook terminate use react correct violate patent facebook terminate use react nt say anywhere seen violate facebook patent loss react license may least problems anyway", "d": "7/2016"}, {"body": "still lawyer clarifications based nadimtuhin initiate patent assertion facebook terminate use react terminating use react discretion point patents license would terminate still completely valid bsd license use react point though patents covered react would exposed counterclaim violate patent facebook terminate use react directly grant notwithstanding foregoing facebook subsidiaries corporate affiliates files lawsuit alleging patent infringement first instance respond filing patent infringement counterclaim lawsuit party unrelated software license granted hereunder terminate section paragraph due counterclaim understanding patent license terminate fb sues also worth noting evolution similar patent license apache license albeit slightly defensive angle going close nothing actionable", "d": "7/2016"}, {"body": "think blog post maybe facebook lawyers clarifications help lot know everyone say im lawyer nt help teaching react friends companies really love react someone ask react patents nt good answer talking lawyers patents conference local meetup scary think topic affects react adoption impact usage gaearon still gon na ask facebook lawyers clarifications react fan seeing post ranting react patents seeing bad responses makes sad clarification fb topic help lot", "d": "7/2016"}, {"body": "watching social network sure trust facebook lawyers", "d": "7/2016"}, {"body": "zpao understand discussion went rails certainly apologize distracting everyone productive work disagree issue nt actionable gaearon going check lawyers tl dr could added readme clarify clause motivation think would help dispel lot confusion around license would consider reopening issue hear back maybe could lock prevent developers driveby lawyering", "d": "7/2016"}, {"body": "talked lawyers zpao clarification best give moment facebook open sourcing many projects last years protection patent trolls one reasons comfortable narrowing protection would make us much cautious releasing something eg react might released lawyers thought risky said major companies like google microsoft apple problems patent grant consider upsides downsides consult lawyers make informed decision refer discussions subject watching social network sure trust facebook lawyers good way make legal decisions", "d": "7/2016"}, {"body": "gaearon thanks getting back appreciate imperfect world live may something developers perennially confused thanks taking issue seriously work entire react team puts project community", "d": "7/2016"}, {"body": "gaearon joke apart trusting another company lawyer nt good way make legal decisions believe lawyers honest neutral", "d": "7/2016"}, {"body": "many questions variety assumptions first would like clarify two questions facebook think solo bsdl grant patent execution additional permissions granted patents", "d": "7/2016"}, {"body": "see jsfiddle thought component look like nt", "d": "7/2016"}, {"body": "ah yeah good catch rush posting fixed link", "d": "7/2016"}, {"body": "ok digging looks like shouldignorevalue setvalueforproperty always true false always false true due line true means value case always deleting attribute seem recall old browsers needing fancy handling around checkboxes maybe true case always tripleequals checking nodechecked property boolean value cast string even check return seems incorrect nt looked yet see logic rewritten", "d": "7/2016"}, {"body": "looks like behavior changed true branch master still wrong branch original change latest change without investigating deeply looks like moving branch guarding extra work sufficient", "d": "7/2016"}, {"body": "order determine checksum well instantiate component set internal state need render whole component tree even nt take actions dom methods called client always happen looks like reuse markup traverse dom populate cache nt looked closely see optimizations make differently defer spicyj wrote", "d": "7/2016"}, {"body": "would likely within scope contributor guide see current discussion", "d": "7/2016"}, {"body": "ok great thanks", "d": "7/2016"}, {"body": "probably much overhead lack immutability also enables potential performance improvements personally inclined say nt thought much sebmarkbage let chime generally want make use immutablejs say store value state eg realize nt actually say explicitly docs intent immutablejs wiki ignore immutability helpers nt belong react interesting used conjunction probably way encourage immutability would use way though field state points result call", "d": "7/2016"}, {"body": "mean react state immutable mean immutable immutablejs record data structure update method nt think ca nt take hard dependency unclear end way treat immutable records anyway could make immutable since react recreates whenever call something would nice clarity worried perf implications perf win get allocating one level negligible however time mutation convenient things like sure worth breaking deep immutability another thing kind tough lots data structures require cyclic dependencies external dependencies currently think early go deep immutability enforce one level deep", "d": "7/2016"}, {"body": "sebmarkbage imho seems could even considered componentinternal implementation detail given right lifecycle methods right ie could implement mutablestatefulreactcomponentimmutablejsstatefulreactcomponentetc base classhelpers reactcomponent provide state use see fit major reason beyond unreasonable complexity state formalized way right possibly overhead degree although imagine would nt issue practice", "d": "7/2016"}, {"body": "sebmarkbage something like nt seem like much overhead already props right", "d": "7/2016"}, {"body": "milesj think issue shallow nt prevent stuff like need recursively deep freeze state object nt really work much overhead state contains circular references", "d": "7/2016"}, {"body": "event handler called argument type nt need value click event need call assume bound variable function yeah fine however need something client event let function take extra parameter write instead use issue tracker bugs feature requests since bug please use stackoverflow discussion forums questions feel free leave link stackoverflow question thread necessary thanks", "d": "7/2016"}, {"body": "thanks feedback common use pass anonymous function slight variation would still created inside honestly think rather write using anonymous function going change today one day nottoodistant future likely update examples use classes refresh", "d": "7/2016"}, {"body": "think tool options unnecessary", "d": "7/2016"}, {"body": "someone mentioned back dan discussed came conclusion current behavior good case could come prop prop specified element trying change undefined prop never specified element first place interested tldr however sounds like antipattern trying remove prop post factum probably means first place use case missing let us know", "d": "7/2016"}, {"body": "best practice would alternate practice would bad practice would assign props undefined", "d": "7/2016"}, {"body": "jimfb exactly usecase reasoning quite expensive faster simply assign doubt measured practice nt really care thought worth bringing generally good idea react agree probably real reason", "d": "7/2016"}, {"body": "along lines way achieve prop deleting behavior", "d": "7/2016"}, {"body": "oztune sort probably bad practice general illegal prop never attached dom node first place thing fix however really need rather using cloneelement would manually pull old element call reactcreateelement new props", "d": "7/2016"}, {"body": "hehe bit logic behind choice makes sense however intuitive given widely used heuristic provided prop even throughout rest react tbf tho syranide point valid slower tho probably prohibitively could even measure thing", "d": "7/2016"}, {"body": "agree syranide issue use case context js class navitem extends reactcomponent onclick gt const onselect eventkey thisprops onselect eventkey render const props thisprops delete propsonselect delete propseventkey eg ideal nt general pass unused variables linting rules preference would exactly avoid deoptimization object away fast mode want avoid using eg lodash specifically one makes bunch extra passes object probably worse using", "d": "7/2016"}, {"body": "taion agreeingdisagreeing think real argument keeping asis think find lot people taking easy route unintentionally passing around rather cases specified invalid prop value thus showing warning need see warning really problem practice rarely guess saying nt suck works would otherwise although rare js", "d": "7/2016"}, {"body": "syranide actually violates lint rule enabled airbnb config use though though comment suggests enabled set nt end world saying rather set much", "d": "7/2016"}, {"body": "like itajaja approach using ignore pattern eslint p", "d": "7/2016"}, {"body": "react another library modify dom element technically could render never changes call custom library lifecycle hooks however case would sidestepping react completely", "d": "7/2016"}, {"body": "wpould possible use reactdnd sortingdraging elements", "d": "7/2016"}, {"body": "nice example", "d": "7/2016"}, {"body": "thanks catching", "d": "7/2016"}, {"body": "way actually nt need set explicitly use jsx", "d": "7/2016"}, {"body": "first sorry sounded angry developer rage time anyway wow nt realise would easy hopefully helps avoid future dev rage still think good idea specify clarity also avoids issues ie check render method mycoolcomponent thanks help", "d": "7/2016"}, {"body": "hey problem recalled ran issue totally feel pain", "d": "7/2016"}, {"body": "js var new set something thissetstate something like want immutable good idea valid mutating object state state need call updating absolutely want go way caveats really recommend sticking immutable edit also libraries provide alternative immutable data structures easier work", "d": "7/2016"}, {"body": "syranide thanks reply got point warning browser console way without call confused whether official allow case thinking", "d": "7/2016"}, {"body": "warning browser console way futurefeeling ca nt detected impossible warn also said valid recommended scenario match warning documentation different ie nt confused whether official allow case thinking allowed generally recommended technically mutating state ok mutable object state ok", "d": "7/2016"}, {"body": "syranide thanks", "d": "7/2016"}, {"body": "thanks filing confirmed still broken likely fallout", "d": "7/2016"}, {"body": "number inputs broken react due filed merged going see problem email inputs per basically issue filed merged entirely possible exposes bug defaultvalue bug always react core always visible controlled inputs broken react long remember var numberinput reactcreateclass getinitialstate function return value render function return reactdomrender documentgetelementbyid container workaround set manual value filtering ensure numbers entered textbox downside nt get numeric keyboard mobile need figure solution handle properly", "d": "7/2016"}, {"body": "jimfb understood frustrating way get raw value think though deserves investigation bug manifest firefox believe still follows spec one", "d": "7/2016"}, {"body": "strml firefox nt fire onchange input value invalid interesting way sidestepping issue common case since onchange behavior presumably undefined input illegal state", "d": "7/2016"}, {"body": "broken react long remember based two codepens bug introduced works nt work", "d": "7/2016"}, {"body": "wow chorme release update positive codepen would worked week two ago looks like chrome retain user fiddles behaving nicer way looks like ball back court much want bet chrome fixed react", "d": "7/2016"}, {"body": "still broken seeing working", "d": "7/2016"}, {"body": "still broken talking fiddles still look broken", "d": "7/2016"}, {"body": "yes chrome edit see mean following sequence behaves properly type calls back type calls back previously type calls back", "d": "7/2016"}, {"body": "confirmed version specifically looks like lopping decimal point reproduce javascript chrome backspace issue backspace clear chrome reporting instead right uncontrolled inputs even assign values begin", "d": "7/2016"}, {"body": "would crazy consider emitting changes invalid input case detailed validation returns", "d": "7/2016"}, {"body": "ahhhh interesting maybe dark assigning causes sideeffects seems trigger validation check codepen covers uncontrolled inputs controlled inputs follow different rules seem rely always reports instead sent pr", "d": "7/2016"}, {"body": "jimfb mentioned firefox nt fire onchange input value invalid interesting way sidestepping issue common case since onchange behavior presumably undefined input illegal state seems ideal trade limiting change exposure sake stable inputs interest moving towards", "d": "7/2016"}, {"body": "nhunzaker sorry hackamonth nt really following threads super closely ca nt mimic firefox behavior differentiate user clearing text input invalid value afaik however think chrome fixed inputs work correctly class issues fixable would almost certainly interested pr pass zpao spicyj gaearon", "d": "7/2016"}, {"body": "worries sounds fun quick reference point could reveal chrome fix actually broken", "d": "7/2016"}, {"body": "nhunzaker nt know quick reference points basic problem could nt get actual input value entered user input invalid state eg user typing illegal intermediate state setting last known legal value would remove decimal point firefox fix fire oninput illegal states chrome fix remove decimal value approximately instead need little digging figure exact behaviors various browsers figure good fix would look like nt know answer top head looks like things sufficiently fixed browser end fixable react fwiw may worth tracking keystrokes cursor events paste events maintain perfect shadow state since nt deal nonnumericish characters nt need worry foreign languages input edge cases come think would allow us simulate browser would allow us know value actually text box sidestep weirdness typenumber spec anyway let guys figure", "d": "7/2016"}, {"body": "okay looks like issue assigned using standard react method updating attributes props get passed logic prevent duplicate values assigned unfortunately new value already assigned first quick hack add exception value assignment never sets value attribute nt changed nt really know works nt think meaningful still fixes issues encountered", "d": "7/2016"}, {"body": "quick gif looks like dumb pushed update uncontrolled input fix sent work getting tests pass figure", "d": "7/2016"}, {"body": "okay polished fixes issues uncontrolled controlled inputs encountered put extra time manually test tomorrow still struggling add automated test coverage quirks", "d": "7/2016"}, {"body": "cases covering using following code test case drop decimal place backspacing happens react sees tries compare since string comparison always different clear bad input sort correct works makes fallback number nt recognized may require documentation updating best practices talk expand values happens parse react comparison based string values always different pretty neat anything else missed", "d": "7/2016"}, {"body": "mean plugin react arguments undocumented context api experimental unstable use case", "d": "7/2016"}, {"body": "expanded bug also breaks unset unexpanded properties however affect rendering static markup unless rendering old browser actually issue another note though guess implementation actually flawed cause checksum mismatch ssr resuming broken browser cc spicyj jimfb", "d": "7/2016"}, {"body": "thx syranide found expanded border styles partially works tags longer problem", "d": "7/2016"}, {"body": "syranide since nt affect createmarkupforstyles", "d": "7/2016"}, {"body": "going close point covering topic discussion", "d": "7/2016"}, {"body": "whoops blatant oversight part thanks link", "d": "7/2016"}, {"body": "could sort jest issue related mocking example put log top level scope see twice sure normal also fix issue moving inside test js jestunmock componentshelloworld describe helloworld gt displays message gt var react require react var reactdom require reactdom var testutils require reactaddonstestutils var helloworld require componentshelloworld default would advise file issue jest executing modules twice", "d": "7/2016"}, {"body": "thanks looking gaearon file issue jest", "d": "7/2016"}, {"body": "reopening jest issue downgrading react makes warning go away angusfretwell example angusfretwell thanks providing repo gaearon look react side", "d": "7/2016"}, {"body": "hmm nt know enough jest solve react related change think inlined requires module inside dev blocks nt get bundled production cause jest execute twice even though worked ca nt quite see module executed twice valid behavior nt happen node browser commonjs allow knowledge ca nt quite see yet react issue", "d": "7/2016"}, {"body": "clarify yes know new react nt mean react issue looks like hit edge case jest nt hit try bisecting helps", "d": "7/2016"}, {"body": "jest resets module registry call quite possible people end two copies react nt careful point change react since last release", "d": "7/2016"}, {"body": "wow thought resetting always explicit probably caused see doctor tests make pass thought caused explicit calls still nt quite understand happening lazy requires unsupported pattern", "d": "7/2016"}, {"body": "oh see happening jest works open source call implicitly every call import toplevel inside call fresh copies times suspect debug module freshly required old version react go require new versions modules requires facebook jest works explicitly call every test every test hoping turn open source behavior internally well use toplevel requires inline removed inlined code together module registry reset works pretty well every call completely isolated previously way required modules tests internally always quite mess fb recommend people however people open source decided want use imports even tests much stop way might end confused state jest sets could leverage react", "d": "7/2016"}, {"body": "ok think understand seems like could force inline requires top file could remove hack start using rollup longer need inline requires", "d": "7/2016"}, {"body": "either fixed depending goes first thank much good repro case", "d": "7/2016"}, {"body": "thanks gaearon", "d": "7/2016"}, {"body": "let keep open either fix gets", "d": "7/2016"}, {"body": "anyway quiet warnings mean time warnings suite makes bit hard look test output", "d": "7/2016"}, {"body": "super temporary fix put top level tests think fix issue sure remove next version tests", "d": "7/2016"}, {"body": "thanks suggestion fwiw nt seem helped much mean time dumping stdout file inspecting works quite well since warnings dumped stderr anyone problem", "d": "7/2016"}, {"body": "along lines could also something like unix environment", "d": "7/2016"}, {"body": "face palm apparently need coffee routing err devnull works perfectly thanks", "d": "7/2016"}, {"body": "also silence console messages", "d": "7/2016"}, {"body": "gaearon put require reactlibreactcomponenttreedevtool top level tests nt work added line top test files still getting error", "d": "7/2016"}, {"body": "using cmderpowershell windows look like two types warnings ones white another red please look screenshot run npm test gt null nt show error warning messages red color anymore", "d": "7/2016"}, {"body": "also running issue karma running latest version proposed temporary workaroundfix requiring reactcomponenttreedevtool nt work either", "d": "7/2016"}, {"body": "fix soon released", "d": "7/2016"}, {"body": "also rcs npm try using", "d": "7/2016"}, {"body": "gaearon test official release warning gone thanks hard work", "d": "7/2016"}, {"body": "great thanks verifying", "d": "7/2016"}, {"body": "versions running still seeing multiple instances react reactdom karma karmamocha karmamochareporter mocha node npm mac os repro steps clone build test mxstbrreactboilerplate tests pass errors seem appear tests testing featurepage produce errors ractaddonstestutils included reactboilerplate project adding remove errors", "d": "7/2016"}, {"body": "please specify exact version boilerplate reproduce git commit hash would fine", "d": "7/2016"}, {"body": "gihrig sorry test personal project still warning gaearon latest commit reproduce travisci result still see warning btw use maybe another problem node npm mac os", "d": "7/2016"}, {"body": "gaearon problem appearing since updating reactreactdom reactboilerplate tested", "d": "7/2016"}, {"body": "sources docs links work read website instead", "d": "7/2016"}, {"body": "cc jimfb", "d": "7/2016"}, {"body": "jim hackamonth perhaps spicyj knows", "d": "7/2016"}, {"body": "similar issue setting value controlled inputs type date type time worked fine desktop chrome nt display value ios chrome safari getting events triggered value seemed set input displayed interestingly page rendered server side using reactdomserver everything worked fine rendered client side dice downgrading fixed problem", "d": "7/2016"}, {"body": "kcraw interesting clue maybe means", "d": "7/2016"}, {"body": "meet mobile browser also default value already set could nt rendered correctly", "d": "7/2016"}, {"body": "downgrade today something similar mobile ios datetimelocal input controlled value basically input would look empty change value manually even putting back value looks like bug initialization", "d": "7/2016"}, {"body": "possible bug chrome android checkout codepen directly assigning date field produce ui update yet value set log get correct date way get display android assign defaultvalue value way around like chrome android trying smart update ui value changes", "d": "7/2016"}, {"body": "think running prod version react tests testutils nt entirely compatible generally expect running dev mode case particular going blame actually removed dead code nt used production builds way removal broke use case though cc gaearon line issue going fail", "d": "7/2016"}, {"body": "oops thought testutils devonly technically supporting running prod", "d": "7/2016"}, {"body": "worked seems reasonable supported production pretty simple adjust build set test run", "d": "7/2016"}, {"body": "using nodeenvproduction avoid warnings guess write better tests code", "d": "7/2016"}, {"body": "include fix next version sorry messed", "d": "7/2016"}, {"body": "fixed", "d": "7/2016"}, {"body": "zpao gaearon solution mind going forward ci testing run tests circleci want run production environment representative possible code actually behave production switching test environment dev feels like would defeat one central purposes ci server", "d": "7/2016"}, {"body": "difference except perf warnings dev prod versions react super important us facebook committed keeping way nt think running unit tests prod env would valuable", "d": "7/2016"}, {"body": "end end tests different matter would nt need testutils anyway", "d": "7/2016"}, {"body": "errors developer console", "d": "7/2016"}, {"body": "maxdeviant found cause problem webpackdevserver run app inside iframe react dev tools ca nt load thanks", "d": "7/2016"}, {"body": "general advise render items use something like instead however indeed seems like perf regression appears spending little time per item adds items scratch appear cause", "d": "7/2016"}, {"body": "simple scenario unmounting components bottleneck somewhere reconciliation react reconciling fast right away react reconciling slow first notice long compared applying dom updates warms exactly two mountunmount cycles notice size less relative dom updates", "d": "7/2016"}, {"body": "looks like sort optimization kick unmount lot components able drastically reduce time seconds milliseconds react replacing statements assignment two places simpleeventplugin eventpluginhub probably real solution think leaving means memory keeps growing even property keys still wonder similarly penalized", "d": "7/2016"}, {"body": "replacing objects maps gives similar performance improvements", "d": "7/2016"}, {"body": "fixed thank much caring providing specific instructions", "d": "7/2016"}, {"body": "quick experiment ran benchmarks firefox versions ran speed chrome mean slow surely hope fix would fix firefox", "d": "7/2016"}, {"body": "maybe putting fields internal instances instead global maps help firefox would like investigate slow", "d": "7/2016"}, {"body": "gave look firefox slowness due dom slow think fix", "d": "7/2016"}, {"body": "gave look firefox slowness due dom removechild slow really appreciate firefox bug report testcase", "d": "7/2016"}, {"body": "bzbarsky filed information bug nt time reduced testcase though", "d": "7/2016"}, {"body": "fwiw removechild slow gecko layout idea whether setting display none removal might speed process might help done element removechild called", "d": "7/2016"}, {"body": "julienw thank filing", "d": "7/2016"}, {"body": "btw two motivations request existing codemods nt help us much since react code coffeescript nt great test coverage across frontend finding fixing warnings prod next line defense", "d": "7/2016"}, {"body": "sure issue exactly clear using react native want file issue use something like stack overflow get assistance", "d": "7/2016"}, {"body": "hi update estimated date yet", "d": "7/2016"}, {"body": "rcs available npm final probably tomorrow early next week need check getting react native coverage", "d": "7/2016"}, {"body": "zpao reason rcs nt listed releases", "d": "7/2016"}, {"body": "nt typically make changelogs tag everything rcs also typically nt push bowercdns nt super interesting nt least rcs minor releases nt exactly rcs anyway eg throw new semverminor things rcs still refining process minor amp patch releases room change", "d": "7/2016"}, {"body": "thumbsup", "d": "7/2016"}, {"body": "shipped url set destination document getting built", "d": "7/2016"}, {"body": "unfortunately ca nt really scale providing support via github encourage make use resources like stack overflow let us keep github issues focused bugs enhancements react much possible going close result quick read might typo instead otherwise may run issues jquery plugin looks like going modify dom put react inconsistent state component renders good luck though", "d": "7/2016"}, {"body": "kevinsuttle extent yes look code imagine would quite obvious went wrong render function rather predictable simple especially comes root", "d": "7/2016"}, {"body": "think open fixing specific would like make pr", "d": "7/2016"}, {"body": "would good place start", "d": "7/2016"}, {"body": "would search message part look conditions lead think reactcompositecomponentjs might fire couple places could probably add perfect could potentially object might help understand typical cases leading warning lead people right direction instead showing info thoughts", "d": "7/2016"}, {"body": "yeah usually run things like return wrong type hoc eg object vs react element forget module", "d": "7/2016"}, {"body": "syranide nt think quite obvious receiving larger merge referenced warning reason taken granted get developing personally almost cases receive pull either project one component libraries especially useless get component name real possibility actually finding error without manually checking end every file run ts check half code ts quite risk spend time", "d": "7/2016"}, {"body": "cliren feel added directly component missing anything js import react react import render reactdom const mycomponent props gt let classname otherprops props let classnames message classname join return render documentgetelementbyid app", "d": "7/2016"}, {"body": "appreciate thought nt going conditional merging props composite component decide wants handle props implementation couple examples could implementation works react native nt mean anything sort course scheduling component actually referring course name also case used root node composite child", "d": "7/2016"}, {"body": "historical context helper called years ago exactly thing proved confusing removed", "d": "7/2016"}, {"body": "thanks zpao good reasons use especially needs applied child within composite gaearon nt know existed thanks pointing might little confusing initially said reasons web react felt like perfect jsx convention", "d": "7/2016"}, {"body": "definitely using es proxies production builds new feature supported older browsers generally agree confusing justification heard sebmarkbage constructor runs instance exist yet makes sense constructor finished schedule update like normally however quite see make write map maybe could give try could discuss pr fully understand implications promises merging could starting point discussion think another intention never write constructor logic instead would use property initializer syntax however part language yet know makes", "d": "7/2016"}, {"body": "feel also violates uap essentially equivalent classes initializing property class seems much clearer call constructor general source confusion bugs able set state two different ways maybe allowed update state would confusing imo pretty clear distinction state initialization state updates ca nt update state assignment ca nt initialize state distinct purposes", "d": "7/2016"}, {"body": "technically best way setstate initializer add reducer queue conditionally pass initial state setstate misnomer really enqueuestatetransition nothing transition initially gaearon case would synchronous since want alwaysbatched also store sidetable also need store second argument sidetable kill feature storing global sidetable nt good call component need weakmap sidetable thing violates composition pattern know weird class semantics possible break rules classes weird", "d": "7/2016"}, {"body": "could stupid suggestion could possibly mitigated adding constructing property reactcomponent constructor update reactcomponent setstate check property set thisstate constructing delete property reactcompositecomponent constructcomponentwithoutowner think place component constructed would allow use throughout constructor would equivalent", "d": "7/2016"}, {"body": "cc jquense spicyj jimfb mooore", "d": "7/2016"}, {"body": "found seems keyboard copypaste sometimes trigger event sometimes right click select paste always failed trigger event", "d": "7/2016"}, {"body": "gon na say issue rest without looked work work using master works sometimes suggests itas due polyfill needing focus inputs would think context menu version steals focus", "d": "7/2016"}, {"body": "anggao seen fiddle shared instead use tested working fine", "d": "7/2016"}, {"body": "thanks work according react doc onchange supersedes generally used instead dom builtin oninput event handler", "d": "7/2016"}, {"body": "jquense checked works", "d": "7/2016"}, {"body": "found wo nt work", "d": "7/2016"}, {"body": "issue seems occurs", "d": "7/2016"}, {"body": "works correctly master", "d": "7/2016"}, {"body": "pass callback last argument toplevel get called updates flushed satisfy use case", "d": "7/2016"}, {"body": "want callback called every round updates flushed specific ones", "d": "7/2016"}, {"body": "sounds like bad idea component decides animate end running unrelated clean code every time ca nt queue cleanup relevant components", "d": "7/2016"}, {"body": "vjeux want server wrote pretty similar requirement", "d": "7/2016"}, {"body": "show code clear referring", "d": "7/2016"}, {"body": "wellit would nice write something like var state course definitely issue", "d": "7/2016"}, {"body": "state either ca nt change lifecycle code inside mixin otherwise nt understand need support use cases exists nt", "d": "7/2016"}, {"body": "think ruifortes trying use defaults work value bad example say want log properties general logging function default empty object would log nt use default params would throw error", "d": "7/2016"}, {"body": "kind embarrassed mentioning something like destructuring assignment default values least babel regard null value", "d": "7/2016"}, {"body": "reasonable question though imagine changing would breaking lot users using checks like", "d": "7/2016"}, {"body": "would bad allocate empty objects every component state case somebody decides pass function knowledge current component state close feel free continue discussion please let know missed important common use case understand es default arguments work see pass somewhere know component state", "d": "7/2016"}, {"body": "goes contribution project p", "d": "7/2016"}, {"body": "like contribute watch good first bug issues", "d": "7/2016"}, {"body": "gaearon would bad allocate empty objects every component state think meant allocate instead empty object", "d": "7/2016"}, {"body": "ah sorry right misread one comments still see compelling use case would write class know state exist", "d": "7/2016"}, {"body": "situation nt provide initial state called timeout passing somewhere say logging purposes would timeout resolved could use default argument logger avoid null checking property access probably corner case easy handle recommending supported use case per se trying illustrate users might trying", "d": "7/2016"}, {"body": "situation nt provide initial state setstate called timeout oh see reason thought enforced call unless also provide initial state seems like wrong let keep closed seems like benefit minimal issues much higher priority enough support behind people ask reconsider", "d": "7/2016"}, {"body": "oh see reason thought enforced call setstate unless also provide initial state seems like wrong seems like reasonable assumption good reason possibly require behavior future versions react sure let keep closed seems like benefit minimal issues much higher priority enough support behind people ask reconsider either way nt think changing would worth breaking change check checking would break", "d": "7/2016"}, {"body": "also nt merged reasons given", "d": "7/2016"}, {"body": "exactly think desired behavior far tell react currently behaves reasonably could expected proposal add warning given options selected specified think react", "d": "7/2016"}, {"body": "jimfb example comment mentioned think react select proper option value option", "d": "7/2016"}, {"body": "chicoxyzzy example shows behavior user selects option manually react supposed set someone calls set seems reasonable select first matching warn since likely behavior user wants", "d": "7/2016"}, {"body": "aweary exactly dom", "d": "7/2016"}, {"body": "specifically asking selects first item list equal values rather selecting last item react seems reasonable nt see change would make warning less helpful", "d": "7/2016"}, {"body": "propose add warning continue violate consistency react nt follow spec", "d": "7/2016"}, {"body": "react select valid options mouse keybord events", "d": "7/2016"}, {"body": "propose add warning continue violate consistency react nt follow spec said reasonable react select first item like dom example would inconsistent adding warning using duplicate values controlled component totally reasonable unique case", "d": "7/2016"}, {"body": "aweary try change select mouse keyboard examples", "d": "7/2016"}, {"body": "unique case nt ok nonunique values options markup", "d": "7/2016"}, {"body": "nt ok nonunique values markup talking controlled react components render uncontrolled component multiple duplicate mousebutton events work", "d": "7/2016"}, {"body": "chicoxyzzy think talking past aweary instead trying understand saying everyone agreement html allows nonunique values uncontrolled inputs problem occurs try specify one values using controlled component per comment said think react select proper option value option make sense proper option set possible options specify matching value never actually answered question believe react user specifies value vegetable", "d": "7/2016"}, {"body": "react manage value element javascript think context imagine trying vanilla js event listener supposed identify option right option run example see nt work analogous react controlled component example analogous uncontrolled component", "d": "7/2016"}, {"body": "ok nt warn case controlled element ie prop duplicate options duplicate options could desired business logic cases warning emitted proper uncontrolled select emitted potentially dangerous controlled select warning shown", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "ok makes sense thank close issue", "d": "7/2016"}, {"body": "thanks proposal would right place discuss issue voice support", "d": "7/2016"}, {"body": "ah right sorry", "d": "7/2016"}, {"body": "know well think design prop means declaring custom element example js works thanks var xcomponent documentregisterelement xcomponent extends input prototype objectcreate htmlinputelementprototype react feature people wanted better interoperability react custom elements part web components specs recommend using react components composition welcome try web components like try play nice however web components mode reliably say translated custom web components potentially unrelated attribute called respect specify mode longer becomes read case probably mean use attribute enter web components mode able stop passing prop get regular hope helps", "d": "7/2016"}, {"body": "thanks makes sense", "d": "7/2016"}, {"body": "example regression using react using react showing yes see problem well cc jimfb", "d": "7/2016"}, {"body": "two problems set set actually translates makes still named", "d": "7/2016"}, {"body": "syranide updated first gist proper version sorry messed bit", "d": "7/2016"}, {"body": "objections like try fix one wednesday july andrey okonetchnikov notifications githubcom wrote syranide updated first gist proper version sorry messed bit receiving subscribed thread reply email directly view github mute thread", "d": "7/2016"}, {"body": "already", "d": "7/2016"}, {"body": "k problem", "d": "7/2016"}, {"body": "assume talking issues setup want contact looks like version dep react ok pick react though perhaps reactnative still looking lower version getting used tell versions getting installed result dependencies", "d": "7/2016"}, {"body": "manu npm ls react snapchat usersmanudesktopsnapchat react getting", "d": "7/2016"}, {"body": "hey manulourdes use react issue tracker bugs react since bug recommend open issue repo ask stackoverflow instead repo owner knowledge dependencies thanks", "d": "7/2016"}, {"body": "nigelterry warning states use instead see docs tags attributes supported atrributes", "d": "7/2016"}, {"body": "duh sorry", "d": "7/2016"}, {"body": "thanks yes duplicate", "d": "7/2016"}, {"body": "gaearon nt sure wanted separate issues different causes wanted single issue tracking symptom cheers", "d": "7/2016"}, {"body": "yea thanks filing issue good several test cases", "d": "7/2016"}, {"body": "fixed", "d": "7/2016"}, {"body": "interestingly also appears triggered usage inside", "d": "7/2016"}, {"body": "okay fix", "d": "7/2016"}, {"body": "fixed", "d": "7/2016"}, {"body": "hello created small project gives warring link smallkit please try tell problem cant find thankful help", "d": "7/2016"}, {"body": "bug react fixed master please wait next release fixed next release please file another issue", "d": "7/2016"}, {"body": "hey still getting warning specifically running tests jest", "d": "7/2016"}, {"body": "file issue code reproducing thank", "d": "7/2016"}, {"body": "gaearon go", "d": "7/2016"}, {"body": "fixes issue", "d": "7/2016"}, {"body": "hi group maintained us nt think help anything considered spam linkedin report maybe fine nt know terms use issue tracker bugs feature requests close actionable us cheers", "d": "7/2016"}, {"body": "thanks report believe message contains link tried following says might adding ref component created inside component method multiple copies react loaded details link details links gist explains fix", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "uhhh seems missed culprit", "d": "7/2016"}, {"body": "think links behavior saved correctly current behavior reactjs reactjs", "d": "7/2016"}, {"body": "thanks catching put something least fixes constant render case think always problem toggled value inputs real value undefined worried trying handle", "d": "7/2016"}, {"body": "using updates component state inside move one react lifecycle methods probably see docs details", "d": "7/2016"}, {"body": "oh right thanks", "d": "7/2016"}, {"body": "duplicate", "d": "7/2016"}, {"body": "symptoms problem warning", "d": "7/2016"}, {"body": "bug per se see warning attribute currently unsupported think solved seems closer zpao wanted", "d": "7/2016"}, {"body": "would", "d": "7/2016"}, {"body": "merged closing", "d": "7/2016"}, {"body": "works fine even log value console shows press button value updated thus prints updates range correctly nt see anything wrong besides jsfiddle edit bad mouse buggy double clicks automatically sometimes gt lt ok see mean yeah something wrong", "d": "7/2016"}, {"body": "duplicate basically range input truncates value according minmax react nt consider apply properties wrong order causing truncated first limits updated", "d": "7/2016"}, {"body": "really kind hacky bad idea cases put minmax key range input always show correctly", "d": "7/2016"}, {"body": "syranide saw fixed fix applied step parameter would fix also work minmax values", "d": "7/2016"}, {"body": "mikecao yeah work", "d": "7/2016"}, {"body": "happens executing function render method lt execution instead bind method constructor pass method input without calling method get value state", "d": "7/2016"}, {"body": "thanks guidance", "d": "7/2016"}, {"body": "yea looks like missed would like send pr fix added yes real prop", "d": "7/2016"}, {"body": "gaearon sure working atm", "d": "7/2016"}, {"body": "gaearon done", "d": "7/2016"}, {"body": "thanks please sign cla amp good go", "d": "7/2016"}, {"body": "gaearon done", "d": "7/2016"}, {"body": "seeing similar errors unknown props div tag remove props element details see would fix resolve warning well", "d": "7/2016"}, {"body": "properties part api likely getting warning somewhere else either need filter component utilizing passing props underlying dom element third party component raise issue maintainer case nt read link warning suggest first explains problem pretty well still confused come join us reactiflux help", "d": "7/2016"}, {"body": "fixed ships might want wait days case extra warnings discovered", "d": "7/2016"}, {"body": "perhaps missing export default class", "d": "7/2016"}, {"body": "thing thought self contained functions jul alex zherdev notifications githubcom wrote perhaps missing export default class receiving authored thread reply email directly view github mute thread", "d": "7/2016"}, {"body": "think leave named export would need import like nt react issue modules going close since discussion going feel free work reopen turns react issue", "d": "7/2016"}, {"body": "see also answer default named imports exports", "d": "7/2016"}, {"body": "hmm taint trackingchecking super common concept security community furthermore nt know means ignore sentence follow practice recommendeddescribed page goodtogo relying user understanding term term super helpful descriptive anyone know means think certainly want leave term immediately clear make documentation better without directly defining term nt want get habit defining every term every page makes documentation far verbose cluttered people nt know word always look", "d": "7/2016"}, {"body": "certainly improve language nt expect everybody reading know also first google result taint nsfw let rely people ability search correctly either leave term clarify intent", "d": "7/2016"}, {"body": "using instead", "d": "7/2016"}, {"body": "know td element attaching onchange handler think passed onchange td code equivalent onchange implicitly transferred spread operator maybe nt notice set props explicitly write sth like", "d": "7/2016"}, {"body": "bubbling intentional imho weird karczk correct even rely components silently dropping unknown properties may change future", "d": "7/2016"}, {"body": "think failed expressing point issue code little misleading agree karczk know intentional need pass props regular know render think weird element firing event consistent intuitive element editable meaning receive user input exception events syranide agree dealing party components rely core lib documentation tell matter fire click event fired one children assuming wo nt happen honest mistake fact see following bin event fire think right even adding element event handler inside really think inconsistent desirable behavior flagged bug happens glad try fix attach pr issue", "d": "7/2016"}, {"body": "simpler reproduction issue", "d": "7/2016"}, {"body": "agree dealing party components rely never rely react may future frontends render properties without whitelist never good idea rely ignoring unsupported properties fact see following bin onchange event fire think right course wo nt fire click event simpler reproduction issue personally think bad feature actively rely tangential discussions surrounding bug", "d": "7/2016"}, {"body": "never rely react may future frontends render properties without whitelist never good idea rely ignoring unsupported properties understand point fairly good one keep mind thanks course onchange wo nt fire click event event checkbox element translated event react makes statement obvious personally think bad feature actively rely tangential discussions surrounding bug feature relies noneditable element firing event checkable element inside could please provide use cases", "d": "7/2016"}, {"body": "onchange checkbox element translated onclick react makes obvious huh checkbox source td click feature relies noneditable element firing onchange could please provide use cases nt agree bunch people large number inputs building forms seem prefer one centralized handler made heard various changes made willhave affected personally think bad idea kinds reasons people rely necessary larger discussion around outright drop", "d": "7/2016"}, {"body": "huh checkbox source td click think missing point behaving differently consistent knowing essencially code knowing react translate checkable elements nt agree bunch people large number inputs building forms seem prefer one centralized handler made heard various changes made willhave affected nt even know possible see somewhat useful still feature documented anywhere assuming case component object react older versions curious know many hidden features depths react thanks enlightenment syranide really helpful", "d": "7/2016"}, {"body": "think weird td element firing onchange event consistent intuitive td element editable meaning receive user input exception onclick events bubbling dom amp triggered input elements triggers amp events dom behaves", "d": "7/2016"}, {"body": "hello please anyone tell disable warning thank", "d": "7/2016"}, {"body": "kennyhk also want disable warning cry", "d": "7/2016"}, {"body": "ca nt disable nt add warnings make life harder warns problematic pattern behave unexpectedly next major version need fix use third party libraries warnings come need file issues libraries get fixed please read warning discussion", "d": "7/2016"}, {"body": "load svg files react components using svgreactloader svgs come illustrator prop react nt recognize opinion library responsibility keep date props react supports responsibility remove props react nt like react support solution", "d": "7/2016"}, {"body": "think support xmlns merged days ago next version", "d": "7/2016"}, {"body": "awesome hear thanks future right solution try keep react list accepted props complete uptodate", "d": "7/2016"}, {"body": "yes however pretty much everything svg html hopefully nt much missed fully expect new specs come us need handle", "d": "7/2016"}, {"body": "would nice able traverse tree", "d": "7/2016"}, {"body": "currently trying use jest snapshot testing component contains ref makes call fails component js import react react export default class link extends reactcomponent render return test js use strict import react react import link link import renderer reactlibreacttestrenderer describe link gt renders correctly gt const tree renderercreate tojson stack trace", "d": "7/2016"}, {"body": "ryanseddon file new issue specific problem issue tracking apis", "d": "7/2016"}, {"body": "apologies done", "d": "7/2016"}, {"body": "zpao yup someone irc channel suggested", "d": "7/2016"}, {"body": "mutating dom react components allowed render hello component child", "d": "7/2016"}, {"body": "karczk nt case application partially uses react marionette migrate react root layout rendered react app component next stuff rendered marionette marionette renders react component hello component case like example", "d": "7/2016"}, {"body": "addition aweary describes ive also reset document stashes state unique react key without document reset thing react remains broken last unmount state thinks already added event listeners removed unmount last component im using simple examples react seems correctly remove global document event listeners last comp unmount add back new component rendered mounted hope bit work soon enuff", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "see ok good know page right workaround come anything post", "d": "7/2016"}, {"body": "going pushing shortly see spicyj send pr update rn additional commits since rc local reactdom final perfectly safe update rn even rc", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "update tutorial repo jsfiddles", "d": "7/2016"}, {"body": "hiya probably wrong place ask particular reason stopped updating blog know read release notes like seeing short summary changes even hey release nothing special also bit discoverable imo", "d": "7/2016"}, {"body": "simenb imo much blog post every minor release", "d": "7/2016"}, {"body": "second simek thoughts ember decent job blogging releases helpful subscribing rss feeders", "d": "7/2016"}, {"body": "selvagsz also subscribe feed releases", "d": "7/2016"}, {"body": "spicyj trying one suggestion seems straight forward fix ironically struggling writing failing test probably unfamiliarity testing utils tried among ton variations could repro issue var hello reactcreateclass getinitialstate function return data onchange function e thissetstate data etargetvalue render function return stub reacttestutilsrenderintodocument var node reactdomfinddomnode stub expect nodevalue tobe thanks", "d": "7/2016"}, {"body": "troydemonbreun thanks possible jsdom nt emulate range behavior properly sure", "d": "7/2016"}, {"body": "case okay taking without unit test long verify fix browser could mock setters make sure called right order", "d": "7/2016"}, {"body": "sure provide test", "d": "7/2016"}, {"body": "andersekdahl getting error server side rendering reduxconect nt anything like code related issue opened reduxconnect happens one props updates causing component rerendered rendered server using react edit investigating found tags server generated html coming twitter following button widget removing longer get error wonder happens done fix solution render twitter button client side causes checksum mismatch client server", "d": "7/2016"}, {"body": "seems disappeared", "d": "7/2016"}, {"body": "fixed thanks", "d": "7/2016"}, {"body": "sweet thanks", "d": "7/2016"}, {"body": "fix landed", "d": "7/2016"}, {"body": "would assume since fix master midjune went ask still seeing problem large form machines sufficient slowness nt go yet estimate go", "d": "7/2016"}, {"body": "hankmccoy master would nt include", "d": "7/2016"}, {"body": "company works construction industry therefore lot clients old machines filling massive forms pretty substantial problem us know codebase fix applied seriously considering temporarily forking order cherrypick fix even remotely feasible thanks ludicrously fast reply jquense", "d": "7/2016"}, {"body": "forget pr number npm install react next might", "d": "7/2016"}, {"body": "sadly react next still fix pr question cherry picked change onto branch locally rebuilt app forked version still seeing problematic behavior perhaps changes contribute fixing missed", "d": "7/2016"}, {"body": "believe one think releases alpha perhaps", "d": "7/2016"}, {"body": "tests react completely breaks total white screen death even using prod builds alarming makes building progressively enhanced web apps cumbersome work ship initial html react destroys including page separate proof concept issue would willing work pr issue confirmed", "d": "7/2016"}, {"body": "nt actively support anymore wo nt taking active measures like fix places including page breaks things consider", "d": "7/2016"}, {"body": "jpdevries might able solve problem calling reactdomrender supported browsers eg checking user agent using ie conditional comments", "d": "7/2016"}, {"body": "brigand tried removing entirely nt even trick react andor reactdom included page maliciously deletes entire body tag", "d": "7/2016"}, {"body": "zpao thanks info see whip something understand support destroy page completely seems aggressive far able feature detection see old browser nt load scripts nt seem like process many web developers would follow", "d": "7/2016"}, {"body": "jpdevries saying good solution behavior acceptable quick fix try wrapping scripts ie conditional comment strangely way say ie ie less far tell might need use documentwrite js function var mynav navigatoruseragenttolowercase mynavindexof msie parseint mynavsplit msie gt documentwrite documentwrite documentwrite", "d": "7/2016"}, {"body": "brigand would something much different use feature detection instead useragent html var doenhancments documentaddeventlistener true false super annoying reactredux bork page turn blank white screen even try load doenhancments documentwrite lt script doenhancments try redux catch e documentwrite lt script doenhancments try react catch e documentwrite lt script load react redux dependencies cdns local fallbacks also tried trick create global variable use ie conditionals set global variable true false prefer feature detection method though", "d": "7/2016"}, {"body": "btw would nt documentwrite defer script think wipe document create script tags append", "d": "7/2016"}, {"body": "good point brigand ok record testing seems local fallback part issue nt able reproduce white screen death ie without local fallbacks good know", "d": "7/2016"}, {"body": "similar issue try render english content components works fine try load hindi get error uncaught promise typeerror read property replacechild null set encoding charset using react", "d": "7/2016"}, {"body": "anshulmalik afraid information enough help small example reproducing issue would helpful", "d": "7/2016"}, {"body": "issue resolved assuming variable array case variable undefined component issues rendering", "d": "7/2016"}, {"body": "created prototype solution problem basic idea render component twice serverside get html get checksum example component want render serverside want send data twice html json solution set always return false server render component props call server render component props call parse attribute value inject basically lying client contents markup send following back client init logic calls props rawhtml rejoice reactdomrender called client think incorrectly good dom matches props gave checksum matches render without props remove serverrendered rawhtml content page give checksum error also shouldcomponentupdate returns false never removes content unless component fully unmounted far see two problems performance overhead doublerendering serverside react team might break relies implementation detail anybody see problems", "d": "7/2016"}, {"body": "understand refs little better", "d": "7/2016"}, {"body": "gaearon interested solution came hoc situation wrapping input provide additional functionality would like still able example", "d": "7/2016"}, {"body": "tommoor asking proposal workarounds existing react versions", "d": "7/2016"}, {"body": "gaearon sorry got impression understood refs better therefore longer needed looking prsissues perhaps nt actually case workaround seamless expose wrapped components ref", "d": "7/2016"}, {"body": "cynicaldevil zeel still working issue could link pr like work bug let know help", "d": "7/2016"}, {"body": "salehhindi zeel working issue think two take", "d": "7/2016"}, {"body": "bug react nt warn fix behaviour eliminate inconsistency cc jimfb", "d": "7/2016"}, {"body": "taking issue start", "d": "7/2016"}, {"body": "zeel sadly already worked", "d": "7/2016"}, {"body": "zeel started working weeks ago sorry forgot mention", "d": "7/2016"}, {"body": "michelgotta become uncontrolled component gitrichard problem go code", "d": "7/2016"}, {"body": "shows warning first time finds element duplicate value following also duplicate values display warning correct behavior show warning duplicates first one finds", "d": "7/2016"}, {"body": "gaearon status getting results back seeing warning crop code fiddle reproduces warning component converted syntax", "d": "7/2016"}, {"body": "interesting generally nt tested reactperf scenario much primarily meant used browser console wrapping component support scenario better fixed probably bug send pr adds similar case failing test test fall expected warning merely triggering behavior enough", "d": "7/2016"}, {"body": "nathanmarks please check works change clone react run copy test effect", "d": "7/2016"}, {"body": "gaearon looks good end warning gone awesome", "d": "7/2016"}, {"body": "think cases related solved please let know case reproducing issue", "d": "7/2016"}, {"body": "nt know issue got happened added minimal code working boilerplate kit import component proptypes react class panel extends component render return export default panel added inside render method another preexisting component edit goes away instead use still error confusing", "d": "7/2016"}, {"body": "jdelafon ton code would rather avoid spending minutes setting discover reproduce issue would mind extracting relevant part produces warning separate github project jsfiddle could inspect", "d": "7/2016"}, {"body": "warning also shown something pretty sure intended behavior", "d": "7/2016"}, {"body": "unfortunately ca nt reproduce minimal case probably something wrong setup", "d": "7/2016"}, {"body": "check duplicate react bundle maybe component contains copy mistake", "d": "7/2016"}, {"body": "experienced issue first thing trying gaearontodos", "d": "7/2016"}, {"body": "experiencing one", "d": "7/2016"}, {"body": "hard us isolate problem without knowing warning comes seems reactdebugtool catching kinds errors especially happens really error case hides real message nt reactaddonsperf packagejson", "d": "7/2016"}, {"body": "hard us isolate problem without knowing warning comes seems reactdebugtool catching kinds errors especially render trycatch statements likely happens might promise polyfill log unhandled rejections therefore errors thrown inside get caught polyfill never reported react gets inconsistent state see warning symptom real problem error thrown method make sure whatever promise polyfill using swallowing experienced issue first thing trying gaearontodos please provide exact steps reproduce cloned project ran see warnings reiterate happy reopen real issue help without project reproducing", "d": "7/2016"}, {"body": "gaearon managed reproduce create typo called result", "d": "7/2016"}, {"body": "additional note realise nt hiding message personally nt able reproduce manner completely hides error message nt got problem application except using hmr react hot loader app create reference error render let get hot reloaded get error hmr gives reference error complete refresh see unhandled promise error console", "d": "7/2016"}, {"body": "yeah sure completely mask error way perf tools warning intended fire circumstances", "d": "7/2016"}, {"body": "gaearon managed reproduce gaearontodos looks like correct behavior error printed gets react inconsistent state probably rephrase include something", "d": "7/2016"}, {"body": "let reopen definitely make userfriendly open suggestions", "d": "7/2016"}, {"body": "rephrasing good option certainly correct behaviour given happens current message could confusing one thing nt able reproduce masking original error jdelafon shed light reproduce", "d": "7/2016"}, {"body": "apparently notice real error warning reproduced example saw fine rephrasing warning fix", "d": "7/2016"}, {"body": "rephrasing seems like good idea started seeing errors like upgrading see thrown anytime error one components happens frequently development thought additional problem due wording message", "d": "7/2016"}, {"body": "got think mistake enable default change active tests get back soon", "d": "7/2016"}, {"body": "considered fixed using warning repeated times console error repeated times console page failed render", "d": "7/2016"}, {"body": "problem using undefined variable errorwarning messages completely misleading defining variable works without warnings errors", "d": "7/2016"}, {"body": "please provide sample reproducing", "d": "7/2016"}, {"body": "thanks quick reply need create one code open source asap", "d": "7/2016"}, {"body": "thanks reopen radar clear likely bug react actual error probably component got react inconsistent state recover errors least spam warnings", "d": "7/2016"}, {"body": "yeah understand bug react produced problem said think could handled better developer could find issue easier spamming warningserrors making tab unresponsive could nt even refresh close chrome tab kill nt nice", "d": "7/2016"}, {"body": "yea totally least make warning warn enough us catch issues tests solves spamming problem relevant code would like send pr fix could keep bool use flag decide whether log warning ignore silently", "d": "7/2016"}, {"body": "sure try manage weekend", "d": "7/2016"}, {"body": "even though manages reduce warnings still problem errors chrome tab getting unresponsive around minute user kill", "d": "7/2016"}, {"body": "errors referring", "d": "7/2016"}, {"body": "look first comment", "d": "7/2016"}, {"body": "errors appear unrelated issue thread general currently support gracefully recovering errors thrown components may come later right yes see many errors thrown recommend scrolling first one fixing usually causes others", "d": "7/2016"}, {"body": "see thanks info guess close", "d": "7/2016"}, {"body": "big bug us know fix released need decide whether revert thanks", "d": "7/2016"}, {"body": "new thinking create new variable stores tag mouse currently mouse two elements detect currently mouse element automatically trigger onmouseout event rest elements onmouseover true also bring another variable involving mouse speed thoughts", "d": "7/2016"}, {"body": "yet would seem falls category well changes around inline amp auto playing videos ios inline auto video playback ios webkitplaysinline property specified safari iphone allows videos play inline videos without property commence playback fullscreen users pinch close video continue playing video inline ios videos without audio tracks disabled audio tracks play automatically webpage loads source", "d": "7/2016"}, {"body": "jimfb guide submitting new elements support tests run etc", "d": "7/2016"}, {"body": "written guide short guide test component render importantly update possible attributes events adding handlers clicking whatever fire events nt really automated process past usually modify one examples run local build", "d": "7/2016"}, {"body": "yeah thinking well thanks", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "changes master fix included new react build", "d": "7/2016"}, {"body": "gaearon zpao news fb approaching proposal made gaearon using array seems promising one one would minor overhead general react rendering cycle make decision may like offer less technical feedback bit confused ambivalence fb dealing css js idea one hand vjeux presentation set world fe development motion around idea hand seems fb committed backingin full support see zpao comment recommending plain old style sheets example team chose go js styles project felt designwise superior choice offer number advantages wanted benefit chose go road knew would hit bumps eg css pseudoclasses threading uncharted waters also thought react project experimenting technology difficulties would hammered community support fb community certainly great job fela radium etc bit taken aback fb recognising importance supporting widely adopted pattern like one described thread true hack right hack allows get job done production various places everybody ventured road using probably fb excellent reasons work community think would helpful guys explicit stance js styling people considering going rabbit hole know", "d": "7/2016"}, {"body": "fela generates stylesheets inline styles radium nt would nt surprised move direction jsxstyle generates stylesheets aphrodite generates stylesheets pushed production people overwhelming solution appears generating stylesheets allows work around issues true inline styles library generates multiple values pseudoclasses fb currently approaching using stylesheets also nt use inline styles much vjeux probably speak experimentation internally think approach also going generate stylesheets advice using js styles nt use pure form entire application fine couple things hit wall pretty quickly apps use helper generates stylesheets", "d": "7/2016"}, {"body": "still figuring properly manage js styles web react native using js styles everywhere working really well us web current strategy generate css reason lot css transforms run bundle time unpractical today reproduce javascript likely fbspecific problem", "d": "7/2016"}, {"body": "thank zpao vjeux got back promptly good important snapshot fb stands right couple clarifications still figuring properly manage js styles web means concretely js styles something fb committed adopt future actively working like people thinking experimenting problem yeah maybe eventually somebody stumble upon genius way support react approaches necessary line fb heading example feature request clearly something fb using planning use either much fb committed serve needs community whose usage patterns may necessarily line corporation sponsoring project guess goal asking two really react end users boldly ventured man gone expect support usage patterns fold back change architectures conform fb uses honest question given last week gaearon surprise something use fb beneficial community", "d": "7/2016"}, {"body": "good opportunity explain current situation regarding styles react started working react native years ago needed figure solution styles time adding styles props thinking point need implement css selector engine right lazy want get started write styles js use inline styles display turns worked really well solved bunch problems css kept going react native going open source react native months super worried unconventional way styles going overshadow launch like jsx react decided talk explain current way write css facebook crazy alternative goal defuse drama around launch also spawned huge field research around different ways writing styles react context absolutely anticipated coming lot people excited writing styles js question facebook thought hard tricky situation current setup cx explain first part presentation complex setup non standard solves large amount problems also solved styles javascript situation changing styles js would mean lot infrastructure work change way every fb engineer write code maybe improvement far conclusion worth effort sad practical realistic response keep evaluating decision ongoing basis cost analysis may change future one promising thing able share components react native web good enough reason investment see hope helps", "d": "7/2016"}, {"body": "hey vjeux thanks lot extensive reply kudos fb recruits engineers engage community imo answer would make core great blog post btw", "d": "7/2016"}, {"body": "simpler case reproducing issue seems happen changing also able reproduce warning safari firefox os x also nt seem occur using", "d": "7/2016"}, {"body": "interesting bug check poking around initial thought assign updatewrapper sane eliminates bug simple feels shallow think", "d": "7/2016"}, {"body": "move calls call splitting getnativeprops calls think best solution looks like work", "d": "7/2016"}, {"body": "yes also able get test coverage value nullified dom type changes value longer valid new value assigned valid unrelated pretty cool jsdom picks done", "d": "7/2016"}, {"body": "possible react one event listener document delegates others sebmarkbage", "d": "7/2016"}, {"body": "mrscobbler spicyj ever decided something still implemented seems like discussion whether added based fact events currently bubble kind ended without consensus willing help decide go", "d": "7/2016"}, {"body": "working app needs compliant flyout menu last inner submenu li element fire focusout event parent li go past however nt fire added onblur event nt work expected take look", "d": "7/2016"}, {"body": "navigation done keyboard", "d": "7/2016"}, {"body": "post code example chance created basic example ul two li inner anchor adding onfocus onblur events li events fire correctly bubble inner anchors", "d": "7/2016"}, {"body": "anthonybarsotti set around following home parent item submenu submenu item submenu item last li another test link tab last li go another test li fire onblur event parent item li post sample get set", "d": "7/2016"}, {"body": "mrscobbler please work together wish contribute", "d": "7/2016"}, {"body": "rishirajsurti yes send email anthonybarsotti spicyj decided whether move forward", "d": "7/2016"}, {"body": "anyone needs insight event code feel free ping experience pr past would also like see also current mouseenterleave logic crazy really nt think emulate new features possible already spoken jimfb bit though insight well outstanding pr simplifies mouse logic might helpful stratgey case well", "d": "7/2016"}, {"body": "wait trying add focusinout analogs mouseenterleave personally rarely want behavior native focusblur events however almost always want focusenterleave like events", "d": "7/2016"}, {"body": "jquense yeah think idea bigger question since current onfocus onblur events bubble events renamed new events implemented onfocus onblur nt bubble", "d": "7/2016"}, {"body": "thats confusion comes mouseenter mouseleave bubble much point also behave like native focusblur fire element attached handle gains focus children gain focus sure need invert behavior unless goal actually add something like focusenterleave", "d": "7/2016"}, {"body": "took made adjustments provide initial web support responder system work spread places injecting plugin normalizing native events intercepting events original handlers called would great eventually official dom support responder system panresponder injectrespondereventplugin normalizenativeevent view event handlers", "d": "7/2016"}, {"body": "want", "d": "7/2016"}, {"body": "started something add content coming days", "d": "7/2016"}, {"body": "proofofconcept implementation anyone curious", "d": "7/2016"}, {"body": "sure relevant might help someone solved reactrouter non redux ssr project switching methods made async calls though project similar components difference components making async call nt necessarily rendered reactdom serves tab switcher nt mount nodes unless state condition met probably handled reactrouter well weird code happens", "d": "7/2016"}, {"body": "nossila issuel also using react list found solution", "d": "7/2016"}, {"body": "missing something longer seems api see object", "d": "7/2016"}, {"body": "nope works ok make sure referencing correct object", "d": "7/2016"}, {"body": "oh mention using version", "d": "7/2016"}, {"body": "missing something longer start stop seems make sure version probably see updated one packages", "d": "7/2016"}, {"body": "enumerated everything support would infinite list would extremely common use case us specifically draw attention ah meant point docs facebook nt plan support transition group component ie wo nt merge prs improve rather enumerating use cases component nt support ya think", "d": "7/2016"}, {"body": "ah well plan start moving addons within month two definitely update docs reflect", "d": "7/2016"}, {"body": "workaround need combination determine whether drop enabled checking property available events call value ok effectively enabling drop operation example allow finishing draganddrop move operation javascript dragstarthandler e edatatransfereffectallowed move dragoverhandler e edatatransfereffectallowed move epreventdefault drophandler e edatatransfereffectallowed move epreventdefault reason works without preventing default event behavior draganddrop operation available least enables possibility realtime visual feedback several distinct dragmodes per application", "d": "7/2016"}, {"body": "zpao ca nt used stack trace available using errors example coming react", "d": "7/2016"}, {"body": "coming react bootstrap next version fix", "d": "7/2016"}, {"body": "gaearon example know error fixed react bootstrap concerns react behavior warnings printed errors makes debugging development hard ca nt filter js console think usage considered", "d": "7/2016"}, {"body": "elijen expected prevent warnings fixing code actionable problem specific warnings warnings general", "d": "7/2016"}, {"body": "adding import react react solved weird", "d": "7/2016"}, {"body": "using inside methods fire likely one still running component instance already gone issue got rid replacing intervals timeouts alternative", "d": "7/2016"}, {"body": "please give short example put settimeout clear", "d": "7/2016"}, {"body": "please give short example put settimeout clear using flash call js recommendation relevant please file new issue example reproducing issue thanks", "d": "7/2016"}, {"body": "using flash call js yes please give example thanks", "d": "7/2016"}, {"body": "mean actionscript externalinterfacecall somefancyjsfunction javascript function somefancyjsfunction settimeout body real thing", "d": "7/2016"}, {"body": "yep", "d": "7/2016"}, {"body": "thank ill try see also", "d": "7/2016"}, {"body": "using webpackconf add following block solve issue", "d": "7/2016"}, {"body": "externals necessary using umd build react separate", "d": "7/2016"}, {"body": "gaearon hello using observables react mutating store exactly done views subscribe changes rerender needed using mobx feel like warning unnecessary case cloning style object store creates boilerplate unnecessary operations view observing changes styles values rerender automatically context moving character screen sometimes reset position two examples mutate styles store one case warning appear case wo nt shows incoherence throw warning action storepositionx storepositiony render const style top left throws warning action storestyletop storestyleleft render mutation occurred cases remember use observables valid expected simply change values instead using immutables simulate cloning creating new objects opinion use case ps nt sure creating new issue felt like continuation last comment create new issue", "d": "7/2016"}, {"body": "thank also worked", "d": "7/2016"}, {"body": "alvarocz using anymore current version exists", "d": "7/2016"}, {"body": "pixelastic take reactjsalgoliacom site add robotstxt disallow crawling getting indexed google", "d": "7/2016"}, {"body": "sure thing added redirect official docs instead", "d": "7/2016"}, {"body": "thank", "d": "7/2016"}, {"body": "spicyj issue addressed stumbled exact issue still legal method create elements provided context", "d": "7/2016"}, {"body": "use unstablerendersubtreeintocontainer inherit parent component", "d": "7/2016"}, {"body": "spicyj time question heavily working glreact yet public question bit indirect anyway glreact needs traverse user vdom retrieve vdom nodes importantly deduplicates nodes gl graph one opengl computation done shared nodes explained way current unfold tree implementing jimfb said one year ago comment bellow thanks notice nt replied time works fine downside nt benefit react lifecycle fine pure function components gl component created function moment bit limited able normal vdom rendering tree wondering libraries like something better like decorate component something like reactredux middle reactart tree generically react since separated multiple implementations implements something allow usecase easily still complex topic like new internal helpers provided cheers", "d": "7/2016"}, {"body": "like decorate component something like reactredux middle reactart tree yes restriction right ca nt swap type element composite returns ex making render return return state update breaks otherwise works fully generically react since separated multiple implementations implements something allow usecase easily still complex topic like new internal helpers provided still unsupported sorry reviewed claims walk building react rendering backend", "d": "7/2016"}, {"body": "thanks answer", "d": "7/2016"}, {"body": "add reactart restriction embeds new type inside dom tree react nt really logic support standalone environments like dom native etc nt problem", "d": "7/2016"}, {"body": "close since decided merge", "d": "7/2016"}, {"body": "also hate magic think could much clean jsx markup magiclike behavior could forgiven muddies otherwise clean jsx markup could otherwise handled like feels gross instead nt think would sort magic someone sits wonders hidden", "d": "7/2016"}, {"body": "updates onmouseleave issue issue almost identical code andykog posted workaround updated component watch native mouseleave event parent disabled element seems work fires expected workaround using code similar edit code events bound directly disabled button native mouseleave event work case either chrome ff", "d": "7/2016"}, {"body": "hey want say also got problem using reactintl like redux connect provide withref true option pass hoc sometimes espace declarative programming reasons provide component imperative api case image cropper component quite annoying someone add component actually leads serious bug", "d": "7/2016"}, {"body": "something wondered workaround use another object store state use update react state far works brilliant cleaned code considerably especially situations async pull data based state result comes back want apply information relevant state nt changed since instance search suggestions multiple things go multiple async jobs needs applied back state afterwards based multiple states still relevant truly mess using", "d": "7/2016"}, {"body": "seems like ca nt get defaultprops instantiated parent class may pass props another child class within standard way methods nt work", "d": "7/2016"}, {"body": "seems like ca nt get defaultprops instantiated parent class may pass props another child class within understand mean show example", "d": "7/2016"}, {"body": "course sorry component import react component proptypes react import timerview timerview class timer extends component constructor props super props componentwillreceiveprops props consolelog receive props render consolelog timer loaded timerproptypes status proptypesstringisrequired timerdefaultprops status timer export default timer run webpackdevserver get error must something wrong", "d": "7/2016"}, {"body": "unbound variable method", "d": "7/2016"}, {"body": "oh totally missed one guess since using stateless components much classes got confused one thank sir", "d": "7/2016"}, {"body": "problem jeanmichelcote happens", "d": "7/2016"}, {"body": "quick update still much radar prs appreciated many competing priorities get back time allows", "d": "7/2016"}, {"body": "thanks gaearon bunch prs pending continue time post start working something", "d": "7/2016"}, {"body": "hi erudinsky think simply use handler using select element prefix fix problem way", "d": "7/2016"}, {"body": "dug ca nt reproduce issue react going trace back see fixed", "d": "7/2016"}, {"body": "yikes wrong broken react appears fixed master", "d": "7/2016"}, {"body": "nhunzaker mind bisecting figure commit fixes needs cherrypicked", "d": "7/2016"}, {"body": "spicyj", "d": "7/2016"}, {"body": "sorry double post looks like awesome work jquense", "d": "7/2016"}, {"body": "helps test script reproduce ran locally android phone", "d": "7/2016"}, {"body": "spicyj went ahead put legwork backport following pr assuming viable would nt mind backporting possible interest", "d": "7/2016"}, {"body": "aweary wonder would true web components brick polymer etc", "d": "7/2016"}, {"body": "kevinsuttle would guess would issue open jsdom regarding web components", "d": "7/2016"}, {"body": "fyi found workaround reactvirtualized using fn form ref rather ref ref idea hopefully helps someone", "d": "7/2016"}, {"body": "syranide jimfb thinkxl either working issue like take crack possible already wrote code made pull request could link", "d": "7/2016"}, {"body": "salehhindi nt time work yet go head curious would approach", "d": "7/2016"}, {"body": "salehhindi aware anyone working sure best way forward implementation feel free write idea comment well", "d": "7/2016"}, {"body": "syranide thanks quick reply sure work tonight write idea anyone else wants help let know", "d": "7/2016"}, {"body": "syranide thinkxl whoops looks like accidentally pushed facebookreact instead local fork understand rookie mistake sorry tried fixing commits looks like pushed exact commit instead reverting earlier commit even tried deleting fork double check facebookreact since master branch wanted know anyone help undo commits nt want error revert back far make permanent change super sorry never happen", "d": "7/2016"}, {"body": "salehhindi made fair share git oopsies nothing worry changes made likely reactmaster branch fork permissions push official repository want fix keep changes best way simply go master branch create new branch reset master branch back commit changes master branch ok makes hard wish submit prs", "d": "7/2016"}, {"body": "attempt trouble couple things created function reactclassjs figured page react element needs call happy answer questions implementation biggest problem although code observes removal react nodes addition nodes react node code nt able determine whether react source mutations means react adds removes node intended would trigger mutation warning additionally means could nt figure place call calls soon react renders elements would trigger mutation test page react elements call render calls another issue observing element delete parent high chain like node trigger mutation change viable workaround observe nodes page mutation check mutated element children react elements ideas fix first issue happy someone could help critique work", "d": "7/2016"}, {"body": "salehhindi nt read code feedback figured page react element needs call createclass incorrect many different ways create classes even pure functional components functions biggest problem although code observes removal react nodes addition nodes react node code nt able determine whether react source mutations solution issue needs move core reactdom essentially wrap startstop observer around domchildrenoperations something bit call chain likely get idea ticket knowing react performing mutation vs user trigger mutation change viable workaround observe nodes page mutation check mutated element children react elements unless mistaken two different scenarios invalid mutation node hierarchies owned react big nono crash react nodes manually discarded rather correctly unmounted bad less important focus pr first imho considering may multiple react trees rendered inside probably makes sense single global observer rather one per tree overlap may become problematic maybe spicyj jimfb good test seeing mutation allowed affected node movedetc owned react target parent owned react target siblings owned react tree error edit rules kind ambigious think get idea", "d": "7/2016"}, {"body": "made module named resolve problem hope resolve problem use search input children", "d": "7/2016"}, {"body": "nt simple way access instances children manually passing refs parent edit halthammerzeit share code create array inputs dynamic way", "d": "7/2016"}, {"body": "pierbover array function coded js", "d": "7/2016"}, {"body": "thanks halthammerzeit nt dynamic way also thought string refs deprecated", "d": "7/2016"}, {"body": "two ios test ipads documented work two ios test ipads work android chrome working ios confirmed discussion reason still using fastclickjs reactjs app see fastclick activates necessary", "d": "7/2016"}, {"body": "react thanks keyanzhang", "d": "7/2016"}, {"body": "gaearon error mapping available somewhere policy future changes", "d": "7/2016"}, {"body": "mitsuhiko automatically extracted build time think plan treat appendonly find latest version error messages link page website decode eg", "d": "7/2016"}, {"body": "mitsuhiko script extracts errors gaearon mentioned appendonly means code already wo nt changed", "d": "7/2016"}, {"body": "append good nice thing meta information exceptions tools access might nice thing future", "d": "7/2016"}, {"body": "question nt react version number error urls least major version nt quite follow append means context thread", "d": "7/2016"}, {"body": "json file website always latest release version appendonly means wo nt modify delete existing error mapping new error existing error gets newly edited appended end file get new number therefore make sure old versions supported", "d": "7/2016"}, {"body": "got nt think helps right looking backporting react doubt errors going come order", "d": "7/2016"}, {"body": "nt use major version urls page nt need nt plans support react official error decoder page could make page error code map motivated custom build may easier delete build code minifies error messages", "d": "7/2016"}, {"body": "already problem though error messages add react minified bit hoping preceding backporting completely understand react unsupported unfortunate reality still deal even done probably deal months finally get", "d": "7/2016"}, {"body": "aware deprecations changes automated update code hand", "d": "7/2016"}, {"body": "yes aware however nt help us much since almost code coffeescript nt start using jsx recently sun jul pm dan abramov notifications githubcom wrote aware deprecations changes automated update code hand receiving mentioned reply email directly view github mute thread", "d": "7/2016"}, {"body": "keyanzhang nt see anything indicates react version error url versioning codesjson managed", "d": "7/2016"}, {"body": "rafayepes", "d": "7/2016"}, {"body": "oh thanks mathieumg totally blind spicyj future versions react let say react react addsdeletesmodifies errors totally completely normal user react could go error url find error message actually error heshe going make sure old error indexes never removedmodified looks like approach never modify old errors still curious ensured scaled across multiple developers seems something fairly easy forget thanks love feature", "d": "7/2016"}, {"body": "rafayepes thought would answered concern stuckouttongue", "d": "7/2016"}, {"body": "rafayepes error list automatically maintained via gulp task forgetting nt concern see", "d": "7/2016"}, {"body": "nt add much bloat", "d": "7/2016"}, {"body": "submitted pull request issue pull request using context propagate locale routing information problem pure components stop subtree rendering context changes pure components check state props problem many people per issue reasoned masking context intermediate components would better masking defined contexttypes would used validating filtering similar proptypes work properties specified validated ones specified still available component updated tests reflect update since components interested context would typically use context argument masking context would cause existing component break unless said components explicitly checking context param undefined would however create opportunity refined pure component say contextawarepurecomponent would compare state props context shouldcomponentupdate allowing context updated cause rerenders pure components currently running development patch using radium reactbootstrap components experience issue", "d": "7/2016"}, {"body": "hello bvella think meant pull request", "d": "7/2016"}, {"body": "darylcantrell right thanks", "d": "7/2016"}, {"body": "event fired submit form click button button form gt", "d": "7/2016"}, {"body": "borm ideally browsers fire event form method called move onsubmit handler method component amp call", "d": "7/2016"}, {"body": "selvagsz idea submit form outside amp fire onsubmit event", "d": "7/2016"}, {"body": "tldr key key ckey ckey react wants build keys use", "d": "7/2016"}, {"body": "given working solution chance part react proper soon waiting new reconciler", "d": "7/2016"}, {"body": "given working solution using successfully real projects mwiencek implementation nt really pretty works people submit pr let react devs tear apart sure please send pr", "d": "7/2016"}, {"body": "submitting pr last heard spicyj wanted finish new core algorithm proper solution since comment nodes nt really make sense react native nt following status nt think plans changed glad people find packages useful meantime", "d": "7/2016"}, {"body": "new algorithm works supports fragments however expect become production ready months come wonder adding first react dom later react native bad downside fragments ecosystem little pun intended may give us time experiment feature team meeting today raise question time get better understanding", "d": "7/2016"}, {"body": "gaearon point supporting fragments super simple sugar currently using way tiny trivial wrapper returning multiple children component root really important", "d": "7/2016"}, {"body": "syranide using custom build frag beta environment however would like use official react build instead provide wrapper thanks", "d": "7/2016"}, {"body": "amertak js import react react import createfragment reactaddonscreatefragment let nativecreateelement reactcreateelement reactcreateelement function arguments frag return nativecreateelementapply arguments let length argumentslength length lt return null let children let lt length children arguments return createfragment children", "d": "7/2016"}, {"body": "talked last team meeting consensus want go particular implementation however feature supported long term core rewrite timeline also consider one things could potentially work second half year rewrite takes long work guarantees make list keep updated comes get better idea work please see meeting notes repo find latest discussion", "d": "7/2016"}, {"body": "gaearon would interesting traction official fragsyntax least", "d": "7/2016"}, {"body": "syranide thanks code unfortunately seems use need root app component renderer method method accept fragment thanks anyway useful people nt need app root", "d": "7/2016"}, {"body": "amertak yes enabling reasonable syntax creating fragments nt add new features", "d": "7/2016"}, {"body": "syranide thinking would possible render comment manually treat another component might necessary internally comments handled type maybe able call idea small workaround key thing missing able render node right", "d": "7/2016"}, {"body": "gaearon bit sad nt coming soon appreciate transparency good write", "d": "7/2016"}, {"body": "hugotox button set default making one submit button pressing enter run first one defined", "d": "7/2016"}, {"body": "spicyj tried example jsbin nt work safari way chrome works perfectly tested ipad", "d": "7/2016"}, {"body": "inserting full working example others reference", "d": "7/2016"}, {"body": "record since longer works even initial render since moving away innerhtml rules important thrown", "d": "7/2016"}, {"body": "record since longer works even initial render since moving away innerhtml rules important thrown actually nt actively care anymore technically solved edit something want look", "d": "7/2016"}, {"body": "hi say still issue find way around using listeners react lifecycle though try get snippet", "d": "7/2016"}, {"body": "never mind popup launched async action", "d": "7/2016"}, {"body": "recently reading source code batching comment really make confused find issue maybe guys delete", "d": "7/2016"}, {"body": "record ran problem without anything exotic got crudstyle entity list table row onclick handler choose entity row represents one row cells control buttons onclick handlers click one buttons table row table row onclick gets triggered button tried circumventing problem setting native browser event button component click anywhere seems trigger everything page even though calling stop propagation methods could find still problem two years react hijack event handling begin", "d": "7/2016"}, {"body": "please nt everyone useslikes prop types least make optin somehow", "d": "7/2016"}, {"body": "tj would assume implementation would warn defined component nt use would fine", "d": "7/2016"}, {"body": "true true though already instead leads warnings props", "d": "7/2016"}, {"body": "please nt everyone useslikes prop types least make optin somehow worry like much either longer term encouraging people use flow typescript instead", "d": "7/2016"}, {"body": "awesome still try flow definitely would prefer use language features even still transpiled nt screwed bad ignoring far haha", "d": "7/2016"}, {"body": "would like add preact already implements feature say leads easy destructuring easy switch stateless stateful component", "d": "7/2016"}, {"body": "spicyj tried react still nt work safari way chrome works perfectly tested ipad", "d": "7/2016"}, {"body": "brunogarcia post jsfiddle jsbin", "d": "7/2016"}, {"body": "spicyj hi made testing safari ios found safari private browsing nt save data localstore react bug sorry mistake", "d": "7/2016"}, {"body": "hi found new method include html comments eg conditional ie comments jsx react components using web component jsx lt ie using outdated browser please upgrade browser improve experience endif", "d": "7/2016"}, {"body": "take point exportmike like", "d": "7/2016"}, {"body": "bitten one would great note behavior present large performance impact hard find issue unless already done investigation work", "d": "7/2016"}, {"body": "would like add issue also affects electron applications work arounds seem include minified version react globally via tag would work electron nt node way one able track every used object seeing also makes difficult switch devprod use proposed hack replace regular object good forced overwrite node api want use react using babel transforminlineenvironmentvariables default babel nt transpile nodemodules configured nt look like work around note replace every nt solution automatically requires root issue closed seems react able initialize configuration using rely objects optionally offer function change value later reason would nt work", "d": "7/2016"}, {"body": "technically could fixed uglifyjs supports annotations may easier still team moves build rollup combination rollup would simple export var constants file effectively tagged uglify dead code elimination production mode", "d": "7/2016"}, {"body": "well reading comments nt know tell know using oop react applications lets forget oop go quoting jordwalke classes simply better syntax react component creation make syntax better possible support inheritance think much cleaner syntax wrappers mixins", "d": "7/2016"}, {"body": "make syntax better possible support inheritance think much cleaner syntax wrappers mixins kind thinking get use affords like balls afford throwing chairs afford sitting thinking leads", "d": "7/2016"}, {"body": "ca nt believe somebody actually written nonsense ca nt believe referenced ca nt usedoes nt know use oop paradigms nt mean write something titled goodbye object oriented programming kind thinking mentioned kind thinking led browser using operating system using one third software written far kind thinking reuse roots modernism even car drive hardware run software airplane travel phone pocket using good human reached level affords like balls afford throwing", "d": "7/2016"}, {"body": "thread validity success oop react classes already support inheritance want nt recommend experience nothing technical address recommend taking philosophical discussion medium twitter nice facebook group", "d": "7/2016"}, {"body": "sorry discussion happened great support inheritance currently works know issues possible plan solve issues support inheritance officially taking much effort result much cleaner code nothing else", "d": "7/2016"}, {"body": "sebmarkbage apologies hopeful move toward functional components future lots react users nt relearn inheritance pitfalls hard way like classes want make best use react gaearon wrote excellent guide use classes sleep night perhaps would useful mention inheritance dan recommendations documentation help guide people paths toward success hoc help avoid pitfalls", "d": "7/2016"}, {"body": "still considered would nice react could somehow encourage users small tasks optimally like changing header background color based scroll position encountered project instinct use ran across issueanswer relating performance component ended also included support passive event listening", "d": "7/2016"}]