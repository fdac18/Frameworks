[{"title": "fnappend may fail microsoft edge", "body": "description attempt append html popup window jquery evaluates markup creates documentfragment context ownerdocument multiple toplevel sibling elements jquery attempt append documentfragment second window fails versions microsoft edge reproduction html b microsoft edge throws interface supported link test case fiddle", "num": "3251", "d": "7/2016"}, {"title": "jqueryextend update objects references", "body": "see issue try following code link test case", "num": "3250", "d": "7/2016"}, {"title": "offset throws error used window", "body": "description throws error window since defied window present latest build looked master branch link test case check console", "num": "3249", "d": "7/2016"}, {"title": "move nondeprecated eslintrc format", "body": "description see deprecated use eslintrc either json yaml move link test case na", "num": "3248", "d": "7/2016"}, {"title": "amp lint files", "body": "description run see files target linted repeat times files still linted thought task nt work seems work fine running lints files second time cc markelog link test case na", "num": "3246", "d": "7/2016"}, {"title": "insufficient documentation parsehtml behaviour", "body": "hi ran issue jqueryparsehtml switching project jquery part documentation issue default behavior changed context specified given null undefined new document used problem case context parameter boolean new document also created could change doc default behavior changed context specified given null undefined boolean new document used second new document used keepscripts true maybe change line new document strange behaviour jquery ui widget work type element uses thiselementownerdocument set thisdocument current document anymore restricted keepscripts true think regards olivier", "num": "3244", "d": "7/2016"}, {"title": "expressions form supersetnot subset incorrectly length", "body": "description expressions form setdiff supersetnot subset incorrectly length jq objects string contents works correctly dom contents expected setdiff items superset subset actual setdiff empty elements strings least chrome ff works correctly see minimal test case link test case", "num": "3243", "d": "7/2016"}, {"title": "checkbox checkuncheck attr removeattr doesnt work second time", "body": "description add remove running code checking unchecking second time nothing happens even though attributes added removed normally using native setattribute removeattribute works fine link test case", "num": "3242", "d": "7/2016"}, {"title": "simple imagezoom jquery code working", "body": "hi trying two days make imagezoom jquery plugin work failed works well tried use migration tool find error points code firing using latest firefox browser imagezoom code embedded fiddles working working help problem would greatly appreciated sincerely nestor g torres", "num": "3241", "d": "7/2016"}, {"title": "subtle bug offset scroll position", "body": "common use scroll viewport anchor element eg case element scrolling looks like see source code anchor nt height width top left correctly taking account returning top relative viewport document fixed changing markup able correctly handle original markup", "num": "3240", "d": "7/2016"}, {"title": "ajax success function", "body": "description upgrading jquery ajaxsuccess longer works well documented breaking change example", "num": "3239", "d": "7/2016"}, {"title": "jquery animate radius throwing exception firefox", "body": "using version animate method throws console error animating svg circle element radius firefox browser open link ie firefox ie animated properly firefox throws console error circle disappear working fine browser", "num": "3238", "d": "7/2016"}, {"title": "update slim remove deprecatedjs anymore given upcoming deprecations", "body": "lots deprecations much remove without notice decided simpler slim remove things pace normal build change nt affect slim users", "num": "3237", "d": "7/2016"}, {"title": "jqm popup error jquery", "body": "uncaught typeerror apreventdefault function noticed ticket error fixed also using jqm nt get error jquery", "num": "3236", "d": "7/2016"}, {"title": "remove property fill", "body": "seems last browser nt provide natively bit tricky test needs real event simulated one see also filling property passing nt know need formally deprecate jquery generate migrate warning browsers ever tried deprecate via console warning passthrough copying property would responsibility caller anything say add note docs use possible", "num": "3235", "d": "7/2016"}, {"title": "param function ignores set object", "body": "hi looks like param function used fro ajax requests ignores set object tested version code let new set let params set arr consolelog param params output expecting still question serialize set array think closest set representation case get request live demo", "num": "3232", "d": "7/2016"}, {"title": "jqueryajax cache false mangles url parameter", "body": "option addsreplaces parameter mangles url already defined parameter trying actual request sent javascript works fine ajax url examplecom amp foobar fails ajax url examplecom amp foobar cache false tested test case update original issue", "num": "3229", "d": "7/2016"}, {"title": "deferred group async operations", "body": "today promise operation creating many async events aplus spec allows promise operations grouped see note operations also nt strictly async long called platform code see grouping operations reducing improve performance less timeoutsasync events reduce probability aplus tests failing errors see locally fairly often allow platform code flush pending promise operations example loadbeforeready could fixed flushing pending promise operations domcontentloaded event", "num": "3227", "d": "7/2016"}, {"title": "arraylike nt restrict results elements", "body": "reported scottgonzalez started filtering nonelement items jquery inconsistent counter stated selector excludes nonelement nodes goals commit introduced restrict additional filtering selector input ie", "num": "3226", "d": "7/2016"}, {"title": "jquery gets wrong", "body": "description considering spec correct expect happen native bring number elements acually happens brings different number browsers affected tested chrome link test case", "num": "3224", "d": "7/2016"}, {"title": "skip running eslint node build jquery node versions", "body": "description eslint longer supports versions locked would nt bringing otherwise big con users use older version big pro version supported soon drop suppose document support recall assumption people use custom builds environment right check hypothesis look stats custom builds decide", "num": "3222", "d": "7/2016"}, {"title": "eventrelatedtarget null ff", "body": "description typescript event jqueryevent object onblur event set chrome ff ie tested chrome amp results link test case", "num": "3220", "d": "7/2016"}, {"title": "error initializing dialog jquery jquery ui", "body": "initializing dialog console error typeerror elemgetclientrects function issue related following one error appears jquery ui method position used specifically within option set jquery evalutating elem window obejct leads error running sample cause error appear console", "num": "3217", "d": "7/2016"}, {"title": "jquery support returning hex value element css backgroundcolor", "body": "description link test case", "num": "3216", "d": "7/2016"}, {"title": "resize use outerwidth instead width", "body": "jquery ui expect happen start resize block element size change pixels count move mouse acually happens start resize block element size changed abruptly padding size browsers affected description see attached video", "num": "3215", "d": "7/2016"}, {"title": "deprecate event shorthand methods", "body": "discussed core meeting deprecate event shorthand methods minor release", "num": "3214", "d": "7/2016"}, {"title": "ready handler nt deprecated behave handler", "body": "also document ready handler deprecated jquery behaves similarly ready method ready event already fired try ready bound handler executed ready handlers bound way executed bound three methods wait remember ca nt use use instead hand event way round ca nt use use instead also unlike every event lot gratuitous inconsistencies lot unnecessary things know one easily miss deprecated behave whether fired order execution know tell gratuitous unnecessary stuff implementated however implementation difficulties dealt implementors exposed api users", "num": "3213", "d": "7/2016"}, {"title": "load shorthand load nt deprecated", "body": "know long time found tried jquery actually stopped working deprecation shorthand inconsistent nt deprecated etc going nt deprecated either create unnecessary inconsistency see rationale behind ambiguous ajax method discouraging use good idea deprecating breaking going far unless eventbinding shorthand methods etc would nt crazy idea btw nt backward compatibility always bas api design beginning sacrificing clearness sake saving keystrokes writing code consistency must large api jquery way ironic opposite thing keeping method deprecating one inconsistency even less reason exist", "num": "3212", "d": "7/2016"}, {"body": "nt really understand ticket even via google translate", "d": "7/2016"}, {"body": "jerrygoodboy", "d": "7/2016"}, {"body": "far understood google translate jquery ui repository jquery one latest jquery indeed see", "d": "7/2016"}, {"body": "mgol sorry made mistake though jerry asking jquery ui cause also track jquery ui issues actually jerry asking supported features missing far know branch includes support ie jerrygoodboy \u4e00\u76f4\u7528jquery", "d": "7/2016"}, {"body": "far know branch includes support ie yes correct although fix critical issues branch focusing jquery thanks translating", "d": "7/2016"}, {"body": "works browsers including latest ie specification says could used like confirmed words", "d": "7/2016"}, {"body": "documentation specifically explains assigning object multiple variables copy content help ask stackoverflow jquery forum", "d": "7/2016"}, {"body": "please read upgrade guide especially offset section expected breaking change", "d": "7/2016"}, {"body": "ok seemed odd jquery throws errors normally goes way handle errors silently thank answer", "d": "7/2016"}, {"body": "wow news fix", "d": "7/2016"}, {"body": "problem particular means precommit hook taking way longer needs", "d": "7/2016"}, {"body": "well sucks", "d": "7/2016"}, {"body": "according docs parameter must element passed also says parameter also optional following signature fact setting left undefined docs correct ps api site repo issues reported repo meant bugs jquery", "d": "7/2016"}, {"body": "thanks answer used project mainly discuss second point nt think documentimplementationcreatehtmldocument default behaviour context false", "d": "7/2016"}, {"body": "insufficient unsufficient olivier gasc wrote thanks answer used project mainly discuss second point nt think documentimplementationcreatehtmldocument default behaviour context false receiving subscribed thread reply email directly view github mute thread email checked viruses avast antivirus software", "d": "7/2016"}, {"body": "second argument boolean give argument explicitly want particular value", "d": "7/2016"}, {"body": "yes indeed point useful case think default value", "d": "7/2016"}, {"body": "creating elements another document might used situations iframe", "d": "7/2016"}, {"body": "yes case legit pass function custom context need new default context actually breaks jqueryui widgets anywhere need access may better fix issue jqueryui check thanks olivier", "d": "7/2016"}, {"body": "array string supported input result passing array undefined see supported", "d": "7/2016"}, {"body": "digging bit dupe filer noted would merit mention upgrade guide usage widely advocated sites like including accepted answers hundreds upvotes among top results googling jquery set difference see results recently edited say longer works nt help people upgrading existing code note upgrade guide would appropriate would saved us time may suggest reopened doc bug update upgrade guide", "d": "7/2016"}, {"body": "sure dive undocumented apis upgrade guide case repo jquerycom site upgrade guide located want discuss documenting change somehow correct place", "d": "7/2016"}, {"body": "note upgrade guide would found people getting answer sure note upgrade guide help fix lot mediocre stackoverflow answers using undocumented functionality giving plain bad advice used particular answer post comment thread asking edited someone reflect unsupported regardless jquery version always wrong even happened work past issues filed upgrade guide even better would make pr since sure address words upgrade guide jquery never replacement lodash underscore usage sort example way outside jquery intended use dom library", "d": "7/2016"}, {"body": "note upgrade guide would found dmethvin actually yes upgrading scanned codebase issue noted guide people getting answer sure note upgrade guide help fix upgrade guide helps case code wherever written months years ago upgrade means wo nt work anymore sure address words upgrade guide give thought come something worthwhile file issue pr suggested course big deal established code bug appreciate prompt responses", "d": "7/2016"}, {"body": "link test case includes native version see difference", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "checked attribute setting initial state checkbox per spec seems browsers ignoring still recommend using instead however difference behavior jquery edge issue current code", "d": "7/2016"}, {"body": "perhaps dirty checkedness changed checked idl changed click checkbox changed addremoveall", "d": "7/2016"}, {"body": "still setting idl along attribute backcompat makes sense works expected", "d": "7/2016"}, {"body": "bugs code might causing errors thrown inside jquery case enough look stack trace enable pause exceptions chrome devtools going stack code see error happens code please read note kind questions better suited stack overflow ca nt debugging peoples code bug reports based purely jquery code small reproducible test cases without use external libraries", "d": "7/2016"}, {"body": "also appears plugin abandoned nt updated almost years almost interest terms watchers stars quick look code using several deprecated andor removed features nt able fix find different plugin actively supported author", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "see deprecation notice jqxhrsuccess jqxhrerror jqxhrcomplete callbacks removed jquery use jqxhrdone jqxhrfail jqxhralways instead", "d": "7/2016"}, {"body": "also upgrade guide jquery migrate plugin", "d": "7/2016"}, {"body": "general nt support svg jquery may look like html uses often completely different set rules dom seeing animation happening chrome using jquery either regression browsers afaict fact works ie previous versions nt taken sign svg animation supported nt looked exactly failing leave ticket open others check maybe something general wrong", "d": "7/2016"}, {"body": "according docs animate along css properties element nt seem true code animates properties name nt match css property anyone know purpose gnarf case animates css properties regular properties element property read chromefirefox difference strict mode chrome ignores assignment firefox throw error ie apparently property works setter fixed edge though throws firefox fiddle animating attribute manually via function correct way property animation needs removed unfortunately nt seem way animate attribute based property removing kill animation create custom property though animating purposes better way animate attributes", "d": "7/2016"}, {"body": "animating noncss kindasorta tolerated animating properties plain object although documented see however yes assume property thing set step suppose could setter hook options make set property default could overridden set attribute write value latch led output whatever", "d": "7/2016"}, {"body": "let discuss next meeting", "d": "7/2016"}, {"body": "hi checking whether issue tracker working properly see template filled created issue asked test case", "d": "7/2016"}, {"body": "api page says note universally agreedupon specification param strings possible encode complex data structures using method manner works ideally across languages supporting input use json format alternative encoding complex data instead never goal serialize every type javascript object custom way suggest improvements note clarify", "d": "7/2016"}, {"body": "nt improvements note sounds like talking structures comes application logic language think need serialize set object probably map also arguments next standard js object jquery already serializes another standard object array format array complex structures set serialized already like example docs", "d": "7/2016"}, {"body": "array fundamental javascript object jsoncompatible support every type basically define serialization logic would impossible deserialize complex type complex structures set serialized already like example docs really complex structure object objects arrays values object easy serialize", "d": "7/2016"}, {"body": "right really happening converted serialization rather asking api pick one serialization method etc add code seems better caller choose preferred method convert array restore back want", "d": "7/2016"}, {"body": "got point guys currently json serialization set returns always empty set defined browser level theer nothing need go bump browser developers first thanks time", "d": "7/2016"}, {"body": "confirmed given results farseeing problem uses removing actual parameter fixing bug still remove", "d": "7/2016"}, {"body": "problem thing bothers query parameters get malformed", "d": "7/2016"}, {"body": "ok good suspect nt noticed reported code appends cache buster end case works fine even request resubmitted", "d": "7/2016"}, {"body": "hi guys also problem found anti cache parameter changed first parameter url called twice row first time something like original amp anticached amp amp second request see anticache parameter first parameter original amp amp anticached amp amp also saw commit changes ranticache remptyquery variables issue tried changes code worked changed replace rantichache question mark ranticache regex removing first amp adding character replacement work replace remptyquery job anticache parameter isthe last paramter cacheurl cacheurlreplace ranticache replace remptyquery know issue fixed yet also final solution maybe could help little bit tyvm paulo costa", "d": "7/2016"}, {"body": "seems like great idea improve performance", "d": "7/2016"}, {"body": "regression update docs well particular part removing specific elements clarify nonelement nodes passed", "d": "7/2016"}, {"body": "could help fix first glance code fix seem big attempt pr", "d": "7/2016"}, {"body": "process pretty simple see make sure signed cla using name commits submit pull request including relevant test suite source code changes", "d": "7/2016"}, {"body": "nicklou need help ask", "d": "7/2016"}, {"body": "hello mr think first step judge element nodetype return elemnodetype amp amp indexofcall qualifier elem gt", "d": "7/2016"}, {"body": "already want skip initial qualifier string", "d": "7/2016"}, {"body": "confirmed looks like flatout got optgroup handling wrong", "d": "7/2016"}, {"body": "looking noticed chrome sees still enabled caused new feature test fail said think chrome right since anchor element disabled idl", "d": "7/2016"}, {"body": "btw different results safari ff chrome", "d": "7/2016"}, {"body": "chrome sees still enabled caused new feature test fail said think chrome right since anchor element disabled idl chrome actually reason content elements never match enabled", "d": "7/2016"}, {"body": "see nt match either enabled disabled", "d": "7/2016"}, {"body": "bad nt release nt running jsdom tests node lt includes promisesa compliance tests actually testing jquery even runs configuration assume building jquery using jenkins server recently switched node projects infrastructure taken care feel safer node amp dropped upstream skipped running eslint node lt assume install fine everywhere since nt native dependencies postinstall hooks depending newer node", "d": "7/2016"}, {"body": "skipped running eslint node lt yeah could although would require hacking unpleasantness grunt file", "d": "7/2016"}, {"body": "per meeting skip running eslint node lt dropping version travis moved roadmap later", "d": "7/2016"}, {"body": "take", "d": "7/2016"}, {"body": "oh man thief would mind update eslint", "d": "7/2016"}, {"body": "markelog sure pr ready", "d": "7/2016"}, {"body": "example nt seem include jquery", "d": "7/2016"}, {"body": "bad switching versions forgot leave readded tested way results", "d": "7/2016"}, {"body": "agree null also looks like null copied something getting wrong jquery however sure focusing another element case null correct search related blur target try making simple nonjquery repro also see related target correct focus another form element example edit fixed search term", "d": "7/2016"}, {"body": "focus another element blur unless click browser window case null appropriate", "d": "7/2016"}, {"body": "get element chrome ff edge look elsewhere ie safari", "d": "7/2016"}, {"body": "focus another element blur unless click browser window case null appropriate nt think true since ends click area still inside clicking still blur input regardless agree browsers providing information jquery used identify therefore fixable inside jquery pinged mozilla folks opinion", "d": "7/2016"}, {"body": "cc ing mozilla folks miketaylr digitarald bzbarsky annevk kentuckyfriedtakahe cyberdees", "d": "7/2016"}, {"body": "blur event element focus clicking somewhere nt actually take focus nothing focus click null seems appropriate tried simple testcase like chrome get null testcase linked also identical behavior firefox chrome firefox issue exactly", "d": "7/2016"}, {"body": "ff lists next major release parameter based discussion seems consensus blur need feature cases requesting many others exist use case cleaning multiselects closing list options user clicks based discussion far looks like need implement work around bc blur going support looks like bzbarsky code probably best work around", "d": "7/2016"}, {"body": "based discussion seems consensus blur need feature think consensus valid within blur event cases going receive focus per spec maybe test case nt demonstrating issue adequately going close issue nt think jquery problem solved find case works differently plain dom jquery feel free post reevaluate", "d": "7/2016"}, {"body": "see", "d": "7/2016"}, {"body": "jquery method returns computed value property nt apply transformation scope core library want something like always jquerycolor plugin", "d": "7/2016"}, {"body": "bug tracker jquery core please file bug along reduced test case videos debugged idea markup styling etc used produce bug", "d": "7/2016"}, {"body": "please huge amount code especially top million websites relies lot event shorthands reason load deprecated ambiguous remaining shorthand ambiguity actually much cleaner code fix something broken good example would change focus trigger focus focus function dosomething focus function dosomething please break important shorthands one person complained biggest reason continue use library backward compatibility keeps breaking stuff zero apparent gain many users either seriously consider moving different library stay older version guessing jquery want addition millions jquery plugins uses shorthand way every single one would updated would break entire jquery ecosystem hope guys see magnitude change users gain break lots stuff reason", "d": "7/2016"}, {"body": "deprecating ever removing default build already easy exclude custom build deprecation good signal developers aim use", "d": "7/2016"}, {"body": "fan deprecating something nt plan removing considering might deprecating prevalent remove nt see downside using like prefer disadvantages mind back harangue using alias", "d": "7/2016"}, {"body": "reason favor deprecating removing encourage plugin developers support users want exclude event alias module module besides deprecated module support excluding jquery ui also personally disliked methods many years operate reverse order expected trigger scenario primary action firing event taking action like native equivalents result close enough expected native behavior developers nt notice definitely source pain long time", "d": "7/2016"}, {"body": "bootstrap team similar thought scottgonzalez planning use slim build obviously consumers bootstrap using full build nice enddevelopers plugin nt unnecessarily force use full build fine deprecating ever removing slightly complicated deprecate come another term use api docs define apis plugins avoid already possible exclude eventalias custom build without signal plugin writers avoid nt going help much concern even removed event aliases core library always provided plenty compatibility helpers make transition easier someone moving jquery hypothetical jquery without event aliases would add jquery migrate time changed jquery would report things fix", "d": "7/2016"}, {"body": "add points deprecating shorthands mean slim build wo nt contain turn may serve incentive plugin authors stop relying time block people upgrading newer jquery since full build continue work micha\u0142 go\u0142\u0119biowski", "d": "7/2016"}, {"body": "also interesting bootstrap actively disables aliases unit tests wo nt accidentally used could used custom build course way tests generate clear error message one used accidentally", "d": "7/2016"}, {"body": "agree tradefoff worth saving lines code vs breaking lot user code lots jquery plugins maintained unmaintained actively used concern even removed event aliases core library always provided plenty compatibility helpers make transition easier someone moving jquery hypothetical jquery without event aliases would add jquery migrate time changed jquery would report things fix important point backward compatibility users keep modifying code every jquery plugins used everytime new jquery major version released note jquery migrate certainly solve newly created problem involve users add two javascript sources instead one many users may even aware jquery migrate exists dont think saving lines code worth breaking lots code may know jquery already less kb load google cdn permanently cached reducing files size kb even kb isnt going make much difference single image facebook kb filesize important criteria imho important criteria backwards compatibility adding new features continue make jquery great library", "d": "7/2016"}, {"body": "think whole core team agrees removed would like warn use though deprecation might best way however still think word deprecation give wrong signal people believe jquery intends remove line evidenced comment nt", "d": "7/2016"}, {"body": "thank timmywil forgot add using shorthand saves significant coding time also reduces end user filesize since less code using shorthand winwin developers", "d": "7/2016"}, {"body": "forgot add using shorthand saves significant coding time also reduces end user filesize since less code using shorthand winwin developers lie nt save significant coding time shorthands like time takes type characters negligible even entire year worth coding even time spend typing general coding fairly small keystrokes get significant gains development time end user file size assume referring number bytes transferred number bytes cached file user drive number bytes think saving transfer bandwidth disappears code runs gzip prior transfer", "d": "7/2016"}, {"body": "realize everyone uses gzip server addition gzipping compression increases server loads compress every single time unique visitor requests javascript files suitable situations compress codes using shorthands gzip process lot useful sure think providing quick shorthand problem shorthands called symbolic links linux os widely used feature advertised saving timemoney something hidden users", "d": "7/2016"}, {"body": "important point backward compatibility users keep modifying code every jquery plugins used everytime new jquery major version released breaking backwards compatibility precisely reason releasing new major version every user modify code guarantee least please consider strong suggestion avoid event shorthand methods new code", "d": "7/2016"}, {"body": "think confusion term deprecating let go wikipedia page definition deprecation discouragement use feature design practice typically superseded longer considered safe without least time removing system part prohibiting use without removing purpose tickets like discourage use nothing example dom method deprecated removed browser vendors sure based usage stats one longer using aka break web principle could use rule remove widely used methods one uses newer version jquery meanwhile unfavor practise show first time see misconception really sadness urge everyone see formal limitations term", "d": "7/2016"}, {"body": "move almost ready fact moved issues previously assigned", "d": "7/2016"}, {"body": "markelog formal definition little bearing popular connotations associated term dictionaries change time point change belief deprecation implies eventual removal least wish way could say recommend avoiding particular api different saying recommend avoiding may removed future version", "d": "7/2016"}, {"body": "timmywil changed name module moved stuff nt want remove due widespread usage still recommend avoid module would excluded slim build may urge library creators avoid apis real", "d": "7/2016"}, {"body": "yeah going use deprecated come another term got quite deprecate x issues open seem blocked coming agreement", "d": "7/2016"}, {"body": "timmywil point change belief deprecation implies eventual removal least imply first step removal process nt way really call way prefer something would nt change meaning discouraging people using still would first step removal process", "d": "7/2016"}, {"body": "actually nt think deprecation must mean plans remove nearby future would say though deprecating sth means discourage using love remove knows removal possible nt want remove due widespread usage think api continue exist would discourage using two things nt really go hand hand applying ticket say since want discourage deprecate even remove years", "d": "7/2016"}, {"body": "exactly trying say thank", "d": "7/2016"}, {"body": "precedent long deprecation deprecated nt remove case also got lot complaints deprecation main issue longer wait send signal nt best practice anymore using whatever word longer take people change code aware like people disagree whether something good practice may lot code using affect remove", "d": "7/2016"}, {"body": "particular reason jquery members want actively discourage using shorthands reason think reducing file size eventually removing whenever would actual calculations minifygzip saves around bytes reason", "d": "7/2016"}, {"body": "reason", "d": "7/2016"}, {"body": "seem right plugin developer worry slim build user selected user could excluded lots things slim build mean plugin developer code around software solutions dependencies want use particular version add dependency case bytes jquery loaded cached permanently browser main point plugin developer tell user needed run program way around missing something obvious", "d": "7/2016"}, {"body": "main point plugin developer tell user needed run program way around missing something obvious considerate plugin developer nt force user pull code needed", "d": "7/2016"}, {"body": "seem right plugin developer worry slim build user selected user could excluded lots things slim build could super simple plugin developers support one specific thing software solutions dependencies literally ca nt define dependency plugin developer want use particular version add dependency case bytes option plugin developer option application developer plugin could actually define dependency would different story jquery loaded cached permanently browser far true", "d": "7/2016"}, {"body": "think mixup happening considerate plugin developer nt force user pull code needed agree completely however shorthands obscure code shorthands maybe used features especially click onmouseover onmouseout etc many plugin developers may unreasonable expect presence core code point opinions maybe divided could super simple plugin developers support one specific thing looking global view users exclude anything slim build reasonably expect plugin developers today support one specific thing b tomorrow support another specific thing asking plugin developers today support users particular slim build chosen exclude shorthands tomorrow would ask plugin developer support users another slim build rabbit hole literally ca nt define dependency plugin developer literally add download page important note jquery ui already exact dependency example want draggable widget need atleast ui core core widget mouse option plugin developer option application developer plugin could actually define dependency would different story plugin actually define dependency inside code pure javascript add dependency note download page reasonable person would understand nt add dependency suggested plugin devs plugin simply work see draggable widget example far true load full build google cdn well know cdn true load fullcustom build server need setup caching server cache static content finally would like add imho jquery one best javascript library thankful hard work making happen apologize came across something opposite reason chimed think bug major impact existing user code probably jquery plugin would like people use library breaks lot existing code may adverse effect shorthand safe bugs easy learncodemaintain tiny file size kb guys decide remove shorthand sure jquery community adjust simply wont choice", "d": "7/2016"}, {"body": "users exclude anything slim build custom build slim slim build concrete meaning see also blog post section slim build since slim build nt include deprecated apis deprecated shorthands slim build would nt contain", "d": "7/2016"}, {"body": "shorthands maybe used features especially click onmouseover onmouseout etc many plugin developers may unreasonable expect presence core code point opinions maybe divided argument removal deprecation deprecation means developers encouraged stop expecting presence minifygzip saves around bytes seems high true argument favor deprecation eventual removal four times larger consider substantial reduction accounts total size reason provide unambiguous nonoverloaded means dealing events including covered shorthands latter syntactic saccharin worth extra file size saved keystrokes reservation jquery prototype properties mental overhead anyone disagrees free define whatever want code trivial", "d": "7/2016"}, {"body": "literally ca nt define dependency plugin developer literally add download page important note jquery ui already exact dependency example want draggable widget need atleast ui core core widget mouse sure text real dependency management nt happen text happens code ca nt define dependency code jquery ui dependency management within download builder nt help developers third party plugins dependencies specific widgets within jquery ui jquery ui however make possible use amd actually define dependencies individual parts actually powers download builder third party developer amazing dialog easily code define dependency jquery core jquery ui dialog jquery ui dialog turn define dependency jquery core jquery ui draggable jquery ui resizable jquery ui position plugins define dependencies works way chain resulting plugins jquery ui widget jquery ui mouse loaded modules jquery core plugin actually define dependency inside code pure javascript yes people many years please take time read requirejs custom solution javascript modules native solution load full build google cdn well know cdn true actually fairly high cache miss rates well known cdns say want something cached forever nt control end user cache reason chimed think bug major impact existing user code probably jquery plugin would like people use library breaks lot existing code may adverse effect shorthand safe bugs easy learncodemaintain tiny file size kb nothing break removal", "d": "7/2016"}, {"body": "implementation difficulties big difference actual apis event actual event use event system api eg actual event document ready promise safe use time late bindings wo nt ever fired missed event actually occurring mistake forced nonevent functionality event system api closest event equivalent would would latebinding problem ready event convenience developers never worry whether code running document ready fact referred event long caused lot confusion community deprecation use event system help developers understand actually also bit late even discussion deprecation since deprecation happened two half years ago", "d": "7/2016"}, {"body": "ready nt dom event therefore irrelevant shorthand methods nt provide every event eg methods joint removal net effect consistency far tell decision deprecate remove indeed motivated ambiguity came ample notice nt see us adding back shorthand favor deprecating remaining ones honest thought already although misremembering segregation eventalias module", "d": "7/2016"}, {"body": "closing favor specific", "d": "7/2016"}, {"body": "mean add wiki", "d": "7/2016"}, {"body": "yep plan get soon", "d": "7/2016"}, {"body": "said days ago h", "d": "7/2016"}, {"body": "lazy hazy days summer", "d": "7/2016"}, {"body": "first draft see small typos formatting issues think better", "d": "7/2016"}, {"body": "still todo replace pointer wiki wait people reviewed new wiki page", "d": "7/2016"}, {"body": "would make sense backward compartibility reasons support implementations sync async sync adding api recommendation using second one documentation", "d": "7/2016"}, {"body": "two implementations different semantics makes problem worse though plugin writer nt know one going get also need document whole situation explain could either sync async point choice plugin helps users assume async code works either way", "d": "7/2016"}, {"body": "dmethvin actually nt understand helps plugin developers anyway want document bahavior okay developer means ca nt use window load plugin anymore chance user wrap ready state high developer prevent situation whenever window load needed wanted plugin telling users use ready state maybe cause problems imo ca nt tell every user use ready load split versions jquery actually dead ca nt implement use anymore behavior reverted projects back ignore plugins evaluate options first see change think remove event", "d": "7/2016"}, {"body": "eisbehr timmywil described one way described second way popular plugins ca nt fixed one authors discuss solutions us", "d": "7/2016"}, {"body": "solution plugins descripes problem plugin ca nt break behavior user wrote ready state around initialization like solution would write plugin solve problem user put ready state around right window load triggered everything js plugin fnfoo function window load function possible never reached readythen function user function bar foo", "d": "7/2016"}, {"body": "plugin ca nt break behavior user wrote ready state around initialization see", "d": "7/2016"}, {"body": "scottgonzalez thanks somehow missed plugins binding load initialization happen many times within single page binding immediately tracking internally mean track internally currently idea track provide example nonplugin case nt see would bind load inside ready bind load fine without specific use cases require see reason change anything well thats point mentioned plugin developer ca nt prevent code wrapped ready state correct window load alone would work general", "d": "7/2016"}, {"body": "js function var windowloaded false window load function windowloaded true fnmyplugin function options whatever need plugin initialization without specific use cases hard say need reason plugin developer ever listening event window inside initialization plugin incorrect implementation happens work many pages common usage pattern", "d": "7/2016"}, {"body": "particular plugin jquery code lazyloaded page domcontentloaded load events fired plugin would never see load event ready code run course since event instead state think makes behavior enough antipattern nt try encourage", "d": "7/2016"}, {"body": "document antipattern", "d": "7/2016"}, {"body": "good point guess api entry", "d": "7/2016"}, {"body": "perhaps well maybe one warnings shared pages", "d": "7/2016"}, {"body": "agree timmywil", "d": "7/2016"}, {"body": "may add opinion dimensions element bounding box element two different concepts think agree change mixing two concepts way consistently getting dimensions element rather get dimensions bounding box depending whether css transformations applied acceptable breaking change width height return bounding box rather dimensions long way getting true dimensions way also css supposed give computed css properties hence name css width css height give bounding box instead breaking change messing user base huge gotcha", "d": "7/2016"}, {"body": "add another point regarding relationship note always return content width regardless value css property avoid penalty use rather documented behavior checked still valid jquery", "d": "7/2016"}, {"body": "think valid points far resolving problem conflicting concerns mention width applies height well previous use flaky property part documented standard return fractional pixels subpixel rendering becoming common finding cases got things wrong switched historically jquery users seen shorthand although definitely cases past versions true ideally like find solution breaks least code possible since changing results existing apis would great could find way migrate identify andor fix holgerjeromin getfree would like apis return let start think existing code might break", "d": "7/2016"}, {"body": "way see essential reliable way getting dimensions position element matter element ancestor csstransformed consider example jquery jquery blue box wants exactly red box since body element transformed boundingbox coordinates good general moment apply csstransformations calculation based elements dimensions going give wrong result even seemingly harmless transformations like cause problems jquery already offset position give boundingbox coordinates iirc ok jquery introducing breaking changes long way getting true element dimensions boundingbox dimensions needed given wo nt needed often could alternate way getting width height position provide fractional pixels expense useless transformations applied", "d": "7/2016"}, {"body": "ok jquery introducing breaking changes long way getting true element dimensions boundingbox dimensions needed exactly application needs way get dimension based information correct positioning complex transformed elements minimal example non fractional value disadvantage result complete bogus transforming", "d": "7/2016"}, {"body": "hmm maybe need use cases want dimensions transforms applied", "d": "7/2016"}, {"body": "let start summary documented surface area using horizontal dimension without loss generality returns computed css width property include exclude padding borders per css boxsizing property returns computed content width may less boxsizing borderbox equal boxsizing contentbox returns computed padding box width sum computed left right padding returns computed border box width sum computed left right borders equal boxsizing borderbox returns computed margin box width sum computed left right margins capable returning fractional values closely tied css box model especially since also transforms fact non methods probably convenient means getting untransformed dimensions although starting scratch might want condense together would definitely consistent naming ticket though agree holgerjeromin use values calls", "d": "7/2016"}, {"body": "also remember make use well means give wrong results transformations applied example", "d": "7/2016"}, {"body": "getfree would nt say give wrong results return element displayed position going back basics wondering main questions asked jquery browser api matter answer see related handling computedresolved value apis supposed answer question nt take transforms account transforms influencing final dimensions element screen computed value agree current behavior buggy set new value element apis answer question makes sense jquery side method serves getter setter apis respond set particular width generally get one getter btw agree current behavior getter takes transforms account buggy element displayed dimensions screen question element displayed screen include transforms hand since single property takes things account api nt setter equivalent clear exactly would setting jquery side responsibility api although getter less behaves way ignore boxsizing browser apis evolving way satisfy conditions api get displayed size element without taking transitions account asking something like kind weird time people asking question really asking value computed width displayed width minus transforms afaik browser api would answer question well treated obsolete web compatibility reason nt take transforms account well returns decimal values hope got paragraph right love someone working browser confirmdeny though bzbarsky last point problem method would fine getter final displayed size element also serves setter us undermines purpose nt make easier also methods serve getters setters fact apis setters well actually terrible need know value style write triggers style read means apis layout thrashing builtin think bad apis like want leave getters setters seems converted fulfill first two use cases suggested nt jquery api return dimensions element screen api returning position element screen new api former", "d": "7/2016"}, {"body": "tried removing width amp height hooks css saving bytes gzipped process got test failures dimensions module css module failing tests ones checking disconnected node negative values means though switching amp doable also think ca nt switch back would break jquery contract nt cut fractional values besides really like avoid going back fractional values sure anything", "d": "7/2016"}, {"body": "going back moment using retrieve api take transforms account purpose john resig wrote ago api awesome saves code complexity amp size well gives speed boost nt see us going back previous implementation would hurt much fronts still think many people want current behavior going back previous one would hurt well problem serves setter well makes nonsymmetrical api nt really know", "d": "7/2016"}, {"body": "seems like mgol explained challenges pretty well api retrieves actual transformed dimension position single number taking several css properties account ca nt used getter setter roundtrip single number consider regressions even changes existing behavior better compatibility still may play release", "d": "7/2016"}, {"body": "love someone working browser confirmdeny browsers returning used width css terms everything except nonreplaced inlines layout width ignoring transforms think calling displayed size element without taking transitions account api already exists everything except nonreplaced inlines think browser api returning computed width css terms put another way inner div browsers return whereas css computed width auto thing window relevant things like return nontransformed values might something sane nonreplaced inlines note integeronly", "d": "7/2016"}, {"body": "browsers getcomputedstyle width returning used width css terms everything except nonreplaced inlines layout width ignoring transforms think calling displayed size element without taking transitions account api already exists everything except nonreplaced inlines think actually meant bounding box element ie size box appears screen including transforms browser api returning computed width css terms put another way getcomputedstyle width inner div browsers return whereas css computed width auto meant resolved width keep using wrong name named innerwidth thing window relevant things like offsetwidth return nontransformed values might something sane nonreplaced inlines note integeronly meant offsetwidth keep mixing stuff doh post corrected basically point may either ask resolved value specific css property ask dimensions final box appears screen ie bounding box element api get bounding box minus transforms may good approximation similar api could use either get transforms included via must compute whole thing traversing document expensive", "d": "7/2016"}, {"body": "yes correct summary state browser api", "d": "7/2016"}, {"body": "consider regressions even changes existing behavior better compatibility still may play release remove getwidthorheight accurately provides css width rename refactor surface area clarify getset css contentpaddingbordermargin box dimensions therefore ignore transforms reimplement existing methods thin wrappers separately address complete land derivative refactor avoid dependence upon css widthheight hooks allowing hooks removed document reliable elements transformed ancestors document reliable elements transformed ancestors", "d": "7/2016"}, {"body": "considering impact changes moving get smaller issues first", "d": "7/2016"}, {"body": "remove getwidthorheight accurately provides css width reverting assume still consider small breaking change maybe best solution assume people depend access fractional values changing back may break sites want nt wait long imo rename refactor surface area clarify getset css contentpaddingbordermargin box dimensions therefore ignore transforms reimplement existing methods thin wrappers reiterate consider setters bad apis due layout thrashing built tried drastically simplify performance reasons among purposes started reverted problematic change many people good replacement forceshowing cascadehidden elements case apis case could ever remove setters separately address complete land derivative refactor avoid dependence upon css widthheight hooks allowing hooks removed document reliable elements transformed ancestors document reliable elements transformed ancestors sounds good", "d": "7/2016"}, {"body": "remove getwidthorheight accurately provides css width reverting assume getcomputedstyle fine like used calls reiterate consider setters bad apis due layout thrashing built tried drastically simplify performance reasons among purposes started reverted problematic change many people good replacement forceshowing cascadehidden elements case apis case could ever remove setters possible mentioned believe methods convenient means interacting css box rid setter logic would leave vacuum note layout thrashing comes play propertyboxsizing mismatches eg equivalent", "d": "7/2016"}, {"body": "mentioned one comments think switching gcs would breaking change currently guarantee css width works even detached elements", "d": "7/2016"}, {"body": "probably deprecate b disconnected nodes already fall back inline styles nt worst sins", "d": "7/2016"}, {"body": "heroic efforts get dimensions detached hidden elements retrospect mistake imo deprecating asap seems like good idea warning migrate suspect could remove", "d": "7/2016"}, {"body": "aware breaks draggables jquery ui draggables growshrink whenever move yet test", "d": "7/2016"}, {"body": "assassinbeast think one confused around years works expected good logic behind need change way think code seems like get confused basic matters", "d": "7/2016"}, {"body": "wanted see way could handle stay sync actual animation definitely nt affect deprecation wondering better way right polling selector roughly every frame could forcing style recalcs possibly layouts set nt try set position flag cleared custom call call could show element set position animation continues normally", "d": "7/2016"}, {"body": "put deprecation migrate immediately deprecation warning would triggered time jquery took path supported browsers nt", "d": "7/2016"}, {"body": "supported browsers nt raf ie amp android browser", "d": "7/2016"}, {"body": "could always uasniff ie display warning easy way view android browser console", "d": "7/2016"}, {"body": "migrate guess avoid warning would mean particular one would show android bad", "d": "7/2016"}, {"body": "ah yeah obviously way better uasniffing nt know thinking", "d": "7/2016"}, {"body": "unit test nt present bootstrap probably oversight part nt great syncing fixes", "d": "7/2016"}, {"body": "complaint sorry entry closed company forced go back jquery version offset never reliable svg elements really weak argument closing entry would appreciate old behavior could restored", "d": "7/2016"}, {"body": "miskabalu jquery nt support operations svgs exception class manipulation clearly documented contribute wo nt fix page relying similar relying private undocumented apis may change time since nt support change code might break something improving logic performance regular html dom important us trying fix something nt really support", "d": "7/2016"}, {"body": "mgol ok many thanks reply", "d": "7/2016"}, {"body": "mgol markelog correct im wrong tasks issue move jqueryisarray change usages", "d": "7/2016"}, {"body": "also third item unit tests moved jqueryisarray well also nt mentioned deprecation apart jquery pr api site issue needs jquery migrate issue polyfill api warn using micha\u0142 go\u0142\u0119biowski", "d": "7/2016"}, {"body": "mgol didnt get meant unit tests moved jqueryisarray well understand unit tests need modified jqueryisarray tests need removed right actually raising issues like every deprecation issue im working raised one issue", "d": "7/2016"}, {"body": "understand unit tests need modified jqueryisarray tests need removed right removed moved actually raising issues like every deprecation issue im working seen thanks meant apart api issue also need issue need restore api people may exclude deprecated module warning using", "d": "7/2016"}, {"body": "take", "d": "7/2016"}, {"body": "sure link reference", "d": "7/2016"}, {"body": "markelog correct im wrong x isnumeric function needs moved usage within unit tests need changed function meant used unit tests beggining", "d": "7/2016"}, {"body": "shashankanataraj think tests changed later decide remove isnumeric", "d": "7/2016"}, {"body": "timmywil think changed closing issue aim slim build able pass many tests possible exception excluded modules like go opposite direction also pattern followed past eg tests contained many tests using nt hard fix", "d": "7/2016"}, {"body": "mgol yes moved talking usage tests continue testing function removed", "d": "7/2016"}, {"body": "think keep testing used different places replaced", "d": "7/2016"}, {"body": "timmywil talking well move nt change tests testing method using introduce additional test failures testing slim version", "d": "7/2016"}, {"body": "mgol proposing replace stray uses nt directly related testing move tests directly test remove slim fine testing deprecated module", "d": "7/2016"}, {"body": "mgol way place find use isnumeric nt related testing lines", "d": "7/2016"}, {"body": "mgol proposing replace stray uses isnumeric nt directly related testing isnumeric move tests directly test isnumeric testunitdeprecated remove slim fine testing deprecated module meant well seems misunderstanding", "d": "7/2016"}, {"body": "yeah", "d": "7/2016"}, {"body": "dustinpoissant mgol submit pr", "d": "7/2016"}, {"body": "shashankanataraj sure remember move change current uses note scheduled likely want release pr may immediately merged even ready", "d": "7/2016"}, {"body": "also pr doc changes githubcomjqueryapijquerycom would also appreciated", "d": "7/2016"}, {"body": "mgol markelog thanks", "d": "7/2016"}, {"body": "mgol line breaking change vs page scrolls upgrade instructions version case missing semver breaking change ca nt create major update already one emotional trying bring little bit attention problem might topic think custom semver versioning digits something like majorcurrentmajorbreakinghotfixminorpatch", "d": "7/2016"}, {"body": "add lines custom code using jquery protected issue right", "d": "7/2016"}, {"body": "szarouski indicated milestone comments issue fixed jquery else need case missing semver breaking change ca nt create major update already one mean nt understand", "d": "7/2016"}, {"body": "mgol run jquery website see popup lie", "d": "7/2016"}, {"body": "homakov post example site checked nt work", "d": "7/2016"}, {"body": "mgol sorry nt clear projects total combine giant project use jquery fix cors backwards incompatible reverted released version problem fix line change would much easier fix comparison upgrading version wonder add lines custom code jquery library using jquery api order fix security issue versions point definitely upgrade moment bandwidth time really nt want vulnerability used library project mentioned semver jquery already taking count straight forward way semver incorporate incompatible yet important change version", "d": "7/2016"}, {"body": "szarouski ok understood yes adding lines fix issue note though vulnerability nonadvisable anyway", "d": "7/2016"}, {"body": "szarouski read know really jump hoops order consider real threat real anything case kinda situation right thing realistically nothing concern", "d": "7/2016"}, {"body": "mgol exactly nonadvisable like grabbing weather data external site supporting cors nt site hand let consider fixed", "d": "7/2016"}, {"body": "docs still mention deprecation even though issue closed specifically says update docs see jqueryapijquerycom", "d": "7/2016"}, {"body": "yeah right although nt think reopen ticket let discuss jqueryapijquerycom btw would like send us pr beat", "d": "7/2016"}, {"body": "use function allows job", "d": "7/2016"}, {"body": "think everyone development team forgotten term bloat means bloat case jquery code utilized end user several university studies based akanomi data nonprofit organizational data shows less jquery utilized enduser bin sites require library also search engines notable organizations recommending steer away thirdparty libraries designed lazy developers jquery top lists get back bonilla js fan npm majority developers leave development dependencies assets releases huge security issues however npm right track helping development flow reducing bloat dmethvin way saying node development like layers onion reason nt look bloated top level seeing outer layer pungent onion every module include npm usually include many modules true modules include dependencies module included deep onion layers dependency despite security issues npm developers impose releases development tools left easily removed problem jquery nothing library development stuck mentality honestly nt see surviving another five years conservativly speaking another issue one big module much complicated maintain release esp security patches ux cattering developers days making web apps faster secure cost effective maintainability end development importantly enduser keeping bandwidth minimum", "d": "7/2016"}, {"body": "celticparser fact publish one package nt mean compile whole jquery source broken separate small amd components load ones need future likely switch modules even easier integrate various tree shaking tools", "d": "7/2016"}, {"body": "page yellow note callout added indicating cause issues responsive layout released fixes issue wondering note updated indicate lt responsive issue unless still responsive layout issues show even least fiddle fixed switched nt testing regarding responsive layout", "d": "7/2016"}, {"body": "working wordpress site version jquery uses returns value excluding scrollbar width innerwidth outerwidth used workaround", "d": "7/2016"}]