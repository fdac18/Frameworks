[{"title": "get digits worth issues", "body": "really try hit milestone", "num": "1000", "d": "1/2014"}, {"title": "able specify types using reactproptypesoneof", "body": "see nt work see implementation unfortunate ca nt set prop bonafide number get course calls turns array numbers object number gets cast string used key store value", "num": "999", "d": "1/2014"}, {"title": "gives parse error", "body": "parse error unexpected token gt workaround applies gt lt", "num": "998", "d": "1/2014"}, {"title": "invariant violation probably means dom unexpectedly mutated eg browser", "body": "getting whole bunch errors starting finishing changing widgetssettingsloginjs line problem goes completely away problem crossbrowser steps reproduce checkout cd lostdappsrc python simplehttpserver maybe nt even need work directly opening indexhtml browser see error console change everything perfect", "num": "997", "d": "1/2014"}, {"title": "ignore whitespace container element reusing markup", "body": "moment whitespace around prerendered component inside container html wo nt reused uses return instead case example html wo nt reused html want send pull request changes look first instead", "num": "996", "d": "1/2014"}, {"title": "displayname set jsx multiple assignments", "body": "code like get generated code code like set", "num": "990", "d": "1/2014"}, {"title": "support form novalidate attribute", "body": "using attribute component gets stripped could add whitelisted attributes info attribute", "num": "988", "d": "1/2014"}, {"title": "problem jsx", "body": "ran small problem output jsx compiler uses reserved words become problem json objects example becomes fix problem put quotes around keyword", "num": "987", "d": "1/2014"}, {"title": "jsx parse error", "body": "saw jsx reactdom var hellomessage reactcreateclass render function return reactrendercomponent mountnode causes parse error removing k fixes", "num": "986", "d": "1/2014"}, {"title": "add setstatedeep", "body": "know people want", "num": "984", "d": "1/2014"}, {"title": "ensure setstate callback reactmountready always enqueues", "body": "setting state callback transaction must reconcile callbacks transaction completed effectively batching end add unit tests make sure works correctly", "num": "983", "d": "1/2014"}, {"title": "reactq bad proptype error logged render reactq", "body": "edit short summary javascript componentdidmount function var self using code react q child component uses raise error pass string object actually seems exception raised point setstate think q ignores perhaps better log error point hard find child component nt want render got error maybe react bug maybe react something help developpers loose time situation nt guard supposed log error least non minified dev version react previous content problem discussed petehunt irc today finally find strange behavior components check opensourced one wrapper handle io operation figured many cases io operation promise ends error child component updated see render method parentwrapper component called seems nt trigger anything child component error console finally found related bad prop type setting child component cases error passed parent component object string tried change object passed child last version works fine first version nt work kind expected pass string child requires object problem nt got error lost half day trying figure problem see error set state q promise error handler see may related using q promises react actually use following code parent got expected result error jumperrorstringpersoncontactonprofileobject", "num": "978", "d": "1/2014"}, {"title": "jsx transformation tool incorrectly process path parameters windows machines", "body": "moment following function js function absolutepath workingdir pathtojoin pathtojoin workingdir pathnormalize workingdir pathtojoin pathnormalize pathtojoin commonerjs nt procees absolute path arguments since expects unix style", "num": "977", "d": "1/2014"}, {"title": "make docs site responsive", "body": "first second good tools like dash display documentation smaller window", "num": "976", "d": "1/2014"}, {"title": "transaction methodinvocationtime includes initialize time close time", "body": "seems weirdly asymmetric intended", "num": "974", "d": "1/2014"}, {"title": "jsxtransformer used rjs optimizer ca nt load sourcemapgenerator", "body": "tricky issue best explain using jsxrequirejsplugin build react app using amd using custom branch react custom builds based master recently everything working fine since unable create optimized builds using plugin first assumed issue plugin seems offending line changed function js function transformreact source return transform visitorsreact source sourcemap true exportstransform transformreact change nt forced things worked fine change longer possible build amd environment line errors js running requirejs dist requirejs task tracing dependencies jslibrequirejsrequire error typeerror undefined function objectarrayset eval eval eval objectsourcemapsourcemapconsumer eval usersthomasboytvenmodevopsvenmowebviewsbasenodemodulesgruntcontribrequirejsnodemodulesrequire eval eval transform eval objecttransformreact transform eval usersthomasboytvenmodevopsvenmowebviewsbasenodemodulesgruntcontribrequirejsnodemodulesrequirejs jsxloadonload eval lt anonymous objecttextfinishload eval best guess arrayset module nt correctly loaded although included built file nt know enough browserify debug hoping someone else take look find going meantime suppose update branch undo change set", "num": "972", "d": "1/2014"}, {"title": "better docs integrating jquery et al", "body": "apparently docs nt clear need section docs talks integrate third party plugins detail stress difference mounting updating", "num": "971", "d": "1/2014"}, {"title": "clarify lifecycle rendercomponent vs rendercomponenttostring", "body": "discussed irc lifecycle functions misleading using namely called least documented lifecycle docs page also discussion changing method names note clearly need hooks issue name former conveys component mount fact wo nt one possibility add another alwaysrun phase mounting phase run rendered string dom eg prepare initialize lifecycle would easily explained follows prepare compoent mount component rendering dom render component first time happy contribute pr either docs method names decision reached", "num": "968", "d": "1/2014"}, {"title": "disable weird codemirror indentation behavior", "body": "since codemirror nt understand jsx properly editors website behave strangely indentation sometime like create fullblown jsx mode think disable smart indentation behavior think want turn", "num": "966", "d": "1/2014"}, {"title": "compatible version found esprima", "body": "yields following empty repository npm err notarget compatible version found esprima substackesprima iskeyword npm err notarget valid install targets npm err notarget", "num": "965", "d": "1/2014"}, {"title": "boolean element attributes disabled checked etc jsx", "body": "conditionally putting attribute elements boolean variable falsey attribute wo nt output true output following works browsers spec could get line spec setting element requires ternary operation instead simple boolean ideally current bit jsx top issue would output html assuming set true generally known boolean attribute gets assigned variable set example jsx output attribute per spec", "num": "961", "d": "1/2014"}, {"title": "jsx watch crash", "body": "run jsx watch src build compiles jsx files create lockpid file build directory next jsx file modification jsx process crashes lockpid present jsx wo nt compile jsx files even ran manually use osx maverick jsx", "num": "957", "d": "1/2014"}, {"title": "batching external events", "body": "react batches component updates become dirty eventcallback events also batched however exposed use external events ajaxreplies nonreact dom events events seems natural extend see two obvious solutions export settimeout function reactbatchedupdates function bind settimeout reactbatchedupdatesbind null function bind export callback factory thoughts guessing belongs", "num": "956", "d": "1/2014"}, {"title": "cursor jumps end controlled input", "body": "input element controlled model cursor jump end line every change makes impossible edit text end input quick demo noted using external model using view state maybe something wrong usage suggested fix maybe input overridden unless value differs otherwise cursor position manually preserved also see entry documents ability grab preserve cursor position", "num": "955", "d": "1/2014"}, {"title": "rendercomponenttostring events leaks unless component unmounted", "body": "repeated calls rendercomponenttostring evented components ie onclick thishandleclick effectively leak memory call unmountcomponent rendered components lest event listening closures remain nongarbage collected long lived processes repeated render calls notice adding componentunmountcomponent would fix would break tests render react root document nodes invariant violation var link reactcreateclass leak function event render function return function log str consolelog str var root reactrendercomponenttostring root log rootunmountcomponent rendercomponenttostring api bound async sample future proof", "num": "954", "d": "1/2014"}, {"title": "docs schema component lifecycle", "body": "hello guys would awesome lifecycle doc page simple schema outline order methods", "num": "951", "d": "1/2014"}, {"title": "stabilized public api", "body": "one things holding us back right nt stable public api really like cut instagram npm version react unfortunately nt include addons need issue like propose following changes consistent iterable gets wrapped new object basically thin wrapper around means people actually introspect without assuming array nested object something nt think memory utilization big problem today think change would ok especially implemented lazily know dnolen wants something like plug lazy child data structure think important solve another option thinking putting begs question adding well think api would become confusing think function helpful hard use externally right adding public api makes sense anyone think potential overuse public apis think centralize injection points react module make public reason need check repo configure custom react rename npm module many addons need stuff like foreseeable future let embrace rename noncore projects nt depend put addon npm module everything add new npm package export injected new public apis use package builds put cache front good citizens way people build without us provide million builds config tool", "num": "946", "d": "1/2014"}, {"title": "unit testing react backbone without phantomjs", "body": "closely related entirely curious one go around testing browserified backbone react apps appears react nt play well phantomjs looking alternatives jsdom next list looking suggestions properly handle issue arises using loading app html template actually testing dom ca nt things load packages global scope ideas theorems suggestions approach unit testing without phantomjs", "num": "945", "d": "1/2014"}, {"title": "jsx sugar object props", "body": "hopefully get jsx namespacing soon accessing components inside objects technically one thing jsx vanilla js using object props jsx beautiful love would much rather whatever syntax prefer clear specifically talking supporting object additional properties still sugar feature jsx capable enough everything js still looking familiar readable js counterpart mentioned could take upon implement relatively simple change", "num": "944", "d": "1/2014"}, {"title": "replacing mountindex etc something less fragile", "body": "jordwalke talked briefly back recall correctly working bit right information progress eta done iframefix pr gotten lot familiar backside might perhaps take stab otherwise", "num": "942", "d": "1/2014"}, {"title": "better error message returning two elements", "body": "since quite new react tried render function return something like safari got message error parse error line unexpected identifier took quite found second div element problem possible error message mentioned second element unexpected identifier confusing", "num": "935", "d": "1/2014"}, {"title": "warn using hyphenated style values", "body": "happen support hyphenated keys style object initial render attempt hyphenate camelcased keys styles never updated subsequent renders never attempt unhyphenate warn see hyphenated style", "num": "932", "d": "1/2014"}, {"title": "investigate whether style setting optimized", "body": "see profile setvalueforstyles takes time", "num": "929", "d": "1/2014"}, {"title": "nt run browser perf testing noncode changes", "body": "things like nt run full suite would great could figure make happen cc balpert subtlegradient", "num": "927", "d": "1/2014"}, {"title": "textcontent vs innertext", "body": "fix merged reverted svg text changed chrome example issue internal tests relying behavior wo nt work firefox fixed case innertext seems return visible text little experimentation shows may invent formatting stacked divs headings may affect markup testing example", "num": "923", "d": "1/2014"}, {"title": "cryptic error xjs tag name empty typo", "body": "hello really bug could better clearer error message jsx compilation fails took hour find problem code error message nt really help found forgot add would easier find error mentioned problem attribute", "num": "917", "d": "1/2014"}, {"title": "latest build cause front page todo error", "body": "cloned clean copy react built docs front page todo example behaves weirdly todo created todo followed empty one probably submit triggered twice", "num": "916", "d": "1/2014"}, {"title": "something comment section bottom docs", "body": "comment sections exist rather people come irc questions often neglected bottom doc page", "num": "915", "d": "1/2014"}, {"title": "jsx gives incorrect error component missing tag closing", "body": "way much time found getting jsx error like error parse error line unexpected token pointing line last line file error actually caused component created without closing slash tag recreated creating file foojs contents run jsx file", "num": "911", "d": "1/2014"}, {"title": "mobile browser support docs", "body": "currently mentioned legacy browser experience docs warn suggest shimming ios android versions might quite many mobile mobile users lumias pointertouch events etc wo nt work yet example missing safari old ipads etc usually include even old mobile browsers", "num": "909", "d": "1/2014"}, {"title": "allowfullpagerender option working", "body": "trying mount element onto code trying run browser using browserify javascript jsx reactdom use strict var react require react reactallowfullpagerender true var app require documentaddeventlistener domcontentloaded function reactrendercomponent document fiddle result option nt seem working getting error getting option set", "num": "908", "d": "1/2014"}, {"title": "add public api reactupdatesbatchedupdates", "body": "ember similar emberrun perhaps something mirror also helpers like emberrunlater replacement settimeout better batching", "num": "906", "d": "1/2014"}, {"title": "make uncontrolled inputs user friendly", "body": "simple enough bit verbose nothing wrong also supported least meaning uncontrolled fun work use top becomes even worse seizes useful nice arrays react longer work considering little actual code perhaps idea consider etc helpers inputs would make reasonable common usecases lot less lowlevel work cost bytes", "num": "905", "d": "1/2014"}, {"title": "strange npm install behavior", "body": "react version fails reacttools version works react version complains incompatible esprima version", "num": "904", "d": "1/2014"}, {"title": "fix tutorial exact js translation example code", "body": "someone confused might well fix tutorial precise", "num": "903", "d": "1/2014"}, {"title": "able checkin js microsoft tfs", "body": "please consider renaming file js possible checkin file microsoft team foundation server thanks max", "num": "900", "d": "1/2014"}, {"title": "outdated uncontrolled components documentation", "body": "page uncontrolled components likewise supports defaultchecked supports defaultselected likewise supports defaultchecked supports defaultvalue", "num": "899", "d": "1/2014"}, {"title": "jsx support jsbin", "body": "nt strictly react issue would nice add jsx support jsbin small amount code coffeescript support nt hard make pr jsx", "num": "898", "d": "1/2014"}, {"title": "jsx whitespace properties lost", "body": "looks like current position moving incorrectly jeffmo syranide know something getting fixed whitespace pr separate problem becomes", "num": "896", "d": "1/2014"}, {"title": "release react", "body": "horizon things want make sure nt get forgotten x updated esprimajstransform", "num": "894", "d": "1/2014"}, {"title": "use node node instead defining constants", "body": "think safe cross browser point make sure nt ever running code path server side nt think worry js anodenodetype nodeelementnode instead var elementnodetype anodenodetype elementnodetype", "num": "893", "d": "1/2014"}, {"title": "consider renaming reactjs reactdebugjs", "body": "seen issues logging messages addition changing message however ends revived think might want make clear nt simply minified version build actually improved debugging sure would mean new reactjs unminified prod build thoughts", "num": "890", "d": "1/2014"}, {"title": "feature test startup instead", "body": "could instance simplified code even many tests done startup effect immeasureable comparison even manage create elements second seems like could simplify code slightly like since still use safe use environments right use strict var executionenvironment require executionenvironment gets key used access text content dom node executionenvironmentcanusedom moduleexports innertext documentcreateelement div innertext textcontent", "num": "886", "d": "1/2014"}, {"title": "problem returning", "body": "right accepted return mixin also defines one two returns merge throws error trying merge object correct behavior cpojer", "num": "883", "d": "1/2014"}, {"title": "ship", "body": "things fixed safe put mostly related wish better tool commits consider think let collect commitsprs want take", "num": "882", "d": "1/2014"}, {"title": "transferpropsto shall", "body": "let make issue hopefully get progress issue day imaginary component thin wrapper using defines custom event however may soon real dom property react breaks component property still transfered current implementation really called something like applies special transforms certain dom attributes would also benefit able exclude properties transfer properties component consumes seems basically categorize dom properties three categories css events supported misc everything else etc perhaps ca nt really formulate usecases right seems like would often want css events css even everything else component takes care personally feel like would interesting react exported helpers transfer strategies could easily properties like works like perhaps nt useful practice though guess events could also benefit transfer strategy component could listen also allowing parent listen", "num": "875", "d": "1/2014"}, {"title": "pass component argument reactrendercomponent callback", "body": "callback method pass rendered component callback useful want call component method completely mounted like", "num": "872", "d": "1/2014"}, {"title": "ghpages docs switch jsx js", "body": "would possible button website examples compiles switches jsx js example happy using straight js likely adopt one new thing experiment two probably others boat", "num": "869", "d": "1/2014"}, {"title": "make cssproperty closurecompiler advanced compatible", "body": "looking recently tickled spidey senses closure compatibility thought module would need style object keys quotes dump keys still jordwalke piranha either know module currently problem still misunderstanding needed closure advanced mode", "num": "867", "d": "1/2014"}, {"title": "proptypes weak confusing undocumented", "body": "clear right", "num": "863", "d": "1/2014"}, {"title": "reactrendercomponenttostring failing case component children function", "body": "javascript var hello reactcreateclass componentdidmount function render function return thispropschildren reactrendercomponenttostring hello null function return reactdomdiv null hello function consolelog results", "num": "860", "d": "1/2014"}, {"title": "iframe reinitialise moving within group components", "body": "moving component iframe within group components reinitialises iframe iframe reinitialises moving moving upward seems work fine example", "num": "858", "d": "1/2014"}, {"title": "run tests built files exist src", "body": "right run tests find includes tests still sitting around previous builds nt currently exist cc subtlegradient spicyj", "num": "856", "d": "1/2014"}, {"title": "empty element handled correctly dangerouslysetinnerhtml", "body": "react version become dom normal text red following example", "num": "854", "d": "1/2014"}, {"title": "transition problem code", "body": "may right place try code leave transition always applied last word even click remove word may try believe problem introduced copied code react page", "num": "853", "d": "1/2014"}, {"title": "benchmark clean mountimage strings", "body": "currently cleaning strings mountimage component gets mounted memory could freed act freeing memory could expensive worth needs proper benchmarks workaround", "num": "851", "d": "1/2014"}, {"title": "support multiple child insertion points", "body": "briefly spoke petehunt tracking issue times multiple insertion points would useful old web components spec looking attribute sure current plans pete said could done passing children props feels like hack riffing old spec idea something vaguely like html select thispropschildren title thispropschildren string css selector matching elements removed avoid duplicate insertion", "num": "848", "d": "1/2014"}, {"title": "transitiongroup leave animation nt get nonactive style", "body": "think come across bug transitiongroup basically causes properties leave styles ignored fiddle demonstrating problem see leave animation nt use correct origin transition latest chrome ff properties moved alwaysmatching selector bluebox works fine guess would happen active leave class added tick leave", "num": "847", "d": "1/2014"}, {"title": "expose reactcompositecomponentbase via reactinternals", "body": "objects created functions returned constructor nt exposed endusers adding would enable check anyone needs use case creating version creationixdombuilder uses functions instead need detect objects left asis react deal", "num": "843", "d": "1/2014"}, {"title": "add reactproptypesany", "body": "allow value passed prop valid proptype would allow enforce something passed whatever may also supports documenting possible props component even prop may anything explicitly listed useful documentation", "num": "842", "d": "1/2014"}, {"title": "link jsx depth component specs lifecycle page wrong", "body": "link jsx depth displayname section component specs lifecycle page points url correct correct url", "num": "841", "d": "1/2014"}, {"title": "allow rendering document fragment", "body": "shadow roots nodetype documentfragmentnode trying render one react throws error explicit check allow rendering elementnodetype docnodetype particular reason document fragments excluded", "num": "840", "d": "1/2014"}, {"title": "warning", "body": "using standard way set value component yet react uses another convention add warning value set tell developer put dev example", "num": "839", "d": "1/2014"}, {"title": "htmljsx fix caseinsensitive attributes style names", "body": "solution known attributes like maxlength camelcased maxlength whatever defaultdompropertyconfig might good idea throw warningerror unknown properties nt get discarded without knowing styles lowercased processing example transpiles transpiles generates", "num": "838", "d": "1/2014"}, {"title": "detect vendor prefixes css numeric value detection", "body": "add support need support vendor prefixes well right hard code list properties check object see allow numeric value unchanged need support checking vendor prefixed values think change lookups still hardcode values include possible prefixes instead add method checks object falls back stripping prefix think find prefix checking think call method", "num": "837", "d": "1/2014"}, {"title": "support flex css property better", "body": "firs unitless seen hack value specified make pass check skip adding px actually shorthand property support expansion right properties", "num": "836", "d": "1/2014"}, {"title": "running single specsuite webdriver tests", "body": "jasmine select single specs run using url parameter like note compares beginning string spec file path important later substring nt work debugging remotely browsers would help whole test suite takes quite time run lot logging go perhaps one could forward spec param testindexhtml even better allow substrings forwarding param grunt similarly debug conditionally checking param missing use default specfilter param filter manually returning prevent skipped specs logged posted back server one filter around example cc subtlegradient", "num": "835", "d": "1/2014"}, {"title": "make possible rendercomponenttostring without extra attributes", "body": "wanted talked generating static sites reactpage come let make possible accept options generate need cascade html generation", "num": "834", "d": "1/2014"}, {"title": "change binjsx default file extension jsx", "body": "currently binjsx defaults looking files contain jsx content compile whilst possible override using think since jsx content valid javascript using extension default nt ideal could change look files instead another advantage generated files live directory source simplifies generation source maps files well path trivially relative generated example given running would result", "num": "832", "d": "1/2014"}, {"title": "add warning making controlled components without onchange handler", "body": "", "num": "825", "d": "1/2014"}, {"title": "closure compiler advanced mode externs", "body": "este already integrated react closurecentric framework externs react steida already created made missing exports might good add mentions docs could also possible make script automatically generate externs react", "num": "824", "d": "1/2014"}, {"title": "better error message invalid argument setstate", "body": "passing function properties simply wrong thing yields rather cryptic especially since message says caller fault", "num": "820", "d": "1/2014"}, {"title": "use reactjsorg domain site", "body": "currently use site redirects nt use reactjsorg site instead means example would instead think looks professional githubio domain github handles redirects old urls new ones see details", "num": "817", "d": "1/2014"}, {"title": "fails parse", "body": "js jsx reactdom var hello reactcreateclass render function return reactrendercomponent documentbody replace parse error happens going", "num": "816", "d": "1/2014"}, {"title": "wishlist integrated stateful routing", "body": "idea please let know good routes singlepage app basically represent state props depending perspective noone state better react makes think react awesome route management taken stab making singlepage app react using backbonerouter routing nt terrible nt amazing either router event handlers called setstate translating routeparams state adhoc ideally could onetoone mapping gt page personarchive params person joan date new date back could call would right thing abstract urls away developers never care read props state route render appropriately super offbase better way stateconscious routing would love put together proof concept idea sounds appealing", "num": "815", "d": "1/2014"}, {"title": "server rendering slower npm react", "body": "ran benchmarks server modifying use jsdom results surprising browserified faster npm version even performance ranking test run time lt lt lt suspect regular js object perhaps getter thus carries penalty test everywhere also minified version might still perform best least time ago used function source length including comments heuristic function complexity compilation time thus affecting chances optimization cases effect might negligible", "num": "812", "d": "1/2014"}, {"title": "onscrolldetail undefined time", "body": "got synthetic plnkr basically illustrates event onscroll handler always undefined value detail property chrome version fedora case nt work browser get idea something meaningful doc wrong please correct", "num": "810", "d": "1/2014"}, {"title": "changing text element content svg nt work properly", "body": "jsfiddle demonstrates clicking click button update svg element content add letters instead nothing however state confirmed changing since elements page updating properly note put text attribute element attribute update something element content", "num": "807", "d": "1/2014"}, {"title": "include indexhtml tutorial starter kit", "body": "might make sense include files maybe static json hat tip locks idea", "num": "800", "d": "1/2014"}, {"title": "onmouseover onmouseout events element work", "body": "example nt tested svg elements may", "num": "798", "d": "1/2014"}, {"title": "make reactmarkupchecksumcanreusemarkup injectable save bytes", "body": "original description petehunt right even nt using server rendering paying price bytes wire instead make injectable", "num": "796", "d": "1/2014"}, {"title": "document displayname", "body": "could nt find reference fact jsx transform attaches component spec would nice document somewhere importantly using jsx means debugging messages littered found using hyper", "num": "793", "d": "1/2014"}, {"title": "link react devtools official docs", "body": "nt know right place link maybe getting started tutorial tooling integration", "num": "791", "d": "1/2014"}, {"title": "related target probably wrong nested container hierarchies", "body": "made events properly fire container elements events relatedtarget still pointing leaf node believe need parallel calls target relatedtarget thread various extractevents functions", "num": "790", "d": "1/2014"}, {"title": "enterleave event targets probably wrong rendering iframe", "body": "cases set enterleaveeventplugin probably want", "num": "788", "d": "1/2014"}, {"title": "onmouseenter targetrelatedtarget incorrect", "body": "seems like properties synthetic mouseenter event reversed target element entered familiar enough code know supposed work seems like wrapped native event mouseout event properties never swapped account fact reduced test case", "num": "785", "d": "1/2014"}, {"title": "example using react", "body": "sure right place ask examples using react render visualization created seems like react virtual dom could really speed animations transitions used visualizations like force directed graph draws svg long react manipulate svg like dom work right still react newb looking suggestions get started", "num": "782", "d": "1/2014"}, {"title": "memory leak unmounting component containing user components", "body": "unmounting components like javascript id someuserdefinedcomponent render function return memory leak happens reactmountgetid node puts dom nodes back nodecache right purged cache fix leak need readonly getid happing unmounting example component label component gets purged nodecache reactdominput component going unmount calls method contains thisgetdomnode iterates children form element calling getid puts elements back cache first purged put back cache causing memory leak playing react day sure way correctly fix issue", "num": "781", "d": "1/2014"}, {"body": "nm fixed", "d": "1/2014"}, {"body": "lol", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "grats bro", "d": "1/2014"}, {"body": "wow nevermind", "d": "1/2014"}, {"body": "probably fixed esprima change see also cc spicyj", "d": "1/2014"}, {"body": "one actually different", "d": "1/2014"}, {"body": "problem browsers like aw helllllll change dom mutation happens react done thing completely true straight html new problem nt try move elements html see simple styles top several ways happen another example nested tags example problem htmlcss fact looks like dom gets super crazy adds entirely new shit since react nt anything wrong going close use wrap fine thanks detailed report though", "d": "1/2014"}, {"body": "hopefully explicit warning soon", "d": "1/2014"}, {"body": "thanks great explanation super fast response", "d": "1/2014"}, {"body": "inclination would ignore text nodes comprised solely whitespace", "d": "1/2014"}, {"body": "true work", "d": "1/2014"}, {"body": "fixed master whitespace pr took care spaces appearing literally everywhere", "d": "1/2014"}, {"body": "sweet looking forward next release grinning", "d": "1/2014"}, {"body": "syranide thought pr modified jsx adopting serverrendered markup", "d": "1/2014"}, {"body": "spicyj yes jsx seemed like whitespace arbitrarily introduced jsx issue perhaps mistaken proofreading may case actually sure rowno means", "d": "1/2014"}, {"body": "maybe clearer markup wo nt reused html markup html element output generated using react render entire page dynamic parts problem occurs combining react output serverside templates", "d": "1/2014"}, {"body": "rowno aha yeah mistake fixed master", "d": "1/2014"}, {"body": "fixed master", "d": "1/2014"}, {"body": "use instead source", "d": "1/2014"}, {"body": "still allow since nondom components etc completely sure stringifying keys add mode cc jeffmo", "d": "1/2014"}, {"body": "ideally would nt anything jsx since jsx promises top head sure things would need change make compat seem reasonable transform shims particular since issue seems pop often", "d": "1/2014"}, {"body": "fixed waiting transform sync bump esprima version bring", "d": "1/2014"}, {"body": "guess question whether something react though would support working immutable mutable structures react currently explicitly designed work well seems", "d": "1/2014"}, {"body": "think ship helper utilities nonmutative mutative merges respectively merging deep usually requires caller specify handle arrays usually clear one reason nt used deep merging much usually accomplished several shallow merges var newobj mergedeep oldobj something deep hi var newobj merge oldobj something merge oldobjsomething deep hi though know much uglier like deep merge nt received feedback implementations worked hard judge decent sure nt right thing edge cases somewhere seen really great implementations allow resolving arrays arbitrarily", "d": "1/2014"}, {"body": "also tried code javascript componentdidmount function var self seems setstate method triggers rendering synchronously maybe q ignoring errors happen error handler something like nt setstate rendering supposed queued something nt really expect nt guard supposed catch error log", "d": "1/2014"}, {"body": "seems problem commoner js", "d": "1/2014"}, {"body": "mention reconciliation page understand element removedadded vs updated", "d": "1/2014"}, {"body": "fwiw roughly code causing problem think mistaken theory would called whenever node rendered instead rendered list like setstate even though first element changed significant way nt called maybe never really figured going decided never conditionally construct elements want tweak rendering also eventually found bootstrap example repository nt linked anywhere addition modal example example like tooltip would nice tooltips nt element kind annotation existing element", "d": "1/2014"}, {"body": "hey ianb think tooltip component nt change behavior underlying dom manipulated happens instead", "d": "1/2014"}, {"body": "version node npm", "d": "1/2014"}, {"body": "\u03bb node version \u03bb npm version", "d": "1/2014"}, {"body": "interesting branch definitely exists substack repo much us point except switch using envifynext already trunk", "d": "1/2014"}, {"body": "agree go disabled disabled disabled former xhtmlcompatible may desirable want take crack pr", "d": "1/2014"}, {"body": "sure take look next days personally rather emit bare attributes xhtml compatibility could good say sort configuration option control", "d": "1/2014"}, {"body": "bare attributes although nt think configurations bit granular imo", "d": "1/2014"}, {"body": "nt see configurable emit bare attributes use fallback browser nt spec edit hmm actually supports bare attributes well actually supporting browsers nt go ahead make behavior think worth considering adding bare attributes jsx well edit oh wow already idea", "d": "1/2014"}, {"body": "syranide bare attributes standard way things xhtml came along told everyone supported everywhere except xhtml documents course", "d": "1/2014"}, {"body": "spicyj cool easy safe change right", "d": "1/2014"}, {"body": "think", "d": "1/2014"}, {"body": "cc yungsters vaguely remember reason bare attributes work cool", "d": "1/2014"}, {"body": "think good idea reason nt already done probably due oversight update also make sense attributes configured", "d": "1/2014"}, {"body": "yungsters probably need validate properties really meant bare", "d": "1/2014"}, {"body": "yeah find valueless may need configuration", "d": "1/2014"}, {"body": "afaik bug whatever jsx relies expose feature make sure close watch instance instead closing terminalpowering fine", "d": "1/2014"}, {"body": "work remove lockpid file", "d": "1/2014"}, {"body": "benjamn yes oh wait crashing", "d": "1/2014"}, {"body": "seems like two ways fixing either figure code cleaning file process exits remove functionality hope people nt accidentally multiple processes targeting output directory pretty comfortable option honestly thoughts zpao spicyj petehunt syranide mtgred", "d": "1/2014"}, {"body": "benjamn yeah lock seems fine could warn found perhaps another thing mention happening using react linux vm accessing filesystem samba saving file immediately triggers recompile file finished saving causing error shortly recompiles harm worth noting", "d": "1/2014"}, {"body": "fine locking nt even know existed works", "d": "1/2014"}, {"body": "see also", "d": "1/2014"}, {"body": "thanks plievone duplicate closing", "d": "1/2014"}, {"body": "problem rerendering new value react rerender new input value know revert value revert old value gets new value ms changing larger number like make much apparent following code work normal way making reusable component pass callback ask parent component rerender", "d": "1/2014"}, {"body": "ah thanks help big fan passing callback going try rerender parent immediately model change events", "d": "1/2014"}, {"body": "great work", "d": "1/2014"}, {"body": "somehow prevent call effects guess nt use case one first renders string browser inserts markup manually expecting events work btw perhaps day could actual top level listeners different consistent terminology would help reading codebase", "d": "1/2014"}, {"body": "given use case rendercomponenttostring register listeners created failing test case fix test coverage fix exposed changes calls longer register event listeners thus wo nt leak memory", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "negative case test case closed pull request may still useful", "d": "1/2014"}, {"body": "tested memory leak using node webkit agent heap inspection git head closure leaks due event registration longer occur since", "d": "1/2014"}, {"body": "glennmurraybse thanks would love find way automate workflow using put ci", "d": "1/2014"}, {"body": "current workflow involves gui chrome dev tools would difficult codify programatic heap dumpers node eg none could find automate comparisons heap snapshots either modules would probably provide good place start", "d": "1/2014"}, {"body": "cool take look experimenting automated tooling around kind stuff anyone comes ideas sure let know", "d": "1/2014"}, {"body": "oh nt see page working browser also contains structured evented info lifecycle maybe also links pages", "d": "1/2014"}, {"body": "rationale behind addon needing npm package right things like ca nt create addon directory react package worried treeshaking noncommonjs builds", "d": "1/2014"}, {"body": "brainkim nt need react could see us putting standalone npmbowerwhatever module real association react", "d": "1/2014"}, {"body": "brainkim wo nt package unless somewhere either unable get addons force users include addons sucks", "d": "1/2014"}, {"body": "zpao petehunt hm think understand coming instance ten line function npm module replete semver number readme seems bit excessive feel lem look bit wzrdin see solutions", "d": "1/2014"}, {"body": "say npm shipping line function module", "d": "1/2014"}, {"body": "know go love guys fullon adopting commonjs", "d": "1/2014"}, {"body": "petehunt sounds like limitation wzrdin think one request fix zpao wish npm ability host single js file package inline metadata like author", "d": "1/2014"}, {"body": "wow jsx need get room way think jsx essentially named arguments give us static way reason arguments however also see jsx object initializer much function call could desugar descriptions call rather execution none really incompatible idea providing context different ways think curiosity kind patterns using make syntax common common one building props externally pass component although common mutate props statements following instantiation another passing props one component another unchanged merging one issues", "d": "1/2014"}, {"body": "sebmarkbage haha perspective simply nt conscious decision whether use prefer use jsx js nt agree jsx nt something js nt usecases still mostly experimenting personally obvious ones conditionally complex cases decide arguments many arguments able keep logic jsx makes sense assigning lot variables individually may pretty also talked vjeux seems rely bit internally sending objects asis thus occassionally revert js surely works nothing wrong find odd want use jsx cases sugar anyway different philosophydirection jsx obviously going argue understand try push ityou far spontaneous sidetrack personally really want choose jsx js looks feels like html readable js closing tags reasons concern function call children properties way write properties really nt care much jsx opinion lost flexibility js offers saying something could see adopting follow style instead retain full range js functionality enough visual familiarity prefer without hiding truth going even opposed something think least", "d": "1/2014"}, {"body": "sorry tried paste inn plain jsx code code seems lost include screen shot", "d": "1/2014"}, {"body": "jkleiser occurs jsx happily parses tags replaces two separate function calls javascript evaluates get error solvable requires changes personally nt feel like worth effort right", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "browsers support assigning hyphenated keys probably", "d": "1/2014"}, {"body": "afaik webkit guess association blink", "d": "1/2014"}, {"body": "perhaps relevant sure screwed something running first snippet boxes nt seem appear three", "d": "1/2014"}, {"body": "would also look using var stylenames objectkeys styles var l stylenameslength lt l var stylename stylenames instead var stylename styles styleshasownproperty stylename continue", "d": "1/2014"}, {"body": "replacing nt give noticeable bump benchmark possibly hard tell hard believe much", "d": "1/2014"}, {"body": "nt tests look docs right sure travis mechanism running different things depending diff looks like run independent", "d": "1/2014"}, {"body": "reverted broke internal use weird way really changed use need figure solution problems first assume", "d": "1/2014"}, {"body": "thanks opening issue useful get confusing error messages examples cc jeffmo", "d": "1/2014"}, {"body": "slorber paste code still get error seem get unexpected token app better though obviously great", "d": "1/2014"}, {"body": "spicyj yes error parse error line unexpected token xxxxx better identify string xxxxx actual problem thanks", "d": "1/2014"}, {"body": "okay getting unexpected token message using jsx binary machine changed error esprima say unexpected string close", "d": "1/2014"}, {"body": "good find bisect gives modern browsers handling submit events twice form send pr", "d": "1/2014"}, {"body": "shutting comments", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "problem html element", "d": "1/2014"}, {"body": "anru elaborate mean", "d": "1/2014"}, {"body": "recommended use always include browsers hasty downloaders may obvious may good point yes", "d": "1/2014"}, {"body": "think would great expand docs might even make sense make whole page detailing browser support", "d": "1/2014"}, {"body": "zpao least bunch downloadpage would naturally look information least ie things need make work", "d": "1/2014"}, {"body": "works fine", "d": "1/2014"}, {"body": "yep seem quite happy crash lot", "d": "1/2014"}, {"body": "pretty sure use reactpage looks like well analogy mount inside use mounts inside body top unless sort quirk familiar makes sense mount want replace use fiddle look html element notice nt trying render whole thing serverside hook client side trouble issue think since nt actually replace use checksum different react gives differing checksum warning", "d": "1/2014"}, {"body": "actually think stopped supporting rendering document recently cc petehunt", "d": "1/2014"}, {"body": "indeed unless original markup generated react unchanged see", "d": "1/2014"}, {"body": "spicyj hmm explains fiddle working code markup generated react server end unchanged try render checksum maybe open separate issue nt end world since render sure would great able use react seamlessly across app", "d": "1/2014"}, {"body": "long passing exact props server client render methods read thisprops thisstate example nt include current time getinitialstate reads thisprops anything checksums always match find case nt true please file issue", "d": "1/2014"}, {"body": "oh look totally missed", "d": "1/2014"}, {"body": "case also best practice higher level components getvalue benefit since purely reflective setvalue focus much problematic since state controlled multiple callers diverge controlled funnel one major benefits react opt simpler syntax controlled inputs", "d": "1/2014"}, {"body": "hmm sounds lot like", "d": "1/2014"}, {"body": "believe indeed issue", "d": "1/2014"}, {"body": "crazy idea snippets would autogenerated important things needed happen nt think need would helpful pass tutorial need anytime transformer changes code earlier version transformer thus instead", "d": "1/2014"}, {"body": "thanks", "d": "1/2014"}, {"body": "use github edit docs inline send pr directly", "d": "1/2014"}, {"body": "github", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "oh nice nt know way plugin new languages tried jsfiddle one could hack make jsx workish", "d": "1/2014"}, {"body": "done", "d": "1/2014"}, {"body": "play around different amount whitespace padding well whitespace string looks like edge cases handle", "d": "1/2014"}, {"body": "zpao intentionally fixed whitespace pr including example believe intentionally addressed probably bunch nt even come across nt look think need decide actually want output try faithful source possible always generate correct minimal syntax loosely speaking", "d": "1/2014"}, {"body": "feel attributes maintain original spacing exactly line breaks small pain otherwise issue", "d": "1/2014"}, {"body": "spicyj actually mean exactly intuitively actually seems kind ok want reproduce source except specialcase also want reproduce linebreaks exactly linenumbers match think whitespace pr takes care mostly least", "d": "1/2014"}, {"body": "sorry meant text within quotes stay agree would nice happened surely common way writing jsx corresponding js hand", "d": "1/2014"}, {"body": "spicyj ah right right yes whitespace pr fixes pretty sure put inside quotes exactly ends output code", "d": "1/2014"}, {"body": "perhaps failing tests related unused immutableobject fixed release seen", "d": "1/2014"}, {"body": "approve", "d": "1/2014"}, {"body": "think mostly previously using docstutorial people used always using minified jquery think simply updating mention using unminified build would go long way making obvious download page different", "d": "1/2014"}, {"body": "would nt know use version ember names prod one might little obvious added download page looks like never got cherrypicked stable branch", "d": "1/2014"}, {"body": "bah push docs update little bit think couple things need go", "d": "1/2014"}, {"body": "diff renames invariant violation minified exception occured use nonminified dev environment full error message additional helpful warnings landed internally fyi", "d": "1/2014"}, {"body": "perhaps good reason allow", "d": "1/2014"}, {"body": "ca nt test right perhaps problem assuming use helper", "d": "1/2014"}, {"body": "spreadsheet", "d": "1/2014"}, {"body": "chance could get release trying create nice development toolchain includes source maps", "d": "1/2014"}, {"body": "formally request exposed react object commits", "d": "1/2014"}, {"body": "nt see makes situation better would nice able transfer classname onto dom component going layers composite components reacttransitionablechild would certainly use", "d": "1/2014"}, {"body": "spicyj intentionally nt provide solution excluding properties know already discussed bit internally rest general passing thoughts subject issue mainly see get rolling", "d": "1/2014"}, {"body": "nt put ton thought day find wondering could specify whitelistblacklist props", "d": "1/2014"}, {"body": "get null reference exception callback executed synchronously method", "d": "1/2014"}, {"body": "bind component like think better pass component argument", "d": "1/2014"}, {"body": "see callback executed component rendered mounted expecting", "d": "1/2014"}, {"body": "thanks looks like bug like earlier file", "d": "1/2014"}, {"body": "also noticed thought design decision passed create component creation upper code batch updates thanks guys work really enjoying writing components react", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "understand closure default lists externs names munge one css looks like everything covered except might need add quotes", "d": "1/2014"}, {"body": "oh looks like missed crushed need quotes goes even pare list even flex missing list", "d": "1/2014"}, {"body": "importantly would want weak", "d": "1/2014"}, {"body": "used validation run way nt go invariant path", "d": "1/2014"}, {"body": "jsfiddle", "d": "1/2014"}, {"body": "reduced javascript var hello reactcreateclass render function return thispropschildren reactrendercomponenttostring hello null reactdomdiv null hello function consolelog", "d": "1/2014"}, {"body": "vjeux last fiddle nt repro problem componentdidmount significant", "d": "1/2014"}, {"body": "spicyj woops right rushed comment", "d": "1/2014"}, {"body": "breaks browser master noticed breaking componentdidmount time ago nt file issue perhaps issue already", "d": "1/2014"}, {"body": "fix", "d": "1/2014"}, {"body": "petehunt fiddles seem work ok current master", "d": "1/2014"}, {"body": "fix somewhat related putlistener memory leak", "d": "1/2014"}, {"body": "ca nt see anything wrong code min inspection properly using key reconciliation work fine cc jordwalke", "d": "1/2014"}, {"body": "curious take look later", "d": "1/2014"}, {"body": "updown asymmetry may related ok iframe reset may related tried iframe content", "d": "1/2014"}, {"body": "reload whenever reattached dom might reasonable expect work consider two frames need trade places one get removed dom reattached matter hoping get away lucky rerenderings recipe fragile code", "d": "1/2014"}, {"body": "benjamn yes makes sense thinking dom operations required reorder elements reacts preference move things downward plievone pointed operation working without reinitialising", "d": "1/2014"}, {"body": "might think could call without ever removing elements dom least chrome still makes one iframes reload maybe means ca nt fix", "d": "1/2014"}, {"body": "yeah manual tests well actually appears impossible workaround dom internet searching suggests universal solution see somehow able mark component apply way root would prevent move operation nodes siblings would used reordering instead would work cases except two components changes sides however curious much issue actually today make iframe react virtually pointless conditionals parents really issue explicitly moving components iframes around", "d": "1/2014"}, {"body": "one regrettable misfeatures opinion yes makes pretty much useless situations dom manipulations abstracted control react", "d": "1/2014"}, {"body": "prevent reloading one keep separate divs somewhere safe dom manipulations movescale absolute positioning sync placeholder elements", "d": "1/2014"}, {"body": "plievone yeah way keep perfectly sync would poll every frame would cause lag nt support also issues", "d": "1/2014"}, {"body": "spicyj benjamn look react possible solve good gets ie iframe may never move side another iframe applying flag hierarchy iframes react wants move component instead shuffle siblings side instead moving node virtually zero cost component moved trying wrap head around bit seems like possible head apparently task right", "d": "1/2014"}, {"body": "reference got implementation going plievone suggested absolute positioning iframe place expected seems pretty fragile code would really need siblings set height elements get away polling position every frame", "d": "1/2014"}, {"body": "pietervanderwerff fyi proofofconcept react pr working right fixing last issues iframes work long two iframe containing components never switch sides meaning basically solve common usecases except moving say comments iframes updown list static iframes blog style pages work perfectly seems like relatively lightweight fix hopefully accept", "d": "1/2014"}, {"body": "syranide awesome look forward seeing", "d": "1/2014"}, {"body": "pietervanderwerff dare check updated pr found something way way better attributes use", "d": "1/2014"}, {"body": "would using css flexbox rearrange iframes help way nt need remove either iframe dom course would work newer browsers would something one would write top react", "d": "1/2014"}, {"body": "pixelcort probably issue specifically ancestores detached dom always happens try move way seems", "d": "1/2014"}, {"body": "occasional nt bad thing", "d": "1/2014"}, {"body": "true annoying switching branches", "d": "1/2014"}, {"body": "using dangerouslysetinnerhtml using parser xml parser lot weird rules order parse html throw backwards compatible ways jsx proper xml parser though handle code properly", "d": "1/2014"}, {"body": "convert instead many custom tag component text style use dangerouslysetinnerhtml otherwise need create many classes handle", "d": "1/2014"}, {"body": "use dangerouslysetinnerhtml react simply passes html browser untouched nt get benefit using react need use dangerouslysetinnerhtml", "d": "1/2014"}, {"body": "rendering xmltei document tag need styling simply hidden nt want create many small classes tagset huge might custom element example tei pagebreak element output directly browser style render nicely", "d": "1/2014"}, {"body": "issue nothing react", "d": "1/2014"}, {"body": "yapcheahshen yes run console see kind elements get created suggest using spans classes use jsx", "d": "1/2014"}, {"body": "plievone thanks use jsx ever possible sure use xslt convert xml document html cleaner keep xml asitis dom tree conform xml standard", "d": "1/2014"}, {"body": "thanks report definitely bug example code problem using index array key nt consistent items across passes nt remove last time instead use text item key least small demo ever items array text run different set issues see working correctly", "d": "1/2014"}, {"body": "noticed little ago sure need store child instance first place pr incoming", "d": "1/2014"}, {"body": "subtlegradient proposed following would equivalent edit prop nt needed passed prop value", "d": "1/2014"}, {"body": "react component seen function arguments props local variables state think way actually make sense pass title prop inside tag special meaning children feels like hack manipulate modify children split different groups", "d": "1/2014"}, {"body": "alright dug source today see going nt bug transitiongroup classes applied correctly bug css words fault however think highlights problem current animation approach let back little explain reason fiddle nt work incorrectly expected starting value nt match default value element addition transition specifies property animated since uses leave class added origin animated starting value words currently possible specify starting point leave animation nt match default value course could set every element uses transition clearly brittle difficult maintain one possible solution would react add idle class transition idle alternatively users could put property active classes instead think potential screw switching enter leave enter completed vise versa sure working anyway realize behavior taken nganimate maybe nt best place discuss issue hand react project much younger probably opportunity correct without worrying legacy let know", "d": "1/2014"}, {"body": "probably opportunity correct without worrying legacy collected transitiongroup issues race conditions example repaints due component tick cause flash misstyled content perhaps initial render affected via setstates instead guess would count transitiongroup go custom solution setting visiblehidden props tracking states container triggering transitions based comparing props components notifying container completion course mess many complicated interactions", "d": "1/2014"}, {"body": "reactisvalidclass reactisvalidcomponent want", "d": "1/2014"}, {"body": "would really like avoid adding anything would encourage depend basically make devtools work would like kill asap spicyj suggestion nt work nodeland could directly guarantees apis right", "d": "1/2014"}, {"body": "tips job thanks", "d": "1/2014"}, {"body": "sidequestion would interesting able specify something like call whatever want much guess existing implementations etc could extended treat etc special values could supported way also another thing consider currently quite tedious write custom validators inputs bypass logic provided react would nt perhaps reasonable something like type test could easily test say also descriptive", "d": "1/2014"}, {"body": "made work adding feels like writing code write code though conform pattern nobody would accidentally write thoughts yungsters", "d": "1/2014"}, {"body": "nt read properly okay", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "thanks fixed close", "d": "1/2014"}, {"body": "nt much experience document fragments going guess never use case tested might part falls render fragment sure either actually true though interested sounds like experience would help us figure intentional make work let know help", "d": "1/2014"}, {"body": "currently record id container enable updates component rerendered presumably want place document fragment somewhere means switch container anyway think parent updating child updates happen needs container makes use case little complicated theory could support curious use case inserting document", "d": "1/2014"}, {"body": "web app uses polymer investigating whether possible use reactjs parallel allow gradual transition polymer reactjs wanted use reactjs render shadow dom single custom element easy workaround though insert blank element shadow dom let reactjs render", "d": "1/2014"}, {"body": "regression react working react react works react throws", "d": "1/2014"}, {"body": "react bigger issues combined polymer one seems polymer wraps dom elements events wrapper polyfill deficiencies underlying browser seems throw react explicitly unwrap dom element passed reactrendercomponent event handlers nt automatically attached manually componentdidmount see", "d": "1/2014"}, {"body": "event handlers nt automatically attached manually componentdidmount note also global event listeners normally attached events propagated event handlers internally document fragments recognized global event listeners may bound directly document fragments documents even though ownerdocument lost", "d": "1/2014"}, {"body": "figured problem wrapped nodes react creates dummy node script loaded happen polymer able fully initialize dummy node browser native element later react created dom nodes dummy node elements browser native well polymer nt like load reactjs script webcomponentsready fired however fixed one problem events still nt bind properly look handler registered thanks pointer", "d": "1/2014"}, {"body": "mean", "d": "1/2014"}, {"body": "already warning fact closing one", "d": "1/2014"}, {"body": "react currently warn unknown properties think something meant use case warned expecting nt warn others potential become noisy would unacceptably fb otherwise agree make improvements htmljsx converter accuracy tool meant still beta cc", "d": "1/2014"}, {"body": "thanks work might worth utilising defaultdompropertyconfigjs htmljsxlib checks consistent react actually surprised well html jsx converter working moment seems like issues little ones easy fixes pretty amusing p", "d": "1/2014"}, {"body": "vendor prefixes like js side", "d": "1/2014"}, {"body": "truth though discovered webkit least chrome lets work nt think works gecko", "d": "1/2014"}, {"body": "nt think need anything special shorthand properties except list needed", "d": "1/2014"}, {"body": "related also obscure css properties unitless edit widow counter", "d": "1/2014"}, {"body": "also unitless properties mentioned link nt actually take single number", "d": "1/2014"}, {"body": "zpao spicyj saying great idea putting switched etc prettiest perhaps prettier access unmodified traditional css behavior want use shorthand style obvious unambiguous limited nt modify expected behavior nt conflict philosophically speaking people chat agree bad idea however seeing peoples gripes react nt vendorprefix etc etc perhaps real solution react export settable supply behavior leave outside react want autosuffix use addon bad idea well would prevent reliably sharing components currently ambiguous supports unitless thus autosuffix", "d": "1/2014"}, {"body": "lineheight px used times unitless em percentage fb codebase feel like default provide verbose way use unitless way", "d": "1/2014"}, {"body": "vjeux agree issue would explicitly break css standard", "d": "1/2014"}, {"body": "view css standard using strings say react going output say number react going able add convenience wants adding px common use case", "d": "1/2014"}, {"body": "nt conflict today probably never still also want add numeric unit think likely go forcing unit want one eg nt get converted put", "d": "1/2014"}, {"body": "zpao idea units suffix name could universal test properties simplicity whatever end property name remove add value instead way thing would need hardcode units allowed implementation would minimal barring new units future proof theoretically could conflict nt see ever could units nonwordy names case would obviously taken account already however practical issue multiple units specified property definitely see may favored way go putting like vjeux idea feel like would hair thin separation two possibly dangerous neat likely user intended", "d": "1/2014"}, {"body": "fixed discuss units separate issue needed", "d": "1/2014"}, {"body": "workaround one strip rendering string suggested forums may strip false positives docs however", "d": "1/2014"}, {"body": "plievone could easily extend safe", "d": "1/2014"}, {"body": "probably reasonable though break people current expectations like would leave files alone default benjamn", "d": "1/2014"}, {"body": "get rid docblock", "d": "1/2014"}, {"body": "really wish done beginning concern backwards compatibility maybe target next minor version bump make big deal release notes", "d": "1/2014"}, {"body": "breaking change next minor version bump still lt semverwise acceptable long well documented anyone wanted keep using switch using", "d": "1/2014"}, {"body": "sync soon", "d": "1/2014"}, {"body": "relatively easy autogenerate want take stab put script", "d": "1/2014"}, {"body": "one could add invariant strange invariants nt mention arrays objects respectively", "d": "1/2014"}, {"body": "also contextual name idea author meant agree messages could better", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "initial reasoning easy gave cred githubio site much probably need ownership change reactjsorg fb one use owns time coming us anyway move github site hosting since want start eg latest builds server custom builds", "d": "1/2014"}, {"body": "issue html first second actually internal task tracking facebook nt think looked yet comment explaining happens looks like happening putting parser js mode closing tag expect called lex preparing lookahead token js mode ends valid js token get lucky using amp middot amp valid js token happens time invalid javascript token appears right closing tag another repro", "d": "1/2014"}, {"body": "fixed esprimafb packagejsons esprimafb jstransform react sorted", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "take look maps set routes page components passes current request object url extracted params according url template andrey popp gmailcom", "d": "1/2014"}, {"body": "think outside scope react core community components page would officially bless router reduce analysis paralysis nt think live core would also open react official blog post describes build app ground router", "d": "1/2014"}, {"body": "sounds good way extend react function like component except called called mean super necessary would cool", "d": "1/2014"}, {"body": "ca nt react component route prop", "d": "1/2014"}, {"body": "rather state bc would set prop like said critical success would cool", "d": "1/2014"}, {"body": "indeed regular object defined native side may culprit server rendering regression introduced getter quite timesensitive places around invariants etc otherwise clean codebase reproduce issue cc petehunt benjamn", "d": "1/2014"}, {"body": "sorry misleading ui events support detail property nonmouse events see event docs indicate scroll event", "d": "1/2014"}, {"body": "nt actually fixed yet vjeux spicyj", "d": "1/2014"}, {"body": "pr nt merged original bug detail nt useful scroll events invalid", "d": "1/2014"}, {"body": "original bug detail nt useful scroll events invalid sorry way invalid", "d": "1/2014"}, {"body": "sorry nt supposed useful value scroll events per spec anything issue indicates necessary docs change really code change seemed initially suggested", "d": "1/2014"}, {"body": "played around jsbin found answer suggesting innerhtml wo nt work svg nodes", "d": "1/2014"}, {"body": "fix reverted issue still open hopefully fix applied later right thing seems return visible text may insert formatting stacked divs headings even present firefox internal ietest relies behavior fixed example svg example works ok firefox innertext available uses", "d": "1/2014"}, {"body": "also mentioned talk getting started page", "d": "1/2014"}, {"body": "ah onmouseover onmouseout nt supported react right react support onmouseenter onmouseleave usually want works fiddle makes work", "d": "1/2014"}, {"body": "would nice indeed want take stab docs repo markdown format would love contributor list", "d": "1/2014"}, {"body": "never mind etarget nt changed loop determining element dispatch event", "d": "1/2014"}, {"body": "spicyj nice type also set", "d": "1/2014"}, {"body": "see", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "another project bridges react art uses svg even canvas render possible use though sure anybody attempted yet interested giving shot reactart good reference", "d": "1/2014"}, {"body": "cool looks useful thanks", "d": "1/2014"}, {"body": "closing actionable", "d": "1/2014"}, {"body": "took liberty edit comment add syntax highlighting", "d": "1/2014"}, {"body": "ca nt reproduce diff applied loaded console checked empty misunderstanding", "d": "1/2014"}, {"body": "yes missed one user defined component go javascript function var testcomponent reactcreateclass render function return", "d": "1/2014"}, {"body": "thanks fixed", "d": "1/2014"}, {"body": "thank fast fix", "d": "1/2014"}, {"body": "thanks findfix", "d": "1/2014"}, {"body": "compiled build process latter syntax used hand npmreact directory nt go build process right", "d": "1/2014"}, {"body": "latter syntax used hand npmreact directory nt go build process right would interesting see minified builds performed meaningfully better server rendering production one heuristic function complexity thus compilation time thus possibility optimization used line count including dead branches even comments", "d": "1/2014"}, {"body": "nothing actionable right going close interested profiling plievone wo nt stop", "d": "1/2014"}, {"body": "related source maps inbrowser transform", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "jsxtransformer uses jsxenhanced dialect complete javascript parser jsx support typescript would require extending replacing complete compatible parser typescript unless thing already exists would likely require significant initial ongoing effort unless willing put effort unlikely going happen time soon foreseeable future jsx sugar similar looking functionally equivalent js code", "d": "1/2014"}, {"body": "jsxtransformer need js parser ca nt replace xmllike constructs js code wherever finds except string comments", "d": "1/2014"}, {"body": "contrived example value nt end first need least js parsing logic understand", "d": "1/2014"}, {"body": "spicyj something simple parsed jsx probably right nt strictly necessary aids generating valid code actually makes sure js parses move", "d": "1/2014"}, {"body": "technically nt need parser need tokenizer sweetjs macros operate token stream hits parser jsx almost works sweetjs except special rules regular expressions closing tags nt work token depending context regexp resolution rules hardcoded tokenizer sweetjs probably ca nt support whitespace rules neither however treat jsx strictly part custom tokenization stream transformation purely token level like sweetjs leave compatible language extension nt need special tokenization rules resulting code would even compatible sweetjs macros think jeffmo", "d": "1/2014"}, {"body": "sebmarkbage long assume opening brackets must corresponding closing bracket work technically also assume expressions object notation array notation etc compatible output configurable lose ability detect report syntax errors inject expressions output stream eventual errors output stream likely lot less comprehensible result unsure bad actually become worst case denying advantages operating token stream like fear expense making jsx less user friendly thus less appealing jsx sugar would never sacrifice convenience really good error message convenience something looks like html hopefully wrong bad think fine line jsx nice optional feature nice toy jsx really compelling primarily cleaner javascript equivalent without immediate drawback makes painless enough still lacks features vanilla javascript offers means revert javascript time time still stick javascript see may switch jsx future would never end crappy error messages plagues many template frameworks opinion", "d": "1/2014"}, {"body": "even true ca nt get good enough error messages using tokentransform alone still parser provide context tokenizer parser provide compatible context great get better error messages free ca nt pipe raw transformed strings still option want use typescript hipsterscript ca nt add convenient extension language expect nobody else add extensions people want choose typescript jsx jsx certainly seen toy unless ambiguity problem ofc typescript may compatible reasons like macros contextual extensions identifier treated differently depending known reactjsx component typeclassinterface", "d": "1/2014"}, {"body": "typescript similar sweetjs macros superset js another convenient extension however yes might incompatibilities type cast operator looks like typescript oops", "d": "1/2014"}, {"body": "sebmarkbage experienced area seems like would always explicitly extend parser target language use standalone tokentransform version likelihood parsers tokenizers compatible seems remote unless esprima parser javascript world missing something case nt looked details seems like simple fix implement optional knowledge language features brackets must balanced sake xjs expression containers tokentransform free really issue stringcomment syntax would compatible tokenizer would need configurable well could probably even put together proofofconcept worth pursuing path", "d": "1/2014"}, {"body": "apologies chiming without reading discussion thought let know result previous discussion someone started adding jsx support typescript found difficult distinguish type parameters jsx suggestion require jsx wrapped parens like makes easier parse time end wrapping jsx parens anyways guard automatic semicolon insertion people used", "d": "1/2014"}, {"body": "jordwalke seems like nt issue solve extending actual parser perhaps parser state would consider jsx valid however seems intuitively harder solve know jsx typecast found possible closing seem reasonable seems suggestion issue unless explicitly disallow typecasts first instruction inside parens nt perfect rarely issue surprisingly neat distinctionsolution major ambiguity", "d": "1/2014"}, {"body": "worried maintaining two versions theory could make tokenizer drop replacement esprima based typescript parser certainly difficult could nice quick fix always add special look aheadbehind rules nt pure jan andreas svensson notifications githubcom wrote jordwalke seems like array nt issue solve extending actual parser perhaps parser state would consider jsx valid however seems intuitively harder solve know jsx typecast found closing seem reasonable seems suggestion issue unless explicitly disallowing typecasts first instruction inside parens nt perfect rarely issue surprisingly neat distinctionsolution major ambiguity reply email directly view github", "d": "1/2014"}, {"body": "sebmarkbage playing proofofconcept simple hoped major issue nt foreseen basically possible unambiguously detect initial tag without parser provide context without additional starting tokenconstraint comparison perhaps language supports feature like basically luck unless require initial parenthesis jordwalke suggested could make certain edgecases existing scripts break though would obvious noop way escaping user safe parens benefit would would nt really look outofplace language ca nt really get away mathematical parenthesis language unsure flexibleverbose make major issue require additional token starting tag repeated every branch conditional expressions tags", "d": "1/2014"}, {"body": "already problem javascript regular expressions still implement js highlighting without proper parser use look behind disambiguate easy enumerate potential cases look though hopefully bounded sweetjs pretty good write regular expressions since allowed similar places jsx figure solution would similar", "d": "1/2014"}, {"body": "course extended language could add features ca nt account may always work would great least little bit feedback parser eg regular expression allowed also assume lt start tag", "d": "1/2014"}, {"body": "yeah took step back analyzed problem properly see three ways lookahead lookbehind operator ish character etc lookahead straightforward approach assume none exact occurrences allowed target language directly conflicting typescript see way without modifying syntax conflicting hypothetical language allows noncommaseparated object notation assignment instead default assume target language based operators easily test reasonably inside expression state valueidentifier expected would explicitly prevent support wordy languages would allow even worthwhile one javascript doubt typescript sadly conflicts valid contexts even parser provide context stricter typescript would still issue sure point unless missing something typescript solved without parser backup either modifying syntax empty root tag like whatever using something like jordwalke suggested however mentioned parenthesis constraint nt actually solve ambiguity really disallowing typecasting first instruction inside parenthesis replacing jsxtags sebmarkbage take need alternate syntax specialcases", "d": "1/2014"}, {"body": "note typescript also uses generics", "d": "1/2014"}, {"body": "vjeux ca nt think case generics ambiguous jsx always preceded identifier valid jsx ambiguous javascript though type casting big issue though parenthesis nt help cases actually ambiguous parsing code error messages becomes really weird opening tag without attributes optimistically parse ahead long way find matching closing tag breaks ambiguity even ambiguous regexps yea type cast syntax screws us really want make work though", "d": "1/2014"}, {"body": "note valid jsx", "d": "1/2014"}, {"body": "spicyj valid typescript though need make regexp make ambiguous think maybe think another case", "d": "1/2014"}, {"body": "sorry thought implying could stop parsing close paren may right regexes tricky part perhaps solve requiring people wrap regex literals parens think jslint might already warn still sound like may need arbitrary lookahead disambiguate sounds like recipe confusion one idea mentioned syranide irc requiring people wrap jsx expression backticks sort like recommend jsx coffeescript obviously bit pain easily removes ambiguity", "d": "1/2014"}, {"body": "ideally would use make fully executable think jsx always close pain worth compared invoking functions back ticks small seem might final straw", "d": "1/2014"}, {"body": "guess back ticks would actually remove feature unless prefix something nt work without prefix anyway", "d": "1/2014"}, {"body": "sebmarkbage reliably disambiguate real context sure infinite lookahead could possibly make reliable enough actually useful error messages would complete dog poo would never able identify intent eyes makes useless agree backticks would solution would remove feature would quite errorprone dealing nested conditionals although realistically one could likely assume inside expression jsx typecast however issue two cases disambiguated quite easily reasonably need introduce optional syntax trivial would look like possibly neat either simplest however different optional syntaxes come none really feels natural weird", "d": "1/2014"}, {"body": "yes agree infinite lookahead ok solution thought experiment see leads us think right alternative syntax cast right way go particularly since syntax really intuitive common current use typescript anyway would seem making change possible ideas without really thinking simplest intuitive type expression another alternative would add contextual keyword somehow", "d": "1/2014"}, {"body": "sebmarkbage thing worry effectively overriding typescript syntax would solution typescript would effectively mean either end two different typecast syntaxes depending whether current file run parser risk breaking existing code files run also depending replacement syntax typecasts potentially extend actual typescript parser opposed language agnostic transform specialcase typescriptstyle typecasts current thoughts extending language parsers vs language agnostic transform seems like agnostic transform would preferable people really invested typescript whatever nothing prevents themus implementing language native solution road one potential idea jsx namespaces pr accepted merged would simply syntax something like thus neatest syntax logic least perhaps acceptable tradeoff languages conflicts vs lt tag", "d": "1/2014"}, {"body": "syranide always conflicts solve case case basis namespaces could easily conflict another language also use external function kill type assertion operator class parent class child extends parent function cast obj return obj var x parent new child var cast x", "d": "1/2014"}, {"body": "sebmarkbage ah interesting solution", "d": "1/2014"}, {"body": "problems typescript react jsx syntax typescript currently support mixins wo nt least months would say basically hard make understand result reactcreateclass doubt ever possible make understand react mixins tried work react typescript ended wrapping lot react mechanism able make typescript fully understand type worked perhaps real solution would create jsx typescript definition file compiler integrate typescript keep jsx creating react components", "d": "1/2014"}, {"body": "fdecampredon seems like react intends move classes soonish assuming would improve situation", "d": "1/2014"}, {"body": "seems like maps direct children alright docstrings mention leaf childs call quite confusing docstring also claims returning array mirrored array mapped children even though returns object also terms memory perfomance impression always array much user defined components mostly due lot single native components page wrapped text nodes avoiding creating arrays virtual dom render beneficial", "d": "1/2014"}, {"body": "petehunt adding thoughts related children amp performance think important react support people want drive algorithm outside like om unlikely react ever compete om since om model already always know precisely data changed already know exactly rerendered js semantics likely never true general case regular react users could fact deliver ridiculous low allocation renders today react provided right hook ie think react needs deliver optimizations js users also get way systems deliver far aggressive optimizations", "d": "1/2014"}, {"body": "sebmarkbage definitely needs thread since used flatten children array therefore always array eventually reverted swannodette nt think something like would controversial used magic prop called would exactly talking think challenge make api nice constrained jordwalke think", "d": "1/2014"}, {"body": "andreaferretti describe use case little detail", "d": "1/2014"}, {"body": "petehunt point specific use case concern api sometimes returns array sometimes single object mislieading whether alternate apis exist even alternate means get access children people use probably get unexpected results words probably negligible loss performance due allocation array single element repaid corresponding gain consistency uniformity one would need short article docs explain api behave obvious manner", "d": "1/2014"}, {"body": "swannodette already consider immutable objects critical part react future design continue revolve around optimizing reconciler immutability fact land another optimization breaks certain mutability use cases shouldcomponentupdate hook currently default critical feature nt work well mutability supporting mutable js paradigm certain components nt limit ability optimize immutability larger sections next release wo nt reconcile children instance default assume nt changed rationale mutate something prop also tend recreate child means subtree updates receive children higher tree wo nt reconcile way work free subtree updates issue reconciling top want avoid rerendering parents sure interpret proposed shouldchildrenupdate api correctly think issues children way pass components often passing named properties indicates intension clearly especially multiple sets children special case children composite components also need able nest children specify nested set also needs make sense fragments ie returning multiple components top level single render function one important ways perf optimization create smaller components ie children tend update separately rest component breaking apart anyway sometimes means passing sometimes means wrapping another component component shouldcomponentupdate never needed recreate large list children similarly children passed state updates current component wo nt reconcile default reason children goes props nothing special children property express children property terms xml like syntax jsx since another component take opaque set named property var foo reactcreateclass render function return var bar reactcreateclass render function return sdfg want pass function lazily instantiate children perfectly valid always able pass explicitly additional arguments function happens create opaque set set opaque changes shape aware inconvenient tried really really hard get addressed opensourced turns tricky solve semantics retain performance fact sometimes single child sometimes array perf optimization semantically equivalent could easily wrap single child array issue real issue nested fragments want ability conveniently able prepend concatenate sets components ca nt flatten one array would lose key context keys guaranteed unique set originally passed concatenated set initial proposal added context key component passed along get implementation details get right ended fairly complicated extract component array place new place ideally would still preserve identity worked exception could nt place component two places still ca nt end reverted whole thing complexity implementation another proposal make truly opaque set could never extract values operate custom functions introducing new set type want able interoperate well larger js ecosystem stablizing alternatives could possible previously strongly held believe arrays must treated keyvalue object believe incorrect since equally treated iterable types could shift semantic meaning array within one fragments could potentially expose children map observably preserves order contextualized keys would part map keys also possible implement lazily probably good idea start still leaves lot unknown questions question remains instance gain access one maps place different position retain state caller would assume would final position tree may different would also responsible preserving key correctly probably need ability move nodes parents preserve state intensions caller allowed access instance nt calling methods instances stateful would even want prevent future reasons even could call methods children ca nt rely composite methods would mean limiting ability parent wrap parts children composite really important design prinicipal could possibly want parent inject properties children may pass composite nt aware think larger issue parent communicate children nt create one way solve would expose api lets parent resolve children abstraction understand communicate using custom api need figure semantics talk type look like", "d": "1/2014"}, {"body": "sebmarkbage thanks long reply clarifies many things respect current design sure interpret proposed shouldchildrenupdate api correctly think issues children way pass components often passing named properties indicates intension clearly especially multiple sets children special case children composite components also need able nest children specify nested set also needs make sense fragments ie returning multiple components top level single render function om works pass data never components never use react subtree updating everything datadriven performance derived reference equality checks way means make composite data structure different pieces data represent different om components rerendering root still lightning fast thus nt need really want react high level component semantics users want drive react algorithm might seem less useful standard react users bought high level semantics critical people want drive system outside nt need want actively avoid could take keys changed children would allow keep control underlying representation speaking given already allow users specify allow supply seems like would allow users express concatenation prepending guys make screaming fast", "d": "1/2014"}, {"body": "oh far nested children intended recursively guide reconciliation algorithm look nothing", "d": "1/2014"}, {"body": "think gets realm creating dsl accessing properties something like avoid mixin really usecase lots form fields save typing want implement mixin would easy would require core changes sorry abuot", "d": "1/2014"}, {"body": "petehunt one thing imagine perhaps able simply step object using key order minimal implementation suffice specialcases like yaynay", "d": "1/2014"}, {"body": "getting syntax closure compatible going hard also grow api make polymorphic additionally ca nt really think situation would great idea need probably decompose another component", "d": "1/2014"}, {"body": "bumped nested two way bindings try deal forms found one implementation stackoverflow", "d": "1/2014"}, {"body": "hi nice explanation transition timeline jsfiddle function mount component first call subsequent calls update already mounted component see need componentwillupdate want replace component mount try using different prop", "d": "1/2014"}, {"body": "thks plievone actually using componentwillupdate force enter class transitionchild otherwise class added componentdidmount see reacttransitionablechildjs somehow use trick app make animation work properly otherwise entering view appearing briefly view sliding right ca nt reproduce bug fiddle maybe demo simple see update demonstrate point", "d": "1/2014"}, {"body": "componentdidmount happen tick first elements inserted class modified tick least commands flushed browser rendering system tick would nice know occasions heavy updates could result problem seen perhaps callbacks components react core component componentdidmount could trigger repaint browser via dom measurement need", "d": "1/2014"}, {"body": "indeed race condition reacttransitionablechild add component forces repaint componentdidmount accessing reacttransitionablechild first flash default style class added immediately people using jquery plugins etc kinds repaints might happen easily complex renders perhaps needs warning docs cc petehunt", "d": "1/2014"}, {"body": "updated fiddle demonstrate bug", "d": "1/2014"}, {"body": "brief look mounting procedure suggests prevent races transitions use class could set already initial render", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "colingourlay ca nt reproduce site still seeing problem", "d": "1/2014"}, {"body": "spicyj great source problem actually doubleclicking x switch edit mode entry input removed immediately confuses react assuming attached doubleclick wrong node doubleclicking text remove button cause entry become editable", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "shipit", "d": "1/2014"}, {"body": "tried briefly things work ok one enabled tests enabled webworker spawn deferred reason tests including reporting run confuses test runner disable things work quite ok see error end somehow related perhaps many tests platform posts duplicateerror wo nt get back zero something see posts time time nt know affect something simulatorwebdriver used test runner gets somehow stuck nt poll nt error timeout either", "d": "1/2014"}, {"body": "offending test case fails dev prod file quite many lines always return success locally instead skipping may invalid test cases immutableobject uses dev without checking availability shim", "d": "1/2014"}, {"body": "thanks catching need detect supported nt freeze also action items support arrays merging shallow deep simply move entire array recurse pete ideas able specify arrays intelligently merged appended prepended indexbyindex replace probably something else well", "d": "1/2014"}, {"body": "warning added", "d": "1/2014"}, {"body": "events listened demand maybe warning moved method support already checked", "d": "1/2014"}, {"body": "always copying would fix issues also another issue saw today someone wanted reuse header row table multiple places", "d": "1/2014"}, {"body": "fairly large discussion challenge making compatible class direction nt seem like anything insurmountable like transform expression evaluates throwing around words pure descriptor talk structures might mean first transforms function returns json style object knows supply field way currently examining currently rendering react component convenient declare constant components top file efficient reuse shared many different component instances time means owner nt even valid notion definition time sound like problem actually okay considering fact constant components could reused many different renderers get conflicts different renderers start clobbering shared object property maybe punt supporting owner therefore refs constant shared object descriptors one benefit pure descriptor approach one retain reference render function treat like instance later may may instance looking depending retained first render subsequent renders whether use pure descriptors actual instances fact copyclone new instance finally mount means employ automatic pooling autogenerate pure descriptorsinstances case pete might get zeroallocation render", "d": "1/2014"}, {"body": "implemented blessed way manually clone component support constant component pattern eg like able create nicely reusable components inside actually add zero depending propsstate", "d": "1/2014"}, {"body": "tompaton master nt think currently exported instead use instead might even preferable", "d": "1/2014"}, {"body": "understanding everything correctly believe sebmarkbage working going", "d": "1/2014"}, {"body": "syranide sounds good background case stripped generic example nt entirely clear code actually closer got something like way icons defined top level component consist generic logic icon nodes could cloned make less generic settle icon classname workaround would require creating another layer components bundle classnames etc spans nt end world bit verbose", "d": "1/2014"}, {"body": "fwiw created simple proof concept using traceur transpile class syntax passing source code class syntax reacttransform seems work pretty well least rather limited example probably due esprima experimental support", "d": "1/2014"}, {"body": "chenglou guess close issue merged", "d": "1/2014"}, {"body": "vjeux comment", "d": "1/2014"}, {"body": "killed fails couple tests one note spacing", "d": "1/2014"}, {"body": "correct wrong seems fix", "d": "1/2014"}, {"body": "sure think need viewportmetrics object", "d": "1/2014"}, {"body": "related issues pull requests may affect docs", "d": "1/2014"}, {"body": "could section specifically states timeline classes applied something like timing animation classes animation classes applied top component regular css classes animation starts goes following sequence immediately adds class tick afterwards adds class end transition removes animation classes remember classes kept animation complete nt depend animation classes keep component visible", "d": "1/2014"}, {"body": "keys optional indeed warn prod break perhaps uniqueness relied many places handle special case invalid keys nicely", "d": "1/2014"}, {"body": "fact keys optional nothing react behavior dev prod perfectly reasonable throw warn", "d": "1/2014"}, {"body": "spicyj sorry meant api user one could assume keys help react reusing component instances one supplies invalid keys one could assume help slower way proceeds support cause", "d": "1/2014"}, {"body": "react recent increase popularity easy testing story going demand", "d": "1/2014"}, {"body": "fact would adding fine version test utils included specifically using test runner", "d": "1/2014"}, {"body": "take especially want explain new method", "d": "1/2014"}, {"body": "fwiw take mentioned", "d": "1/2014"}, {"body": "relevant", "d": "1/2014"}, {"body": "anybody running across issue spicyj pointed includes information shipping vendored version react test utils also uses constructs like inspect react component state necessary piece", "d": "1/2014"}, {"body": "written library called jasminereact use test react components allows todo things like spyon methods react component stub children components isolate tests component test unmounting component aftereach test setting class displayname makes validating error messages easier repost info put reactjs freenode long run might try merge features right jasminereact works box w custom grunt build needed", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "chrome fires change event change keyboard possible use change instead input", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "bit digging ie presence seems add implicit attribute running following chrome logs ie logs could causing problem", "d": "1/2014"}, {"body": "value case version ie msdn says text default submit query guessing maybe need skip test sometimes", "d": "1/2014"}, {"body": "quick testing ie results value submit query", "d": "1/2014"}, {"body": "sounds like encapsulation leak perhaps input component provide sort getter instead encouraging us reach noodle dom node cc sebmarkbage", "d": "1/2014"}, {"body": "seems like problem test rather implementation", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "perhaps related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "pass array props shows error", "d": "1/2014"}, {"body": "bhargavgunreddy works", "d": "1/2014"}, {"body": "thanks man", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "could separate script testing angular angularmocksjs could reacttestjs something similar", "d": "1/2014"}, {"body": "anyone working compiler", "d": "1/2014"}, {"body": "charuru worked project lets hook jade compiler modify way everything works written plugin previously compiled rivets data bindings theoretically could react rivets plugin", "d": "1/2014"}, {"body": "converting project use react dont want change workflow front end engineers write jade jsx reactified used front end code doesnt exist", "d": "1/2014"}, {"body": "sketched custom jade compiler generating react code turns javascript function function map obj fn number typeof objlength return objmap fn var result key hasprop hasownproperty key obj haspropcall obj key amp amp resultpush fn key obj key return result return reactdomdiv classname containerfluid readme reactdomdiv classname row null thisstorename reactdomul null map thisproducts function product index return reactdomli null product producttitle", "d": "1/2014"}, {"body": "duncanbeevers nt seem quite right though", "d": "1/2014"}, {"body": "syranide yeah rough first pass working context greenfield hobby project number tooling questions around currently unanswered also making sister tool duncanbeeversgulpjadereact integrating gulp workflows along gulpwrap capture expose expressions functions longer commenting thread work jadereact ongoing", "d": "1/2014"}, {"body": "fixed benjamncommoner", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "fixed lands", "d": "1/2014"}, {"body": "spoke petehunt instead publish blog post rudimentary layer implementation demonstrates system would built", "d": "1/2014"}, {"body": "added support onselect", "d": "1/2014"}, {"body": "still issue today", "d": "1/2014"}, {"body": "hard give good errors best idea think treating unbalanced error least catch end function jeffmo think", "d": "1/2014"}, {"body": "closing changes examples done gradually", "d": "1/2014"}, {"body": "maybe better approach react altogether danielstocks render child hierarchy react listen child element interested instead using event bubbling cheap", "d": "1/2014"}, {"body": "really actionable closing one", "d": "1/2014"}, {"body": "nt help guys delete pages wiki polyfill people find stuff like please link", "d": "1/2014"}, {"body": "linked comment closed issue gh issues wikis meant final source information would suggest link page", "d": "1/2014"}, {"body": "zpao suggest putting wiki page something along lines react polyfills page longer maintained please visit wiki page still first result google search react polyfill", "d": "1/2014"}, {"body": "thanks heads linked docs", "d": "1/2014"}, {"body": "appreciate zpao", "d": "1/2014"}, {"body": "based documentation click event interactive content understanding event fire whenever cursor clicked arguably includes contained menu elements using interpretation firefox correct behavior", "d": "1/2014"}, {"body": "firefox nt fire upon clicking select options dismiss though tested windows least ie chrome totally correct behavior thing select os thing firefox got mostly right implemented select chrome uses whatever dropdown os uses tried patch behaviors stuff ca nt achieved reason zpao sure ever work consistently", "d": "1/2014"}, {"body": "happy dash user love app generating react docs soon offline instantly fuzzysearchable react documentation", "d": "1/2014"}, {"body": "dustingetz need guess length actually annoying write imo", "d": "1/2014"}, {"body": "although may confusing think relatively straightforward realize going wrong changes allow access attempted value would cause text input value flicker since fires later let clarify documentation", "d": "1/2014"}, {"body": "yeah nt heard complaints form docs nt clear enough though always people asking things readonly cf", "d": "1/2014"}, {"body": "going close favor adding docs", "d": "1/2014"}, {"body": "moment adding missing svg tags bit pokey", "d": "1/2014"}, {"body": "fwiw wo nt help jsx transformer maintains list tags recognizes converts reactdom", "d": "1/2014"}, {"body": "nt updated months closing please reopen think still done", "d": "1/2014"}, {"body": "nondangerous looking blindly copied old html somehow baking spicyj comment error messages would useful", "d": "1/2014"}, {"body": "ran table case oh boy hard debug simply using tbody penalty learning html people started actually using tbody looking forward", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"title": "add todomvc", "body": "x pr sent x make sure lands", "num": "62", "d": "1/2014"}, {"title": "migrate tests seleniumwebdriver run saucelabs", "body": "also checkout chaiwebdriver nightwatch", "num": "61", "d": "1/2014"}, {"title": "computed property shorthand", "body": "getter needed simply supply function", "num": "60", "d": "1/2014"}, {"title": "vdata", "body": "html copy comma separated list data vm", "num": "59", "d": "1/2014"}, {"title": "invoice example", "body": "better version", "num": "58", "d": "1/2014"}, {"title": "value inside expressions undefined converted empty string", "body": "eg undefined output instead", "num": "57", "d": "1/2014"}, {"title": "async problem swapping array", "body": "", "num": "56", "d": "1/2014"}, {"title": "yo generator", "body": "scaffold idiomatic setup using vuecomponentstylus grunt gulp subgenerator adds new components optionally include testing setup", "num": "55", "d": "1/2014"}, {"title": "expressions vrepeat wrong context", "body": "", "num": "54", "d": "1/2014"}, {"title": "child component data swapped parent component data swapped", "body": "", "num": "53", "d": "1/2014"}, {"title": "add cdnjs", "body": "x submit pr x check actually working update site installation section", "num": "52", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "use data attributes access", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "already haha", "d": "1/2014"}, {"body": "migrated website repo", "d": "1/2014"}, {"title": "modeldestroy wait false synchronous modelsync send events expected convenient order", "body": "hi destroying model belonging collection call optimistic reactive ui asynchronous implementation typically launching xhr simulated events sent given order first destroyed model emit destroy event event caught collection stop listening model events remove model collection emit event remove eventually destroyed model emits error sync event depending success failure operation backend though synchronous implementation directly calls success error callbacks passed options events sent given order first destroyed model emit sync error event depending success failure operations done synchronous impl destroyed model emit destroy event eventually destroy event caught collection stop listening model events remove model collection emit event remove think either order sent events depend nature modelsync impl synchronous asynchronous either backbone doc explicitly state modelsync impl must asynchronous order sent events depend nature modelsync impl synchronous asynchronous opinion expected convenient order events first one described async one convenient imho allows collection listentoonce removemodel sync error one model removed collection convenient way deal issues words keep watching success failure delete operation backend removed model collection matter simulating backend synchronous impl sync working real backend latency right agree end impl modeldestroy fixed opinion", "num": "2980", "d": "1/2014"}, {"title": "configurable list view options merged properties", "body": "convenience feature allow list view options merged properties customized like model collection magically available instance variables would nice able specify options merged properties", "num": "2979", "d": "1/2014"}, {"title": "view events delegate", "body": "following code run event handler problem scroll events bubble backbone tries bind scroll event using delegated syntax like however fails since event never bubbles el would appropriate patch backbone events treat scroll bindings differently like limitation elements would need children el already least would work cases thoughts", "num": "2978", "d": "1/2014"}, {"title": "nested optional parts route route string captured", "body": "yields captures three params params mandatory captures two params example matching route parameters passed handler", "num": "2977", "d": "1/2014"}, {"title": "collection length match models length fetching parsing data duplicate ids", "body": "duplication steps create model parses arbitrary response object attribute call fetch collection model api returns multiple models id call fetch second time api returns multiple models id backbone throws error javascript set function models options see spec failing mismatched collection length failing spec duplicating issue expected behavior root issue clearly api returning duplicate objects however wondering might better way backbone handle situation would make problem easier trace default behavior adding model collection id existing model collection would expect error thrown", "num": "2976", "d": "1/2014"}, {"title": "split components separate modules", "body": "bit like still chose open new issue times like use subset backbone application particular case router part backbone looking sourcecode seems would easy use commonjs module declarations separate different components projects using example browserify could main backboneproject looking something like break backwards compatibility either would allow use handy modules without load code needed application", "num": "2975", "d": "1/2014"}, {"title": "would refactoredout setmerge method possible", "body": "currently backbone gleefully update attributes existing models attributes newlypassed models great nt want backbone update attributes ie want complicated merge example two forms model call record recordsummary record holds full model worth data recordsummary name id record eg use search results record json might look like recordsummary might look like models represent serverside data record get recordsummary server want update record summary data however nt want change type recordsummary still full record use collectionadd merge true backbone overwrite type record recordsummary currently good way change behavior however line comes right optionsmerge collectionset refactored method thissetmerge existing modelattributes options setmerge function existing attributes options existingset attributes options users could override setmerge add special merge behavior like course utility refactoring would limited case could used sort mergespecific behavior override given given refactoring trivial chance something like might make backbone way solve sort problem already exists ps change desired happy submit pull request", "num": "2974", "d": "1/2014"}, {"title": "collectionget returns objectprototype methods", "body": "currently backbonecollection using object keep track models exist within collection probably using hasownproperty instead avoid returning methods objectprototype issue originally occurred firefox model id watch backbone refused add new collection using appears issue exists within latest version well jsbin demonstrate issue valueof", "num": "2973", "d": "1/2014"}, {"title": "enhancement access subproperties getter setter", "body": "hi would know possible add functionnalities access subproperties model examples thismodelget somethingtitle thismodelset somethingtitle new title try implement needed changes javascript function searchproperty attr attrs raiseerror attr amp amp attrindexof gt var properties attrsplit currentattributes attrs function deleteproperty attr attrs attr amp amp attrindexof gt var lastindex attrlastindexof parent searchproperty attrsubstring lastindex attrs false function setproperty attr attrs value attr amp amp attrindexof gt var lastindex attrlastindexof parent searchproperty attrsubstring lastindex attrs false model extend modelprototype events get function attr return searchproperty attr thisattributes set function key val options var attr attrs unset changes silent changing prev current key null return thing thank feedback cheers julien roche", "num": "2972", "d": "1/2014"}, {"title": "modelfetch optionssuccess vs optionserror callback signature mismatch", "body": "docs says backbonemodelfetch accepts success error callbacks options hash passed model response options arguments far tell success callback signature like error callback looks like going seems like passed different sorts parameters compared docs claim", "num": "2971", "d": "1/2014"}, {"title": "backbone also try require lodash", "body": "currently backbone tries think either jquery try load global context sorry duplication using backbonejs browserify always wants require underscore would duplication lot code case use lodash normally something possible way achieve", "num": "2970", "d": "1/2014"}, {"title": "query parameters hash fragment removed calls backbonehistorynavigate", "body": "consider following routes url changes route invoked expected behaviour however route invoked programmatically route invoked instead clearly wrong cause", "num": "2968", "d": "1/2014"}, {"title": "backbone validation date field using bootstrap month year datepicker even input filed value still get error message code", "body": "modeljs initialize function thisvalidators thisvalidatorsdate function value return valuelength gt isvalid true isvalid false message must enter date defaults date html date", "num": "2967", "d": "1/2014"}, {"title": "doc inconsistency collection constructor", "body": "docs indicate models array optional parameter backbonecollection constructor method fact omitted options passed sketch simple test case demonstrating deviation docs", "num": "2966", "d": "1/2014"}, {"title": "multiple backbonerouters default route order matching routesloading routers", "body": "application coding getting bigger bigger far using one router everything wanted split two separate routers starters coming course like class windowuforoutersapp extends backbonerouter routes root root found notfound notfound class windowuforouterscompanies extends backbonerouter routes companiesnew angellist companiesnew companiesnew companiesnew companies idedit companiesedit companies ideditpeople companiespeople companies ideditpeople preselect companiespeople issue though notfound route triggered every time try access one companies routes guessing app router loaded initailized first using rails asset pipeline know workaround problem maybe way force backbone check available routers matching notfound route btw using backbonemarionette solutions may use tools code", "num": "2964", "d": "1/2014"}, {"title": "listentoonce multiple events fire event instead absolutely", "body": "noticed behavior think unintuitive wrt listentoonce api would expect semantics multiple events fire event event proposed anyevent semantics still reproduce eachevent behavior easily unambiguously thats intend current eachevent semantics need doubleonce feels kludgy keeping current eachevent semantics documentation updated make explicit", "num": "2963", "d": "1/2014"}, {"title": "modelisnew true put still issued rather post", "body": "sure expected behaviour docs say isnew true post sent save include id attribute data form put sent even isnew true modelisnew true viewon form submit function data delete dataid need get post otherwise put modelsave data course useless id null case model id set user server postput determined data modelisnew", "num": "2962", "d": "1/2014"}, {"title": "collectioncreate return request object", "body": "right current call returns model created inconsistent way work return xhr object allowing use deferreds consistent fashion since also networked operation return xhr object well reason returns model realize provide json object point need capture model instance callback could also pass model directly thus already model present believe api call requires use callback want capture result operation happy make pull req desired change", "num": "2961", "d": "1/2014"}, {"title": "collectioncreate adds model even valid", "body": "adding invalid model triggers modifies collection normal documentation says contrary equivalent instantiating model hash attributes saving model server adding model set successfully created seems way", "num": "2956", "d": "1/2014"}, {"title": "double validation save", "body": "runs two validations one one successful server response validating server data seems useless problem seems related code optionsvalidate true backbone version", "num": "2955", "d": "1/2014"}, {"title": "routernavigate never trigger route function defined routerjs like case", "body": "defined routerjs like backbonerouterextend routes routing see try access like like navigate gt routing gt navigate pagemain gt routing page main gt eval main success backbone backbone investigate change see fragment fragmentreplace pathstripper also optionstrigger return thisloadurl fragment loadurl empty string instead pagemain thisloadurl never loadurl pagemain trigger function ps use backbonequeryparams plugin help get url parameter", "num": "2954", "d": "1/2014"}, {"title": "could add parameter", "body": "newbie backbone use bookshelf found problem var user moduleexports basemodelextend var issue require issue userextend tablename users true add third parameter backbone entirely need thank", "num": "2953", "d": "1/2014"}, {"title": "backbonejs model save mulitpart formdata", "body": "include file data model attributes found link find difficult convert form data form include file input fields form saving form model attributes user backbonemodelextend readavatar function file callback var reader new filereader file api object reading file locally readeronload function thefile self return function e set file data correctly backbone model selfset avatarfilename thefilename avatardata fileeventtargetresult handle anything else want parsing file setting model callback file readerreadasdataurl file reads file memory encoded attribute function attr return objectdefineproperty thisprototype attr get function return thisget attr set function value var attrs view var formdata formserializearray thismodeldata formdata var profiledata windowformdata profiledata new formdata consolelog profiledata profiledata jqueryeach imagedata files function file readerreadasdataurl file profiledataappend imagedata file thismodelimagedata profiledata save data thismodelsave help solve problem", "num": "2951", "d": "1/2014"}, {"title": "server interaction callback always jquery inspired", "body": "many cases useful use always callback avoiding excess code better builtin events maybe", "num": "2950", "d": "1/2014"}, {"title": "add provision hooks router", "body": "wanted execute specific function beforeafter every route specific controller matched got api looks clean monkey patching route callbacks think worth core feature comments", "num": "2947", "d": "1/2014"}, {"title": "undocumented bc break backbone", "body": "removed possibility pass url option constructor collection upgrading guide mention", "num": "2945", "d": "1/2014"}, {"title": "newer versions backbone get query backbonehistory", "body": "writing plugin route management backbonejs noticed recent change commit issue makes longer returns query getting full fragment query useful know manually parsed url worry pushstate whatever options effect backbonehistory works find would best get directly fix could simple keeping reference called something like backbonehistoryqueryfragment whatever name makes sense storing reference replacing would interested pr please let know thanks", "num": "2944", "d": "1/2014"}, {"title": "add event collection create request lost using wait true", "body": "listen events hook promise nature show loading status disable buttons etc example adding new comment use freeze textarea button using request save new model lost therefore suggest add something like event occurs collection request made currently custom javascript sync function method model options var xhr modelprototypesyncapply arguments var collection modelcollection method create amp amp collection collectiontrigger create model collection xhr options return xhr", "num": "2943", "d": "1/2014"}, {"title": "introducing modelgetraw", "body": "found gist useful maybe become backbone feature", "num": "2941", "d": "1/2014"}, {"title": "adding two identical callbacks", "body": "add two identical events event dispatcher like later trigger actually executes twice nt think expected behavior identical listener replace previous opinions", "num": "2940", "d": "1/2014"}, {"title": "problem c code find nth smallest elementi think recursion", "body": "include int order int int start int end int rank order function int mark try int j k temp pivot x two markers j k initialised pivota start", "num": "2939", "d": "1/2014"}, {"body": "think ordering correct patched function indeed synchronous happens model destroyed removed collection point view application backbone nt lying actually happened", "d": "1/2014"}, {"body": "hi luisca search issues find one come several times best way go apply properties constructor quick one liner follows hope helps", "d": "1/2014"}, {"body": "many events nt bubble either focus blur change submit etc nt think makes sense backbone polyfill events introduce whole bunch code detect browsers order attach event handlers different ways browser jquery nt even anyone would jquery already machinery builtin really really need seamless event delegation recommend facebook react", "d": "1/2014"}, {"body": "yep yep syntax delegation bubbling events event nt bubble attach handler directly cleaned view", "d": "1/2014"}, {"body": "meh figured ended delegating hover handler would set scroll handler work around", "d": "1/2014"}, {"body": "gist helper method make simple possible anyone finds later setup view", "d": "1/2014"}, {"body": "model ids unique per model server returning multiple objects id seems like bug part server much backbone", "d": "1/2014"}, {"body": "error seems incorrect", "d": "1/2014"}, {"body": "right understand bug server wondering better way backbone handle error noticed attempt models collection adding behavior silently fails model added error thrown would expect adding models via call would act way would prefer adding duplicate models would throw error though imagine would breaking change many users", "d": "1/2014"}, {"body": "would prefer adding duplicate models would throw error though imagine would breaking change many users used behavior enhancement would expect adding models id via fetch call would act way quite", "d": "1/2014"}, {"body": "actually talking fellow devs would enough split inside project interested kind separation could prepare pull request", "d": "1/2014"}, {"body": "use underscore pick modelattributes", "d": "1/2014"}, {"body": "damn overlysimplified example trying keep sample code clean possible overdid correct example provided could simply use add override omit type attribute however start summary model add record model nt actually want omit record type contrary want replace summary type model really record want omit type way around summary added record really looking side note real life version even complex historical reasons actually four different forms data since storing four different collections problematic know collection use since represent serverside data trying merge single collection trouble inability control merges happen", "d": "1/2014"}, {"body": "perhaps accomplished", "d": "1/2014"}, {"body": "using type property represent completeness record seems problem solve specific problem would loose concept type going use model simply query fields point request data record needed another strategy would compute state record sync data comes server based reality available easy see general problem looking solve reality often people face problem vs added complexity question believe variety approaches work elegant less elegant proposal", "d": "1/2014"}, {"body": "yet third option pass custom parameter hash passed method javascript coladd models parse true customparse true parse function resp options optionscustomparse return thissomethingspecial resp return resp", "d": "1/2014"}, {"body": "hmmmm complicating factors make solutions problematic give ideas play thanks importantly seems clear point use case setmerge method pretty specific close ticket least time bettermore common case arises", "d": "1/2014"}, {"body": "hey brought times search past tickets unfortunately thats tradeoff using object store keys dont allow arbitrary values ids stick numeric unique sequential ids fine", "d": "1/2014"}, {"body": "since already api access points data ca nt internally properties simply prefixed like better yet suggested using thing done", "d": "1/2014"}, {"body": "doesnt seem like good solution either model collection much overhead cognitive otherwise see threads discussion suggestions", "d": "1/2014"}, {"body": "apologizes see previous tickets issue covers exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks", "d": "1/2014"}, {"body": "problem thats jan pm josh thomas notifications githubcom wrote apologizes see previous tickets issue exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks reply email directly view github", "d": "1/2014"}, {"body": "try looking previous tickets opening new ones thanks", "d": "1/2014"}, {"body": "second parameter always going whatever function sent back case default first parameter jquery ajax callbacks see reference used general term purposefully easily overridden work various data stores protocols", "d": "1/2014"}, {"body": "found workaround browserify run browserify following argument replaces backbone fronted code context follows", "d": "1/2014"}, {"body": "voila go", "d": "1/2014"}, {"body": "cspiegl learned gulpbrowserify use see", "d": "1/2014"}, {"body": "use gruntshell run browserify tried would like much better browserify command one saadly work tests", "d": "1/2014"}, {"body": "hi reinseth believe fixed though somewhat differently query params stripped nt matched fragment either try code see think", "d": "1/2014"}, {"body": "ah nt see fixes issue thanks quick reply", "d": "1/2014"}, {"body": "date", "d": "1/2014"}, {"body": "might want give shot stackoverflow gh tickets bugs issues directly related development library", "d": "1/2014"}, {"body": "inconsistency javascript uses positional arguments trying pass sans type sniffing almost function accepts one argument work", "d": "1/2014"}, {"body": "load router first ask questions mailing list stackoverflow irc channel please", "d": "1/2014"}, {"body": "documentation perhaps updated semantics", "d": "1/2014"}, {"body": "agree jashkenas syntax simple sugar binding individually", "d": "1/2014"}, {"body": "eventa eventb syntax simple sugar binding individually yep yep", "d": "1/2014"}, {"body": "model id model url model url want put model url rest goes", "d": "1/2014"}, {"body": "ask questions mailing list irc channel bug tickets", "d": "1/2014"}, {"body": "ok said put general discussion", "d": "1/2014"}, {"body": "agree model returned create nt useful since nt really know deal hear server consistent get xhr object promise chaining etc info reasoning", "d": "1/2014"}, {"body": "far reasoning see intended return model nt really reason specific use case necessitates behaving differently others", "d": "1/2014"}, {"body": "shortcut new model plus add collection save returned xhr reference model made want xhr use later", "d": "1/2014"}, {"body": "jashkenas could pass model created elsewhere additionally could empty noninitialized model worse model someone realizing network operation happening could start using model actually saved may desired behavior", "d": "1/2014"}, {"body": "could pass model create created elsewhere could intended use case code example makes sense noticeably awkward compared someone realizing network operation happening could start using model actually saved exactly optimistic models supposed used worried save failing model invalidated server want save complete shortcut think rails", "d": "1/2014"}, {"body": "normal nope nt model returned errors", "d": "1/2014"}, {"body": "try latest master see problem still exists nt", "d": "1/2014"}, {"body": "hi please check restores support query params thanks", "d": "1/2014"}, {"body": "hey probably open ticket bookshelf short answer need something like", "d": "1/2014"}, {"body": "github issues discussing bugsfeatures backbone support backbone try documentcloud irc stack overflow", "d": "1/2014"}, {"body": "could also save callback function variable pass variable events agree still bit verbose nt think really bad explicit", "d": "1/2014"}, {"body": "another solution get returned deferred object work want obviously way", "d": "1/2014"}, {"body": "fetch currently pass complete callback could set always callback returned jqxhr", "d": "1/2014"}, {"body": "found feature documentation master branch could work save methods", "d": "1/2014"}, {"body": "yes fields options get passed ajax method anything goes backbonesync", "d": "1/2014"}, {"body": "ahh jquery callback hmm good maybe know secret builtin event complete possible use clumsy", "d": "1/2014"}, {"body": "hi darrrk complete callback certainly nt secret part jquery api backbone jquery promises also allowances via listen space separated events think one probably handle use case", "d": "1/2014"}, {"body": "thanks braddunbar denniskuczynski think issue enough info solve problem devs grep free total options callback total builtin event", "d": "1/2014"}, {"body": "record jquery complete callback deprecated favour always promise style callback", "d": "1/2014"}, {"body": "suggested times early one search though issues similar terms see bit background easy enough wrap callbacks directly plugin ie backboneroutefilter base router pattern give shot let know works", "d": "1/2014"}, {"body": "hi jaseemabid changes wrapping route handlers made much easier think probably fit needs rather well", "d": "1/2014"}, {"body": "braddunbar good one thanks", "d": "1/2014"}, {"body": "docs many tweaks optimizations bugfixes relating backbone including url overrides mutation options explicit got suggestion improve wording feel free open pull ghpages branch", "d": "1/2014"}, {"body": "well read optimizations bug fixes nt expect break backward compatibility bc break requires modifying code keep working explicit doc needed change quite easy went unnoticed initially updating backbone", "d": "1/2014"}, {"body": "one dev bufix another bc guess backbone svelte library changes releases tend minor see latest release example since backbone api almost entirely surface area behavior changes require mucking public contract sorry one bit guys upgrade", "d": "1/2014"}, {"body": "closed", "d": "1/2014"}, {"body": "hi jisaacks pull discussion would mind checking see would fit use case", "d": "1/2014"}, {"body": "braddunbar thanks pointing branch add project see solves things report back figure", "d": "1/2014"}, {"body": "braddunbar branch solve issues actually lot make life easier idea make release", "d": "1/2014"}, {"body": "assume could go next release though certain", "d": "1/2014"}, {"body": "alright well keep eye closing", "d": "1/2014"}, {"body": "nt exactly follow problem lost adding events things find useful totally fine great way go", "d": "1/2014"}, {"body": "request jquery xhr lost save called model returns xhr usually hook onto example showing loading icon hiding request done used ca nt listen events collection new model nt added collection yet current implementation way get access xhr returned subsequently lost", "d": "1/2014"}, {"body": "see previous tickets getters setters backbone opted leave functionality userland see pretty trivial set style gettersetter style however like", "d": "1/2014"}, {"body": "seems correct interesting note though way currently one bindings without taking one well realworld problem running making note", "d": "1/2014"}, {"body": "mean necessarily problem per say realized personally expected behavior hand see also understandable add twice way thinking ca nt think scenario want execute twice per one event sure plenty situations people want behavior smile always matter opinion however raise valid point remove one however feel like also expected behavior", "d": "1/2014"}, {"body": "however raise valid point objectoff remove one however feel like also expected behavior return event uids solve would break chaining feature eventinheriting objects currently without solid reason break functionality going stay asis closing feel free discuss like", "d": "1/2014"}, {"body": "would nice model internal state asifremoved time remove event fired took crack nt pass test suite", "d": "1/2014"}, {"body": "jashkenas trying without loops", "d": "1/2014"}, {"body": "yes placing removal line clever spots breaking removereference dice", "d": "1/2014"}, {"body": "moved", "d": "1/2014"}, {"body": "think current behavior desirable apps really want use slug id go tweak uniqueid output suit preferences remember never really use arbitrary strings backbone ids friends spoil day", "d": "1/2014"}, {"body": "faviconico added bowerjs ignore list longer covered docs entry", "d": "1/2014"}, {"body": "good call", "d": "1/2014"}, {"body": "leading hash probably least one problems nt right place debugging help try irc channel instead", "d": "1/2014"}, {"body": "sorry discussed elsewhere ran issue think main issues sync event collection gets called two different sets arguments different signatures bit confusing one collection first argument model collection first second argument changing one calls always collection sync event", "d": "1/2014"}, {"body": "deknar using trailing slashes everywhere sake seoduplicate pages analytics backbone always removes trailing slash root even using routernavigate really undesirable way backbone forces use url without trailing slashes must optional explicitly using routernavigate slash nt removed", "d": "1/2014"}, {"body": "hi getting error already included dependencies still getting error anyone help", "d": "1/2014"}, {"body": "referencing mini plugin way attach whitelisted initialization options directly view object considers default values required options", "d": "1/2014"}, {"body": "hey dfournier try using namespaces use hood removing jquery events bound view easy calling within view instance example use custom namespace want events", "d": "1/2014"}, {"body": "sorry location header way go real restful api backbone really support behaviour nonsense throw rest constraints aboard javascript framework", "d": "1/2014"}, {"body": "noted specifically required also recommended server also returns characteristics created entity format specified contenttype header compatible backbone afaik automatic fetching uri given location header mandated tell", "d": "1/2014"}, {"body": "well good nothing stopping going making additional request fetch url location header right", "d": "1/2014"}, {"body": "exactly point", "d": "1/2014"}, {"body": "fact think way supposed handle edit clarify fetching uri user discretion mandatory automatic", "d": "1/2014"}, {"body": "u use location header hypermedia api want identify entities uris therefore client nt need object created need uri id uri fetch object wanted restapi abstraction layer emphasizes restful practices like backbone model support hide behaviour ease programmers work well least opinion", "d": "1/2014"}, {"body": "point applevel design decision something frameworks enforce need model behave way subclass handle differently", "d": "1/2014"}, {"body": "debatable imagine exception probably already error state cleanup javascript", "d": "1/2014"}, {"body": "worth new backbone spent better part two hours trying figure model reflecting server state attributes removed noted previous posters backbone documentation suggests fetch sync server client state expected would remove attributes personally like idea able pass reset flag agree ephemeral data mixed model attributes really ephemeral would nt matter blown away anyway would also suggest reopening ticket", "d": "1/2014"}, {"body": "thanks ptnplanet andrewtennison opted change framework trailing slashes would ever used using wordpress simply created custom permalink settings gt permalinks postname without trailing slash works great", "d": "1/2014"}, {"body": "braddunbar love totally worked put routetoregexp thingy", "d": "1/2014"}, {"body": "glad could help smile", "d": "1/2014"}, {"body": "per mdn documentation state object saved disk nt understand different saving local storage think readdressed using local storage another method saving state seems extraneous state object available history api", "d": "1/2014"}, {"body": "right contra using state object extraneous local storage cookies method saving state simply tied current url", "d": "1/2014"}, {"body": "would nt better utilize tool provided state object provides straight forward method saving accessing previous states rather sifting local storage time user arrives page historystate available would allow ability recall generic state view via url route also specific state view user might want return", "d": "1/2014"}, {"body": "view simple apps use routes use simply copy paste url full experience complex apps use routes simple entry points general areas application particular records use storage apis better represent type persistence whether user server session local using history state object defeats great simple way single page apps use urls potentially permanent bookmarks", "d": "1/2014"}, {"title": "isactive w queryparams enabled messed", "body": "demonstrates cc raytiley", "num": "4277", "d": "1/2014"}, {"title": "remove implicit errorloading routes list routes linkto assertion", "body": "would need changed way nt honestly know best way tackle looking names alone would nt guarantee someone nt explicitly write route particularly named prefixed ones maybe fine purpose error message filter eg", "num": "4275", "d": "1/2014"}, {"title": "table row duplicated dropping sorted array saving model via emberdata", "body": "difficult summarise best demonstrated fiddle ember emberdata instructions results latest builds time submission ember emberdata rendering bunch records emberdata fixtures table table sortable different fields using embercomputedsort certain circumstances described fiddle editing saving first record table changing sort field causes edited record duplicated stuck top table seems dropped array click events ignored", "num": "4273", "d": "1/2014"}, {"title": "emberobjectcreate nt remove listeners added via funcon property overwritten", "body": "ember nt remove listeners property requested overwritten example javascript var person emberobjectextend name emberon init function throw new error must provide name var dude personcreate name bilbo baggins uncaught typeerror object bilbo baggins method call probably asking hell would anyone well definitely edge casesbut thought document nonetheless", "num": "4268", "d": "1/2014"}, {"title": "rsvppromisecatch breaks", "body": "method promise objects breaks since reserved word unfortunately jsfiddle jsbin support anymore jsbin code javascript appindexview emberviewextend didinsertelement function var controller thisget controller note jsbin even flags reserved word propose moving back nonbreaking method also something familiar jquery users", "num": "4266", "d": "1/2014"}, {"title": "array sorting always working", "body": "hi guys im trying understand cases sortby working short demo bug building facebook style timeline app push payload store controllers content array sorting properly thank help", "num": "4264", "d": "1/2014"}, {"title": "hashchange event firefox nt use hashlocation geturl method", "body": "firefox latest version see hashchange event handler accesses locationhash directly causes hash url decoded url segments containing encoded slashes break routing fix need use var path selfgeturl instead var path locationhashsubstr hashlocationjs", "num": "4262", "d": "1/2014"}, {"title": "route serialization unmaterialized model", "body": "try create fiddle later late wanted brain dump go bed parentchild model relationship parent template linktoing child child materialized yet function called child route via argument actually promise actual record causing problem overriding child slug function case action clicking link still works app still redirects proper route hover link intended url instead", "num": "4260", "d": "1/2014"}, {"title": "convenient way observe url changes", "body": "currently sitting use case requires run code url changes current solution problem would look application controllers currentpath property however two issues approach currentpath nt return current path returns current route ie somethingsomething somethingsomething currentpath returns current route return value two paths identical articleemberjsisaawesomeframework articleicanhazmoreemberjs searched internet thin struggling find convenient way get current path observable way understand ca nt change names ca nt help feel properties application controller something like property value currentpath articleicanhazmoreemberjs currentroute articleshow feature request could currentpathname property application controller thoughts", "num": "4253", "d": "1/2014"}, {"title": "super must called outlet observer", "body": "custom view outlet observer break second render unless thissuper called inside observer jsbin example sure whether bug however seems counterintuitive also expected behavior definitely needs documented somewhere", "num": "4250", "d": "1/2014"}, {"title": "route viewname high precedence calling render name parameter route", "body": "demonstrated routes rendered view since extending route explicitly rendering using name parameter sources controller view template derived render method able gleam tests code following options hash view foo controller bar name parameter either template view name explicitly defined route properties etc route defaults resolved using demonstrated fiddle respect order higher precedence name parameter", "num": "4248", "d": "1/2014"}, {"title": "queryparamsnew refresh true utilized nonnoop transitions", "body": "following routes query param defined listcontroller transition listitem sortbydate list sortbyname queryparamsdidchange triggered attach failing test", "num": "4245", "d": "1/2014"}, {"title": "queryparamsnew feature breaks", "body": "hey discussed feature breaks run example useless fails simplest form query params sure helps stacktrace build method let know need extra details assistance thanks", "num": "4239", "d": "1/2014"}, {"title": "adding templatename document emberroute", "body": "used project time yet property emberroute found thing source code property useful route needs different controller ember source glad see defined properties well documented still use another thing already used see emberroute source useful route need different template view example router file define route case route display form page create template obviously default controller template route configure route like coffeescript apptaskeditroute emrouteextend controllername taskform rendertemplate gt render taskform see need override use custom template tried ember notify ca nt find view course nt defined tried use works like think defining non coc template common requirement controller view suggest add property also document let devleopers know actually already used source code", "num": "4234", "d": "1/2014"}, {"title": "linkto tagname div respond mobile safari", "body": "used ember phonegap create ios app one problem found using linkto set nonlink tag like div link redirected browsers like android browser desktop chrome safari issue nt happen jsbin example", "num": "4232", "d": "1/2014"}, {"title": "iterdeps emberjs canary calls propertydidchange attributes used embercomputedsort", "body": "seeing errors eventually index range push update emberdata model use conjunction embercomputedsort appparty dsmodelextend members dshasmany user inverse partymemberships sortedmembers embercomputedsort members membersorting membersorting name appuser dsmodelextend name dsattr string partymemberships dshasmany party inverse members send update data id partymemberships array storeupdate appuser data name attribute sorting makes metadeps data function iterdeps finally iterdeps calls propertydidchange name user instance seemingly problem partymembershipsarray grows update shrinks say parties eventuallly see index range error partymembershiparray observers notified flashchanges called selectively filter call everything runs smoothly obviously going work hard time setting jsfiddle might left critical details description offer screensharing session see stacktraces could even record brief screencast helps", "num": "4231", "d": "1/2014"}, {"title": "router bug aborting transition beforemodel", "body": "click posts jsbin click post comments update think comments update scenario ie commentsroute model hook called parent route model changed think happening transition aborted halfway router thinks comments model still valid invalidated machty bug stupid cc briangates", "num": "4230", "d": "1/2014"}, {"title": "ember jquery tests nt pass jquery update", "body": "", "num": "4228", "d": "1/2014"}, {"title": "emberarray documentation link emberarrayproxy", "body": "spent whole lot time searching add objects array observable manner emberarray documentation link emberarrayproxy words goes emberobject emberobjectproxy etc well", "num": "4225", "d": "1/2014"}, {"title": "fails attempting remove timer window object", "body": "related relevant line fails attempting remove timers ie console spits object nt support property method using objectprototypetostringcall probably used support", "num": "4222", "d": "1/2014"}, {"title": "nt assert render called matching controller inline template", "body": "recent commits make helper throw error view template looked name container however nt account case controller matches given name template provided inline handy way separate units logic nt make sense main controller nt common template makes components unusable", "num": "4221", "d": "1/2014"}, {"title": "proposition conventionalize resource index route model hook", "body": "like defining show routes ember conventionalized would nice conventionalize index route well instance following pattern conventionalized remove hook js approutermap function thisresource posts thisresource post path post postid apppostroute emberrouteextend model function params return thisstorefind post paramspostid however still needs define hook could understand conventionalizing finding records removing hook would strong opinion potentially makes sense create function must passed argument would currently look like proposing conventionalize pattern would need hook proposition actually proposing two things could submit initial pull request always create indexroute subroute defining resource nt pass empty function would create default hook prospectively related conventionalize indexroute hook function like routes id dynamic segments introducing common hook behavior current routes like thus removing hook route looks like course allows us omit definition altogether", "num": "4218", "d": "1/2014"}, {"title": "render model working", "body": "hi followed guide render helper nt render model data cloth handlebar html test name name index handlebar html render cloth cloth js javascript windowapp emberapplicationcreate console get undefined printed getting html controller working expecting html controller working", "num": "4216", "d": "1/2014"}, {"title": "binding scope issue within handlebars template", "body": "rendering bound property page binding value control always work expected per jsbin even stranger wrap tags problem longer occurs", "num": "4215", "d": "1/2014"}, {"title": "filter object regression", "body": "get following error message loading app filter null object emberjs line character application works fine using ember also use jquery latest beta emberdata", "num": "4211", "d": "1/2014"}, {"title": "textsupport coupled targetactionsupport", "body": "mixed inherits mixes provides works fine means wo nt work either inherit least declare documentation required provided latter mixin", "num": "4206", "d": "1/2014"}, {"title": "firefox decodes url path", "body": "related fix queryparams path section query param url encoded firefox decode cause path get converted break routing firefox behavior correct encoded route entered ember immediately transitions decoded path cause error shows difference firefox chrome others", "num": "4205", "d": "1/2014"}, {"title": "breaking change router since", "body": "hi since upgraded app seems broken getting following error error visit list routes following routestructure js approutermap function thisresource login everything works excepted except since visit either lobbylist playerlist get error happens pageload via linkto routes nothing special besides modelhook like remove modelhook nt get error anymore obviously neither get models template anyone idea suddenly happening suspect routingstructure might ember intended routerjs actually checking routes make sense though structure served well since early days pods thing since years routes wrong time unintended breaking change", "num": "4201", "d": "1/2014"}, {"title": "regression actively generated controllers needs query params", "body": "ember version seems like recently something changed likely queryparams related given url autogenerated specified needs results also solution nt really end world simply create rather expecting auto generated downside file basically provides value kicker pre materializing controllers downside creating controllers generated user designed much soon means going created without model cause unneeded unexpected change events effected initial app boot unfortunate working remove extra churn", "num": "4200", "d": "1/2014"}, {"title": "required hit default route visit another", "body": "redirect sends people default route come root integration test route well dom rendered reflects default template would serve said test app requires hit another route dom rendered still default like default redirect testing still possible visit route first either test dual visit first seems hacky best wanted throw possible bug anyone aware yet test setup helper", "num": "4199", "d": "1/2014"}, {"title": "emberreducecomputed fire observers cases", "body": "seems embercomputedmin array smallest element array gets removed observers fired tested ember correctly fired however new element array appears smaller previous min value following snippet var oemberobjectextend b embercomputedmin var oocreate emberarrayproxycreate content consolelog oget b oget c oget pushobject consolelog oget b oget c oget removeat consolelog oget b oget c print console instead prints ie removeat b changed c dependent b invalidated surprisingly arriving b c condition", "num": "4197", "d": "1/2014"}, {"title": "legacy loadingroute documentation wrong implementing code causes deprecation warning", "body": "quite simple issue really follow legacy loadingroute documentation get following error found solution seems work correct probably update documentation thanks", "num": "4195", "d": "1/2014"}, {"title": "hidden input fields one way binded", "body": "hallo currently working form needed hidden field due custom select form would code problem change value hidden field subject property changed however change subject field ways say text field value hidden field change tested beta", "num": "4194", "d": "1/2014"}, {"title": "multiple inheritance multiple method implementation conflict", "body": "use case javascript var routemixina emmixincreate setupcontroller function controller context consolelog routemixina setupcontroller var routemixinb emmixincreate setupcontroller function controller context consolelog routemixinb setupcontroller var myroute emrouteextend routemixina routemixinb essentially multiple mixins designed plugged routes order easily give different capabilities recurring throughout application reusable manner obviously mixins need interact framework hooks events ember puts disposal far events concerned much issue comes multiple inheritance example expect work javascript var routemixina emmixincreate initthings function consolelog routemixina initthings init var routemixinb emmixincreate initstuff function consolelog routemixinb initstuff init displays routemixina initthings routemixinb initstuff emrouteextend routemixina routemixinb create take opportunity report extremely unfortunate ember expose events eg etc alone think dozen events eg etc currently exist simple rigid hooks big issue however comes merging multiple mixins implement methods initial example running nt necessarily expect two implementations run sequentially although would make lot sense lot cases could think something similar done least expect framework tell conflicts lead ambiguity code take look handled well established environments supporting multiple inheritance eg c see customary warn user conflicts enable modularity amp code isolation suggest two things stretch list supported events core objects emroute emcontroller etc find way let user combine mixins implementoverride methods", "num": "4193", "d": "1/2014"}, {"title": "globstar route single slash matching star nt working", "body": "routes couple corresponding route classes problem arises try type url dir directly browser address bar expect taken route instead nothing seems happen even hook nt called strangely enough globbing anything except single slash works fine eg navigating work reiterate problem navigating via browser address bar clicking links using works fine since issue fixed anyway case use v patched manually issue bugfix ie diff unfortunately ca nt provide working jsbin example since directly typing urls nt seem possible", "num": "4190", "d": "1/2014"}, {"title": "incrementproperty parseint actual incrementing", "body": "situation value changed incrementdecrement buttons input incrementproperty method become useless nt actual value type conversion concatenate increment value", "num": "4187", "d": "1/2014"}, {"title": "boolean subexpressions rendering content", "body": "returning boolean value subexpression nt seem render content raised first handlebars repo said stemmed ember example helper looks json configuration file called code configjs import config appconfig emberhandlebarsregisterhelper config function value options emberassert must pass string value ex config socialfacebook optionstypes string optionsfn return configget value optionsfn optionsinverse return configget value appconfigjs var config emberobjectextend truevalue true config configcreate export default config doesntworkhbs doesworkhbs missing something helper jsfiddle running", "num": "4174", "d": "1/2014"}, {"title": "updating computed property nt refresh handlebars bindings", "body": "think updating computed property via helper nt refresh handlebars bindings component see stepbystep reproduction expectedactual output", "num": "4173", "d": "1/2014"}, {"title": "oops", "body": "", "num": "4169", "d": "1/2014"}, {"title": "issue emberset upgrade", "body": "getting following error upgrade component nt show stack trace information point right direction", "num": "4168", "d": "1/2014"}, {"title": "issue upgrading", "body": "upgraded ember getting following error thought would nt get failures going surprised error message nt point great direction something", "num": "4167", "d": "1/2014"}, {"title": "precompiling template component context properties", "body": "proper way getting context rendering linkto layout emberhandlebarscompile render reference context properties", "num": "4165", "d": "1/2014"}, {"title": "restore user window position upon using back button", "body": "upon pressing back button invoking ember restore user window position particularly long pages links could useful browsers natively operate think replicating feature would beneficial someone point right direction happy create pr however nt know whereif ember detects user pressing back button", "num": "4164", "d": "1/2014"}, {"title": "observer computed property nt fire get calling set", "body": "javascript usestrict windowapp emberapplicationcreate fullnamechanged function never called unless change code think ember recognize get function getting called anywhere", "num": "4163", "d": "1/2014"}, {"title": "parentcontroller eachview render", "body": "parentcontroller setting properly itemcontroller instances created helper use inside render template itemcontroller target correct", "num": "4162", "d": "1/2014"}, {"title": "model nested object", "body": "hello tried almost anything get work think missing something somewhere using ember json looks somehow like define seller model javascript appnote dsmodelextend name dsattr string seller dsbelongsto appseller embedded always appseller dsmodelextend name dsattr string nt work", "num": "4161", "d": "1/2014"}, {"title": "error delete persist record", "body": "hi tried delete persist record got error error attempted handle event willcommit state rootdeletedsaved code var tempmodel thisstoregetbyid project tempid tempmodel tempmodeldeleterecord tempmodelsave tempmodeldestroyrecord use lasted canary version", "num": "4160", "d": "1/2014"}, {"title": "queryparamsnew error paramsfor", "body": "hi get error paramsfor line sometimes params emberobject get assertion failed must use emberset access property object object happened transition level ie router resource", "num": "4155", "d": "1/2014"}, {"title": "linkto nt support nested routing", "body": "using resource multiple routes linkto function correctly javascript thisresource players path players function thisroute show path playerid thisresource nodes path nodes function thisroute show path nodeid thisresource players path withplayers function thisroute show path playerid thisresource garage path garage function thisresource nodes path withnodes function thisroute show path nodeid garage route viewing node thus clicking linkto nodes results transition garagewithnodes route believe linkto garagenodesindex go route nodes nodesindex current circumvent reordering routes putting least specific routes bottom thus last defining nodes garagewithnodes illustrated javascript thisresource garage path garage function thisresource nodes path withnodes function thisroute show path nodeid thisresource nodes path nodes function thisroute show path nodeid thisresource players path withplayers function thisroute show path playerid thisresource players path players function thisroute show path playerid", "num": "4154", "d": "1/2014"}, {"title": "unicode routes", "body": "using simple application appears unicode routes supported using history api routing mostly ask curiosity working jashkenasbackbone nt actually use case wanted get opinions developers since likely ember come future html home ascii app emberapplicationcreate approuterreopen location history approutermap function thisresource home path thisresource ascii path ascii thisresource unicode path", "num": "4152", "d": "1/2014"}, {"title": "container method nt normalize", "body": "project use uses custom resolver one templates render another template using helper renders template throws error assertion fails next line successfully finds template think due fact method nt normalize argument", "num": "4151", "d": "1/2014"}, {"title": "emberselect loses selection updating content array objects", "body": "content array strings one update content repeatedly things work fine content array objects first update breaks selection still reports correct value rendered correctly fiddle written realize may duplicate", "num": "4150", "d": "1/2014"}, {"title": "emberselect triggering observer value change value still undefined", "body": "emberselect observer gets triggered value actually fetched gives error similar example code exposes error seems happening block contains select box think makes take bit longer hence undefined nature value fixed locally changing line following happy submit pull request fix nt know whether test needed nt lot time create failing test moment", "num": "4147", "d": "1/2014"}, {"title": "embersource gem includes ember", "body": "could confirm version", "num": "4146", "d": "1/2014"}, {"title": "emberbind optionally take target object nt global namespace", "body": "instance emberobject one use addobserver without target object global namespace emberbind seems work differently requiring target string references object global namespace seems like setting manual bindings via emberbind possible without using target object global namespace example emberbind sourceobject sourceproperty targetobject targetproperty emberbindingoneway sourceobject sourceproperty targetobject targetproperty", "num": "4145", "d": "1/2014"}, {"title": "add emberrunsetinterval", "body": "see", "num": "4143", "d": "1/2014"}, {"title": "expose", "body": "", "num": "4142", "d": "1/2014"}, {"title": "remove ruby dependency", "body": "sure would fun leave ruby behind dependency", "num": "4141", "d": "1/2014"}, {"title": "arrayany always returns false array contains undefined value", "body": "current return false thisnotset undefined works course", "num": "4139", "d": "1/2014"}, {"title": "queryparamsnew global params persist raw url changes", "body": "url changes without regular anchor tag query parameters still persist eg url user clicks url incorrectly becomes cc machty", "num": "4138", "d": "1/2014"}, {"title": "collectionview work itemcontroller", "body": "provided oscarvgg see kill hacks refactor collection view try remove need eachview", "num": "4137", "d": "1/2014"}, {"title": "renderbuffer nt reset", "body": "uses private variable handle classes current element gets reset upon tag pushed classes become additive subsequent tags getting classes previous tags", "num": "4135", "d": "1/2014"}, {"title": "embercomputedinstance", "body": "like discuss start implementing initialize new instance inside class without using init example could achieved way think", "num": "4134", "d": "1/2014"}, {"title": "support overly specific linktotransitionto args", "body": "fiddle basically given try link route linkto trunk uncaught error route named trunkindex linkto trunkbranchleaf uncaught error route named trunkbranchleafindex", "num": "4132", "d": "1/2014"}, {"title": "lookup table error texts", "body": "complexity mounting would nt make sense move alle inline error texts seperate error lookup table also easier ever want internationalization core", "num": "4131", "d": "1/2014"}, {"title": "requiresjs fails ember", "body": "requirejs used work find ember fails ember changed would cause failure thanks", "num": "4119", "d": "1/2014"}, {"title": "feature queryparamsnew linkto helper determine active state correctly page refresh", "body": "checking new query params feature noticed bug reproduce go click page number say page note page highlighted refresh page note page highlighted although results correct visiting resulting url step directly yields result", "num": "4118", "d": "1/2014"}, {"title": "faulty guide documentation emberjs website", "body": "make quick new ember really excited learn incredibly frustrating trying follow guide video work current versions supplied starter kit lot problems figuring get emberdata emberstates play along please please please fix want propagate framework must consistent uptodate documentation guides", "num": "4116", "d": "1/2014"}, {"title": "actionhandler missing documentation send method", "body": "documentation send function missing site confused trying learn ember", "num": "4115", "d": "1/2014"}, {"title": "reducedcomputed sorted array controllers nt work well together removing item", "body": "small fiddle reproducing bug hjdivad seems like alley", "num": "4113", "d": "1/2014"}, {"title": "promise resolved", "body": "ember emberdata handlebars jquery got something like following code coffeescript works browsers funny thing debug put breakpoint findbyid creates promise findbyid called storefind works seems like data race sort anyone experienced", "num": "4111", "d": "1/2014"}, {"title": "unable load handlebarsruntime library", "body": "hey using along build everything grunt gruntneuter files everything works well soon want upgrade version even get following error message caused lines code use everything fine works nt need full library project prefer stay microlib still possible also raised issue project told raise issue hope someone able help", "num": "4110", "d": "1/2014"}, {"title": "bad error message without ember data", "body": "navigating generated route without ember data error message appears rather poor merely store found rather confusing", "num": "4109", "d": "1/2014"}, {"title": "nested controllers target parentcontroller set parents", "body": "scenario controllerscompanyindexjs controllerscompanyjs routescompanyindexjs routescompanyjs templatescompanyhbs templatescompanyindexhbs action triggered within within companies outlet actions likely bubble", "num": "4108", "d": "1/2014"}, {"title": "consider nested controllers target parentcontroller set parents", "body": "scenario controllerscompanyindexjs controllerscompanyjs routescompanyindexjs routescompanyjs templatescompanyhbs templatescompanyindexhbs action triggered within within companies outlet actions likely bubble", "num": "4107", "d": "1/2014"}, {"title": "elementid binding issue", "body": "dynamically binding using working working see works fine try sourcing ember instead js optionally delete starts working working working latest beta working latest canary realize perhaps ways maybe set init something like would assume work expected", "num": "4106", "d": "1/2014"}, {"title": "model shared parent route unavailable aborting transition", "body": "hard summarize title created jsbin illustrate problem various versions ember latest problem create route called p parent nest sibling routes b route p model b use route b depends state route sets route b beforemodel hook check work done needs done transition route route checks route p model beforemodel hook expected route p model available route beforemodel hook actual route p model route beforemodel hook works regression first noticed recent beta please let know provide info clarify anything help debug", "num": "4105", "d": "1/2014"}, {"title": "embercomponent use data property going sad", "body": "given component without template collide internal usage likely several collisions like", "num": "4102", "d": "1/2014"}, {"title": "optiongrouppath breaks emberselect", "body": "jsfiddle demonstrates problem", "num": "4099", "d": "1/2014"}, {"title": "history location needs support url hashfragment", "body": "history location router app gets immediately stripped prevents native browser scrolltoanchor behavior obviously ca nt support via hash location definitely support history cc mmun", "num": "4098", "d": "1/2014"}, {"title": "form submit working within component", "body": "hi run weird scenario components forms ca nt seem get form submit properly attach action submit form works add action save submit form element well action save submit button well jsbin showing relevant code without action submit button show nt working action form reason issue expect action form handle submissions require action button well additionally attaching action submit button nt completely handle ux scenario means pressing enter filling field nt work following originally expected work", "num": "4084", "d": "1/2014"}, {"title": "route disconnectoutlet able accept string sensible defaults", "body": "right pass hardtoremember options hash able pass string normalize desired options hash passed string interpreted name outlet want clear wrapping feature flag seems like overkill seems like brainer", "num": "4083", "d": "1/2014"}, {"title": "emcomputedfilterby broken", "body": "emcomputedfilterby updating array correctly updating array length actual content array remains unchanged", "num": "4076", "d": "1/2014"}, {"title": "animation support status", "body": "know topic discussed length past sure current status animation support thought inquire wrote library using works really well want make changes essentially change js function animateout return oldviewbeforeanimateout oldviewanimateout oldviewafteranimateout oldviewremovefromdom function animatein return newviewaddtodom newviewbeforeanimatein newviewanimatein newviewafteranimatein animateoutthen animatein niceties could added top would baseline could built upon official support animations would really awesome think much needed personally huge fan emberanimatedoutlet use different methods nt support back button huge deal breaker actually wanted submit pr ember though however go work putting together pull request wanted know guys currently ideas animations would pull request even seriously considered", "num": "4071", "d": "1/2014"}, {"title": "minified emberjs behaving differently nonminified", "body": "trying debug hours ready ask help tl dr development amp production versions including minified version buildsemberjscom emberjs working perfectly minified via uglifier using emberrails experiencing js exceptions expect initial exception causing one first one trace insightprodjs code seems causing view class computed coffee insightmetriccomponentview emberviewextend classnamebindings templateclassname templatename gt get contentinfotype typeof get contentinfotype object metricschart else metrics get contentinfotype else metricsloading property contentinfotype templateclassname gt get templatename replace property templatename templatechanged gt rerender observes templatename even weirder thing view works perfectly fine unless template loaded access way help would appreciated issue actually emberrails move thanks", "num": "4070", "d": "1/2014"}, {"title": "feature request allow nested components inherit scope selectively parent components even using yield", "body": "background ember group stackoverflow", "num": "4056", "d": "1/2014"}, {"title": "queryparams input valuefoo queryparams foo strange", "body": "needs treat string coerce true", "num": "4054", "d": "1/2014"}, {"title": "features pending go decision", "body": "issue limited new features master enabled default current beta cycle feature checked enabled default next beta cycle immediately canary icebox cc machty lt rewritten pending go x enabled canary x x x comments purged periodically date updated", "num": "4052", "d": "1/2014"}, {"title": "emberrunproxy emberrunbind", "body": "", "num": "4051", "d": "1/2014"}, {"title": "controller needs parentcontroller set", "body": "", "num": "4050", "d": "1/2014"}, {"title": "canary build queryparamsnew broken vs old queryparams", "body": "hi queryparams feature working great recent canary build seems feature replaced following error happening", "num": "4048", "d": "1/2014"}, {"title": "proper way expose run loop status", "body": "using cucumber test ember apps one things noticed cucumbercapybara sometimes get ahead ember things run loop finishes especially poltergeistphantomjs much less often selenium worked around tagging cucumber steps step calls cucumber helper method ultimately waits run loop complete relevant ember stuff last evaluatescript ruby def waitforemberrunlooptocomplete patiently waitforpagetoload end patiently waitforhtmlelementonpage end patiently return unless pagehascss emberapplication end means seconds return pageevaluatescript undefined return pageevaluatescript body hasclass ajaxquiet amp amp body hasclass applicationready amp amp typeof ember object amp amp emberrunhasscheduledtimers amp amp emberruncurrentrunloop sleep end end discovered using little uncomfortable dig around deep ember check something public friendlier would nice determine ember finished asked would nice exposed world happy put together pr wanted post get feedback good idea right way start working", "num": "4047", "d": "1/2014"}, {"title": "number field extended text field nt react size changes", "body": "found example nt seem work change field type generated dom text works like charm", "num": "4046", "d": "1/2014"}, {"title": "appending view iframe element nt trigger didinsertelement", "body": "basically append view iframe view never transitions state thus never triggering hook use case print different document different styles current application loop checking root document eventually goes document variable inner iframe null exits loop nt know tackle though thing document executing append nt document view appended code used append view actually ends correctly rendered correct state", "num": "4043", "d": "1/2014"}, {"title": "transitions retryable", "body": "split see discussion", "num": "4042", "d": "1/2014"}, {"title": "query params needs support", "body": "new implementation presently ignores query params active logic", "num": "4041", "d": "1/2014"}, {"title": "nested component binding working properly", "body": "similar issue tried issue still resolved especially similiar kaspertidemann typeahead component amp also writing typeaheadeditor component finegrained amp containing typeahead component inside code inner component typeahead time code runs ca nt reference context anymore however typeahead outside typeaheadeditor runs fine also selfget somevalue outside render hash amp inside emberrun block would run anything fix missing common knowledge", "num": "4039", "d": "1/2014"}, {"title": "authentication lifecycle support", "body": "hey since applications need authentication support nt make sense make users find path handle find repeating code handling client side authn highlights thinking provide authn token based support managing authn flow freedom see expect promise login action server implemented user raise event error code default occur let user choose codes suite custom needs generic easy way redirect login form route needs take care authentication store credentials localstorage let user overrides easily custom needs cookie based maybe support even case user reauthenticate good reason totally support anything related authn feel free close issue comments welcome understand whether possible generalize enough support user needs still provide value box thanks", "num": "4035", "d": "1/2014"}, {"title": "support emberdefineproperties", "body": "emberdefineproperties supported corollary emberdefineproperty see noticed lack defineproperties starting work issue", "num": "4032", "d": "1/2014"}, {"body": "think regex approach probably fine since anyone explicitly declaring error loading routes substates would nt opting explicit routes treated findable substates case slowrejecting promises", "d": "1/2014"}, {"body": "think agree expecting app code use seems overkill", "d": "1/2014"}, {"body": "still work deprecation warning using possible via instead", "d": "1/2014"}, {"body": "today tomorrow ember tooling safe transpile feel adventurous add aliases keeping implementation parity spec see", "d": "1/2014"}, {"body": "pierreb couple issues jsbin firstly use use custom sorting function add computed property models secondly affect used sort contents array controller leaving untouched different function called array generate new array sorted", "d": "1/2014"}, {"body": "mmun thx reply never heard arrangedcontent finally using fixed problem think talking arrangedcontent ember guide really useful", "d": "1/2014"}, {"body": "problem anchor link actually visited state never set problem styling links", "d": "1/2014"}, {"body": "suspect might problem solved resource promise defer completed promise continue rendering", "d": "1/2014"}, {"body": "martinelvar ember typical pattern url change would invoke model hook route passing along dynamic segments params argument reason approach nt work use case try reserve github bugs prs questions stack overflow feature requestsproposals discussemberjscom going close feel free post crosslink somewhere continue discussion", "d": "1/2014"}, {"body": "martinelvar appears undocumented answer historical purposes use didtransition hook router", "d": "1/2014"}, {"body": "much appreciated thank", "d": "1/2014"}, {"body": "heart thank", "d": "1/2014"}, {"body": "hi zaius overwriting private method think perfectly acceptable things break overwrite private methods", "d": "1/2014"}, {"body": "whoops yep completely right already currentviewdidchange defined outletview nt even think choice private method name might identical someone else since ca nt real private methods javascript maybe worth logging warning overriding method starting underscore overkill", "d": "1/2014"}, {"body": "gets fired noop transition test nt op since lging seems like bug changing qp nt causing model hook refire try take look tonight machty thoughts", "d": "1/2014"}, {"body": "waiting hear whether going final api opting transition bug might nonissue put configuration elsewhere", "d": "1/2014"}, {"body": "nt already exist", "d": "1/2014"}, {"body": "yes mean adding documentation like controllername line viewname line think many developers still nt know", "d": "1/2014"}, {"body": "official document sure use stable although use source", "d": "1/2014"}, {"body": "fairly certain documented mind submitting documentation pr", "d": "1/2014"}, {"body": "glad", "d": "1/2014"}, {"body": "english main language sure documentation well please check glad hear suggestions", "d": "1/2014"}, {"body": "unfortunately touch devices things like divs nt receive synthesized clicks interestingly neither anchor tag one solutions one use often since synthesized click problem unsure ember core normalize least mobile touch guide calls might help", "d": "1/2014"}, {"body": "fwoeck seeing canary", "d": "1/2014"}, {"body": "sounds like sort thing may resolved", "d": "1/2014"}, {"body": "hjdivad right happens current canary builds", "d": "1/2014"}, {"body": "simpler example", "d": "1/2014"}, {"body": "look today wanted find browser using", "d": "1/2014"}, {"body": "using chrome tested firefox imo browser issue assertion test checks jquery one given versions assertion failed ember views require jquery", "d": "1/2014"}, {"body": "fixed jquery allowed", "d": "1/2014"}, {"body": "fix merged three branches published cut", "d": "1/2014"}, {"body": "sweet thanks", "d": "1/2014"}, {"body": "landongn good catch thanks reporting fixing also meantime able use builds listed travis catches gets published", "d": "1/2014"}, {"body": "submitted fix deprecation using sorts things since landed think deprecated nt thought form", "d": "1/2014"}, {"body": "interesting know could specify attribute helper think like approach since apparent really going thanks", "d": "1/2014"}, {"body": "slindberg new feature enabled series see details implementation", "d": "1/2014"}, {"body": "may wrong really wonder hook really often looks like think tend think commonly used getting parent route model directly without query eg agree", "d": "1/2014"}, {"body": "lcoq probably right pattern surfaced within course nt much data go seen present app ember docs demostutorials feeling would strong convention might work accessible", "d": "1/2014"}, {"body": "possible provide jsbin jsfiddle", "d": "1/2014"}, {"body": "cloth controller may want array controller nt believe bug stackoverflow better venue asking help provide fiddle jsbin demonstrating bug gladly reopen", "d": "1/2014"}, {"body": "hi fiddle", "d": "1/2014"}, {"body": "render connects template view controller want model added automatically likely using route otherwise context template needs property corresponds model would like use", "d": "1/2014"}, {"body": "basically breaking version would result html like following html false false believe since html invalid ca nt text inside like metamorph tags included properly generated output removed browser educated guess though", "d": "1/2014"}, {"body": "rjackson yes right definitely problem invalid html wagenet would nice close issue", "d": "1/2014"}, {"body": "provide example jsbin showing issue", "d": "1/2014"}, {"body": "tell happens loading emberjs code nt run enough include emberjs html file watch blow", "d": "1/2014"}, {"body": "skinney thank reporting resolved next beta include fix use beta build", "d": "1/2014"}, {"body": "rereading think wrote bug incorrectly nt expects expects sendaction instance method nt define thing really sorry jumped straight conclusion fully describing problem", "d": "1/2014"}, {"body": "jamesarosen sent resolve imho actually part api two things closely linked essentially sugar top anyways moving means include like initial example things work", "d": "1/2014"}, {"body": "linkto look like", "d": "1/2014"}, {"body": "looks pretty normal using hack get working bootstrap highly doubt source error like said thing happens pageload doubt something linkto", "d": "1/2014"}, {"body": "might related updates way container normalizes lookups simply guess point dimitrisuls could setup example project could take look apologize inconvenience doubt able guess solution without digging good example", "d": "1/2014"}, {"body": "pretty sure already fixed reopen open demonstrate breaking jsbin", "d": "1/2014"}, {"body": "rjackson machty still broken latest emberjs create jsbin soon", "d": "1/2014"}, {"body": "dimitrisuls afraid nt much go track could replicate stand alone project test", "d": "1/2014"}, {"body": "rjackson yes trying create simple jsbin nt seem able break let try longer", "d": "1/2014"}, {"body": "dimitrisuls awesome thank sorry hassle unsure able track otherwise", "d": "1/2014"}, {"body": "rjackson machty ok tracked source error jsbin shows basically always using shorthand lobby player etc routename instead appending index always used work past since noderoutes nt dynamic segments seems error since perhaps intended", "d": "1/2014"}, {"body": "dimitrisuls thank much tracking seem like bug easy track", "d": "1/2014"}, {"body": "warning added part query params rewrite dimitrisuls actually two different routes one see screenshot ember inspector listing routes jsbin note references accept parameters machty believe likely reopen investigation", "d": "1/2014"}, {"body": "rjackson yes understand different routes lobbyroute nt take parameter indeed wrong looong time sort still used work past breaking change keep way least documented release notes orso", "d": "1/2014"}, {"body": "specifying lobby work seems like regression", "d": "1/2014"}, {"body": "ahh", "d": "1/2014"}, {"body": "machty ok good luck squashing bug mr router", "d": "1/2014"}, {"body": "routedriven controller nt think queryparams related", "d": "1/2014"}, {"body": "machty correct believe believe something else changed funky end believe concern early materialization still accurate maybe nt example though bisect turned painful app using several bugs introduced later corrected work try create reduced example tonight", "d": "1/2014"}, {"body": "ran exact issue attempting use query params first time get error simply adding feature flag without adding additional code work creating jsbin example helps setup stefanpenner described one bit context nested routedriven controller autogenerated controller farther route hierarchy template route base hierarchy links nested route without query param sub expression navigating base route hierarchy generates error gets thrown within helper trying look queryparams controllers route chain", "d": "1/2014"}, {"body": "confirm queryparams related due linkto post thoughts shortly", "d": "1/2014"}, {"body": "closed slindberg able use query params heard reports beta wan na make sure actually case nt make sense", "d": "1/2014"}, {"body": "believe closed believe reason people seeing publishing beta ember bower botched left feature flags reopen someone finds betastable", "d": "1/2014"}, {"body": "machty thanks breaux", "d": "1/2014"}, {"body": "rjackson believe feature flagged feature summary feature landed start routing tests first visit called would allow app begin routing location first visit specifies inline happens user url navigates reloads page", "d": "1/2014"}, {"body": "stefanpenner feature enabled default thus flag removed call first time router booted url specified directly note never call application instance deferred state nt boot also ember version using", "d": "1/2014"}, {"body": "actually love lazy routing feature big reason upgraded trying figure testing bug feature something w redirect", "d": "1/2014"}, {"body": "toranb took time replicate jsbin something definitely seems amiss delve bit deeper tonight meantime could confirm basically described", "d": "1/2014"}, {"body": "found today thanks grinding right away", "d": "1/2014"}, {"body": "tracked bug implementation feature basically upon first triggering twice root url triggered normal application boot process second time direct us desired url details fixing pr", "d": "1/2014"}, {"body": "wow glad turned legit bug thanks getting pr quick guys proof community best around", "d": "1/2014"}, {"body": "toranb thanks finding", "d": "1/2014"}, {"body": "toranb test like additional confirmationsanity check prior shipping", "d": "1/2014"}, {"body": "see tests passing jsfiddle reason still required actually get third route default route teardown appreset like difference routes added emberrunnext testing purposes required also note nt route defined specifically", "d": "1/2014"}, {"body": "think need redirect hook nt cause failure call essentially wait pending run loops replicated example jsbin seems working properly update tweak force failure", "d": "1/2014"}, {"body": "rjackson thanks looking emberrunnext causing bug app specifically seems still fixed valid bug though correct shipit", "d": "1/2014"}, {"body": "definitely bug routing started calling second time correct url fixed tldr previously impossible route directly url without first hitting toranb thanks reporting issue", "d": "1/2014"}, {"body": "thanks blazing fast fix recheckwithme", "d": "1/2014"}, {"body": "hjdivad take look", "d": "1/2014"}, {"body": "wagenet late mmun already come rescue", "d": "1/2014"}, {"body": "howwhy trying change subject changing input field nt really work way", "d": "1/2014"}, {"body": "want custom styling select form however currently possible one work around make custom javascript markup still want save value inside input field whole bunch reason example selection", "d": "1/2014"}, {"body": "ah want take approach use jquery plugin writes value input hidden field nt going work ember world nt really bug nt want integrate jquery plugin find right hook plugin value changes call subject property going automatically picked make dom change input element way property wo nt get updated went modify text node got output", "d": "1/2014"}, {"body": "herriau mixins become part inheritance hierarchy mixins base classes call would able combine multiple mixins provide functionality method get fragile though would recommend sparingly suggestion triggering events routes think interesting existing overridable methods methods events must implementation support lifecycle routes b could create ambiguous behavior multiple functions ran occurred specific use cases things would like accomplish current routes nt support suggestions api would like see let start discussion discussemberjscom generally keep github issues proposals feature suggestions tackled forum", "d": "1/2014"}, {"body": "lukemelia could elaborate exactly solves issue let rephrase problem slightly different example use package provides routemixina use package b different distributor provides routemixinb issue following line throw warning regarding implementation conflict end developer idea implementation details notified class system ember combining two mixins led conflict waste considerable amount time quest solve inevitable bugs stemming silent conflict realize two implementations overridden methods simply methods conflicting names please reopen issue", "d": "1/2014"}, {"body": "ember supports single inheritance adding mixins creates linear hierarchy super chain needed unfortunately without concept super unclear mixin subclass merely augmenting inherited functionality replacing entirely hope provided clarity please let us know still missing point otherwise seems like issue remain closed", "d": "1/2014"}, {"body": "oohh okay aware would call implementation previous mixin makes sense thank stefanpenner javascript foomixin embermixincreate init function thissuper call emobject init super chain consolelog foomixin init barmixin embermixincreate init function thissuper call foomixin init super chain consolelog barmixin init displays foomixin init barmixin init emobjectextend foomixin barmixin create maybe made little bit explicit documentation maybe missed mechanism explained", "d": "1/2014"}, {"body": "herriau totally agree maybe submit doc fix phrased way make sense iterate", "d": "1/2014"}, {"body": "likely actually bug likely also open issues", "d": "1/2014"}, {"body": "machty thoughts", "d": "1/2014"}, {"body": "imagine failing really need support ashakurov use case think reason weirdness actually handle stuff like slashes really refer important delimiter urls end star routes maximally greedy maybe making sense either way nt want support means making easier support arbitrarily ugly urls curious ran bug course building app", "d": "1/2014"}, {"body": "nt know star routes maximally greedy feature documented always used globbing everything end url star routes way unescaped slashes dynamic segments let describe use case working interface data storage system stores information chunks organized filesystemlike structure hence slashseparated paths strongly dislike idea escaped slashes cluttering urls way readable make things worse data storage system allows directories empty names therefore adjacent slashes must collapsed one unlike unix file paths words refers root refers directory named empty string root messy know work chance odd design changed time soon", "d": "1/2014"}, {"body": "closing favor pr", "d": "1/2014"}, {"body": "subexpressions going neutered htmlbars ready good news checked support bound subexpressions last weekend little lands master make sure whole world knows use new power responsibly", "d": "1/2014"}, {"body": "bindings seem working properly example expect updated differently", "d": "1/2014"}, {"body": "rjackson exactly try screen recording happens nt see bound component could ever get value since bound computed property matter set never becomes know binding would overwrite text input field also nt know nt happen either", "d": "1/2014"}, {"body": "msch browser also scenario rjackson video", "d": "1/2014"}, {"body": "stefanpenner chrome firefox safari exhibit mean scenario rjackson get behaviour video actual output jsfiddle video right correct behaviour expected output jsfiddle", "d": "1/2014"}, {"body": "confirm bug property becomes reference gets updated used directly template referenced one", "d": "1/2014"}, {"body": "msch think misunderstanding things work change value input sets input value property case propagates set input formatted total case set consider job done nt check see mutated property expectation whatever pass cp setter thing would returned getter case expectation true unfortunately checking mutation changes way would add huge level complexity nt want deal case make custom formatted input field actually checks field value reformats even sets property questions ask stack overflow", "d": "1/2014"}, {"body": "likely observing something meant observed way share code maybe quick google hangout something", "d": "1/2014"}, {"body": "hi stefanpenner sorry eating dinner let try see paste", "d": "1/2014"}, {"body": "stefanpenner problemo pasting whole thing extending scatter plot chart embercharts please excuse ugliness code bad hobbyist developer learning go coffeescript appportfolioscatterplotcomponent emberchartsscattercomponentextend properties haslegend false chosenportfolioid null bound template regextosearchbyportfolioid embercomputed new regexp portfolio id get chosenportfolioid property chosenportfolioid regextogetportfolioidfromstring portfolio id xvaluedisplayname expected risk yvaluedisplayname expected return selectedseedcolor appgraphcoloursget selectedcolour events click e get tooltip element parse box portfolio id emberchartstooltip ember chartfloattooltip grouplabelinfo emberchartstooltipchildren spantiplabel didinsertelement super one emberchartsupdated event gt graph rendered grab scatter point associated chosen portfolio one highlight css tied html id unless emberisempty get chosenportfolioid data get legenditems pointobject datafind obj gt get regextosearchbyportfolioid test objgroup pointselector pointobjectselector dotelement pointselector children pathdot functions jqueryelementishidden jqueryelement nonetest jqueryelementcss display getportfolioidfromtooltipbox portfolioidlabel portfolioidstring portfolioidlabel innerhtml portfolioid get regextogetportfolioidfromstring exec portfolioidstring clearexistinghighlights ember selectedportfoliographpoint attr id highlightelement element elementattr id selectedportfoliographpoint", "d": "1/2014"}, {"body": "suspect wan na try beta build let us know otherwise likely need info ca nt see anything obvious snippet maybe someone else", "d": "1/2014"}, {"body": "give shot tomorrow unfortunately go real job today", "d": "1/2014"}, {"body": "hi stefanpenner upgraded ember error disappeared really want upgrade changes guys made obviously ca nt app working using superbasic ember functionality nothing funky anywhere generally safe going beta going straight gets released proper", "d": "1/2014"}, {"body": "brandonparsons safe beta clearly safe release take extra care ensuring stable would suggest careful using feature flagged features beyond safe obvious somewhat unique situation run projects canary upgrade weekly rjackson nt plan cut new release address view options bug believe one one", "d": "1/2014"}, {"body": "really appreciate help stefanpenner", "d": "1/2014"}, {"body": "stefanpenner yes intend put release got little backed due security releases process yall would like monday along", "d": "1/2014"}, {"body": "rjackson lets aim monday release help ya", "d": "1/2014"}, {"body": "error message suggests need instantiate promises previously could create promise via directly error thrown code another library emberdata embereasyform etc recently updated documentation rsvp", "d": "1/2014"}, {"body": "looking something like supposed use", "d": "1/2014"}, {"body": "use new keyword like", "d": "1/2014"}, {"body": "actually constructor takes single callback function accepts parameter looked like passing directly constructor instead params callback function", "d": "1/2014"}, {"body": "naw using coffeescript adding fix", "d": "1/2014"}, {"body": "machty derp ca nt believe nt see end", "d": "1/2014"}, {"body": "thanks try something wrong general expected breakage true", "d": "1/2014"}, {"body": "brandonparsons general breakage agree case ambiguous rsvp prior versions could chosen use must use brings rsvp closer line promise spec", "d": "1/2014"}, {"body": "stefanpenner think maybe merits emberside stubbing emberrsvppromise support old way deprecation warning", "d": "1/2014"}, {"body": "posterity sake wanted note fix worked still thinking may need deprecation warning rather straight failure avoid surprises", "d": "1/2014"}, {"body": "actually also getting another error upgrade maybe warrants separate issue quite sure track one", "d": "1/2014"}, {"body": "brandonparsons please open separate issue second error see reproduce jsbin", "d": "1/2014"}, {"body": "machty quite sure yet reproduce component nt even show stacktrace", "d": "1/2014"}, {"body": "promise constructor working without new bug public api ember continued work rsvp constructor documented part ember", "d": "1/2014"}, {"body": "documented considered semver safe ember", "d": "1/2014"}, {"body": "alexmays perhaps missing point look via normal handlebars invocations working version jsbin", "d": "1/2014"}, {"body": "rjackson see example", "d": "1/2014"}, {"body": "working example", "d": "1/2014"}, {"body": "rjackson awesome thought tried jsbin thank much", "d": "1/2014"}, {"body": "alexmays problem", "d": "1/2014"}, {"body": "would hashlocation historylocation going close issue please file new pr ready questions implementation discuss irc emberdev forums", "d": "1/2014"}, {"body": "another example javascript usestrict windowapp emberapplicationcreate", "d": "1/2014"}, {"body": "design observers setup init default see explanation force setup init fix example think would need something like", "d": "1/2014"}, {"body": "closing seems desired behavior reopen suggested changes resolve", "d": "1/2014"}, {"body": "know desired behavior adding observers object check second comment issue get full code javascript appjohnaddobserver fullname function object alert objectget fullname appjohn firstname aladeen nt add following line addobserver observer nt work", "d": "1/2014"}, {"body": "u use function observes init get kick also u give properties kick init method", "d": "1/2014"}, {"body": "strange quick pass arraycontroller code lead believe work another thorough pass work", "d": "1/2014"}, {"body": "hit appears issue code fiddle differences templates template omits itemcontroller within differences controllers name properties controller specifies itemcontroller explicitly results itemcontroller specified template objectcontroller parent set would expect arraycontroller itemcontroller specified arraycontroller objectcontroller parent set application perhaps using arraycontroller parent expect set arraycontroller example also seems specify itemcontroller affects whether arraycontroller underlying array model controller see tt property arraycontrollers least say violates principle least surprise specify itemcontroller surely nt radically change considered parent objectcontroller arraycontroller considers array", "d": "1/2014"}, {"body": "think bug itemcontroller specified arraycontroller helper used itemcontroller set arraycontroller instance", "d": "1/2014"}, {"body": "hmm tried adding test exercise use case tests already passes andrewfan avaragado would mind taking look added make suggestion test missing", "d": "1/2014"}, {"body": "lukemelia got error tried use inside created another take look fiddle please", "d": "1/2014"}, {"body": "lukemelia agree andrewfan think extra level introduced render helper significant arraycontrollerjs changes new line might relevant parentcontroller set differently two scenarios reasoning controller template rendered via render helper fiddle arraycontroller already parentcontroller property therefore controller subcontroller presumably itemcontroller inherits parent rather using arraycontroller confess paragraph documentation code change made spit tea itemcontroller instances property set either property instance nt help consumer api like tell without inspecting ember source code whether case parentcontroller set one fundamentally even difference surely parent itemcontroller instances always arraycontroller instance", "d": "1/2014"}, {"body": "andrewfan avaragado thanks clarification took crack fix position try app would awesome also stefanpenner andor kselden would welcome input internal api naming pr", "d": "1/2014"}, {"body": "seems like good question example looks emberdata related may want reopen issue project", "d": "1/2014"}, {"body": "would suggest cross linking others searching find way new issue", "d": "1/2014"}, {"body": "seems like expected behavior non delete delete record ca nt save deleted record deleted need create new record", "d": "1/2014"}, {"body": "hey seems like emberdata related thing mind reopening", "d": "1/2014"}, {"body": "turn ember core problem please provide working example track issue time gladly reopen", "d": "1/2014"}, {"body": "jasonpgignac read guide", "d": "1/2014"}, {"body": "stefanpenner ok would go ask", "d": "1/2014"}, {"body": "know talking problem queryparamsnew feature partially activated unless flag set ember loads issue inside paramsfor method might come elsewhere", "d": "1/2014"}, {"body": "quick fix changing works", "d": "1/2014"}, {"body": "florentblanvillain could create jsbin showing issue", "d": "1/2014"}, {"body": "yes", "d": "1/2014"}, {"body": "dealing w really slow internet connection ca nt really dig moment gut tells using nt necessary queryparams object comes routerjs routerecognizer ember agnostic libraries therefore objects nt try look tonight cc machty", "d": "1/2014"}, {"body": "ember nt currently support nested resources name end called current approach use dot notation name nested routes separate routes javascript thisresource players path players function thisroute show path playerid thisresource nodes path nodes function thisroute show path nodeid thisresource nodesplayers path withplayers function thisroute show path playerid", "d": "1/2014"}, {"body": "leaves strange controller names according ember extension chrome playernodesshowindexcontroller instead playernodesshowindexcontroller notice dot first one also makes difficult reuse controller template playersshow without parent players inside nodesplayersshow route supported second piece code actually work seems like mapping overwritten", "d": "1/2014"}, {"body": "javascript thisresource players path players function thisroute show path playerid thisresource nodes path nodes function thisroute show path nodeid thisroute players path withplayer playerid appplayersshowroute emberrouteextend model function params return thisstorefind player paramsplayerid rendertemplate function thisrender playersshow application outlet overlay appnodesplayerroute appplayersshowrouteextend leaves correctly rendered parent nodesroute rendered nodesplayerroute errors shown notice changed route nodeswithplayer", "d": "1/2014"}, {"body": "apparently solution add following instead last extend", "d": "1/2014"}, {"body": "closing bug though open proposals forums improve cc machty", "d": "1/2014"}, {"body": "kselden discussion something similar thoughts cc machty", "d": "1/2014"}, {"body": "version ember", "d": "1/2014"}, {"body": "believe addressed latest beta reopen nt fix problem", "d": "1/2014"}, {"body": "use latest stable ember thanks answer", "d": "1/2014"}, {"body": "confirm latest beta fixes issue", "d": "1/2014"}, {"body": "yes works fine thanks", "d": "1/2014"}, {"body": "wagenet make sure keep single issue open tracking various issues", "d": "1/2014"}, {"body": "stefanpenner maybe make rewrite emberselect issue point everyone", "d": "1/2014"}, {"body": "ya think good idea track checklist known issues within description provide great context whoever time give emberselect much needed tlc", "d": "1/2014"}, {"body": "wagenet stefanpenner think fix needed lot people problem maybe polish pr merge current implementation wanted write scratch make sense", "d": "1/2014"}, {"body": "seeweer idea current many issues planning completely deprecate introduce newer simpler faster less buggy version", "d": "1/2014"}, {"body": "wagenet specification idea works help rewrite want", "d": "1/2014"}, {"body": "yes working", "d": "1/2014"}, {"body": "thank", "d": "1/2014"}, {"body": "tricknotes great catch thank verifying pushed rubygems fixing issue", "d": "1/2014"}, {"body": "confirmed fixed version embersource thanks much rjackson smile", "d": "1/2014"}, {"body": "plan time permits basic build tooling ported node fivetanley already started emberdata", "d": "1/2014"}, {"body": "could help way think iam good give direction", "d": "1/2014"}, {"body": "fivetanley may like hand moving ember modules tedious endeavor maybe port existing approach first transition modules later joliss know ventured path likely share thoughts", "d": "1/2014"}, {"body": "know actually feel like bug contributing already tough enough contributing without working ruby installation pretty painful lowering bar devtool requirements seems netpositive reopening", "d": "1/2014"}, {"body": "stefanpenner changes plan think switching node actually lowers bar entry like people necessarily working node install either", "d": "1/2014"}, {"body": "ya absolutely node binary download works easily across windows osx linux joyent node team done great job cross platform support ruby really really nt even close simple admit currently npm phase might brittle hope improve", "d": "1/2014"}, {"body": "personally steered away projects due using ruby dependency especially project willy nilly throw compas css preprocessor presto bazillion dependencies huge ruby installation makes migrating servers pain", "d": "1/2014"}, {"body": "klh ya plan time permits course make transition", "d": "1/2014"}, {"body": "interesting uses hood first entry considered found return true checks return undefined turns find returns entry case undefined quick fix chance try hand pr", "d": "1/2014"}, {"body": "pr sure please allow time days become comfortable devteststructure", "d": "1/2014"}, {"body": "sounds good feel free reach issues", "d": "1/2014"}, {"body": "closing since pr", "d": "1/2014"}, {"body": "mutewinter use case using hashes instead", "d": "1/2014"}, {"body": "performance seen boost rendering speed switching large list items", "d": "1/2014"}, {"body": "seems like odds imo desirable defaultbuiltin behavior urls selfnormalizing reflect defaultcurrent values controller qp properties entirely sure recommend whether api restricting given bit hack would nt really carry history location two behaviors play refreshing page loading url normalize url end transition reflect values controller qp properties nt explicitly set url eg nt specifically set properties going route changing qp prop leaving route reentering route without specifying qp values normalize url previously set sticky property value behaviors incorrect think could possibly intercept clicks look url maybe based presence query params unset target controller qp prop values continue bubble click dom event rest transition mechanics continue work generally happy qp api bit problematic ambiguity bw specifying via url emptyfalse prop value vs omitting prop value reusing actually make could set might fix", "d": "1/2014"}, {"body": "refreshing page loading url normalize url end transition reflect values controller qp properties nt explicitly set url eg nt specifically set properties refreshing meaning actual going route changing qp prop leaving route reentering route without specifying qp values normalize url previously set sticky property value could try redirecting route feels like hack behaviors incorrect think could possibly intercept href clicks look url maybe based presence query params unset target controller qp prop values continue bubble click dom event rest transition mechanics continue work handling click events tags may work try approach also hoping causing actual events restore slugs using url currently tags includes slug eg slug disappears transition completes route generally happy qp api bit problematic ambiguity bw specifying via url emptyfalse prop value vs omitting prop value reusing issue may better solved able specify naked query params arbitrary route eg rather", "d": "1/2014"}, {"body": "definitely machty saying nt really using place rather try see improve performance instead supporting nonidiomatic use cases", "d": "1/2014"}, {"body": "issue may better solved able specify naked query params arbitrary route eg search termmusic rather search search term music mutewinter unscoped query params landed master wan na get try", "d": "1/2014"}, {"body": "machty oh hell yes give try let know", "d": "1/2014"}, {"body": "nt think really bug think work optimizing seem like optimization gotchas bugs seem workarounds", "d": "1/2014"}, {"body": "actually got work jsbin assigning controller init method itemview exactly wanted problem working app using emberappkit get error uncaught typeerror call method lookup null getting weirder", "d": "1/2014"}, {"body": "oscarvgg creating adhoc things without using container really use ember build helpers creating things", "d": "1/2014"}, {"body": "additionally need set controller manually bug collectionview needs tlc begun", "d": "1/2014"}, {"body": "great eager updates", "d": "1/2014"}, {"body": "merged ember master", "d": "1/2014"}, {"body": "confirm behavior confusing debug fixed", "d": "1/2014"}, {"body": "hells yeah", "d": "1/2014"}, {"body": "neutral one feel free open discuss post cross link try keep issues issues", "d": "1/2014"}, {"body": "gh really needs feature request tab something", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "index routes nt get generated create another route level empty path hence nt exist took empty path think confusing enough people fix pretty sure dup", "d": "1/2014"}, {"body": "linked impacted whether index definitely looks like could related", "d": "1/2014"}, {"body": "nt need namespaceresetting", "d": "1/2014"}, {"body": "see interesting default route head see mean surprising hm closing thanks wisdom machty", "d": "1/2014"}, {"body": "kinda wan na leave open actually nt think reason support fact opting something slightly harder refactor prefer things work case rather wasting brain cycles trying figure nt work expected way", "d": "1/2014"}, {"body": "agh sorry know going sit around indefinitely really bug reopen hear someone else", "d": "1/2014"}, {"body": "ideas still infancy regarding completely agree addressed", "d": "1/2014"}, {"body": "klh rjackson could start discussion reopen followup pr things solidify", "d": "1/2014"}, {"body": "issue lacks context myresearchstyle provide running example problem least explain failure manifests", "d": "1/2014"}, {"body": "ember requirejs mainjs file looked like js requirejsconfig baseurl js shim ember deps handlebars jquery exports ember data deps ember exports ds slideshow deps jquery transit rotator deps jquery transit transit deps jquery paths ember libemberember data libemberemberdata handlebars jquery text libpluginstext typewriter libpluginstypewriterbundlemin views appviews routes approutes templates apptemplates controllers appcontrollers models appmodels app app slideshow libpluginsjqueryslideshow rotator libpluginsjqueryrotator transit libpluginsjquerytransitmin requirejs jsstartjs function ember ds would require ember path every time would create module ember variable ember inside new module undefined", "d": "1/2014"}, {"body": "strange fivetanley moments investigate", "d": "1/2014"}, {"body": "ember still exposes global debugging info looks like config correct", "d": "1/2014"}, {"body": "thank guys mistake seem corrupt copy latest emberjs ca nt figure wrong redownloaded ember site works expected sorry bothering thank help", "d": "1/2014"}, {"body": "future dev tooling checksum things", "d": "1/2014"}, {"body": "sorry hear issues working hard improve aspects ember unfortunately guides abit sync obviously causing issues try get back line asap", "d": "1/2014"}, {"body": "leave open back sync", "d": "1/2014"}, {"body": "thanks mean time possible publish list build versions work versions handlebars jquery", "d": "1/2014"}, {"body": "easiest way right grab starter kit includes dependencies provides good starting place reference guarenteed work combination extracted starter kit totally need keep things inline reduce entry pains", "d": "1/2014"}, {"body": "totally feel pain gave ember another go watching pause video every minutes check code emberdata transitionmd ember documention stackoverflow ember forums bright side kudos ember core team contributors constantly improving ember love api docs full examples documentation guides also way better remember summer first tried emberjs stefanpenner know chance going part emberjs hits final release", "d": "1/2014"}, {"body": "sahat emberdata officially supported package may provide build includes file absolutely also allow shipped separately", "d": "1/2014"}, {"body": "sahat nt make breaking changes without serious consideration feel choices best hopefully peepcode video get update", "d": "1/2014"}, {"body": "feel like bit ass gone video getting started section realized issues either handlebars misspelling route controller new handlebars bit pain realize commented code still processed breaks things handlebars yeah apologize also word street core team working cli ember would similar rails would fantastic would really solve lot headache awesomely magical creation controllers templates etc", "d": "1/2014"}, {"body": "feel free checkout essentially ghetto spike cli may feel like", "d": "1/2014"}, {"body": "sahat actionable item still close understanding continue improve areas", "d": "1/2014"}, {"body": "wagenet immediate action needed taken moment ongoing effort keep documentation web date latest ember releases", "d": "1/2014"}, {"body": "sahat sounds good closing issue find specific issues let know", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "would someone interested sending pr fix", "d": "1/2014"}, {"body": "hey could get update issue blocker project", "d": "1/2014"}, {"body": "move sorted array controller functionality backed new arraycomputed stuff likely solve many problems one", "d": "1/2014"}, {"body": "provide working demo via jsbin jsfiddle seem strange appears work console open could another thing note safe shipping lower likely stick planned tooling transpiled code later", "d": "1/2014"}, {"body": "hmm look trying recreate issue tomorrow also fails console open set breakpoint return promise something inside storefindbyid function work storefindbyid returns promise resolved put breakpoint right promise created reason guess gives something time enough complete nice note luckily need support good post emberdata issue tracker", "d": "1/2014"}, {"body": "correction using ember initializers setup could issue initializers messing state", "d": "1/2014"}, {"body": "without example tricky know", "d": "1/2014"}, {"body": "actually promises ember came around ember rsvp upgrade curious working browser see", "d": "1/2014"}, {"body": "sorry upgrading back forth ember today see bugfix later versions reads fail instead catch try create small project recreate issue tomorrow", "d": "1/2014"}, {"body": "bug promise spec names catch catch future version likely safe using keep posted example likely able help", "d": "1/2014"}, {"body": "seems work wrap emberrunlater", "d": "1/2014"}, {"body": "skinney something seems strange believe underlying issue misunderstanding would love provide context possible fix issue help education users correctly find another strategy mitigate need", "d": "1/2014"}, {"body": "stefanpenner finally chance look seems problem related buggy jquery plugin possibly related fact applicationinitializers run order thus possibly also either case bug gone without emberrunlater", "d": "1/2014"}, {"body": "skinney run order sounds familiar provide example open ember issue run order even order specified default order different", "d": "1/2014"}, {"body": "defined like five appinitialiser modern browsers initializers run order defined possibly initializers run reverse order bottom initializer runs first specefying initializer solved issue forcing initalizers run correct order", "d": "1/2014"}, {"body": "skinney correct way use order deps exist initializers reorder based dependencies additionally enumerating things object properties older browsers nt stable", "d": "1/2014"}, {"body": "herom ember definitely works runtime setup handlebars debugstandard build ember require full handlebars build use production builds ember needwant attempt require handlebars production builds strip code pasted coming get production builds download file labeled tagged release want", "d": "1/2014"}, {"body": "debugstandard build support using anymore production build still rjackson", "d": "1/2014"}, {"body": "rjackson tried soon use library get error use latest library everything works like charm using assemble", "d": "1/2014"}, {"body": "herom likely related building project definitely known work general could provide barebones sample project", "d": "1/2014"}, {"body": "rjackson sorry delay barebones sample project running github repository would cool could check", "d": "1/2014"}, {"body": "herom looks like problem nt expose change line works neuter wraps everything iife visible outside quick fix would patch", "d": "1/2014"}, {"body": "thanks lot answer pangratz guess besides option hack got another two options open issuepull request handlebars project make compatible use another grunt task nt wrap files basically like rjackson stated comment likely related building project", "d": "1/2014"}, {"body": "great think close issue", "d": "1/2014"}, {"body": "sure submitted twice", "d": "1/2014"}, {"body": "reflection think current behavior preferable route controller template function isolated pod refactorings like moving routes consistent stable current behavior proposing", "d": "1/2014"}, {"body": "ya agree", "d": "1/2014"}, {"body": "designed change post creation binding bit precarious believe variation scenario work notice lack quotes last one surprised also nt work must timing issue", "d": "1/2014"}, {"body": "prescribed working usage actually property example", "d": "1/2014"}, {"body": "kselden want look potential timing issue", "d": "1/2014"}, {"body": "stefanpenner hmm yea works ok thanks either way still strange timing issue original jsbin", "d": "1/2014"}, {"body": "believe problem encountered app fixed", "d": "1/2014"}, {"body": "yup fixed beta beers", "d": "1/2014"}, {"body": "stefanpenner suggestion fix would something similar stuff prefix internals underscore thinking something else", "d": "1/2014"}, {"body": "fix issue internal bug writing tests", "d": "1/2014"}, {"body": "mightybyte remove", "d": "1/2014"}, {"body": "machty something planning think others", "d": "1/2014"}, {"body": "think mmun taking stab mmun", "d": "1/2014"}, {"body": "changing bug feature even history nt strip fragment native browser scrolltoel stuff would nt worked anyway think js framework html generated js", "d": "1/2014"}, {"body": "machty sounds good", "d": "1/2014"}, {"body": "machty yeah working could use help anyone interested goals support without route similar query params eg historyhash location support add hook route make default implementation scrolltoel render sure whether call hash fragment something else", "d": "1/2014"}, {"body": "machty mmun could nt also support hashlocation although strange looking nt see reason ca nt used easily parsed autolocation made handle well", "d": "1/2014"}, {"body": "jayphelps think seems work even tests concerns illegal character fragment according specs apparently", "d": "1/2014"}, {"body": "looks like exception specifically url spec add number sign character characters allowed production source", "d": "1/2014"}, {"body": "mmun nice find", "d": "1/2014"}, {"body": "machty mmun working going attack one step time easier pr merging first step going adding support hashes nt part route simply ignored eg foo historylocation foo hashlocation autolocation stripping freaking either flagging borders bug vs feature since new user would probably expect behavior imo thoughts", "d": "1/2014"}, {"body": "odd used actions form appears something else affecting things", "d": "1/2014"}, {"body": "remove overlay everything works expected investigating whether bug intended behavior believe nesting recommended", "d": "1/2014"}, {"body": "cleaned code think better way handle want feedback best practices recommend asking stack overflow irc", "d": "1/2014"}, {"body": "could used resolve reference", "d": "1/2014"}, {"body": "machty give go", "d": "1/2014"}, {"body": "looks like associated pr merged", "d": "1/2014"}, {"body": "cc hjdivad", "d": "1/2014"}, {"body": "note think failing test related actually fully describing issue even test passes issue jsfiddle may still present", "d": "1/2014"}, {"body": "ok array content updated correctly part handlebars fail part however seems issue originally experiencing caused failing", "d": "1/2014"}, {"body": "filterby works fine empty notempty broken", "d": "1/2014"}, {"body": "guess gon na get response", "d": "1/2014"}, {"body": "gigafied sorry letting one linger animation still high priority speak official support land say land hope provide great solution", "d": "1/2014"}, {"body": "narrowed change emberdata emberjs upon minification minified beta production version emberdata causes problem nonminified beta production version works perfectly", "d": "1/2014"}, {"body": "agrobbin could create simple example possible try help track", "d": "1/2014"}, {"body": "might suspect defines arity cp advanced compiler likely strip second argument making arity", "d": "1/2014"}, {"body": "solution likely us write linter warn us", "d": "1/2014"}, {"body": "could also ignorance right way accomplish rendering particular partialviewcomponent based model value putting together example", "d": "1/2014"}, {"body": "stefanpenner confirm absolutely problem found corresponding minified version block code indeed look like compiler stripped argument original minified also looks like happens", "d": "1/2014"}, {"body": "wan na open emberdata issues cc", "d": "1/2014"}, {"body": "maybe annotate params", "d": "1/2014"}, {"body": "done emberjsdata", "d": "1/2014"}, {"body": "confirm nt bug rather feature request", "d": "1/2014"}, {"body": "feature request update title make clear", "d": "1/2014"}, {"body": "translation ruby lambda blocklike support passing params yielded content without otherwise futzing scope cc kselden ebryn", "d": "1/2014"}, {"body": "ya seems aligned current project", "d": "1/2014"}, {"body": "hey alex totally agree exposing transclusion simple use cases makes lot sense cause unnecessary confusion read shadow dom spec though insertion points shadow insertion points appear make use transclusion spec spec high level introduction spec editor description description since standards going available chrome seems useful expose advanced users way preferably hidden beginners much possible angular trying extent changing documentation put advanced directive authoring separate document basic directive authoring basic advanced love hear ruby lambda blocklike support passing params yielded content without otherwise futzing scope would work sounds really promising nt understand handlebars scopes yield implemented much like recommend docs either given initial design thought along lines pass parameter property child component called inheritscopefromparent b parent scope contains inheritscopefromparent attribute copy data bound properties parent scope child scope preserving bindings templates involved think would work possible thanks taking look", "d": "1/2014"}, {"body": "davidjnelson try respond thoroughly later real quick support transclusion via helper long time think pretty closely approximate lot web components mostly saying avoid unnecessary mess pandora box scopetransclusion combo component authors conventions embrace via something like rubyish yield blocks yieldable params whereby components ember component ecosystem whatever writing app nt crazy stuff redefining rules scope yielded template block think one areas angular get learning curve angular starts make feel really good bad things ultraconfigurable scopetransclusion simpler powerful conventions exist one ability component overwrite scope block pass kind solution hard test hard reason compared familiar scoping rules ruby blocks solutions ab definitely seem coming angularspecific mindset mine risk somewhat angularaverse willing consider ruby block approach prove powerful enough either way keep dialogue going", "d": "1/2014"}, {"body": "machty updates nt going resolved soon maybe move forums", "d": "1/2014"}, {"body": "seems good close experimental work block params nothing ready bring core quite yet still discussion continue take place forums", "d": "1/2014"}, {"body": "looks like happening routerecognizer seems like changed treat qp value empty string would make using qp boolean flags elegant sure common got around bug using cp convert empty could go way get boolean value qp always resolved string", "d": "1/2014"}, {"body": "raytiley might something another issue overfiring replaceurl hash location investigate route recognizer shows form fixed", "d": "1/2014"}, {"body": "machty fix works route transitioned without queryparam url still get weird results link directly route", "d": "1/2014"}, {"body": "closed forrealz demo thanks raytiley", "d": "1/2014"}, {"body": "problem case anyone following along working demo fix one machty listed using history location nt seem work jsbin", "d": "1/2014"}, {"body": "ahh saved tinkering onward", "d": "1/2014"}, {"body": "added funkiness try serialize array url turns true also", "d": "1/2014"}, {"body": "intentionally omitted though might make cut next weeks canary churn", "d": "1/2014"}, {"body": "personally seems like supporting anything strings queryparams gets really messy ultimately application deciding going use value thats qp probably responsible converting qp provided string whatever type application needs array object etc pretty trivial cp conversion maintain data binding since url hackable user would need place insert custom error handling case user modified url directly cp seems like good way", "d": "1/2014"}, {"body": "indeed messy sure right approach yet would prefer people battle test trying come api", "d": "1/2014"}, {"body": "messy serializing array url html foo bar go serializes stuff foo amp stuff bar", "d": "1/2014"}, {"body": "haha go click go takes checkers game", "d": "1/2014"}, {"body": "probably give time", "d": "1/2014"}, {"body": "indeed messy sure right approach yet probably give time perhaps implementing ember messy servers deserializing strings long time nt come new semantics old useful part web", "d": "1/2014"}, {"body": "controllers serialize deserialize hook lot like routes", "d": "1/2014"}, {"body": "rpflorence convinced take crack ca nt promise anything though", "d": "1/2014"}, {"body": "likely api likely terse version eg seems generally accepted way go wan na prefer way defining serializedeserialize controller since predict awkwardness funneling qp changes single function nt wan na pollute controller namespace already raytiley particularly high risk code ultimately accepted think previous implementation sat canary months gutted happy take risk good learning experience enough offset risk go forth want everyone rational expectations around particularly tricky api get right", "d": "1/2014"}, {"body": "also happy iterating many many times response feedback go forth definitely happy active contributors router realm lonely", "d": "1/2014"}, {"body": "totally expecing many iterations seen first pr embermodel b code completely rejected getting experience finally area ember feel dig little bit thanks", "d": "1/2014"}, {"body": "machty implemented basic array support routerecognizer definitely like ideas additional serialization hooks queryparms need abnormal coercing data rpflorence points server side support qp arrays pretty standard maybe basic array support nt require implementing custom hooks", "d": "1/2014"}, {"body": "agree defaults array serialization straightforward enough us provide", "d": "1/2014"}, {"body": "stuff de serialization problem space mega tricky fit use cases particularly promises error handling involved knock obvious low hanging fruit like answer question keep good work", "d": "1/2014"}, {"body": "nt think solution emberroutingnamedsubstates finished going modular", "d": "1/2014"}, {"body": "cc bcardarella", "d": "1/2014"}, {"body": "someone working knock pr later tonight", "d": "1/2014"}, {"body": "lukemelia bcardarella working ran across issue recent format change fixing issue works fix", "d": "1/2014"}, {"body": "fix ready waiting rjackson get merged make pr", "d": "1/2014"}, {"body": "schweet guys rock", "d": "1/2014"}, {"body": "billxinli queryparams implementation completely rewritten feature flag referencing rewritten version please review pr added details works", "d": "1/2014"}, {"body": "last canary build prior version query params feel free use likely need update new implementation receive updatesfixes", "d": "1/2014"}, {"body": "thanks pointers rjackson go ahead update latest version query param wondering new version queryparamsnew stay", "d": "1/2014"}, {"body": "billxinli yes believe probably pretty close final api likely enabled coreteam decide default ship around hopeful ship enabled default start beta around released around fyi going go ahead close issue since nt think bug perse breaking change canary", "d": "1/2014"}, {"body": "thanks updates much appreciated", "d": "1/2014"}, {"body": "might worth looking hour embertesting solves", "d": "1/2014"}, {"body": "aha thanks stefanpenner exactly sort thing want expose within ember instead within embertesting since nt using embertesting opinion make sense move subset helper ember modify embertesting use method ember", "d": "1/2014"}, {"body": "method likely needs tlc would nt want expose official public api yet", "d": "1/2014"}, {"body": "interestingly wonder better approach selenium invoke appropriate embertesting helpers like selenium driver embertesting", "d": "1/2014"}, {"body": "able execute proper helpers selenium example something like might work", "d": "1/2014"}, {"body": "appears work reopen explain missed may want provide browser versions specifically saw expected see", "d": "1/2014"}, {"body": "ok seems work thanks taking time", "d": "1/2014"}, {"body": "hmm would guess supporting ember views across iframe boundary scope ember core lot complexity issue described eg handling events like click etc working iframes robust way success though may overkill use case", "d": "1/2014"}, {"body": "definitely overkill interesting libraries think workaround use case thanks", "d": "1/2014"}, {"body": "might consider wrapping jquery plugin like", "d": "1/2014"}, {"body": "thank much indeed trying accomplish thanks", "d": "1/2014"}, {"body": "hey asaf think working", "d": "1/2014"}, {"body": "closed", "d": "1/2014"}, {"body": "unrelated invoked anonymous function means nothing function created new time context function used uniqueness", "d": "1/2014"}, {"body": "nt really understand comment stefanpenner mean nothing stated works completely fine component outside parent component used named functions avoid bug common closure problem thanks", "d": "1/2014"}, {"body": "sorry nothing meant guarantee wo nt true make sense context", "d": "1/2014"}, {"body": "ok thanks taking time answering questions understand supposed q amp discussion hate burden would really appreciate would answer one last question according post recommended use run loop guarantee jquery picks view rendered would recommend case need conceptually ok nest custom components", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "ok thanks tried code still behaving instead calling forced declare variables beforehand assumed bug happens nested inside another component think normal behavior close issue", "d": "1/2014"}, {"body": "jsfiddle jsbin please", "d": "1/2014"}, {"body": "small demo looks like component nested irrelevant jsbin maybe missing common closure understanding ember bug per se", "d": "1/2014"}, {"body": "explored", "d": "1/2014"}, {"body": "ebryn libs casts etc clean integrated approach within ember auth fundamental problem sure fully generalized without making user hook every stage", "d": "1/2014"}, {"body": "going close issue recommend solicit feedback instead try keep gh issues strictly bugs immediately actionable things", "d": "1/2014"}, {"body": "ebryn agreed maybe open future come something immediate thanks", "d": "1/2014"}, {"body": "featureflagged pr would accepted", "d": "1/2014"}, {"body": "closing favor failing test", "d": "1/2014"}, {"body": "closing reopen bug still present master better description provided", "d": "1/2014"}, {"body": "caused problems answer use embercompare indexof would become indexof function object startat var idx len get length one thing find confusing takes argument never used eg objectatcontent method called like way things stand itemcontroller always returned controllerat itemcontroller defined issues states use embercompare mean embercomparable comparing two objects like default var id name bob var b id name harry emberassert equal embercompare b fails started putting together pr issue best idea mix embercomparable objectcontroller also worth noting embercompare used methods mentioned", "d": "1/2014"}, {"body": "sounds like right track define custom comparator treats proxied content equal check aside parameter exists subclasses default implementation nt use names parameter make obvious available overriding method", "d": "1/2014"}, {"body": "hjdivad one thing confused comparable used thought used primarily comparing b sort operation", "d": "1/2014"}, {"body": "believe meant signify type provides custom comparison think like implementing java class abstraction broader sorting used internally much", "d": "1/2014"}, {"body": "hjdivad c", "d": "1/2014"}, {"body": "hjdivad stefanpenner guess seems strange true falsey javascript", "d": "1/2014"}, {"body": "strange comparators typically work", "d": "1/2014"}, {"body": "sort operation yes sure simply comparing two objects answer usually true false", "d": "1/2014"}, {"body": "pretty sure return comparison typically return equality", "d": "1/2014"}, {"body": "yes would equality check indexof rather comparison", "d": "1/2014"}, {"body": "mechanism custom equality mechanism custom comparison broader anyway", "d": "1/2014"}, {"body": "thanks clearing guess wait overloading operators javascript", "d": "1/2014"}, {"body": "find strange approach java comparable interface looks like ember would something like goes lots sorting logic example var mapping var mapping lt return gt return type logic gives ember object higher precedence hash causes early return really want something like", "d": "1/2014"}, {"body": "example surprising wrong semantics using instead directly calling", "d": "1/2014"}, {"body": "think different hashes equal right jsbin", "d": "1/2014"}, {"body": "looks like nt support type probably cases mixed defaulting seems odd well would thought falling back identity would make sense inequality gives unspecified ordering stefanpenner thoughts problematic cases plain javascript object right", "d": "1/2014"}, {"body": "hjdivad yeah good plain hashes", "d": "1/2014"}, {"body": "ebryn yes shortly featureflagged feature", "d": "1/2014"}, {"body": "romanior friendly reminder", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "machty status", "d": "1/2014"}, {"body": "notveryhigh priority work needs done likely somewhat involved since requires making route recognizer expose information presently hard get", "d": "1/2014"}, {"body": "stefanpenner think something going something close", "d": "1/2014"}, {"body": "wagenet likely question better asked ebryn kselden reworking templating view layer", "d": "1/2014"}, {"body": "pr closed wondering needs done differently another pr merged cc stefanpenner", "d": "1/2014"}, {"body": "likely move approach least give try proxies compare proxy would fix whole host problems", "d": "1/2014"}, {"body": "closing track", "d": "1/2014"}, {"body": "nt bug although work reduce boiler plate necessary likely good idea", "d": "1/2014"}, {"body": "emberdefineproperty coreobjectprototypemixin", "d": "1/2014"}, {"body": "aaronshaf able pr", "d": "1/2014"}, {"body": "ebryn apologize delayed response submit pr regarding inconsistence", "d": "1/2014"}, {"body": "closed", "d": "1/2014"}, {"body": "news ca nt seem call test suite using visit helper trying route action happening app calling appreset somewhere normally running application throws errors related destroying already destroyed things ember nt problem", "d": "1/2014"}, {"body": "theworkerant possible provide jsbin jsiddle demonstrating make easier figure whats going", "d": "1/2014"}, {"body": "yea work fiddle templates found builds broken guess make one scratch", "d": "1/2014"}, {"body": "false alarm intensive stack trace analysis revealed error ebryn suggested keeping track solves problem guess bug feel pretty hard predict kinds things come error different ways one tchak seems like maybe logic fix least much helpful error message happen", "d": "1/2014"}, {"body": "theworkerant likely also want use emberrun within proxy use emberrunbind", "d": "1/2014"}, {"body": "nt think bug fixed broken example adding default unnamed outlet application template reason fixes things loading routes siblings routes emit slowloading promise case slow promise emitter sibling render outlet correctly gets torn reason overridden behavior impact rendering behavior either add default outlet like also override method also render named outlet like", "d": "1/2014"}, {"body": "closing unless shown actually buggy behavior", "d": "1/2014"}, {"body": "stefanpenner maybe right approach somehow make clear ember inspector given path treated global", "d": "1/2014"}, {"body": "use reopen reopenclass extend textfield", "d": "1/2014"}, {"body": "zimble correct way currently", "d": "1/2014"}, {"body": "also interested taken another shot getting attributes working box", "d": "1/2014"}, {"body": "running dmo mentioned related way using variable template block probably worth noting nt appear limited blocks issue happening block wasted like hour go", "d": "1/2014"}, {"body": "closing favor pr", "d": "1/2014"}, {"body": "using mapstraction development branch seems also affected", "d": "1/2014"}, {"body": "bug must preserved matter changing variable declaration setmapoptions provider array hash jan riklaunim notifications githubcom wrote using mapstraction development branch seems also affected reply email directly view github", "d": "1/2014"}, {"body": "download js files autoload check hope one line", "d": "1/2014"}, {"body": "dev build variable var myoptions changing seems solve problem", "d": "1/2014"}, {"body": "closed active class support nt added new api tracked", "d": "1/2014"}, {"body": "wagenet status would like help possible", "d": "1/2014"}, {"body": "aware status changes still think done cc rjackson", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "thumbsup", "d": "1/2014"}, {"body": "sure related code working pre nt", "d": "1/2014"}, {"body": "specifying layoutname fixes jsbin", "d": "1/2014"}, {"body": "doh thank", "d": "1/2014"}, {"body": "also use technique using write layout automatically normal handlebars invocations via sample jsbin", "d": "1/2014"}, {"body": "nice less code result love thanks", "d": "1/2014"}, {"body": "less code indeed love thanks guys", "d": "1/2014"}, {"body": "wagenet stefanpenner consensus core intend fix let make decision intend close issue", "d": "1/2014"}, {"body": "try remember bring meeting tomorrow", "d": "1/2014"}, {"body": "thanks wagenet", "d": "1/2014"}, {"body": "hjdivad meeting got postponed monday since google hangouts", "d": "1/2014"}, {"body": "moving away supporting binding globals deprecating cases wo nt adding support anywhere new", "d": "1/2014"}, {"body": "awesome thanks", "d": "1/2014"}, {"body": "ran one property observed", "d": "1/2014"}, {"body": "seeing well despite specified triggers event press enter ember", "d": "1/2014"}, {"body": "nice simple solution", "d": "1/2014"}, {"body": "really closed either api supports feature nt supported fixed otherwise removed", "d": "1/2014"}, {"body": "problem jschilli mentioned still valid application poll new notifications every seconds acceptance test wait indefinitely always returns true thus helper embertesting waits msecs time solution proposed teddyzeenny seems good one", "d": "1/2014"}, {"body": "seems useful dk inherited actually called nt seem uncommon might code path overriding cp nt call think might messybrittle bring ember definitely nt think dk inherited default maybe best leave", "d": "1/2014"}, {"body": "agree clean solution problem nt selfevident probably leave since big deal unless someone come robust implementation", "d": "1/2014"}, {"body": "robust implementation would mean kind regexy reflection whether super exists function implementation nt route think wan na go closing", "d": "1/2014"}, {"body": "effect keyrepeat trigger submit per repeated character", "d": "1/2014"}, {"body": "assertion exists", "d": "1/2014"}, {"body": "small update looks like htmlbars related view level refactoring plan address", "d": "1/2014"}, {"body": "stefanpenner think close since addressed", "d": "1/2014"}, {"body": "lets close addressed", "d": "1/2014"}, {"body": "ready us test htmlbars discourse let us know really looking forward open deploying discourse asap sun jan pm stefan penner notifications githubcomwrote lets close addressed reply email directly view github", "d": "1/2014"}, {"body": "issue stacktrace right deep", "d": "1/2014"}, {"body": "unfortunately examples issue longer seem available jsfiddle also unsure still issue im closing someone replicate reproduce gladly reopen", "d": "1/2014"}, {"body": "stefanpenner information make example working provided ember jsfidlle op seems say property true application started definitely think controller set via setproperties observer fired anyway think legit closed since using aliased porperty clearly better works well nightire agree", "d": "1/2014"}, {"body": "ya using observers directly seem strange using binding cp preferred way currently would suggested course action said subtle inefficiency causing occur setting controller view already created causing unexpected change notification intern causing observer fire earlier expected would love see situation improved internally start passing around view factories would able instantiate view finally needed think going farreaching refactor good idea going reopen issue", "d": "1/2014"}, {"body": "experiencing issue erundook currently retry resolves properly transition works except url says undefined parameter", "d": "1/2014"}, {"body": "jandet version ember", "d": "1/2014"}, {"body": "machty currently nt tried yet", "d": "1/2014"}, {"body": "jandet try canary real quick massive router refactor bw canary would surprised symptoms fixed", "d": "1/2014"}, {"body": "machty deliberately depending canary builds upgrade report back perhaps may workaround seems", "d": "1/2014"}, {"body": "ok still happening try canary bit see fix incoming later version", "d": "1/2014"}, {"body": "looks like related like stefanpenner mentioned", "d": "1/2014"}, {"body": "somewhat related working chrome firefox vendors get native devtools support stack stitchingtagging allow runloop tasks useful stacks stacks work devtools stack explorer firefox hopes feature year encouraging team follow suite individuals spoken google team seem optimistic lets hope get soon", "d": "1/2014"}, {"body": "nt tried erik give go thanks heads dec erik bryn notifications githubcom wrote mjallday tried setting emrunbackburnerdebug true capture stack trace items enqueued run loop navigate call stack see reply email directly view github", "d": "1/2014"}, {"body": "backburner supports basic stack stitching via ebryn mentioned addition working closely firefox chrome devtools teams appears likely improved devtools experience scenario see", "d": "1/2014"}, {"body": "theoretically possible us improve stack stitching likely marginally better exists today likely best bet chrome firefox devtools future providing improve stack stitching may also nice error reports nonsupporting browsers think ball devtools providers courts issue closed", "d": "1/2014"}, {"body": "seems working", "d": "1/2014"}, {"body": "properties changed filterby computed properties", "d": "1/2014"}, {"body": "components nt associated controllers seem play different role lastobelus mentions bindings ember secret sauce spent couple hours questioning sanity wondering earth bindings nt resolving seeing bindings work everywhere else work extremely confusing", "d": "1/2014"}, {"body": "think trusting client call callback end animation perfectly acceptable framework design ember docs say pulls inspiration cocoa many examples method contracts declaring user must call follow method super choose override said method embers docs instances super must called strange behavior expected method contract user must call callback point method called perfectly acceptable thing personally think right approach animating destruction elements", "d": "1/2014"}, {"body": "atomkirk considering animations promise based alleviate lukemelia concerns way could view lifecycle still complete regardless async event errors said believe core animations mind future probably better place handle", "d": "1/2014"}, {"body": "true good point link discussion core team animations seems absolutely support destroy animations time would think necessity web app concern ux meantime anyone found thread come quite hack animate away generic view posted answer stack overflow", "d": "1/2014"}, {"body": "seen animations mentioned passing times irc nothing beyond meant pretty sure roadmap somewhere oversight", "d": "1/2014"}, {"body": "mean wagenet access via local server think nodewebkit allows use protocol", "d": "1/2014"}, {"body": "tomasdev wanted know page worked via able run separate mini server point right directory", "d": "1/2014"}, {"body": "wagenet work localhost nt file might beyond emberjs usage wanting use app", "d": "1/2014"}, {"body": "router property specifies root url nt correct wo nt default using file routing wo nt work correctly", "d": "1/2014"}, {"body": "handle problem link helper", "d": "1/2014"}, {"body": "thanks darthdeus works well", "d": "1/2014"}, {"body": "agree ebryn nt bug since one taking action anything going close pr warning would gladly accepted", "d": "1/2014"}, {"body": "hi using collectionview arraycontroller want controller item tryed jbrown solution get error call method lookup null also tried setting itemcontroller property arraycontroller name controller items still geting item views controller hope help", "d": "1/2014"}, {"body": "oscarvgg provide jsbin jsfiddle", "d": "1/2014"}, {"body": "wagenet stefanpenner collectionview could allow itemviewcontroller", "d": "1/2014"}, {"body": "pattern", "d": "1/2014"}, {"body": "stefanpenner mean name itemviewcontroller itemcontroller could use arraycontroller itemcontroller", "d": "1/2014"}, {"body": "jbrown speaking creating controllers views manually pay attention binding chain example source changes controller updated better way appitemcontroller emberobjectcontrollerextend content embercomputedalias viewcontent appitemview emberviewextend init function var content thisget content controller appitemcontrollercreate view", "d": "1/2014"}, {"body": "simple example trying less note buttons calling action controller items", "d": "1/2014"}, {"body": "itemcontroller work see problem deciding fix", "d": "1/2014"}, {"body": "open separate issue track", "d": "1/2014"}]