[{"title": "configurable list view options merged properties", "body": "convenience feature allow list view options merged properties customized like model collection magically available instance variables would nice able specify options merged properties", "num": "2979", "d": "1/2014"}, {"title": "view events delegate", "body": "following code run event handler problem scroll events bubble backbone tries bind scroll event using delegated syntax like however fails since event never bubbles el would appropriate patch backbone events treat scroll bindings differently like limitation elements would need children el already least would work cases thoughts", "num": "2978", "d": "1/2014"}, {"title": "nested optional parts route route string captured", "body": "yields captures three params params mandatory captures two params example matching route parameters passed handler", "num": "2977", "d": "1/2014"}, {"title": "collection length match models length fetching parsing data duplicate ids", "body": "duplication steps create model parses arbitrary response object attribute call fetch collection model api returns multiple models id call fetch second time api returns multiple models id backbone throws error javascript set function models options see spec failing mismatched collection length failing spec duplicating issue expected behavior root issue clearly api returning duplicate objects however wondering might better way backbone handle situation would make problem easier trace default behavior adding model collection id existing model collection would expect error thrown", "num": "2976", "d": "1/2014"}, {"title": "split components separate modules", "body": "bit like still chose open new issue times like use subset backbone application particular case router part backbone looking sourcecode seems would easy use commonjs module declarations separate different components projects using example browserify could main backboneproject looking something like break backwards compatibility either would allow use handy modules without load code needed application", "num": "2975", "d": "1/2014"}, {"title": "would refactoredout setmerge method possible", "body": "currently backbone gleefully update attributes existing models attributes newlypassed models great nt want backbone update attributes ie want complicated merge example two forms model call record recordsummary record holds full model worth data recordsummary name id record eg use search results record json might look like recordsummary might look like models represent serverside data record get recordsummary server want update record summary data however nt want change type recordsummary still full record use collectionadd merge true backbone overwrite type record recordsummary currently good way change behavior however line comes right optionsmerge collectionset refactored method thissetmerge existing modelattributes options setmerge function existing attributes options existingset attributes options users could override setmerge add special merge behavior like course utility refactoring would limited case could used sort mergespecific behavior override given given refactoring trivial chance something like might make backbone way solve sort problem already exists ps change desired happy submit pull request", "num": "2974", "d": "1/2014"}, {"title": "collectionget returns objectprototype methods", "body": "currently backbonecollection using object keep track models exist within collection probably using hasownproperty instead avoid returning methods objectprototype issue originally occurred firefox model id watch backbone refused add new collection using appears issue exists within latest version well jsbin demonstrate issue valueof", "num": "2973", "d": "1/2014"}, {"title": "enhancement access subproperties getter setter", "body": "hi would know possible add functionnalities access subproperties model examples thismodelget somethingtitle thismodelset somethingtitle new title try implement needed changes javascript function searchproperty attr attrs raiseerror attr amp amp attrindexof gt var properties attrsplit currentattributes attrs function deleteproperty attr attrs attr amp amp attrindexof gt var lastindex attrlastindexof parent searchproperty attrsubstring lastindex attrs false function setproperty attr attrs value attr amp amp attrindexof gt var lastindex attrlastindexof parent searchproperty attrsubstring lastindex attrs false model extend modelprototype events get function attr return searchproperty attr thisattributes set function key val options var attr attrs unset changes silent changing prev current key null return thing thank feedback cheers julien roche", "num": "2972", "d": "1/2014"}, {"title": "modelfetch optionssuccess vs optionserror callback signature mismatch", "body": "docs says backbonemodelfetch accepts success error callbacks options hash passed model response options arguments far tell success callback signature like error callback looks like going seems like passed different sorts parameters compared docs claim", "num": "2971", "d": "1/2014"}, {"title": "backbone also try require lodash", "body": "currently backbone tries think either jquery try load global context sorry duplication using backbonejs browserify always wants require underscore would duplication lot code case use lodash normally something possible way achieve", "num": "2970", "d": "1/2014"}, {"title": "query parameters hash fragment removed calls backbonehistorynavigate", "body": "consider following routes url changes route invoked expected behaviour however route invoked programmatically route invoked instead clearly wrong cause", "num": "2968", "d": "1/2014"}, {"title": "backbone validation date field using bootstrap month year datepicker even input filed value still get error message code", "body": "modeljs initialize function thisvalidators thisvalidatorsdate function value return valuelength gt isvalid true isvalid false message must enter date defaults date html date", "num": "2967", "d": "1/2014"}, {"title": "doc inconsistency collection constructor", "body": "docs indicate models array optional parameter backbonecollection constructor method fact omitted options passed sketch simple test case demonstrating deviation docs", "num": "2966", "d": "1/2014"}, {"title": "multiple backbonerouters default route order matching routesloading routers", "body": "application coding getting bigger bigger far using one router everything wanted split two separate routers starters coming course like class windowuforoutersapp extends backbonerouter routes root root found notfound notfound class windowuforouterscompanies extends backbonerouter routes companiesnew angellist companiesnew companiesnew companiesnew companies idedit companiesedit companies ideditpeople companiespeople companies ideditpeople preselect companiespeople issue though notfound route triggered every time try access one companies routes guessing app router loaded initailized first using rails asset pipeline know workaround problem maybe way force backbone check available routers matching notfound route btw using backbonemarionette solutions may use tools code", "num": "2964", "d": "1/2014"}, {"title": "listentoonce multiple events fire event instead absolutely", "body": "noticed behavior think unintuitive wrt listentoonce api would expect semantics multiple events fire event event proposed anyevent semantics still reproduce eachevent behavior easily unambiguously thats intend current eachevent semantics need doubleonce feels kludgy keeping current eachevent semantics documentation updated make explicit", "num": "2963", "d": "1/2014"}, {"title": "modelisnew true put still issued rather post", "body": "sure expected behaviour docs say isnew true post sent save include id attribute data form put sent even isnew true modelisnew true viewon form submit function data delete dataid need get post otherwise put modelsave data course useless id null case model id set user server postput determined data modelisnew", "num": "2962", "d": "1/2014"}, {"title": "collectioncreate return request object", "body": "right current call returns model created inconsistent way work return xhr object allowing use deferreds consistent fashion since also networked operation return xhr object well reason returns model realize provide json object point need capture model instance callback could also pass model directly thus already model present believe api call requires use callback want capture result operation happy make pull req desired change", "num": "2961", "d": "1/2014"}, {"title": "collectioncreate adds model even valid", "body": "adding invalid model triggers modifies collection normal documentation says contrary equivalent instantiating model hash attributes saving model server adding model set successfully created seems way", "num": "2956", "d": "1/2014"}, {"title": "double validation save", "body": "runs two validations one one successful server response validating server data seems useless problem seems related code optionsvalidate true backbone version", "num": "2955", "d": "1/2014"}, {"title": "routernavigate never trigger route function defined routerjs like case", "body": "defined routerjs like backbonerouterextend routes routing see try access like like navigate gt routing gt navigate pagemain gt routing page main gt eval main success backbone backbone investigate change see fragment fragmentreplace pathstripper also optionstrigger return thisloadurl fragment loadurl empty string instead pagemain thisloadurl never loadurl pagemain trigger function ps use backbonequeryparams plugin help get url parameter", "num": "2954", "d": "1/2014"}, {"title": "could add parameter", "body": "newbie backbone use bookshelf found problem var user moduleexports basemodelextend var issue require issue userextend tablename users true add third parameter backbone entirely need thank", "num": "2953", "d": "1/2014"}, {"title": "backbonejs model save mulitpart formdata", "body": "include file data model attributes found link find difficult convert form data form include file input fields form saving form model attributes user backbonemodelextend readavatar function file callback var reader new filereader file api object reading file locally readeronload function thefile self return function e set file data correctly backbone model selfset avatarfilename thefilename avatardata fileeventtargetresult handle anything else want parsing file setting model callback file readerreadasdataurl file reads file memory encoded attribute function attr return objectdefineproperty thisprototype attr get function return thisget attr set function value var attrs view var formdata formserializearray thismodeldata formdata var profiledata windowformdata profiledata new formdata consolelog profiledata profiledata jqueryeach imagedata files function file readerreadasdataurl file profiledataappend imagedata file thismodelimagedata profiledata save data thismodelsave help solve problem", "num": "2951", "d": "1/2014"}, {"title": "server interaction callback always jquery inspired", "body": "many cases useful use always callback avoiding excess code better builtin events maybe", "num": "2950", "d": "1/2014"}, {"title": "add provision hooks router", "body": "wanted execute specific function beforeafter every route specific controller matched got api looks clean monkey patching route callbacks think worth core feature comments", "num": "2947", "d": "1/2014"}, {"title": "undocumented bc break backbone", "body": "removed possibility pass url option constructor collection upgrading guide mention", "num": "2945", "d": "1/2014"}, {"title": "newer versions backbone get query backbonehistory", "body": "writing plugin route management backbonejs noticed recent change commit issue makes longer returns query getting full fragment query useful know manually parsed url worry pushstate whatever options effect backbonehistory works find would best get directly fix could simple keeping reference called something like backbonehistoryqueryfragment whatever name makes sense storing reference replacing would interested pr please let know thanks", "num": "2944", "d": "1/2014"}, {"title": "add event collection create request lost using wait true", "body": "listen events hook promise nature show loading status disable buttons etc example adding new comment use freeze textarea button using request save new model lost therefore suggest add something like event occurs collection request made currently custom javascript sync function method model options var xhr modelprototypesyncapply arguments var collection modelcollection method create amp amp collection collectiontrigger create model collection xhr options return xhr", "num": "2943", "d": "1/2014"}, {"title": "introducing modelgetraw", "body": "found gist useful maybe become backbone feature", "num": "2941", "d": "1/2014"}, {"title": "adding two identical callbacks", "body": "add two identical events event dispatcher like later trigger actually executes twice nt think expected behavior identical listener replace previous opinions", "num": "2940", "d": "1/2014"}, {"title": "problem c code find nth smallest elementi think recursion", "body": "include int order int int start int end int rank order function int mark try int j k temp pivot x two markers j k initialised pivota start", "num": "2939", "d": "1/2014"}, {"body": "think ordering correct patched function indeed synchronous happens model destroyed removed collection point view application backbone nt lying actually happened", "d": "1/2014"}, {"body": "hi luisca search issues find one come several times best way go apply properties constructor quick one liner follows hope helps", "d": "1/2014"}, {"body": "many events nt bubble either focus blur change submit etc nt think makes sense backbone polyfill events introduce whole bunch code detect browsers order attach event handlers different ways browser jquery nt even anyone would jquery already machinery builtin really really need seamless event delegation recommend facebook react", "d": "1/2014"}, {"body": "yep yep syntax delegation bubbling events event nt bubble attach handler directly cleaned view", "d": "1/2014"}, {"body": "meh figured ended delegating hover handler would set scroll handler work around", "d": "1/2014"}, {"body": "gist helper method make simple possible anyone finds later setup view", "d": "1/2014"}, {"body": "model ids unique per model server returning multiple objects id seems like bug part server much backbone", "d": "1/2014"}, {"body": "error seems incorrect", "d": "1/2014"}, {"body": "right understand bug server wondering better way backbone handle error noticed attempt models collection adding behavior silently fails model added error thrown would expect adding models via call would act way would prefer adding duplicate models would throw error though imagine would breaking change many users", "d": "1/2014"}, {"body": "would prefer adding duplicate models would throw error though imagine would breaking change many users used behavior enhancement would expect adding models id via fetch call would act way quite", "d": "1/2014"}, {"body": "actually talking fellow devs would enough split inside project interested kind separation could prepare pull request", "d": "1/2014"}, {"body": "use underscore pick modelattributes", "d": "1/2014"}, {"body": "damn overlysimplified example trying keep sample code clean possible overdid correct example provided could simply use add override omit type attribute however start summary model add record model nt actually want omit record type contrary want replace summary type model really record want omit type way around summary added record really looking side note real life version even complex historical reasons actually four different forms data since storing four different collections problematic know collection use since represent serverside data trying merge single collection trouble inability control merges happen", "d": "1/2014"}, {"body": "perhaps accomplished", "d": "1/2014"}, {"body": "using type property represent completeness record seems problem solve specific problem would loose concept type going use model simply query fields point request data record needed another strategy would compute state record sync data comes server based reality available easy see general problem looking solve reality often people face problem vs added complexity question believe variety approaches work elegant less elegant proposal", "d": "1/2014"}, {"body": "yet third option pass custom parameter hash passed method javascript coladd models parse true customparse true parse function resp options optionscustomparse return thissomethingspecial resp return resp", "d": "1/2014"}, {"body": "hmmmm complicating factors make solutions problematic give ideas play thanks importantly seems clear point use case setmerge method pretty specific close ticket least time bettermore common case arises", "d": "1/2014"}, {"body": "hey brought times search past tickets unfortunately thats tradeoff using object store keys dont allow arbitrary values ids stick numeric unique sequential ids fine", "d": "1/2014"}, {"body": "since already api access points data ca nt internally properties simply prefixed like better yet suggested using thing done", "d": "1/2014"}, {"body": "doesnt seem like good solution either model collection much overhead cognitive otherwise see threads discussion suggestions", "d": "1/2014"}, {"body": "apologizes see previous tickets issue covers exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks", "d": "1/2014"}, {"body": "problem thats jan pm josh thomas notifications githubcom wrote apologizes see previous tickets issue exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks reply email directly view github", "d": "1/2014"}, {"body": "try looking previous tickets opening new ones thanks", "d": "1/2014"}, {"body": "second parameter always going whatever function sent back case default first parameter jquery ajax callbacks see reference used general term purposefully easily overridden work various data stores protocols", "d": "1/2014"}, {"body": "found workaround browserify run browserify following argument replaces backbone fronted code context follows", "d": "1/2014"}, {"body": "voila go", "d": "1/2014"}, {"body": "cspiegl learned gulpbrowserify use see", "d": "1/2014"}, {"body": "use gruntshell run browserify tried would like much better browserify command one saadly work tests", "d": "1/2014"}, {"body": "hi reinseth believe fixed though somewhat differently query params stripped nt matched fragment either try code see think", "d": "1/2014"}, {"body": "ah nt see fixes issue thanks quick reply", "d": "1/2014"}, {"body": "date", "d": "1/2014"}, {"body": "might want give shot stackoverflow gh tickets bugs issues directly related development library", "d": "1/2014"}, {"body": "inconsistency javascript uses positional arguments trying pass sans type sniffing almost function accepts one argument work", "d": "1/2014"}, {"body": "load router first ask questions mailing list stackoverflow irc channel please", "d": "1/2014"}, {"body": "documentation perhaps updated semantics", "d": "1/2014"}, {"body": "agree jashkenas syntax simple sugar binding individually", "d": "1/2014"}, {"body": "eventa eventb syntax simple sugar binding individually yep yep", "d": "1/2014"}, {"body": "model id model url model url want put model url rest goes", "d": "1/2014"}, {"body": "ask questions mailing list irc channel bug tickets", "d": "1/2014"}, {"body": "ok said put general discussion", "d": "1/2014"}, {"body": "agree model returned create nt useful since nt really know deal hear server consistent get xhr object promise chaining etc info reasoning", "d": "1/2014"}, {"body": "far reasoning see intended return model nt really reason specific use case necessitates behaving differently others", "d": "1/2014"}, {"body": "shortcut new model plus add collection save returned xhr reference model made want xhr use later", "d": "1/2014"}, {"body": "jashkenas could pass model created elsewhere additionally could empty noninitialized model worse model someone realizing network operation happening could start using model actually saved may desired behavior", "d": "1/2014"}, {"body": "could pass model create created elsewhere could intended use case code example makes sense noticeably awkward compared someone realizing network operation happening could start using model actually saved exactly optimistic models supposed used worried save failing model invalidated server want save complete shortcut think rails", "d": "1/2014"}, {"body": "normal nope nt model returned errors", "d": "1/2014"}, {"body": "try latest master see problem still exists nt", "d": "1/2014"}, {"body": "hi please check restores support query params thanks", "d": "1/2014"}, {"body": "hey probably open ticket bookshelf short answer need something like", "d": "1/2014"}, {"body": "github issues discussing bugsfeatures backbone support backbone try documentcloud irc stack overflow", "d": "1/2014"}, {"body": "could also save callback function variable pass variable events agree still bit verbose nt think really bad explicit", "d": "1/2014"}, {"body": "another solution get returned deferred object work want obviously way", "d": "1/2014"}, {"body": "fetch currently pass complete callback could set always callback returned jqxhr", "d": "1/2014"}, {"body": "found feature documentation master branch could work save methods", "d": "1/2014"}, {"body": "yes fields options get passed ajax method anything goes backbonesync", "d": "1/2014"}, {"body": "ahh jquery callback hmm good maybe know secret builtin event complete possible use clumsy", "d": "1/2014"}, {"body": "hi darrrk complete callback certainly nt secret part jquery api backbone jquery promises also allowances via listen space separated events think one probably handle use case", "d": "1/2014"}, {"body": "thanks braddunbar denniskuczynski think issue enough info solve problem devs grep free total options callback total builtin event", "d": "1/2014"}, {"body": "record jquery complete callback deprecated favour always promise style callback", "d": "1/2014"}, {"body": "suggested times early one search though issues similar terms see bit background easy enough wrap callbacks directly plugin ie backboneroutefilter base router pattern give shot let know works", "d": "1/2014"}, {"body": "hi jaseemabid changes wrapping route handlers made much easier think probably fit needs rather well", "d": "1/2014"}, {"body": "braddunbar good one thanks", "d": "1/2014"}, {"body": "docs many tweaks optimizations bugfixes relating backbone including url overrides mutation options explicit got suggestion improve wording feel free open pull ghpages branch", "d": "1/2014"}, {"body": "well read optimizations bug fixes nt expect break backward compatibility bc break requires modifying code keep working explicit doc needed change quite easy went unnoticed initially updating backbone", "d": "1/2014"}, {"body": "one dev bufix another bc guess backbone svelte library changes releases tend minor see latest release example since backbone api almost entirely surface area behavior changes require mucking public contract sorry one bit guys upgrade", "d": "1/2014"}, {"body": "closed", "d": "1/2014"}, {"body": "hi jisaacks pull discussion would mind checking see would fit use case", "d": "1/2014"}, {"body": "braddunbar thanks pointing branch add project see solves things report back figure", "d": "1/2014"}, {"body": "braddunbar branch solve issues actually lot make life easier idea make release", "d": "1/2014"}, {"body": "assume could go next release though certain", "d": "1/2014"}, {"body": "alright well keep eye closing", "d": "1/2014"}, {"body": "nt exactly follow problem lost adding events things find useful totally fine great way go", "d": "1/2014"}, {"body": "request jquery xhr lost save called model returns xhr usually hook onto example showing loading icon hiding request done used ca nt listen events collection new model nt added collection yet current implementation way get access xhr returned subsequently lost", "d": "1/2014"}, {"body": "see previous tickets getters setters backbone opted leave functionality userland see pretty trivial set style gettersetter style however like", "d": "1/2014"}, {"body": "seems correct interesting note though way currently one bindings without taking one well realworld problem running making note", "d": "1/2014"}, {"body": "mean necessarily problem per say realized personally expected behavior hand see also understandable add twice way thinking ca nt think scenario want execute twice per one event sure plenty situations people want behavior smile always matter opinion however raise valid point remove one however feel like also expected behavior", "d": "1/2014"}, {"body": "however raise valid point objectoff remove one however feel like also expected behavior return event uids solve would break chaining feature eventinheriting objects currently without solid reason break functionality going stay asis closing feel free discuss like", "d": "1/2014"}, {"body": "would nice model internal state asifremoved time remove event fired took crack nt pass test suite", "d": "1/2014"}, {"body": "jashkenas trying without loops", "d": "1/2014"}, {"body": "yes placing removal line clever spots breaking removereference dice", "d": "1/2014"}, {"body": "moved", "d": "1/2014"}, {"body": "think current behavior desirable apps really want use slug id go tweak uniqueid output suit preferences remember never really use arbitrary strings backbone ids friends spoil day", "d": "1/2014"}, {"body": "faviconico added bowerjs ignore list longer covered docs entry", "d": "1/2014"}, {"body": "good call", "d": "1/2014"}, {"body": "leading hash probably least one problems nt right place debugging help try irc channel instead", "d": "1/2014"}, {"body": "sorry discussed elsewhere ran issue think main issues sync event collection gets called two different sets arguments different signatures bit confusing one collection first argument model collection first second argument changing one calls always collection sync event", "d": "1/2014"}, {"body": "deknar using trailing slashes everywhere sake seoduplicate pages analytics backbone always removes trailing slash root even using routernavigate really undesirable way backbone forces use url without trailing slashes must optional explicitly using routernavigate slash nt removed", "d": "1/2014"}, {"body": "hi getting error already included dependencies still getting error anyone help", "d": "1/2014"}, {"body": "referencing mini plugin way attach whitelisted initialization options directly view object considers default values required options", "d": "1/2014"}, {"body": "hey dfournier try using namespaces use hood removing jquery events bound view easy calling within view instance example use custom namespace want events", "d": "1/2014"}, {"body": "sorry location header way go real restful api backbone really support behaviour nonsense throw rest constraints aboard javascript framework", "d": "1/2014"}, {"body": "noted specifically required also recommended server also returns characteristics created entity format specified contenttype header compatible backbone afaik automatic fetching uri given location header mandated tell", "d": "1/2014"}, {"body": "well good nothing stopping going making additional request fetch url location header right", "d": "1/2014"}, {"body": "exactly point", "d": "1/2014"}, {"body": "fact think way supposed handle edit clarify fetching uri user discretion mandatory automatic", "d": "1/2014"}, {"body": "u use location header hypermedia api want identify entities uris therefore client nt need object created need uri id uri fetch object wanted restapi abstraction layer emphasizes restful practices like backbone model support hide behaviour ease programmers work well least opinion", "d": "1/2014"}, {"body": "point applevel design decision something frameworks enforce need model behave way subclass handle differently", "d": "1/2014"}, {"body": "debatable imagine exception probably already error state cleanup javascript", "d": "1/2014"}, {"body": "worth new backbone spent better part two hours trying figure model reflecting server state attributes removed noted previous posters backbone documentation suggests fetch sync server client state expected would remove attributes personally like idea able pass reset flag agree ephemeral data mixed model attributes really ephemeral would nt matter blown away anyway would also suggest reopening ticket", "d": "1/2014"}, {"body": "thanks ptnplanet andrewtennison opted change framework trailing slashes would ever used using wordpress simply created custom permalink settings gt permalinks postname without trailing slash works great", "d": "1/2014"}, {"body": "braddunbar love totally worked put routetoregexp thingy", "d": "1/2014"}, {"body": "glad could help smile", "d": "1/2014"}, {"body": "per mdn documentation state object saved disk nt understand different saving local storage think readdressed using local storage another method saving state seems extraneous state object available history api", "d": "1/2014"}, {"body": "right contra using state object extraneous local storage cookies method saving state simply tied current url", "d": "1/2014"}, {"body": "would nt better utilize tool provided state object provides straight forward method saving accessing previous states rather sifting local storage time user arrives page historystate available would allow ability recall generic state view via url route also specific state view user might want return", "d": "1/2014"}, {"body": "view simple apps use routes use simply copy paste url full experience complex apps use routes simple entry points general areas application particular records use storage apis better represent type persistence whether user server session local using history state object defeats great simple way single page apps use urls potentially permanent bookmarks", "d": "1/2014"}]