[{"title": "get digits worth issues", "body": "really try hit milestone", "num": "1000", "d": "1/2014"}, {"title": "able specify types using reactproptypesoneof", "body": "see nt work see implementation unfortunate ca nt set prop bonafide number get course calls turns array numbers object number gets cast string used key store value", "num": "999", "d": "1/2014"}, {"title": "gives parse error", "body": "parse error unexpected token gt workaround applies gt lt", "num": "998", "d": "1/2014"}, {"title": "invariant violation probably means dom unexpectedly mutated eg browser", "body": "getting whole bunch errors starting finishing changing widgetssettingsloginjs line problem goes completely away problem crossbrowser steps reproduce checkout cd lostdappsrc python simplehttpserver maybe nt even need work directly opening indexhtml browser see error console change everything perfect", "num": "997", "d": "1/2014"}, {"title": "ignore whitespace container element reusing markup", "body": "moment whitespace around prerendered component inside container html wo nt reused uses return instead case example html wo nt reused html want send pull request changes look first instead", "num": "996", "d": "1/2014"}, {"title": "displayname set jsx multiple assignments", "body": "code like get generated code code like set", "num": "990", "d": "1/2014"}, {"title": "support form novalidate attribute", "body": "using attribute component gets stripped could add whitelisted attributes info attribute", "num": "988", "d": "1/2014"}, {"title": "problem jsx", "body": "ran small problem output jsx compiler uses reserved words become problem json objects example becomes fix problem put quotes around keyword", "num": "987", "d": "1/2014"}, {"title": "jsx parse error", "body": "saw jsx reactdom var hellomessage reactcreateclass render function return reactrendercomponent mountnode causes parse error removing k fixes", "num": "986", "d": "1/2014"}, {"title": "add setstatedeep", "body": "know people want", "num": "984", "d": "1/2014"}, {"title": "ensure setstate callback reactmountready always enqueues", "body": "setting state callback transaction must reconcile callbacks transaction completed effectively batching end add unit tests make sure works correctly", "num": "983", "d": "1/2014"}, {"title": "reactq bad proptype error logged render reactq", "body": "edit short summary javascript componentdidmount function var self using code react q child component uses raise error pass string object actually seems exception raised point setstate think q ignores perhaps better log error point hard find child component nt want render got error maybe react bug maybe react something help developpers loose time situation nt guard supposed log error least non minified dev version react previous content problem discussed petehunt irc today finally find strange behavior components check opensourced one wrapper handle io operation figured many cases io operation promise ends error child component updated see render method parentwrapper component called seems nt trigger anything child component error console finally found related bad prop type setting child component cases error passed parent component object string tried change object passed child last version works fine first version nt work kind expected pass string child requires object problem nt got error lost half day trying figure problem see error set state q promise error handler see may related using q promises react actually use following code parent got expected result error jumperrorstringpersoncontactonprofileobject", "num": "978", "d": "1/2014"}, {"title": "jsx transformation tool incorrectly process path parameters windows machines", "body": "moment following function js function absolutepath workingdir pathtojoin pathtojoin workingdir pathnormalize workingdir pathtojoin pathnormalize pathtojoin commonerjs nt procees absolute path arguments since expects unix style", "num": "977", "d": "1/2014"}, {"title": "make docs site responsive", "body": "first second good tools like dash display documentation smaller window", "num": "976", "d": "1/2014"}, {"title": "transaction methodinvocationtime includes initialize time close time", "body": "seems weirdly asymmetric intended", "num": "974", "d": "1/2014"}, {"title": "jsxtransformer used rjs optimizer ca nt load sourcemapgenerator", "body": "tricky issue best explain using jsxrequirejsplugin build react app using amd using custom branch react custom builds based master recently everything working fine since unable create optimized builds using plugin first assumed issue plugin seems offending line changed function js function transformreact source return transform visitorsreact source sourcemap true exportstransform transformreact change nt forced things worked fine change longer possible build amd environment line errors js running requirejs dist requirejs task tracing dependencies jslibrequirejsrequire error typeerror undefined function objectarrayset eval eval eval objectsourcemapsourcemapconsumer eval usersthomasboytvenmodevopsvenmowebviewsbasenodemodulesgruntcontribrequirejsnodemodulesrequire eval eval transform eval objecttransformreact transform eval usersthomasboytvenmodevopsvenmowebviewsbasenodemodulesgruntcontribrequirejsnodemodulesrequirejs jsxloadonload eval lt anonymous objecttextfinishload eval best guess arrayset module nt correctly loaded although included built file nt know enough browserify debug hoping someone else take look find going meantime suppose update branch undo change set", "num": "972", "d": "1/2014"}, {"title": "better docs integrating jquery et al", "body": "apparently docs nt clear need section docs talks integrate third party plugins detail stress difference mounting updating", "num": "971", "d": "1/2014"}, {"title": "clarify lifecycle rendercomponent vs rendercomponenttostring", "body": "discussed irc lifecycle functions misleading using namely called least documented lifecycle docs page also discussion changing method names note clearly need hooks issue name former conveys component mount fact wo nt one possibility add another alwaysrun phase mounting phase run rendered string dom eg prepare initialize lifecycle would easily explained follows prepare compoent mount component rendering dom render component first time happy contribute pr either docs method names decision reached", "num": "968", "d": "1/2014"}, {"title": "disable weird codemirror indentation behavior", "body": "since codemirror nt understand jsx properly editors website behave strangely indentation sometime like create fullblown jsx mode think disable smart indentation behavior think want turn", "num": "966", "d": "1/2014"}, {"title": "compatible version found esprima", "body": "yields following empty repository npm err notarget compatible version found esprima substackesprima iskeyword npm err notarget valid install targets npm err notarget", "num": "965", "d": "1/2014"}, {"title": "boolean element attributes disabled checked etc jsx", "body": "conditionally putting attribute elements boolean variable falsey attribute wo nt output true output following works browsers spec could get line spec setting element requires ternary operation instead simple boolean ideally current bit jsx top issue would output html assuming set true generally known boolean attribute gets assigned variable set example jsx output attribute per spec", "num": "961", "d": "1/2014"}, {"title": "jsx watch crash", "body": "run jsx watch src build compiles jsx files create lockpid file build directory next jsx file modification jsx process crashes lockpid present jsx wo nt compile jsx files even ran manually use osx maverick jsx", "num": "957", "d": "1/2014"}, {"title": "batching external events", "body": "react batches component updates become dirty eventcallback events also batched however exposed use external events ajaxreplies nonreact dom events events seems natural extend see two obvious solutions export settimeout function reactbatchedupdates function bind settimeout reactbatchedupdatesbind null function bind export callback factory thoughts guessing belongs", "num": "956", "d": "1/2014"}, {"title": "cursor jumps end controlled input", "body": "input element controlled model cursor jump end line every change makes impossible edit text end input quick demo noted using external model using view state maybe something wrong usage suggested fix maybe input overridden unless value differs otherwise cursor position manually preserved also see entry documents ability grab preserve cursor position", "num": "955", "d": "1/2014"}, {"title": "rendercomponenttostring events leaks unless component unmounted", "body": "repeated calls rendercomponenttostring evented components ie onclick thishandleclick effectively leak memory call unmountcomponent rendered components lest event listening closures remain nongarbage collected long lived processes repeated render calls notice adding componentunmountcomponent would fix would break tests render react root document nodes invariant violation var link reactcreateclass leak function event render function return function log str consolelog str var root reactrendercomponenttostring root log rootunmountcomponent rendercomponenttostring api bound async sample future proof", "num": "954", "d": "1/2014"}, {"title": "docs schema component lifecycle", "body": "hello guys would awesome lifecycle doc page simple schema outline order methods", "num": "951", "d": "1/2014"}, {"title": "stabilized public api", "body": "one things holding us back right nt stable public api really like cut instagram npm version react unfortunately nt include addons need issue like propose following changes consistent iterable gets wrapped new object basically thin wrapper around means people actually introspect without assuming array nested object something nt think memory utilization big problem today think change would ok especially implemented lazily know dnolen wants something like plug lazy child data structure think important solve another option thinking putting begs question adding well think api would become confusing think function helpful hard use externally right adding public api makes sense anyone think potential overuse public apis think centralize injection points react module make public reason need check repo configure custom react rename npm module many addons need stuff like foreseeable future let embrace rename noncore projects nt depend put addon npm module everything add new npm package export injected new public apis use package builds put cache front good citizens way people build without us provide million builds config tool", "num": "946", "d": "1/2014"}, {"title": "unit testing react backbone without phantomjs", "body": "closely related entirely curious one go around testing browserified backbone react apps appears react nt play well phantomjs looking alternatives jsdom next list looking suggestions properly handle issue arises using loading app html template actually testing dom ca nt things load packages global scope ideas theorems suggestions approach unit testing without phantomjs", "num": "945", "d": "1/2014"}, {"title": "jsx sugar object props", "body": "hopefully get jsx namespacing soon accessing components inside objects technically one thing jsx vanilla js using object props jsx beautiful love would much rather whatever syntax prefer clear specifically talking supporting object additional properties still sugar feature jsx capable enough everything js still looking familiar readable js counterpart mentioned could take upon implement relatively simple change", "num": "944", "d": "1/2014"}, {"title": "replacing mountindex etc something less fragile", "body": "jordwalke talked briefly back recall correctly working bit right information progress eta done iframefix pr gotten lot familiar backside might perhaps take stab otherwise", "num": "942", "d": "1/2014"}, {"title": "better error message returning two elements", "body": "since quite new react tried render function return something like safari got message error parse error line unexpected identifier took quite found second div element problem possible error message mentioned second element unexpected identifier confusing", "num": "935", "d": "1/2014"}, {"title": "warn using hyphenated style values", "body": "happen support hyphenated keys style object initial render attempt hyphenate camelcased keys styles never updated subsequent renders never attempt unhyphenate warn see hyphenated style", "num": "932", "d": "1/2014"}, {"title": "investigate whether style setting optimized", "body": "see profile setvalueforstyles takes time", "num": "929", "d": "1/2014"}, {"title": "nt run browser perf testing noncode changes", "body": "things like nt run full suite would great could figure make happen cc balpert subtlegradient", "num": "927", "d": "1/2014"}, {"title": "textcontent vs innertext", "body": "fix merged reverted svg text changed chrome example issue internal tests relying behavior wo nt work firefox fixed case innertext seems return visible text little experimentation shows may invent formatting stacked divs headings may affect markup testing example", "num": "923", "d": "1/2014"}, {"title": "cryptic error xjs tag name empty typo", "body": "hello really bug could better clearer error message jsx compilation fails took hour find problem code error message nt really help found forgot add would easier find error mentioned problem attribute", "num": "917", "d": "1/2014"}, {"title": "latest build cause front page todo error", "body": "cloned clean copy react built docs front page todo example behaves weirdly todo created todo followed empty one probably submit triggered twice", "num": "916", "d": "1/2014"}, {"title": "something comment section bottom docs", "body": "comment sections exist rather people come irc questions often neglected bottom doc page", "num": "915", "d": "1/2014"}, {"title": "jsx gives incorrect error component missing tag closing", "body": "way much time found getting jsx error like error parse error line unexpected token pointing line last line file error actually caused component created without closing slash tag recreated creating file foojs contents run jsx file", "num": "911", "d": "1/2014"}, {"title": "mobile browser support docs", "body": "currently mentioned legacy browser experience docs warn suggest shimming ios android versions might quite many mobile mobile users lumias pointertouch events etc wo nt work yet example missing safari old ipads etc usually include even old mobile browsers", "num": "909", "d": "1/2014"}, {"title": "allowfullpagerender option working", "body": "trying mount element onto code trying run browser using browserify javascript jsx reactdom use strict var react require react reactallowfullpagerender true var app require documentaddeventlistener domcontentloaded function reactrendercomponent document fiddle result option nt seem working getting error getting option set", "num": "908", "d": "1/2014"}, {"title": "add public api reactupdatesbatchedupdates", "body": "ember similar emberrun perhaps something mirror also helpers like emberrunlater replacement settimeout better batching", "num": "906", "d": "1/2014"}, {"title": "make uncontrolled inputs user friendly", "body": "simple enough bit verbose nothing wrong also supported least meaning uncontrolled fun work use top becomes even worse seizes useful nice arrays react longer work considering little actual code perhaps idea consider etc helpers inputs would make reasonable common usecases lot less lowlevel work cost bytes", "num": "905", "d": "1/2014"}, {"title": "strange npm install behavior", "body": "react version fails reacttools version works react version complains incompatible esprima version", "num": "904", "d": "1/2014"}, {"title": "fix tutorial exact js translation example code", "body": "someone confused might well fix tutorial precise", "num": "903", "d": "1/2014"}, {"title": "able checkin js microsoft tfs", "body": "please consider renaming file js possible checkin file microsoft team foundation server thanks max", "num": "900", "d": "1/2014"}, {"title": "outdated uncontrolled components documentation", "body": "page uncontrolled components likewise supports defaultchecked supports defaultselected likewise supports defaultchecked supports defaultvalue", "num": "899", "d": "1/2014"}, {"title": "jsx support jsbin", "body": "nt strictly react issue would nice add jsx support jsbin small amount code coffeescript support nt hard make pr jsx", "num": "898", "d": "1/2014"}, {"title": "jsx whitespace properties lost", "body": "looks like current position moving incorrectly jeffmo syranide know something getting fixed whitespace pr separate problem becomes", "num": "896", "d": "1/2014"}, {"title": "release react", "body": "horizon things want make sure nt get forgotten x updated esprimajstransform", "num": "894", "d": "1/2014"}, {"title": "use node node instead defining constants", "body": "think safe cross browser point make sure nt ever running code path server side nt think worry js anodenodetype nodeelementnode instead var elementnodetype anodenodetype elementnodetype", "num": "893", "d": "1/2014"}, {"title": "consider renaming reactjs reactdebugjs", "body": "seen issues logging messages addition changing message however ends revived think might want make clear nt simply minified version build actually improved debugging sure would mean new reactjs unminified prod build thoughts", "num": "890", "d": "1/2014"}, {"title": "feature test startup instead", "body": "could instance simplified code even many tests done startup effect immeasureable comparison even manage create elements second seems like could simplify code slightly like since still use safe use environments right use strict var executionenvironment require executionenvironment gets key used access text content dom node executionenvironmentcanusedom moduleexports innertext documentcreateelement div innertext textcontent", "num": "886", "d": "1/2014"}, {"title": "problem returning", "body": "right accepted return mixin also defines one two returns merge throws error trying merge object correct behavior cpojer", "num": "883", "d": "1/2014"}, {"title": "ship", "body": "things fixed safe put mostly related wish better tool commits consider think let collect commitsprs want take", "num": "882", "d": "1/2014"}, {"title": "transferpropsto shall", "body": "let make issue hopefully get progress issue day imaginary component thin wrapper using defines custom event however may soon real dom property react breaks component property still transfered current implementation really called something like applies special transforms certain dom attributes would also benefit able exclude properties transfer properties component consumes seems basically categorize dom properties three categories css events supported misc everything else etc perhaps ca nt really formulate usecases right seems like would often want css events css even everything else component takes care personally feel like would interesting react exported helpers transfer strategies could easily properties like works like perhaps nt useful practice though guess events could also benefit transfer strategy component could listen also allowing parent listen", "num": "875", "d": "1/2014"}, {"title": "pass component argument reactrendercomponent callback", "body": "callback method pass rendered component callback useful want call component method completely mounted like", "num": "872", "d": "1/2014"}, {"title": "ghpages docs switch jsx js", "body": "would possible button website examples compiles switches jsx js example happy using straight js likely adopt one new thing experiment two probably others boat", "num": "869", "d": "1/2014"}, {"title": "make cssproperty closurecompiler advanced compatible", "body": "looking recently tickled spidey senses closure compatibility thought module would need style object keys quotes dump keys still jordwalke piranha either know module currently problem still misunderstanding needed closure advanced mode", "num": "867", "d": "1/2014"}, {"title": "proptypes weak confusing undocumented", "body": "clear right", "num": "863", "d": "1/2014"}, {"title": "reactrendercomponenttostring failing case component children function", "body": "javascript var hello reactcreateclass componentdidmount function render function return thispropschildren reactrendercomponenttostring hello null function return reactdomdiv null hello function consolelog results", "num": "860", "d": "1/2014"}, {"title": "iframe reinitialise moving within group components", "body": "moving component iframe within group components reinitialises iframe iframe reinitialises moving moving upward seems work fine example", "num": "858", "d": "1/2014"}, {"title": "run tests built files exist src", "body": "right run tests find includes tests still sitting around previous builds nt currently exist cc subtlegradient spicyj", "num": "856", "d": "1/2014"}, {"title": "empty element handled correctly dangerouslysetinnerhtml", "body": "react version become dom normal text red following example", "num": "854", "d": "1/2014"}, {"title": "transition problem code", "body": "may right place try code leave transition always applied last word even click remove word may try believe problem introduced copied code react page", "num": "853", "d": "1/2014"}, {"title": "benchmark clean mountimage strings", "body": "currently cleaning strings mountimage component gets mounted memory could freed act freeing memory could expensive worth needs proper benchmarks workaround", "num": "851", "d": "1/2014"}, {"title": "support multiple child insertion points", "body": "briefly spoke petehunt tracking issue times multiple insertion points would useful old web components spec looking attribute sure current plans pete said could done passing children props feels like hack riffing old spec idea something vaguely like html select thispropschildren title thispropschildren string css selector matching elements removed avoid duplicate insertion", "num": "848", "d": "1/2014"}, {"title": "transitiongroup leave animation nt get nonactive style", "body": "think come across bug transitiongroup basically causes properties leave styles ignored fiddle demonstrating problem see leave animation nt use correct origin transition latest chrome ff properties moved alwaysmatching selector bluebox works fine guess would happen active leave class added tick leave", "num": "847", "d": "1/2014"}, {"title": "expose reactcompositecomponentbase via reactinternals", "body": "objects created functions returned constructor nt exposed endusers adding would enable check anyone needs use case creating version creationixdombuilder uses functions instead need detect objects left asis react deal", "num": "843", "d": "1/2014"}, {"title": "add reactproptypesany", "body": "allow value passed prop valid proptype would allow enforce something passed whatever may also supports documenting possible props component even prop may anything explicitly listed useful documentation", "num": "842", "d": "1/2014"}, {"title": "link jsx depth component specs lifecycle page wrong", "body": "link jsx depth displayname section component specs lifecycle page points url correct correct url", "num": "841", "d": "1/2014"}, {"title": "allow rendering document fragment", "body": "shadow roots nodetype documentfragmentnode trying render one react throws error explicit check allow rendering elementnodetype docnodetype particular reason document fragments excluded", "num": "840", "d": "1/2014"}, {"title": "warning", "body": "using standard way set value component yet react uses another convention add warning value set tell developer put dev example", "num": "839", "d": "1/2014"}, {"title": "htmljsx fix caseinsensitive attributes style names", "body": "solution known attributes like maxlength camelcased maxlength whatever defaultdompropertyconfig might good idea throw warningerror unknown properties nt get discarded without knowing styles lowercased processing example transpiles transpiles generates", "num": "838", "d": "1/2014"}, {"title": "detect vendor prefixes css numeric value detection", "body": "add support need support vendor prefixes well right hard code list properties check object see allow numeric value unchanged need support checking vendor prefixed values think change lookups still hardcode values include possible prefixes instead add method checks object falls back stripping prefix think find prefix checking think call method", "num": "837", "d": "1/2014"}, {"title": "support flex css property better", "body": "firs unitless seen hack value specified make pass check skip adding px actually shorthand property support expansion right properties", "num": "836", "d": "1/2014"}, {"title": "running single specsuite webdriver tests", "body": "jasmine select single specs run using url parameter like note compares beginning string spec file path important later substring nt work debugging remotely browsers would help whole test suite takes quite time run lot logging go perhaps one could forward spec param testindexhtml even better allow substrings forwarding param grunt similarly debug conditionally checking param missing use default specfilter param filter manually returning prevent skipped specs logged posted back server one filter around example cc subtlegradient", "num": "835", "d": "1/2014"}, {"title": "make possible rendercomponenttostring without extra attributes", "body": "wanted talked generating static sites reactpage come let make possible accept options generate need cascade html generation", "num": "834", "d": "1/2014"}, {"title": "change binjsx default file extension jsx", "body": "currently binjsx defaults looking files contain jsx content compile whilst possible override using think since jsx content valid javascript using extension default nt ideal could change look files instead another advantage generated files live directory source simplifies generation source maps files well path trivially relative generated example given running would result", "num": "832", "d": "1/2014"}, {"title": "add warning making controlled components without onchange handler", "body": "", "num": "825", "d": "1/2014"}, {"title": "closure compiler advanced mode externs", "body": "este already integrated react closurecentric framework externs react steida already created made missing exports might good add mentions docs could also possible make script automatically generate externs react", "num": "824", "d": "1/2014"}, {"title": "better error message invalid argument setstate", "body": "passing function properties simply wrong thing yields rather cryptic especially since message says caller fault", "num": "820", "d": "1/2014"}, {"title": "use reactjsorg domain site", "body": "currently use site redirects nt use reactjsorg site instead means example would instead think looks professional githubio domain github handles redirects old urls new ones see details", "num": "817", "d": "1/2014"}, {"title": "fails parse", "body": "js jsx reactdom var hello reactcreateclass render function return reactrendercomponent documentbody replace parse error happens going", "num": "816", "d": "1/2014"}, {"title": "wishlist integrated stateful routing", "body": "idea please let know good routes singlepage app basically represent state props depending perspective noone state better react makes think react awesome route management taken stab making singlepage app react using backbonerouter routing nt terrible nt amazing either router event handlers called setstate translating routeparams state adhoc ideally could onetoone mapping gt page personarchive params person joan date new date back could call would right thing abstract urls away developers never care read props state route render appropriately super offbase better way stateconscious routing would love put together proof concept idea sounds appealing", "num": "815", "d": "1/2014"}, {"title": "server rendering slower npm react", "body": "ran benchmarks server modifying use jsdom results surprising browserified faster npm version even performance ranking test run time lt lt lt suspect regular js object perhaps getter thus carries penalty test everywhere also minified version might still perform best least time ago used function source length including comments heuristic function complexity compilation time thus affecting chances optimization cases effect might negligible", "num": "812", "d": "1/2014"}, {"title": "onscrolldetail undefined time", "body": "got synthetic plnkr basically illustrates event onscroll handler always undefined value detail property chrome version fedora case nt work browser get idea something meaningful doc wrong please correct", "num": "810", "d": "1/2014"}, {"title": "changing text element content svg nt work properly", "body": "jsfiddle demonstrates clicking click button update svg element content add letters instead nothing however state confirmed changing since elements page updating properly note put text attribute element attribute update something element content", "num": "807", "d": "1/2014"}, {"title": "include indexhtml tutorial starter kit", "body": "might make sense include files maybe static json hat tip locks idea", "num": "800", "d": "1/2014"}, {"title": "onmouseover onmouseout events element work", "body": "example nt tested svg elements may", "num": "798", "d": "1/2014"}, {"title": "make reactmarkupchecksumcanreusemarkup injectable save bytes", "body": "original description petehunt right even nt using server rendering paying price bytes wire instead make injectable", "num": "796", "d": "1/2014"}, {"title": "document displayname", "body": "could nt find reference fact jsx transform attaches component spec would nice document somewhere importantly using jsx means debugging messages littered found using hyper", "num": "793", "d": "1/2014"}, {"title": "link react devtools official docs", "body": "nt know right place link maybe getting started tutorial tooling integration", "num": "791", "d": "1/2014"}, {"title": "related target probably wrong nested container hierarchies", "body": "made events properly fire container elements events relatedtarget still pointing leaf node believe need parallel calls target relatedtarget thread various extractevents functions", "num": "790", "d": "1/2014"}, {"title": "enterleave event targets probably wrong rendering iframe", "body": "cases set enterleaveeventplugin probably want", "num": "788", "d": "1/2014"}, {"title": "onmouseenter targetrelatedtarget incorrect", "body": "seems like properties synthetic mouseenter event reversed target element entered familiar enough code know supposed work seems like wrapped native event mouseout event properties never swapped account fact reduced test case", "num": "785", "d": "1/2014"}, {"title": "example using react", "body": "sure right place ask examples using react render visualization created seems like react virtual dom could really speed animations transitions used visualizations like force directed graph draws svg long react manipulate svg like dom work right still react newb looking suggestions get started", "num": "782", "d": "1/2014"}, {"title": "memory leak unmounting component containing user components", "body": "unmounting components like javascript id someuserdefinedcomponent render function return memory leak happens reactmountgetid node puts dom nodes back nodecache right purged cache fix leak need readonly getid happing unmounting example component label component gets purged nodecache reactdominput component going unmount calls method contains thisgetdomnode iterates children form element calling getid puts elements back cache first purged put back cache causing memory leak playing react day sure way correctly fix issue", "num": "781", "d": "1/2014"}, {"body": "nm fixed", "d": "1/2014"}, {"body": "lol", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "grats bro", "d": "1/2014"}, {"body": "wow nevermind", "d": "1/2014"}, {"body": "probably fixed esprima change see also cc spicyj", "d": "1/2014"}, {"body": "one actually different", "d": "1/2014"}, {"body": "problem browsers like aw helllllll change dom mutation happens react done thing completely true straight html new problem nt try move elements html see simple styles top several ways happen another example nested tags example problem htmlcss fact looks like dom gets super crazy adds entirely new shit since react nt anything wrong going close use wrap fine thanks detailed report though", "d": "1/2014"}, {"body": "hopefully explicit warning soon", "d": "1/2014"}, {"body": "thanks great explanation super fast response", "d": "1/2014"}, {"body": "inclination would ignore text nodes comprised solely whitespace", "d": "1/2014"}, {"body": "true work", "d": "1/2014"}, {"body": "fixed master whitespace pr took care spaces appearing literally everywhere", "d": "1/2014"}, {"body": "sweet looking forward next release grinning", "d": "1/2014"}, {"body": "syranide thought pr modified jsx adopting serverrendered markup", "d": "1/2014"}, {"body": "spicyj yes jsx seemed like whitespace arbitrarily introduced jsx issue perhaps mistaken proofreading may case actually sure rowno means", "d": "1/2014"}, {"body": "maybe clearer markup wo nt reused html markup html element output generated using react render entire page dynamic parts problem occurs combining react output serverside templates", "d": "1/2014"}, {"body": "rowno aha yeah mistake fixed master", "d": "1/2014"}, {"body": "fixed master", "d": "1/2014"}, {"body": "use instead source", "d": "1/2014"}, {"body": "still allow since nondom components etc completely sure stringifying keys add mode cc jeffmo", "d": "1/2014"}, {"body": "ideally would nt anything jsx since jsx promises top head sure things would need change make compat seem reasonable transform shims particular since issue seems pop often", "d": "1/2014"}, {"body": "fixed waiting transform sync bump esprima version bring", "d": "1/2014"}, {"body": "guess question whether something react though would support working immutable mutable structures react currently explicitly designed work well seems", "d": "1/2014"}, {"body": "think ship helper utilities nonmutative mutative merges respectively merging deep usually requires caller specify handle arrays usually clear one reason nt used deep merging much usually accomplished several shallow merges var newobj mergedeep oldobj something deep hi var newobj merge oldobj something merge oldobjsomething deep hi though know much uglier like deep merge nt received feedback implementations worked hard judge decent sure nt right thing edge cases somewhere seen really great implementations allow resolving arrays arbitrarily", "d": "1/2014"}, {"body": "also tried code javascript componentdidmount function var self seems setstate method triggers rendering synchronously maybe q ignoring errors happen error handler something like nt setstate rendering supposed queued something nt really expect nt guard supposed catch error log", "d": "1/2014"}, {"body": "seems problem commoner js", "d": "1/2014"}, {"body": "mention reconciliation page understand element removedadded vs updated", "d": "1/2014"}, {"body": "fwiw roughly code causing problem think mistaken theory would called whenever node rendered instead rendered list like setstate even though first element changed significant way nt called maybe never really figured going decided never conditionally construct elements want tweak rendering also eventually found bootstrap example repository nt linked anywhere addition modal example example like tooltip would nice tooltips nt element kind annotation existing element", "d": "1/2014"}, {"body": "hey ianb think tooltip component nt change behavior underlying dom manipulated happens instead", "d": "1/2014"}, {"body": "version node npm", "d": "1/2014"}, {"body": "\u03bb node version \u03bb npm version", "d": "1/2014"}, {"body": "interesting branch definitely exists substack repo much us point except switch using envifynext already trunk", "d": "1/2014"}, {"body": "agree go disabled disabled disabled former xhtmlcompatible may desirable want take crack pr", "d": "1/2014"}, {"body": "sure take look next days personally rather emit bare attributes xhtml compatibility could good say sort configuration option control", "d": "1/2014"}, {"body": "bare attributes although nt think configurations bit granular imo", "d": "1/2014"}, {"body": "nt see configurable emit bare attributes use fallback browser nt spec edit hmm actually supports bare attributes well actually supporting browsers nt go ahead make behavior think worth considering adding bare attributes jsx well edit oh wow already idea", "d": "1/2014"}, {"body": "syranide bare attributes standard way things xhtml came along told everyone supported everywhere except xhtml documents course", "d": "1/2014"}, {"body": "spicyj cool easy safe change right", "d": "1/2014"}, {"body": "think", "d": "1/2014"}, {"body": "cc yungsters vaguely remember reason bare attributes work cool", "d": "1/2014"}, {"body": "think good idea reason nt already done probably due oversight update also make sense attributes configured", "d": "1/2014"}, {"body": "yungsters probably need validate properties really meant bare", "d": "1/2014"}, {"body": "yeah find valueless may need configuration", "d": "1/2014"}, {"body": "afaik bug whatever jsx relies expose feature make sure close watch instance instead closing terminalpowering fine", "d": "1/2014"}, {"body": "work remove lockpid file", "d": "1/2014"}, {"body": "benjamn yes oh wait crashing", "d": "1/2014"}, {"body": "seems like two ways fixing either figure code cleaning file process exits remove functionality hope people nt accidentally multiple processes targeting output directory pretty comfortable option honestly thoughts zpao spicyj petehunt syranide mtgred", "d": "1/2014"}, {"body": "benjamn yeah lock seems fine could warn found perhaps another thing mention happening using react linux vm accessing filesystem samba saving file immediately triggers recompile file finished saving causing error shortly recompiles harm worth noting", "d": "1/2014"}, {"body": "fine locking nt even know existed works", "d": "1/2014"}, {"body": "see also", "d": "1/2014"}, {"body": "thanks plievone duplicate closing", "d": "1/2014"}, {"body": "problem rerendering new value react rerender new input value know revert value revert old value gets new value ms changing larger number like make much apparent following code work normal way making reusable component pass callback ask parent component rerender", "d": "1/2014"}, {"body": "ah thanks help big fan passing callback going try rerender parent immediately model change events", "d": "1/2014"}, {"body": "great work", "d": "1/2014"}, {"body": "somehow prevent call effects guess nt use case one first renders string browser inserts markup manually expecting events work btw perhaps day could actual top level listeners different consistent terminology would help reading codebase", "d": "1/2014"}, {"body": "given use case rendercomponenttostring register listeners created failing test case fix test coverage fix exposed changes calls longer register event listeners thus wo nt leak memory", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "negative case test case closed pull request may still useful", "d": "1/2014"}, {"body": "tested memory leak using node webkit agent heap inspection git head closure leaks due event registration longer occur since", "d": "1/2014"}, {"body": "glennmurraybse thanks would love find way automate workflow using put ci", "d": "1/2014"}, {"body": "current workflow involves gui chrome dev tools would difficult codify programatic heap dumpers node eg none could find automate comparisons heap snapshots either modules would probably provide good place start", "d": "1/2014"}, {"body": "cool take look experimenting automated tooling around kind stuff anyone comes ideas sure let know", "d": "1/2014"}, {"body": "oh nt see page working browser also contains structured evented info lifecycle maybe also links pages", "d": "1/2014"}, {"body": "rationale behind addon needing npm package right things like ca nt create addon directory react package worried treeshaking noncommonjs builds", "d": "1/2014"}, {"body": "brainkim nt need react could see us putting standalone npmbowerwhatever module real association react", "d": "1/2014"}, {"body": "brainkim wo nt package unless somewhere either unable get addons force users include addons sucks", "d": "1/2014"}, {"body": "zpao petehunt hm think understand coming instance ten line function npm module replete semver number readme seems bit excessive feel lem look bit wzrdin see solutions", "d": "1/2014"}, {"body": "say npm shipping line function module", "d": "1/2014"}, {"body": "know go love guys fullon adopting commonjs", "d": "1/2014"}, {"body": "petehunt sounds like limitation wzrdin think one request fix zpao wish npm ability host single js file package inline metadata like author", "d": "1/2014"}, {"body": "wow jsx need get room way think jsx essentially named arguments give us static way reason arguments however also see jsx object initializer much function call could desugar descriptions call rather execution none really incompatible idea providing context different ways think curiosity kind patterns using make syntax common common one building props externally pass component although common mutate props statements following instantiation another passing props one component another unchanged merging one issues", "d": "1/2014"}, {"body": "sebmarkbage haha perspective simply nt conscious decision whether use prefer use jsx js nt agree jsx nt something js nt usecases still mostly experimenting personally obvious ones conditionally complex cases decide arguments many arguments able keep logic jsx makes sense assigning lot variables individually may pretty also talked vjeux seems rely bit internally sending objects asis thus occassionally revert js surely works nothing wrong find odd want use jsx cases sugar anyway different philosophydirection jsx obviously going argue understand try push ityou far spontaneous sidetrack personally really want choose jsx js looks feels like html readable js closing tags reasons concern function call children properties way write properties really nt care much jsx opinion lost flexibility js offers saying something could see adopting follow style instead retain full range js functionality enough visual familiarity prefer without hiding truth going even opposed something think least", "d": "1/2014"}, {"body": "sorry tried paste inn plain jsx code code seems lost include screen shot", "d": "1/2014"}, {"body": "jkleiser occurs jsx happily parses tags replaces two separate function calls javascript evaluates get error solvable requires changes personally nt feel like worth effort right", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "browsers support assigning hyphenated keys probably", "d": "1/2014"}, {"body": "afaik webkit guess association blink", "d": "1/2014"}, {"body": "perhaps relevant sure screwed something running first snippet boxes nt seem appear three", "d": "1/2014"}, {"body": "would also look using var stylenames objectkeys styles var l stylenameslength lt l var stylename stylenames instead var stylename styles styleshasownproperty stylename continue", "d": "1/2014"}, {"body": "replacing nt give noticeable bump benchmark possibly hard tell hard believe much", "d": "1/2014"}, {"body": "nt tests look docs right sure travis mechanism running different things depending diff looks like run independent", "d": "1/2014"}, {"body": "reverted broke internal use weird way really changed use need figure solution problems first assume", "d": "1/2014"}, {"body": "thanks opening issue useful get confusing error messages examples cc jeffmo", "d": "1/2014"}, {"body": "slorber paste code still get error seem get unexpected token app better though obviously great", "d": "1/2014"}, {"body": "spicyj yes error parse error line unexpected token xxxxx better identify string xxxxx actual problem thanks", "d": "1/2014"}, {"body": "okay getting unexpected token message using jsx binary machine changed error esprima say unexpected string close", "d": "1/2014"}, {"body": "good find bisect gives modern browsers handling submit events twice form send pr", "d": "1/2014"}, {"body": "shutting comments", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "problem html element", "d": "1/2014"}, {"body": "anru elaborate mean", "d": "1/2014"}, {"body": "recommended use always include browsers hasty downloaders may obvious may good point yes", "d": "1/2014"}, {"body": "think would great expand docs might even make sense make whole page detailing browser support", "d": "1/2014"}, {"body": "zpao least bunch downloadpage would naturally look information least ie things need make work", "d": "1/2014"}, {"body": "works fine", "d": "1/2014"}, {"body": "yep seem quite happy crash lot", "d": "1/2014"}, {"body": "pretty sure use reactpage looks like well analogy mount inside use mounts inside body top unless sort quirk familiar makes sense mount want replace use fiddle look html element notice nt trying render whole thing serverside hook client side trouble issue think since nt actually replace use checksum different react gives differing checksum warning", "d": "1/2014"}, {"body": "actually think stopped supporting rendering document recently cc petehunt", "d": "1/2014"}, {"body": "indeed unless original markup generated react unchanged see", "d": "1/2014"}, {"body": "spicyj hmm explains fiddle working code markup generated react server end unchanged try render checksum maybe open separate issue nt end world since render sure would great able use react seamlessly across app", "d": "1/2014"}, {"body": "long passing exact props server client render methods read thisprops thisstate example nt include current time getinitialstate reads thisprops anything checksums always match find case nt true please file issue", "d": "1/2014"}, {"body": "oh look totally missed", "d": "1/2014"}, {"body": "case also best practice higher level components getvalue benefit since purely reflective setvalue focus much problematic since state controlled multiple callers diverge controlled funnel one major benefits react opt simpler syntax controlled inputs", "d": "1/2014"}, {"body": "hmm sounds lot like", "d": "1/2014"}, {"body": "believe indeed issue", "d": "1/2014"}, {"body": "crazy idea snippets would autogenerated important things needed happen nt think need would helpful pass tutorial need anytime transformer changes code earlier version transformer thus instead", "d": "1/2014"}, {"body": "thanks", "d": "1/2014"}, {"body": "use github edit docs inline send pr directly", "d": "1/2014"}, {"body": "github", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "oh nice nt know way plugin new languages tried jsfiddle one could hack make jsx workish", "d": "1/2014"}, {"body": "done", "d": "1/2014"}, {"body": "play around different amount whitespace padding well whitespace string looks like edge cases handle", "d": "1/2014"}, {"body": "zpao intentionally fixed whitespace pr including example believe intentionally addressed probably bunch nt even come across nt look think need decide actually want output try faithful source possible always generate correct minimal syntax loosely speaking", "d": "1/2014"}, {"body": "feel attributes maintain original spacing exactly line breaks small pain otherwise issue", "d": "1/2014"}, {"body": "spicyj actually mean exactly intuitively actually seems kind ok want reproduce source except specialcase also want reproduce linebreaks exactly linenumbers match think whitespace pr takes care mostly least", "d": "1/2014"}, {"body": "sorry meant text within quotes stay agree would nice happened surely common way writing jsx corresponding js hand", "d": "1/2014"}, {"body": "spicyj ah right right yes whitespace pr fixes pretty sure put inside quotes exactly ends output code", "d": "1/2014"}, {"body": "perhaps failing tests related unused immutableobject fixed release seen", "d": "1/2014"}, {"body": "approve", "d": "1/2014"}, {"body": "think mostly previously using docstutorial people used always using minified jquery think simply updating mention using unminified build would go long way making obvious download page different", "d": "1/2014"}, {"body": "would nt know use version ember names prod one might little obvious added download page looks like never got cherrypicked stable branch", "d": "1/2014"}, {"body": "bah push docs update little bit think couple things need go", "d": "1/2014"}, {"body": "diff renames invariant violation minified exception occured use nonminified dev environment full error message additional helpful warnings landed internally fyi", "d": "1/2014"}, {"body": "perhaps good reason allow", "d": "1/2014"}, {"body": "ca nt test right perhaps problem assuming use helper", "d": "1/2014"}, {"body": "spreadsheet", "d": "1/2014"}, {"body": "chance could get release trying create nice development toolchain includes source maps", "d": "1/2014"}, {"body": "formally request exposed react object commits", "d": "1/2014"}, {"body": "nt see makes situation better would nice able transfer classname onto dom component going layers composite components reacttransitionablechild would certainly use", "d": "1/2014"}, {"body": "spicyj intentionally nt provide solution excluding properties know already discussed bit internally rest general passing thoughts subject issue mainly see get rolling", "d": "1/2014"}, {"body": "nt put ton thought day find wondering could specify whitelistblacklist props", "d": "1/2014"}, {"body": "get null reference exception callback executed synchronously method", "d": "1/2014"}, {"body": "bind component like think better pass component argument", "d": "1/2014"}, {"body": "see callback executed component rendered mounted expecting", "d": "1/2014"}, {"body": "thanks looks like bug like earlier file", "d": "1/2014"}, {"body": "also noticed thought design decision passed create component creation upper code batch updates thanks guys work really enjoying writing components react", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "understand closure default lists externs names munge one css looks like everything covered except might need add quotes", "d": "1/2014"}, {"body": "oh looks like missed crushed need quotes goes even pare list even flex missing list", "d": "1/2014"}, {"body": "importantly would want weak", "d": "1/2014"}, {"body": "used validation run way nt go invariant path", "d": "1/2014"}, {"body": "jsfiddle", "d": "1/2014"}, {"body": "reduced javascript var hello reactcreateclass render function return thispropschildren reactrendercomponenttostring hello null reactdomdiv null hello function consolelog", "d": "1/2014"}, {"body": "vjeux last fiddle nt repro problem componentdidmount significant", "d": "1/2014"}, {"body": "spicyj woops right rushed comment", "d": "1/2014"}, {"body": "breaks browser master noticed breaking componentdidmount time ago nt file issue perhaps issue already", "d": "1/2014"}, {"body": "fix", "d": "1/2014"}, {"body": "petehunt fiddles seem work ok current master", "d": "1/2014"}, {"body": "fix somewhat related putlistener memory leak", "d": "1/2014"}, {"body": "ca nt see anything wrong code min inspection properly using key reconciliation work fine cc jordwalke", "d": "1/2014"}, {"body": "curious take look later", "d": "1/2014"}, {"body": "updown asymmetry may related ok iframe reset may related tried iframe content", "d": "1/2014"}, {"body": "reload whenever reattached dom might reasonable expect work consider two frames need trade places one get removed dom reattached matter hoping get away lucky rerenderings recipe fragile code", "d": "1/2014"}, {"body": "benjamn yes makes sense thinking dom operations required reorder elements reacts preference move things downward plievone pointed operation working without reinitialising", "d": "1/2014"}, {"body": "might think could call without ever removing elements dom least chrome still makes one iframes reload maybe means ca nt fix", "d": "1/2014"}, {"body": "yeah manual tests well actually appears impossible workaround dom internet searching suggests universal solution see somehow able mark component apply way root would prevent move operation nodes siblings would used reordering instead would work cases except two components changes sides however curious much issue actually today make iframe react virtually pointless conditionals parents really issue explicitly moving components iframes around", "d": "1/2014"}, {"body": "one regrettable misfeatures opinion yes makes pretty much useless situations dom manipulations abstracted control react", "d": "1/2014"}, {"body": "prevent reloading one keep separate divs somewhere safe dom manipulations movescale absolute positioning sync placeholder elements", "d": "1/2014"}, {"body": "plievone yeah way keep perfectly sync would poll every frame would cause lag nt support also issues", "d": "1/2014"}, {"body": "spicyj benjamn look react possible solve good gets ie iframe may never move side another iframe applying flag hierarchy iframes react wants move component instead shuffle siblings side instead moving node virtually zero cost component moved trying wrap head around bit seems like possible head apparently task right", "d": "1/2014"}, {"body": "reference got implementation going plievone suggested absolute positioning iframe place expected seems pretty fragile code would really need siblings set height elements get away polling position every frame", "d": "1/2014"}, {"body": "pietervanderwerff fyi proofofconcept react pr working right fixing last issues iframes work long two iframe containing components never switch sides meaning basically solve common usecases except moving say comments iframes updown list static iframes blog style pages work perfectly seems like relatively lightweight fix hopefully accept", "d": "1/2014"}, {"body": "syranide awesome look forward seeing", "d": "1/2014"}, {"body": "pietervanderwerff dare check updated pr found something way way better attributes use", "d": "1/2014"}, {"body": "would using css flexbox rearrange iframes help way nt need remove either iframe dom course would work newer browsers would something one would write top react", "d": "1/2014"}, {"body": "pixelcort probably issue specifically ancestores detached dom always happens try move way seems", "d": "1/2014"}, {"body": "occasional nt bad thing", "d": "1/2014"}, {"body": "true annoying switching branches", "d": "1/2014"}, {"body": "using dangerouslysetinnerhtml using parser xml parser lot weird rules order parse html throw backwards compatible ways jsx proper xml parser though handle code properly", "d": "1/2014"}, {"body": "convert instead many custom tag component text style use dangerouslysetinnerhtml otherwise need create many classes handle", "d": "1/2014"}, {"body": "use dangerouslysetinnerhtml react simply passes html browser untouched nt get benefit using react need use dangerouslysetinnerhtml", "d": "1/2014"}, {"body": "rendering xmltei document tag need styling simply hidden nt want create many small classes tagset huge might custom element example tei pagebreak element output directly browser style render nicely", "d": "1/2014"}, {"body": "issue nothing react", "d": "1/2014"}, {"body": "yapcheahshen yes run console see kind elements get created suggest using spans classes use jsx", "d": "1/2014"}, {"body": "plievone thanks use jsx ever possible sure use xslt convert xml document html cleaner keep xml asitis dom tree conform xml standard", "d": "1/2014"}, {"body": "thanks report definitely bug example code problem using index array key nt consistent items across passes nt remove last time instead use text item key least small demo ever items array text run different set issues see working correctly", "d": "1/2014"}, {"body": "noticed little ago sure need store child instance first place pr incoming", "d": "1/2014"}, {"body": "subtlegradient proposed following would equivalent edit prop nt needed passed prop value", "d": "1/2014"}, {"body": "react component seen function arguments props local variables state think way actually make sense pass title prop inside tag special meaning children feels like hack manipulate modify children split different groups", "d": "1/2014"}, {"body": "alright dug source today see going nt bug transitiongroup classes applied correctly bug css words fault however think highlights problem current animation approach let back little explain reason fiddle nt work incorrectly expected starting value nt match default value element addition transition specifies property animated since uses leave class added origin animated starting value words currently possible specify starting point leave animation nt match default value course could set every element uses transition clearly brittle difficult maintain one possible solution would react add idle class transition idle alternatively users could put property active classes instead think potential screw switching enter leave enter completed vise versa sure working anyway realize behavior taken nganimate maybe nt best place discuss issue hand react project much younger probably opportunity correct without worrying legacy let know", "d": "1/2014"}, {"body": "probably opportunity correct without worrying legacy collected transitiongroup issues race conditions example repaints due component tick cause flash misstyled content perhaps initial render affected via setstates instead guess would count transitiongroup go custom solution setting visiblehidden props tracking states container triggering transitions based comparing props components notifying container completion course mess many complicated interactions", "d": "1/2014"}, {"body": "reactisvalidclass reactisvalidcomponent want", "d": "1/2014"}, {"body": "would really like avoid adding anything would encourage depend basically make devtools work would like kill asap spicyj suggestion nt work nodeland could directly guarantees apis right", "d": "1/2014"}, {"body": "tips job thanks", "d": "1/2014"}, {"body": "sidequestion would interesting able specify something like call whatever want much guess existing implementations etc could extended treat etc special values could supported way also another thing consider currently quite tedious write custom validators inputs bypass logic provided react would nt perhaps reasonable something like type test could easily test say also descriptive", "d": "1/2014"}, {"body": "made work adding feels like writing code write code though conform pattern nobody would accidentally write thoughts yungsters", "d": "1/2014"}, {"body": "nt read properly okay", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "thanks fixed close", "d": "1/2014"}, {"body": "nt much experience document fragments going guess never use case tested might part falls render fragment sure either actually true though interested sounds like experience would help us figure intentional make work let know help", "d": "1/2014"}, {"body": "currently record id container enable updates component rerendered presumably want place document fragment somewhere means switch container anyway think parent updating child updates happen needs container makes use case little complicated theory could support curious use case inserting document", "d": "1/2014"}, {"body": "web app uses polymer investigating whether possible use reactjs parallel allow gradual transition polymer reactjs wanted use reactjs render shadow dom single custom element easy workaround though insert blank element shadow dom let reactjs render", "d": "1/2014"}, {"body": "regression react working react react works react throws", "d": "1/2014"}, {"body": "react bigger issues combined polymer one seems polymer wraps dom elements events wrapper polyfill deficiencies underlying browser seems throw react explicitly unwrap dom element passed reactrendercomponent event handlers nt automatically attached manually componentdidmount see", "d": "1/2014"}, {"body": "event handlers nt automatically attached manually componentdidmount note also global event listeners normally attached events propagated event handlers internally document fragments recognized global event listeners may bound directly document fragments documents even though ownerdocument lost", "d": "1/2014"}, {"body": "figured problem wrapped nodes react creates dummy node script loaded happen polymer able fully initialize dummy node browser native element later react created dom nodes dummy node elements browser native well polymer nt like load reactjs script webcomponentsready fired however fixed one problem events still nt bind properly look handler registered thanks pointer", "d": "1/2014"}, {"body": "mean", "d": "1/2014"}, {"body": "already warning fact closing one", "d": "1/2014"}, {"body": "react currently warn unknown properties think something meant use case warned expecting nt warn others potential become noisy would unacceptably fb otherwise agree make improvements htmljsx converter accuracy tool meant still beta cc", "d": "1/2014"}, {"body": "thanks work might worth utilising defaultdompropertyconfigjs htmljsxlib checks consistent react actually surprised well html jsx converter working moment seems like issues little ones easy fixes pretty amusing p", "d": "1/2014"}, {"body": "vendor prefixes like js side", "d": "1/2014"}, {"body": "truth though discovered webkit least chrome lets work nt think works gecko", "d": "1/2014"}, {"body": "nt think need anything special shorthand properties except list needed", "d": "1/2014"}, {"body": "related also obscure css properties unitless edit widow counter", "d": "1/2014"}, {"body": "also unitless properties mentioned link nt actually take single number", "d": "1/2014"}, {"body": "zpao spicyj saying great idea putting switched etc prettiest perhaps prettier access unmodified traditional css behavior want use shorthand style obvious unambiguous limited nt modify expected behavior nt conflict philosophically speaking people chat agree bad idea however seeing peoples gripes react nt vendorprefix etc etc perhaps real solution react export settable supply behavior leave outside react want autosuffix use addon bad idea well would prevent reliably sharing components currently ambiguous supports unitless thus autosuffix", "d": "1/2014"}, {"body": "lineheight px used times unitless em percentage fb codebase feel like default provide verbose way use unitless way", "d": "1/2014"}, {"body": "vjeux agree issue would explicitly break css standard", "d": "1/2014"}, {"body": "view css standard using strings say react going output say number react going able add convenience wants adding px common use case", "d": "1/2014"}, {"body": "nt conflict today probably never still also want add numeric unit think likely go forcing unit want one eg nt get converted put", "d": "1/2014"}, {"body": "zpao idea units suffix name could universal test properties simplicity whatever end property name remove add value instead way thing would need hardcode units allowed implementation would minimal barring new units future proof theoretically could conflict nt see ever could units nonwordy names case would obviously taken account already however practical issue multiple units specified property definitely see may favored way go putting like vjeux idea feel like would hair thin separation two possibly dangerous neat likely user intended", "d": "1/2014"}, {"body": "fixed discuss units separate issue needed", "d": "1/2014"}, {"body": "workaround one strip rendering string suggested forums may strip false positives docs however", "d": "1/2014"}, {"body": "plievone could easily extend safe", "d": "1/2014"}, {"body": "probably reasonable though break people current expectations like would leave files alone default benjamn", "d": "1/2014"}, {"body": "get rid docblock", "d": "1/2014"}, {"body": "really wish done beginning concern backwards compatibility maybe target next minor version bump make big deal release notes", "d": "1/2014"}, {"body": "breaking change next minor version bump still lt semverwise acceptable long well documented anyone wanted keep using switch using", "d": "1/2014"}, {"body": "sync soon", "d": "1/2014"}, {"body": "relatively easy autogenerate want take stab put script", "d": "1/2014"}, {"body": "one could add invariant strange invariants nt mention arrays objects respectively", "d": "1/2014"}, {"body": "also contextual name idea author meant agree messages could better", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "initial reasoning easy gave cred githubio site much probably need ownership change reactjsorg fb one use owns time coming us anyway move github site hosting since want start eg latest builds server custom builds", "d": "1/2014"}, {"body": "issue html first second actually internal task tracking facebook nt think looked yet comment explaining happens looks like happening putting parser js mode closing tag expect called lex preparing lookahead token js mode ends valid js token get lucky using amp middot amp valid js token happens time invalid javascript token appears right closing tag another repro", "d": "1/2014"}, {"body": "fixed esprimafb packagejsons esprimafb jstransform react sorted", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "take look maps set routes page components passes current request object url extracted params according url template andrey popp gmailcom", "d": "1/2014"}, {"body": "think outside scope react core community components page would officially bless router reduce analysis paralysis nt think live core would also open react official blog post describes build app ground router", "d": "1/2014"}, {"body": "sounds good way extend react function like component except called called mean super necessary would cool", "d": "1/2014"}, {"body": "ca nt react component route prop", "d": "1/2014"}, {"body": "rather state bc would set prop like said critical success would cool", "d": "1/2014"}, {"body": "indeed regular object defined native side may culprit server rendering regression introduced getter quite timesensitive places around invariants etc otherwise clean codebase reproduce issue cc petehunt benjamn", "d": "1/2014"}, {"body": "sorry misleading ui events support detail property nonmouse events see event docs indicate scroll event", "d": "1/2014"}, {"body": "nt actually fixed yet vjeux spicyj", "d": "1/2014"}, {"body": "pr nt merged original bug detail nt useful scroll events invalid", "d": "1/2014"}, {"body": "original bug detail nt useful scroll events invalid sorry way invalid", "d": "1/2014"}, {"body": "sorry nt supposed useful value scroll events per spec anything issue indicates necessary docs change really code change seemed initially suggested", "d": "1/2014"}, {"body": "played around jsbin found answer suggesting innerhtml wo nt work svg nodes", "d": "1/2014"}, {"body": "fix reverted issue still open hopefully fix applied later right thing seems return visible text may insert formatting stacked divs headings even present firefox internal ietest relies behavior fixed example svg example works ok firefox innertext available uses", "d": "1/2014"}, {"body": "also mentioned talk getting started page", "d": "1/2014"}, {"body": "ah onmouseover onmouseout nt supported react right react support onmouseenter onmouseleave usually want works fiddle makes work", "d": "1/2014"}, {"body": "would nice indeed want take stab docs repo markdown format would love contributor list", "d": "1/2014"}, {"body": "never mind etarget nt changed loop determining element dispatch event", "d": "1/2014"}, {"body": "spicyj nice type also set", "d": "1/2014"}, {"body": "see", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "another project bridges react art uses svg even canvas render possible use though sure anybody attempted yet interested giving shot reactart good reference", "d": "1/2014"}, {"body": "cool looks useful thanks", "d": "1/2014"}, {"body": "closing actionable", "d": "1/2014"}, {"body": "took liberty edit comment add syntax highlighting", "d": "1/2014"}, {"body": "ca nt reproduce diff applied loaded console checked empty misunderstanding", "d": "1/2014"}, {"body": "yes missed one user defined component go javascript function var testcomponent reactcreateclass render function return", "d": "1/2014"}, {"body": "thanks fixed", "d": "1/2014"}, {"body": "thank fast fix", "d": "1/2014"}, {"body": "thanks findfix", "d": "1/2014"}, {"body": "compiled build process latter syntax used hand npmreact directory nt go build process right", "d": "1/2014"}, {"body": "latter syntax used hand npmreact directory nt go build process right would interesting see minified builds performed meaningfully better server rendering production one heuristic function complexity thus compilation time thus possibility optimization used line count including dead branches even comments", "d": "1/2014"}, {"body": "nothing actionable right going close interested profiling plievone wo nt stop", "d": "1/2014"}, {"body": "related source maps inbrowser transform", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "jsxtransformer uses jsxenhanced dialect complete javascript parser jsx support typescript would require extending replacing complete compatible parser typescript unless thing already exists would likely require significant initial ongoing effort unless willing put effort unlikely going happen time soon foreseeable future jsx sugar similar looking functionally equivalent js code", "d": "1/2014"}, {"body": "jsxtransformer need js parser ca nt replace xmllike constructs js code wherever finds except string comments", "d": "1/2014"}, {"body": "contrived example value nt end first need least js parsing logic understand", "d": "1/2014"}, {"body": "spicyj something simple parsed jsx probably right nt strictly necessary aids generating valid code actually makes sure js parses move", "d": "1/2014"}, {"body": "technically nt need parser need tokenizer sweetjs macros operate token stream hits parser jsx almost works sweetjs except special rules regular expressions closing tags nt work token depending context regexp resolution rules hardcoded tokenizer sweetjs probably ca nt support whitespace rules neither however treat jsx strictly part custom tokenization stream transformation purely token level like sweetjs leave compatible language extension nt need special tokenization rules resulting code would even compatible sweetjs macros think jeffmo", "d": "1/2014"}, {"body": "sebmarkbage long assume opening brackets must corresponding closing bracket work technically also assume expressions object notation array notation etc compatible output configurable lose ability detect report syntax errors inject expressions output stream eventual errors output stream likely lot less comprehensible result unsure bad actually become worst case denying advantages operating token stream like fear expense making jsx less user friendly thus less appealing jsx sugar would never sacrifice convenience really good error message convenience something looks like html hopefully wrong bad think fine line jsx nice optional feature nice toy jsx really compelling primarily cleaner javascript equivalent without immediate drawback makes painless enough still lacks features vanilla javascript offers means revert javascript time time still stick javascript see may switch jsx future would never end crappy error messages plagues many template frameworks opinion", "d": "1/2014"}, {"body": "even true ca nt get good enough error messages using tokentransform alone still parser provide context tokenizer parser provide compatible context great get better error messages free ca nt pipe raw transformed strings still option want use typescript hipsterscript ca nt add convenient extension language expect nobody else add extensions people want choose typescript jsx jsx certainly seen toy unless ambiguity problem ofc typescript may compatible reasons like macros contextual extensions identifier treated differently depending known reactjsx component typeclassinterface", "d": "1/2014"}, {"body": "typescript similar sweetjs macros superset js another convenient extension however yes might incompatibilities type cast operator looks like typescript oops", "d": "1/2014"}, {"body": "sebmarkbage experienced area seems like would always explicitly extend parser target language use standalone tokentransform version likelihood parsers tokenizers compatible seems remote unless esprima parser javascript world missing something case nt looked details seems like simple fix implement optional knowledge language features brackets must balanced sake xjs expression containers tokentransform free really issue stringcomment syntax would compatible tokenizer would need configurable well could probably even put together proofofconcept worth pursuing path", "d": "1/2014"}, {"body": "apologies chiming without reading discussion thought let know result previous discussion someone started adding jsx support typescript found difficult distinguish type parameters jsx suggestion require jsx wrapped parens like makes easier parse time end wrapping jsx parens anyways guard automatic semicolon insertion people used", "d": "1/2014"}, {"body": "jordwalke seems like nt issue solve extending actual parser perhaps parser state would consider jsx valid however seems intuitively harder solve know jsx typecast found possible closing seem reasonable seems suggestion issue unless explicitly disallow typecasts first instruction inside parens nt perfect rarely issue surprisingly neat distinctionsolution major ambiguity", "d": "1/2014"}, {"body": "worried maintaining two versions theory could make tokenizer drop replacement esprima based typescript parser certainly difficult could nice quick fix always add special look aheadbehind rules nt pure jan andreas svensson notifications githubcom wrote jordwalke seems like array nt issue solve extending actual parser perhaps parser state would consider jsx valid however seems intuitively harder solve know jsx typecast found closing seem reasonable seems suggestion issue unless explicitly disallowing typecasts first instruction inside parens nt perfect rarely issue surprisingly neat distinctionsolution major ambiguity reply email directly view github", "d": "1/2014"}, {"body": "sebmarkbage playing proofofconcept simple hoped major issue nt foreseen basically possible unambiguously detect initial tag without parser provide context without additional starting tokenconstraint comparison perhaps language supports feature like basically luck unless require initial parenthesis jordwalke suggested could make certain edgecases existing scripts break though would obvious noop way escaping user safe parens benefit would would nt really look outofplace language ca nt really get away mathematical parenthesis language unsure flexibleverbose make major issue require additional token starting tag repeated every branch conditional expressions tags", "d": "1/2014"}, {"body": "already problem javascript regular expressions still implement js highlighting without proper parser use look behind disambiguate easy enumerate potential cases look though hopefully bounded sweetjs pretty good write regular expressions since allowed similar places jsx figure solution would similar", "d": "1/2014"}, {"body": "course extended language could add features ca nt account may always work would great least little bit feedback parser eg regular expression allowed also assume lt start tag", "d": "1/2014"}, {"body": "yeah took step back analyzed problem properly see three ways lookahead lookbehind operator ish character etc lookahead straightforward approach assume none exact occurrences allowed target language directly conflicting typescript see way without modifying syntax conflicting hypothetical language allows noncommaseparated object notation assignment instead default assume target language based operators easily test reasonably inside expression state valueidentifier expected would explicitly prevent support wordy languages would allow even worthwhile one javascript doubt typescript sadly conflicts valid contexts even parser provide context stricter typescript would still issue sure point unless missing something typescript solved without parser backup either modifying syntax empty root tag like whatever using something like jordwalke suggested however mentioned parenthesis constraint nt actually solve ambiguity really disallowing typecasting first instruction inside parenthesis replacing jsxtags sebmarkbage take need alternate syntax specialcases", "d": "1/2014"}, {"body": "note typescript also uses generics", "d": "1/2014"}, {"body": "vjeux ca nt think case generics ambiguous jsx always preceded identifier valid jsx ambiguous javascript though type casting big issue though parenthesis nt help cases actually ambiguous parsing code error messages becomes really weird opening tag without attributes optimistically parse ahead long way find matching closing tag breaks ambiguity even ambiguous regexps yea type cast syntax screws us really want make work though", "d": "1/2014"}, {"body": "note valid jsx", "d": "1/2014"}, {"body": "spicyj valid typescript though need make regexp make ambiguous think maybe think another case", "d": "1/2014"}, {"body": "sorry thought implying could stop parsing close paren may right regexes tricky part perhaps solve requiring people wrap regex literals parens think jslint might already warn still sound like may need arbitrary lookahead disambiguate sounds like recipe confusion one idea mentioned syranide irc requiring people wrap jsx expression backticks sort like recommend jsx coffeescript obviously bit pain easily removes ambiguity", "d": "1/2014"}, {"body": "ideally would use make fully executable think jsx always close pain worth compared invoking functions back ticks small seem might final straw", "d": "1/2014"}, {"body": "guess back ticks would actually remove feature unless prefix something nt work without prefix anyway", "d": "1/2014"}, {"body": "sebmarkbage reliably disambiguate real context sure infinite lookahead could possibly make reliable enough actually useful error messages would complete dog poo would never able identify intent eyes makes useless agree backticks would solution would remove feature would quite errorprone dealing nested conditionals although realistically one could likely assume inside expression jsx typecast however issue two cases disambiguated quite easily reasonably need introduce optional syntax trivial would look like possibly neat either simplest however different optional syntaxes come none really feels natural weird", "d": "1/2014"}, {"body": "yes agree infinite lookahead ok solution thought experiment see leads us think right alternative syntax cast right way go particularly since syntax really intuitive common current use typescript anyway would seem making change possible ideas without really thinking simplest intuitive type expression another alternative would add contextual keyword somehow", "d": "1/2014"}, {"body": "sebmarkbage thing worry effectively overriding typescript syntax would solution typescript would effectively mean either end two different typecast syntaxes depending whether current file run parser risk breaking existing code files run also depending replacement syntax typecasts potentially extend actual typescript parser opposed language agnostic transform specialcase typescriptstyle typecasts current thoughts extending language parsers vs language agnostic transform seems like agnostic transform would preferable people really invested typescript whatever nothing prevents themus implementing language native solution road one potential idea jsx namespaces pr accepted merged would simply syntax something like thus neatest syntax logic least perhaps acceptable tradeoff languages conflicts vs lt tag", "d": "1/2014"}, {"body": "syranide always conflicts solve case case basis namespaces could easily conflict another language also use external function kill type assertion operator class parent class child extends parent function cast obj return obj var x parent new child var cast x", "d": "1/2014"}, {"body": "sebmarkbage ah interesting solution", "d": "1/2014"}, {"body": "problems typescript react jsx syntax typescript currently support mixins wo nt least months would say basically hard make understand result reactcreateclass doubt ever possible make understand react mixins tried work react typescript ended wrapping lot react mechanism able make typescript fully understand type worked perhaps real solution would create jsx typescript definition file compiler integrate typescript keep jsx creating react components", "d": "1/2014"}, {"body": "fdecampredon seems like react intends move classes soonish assuming would improve situation", "d": "1/2014"}, {"body": "seems like maps direct children alright docstrings mention leaf childs call quite confusing docstring also claims returning array mirrored array mapped children even though returns object also terms memory perfomance impression always array much user defined components mostly due lot single native components page wrapped text nodes avoiding creating arrays virtual dom render beneficial", "d": "1/2014"}, {"body": "petehunt adding thoughts related children amp performance think important react support people want drive algorithm outside like om unlikely react ever compete om since om model already always know precisely data changed already know exactly rerendered js semantics likely never true general case regular react users could fact deliver ridiculous low allocation renders today react provided right hook ie think react needs deliver optimizations js users also get way systems deliver far aggressive optimizations", "d": "1/2014"}, {"body": "sebmarkbage definitely needs thread since used flatten children array therefore always array eventually reverted swannodette nt think something like would controversial used magic prop called would exactly talking think challenge make api nice constrained jordwalke think", "d": "1/2014"}, {"body": "andreaferretti describe use case little detail", "d": "1/2014"}, {"body": "petehunt point specific use case concern api sometimes returns array sometimes single object mislieading whether alternate apis exist even alternate means get access children people use probably get unexpected results words probably negligible loss performance due allocation array single element repaid corresponding gain consistency uniformity one would need short article docs explain api behave obvious manner", "d": "1/2014"}, {"body": "swannodette already consider immutable objects critical part react future design continue revolve around optimizing reconciler immutability fact land another optimization breaks certain mutability use cases shouldcomponentupdate hook currently default critical feature nt work well mutability supporting mutable js paradigm certain components nt limit ability optimize immutability larger sections next release wo nt reconcile children instance default assume nt changed rationale mutate something prop also tend recreate child means subtree updates receive children higher tree wo nt reconcile way work free subtree updates issue reconciling top want avoid rerendering parents sure interpret proposed shouldchildrenupdate api correctly think issues children way pass components often passing named properties indicates intension clearly especially multiple sets children special case children composite components also need able nest children specify nested set also needs make sense fragments ie returning multiple components top level single render function one important ways perf optimization create smaller components ie children tend update separately rest component breaking apart anyway sometimes means passing sometimes means wrapping another component component shouldcomponentupdate never needed recreate large list children similarly children passed state updates current component wo nt reconcile default reason children goes props nothing special children property express children property terms xml like syntax jsx since another component take opaque set named property var foo reactcreateclass render function return var bar reactcreateclass render function return sdfg want pass function lazily instantiate children perfectly valid always able pass explicitly additional arguments function happens create opaque set set opaque changes shape aware inconvenient tried really really hard get addressed opensourced turns tricky solve semantics retain performance fact sometimes single child sometimes array perf optimization semantically equivalent could easily wrap single child array issue real issue nested fragments want ability conveniently able prepend concatenate sets components ca nt flatten one array would lose key context keys guaranteed unique set originally passed concatenated set initial proposal added context key component passed along get implementation details get right ended fairly complicated extract component array place new place ideally would still preserve identity worked exception could nt place component two places still ca nt end reverted whole thing complexity implementation another proposal make truly opaque set could never extract values operate custom functions introducing new set type want able interoperate well larger js ecosystem stablizing alternatives could possible previously strongly held believe arrays must treated keyvalue object believe incorrect since equally treated iterable types could shift semantic meaning array within one fragments could potentially expose children map observably preserves order contextualized keys would part map keys also possible implement lazily probably good idea start still leaves lot unknown questions question remains instance gain access one maps place different position retain state caller would assume would final position tree may different would also responsible preserving key correctly probably need ability move nodes parents preserve state intensions caller allowed access instance nt calling methods instances stateful would even want prevent future reasons even could call methods children ca nt rely composite methods would mean limiting ability parent wrap parts children composite really important design prinicipal could possibly want parent inject properties children may pass composite nt aware think larger issue parent communicate children nt create one way solve would expose api lets parent resolve children abstraction understand communicate using custom api need figure semantics talk type look like", "d": "1/2014"}, {"body": "sebmarkbage thanks long reply clarifies many things respect current design sure interpret proposed shouldchildrenupdate api correctly think issues children way pass components often passing named properties indicates intension clearly especially multiple sets children special case children composite components also need able nest children specify nested set also needs make sense fragments ie returning multiple components top level single render function om works pass data never components never use react subtree updating everything datadriven performance derived reference equality checks way means make composite data structure different pieces data represent different om components rerendering root still lightning fast thus nt need really want react high level component semantics users want drive react algorithm might seem less useful standard react users bought high level semantics critical people want drive system outside nt need want actively avoid could take keys changed children would allow keep control underlying representation speaking given already allow users specify allow supply seems like would allow users express concatenation prepending guys make screaming fast", "d": "1/2014"}, {"body": "oh far nested children intended recursively guide reconciliation algorithm look nothing", "d": "1/2014"}, {"body": "think gets realm creating dsl accessing properties something like avoid mixin really usecase lots form fields save typing want implement mixin would easy would require core changes sorry abuot", "d": "1/2014"}, {"body": "petehunt one thing imagine perhaps able simply step object using key order minimal implementation suffice specialcases like yaynay", "d": "1/2014"}, {"body": "getting syntax closure compatible going hard also grow api make polymorphic additionally ca nt really think situation would great idea need probably decompose another component", "d": "1/2014"}, {"body": "bumped nested two way bindings try deal forms found one implementation stackoverflow", "d": "1/2014"}, {"body": "hi nice explanation transition timeline jsfiddle function mount component first call subsequent calls update already mounted component see need componentwillupdate want replace component mount try using different prop", "d": "1/2014"}, {"body": "thks plievone actually using componentwillupdate force enter class transitionchild otherwise class added componentdidmount see reacttransitionablechildjs somehow use trick app make animation work properly otherwise entering view appearing briefly view sliding right ca nt reproduce bug fiddle maybe demo simple see update demonstrate point", "d": "1/2014"}, {"body": "componentdidmount happen tick first elements inserted class modified tick least commands flushed browser rendering system tick would nice know occasions heavy updates could result problem seen perhaps callbacks components react core component componentdidmount could trigger repaint browser via dom measurement need", "d": "1/2014"}, {"body": "indeed race condition reacttransitionablechild add component forces repaint componentdidmount accessing reacttransitionablechild first flash default style class added immediately people using jquery plugins etc kinds repaints might happen easily complex renders perhaps needs warning docs cc petehunt", "d": "1/2014"}, {"body": "updated fiddle demonstrate bug", "d": "1/2014"}, {"body": "brief look mounting procedure suggests prevent races transitions use class could set already initial render", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "colingourlay ca nt reproduce site still seeing problem", "d": "1/2014"}, {"body": "spicyj great source problem actually doubleclicking x switch edit mode entry input removed immediately confuses react assuming attached doubleclick wrong node doubleclicking text remove button cause entry become editable", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "shipit", "d": "1/2014"}, {"body": "tried briefly things work ok one enabled tests enabled webworker spawn deferred reason tests including reporting run confuses test runner disable things work quite ok see error end somehow related perhaps many tests platform posts duplicateerror wo nt get back zero something see posts time time nt know affect something simulatorwebdriver used test runner gets somehow stuck nt poll nt error timeout either", "d": "1/2014"}, {"body": "offending test case fails dev prod file quite many lines always return success locally instead skipping may invalid test cases immutableobject uses dev without checking availability shim", "d": "1/2014"}, {"body": "thanks catching need detect supported nt freeze also action items support arrays merging shallow deep simply move entire array recurse pete ideas able specify arrays intelligently merged appended prepended indexbyindex replace probably something else well", "d": "1/2014"}, {"body": "warning added", "d": "1/2014"}, {"body": "events listened demand maybe warning moved method support already checked", "d": "1/2014"}, {"body": "always copying would fix issues also another issue saw today someone wanted reuse header row table multiple places", "d": "1/2014"}, {"body": "fairly large discussion challenge making compatible class direction nt seem like anything insurmountable like transform expression evaluates throwing around words pure descriptor talk structures might mean first transforms function returns json style object knows supply field way currently examining currently rendering react component convenient declare constant components top file efficient reuse shared many different component instances time means owner nt even valid notion definition time sound like problem actually okay considering fact constant components could reused many different renderers get conflicts different renderers start clobbering shared object property maybe punt supporting owner therefore refs constant shared object descriptors one benefit pure descriptor approach one retain reference render function treat like instance later may may instance looking depending retained first render subsequent renders whether use pure descriptors actual instances fact copyclone new instance finally mount means employ automatic pooling autogenerate pure descriptorsinstances case pete might get zeroallocation render", "d": "1/2014"}, {"body": "implemented blessed way manually clone component support constant component pattern eg like able create nicely reusable components inside actually add zero depending propsstate", "d": "1/2014"}, {"body": "tompaton master nt think currently exported instead use instead might even preferable", "d": "1/2014"}, {"body": "understanding everything correctly believe sebmarkbage working going", "d": "1/2014"}, {"body": "syranide sounds good background case stripped generic example nt entirely clear code actually closer got something like way icons defined top level component consist generic logic icon nodes could cloned make less generic settle icon classname workaround would require creating another layer components bundle classnames etc spans nt end world bit verbose", "d": "1/2014"}, {"body": "fwiw created simple proof concept using traceur transpile class syntax passing source code class syntax reacttransform seems work pretty well least rather limited example probably due esprima experimental support", "d": "1/2014"}, {"body": "chenglou guess close issue merged", "d": "1/2014"}, {"body": "vjeux comment", "d": "1/2014"}, {"body": "killed fails couple tests one note spacing", "d": "1/2014"}, {"body": "correct wrong seems fix", "d": "1/2014"}, {"body": "sure think need viewportmetrics object", "d": "1/2014"}, {"body": "related issues pull requests may affect docs", "d": "1/2014"}, {"body": "could section specifically states timeline classes applied something like timing animation classes animation classes applied top component regular css classes animation starts goes following sequence immediately adds class tick afterwards adds class end transition removes animation classes remember classes kept animation complete nt depend animation classes keep component visible", "d": "1/2014"}, {"body": "keys optional indeed warn prod break perhaps uniqueness relied many places handle special case invalid keys nicely", "d": "1/2014"}, {"body": "fact keys optional nothing react behavior dev prod perfectly reasonable throw warn", "d": "1/2014"}, {"body": "spicyj sorry meant api user one could assume keys help react reusing component instances one supplies invalid keys one could assume help slower way proceeds support cause", "d": "1/2014"}, {"body": "react recent increase popularity easy testing story going demand", "d": "1/2014"}, {"body": "fact would adding fine version test utils included specifically using test runner", "d": "1/2014"}, {"body": "take especially want explain new method", "d": "1/2014"}, {"body": "fwiw take mentioned", "d": "1/2014"}, {"body": "relevant", "d": "1/2014"}, {"body": "anybody running across issue spicyj pointed includes information shipping vendored version react test utils also uses constructs like inspect react component state necessary piece", "d": "1/2014"}, {"body": "written library called jasminereact use test react components allows todo things like spyon methods react component stub children components isolate tests component test unmounting component aftereach test setting class displayname makes validating error messages easier repost info put reactjs freenode long run might try merge features right jasminereact works box w custom grunt build needed", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "chrome fires change event change keyboard possible use change instead input", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "bit digging ie presence seems add implicit attribute running following chrome logs ie logs could causing problem", "d": "1/2014"}, {"body": "value case version ie msdn says text default submit query guessing maybe need skip test sometimes", "d": "1/2014"}, {"body": "quick testing ie results value submit query", "d": "1/2014"}, {"body": "sounds like encapsulation leak perhaps input component provide sort getter instead encouraging us reach noodle dom node cc sebmarkbage", "d": "1/2014"}, {"body": "seems like problem test rather implementation", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "perhaps related", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "pass array props shows error", "d": "1/2014"}, {"body": "bhargavgunreddy works", "d": "1/2014"}, {"body": "thanks man", "d": "1/2014"}, {"body": "related", "d": "1/2014"}, {"body": "could separate script testing angular angularmocksjs could reacttestjs something similar", "d": "1/2014"}, {"body": "anyone working compiler", "d": "1/2014"}, {"body": "charuru worked project lets hook jade compiler modify way everything works written plugin previously compiled rivets data bindings theoretically could react rivets plugin", "d": "1/2014"}, {"body": "converting project use react dont want change workflow front end engineers write jade jsx reactified used front end code doesnt exist", "d": "1/2014"}, {"body": "sketched custom jade compiler generating react code turns javascript function function map obj fn number typeof objlength return objmap fn var result key hasprop hasownproperty key obj haspropcall obj key amp amp resultpush fn key obj key return result return reactdomdiv classname containerfluid readme reactdomdiv classname row null thisstorename reactdomul null map thisproducts function product index return reactdomli null product producttitle", "d": "1/2014"}, {"body": "duncanbeevers nt seem quite right though", "d": "1/2014"}, {"body": "syranide yeah rough first pass working context greenfield hobby project number tooling questions around currently unanswered also making sister tool duncanbeeversgulpjadereact integrating gulp workflows along gulpwrap capture expose expressions functions longer commenting thread work jadereact ongoing", "d": "1/2014"}, {"body": "fixed benjamncommoner", "d": "1/2014"}, {"body": "fixed", "d": "1/2014"}, {"body": "fixed lands", "d": "1/2014"}, {"body": "spoke petehunt instead publish blog post rudimentary layer implementation demonstrates system would built", "d": "1/2014"}, {"body": "added support onselect", "d": "1/2014"}, {"body": "still issue today", "d": "1/2014"}, {"body": "hard give good errors best idea think treating unbalanced error least catch end function jeffmo think", "d": "1/2014"}, {"body": "closing changes examples done gradually", "d": "1/2014"}, {"body": "maybe better approach react altogether danielstocks render child hierarchy react listen child element interested instead using event bubbling cheap", "d": "1/2014"}, {"body": "really actionable closing one", "d": "1/2014"}, {"body": "nt help guys delete pages wiki polyfill people find stuff like please link", "d": "1/2014"}, {"body": "linked comment closed issue gh issues wikis meant final source information would suggest link page", "d": "1/2014"}, {"body": "zpao suggest putting wiki page something along lines react polyfills page longer maintained please visit wiki page still first result google search react polyfill", "d": "1/2014"}, {"body": "thanks heads linked docs", "d": "1/2014"}, {"body": "appreciate zpao", "d": "1/2014"}, {"body": "based documentation click event interactive content understanding event fire whenever cursor clicked arguably includes contained menu elements using interpretation firefox correct behavior", "d": "1/2014"}, {"body": "firefox nt fire upon clicking select options dismiss though tested windows least ie chrome totally correct behavior thing select os thing firefox got mostly right implemented select chrome uses whatever dropdown os uses tried patch behaviors stuff ca nt achieved reason zpao sure ever work consistently", "d": "1/2014"}, {"body": "happy dash user love app generating react docs soon offline instantly fuzzysearchable react documentation", "d": "1/2014"}, {"body": "dustingetz need guess length actually annoying write imo", "d": "1/2014"}, {"body": "although may confusing think relatively straightforward realize going wrong changes allow access attempted value would cause text input value flicker since fires later let clarify documentation", "d": "1/2014"}, {"body": "yeah nt heard complaints form docs nt clear enough though always people asking things readonly cf", "d": "1/2014"}, {"body": "going close favor adding docs", "d": "1/2014"}, {"body": "moment adding missing svg tags bit pokey", "d": "1/2014"}, {"body": "fwiw wo nt help jsx transformer maintains list tags recognizes converts reactdom", "d": "1/2014"}, {"body": "nt updated months closing please reopen think still done", "d": "1/2014"}, {"body": "nondangerous looking blindly copied old html somehow baking spicyj comment error messages would useful", "d": "1/2014"}, {"body": "ran table case oh boy hard debug simply using tbody penalty learning html people started actually using tbody looking forward", "d": "1/2014"}, {"body": "", "d": "1/2014"}, {"body": "", "d": "1/2014"}]