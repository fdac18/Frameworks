[{"title": "documentation question", "body": "hi reasons backbone html documentation instead eg javadoc style creating inhouse library use backbone basic framework eg tableviews extends backboneview create documentation want use jsduck methods properties clearly represented framework documented course inherited objects preferred way copy documentation docsbackbonejavadocjs file way generate thanks", "num": "1466", "d": "6/2012"}, {"title": "router support adding catchall route", "body": "would useful handling nonmatched urls routes users id loaduser foo bar notfound currently throws error way around would define regular expression however due would need define routes via thisroute reverse order also would nice shorthand routes hash", "num": "1464", "d": "6/2012"}, {"title": "routerroute adds routes wrong order", "body": "route definition works expected note although works use case describing matches routes rather commentssearch maybe separate issue problem describing defining routes via route method work statements reversed work", "num": "1463", "d": "6/2012"}, {"title": "argument", "body": "nt think communicating well tried write thoughts hopefully convincing would love know guys think part augment backbone however want easily everything peachy changing initial backbone configuration logic one cases common practice make base classes using backbone customatizations apply app classes instead extending always extend works amazingly customization perclass level mean need different initialization logic need extend write custom function models also works well customization classwide level anything postconfiguration mean despite significantly different might make use method defined whole thing breaks want customize configuration classwide level nothing hook augment configuration logic anything extends called say want change way works bit copying options get passed onto match views treat options maybe want add way store extra ui state property instead inside maybe want models inherit way chain ing another way think four main places might want hook add custom logic backbone class first two handled fine nt nice way handle third anything configured could provide augmented could done augmenting instead also think preferable initialized completely writing backbone user fits category things configured initialize backbone nt give nice way two annoying ways one incomplete way could think augment constructor incomplete work added logic nt rely anything else backbone example need access parsed attached directly instance luck need reference tough recall logic every single initialize method annoying var authormodel basemodelextend var bookmodel basemodelextend var pagemodel basemodelextend yeah could nt need keep copying pasting code around codebase know upfront want everything extends configured way give initialize create new initialize annoying initialize function attributes options thisconfigureoptions thisstartapply arguments start function attributes options real initialization logic also great everyone reads code needs informed always known time talkingreading backbone mentally convert back accidentally override instead might even realize things get weird instance nt configurated properly done suggestion make backbone classes method configuration happens method problem easily solved end augment nt ever need touch extended models get augmented configuration options classwide configuration solved look familiar already method makes kind augmentation incredibly easy backbone classes get solution nt effects rest backbone source bonus great mixins best way found add functionality existing backbone class without extending completely new class mixin pattern like jquery plugins backbone would make extremely easy mixins grafted onto existing classes regardless whether view model collection router since classes method attach custom logic way mixin package mixin others add inheritance class want syntax", "num": "1462", "d": "6/2012"}, {"title": "default route takes precedence routes defined", "body": "js var routerone backbonerouterextend var routertwo backbonerouterextend new routerone new routertwo backbonehistorystart windowlocationhash one following code produces lines console basically route one overwritten default route even though routertwo holds default route initialized routerone normal behaviour", "num": "1460", "d": "6/2012"}, {"title": "wrong change events spacecontaining field names", "body": "set following field model two events triggered believe neither expected correct behaviour know real programmers nt use spaces shit shit throw exceptions document least", "num": "1455", "d": "6/2012"}, {"title": "require js config works nodejs rhino", "body": "trying use optimizer requirejs build profile set works well nodejs however configuration nt work rhino keep getting stackoverflow exception sure missing build profile file buildjs javascript appdir dist mainconfigfile distjsmainjs modules name main exception get buildfile buildxml clean delete deleting directory c devdesktoptrunkdesktopdist prepare mkdir created dir c devdesktoptrunkdesktopdist copy copying files c devdesktoptrunkdesktopdist optimize java optimizing standardkeeplines css file c devdesktoptrunkdesktopbuildbuildcssbootstrapcss java optimizing standardkeeplines css file c devdesktoptrunkdesktopbuildbuildcssdesktopcss java optimizing standardkeeplines css file c devdesktoptrunkdesktopbuildbuildcssespjqueryadjustmentscss java optimizing standardkeeplines css file c devdesktoptrunkdesktopbuildbuildjstestqunitqunitcss java java tracing dependencies main java uglifying file c devdesktoptrunkdesktopbuildbuildjsappjs java uglifying file c devdesktoptrunkdesktopbuildbuildjscollectionsnavitemsjs java uglifying file c devdesktoptrunkdesktopbuildbuildjscollectionsurlpatternsjs java javalangstackoverflowerror java orgmozillajavascriptscriptruntimenameorfunction java orgmozillajavascriptscriptruntimename java unknown source java unknown source java unable figure root cause greatly appreciate input help issue", "num": "1453", "d": "6/2012"}, {"title": "models initialized create made server attributes set", "body": "presently models made initialized receive attributes back server even know probably intended behavior less ideal creating models depend attributes provided server id ideally think models wait server attributes returned initialized", "num": "1452", "d": "6/2012"}, {"title": "question parse called model instances collection fetched data server", "body": "hello problemquestion following use backbonecollection fetch xml server therefore adjusted collectionparsemethod everything fine far also use backbonemodel fetch data server case retreiving multiple items server rather single item specifiy id adjust parse method time model digest xmlresponse modelparsemethod would throw errors collectionfetch called stated backbonedocumentation parsemethod individual models called collection parsed serverresponse behavior suppressed setting optionsparsefalse question would nevertheless individual parse method models called collection even case collection already parsed xmlresponse thanks tobias", "num": "1451", "d": "6/2012"}, {"title": "route amp page reload ie", "body": "hi guys following issue sure backbone supposed behave start backbone history auth path ie users hit authjoin backbone switch url authjoin browser support history api also reload page ca nt done without reloading page", "num": "1450", "d": "6/2012"}, {"title": "create never adds new model collection wait true", "body": "current master available backbonejsorg seems something preventing adding model collection could nt spot difference master moving eliminating deletion method seems fix problem sure repercussions", "num": "1447", "d": "6/2012"}, {"title": "consistent collection options", "body": "views pass custom options via object within view access options everywhere javascript var myview backboneviewextend initialize function var value thisoptionsvalue proves useful passing kinds options configure views collections similar functionality available per docs strangely access options via order access options need accept argument function something like think behaved like views nt manually set object would feel consistent", "num": "1443", "d": "6/2012"}, {"title": "adding attributes collections", "body": "looked closed enhancements flagged backbone could nt find anything specific subject wondering whether attributes collections something investigated personally could see plenty utility able provide small selection meta data collection example say collection models properties attribute could allow something like albumprop name greatest hits albumprop publisher sony albumpluck title otherwise moment would something like relies collection populated discovered similar old topic stack overflow setting attributes collection backbone js ca nt rely data available collection actually wrap collection model model collection model able support meta data attributes", "num": "1442", "d": "6/2012"}, {"title": "question change event nested models", "body": "docs change event triggered model attributes changed model contains nested model collection would make sense trigger change event parent model state parent model indeed changing coffee container model container new backbonemodel name test description demo functionality nested collection containerset tags new collection tagname new tagname featured changing attribute nested collection point container model changed sense isequal current previous state would return false containerget tags set tagname closed wanted see functionality would make sense could separate event indicated proxied change event occurring child", "num": "1441", "d": "6/2012"}, {"title": "modelvalidate failing stop modelsave saving server", "body": "know similar issues occurred past fixed problem modelsave still saving model server event though validation via modelvalidate failing first assumed bug code suspicious could issue backbonejs case modelvalidate return value trigger error event however model still saved success callback defined modelsave run instead error callback function wrote simple sample run reproduces behavior mentioned issue method defaultpage route callback router view performing model set save operations follows model definition javascript var contact backbonemodelextend urlroot contactsjson idattribute id defaults function return surname givenname org phone new array email new array address new array street district city country postcode validate function attributes typeof attributesvalidationdisabled undefined consolelog attributes var errors new array validate surname isempty attributessurname true errorspush type form attribute surname message please enter surname validate emails isempty attributesemail false var emailregex az stores indexes email values fail validation var emailindex new array attributesemail function email index emailregextest emailvalue false emailindexpush index create error message emailindexlength gt errorspush type form attribute email index emailindex message please enter valid email address", "num": "1438", "d": "6/2012"}, {"title": "extends overrides super class prototype attributes", "body": "create class extends backboneview gives class attributes property id make class extends first class give second class property id first class also gets id child class constructor puts id property attributes property class nt attributes property puts id attributes parent prototype chain hope understandable jsfiddle better understanding mean fiddle view id view", "num": "1436", "d": "6/2012"}, {"title": "modelsave nt validate default", "body": "hi modelsave nt validate default part save method workaround tried modelisvalid method nt trigger error event", "num": "1433", "d": "6/2012"}, {"title": "sort operation done merge", "body": "adding models collection sort done merge result unsorted collection add operation done course merge update sort criteria also think model reset set server api may send empty properties result client model inconsistant state", "num": "1430", "d": "6/2012"}, {"title": "could amazing integrate bb sqljs", "body": "", "num": "1428", "d": "6/2012"}, {"title": "public inherits helper", "body": "would great inherits helper function somehow publicly reachable outside backbone neat implementation usually copypasting use please reason private", "num": "1427", "d": "6/2012"}, {"title": "issue modelurl documentation nt corresponds source code", "body": "hi struggling get app working properly restful routes due fact model function works differently documented documentations says see code exactly inverse looks first falling back reference code", "num": "1424", "d": "6/2012"}, {"title": "unnecessary images documentation page", "body": "documentation page loading total images screen shots applications using backbone want see piece documentation development need quickly load page time nt need load images every time load page eats bandwidth unnecessarily make loading examples optional", "num": "1420", "d": "6/2012"}, {"title": "specify http method calling save", "body": "save method per document model isnew save create http post model already exists server save update http put flow get bunch objectids received fill object new backbone model objectid get additional known fields update objects http put easy way get around isnew post otherwise put default without overly complicated logic would also possible override default behavior passing specific method postput save method", "num": "1419", "d": "6/2012"}, {"title": "model changes fired updated via collection reset", "body": "call collectionfetch list models returned server differ models browser model attributes get updated unfortunately event filed defaults using update collection default uses option behavior logically expected default behavior using fire models changes attributes detected relevant source code backbonejs included addremovereset finished reset function models options models models options options var l thismodelslength lt l thisremovereference thismodels thisreset thisadd models extend silent true options optionssilent thistrigger reset options return", "num": "1417", "d": "6/2012"}, {"title": "backbonemodel commonjs moduleexports", "body": "something noticed working backbonemodel commonjs take code example modeljs var backbone require backbone moduleexports backbonemodelextend urlroot someurl viewjs var mymodel require model var new mymodel misnew returns false true expected reason commonjs module imported automatically given id attribute containing path module object imported backbonemodel uses id attribute internally contain unique identifier object contained model however using moduleexports commonjs conflict commonjs also uses id attribute makes things like modelisnew work expected worked around using exportsmodel instead moduleexports could perhaps useful change backbonemodelid attribute id similar avoid conflicts commonjs hope helped anyone else confused", "num": "1415", "d": "6/2012"}, {"title": "opera fails router routes via navigate replace true", "body": "failed expected searchmanhattanstarthere result searchmanhattanthenhere", "num": "1413", "d": "6/2012"}, {"title": "trigger sync event fetch also", "body": "dont know name sync really called modelcollection id try fetch server get information would like triggered notify observers implemented way like savedestroy method would better backbonejs already coffeescript fetch gt optionssuccess resp status xhr gt success resp status xhr success trigger sync model resp options", "num": "1412", "d": "6/2012"}, {"title": "tojson function parameter misleading", "body": "lines parameter never used", "num": "1410", "d": "6/2012"}, {"title": "collectionparse called add optionsparse true", "body": "constructor collection currently line line indicates method method called check true call models passed however logic methods collection seems oversight", "num": "1407", "d": "6/2012"}, {"title": "options deep cloning", "body": "sorry topic becomes annoying issues backbones options deepcloned say hard ok provide please consistent support function return options object think also better documented result incomprehensible behaviour non singletons instances start communicate magic way one understand inconsistent options support views models collections initialize method accept options object view attach options instance real reason make exception use options cases set thisoptions case models collections good usecases options models collections best oleg", "num": "1406", "d": "6/2012"}, {"title": "document behavior sync event success error callback specified", "body": "bugs mention sync event nt get triggered user specifies success error callback options save destroy bugs closed response success error callbacks trigger event perfectly reasonable far see documented documentation backbonejsorg recommendation add note behavior documentation save destroy methods make behavior clear headaches people puzzled sync event never called", "num": "1403", "d": "6/2012"}, {"title": "minor reorder lines model constructor", "body": "currently set model called good place extend backbone example implement nested collections extremely helpful extending could please modify code order simple change nt affect anything else gives one extra piece information work", "num": "1402", "d": "6/2012"}, {"title": "todo example uncaught typeerror read property localstorage undefined deleting note deleting contents", "body": "todo example delete note clearing contents hitting enter clicking outside get error appears fix thismodelsave title value statement wrapped else called value", "num": "1401", "d": "6/2012"}, {"title": "permission denied issue backbonejs version backbonejs", "body": "using backbonejs version get following error access application see failure following line backbonejs permission denied backbonejs line character set breakpoints backbonejs see error occurs following line backbonehistory navigate method thisiframe amp amp frag thisgetfragment thisgethash thisiframe opening closing iframe tricks earlier push history entry hashtag change replace true nt want optionsreplace thisiframedocumentopen close thisupdatehash thisiframelocation frag optionsreplace code executed thisgethash thisiframe called gethash method thorws error line var match lochrefmatch attempt access thisiframelocation thisiframedocument causes access denies permission denied error someone help fix issue everything works fine ie mode", "num": "1399", "d": "6/2012"}, {"title": "navigate url", "body": "current backbone allow navigating url modified navigate function navigate function fragment options thisfragment frag return thisfragment frag custom hack allow sameduplicate fragment options amp amp optionsduplicate return eg usage approuternavigate asameurl trigger true replace true duplicate true appreciated feature added backbone next time thanks", "num": "1397", "d": "6/2012"}, {"title": "docstodo example collection instances named uppercase", "body": "nitpicking docs warned reason people name backbone collections uppercase letter beginning widespread across several backbone projects nowadays almost convention except javascript naming conventions seen last decade every style guide know recommends naming constructors namespaces correct missed something documentation examples naming collections inconsistent times lowercase method examples suddenly turn uppercase might make sense first glance second glance may remind people rails like rails would makes sense since class static method returns list synchronously without changing overall state however make sense return list ajax promise pure function fills asynchronously todo example spreads unconventional naming even pro javascripter find naming confusing could guess difference could guess one class one instance class could say somehow singleton since global central storage fine know language framework names singleton instances like could understand notion master collection purely used querying etc rather manipulating list backbone collections manipulated almost always practice identifier used mostly actually list view part todos collection removes need many identifiers btw love see complete overhaul todo example like someone see also please go contributor started important maintainers take imho stress important good example code docs good example project backbone beginners get pointed right direction", "num": "1395", "d": "6/2012"}, {"title": "typeerror undefined function evaluating thiselhtml template", "body": "new github amp backbonejs sorry format using jquery underscore backbone cloudflare searchview backboneviewextend document ready function var searchview new searchview el searchcontainer issue console log thisel nt give html function see innerhtml", "num": "1393", "d": "6/2012"}, {"title": "set throw uncaught typeerror use operator search id", "body": "happen model try set variable set albums use later parse object make api calls wait come back data format push time works fine every throws error everytime throw error try set anywhere project kind weird", "num": "1392", "d": "6/2012"}, {"title": "misleading documentation overriding modelset", "body": "documentation defines function arguments like states one could override like result buggy code real function arguments actual code order properly override one would need specify true arguments juggle arguments around determine whether really value whether actually forth might also good idea mention calls", "num": "1391", "d": "6/2012"}, {"title": "backbonecollectionremove blows called backing store", "body": "call remove like collection new backbonecollection collectionremove collectionmodels collection every model removed remove method protect case think either throw case iterate given array way safe removed", "num": "1389", "d": "6/2012"}, {"title": "inconsistent use root", "body": "ran problem navigating root would cause incorrect url example root root navigating root causes url rootroot populated browser believe traced inconsistent stripping root backbone checks url starts root removes root runs routestripper regex backbone runs routestripper regex checks url starts root means url root returns tries navigate root root stripped root contain root", "num": "1388", "d": "6/2012"}, {"title": "backbonehistorystart firing default route root param", "body": "app url format routes look like however call backbone history start user navigates fire route fire route user adds slash end url noticed start function history calls thisloadurl without params ends getting translated fragment root side tries get matched list routes since nt route called root nt match question nt infer loadurl root point empty route hit index function like otherwise need add root route point index function addition empty route", "num": "1387", "d": "6/2012"}, {"title": "sorting backbone collection add event handler refires add event", "body": "please see fiddle call sort within add event handler refires add event end getting duplicate content dom etc bug", "num": "1386", "d": "6/2012"}, {"title": "parse methods provide events attach callbacks", "body": "difficult tell parse method collection model returns feel way user backbone easily implement callback fires collectionmodel finished parse ing stands adding custom event requires one overwrite default parse method", "num": "1384", "d": "6/2012"}, {"title": "view constructor nt set custom properties", "body": "used model constructor properties passed constructor inside json object automatically assigned came surprise assign custom properties like want myproperty part class attached generated el like classname instead sits thisoptions unless set hand intended something wrong", "num": "1383", "d": "6/2012"}, {"title": "making collectionadd easy tweak", "body": "met bunch cases could nt tweak way wanted tweaking would behave like see also maintaining store one unique instance model collections sharing instances store example javascript var store new backbonecollection var mymodel backbonemodelextend var mycollection backbonecollectionextend actually rather simple solution unless missed something would allow tweaks putting actual part separate method could override always get single vivified model argument", "num": "1379", "d": "6/2012"}, {"title": "backboneviewmake creates elements prefix", "body": "behavior seen almost identical defect example execute render proper nav element end result node document styled since prefix indicates pseudoclass noticed defining element tagname view object javascript var myview backboneviewextend tagname nav initialize function specific case using backbone checked issue still present", "num": "1378", "d": "6/2012"}, {"title": "calling modelsave skips sync validation", "body": "using backbonejs underscorejs call view validation sync getting skipped sync validation gets executed issue disappears calling intended behavior bug found remove replace condition line works fine", "num": "1377", "d": "6/2012"}, {"title": "general collection event", "body": "hello htmljavascript table slider everytime number entries backbone collection changes adjust size slider listen events reset add remove slider widget would general lengthchange event would listen one event maybe developers would also benefit change thanks lot wolfgang", "num": "1376", "d": "6/2012"}, {"title": "backbonecollection constructor function call order", "body": "trying extend backbonecollection ran little annoyance creating collection via constructor passing models way recognise models applied unless function call made extend collection initialize method state still complete models exist therefore ca nt simply manipulate collection fix reorder stack initialize method called last model also path letting collection take silent flag options passed rather fixed flag", "num": "1375", "d": "6/2012"}, {"title": "backboneview thisensureelement", "body": "consider thisensureelement processing operations thisinitializeapply arguments reasonable facilitate flexible configuration el thank", "num": "1370", "d": "6/2012"}, {"title": "backboneemulatehttp overrideable via param", "body": "currently way control setting set global level problem models need use others nt backbone allows redefine model collection ideal reimplement behavior method really want alter one setting essentially want even better solution actually might ability override behavior model property", "num": "1368", "d": "6/2012"}, {"title": "initializing collection models initialize function called models added", "body": "javascript var video backbonemodelextend defaults title description var collection backbonecollectionextend var videos new collection title new video title new video consolelog videosmodels video model issue appeared updated collection flags models initialized code stopped working expected behaviour workaround", "num": "1367", "d": "6/2012"}, {"title": "routes incorrectly fired url", "body": "go paste console url changes press browser back button url still browser went one history step back fired console output expected route triggered since actual url change problem always appends calling actually used saved called calls method always removes returns compares since differ assumes url changed therefore url routed using issue might seem contrived push url twice actually caused problem application background reason latest chrome triggers event without user input right calls know need investigate reproduce behavior simple code like one anyway problem app since accidentally popped path always current backbone thinks different application module loaded twice call", "num": "1366", "d": "6/2012"}, {"body": "morning bobmop knowledge backbone provide support javadoc style documentation probably know docco used generate docs backbone different style documentation", "d": "6/2012"}, {"body": "hi powmedia going think use catchall route work", "d": "6/2012"}, {"body": "worked thanks braddunbar seems string starting asterisk ok behaviour seems strange could explicit supported", "d": "6/2012"}, {"body": "fantastic think fairly straightforward", "d": "6/2012"}, {"body": "one point sure mentioned elsewhere iterating object guaranteed run order browsers definition perhaps via array otherwise case would nt work expected", "d": "6/2012"}, {"body": "also see code example", "d": "6/2012"}, {"body": "braddunbar jashkenas guys tell bad least", "d": "6/2012"}, {"body": "good morning ianstormtaylor thanks writing thoughts mostly agree pain points writing plugins initialization however disagree proposed solution problem understand plugins backbone objects meant inherited need way specify logic executed called child classes usually place since like keep clean inheriting classes calling super method required presents problem inserting method logic constructor calling proposed solution opinion already perfectly good way accomplish require child classes call parent implementation providing well understood technique requires extra explanation code situation come first place backbone attempted circumvent calling super methods nt think adding methods simplify fact think make things worse short nt think avoiding calling super methods verbosity good enough reason add complexity form configuration methods fact would advocate going direction entirely removing", "d": "6/2012"}, {"body": "view method exists parse options specify instantiating view maybe needs renamed removed also fan requiring extending classes call super methods something like method basic fundamental object extends backbone construct never implemented base type type built explicit intent never instantiated directly always extended methods well want override method choice call super method distinction mind methods exist purely extending classes implement etc vs methods core functionality backbone etc said though nt understand need run code way ticket suggests provide specific real world example one projects really needs ianstormtaylor work backbone building plugins creating project specific abstractions etc never seen need anything provide method base type", "d": "6/2012"}, {"body": "view configure method exists parse model collection options specify instantiating view maybe needs renamed removed sorry unclear meant logic included could moved constructor removed entirely case implementation detail relied upon extensions also fan requiring extending classes call super methods something like initialize method basic fundamental object extends backbone construct never implemented base type type built explicit intent never instantiated directly always extended problem multiple levels inheritance never get around issue class implemented classes extend must call parent implementation suppose fine anticipate one level inheritance certainly ca nt guarantee", "d": "6/2012"}, {"body": "problem multiple levels inheritance never get around issue class implemented initialize classes extend must call parent implementation suppose fine anticipate one level inheritance certainly ca nt guarantee nt think anything multiple levels inheritance multiple levels inheritance backbonemarionette view framework marionetteview marionetteitemview marionettelayout none base types implements method leave person extending itemview layout base types never meant instantiated directly always meant extended base types provide needed functionality without requiring call super method never get away super method calls leave core methods like alone base types require users call super base types project probably going initialize method type someone decides extend call super type initialize need implement method", "d": "6/2012"}, {"body": "backbonerelational initialization different variant boils javascript backbonerelationalmodel backbonemodelextend isinitialized false works called right constructor least close enough bit better variants wo nt override often normally want call parent implementation regardless proper builtin solution would still preferable though", "d": "6/2012"}, {"body": "way arrived solution ask extra configuration logic go baseview answer pretty simply right backbone normal configuration logic aka right lot cases could probably covered adding logic backbone logic overriding bars anyone augmenting internal backbone logic reason example change remove method decided wanted remove encourages people accessing things directly instead given gettersetters agreed upon would every across entire app ridiculous yes work janky already know want apply classes way time instead pauluithol yeah technically works hack nt hook need nt need store state augment get functionality could also grafting initialization logic well would also hack worse writing mixin need add bunch different logic potential class could mixed view override model override store initialized state collection override store initialized state router override instead could override method derickbailey think problem lot times logic beginning end constructor works means none views inherit optout nt even happened time called like mentioned ca nt override backbone core logic braddunbar used mixins wrong predefined place configuration allowing people augment support specific use case way see backbone always claims nt want support edge cases core awesome make augmenting like hard think constantly calling configuration logic calling chain baseview regardless many children deep janky workaround happen good place add configuration logic big difference logic specific type view needs initialize set specific needs versus logic know want appwide start views views right fine overriding easy models collections good place add logic", "d": "6/2012"}, {"body": "configure used mixins leading underscore lack documentation denote internal method changed removed point think constantly calling configuration logic initialize calling chain baseview regardless many children deep janky workaround happen good place add configuration logic disagree calling super method well understood method extension javascript workaround whether preferred technique case different question", "d": "6/2012"}, {"body": "ianstormtaylor provide specific example need make application behave way need behave specific example functionality need application behavior best facilitated way may help make case much stronger may help others see needs possible someone might suggest alternative suits needs possible seeing specific example would convince core contributors accept pull request", "d": "6/2012"}, {"body": "worth use inside layoutmanager without ability bind reference render inside like would possible", "d": "6/2012"}, {"body": "one case mixin adds state handling backbone class backbone state important part inlined javascript function backbone backbonemixin backbonemixin backbonemixinstate function never worry setting states states setup time called model collection view", "d": "6/2012"}, {"body": "also think tbranyen good example view configure method useful", "d": "6/2012"}, {"body": "worth use configure inside layoutmanager without ability bind reference render inside initialize would possible would nt say possible marionette without using starting see value something like ticket suggesting personally think wrong method name though methods nt messed imo meant private something along lines could great benefit plugin developers like pauluithol tbranyen applications general projectspecific abstractions layers created", "d": "6/2012"}, {"body": "derickbailey possible without creating new constructor layoutmanager works functionality provides", "d": "6/2012"}, {"body": "gladly instead going parity view edit updated pull request public", "d": "6/2012"}, {"body": "heya peetertomberg yes normal behavior routes checked inverse order added since instantiated last routes checked matches first since match executed handler", "d": "6/2012"}, {"body": "everything posible", "d": "6/2012"}, {"body": "heya yaroslavulanovych thanks issue definitely result fact accepts space separated events ca nt find documentation says nt use attribute names spaces though would nt recommend", "d": "6/2012"}, {"body": "run issue debugging fun space separated events seems like strange design choice use array avoiding ambiguity", "d": "6/2012"}, {"body": "since api likely change added documentation thanks pointing", "d": "6/2012"}, {"body": "recommendation party services using spaces attribute names happens us lot", "d": "6/2012"}, {"body": "sure would definitely translate modelparse", "d": "6/2012"}, {"body": "try", "d": "6/2012"}, {"body": "swarnak probably good deal luck posting type issue mailing list backbone requirejs", "d": "6/2012"}, {"body": "afraid way api must necessarily work entire point get model reference back listen events nt want reference model id nt create clientside server send first note listen hear assigned server", "d": "6/2012"}, {"body": "hi thanks opening issue think general idea extracts array unparsed response extracts attributes unparsed model response implies use function single model responses collection responses instance would correctly parse following json collection fetch model fetch answer question", "d": "6/2012"}, {"body": "hi braddunbar thanks reply understand things done special case another catch using jathjs parse serverresponse therefore parsing done completely collectionparsemethod returning fetch goes modelparsemethod let parse xml way collection model collection capable calling server data codeduplication part avoid scenario would extract parts xml collectionparsemethod pass parts modelparsemethod raw xml thanks tobias", "d": "6/2012"}, {"body": "nt much experience situation pain separate two always pass", "d": "6/2012"}, {"body": "nope absolutely way change url without reloading page old ies exactly problem solves", "d": "6/2012"}, {"body": "thks jeremy said old ie experiencing issue old ie pleonasm", "d": "6/2012"}, {"body": "covering bases never remember exactly ie supports", "d": "6/2012"}, {"body": "good morning fauntleroy thanks pointing addressed please grab latest master give shot", "d": "6/2012"}, {"body": "works like charm thanks", "d": "6/2012"}, {"body": "hi greengit actually discussed rather recently given backbone remain flexible ease implemented think best left user fact opinion options saved view either", "d": "6/2012"}, {"body": "hi aaunel thanks issue certainly accomplish describing without extra support however sounds like want separate model storing album attributes instance think success pattern hope helps", "d": "6/2012"}, {"body": "braddunbar thanks response currently wrapping anything needs attributes well multicollection data structures models considered badpractice carry way otherwise solution would work perfectly small selections metadata cheers", "d": "6/2012"}, {"body": "along lines would nice backbone models aware nested models collections fetch", "d": "6/2012"}, {"body": "afternoon knotschi thanks pointing looks though already fixed grab latest master fix issue", "d": "6/2012"}, {"body": "morning lucmult thanks opening issue using calls explicitly still called even relevant code js wait ing set changed attributes validate early optionswait thisvalidate attrs options return false current clone thisattributes regular saves attributes persisting server var silentoptions extend options silent true attrs amp amp thisset attrs optionswait silentoptions options return false hope helps", "d": "6/2012"}, {"body": "hi braddunbar actually code validation called passed attrs key value use case like scenario validation never called overwritten save method model", "d": "6/2012"}, {"body": "nt think cases attributes passed addressed thanks lucmult", "d": "6/2012"}, {"body": "hi starkovv right would cool integration probably wo nt added backbone proper though end writing please add wiki", "d": "6/2012"}, {"body": "morning nejcjelovcan thanks issue think private providing inheritance incidental piece backbone rather goal read", "d": "6/2012"}, {"body": "hi dombesz thanks pointing documentation actually already updated please let us know change nt sufficient", "d": "6/2012"}, {"body": "good morning greengit thanks pointing agree great deal images documentation site cached resulting typical payload small fast loading working caching disabled similar situation", "d": "6/2012"}, {"body": "let smart way change images lazilyloaded javascript viewport scrolls em good example imageoriented site see", "d": "6/2012"}, {"body": "braddunbar cherrypick change ghpages well", "d": "6/2012"}, {"body": "step pushing earlier", "d": "6/2012"}, {"body": "howdy thanks question since passed along specify custom http method like also override default js var model backbonemodelextend sync function method model options custom logic var sync backbonesync backbonesync function method model options custom logic", "d": "6/2012"}, {"body": "afternoon tonyxiao thanks pointing certain situation describing think several involving possibly newer option would mind providing snippet reproduces behavior", "d": "6/2012"}, {"body": "oops think filed bug report wrong place problem happens using backbone together backbonerelational overridden backbonecollectionprototypeadd globally resolve duplicate objects based idattribute happens created model say id client later fetch collection contains object different properties provided server backbonerelational update model wo nt trigger change event default uses suppresses events individual models sure relevant thought explain anyways", "d": "6/2012"}, {"body": "implementation commonjs talking exactly", "d": "6/2012"}, {"body": "using backbone titanium build iphone application read spec mentions following module must free variable module object module object must readonly nt delete id property toplevel id module id property must require moduleid return exports object moduleid originated say moduleid passed another module requiring must return original module module object may uri string fullyqualified uri resource module created uri property must exist sandbox", "d": "6/2012"}, {"body": "huh node implementation works anyhow think original workaround correct titanium nt tack object directly export namespace instead", "d": "6/2012"}, {"body": "seems implemented nodejs also see api", "d": "6/2012"}, {"body": "nope using brunch commonjs autowrapping way everything works broken titanium", "d": "6/2012"}, {"body": "node get something different", "d": "6/2012"}, {"body": "hey wwwboy thanks letting us know latest version tests master changed use mock location rather using directly found makes stable passes opera would mind giving try environment", "d": "6/2012"}, {"body": "closing fairly certain fixed still repro please let know thanks", "d": "6/2012"}, {"body": "thanks original message brad dunbar mailto reply replygithubcom sent thursday june wwwboy subject backbone opera fails router routes via navigate replace true closing fairly certain fixed still repro please let know thanks reply email directly view github", "d": "6/2012"}, {"body": "think completion definitely qualifies event", "d": "6/2012"}, {"body": "realized pr conflicts braddunbar easy change though necessary", "d": "6/2012"}, {"body": "problem glad update later thanks heads", "d": "6/2012"}, {"body": "sounds good go", "d": "6/2012"}, {"body": "morning aoboturov thanks pointing actually intentional meant remind passes along argument models default see details", "d": "6/2012"}, {"body": "hi davidmarble thanks pointing explicit call call collection constructor passed may may include instance following log js var model backbonemodelextend parse function resp consolelog parse return resp var collection backbonecollectionextend model model new collection reset id parse true", "d": "6/2012"}, {"body": "braddunbar yep get called models preparemodel opened issue inconsistency called models collections issue inconsistency called several ways developer may want populate collection notyetpreprocessed javascript arraysobjects ways think passing array objects collection constructor calls calling directly calling object instead initialized model developers sort work around calling objects cases send methods pointing rather inconsistent functionality automatically applied", "d": "6/2012"}, {"body": "ah misunderstood mean able called nt thought seem inconsistent", "d": "6/2012"}, {"body": "heya davidmarble thanks issue could explain need order parse nested collections nt quite understand use case", "d": "6/2012"}, {"body": "well hoping add detailed use cases change nothing functionally change current use backbone allows access parse called instead noted good place extend backbone example implement nested collections many ways people come nested collections model one entry point empty overloadable method called processing occurs good place preprocess nested data access means developer access properties methods model collection within numerous ways one data member used example accessing configuration information stored call supercollection configure subcollections developer wants nest one models within supercollection", "d": "6/2012"}, {"body": "nt use case inclined leave eliminate chance regression also lots experience using creating nested collectionsmodels never needed use let know good use case reopen", "d": "6/2012"}, {"body": "nt expect quick dismiss explanation already given simplicity suggesting ca nt regression change order lines merely basic code organization decision every change project must clear use cases simple change opens opportunities coders utilize framework takes away functionality already exists adds explicit new features need defending attempt write specific use case name trying hard give back project encouraging minor improvement example code impossible write currently would possible simple change commented coffeescript compiled version though might seem involved used reading coffeescript output line gist impossible current backbonejs possible simple switch example json data source collection feeds supercollection multiple feed models json class feeds extends collection model feed url feeds constructor models options gt set instancespecific parameters options optionsparams params extend optionsparams else params super feed model includes feeditems nested collection feeditem models class feed extends model constructor attrs options bool keep track whether nested collection models parsed appended replace existing models addnested false parse response xhr handle nested feed item collection model note handles one level nesting options may important fetch methods calling parse wo nt passed embedded calls nested collection feed feeditem models little work feeds source supported collection could used fetch changes individual feed class feeditems extends collection model feeditem url feed actual feed items", "d": "6/2012"}, {"body": "make sure calling page finished loading", "d": "6/2012"}, {"body": "mainjs file use requirejs requireconfig paths use libsrequireuse jquery libsjqueryjquerymin jqueryui underscore libsunderscoreunderscore backbone libsbackbonebackbone text libsrequiretextmin use underscore attach require app function app document ready function appinitialize main appjs file initilized document ready still see error need wait window load", "d": "6/2012"}, {"body": "jashkenas pointed also see backbonehistorystart call without knowing rest application would ask change code check error still", "d": "6/2012"}, {"body": "filename appjs define use underscore jquery use backbone router request routerjs function backbone router var initialize function return initialize initialize routerjs filename routerjs define use underscore jquery use backbone viewsdesktop eventbus viewfactory function backbone mainhomeview eventbus viewfactory var approuter backbonerouterextend routes default default initialaction var initialize function var approuter new approuter backbonehistorystart return initialize initialize backbonehistorystart call routerjs", "d": "6/2012"}, {"body": "using modernizr check hashchange supported passing option skip haashchange app loads find solution permission denied issue remove different calls", "d": "6/2012"}, {"body": "okay fairly hard debug anyone know application refactor core problembug app code put jsfiddle bootstrapped smth stripped code assure nothing rest code causes failure could provide qunit testcase fails would even better please read github markdown guidelines syntax highlighting finished steps least fiddle ping amp try help", "d": "6/2012"}, {"body": "figured issue caused changing document domain one functions need support integration intranet apps remove code eg documentdomainxyzcom everything works fine particular supporting navigation browser back forward buttons set event window catch ignore error", "d": "6/2012"}, {"body": "hi mzooms thanks opening issue fyi discussed previously", "d": "6/2012"}, {"body": "fyi todo branch refactored since rob wrote ticket pulled better worse addy changes todomvc uppercasing discuss simply objects talking global objects something tend like distinguish local variables deep function see assumption local certainly change folks feel like confusing", "d": "6/2012"}, {"body": "feels like inherits like instance also agree ensuring examples follow best practices", "d": "6/2012"}, {"body": "molily", "d": "6/2012"}, {"body": "chandram check section syntax highlighting better formatted code first call template see underscore help method ca nt see called render document ready function", "d": "6/2012"}, {"body": "identical identical objects browser provided give access method method provided jqueryzeptoenderetc use wrapped form via instead fix problem", "d": "6/2012"}, {"body": "thanks opening issue preliminary suggestions tried stepping debugging tools see exactly exception coming circumstances surrounding eg stack whats info chrome dev tools reproduce result using whats currently master handful bug fixes various behaviors landed since also could create example test case bit detail use case sample jsfiddle fork get started", "d": "6/2012"}, {"body": "oddly enough happens one model using stepped chrome dev tools leaves code soon try use set method goes requireminjs creates errors nt know recreate issue jsfiddle work fine times randomly throw typeerror try find line minified js file backbone see exactly happening", "d": "6/2012"}, {"body": "think assumption overwriting provided methods less going control going use therefore would know needed account flexible arity situations fwiw also even easier way preserve ultimately falling back original method use apply instead call", "d": "6/2012"}, {"body": "agree wookiehangover using instead much nicer way ensure original arguments get passed make sure nt change calling implementation detail garnered reading source nt really relevant documentation thanks pointing molecularbear", "d": "6/2012"}, {"body": "til means thanks braddunbar", "d": "6/2012"}, {"body": "discussed think solution use instead", "d": "6/2012"}, {"body": "probably idiomatic seem like case handle", "d": "6/2012"}, {"body": "actually looking source backbone handles fine since array sliced iterating upgrading solve issue", "d": "6/2012"}, {"body": "um schrieb brad dunbar actually looking source backbone handles fine since array sliced iterating upgrading solve issue thanks", "d": "6/2012"}, {"body": "might related although described another case similar problem occurs", "d": "6/2012"}, {"body": "example root root navigating root causes url rootroot populated browser navigating mean calling actually pointing browser", "d": "6/2012"}, {"body": "braddunbar calling", "d": "6/2012"}, {"body": "mean essentially calling root fragment argument order navigate root seems incorrect though line would suggest somewhat supported use instead navigating root fact intention may quite understand", "d": "6/2012"}, {"body": "intention case root heh issue though inconsistency means things like theoretically work intentions sort aside somewhat related problem really change whether issue bug working click handler views grabs attribute clicked link uses determine navigate way link work whether using routing normal browser navigation however page place link href browser fallback link would correct manifests cases simplest case problem could find goal make flexible link click handler works inconsistency found way", "d": "6/2012"}, {"body": "ah see thanks walking use case big help solving issues like problem using precludes navigating fragment identical root root want navigate fragment way tell meant links probably less trouble remove root calling something like", "d": "6/2012"}, {"body": "thanks see rootremoval code thought supposed happen backbone code thanks helping still think inconsistency little strange may perhaps different problem", "d": "6/2012"}, {"body": "reproduced issue process noticed additional odd behavior following routes historystart call like hitting trigger roothandler callback seems like bug", "d": "6/2012"}, {"body": "looks like duplicate bug braddunbar working another branch", "d": "6/2012"}, {"body": "nt think issue problem need extra slash root order fire empty route", "d": "6/2012"}, {"body": "definitely bit different somewhat related wondering perhaps strip trailing slash comparison works either way navigating instead seems reasonable take stab see edge cases pop", "d": "6/2012"}, {"body": "hi rquinlivan thanks issue used method describe trigger parse events seemed work fine js var model backbonemodelextend parse function resp thistrigger parse resp parse stuff return resp feel like callback needed asynchronous situation would use one parse", "d": "6/2012"}, {"body": "precisely use case considering essentially interesting js var col new mycollection colurl myurl colfetch function mycallback something requires collection already populated var view new myview viewon collection parsed mycallback basically want know collection finished parsing response", "d": "6/2012"}, {"body": "hmm case recommend using event possibly listening updating ui necessary reason", "d": "6/2012"}, {"body": "think works use case thanks", "d": "6/2012"}, {"body": "great", "d": "6/2012"}, {"body": "hi serpenthelm thanks opening issue anything wrong yes intended behavior options set model ones included viewoptions others set default could introduce naming collisions custom functions properties set manually constructorinitialize", "d": "6/2012"}, {"body": "thanks opening issue sebpiq believe things describing already possible code master first request takes option update models id instead adding maintaining model store need use factory function property js var collection backbonecollectionextend model function attrs options var model attrs amp amp attrsid null amp amp storeget attrsid model model new model attrs options return model", "d": "6/2012"}, {"body": "oh thanks info nt know well kind think extra options like come fact tweak nt better idea make hook methods like one suggested make whole process customizable main advantage classes vs functions nt add extraoption every time missing feature keep library lean", "d": "6/2012"}, {"body": "hooks often better options particularly difficult regard glad look pull request solution though", "d": "6/2012"}, {"body": "well try", "d": "6/2012"}, {"body": "also solution store problem nt work pass instances", "d": "6/2012"}, {"body": "right example would need good deal code real world situation", "d": "6/2012"}, {"body": "hi miketierney thanks submitting issue right view make fail create elements without including shim however backbone nt aim fix issues since already fixed quite well need include element polyfill order work elements ie example code works beautifully including page", "d": "6/2012"}, {"body": "think know happened situation actually using part modernizr library minor release behind therefore lacking fix issue referenced thanks prompt response", "d": "6/2012"}, {"body": "sure thing glad resolved issue", "d": "6/2012"}, {"body": "hi dombesz thanks reporting believe already fixed would mind trying code master", "d": "6/2012"}, {"body": "hi wolfgangadamec nt know aware fairly easy use space separated events listen collection changes js collectionon add remove reset instead collectionon add collectionon remove collectionon reset way proxy events custom collection class like js var collection backbonecollectionextend initialize function thison add remove reset function thistrigger change length thislength since rather easy think probably leave user implemented hope helps", "d": "6/2012"}, {"body": "thank", "d": "6/2012"}, {"body": "hi milosdakic thanks issue actually discussed calls made order collection chance fully initialized models added eg dynamically setting property", "d": "6/2012"}, {"body": "hi braddunbar thanks linking discussion would possible option allow passing silent option construction change collection constructor would minimal", "d": "6/2012"}, {"body": "want event fire new collection call creating collection way still get event nt worry", "d": "6/2012"}, {"body": "braddunbar seems like sensible solution already achievable requires extra line code", "d": "6/2012"}, {"body": "thanks issue lamomm sure asking though mean called", "d": "6/2012"}, {"body": "may operations need adjusted initialize configuration sure whether reasonable facilitate flexible configuration el especially view class instance object", "d": "6/2012"}, {"body": "think main idea ensure view element times changing invariant means breaking lot assumptions existing code type configuration need element created", "d": "6/2012"}, {"body": "agree ensureelement processed initialize delegateevents feel though place user assume el present render time thereafter view lifecycle type change would break existing user implmentations sort dynamic attribute formatting function called prior ensureelement way user free assign dynamically generated attributes element generated view get around simply extending backboneview custom view using constructor override order execution myview backboneviewextend", "d": "6/2012"}, {"body": "ronadams js var view backboneviewextend attributes function return", "d": "6/2012"}, {"body": "true good point braddunbar good alternative solution use cases however solution works better particular application create prototype application view extends backbone add sugar bb view nt exist current library additional lifecycle methodspropertiesa common view model view model config etc subclasses extend application view provide common functionality best practice encapsulation different purposes listviewscontentviewstabviews instead forcing subclasses myviewprototypeattributesapply let handle attributes however want final manipulation attributes application view initialize function", "d": "6/2012"}, {"body": "backbone views designed element times whether element created via passed via need alter options done constructor calling super constructor element creationattachment ronadams understand use case think probably either initialization constructor alter element creation", "d": "6/2012"}, {"body": "fair enough", "d": "6/2012"}, {"body": "ajsharp thanks opening issue fairly specific use case perfect example overwrite backbonesync entirely support handle custom behavior another solution pointed documentcloud base model custom sync method inherit models need way need write behavior use need eg coffeescript class customsyncmodel extends backbonemodel sync gt fancy implementation class modelthatneedscustomsync extends customsyncmodel", "d": "6/2012"}, {"body": "hey alex encountered similar desire enforce jsonp requests across board instead adding global configuration point eg backboneoptions something recommended use wrap override backbonesync wrap original behavior add default options could easily per model basis well eg var mymodel backbonemodelextend sync wrap backbonesync function sync method model options newoptions optionsextend return sync method model newoptions friday june alex sharp wrote currently way control setting set global level problem models need use others nt backbone allows redefine model collection ideal reimplement behavior method really want alter one setting essentially want even better solution actually might ability override behavior model property reply email directly view github", "d": "6/2012"}, {"body": "nice thanks suggestion super helpful nt aware experiment solution thanks", "d": "6/2012"}, {"body": "looking nt actually think work backbonesync method currently take option looks global setting problem set elsewhere want able disable oneoff basis mutating global state risking potential race conditions attached patch potential solution problem thanks", "d": "6/2012"}, {"body": "wookiehangover sorry somehow missed comment fairly specific use case perfect example overwrite backbonesync entirely support handle custom emulatehttp behavior way actually dealing right patch nt want rewrite whole method really want set setting via local argument rather mutating global state copy pasting entire backbonesync method base class marginally better patching method ifwhen want upgrade backbone need remember update methods note upgrade scenario would nt overwrite local patch drop new backbonejs file overwriting method separate file another solution pointed mcarey documentcloud base model custom emulatehttp sync method inherit models need yea actually discussed seems pretty hackish start inheriting base class something probably included module behavior javascript problem anything probably worth asking allowing overriding via local config option deliberate design decision use case backbone team encountered yet thanks", "d": "6/2012"}, {"body": "yep yep sorry took long", "d": "6/2012"}, {"body": "hello peetertomberg indeed expected behavior find discussion issues", "d": "6/2012"}, {"body": "quite right thanks hswolff", "d": "6/2012"}, {"body": "thank much replies", "d": "6/2012"}, {"body": "molily thanks opening issue run similar issues passing option always solved info found docs", "d": "6/2012"}, {"body": "reopening one since proposed fix nt work work another one branch", "d": "6/2012"}, {"body": "thanks issue edwardmsmith success callback something easily worked around filtering new models also appears serverside project could describe briefly using backbone models", "d": "6/2012"}, {"body": "asyncparallel callback function passed job execute callback inform async job completed either successfully error depending whether pass error callbacks job collected returned final callback option asyncparallel code snippet executed passing results job array async used either server browser case attempting write code runs environments easily worked around yet elegant could testing whether model new specific case think collection garbage user working set models retrieved server additional models created client yet persisted end result couple collections things delete things createupdate collection set things delete new persisted fetched server case nt want said see sides argument workaround onerous elegant could", "d": "6/2012"}, {"body": "thanks use case nt see reason success callback nt called nt really done extensive work destroying new models jashkenas reason execute success callback new models", "d": "6/2012"}, {"body": "yep silly call new model first place probably indicates bug application logic still nt see harm triggering callback one passed", "d": "6/2012"}, {"body": "looking code actually makes bit straightforward obviates need besides nicely consistent submit patch later", "d": "6/2012"}, {"body": "jashkenas silly call destroy new model first place probably indicates bug application logic explain makes perfect sense really find hard conceive situation app may generate number unpersisted models get added various collections used various views point app might want dispose orderly way make lot opinionated statements library worked hard nonopinionated", "d": "6/2012"}, {"body": "make lot opinionated statements library worked hard nonopinionated trying helpful semantics means delete model server like means persist model server application knows model exist server yet trying delete server error remove unpersisted model call", "d": "6/2012"}, {"body": "works want remove model collection remove model collection destroy model semantically different opinion destroy conceptually valid nonpersisted model persisted model", "d": "6/2012"}, {"body": "hi jmm thanks issue change events callback method signature model options whereas change attribute model value options thinking situation desirable use callback types change events would helpful options always passed position never encountered situation using handler events desirable think encapsulates information callbacks complete listening nt need listen vice versa change attr pass new value attr name model passed anyway attr name want new value trivial call modelget attr current setup straighforward way get attr name seems callback received attr name instead value would open dynamic possibilities using callbacks multiple attributes correct attribute name accessible handler think good handlers explicitly handling one attribute otherwise event used since care one attribute already know name", "d": "6/2012"}, {"body": "never events always get fired however choose handle passing options instance", "d": "6/2012"}, {"body": "thanks", "d": "6/2012"}, {"body": "actually code example maybe like calling backbonecollectionprototypeinitialize problem see collectioninitialize takes two params first array collections pass something array one empty model result way check remove line call fetch still empty model collection look like", "d": "6/2012"}, {"body": "morganrallen correct takes array models options object arguments string collection add interpreting string model adding see one model collection", "d": "6/2012"}, {"body": "ok obliged call otherwise server never called put seems method called two times second times empty sure", "d": "6/2012"}, {"body": "code initialize called twice certain stack trace see call coming", "d": "6/2012"}, {"body": "ok bad model also used another view therefore another instance collection initialized seems ok thanks", "d": "6/2012"}, {"body": "talk coworker seems misunderstood delegate talked specific situation decided using estopimmediatepropagation going best alternative nt continue tree thanks input understanding alternatives definitely something easily circumvented nt necessary backbone handle", "d": "6/2012"}, {"body": "going close one reproducible time please comment reproduce reopen", "d": "6/2012"}, {"body": "hi chuangbo see firefox returns encoded version hash nt seen event duplication see encoded hash get chance post jsfiddlejsbin demonstrating route triggered twice", "d": "6/2012"}, {"body": "thank braddunbar triggered twice use ones click link", "d": "6/2012"}, {"body": "thanks chuangbo helps lot", "d": "6/2012"}, {"body": "given either pattern acceptable store options throw away think best backbone stay flexible possible late views let leave option management user routers models etc", "d": "6/2012"}, {"body": "thanks suggestion zamiang mock location object introduced mock history object included test coverage routerhistory functionality requires great deal work think well way", "d": "6/2012"}, {"body": "awesome thanks addressing seemed like something core contributor stubbing windowlocation clever luck testing pushstate true pushstate unsupported browsers scenario breakage could unknowingly trip many sites using backbone", "d": "6/2012"}, {"body": "nt gotten far yet certainly possible current setup", "d": "6/2012"}, {"body": "confused change clarity discussion urls assuming router root nt specified understand correctly change backbone redirecting agree incorrect root set default nt understand correct behaviour instead redirect looks like want query param become part root section url instead encoded put fragment", "d": "6/2012"}, {"body": "dmnd pretty common misunderstanding please take moment look url spec consequences recommendation spec bottom page best explanation found example query params parsed server part url fragment whereas example thus recommended practical behavior", "d": "6/2012"}, {"body": "zamiang thanks response understand anything hash fragment sent server send query parameters server downside using fallback hash fragment browsers nt support pushstate though nt pathname sent server either problem query param sent server pathname nt either existing behaviour everything url root available use router confusing change pathname available use router query param pathname well fragment reordered perhaps understand reasoning better use case demonstrated complicated behaviour useful", "d": "6/2012"}, {"body": "using jqueryproxy write way var someimportantinfo thisgogetimportantinfo importantargument blahfetch data b c success proxy thissuccess someimportantinfo error proxy thiserror someimportantinfo", "d": "6/2012"}, {"body": "pretty good workaround thepeg would work frameworks missing little bit", "d": "6/2012"}, {"body": "vbullinger really thank let suggest take look follow movableapp twitter stay date tips tutorial resources share", "d": "6/2012"}, {"body": "modification immutable parameters generally usual behavior libraries although understandable reasons computational costs think behavior stated clearly function documentation", "d": "6/2012"}, {"body": "maelp changed options objects copied", "d": "6/2012"}, {"body": "okay since discussion though new default behavior mutable parameters modification imo bad behavior might lead difficulttotrack bugs amp api inconsistencies also happens collectionadd modify models parameter someone wants mymodelsasattributes mycollectionadd mymodelsasattributes lt elements replaced models model model myfunctiondoingstuffwiththeattributes mymodelsasattributes lt breaks", "d": "6/2012"}, {"body": "actually models sliced several lines modification original array happening", "d": "6/2012"}, {"body": "sorry missed", "d": "6/2012"}, {"body": "vincentbriglia worth think four methods right semantics intuitively expected wasted hour trying find attribute disappeared model server still backbone model fetch", "d": "6/2012"}, {"body": "problem debugged backbonelocalstorage opened ticket jeromegnbackbonelocalstorage", "d": "6/2012"}, {"body": "think closing kinda ridiculous obnoxious one usecase led post upload want amazon redirect kindly enough adds bulshit parameters fact redirects therefore since closed go hack make happy", "d": "6/2012"}, {"body": "toots would like behavior ignore query parameters", "d": "6/2012"}, {"body": "something like way ignored need", "d": "6/2012"}, {"body": "would nt allowed match query params route strings case pushstate vs hashchange thing kind destroys idea pushstate query strings always part backbone route hashchange never parity internet explorer modern browsers would difficult impossible", "d": "6/2012"}, {"body": "matching query params route seems nonsensical first uris specified path get params taken second query params order specified would match ie compatibility hashchange vs pushstate admit nt know say without diving code would consider pr", "d": "6/2012"}, {"body": "query string matching less issue fact router ignore foobar query params setting ignore affect routing traditional applications websites indeed serialize parameter data query data acceptable routes eg parameters typically handledstripped server level modrewrite rails router etc backbone however default gets caught addition may appended many third party websites facebook instance choice accept route well rather argue semantics function query parameters propose everything url left end string ignored talk parsing later potentially add functions serialize data however compatible rest modern web parameters need ignorable without hack", "d": "6/2012"}, {"body": "huge least ignoring params problem cropped us well backbone code made production external job site started redirecting back us extra params way backbone failed difficult track unreasonable least throw error make debugging clear", "d": "6/2012"}, {"body": "go ignoring code set route fuzzy match many none query string parameters issue query string params added route inadvertently party oauth redirect", "d": "6/2012"}, {"body": "quite annoying facebook canvas apps add query strings redirects also app bookmarks left side feed page work around query strings ignored", "d": "6/2012"}, {"body": "moment use regex route purposefully ignores trailing query params", "d": "6/2012"}, {"body": "thanks jeremy explain regex route possibly document alternative backbonejsorg referring regex query string replace method martynsmith details first post", "d": "6/2012"}, {"body": "well works guess problem handling models views backbonejs going know models given collection correspond already existing html views", "d": "6/2012"}, {"body": "good question could certainly handled several ways top head either rerender list client fresher data store html match model", "d": "6/2012"}, {"body": "thanks braddunbar give shot using suggestion cheers", "d": "6/2012"}, {"body": "philosophical conflict would prevent accepted lol seriously dcuddeback raises many valid point", "d": "6/2012"}, {"body": "backbone router allow type action listen url change event trigger routed actions need intercept control trigger action reset router action created jsfiddle example blog post", "d": "6/2012"}, {"body": "ok let reopen conversation although pull request nice thoughtthrough api would helpful point", "d": "6/2012"}, {"body": "example kick conversation rough implementation whats required producing diffpatch document optimized edge cases open console see output change rerun see different results produced things consider certain cases patch produced may larger full document somewhat counter productive send patch save anything unless patch applied larger object server prefix may useful necessary due first point control granularity patch certain depth certain condition may preferred simply replace larger object rather altering individual child memberitem", "d": "6/2012"}, {"body": "bjeanes able come solution need exact thing super collection models allow associate subcollections well also need able call fetch one subcollections keeping model cid set super collection tips overcame problem would appreciated", "d": "6/2012"}, {"body": "yes push code shortly created plugin lets root collection models subcollections filter super collection filter function subcollections automatically keep sync super collections replay addremove events super collection models match filter function", "d": "6/2012"}, {"body": "awesome thanks stumble across curious see implementation jun pm bodaniel jeanesreply replygithubcom wrote yes push code shortly created plugin lets root collection models subcollections filter super collection filter function subcollections automatically keep sync super collections replay addremove events super collection models match filter function reply email directly view github", "d": "6/2012"}, {"body": "note work catch path", "d": "6/2012"}]