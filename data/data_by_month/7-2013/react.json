[{"title": "radio buttons working correctly", "body": "expected behavior would stay checked b clicked case jsfiddle similarly modified version works every subsequent click b first time helps setting timeout around works except gives flash click b less ideal", "num": "242", "d": "7/2013"}, {"title": "computed properties", "body": "one thing wanted couple times react computed properties something vaguely like ember computed properties fullname function var firstname thisget firstname var lastname thisget lastname property firstname lastname app one case would useful one prop string gets parsed elaborate object displayed currently parsing componentwillmount componentwillreceiveprops setting state works pretty well perhaps nicer way provide", "num": "240", "d": "7/2013"}, {"title": "snippet nt compile pretty jsx", "body": "currently jsx transforms indentation fails pass jshint indentation temporary solution put bad line gets worse prefer style putting new line becomes fails two additional tests comma style disabled bad line breaking sure disabled", "num": "239", "d": "7/2013"}, {"title": "attaching onclick handler causes unexpected highlighting mobile safari", "body": "yungsters recent commit makes onclick work mobile safari attaching empty handler touchstart however causes subtly different behavior dom events without react consider jsx html image tapped onclick handler attached image browser draws light gray touch highlight image highlighted compare html html entire div highlighted clicking", "num": "238", "d": "7/2013"}, {"title": "use esprimafb npm sync transforms", "body": "npm github dependency tends create installation failures nt seem happen github dependencies npm esprima", "num": "235", "d": "7/2013"}, {"title": "batching disturbs natural order execution", "body": "discovered upgrading todomvc code calls parent sets state triggering parent turn trickles child input field gets focused worked well without batching put last lines inside function pass call callback else render actually done makes useless appears new way stuff putting case solution without involving callbacks although think solution would enter contradiction nature batching prefer batching ok new way render writing apis slightly awkward", "num": "234", "d": "7/2013"}, {"title": "reactrails", "body": "guys starting holidays next week also need one projects discussing zpao one issue discussions basically idea take emberrails code use expose reactjs jsxtransformerjs assets second thing would register sprockets engine transform jsx could steal bit code using execjs run jsxtransformer already tested works ok good thing patch merged allow jsx transformation using nonnode nonbrowser js environment one hurry would start making gem restructure repo bit move gem files gems dir make necessary proper reactrails gem ready initial version time next week pr follow", "num": "231", "d": "7/2013"}, {"title": "docblock parsing fails rn", "body": "told", "num": "229", "d": "7/2013"}, {"title": "animating changes list components", "body": "useful able animate appearance disappearance elements list components add react make easy maybe something like type argument props see also may useful comparison", "num": "227", "d": "7/2013"}, {"title": "animating addingremoving single component", "body": "useful able animate appearance disappearance particular component possible animate entrances without much trouble hand using componentdidmount exits harder since elements disappear immediately componentwillunmount nt give animation time finish add react make easy see also", "num": "226", "d": "7/2013"}, {"title": "set siblings state", "body": "set state siblings suppose list item b c clicked setstate selected true wan na make siblings b c setstate selected false possible", "num": "222", "d": "7/2013"}, {"title": "tag name jsxtransformer namespaced", "body": "jsx version component field object fails error parse error line xjs tag name empty throwerror parsexjsidentifier parsexjsattribute parsexjsopeningelement parsexjselement parseprimaryexpression nvm node version manager like rvm node find github hope rtfm case even supported currently would nice feature imho familiar code come pr unfortunately", "num": "221", "d": "7/2013"}, {"title": "swap todo example one todomvc", "body": "currently example todomvc horribly broken already featurecomplete version todomvc suggest take", "num": "219", "d": "7/2013"}, {"title": "lifecycle methods broken", "body": "looks like batching broke couple lifecycle methods get passed access also however set calling methods comparison done apparently need tests", "num": "215", "d": "7/2013"}, {"title": "reactcompositecomponentmountcomponent needs tryfinally", "body": "probably always set compositelifecyclestate null else react gets confused exceptions thrown render mountcomponent etc", "num": "208", "d": "7/2013"}, {"title": "issues upcoming doc", "body": "seems busy day like drop notes seen next documentation like said would nice mention cssing key integration within existingnew examples dom differences include css camelcasing link toward form section new part dom differences currently reference section obvious enough imo selfclosing tags always ok react even elements would nt normally selfclose although might dom differences since applies every react component probably mentioned elsewhere eg obvious possible actually mentioned unless missed also valid inside goes", "num": "198", "d": "7/2013"}, {"title": "add invariant make sure pass node componentdidmount", "body": "", "num": "192", "d": "7/2013"}, {"title": "firefox div contenteditable triggers typeerror setting property getter", "body": "steps reproduce open open firefox console start typing yellow div see increasing number errors", "num": "191", "d": "7/2013"}, {"title": "oncontextmenu event", "body": "event nt exist yet", "num": "189", "d": "7/2013"}, {"title": "allow html attribute names reactdom jsx", "body": "ease starting existing mock html great feature jsx however cases html attribute exactly dom property name one caught raise error colspan attribute silently ignored property name must used instead somewhat related though jsx user happy name normalization happen transform time cutting pasting html use case important reactdom reverse mapping property name attribute name defaultdompropertyconfigjs", "num": "185", "d": "7/2013"}, {"title": "add support touchaction attribute polymer pointerevents", "body": "needs nonstandard touchaction attribute work btw nt know react nt render anything user needs custom attributes work oftb control freaks option reactdoesnotallowunknownattributtes true", "num": "184", "d": "7/2013"}, {"title": "parsing error html entity nested jsx", "body": "html entity following causes current master react jsfiddle", "num": "183", "d": "7/2013"}, {"title": "children array allow use numbers booleans", "body": "especially numbers usefull primitive types tostring ified", "num": "182", "d": "7/2013"}, {"title": "allow stringified aliases classname htmlfor", "body": "use properties quotes jsx rewrite", "num": "181", "d": "7/2013"}, {"title": "autoassigned keys conflict userspecified ones", "body": "render hello world react throws duplicatekey error second span world assigned key index div children presumably best simply avoid specifying keys would nice react could use separate namespaces different key types least provide slightly informative error message", "num": "180", "d": "7/2013"}, {"title": "maybe make sure work trigger events", "body": "came irc last night somebody working trouble testing react using test event handler amp state change use synthetic events claim best effort matching real dom events problem case code using checkbox either nt handling change event one cases jquery events nt good enough using worked might fixed nt chance test nt work works", "num": "179", "d": "7/2013"}, {"title": "setstate others parameters format", "body": "currently accidentally using throws unhelpful error would nice either throw better error accept format goes etc", "num": "175", "d": "7/2013"}, {"title": "pass rootnode componentwillunmount", "body": "like others", "num": "174", "d": "7/2013"}, {"title": "better event docs", "body": "coming would good talk events handled different patterns use pretty good job saying attach listeners top level use delegation obviously clear enough cleanup may also want mention use normal event listeners really wanted", "num": "171", "d": "7/2013"}, {"title": "foo instead verbose null foo", "body": "reactdom methods createdaliased react component instance could use beautiful concise coffeescript syntax", "num": "170", "d": "7/2013"}, {"title": "parent onclick squashed child onclick", "body": "child render parent render case apparently squash unless calls inside body way trigger parent click event kind sucks time child uses similar event needs conditional check parent also employing also somewhat related better attach event like done waiting best practices", "num": "169", "d": "7/2013"}, {"title": "fix tests using phantomjs", "body": "error phantomjs binary executable latest version phantomjs package", "num": "166", "d": "7/2013"}, {"title": "changelog repo", "body": "pretty standard open source project know github changelog support new releases feature information nt become artifact repo add somewhere also remove information downloads page valuable get noisy moving forward", "num": "165", "d": "7/2013"}, {"title": "add contributors", "body": "probably file maybe add everybody think supposed read file exists fine", "num": "164", "d": "7/2013"}, {"title": "document forms changes best practices", "body": "need", "num": "163", "d": "7/2013"}, {"title": "rename onchange onsomethingnotinthespecalready", "body": "talked breaking expectations event already exists think options best", "num": "162", "d": "7/2013"}, {"title": "animations unmounting general", "body": "context pull request fixing bootstrap modal example animation works nt obvious reason let say three divs side side middle one closes shrinking animation disappears one right moves left take place currently takes bit circumventing make work kills nice structure semantic react aiming end kind defeats purpose diff rendering technique wondering clean way maybe even new api make work well", "num": "161", "d": "7/2013"}, {"title": "bad npm package fatal error find module buildmodulesreact", "body": "installing reacttools via reactify coming directly still missing folder wrong failing build", "num": "159", "d": "7/2013"}, {"title": "support lt module key value gt", "body": "right jsx supports desugaring value interpolation would also really like support interpolation arbitrary props would allow us get rid thistransferpropsto really unfortunate api mind", "num": "158", "d": "7/2013"}, {"title": "enable mocking required modules tests", "body": "recurrent source disagreement test results within facebook given facebook consistent strategy mocking modules currently test implemented phantomjs test harness opensource repository sake experiment right way would hard decided play fire discarded assumption automocking entirely preference simply fixing tests failed lack mocking fortunately many test failures sort partly due another mitigating factor run test suite information somewhat isolated test unit nevertheless think much better job emulating mocking behavior fb codebase discussion plans cc zpao jeffmo jordwalke petehunt", "num": "155", "d": "7/2013"}, {"title": "fix failing test", "body": "name test bot would autogenerated task telling tests failing petehunt", "num": "154", "d": "7/2013"}, {"title": "figure make global available", "body": "using increasingly right used checking like nt think points actually work using browserified version react", "num": "152", "d": "7/2013"}, {"title": "missing autofocus dompropertyjs standard properties enumeration", "body": "sure bug feature", "num": "149", "d": "7/2013"}, {"title": "export createdomcomponentclass", "body": "irc today someone missing tag reactdom export createdomcomponent escape hatch", "num": "146", "d": "7/2013"}, {"title": "document mouseenter mouseleave event handling page", "body": "", "num": "142", "d": "7/2013"}, {"body": "happens change event never triggers b react nt get chance restore checked state", "d": "7/2013"}, {"body": "paging yungsters", "d": "7/2013"}, {"body": "use regular functions dependencies fullname function var firstname thispropsfirstname var lastname thispropslastname changes reevaluated called ui updated", "d": "7/2013"}, {"body": "andreypopp downside reevaluate function even amp nt change function something complex string concat could get expensive upside computed properties expire values know dependents change downside observing changes expiring caches generally would suggest sophiebits though fact single lifecycle method catch initial props update annoying", "d": "7/2013"}, {"body": "sound like addressing rendering layer reasonable approach whenever react instance handler render markup", "d": "7/2013"}, {"body": "yes think makes sense", "d": "7/2013"}, {"body": "work well batching suggested would defined", "d": "7/2013"}, {"body": "jordwalke also suggested similar node", "d": "7/2013"}, {"body": "freaking fantastic railsspecific work sprockets environment also working would love port insta internal django integration stuff reactrails including transparent server rendering makes sense", "d": "7/2013"}, {"body": "hey jakubmal actually working right going branch repo shortly sorry duplicating work let converge single solution post mine tell sucks use actually nt written proper gem reactsource nt count probably lot wrong", "d": "7/2013"}, {"body": "alright started watching repo zpao", "d": "7/2013"}, {"body": "little bit cleanup works", "d": "7/2013"}, {"body": "awesome really looking forward soon ready use apps said would happy start helping weekend anything still todo count", "d": "7/2013"}, {"body": "jakubmal pushed react important reactsource yesterday changes jsxtransformer gem dependency work without build install reactsource locally also synced branch going end separate repo wanted work feel free start prs list todos readme biggest thing tests though think part higher pri feel free hack whatever anything help make sure maintain authorship new repo get changes standalone repo opens", "d": "7/2013"}, {"body": "mentioned wontfix thanks forcing issue jakubmal fireworks", "d": "7/2013"}, {"body": "thought right props changed reconciler creates plan carry update plan consists new markup must inserted location new items must inserted location existing items location must deleted right default behavior simply carry plan efficient way could tell native components want handle insertionsremovalsmoves particular way may include animation something like might look like var childmanager addchildren function childrenmarkup location movechildren removechildren interesting child instances addedmovedremoved also updated need api allows controlling whenhow updates occur throughout process creatingdestroyingmoving may wish update move existing childrenadd new ones may wish update addingmovement complete seems like best strategy make sure lowest level hooks exposed one ever feels completely trapped able perform particular animation feature top build sugar common things", "d": "7/2013"}, {"body": "also really hyped animation old issue spicyj concerning nt agree adding specialcases two situations bit much lots unique dynamic situations inbetween would need formal attributes really limits framework coder creativity like jordwalke idea also allows graceful degradation best part totally unobstructive could used dropin mixin kind drooling possibilities lol one thing worried parentsiblings expectation shouldshould happen duringafter animation sure worked", "d": "7/2013"}, {"body": "oops forgot earlier issue agree flexibility always better brainstorming possible new apis want simple things easy", "d": "7/2013"}, {"body": "couple features heard requests think hits chenglou comment another completely different direction take nt really address animating child components focuses property values pete hunt work animatable state transitions would call setstate several times throttling hit animation frame window also talked able implement without actually call every could use snapshot points perform single reconciliation diff calculate diff tween individual values every may possible compute two parallel using method", "d": "7/2013"}, {"body": "dealt basically stored selected state container component var container reactcreateclass getinitialstate function selected index true item given index currently selected return selected onitemclick function idx copy current selected state mutate var newselected thisstateselectedslice newselected idx newselected idx thissetstate selected newselected render function get items somehow var items thisgetitems return itemsmap function item idx return var item reactcreateclass onclick function thispropsonclick thispropsidx render function return", "d": "7/2013"}, {"body": "like andreypopp solution siblings nt know eachother children generally nt know anything parents except parent supplies props child andreypopp solution maintains proper separation", "d": "7/2013"}, {"body": "ok try thanks guys could give example jsbin", "d": "7/2013"}, {"body": "", "d": "7/2013"}, {"body": "raitucarp sorry wrote example without testing also seems reactjsfiffleintegration still react version", "d": "7/2013"}, {"body": "ok thanks andreypopp", "d": "7/2013"}, {"body": "talked several times agreed support one actually wrote code support yet meantime var component namespacecomponent thanks report", "d": "7/2013"}, {"body": "see", "d": "7/2013"}, {"body": "start holidays next week try take stab still wo nt resolved", "d": "7/2013"}, {"body": "vjeux zpao think based commit facebookesprima lot new commits master either need make branch facebookesprima update version esprima used react vjeux said irc fix really oneliner maybe guys facebookesprima want tests apart really easy", "d": "7/2013"}, {"body": "jeffmo esprima side obviously want make sure change fine internally take jakubmal feel free open prs facebookesprima fbharmony branch use internally react npm git dependency issues point tarball rev packagejson think intentionally lag behind master since done considerable work branch though jeffmo knows better almost certainly want tests nt add tests react specific ones want add internally point react new rev", "d": "7/2013"}, {"body": "think mostly fine would like us continue using xml semantics want go road instead rather see us use la", "d": "7/2013"}, {"body": "jakubmal said nt hard pretty sure one liner", "d": "7/2013"}, {"body": "going opposed would allow us separate meaning syntax output compilation pipeline leave mean decision compiler nice would pretty reasonable parameterize compiler reasonable default terms deciding something like desugar ie compile maybe hell maybe even go making fairly hardtoreverse decision want jsx namespacing always tied memberexpression else would mean", "d": "7/2013"}, {"body": "late voice opinion sure implementing namespace good idea three reasons necessary maybe shortsighted nt see benefit fact latter shorter requires absolutely nothing extra learn get entirely optional feature get documented presents mental hurdle developers anything else jsx already getting weird eyes every time gets mentioned even though repeated throughout documentation optional jsx javascript ie lots opportunities shape dom fits js might good idea reminds typical templating engine trying hard emulate stuff plus say write translates would help making jsx optional learn backward way remember vanilla js nsdatepicker conforms jsx compiles much logic write", "d": "7/2013"}, {"body": "well necessary need document least tutorial might mentioned somewhere deeper suggest magic nt make sense jsx coupled dependency tool suggested something extremely simple like translate appviewscounter suggested simply include dot allowed char tag name whole tag name including dots copy amp pasted resulting js believe nt wider implications commit reserving dot case still left colon might help say situations hassle let leave", "d": "7/2013"}, {"body": "update porting todomvc example submitted actual project done use version instead unless guys find example heavy", "d": "7/2013"}, {"body": "sure understand code master says var nextprops thisprops thispendingprops null nextprops thispendingprops nextprops set thispendingprops mutated performcomponentupdate shouldcomponentupdate returns true directly performupdateifnecessary function shouldcomponentupdate returns false", "d": "7/2013"}, {"body": "may jumped gun trying get reduced test case fails far make passing test cases", "d": "7/2013"}, {"body": "experienced keep digging", "d": "7/2013"}, {"body": "ok nt related batching actually ageold objects passed byref problem case hitting object storing data coming server sometimes server say update number stored object set objecttest rerender object prop test case demonstrating problem pass shouldupdate correct values function var propsweredifferent var count best way work around probably pull much set property props component instead", "d": "7/2013"}, {"body": "fwiw nt bug react something aware js jsx makes little less obvious", "d": "7/2013"}, {"body": "fixed upcoming thanks improved synthetic events thanks reporting providing test case", "d": "7/2013"}, {"body": "awesome thanks", "d": "7/2013"}, {"body": "thumbsup sure want core necessarily least actually use fb ways mixing events seems like good potential candidate", "d": "7/2013"}, {"body": "something talking yesterday actually copypaste html one use cases came want careful making jsx transformer magical think fixing capitalization bit far direction good idea short term plan probably make sure warn see things probably meant camelcased completely sure end longer term though chances right around corner going make changes yet thanks filing keep updated figure", "d": "7/2013"}, {"body": "throw two cents think camelcase way go inconsistent part would remain uncapped stuff like stay capped would reasoning behind would js look like applies current style mapping eg also see css becoming important part react future way easier mention docs already every style name dom attribute camelcased list special cases sake respecting domcss naming convention longer applies work confusing explain maybe nt copy paste enough currently accepting alllowercase would look like mean accidentally pass instead kind hard spot", "d": "7/2013"}, {"body": "think copy paste existing html definitely nice feature silently ignoring unknown dom properties seems lead confusion perhaps reactdom could setattribute props nt know", "d": "7/2013"}, {"body": "discussed supporting gets really complicated custom components javascript case sensitive jsx actually javascript even though looks like html p", "d": "7/2013"}, {"body": "yea unfortunate feels like something able make work say jeffmo", "d": "7/2013"}, {"body": "zpao jsx unsupport id properties html tag thx", "d": "7/2013"}, {"body": "unsupported since react took attribute purposes able use", "d": "7/2013"}, {"body": "could give simple use case render numbers interesting reason may want booleans rendered strings", "d": "7/2013"}, {"body": "sorry fault add booleans nt know thank", "d": "7/2013"}, {"body": "include sample code would like work", "d": "7/2013"}, {"body": "nt use jsx prefer coffeescript projected reactdom methods react see write object properties stringified use closure compiler advanced mode nt use mapped properties class works also words property names supported even", "d": "7/2013"}, {"body": "thanks report dynamic array would still warning provide key guess happen provide explicit keys static set nt need case need better error message suggest would even better namespace autoassigned keys", "d": "7/2013"}, {"body": "zpao check nt react problem", "d": "7/2013"}, {"body": "jquery change nt event nt blame robert thinking work perfectly reasonable assumption probably end wontfixing wanted make sure something file", "d": "7/2013"}, {"body": "using minified react package unminified", "d": "7/2013"}, {"body": "minified error message unminified", "d": "7/2013"}, {"body": "try unminified get helpful error message bug", "d": "7/2013"}, {"body": "ok error message still sucks least getting messages correct build thanks report", "d": "7/2013"}, {"body": "jordwalke thoughts since proposed api nt support gcc key crushing whatever could go either way api convenient prevents object allocation simple case familiar also makes function bit flexible typically constraints liberating camp", "d": "7/2013"}, {"body": "clarify tomocchino brought habit backbone libraries also camp accepting format mere idea much prefer simple error message line get", "d": "7/2013"}, {"body": "seems pretty reasonable really trivial change sure would break expectations elsewhere", "d": "7/2013"}, {"body": "seems reasonable jordwalke", "d": "7/2013"}, {"body": "would nice convenient way import set variables scope", "d": "7/2013"}, {"body": "li div reactdom got enumerate tags going use christopher vjeux chedeau facebook engineer sat jul jordan w notifications githubcom wrote would nice convenient way import set variables scope reply email directly view github", "d": "7/2013"}, {"body": "something pretty similar bunch discussion may find interesting", "d": "7/2013"}, {"body": "react coffeescript flavoured looks dazzlingly", "d": "7/2013"}, {"body": "example usually want var bigbutton reactcreateclass childhandleclick function e alert big button clicked thispropsonbigbuttonclick render function return general current react api components nt anything nt tell said react automatically forward many good reasons reason nt want forward nt want expose part api get decide everything contract offer client code including whether want accept prop means reason wanted forward rather inner kind autoforwarding would result click handler getting placed two different nodes unintentionally reason control invoked may wish current api complete control regarding check null would first ask intend optional required required say invoke present required another api mind kind stuff", "d": "7/2013"}, {"body": "makes lots sense thanks nt api mind guess still thinking terms old html let get straight say biginput component wrapper around normal text input plus classes traditional dom manipulation mentality feel free register input event something else act upon react best practices need specify inside biginput whole set events accept eg change keypress click etc basically discard every dom event unless asking rather possible prompted ask question kind small paradigm change", "d": "7/2013"}, {"body": "want blindly forward properties return thistransferpropsto nt remember overriding ones set though christopher vjeux chedeau facebook engineer jul pm cheng lou notifications githubcom wrote makes lots sense thanks nt api mind guess still thinking terms old html let get straight say biginput component wrapper around normal text input plus classes traditional dom manipulation mentality feel free register input change event something else act upon react best practices need specify inside biginput whole set events accept eg change keypress click etc prompted ask question kind small paradigm change reply email directly view github", "d": "7/2013"}, {"body": "yeah know wondering best practice react wanted confirm jordwalke wrote overriding classes union child parent declarations every attribute come across prioritize child", "d": "7/2013"}, {"body": "regarding best practices usually use component dumb wrapper around dom node also applies classnames etc frameworks may decide automatically forward attributes downward initial appeal kind thing framework default could cause lot confusion unexpected attributes end low level dom nodes ten levels hierarchy would suggest use use conservatively low level ui components intend component building accept complete set dom attributes would words nt use easy way forward two attributes wanted component api consist use truly want component implement complete api dom component possibly fan building focused components expose smallest possible api like making sure component software nt bite chew disclaimer find works rules thumb", "d": "7/2013"}, {"body": "informative thanks", "d": "7/2013"}, {"body": "", "d": "7/2013"}, {"body": "anyone point migrate docs dex github petehunt yungsters", "d": "7/2013"}, {"body": "included well best practices", "d": "7/2013"}, {"body": "awesome", "d": "7/2013"}, {"body": "", "d": "7/2013"}, {"body": "paulshen many long discussions truly care spec preserving utility knowledge experience think web developers obtained tell people use would involve polyfilling browsers ie breaking apart imo api sucks spec browsers designed us tell people use want react opinionated", "d": "7/2013"}, {"body": "opinionated call something else", "d": "7/2013"}, {"body": "yungsters completely disagree version onchange definitely people want named different event people already know concerned staying within spec concerned staying backwardscompatible change onchange behave differently violated user expectations event behaves hard earn trust back", "d": "7/2013"}, {"body": "shipped onchange closing task", "d": "7/2013"}, {"body": "really great question discussed heard several interesting proposals new apsi allow us express animations definitely working going forward current belief would best form api layered top declarative api heart react currently animations functional well suited react current api many animations elegantly expressed using css rules react current api also well suited types animations difficult express functionally take effort may require implement love see api allows us express happens less functional animations functionaldeclarative way feel free send gists simplest cases ideas one proposal may worth considering imagine upon transitioning states dom mutations occur result may passed separate declarative animation configuration could instruct dom reconciler update different classes dom attributesstyles example could central place framework intercept dom mutations make work fairly easily one nice thing proposed api might give us power pierce encapsulation boundary subcomponents without ever leaking implementation details able animate implementation details subcomponents without ever assuming anything nature one tradeoff api anticipate able perform animations easily anticipate difficulty getting animations exactly want millisecond precision also types animation apis provide situations animated properties nt pierce encapsulation boundary would simply invoke state transitions within let reconciler rest work always may performance issues proper throttling may also useful", "d": "7/2013"}, {"body": "sounds like good news definitely think webapps isshould moving toward animated interactions individual components coherent unit worries situation dom reconciliated affect rest flow take todomvc example ignoring design react animation api would achieve followings task dragged around tasks move accordingly temporarily fill spot previously occupied dragged task task completed removed falls tasks move hell maybe even one another like people moving forward queue really buying idea react think natural progression express html potentially css animation javascript love smoothness css animation todomvc showed kind animated elements normal jscss frameworks still constrained minimal eye candies color transition applying checkmark x button growing bigger hover bland frankly feel like webgrade apps much love web reiterate worried given react albeit extremely clever diff rendering technique framework gets constrained aspect ui know would sick api somehow achieve two kind animated interactions directly top existing todomvc without altering structure app animations get ubiquitous nt interfere actual sketching app", "d": "7/2013"}, {"body": "totally agree", "d": "7/2013"}, {"body": "far animations unmounting goes usually toggle shown visible prop owner component instead unmounting directly since transition first finally unmount ymmv far animations general goes prepared example pretty performant way tween state interpret touch gestures animate performant way let know helpful", "d": "7/2013"}, {"body": "running issue one reacttools npm pushes build believe zpao fixed npm someone update reactify depend latest version reacttools believe fixed confirm", "d": "7/2013"}, {"body": "cool installing directly via reactify still reactify requires going anyway tilde rules maybe dumb question need clear npm cache something thanks quick response might well code waiting fireworks", "d": "7/2013"}, {"body": "still seeing issue like get fixed want try reactify well", "d": "7/2013"}, {"body": "interestingly reactify nt even rely build output need bin folder transformation another npm module reactjs getting build directory", "d": "7/2013"}, {"body": "oh really good point want immediate hacky fix change js use strict var react require buildmodulesreact var visitors require vendorfbtransformvisitors transformvisitors var transform require vendorfbtransformlibtransform transform moduleexports react react transform function code return transform visitorsreact code code viola", "d": "7/2013"}, {"body": "gruntreact could work reactify maybe find time pull one days reactify sent iphone jul pm peter conerly notifications githubcom wrote oh really good point want immediate hacky fix change nodemodulesreactifynodemodulesreacttoolsmainjs use strict var react require buildmodulesreact var visitors require vendorfbtransformvisitors transformvisitors var transform require vendorfbtransformlibtransform transform moduleexports react react transform function code return transform visitorsreact code code viola reply email directly view github", "d": "7/2013"}, {"body": "jordwalke pconerly also make work testing without clearing cache worked machine published must cleared cache process probably bump", "d": "7/2013"}, {"body": "zpao cool nt know confirmed fixed", "d": "7/2013"}, {"body": "interpolating module name seems hard since nt know whether reactdom local variables ca nt accessed string name anyway also related", "d": "7/2013"}, {"body": "could rewritten sure want way would work p", "d": "7/2013"}, {"body": "thinking module reference actual function would rewritten", "d": "7/2013"}, {"body": "thrown around couple ideas able forward several properties either way couple interesting questions come position props effect semantics order specified effect precedence would transformed like end result tradeoff consider transform becoming lightweight lineforline nonopinionated one might even depend runtime library merging seems little straightforward", "d": "7/2013"}, {"body": "get rid interpolation last example exactly transform nt see something hard coded list expects variable scope also say transform puts code could always something like", "d": "7/2013"}, {"body": "hides nt occur could christopher vjeux chedeau facebook engineer jul pm paul shannessy notifications githubcom wrote get rid interpolation last example exactly transform nt see something hard coded list expects variable scope also say transform puts code could always something like jul pm christopher chedeau notifications githubcom wrote thinking module reference actual function var module reactcreateclass lt module would rewritten var module reactcreateclass module reply email directly view github reply email directly view github", "d": "7/2013"}, {"body": "zpao may still value allowing interpolation tag name nt know would enforce closing tag matches", "d": "7/2013"}, {"body": "jordwalke definitely value comes cost making jsx harder understand think cost high case easily rewritten hardly seems worth complexity", "d": "7/2013"}, {"body": "concerned adding complexity jsx sake syntax need keep dead simple imo unless need add expressive power think forwarding multiple properties useful use case could desugared extra param reactdom", "d": "7/2013"}, {"body": "ok tests passed internally opensource dumpcache noop double dom property injection happening throwing", "d": "7/2013"}, {"body": "ideas take plunge forking browserify lot things become possible proper mocking system would relatively easy implement could redefine browserify implementation nt think fork browserify instead looks like transform source files testing manipulate swapping mocked version necessary either using browserify source transform prefer principle least mocking would work module packaging tool ie would depend browserify interface need investigate think really promising", "d": "7/2013"}, {"body": "perhaps return global object also ensure module required requiring longer strictly necessary proposed contents module question would call first time maybe maybe make entry point browserify", "d": "7/2013"}, {"body": "yea already entry point somewhere less worried getting rid uses thought synced already", "d": "7/2013"}, {"body": "purge uses global react codebase since already polyfill console mostly think one ref around somewhere", "d": "7/2013"}, {"body": "one reservation purging tricky get global object reliably way works browser server goto technique far obvious especially strict mode considerations", "d": "7/2013"}, {"body": "benjamn phunt last one couple tests though probably change already", "d": "7/2013"}, {"body": "adding couple known missing properties thanks heads fwiw see valuable serverside rendering browsers supposed look property page load adding clientside rendering nt anything", "d": "7/2013"}, {"body": "nt least chrome check", "d": "7/2013"}, {"body": "added others", "d": "7/2013"}, {"body": "ping", "d": "7/2013"}, {"body": "looking first clue seems compiling files travis locally", "d": "7/2013"}, {"body": "opened commoner issue address among problems", "d": "7/2013"}, {"body": "granted placeholder todo already mind exactly looking regarding documentation", "d": "7/2013"}, {"body": "adding page saying write following code reactcreateclass props somenumber reactprops christopher vjeux chedeau facebook engineer jun pm eric clemmons notifications githubcom wrote granted placeholder todo already mind exactly looking regarding documentation reply email directly view github", "d": "7/2013"}, {"body": "doc", "d": "7/2013"}, {"body": "working closing", "d": "7/2013"}, {"body": "would noise bad nt first specially structured besides using would assume anything explicitly passed transform script would nt check docblock", "d": "7/2013"}, {"body": "long docblock work right actually nt strict format long first docblock file nt tested nt work let know assumption anything passed works good one make nt actually work right", "d": "7/2013"}, {"body": "oh interesting dealt related problem emacs files back definitely thing commoner handle intelligently", "d": "7/2013"}, {"body": "tie broken according length filename shortest wins much hack", "d": "7/2013"}, {"body": "things like ca nt new problem", "d": "7/2013"}, {"body": "zpao good call turns coffeescript nt try super clever", "d": "7/2013"}, {"body": "fixed commoner", "d": "7/2013"}, {"body": "following right let close someone comes real proposal", "d": "7/2013"}, {"body": "fixed", "d": "7/2013"}, {"body": "actually going", "d": "7/2013"}, {"body": "fixed although mention still trouble getting file names show test output", "d": "7/2013"}, {"body": "would extremely useful several instances explicitly call helper function litter template references everything work correctly ca nt think function would expected run outside component scope", "d": "7/2013"}, {"body": "already committed comes", "d": "7/2013"}, {"body": "closed thanks", "d": "7/2013"}, {"body": "awesome", "d": "7/2013"}, {"body": "months release let close", "d": "7/2013"}, {"body": "shameless pretty relevant plug syntax ideas discussed actually close something working called reactivecoffee embedded dsl building reactive uis scalable manner", "d": "7/2013"}, {"body": "closed right zpao spicyj", "d": "7/2013"}, {"body": "yea talk polyfills needed browser suppport polyfills oh man clownshoes section", "d": "7/2013"}, {"body": "new docs mention", "d": "7/2013"}, {"body": "see", "d": "7/2013"}]